
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	58 4c 05 20 b5 1b 01 00 c7 ba 02 00 89 1b 01 00     XL. ............
    8010:	89 1b 01 00 89 1b 01 00 89 1b 01 00 89 1b 01 00     ................
	...
    802c:	19 15 01 00 89 1b 01 00 00 00 00 00 b5 14 01 00     ................
    803c:	89 1b 01 00                                         ....

00008040 <_irq_vector_table>:
    8040:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8050:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8060:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8070:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8080:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8090:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    80a0:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    80b0:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    80c0:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    80d0:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    80e0:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    80f0:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8100:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8110:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8120:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8130:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8140:	a5 15 01 00 a5 15 01 00 a5 15 01 00 a5 15 01 00     ................
    8150:	a5 15 01 00                                         ....

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2iz>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    88fc:	d215      	bcs.n	892a <__aeabi_d2iz+0x36>
    88fe:	d511      	bpl.n	8924 <__aeabi_d2iz+0x30>
    8900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8908:	d912      	bls.n	8930 <__aeabi_d2iz+0x3c>
    890a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    890e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    891a:	fa23 f002 	lsr.w	r0, r3, r2
    891e:	bf18      	it	ne
    8920:	4240      	negne	r0, r0
    8922:	4770      	bx	lr
    8924:	f04f 0000 	mov.w	r0, #0
    8928:	4770      	bx	lr
    892a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    892e:	d105      	bne.n	893c <__aeabi_d2iz+0x48>
    8930:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    8934:	bf08      	it	eq
    8936:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    893a:	4770      	bx	lr
    893c:	f04f 0000 	mov.w	r0, #0
    8940:	4770      	bx	lr
    8942:	bf00      	nop

00008944 <__aeabi_d2f>:
    8944:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8948:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    894c:	bf24      	itt	cs
    894e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8952:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8956:	d90d      	bls.n	8974 <__aeabi_d2f+0x30>
    8958:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    895c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8960:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8964:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8968:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    896c:	bf08      	it	eq
    896e:	f020 0001 	biceq.w	r0, r0, #1
    8972:	4770      	bx	lr
    8974:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8978:	d121      	bne.n	89be <__aeabi_d2f+0x7a>
    897a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    897e:	bfbc      	itt	lt
    8980:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8984:	4770      	bxlt	lr
    8986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    898a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    898e:	f1c2 0218 	rsb	r2, r2, #24
    8992:	f1c2 0c20 	rsb	ip, r2, #32
    8996:	fa10 f30c 	lsls.w	r3, r0, ip
    899a:	fa20 f002 	lsr.w	r0, r0, r2
    899e:	bf18      	it	ne
    89a0:	f040 0001 	orrne.w	r0, r0, #1
    89a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    89a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    89ac:	fa03 fc0c 	lsl.w	ip, r3, ip
    89b0:	ea40 000c 	orr.w	r0, r0, ip
    89b4:	fa23 f302 	lsr.w	r3, r3, r2
    89b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    89bc:	e7cc      	b.n	8958 <__aeabi_d2f+0x14>
    89be:	ea7f 5362 	mvns.w	r3, r2, asr #21
    89c2:	d107      	bne.n	89d4 <__aeabi_d2f+0x90>
    89c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    89c8:	bf1e      	ittt	ne
    89ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    89ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    89d2:	4770      	bxne	lr
    89d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    89d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    89dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89e0:	4770      	bx	lr
    89e2:	bf00      	nop

000089e4 <__aeabi_frsub>:
    89e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    89e8:	e002      	b.n	89f0 <__addsf3>
    89ea:	bf00      	nop

000089ec <__aeabi_fsub>:
    89ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089f0 <__addsf3>:
    89f0:	0042      	lsls	r2, r0, #1
    89f2:	bf1f      	itttt	ne
    89f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89f8:	ea92 0f03 	teqne	r2, r3
    89fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8a00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a04:	d06a      	beq.n	8adc <__addsf3+0xec>
    8a06:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8a0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8a0e:	bfc1      	itttt	gt
    8a10:	18d2      	addgt	r2, r2, r3
    8a12:	4041      	eorgt	r1, r0
    8a14:	4048      	eorgt	r0, r1
    8a16:	4041      	eorgt	r1, r0
    8a18:	bfb8      	it	lt
    8a1a:	425b      	neglt	r3, r3
    8a1c:	2b19      	cmp	r3, #25
    8a1e:	bf88      	it	hi
    8a20:	4770      	bxhi	lr
    8a22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8a26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8a2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8a2e:	bf18      	it	ne
    8a30:	4240      	negne	r0, r0
    8a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8a36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8a3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    8a3e:	bf18      	it	ne
    8a40:	4249      	negne	r1, r1
    8a42:	ea92 0f03 	teq	r2, r3
    8a46:	d03f      	beq.n	8ac8 <__addsf3+0xd8>
    8a48:	f1a2 0201 	sub.w	r2, r2, #1
    8a4c:	fa41 fc03 	asr.w	ip, r1, r3
    8a50:	eb10 000c 	adds.w	r0, r0, ip
    8a54:	f1c3 0320 	rsb	r3, r3, #32
    8a58:	fa01 f103 	lsl.w	r1, r1, r3
    8a5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a60:	d502      	bpl.n	8a68 <__addsf3+0x78>
    8a62:	4249      	negs	r1, r1
    8a64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a6c:	d313      	bcc.n	8a96 <__addsf3+0xa6>
    8a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a72:	d306      	bcc.n	8a82 <__addsf3+0x92>
    8a74:	0840      	lsrs	r0, r0, #1
    8a76:	ea4f 0131 	mov.w	r1, r1, rrx
    8a7a:	f102 0201 	add.w	r2, r2, #1
    8a7e:	2afe      	cmp	r2, #254	; 0xfe
    8a80:	d251      	bcs.n	8b26 <__addsf3+0x136>
    8a82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a8a:	bf08      	it	eq
    8a8c:	f020 0001 	biceq.w	r0, r0, #1
    8a90:	ea40 0003 	orr.w	r0, r0, r3
    8a94:	4770      	bx	lr
    8a96:	0049      	lsls	r1, r1, #1
    8a98:	eb40 0000 	adc.w	r0, r0, r0
    8a9c:	3a01      	subs	r2, #1
    8a9e:	bf28      	it	cs
    8aa0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8aa4:	d2ed      	bcs.n	8a82 <__addsf3+0x92>
    8aa6:	fab0 fc80 	clz	ip, r0
    8aaa:	f1ac 0c08 	sub.w	ip, ip, #8
    8aae:	ebb2 020c 	subs.w	r2, r2, ip
    8ab2:	fa00 f00c 	lsl.w	r0, r0, ip
    8ab6:	bfaa      	itet	ge
    8ab8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8abc:	4252      	neglt	r2, r2
    8abe:	4318      	orrge	r0, r3
    8ac0:	bfbc      	itt	lt
    8ac2:	40d0      	lsrlt	r0, r2
    8ac4:	4318      	orrlt	r0, r3
    8ac6:	4770      	bx	lr
    8ac8:	f092 0f00 	teq	r2, #0
    8acc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8ad0:	bf06      	itte	eq
    8ad2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8ad6:	3201      	addeq	r2, #1
    8ad8:	3b01      	subne	r3, #1
    8ada:	e7b5      	b.n	8a48 <__addsf3+0x58>
    8adc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8ae0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8ae4:	bf18      	it	ne
    8ae6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8aea:	d021      	beq.n	8b30 <__addsf3+0x140>
    8aec:	ea92 0f03 	teq	r2, r3
    8af0:	d004      	beq.n	8afc <__addsf3+0x10c>
    8af2:	f092 0f00 	teq	r2, #0
    8af6:	bf08      	it	eq
    8af8:	4608      	moveq	r0, r1
    8afa:	4770      	bx	lr
    8afc:	ea90 0f01 	teq	r0, r1
    8b00:	bf1c      	itt	ne
    8b02:	2000      	movne	r0, #0
    8b04:	4770      	bxne	lr
    8b06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8b0a:	d104      	bne.n	8b16 <__addsf3+0x126>
    8b0c:	0040      	lsls	r0, r0, #1
    8b0e:	bf28      	it	cs
    8b10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8b14:	4770      	bx	lr
    8b16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8b1a:	bf3c      	itt	cc
    8b1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8b20:	4770      	bxcc	lr
    8b22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8b26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8b2e:	4770      	bx	lr
    8b30:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8b34:	bf16      	itet	ne
    8b36:	4608      	movne	r0, r1
    8b38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8b3c:	4601      	movne	r1, r0
    8b3e:	0242      	lsls	r2, r0, #9
    8b40:	bf06      	itte	eq
    8b42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8b46:	ea90 0f01 	teqeq	r0, r1
    8b4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8b4e:	4770      	bx	lr

00008b50 <__aeabi_ui2f>:
    8b50:	f04f 0300 	mov.w	r3, #0
    8b54:	e004      	b.n	8b60 <__aeabi_i2f+0x8>
    8b56:	bf00      	nop

00008b58 <__aeabi_i2f>:
    8b58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b5c:	bf48      	it	mi
    8b5e:	4240      	negmi	r0, r0
    8b60:	ea5f 0c00 	movs.w	ip, r0
    8b64:	bf08      	it	eq
    8b66:	4770      	bxeq	lr
    8b68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b6c:	4601      	mov	r1, r0
    8b6e:	f04f 0000 	mov.w	r0, #0
    8b72:	e01c      	b.n	8bae <__aeabi_l2f+0x2a>

00008b74 <__aeabi_ul2f>:
    8b74:	ea50 0201 	orrs.w	r2, r0, r1
    8b78:	bf08      	it	eq
    8b7a:	4770      	bxeq	lr
    8b7c:	f04f 0300 	mov.w	r3, #0
    8b80:	e00a      	b.n	8b98 <__aeabi_l2f+0x14>
    8b82:	bf00      	nop

00008b84 <__aeabi_l2f>:
    8b84:	ea50 0201 	orrs.w	r2, r0, r1
    8b88:	bf08      	it	eq
    8b8a:	4770      	bxeq	lr
    8b8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b90:	d502      	bpl.n	8b98 <__aeabi_l2f+0x14>
    8b92:	4240      	negs	r0, r0
    8b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b98:	ea5f 0c01 	movs.w	ip, r1
    8b9c:	bf02      	ittt	eq
    8b9e:	4684      	moveq	ip, r0
    8ba0:	4601      	moveq	r1, r0
    8ba2:	2000      	moveq	r0, #0
    8ba4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8ba8:	bf08      	it	eq
    8baa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8bae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8bb2:	fabc f28c 	clz	r2, ip
    8bb6:	3a08      	subs	r2, #8
    8bb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8bbc:	db10      	blt.n	8be0 <__aeabi_l2f+0x5c>
    8bbe:	fa01 fc02 	lsl.w	ip, r1, r2
    8bc2:	4463      	add	r3, ip
    8bc4:	fa00 fc02 	lsl.w	ip, r0, r2
    8bc8:	f1c2 0220 	rsb	r2, r2, #32
    8bcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8bd0:	fa20 f202 	lsr.w	r2, r0, r2
    8bd4:	eb43 0002 	adc.w	r0, r3, r2
    8bd8:	bf08      	it	eq
    8bda:	f020 0001 	biceq.w	r0, r0, #1
    8bde:	4770      	bx	lr
    8be0:	f102 0220 	add.w	r2, r2, #32
    8be4:	fa01 fc02 	lsl.w	ip, r1, r2
    8be8:	f1c2 0220 	rsb	r2, r2, #32
    8bec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8bf0:	fa21 f202 	lsr.w	r2, r1, r2
    8bf4:	eb43 0002 	adc.w	r0, r3, r2
    8bf8:	bf08      	it	eq
    8bfa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bfe:	4770      	bx	lr

00008c00 <__aeabi_fmul>:
    8c00:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8c04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8c08:	bf1e      	ittt	ne
    8c0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8c0e:	ea92 0f0c 	teqne	r2, ip
    8c12:	ea93 0f0c 	teqne	r3, ip
    8c16:	d06f      	beq.n	8cf8 <__aeabi_fmul+0xf8>
    8c18:	441a      	add	r2, r3
    8c1a:	ea80 0c01 	eor.w	ip, r0, r1
    8c1e:	0240      	lsls	r0, r0, #9
    8c20:	bf18      	it	ne
    8c22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8c26:	d01e      	beq.n	8c66 <__aeabi_fmul+0x66>
    8c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8c2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8c30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8c34:	fba0 3101 	umull	r3, r1, r0, r1
    8c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8c3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8c40:	bf3e      	ittt	cc
    8c42:	0049      	lslcc	r1, r1, #1
    8c44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8c48:	005b      	lslcc	r3, r3, #1
    8c4a:	ea40 0001 	orr.w	r0, r0, r1
    8c4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c52:	2afd      	cmp	r2, #253	; 0xfd
    8c54:	d81d      	bhi.n	8c92 <__aeabi_fmul+0x92>
    8c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c5e:	bf08      	it	eq
    8c60:	f020 0001 	biceq.w	r0, r0, #1
    8c64:	4770      	bx	lr
    8c66:	f090 0f00 	teq	r0, #0
    8c6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c6e:	bf08      	it	eq
    8c70:	0249      	lsleq	r1, r1, #9
    8c72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c7a:	3a7f      	subs	r2, #127	; 0x7f
    8c7c:	bfc2      	ittt	gt
    8c7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c86:	4770      	bxgt	lr
    8c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c8c:	f04f 0300 	mov.w	r3, #0
    8c90:	3a01      	subs	r2, #1
    8c92:	dc5d      	bgt.n	8d50 <__aeabi_fmul+0x150>
    8c94:	f112 0f19 	cmn.w	r2, #25
    8c98:	bfdc      	itt	le
    8c9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c9e:	4770      	bxle	lr
    8ca0:	f1c2 0200 	rsb	r2, r2, #0
    8ca4:	0041      	lsls	r1, r0, #1
    8ca6:	fa21 f102 	lsr.w	r1, r1, r2
    8caa:	f1c2 0220 	rsb	r2, r2, #32
    8cae:	fa00 fc02 	lsl.w	ip, r0, r2
    8cb2:	ea5f 0031 	movs.w	r0, r1, rrx
    8cb6:	f140 0000 	adc.w	r0, r0, #0
    8cba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8cbe:	bf08      	it	eq
    8cc0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8cc4:	4770      	bx	lr
    8cc6:	f092 0f00 	teq	r2, #0
    8cca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8cce:	bf02      	ittt	eq
    8cd0:	0040      	lsleq	r0, r0, #1
    8cd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8cd6:	3a01      	subeq	r2, #1
    8cd8:	d0f9      	beq.n	8cce <__aeabi_fmul+0xce>
    8cda:	ea40 000c 	orr.w	r0, r0, ip
    8cde:	f093 0f00 	teq	r3, #0
    8ce2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8ce6:	bf02      	ittt	eq
    8ce8:	0049      	lsleq	r1, r1, #1
    8cea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8cee:	3b01      	subeq	r3, #1
    8cf0:	d0f9      	beq.n	8ce6 <__aeabi_fmul+0xe6>
    8cf2:	ea41 010c 	orr.w	r1, r1, ip
    8cf6:	e78f      	b.n	8c18 <__aeabi_fmul+0x18>
    8cf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cfc:	ea92 0f0c 	teq	r2, ip
    8d00:	bf18      	it	ne
    8d02:	ea93 0f0c 	teqne	r3, ip
    8d06:	d00a      	beq.n	8d1e <__aeabi_fmul+0x11e>
    8d08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8d0c:	bf18      	it	ne
    8d0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8d12:	d1d8      	bne.n	8cc6 <__aeabi_fmul+0xc6>
    8d14:	ea80 0001 	eor.w	r0, r0, r1
    8d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d1c:	4770      	bx	lr
    8d1e:	f090 0f00 	teq	r0, #0
    8d22:	bf17      	itett	ne
    8d24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8d28:	4608      	moveq	r0, r1
    8d2a:	f091 0f00 	teqne	r1, #0
    8d2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8d32:	d014      	beq.n	8d5e <__aeabi_fmul+0x15e>
    8d34:	ea92 0f0c 	teq	r2, ip
    8d38:	d101      	bne.n	8d3e <__aeabi_fmul+0x13e>
    8d3a:	0242      	lsls	r2, r0, #9
    8d3c:	d10f      	bne.n	8d5e <__aeabi_fmul+0x15e>
    8d3e:	ea93 0f0c 	teq	r3, ip
    8d42:	d103      	bne.n	8d4c <__aeabi_fmul+0x14c>
    8d44:	024b      	lsls	r3, r1, #9
    8d46:	bf18      	it	ne
    8d48:	4608      	movne	r0, r1
    8d4a:	d108      	bne.n	8d5e <__aeabi_fmul+0x15e>
    8d4c:	ea80 0001 	eor.w	r0, r0, r1
    8d50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d5c:	4770      	bx	lr
    8d5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d66:	4770      	bx	lr

00008d68 <__aeabi_fdiv>:
    8d68:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d70:	bf1e      	ittt	ne
    8d72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d76:	ea92 0f0c 	teqne	r2, ip
    8d7a:	ea93 0f0c 	teqne	r3, ip
    8d7e:	d069      	beq.n	8e54 <__aeabi_fdiv+0xec>
    8d80:	eba2 0203 	sub.w	r2, r2, r3
    8d84:	ea80 0c01 	eor.w	ip, r0, r1
    8d88:	0249      	lsls	r1, r1, #9
    8d8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d8e:	d037      	beq.n	8e00 <__aeabi_fdiv+0x98>
    8d90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8da0:	428b      	cmp	r3, r1
    8da2:	bf38      	it	cc
    8da4:	005b      	lslcc	r3, r3, #1
    8da6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8daa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8dae:	428b      	cmp	r3, r1
    8db0:	bf24      	itt	cs
    8db2:	1a5b      	subcs	r3, r3, r1
    8db4:	ea40 000c 	orrcs.w	r0, r0, ip
    8db8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8dbc:	bf24      	itt	cs
    8dbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8dc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8dc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8dca:	bf24      	itt	cs
    8dcc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8dd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8dd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8dd8:	bf24      	itt	cs
    8dda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8dde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8de2:	011b      	lsls	r3, r3, #4
    8de4:	bf18      	it	ne
    8de6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8dea:	d1e0      	bne.n	8dae <__aeabi_fdiv+0x46>
    8dec:	2afd      	cmp	r2, #253	; 0xfd
    8dee:	f63f af50 	bhi.w	8c92 <__aeabi_fmul+0x92>
    8df2:	428b      	cmp	r3, r1
    8df4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8df8:	bf08      	it	eq
    8dfa:	f020 0001 	biceq.w	r0, r0, #1
    8dfe:	4770      	bx	lr
    8e00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8e04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8e08:	327f      	adds	r2, #127	; 0x7f
    8e0a:	bfc2      	ittt	gt
    8e0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8e10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8e14:	4770      	bxgt	lr
    8e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8e1a:	f04f 0300 	mov.w	r3, #0
    8e1e:	3a01      	subs	r2, #1
    8e20:	e737      	b.n	8c92 <__aeabi_fmul+0x92>
    8e22:	f092 0f00 	teq	r2, #0
    8e26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8e2a:	bf02      	ittt	eq
    8e2c:	0040      	lsleq	r0, r0, #1
    8e2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8e32:	3a01      	subeq	r2, #1
    8e34:	d0f9      	beq.n	8e2a <__aeabi_fdiv+0xc2>
    8e36:	ea40 000c 	orr.w	r0, r0, ip
    8e3a:	f093 0f00 	teq	r3, #0
    8e3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8e42:	bf02      	ittt	eq
    8e44:	0049      	lsleq	r1, r1, #1
    8e46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8e4a:	3b01      	subeq	r3, #1
    8e4c:	d0f9      	beq.n	8e42 <__aeabi_fdiv+0xda>
    8e4e:	ea41 010c 	orr.w	r1, r1, ip
    8e52:	e795      	b.n	8d80 <__aeabi_fdiv+0x18>
    8e54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e58:	ea92 0f0c 	teq	r2, ip
    8e5c:	d108      	bne.n	8e70 <__aeabi_fdiv+0x108>
    8e5e:	0242      	lsls	r2, r0, #9
    8e60:	f47f af7d 	bne.w	8d5e <__aeabi_fmul+0x15e>
    8e64:	ea93 0f0c 	teq	r3, ip
    8e68:	f47f af70 	bne.w	8d4c <__aeabi_fmul+0x14c>
    8e6c:	4608      	mov	r0, r1
    8e6e:	e776      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e70:	ea93 0f0c 	teq	r3, ip
    8e74:	d104      	bne.n	8e80 <__aeabi_fdiv+0x118>
    8e76:	024b      	lsls	r3, r1, #9
    8e78:	f43f af4c 	beq.w	8d14 <__aeabi_fmul+0x114>
    8e7c:	4608      	mov	r0, r1
    8e7e:	e76e      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e84:	bf18      	it	ne
    8e86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e8a:	d1ca      	bne.n	8e22 <__aeabi_fdiv+0xba>
    8e8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e90:	f47f af5c 	bne.w	8d4c <__aeabi_fmul+0x14c>
    8e94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e98:	f47f af3c 	bne.w	8d14 <__aeabi_fmul+0x114>
    8e9c:	e75f      	b.n	8d5e <__aeabi_fmul+0x15e>
    8e9e:	bf00      	nop

00008ea0 <__aeabi_ldivmod>:
    8ea0:	b97b      	cbnz	r3, 8ec2 <__aeabi_ldivmod+0x22>
    8ea2:	b972      	cbnz	r2, 8ec2 <__aeabi_ldivmod+0x22>
    8ea4:	2900      	cmp	r1, #0
    8ea6:	bfbe      	ittt	lt
    8ea8:	2000      	movlt	r0, #0
    8eaa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8eae:	e006      	blt.n	8ebe <__aeabi_ldivmod+0x1e>
    8eb0:	bf08      	it	eq
    8eb2:	2800      	cmpeq	r0, #0
    8eb4:	bf1c      	itt	ne
    8eb6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8eba:	f04f 30ff 	movne.w	r0, #4294967295
    8ebe:	f000 b875 	b.w	8fac <__aeabi_idiv0>
    8ec2:	f1ad 0c08 	sub.w	ip, sp, #8
    8ec6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8eca:	2900      	cmp	r1, #0
    8ecc:	db09      	blt.n	8ee2 <__aeabi_ldivmod+0x42>
    8ece:	2b00      	cmp	r3, #0
    8ed0:	db1a      	blt.n	8f08 <__aeabi_ldivmod+0x68>
    8ed2:	f000 f942 	bl	915a <__udivmoddi4>
    8ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
    8eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ede:	b004      	add	sp, #16
    8ee0:	4770      	bx	lr
    8ee2:	4240      	negs	r0, r0
    8ee4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ee8:	2b00      	cmp	r3, #0
    8eea:	db1b      	blt.n	8f24 <__aeabi_ldivmod+0x84>
    8eec:	f000 f935 	bl	915a <__udivmoddi4>
    8ef0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ef8:	b004      	add	sp, #16
    8efa:	4240      	negs	r0, r0
    8efc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f00:	4252      	negs	r2, r2
    8f02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f06:	4770      	bx	lr
    8f08:	4252      	negs	r2, r2
    8f0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f0e:	f000 f924 	bl	915a <__udivmoddi4>
    8f12:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1a:	b004      	add	sp, #16
    8f1c:	4240      	negs	r0, r0
    8f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8f22:	4770      	bx	lr
    8f24:	4252      	negs	r2, r2
    8f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f2a:	f000 f916 	bl	915a <__udivmoddi4>
    8f2e:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f36:	b004      	add	sp, #16
    8f38:	4252      	negs	r2, r2
    8f3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8f3e:	4770      	bx	lr

00008f40 <__aeabi_uldivmod>:
    8f40:	b953      	cbnz	r3, 8f58 <__aeabi_uldivmod+0x18>
    8f42:	b94a      	cbnz	r2, 8f58 <__aeabi_uldivmod+0x18>
    8f44:	2900      	cmp	r1, #0
    8f46:	bf08      	it	eq
    8f48:	2800      	cmpeq	r0, #0
    8f4a:	bf1c      	itt	ne
    8f4c:	f04f 31ff 	movne.w	r1, #4294967295
    8f50:	f04f 30ff 	movne.w	r0, #4294967295
    8f54:	f000 b82a 	b.w	8fac <__aeabi_idiv0>
    8f58:	f1ad 0c08 	sub.w	ip, sp, #8
    8f5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f60:	f000 f8fb 	bl	915a <__udivmoddi4>
    8f64:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f6c:	b004      	add	sp, #16
    8f6e:	4770      	bx	lr

00008f70 <__aeabi_d2ulz>:
    8f70:	b5d0      	push	{r4, r6, r7, lr}
    8f72:	2200      	movs	r2, #0
    8f74:	4b0b      	ldr	r3, [pc, #44]	; (8fa4 <__aeabi_d2ulz+0x34>)
    8f76:	4606      	mov	r6, r0
    8f78:	460f      	mov	r7, r1
    8f7a:	f7ff faa9 	bl	84d0 <__aeabi_dmul>
    8f7e:	f000 f89f 	bl	90c0 <__aeabi_d2uiz>
    8f82:	4604      	mov	r4, r0
    8f84:	f7ff fa2a 	bl	83dc <__aeabi_ui2d>
    8f88:	2200      	movs	r2, #0
    8f8a:	4b07      	ldr	r3, [pc, #28]	; (8fa8 <__aeabi_d2ulz+0x38>)
    8f8c:	f7ff faa0 	bl	84d0 <__aeabi_dmul>
    8f90:	4602      	mov	r2, r0
    8f92:	460b      	mov	r3, r1
    8f94:	4630      	mov	r0, r6
    8f96:	4639      	mov	r1, r7
    8f98:	f7ff f8e2 	bl	8160 <__aeabi_dsub>
    8f9c:	f000 f890 	bl	90c0 <__aeabi_d2uiz>
    8fa0:	4621      	mov	r1, r4
    8fa2:	bdd0      	pop	{r4, r6, r7, pc}
    8fa4:	3df00000 	.word	0x3df00000
    8fa8:	41f00000 	.word	0x41f00000

00008fac <__aeabi_idiv0>:
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__gedf2>:
    8fb0:	f04f 3cff 	mov.w	ip, #4294967295
    8fb4:	e006      	b.n	8fc4 <__cmpdf2+0x4>
    8fb6:	bf00      	nop

00008fb8 <__ledf2>:
    8fb8:	f04f 0c01 	mov.w	ip, #1
    8fbc:	e002      	b.n	8fc4 <__cmpdf2+0x4>
    8fbe:	bf00      	nop

00008fc0 <__cmpdf2>:
    8fc0:	f04f 0c01 	mov.w	ip, #1
    8fc4:	f84d cd04 	str.w	ip, [sp, #-4]!
    8fc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8fd4:	bf18      	it	ne
    8fd6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8fda:	d01b      	beq.n	9014 <__cmpdf2+0x54>
    8fdc:	b001      	add	sp, #4
    8fde:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8fe2:	bf0c      	ite	eq
    8fe4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8fe8:	ea91 0f03 	teqne	r1, r3
    8fec:	bf02      	ittt	eq
    8fee:	ea90 0f02 	teqeq	r0, r2
    8ff2:	2000      	moveq	r0, #0
    8ff4:	4770      	bxeq	lr
    8ff6:	f110 0f00 	cmn.w	r0, #0
    8ffa:	ea91 0f03 	teq	r1, r3
    8ffe:	bf58      	it	pl
    9000:	4299      	cmppl	r1, r3
    9002:	bf08      	it	eq
    9004:	4290      	cmpeq	r0, r2
    9006:	bf2c      	ite	cs
    9008:	17d8      	asrcs	r0, r3, #31
    900a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    900e:	f040 0001 	orr.w	r0, r0, #1
    9012:	4770      	bx	lr
    9014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    901c:	d102      	bne.n	9024 <__cmpdf2+0x64>
    901e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9022:	d107      	bne.n	9034 <__cmpdf2+0x74>
    9024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    902c:	d1d6      	bne.n	8fdc <__cmpdf2+0x1c>
    902e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9032:	d0d3      	beq.n	8fdc <__cmpdf2+0x1c>
    9034:	f85d 0b04 	ldr.w	r0, [sp], #4
    9038:	4770      	bx	lr
    903a:	bf00      	nop

0000903c <__aeabi_cdrcmple>:
    903c:	4684      	mov	ip, r0
    903e:	4610      	mov	r0, r2
    9040:	4662      	mov	r2, ip
    9042:	468c      	mov	ip, r1
    9044:	4619      	mov	r1, r3
    9046:	4663      	mov	r3, ip
    9048:	e000      	b.n	904c <__aeabi_cdcmpeq>
    904a:	bf00      	nop

0000904c <__aeabi_cdcmpeq>:
    904c:	b501      	push	{r0, lr}
    904e:	f7ff ffb7 	bl	8fc0 <__cmpdf2>
    9052:	2800      	cmp	r0, #0
    9054:	bf48      	it	mi
    9056:	f110 0f00 	cmnmi.w	r0, #0
    905a:	bd01      	pop	{r0, pc}

0000905c <__aeabi_dcmpeq>:
    905c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9060:	f7ff fff4 	bl	904c <__aeabi_cdcmpeq>
    9064:	bf0c      	ite	eq
    9066:	2001      	moveq	r0, #1
    9068:	2000      	movne	r0, #0
    906a:	f85d fb08 	ldr.w	pc, [sp], #8
    906e:	bf00      	nop

00009070 <__aeabi_dcmplt>:
    9070:	f84d ed08 	str.w	lr, [sp, #-8]!
    9074:	f7ff ffea 	bl	904c <__aeabi_cdcmpeq>
    9078:	bf34      	ite	cc
    907a:	2001      	movcc	r0, #1
    907c:	2000      	movcs	r0, #0
    907e:	f85d fb08 	ldr.w	pc, [sp], #8
    9082:	bf00      	nop

00009084 <__aeabi_dcmple>:
    9084:	f84d ed08 	str.w	lr, [sp, #-8]!
    9088:	f7ff ffe0 	bl	904c <__aeabi_cdcmpeq>
    908c:	bf94      	ite	ls
    908e:	2001      	movls	r0, #1
    9090:	2000      	movhi	r0, #0
    9092:	f85d fb08 	ldr.w	pc, [sp], #8
    9096:	bf00      	nop

00009098 <__aeabi_dcmpge>:
    9098:	f84d ed08 	str.w	lr, [sp, #-8]!
    909c:	f7ff ffce 	bl	903c <__aeabi_cdrcmple>
    90a0:	bf94      	ite	ls
    90a2:	2001      	movls	r0, #1
    90a4:	2000      	movhi	r0, #0
    90a6:	f85d fb08 	ldr.w	pc, [sp], #8
    90aa:	bf00      	nop

000090ac <__aeabi_dcmpgt>:
    90ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    90b0:	f7ff ffc4 	bl	903c <__aeabi_cdrcmple>
    90b4:	bf34      	ite	cc
    90b6:	2001      	movcc	r0, #1
    90b8:	2000      	movcs	r0, #0
    90ba:	f85d fb08 	ldr.w	pc, [sp], #8
    90be:	bf00      	nop

000090c0 <__aeabi_d2uiz>:
    90c0:	004a      	lsls	r2, r1, #1
    90c2:	d211      	bcs.n	90e8 <__aeabi_d2uiz+0x28>
    90c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    90c8:	d211      	bcs.n	90ee <__aeabi_d2uiz+0x2e>
    90ca:	d50d      	bpl.n	90e8 <__aeabi_d2uiz+0x28>
    90cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    90d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    90d4:	d40e      	bmi.n	90f4 <__aeabi_d2uiz+0x34>
    90d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    90da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    90de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    90e2:	fa23 f002 	lsr.w	r0, r3, r2
    90e6:	4770      	bx	lr
    90e8:	f04f 0000 	mov.w	r0, #0
    90ec:	4770      	bx	lr
    90ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    90f2:	d102      	bne.n	90fa <__aeabi_d2uiz+0x3a>
    90f4:	f04f 30ff 	mov.w	r0, #4294967295
    90f8:	4770      	bx	lr
    90fa:	f04f 0000 	mov.w	r0, #0
    90fe:	4770      	bx	lr

00009100 <__aeabi_dcmpun>:
    9100:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9104:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9108:	d102      	bne.n	9110 <__aeabi_dcmpun+0x10>
    910a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    910e:	d10a      	bne.n	9126 <__aeabi_dcmpun+0x26>
    9110:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9114:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    9118:	d102      	bne.n	9120 <__aeabi_dcmpun+0x20>
    911a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    911e:	d102      	bne.n	9126 <__aeabi_dcmpun+0x26>
    9120:	f04f 0000 	mov.w	r0, #0
    9124:	4770      	bx	lr
    9126:	f04f 0001 	mov.w	r0, #1
    912a:	4770      	bx	lr

0000912c <__aeabi_d2lz>:
    912c:	b538      	push	{r3, r4, r5, lr}
    912e:	2200      	movs	r2, #0
    9130:	2300      	movs	r3, #0
    9132:	4604      	mov	r4, r0
    9134:	460d      	mov	r5, r1
    9136:	f7ff ff9b 	bl	9070 <__aeabi_dcmplt>
    913a:	b928      	cbnz	r0, 9148 <__aeabi_d2lz+0x1c>
    913c:	4620      	mov	r0, r4
    913e:	4629      	mov	r1, r5
    9140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9144:	f7ff bf14 	b.w	8f70 <__aeabi_d2ulz>
    9148:	4620      	mov	r0, r4
    914a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    914e:	f7ff ff0f 	bl	8f70 <__aeabi_d2ulz>
    9152:	4240      	negs	r0, r0
    9154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9158:	bd38      	pop	{r3, r4, r5, pc}

0000915a <__udivmoddi4>:
    915a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    915e:	4686      	mov	lr, r0
    9160:	468c      	mov	ip, r1
    9162:	4608      	mov	r0, r1
    9164:	9e08      	ldr	r6, [sp, #32]
    9166:	4615      	mov	r5, r2
    9168:	4674      	mov	r4, lr
    916a:	4619      	mov	r1, r3
    916c:	2b00      	cmp	r3, #0
    916e:	f040 80c1 	bne.w	92f4 <__udivmoddi4+0x19a>
    9172:	4285      	cmp	r5, r0
    9174:	fab2 f282 	clz	r2, r2
    9178:	d945      	bls.n	9206 <__udivmoddi4+0xac>
    917a:	b14a      	cbz	r2, 9190 <__udivmoddi4+0x36>
    917c:	f1c2 0320 	rsb	r3, r2, #32
    9180:	fa00 fc02 	lsl.w	ip, r0, r2
    9184:	4095      	lsls	r5, r2
    9186:	4094      	lsls	r4, r2
    9188:	fa2e f303 	lsr.w	r3, lr, r3
    918c:	ea43 0c0c 	orr.w	ip, r3, ip
    9190:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9194:	b2a8      	uxth	r0, r5
    9196:	0c23      	lsrs	r3, r4, #16
    9198:	fbbc f8fe 	udiv	r8, ip, lr
    919c:	fb0e cc18 	mls	ip, lr, r8, ip
    91a0:	fb08 f900 	mul.w	r9, r8, r0
    91a4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    91a8:	4599      	cmp	r9, r3
    91aa:	d928      	bls.n	91fe <__udivmoddi4+0xa4>
    91ac:	18eb      	adds	r3, r5, r3
    91ae:	f108 37ff 	add.w	r7, r8, #4294967295
    91b2:	d204      	bcs.n	91be <__udivmoddi4+0x64>
    91b4:	4599      	cmp	r9, r3
    91b6:	d902      	bls.n	91be <__udivmoddi4+0x64>
    91b8:	f1a8 0702 	sub.w	r7, r8, #2
    91bc:	442b      	add	r3, r5
    91be:	eba3 0309 	sub.w	r3, r3, r9
    91c2:	b2a4      	uxth	r4, r4
    91c4:	fbb3 fcfe 	udiv	ip, r3, lr
    91c8:	fb0e 331c 	mls	r3, lr, ip, r3
    91cc:	fb0c f000 	mul.w	r0, ip, r0
    91d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91d4:	42a0      	cmp	r0, r4
    91d6:	d914      	bls.n	9202 <__udivmoddi4+0xa8>
    91d8:	192c      	adds	r4, r5, r4
    91da:	f10c 33ff 	add.w	r3, ip, #4294967295
    91de:	d204      	bcs.n	91ea <__udivmoddi4+0x90>
    91e0:	42a0      	cmp	r0, r4
    91e2:	d902      	bls.n	91ea <__udivmoddi4+0x90>
    91e4:	f1ac 0302 	sub.w	r3, ip, #2
    91e8:	442c      	add	r4, r5
    91ea:	1a24      	subs	r4, r4, r0
    91ec:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    91f0:	b11e      	cbz	r6, 91fa <__udivmoddi4+0xa0>
    91f2:	40d4      	lsrs	r4, r2
    91f4:	2300      	movs	r3, #0
    91f6:	6034      	str	r4, [r6, #0]
    91f8:	6073      	str	r3, [r6, #4]
    91fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91fe:	4647      	mov	r7, r8
    9200:	e7dd      	b.n	91be <__udivmoddi4+0x64>
    9202:	4663      	mov	r3, ip
    9204:	e7f1      	b.n	91ea <__udivmoddi4+0x90>
    9206:	bb92      	cbnz	r2, 926e <__udivmoddi4+0x114>
    9208:	1b43      	subs	r3, r0, r5
    920a:	2101      	movs	r1, #1
    920c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9210:	b2af      	uxth	r7, r5
    9212:	0c20      	lsrs	r0, r4, #16
    9214:	fbb3 fcfe 	udiv	ip, r3, lr
    9218:	fb0e 331c 	mls	r3, lr, ip, r3
    921c:	fb0c f807 	mul.w	r8, ip, r7
    9220:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    9224:	4598      	cmp	r8, r3
    9226:	d961      	bls.n	92ec <__udivmoddi4+0x192>
    9228:	18eb      	adds	r3, r5, r3
    922a:	f10c 30ff 	add.w	r0, ip, #4294967295
    922e:	d204      	bcs.n	923a <__udivmoddi4+0xe0>
    9230:	4598      	cmp	r8, r3
    9232:	d902      	bls.n	923a <__udivmoddi4+0xe0>
    9234:	f1ac 0002 	sub.w	r0, ip, #2
    9238:	442b      	add	r3, r5
    923a:	eba3 0308 	sub.w	r3, r3, r8
    923e:	b2a4      	uxth	r4, r4
    9240:	fbb3 fcfe 	udiv	ip, r3, lr
    9244:	fb0e 331c 	mls	r3, lr, ip, r3
    9248:	fb0c f707 	mul.w	r7, ip, r7
    924c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9250:	42a7      	cmp	r7, r4
    9252:	d94d      	bls.n	92f0 <__udivmoddi4+0x196>
    9254:	192c      	adds	r4, r5, r4
    9256:	f10c 33ff 	add.w	r3, ip, #4294967295
    925a:	d204      	bcs.n	9266 <__udivmoddi4+0x10c>
    925c:	42a7      	cmp	r7, r4
    925e:	d902      	bls.n	9266 <__udivmoddi4+0x10c>
    9260:	f1ac 0302 	sub.w	r3, ip, #2
    9264:	442c      	add	r4, r5
    9266:	1be4      	subs	r4, r4, r7
    9268:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    926c:	e7c0      	b.n	91f0 <__udivmoddi4+0x96>
    926e:	f1c2 0320 	rsb	r3, r2, #32
    9272:	4095      	lsls	r5, r2
    9274:	4094      	lsls	r4, r2
    9276:	fa20 f103 	lsr.w	r1, r0, r3
    927a:	fa2e f303 	lsr.w	r3, lr, r3
    927e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9282:	4090      	lsls	r0, r2
    9284:	b2af      	uxth	r7, r5
    9286:	4303      	orrs	r3, r0
    9288:	fbb1 fcfe 	udiv	ip, r1, lr
    928c:	fb0e 101c 	mls	r0, lr, ip, r1
    9290:	0c19      	lsrs	r1, r3, #16
    9292:	fb0c f807 	mul.w	r8, ip, r7
    9296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    929a:	4588      	cmp	r8, r1
    929c:	d922      	bls.n	92e4 <__udivmoddi4+0x18a>
    929e:	1869      	adds	r1, r5, r1
    92a0:	f10c 30ff 	add.w	r0, ip, #4294967295
    92a4:	d204      	bcs.n	92b0 <__udivmoddi4+0x156>
    92a6:	4588      	cmp	r8, r1
    92a8:	d902      	bls.n	92b0 <__udivmoddi4+0x156>
    92aa:	f1ac 0002 	sub.w	r0, ip, #2
    92ae:	4429      	add	r1, r5
    92b0:	eba1 0108 	sub.w	r1, r1, r8
    92b4:	b29b      	uxth	r3, r3
    92b6:	fbb1 fcfe 	udiv	ip, r1, lr
    92ba:	fb0e 111c 	mls	r1, lr, ip, r1
    92be:	fb0c f707 	mul.w	r7, ip, r7
    92c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    92c6:	429f      	cmp	r7, r3
    92c8:	d90e      	bls.n	92e8 <__udivmoddi4+0x18e>
    92ca:	18eb      	adds	r3, r5, r3
    92cc:	f10c 31ff 	add.w	r1, ip, #4294967295
    92d0:	d204      	bcs.n	92dc <__udivmoddi4+0x182>
    92d2:	429f      	cmp	r7, r3
    92d4:	d902      	bls.n	92dc <__udivmoddi4+0x182>
    92d6:	f1ac 0102 	sub.w	r1, ip, #2
    92da:	442b      	add	r3, r5
    92dc:	1bdb      	subs	r3, r3, r7
    92de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    92e2:	e793      	b.n	920c <__udivmoddi4+0xb2>
    92e4:	4660      	mov	r0, ip
    92e6:	e7e3      	b.n	92b0 <__udivmoddi4+0x156>
    92e8:	4661      	mov	r1, ip
    92ea:	e7f7      	b.n	92dc <__udivmoddi4+0x182>
    92ec:	4660      	mov	r0, ip
    92ee:	e7a4      	b.n	923a <__udivmoddi4+0xe0>
    92f0:	4663      	mov	r3, ip
    92f2:	e7b8      	b.n	9266 <__udivmoddi4+0x10c>
    92f4:	4283      	cmp	r3, r0
    92f6:	d906      	bls.n	9306 <__udivmoddi4+0x1ac>
    92f8:	b916      	cbnz	r6, 9300 <__udivmoddi4+0x1a6>
    92fa:	2100      	movs	r1, #0
    92fc:	4608      	mov	r0, r1
    92fe:	e77c      	b.n	91fa <__udivmoddi4+0xa0>
    9300:	e9c6 e000 	strd	lr, r0, [r6]
    9304:	e7f9      	b.n	92fa <__udivmoddi4+0x1a0>
    9306:	fab3 f783 	clz	r7, r3
    930a:	b98f      	cbnz	r7, 9330 <__udivmoddi4+0x1d6>
    930c:	4283      	cmp	r3, r0
    930e:	d301      	bcc.n	9314 <__udivmoddi4+0x1ba>
    9310:	4572      	cmp	r2, lr
    9312:	d808      	bhi.n	9326 <__udivmoddi4+0x1cc>
    9314:	ebbe 0402 	subs.w	r4, lr, r2
    9318:	eb60 0303 	sbc.w	r3, r0, r3
    931c:	2001      	movs	r0, #1
    931e:	469c      	mov	ip, r3
    9320:	b91e      	cbnz	r6, 932a <__udivmoddi4+0x1d0>
    9322:	2100      	movs	r1, #0
    9324:	e769      	b.n	91fa <__udivmoddi4+0xa0>
    9326:	4638      	mov	r0, r7
    9328:	e7fa      	b.n	9320 <__udivmoddi4+0x1c6>
    932a:	e9c6 4c00 	strd	r4, ip, [r6]
    932e:	e7f8      	b.n	9322 <__udivmoddi4+0x1c8>
    9330:	f1c7 0c20 	rsb	ip, r7, #32
    9334:	40bb      	lsls	r3, r7
    9336:	fa0e f507 	lsl.w	r5, lr, r7
    933a:	fa22 f40c 	lsr.w	r4, r2, ip
    933e:	fa2e f10c 	lsr.w	r1, lr, ip
    9342:	40ba      	lsls	r2, r7
    9344:	431c      	orrs	r4, r3
    9346:	fa20 f30c 	lsr.w	r3, r0, ip
    934a:	40b8      	lsls	r0, r7
    934c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    9350:	4301      	orrs	r1, r0
    9352:	fa1f fe84 	uxth.w	lr, r4
    9356:	fbb3 f8f9 	udiv	r8, r3, r9
    935a:	fb09 3018 	mls	r0, r9, r8, r3
    935e:	0c0b      	lsrs	r3, r1, #16
    9360:	fb08 fa0e 	mul.w	sl, r8, lr
    9364:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9368:	459a      	cmp	sl, r3
    936a:	d940      	bls.n	93ee <__udivmoddi4+0x294>
    936c:	18e3      	adds	r3, r4, r3
    936e:	f108 30ff 	add.w	r0, r8, #4294967295
    9372:	d204      	bcs.n	937e <__udivmoddi4+0x224>
    9374:	459a      	cmp	sl, r3
    9376:	d902      	bls.n	937e <__udivmoddi4+0x224>
    9378:	f1a8 0002 	sub.w	r0, r8, #2
    937c:	4423      	add	r3, r4
    937e:	eba3 030a 	sub.w	r3, r3, sl
    9382:	b289      	uxth	r1, r1
    9384:	fbb3 f8f9 	udiv	r8, r3, r9
    9388:	fb09 3318 	mls	r3, r9, r8, r3
    938c:	fb08 fe0e 	mul.w	lr, r8, lr
    9390:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9394:	458e      	cmp	lr, r1
    9396:	d92c      	bls.n	93f2 <__udivmoddi4+0x298>
    9398:	1861      	adds	r1, r4, r1
    939a:	f108 33ff 	add.w	r3, r8, #4294967295
    939e:	d204      	bcs.n	93aa <__udivmoddi4+0x250>
    93a0:	458e      	cmp	lr, r1
    93a2:	d902      	bls.n	93aa <__udivmoddi4+0x250>
    93a4:	f1a8 0302 	sub.w	r3, r8, #2
    93a8:	4421      	add	r1, r4
    93aa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    93ae:	eba1 010e 	sub.w	r1, r1, lr
    93b2:	fba0 9802 	umull	r9, r8, r0, r2
    93b6:	4541      	cmp	r1, r8
    93b8:	46ce      	mov	lr, r9
    93ba:	4643      	mov	r3, r8
    93bc:	d302      	bcc.n	93c4 <__udivmoddi4+0x26a>
    93be:	d106      	bne.n	93ce <__udivmoddi4+0x274>
    93c0:	454d      	cmp	r5, r9
    93c2:	d204      	bcs.n	93ce <__udivmoddi4+0x274>
    93c4:	3801      	subs	r0, #1
    93c6:	ebb9 0e02 	subs.w	lr, r9, r2
    93ca:	eb68 0304 	sbc.w	r3, r8, r4
    93ce:	2e00      	cmp	r6, #0
    93d0:	d0a7      	beq.n	9322 <__udivmoddi4+0x1c8>
    93d2:	ebb5 020e 	subs.w	r2, r5, lr
    93d6:	eb61 0103 	sbc.w	r1, r1, r3
    93da:	fa01 fc0c 	lsl.w	ip, r1, ip
    93de:	fa22 f307 	lsr.w	r3, r2, r7
    93e2:	40f9      	lsrs	r1, r7
    93e4:	ea4c 0303 	orr.w	r3, ip, r3
    93e8:	e9c6 3100 	strd	r3, r1, [r6]
    93ec:	e799      	b.n	9322 <__udivmoddi4+0x1c8>
    93ee:	4640      	mov	r0, r8
    93f0:	e7c5      	b.n	937e <__udivmoddi4+0x224>
    93f2:	4643      	mov	r3, r8
    93f4:	e7d9      	b.n	93aa <__udivmoddi4+0x250>

000093f6 <strcmp>:
    93f6:	f810 2b01 	ldrb.w	r2, [r0], #1
    93fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    93fe:	2a01      	cmp	r2, #1
    9400:	bf28      	it	cs
    9402:	429a      	cmpcs	r2, r3
    9404:	d0f7      	beq.n	93f6 <strcmp>
    9406:	1ad0      	subs	r0, r2, r3
    9408:	4770      	bx	lr

0000940a <strlen>:
    940a:	4603      	mov	r3, r0
    940c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9410:	2a00      	cmp	r2, #0
    9412:	d1fb      	bne.n	940c <strlen+0x2>
    9414:	1a18      	subs	r0, r3, r0
    9416:	3801      	subs	r0, #1
    9418:	4770      	bx	lr
    941a:	0000      	movs	r0, r0
    941c:	0000      	movs	r0, r0
	...

00009420 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9422:	460c      	mov	r4, r1
  //  +3V --- RESISTOR_SERIE_NTC ----AD--- NTC --- GND


  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9424:	f7fe ffea 	bl	83fc <__aeabi_i2d>
    9428:	a325      	add	r3, pc, #148	; (adr r3, 94c0 <ntc_temperature+0xa0>)
    942a:	e9d3 2300 	ldrd	r2, r3, [r3]
    942e:	f7ff f84f 	bl	84d0 <__aeabi_dmul>
    9432:	f7ff fa87 	bl	8944 <__aeabi_d2f>
    9436:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    9438:	1e63      	subs	r3, r4, #1
    943a:	b2db      	uxtb	r3, r3
    943c:	2b02      	cmp	r3, #2
    943e:	bf96      	itet	ls
    9440:	4a27      	ldrls	r2, [pc, #156]	; (94e0 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    9442:	2000      	movhi	r0, #0
    9444:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    9448:	4629      	mov	r1, r5
    944a:	f7ff fbd9 	bl	8c00 <__aeabi_fmul>
    944e:	f7fe ffe7 	bl	8420 <__aeabi_f2d>
    9452:	4606      	mov	r6, r0
    9454:	4628      	mov	r0, r5
    9456:	460f      	mov	r7, r1
    9458:	f7fe ffe2 	bl	8420 <__aeabi_f2d>
    945c:	4602      	mov	r2, r0
    945e:	460b      	mov	r3, r1
    9460:	2000      	movs	r0, #0
    9462:	4920      	ldr	r1, [pc, #128]	; (94e4 <ntc_temperature+0xc4>)
    9464:	f7fe fe7c 	bl	8160 <__aeabi_dsub>
    9468:	4602      	mov	r2, r0
    946a:	460b      	mov	r3, r1
    946c:	4630      	mov	r0, r6
    946e:	4639      	mov	r1, r7
    9470:	f7ff f958 	bl	8724 <__aeabi_ddiv>
    9474:	f7ff fa66 	bl	8944 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    9478:	491b      	ldr	r1, [pc, #108]	; (94e8 <ntc_temperature+0xc8>)
    947a:	f7ff fc75 	bl	8d68 <__aeabi_fdiv>
    947e:	f7fe ffcf 	bl	8420 <__aeabi_f2d>
    9482:	f01d fc9f 	bl	26dc4 <log>
    9486:	a310      	add	r3, pc, #64	; (adr r3, 94c8 <ntc_temperature+0xa8>)
    9488:	e9d3 2300 	ldrd	r2, r3, [r3]
    948c:	f7ff f94a 	bl	8724 <__aeabi_ddiv>
    9490:	a30f      	add	r3, pc, #60	; (adr r3, 94d0 <ntc_temperature+0xb0>)
    9492:	e9d3 2300 	ldrd	r2, r3, [r3]
    9496:	f7fe fe65 	bl	8164 <__adddf3>
    949a:	4602      	mov	r2, r0
    949c:	460b      	mov	r3, r1
    949e:	2000      	movs	r0, #0
    94a0:	4912      	ldr	r1, [pc, #72]	; (94ec <ntc_temperature+0xcc>)
    94a2:	f7ff f93f 	bl	8724 <__aeabi_ddiv>
    94a6:	f7ff fa4d 	bl	8944 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    94aa:	f7fe ffb9 	bl	8420 <__aeabi_f2d>
    94ae:	a30a      	add	r3, pc, #40	; (adr r3, 94d8 <ntc_temperature+0xb8>)
    94b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    94b4:	f7fe fe54 	bl	8160 <__aeabi_dsub>
    94b8:	f7ff fa44 	bl	8944 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    94bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94be:	bf00      	nop
    94c0:	3a66a002 	.word	0x3a66a002
    94c4:	3f2ccdb3 	.word	0x3f2ccdb3
    94c8:	00000000 	.word	0x00000000
    94cc:	40af0200 	.word	0x40af0200
    94d0:	dcb5db83 	.word	0xdcb5db83
    94d4:	3f6b79e1 	.word	0x3f6b79e1
    94d8:	66666666 	.word	0x66666666
    94dc:	40711266 	.word	0x40711266
    94e0:	00033654 	.word	0x00033654
    94e4:	40080000 	.word	0x40080000
    94e8:	461c4000 	.word	0x461c4000
    94ec:	3ff00000 	.word	0x3ff00000

000094f0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    94f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f2:	4d64      	ldr	r5, [pc, #400]	; (9684 <bt_init+0x194>)
{
    94f4:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    94f6:	f8d5 315c 	ldr.w	r3, [r5, #348]	; 0x15c
    94fa:	6899      	ldr	r1, [r3, #8]
    94fc:	f011 0101 	ands.w	r1, r1, #1
    9500:	d11a      	bne.n	9538 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    9502:	f640 4003 	movw	r0, #3075	; 0xc03
    9506:	aa05      	add	r2, sp, #20
    9508:	f010 fd12 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f040 80b5 	bne.w	967e <bt_init+0x18e>
		hci_reset_complete(rsp);
    9514:	9805      	ldr	r0, [sp, #20]
	uint8_t status = buf->data[0];
    9516:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	b95b      	cbnz	r3, 9534 <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    951c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9520:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9524:	f002 0209 	and.w	r2, r2, #9
    9528:	e8d3 1fef 	ldaex	r1, [r3]
    952c:	e8c3 2fe4 	stlex	r4, r2, [r3]
    9530:	2c00      	cmp	r4, #0
    9532:	d1f9      	bne.n	9528 <bt_init+0x38>
		net_buf_unref(rsp);
    9534:	f017 f92c 	bl	20790 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    9538:	2100      	movs	r1, #0
    953a:	f241 0003 	movw	r0, #4099	; 0x1003
    953e:	aa05      	add	r2, sp, #20
    9540:	f010 fcf6 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    9544:	4604      	mov	r4, r0
    9546:	2800      	cmp	r0, #0
    9548:	f040 8099 	bne.w	967e <bt_init+0x18e>
	read_local_features_complete(rsp);
    954c:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    954e:	4e4e      	ldr	r6, [pc, #312]	; (9688 <bt_init+0x198>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    9550:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    9552:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9556:	f8d2 1005 	ldr.w	r1, [r2, #5]
    955a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    955c:	4618      	mov	r0, r3
    955e:	f017 f917 	bl	20790 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    9562:	4621      	mov	r1, r4
    9564:	f241 0001 	movw	r0, #4097	; 0x1001
    9568:	aa05      	add	r2, sp, #20
    956a:	f010 fce1 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    956e:	4604      	mov	r4, r0
    9570:	2800      	cmp	r0, #0
    9572:	f040 8084 	bne.w	967e <bt_init+0x18e>
	read_local_ver_complete(rsp);
    9576:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    9578:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    957a:	785a      	ldrb	r2, [r3, #1]
    957c:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    9580:	885a      	ldrh	r2, [r3, #2]
    9582:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    9586:	791a      	ldrb	r2, [r3, #4]
    9588:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    958c:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9590:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    9594:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9598:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    959c:	f017 f8f8 	bl	20790 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    95a0:	4621      	mov	r1, r4
    95a2:	f241 0002 	movw	r0, #4098	; 0x1002
    95a6:	aa05      	add	r2, sp, #20
    95a8:	f010 fcc2 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    95ac:	4604      	mov	r4, r0
    95ae:	2800      	cmp	r0, #0
    95b0:	d165      	bne.n	967e <bt_init+0x18e>
	read_supported_commands_complete(rsp);
    95b2:	9f05      	ldr	r7, [sp, #20]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    95b4:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    95b6:	1c53      	adds	r3, r2, #1
    95b8:	3241      	adds	r2, #65	; 0x41
    95ba:	4634      	mov	r4, r6
    95bc:	6818      	ldr	r0, [r3, #0]
    95be:	6859      	ldr	r1, [r3, #4]
    95c0:	3308      	adds	r3, #8
    95c2:	c403      	stmia	r4!, {r0, r1}
    95c4:	4293      	cmp	r3, r2
    95c6:	4626      	mov	r6, r4
    95c8:	d1f7      	bne.n	95ba <bt_init+0xca>
	net_buf_unref(rsp);
    95ca:	4638      	mov	r0, r7
    95cc:	f017 f8e0 	bl	20790 <net_buf_unref>
		err = prng_init();
    95d0:	f012 fa2a 	bl	1ba28 <prng_init>
		if (err) {
    95d4:	4604      	mov	r4, r0
    95d6:	2800      	cmp	r0, #0
    95d8:	d151      	bne.n	967e <bt_init+0x18e>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    95da:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    95de:	f013 0320 	ands.w	r3, r3, #32
    95e2:	d118      	bne.n	9616 <bt_init+0x126>
		LOG_WRN("Controller to host flow control not supported");
    95e4:	4a29      	ldr	r2, [pc, #164]	; (968c <bt_init+0x19c>)
    95e6:	492a      	ldr	r1, [pc, #168]	; (9690 <bt_init+0x1a0>)
    95e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    95ec:	9300      	str	r3, [sp, #0]
    95ee:	2202      	movs	r2, #2
    95f0:	f023 ffbb 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    95f4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    95f8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    95fc:	d14c      	bne.n	9698 <bt_init+0x1a8>
		LOG_ERR("Non-LE capable controller detected!");
    95fe:	4a25      	ldr	r2, [pc, #148]	; (9694 <bt_init+0x1a4>)
    9600:	4618      	mov	r0, r3
    9602:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9606:	4922      	ldr	r1, [pc, #136]	; (9690 <bt_init+0x1a0>)
    9608:	2201      	movs	r2, #1
    960a:	9300      	str	r3, [sp, #0]
    960c:	f023 ffad 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    9610:	f06f 0412 	mvn.w	r4, #18
    9614:	e033      	b.n	967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9616:	2107      	movs	r1, #7
    9618:	f640 4033 	movw	r0, #3123	; 0xc33
    961c:	f010 fc4e 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
    9620:	4606      	mov	r6, r0
    9622:	2800      	cmp	r0, #0
    9624:	f000 8140 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    9628:	2107      	movs	r1, #7
    962a:	300c      	adds	r0, #12
    962c:	f025 fffb 	bl	2f626 <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    9630:	2345      	movs	r3, #69	; 0x45
    9632:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9634:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    9636:	f8c0 4002 	str.w	r4, [r0, #2]
    963a:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    963c:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    963e:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9640:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    9642:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    9644:	4631      	mov	r1, r6
    9646:	f640 4033 	movw	r0, #3123	; 0xc33
    964a:	f010 fc71 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    964e:	4604      	mov	r4, r0
    9650:	b9a8      	cbnz	r0, 967e <bt_init+0x18e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    9652:	2101      	movs	r1, #1
    9654:	f640 4031 	movw	r0, #3121	; 0xc31
    9658:	f010 fc30 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
    965c:	4606      	mov	r6, r0
    965e:	2800      	cmp	r0, #0
    9660:	f000 8122 	beq.w	98a8 <bt_init+0x3b8>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    9664:	2101      	movs	r1, #1
    9666:	300c      	adds	r0, #12
    9668:	f025 ffec 	bl	2f644 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    966c:	4622      	mov	r2, r4
    966e:	4631      	mov	r1, r6
    9670:	f640 4031 	movw	r0, #3121	; 0xc31
    9674:	f010 fc5c 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    9678:	4604      	mov	r4, r0
    967a:	2800      	cmp	r0, #0
    967c:	d0ba      	beq.n	95f4 <bt_init+0x104>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    967e:	4620      	mov	r0, r4
    9680:	b007      	add	sp, #28
    9682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9684:	20008000 	.word	0x20008000
    9688:	20008070 	.word	0x20008070
    968c:	00036eb2 	.word	0x00036eb2
    9690:	00033234 	.word	0x00033234
    9694:	00036ee0 	.word	0x00036ee0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9698:	2100      	movs	r1, #0
    969a:	f242 0003 	movw	r0, #8195	; 0x2003
    969e:	aa05      	add	r2, sp, #20
    96a0:	f010 fc46 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    96a4:	4604      	mov	r4, r0
    96a6:	2800      	cmp	r0, #0
    96a8:	d1e9      	bne.n	967e <bt_init+0x18e>
	read_le_features_complete(rsp);
    96aa:	9b05      	ldr	r3, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96ac:	4ebe      	ldr	r6, [pc, #760]	; (99a8 <bt_init+0x4b8>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    96ae:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    96b0:	f8d2 0001 	ldr.w	r0, [r2, #1]
    96b4:	f8d2 1005 	ldr.w	r1, [r2, #5]
    96b8:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    96ba:	4618      	mov	r0, r3
    96bc:	f017 f868 	bl	20790 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    96c0:	4621      	mov	r1, r4
    96c2:	f242 0002 	movw	r0, #8194	; 0x2002
    96c6:	aa05      	add	r2, sp, #20
    96c8:	f010 fc32 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    96cc:	4604      	mov	r4, r0
    96ce:	2800      	cmp	r0, #0
    96d0:	d1d5      	bne.n	967e <bt_init+0x18e>
		le_read_buffer_size_complete(rsp);
    96d2:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    96d4:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    96d6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    96da:	b291      	uxth	r1, r2
    96dc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    96e0:	b129      	cbz	r1, 96ee <bt_init+0x1fe>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    96e2:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    96e4:	4611      	mov	r1, r2
    96e6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    96ea:	f027 fd4b 	bl	31184 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    96ee:	4620      	mov	r0, r4
    96f0:	f017 f84e 	bl	20790 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    96f4:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    96f8:	f016 0620 	ands.w	r6, r6, #32
    96fc:	d118      	bne.n	9730 <bt_init+0x240>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    96fe:	2102      	movs	r1, #2
    9700:	f640 406d 	movw	r0, #3181	; 0xc6d
    9704:	f010 fbda 	bl	19ebc <bt_hci_cmd_create>
		if (!buf) {
    9708:	4604      	mov	r4, r0
    970a:	2800      	cmp	r0, #0
    970c:	f000 80cc 	beq.w	98a8 <bt_init+0x3b8>
	return net_buf_simple_add(&buf->b, len);
    9710:	2102      	movs	r1, #2
    9712:	300c      	adds	r0, #12
    9714:	f025 ff87 	bl	2f626 <net_buf_simple_add>
		cp_le->le = 0x01;
    9718:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    971a:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    971c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    971e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9720:	4632      	mov	r2, r6
    9722:	f640 406d 	movw	r0, #3181	; 0xc6d
    9726:	f010 fc03 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    972a:	4604      	mov	r4, r0
    972c:	2800      	cmp	r0, #0
    972e:	d1a6      	bne.n	967e <bt_init+0x18e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    9730:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    9734:	071f      	lsls	r7, r3, #28
    9736:	d512      	bpl.n	975e <bt_init+0x26e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    9738:	2100      	movs	r1, #0
    973a:	f242 001c 	movw	r0, #8220	; 0x201c
    973e:	aa05      	add	r2, sp, #20
    9740:	f010 fbf6 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    9744:	4604      	mov	r4, r0
    9746:	2800      	cmp	r0, #0
    9748:	d199      	bne.n	967e <bt_init+0x18e>
		le_read_supp_states_complete(rsp);
    974a:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    974c:	68c3      	ldr	r3, [r0, #12]
    974e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    9752:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    9756:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    975a:	f017 f819 	bl	20790 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    975e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9762:	069e      	lsls	r6, r3, #26
    9764:	d524      	bpl.n	97b0 <bt_init+0x2c0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9766:	f10d 0112 	add.w	r1, sp, #18
    976a:	a804      	add	r0, sp, #16
    976c:	f010 fc56 	bl	1a01c <hci_le_read_max_data_len>
		if (err) {
    9770:	4604      	mov	r4, r0
    9772:	2800      	cmp	r0, #0
    9774:	d183      	bne.n	967e <bt_init+0x18e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9776:	2104      	movs	r1, #4
    9778:	f242 0024 	movw	r0, #8228	; 0x2024
    977c:	f010 fb9e 	bl	19ebc <bt_hci_cmd_create>
		if (!buf) {
    9780:	4606      	mov	r6, r0
    9782:	2800      	cmp	r0, #0
    9784:	f000 8090 	beq.w	98a8 <bt_init+0x3b8>
    9788:	2104      	movs	r1, #4
    978a:	300c      	adds	r0, #12
    978c:	f025 ff4b 	bl	2f626 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9790:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9794:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9796:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9798:	f8bd 3012 	ldrh.w	r3, [sp, #18]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    979c:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    979e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    97a0:	f242 0024 	movw	r0, #8228	; 0x2024
    97a4:	f010 fbc4 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    97a8:	4604      	mov	r4, r0
    97aa:	2800      	cmp	r0, #0
    97ac:	f47f af67 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    97b0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    97b4:	065c      	lsls	r4, r3, #25
    97b6:	d510      	bpl.n	97da <bt_init+0x2ea>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    97b8:	2100      	movs	r1, #0
    97ba:	f242 002a 	movw	r0, #8234	; 0x202a
    97be:	aa05      	add	r2, sp, #20
    97c0:	f010 fbb6 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    97c4:	4604      	mov	r4, r0
    97c6:	2800      	cmp	r0, #0
    97c8:	f47f af59 	bne.w	967e <bt_init+0x18e>
		le_read_resolving_list_size_complete(rsp);
    97cc:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
    97ce:	68c3      	ldr	r3, [r0, #12]
    97d0:	785b      	ldrb	r3, [r3, #1]
    97d2:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    97d6:	f016 ffdb 	bl	20790 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    97da:	2108      	movs	r1, #8
    97dc:	f242 0001 	movw	r0, #8193	; 0x2001
    97e0:	f010 fb6c 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
    97e4:	4604      	mov	r4, r0
    97e6:	2800      	cmp	r0, #0
    97e8:	d05e      	beq.n	98a8 <bt_init+0x3b8>
    97ea:	2108      	movs	r1, #8
    97ec:	300c      	adds	r0, #12
    97ee:	f025 ff1a 	bl	2f626 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    97f2:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    97f6:	f240 2302 	movw	r3, #514	; 0x202
    97fa:	f011 0f40 	tst.w	r1, #64	; 0x40
    97fe:	bf08      	it	eq
    9800:	2303      	moveq	r3, #3
    9802:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9804:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9806:	bf4c      	ite	mi
    9808:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    980c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9810:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9812:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9816:	bf48      	it	mi
    9818:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    981c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9820:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    9824:	bf18      	it	ne
    9826:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    982a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    982e:	07cf      	lsls	r7, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    9830:	bf48      	it	mi
    9832:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    9836:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    9838:	bf08      	it	eq
    983a:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    983e:	2100      	movs	r1, #0
    9840:	f023 feaa 	bl	2d598 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    9844:	4621      	mov	r1, r4
    9846:	2200      	movs	r2, #0
    9848:	f242 0001 	movw	r0, #8193	; 0x2001
    984c:	f010 fb70 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    9850:	4604      	mov	r4, r0
    9852:	2800      	cmp	r0, #0
    9854:	f47f af13 	bne.w	967e <bt_init+0x18e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9858:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    985c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9860:	069e      	lsls	r6, r3, #26
    9862:	d424      	bmi.n	98ae <bt_init+0x3be>
	if (bt_dev.le.acl_mtu) {
    9864:	b9c9      	cbnz	r1, 989a <bt_init+0x3aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    9866:	f241 0005 	movw	r0, #4101	; 0x1005
    986a:	aa05      	add	r2, sp, #20
    986c:	f010 fb60 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f af03 	bne.w	967e <bt_init+0x18e>
	if (bt_dev.le.acl_mtu) {
    9878:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    987c:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
    987e:	b94b      	cbnz	r3, 9894 <bt_init+0x3a4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    9880:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    9882:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9886:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    988a:	889a      	ldrh	r2, [r3, #4]
    988c:	4847      	ldr	r0, [pc, #284]	; (99ac <bt_init+0x4bc>)
    988e:	4611      	mov	r1, r2
    9890:	f027 fc78 	bl	31184 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9894:	4620      	mov	r0, r4
    9896:	f016 ff7b 	bl	20790 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    989a:	2108      	movs	r1, #8
    989c:	f640 4001 	movw	r0, #3073	; 0xc01
    98a0:	f010 fb0c 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
    98a4:	4604      	mov	r4, r0
    98a6:	b980      	cbnz	r0, 98ca <bt_init+0x3da>
		return -ENOBUFS;
    98a8:	f06f 0468 	mvn.w	r4, #104	; 0x68
    98ac:	e6e7      	b.n	967e <bt_init+0x18e>
	else if (!bt_dev.le.acl_mtu) {
    98ae:	2900      	cmp	r1, #0
    98b0:	d1f3      	bne.n	989a <bt_init+0x3aa>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    98b2:	4b3f      	ldr	r3, [pc, #252]	; (99b0 <bt_init+0x4c0>)
    98b4:	2201      	movs	r2, #1
    98b6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    98ba:	493e      	ldr	r1, [pc, #248]	; (99b4 <bt_init+0x4c4>)
    98bc:	4603      	mov	r3, r0
    98be:	9000      	str	r0, [sp, #0]
    98c0:	f023 fe53 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    98c4:	f06f 0404 	mvn.w	r4, #4
    98c8:	e6d9      	b.n	967e <bt_init+0x18e>
    98ca:	2108      	movs	r1, #8
    98cc:	300c      	adds	r0, #12
    98ce:	f025 feaa 	bl	2f626 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    98d2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    98d6:	4602      	mov	r2, r0
    98d8:	07d9      	lsls	r1, r3, #31
    98da:	d41c      	bmi.n	9916 <bt_init+0x426>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    98dc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    98e0:	4835      	ldr	r0, [pc, #212]	; (99b8 <bt_init+0x4c8>)
	sys_put_le64(mask, ev->events);
    98e2:	f023 fe59 	bl	2d598 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    98e6:	4621      	mov	r1, r4
    98e8:	2200      	movs	r2, #0
    98ea:	f640 4001 	movw	r0, #3073	; 0xc01
    98ee:	f010 fb1f 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    98f2:	4604      	mov	r4, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	f47f aec2 	bne.w	967e <bt_init+0x18e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    98fa:	4601      	mov	r1, r0
    98fc:	aa05      	add	r2, sp, #20
    98fe:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9902:	f010 fb15 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    9906:	4606      	mov	r6, r0
    9908:	b148      	cbz	r0, 991e <bt_init+0x42e>
		LOG_WRN("Vendor HCI extensions not available");
    990a:	4b2c      	ldr	r3, [pc, #176]	; (99bc <bt_init+0x4cc>)
			LOG_WRN("Failed to read supported vendor features");
    990c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    9910:	9400      	str	r4, [sp, #0]
    9912:	4623      	mov	r3, r4
    9914:	e013      	b.n	993e <bt_init+0x44e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    9916:	a122      	add	r1, pc, #136	; (adr r1, 99a0 <bt_init+0x4b0>)
    9918:	e9d1 0100 	ldrd	r0, r1, [r1]
    991c:	e7e1      	b.n	98e2 <bt_init+0x3f2>
	net_buf_unref(rsp);
    991e:	9805      	ldr	r0, [sp, #20]
    9920:	f016 ff36 	bl	20790 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    9924:	4631      	mov	r1, r6
    9926:	f64f 4002 	movw	r0, #64514	; 0xfc02
    992a:	aa05      	add	r2, sp, #20
    992c:	f010 fb00 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
    9930:	4604      	mov	r4, r0
    9932:	b1c0      	cbz	r0, 9966 <bt_init+0x476>
		LOG_WRN("Failed to read supported vendor commands");
    9934:	4b22      	ldr	r3, [pc, #136]	; (99c0 <bt_init+0x4d0>)
    9936:	9600      	str	r6, [sp, #0]
    9938:	e9cd 6301 	strd	r6, r3, [sp, #4]
    993c:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
    993e:	2202      	movs	r2, #2
    9940:	4618      	mov	r0, r3
    9942:	491c      	ldr	r1, [pc, #112]	; (99b4 <bt_init+0x4c4>)
    9944:	f023 fe11 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
    9948:	f011 fd1a 	bl	1b380 <bt_id_init>
	if (err) {
    994c:	4604      	mov	r4, r0
    994e:	2800      	cmp	r0, #0
    9950:	f47f ae95 	bne.w	967e <bt_init+0x18e>
		err = bt_conn_init();
    9954:	f013 f842 	bl	1c9dc <bt_conn_init>
		if (err) {
    9958:	4604      	mov	r4, r0
    995a:	2800      	cmp	r0, #0
    995c:	f47f ae8f 	bne.w	967e <bt_init+0x18e>
	bt_finalize_init();
    9960:	f011 f8da 	bl	1ab18 <bt_finalize_init>
	return 0;
    9964:	e68b      	b.n	967e <bt_init+0x18e>
	rp.cmds = (void *)rsp->data;
    9966:	9805      	ldr	r0, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    9968:	68c3      	ldr	r3, [r0, #12]
    996a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    996e:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    9972:	f016 ff0d 	bl	20790 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    9976:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    997a:	075b      	lsls	r3, r3, #29
    997c:	d5e4      	bpl.n	9948 <bt_init+0x458>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    997e:	4621      	mov	r1, r4
    9980:	f64f 4003 	movw	r0, #64515	; 0xfc03
    9984:	aa05      	add	r2, sp, #20
    9986:	f010 fad3 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
    998a:	b108      	cbz	r0, 9990 <bt_init+0x4a0>
			LOG_WRN("Failed to read supported vendor features");
    998c:	4b0d      	ldr	r3, [pc, #52]	; (99c4 <bt_init+0x4d4>)
    998e:	e7bd      	b.n	990c <bt_init+0x41c>
		rp.feat = (void *)rsp->data;
    9990:	9805      	ldr	r0, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
    9992:	68c3      	ldr	r3, [r0, #12]
    9994:	785b      	ldrb	r3, [r3, #1]
    9996:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    999a:	f016 fef9 	bl	20790 <net_buf_unref>
    999e:	e7d3      	b.n	9948 <bt_init+0x458>
    99a0:	02008890 	.word	0x02008890
    99a4:	20008000 	.word	0x20008000
    99a8:	200080d0 	.word	0x200080d0
    99ac:	20008100 	.word	0x20008100
    99b0:	00036f04 	.word	0x00036f04
    99b4:	00033234 	.word	0x00033234
    99b8:	02008810 	.word	0x02008810
    99bc:	00036f27 	.word	0x00036f27
    99c0:	00036f4b 	.word	0x00036f4b
    99c4:	00036f74 	.word	0x00036f74

000099c8 <floor>:
    99c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
    99d0:	4602      	mov	r2, r0
    99d2:	460b      	mov	r3, r1
    99d4:	460c      	mov	r4, r1
    99d6:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
    99da:	4605      	mov	r5, r0
    99dc:	4680      	mov	r8, r0
    99de:	2e13      	cmp	r6, #19
    99e0:	dc36      	bgt.n	9a50 <floor+0x88>
    99e2:	2e00      	cmp	r6, #0
    99e4:	da17      	bge.n	9a16 <floor+0x4e>
    99e6:	a334      	add	r3, pc, #208	; (adr r3, 9ab8 <floor+0xf0>)
    99e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    99ec:	f7fe fbba 	bl	8164 <__adddf3>
    99f0:	2200      	movs	r2, #0
    99f2:	2300      	movs	r3, #0
    99f4:	f7ff fb5a 	bl	90ac <__aeabi_dcmpgt>
    99f8:	b150      	cbz	r0, 9a10 <floor+0x48>
    99fa:	2c00      	cmp	r4, #0
    99fc:	da58      	bge.n	9ab0 <floor+0xe8>
    99fe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    9a02:	432c      	orrs	r4, r5
    9a04:	2500      	movs	r5, #0
    9a06:	42ac      	cmp	r4, r5
    9a08:	4c2d      	ldr	r4, [pc, #180]	; (9ac0 <floor+0xf8>)
    9a0a:	bf08      	it	eq
    9a0c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
    9a10:	4623      	mov	r3, r4
    9a12:	462a      	mov	r2, r5
    9a14:	e025      	b.n	9a62 <floor+0x9a>
    9a16:	4f2b      	ldr	r7, [pc, #172]	; (9ac4 <floor+0xfc>)
    9a18:	4137      	asrs	r7, r6
    9a1a:	ea01 0c07 	and.w	ip, r1, r7
    9a1e:	ea5c 0c00 	orrs.w	ip, ip, r0
    9a22:	d01e      	beq.n	9a62 <floor+0x9a>
    9a24:	a324      	add	r3, pc, #144	; (adr r3, 9ab8 <floor+0xf0>)
    9a26:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a2a:	f7fe fb9b 	bl	8164 <__adddf3>
    9a2e:	2200      	movs	r2, #0
    9a30:	2300      	movs	r3, #0
    9a32:	f7ff fb3b 	bl	90ac <__aeabi_dcmpgt>
    9a36:	2800      	cmp	r0, #0
    9a38:	d0ea      	beq.n	9a10 <floor+0x48>
    9a3a:	2c00      	cmp	r4, #0
    9a3c:	f04f 0500 	mov.w	r5, #0
    9a40:	bfbe      	ittt	lt
    9a42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    9a46:	4133      	asrlt	r3, r6
    9a48:	18e4      	addlt	r4, r4, r3
    9a4a:	ea24 0407 	bic.w	r4, r4, r7
    9a4e:	e7df      	b.n	9a10 <floor+0x48>
    9a50:	2e33      	cmp	r6, #51	; 0x33
    9a52:	dd0a      	ble.n	9a6a <floor+0xa2>
    9a54:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    9a58:	d103      	bne.n	9a62 <floor+0x9a>
    9a5a:	f7fe fb83 	bl	8164 <__adddf3>
    9a5e:	4602      	mov	r2, r0
    9a60:	460b      	mov	r3, r1
    9a62:	4610      	mov	r0, r2
    9a64:	4619      	mov	r1, r3
    9a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
    9a6e:	f04f 3cff 	mov.w	ip, #4294967295
    9a72:	fa2c f707 	lsr.w	r7, ip, r7
    9a76:	4207      	tst	r7, r0
    9a78:	d0f3      	beq.n	9a62 <floor+0x9a>
    9a7a:	a30f      	add	r3, pc, #60	; (adr r3, 9ab8 <floor+0xf0>)
    9a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a80:	f7fe fb70 	bl	8164 <__adddf3>
    9a84:	2200      	movs	r2, #0
    9a86:	2300      	movs	r3, #0
    9a88:	f7ff fb10 	bl	90ac <__aeabi_dcmpgt>
    9a8c:	2800      	cmp	r0, #0
    9a8e:	d0bf      	beq.n	9a10 <floor+0x48>
    9a90:	2c00      	cmp	r4, #0
    9a92:	da0a      	bge.n	9aaa <floor+0xe2>
    9a94:	2e14      	cmp	r6, #20
    9a96:	d101      	bne.n	9a9c <floor+0xd4>
    9a98:	3401      	adds	r4, #1
    9a9a:	e006      	b.n	9aaa <floor+0xe2>
    9a9c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    9aa0:	2301      	movs	r3, #1
    9aa2:	40b3      	lsls	r3, r6
    9aa4:	441d      	add	r5, r3
    9aa6:	4545      	cmp	r5, r8
    9aa8:	d3f6      	bcc.n	9a98 <floor+0xd0>
    9aaa:	ea25 0507 	bic.w	r5, r5, r7
    9aae:	e7af      	b.n	9a10 <floor+0x48>
    9ab0:	2500      	movs	r5, #0
    9ab2:	462c      	mov	r4, r5
    9ab4:	e7ac      	b.n	9a10 <floor+0x48>
    9ab6:	bf00      	nop
    9ab8:	8800759c 	.word	0x8800759c
    9abc:	7e37e43c 	.word	0x7e37e43c
    9ac0:	bff00000 	.word	0xbff00000
    9ac4:	000fffff 	.word	0x000fffff

00009ac8 <__ieee754_log>:
    9ac8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9acc:	4602      	mov	r2, r0
    9ace:	460b      	mov	r3, r1
    9ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ad4:	460d      	mov	r5, r1
    9ad6:	b087      	sub	sp, #28
    9ad8:	da24      	bge.n	9b24 <__ieee754_log+0x5c>
    9ada:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    9ade:	4304      	orrs	r4, r0
    9ae0:	d108      	bne.n	9af4 <__ieee754_log+0x2c>
    9ae2:	2200      	movs	r2, #0
    9ae4:	2300      	movs	r3, #0
    9ae6:	2000      	movs	r0, #0
    9ae8:	49c9      	ldr	r1, [pc, #804]	; (9e10 <__ieee754_log+0x348>)
    9aea:	f7fe fe1b 	bl	8724 <__aeabi_ddiv>
    9aee:	b007      	add	sp, #28
    9af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9af4:	2900      	cmp	r1, #0
    9af6:	da04      	bge.n	9b02 <__ieee754_log+0x3a>
    9af8:	f7fe fb32 	bl	8160 <__aeabi_dsub>
    9afc:	2200      	movs	r2, #0
    9afe:	2300      	movs	r3, #0
    9b00:	e7f3      	b.n	9aea <__ieee754_log+0x22>
    9b02:	2200      	movs	r2, #0
    9b04:	4bc3      	ldr	r3, [pc, #780]	; (9e14 <__ieee754_log+0x34c>)
    9b06:	f7fe fce3 	bl	84d0 <__aeabi_dmul>
    9b0a:	460b      	mov	r3, r1
    9b0c:	460d      	mov	r5, r1
    9b0e:	4602      	mov	r2, r0
    9b10:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9b14:	48c0      	ldr	r0, [pc, #768]	; (9e18 <__ieee754_log+0x350>)
    9b16:	4285      	cmp	r5, r0
    9b18:	dd06      	ble.n	9b28 <__ieee754_log+0x60>
    9b1a:	4610      	mov	r0, r2
    9b1c:	4619      	mov	r1, r3
    9b1e:	f7fe fb21 	bl	8164 <__adddf3>
    9b22:	e7e4      	b.n	9aee <__ieee754_log+0x26>
    9b24:	2100      	movs	r1, #0
    9b26:	e7f5      	b.n	9b14 <__ieee754_log+0x4c>
    9b28:	152c      	asrs	r4, r5, #20
    9b2a:	f3c5 0513 	ubfx	r5, r5, #0, #20
    9b2e:	4610      	mov	r0, r2
    9b30:	2200      	movs	r2, #0
    9b32:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    9b36:	440c      	add	r4, r1
    9b38:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    9b3c:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    9b40:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    9b44:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    9b48:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    9b4c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    9b50:	ea41 0305 	orr.w	r3, r1, r5
    9b54:	4619      	mov	r1, r3
    9b56:	4bb1      	ldr	r3, [pc, #708]	; (9e1c <__ieee754_log+0x354>)
    9b58:	f7fe fb02 	bl	8160 <__aeabi_dsub>
    9b5c:	1cab      	adds	r3, r5, #2
    9b5e:	4682      	mov	sl, r0
    9b60:	468b      	mov	fp, r1
    9b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9b66:	2200      	movs	r2, #0
    9b68:	2b02      	cmp	r3, #2
    9b6a:	dc53      	bgt.n	9c14 <__ieee754_log+0x14c>
    9b6c:	2300      	movs	r3, #0
    9b6e:	f7ff fa75 	bl	905c <__aeabi_dcmpeq>
    9b72:	b1d0      	cbz	r0, 9baa <__ieee754_log+0xe2>
    9b74:	2c00      	cmp	r4, #0
    9b76:	f000 8120 	beq.w	9dba <__ieee754_log+0x2f2>
    9b7a:	4620      	mov	r0, r4
    9b7c:	f7fe fc3e 	bl	83fc <__aeabi_i2d>
    9b80:	4606      	mov	r6, r0
    9b82:	460f      	mov	r7, r1
    9b84:	a38e      	add	r3, pc, #568	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9b86:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b8a:	f7fe fca1 	bl	84d0 <__aeabi_dmul>
    9b8e:	4604      	mov	r4, r0
    9b90:	460d      	mov	r5, r1
    9b92:	4630      	mov	r0, r6
    9b94:	4639      	mov	r1, r7
    9b96:	a38c      	add	r3, pc, #560	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9b98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b9c:	f7fe fc98 	bl	84d0 <__aeabi_dmul>
    9ba0:	4602      	mov	r2, r0
    9ba2:	460b      	mov	r3, r1
    9ba4:	4620      	mov	r0, r4
    9ba6:	4629      	mov	r1, r5
    9ba8:	e7b9      	b.n	9b1e <__ieee754_log+0x56>
    9baa:	a389      	add	r3, pc, #548	; (adr r3, 9dd0 <__ieee754_log+0x308>)
    9bac:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bb0:	4650      	mov	r0, sl
    9bb2:	4659      	mov	r1, fp
    9bb4:	f7fe fc8c 	bl	84d0 <__aeabi_dmul>
    9bb8:	4602      	mov	r2, r0
    9bba:	460b      	mov	r3, r1
    9bbc:	2000      	movs	r0, #0
    9bbe:	4998      	ldr	r1, [pc, #608]	; (9e20 <__ieee754_log+0x358>)
    9bc0:	f7fe face 	bl	8160 <__aeabi_dsub>
    9bc4:	4606      	mov	r6, r0
    9bc6:	460f      	mov	r7, r1
    9bc8:	4652      	mov	r2, sl
    9bca:	465b      	mov	r3, fp
    9bcc:	4650      	mov	r0, sl
    9bce:	4659      	mov	r1, fp
    9bd0:	f7fe fc7e 	bl	84d0 <__aeabi_dmul>
    9bd4:	4602      	mov	r2, r0
    9bd6:	460b      	mov	r3, r1
    9bd8:	4630      	mov	r0, r6
    9bda:	4639      	mov	r1, r7
    9bdc:	f7fe fc78 	bl	84d0 <__aeabi_dmul>
    9be0:	4606      	mov	r6, r0
    9be2:	460f      	mov	r7, r1
    9be4:	b914      	cbnz	r4, 9bec <__ieee754_log+0x124>
    9be6:	4632      	mov	r2, r6
    9be8:	463b      	mov	r3, r7
    9bea:	e0a0      	b.n	9d2e <__ieee754_log+0x266>
    9bec:	4620      	mov	r0, r4
    9bee:	f7fe fc05 	bl	83fc <__aeabi_i2d>
    9bf2:	4680      	mov	r8, r0
    9bf4:	4689      	mov	r9, r1
    9bf6:	a372      	add	r3, pc, #456	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bfc:	f7fe fc68 	bl	84d0 <__aeabi_dmul>
    9c00:	4604      	mov	r4, r0
    9c02:	460d      	mov	r5, r1
    9c04:	4640      	mov	r0, r8
    9c06:	4649      	mov	r1, r9
    9c08:	a36f      	add	r3, pc, #444	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c0e:	f7fe fc5f 	bl	84d0 <__aeabi_dmul>
    9c12:	e0a5      	b.n	9d60 <__ieee754_log+0x298>
    9c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9c18:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9c1c:	f7fe faa2 	bl	8164 <__adddf3>
    9c20:	4602      	mov	r2, r0
    9c22:	460b      	mov	r3, r1
    9c24:	4650      	mov	r0, sl
    9c26:	4659      	mov	r1, fp
    9c28:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9c2c:	f7fe fd7a 	bl	8724 <__aeabi_ddiv>
    9c30:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9c34:	3551      	adds	r5, #81	; 0x51
    9c36:	e9cd 0100 	strd	r0, r1, [sp]
    9c3a:	4620      	mov	r0, r4
    9c3c:	4335      	orrs	r5, r6
    9c3e:	f7fe fbdd 	bl	83fc <__aeabi_i2d>
    9c42:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9c4a:	4610      	mov	r0, r2
    9c4c:	4619      	mov	r1, r3
    9c4e:	f7fe fc3f 	bl	84d0 <__aeabi_dmul>
    9c52:	4602      	mov	r2, r0
    9c54:	460b      	mov	r3, r1
    9c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9c5a:	f7fe fc39 	bl	84d0 <__aeabi_dmul>
    9c5e:	4680      	mov	r8, r0
    9c60:	4689      	mov	r9, r1
    9c62:	a35d      	add	r3, pc, #372	; (adr r3, 9dd8 <__ieee754_log+0x310>)
    9c64:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c68:	f7fe fc32 	bl	84d0 <__aeabi_dmul>
    9c6c:	a35c      	add	r3, pc, #368	; (adr r3, 9de0 <__ieee754_log+0x318>)
    9c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c72:	f7fe fa77 	bl	8164 <__adddf3>
    9c76:	4642      	mov	r2, r8
    9c78:	464b      	mov	r3, r9
    9c7a:	f7fe fc29 	bl	84d0 <__aeabi_dmul>
    9c7e:	a35a      	add	r3, pc, #360	; (adr r3, 9de8 <__ieee754_log+0x320>)
    9c80:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c84:	f7fe fa6e 	bl	8164 <__adddf3>
    9c88:	4642      	mov	r2, r8
    9c8a:	464b      	mov	r3, r9
    9c8c:	f7fe fc20 	bl	84d0 <__aeabi_dmul>
    9c90:	a357      	add	r3, pc, #348	; (adr r3, 9df0 <__ieee754_log+0x328>)
    9c92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c96:	f7fe fa65 	bl	8164 <__adddf3>
    9c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9c9e:	f7fe fc17 	bl	84d0 <__aeabi_dmul>
    9ca2:	a355      	add	r3, pc, #340	; (adr r3, 9df8 <__ieee754_log+0x330>)
    9ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ca8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9cac:	4640      	mov	r0, r8
    9cae:	4649      	mov	r1, r9
    9cb0:	f7fe fc0e 	bl	84d0 <__aeabi_dmul>
    9cb4:	a352      	add	r3, pc, #328	; (adr r3, 9e00 <__ieee754_log+0x338>)
    9cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cba:	f7fe fa53 	bl	8164 <__adddf3>
    9cbe:	4642      	mov	r2, r8
    9cc0:	464b      	mov	r3, r9
    9cc2:	f7fe fc05 	bl	84d0 <__aeabi_dmul>
    9cc6:	a350      	add	r3, pc, #320	; (adr r3, 9e08 <__ieee754_log+0x340>)
    9cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ccc:	f7fe fa4a 	bl	8164 <__adddf3>
    9cd0:	4642      	mov	r2, r8
    9cd2:	464b      	mov	r3, r9
    9cd4:	f7fe fbfc 	bl	84d0 <__aeabi_dmul>
    9cd8:	4602      	mov	r2, r0
    9cda:	460b      	mov	r3, r1
    9cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9ce0:	f7fe fa40 	bl	8164 <__adddf3>
    9ce4:	2d00      	cmp	r5, #0
    9ce6:	4680      	mov	r8, r0
    9ce8:	4689      	mov	r9, r1
    9cea:	dd48      	ble.n	9d7e <__ieee754_log+0x2b6>
    9cec:	2200      	movs	r2, #0
    9cee:	4b4c      	ldr	r3, [pc, #304]	; (9e20 <__ieee754_log+0x358>)
    9cf0:	4650      	mov	r0, sl
    9cf2:	4659      	mov	r1, fp
    9cf4:	f7fe fbec 	bl	84d0 <__aeabi_dmul>
    9cf8:	4652      	mov	r2, sl
    9cfa:	465b      	mov	r3, fp
    9cfc:	f7fe fbe8 	bl	84d0 <__aeabi_dmul>
    9d00:	4602      	mov	r2, r0
    9d02:	460b      	mov	r3, r1
    9d04:	4606      	mov	r6, r0
    9d06:	460f      	mov	r7, r1
    9d08:	4640      	mov	r0, r8
    9d0a:	4649      	mov	r1, r9
    9d0c:	f7fe fa2a 	bl	8164 <__adddf3>
    9d10:	e9dd 2300 	ldrd	r2, r3, [sp]
    9d14:	f7fe fbdc 	bl	84d0 <__aeabi_dmul>
    9d18:	4680      	mov	r8, r0
    9d1a:	4689      	mov	r9, r1
    9d1c:	b964      	cbnz	r4, 9d38 <__ieee754_log+0x270>
    9d1e:	4602      	mov	r2, r0
    9d20:	460b      	mov	r3, r1
    9d22:	4630      	mov	r0, r6
    9d24:	4639      	mov	r1, r7
    9d26:	f7fe fa1b 	bl	8160 <__aeabi_dsub>
    9d2a:	4602      	mov	r2, r0
    9d2c:	460b      	mov	r3, r1
    9d2e:	4650      	mov	r0, sl
    9d30:	4659      	mov	r1, fp
    9d32:	f7fe fa15 	bl	8160 <__aeabi_dsub>
    9d36:	e6da      	b.n	9aee <__ieee754_log+0x26>
    9d38:	a321      	add	r3, pc, #132	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d42:	f7fe fbc5 	bl	84d0 <__aeabi_dmul>
    9d46:	4604      	mov	r4, r0
    9d48:	460d      	mov	r5, r1
    9d4a:	a31f      	add	r3, pc, #124	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d54:	f7fe fbbc 	bl	84d0 <__aeabi_dmul>
    9d58:	4642      	mov	r2, r8
    9d5a:	464b      	mov	r3, r9
    9d5c:	f7fe fa02 	bl	8164 <__adddf3>
    9d60:	4602      	mov	r2, r0
    9d62:	460b      	mov	r3, r1
    9d64:	4630      	mov	r0, r6
    9d66:	4639      	mov	r1, r7
    9d68:	f7fe f9fa 	bl	8160 <__aeabi_dsub>
    9d6c:	4652      	mov	r2, sl
    9d6e:	465b      	mov	r3, fp
    9d70:	f7fe f9f6 	bl	8160 <__aeabi_dsub>
    9d74:	4602      	mov	r2, r0
    9d76:	460b      	mov	r3, r1
    9d78:	4620      	mov	r0, r4
    9d7a:	4629      	mov	r1, r5
    9d7c:	e7d9      	b.n	9d32 <__ieee754_log+0x26a>
    9d7e:	4602      	mov	r2, r0
    9d80:	460b      	mov	r3, r1
    9d82:	4650      	mov	r0, sl
    9d84:	4659      	mov	r1, fp
    9d86:	f7fe f9eb 	bl	8160 <__aeabi_dsub>
    9d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9d8e:	f7fe fb9f 	bl	84d0 <__aeabi_dmul>
    9d92:	4606      	mov	r6, r0
    9d94:	460f      	mov	r7, r1
    9d96:	2c00      	cmp	r4, #0
    9d98:	f43f af25 	beq.w	9be6 <__ieee754_log+0x11e>
    9d9c:	a308      	add	r3, pc, #32	; (adr r3, 9dc0 <__ieee754_log+0x2f8>)
    9d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9da6:	f7fe fb93 	bl	84d0 <__aeabi_dmul>
    9daa:	4604      	mov	r4, r0
    9dac:	460d      	mov	r5, r1
    9dae:	a306      	add	r3, pc, #24	; (adr r3, 9dc8 <__ieee754_log+0x300>)
    9db0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9db8:	e729      	b.n	9c0e <__ieee754_log+0x146>
    9dba:	2000      	movs	r0, #0
    9dbc:	2100      	movs	r1, #0
    9dbe:	e696      	b.n	9aee <__ieee754_log+0x26>
    9dc0:	fee00000 	.word	0xfee00000
    9dc4:	3fe62e42 	.word	0x3fe62e42
    9dc8:	35793c76 	.word	0x35793c76
    9dcc:	3dea39ef 	.word	0x3dea39ef
    9dd0:	55555555 	.word	0x55555555
    9dd4:	3fd55555 	.word	0x3fd55555
    9dd8:	df3e5244 	.word	0xdf3e5244
    9ddc:	3fc2f112 	.word	0x3fc2f112
    9de0:	96cb03de 	.word	0x96cb03de
    9de4:	3fc74664 	.word	0x3fc74664
    9de8:	94229359 	.word	0x94229359
    9dec:	3fd24924 	.word	0x3fd24924
    9df0:	55555593 	.word	0x55555593
    9df4:	3fe55555 	.word	0x3fe55555
    9df8:	d078c69f 	.word	0xd078c69f
    9dfc:	3fc39a09 	.word	0x3fc39a09
    9e00:	1d8e78af 	.word	0x1d8e78af
    9e04:	3fcc71c5 	.word	0x3fcc71c5
    9e08:	9997fa04 	.word	0x9997fa04
    9e0c:	3fd99999 	.word	0x3fd99999
    9e10:	c3500000 	.word	0xc3500000
    9e14:	43500000 	.word	0x43500000
    9e18:	7fefffff 	.word	0x7fefffff
    9e1c:	3ff00000 	.word	0x3ff00000
    9e20:	3fe00000 	.word	0x3fe00000
    9e24:	00000000 	.word	0x00000000

00009e28 <_strtod_l>:
    9e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e2c:	461f      	mov	r7, r3
    9e2e:	b09d      	sub	sp, #116	; 0x74
    9e30:	2300      	movs	r3, #0
    9e32:	460c      	mov	r4, r1
    9e34:	4682      	mov	sl, r0
    9e36:	920e      	str	r2, [sp, #56]	; 0x38
    9e38:	9318      	str	r3, [sp, #96]	; 0x60
    9e3a:	f04f 0800 	mov.w	r8, #0
    9e3e:	4b97      	ldr	r3, [pc, #604]	; (a09c <_strtod_l+0x274>)
    9e40:	f04f 0900 	mov.w	r9, #0
    9e44:	681d      	ldr	r5, [r3, #0]
    9e46:	4628      	mov	r0, r5
    9e48:	f7ff fadf 	bl	940a <strlen>
    9e4c:	4622      	mov	r2, r4
    9e4e:	4683      	mov	fp, r0
    9e50:	9217      	str	r2, [sp, #92]	; 0x5c
    9e52:	7813      	ldrb	r3, [r2, #0]
    9e54:	2b2b      	cmp	r3, #43	; 0x2b
    9e56:	d03b      	beq.n	9ed0 <_strtod_l+0xa8>
    9e58:	d82c      	bhi.n	9eb4 <_strtod_l+0x8c>
    9e5a:	2b0d      	cmp	r3, #13
    9e5c:	d826      	bhi.n	9eac <_strtod_l+0x84>
    9e5e:	2b08      	cmp	r3, #8
    9e60:	d826      	bhi.n	9eb0 <_strtod_l+0x88>
    9e62:	2b00      	cmp	r3, #0
    9e64:	d02f      	beq.n	9ec6 <_strtod_l+0x9e>
    9e66:	2300      	movs	r3, #0
    9e68:	930c      	str	r3, [sp, #48]	; 0x30
    9e6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    9e6c:	7833      	ldrb	r3, [r6, #0]
    9e6e:	2b30      	cmp	r3, #48	; 0x30
    9e70:	d172      	bne.n	9f58 <_strtod_l+0x130>
    9e72:	7873      	ldrb	r3, [r6, #1]
    9e74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9e78:	2b58      	cmp	r3, #88	; 0x58
    9e7a:	d163      	bne.n	9f44 <_strtod_l+0x11c>
    9e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9e7e:	a917      	add	r1, sp, #92	; 0x5c
    9e80:	4a87      	ldr	r2, [pc, #540]	; (a0a0 <_strtod_l+0x278>)
    9e82:	4650      	mov	r0, sl
    9e84:	9301      	str	r3, [sp, #4]
    9e86:	ab18      	add	r3, sp, #96	; 0x60
    9e88:	9702      	str	r7, [sp, #8]
    9e8a:	9300      	str	r3, [sp, #0]
    9e8c:	ab19      	add	r3, sp, #100	; 0x64
    9e8e:	f01e fb33 	bl	284f8 <__gethex>
    9e92:	f010 0507 	ands.w	r5, r0, #7
    9e96:	4604      	mov	r4, r0
    9e98:	d035      	beq.n	9f06 <_strtod_l+0xde>
    9e9a:	2d06      	cmp	r5, #6
    9e9c:	d11a      	bne.n	9ed4 <_strtod_l+0xac>
    9e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ea0:	b10b      	cbz	r3, 9ea6 <_strtod_l+0x7e>
    9ea2:	3601      	adds	r6, #1
    9ea4:	601e      	str	r6, [r3, #0]
    9ea6:	4640      	mov	r0, r8
    9ea8:	4649      	mov	r1, r9
    9eaa:	e037      	b.n	9f1c <_strtod_l+0xf4>
    9eac:	2b20      	cmp	r3, #32
    9eae:	d1da      	bne.n	9e66 <_strtod_l+0x3e>
    9eb0:	3201      	adds	r2, #1
    9eb2:	e7cd      	b.n	9e50 <_strtod_l+0x28>
    9eb4:	2b2d      	cmp	r3, #45	; 0x2d
    9eb6:	d1d6      	bne.n	9e66 <_strtod_l+0x3e>
    9eb8:	2301      	movs	r3, #1
    9eba:	930c      	str	r3, [sp, #48]	; 0x30
    9ebc:	1c53      	adds	r3, r2, #1
    9ebe:	9317      	str	r3, [sp, #92]	; 0x5c
    9ec0:	7853      	ldrb	r3, [r2, #1]
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d1d1      	bne.n	9e6a <_strtod_l+0x42>
    9ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d0ec      	beq.n	9ea6 <_strtod_l+0x7e>
    9ecc:	601c      	str	r4, [r3, #0]
    9ece:	e7ea      	b.n	9ea6 <_strtod_l+0x7e>
    9ed0:	2300      	movs	r3, #0
    9ed2:	e7f2      	b.n	9eba <_strtod_l+0x92>
    9ed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9ed6:	b13a      	cbz	r2, 9ee8 <_strtod_l+0xc0>
    9ed8:	2135      	movs	r1, #53	; 0x35
    9eda:	a81a      	add	r0, sp, #104	; 0x68
    9edc:	f028 faa3 	bl	32426 <__copybits>
    9ee0:	9918      	ldr	r1, [sp, #96]	; 0x60
    9ee2:	4650      	mov	r0, sl
    9ee4:	f01e fdc8 	bl	28a78 <_Bfree>
    9ee8:	3d01      	subs	r5, #1
    9eea:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9eec:	2d04      	cmp	r5, #4
    9eee:	d806      	bhi.n	9efe <_strtod_l+0xd6>
    9ef0:	e8df f005 	tbb	[pc, r5]
    9ef4:	23200317 	.word	0x23200317
    9ef8:	17          	.byte	0x17
    9ef9:	00          	.byte	0x00
    9efa:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
    9efe:	0721      	lsls	r1, r4, #28
    9f00:	d501      	bpl.n	9f06 <_strtod_l+0xde>
    9f02:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
    9f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9f08:	b113      	cbz	r3, 9f10 <_strtod_l+0xe8>
    9f0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9f0e:	6013      	str	r3, [r2, #0]
    9f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9f12:	2b00      	cmp	r3, #0
    9f14:	d0c7      	beq.n	9ea6 <_strtod_l+0x7e>
    9f16:	4640      	mov	r0, r8
    9f18:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
    9f1c:	b01d      	add	sp, #116	; 0x74
    9f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f22:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
    9f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    9f2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
    9f32:	e7e4      	b.n	9efe <_strtod_l+0xd6>
    9f34:	f8df 916c 	ldr.w	r9, [pc, #364]	; a0a4 <_strtod_l+0x27c>
    9f38:	e7e1      	b.n	9efe <_strtod_l+0xd6>
    9f3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    9f3e:	f04f 38ff 	mov.w	r8, #4294967295
    9f42:	e7dc      	b.n	9efe <_strtod_l+0xd6>
    9f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f46:	1c5a      	adds	r2, r3, #1
    9f48:	9217      	str	r2, [sp, #92]	; 0x5c
    9f4a:	785b      	ldrb	r3, [r3, #1]
    9f4c:	2b30      	cmp	r3, #48	; 0x30
    9f4e:	d0f9      	beq.n	9f44 <_strtod_l+0x11c>
    9f50:	2b00      	cmp	r3, #0
    9f52:	d0d8      	beq.n	9f06 <_strtod_l+0xde>
    9f54:	2301      	movs	r3, #1
    9f56:	e000      	b.n	9f5a <_strtod_l+0x132>
    9f58:	2300      	movs	r3, #0
    9f5a:	2700      	movs	r7, #0
    9f5c:	9304      	str	r3, [sp, #16]
    9f5e:	220a      	movs	r2, #10
    9f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9f62:	e9cd 7705 	strd	r7, r7, [sp, #20]
    9f66:	930a      	str	r3, [sp, #40]	; 0x28
    9f68:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9f6a:	7806      	ldrb	r6, [r0, #0]
    9f6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
    9f70:	b2d9      	uxtb	r1, r3
    9f72:	2909      	cmp	r1, #9
    9f74:	d924      	bls.n	9fc0 <_strtod_l+0x198>
    9f76:	465a      	mov	r2, fp
    9f78:	4629      	mov	r1, r5
    9f7a:	f027 fee3 	bl	31d44 <strncmp>
    9f7e:	2800      	cmp	r0, #0
    9f80:	d02d      	beq.n	9fde <_strtod_l+0x1b6>
    9f82:	2000      	movs	r0, #0
    9f84:	4632      	mov	r2, r6
    9f86:	9d05      	ldr	r5, [sp, #20]
    9f88:	4683      	mov	fp, r0
    9f8a:	4603      	mov	r3, r0
    9f8c:	2a65      	cmp	r2, #101	; 0x65
    9f8e:	d001      	beq.n	9f94 <_strtod_l+0x16c>
    9f90:	2a45      	cmp	r2, #69	; 0x45
    9f92:	d113      	bne.n	9fbc <_strtod_l+0x194>
    9f94:	b91d      	cbnz	r5, 9f9e <_strtod_l+0x176>
    9f96:	9a04      	ldr	r2, [sp, #16]
    9f98:	4302      	orrs	r2, r0
    9f9a:	d094      	beq.n	9ec6 <_strtod_l+0x9e>
    9f9c:	2500      	movs	r5, #0
    9f9e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9fa0:	1c62      	adds	r2, r4, #1
    9fa2:	9217      	str	r2, [sp, #92]	; 0x5c
    9fa4:	7862      	ldrb	r2, [r4, #1]
    9fa6:	2a2b      	cmp	r2, #43	; 0x2b
    9fa8:	d06e      	beq.n	a088 <_strtod_l+0x260>
    9faa:	2a2d      	cmp	r2, #45	; 0x2d
    9fac:	d072      	beq.n	a094 <_strtod_l+0x26c>
    9fae:	f04f 0c00 	mov.w	ip, #0
    9fb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    9fb6:	2909      	cmp	r1, #9
    9fb8:	d97a      	bls.n	a0b0 <_strtod_l+0x288>
    9fba:	9417      	str	r4, [sp, #92]	; 0x5c
    9fbc:	2600      	movs	r6, #0
    9fbe:	e099      	b.n	a0f4 <_strtod_l+0x2cc>
    9fc0:	9905      	ldr	r1, [sp, #20]
    9fc2:	3001      	adds	r0, #1
    9fc4:	2908      	cmp	r1, #8
    9fc6:	9017      	str	r0, [sp, #92]	; 0x5c
    9fc8:	bfd7      	itett	le
    9fca:	9906      	ldrle	r1, [sp, #24]
    9fcc:	fb02 3707 	mlagt	r7, r2, r7, r3
    9fd0:	fb02 3301 	mlale	r3, r2, r1, r3
    9fd4:	9306      	strle	r3, [sp, #24]
    9fd6:	9b05      	ldr	r3, [sp, #20]
    9fd8:	3301      	adds	r3, #1
    9fda:	9305      	str	r3, [sp, #20]
    9fdc:	e7c4      	b.n	9f68 <_strtod_l+0x140>
    9fde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9fe0:	eb03 020b 	add.w	r2, r3, fp
    9fe4:	9217      	str	r2, [sp, #92]	; 0x5c
    9fe6:	f813 200b 	ldrb.w	r2, [r3, fp]
    9fea:	9b05      	ldr	r3, [sp, #20]
    9fec:	b3a3      	cbz	r3, a058 <_strtod_l+0x230>
    9fee:	4683      	mov	fp, r0
    9ff0:	461d      	mov	r5, r3
    9ff2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    9ff6:	2b09      	cmp	r3, #9
    9ff8:	d912      	bls.n	a020 <_strtod_l+0x1f8>
    9ffa:	2301      	movs	r3, #1
    9ffc:	e7c6      	b.n	9f8c <_strtod_l+0x164>
    9ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a000:	3001      	adds	r0, #1
    a002:	1c5a      	adds	r2, r3, #1
    a004:	9217      	str	r2, [sp, #92]	; 0x5c
    a006:	785a      	ldrb	r2, [r3, #1]
    a008:	2a30      	cmp	r2, #48	; 0x30
    a00a:	d0f8      	beq.n	9ffe <_strtod_l+0x1d6>
    a00c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
    a010:	2b08      	cmp	r3, #8
    a012:	f200 84ea 	bhi.w	a9ea <_strtod_l+0xbc2>
    a016:	4683      	mov	fp, r0
    a018:	2000      	movs	r0, #0
    a01a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a01c:	4605      	mov	r5, r0
    a01e:	930a      	str	r3, [sp, #40]	; 0x28
    a020:	3a30      	subs	r2, #48	; 0x30
    a022:	f100 0301 	add.w	r3, r0, #1
    a026:	d011      	beq.n	a04c <_strtod_l+0x224>
    a028:	449b      	add	fp, r3
    a02a:	eb00 0c05 	add.w	ip, r0, r5
    a02e:	462b      	mov	r3, r5
    a030:	210a      	movs	r1, #10
    a032:	4563      	cmp	r3, ip
    a034:	d112      	bne.n	a05c <_strtod_l+0x234>
    a036:	182b      	adds	r3, r5, r0
    a038:	3501      	adds	r5, #1
    a03a:	2b08      	cmp	r3, #8
    a03c:	4405      	add	r5, r0
    a03e:	dc19      	bgt.n	a074 <_strtod_l+0x24c>
    a040:	9906      	ldr	r1, [sp, #24]
    a042:	230a      	movs	r3, #10
    a044:	fb03 2301 	mla	r3, r3, r1, r2
    a048:	9306      	str	r3, [sp, #24]
    a04a:	2300      	movs	r3, #0
    a04c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a04e:	4618      	mov	r0, r3
    a050:	1c51      	adds	r1, r2, #1
    a052:	9117      	str	r1, [sp, #92]	; 0x5c
    a054:	7852      	ldrb	r2, [r2, #1]
    a056:	e7cc      	b.n	9ff2 <_strtod_l+0x1ca>
    a058:	9805      	ldr	r0, [sp, #20]
    a05a:	e7d5      	b.n	a008 <_strtod_l+0x1e0>
    a05c:	2b08      	cmp	r3, #8
    a05e:	f103 0301 	add.w	r3, r3, #1
    a062:	dc03      	bgt.n	a06c <_strtod_l+0x244>
    a064:	9e06      	ldr	r6, [sp, #24]
    a066:	434e      	muls	r6, r1
    a068:	9606      	str	r6, [sp, #24]
    a06a:	e7e2      	b.n	a032 <_strtod_l+0x20a>
    a06c:	2b10      	cmp	r3, #16
    a06e:	bfd8      	it	le
    a070:	434f      	mulle	r7, r1
    a072:	e7de      	b.n	a032 <_strtod_l+0x20a>
    a074:	2b0f      	cmp	r3, #15
    a076:	bfdc      	itt	le
    a078:	230a      	movle	r3, #10
    a07a:	fb03 2707 	mlale	r7, r3, r7, r2
    a07e:	e7e4      	b.n	a04a <_strtod_l+0x222>
    a080:	f04f 0b00 	mov.w	fp, #0
    a084:	2301      	movs	r3, #1
    a086:	e786      	b.n	9f96 <_strtod_l+0x16e>
    a088:	f04f 0c00 	mov.w	ip, #0
    a08c:	1ca2      	adds	r2, r4, #2
    a08e:	9217      	str	r2, [sp, #92]	; 0x5c
    a090:	78a2      	ldrb	r2, [r4, #2]
    a092:	e78e      	b.n	9fb2 <_strtod_l+0x18a>
    a094:	f04f 0c01 	mov.w	ip, #1
    a098:	e7f8      	b.n	a08c <_strtod_l+0x264>
    a09a:	bf00      	nop
    a09c:	00034508 	.word	0x00034508
    a0a0:	00034494 	.word	0x00034494
    a0a4:	7ff00000 	.word	0x7ff00000
    a0a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0aa:	1c51      	adds	r1, r2, #1
    a0ac:	9117      	str	r1, [sp, #92]	; 0x5c
    a0ae:	7852      	ldrb	r2, [r2, #1]
    a0b0:	2a30      	cmp	r2, #48	; 0x30
    a0b2:	d0f9      	beq.n	a0a8 <_strtod_l+0x280>
    a0b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
    a0b8:	2908      	cmp	r1, #8
    a0ba:	f63f af7f 	bhi.w	9fbc <_strtod_l+0x194>
    a0be:	3a30      	subs	r2, #48	; 0x30
    a0c0:	9207      	str	r2, [sp, #28]
    a0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0c4:	920d      	str	r2, [sp, #52]	; 0x34
    a0c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    a0c8:	1c56      	adds	r6, r2, #1
    a0ca:	9617      	str	r6, [sp, #92]	; 0x5c
    a0cc:	7852      	ldrb	r2, [r2, #1]
    a0ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    a0d2:	f1be 0f09 	cmp.w	lr, #9
    a0d6:	d938      	bls.n	a14a <_strtod_l+0x322>
    a0d8:	990d      	ldr	r1, [sp, #52]	; 0x34
    a0da:	1a76      	subs	r6, r6, r1
    a0dc:	2e08      	cmp	r6, #8
    a0de:	f644 661f 	movw	r6, #19999	; 0x4e1f
    a0e2:	dc03      	bgt.n	a0ec <_strtod_l+0x2c4>
    a0e4:	9907      	ldr	r1, [sp, #28]
    a0e6:	428e      	cmp	r6, r1
    a0e8:	bfa8      	it	ge
    a0ea:	460e      	movge	r6, r1
    a0ec:	f1bc 0f00 	cmp.w	ip, #0
    a0f0:	d000      	beq.n	a0f4 <_strtod_l+0x2cc>
    a0f2:	4276      	negs	r6, r6
    a0f4:	2d00      	cmp	r5, #0
    a0f6:	d14f      	bne.n	a198 <_strtod_l+0x370>
    a0f8:	9904      	ldr	r1, [sp, #16]
    a0fa:	4308      	orrs	r0, r1
    a0fc:	f47f af03 	bne.w	9f06 <_strtod_l+0xde>
    a100:	2b00      	cmp	r3, #0
    a102:	f47f aee0 	bne.w	9ec6 <_strtod_l+0x9e>
    a106:	2a69      	cmp	r2, #105	; 0x69
    a108:	d029      	beq.n	a15e <_strtod_l+0x336>
    a10a:	dc26      	bgt.n	a15a <_strtod_l+0x332>
    a10c:	2a49      	cmp	r2, #73	; 0x49
    a10e:	d026      	beq.n	a15e <_strtod_l+0x336>
    a110:	2a4e      	cmp	r2, #78	; 0x4e
    a112:	f47f aed8 	bne.w	9ec6 <_strtod_l+0x9e>
    a116:	499d      	ldr	r1, [pc, #628]	; (a38c <_strtod_l+0x564>)
    a118:	a817      	add	r0, sp, #92	; 0x5c
    a11a:	f028 f814 	bl	32146 <__match>
    a11e:	2800      	cmp	r0, #0
    a120:	f43f aed1 	beq.w	9ec6 <_strtod_l+0x9e>
    a124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a126:	781b      	ldrb	r3, [r3, #0]
    a128:	2b28      	cmp	r3, #40	; 0x28
    a12a:	d12f      	bne.n	a18c <_strtod_l+0x364>
    a12c:	aa1a      	add	r2, sp, #104	; 0x68
    a12e:	4998      	ldr	r1, [pc, #608]	; (a390 <_strtod_l+0x568>)
    a130:	a817      	add	r0, sp, #92	; 0x5c
    a132:	f028 f81c 	bl	3216e <__hexnan>
    a136:	2805      	cmp	r0, #5
    a138:	d128      	bne.n	a18c <_strtod_l+0x364>
    a13a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a13c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    a140:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
    a144:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
    a148:	e6dd      	b.n	9f06 <_strtod_l+0xde>
    a14a:	9e07      	ldr	r6, [sp, #28]
    a14c:	210a      	movs	r1, #10
    a14e:	fb01 2106 	mla	r1, r1, r6, r2
    a152:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
    a156:	9207      	str	r2, [sp, #28]
    a158:	e7b5      	b.n	a0c6 <_strtod_l+0x29e>
    a15a:	2a6e      	cmp	r2, #110	; 0x6e
    a15c:	e7d9      	b.n	a112 <_strtod_l+0x2ea>
    a15e:	498d      	ldr	r1, [pc, #564]	; (a394 <_strtod_l+0x56c>)
    a160:	a817      	add	r0, sp, #92	; 0x5c
    a162:	f027 fff0 	bl	32146 <__match>
    a166:	2800      	cmp	r0, #0
    a168:	f43f aead 	beq.w	9ec6 <_strtod_l+0x9e>
    a16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a16e:	a817      	add	r0, sp, #92	; 0x5c
    a170:	4989      	ldr	r1, [pc, #548]	; (a398 <_strtod_l+0x570>)
    a172:	3b01      	subs	r3, #1
    a174:	9317      	str	r3, [sp, #92]	; 0x5c
    a176:	f027 ffe6 	bl	32146 <__match>
    a17a:	b910      	cbnz	r0, a182 <_strtod_l+0x35a>
    a17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a17e:	3301      	adds	r3, #1
    a180:	9317      	str	r3, [sp, #92]	; 0x5c
    a182:	f8df 9218 	ldr.w	r9, [pc, #536]	; a39c <_strtod_l+0x574>
    a186:	f04f 0800 	mov.w	r8, #0
    a18a:	e6bc      	b.n	9f06 <_strtod_l+0xde>
    a18c:	4884      	ldr	r0, [pc, #528]	; (a3a0 <_strtod_l+0x578>)
    a18e:	f01c fe53 	bl	26e38 <nan>
    a192:	4680      	mov	r8, r0
    a194:	4689      	mov	r9, r1
    a196:	e6b6      	b.n	9f06 <_strtod_l+0xde>
    a198:	eba6 030b 	sub.w	r3, r6, fp
    a19c:	9806      	ldr	r0, [sp, #24]
    a19e:	462c      	mov	r4, r5
    a1a0:	930f      	str	r3, [sp, #60]	; 0x3c
    a1a2:	9b05      	ldr	r3, [sp, #20]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	bf08      	it	eq
    a1a8:	462b      	moveq	r3, r5
    a1aa:	2d10      	cmp	r5, #16
    a1ac:	9305      	str	r3, [sp, #20]
    a1ae:	bfa8      	it	ge
    a1b0:	2410      	movge	r4, #16
    a1b2:	f7fe f913 	bl	83dc <__aeabi_ui2d>
    a1b6:	2d09      	cmp	r5, #9
    a1b8:	4680      	mov	r8, r0
    a1ba:	4689      	mov	r9, r1
    a1bc:	dc14      	bgt.n	a1e8 <_strtod_l+0x3c0>
    a1be:	eba6 030b 	sub.w	r3, r6, fp
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	f43f ae9f 	beq.w	9f06 <_strtod_l+0xde>
    a1c8:	eba6 030b 	sub.w	r3, r6, fp
    a1cc:	dd79      	ble.n	a2c2 <_strtod_l+0x49a>
    a1ce:	2b16      	cmp	r3, #22
    a1d0:	dc45      	bgt.n	a25e <_strtod_l+0x436>
    a1d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a1d4:	4642      	mov	r2, r8
    a1d6:	4973      	ldr	r1, [pc, #460]	; (a3a4 <_strtod_l+0x57c>)
    a1d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a1dc:	464b      	mov	r3, r9
    a1de:	e9d1 0100 	ldrd	r0, r1, [r1]
    a1e2:	f7fe f975 	bl	84d0 <__aeabi_dmul>
    a1e6:	e7d4      	b.n	a192 <_strtod_l+0x36a>
    a1e8:	4b6e      	ldr	r3, [pc, #440]	; (a3a4 <_strtod_l+0x57c>)
    a1ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a1ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
    a1f2:	f7fe f96d 	bl	84d0 <__aeabi_dmul>
    a1f6:	4680      	mov	r8, r0
    a1f8:	4689      	mov	r9, r1
    a1fa:	4638      	mov	r0, r7
    a1fc:	f7fe f8ee 	bl	83dc <__aeabi_ui2d>
    a200:	4602      	mov	r2, r0
    a202:	460b      	mov	r3, r1
    a204:	4640      	mov	r0, r8
    a206:	4649      	mov	r1, r9
    a208:	f7fd ffac 	bl	8164 <__adddf3>
    a20c:	2d0f      	cmp	r5, #15
    a20e:	4680      	mov	r8, r0
    a210:	4689      	mov	r9, r1
    a212:	ddd4      	ble.n	a1be <_strtod_l+0x396>
    a214:	1b2c      	subs	r4, r5, r4
    a216:	eba6 030b 	sub.w	r3, r6, fp
    a21a:	441c      	add	r4, r3
    a21c:	2c00      	cmp	r4, #0
    a21e:	dc26      	bgt.n	a26e <_strtod_l+0x446>
    a220:	f000 80a3 	beq.w	a36a <_strtod_l+0x542>
    a224:	4264      	negs	r4, r4
    a226:	f014 020f 	ands.w	r2, r4, #15
    a22a:	d00a      	beq.n	a242 <_strtod_l+0x41a>
    a22c:	4b5d      	ldr	r3, [pc, #372]	; (a3a4 <_strtod_l+0x57c>)
    a22e:	4640      	mov	r0, r8
    a230:	4649      	mov	r1, r9
    a232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a236:	e9d3 2300 	ldrd	r2, r3, [r3]
    a23a:	f7fe fa73 	bl	8724 <__aeabi_ddiv>
    a23e:	4680      	mov	r8, r0
    a240:	4689      	mov	r9, r1
    a242:	1124      	asrs	r4, r4, #4
    a244:	f000 8091 	beq.w	a36a <_strtod_l+0x542>
    a248:	2c1f      	cmp	r4, #31
    a24a:	f340 80b3 	ble.w	a3b4 <_strtod_l+0x58c>
    a24e:	2322      	movs	r3, #34	; 0x22
    a250:	f04f 0800 	mov.w	r8, #0
    a254:	f04f 0900 	mov.w	r9, #0
    a258:	f8ca 3000 	str.w	r3, [sl]
    a25c:	e653      	b.n	9f06 <_strtod_l+0xde>
    a25e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
    a262:	eba6 020b 	sub.w	r2, r6, fp
    a266:	4293      	cmp	r3, r2
    a268:	da19      	bge.n	a29e <_strtod_l+0x476>
    a26a:	1b2c      	subs	r4, r5, r4
    a26c:	4414      	add	r4, r2
    a26e:	f014 030f 	ands.w	r3, r4, #15
    a272:	d00a      	beq.n	a28a <_strtod_l+0x462>
    a274:	494b      	ldr	r1, [pc, #300]	; (a3a4 <_strtod_l+0x57c>)
    a276:	4642      	mov	r2, r8
    a278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a27c:	464b      	mov	r3, r9
    a27e:	e9d1 0100 	ldrd	r0, r1, [r1]
    a282:	f7fe f925 	bl	84d0 <__aeabi_dmul>
    a286:	4680      	mov	r8, r0
    a288:	4689      	mov	r9, r1
    a28a:	f034 040f 	bics.w	r4, r4, #15
    a28e:	d06c      	beq.n	a36a <_strtod_l+0x542>
    a290:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
    a294:	dd41      	ble.n	a31a <_strtod_l+0x4f2>
    a296:	2322      	movs	r3, #34	; 0x22
    a298:	f8ca 3000 	str.w	r3, [sl]
    a29c:	e771      	b.n	a182 <_strtod_l+0x35a>
    a29e:	f1c5 050f 	rsb	r5, r5, #15
    a2a2:	4c40      	ldr	r4, [pc, #256]	; (a3a4 <_strtod_l+0x57c>)
    a2a4:	4642      	mov	r2, r8
    a2a6:	464b      	mov	r3, r9
    a2a8:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
    a2b0:	f7fe f90e 	bl	84d0 <__aeabi_dmul>
    a2b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a2b6:	1b5d      	subs	r5, r3, r5
    a2b8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    a2bc:	e9d4 2300 	ldrd	r2, r3, [r4]
    a2c0:	e78f      	b.n	a1e2 <_strtod_l+0x3ba>
    a2c2:	3316      	adds	r3, #22
    a2c4:	dba6      	blt.n	a214 <_strtod_l+0x3ec>
    a2c6:	ebab 0206 	sub.w	r2, fp, r6
    a2ca:	4b36      	ldr	r3, [pc, #216]	; (a3a4 <_strtod_l+0x57c>)
    a2cc:	4640      	mov	r0, r8
    a2ce:	4649      	mov	r1, r9
    a2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2d8:	f7fe fa24 	bl	8724 <__aeabi_ddiv>
    a2dc:	e759      	b.n	a192 <_strtod_l+0x36a>
    a2de:	2300      	movs	r3, #0
    a2e0:	9306      	str	r3, [sp, #24]
    a2e2:	2322      	movs	r3, #34	; 0x22
    a2e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a39c <_strtod_l+0x574>
    a2e8:	f04f 0800 	mov.w	r8, #0
    a2ec:	f8ca 3000 	str.w	r3, [sl]
    a2f0:	9918      	ldr	r1, [sp, #96]	; 0x60
    a2f2:	4650      	mov	r0, sl
    a2f4:	f01e fbc0 	bl	28a78 <_Bfree>
    a2f8:	9906      	ldr	r1, [sp, #24]
    a2fa:	4650      	mov	r0, sl
    a2fc:	f01e fbbc 	bl	28a78 <_Bfree>
    a300:	9905      	ldr	r1, [sp, #20]
    a302:	4650      	mov	r0, sl
    a304:	f01e fbb8 	bl	28a78 <_Bfree>
    a308:	9910      	ldr	r1, [sp, #64]	; 0x40
    a30a:	4650      	mov	r0, sl
    a30c:	f01e fbb4 	bl	28a78 <_Bfree>
    a310:	9907      	ldr	r1, [sp, #28]
    a312:	4650      	mov	r0, sl
    a314:	f01e fbb0 	bl	28a78 <_Bfree>
    a318:	e5f5      	b.n	9f06 <_strtod_l+0xde>
    a31a:	2300      	movs	r3, #0
    a31c:	1124      	asrs	r4, r4, #4
    a31e:	4640      	mov	r0, r8
    a320:	4649      	mov	r1, r9
    a322:	4f21      	ldr	r7, [pc, #132]	; (a3a8 <_strtod_l+0x580>)
    a324:	9304      	str	r3, [sp, #16]
    a326:	2c01      	cmp	r4, #1
    a328:	dc22      	bgt.n	a370 <_strtod_l+0x548>
    a32a:	b10b      	cbz	r3, a330 <_strtod_l+0x508>
    a32c:	4680      	mov	r8, r0
    a32e:	4689      	mov	r9, r1
    a330:	9b04      	ldr	r3, [sp, #16]
    a332:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
    a336:	491c      	ldr	r1, [pc, #112]	; (a3a8 <_strtod_l+0x580>)
    a338:	4642      	mov	r2, r8
    a33a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a33e:	464b      	mov	r3, r9
    a340:	e9d1 0100 	ldrd	r0, r1, [r1]
    a344:	f7fe f8c4 	bl	84d0 <__aeabi_dmul>
    a348:	4b14      	ldr	r3, [pc, #80]	; (a39c <_strtod_l+0x574>)
    a34a:	460a      	mov	r2, r1
    a34c:	4680      	mov	r8, r0
    a34e:	400b      	ands	r3, r1
    a350:	4916      	ldr	r1, [pc, #88]	; (a3ac <_strtod_l+0x584>)
    a352:	428b      	cmp	r3, r1
    a354:	d89f      	bhi.n	a296 <_strtod_l+0x46e>
    a356:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    a35a:	428b      	cmp	r3, r1
    a35c:	bf86      	itte	hi
    a35e:	f8df 9050 	ldrhi.w	r9, [pc, #80]	; a3b0 <_strtod_l+0x588>
    a362:	f04f 38ff 	movhi.w	r8, #4294967295
    a366:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
    a36a:	2300      	movs	r3, #0
    a36c:	9304      	str	r3, [sp, #16]
    a36e:	e04c      	b.n	a40a <_strtod_l+0x5e2>
    a370:	07e2      	lsls	r2, r4, #31
    a372:	d504      	bpl.n	a37e <_strtod_l+0x556>
    a374:	e9d7 2300 	ldrd	r2, r3, [r7]
    a378:	f7fe f8aa 	bl	84d0 <__aeabi_dmul>
    a37c:	2301      	movs	r3, #1
    a37e:	9a04      	ldr	r2, [sp, #16]
    a380:	1064      	asrs	r4, r4, #1
    a382:	3708      	adds	r7, #8
    a384:	3201      	adds	r2, #1
    a386:	9204      	str	r2, [sp, #16]
    a388:	e7cd      	b.n	a326 <_strtod_l+0x4fe>
    a38a:	bf00      	nop
    a38c:	000375fa 	.word	0x000375fa
    a390:	00034480 	.word	0x00034480
    a394:	000355c9 	.word	0x000355c9
    a398:	00038c84 	.word	0x00038c84
    a39c:	7ff00000 	.word	0x7ff00000
    a3a0:	000368f4 	.word	0x000368f4
    a3a4:	000334c8 	.word	0x000334c8
    a3a8:	000334a0 	.word	0x000334a0
    a3ac:	7ca00000 	.word	0x7ca00000
    a3b0:	7fefffff 	.word	0x7fefffff
    a3b4:	f014 0310 	ands.w	r3, r4, #16
    a3b8:	4640      	mov	r0, r8
    a3ba:	4649      	mov	r1, r9
    a3bc:	4fab      	ldr	r7, [pc, #684]	; (a66c <_strtod_l+0x844>)
    a3be:	bf18      	it	ne
    a3c0:	236a      	movne	r3, #106	; 0x6a
    a3c2:	9304      	str	r3, [sp, #16]
    a3c4:	2300      	movs	r3, #0
    a3c6:	07e2      	lsls	r2, r4, #31
    a3c8:	d504      	bpl.n	a3d4 <_strtod_l+0x5ac>
    a3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
    a3ce:	f7fe f87f 	bl	84d0 <__aeabi_dmul>
    a3d2:	2301      	movs	r3, #1
    a3d4:	1064      	asrs	r4, r4, #1
    a3d6:	f107 0708 	add.w	r7, r7, #8
    a3da:	d1f4      	bne.n	a3c6 <_strtod_l+0x59e>
    a3dc:	b10b      	cbz	r3, a3e2 <_strtod_l+0x5ba>
    a3de:	4680      	mov	r8, r0
    a3e0:	4689      	mov	r9, r1
    a3e2:	9b04      	ldr	r3, [sp, #16]
    a3e4:	b143      	cbz	r3, a3f8 <_strtod_l+0x5d0>
    a3e6:	f3c9 520a 	ubfx	r2, r9, #20, #11
    a3ea:	4649      	mov	r1, r9
    a3ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	dc50      	bgt.n	a496 <_strtod_l+0x66e>
    a3f4:	236a      	movs	r3, #106	; 0x6a
    a3f6:	9304      	str	r3, [sp, #16]
    a3f8:	2200      	movs	r2, #0
    a3fa:	2300      	movs	r3, #0
    a3fc:	4640      	mov	r0, r8
    a3fe:	4649      	mov	r1, r9
    a400:	f7fe fe2c 	bl	905c <__aeabi_dcmpeq>
    a404:	2800      	cmp	r0, #0
    a406:	f47f af22 	bne.w	a24e <_strtod_l+0x426>
    a40a:	9b06      	ldr	r3, [sp, #24]
    a40c:	4650      	mov	r0, sl
    a40e:	9a05      	ldr	r2, [sp, #20]
    a410:	9300      	str	r3, [sp, #0]
    a412:	462b      	mov	r3, r5
    a414:	990a      	ldr	r1, [sp, #40]	; 0x28
    a416:	f01e fb99 	bl	28b4c <__s2b>
    a41a:	9010      	str	r0, [sp, #64]	; 0x40
    a41c:	2800      	cmp	r0, #0
    a41e:	f43f af3a 	beq.w	a296 <_strtod_l+0x46e>
    a422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a424:	ebab 0b06 	sub.w	fp, fp, r6
    a428:	2b00      	cmp	r3, #0
    a42a:	bfb4      	ite	lt
    a42c:	465b      	movlt	r3, fp
    a42e:	2300      	movge	r3, #0
    a430:	9311      	str	r3, [sp, #68]	; 0x44
    a432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a438:	9314      	str	r3, [sp, #80]	; 0x50
    a43a:	2300      	movs	r3, #0
    a43c:	9307      	str	r3, [sp, #28]
    a43e:	9305      	str	r3, [sp, #20]
    a440:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a442:	4650      	mov	r0, sl
    a444:	6859      	ldr	r1, [r3, #4]
    a446:	f01e fad7 	bl	289f8 <_Balloc>
    a44a:	9006      	str	r0, [sp, #24]
    a44c:	2800      	cmp	r0, #0
    a44e:	f43f af48 	beq.w	a2e2 <_strtod_l+0x4ba>
    a452:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a454:	300c      	adds	r0, #12
    a456:	691a      	ldr	r2, [r3, #16]
    a458:	f103 010c 	add.w	r1, r3, #12
    a45c:	3202      	adds	r2, #2
    a45e:	0092      	lsls	r2, r2, #2
    a460:	f027 fadf 	bl	31a22 <memcpy>
    a464:	ab1a      	add	r3, sp, #104	; 0x68
    a466:	4642      	mov	r2, r8
    a468:	4650      	mov	r0, sl
    a46a:	9301      	str	r3, [sp, #4]
    a46c:	ab19      	add	r3, sp, #100	; 0x64
    a46e:	9300      	str	r3, [sp, #0]
    a470:	464b      	mov	r3, r9
    a472:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    a476:	f01e fe39 	bl	290ec <__d2b>
    a47a:	9018      	str	r0, [sp, #96]	; 0x60
    a47c:	2800      	cmp	r0, #0
    a47e:	f43f af30 	beq.w	a2e2 <_strtod_l+0x4ba>
    a482:	2101      	movs	r1, #1
    a484:	4650      	mov	r0, sl
    a486:	f01e fbab 	bl	28be0 <__i2b>
    a48a:	4603      	mov	r3, r0
    a48c:	9005      	str	r0, [sp, #20]
    a48e:	b9d0      	cbnz	r0, a4c6 <_strtod_l+0x69e>
    a490:	2300      	movs	r3, #0
    a492:	9305      	str	r3, [sp, #20]
    a494:	e725      	b.n	a2e2 <_strtod_l+0x4ba>
    a496:	2b1f      	cmp	r3, #31
    a498:	dd0e      	ble.n	a4b8 <_strtod_l+0x690>
    a49a:	2b34      	cmp	r3, #52	; 0x34
    a49c:	f04f 0800 	mov.w	r8, #0
    a4a0:	bfdb      	ittet	le
    a4a2:	f04f 33ff 	movle.w	r3, #4294967295
    a4a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
    a4aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
    a4ae:	4093      	lslle	r3, r2
    a4b0:	bfd8      	it	le
    a4b2:	ea03 0901 	andle.w	r9, r3, r1
    a4b6:	e79d      	b.n	a3f4 <_strtod_l+0x5cc>
    a4b8:	f04f 32ff 	mov.w	r2, #4294967295
    a4bc:	fa02 f303 	lsl.w	r3, r2, r3
    a4c0:	ea03 0808 	and.w	r8, r3, r8
    a4c4:	e796      	b.n	a3f4 <_strtod_l+0x5cc>
    a4c6:	9c19      	ldr	r4, [sp, #100]	; 0x64
    a4c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a4ca:	2c00      	cmp	r4, #0
    a4cc:	bfa9      	itett	ge
    a4ce:	9b11      	ldrge	r3, [sp, #68]	; 0x44
    a4d0:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
    a4d2:	18e7      	addge	r7, r4, r3
    a4d4:	9e14      	ldrge	r6, [sp, #80]	; 0x50
    a4d6:	bfb8      	it	lt
    a4d8:	1b1e      	sublt	r6, r3, r4
    a4da:	9b04      	ldr	r3, [sp, #16]
    a4dc:	bfb8      	it	lt
    a4de:	9f11      	ldrlt	r7, [sp, #68]	; 0x44
    a4e0:	1ae4      	subs	r4, r4, r3
    a4e2:	4b63      	ldr	r3, [pc, #396]	; (a670 <_strtod_l+0x848>)
    a4e4:	4414      	add	r4, r2
    a4e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a4ea:	3c01      	subs	r4, #1
    a4ec:	429c      	cmp	r4, r3
    a4ee:	f280 80b0 	bge.w	a652 <_strtod_l+0x82a>
    a4f2:	1b1b      	subs	r3, r3, r4
    a4f4:	2501      	movs	r5, #1
    a4f6:	2b1f      	cmp	r3, #31
    a4f8:	eba2 0203 	sub.w	r2, r2, r3
    a4fc:	bfcd      	iteet	gt
    a4fe:	f1c4 447f 	rsbgt	r4, r4, #4278190080	; 0xff000000
    a502:	409d      	lslle	r5, r3
    a504:	2400      	movle	r4, #0
    a506:	f504 047f 	addgt.w	r4, r4, #16711680	; 0xff0000
    a50a:	bfc2      	ittt	gt
    a50c:	f504 447b 	addgt.w	r4, r4, #64256	; 0xfb00
    a510:	34e2      	addgt	r4, #226	; 0xe2
    a512:	fa05 f404 	lslgt.w	r4, r5, r4
    a516:	eb07 0b02 	add.w	fp, r7, r2
    a51a:	9b04      	ldr	r3, [sp, #16]
    a51c:	4416      	add	r6, r2
    a51e:	455f      	cmp	r7, fp
    a520:	441e      	add	r6, r3
    a522:	463b      	mov	r3, r7
    a524:	bfa8      	it	ge
    a526:	465b      	movge	r3, fp
    a528:	42b3      	cmp	r3, r6
    a52a:	bfa8      	it	ge
    a52c:	4633      	movge	r3, r6
    a52e:	2b00      	cmp	r3, #0
    a530:	bfc2      	ittt	gt
    a532:	ebab 0b03 	subgt.w	fp, fp, r3
    a536:	1af6      	subgt	r6, r6, r3
    a538:	1aff      	subgt	r7, r7, r3
    a53a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a53c:	2b00      	cmp	r3, #0
    a53e:	dd16      	ble.n	a56e <_strtod_l+0x746>
    a540:	461a      	mov	r2, r3
    a542:	9905      	ldr	r1, [sp, #20]
    a544:	4650      	mov	r0, sl
    a546:	f01e fc0b 	bl	28d60 <__pow5mult>
    a54a:	9005      	str	r0, [sp, #20]
    a54c:	2800      	cmp	r0, #0
    a54e:	d09f      	beq.n	a490 <_strtod_l+0x668>
    a550:	4601      	mov	r1, r0
    a552:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a554:	4650      	mov	r0, sl
    a556:	f01e fb59 	bl	28c0c <__multiply>
    a55a:	900d      	str	r0, [sp, #52]	; 0x34
    a55c:	2800      	cmp	r0, #0
    a55e:	f43f aec0 	beq.w	a2e2 <_strtod_l+0x4ba>
    a562:	9918      	ldr	r1, [sp, #96]	; 0x60
    a564:	4650      	mov	r0, sl
    a566:	f01e fa87 	bl	28a78 <_Bfree>
    a56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a56c:	9318      	str	r3, [sp, #96]	; 0x60
    a56e:	f1bb 0f00 	cmp.w	fp, #0
    a572:	dc71      	bgt.n	a658 <_strtod_l+0x830>
    a574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a576:	2b00      	cmp	r3, #0
    a578:	dd08      	ble.n	a58c <_strtod_l+0x764>
    a57a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a57c:	4650      	mov	r0, sl
    a57e:	9906      	ldr	r1, [sp, #24]
    a580:	f01e fbee 	bl	28d60 <__pow5mult>
    a584:	9006      	str	r0, [sp, #24]
    a586:	2800      	cmp	r0, #0
    a588:	f43f aea9 	beq.w	a2de <_strtod_l+0x4b6>
    a58c:	2e00      	cmp	r6, #0
    a58e:	dd08      	ble.n	a5a2 <_strtod_l+0x77a>
    a590:	4632      	mov	r2, r6
    a592:	9906      	ldr	r1, [sp, #24]
    a594:	4650      	mov	r0, sl
    a596:	f01e fc3d 	bl	28e14 <__lshift>
    a59a:	9006      	str	r0, [sp, #24]
    a59c:	2800      	cmp	r0, #0
    a59e:	f43f ae9e 	beq.w	a2de <_strtod_l+0x4b6>
    a5a2:	2f00      	cmp	r7, #0
    a5a4:	dd08      	ble.n	a5b8 <_strtod_l+0x790>
    a5a6:	463a      	mov	r2, r7
    a5a8:	9905      	ldr	r1, [sp, #20]
    a5aa:	4650      	mov	r0, sl
    a5ac:	f01e fc32 	bl	28e14 <__lshift>
    a5b0:	9005      	str	r0, [sp, #20]
    a5b2:	2800      	cmp	r0, #0
    a5b4:	f43f ae95 	beq.w	a2e2 <_strtod_l+0x4ba>
    a5b8:	9a06      	ldr	r2, [sp, #24]
    a5ba:	4650      	mov	r0, sl
    a5bc:	9918      	ldr	r1, [sp, #96]	; 0x60
    a5be:	f01e fc95 	bl	28eec <__mdiff>
    a5c2:	9007      	str	r0, [sp, #28]
    a5c4:	2800      	cmp	r0, #0
    a5c6:	f43f ae8c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a5ca:	68c3      	ldr	r3, [r0, #12]
    a5cc:	9905      	ldr	r1, [sp, #20]
    a5ce:	930d      	str	r3, [sp, #52]	; 0x34
    a5d0:	2300      	movs	r3, #0
    a5d2:	60c3      	str	r3, [r0, #12]
    a5d4:	f027 fedc 	bl	32390 <__mcmp>
    a5d8:	2800      	cmp	r0, #0
    a5da:	da4b      	bge.n	a674 <_strtod_l+0x84c>
    a5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a5de:	ea53 0308 	orrs.w	r3, r3, r8
    a5e2:	f040 80bc 	bne.w	a75e <_strtod_l+0x936>
    a5e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	f040 80b7 	bne.w	a75e <_strtod_l+0x936>
    a5f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a5f4:	0d1b      	lsrs	r3, r3, #20
    a5f6:	051b      	lsls	r3, r3, #20
    a5f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a5fc:	f240 80af 	bls.w	a75e <_strtod_l+0x936>
    a600:	9b07      	ldr	r3, [sp, #28]
    a602:	695b      	ldr	r3, [r3, #20]
    a604:	b923      	cbnz	r3, a610 <_strtod_l+0x7e8>
    a606:	9b07      	ldr	r3, [sp, #28]
    a608:	691b      	ldr	r3, [r3, #16]
    a60a:	2b01      	cmp	r3, #1
    a60c:	f340 80a7 	ble.w	a75e <_strtod_l+0x936>
    a610:	2201      	movs	r2, #1
    a612:	9907      	ldr	r1, [sp, #28]
    a614:	4650      	mov	r0, sl
    a616:	f01e fbfd 	bl	28e14 <__lshift>
    a61a:	9905      	ldr	r1, [sp, #20]
    a61c:	9007      	str	r0, [sp, #28]
    a61e:	f027 feb7 	bl	32390 <__mcmp>
    a622:	2800      	cmp	r0, #0
    a624:	f340 809b 	ble.w	a75e <_strtod_l+0x936>
    a628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a62c:	9a04      	ldr	r2, [sp, #16]
    a62e:	0d1b      	lsrs	r3, r3, #20
    a630:	051b      	lsls	r3, r3, #20
    a632:	2a00      	cmp	r2, #0
    a634:	d079      	beq.n	a72a <_strtod_l+0x902>
    a636:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    a63a:	d86d      	bhi.n	a718 <_strtod_l+0x8f0>
    a63c:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    a640:	d846      	bhi.n	a6d0 <_strtod_l+0x8a8>
    a642:	f04f 0800 	mov.w	r8, #0
    a646:	f04f 0900 	mov.w	r9, #0
    a64a:	2322      	movs	r3, #34	; 0x22
    a64c:	f8ca 3000 	str.w	r3, [sl]
    a650:	e64e      	b.n	a2f0 <_strtod_l+0x4c8>
    a652:	2400      	movs	r4, #0
    a654:	2501      	movs	r5, #1
    a656:	e75e      	b.n	a516 <_strtod_l+0x6ee>
    a658:	465a      	mov	r2, fp
    a65a:	9918      	ldr	r1, [sp, #96]	; 0x60
    a65c:	4650      	mov	r0, sl
    a65e:	f01e fbd9 	bl	28e14 <__lshift>
    a662:	9018      	str	r0, [sp, #96]	; 0x60
    a664:	2800      	cmp	r0, #0
    a666:	d185      	bne.n	a574 <_strtod_l+0x74c>
    a668:	e63b      	b.n	a2e2 <_strtod_l+0x4ba>
    a66a:	bf00      	nop
    a66c:	00033478 	.word	0x00033478
    a670:	fffffc02 	.word	0xfffffc02
    a674:	46cb      	mov	fp, r9
    a676:	f040 80a3 	bne.w	a7c0 <_strtod_l+0x998>
    a67a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a67c:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a680:	2a00      	cmp	r2, #0
    a682:	d040      	beq.n	a706 <_strtod_l+0x8de>
    a684:	4a96      	ldr	r2, [pc, #600]	; (a8e0 <_strtod_l+0xab8>)
    a686:	4293      	cmp	r3, r2
    a688:	d158      	bne.n	a73c <_strtod_l+0x914>
    a68a:	9b04      	ldr	r3, [sp, #16]
    a68c:	4642      	mov	r2, r8
    a68e:	b97b      	cbnz	r3, a6b0 <_strtod_l+0x888>
    a690:	f1b8 3fff 	cmp.w	r8, #4294967295
    a694:	f040 8089 	bne.w	a7aa <_strtod_l+0x982>
    a698:	4b92      	ldr	r3, [pc, #584]	; (a8e4 <_strtod_l+0xabc>)
    a69a:	4599      	cmp	r9, r3
    a69c:	f43f ae21 	beq.w	a2e2 <_strtod_l+0x4ba>
    a6a0:	4b91      	ldr	r3, [pc, #580]	; (a8e8 <_strtod_l+0xac0>)
    a6a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
    a6a6:	ea09 0303 	and.w	r3, r9, r3
    a6aa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a6ae:	e61f      	b.n	a2f0 <_strtod_l+0x4c8>
    a6b0:	4b8d      	ldr	r3, [pc, #564]	; (a8e8 <_strtod_l+0xac0>)
    a6b2:	ea09 0303 	and.w	r3, r9, r3
    a6b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a6ba:	d916      	bls.n	a6ea <_strtod_l+0x8c2>
    a6bc:	f118 0101 	adds.w	r1, r8, #1
    a6c0:	d11b      	bne.n	a6fa <_strtod_l+0x8d2>
    a6c2:	4a88      	ldr	r2, [pc, #544]	; (a8e4 <_strtod_l+0xabc>)
    a6c4:	4591      	cmp	r9, r2
    a6c6:	f43f ae0c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a6ca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
    a6ce:	4680      	mov	r8, r0
    a6d0:	4b86      	ldr	r3, [pc, #536]	; (a8ec <_strtod_l+0xac4>)
    a6d2:	4640      	mov	r0, r8
    a6d4:	4649      	mov	r1, r9
    a6d6:	2200      	movs	r2, #0
    a6d8:	f7fd fefa 	bl	84d0 <__aeabi_dmul>
    a6dc:	460b      	mov	r3, r1
    a6de:	4680      	mov	r8, r0
    a6e0:	4689      	mov	r9, r1
    a6e2:	4303      	orrs	r3, r0
    a6e4:	f47f ae04 	bne.w	a2f0 <_strtod_l+0x4c8>
    a6e8:	e7af      	b.n	a64a <_strtod_l+0x822>
    a6ea:	0d1e      	lsrs	r6, r3, #20
    a6ec:	f04f 31ff 	mov.w	r1, #4294967295
    a6f0:	f1c6 066b 	rsb	r6, r6, #107	; 0x6b
    a6f4:	40b1      	lsls	r1, r6
    a6f6:	4588      	cmp	r8, r1
    a6f8:	d0e7      	beq.n	a6ca <_strtod_l+0x8a2>
    a6fa:	2c00      	cmp	r4, #0
    a6fc:	d05e      	beq.n	a7bc <_strtod_l+0x994>
    a6fe:	ea14 0f0b 	tst.w	r4, fp
    a702:	d0e5      	beq.n	a6d0 <_strtod_l+0x8a8>
    a704:	e01e      	b.n	a744 <_strtod_l+0x91c>
    a706:	2b00      	cmp	r3, #0
    a708:	d14a      	bne.n	a7a0 <_strtod_l+0x978>
    a70a:	f1b8 0f00 	cmp.w	r8, #0
    a70e:	d08b      	beq.n	a628 <_strtod_l+0x800>
    a710:	b364      	cbz	r4, a76c <_strtod_l+0x944>
    a712:	ea14 0f0b 	tst.w	r4, fp
    a716:	e02b      	b.n	a770 <_strtod_l+0x948>
    a718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a71c:	f04f 38ff 	mov.w	r8, #4294967295
    a720:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a724:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a728:	e7d2      	b.n	a6d0 <_strtod_l+0x8a8>
    a72a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    a72e:	f04f 38ff 	mov.w	r8, #4294967295
    a732:	ea6f 5913 	mvn.w	r9, r3, lsr #20
    a736:	ea6f 5909 	mvn.w	r9, r9, lsl #20
    a73a:	e5d9      	b.n	a2f0 <_strtod_l+0x4c8>
    a73c:	b19c      	cbz	r4, a766 <_strtod_l+0x93e>
    a73e:	ea14 0f09 	tst.w	r4, r9
    a742:	d00c      	beq.n	a75e <_strtod_l+0x936>
    a744:	9a04      	ldr	r2, [sp, #16]
    a746:	4640      	mov	r0, r8
    a748:	4649      	mov	r1, r9
    a74a:	f027 fb42 	bl	31dd2 <sulp>
    a74e:	4602      	mov	r2, r0
    a750:	460b      	mov	r3, r1
    a752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a756:	f7fd fd05 	bl	8164 <__adddf3>
    a75a:	4680      	mov	r8, r0
    a75c:	4689      	mov	r9, r1
    a75e:	9b04      	ldr	r3, [sp, #16]
    a760:	2b00      	cmp	r3, #0
    a762:	d1b5      	bne.n	a6d0 <_strtod_l+0x8a8>
    a764:	e5c4      	b.n	a2f0 <_strtod_l+0x4c8>
    a766:	ea15 0f08 	tst.w	r5, r8
    a76a:	e7ea      	b.n	a742 <_strtod_l+0x91a>
    a76c:	ea18 0f05 	tst.w	r8, r5
    a770:	d0f5      	beq.n	a75e <_strtod_l+0x936>
    a772:	9a04      	ldr	r2, [sp, #16]
    a774:	4640      	mov	r0, r8
    a776:	4649      	mov	r1, r9
    a778:	f027 fb2b 	bl	31dd2 <sulp>
    a77c:	4602      	mov	r2, r0
    a77e:	460b      	mov	r3, r1
    a780:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a784:	f7fd fcec 	bl	8160 <__aeabi_dsub>
    a788:	2200      	movs	r2, #0
    a78a:	2300      	movs	r3, #0
    a78c:	4604      	mov	r4, r0
    a78e:	460d      	mov	r5, r1
    a790:	f7fe fc64 	bl	905c <__aeabi_dcmpeq>
    a794:	2800      	cmp	r0, #0
    a796:	f47f af54 	bne.w	a642 <_strtod_l+0x81a>
    a79a:	46a0      	mov	r8, r4
    a79c:	46a9      	mov	r9, r5
    a79e:	e7de      	b.n	a75e <_strtod_l+0x936>
    a7a0:	2c00      	cmp	r4, #0
    a7a2:	d1b6      	bne.n	a712 <_strtod_l+0x8ea>
    a7a4:	ea15 0f08 	tst.w	r5, r8
    a7a8:	e7e2      	b.n	a770 <_strtod_l+0x948>
    a7aa:	b124      	cbz	r4, a7b6 <_strtod_l+0x98e>
    a7ac:	ea14 0f09 	tst.w	r4, r9
    a7b0:	f43f ad9e 	beq.w	a2f0 <_strtod_l+0x4c8>
    a7b4:	e7c6      	b.n	a744 <_strtod_l+0x91c>
    a7b6:	ea18 0f05 	tst.w	r8, r5
    a7ba:	e7f9      	b.n	a7b0 <_strtod_l+0x988>
    a7bc:	422a      	tst	r2, r5
    a7be:	e7a0      	b.n	a702 <_strtod_l+0x8da>
    a7c0:	9905      	ldr	r1, [sp, #20]
    a7c2:	9807      	ldr	r0, [sp, #28]
    a7c4:	f027 fdff 	bl	323c6 <__ratio>
    a7c8:	2200      	movs	r2, #0
    a7ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7ce:	4604      	mov	r4, r0
    a7d0:	460d      	mov	r5, r1
    a7d2:	f7fe fc57 	bl	9084 <__aeabi_dcmple>
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d06d      	beq.n	a8b6 <_strtod_l+0xa8e>
    a7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d178      	bne.n	a8d2 <_strtod_l+0xaaa>
    a7e0:	f1b8 0f00 	cmp.w	r8, #0
    a7e4:	d156      	bne.n	a894 <_strtod_l+0xa6c>
    a7e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d159      	bne.n	a8a2 <_strtod_l+0xa7a>
    a7ee:	2200      	movs	r2, #0
    a7f0:	4b3f      	ldr	r3, [pc, #252]	; (a8f0 <_strtod_l+0xac8>)
    a7f2:	4620      	mov	r0, r4
    a7f4:	4629      	mov	r1, r5
    a7f6:	f7fe fc3b 	bl	9070 <__aeabi_dcmplt>
    a7fa:	2800      	cmp	r0, #0
    a7fc:	d158      	bne.n	a8b0 <_strtod_l+0xa88>
    a7fe:	4620      	mov	r0, r4
    a800:	4629      	mov	r1, r5
    a802:	2200      	movs	r2, #0
    a804:	4b3b      	ldr	r3, [pc, #236]	; (a8f4 <_strtod_l+0xacc>)
    a806:	f7fd fe63 	bl	84d0 <__aeabi_dmul>
    a80a:	4604      	mov	r4, r0
    a80c:	460d      	mov	r5, r1
    a80e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    a812:	9408      	str	r4, [sp, #32]
    a814:	9309      	str	r3, [sp, #36]	; 0x24
    a816:	4b34      	ldr	r3, [pc, #208]	; (a8e8 <_strtod_l+0xac0>)
    a818:	4a33      	ldr	r2, [pc, #204]	; (a8e8 <_strtod_l+0xac0>)
    a81a:	ea0b 0303 	and.w	r3, fp, r3
    a81e:	ea0b 0202 	and.w	r2, fp, r2
    a822:	9315      	str	r3, [sp, #84]	; 0x54
    a824:	4b34      	ldr	r3, [pc, #208]	; (a8f8 <_strtod_l+0xad0>)
    a826:	429a      	cmp	r2, r3
    a828:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    a82c:	f040 809e 	bne.w	a96c <_strtod_l+0xb44>
    a830:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
    a834:	4640      	mov	r0, r8
    a836:	4649      	mov	r1, r9
    a838:	f01e fbee 	bl	29018 <__ulp>
    a83c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a840:	f7fd fe46 	bl	84d0 <__aeabi_dmul>
    a844:	4642      	mov	r2, r8
    a846:	464b      	mov	r3, r9
    a848:	f7fd fc8c 	bl	8164 <__adddf3>
    a84c:	460b      	mov	r3, r1
    a84e:	4926      	ldr	r1, [pc, #152]	; (a8e8 <_strtod_l+0xac0>)
    a850:	4680      	mov	r8, r0
    a852:	4a2a      	ldr	r2, [pc, #168]	; (a8fc <_strtod_l+0xad4>)
    a854:	4019      	ands	r1, r3
    a856:	4291      	cmp	r1, r2
    a858:	d954      	bls.n	a904 <_strtod_l+0xadc>
    a85a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a85c:	4b21      	ldr	r3, [pc, #132]	; (a8e4 <_strtod_l+0xabc>)
    a85e:	429a      	cmp	r2, r3
    a860:	d103      	bne.n	a86a <_strtod_l+0xa42>
    a862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a864:	3301      	adds	r3, #1
    a866:	f43f ad3c 	beq.w	a2e2 <_strtod_l+0x4ba>
    a86a:	f8df 9078 	ldr.w	r9, [pc, #120]	; a8e4 <_strtod_l+0xabc>
    a86e:	f04f 38ff 	mov.w	r8, #4294967295
    a872:	9918      	ldr	r1, [sp, #96]	; 0x60
    a874:	4650      	mov	r0, sl
    a876:	f01e f8ff 	bl	28a78 <_Bfree>
    a87a:	9906      	ldr	r1, [sp, #24]
    a87c:	4650      	mov	r0, sl
    a87e:	f01e f8fb 	bl	28a78 <_Bfree>
    a882:	9905      	ldr	r1, [sp, #20]
    a884:	4650      	mov	r0, sl
    a886:	f01e f8f7 	bl	28a78 <_Bfree>
    a88a:	9907      	ldr	r1, [sp, #28]
    a88c:	4650      	mov	r0, sl
    a88e:	f01e f8f3 	bl	28a78 <_Bfree>
    a892:	e5d5      	b.n	a440 <_strtod_l+0x618>
    a894:	f1b8 0f01 	cmp.w	r8, #1
    a898:	d103      	bne.n	a8a2 <_strtod_l+0xa7a>
    a89a:	f1b9 0f00 	cmp.w	r9, #0
    a89e:	f43f aed0 	beq.w	a642 <_strtod_l+0x81a>
    a8a2:	4c17      	ldr	r4, [pc, #92]	; (a900 <_strtod_l+0xad8>)
    a8a4:	2300      	movs	r3, #0
    a8a6:	4d12      	ldr	r5, [pc, #72]	; (a8f0 <_strtod_l+0xac8>)
    a8a8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a8ac:	2400      	movs	r4, #0
    a8ae:	e7b2      	b.n	a816 <_strtod_l+0x9ee>
    a8b0:	2400      	movs	r4, #0
    a8b2:	4d10      	ldr	r5, [pc, #64]	; (a8f4 <_strtod_l+0xacc>)
    a8b4:	e7ab      	b.n	a80e <_strtod_l+0x9e6>
    a8b6:	4b0f      	ldr	r3, [pc, #60]	; (a8f4 <_strtod_l+0xacc>)
    a8b8:	4620      	mov	r0, r4
    a8ba:	4629      	mov	r1, r5
    a8bc:	2200      	movs	r2, #0
    a8be:	f7fd fe07 	bl	84d0 <__aeabi_dmul>
    a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a8c4:	4604      	mov	r4, r0
    a8c6:	460d      	mov	r5, r1
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	d0a0      	beq.n	a80e <_strtod_l+0x9e6>
    a8cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
    a8d0:	e7a1      	b.n	a816 <_strtod_l+0x9ee>
    a8d2:	4c07      	ldr	r4, [pc, #28]	; (a8f0 <_strtod_l+0xac8>)
    a8d4:	2300      	movs	r3, #0
    a8d6:	4625      	mov	r5, r4
    a8d8:	e9cd 3408 	strd	r3, r4, [sp, #32]
    a8dc:	461c      	mov	r4, r3
    a8de:	e79a      	b.n	a816 <_strtod_l+0x9ee>
    a8e0:	000fffff 	.word	0x000fffff
    a8e4:	7fefffff 	.word	0x7fefffff
    a8e8:	7ff00000 	.word	0x7ff00000
    a8ec:	39500000 	.word	0x39500000
    a8f0:	3ff00000 	.word	0x3ff00000
    a8f4:	3fe00000 	.word	0x3fe00000
    a8f8:	7fe00000 	.word	0x7fe00000
    a8fc:	7c9fffff 	.word	0x7c9fffff
    a900:	bff00000 	.word	0xbff00000
    a904:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
    a908:	9b04      	ldr	r3, [sp, #16]
    a90a:	464e      	mov	r6, r9
    a90c:	2b00      	cmp	r3, #0
    a90e:	d1b0      	bne.n	a872 <_strtod_l+0xa4a>
    a910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
    a914:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a916:	0d1b      	lsrs	r3, r3, #20
    a918:	051b      	lsls	r3, r3, #20
    a91a:	429a      	cmp	r2, r3
    a91c:	d1a9      	bne.n	a872 <_strtod_l+0xa4a>
    a91e:	4620      	mov	r0, r4
    a920:	4629      	mov	r1, r5
    a922:	f7fe fc03 	bl	912c <__aeabi_d2lz>
    a926:	f3c9 0613 	ubfx	r6, r9, #0, #20
    a92a:	f7fd fda3 	bl	8474 <__aeabi_l2d>
    a92e:	460b      	mov	r3, r1
    a930:	4602      	mov	r2, r0
    a932:	4629      	mov	r1, r5
    a934:	4620      	mov	r0, r4
    a936:	ea46 0608 	orr.w	r6, r6, r8
    a93a:	f7fd fc11 	bl	8160 <__aeabi_dsub>
    a93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a940:	4604      	mov	r4, r0
    a942:	460d      	mov	r5, r1
    a944:	431e      	orrs	r6, r3
    a946:	d04a      	beq.n	a9de <_strtod_l+0xbb6>
    a948:	a32d      	add	r3, pc, #180	; (adr r3, aa00 <_strtod_l+0xbd8>)
    a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a94e:	f7fe fb8f 	bl	9070 <__aeabi_dcmplt>
    a952:	2800      	cmp	r0, #0
    a954:	f47f accc 	bne.w	a2f0 <_strtod_l+0x4c8>
    a958:	4620      	mov	r0, r4
    a95a:	4629      	mov	r1, r5
    a95c:	a32a      	add	r3, pc, #168	; (adr r3, aa08 <_strtod_l+0xbe0>)
    a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a962:	f7fe fba3 	bl	90ac <__aeabi_dcmpgt>
    a966:	2800      	cmp	r0, #0
    a968:	d083      	beq.n	a872 <_strtod_l+0xa4a>
    a96a:	e4c1      	b.n	a2f0 <_strtod_l+0x4c8>
    a96c:	9b04      	ldr	r3, [sp, #16]
    a96e:	b313      	cbz	r3, a9b6 <_strtod_l+0xb8e>
    a970:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a972:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    a976:	d81e      	bhi.n	a9b6 <_strtod_l+0xb8e>
    a978:	4620      	mov	r0, r4
    a97a:	4629      	mov	r1, r5
    a97c:	a324      	add	r3, pc, #144	; (adr r3, aa10 <_strtod_l+0xbe8>)
    a97e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a982:	f7fe fb7f 	bl	9084 <__aeabi_dcmple>
    a986:	b190      	cbz	r0, a9ae <_strtod_l+0xb86>
    a988:	4629      	mov	r1, r5
    a98a:	4620      	mov	r0, r4
    a98c:	f7fe fb98 	bl	90c0 <__aeabi_d2uiz>
    a990:	2801      	cmp	r0, #1
    a992:	bf38      	it	cc
    a994:	2001      	movcc	r0, #1
    a996:	f7fd fd21 	bl	83dc <__aeabi_ui2d>
    a99a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a99c:	4604      	mov	r4, r0
    a99e:	460d      	mov	r5, r1
    a9a0:	b9d3      	cbnz	r3, a9d8 <_strtod_l+0xbb0>
    a9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a9a6:	9012      	str	r0, [sp, #72]	; 0x48
    a9a8:	9313      	str	r3, [sp, #76]	; 0x4c
    a9aa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
    a9ae:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
    a9b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a9b4:	1a9f      	subs	r7, r3, r2
    a9b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a9ba:	f01e fb2d 	bl	29018 <__ulp>
    a9be:	4602      	mov	r2, r0
    a9c0:	460b      	mov	r3, r1
    a9c2:	4630      	mov	r0, r6
    a9c4:	4639      	mov	r1, r7
    a9c6:	f7fd fd83 	bl	84d0 <__aeabi_dmul>
    a9ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a9ce:	f7fd fbc9 	bl	8164 <__adddf3>
    a9d2:	4680      	mov	r8, r0
    a9d4:	4689      	mov	r9, r1
    a9d6:	e797      	b.n	a908 <_strtod_l+0xae0>
    a9d8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    a9dc:	e7e5      	b.n	a9aa <_strtod_l+0xb82>
    a9de:	a30e      	add	r3, pc, #56	; (adr r3, aa18 <_strtod_l+0xbf0>)
    a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9e4:	f7fe fb44 	bl	9070 <__aeabi_dcmplt>
    a9e8:	e7bd      	b.n	a966 <_strtod_l+0xb3e>
    a9ea:	2a65      	cmp	r2, #101	; 0x65
    a9ec:	f43f ab48 	beq.w	a080 <_strtod_l+0x258>
    a9f0:	2a45      	cmp	r2, #69	; 0x45
    a9f2:	f43f ab45 	beq.w	a080 <_strtod_l+0x258>
    a9f6:	2301      	movs	r3, #1
    a9f8:	f7ff bb7e 	b.w	a0f8 <_strtod_l+0x2d0>
    a9fc:	f3af 8000 	nop.w
    aa00:	94a03595 	.word	0x94a03595
    aa04:	3fdfffff 	.word	0x3fdfffff
    aa08:	35afe535 	.word	0x35afe535
    aa0c:	3fe00000 	.word	0x3fe00000
    aa10:	ffc00000 	.word	0xffc00000
    aa14:	41dfffff 	.word	0x41dfffff
    aa18:	94a03595 	.word	0x94a03595
    aa1c:	3fcfffff 	.word	0x3fcfffff

0000aa20 <_dtoa_r>:
    aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa24:	4614      	mov	r4, r2
    aa26:	b097      	sub	sp, #92	; 0x5c
    aa28:	461d      	mov	r5, r3
    aa2a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    aa2c:	4683      	mov	fp, r0
    aa2e:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    aa30:	e9cd 4504 	strd	r4, r5, [sp, #16]
    aa34:	b97f      	cbnz	r7, aa56 <_dtoa_r+0x36>
    aa36:	2010      	movs	r0, #16
    aa38:	f01c fa04 	bl	26e44 <malloc>
    aa3c:	4602      	mov	r2, r0
    aa3e:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    aa42:	b920      	cbnz	r0, aa4e <_dtoa_r+0x2e>
    aa44:	4ba2      	ldr	r3, [pc, #648]	; (acd0 <_dtoa_r+0x2b0>)
    aa46:	21ea      	movs	r1, #234	; 0xea
    aa48:	48a2      	ldr	r0, [pc, #648]	; (acd4 <_dtoa_r+0x2b4>)
    aa4a:	f01d fc65 	bl	28318 <__assert_func>
    aa4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
    aa52:	6007      	str	r7, [r0, #0]
    aa54:	60c7      	str	r7, [r0, #12]
    aa56:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    aa5a:	6819      	ldr	r1, [r3, #0]
    aa5c:	b159      	cbz	r1, aa76 <_dtoa_r+0x56>
    aa5e:	685a      	ldr	r2, [r3, #4]
    aa60:	2301      	movs	r3, #1
    aa62:	4658      	mov	r0, fp
    aa64:	4093      	lsls	r3, r2
    aa66:	604a      	str	r2, [r1, #4]
    aa68:	608b      	str	r3, [r1, #8]
    aa6a:	f01e f805 	bl	28a78 <_Bfree>
    aa6e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    aa72:	2200      	movs	r2, #0
    aa74:	601a      	str	r2, [r3, #0]
    aa76:	1e2b      	subs	r3, r5, #0
    aa78:	bfb7      	itett	lt
    aa7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    aa7e:	2300      	movge	r3, #0
    aa80:	2201      	movlt	r2, #1
    aa82:	9305      	strlt	r3, [sp, #20]
    aa84:	bfa8      	it	ge
    aa86:	6033      	strge	r3, [r6, #0]
    aa88:	9f05      	ldr	r7, [sp, #20]
    aa8a:	4b93      	ldr	r3, [pc, #588]	; (acd8 <_dtoa_r+0x2b8>)
    aa8c:	bfb8      	it	lt
    aa8e:	6032      	strlt	r2, [r6, #0]
    aa90:	43bb      	bics	r3, r7
    aa92:	d119      	bne.n	aac8 <_dtoa_r+0xa8>
    aa94:	f242 730f 	movw	r3, #9999	; 0x270f
    aa98:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aa9a:	6013      	str	r3, [r2, #0]
    aa9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
    aaa0:	4323      	orrs	r3, r4
    aaa2:	f000 85e0 	beq.w	b666 <_dtoa_r+0xc46>
    aaa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aaa8:	b953      	cbnz	r3, aac0 <_dtoa_r+0xa0>
    aaaa:	4b8c      	ldr	r3, [pc, #560]	; (acdc <_dtoa_r+0x2bc>)
    aaac:	e021      	b.n	aaf2 <_dtoa_r+0xd2>
    aaae:	4b8c      	ldr	r3, [pc, #560]	; (ace0 <_dtoa_r+0x2c0>)
    aab0:	9308      	str	r3, [sp, #32]
    aab2:	3308      	adds	r3, #8
    aab4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aab6:	6013      	str	r3, [r2, #0]
    aab8:	9808      	ldr	r0, [sp, #32]
    aaba:	b017      	add	sp, #92	; 0x5c
    aabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aac0:	4b86      	ldr	r3, [pc, #536]	; (acdc <_dtoa_r+0x2bc>)
    aac2:	9308      	str	r3, [sp, #32]
    aac4:	3303      	adds	r3, #3
    aac6:	e7f5      	b.n	aab4 <_dtoa_r+0x94>
    aac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aacc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    aad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aad4:	2200      	movs	r2, #0
    aad6:	2300      	movs	r3, #0
    aad8:	f7fe fac0 	bl	905c <__aeabi_dcmpeq>
    aadc:	4680      	mov	r8, r0
    aade:	b150      	cbz	r0, aaf6 <_dtoa_r+0xd6>
    aae0:	2301      	movs	r3, #1
    aae2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    aae4:	6013      	str	r3, [r2, #0]
    aae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    aae8:	b113      	cbz	r3, aaf0 <_dtoa_r+0xd0>
    aaea:	4b7e      	ldr	r3, [pc, #504]	; (ace4 <_dtoa_r+0x2c4>)
    aaec:	9a24      	ldr	r2, [sp, #144]	; 0x90
    aaee:	6013      	str	r3, [r2, #0]
    aaf0:	4b7d      	ldr	r3, [pc, #500]	; (ace8 <_dtoa_r+0x2c8>)
    aaf2:	9308      	str	r3, [sp, #32]
    aaf4:	e7e0      	b.n	aab8 <_dtoa_r+0x98>
    aaf6:	ab14      	add	r3, sp, #80	; 0x50
    aaf8:	f3c7 560a 	ubfx	r6, r7, #20, #11
    aafc:	4658      	mov	r0, fp
    aafe:	9301      	str	r3, [sp, #4]
    ab00:	ab15      	add	r3, sp, #84	; 0x54
    ab02:	9300      	str	r3, [sp, #0]
    ab04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ab08:	f01e faf0 	bl	290ec <__d2b>
    ab0c:	9003      	str	r0, [sp, #12]
    ab0e:	2e00      	cmp	r6, #0
    ab10:	d078      	beq.n	ac04 <_dtoa_r+0x1e4>
    ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ab14:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    ab18:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ab20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    ab24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ab28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ab2c:	4619      	mov	r1, r3
    ab2e:	2200      	movs	r2, #0
    ab30:	4b6e      	ldr	r3, [pc, #440]	; (acec <_dtoa_r+0x2cc>)
    ab32:	f7fd fb15 	bl	8160 <__aeabi_dsub>
    ab36:	a360      	add	r3, pc, #384	; (adr r3, acb8 <_dtoa_r+0x298>)
    ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab3c:	f7fd fcc8 	bl	84d0 <__aeabi_dmul>
    ab40:	a35f      	add	r3, pc, #380	; (adr r3, acc0 <_dtoa_r+0x2a0>)
    ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab46:	f7fd fb0d 	bl	8164 <__adddf3>
    ab4a:	4604      	mov	r4, r0
    ab4c:	460d      	mov	r5, r1
    ab4e:	4630      	mov	r0, r6
    ab50:	f7fd fc54 	bl	83fc <__aeabi_i2d>
    ab54:	a35c      	add	r3, pc, #368	; (adr r3, acc8 <_dtoa_r+0x2a8>)
    ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab5a:	f7fd fcb9 	bl	84d0 <__aeabi_dmul>
    ab5e:	4602      	mov	r2, r0
    ab60:	460b      	mov	r3, r1
    ab62:	4620      	mov	r0, r4
    ab64:	4629      	mov	r1, r5
    ab66:	f7fd fafd 	bl	8164 <__adddf3>
    ab6a:	4604      	mov	r4, r0
    ab6c:	460d      	mov	r5, r1
    ab6e:	f7fd fec1 	bl	88f4 <__aeabi_d2iz>
    ab72:	2200      	movs	r2, #0
    ab74:	4607      	mov	r7, r0
    ab76:	2300      	movs	r3, #0
    ab78:	4620      	mov	r0, r4
    ab7a:	4629      	mov	r1, r5
    ab7c:	f7fe fa78 	bl	9070 <__aeabi_dcmplt>
    ab80:	b140      	cbz	r0, ab94 <_dtoa_r+0x174>
    ab82:	4638      	mov	r0, r7
    ab84:	f7fd fc3a 	bl	83fc <__aeabi_i2d>
    ab88:	4622      	mov	r2, r4
    ab8a:	462b      	mov	r3, r5
    ab8c:	f7fe fa66 	bl	905c <__aeabi_dcmpeq>
    ab90:	b900      	cbnz	r0, ab94 <_dtoa_r+0x174>
    ab92:	3f01      	subs	r7, #1
    ab94:	2f16      	cmp	r7, #22
    ab96:	d854      	bhi.n	ac42 <_dtoa_r+0x222>
    ab98:	4b55      	ldr	r3, [pc, #340]	; (acf0 <_dtoa_r+0x2d0>)
    ab9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ab9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    aba6:	f7fe fa63 	bl	9070 <__aeabi_dcmplt>
    abaa:	2800      	cmp	r0, #0
    abac:	d04b      	beq.n	ac46 <_dtoa_r+0x226>
    abae:	3f01      	subs	r7, #1
    abb0:	2300      	movs	r3, #0
    abb2:	9312      	str	r3, [sp, #72]	; 0x48
    abb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    abb6:	1b9b      	subs	r3, r3, r6
    abb8:	1e5a      	subs	r2, r3, #1
    abba:	bf4c      	ite	mi
    abbc:	f1c3 0301 	rsbmi	r3, r3, #1
    abc0:	2300      	movpl	r3, #0
    abc2:	920a      	str	r2, [sp, #40]	; 0x28
    abc4:	bf45      	ittet	mi
    abc6:	9306      	strmi	r3, [sp, #24]
    abc8:	2300      	movmi	r3, #0
    abca:	9306      	strpl	r3, [sp, #24]
    abcc:	930a      	strmi	r3, [sp, #40]	; 0x28
    abce:	2f00      	cmp	r7, #0
    abd0:	db3b      	blt.n	ac4a <_dtoa_r+0x22a>
    abd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    abd4:	970f      	str	r7, [sp, #60]	; 0x3c
    abd6:	443b      	add	r3, r7
    abd8:	930a      	str	r3, [sp, #40]	; 0x28
    abda:	2300      	movs	r3, #0
    abdc:	930b      	str	r3, [sp, #44]	; 0x2c
    abde:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abe0:	2b09      	cmp	r3, #9
    abe2:	f200 8089 	bhi.w	acf8 <_dtoa_r+0x2d8>
    abe6:	2b05      	cmp	r3, #5
    abe8:	bfc5      	ittet	gt
    abea:	3b04      	subgt	r3, #4
    abec:	2400      	movgt	r4, #0
    abee:	2401      	movle	r4, #1
    abf0:	9320      	strgt	r3, [sp, #128]	; 0x80
    abf2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    abf4:	3b02      	subs	r3, #2
    abf6:	2b03      	cmp	r3, #3
    abf8:	f200 8089 	bhi.w	ad0e <_dtoa_r+0x2ee>
    abfc:	e8df f003 	tbb	[pc, r3]
    ac00:	59383a2d 	.word	0x59383a2d
    ac04:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    ac08:	441e      	add	r6, r3
    ac0a:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ac0e:	2b20      	cmp	r3, #32
    ac10:	bfc9      	itett	gt
    ac12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    ac16:	f1c3 0320 	rsble	r3, r3, #32
    ac1a:	409f      	lslgt	r7, r3
    ac1c:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    ac20:	bfd8      	it	le
    ac22:	fa04 f003 	lslle.w	r0, r4, r3
    ac26:	f106 36ff 	add.w	r6, r6, #4294967295
    ac2a:	bfc4      	itt	gt
    ac2c:	fa24 f303 	lsrgt.w	r3, r4, r3
    ac30:	ea47 0003 	orrgt.w	r0, r7, r3
    ac34:	f7fd fbd2 	bl	83dc <__aeabi_ui2d>
    ac38:	2201      	movs	r2, #1
    ac3a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    ac3e:	9213      	str	r2, [sp, #76]	; 0x4c
    ac40:	e774      	b.n	ab2c <_dtoa_r+0x10c>
    ac42:	2301      	movs	r3, #1
    ac44:	e7b5      	b.n	abb2 <_dtoa_r+0x192>
    ac46:	9012      	str	r0, [sp, #72]	; 0x48
    ac48:	e7b4      	b.n	abb4 <_dtoa_r+0x194>
    ac4a:	9b06      	ldr	r3, [sp, #24]
    ac4c:	1bdb      	subs	r3, r3, r7
    ac4e:	9306      	str	r3, [sp, #24]
    ac50:	427b      	negs	r3, r7
    ac52:	930b      	str	r3, [sp, #44]	; 0x2c
    ac54:	2300      	movs	r3, #0
    ac56:	930f      	str	r3, [sp, #60]	; 0x3c
    ac58:	e7c1      	b.n	abde <_dtoa_r+0x1be>
    ac5a:	2300      	movs	r3, #0
    ac5c:	930e      	str	r3, [sp, #56]	; 0x38
    ac5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac60:	2b00      	cmp	r3, #0
    ac62:	dc57      	bgt.n	ad14 <_dtoa_r+0x2f4>
    ac64:	2301      	movs	r3, #1
    ac66:	4699      	mov	r9, r3
    ac68:	461a      	mov	r2, r3
    ac6a:	9309      	str	r3, [sp, #36]	; 0x24
    ac6c:	9221      	str	r2, [sp, #132]	; 0x84
    ac6e:	e00c      	b.n	ac8a <_dtoa_r+0x26a>
    ac70:	2301      	movs	r3, #1
    ac72:	e7f3      	b.n	ac5c <_dtoa_r+0x23c>
    ac74:	2300      	movs	r3, #0
    ac76:	930e      	str	r3, [sp, #56]	; 0x38
    ac78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ac7a:	18fb      	adds	r3, r7, r3
    ac7c:	f103 0901 	add.w	r9, r3, #1
    ac80:	9309      	str	r3, [sp, #36]	; 0x24
    ac82:	464b      	mov	r3, r9
    ac84:	2b01      	cmp	r3, #1
    ac86:	bfb8      	it	lt
    ac88:	2301      	movlt	r3, #1
    ac8a:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    ac8e:	2100      	movs	r1, #0
    ac90:	2204      	movs	r2, #4
    ac92:	f102 0514 	add.w	r5, r2, #20
    ac96:	429d      	cmp	r5, r3
    ac98:	d940      	bls.n	ad1c <_dtoa_r+0x2fc>
    ac9a:	6041      	str	r1, [r0, #4]
    ac9c:	4658      	mov	r0, fp
    ac9e:	f01d feab 	bl	289f8 <_Balloc>
    aca2:	9008      	str	r0, [sp, #32]
    aca4:	2800      	cmp	r0, #0
    aca6:	d13c      	bne.n	ad22 <_dtoa_r+0x302>
    aca8:	4b12      	ldr	r3, [pc, #72]	; (acf4 <_dtoa_r+0x2d4>)
    acaa:	4602      	mov	r2, r0
    acac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    acb0:	e6ca      	b.n	aa48 <_dtoa_r+0x28>
    acb2:	2301      	movs	r3, #1
    acb4:	e7df      	b.n	ac76 <_dtoa_r+0x256>
    acb6:	bf00      	nop
    acb8:	636f4361 	.word	0x636f4361
    acbc:	3fd287a7 	.word	0x3fd287a7
    acc0:	8b60c8b3 	.word	0x8b60c8b3
    acc4:	3fc68a28 	.word	0x3fc68a28
    acc8:	509f79fb 	.word	0x509f79fb
    accc:	3fd34413 	.word	0x3fd34413
    acd0:	00038b7c 	.word	0x00038b7c
    acd4:	00038c8e 	.word	0x00038c8e
    acd8:	7ff00000 	.word	0x7ff00000
    acdc:	00038c8a 	.word	0x00038c8a
    ace0:	00038c81 	.word	0x00038c81
    ace4:	00036c51 	.word	0x00036c51
    ace8:	00036c50 	.word	0x00036c50
    acec:	3ff80000 	.word	0x3ff80000
    acf0:	000334c8 	.word	0x000334c8
    acf4:	00038d02 	.word	0x00038d02
    acf8:	2401      	movs	r4, #1
    acfa:	2300      	movs	r3, #0
    acfc:	940e      	str	r4, [sp, #56]	; 0x38
    acfe:	9320      	str	r3, [sp, #128]	; 0x80
    ad00:	f04f 33ff 	mov.w	r3, #4294967295
    ad04:	2200      	movs	r2, #0
    ad06:	4699      	mov	r9, r3
    ad08:	9309      	str	r3, [sp, #36]	; 0x24
    ad0a:	2312      	movs	r3, #18
    ad0c:	e7ae      	b.n	ac6c <_dtoa_r+0x24c>
    ad0e:	2301      	movs	r3, #1
    ad10:	930e      	str	r3, [sp, #56]	; 0x38
    ad12:	e7f5      	b.n	ad00 <_dtoa_r+0x2e0>
    ad14:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ad16:	4699      	mov	r9, r3
    ad18:	9309      	str	r3, [sp, #36]	; 0x24
    ad1a:	e7b6      	b.n	ac8a <_dtoa_r+0x26a>
    ad1c:	3101      	adds	r1, #1
    ad1e:	0052      	lsls	r2, r2, #1
    ad20:	e7b7      	b.n	ac92 <_dtoa_r+0x272>
    ad22:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    ad26:	f1b9 0f0e 	cmp.w	r9, #14
    ad2a:	9a08      	ldr	r2, [sp, #32]
    ad2c:	601a      	str	r2, [r3, #0]
    ad2e:	d86f      	bhi.n	ae10 <_dtoa_r+0x3f0>
    ad30:	2c00      	cmp	r4, #0
    ad32:	d06d      	beq.n	ae10 <_dtoa_r+0x3f0>
    ad34:	2f00      	cmp	r7, #0
    ad36:	dd36      	ble.n	ada6 <_dtoa_r+0x386>
    ad38:	f007 020f 	and.w	r2, r7, #15
    ad3c:	4ba0      	ldr	r3, [pc, #640]	; (afc0 <_dtoa_r+0x5a0>)
    ad3e:	05f8      	lsls	r0, r7, #23
    ad40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ad44:	e9d3 3400 	ldrd	r3, r4, [r3]
    ad48:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    ad4c:	ea4f 1427 	mov.w	r4, r7, asr #4
    ad50:	d517      	bpl.n	ad82 <_dtoa_r+0x362>
    ad52:	4b9c      	ldr	r3, [pc, #624]	; (afc4 <_dtoa_r+0x5a4>)
    ad54:	f004 040f 	and.w	r4, r4, #15
    ad58:	f04f 0803 	mov.w	r8, #3
    ad5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    ad64:	f7fd fcde 	bl	8724 <__aeabi_ddiv>
    ad68:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ad6c:	4d95      	ldr	r5, [pc, #596]	; (afc4 <_dtoa_r+0x5a4>)
    ad6e:	b95c      	cbnz	r4, ad88 <_dtoa_r+0x368>
    ad70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    ad74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ad78:	f7fd fcd4 	bl	8724 <__aeabi_ddiv>
    ad7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    ad80:	e02b      	b.n	adda <_dtoa_r+0x3ba>
    ad82:	f04f 0802 	mov.w	r8, #2
    ad86:	e7f1      	b.n	ad6c <_dtoa_r+0x34c>
    ad88:	07e1      	lsls	r1, r4, #31
    ad8a:	d509      	bpl.n	ada0 <_dtoa_r+0x380>
    ad8c:	f108 0801 	add.w	r8, r8, #1
    ad90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    ad94:	e9d5 2300 	ldrd	r2, r3, [r5]
    ad98:	f7fd fb9a 	bl	84d0 <__aeabi_dmul>
    ad9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    ada0:	1064      	asrs	r4, r4, #1
    ada2:	3508      	adds	r5, #8
    ada4:	e7e3      	b.n	ad6e <_dtoa_r+0x34e>
    ada6:	f000 8107 	beq.w	afb8 <_dtoa_r+0x598>
    adaa:	427c      	negs	r4, r7
    adac:	4b84      	ldr	r3, [pc, #528]	; (afc0 <_dtoa_r+0x5a0>)
    adae:	4d85      	ldr	r5, [pc, #532]	; (afc4 <_dtoa_r+0x5a4>)
    adb0:	f04f 0802 	mov.w	r8, #2
    adb4:	f004 020f 	and.w	r2, r4, #15
    adb8:	1124      	asrs	r4, r4, #4
    adba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    adbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    adc6:	f7fd fb83 	bl	84d0 <__aeabi_dmul>
    adca:	2300      	movs	r3, #0
    adcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    add0:	2c00      	cmp	r4, #0
    add2:	f040 80e5 	bne.w	afa0 <_dtoa_r+0x580>
    add6:	2b00      	cmp	r3, #0
    add8:	d1d0      	bne.n	ad7c <_dtoa_r+0x35c>
    adda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    addc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    ade0:	2b00      	cmp	r3, #0
    ade2:	f000 814c 	beq.w	b07e <_dtoa_r+0x65e>
    ade6:	2200      	movs	r2, #0
    ade8:	4b77      	ldr	r3, [pc, #476]	; (afc8 <_dtoa_r+0x5a8>)
    adea:	4620      	mov	r0, r4
    adec:	4629      	mov	r1, r5
    adee:	f7fe f93f 	bl	9070 <__aeabi_dcmplt>
    adf2:	2800      	cmp	r0, #0
    adf4:	f000 8143 	beq.w	b07e <_dtoa_r+0x65e>
    adf8:	f1b9 0f00 	cmp.w	r9, #0
    adfc:	f000 813f 	beq.w	b07e <_dtoa_r+0x65e>
    ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae02:	2b00      	cmp	r3, #0
    ae04:	f300 80e4 	bgt.w	afd0 <_dtoa_r+0x5b0>
    ae08:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    ae0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ae10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ae12:	2b00      	cmp	r3, #0
    ae14:	db02      	blt.n	ae1c <_dtoa_r+0x3fc>
    ae16:	2f0e      	cmp	r7, #14
    ae18:	f340 8242 	ble.w	b2a0 <_dtoa_r+0x880>
    ae1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ae1e:	2a00      	cmp	r2, #0
    ae20:	f040 8267 	bne.w	b2f2 <_dtoa_r+0x8d2>
    ae24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ae26:	2500      	movs	r5, #0
    ae28:	f8dd 8018 	ldr.w	r8, [sp, #24]
    ae2c:	f1b8 0f00 	cmp.w	r8, #0
    ae30:	d00d      	beq.n	ae4e <_dtoa_r+0x42e>
    ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae34:	2b00      	cmp	r3, #0
    ae36:	dd0a      	ble.n	ae4e <_dtoa_r+0x42e>
    ae38:	4543      	cmp	r3, r8
    ae3a:	9a06      	ldr	r2, [sp, #24]
    ae3c:	bfa8      	it	ge
    ae3e:	4643      	movge	r3, r8
    ae40:	1ad2      	subs	r2, r2, r3
    ae42:	eba8 0803 	sub.w	r8, r8, r3
    ae46:	9206      	str	r2, [sp, #24]
    ae48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae4a:	1ad3      	subs	r3, r2, r3
    ae4c:	930a      	str	r3, [sp, #40]	; 0x28
    ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae50:	b30b      	cbz	r3, ae96 <_dtoa_r+0x476>
    ae52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ae54:	2b00      	cmp	r3, #0
    ae56:	f000 82a6 	beq.w	b3a6 <_dtoa_r+0x986>
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	f000 82a1 	beq.w	b3a2 <_dtoa_r+0x982>
    ae60:	4629      	mov	r1, r5
    ae62:	4622      	mov	r2, r4
    ae64:	4658      	mov	r0, fp
    ae66:	f01d ff7b 	bl	28d60 <__pow5mult>
    ae6a:	9a03      	ldr	r2, [sp, #12]
    ae6c:	4601      	mov	r1, r0
    ae6e:	4605      	mov	r5, r0
    ae70:	4658      	mov	r0, fp
    ae72:	f01d fecb 	bl	28c0c <__multiply>
    ae76:	9903      	ldr	r1, [sp, #12]
    ae78:	4606      	mov	r6, r0
    ae7a:	4658      	mov	r0, fp
    ae7c:	f01d fdfc 	bl	28a78 <_Bfree>
    ae80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae82:	1b1b      	subs	r3, r3, r4
    ae84:	930b      	str	r3, [sp, #44]	; 0x2c
    ae86:	f000 8291 	beq.w	b3ac <_dtoa_r+0x98c>
    ae8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae8c:	4631      	mov	r1, r6
    ae8e:	4658      	mov	r0, fp
    ae90:	f01d ff66 	bl	28d60 <__pow5mult>
    ae94:	9003      	str	r0, [sp, #12]
    ae96:	2101      	movs	r1, #1
    ae98:	4658      	mov	r0, fp
    ae9a:	f01d fea1 	bl	28be0 <__i2b>
    ae9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aea0:	4604      	mov	r4, r0
    aea2:	2b00      	cmp	r3, #0
    aea4:	f000 8284 	beq.w	b3b0 <_dtoa_r+0x990>
    aea8:	461a      	mov	r2, r3
    aeaa:	4601      	mov	r1, r0
    aeac:	4658      	mov	r0, fp
    aeae:	f01d ff57 	bl	28d60 <__pow5mult>
    aeb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    aeb4:	4604      	mov	r4, r0
    aeb6:	2b01      	cmp	r3, #1
    aeb8:	dc03      	bgt.n	aec2 <_dtoa_r+0x4a2>
    aeba:	9b04      	ldr	r3, [sp, #16]
    aebc:	2b00      	cmp	r3, #0
    aebe:	f000 827c 	beq.w	b3ba <_dtoa_r+0x99a>
    aec2:	2600      	movs	r6, #0
    aec4:	6923      	ldr	r3, [r4, #16]
    aec6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    aeca:	6918      	ldr	r0, [r3, #16]
    aecc:	f027 fa11 	bl	322f2 <__hi0bits>
    aed0:	f1c0 0020 	rsb	r0, r0, #32
    aed4:	960f      	str	r6, [sp, #60]	; 0x3c
    aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aed8:	4418      	add	r0, r3
    aeda:	f010 001f 	ands.w	r0, r0, #31
    aede:	f000 8291 	beq.w	b404 <_dtoa_r+0x9e4>
    aee2:	f1c0 0320 	rsb	r3, r0, #32
    aee6:	2b04      	cmp	r3, #4
    aee8:	f340 8281 	ble.w	b3ee <_dtoa_r+0x9ce>
    aeec:	f1c0 001c 	rsb	r0, r0, #28
    aef0:	9b06      	ldr	r3, [sp, #24]
    aef2:	4403      	add	r3, r0
    aef4:	4480      	add	r8, r0
    aef6:	9306      	str	r3, [sp, #24]
    aef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aefa:	4403      	add	r3, r0
    aefc:	930a      	str	r3, [sp, #40]	; 0x28
    aefe:	9b06      	ldr	r3, [sp, #24]
    af00:	2b00      	cmp	r3, #0
    af02:	dd05      	ble.n	af10 <_dtoa_r+0x4f0>
    af04:	461a      	mov	r2, r3
    af06:	9903      	ldr	r1, [sp, #12]
    af08:	4658      	mov	r0, fp
    af0a:	f01d ff83 	bl	28e14 <__lshift>
    af0e:	9003      	str	r0, [sp, #12]
    af10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    af12:	2b00      	cmp	r3, #0
    af14:	dd05      	ble.n	af22 <_dtoa_r+0x502>
    af16:	4621      	mov	r1, r4
    af18:	461a      	mov	r2, r3
    af1a:	4658      	mov	r0, fp
    af1c:	f01d ff7a 	bl	28e14 <__lshift>
    af20:	4604      	mov	r4, r0
    af22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af24:	2b00      	cmp	r3, #0
    af26:	f000 8276 	beq.w	b416 <_dtoa_r+0x9f6>
    af2a:	4621      	mov	r1, r4
    af2c:	9803      	ldr	r0, [sp, #12]
    af2e:	f027 fa2f 	bl	32390 <__mcmp>
    af32:	2800      	cmp	r0, #0
    af34:	f280 826f 	bge.w	b416 <_dtoa_r+0x9f6>
    af38:	2300      	movs	r3, #0
    af3a:	220a      	movs	r2, #10
    af3c:	9903      	ldr	r1, [sp, #12]
    af3e:	4658      	mov	r0, fp
    af40:	f01d fdbc 	bl	28abc <__multadd>
    af44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    af46:	1e7e      	subs	r6, r7, #1
    af48:	9003      	str	r0, [sp, #12]
    af4a:	2b00      	cmp	r3, #0
    af4c:	f000 825c 	beq.w	b408 <_dtoa_r+0x9e8>
    af50:	2300      	movs	r3, #0
    af52:	4629      	mov	r1, r5
    af54:	220a      	movs	r2, #10
    af56:	4658      	mov	r0, fp
    af58:	f01d fdb0 	bl	28abc <__multadd>
    af5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af5e:	4605      	mov	r5, r0
    af60:	2b00      	cmp	r3, #0
    af62:	dc03      	bgt.n	af6c <_dtoa_r+0x54c>
    af64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    af66:	2b02      	cmp	r3, #2
    af68:	f300 825e 	bgt.w	b428 <_dtoa_r+0xa08>
    af6c:	f1b8 0f00 	cmp.w	r8, #0
    af70:	dd05      	ble.n	af7e <_dtoa_r+0x55e>
    af72:	4629      	mov	r1, r5
    af74:	4642      	mov	r2, r8
    af76:	4658      	mov	r0, fp
    af78:	f01d ff4c 	bl	28e14 <__lshift>
    af7c:	4605      	mov	r5, r0
    af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af80:	2b00      	cmp	r3, #0
    af82:	f000 82d0 	beq.w	b526 <_dtoa_r+0xb06>
    af86:	6869      	ldr	r1, [r5, #4]
    af88:	4658      	mov	r0, fp
    af8a:	f01d fd35 	bl	289f8 <_Balloc>
    af8e:	4607      	mov	r7, r0
    af90:	2800      	cmp	r0, #0
    af92:	f040 827f 	bne.w	b494 <_dtoa_r+0xa74>
    af96:	4b0d      	ldr	r3, [pc, #52]	; (afcc <_dtoa_r+0x5ac>)
    af98:	4602      	mov	r2, r0
    af9a:	f240 21ea 	movw	r1, #746	; 0x2ea
    af9e:	e553      	b.n	aa48 <_dtoa_r+0x28>
    afa0:	07e2      	lsls	r2, r4, #31
    afa2:	d506      	bpl.n	afb2 <_dtoa_r+0x592>
    afa4:	f108 0801 	add.w	r8, r8, #1
    afa8:	e9d5 2300 	ldrd	r2, r3, [r5]
    afac:	f7fd fa90 	bl	84d0 <__aeabi_dmul>
    afb0:	2301      	movs	r3, #1
    afb2:	1064      	asrs	r4, r4, #1
    afb4:	3508      	adds	r5, #8
    afb6:	e70b      	b.n	add0 <_dtoa_r+0x3b0>
    afb8:	f04f 0802 	mov.w	r8, #2
    afbc:	e70d      	b.n	adda <_dtoa_r+0x3ba>
    afbe:	bf00      	nop
    afc0:	000334c8 	.word	0x000334c8
    afc4:	000334a0 	.word	0x000334a0
    afc8:	3ff00000 	.word	0x3ff00000
    afcc:	00038d02 	.word	0x00038d02
    afd0:	4620      	mov	r0, r4
    afd2:	2200      	movs	r2, #0
    afd4:	4bac      	ldr	r3, [pc, #688]	; (b288 <_dtoa_r+0x868>)
    afd6:	4629      	mov	r1, r5
    afd8:	f7fd fa7a 	bl	84d0 <__aeabi_dmul>
    afdc:	1e7e      	subs	r6, r7, #1
    afde:	f108 0801 	add.w	r8, r8, #1
    afe2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    afe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    afe8:	4640      	mov	r0, r8
    afea:	f7fd fa07 	bl	83fc <__aeabi_i2d>
    afee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aff2:	f7fd fa6d 	bl	84d0 <__aeabi_dmul>
    aff6:	4ba5      	ldr	r3, [pc, #660]	; (b28c <_dtoa_r+0x86c>)
    aff8:	2200      	movs	r2, #0
    affa:	f7fd f8b3 	bl	8164 <__adddf3>
    affe:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    b002:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b006:	9311      	str	r3, [sp, #68]	; 0x44
    b008:	2c00      	cmp	r4, #0
    b00a:	d13b      	bne.n	b084 <_dtoa_r+0x664>
    b00c:	2200      	movs	r2, #0
    b00e:	4ba0      	ldr	r3, [pc, #640]	; (b290 <_dtoa_r+0x870>)
    b010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b014:	f7fd f8a4 	bl	8160 <__aeabi_dsub>
    b018:	4602      	mov	r2, r0
    b01a:	460b      	mov	r3, r1
    b01c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b024:	f7fe f842 	bl	90ac <__aeabi_dcmpgt>
    b028:	2800      	cmp	r0, #0
    b02a:	f040 8157 	bne.w	b2dc <_dtoa_r+0x8bc>
    b02e:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    b032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    b036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b03a:	f7fe f819 	bl	9070 <__aeabi_dcmplt>
    b03e:	2800      	cmp	r0, #0
    b040:	f43f aee2 	beq.w	ae08 <_dtoa_r+0x3e8>
    b044:	2400      	movs	r4, #0
    b046:	4625      	mov	r5, r4
    b048:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b04a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b04e:	43de      	mvns	r6, r3
    b050:	f04f 0800 	mov.w	r8, #0
    b054:	4621      	mov	r1, r4
    b056:	4658      	mov	r0, fp
    b058:	f01d fd0e 	bl	28a78 <_Bfree>
    b05c:	2d00      	cmp	r5, #0
    b05e:	f000 80a9 	beq.w	b1b4 <_dtoa_r+0x794>
    b062:	f1b8 0f00 	cmp.w	r8, #0
    b066:	d005      	beq.n	b074 <_dtoa_r+0x654>
    b068:	45a8      	cmp	r8, r5
    b06a:	d003      	beq.n	b074 <_dtoa_r+0x654>
    b06c:	4641      	mov	r1, r8
    b06e:	4658      	mov	r0, fp
    b070:	f01d fd02 	bl	28a78 <_Bfree>
    b074:	4629      	mov	r1, r5
    b076:	4658      	mov	r0, fp
    b078:	f01d fcfe 	bl	28a78 <_Bfree>
    b07c:	e09a      	b.n	b1b4 <_dtoa_r+0x794>
    b07e:	463e      	mov	r6, r7
    b080:	464c      	mov	r4, r9
    b082:	e7b1      	b.n	afe8 <_dtoa_r+0x5c8>
    b084:	4b83      	ldr	r3, [pc, #524]	; (b294 <_dtoa_r+0x874>)
    b086:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    b08a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    b08e:	9b08      	ldr	r3, [sp, #32]
    b090:	441c      	add	r4, r3
    b092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b094:	2b00      	cmp	r3, #0
    b096:	d04a      	beq.n	b12e <_dtoa_r+0x70e>
    b098:	4602      	mov	r2, r0
    b09a:	460b      	mov	r3, r1
    b09c:	2000      	movs	r0, #0
    b09e:	497e      	ldr	r1, [pc, #504]	; (b298 <_dtoa_r+0x878>)
    b0a0:	f7fd fb40 	bl	8724 <__aeabi_ddiv>
    b0a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b0a8:	f7fd f85a 	bl	8160 <__aeabi_dsub>
    b0ac:	f8dd a020 	ldr.w	sl, [sp, #32]
    b0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0b8:	f7fd fc1c 	bl	88f4 <__aeabi_d2iz>
    b0bc:	4605      	mov	r5, r0
    b0be:	f7fd f99d 	bl	83fc <__aeabi_i2d>
    b0c2:	4602      	mov	r2, r0
    b0c4:	3530      	adds	r5, #48	; 0x30
    b0c6:	460b      	mov	r3, r1
    b0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b0cc:	f7fd f848 	bl	8160 <__aeabi_dsub>
    b0d0:	f80a 5b01 	strb.w	r5, [sl], #1
    b0d4:	4602      	mov	r2, r0
    b0d6:	460b      	mov	r3, r1
    b0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b0dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b0e0:	f7fd ffe4 	bl	90ac <__aeabi_dcmpgt>
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d165      	bne.n	b1b4 <_dtoa_r+0x794>
    b0e8:	2000      	movs	r0, #0
    b0ea:	496c      	ldr	r1, [pc, #432]	; (b29c <_dtoa_r+0x87c>)
    b0ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b0f0:	f7fd f836 	bl	8160 <__aeabi_dsub>
    b0f4:	4602      	mov	r2, r0
    b0f6:	460b      	mov	r3, r1
    b0f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b0fc:	f7fd ffd6 	bl	90ac <__aeabi_dcmpgt>
    b100:	2800      	cmp	r0, #0
    b102:	f040 810d 	bne.w	b320 <_dtoa_r+0x900>
    b106:	45a2      	cmp	sl, r4
    b108:	f000 80ea 	beq.w	b2e0 <_dtoa_r+0x8c0>
    b10c:	2200      	movs	r2, #0
    b10e:	4b5e      	ldr	r3, [pc, #376]	; (b288 <_dtoa_r+0x868>)
    b110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b114:	f7fd f9dc 	bl	84d0 <__aeabi_dmul>
    b118:	2200      	movs	r2, #0
    b11a:	4b5b      	ldr	r3, [pc, #364]	; (b288 <_dtoa_r+0x868>)
    b11c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b124:	f7fd f9d4 	bl	84d0 <__aeabi_dmul>
    b128:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b12c:	e7c2      	b.n	b0b4 <_dtoa_r+0x694>
    b12e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b132:	f7fd f9cd 	bl	84d0 <__aeabi_dmul>
    b136:	46a0      	mov	r8, r4
    b138:	f8dd a020 	ldr.w	sl, [sp, #32]
    b13c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    b140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b144:	f7fd fbd6 	bl	88f4 <__aeabi_d2iz>
    b148:	4605      	mov	r5, r0
    b14a:	f7fd f957 	bl	83fc <__aeabi_i2d>
    b14e:	4602      	mov	r2, r0
    b150:	3530      	adds	r5, #48	; 0x30
    b152:	460b      	mov	r3, r1
    b154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b158:	f7fd f802 	bl	8160 <__aeabi_dsub>
    b15c:	f80a 5b01 	strb.w	r5, [sl], #1
    b160:	4602      	mov	r2, r0
    b162:	460b      	mov	r3, r1
    b164:	45a2      	cmp	sl, r4
    b166:	e9cd 2304 	strd	r2, r3, [sp, #16]
    b16a:	f04f 0200 	mov.w	r2, #0
    b16e:	d123      	bne.n	b1b8 <_dtoa_r+0x798>
    b170:	4b49      	ldr	r3, [pc, #292]	; (b298 <_dtoa_r+0x878>)
    b172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    b176:	f7fc fff5 	bl	8164 <__adddf3>
    b17a:	4602      	mov	r2, r0
    b17c:	460b      	mov	r3, r1
    b17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b182:	f7fd ff93 	bl	90ac <__aeabi_dcmpgt>
    b186:	2800      	cmp	r0, #0
    b188:	f040 80ca 	bne.w	b320 <_dtoa_r+0x900>
    b18c:	2000      	movs	r0, #0
    b18e:	4942      	ldr	r1, [pc, #264]	; (b298 <_dtoa_r+0x878>)
    b190:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    b194:	f7fc ffe4 	bl	8160 <__aeabi_dsub>
    b198:	4602      	mov	r2, r0
    b19a:	460b      	mov	r3, r1
    b19c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    b1a0:	f7fd ff66 	bl	9070 <__aeabi_dcmplt>
    b1a4:	b170      	cbz	r0, b1c4 <_dtoa_r+0x7a4>
    b1a6:	46c2      	mov	sl, r8
    b1a8:	f108 38ff 	add.w	r8, r8, #4294967295
    b1ac:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b1b0:	2b30      	cmp	r3, #48	; 0x30
    b1b2:	d0f8      	beq.n	b1a6 <_dtoa_r+0x786>
    b1b4:	4637      	mov	r7, r6
    b1b6:	e055      	b.n	b264 <_dtoa_r+0x844>
    b1b8:	4b33      	ldr	r3, [pc, #204]	; (b288 <_dtoa_r+0x868>)
    b1ba:	f7fd f989 	bl	84d0 <__aeabi_dmul>
    b1be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    b1c2:	e7bd      	b.n	b140 <_dtoa_r+0x720>
    b1c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b1c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b1ce:	2b00      	cmp	r3, #0
    b1d0:	f6ff ae28 	blt.w	ae24 <_dtoa_r+0x404>
    b1d4:	2f0e      	cmp	r7, #14
    b1d6:	f73f ae25 	bgt.w	ae24 <_dtoa_r+0x404>
    b1da:	4b2e      	ldr	r3, [pc, #184]	; (b294 <_dtoa_r+0x874>)
    b1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b1e0:	e9d3 3400 	ldrd	r3, r4, [r3]
    b1e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b1e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	da02      	bge.n	b1f4 <_dtoa_r+0x7d4>
    b1ee:	f1b9 0f00 	cmp.w	r9, #0
    b1f2:	d064      	beq.n	b2be <_dtoa_r+0x89e>
    b1f4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b1f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    b1fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b200:	4620      	mov	r0, r4
    b202:	4629      	mov	r1, r5
    b204:	f7fd fa8e 	bl	8724 <__aeabi_ddiv>
    b208:	f7fd fb74 	bl	88f4 <__aeabi_d2iz>
    b20c:	4606      	mov	r6, r0
    b20e:	f7fd f8f5 	bl	83fc <__aeabi_i2d>
    b212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b216:	f7fd f95b 	bl	84d0 <__aeabi_dmul>
    b21a:	4602      	mov	r2, r0
    b21c:	4620      	mov	r0, r4
    b21e:	f106 0430 	add.w	r4, r6, #48	; 0x30
    b222:	460b      	mov	r3, r1
    b224:	4629      	mov	r1, r5
    b226:	f7fc ff9b 	bl	8160 <__aeabi_dsub>
    b22a:	f80a 4b01 	strb.w	r4, [sl], #1
    b22e:	9c08      	ldr	r4, [sp, #32]
    b230:	4602      	mov	r2, r0
    b232:	460b      	mov	r3, r1
    b234:	ebaa 0404 	sub.w	r4, sl, r4
    b238:	45a1      	cmp	r9, r4
    b23a:	f040 8082 	bne.w	b342 <_dtoa_r+0x922>
    b23e:	f7fc ff91 	bl	8164 <__adddf3>
    b242:	4604      	mov	r4, r0
    b244:	460d      	mov	r5, r1
    b246:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b24a:	f7fd ff2f 	bl	90ac <__aeabi_dcmpgt>
    b24e:	2800      	cmp	r0, #0
    b250:	d165      	bne.n	b31e <_dtoa_r+0x8fe>
    b252:	4620      	mov	r0, r4
    b254:	4629      	mov	r1, r5
    b256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b25a:	f7fd feff 	bl	905c <__aeabi_dcmpeq>
    b25e:	b108      	cbz	r0, b264 <_dtoa_r+0x844>
    b260:	07f3      	lsls	r3, r6, #31
    b262:	d45c      	bmi.n	b31e <_dtoa_r+0x8fe>
    b264:	9903      	ldr	r1, [sp, #12]
    b266:	4658      	mov	r0, fp
    b268:	f01d fc06 	bl	28a78 <_Bfree>
    b26c:	2300      	movs	r3, #0
    b26e:	3701      	adds	r7, #1
    b270:	f88a 3000 	strb.w	r3, [sl]
    b274:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b276:	601f      	str	r7, [r3, #0]
    b278:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b27a:	2b00      	cmp	r3, #0
    b27c:	f43f ac1c 	beq.w	aab8 <_dtoa_r+0x98>
    b280:	f8c3 a000 	str.w	sl, [r3]
    b284:	e418      	b.n	aab8 <_dtoa_r+0x98>
    b286:	bf00      	nop
    b288:	40240000 	.word	0x40240000
    b28c:	401c0000 	.word	0x401c0000
    b290:	40140000 	.word	0x40140000
    b294:	000334c8 	.word	0x000334c8
    b298:	3fe00000 	.word	0x3fe00000
    b29c:	3ff00000 	.word	0x3ff00000
    b2a0:	4ba2      	ldr	r3, [pc, #648]	; (b52c <_dtoa_r+0xb0c>)
    b2a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    b2a6:	e9d3 3400 	ldrd	r3, r4, [r3]
    b2aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	da9f      	bge.n	b1f4 <_dtoa_r+0x7d4>
    b2b4:	f1b9 0f00 	cmp.w	r9, #0
    b2b8:	dc9c      	bgt.n	b1f4 <_dtoa_r+0x7d4>
    b2ba:	f47f aec3 	bne.w	b044 <_dtoa_r+0x624>
    b2be:	2200      	movs	r2, #0
    b2c0:	4b9b      	ldr	r3, [pc, #620]	; (b530 <_dtoa_r+0xb10>)
    b2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    b2c6:	f7fd f903 	bl	84d0 <__aeabi_dmul>
    b2ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b2ce:	f7fd fee3 	bl	9098 <__aeabi_dcmpge>
    b2d2:	4604      	mov	r4, r0
    b2d4:	2800      	cmp	r0, #0
    b2d6:	f47f aeb5 	bne.w	b044 <_dtoa_r+0x624>
    b2da:	463e      	mov	r6, r7
    b2dc:	4625      	mov	r5, r4
    b2de:	e0b4      	b.n	b44a <_dtoa_r+0xa2a>
    b2e0:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    b2e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    b2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	db01      	blt.n	b2f2 <_dtoa_r+0x8d2>
    b2ee:	2f0e      	cmp	r7, #14
    b2f0:	ddd6      	ble.n	b2a0 <_dtoa_r+0x880>
    b2f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b2f4:	2a01      	cmp	r2, #1
    b2f6:	dc36      	bgt.n	b366 <_dtoa_r+0x946>
    b2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b2fa:	b382      	cbz	r2, b35e <_dtoa_r+0x93e>
    b2fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
    b300:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b302:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b306:	9a06      	ldr	r2, [sp, #24]
    b308:	2101      	movs	r1, #1
    b30a:	4658      	mov	r0, fp
    b30c:	441a      	add	r2, r3
    b30e:	9206      	str	r2, [sp, #24]
    b310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b312:	441a      	add	r2, r3
    b314:	920a      	str	r2, [sp, #40]	; 0x28
    b316:	f01d fc63 	bl	28be0 <__i2b>
    b31a:	4605      	mov	r5, r0
    b31c:	e586      	b.n	ae2c <_dtoa_r+0x40c>
    b31e:	463e      	mov	r6, r7
    b320:	4653      	mov	r3, sl
    b322:	469a      	mov	sl, r3
    b324:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    b328:	2a39      	cmp	r2, #57	; 0x39
    b32a:	d106      	bne.n	b33a <_dtoa_r+0x91a>
    b32c:	9a08      	ldr	r2, [sp, #32]
    b32e:	429a      	cmp	r2, r3
    b330:	d1f7      	bne.n	b322 <_dtoa_r+0x902>
    b332:	2230      	movs	r2, #48	; 0x30
    b334:	9908      	ldr	r1, [sp, #32]
    b336:	3601      	adds	r6, #1
    b338:	700a      	strb	r2, [r1, #0]
    b33a:	781a      	ldrb	r2, [r3, #0]
    b33c:	3201      	adds	r2, #1
    b33e:	701a      	strb	r2, [r3, #0]
    b340:	e738      	b.n	b1b4 <_dtoa_r+0x794>
    b342:	2200      	movs	r2, #0
    b344:	4b7b      	ldr	r3, [pc, #492]	; (b534 <_dtoa_r+0xb14>)
    b346:	f7fd f8c3 	bl	84d0 <__aeabi_dmul>
    b34a:	2200      	movs	r2, #0
    b34c:	2300      	movs	r3, #0
    b34e:	4604      	mov	r4, r0
    b350:	460d      	mov	r5, r1
    b352:	f7fd fe83 	bl	905c <__aeabi_dcmpeq>
    b356:	2800      	cmp	r0, #0
    b358:	f43f af50 	beq.w	b1fc <_dtoa_r+0x7dc>
    b35c:	e782      	b.n	b264 <_dtoa_r+0x844>
    b35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    b364:	e7cc      	b.n	b300 <_dtoa_r+0x8e0>
    b366:	f109 34ff 	add.w	r4, r9, #4294967295
    b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b36c:	42a3      	cmp	r3, r4
    b36e:	db08      	blt.n	b382 <_dtoa_r+0x962>
    b370:	f1b9 0f00 	cmp.w	r9, #0
    b374:	eba3 0404 	sub.w	r4, r3, r4
    b378:	db0e      	blt.n	b398 <_dtoa_r+0x978>
    b37a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b37e:	464b      	mov	r3, r9
    b380:	e7c1      	b.n	b306 <_dtoa_r+0x8e6>
    b382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b386:	1ae3      	subs	r3, r4, r3
    b388:	940b      	str	r4, [sp, #44]	; 0x2c
    b38a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    b38e:	2400      	movs	r4, #0
    b390:	441a      	add	r2, r3
    b392:	464b      	mov	r3, r9
    b394:	920f      	str	r2, [sp, #60]	; 0x3c
    b396:	e7b6      	b.n	b306 <_dtoa_r+0x8e6>
    b398:	9b06      	ldr	r3, [sp, #24]
    b39a:	eba3 0809 	sub.w	r8, r3, r9
    b39e:	2300      	movs	r3, #0
    b3a0:	e7b1      	b.n	b306 <_dtoa_r+0x8e6>
    b3a2:	9e03      	ldr	r6, [sp, #12]
    b3a4:	e571      	b.n	ae8a <_dtoa_r+0x46a>
    b3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b3a8:	9903      	ldr	r1, [sp, #12]
    b3aa:	e570      	b.n	ae8e <_dtoa_r+0x46e>
    b3ac:	9603      	str	r6, [sp, #12]
    b3ae:	e572      	b.n	ae96 <_dtoa_r+0x476>
    b3b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b3b2:	2b01      	cmp	r3, #1
    b3b4:	dc17      	bgt.n	b3e6 <_dtoa_r+0x9c6>
    b3b6:	9b04      	ldr	r3, [sp, #16]
    b3b8:	b9ab      	cbnz	r3, b3e6 <_dtoa_r+0x9c6>
    b3ba:	9b05      	ldr	r3, [sp, #20]
    b3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    b3c0:	b99b      	cbnz	r3, b3ea <_dtoa_r+0x9ca>
    b3c2:	9b05      	ldr	r3, [sp, #20]
    b3c4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    b3c8:	0d36      	lsrs	r6, r6, #20
    b3ca:	0536      	lsls	r6, r6, #20
    b3cc:	b136      	cbz	r6, b3dc <_dtoa_r+0x9bc>
    b3ce:	9b06      	ldr	r3, [sp, #24]
    b3d0:	2601      	movs	r6, #1
    b3d2:	3301      	adds	r3, #1
    b3d4:	9306      	str	r3, [sp, #24]
    b3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b3d8:	3301      	adds	r3, #1
    b3da:	930a      	str	r3, [sp, #40]	; 0x28
    b3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b3de:	2b00      	cmp	r3, #0
    b3e0:	f47f ad70 	bne.w	aec4 <_dtoa_r+0x4a4>
    b3e4:	960f      	str	r6, [sp, #60]	; 0x3c
    b3e6:	2001      	movs	r0, #1
    b3e8:	e575      	b.n	aed6 <_dtoa_r+0x4b6>
    b3ea:	2600      	movs	r6, #0
    b3ec:	e7f6      	b.n	b3dc <_dtoa_r+0x9bc>
    b3ee:	f43f ad86 	beq.w	aefe <_dtoa_r+0x4de>
    b3f2:	331c      	adds	r3, #28
    b3f4:	9a06      	ldr	r2, [sp, #24]
    b3f6:	441a      	add	r2, r3
    b3f8:	4498      	add	r8, r3
    b3fa:	9206      	str	r2, [sp, #24]
    b3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3fe:	441a      	add	r2, r3
    b400:	920a      	str	r2, [sp, #40]	; 0x28
    b402:	e57c      	b.n	aefe <_dtoa_r+0x4de>
    b404:	4603      	mov	r3, r0
    b406:	e7f4      	b.n	b3f2 <_dtoa_r+0x9d2>
    b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b40a:	2b00      	cmp	r3, #0
    b40c:	dc2b      	bgt.n	b466 <_dtoa_r+0xa46>
    b40e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b410:	2b02      	cmp	r3, #2
    b412:	dc09      	bgt.n	b428 <_dtoa_r+0xa08>
    b414:	e027      	b.n	b466 <_dtoa_r+0xa46>
    b416:	f1b9 0f00 	cmp.w	r9, #0
    b41a:	dc1d      	bgt.n	b458 <_dtoa_r+0xa38>
    b41c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b41e:	2b02      	cmp	r3, #2
    b420:	dd1a      	ble.n	b458 <_dtoa_r+0xa38>
    b422:	463e      	mov	r6, r7
    b424:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b428:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b42a:	2b00      	cmp	r3, #0
    b42c:	f47f ae0c 	bne.w	b048 <_dtoa_r+0x628>
    b430:	4621      	mov	r1, r4
    b432:	2205      	movs	r2, #5
    b434:	4658      	mov	r0, fp
    b436:	f01d fb41 	bl	28abc <__multadd>
    b43a:	4601      	mov	r1, r0
    b43c:	4604      	mov	r4, r0
    b43e:	9803      	ldr	r0, [sp, #12]
    b440:	f026 ffa6 	bl	32390 <__mcmp>
    b444:	2800      	cmp	r0, #0
    b446:	f77f adff 	ble.w	b048 <_dtoa_r+0x628>
    b44a:	f8dd a020 	ldr.w	sl, [sp, #32]
    b44e:	2331      	movs	r3, #49	; 0x31
    b450:	3601      	adds	r6, #1
    b452:	f80a 3b01 	strb.w	r3, [sl], #1
    b456:	e5fb      	b.n	b050 <_dtoa_r+0x630>
    b458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b45a:	463e      	mov	r6, r7
    b45c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    b460:	2b00      	cmp	r3, #0
    b462:	f47f ad83 	bne.w	af6c <_dtoa_r+0x54c>
    b466:	9f08      	ldr	r7, [sp, #32]
    b468:	4621      	mov	r1, r4
    b46a:	9803      	ldr	r0, [sp, #12]
    b46c:	f026 fd31 	bl	31ed2 <quorem>
    b470:	9b08      	ldr	r3, [sp, #32]
    b472:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b476:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b478:	f807 9b01 	strb.w	r9, [r7], #1
    b47c:	1afb      	subs	r3, r7, r3
    b47e:	429a      	cmp	r2, r3
    b480:	f340 80cb 	ble.w	b61a <_dtoa_r+0xbfa>
    b484:	2300      	movs	r3, #0
    b486:	220a      	movs	r2, #10
    b488:	9903      	ldr	r1, [sp, #12]
    b48a:	4658      	mov	r0, fp
    b48c:	f01d fb16 	bl	28abc <__multadd>
    b490:	9003      	str	r0, [sp, #12]
    b492:	e7e9      	b.n	b468 <_dtoa_r+0xa48>
    b494:	692a      	ldr	r2, [r5, #16]
    b496:	f105 010c 	add.w	r1, r5, #12
    b49a:	300c      	adds	r0, #12
    b49c:	3202      	adds	r2, #2
    b49e:	0092      	lsls	r2, r2, #2
    b4a0:	f026 fabf 	bl	31a22 <memcpy>
    b4a4:	2201      	movs	r2, #1
    b4a6:	4639      	mov	r1, r7
    b4a8:	4658      	mov	r0, fp
    b4aa:	f01d fcb3 	bl	28e14 <__lshift>
    b4ae:	9b08      	ldr	r3, [sp, #32]
    b4b0:	46a8      	mov	r8, r5
    b4b2:	4605      	mov	r5, r0
    b4b4:	f103 0a01 	add.w	sl, r3, #1
    b4b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    b4bc:	4413      	add	r3, r2
    b4be:	930a      	str	r3, [sp, #40]	; 0x28
    b4c0:	9b04      	ldr	r3, [sp, #16]
    b4c2:	f003 0301 	and.w	r3, r3, #1
    b4c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b4c8:	f10a 33ff 	add.w	r3, sl, #4294967295
    b4cc:	4621      	mov	r1, r4
    b4ce:	9803      	ldr	r0, [sp, #12]
    b4d0:	9306      	str	r3, [sp, #24]
    b4d2:	f026 fcfe 	bl	31ed2 <quorem>
    b4d6:	4641      	mov	r1, r8
    b4d8:	9009      	str	r0, [sp, #36]	; 0x24
    b4da:	f100 0930 	add.w	r9, r0, #48	; 0x30
    b4de:	9803      	ldr	r0, [sp, #12]
    b4e0:	f026 ff56 	bl	32390 <__mcmp>
    b4e4:	462a      	mov	r2, r5
    b4e6:	4621      	mov	r1, r4
    b4e8:	4607      	mov	r7, r0
    b4ea:	4658      	mov	r0, fp
    b4ec:	f01d fcfe 	bl	28eec <__mdiff>
    b4f0:	68c2      	ldr	r2, [r0, #12]
    b4f2:	4601      	mov	r1, r0
    b4f4:	b302      	cbz	r2, b538 <_dtoa_r+0xb18>
    b4f6:	4658      	mov	r0, fp
    b4f8:	f01d fabe 	bl	28a78 <_Bfree>
    b4fc:	2f00      	cmp	r7, #0
    b4fe:	da3a      	bge.n	b576 <_dtoa_r+0xb56>
    b500:	2201      	movs	r2, #1
    b502:	9903      	ldr	r1, [sp, #12]
    b504:	4658      	mov	r0, fp
    b506:	f01d fc85 	bl	28e14 <__lshift>
    b50a:	4621      	mov	r1, r4
    b50c:	9003      	str	r0, [sp, #12]
    b50e:	f026 ff3f 	bl	32390 <__mcmp>
    b512:	2800      	cmp	r0, #0
    b514:	dc03      	bgt.n	b51e <_dtoa_r+0xafe>
    b516:	d129      	bne.n	b56c <_dtoa_r+0xb4c>
    b518:	f019 0f01 	tst.w	r9, #1
    b51c:	d026      	beq.n	b56c <_dtoa_r+0xb4c>
    b51e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b522:	d11d      	bne.n	b560 <_dtoa_r+0xb40>
    b524:	e032      	b.n	b58c <_dtoa_r+0xb6c>
    b526:	4628      	mov	r0, r5
    b528:	e7c1      	b.n	b4ae <_dtoa_r+0xa8e>
    b52a:	bf00      	nop
    b52c:	000334c8 	.word	0x000334c8
    b530:	40140000 	.word	0x40140000
    b534:	40240000 	.word	0x40240000
    b538:	900e      	str	r0, [sp, #56]	; 0x38
    b53a:	9803      	ldr	r0, [sp, #12]
    b53c:	f026 ff28 	bl	32390 <__mcmp>
    b540:	990e      	ldr	r1, [sp, #56]	; 0x38
    b542:	900c      	str	r0, [sp, #48]	; 0x30
    b544:	4658      	mov	r0, fp
    b546:	f01d fa97 	bl	28a78 <_Bfree>
    b54a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b54c:	bb5a      	cbnz	r2, b5a6 <_dtoa_r+0xb86>
    b54e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b550:	b953      	cbnz	r3, b568 <_dtoa_r+0xb48>
    b552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b554:	b943      	cbnz	r3, b568 <_dtoa_r+0xb48>
    b556:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b55a:	d017      	beq.n	b58c <_dtoa_r+0xb6c>
    b55c:	2f00      	cmp	r7, #0
    b55e:	dd05      	ble.n	b56c <_dtoa_r+0xb4c>
    b560:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b562:	f103 0931 	add.w	r9, r3, #49	; 0x31
    b566:	e001      	b.n	b56c <_dtoa_r+0xb4c>
    b568:	2f00      	cmp	r7, #0
    b56a:	da2a      	bge.n	b5c2 <_dtoa_r+0xba2>
    b56c:	f8dd a018 	ldr.w	sl, [sp, #24]
    b570:	f80a 9b01 	strb.w	r9, [sl], #1
    b574:	e56e      	b.n	b054 <_dtoa_r+0x634>
    b576:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b578:	433b      	orrs	r3, r7
    b57a:	d104      	bne.n	b586 <_dtoa_r+0xb66>
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	f003 0301 	and.w	r3, r3, #1
    b582:	2b00      	cmp	r3, #0
    b584:	d0bc      	beq.n	b500 <_dtoa_r+0xae0>
    b586:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    b58a:	d136      	bne.n	b5fa <_dtoa_r+0xbda>
    b58c:	9f06      	ldr	r7, [sp, #24]
    b58e:	2339      	movs	r3, #57	; 0x39
    b590:	f807 3b01 	strb.w	r3, [r7], #1
    b594:	46ba      	mov	sl, r7
    b596:	3f01      	subs	r7, #1
    b598:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    b59c:	2b39      	cmp	r3, #57	; 0x39
    b59e:	d05a      	beq.n	b656 <_dtoa_r+0xc36>
    b5a0:	3301      	adds	r3, #1
    b5a2:	703b      	strb	r3, [r7, #0]
    b5a4:	e556      	b.n	b054 <_dtoa_r+0x634>
    b5a6:	2f00      	cmp	r7, #0
    b5a8:	db06      	blt.n	b5b8 <_dtoa_r+0xb98>
    b5aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    b5ac:	433b      	orrs	r3, r7
    b5ae:	d106      	bne.n	b5be <_dtoa_r+0xb9e>
    b5b0:	9b04      	ldr	r3, [sp, #16]
    b5b2:	f003 0301 	and.w	r3, r3, #1
    b5b6:	b913      	cbnz	r3, b5be <_dtoa_r+0xb9e>
    b5b8:	2a00      	cmp	r2, #0
    b5ba:	dca1      	bgt.n	b500 <_dtoa_r+0xae0>
    b5bc:	e7d6      	b.n	b56c <_dtoa_r+0xb4c>
    b5be:	2a00      	cmp	r2, #0
    b5c0:	dce1      	bgt.n	b586 <_dtoa_r+0xb66>
    b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5c4:	4657      	mov	r7, sl
    b5c6:	f80a 9c01 	strb.w	r9, [sl, #-1]
    b5ca:	4553      	cmp	r3, sl
    b5cc:	d02e      	beq.n	b62c <_dtoa_r+0xc0c>
    b5ce:	2300      	movs	r3, #0
    b5d0:	220a      	movs	r2, #10
    b5d2:	9903      	ldr	r1, [sp, #12]
    b5d4:	4658      	mov	r0, fp
    b5d6:	f01d fa71 	bl	28abc <__multadd>
    b5da:	45a8      	cmp	r8, r5
    b5dc:	9003      	str	r0, [sp, #12]
    b5de:	f04f 0300 	mov.w	r3, #0
    b5e2:	f04f 020a 	mov.w	r2, #10
    b5e6:	4641      	mov	r1, r8
    b5e8:	4658      	mov	r0, fp
    b5ea:	d10b      	bne.n	b604 <_dtoa_r+0xbe4>
    b5ec:	f01d fa66 	bl	28abc <__multadd>
    b5f0:	4680      	mov	r8, r0
    b5f2:	4605      	mov	r5, r0
    b5f4:	f10a 0a01 	add.w	sl, sl, #1
    b5f8:	e766      	b.n	b4c8 <_dtoa_r+0xaa8>
    b5fa:	f8dd a018 	ldr.w	sl, [sp, #24]
    b5fe:	f109 0901 	add.w	r9, r9, #1
    b602:	e7b5      	b.n	b570 <_dtoa_r+0xb50>
    b604:	f01d fa5a 	bl	28abc <__multadd>
    b608:	4629      	mov	r1, r5
    b60a:	4680      	mov	r8, r0
    b60c:	2300      	movs	r3, #0
    b60e:	220a      	movs	r2, #10
    b610:	4658      	mov	r0, fp
    b612:	f01d fa53 	bl	28abc <__multadd>
    b616:	4605      	mov	r5, r0
    b618:	e7ec      	b.n	b5f4 <_dtoa_r+0xbd4>
    b61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b61c:	f04f 0800 	mov.w	r8, #0
    b620:	2b00      	cmp	r3, #0
    b622:	bfcc      	ite	gt
    b624:	461f      	movgt	r7, r3
    b626:	2701      	movle	r7, #1
    b628:	9b08      	ldr	r3, [sp, #32]
    b62a:	441f      	add	r7, r3
    b62c:	2201      	movs	r2, #1
    b62e:	9903      	ldr	r1, [sp, #12]
    b630:	4658      	mov	r0, fp
    b632:	f01d fbef 	bl	28e14 <__lshift>
    b636:	4621      	mov	r1, r4
    b638:	9003      	str	r0, [sp, #12]
    b63a:	f026 fea9 	bl	32390 <__mcmp>
    b63e:	2800      	cmp	r0, #0
    b640:	dca8      	bgt.n	b594 <_dtoa_r+0xb74>
    b642:	d102      	bne.n	b64a <_dtoa_r+0xc2a>
    b644:	f019 0f01 	tst.w	r9, #1
    b648:	d1a4      	bne.n	b594 <_dtoa_r+0xb74>
    b64a:	46ba      	mov	sl, r7
    b64c:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    b650:	2b30      	cmp	r3, #48	; 0x30
    b652:	d0fa      	beq.n	b64a <_dtoa_r+0xc2a>
    b654:	e4fe      	b.n	b054 <_dtoa_r+0x634>
    b656:	9b08      	ldr	r3, [sp, #32]
    b658:	42bb      	cmp	r3, r7
    b65a:	d19b      	bne.n	b594 <_dtoa_r+0xb74>
    b65c:	2331      	movs	r3, #49	; 0x31
    b65e:	9a08      	ldr	r2, [sp, #32]
    b660:	3601      	adds	r6, #1
    b662:	7013      	strb	r3, [r2, #0]
    b664:	e4f6      	b.n	b054 <_dtoa_r+0x634>
    b666:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b668:	2b00      	cmp	r3, #0
    b66a:	f47f aa20 	bne.w	aaae <_dtoa_r+0x8e>
    b66e:	4b01      	ldr	r3, [pc, #4]	; (b674 <_dtoa_r+0xc54>)
    b670:	f7ff ba3f 	b.w	aaf2 <_dtoa_r+0xd2>
    b674:	00038c81 	.word	0x00038c81

0000b678 <digital_0_call_back>:

// DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[0] <= DIGITAL_0_LIMIT)
    b678:	4a03      	ldr	r2, [pc, #12]	; (b688 <digital_0_call_back+0x10>)
    b67a:	8813      	ldrh	r3, [r2, #0]
		digital_value[0]++;
    b67c:	8813      	ldrh	r3, [r2, #0]
    b67e:	3301      	adds	r3, #1
    b680:	b21b      	sxth	r3, r3
    b682:	8013      	strh	r3, [r2, #0]
}
    b684:	4770      	bx	lr
    b686:	bf00      	nop
    b688:	20030f36 	.word	0x20030f36

0000b68c <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[1] <= DIGITAL_0_LIMIT)
    b68c:	4a03      	ldr	r2, [pc, #12]	; (b69c <digital_1_call_back+0x10>)
    b68e:	8853      	ldrh	r3, [r2, #2]
		digital_value[1]++;
    b690:	8853      	ldrh	r3, [r2, #2]
    b692:	3301      	adds	r3, #1
    b694:	b21b      	sxth	r3, r3
    b696:	8053      	strh	r3, [r2, #2]
}
    b698:	4770      	bx	lr
    b69a:	bf00      	nop
    b69c:	20030f36 	.word	0x20030f36

0000b6a0 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	//printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
	if (digital_value[2] <= DIGITAL_0_LIMIT)
    b6a0:	4a03      	ldr	r2, [pc, #12]	; (b6b0 <digital_2_call_back+0x10>)
    b6a2:	8893      	ldrh	r3, [r2, #4]
		digital_value[2]++;
    b6a4:	8893      	ldrh	r3, [r2, #4]
    b6a6:	3301      	adds	r3, #1
    b6a8:	b21b      	sxth	r3, r3
    b6aa:	8093      	strh	r3, [r2, #4]
}
    b6ac:	4770      	bx	lr
    b6ae:	bf00      	nop
    b6b0:	20030f36 	.word	0x20030f36

0000b6b4 <button_pressed_3>:
{
    b6b4:	b508      	push	{r3, lr}
	k_sem_give(&button_3);
    b6b6:	4805      	ldr	r0, [pc, #20]	; (b6cc <button_pressed_3+0x18>)
    b6b8:	f01e fc76 	bl	29fa8 <k_sem_give>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    b6bc:	f024 fd23 	bl	30106 <sys_clock_cycle_get_32>
}
    b6c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6c4:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b6c6:	4802      	ldr	r0, [pc, #8]	; (b6d0 <button_pressed_3+0x1c>)
    b6c8:	f01e bec8 	b.w	2a45c <printk>
    b6cc:	20008d08 	.word	0x20008d08
    b6d0:	00034596 	.word	0x00034596

0000b6d4 <button_pressed_4>:
{
    b6d4:	b508      	push	{r3, lr}
	k_sem_give(&button_test);
    b6d6:	4805      	ldr	r0, [pc, #20]	; (b6ec <button_pressed_4+0x18>)
    b6d8:	f01e fc66 	bl	29fa8 <k_sem_give>
    b6dc:	f024 fd13 	bl	30106 <sys_clock_cycle_get_32>
}
    b6e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6e4:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b6e6:	4802      	ldr	r0, [pc, #8]	; (b6f0 <button_pressed_4+0x1c>)
    b6e8:	f01e beb8 	b.w	2a45c <printk>
    b6ec:	20008d20 	.word	0x20008d20
    b6f0:	000345ae 	.word	0x000345ae

0000b6f4 <lorwan_datarate_changed>:
{
    b6f4:	b513      	push	{r0, r1, r4, lr}
    b6f6:	4604      	mov	r4, r0
	lorawan_get_payload_sizes(&unused, &max_size);
    b6f8:	f10d 0107 	add.w	r1, sp, #7
    b6fc:	f10d 0006 	add.w	r0, sp, #6
    b700:	f020 fa82 	bl	2bc08 <lorawan_get_payload_sizes>
	color(10);
    b704:	200a      	movs	r0, #10
    b706:	f002 fa49 	bl	db9c <color>
	printk("New Datarate: DR_%d, Max Payload %d \n", dr, max_size);
    b70a:	4621      	mov	r1, r4
    b70c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    b710:	4803      	ldr	r0, [pc, #12]	; (b720 <lorwan_datarate_changed+0x2c>)
    b712:	f01e fea3 	bl	2a45c <printk>
	color(255);
    b716:	20ff      	movs	r0, #255	; 0xff
    b718:	f002 fa40 	bl	db9c <color>
}
    b71c:	b002      	add	sp, #8
    b71e:	bd10      	pop	{r4, pc}
    b720:	000345c6 	.word	0x000345c6

0000b724 <dl_callback>:
    int16_t rssi, int8_t snr, uint8_t len, const uint8_t *data)	{
    b724:	b430      	push	{r4, r5}
    b726:	461d      	mov	r5, r3
    b728:	9b03      	ldr	r3, [sp, #12]
    b72a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    if (data) {
    b72e:	b193      	cbz	r3, b756 <dl_callback+0x32>
	    downlink_cmd_new.port=port;
    b730:	490a      	ldr	r1, [pc, #40]	; (b75c <dl_callback+0x38>)
        downlink_cmd_new.len = len;
    b732:	f881 4038 	strb.w	r4, [r1, #56]	; 0x38
	    downlink_cmd_new.port=port;
    b736:	7008      	strb	r0, [r1, #0]
        downlink_cmd_new.rssi=rssi;
    b738:	804a      	strh	r2, [r1, #2]
		downlink_cmd_new.snr=snr;
    b73a:	710d      	strb	r5, [r1, #4]
static void dl_callback(uint8_t port, bool data_pending,
    b73c:	441c      	add	r4, r3
    b73e:	3104      	adds	r1, #4
        while (i < len) {
    b740:	42a3      	cmp	r3, r4
    b742:	d103      	bne.n	b74c <dl_callback+0x28>
}
    b744:	bc30      	pop	{r4, r5}
		k_sem_give(&lorawan_rx);//downlink
    b746:	4806      	ldr	r0, [pc, #24]	; (b760 <dl_callback+0x3c>)
    b748:	f01e bc2e 	b.w	29fa8 <k_sem_give>
            downlink_cmd_new.data[i] = data[i];
    b74c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b750:	f801 2f01 	strb.w	r2, [r1, #1]!
            i++;
    b754:	e7f4      	b.n	b740 <dl_callback+0x1c>
}
    b756:	bc30      	pop	{r4, r5}
    b758:	4770      	bx	lr
    b75a:	bf00      	nop
    b75c:	20030efc 	.word	0x20030efc
    b760:	20008db0 	.word	0x20008db0

0000b764 <digital_4_call_back>:

void digital_4_call_back(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
	if (sensor_status.busy[SENSOR_DIG_4]==0 && sensor_status.active[SENSOR_DIG_4]==1){
    b764:	4b05      	ldr	r3, [pc, #20]	; (b77c <digital_4_call_back+0x18>)
    b766:	7c1a      	ldrb	r2, [r3, #16]
    b768:	b932      	cbnz	r2, b778 <digital_4_call_back+0x14>
    b76a:	7a9a      	ldrb	r2, [r3, #10]
    b76c:	2a01      	cmp	r2, #1
    b76e:	d103      	bne.n	b778 <digital_4_call_back+0x14>
	  sensor_status.busy[SENSOR_DIG_4]=1;
	  k_sem_give(&alarm_infra);	
    b770:	4803      	ldr	r0, [pc, #12]	; (b780 <digital_4_call_back+0x1c>)
	  sensor_status.busy[SENSOR_DIG_4]=1;
    b772:	741a      	strb	r2, [r3, #16]
	  k_sem_give(&alarm_infra);	
    b774:	f01e bc18 	b.w	29fa8 <k_sem_give>
    }
}
    b778:	4770      	bx	lr
    b77a:	bf00      	nop
    b77c:	200311be 	.word	0x200311be
    b780:	20008cc0 	.word	0x20008cc0

0000b784 <uart_2_work_handler>:
{
    b784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf2 = k_malloc(sizeof(*buf2)); // SIZE IS 92 BYTES
    b786:	206c      	movs	r0, #108	; 0x6c
    b788:	f026 f92f 	bl	319ea <k_malloc>
    b78c:	4603      	mov	r3, r0
	if (buf2)
    b78e:	b148      	cbz	r0, b7a4 <uart_2_work_handler+0x20>
		buf2->len = 0;
    b790:	2200      	movs	r2, #0
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b792:	1d01      	adds	r1, r0, #4
		buf2->len = 0;
    b794:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b798:	480b      	ldr	r0, [pc, #44]	; (b7c8 <uart_2_work_handler+0x44>)
}
    b79a:	b005      	add	sp, #20
    b79c:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b7a0:	f01e bc21 	b.w	29fe6 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_2 receive buffer - GPS");
    b7a4:	4a09      	ldr	r2, [pc, #36]	; (b7cc <uart_2_work_handler+0x48>)
    b7a6:	9000      	str	r0, [sp, #0]
    b7a8:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b7ac:	4908      	ldr	r1, [pc, #32]	; (b7d0 <uart_2_work_handler+0x4c>)
    b7ae:	2202      	movs	r2, #2
    b7b0:	f01e fc0a 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b7b4:	f240 6267 	movw	r2, #1639	; 0x667
    b7b8:	2300      	movs	r3, #0
    b7ba:	4806      	ldr	r0, [pc, #24]	; (b7d4 <uart_2_work_handler+0x50>)
}
    b7bc:	b005      	add	sp, #20
    b7be:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b7c2:	f01a bcdd 	b.w	26180 <k_work_reschedule>
    b7c6:	bf00      	nop
    b7c8:	00032b74 	.word	0x00032b74
    b7cc:	000345ec 	.word	0x000345ec
    b7d0:	000332fc 	.word	0x000332fc
    b7d4:	20009968 	.word	0x20009968

0000b7d8 <uart_work_handler>:
{
    b7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf = k_malloc(sizeof(*buf));
    b7da:	206c      	movs	r0, #108	; 0x6c
    b7dc:	f026 f905 	bl	319ea <k_malloc>
    b7e0:	4603      	mov	r3, r0
	if (buf)
    b7e2:	b148      	cbz	r0, b7f8 <uart_work_handler+0x20>
		buf->len = 0;
    b7e4:	2200      	movs	r2, #0
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7e6:	1d01      	adds	r1, r0, #4
		buf->len = 0;
    b7e8:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7ec:	480b      	ldr	r0, [pc, #44]	; (b81c <uart_work_handler+0x44>)
}
    b7ee:	b005      	add	sp, #20
    b7f0:	f85d eb04 	ldr.w	lr, [sp], #4
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    b7f4:	f01e bbf7 	b.w	29fe6 <uart_rx_enable.constprop.0>
		LOG_WRN("Not able to allocate UART_1 receive buffer -Terminal");
    b7f8:	4a09      	ldr	r2, [pc, #36]	; (b820 <uart_work_handler+0x48>)
    b7fa:	9000      	str	r0, [sp, #0]
    b7fc:	e9cd 0201 	strd	r0, r2, [sp, #4]
    b800:	4908      	ldr	r1, [pc, #32]	; (b824 <uart_work_handler+0x4c>)
    b802:	2202      	movs	r2, #2
    b804:	f01e fbe0 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b808:	f240 6267 	movw	r2, #1639	; 0x667
    b80c:	2300      	movs	r3, #0
    b80e:	4806      	ldr	r0, [pc, #24]	; (b828 <uart_work_handler+0x50>)
}
    b810:	b005      	add	sp, #20
    b812:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b816:	f01a bcb3 	b.w	26180 <k_work_reschedule>
    b81a:	bf00      	nop
    b81c:	00032b8c 	.word	0x00032b8c
    b820:	0003461d 	.word	0x0003461d
    b824:	000332fc 	.word	0x000332fc
    b828:	20009998 	.word	0x20009998

0000b82c <uart_cb_2>:
{
    b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (evt->type)
    b830:	780b      	ldrb	r3, [r1, #0]
    b832:	3b02      	subs	r3, #2
    b834:	2b03      	cmp	r3, #3
    b836:	d844      	bhi.n	b8c2 <uart_cb_2+0x96>
    b838:	e8df f003 	tbb	[pc, r3]
    b83c:	45695a02 	.word	0x45695a02
		buf2 = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b840:	684c      	ldr	r4, [r1, #4]
		buf2->len += evt->data.rx.len;
    b842:	68cb      	ldr	r3, [r1, #12]
    b844:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    b848:	4d36      	ldr	r5, [pc, #216]	; (b924 <uart_cb_2+0xf8>)
		buf2->len += evt->data.rx.len;
    b84a:	4413      	add	r3, r2
    b84c:	b29b      	uxth	r3, r3
    b84e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        if(buf2->data[buf2->len - 1]==0x24  && buff_marker==0){
    b852:	4423      	add	r3, r4
    b854:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b858:	682e      	ldr	r6, [r5, #0]
    b85a:	2b24      	cmp	r3, #36	; 0x24
    b85c:	d12f      	bne.n	b8be <uart_cb_2+0x92>
    b85e:	bb76      	cbnz	r6, b8be <uart_cb_2+0x92>
			buf_extra = k_malloc(sizeof(*buf_extra));
    b860:	206c      	movs	r0, #108	; 0x6c
    b862:	f026 f8c2 	bl	319ea <k_malloc>
    b866:	4b30      	ldr	r3, [pc, #192]	; (b928 <uart_cb_2+0xfc>)
    b868:	6018      	str	r0, [r3, #0]
			buff_extra_index=0;
    b86a:	4b30      	ldr	r3, [pc, #192]	; (b92c <uart_cb_2+0x100>)
    b86c:	601e      	str	r6, [r3, #0]
			buff_marker=1;
    b86e:	2301      	movs	r3, #1
    b870:	602b      	str	r3, [r5, #0]
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    b872:	482e      	ldr	r0, [pc, #184]	; (b92c <uart_cb_2+0x100>)
    b874:	6803      	ldr	r3, [r0, #0]
    b876:	2b6a      	cmp	r3, #106	; 0x6a
    b878:	d823      	bhi.n	b8c2 <uart_cb_2+0x96>
		    buf_extra->data[buff_extra_index++]=buf2->data[buf2->len - 1];
    b87a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    b87e:	4e2a      	ldr	r6, [pc, #168]	; (b928 <uart_cb_2+0xfc>)
    b880:	1c5a      	adds	r2, r3, #1
    b882:	3f01      	subs	r7, #1
    b884:	6002      	str	r2, [r0, #0]
    b886:	6831      	ldr	r1, [r6, #0]
    b888:	f814 c007 	ldrb.w	ip, [r4, r7]
    b88c:	18cf      	adds	r7, r1, r3
    b88e:	f887 c004 	strb.w	ip, [r7, #4]
			if(buf2->data[buf2->len - 1]==0x0A){
    b892:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    b896:	443c      	add	r4, r7
    b898:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    b89c:	2c0a      	cmp	r4, #10
    b89e:	d110      	bne.n	b8c2 <uart_cb_2+0x96>
			   buf_extra->data[buff_extra_index++] = 0x00;
    b8a0:	2400      	movs	r4, #0
    b8a2:	3302      	adds	r3, #2
    b8a4:	440a      	add	r2, r1
    b8a6:	6003      	str	r3, [r0, #0]
    b8a8:	7114      	strb	r4, [r2, #4]
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    b8aa:	4821      	ldr	r0, [pc, #132]	; (b930 <uart_cb_2+0x104>)
			   buf_extra->len = buff_extra_index;
    b8ac:	f8a1 3068 	strh.w	r3, [r1, #104]	; 0x68
				 k_fifo_put(&fifo_uart2_rx_data, buf_extra); // TRANSFER TO FIFO
    b8b0:	f025 fc53 	bl	3115a <k_queue_append>
				 k_free(buf_extra);
    b8b4:	6830      	ldr	r0, [r6, #0]
    b8b6:	f026 f891 	bl	319dc <k_free>
			   buff_marker=0;
    b8ba:	602c      	str	r4, [r5, #0]
    b8bc:	e001      	b.n	b8c2 <uart_cb_2+0x96>
        if(buff_marker==1 && (buff_extra_index<(sizeof(*buf2)-1)) ){
    b8be:	2e01      	cmp	r6, #1
    b8c0:	d0d7      	beq.n	b872 <uart_cb_2+0x46>
}
    b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf2 = k_malloc(sizeof(*buf2)); // THE SIZE IS 92 BYTES
    b8c6:	206c      	movs	r0, #108	; 0x6c
    b8c8:	f026 f88f 	bl	319ea <k_malloc>
		if (buf2)
    b8cc:	b140      	cbz	r0, b8e0 <uart_cb_2+0xb4>
			buf2->len = 0;
    b8ce:	2300      	movs	r3, #0
    b8d0:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b8d4:	1d01      	adds	r1, r0, #4
}
    b8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		uart_rx_enable(uart_2, buf2->data, sizeof(buf2->data), UART_WAIT_FOR_RX);
    b8da:	4816      	ldr	r0, [pc, #88]	; (b934 <uart_cb_2+0x108>)
    b8dc:	f01e bb83 	b.w	29fe6 <uart_rx_enable.constprop.0>
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b8e0:	f240 6267 	movw	r2, #1639	; 0x667
}
    b8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    b8e8:	2300      	movs	r3, #0
    b8ea:	4813      	ldr	r0, [pc, #76]	; (b938 <uart_cb_2+0x10c>)
    b8ec:	f01a bc48 	b.w	26180 <k_work_reschedule>
		buf2 = k_malloc(sizeof(*buf2));
    b8f0:	206c      	movs	r0, #108	; 0x6c
    b8f2:	f026 f87a 	bl	319ea <k_malloc>
		buf2->len = 0;
    b8f6:	2300      	movs	r3, #0
		buf2 = k_malloc(sizeof(*buf2));
    b8f8:	4601      	mov	r1, r0
		buf2->len = 0;
    b8fa:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    b8fe:	480d      	ldr	r0, [pc, #52]	; (b934 <uart_cb_2+0x108>)
    b900:	2264      	movs	r2, #100	; 0x64
}
    b902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b906:	6883      	ldr	r3, [r0, #8]
    b908:	3104      	adds	r1, #4
    b90a:	691b      	ldr	r3, [r3, #16]
    b90c:	4718      	bx	r3
		buf2 = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
    b90e:	6848      	ldr	r0, [r1, #4]
		if (buf2->len > 0)
    b910:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    b914:	2b00      	cmp	r3, #0
    b916:	d0d4      	beq.n	b8c2 <uart_cb_2+0x96>
}
    b918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_free(buf2);
    b91c:	3804      	subs	r0, #4
    b91e:	f026 b85d 	b.w	319dc <k_free>
    b922:	bf00      	nop
    b924:	2000a6c4 	.word	0x2000a6c4
    b928:	2000a6cc 	.word	0x2000a6cc
    b92c:	2000a6c8 	.word	0x2000a6c8
    b930:	20008e88 	.word	0x20008e88
    b934:	00032b74 	.word	0x00032b74
    b938:	20009968 	.word	0x20009968

0000b93c <button4_thread>:
		}
	}
}

void button4_thread(void)
{
    b93c:	b570      	push	{r4, r5, r6, lr}
    b93e:	b086      	sub	sp, #24
	// print ISADORA PENATI FERREIRA
	char Name[] = "ISADORA PENATI FERREIRA";
    b940:	466a      	mov	r2, sp
    b942:	4615      	mov	r5, r2
    b944:	4b0e      	ldr	r3, [pc, #56]	; (b980 <button4_thread+0x44>)
    b946:	f103 0618 	add.w	r6, r3, #24
    b94a:	4614      	mov	r4, r2
    b94c:	6818      	ldr	r0, [r3, #0]
    b94e:	6859      	ldr	r1, [r3, #4]
    b950:	3308      	adds	r3, #8
    b952:	c403      	stmia	r4!, {r0, r1}
    b954:	42b3      	cmp	r3, r6
    b956:	4622      	mov	r2, r4
    b958:	d1f7      	bne.n	b94a <button4_thread+0xe>
	*(packet_data+7) = 0x20;//SPACE
	*/

	while (1)
	{
		k_sem_take(&button_test, K_FOREVER);
    b95a:	4e0a      	ldr	r6, [pc, #40]	; (b984 <button4_thread+0x48>)
		if (current_conn)bt_nus_send(NULL, Name, size);
    b95c:	4c0a      	ldr	r4, [pc, #40]	; (b988 <button4_thread+0x4c>)
		k_sem_take(&button_test, K_FOREVER);
    b95e:	f04f 33ff 	mov.w	r3, #4294967295
    b962:	f04f 32ff 	mov.w	r2, #4294967295
    b966:	4630      	mov	r0, r6
    b968:	f01e fb4d 	bl	2a006 <k_sem_take.constprop.0.isra.0>
		if (current_conn)bt_nus_send(NULL, Name, size);
    b96c:	6823      	ldr	r3, [r4, #0]
    b96e:	2b00      	cmp	r3, #0
    b970:	d0f5      	beq.n	b95e <button4_thread+0x22>
    b972:	2218      	movs	r2, #24
    b974:	4629      	mov	r1, r5
    b976:	2000      	movs	r0, #0
    b978:	f005 fb10 	bl	10f9c <bt_nus_send>
	{
    b97c:	e7ef      	b.n	b95e <button4_thread+0x22>
    b97e:	bf00      	nop
    b980:	00034652 	.word	0x00034652
    b984:	20008d20 	.word	0x20008d20
    b988:	2000a6d4 	.word	0x2000a6d4

0000b98c <button3_thread>:
{
    b98c:	b570      	push	{r4, r5, r6, lr}
		k_sem_take(&button_3, K_FOREVER);
    b98e:	4e09      	ldr	r6, [pc, #36]	; (b9b4 <button3_thread+0x28>)
		while (i <= C_Buffer_Current_Position)
    b990:	4d09      	ldr	r5, [pc, #36]	; (b9b8 <button3_thread+0x2c>)
		k_sem_take(&button_3, K_FOREVER);
    b992:	f04f 32ff 	mov.w	r2, #4294967295
    b996:	f04f 33ff 	mov.w	r3, #4294967295
    b99a:	4630      	mov	r0, r6
    b99c:	f01e fb33 	bl	2a006 <k_sem_take.constprop.0.isra.0>
		i = 0;
    b9a0:	2400      	movs	r4, #0
			print_current_position_cb(i);
    b9a2:	4620      	mov	r0, r4
    b9a4:	f001 fdda 	bl	d55c <print_current_position_cb>
		while (i <= C_Buffer_Current_Position)
    b9a8:	682b      	ldr	r3, [r5, #0]
			i++;
    b9aa:	3401      	adds	r4, #1
		while (i <= C_Buffer_Current_Position)
    b9ac:	42a3      	cmp	r3, r4
    b9ae:	d3f0      	bcc.n	b992 <button3_thread+0x6>
    b9b0:	e7f7      	b.n	b9a2 <button3_thread+0x16>
    b9b2:	bf00      	nop
    b9b4:	20008d08 	.word	0x20008d08
    b9b8:	2002f9e0 	.word	0x2002f9e0

0000b9bc <downlink_thread>:
			j++;
		}
	}
}

void downlink_thread(void){
    b9bc:	b570      	push	{r4, r5, r6, lr}
    uint8_t cmd=0;
	while(1){
	  k_sem_take(&lorawan_rx,K_FOREVER);
      color(4);
	  printk("CMD-Received\n");
	  printk("Len: %d\n",downlink_cmd_new.len);
    b9be:	4c1a      	ldr	r4, [pc, #104]	; (ba28 <downlink_thread+0x6c>)
	  k_sem_take(&lorawan_rx,K_FOREVER);
    b9c0:	4e1a      	ldr	r6, [pc, #104]	; (ba2c <downlink_thread+0x70>)
void downlink_thread(void){
    b9c2:	b09a      	sub	sp, #104	; 0x68
	  printk("Port %d, RSSI %ddB, SNR %ddBm \n", downlink_cmd_new.port, downlink_cmd_new.rssi, downlink_cmd_new.snr);
	  printk(downlink_cmd_new.data, downlink_cmd_new.len, "Payload: \n");
    b9c4:	1d65      	adds	r5, r4, #5
	  k_sem_take(&lorawan_rx,K_FOREVER);
    b9c6:	f04f 32ff 	mov.w	r2, #4294967295
    b9ca:	f04f 33ff 	mov.w	r3, #4294967295
    b9ce:	4630      	mov	r0, r6
    b9d0:	f01e fb19 	bl	2a006 <k_sem_take.constprop.0.isra.0>
      color(4);
    b9d4:	2004      	movs	r0, #4
    b9d6:	f002 f8e1 	bl	db9c <color>
	  printk("CMD-Received\n");
    b9da:	4815      	ldr	r0, [pc, #84]	; (ba30 <downlink_thread+0x74>)
    b9dc:	f01e fd3e 	bl	2a45c <printk>
	  printk("Len: %d\n",downlink_cmd_new.len);
    b9e0:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    b9e4:	4813      	ldr	r0, [pc, #76]	; (ba34 <downlink_thread+0x78>)
    b9e6:	f01e fd39 	bl	2a45c <printk>
	  printk("Port %d, RSSI %ddB, SNR %ddBm \n", downlink_cmd_new.port, downlink_cmd_new.rssi, downlink_cmd_new.snr);
    b9ea:	f994 3004 	ldrsb.w	r3, [r4, #4]
    b9ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    b9f2:	7821      	ldrb	r1, [r4, #0]
    b9f4:	4810      	ldr	r0, [pc, #64]	; (ba38 <downlink_thread+0x7c>)
    b9f6:	f01e fd31 	bl	2a45c <printk>
	  printk(downlink_cmd_new.data, downlink_cmd_new.len, "Payload: \n");
    b9fa:	4628      	mov	r0, r5
    b9fc:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    ba00:	4a0e      	ldr	r2, [pc, #56]	; (ba3c <downlink_thread+0x80>)
    ba02:	f01e fd2b 	bl	2a45c <printk>

	  printk("%X:%X:%X\n",downlink_cmd_new.data[0],downlink_cmd_new.data[1],downlink_cmd_new.data[2]);
    ba06:	79e3      	ldrb	r3, [r4, #7]
    ba08:	79a2      	ldrb	r2, [r4, #6]
    ba0a:	7961      	ldrb	r1, [r4, #5]
    ba0c:	480c      	ldr	r0, [pc, #48]	; (ba40 <downlink_thread+0x84>)
    ba0e:	f01e fd25 	bl	2a45c <printk>
      static uint8_t *data=downlink_cmd_new.data;
	  

	  (void)cmd_interpreter(data,downlink_cmd_new.len);
    ba12:	4668      	mov	r0, sp
    ba14:	4629      	mov	r1, r5
    ba16:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    ba1a:	f002 f979 	bl	dd10 <cmd_interpreter>
      color(0);
    ba1e:	2000      	movs	r0, #0
    ba20:	f002 f8bc 	bl	db9c <color>
	while(1){
    ba24:	e7cf      	b.n	b9c6 <downlink_thread+0xa>
    ba26:	bf00      	nop
    ba28:	20030efc 	.word	0x20030efc
    ba2c:	20008db0 	.word	0x20008db0
    ba30:	0003466a 	.word	0x0003466a
    ba34:	00034678 	.word	0x00034678
    ba38:	00034681 	.word	0x00034681
    ba3c:	000346a1 	.word	0x000346a1
    ba40:	000346ac 	.word	0x000346ac

0000ba44 <write_memory_thread>:
{
    ba44:	b510      	push	{r4, lr}
		k_sem_take(&save_memory, K_FOREVER);
    ba46:	4c07      	ldr	r4, [pc, #28]	; (ba64 <write_memory_thread+0x20>)
    ba48:	4620      	mov	r0, r4
    ba4a:	f04f 32ff 	mov.w	r2, #4294967295
    ba4e:	f04f 33ff 	mov.w	r3, #4294967295
    ba52:	f01e fad8 	bl	2a006 <k_sem_take.constprop.0.isra.0>
		flash_button2_counter();
    ba56:	f001 fabd 	bl	cfd4 <flash_button2_counter>
		print_current_position_cb_new(0);
    ba5a:	2000      	movs	r0, #0
    ba5c:	f001 fe5e 	bl	d71c <print_current_position_cb_new>
	while (1)
    ba60:	e7f2      	b.n	ba48 <write_memory_thread+0x4>
    ba62:	bf00      	nop
    ba64:	20008e10 	.word	0x20008e10

0000ba68 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ba68:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ba6a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ba6c:	b08a      	sub	sp, #40	; 0x28
    ba6e:	4604      	mov	r4, r0
    ba70:	460e      	mov	r6, r1
    ba72:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ba74:	2b03      	cmp	r3, #3
    ba76:	d820      	bhi.n	baba <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ba78:	e8df f003 	tbb	[pc, r3]
    ba7c:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ba80:	4911      	ldr	r1, [pc, #68]	; (bac8 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ba82:	4628      	mov	r0, r5
    ba84:	f026 f956 	bl	31d34 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ba88:	9505      	str	r5, [sp, #20]
    ba8a:	7863      	ldrb	r3, [r4, #1]
    ba8c:	211e      	movs	r1, #30
    ba8e:	9304      	str	r3, [sp, #16]
    ba90:	78a3      	ldrb	r3, [r4, #2]
    ba92:	4630      	mov	r0, r6
    ba94:	9303      	str	r3, [sp, #12]
    ba96:	78e3      	ldrb	r3, [r4, #3]
    ba98:	4a0c      	ldr	r2, [pc, #48]	; (bacc <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ba9a:	9302      	str	r3, [sp, #8]
    ba9c:	7923      	ldrb	r3, [r4, #4]
    ba9e:	9301      	str	r3, [sp, #4]
    baa0:	7963      	ldrb	r3, [r4, #5]
    baa2:	9300      	str	r3, [sp, #0]
    baa4:	79a3      	ldrb	r3, [r4, #6]
    baa6:	f01e fce6 	bl	2a476 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    baaa:	b00a      	add	sp, #40	; 0x28
    baac:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    baae:	4908      	ldr	r1, [pc, #32]	; (bad0 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    bab0:	e7e7      	b.n	ba82 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    bab2:	4908      	ldr	r1, [pc, #32]	; (bad4 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    bab4:	e7e5      	b.n	ba82 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    bab6:	4908      	ldr	r1, [pc, #32]	; (bad8 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    bab8:	e7e3      	b.n	ba82 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    baba:	210a      	movs	r1, #10
    babc:	4628      	mov	r0, r5
    babe:	4a07      	ldr	r2, [pc, #28]	; (badc <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    bac0:	f01e fcd9 	bl	2a476 <snprintk>
		break;
    bac4:	e7e0      	b.n	ba88 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    bac6:	bf00      	nop
    bac8:	000346b6 	.word	0x000346b6
    bacc:	000346d8 	.word	0x000346d8
    bad0:	000346bd 	.word	0x000346bd
    bad4:	000346c4 	.word	0x000346c4
    bad8:	000346ce 	.word	0x000346ce
    badc:	00037d55 	.word	0x00037d55

0000bae0 <security_changed>:
{
    bae0:	b570      	push	{r4, r5, r6, lr}
    bae2:	4614      	mov	r4, r2
    bae4:	b08e      	sub	sp, #56	; 0x38
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bae6:	ae06      	add	r6, sp, #24
{
    bae8:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    baea:	f022 f96b 	bl	2ddc4 <bt_conn_get_dst>
    baee:	4631      	mov	r1, r6
    baf0:	f7ff ffba 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err)
    baf4:	b96c      	cbnz	r4, bb12 <security_changed+0x32>
		LOG_INF("Security changed: %s level %u", addr, level);
    baf6:	4b0e      	ldr	r3, [pc, #56]	; (bb30 <security_changed+0x50>)
    baf8:	2203      	movs	r2, #3
    bafa:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bafe:	4620      	mov	r0, r4
    bb00:	4623      	mov	r3, r4
    bb02:	e9cd 6503 	strd	r6, r5, [sp, #12]
    bb06:	490b      	ldr	r1, [pc, #44]	; (bb34 <security_changed+0x54>)
    bb08:	9400      	str	r4, [sp, #0]
    bb0a:	f01e fa5d 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bb0e:	b00e      	add	sp, #56	; 0x38
    bb10:	bd70      	pop	{r4, r5, r6, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    bb12:	4b09      	ldr	r3, [pc, #36]	; (bb38 <security_changed+0x58>)
    bb14:	2202      	movs	r2, #2
    bb16:	9302      	str	r3, [sp, #8]
    bb18:	2300      	movs	r3, #0
    bb1a:	e9cd 5404 	strd	r5, r4, [sp, #16]
    bb1e:	4618      	mov	r0, r3
    bb20:	e9cd 3300 	strd	r3, r3, [sp]
    bb24:	4903      	ldr	r1, [pc, #12]	; (bb34 <security_changed+0x54>)
    bb26:	9603      	str	r6, [sp, #12]
    bb28:	f01e fa4e 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bb2c:	e7ef      	b.n	bb0e <security_changed+0x2e>
    bb2e:	bf00      	nop
    bb30:	000346fb 	.word	0x000346fb
    bb34:	000332fc 	.word	0x000332fc
    bb38:	00034719 	.word	0x00034719

0000bb3c <pairing_failed>:
{
    bb3c:	b530      	push	{r4, r5, lr}
    bb3e:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb40:	ad06      	add	r5, sp, #24
{
    bb42:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb44:	f022 f93e 	bl	2ddc4 <bt_conn_get_dst>
    bb48:	4629      	mov	r1, r5
    bb4a:	f7ff ff8d 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    bb4e:	4b07      	ldr	r3, [pc, #28]	; (bb6c <pairing_failed+0x30>)
    bb50:	2203      	movs	r2, #3
    bb52:	9302      	str	r3, [sp, #8]
    bb54:	2300      	movs	r3, #0
    bb56:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bb5a:	4618      	mov	r0, r3
    bb5c:	e9cd 3300 	strd	r3, r3, [sp]
    bb60:	4903      	ldr	r1, [pc, #12]	; (bb70 <pairing_failed+0x34>)
    bb62:	f01e fa31 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bb66:	b00f      	add	sp, #60	; 0x3c
    bb68:	bd30      	pop	{r4, r5, pc}
    bb6a:	bf00      	nop
    bb6c:	0003473d 	.word	0x0003473d
    bb70:	000332fc 	.word	0x000332fc

0000bb74 <pairing_complete>:
{
    bb74:	b530      	push	{r4, r5, lr}
    bb76:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb78:	ad06      	add	r5, sp, #24
{
    bb7a:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bb7c:	f022 f922 	bl	2ddc4 <bt_conn_get_dst>
    bb80:	4629      	mov	r1, r5
    bb82:	f7ff ff71 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    bb86:	4b07      	ldr	r3, [pc, #28]	; (bba4 <pairing_complete+0x30>)
    bb88:	2203      	movs	r2, #3
    bb8a:	9302      	str	r3, [sp, #8]
    bb8c:	2300      	movs	r3, #0
    bb8e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bb92:	4618      	mov	r0, r3
    bb94:	e9cd 3300 	strd	r3, r3, [sp]
    bb98:	4903      	ldr	r1, [pc, #12]	; (bba8 <pairing_complete+0x34>)
    bb9a:	f01e fa15 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bb9e:	b00f      	add	sp, #60	; 0x3c
    bba0:	bd30      	pop	{r4, r5, pc}
    bba2:	bf00      	nop
    bba4:	00034760 	.word	0x00034760
    bba8:	000332fc 	.word	0x000332fc

0000bbac <auth_cancel>:
{
    bbac:	b510      	push	{r4, lr}
    bbae:	b08c      	sub	sp, #48	; 0x30
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbb0:	ac04      	add	r4, sp, #16
    bbb2:	f022 f907 	bl	2ddc4 <bt_conn_get_dst>
    bbb6:	4621      	mov	r1, r4
    bbb8:	f7ff ff56 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    bbbc:	4b06      	ldr	r3, [pc, #24]	; (bbd8 <auth_cancel+0x2c>)
    bbbe:	2203      	movs	r2, #3
    bbc0:	9302      	str	r3, [sp, #8]
    bbc2:	2300      	movs	r3, #0
    bbc4:	4905      	ldr	r1, [pc, #20]	; (bbdc <auth_cancel+0x30>)
    bbc6:	4618      	mov	r0, r3
    bbc8:	e9cd 3300 	strd	r3, r3, [sp]
    bbcc:	9403      	str	r4, [sp, #12]
    bbce:	f01e f9fb 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bbd2:	b00c      	add	sp, #48	; 0x30
    bbd4:	bd10      	pop	{r4, pc}
    bbd6:	bf00      	nop
    bbd8:	00034782 	.word	0x00034782
    bbdc:	000332fc 	.word	0x000332fc

0000bbe0 <auth_passkey_display>:
{
    bbe0:	b530      	push	{r4, r5, lr}
    bbe2:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbe4:	ad06      	add	r5, sp, #24
{
    bbe6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bbe8:	f022 f8ec 	bl	2ddc4 <bt_conn_get_dst>
    bbec:	4629      	mov	r1, r5
    bbee:	f7ff ff3b 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    bbf2:	4b07      	ldr	r3, [pc, #28]	; (bc10 <auth_passkey_display+0x30>)
    bbf4:	2203      	movs	r2, #3
    bbf6:	9302      	str	r3, [sp, #8]
    bbf8:	2300      	movs	r3, #0
    bbfa:	e9cd 5403 	strd	r5, r4, [sp, #12]
    bbfe:	4618      	mov	r0, r3
    bc00:	e9cd 3300 	strd	r3, r3, [sp]
    bc04:	4903      	ldr	r1, [pc, #12]	; (bc14 <auth_passkey_display+0x34>)
    bc06:	f01e f9df 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bc0a:	b00f      	add	sp, #60	; 0x3c
    bc0c:	bd30      	pop	{r4, r5, pc}
    bc0e:	bf00      	nop
    bc10:	00034798 	.word	0x00034798
    bc14:	000332fc 	.word	0x000332fc

0000bc18 <auth_passkey_confirm>:
{
    bc18:	b570      	push	{r4, r5, r6, lr}
    bc1a:	b08e      	sub	sp, #56	; 0x38
    bc1c:	460c      	mov	r4, r1
    bc1e:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    bc20:	f022 f80f 	bl	2dc42 <bt_conn_ref>
    bc24:	4b11      	ldr	r3, [pc, #68]	; (bc6c <auth_passkey_confirm+0x54>)
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc26:	ae06      	add	r6, sp, #24
	auth_conn = bt_conn_ref(conn);
    bc28:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bc2a:	4628      	mov	r0, r5
    bc2c:	f022 f8ca 	bl	2ddc4 <bt_conn_get_dst>
    bc30:	4631      	mov	r1, r6
    bc32:	f7ff ff19 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    bc36:	e9cd 6403 	strd	r6, r4, [sp, #12]
    bc3a:	2400      	movs	r4, #0
    bc3c:	4d0c      	ldr	r5, [pc, #48]	; (bc70 <auth_passkey_confirm+0x58>)
    bc3e:	4b0d      	ldr	r3, [pc, #52]	; (bc74 <auth_passkey_confirm+0x5c>)
    bc40:	4629      	mov	r1, r5
    bc42:	4620      	mov	r0, r4
    bc44:	9302      	str	r3, [sp, #8]
    bc46:	2203      	movs	r2, #3
    bc48:	4623      	mov	r3, r4
    bc4a:	e9cd 4400 	strd	r4, r4, [sp]
    bc4e:	f01e f9bb 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    bc52:	4b09      	ldr	r3, [pc, #36]	; (bc78 <auth_passkey_confirm+0x60>)
    bc54:	2203      	movs	r2, #3
    bc56:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bc5a:	4629      	mov	r1, r5
    bc5c:	4623      	mov	r3, r4
    bc5e:	4620      	mov	r0, r4
    bc60:	9400      	str	r4, [sp, #0]
    bc62:	f01e f9b1 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bc66:	b00e      	add	sp, #56	; 0x38
    bc68:	bd70      	pop	{r4, r5, r6, pc}
    bc6a:	bf00      	nop
    bc6c:	2000a6d0 	.word	0x2000a6d0
    bc70:	000332fc 	.word	0x000332fc
    bc74:	00034798 	.word	0x00034798
    bc78:	000347ad 	.word	0x000347ad

0000bc7c <bt_receive_cb>:
{
    bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bc80:	2400      	movs	r4, #0
{
    bc82:	4605      	mov	r5, r0
    bc84:	b088      	sub	sp, #32
    bc86:	460f      	mov	r7, r1
    bc88:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    bc8a:	4621      	mov	r1, r4
    bc8c:	221a      	movs	r2, #26
    bc8e:	a801      	add	r0, sp, #4
    bc90:	9400      	str	r4, [sp, #0]
    bc92:	f025 ff00 	bl	31a96 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    bc96:	4628      	mov	r0, r5
    bc98:	f022 f894 	bl	2ddc4 <bt_conn_get_dst>
    bc9c:	4669      	mov	r1, sp
    bc9e:	f7ff fee3 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bca2:	f8df 8088 	ldr.w	r8, [pc, #136]	; bd2c <bt_receive_cb+0xb0>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bca6:	f8df 9088 	ldr.w	r9, [pc, #136]	; bd30 <bt_receive_cb+0xb4>
		k_fifo_put(&command_tx,cmd_tx);
    bcaa:	f8df a088 	ldr.w	sl, [pc, #136]	; bd34 <bt_receive_cb+0xb8>
	for (uint16_t pos = 0; pos != len;)
    bcae:	42b4      	cmp	r4, r6
    bcb0:	d00a      	beq.n	bcc8 <bt_receive_cb+0x4c>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    bcb2:	206c      	movs	r0, #108	; 0x6c
    bcb4:	f025 fe99 	bl	319ea <k_malloc>
    bcb8:	4605      	mov	r5, r0
		struct uart_data_t *cmd_tx = k_malloc(sizeof(*cmd_tx));
    bcba:	206c      	movs	r0, #108	; 0x6c
    bcbc:	f025 fe95 	bl	319ea <k_malloc>
		if (!tx)
    bcc0:	b92d      	cbnz	r5, bcce <bt_receive_cb+0x52>
			printf("Not able to allocate UART send data buffer");
    bcc2:	481d      	ldr	r0, [pc, #116]	; (bd38 <bt_receive_cb+0xbc>)
    bcc4:	f01b ff46 	bl	27b54 <iprintf>
}
    bcc8:	b008      	add	sp, #32
    bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size)
    bcce:	1b32      	subs	r2, r6, r4
    bcd0:	2a63      	cmp	r2, #99	; 0x63
			tx->len = tx_data_size;
    bcd2:	bf8c      	ite	hi
    bcd4:	2263      	movhi	r2, #99	; 0x63
			tx->len = (len - pos);
    bcd6:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    bcd8:	1d2b      	adds	r3, r5, #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bcda:	4618      	mov	r0, r3
    bcdc:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
    bce0:	1939      	adds	r1, r7, r4
    bce2:	f025 fe9e 	bl	31a22 <memcpy>
		pos += tx->len;
    bce6:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bcea:	4603      	mov	r3, r0
    bcec:	4414      	add	r4, r2
    bcee:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r'))
    bcf0:	42a6      	cmp	r6, r4
    bcf2:	d10a      	bne.n	bd0a <bt_receive_cb+0x8e>
    bcf4:	19b9      	adds	r1, r7, r6
    bcf6:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    bcfa:	290d      	cmp	r1, #13
    bcfc:	d105      	bne.n	bd0a <bt_receive_cb+0x8e>
			tx->data[tx->len] = '\n';
    bcfe:	200a      	movs	r0, #10
    bd00:	18a9      	adds	r1, r5, r2
			tx->len++;
    bd02:	3201      	adds	r2, #1
			tx->data[tx->len] = '\n';
    bd04:	7108      	strb	r0, [r1, #4]
			tx->len++;
    bd06:	f8a5 2068 	strh.w	r2, [r5, #104]	; 0x68
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    bd0a:	4619      	mov	r1, r3
    bd0c:	4640      	mov	r0, r8
    bd0e:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
    bd12:	f01e f970 	bl	29ff6 <uart_tx.constprop.0>
		if (err)
    bd16:	b118      	cbz	r0, bd20 <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    bd18:	4629      	mov	r1, r5
    bd1a:	4648      	mov	r0, r9
    bd1c:	f025 fa1d 	bl	3115a <k_queue_append>
		k_fifo_put(&command_tx,cmd_tx);
    bd20:	4629      	mov	r1, r5
    bd22:	4650      	mov	r0, sl
    bd24:	f025 fa19 	bl	3115a <k_queue_append>
    bd28:	e7c1      	b.n	bcae <bt_receive_cb+0x32>
    bd2a:	bf00      	nop
    bd2c:	00032b8c 	.word	0x00032b8c
    bd30:	20008eb8 	.word	0x20008eb8
    bd34:	20008e70 	.word	0x20008e70
    bd38:	000347dc 	.word	0x000347dc

0000bd3c <button_pressed_2>:
{
    bd3c:	b508      	push	{r3, lr}
	k_sem_give(&save_memory);
    bd3e:	4807      	ldr	r0, [pc, #28]	; (bd5c <button_pressed_2+0x20>)
    bd40:	f01e f932 	bl	29fa8 <k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    bd44:	2101      	movs	r1, #1
    bd46:	4806      	ldr	r0, [pc, #24]	; (bd60 <button_pressed_2+0x24>)
    bd48:	f01e f965 	bl	2a016 <gpio_pin_set_dt.isra.0>
    bd4c:	f024 f9db 	bl	30106 <sys_clock_cycle_get_32>
}
    bd50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd54:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    bd56:	4803      	ldr	r0, [pc, #12]	; (bd64 <button_pressed_2+0x28>)
    bd58:	f01e bb80 	b.w	2a45c <printk>
    bd5c:	20008e10 	.word	0x20008e10
    bd60:	2000845c 	.word	0x2000845c
    bd64:	00034807 	.word	0x00034807

0000bd68 <button_pressed_1>:
{
    bd68:	b508      	push	{r3, lr}
	k_sem_give(&send_proto);
    bd6a:	4807      	ldr	r0, [pc, #28]	; (bd88 <button_pressed_1+0x20>)
    bd6c:	f01e f91c 	bl	29fa8 <k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    bd70:	2101      	movs	r1, #1
    bd72:	4806      	ldr	r0, [pc, #24]	; (bd8c <button_pressed_1+0x24>)
    bd74:	f01e f94f 	bl	2a016 <gpio_pin_set_dt.isra.0>
    bd78:	f024 f9c5 	bl	30106 <sys_clock_cycle_get_32>
}
    bd7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bd80:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    bd82:	4803      	ldr	r0, [pc, #12]	; (bd90 <button_pressed_1+0x28>)
    bd84:	f01e bb6a 	b.w	2a45c <printk>
    bd88:	20008e40 	.word	0x20008e40
    bd8c:	20008454 	.word	0x20008454
    bd90:	0003481f 	.word	0x0003481f

0000bd94 <connected>:
{
    bd94:	b570      	push	{r4, r5, r6, lr}
    bd96:	4605      	mov	r5, r0
	if (err)
    bd98:	460c      	mov	r4, r1
{
    bd9a:	b08c      	sub	sp, #48	; 0x30
	if (err)
    bd9c:	b161      	cbz	r1, bdb8 <connected+0x24>
		LOG_ERR("Connection failed (err %u)", err);
    bd9e:	4b14      	ldr	r3, [pc, #80]	; (bdf0 <connected+0x5c>)
    bda0:	9103      	str	r1, [sp, #12]
    bda2:	9302      	str	r3, [sp, #8]
    bda4:	2300      	movs	r3, #0
    bda6:	2201      	movs	r2, #1
    bda8:	4618      	mov	r0, r3
    bdaa:	e9cd 3300 	strd	r3, r3, [sp]
    bdae:	4911      	ldr	r1, [pc, #68]	; (bdf4 <connected+0x60>)
    bdb0:	f01e f90a 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    bdb4:	b00c      	add	sp, #48	; 0x30
    bdb6:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    bdb8:	ae04      	add	r6, sp, #16
    bdba:	f022 f803 	bl	2ddc4 <bt_conn_get_dst>
    bdbe:	4631      	mov	r1, r6
    bdc0:	f7ff fe52 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    bdc4:	4b0c      	ldr	r3, [pc, #48]	; (bdf8 <connected+0x64>)
    bdc6:	2203      	movs	r2, #3
    bdc8:	4620      	mov	r0, r4
    bdca:	e9cd 4301 	strd	r4, r3, [sp, #4]
    bdce:	4909      	ldr	r1, [pc, #36]	; (bdf4 <connected+0x60>)
    bdd0:	4623      	mov	r3, r4
    bdd2:	9603      	str	r6, [sp, #12]
    bdd4:	9400      	str	r4, [sp, #0]
    bdd6:	f01e f8f7 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    bdda:	4628      	mov	r0, r5
    bddc:	f021 ff31 	bl	2dc42 <bt_conn_ref>
    bde0:	4b06      	ldr	r3, [pc, #24]	; (bdfc <connected+0x68>)
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bde2:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    bde4:	6018      	str	r0, [r3, #0]
	gpio_pin_set_dt(CON_STATUS_LED, ON);
    bde6:	4806      	ldr	r0, [pc, #24]	; (be00 <connected+0x6c>)
    bde8:	f01e f915 	bl	2a016 <gpio_pin_set_dt.isra.0>
    bdec:	e7e2      	b.n	bdb4 <connected+0x20>
    bdee:	bf00      	nop
    bdf0:	00034837 	.word	0x00034837
    bdf4:	000332fc 	.word	0x000332fc
    bdf8:	00034852 	.word	0x00034852
    bdfc:	2000a6d4 	.word	0x2000a6d4
    be00:	2000846c 	.word	0x2000846c

0000be04 <disconnected>:
{
    be04:	b530      	push	{r4, r5, lr}
    be06:	460c      	mov	r4, r1
    be08:	b08f      	sub	sp, #60	; 0x3c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    be0a:	ad06      	add	r5, sp, #24
    be0c:	f021 ffda 	bl	2ddc4 <bt_conn_get_dst>
    be10:	4629      	mov	r1, r5
    be12:	f7ff fe29 	bl	ba68 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    be16:	e9cd 5403 	strd	r5, r4, [sp, #12]
    be1a:	2400      	movs	r4, #0
    be1c:	4b0d      	ldr	r3, [pc, #52]	; (be54 <disconnected+0x50>)
	if (auth_conn)
    be1e:	4d0e      	ldr	r5, [pc, #56]	; (be58 <disconnected+0x54>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    be20:	4620      	mov	r0, r4
    be22:	9302      	str	r3, [sp, #8]
    be24:	2203      	movs	r2, #3
    be26:	4623      	mov	r3, r4
    be28:	e9cd 4400 	strd	r4, r4, [sp]
    be2c:	490b      	ldr	r1, [pc, #44]	; (be5c <disconnected+0x58>)
    be2e:	f01e f8cb 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
	if (auth_conn)
    be32:	6828      	ldr	r0, [r5, #0]
    be34:	b110      	cbz	r0, be3c <disconnected+0x38>
		bt_conn_unref(auth_conn);
    be36:	f021 ff18 	bl	2dc6a <bt_conn_unref>
		auth_conn = NULL;
    be3a:	602c      	str	r4, [r5, #0]
	if (current_conn)
    be3c:	4c08      	ldr	r4, [pc, #32]	; (be60 <disconnected+0x5c>)
    be3e:	6820      	ldr	r0, [r4, #0]
    be40:	b130      	cbz	r0, be50 <disconnected+0x4c>
		bt_conn_unref(current_conn);
    be42:	f021 ff12 	bl	2dc6a <bt_conn_unref>
		current_conn = NULL;
    be46:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    be48:	4806      	ldr	r0, [pc, #24]	; (be64 <disconnected+0x60>)
		current_conn = NULL;
    be4a:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    be4c:	f01e f8e3 	bl	2a016 <gpio_pin_set_dt.isra.0>
}
    be50:	b00f      	add	sp, #60	; 0x3c
    be52:	bd30      	pop	{r4, r5, pc}
    be54:	0003485f 	.word	0x0003485f
    be58:	2000a6d0 	.word	0x2000a6d0
    be5c:	000332fc 	.word	0x000332fc
    be60:	2000a6d4 	.word	0x2000a6d4
    be64:	2000846c 	.word	0x2000846c

0000be68 <activity>:
	}
    
}

void activity(void){
    be68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int blink_status = 0;
    be6c:	2600      	movs	r6, #0
    be6e:	466d      	mov	r5, sp
	int32_t delay;
	
    for (;;){
		delay=Initial_Setup.led_blink_time;
    be70:	f8df 803c 	ldr.w	r8, [pc, #60]	; beb0 <activity+0x48>
    be74:	4f0f      	ldr	r7, [pc, #60]	; (beb4 <activity+0x4c>)
    be76:	f8b8 4000 	ldrh.w	r4, [r8]
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    be7a:	3601      	adds	r6, #1
    be7c:	e897 0003 	ldmia.w	r7, {r0, r1}
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
    be80:	2c09      	cmp	r4, #9
    be82:	e885 0003 	stmia.w	r5, {r0, r1}
	gpio_pin_set_dt(&led, value);
    be86:	4628      	mov	r0, r5
    be88:	f006 0101 	and.w	r1, r6, #1
		if (delay<10){delay=RUN_LED_BLINK_INTERVAL;}
    be8c:	bfd8      	it	le
    be8e:	f44f 7416 	movle.w	r4, #600	; 0x258
	gpio_pin_set_dt(&led, value);
    be92:	f01e f8c0 	bl	2a016 <gpio_pin_set_dt.isra.0>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    be96:	f240 30e7 	movw	r0, #999	; 0x3e7
    be9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    be9e:	2300      	movs	r3, #0
    bea0:	eb00 30c4 	add.w	r0, r0, r4, lsl #15
    bea4:	2100      	movs	r1, #0
    bea6:	f7fd f84b 	bl	8f40 <__aeabi_uldivmod>
		k_sleep(K_MSEC(delay));
    beaa:	f01e f8f3 	bl	2a094 <k_sleep.isra.0>
    for (;;){
    beae:	e7e2      	b.n	be76 <activity+0xe>
    beb0:	2000b094 	.word	0x2000b094
    beb4:	20008464 	.word	0x20008464

0000beb8 <adc_thread>:
{
    beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    k_sem_take(&adc_init,K_FOREVER);
    bebc:	f04f 32ff 	mov.w	r2, #4294967295
    bec0:	f04f 33ff 	mov.w	r3, #4294967295
    bec4:	4837      	ldr	r0, [pc, #220]	; (bfa4 <adc_thread+0xec>)
{
    bec6:	b085      	sub	sp, #20
    k_sem_take(&adc_init,K_FOREVER);
    bec8:	f01e f89d 	bl	2a006 <k_sem_take.constprop.0.isra.0>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    becc:	4e36      	ldr	r6, [pc, #216]	; (bfa8 <adc_thread+0xf0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    bece:	f8df a0dc 	ldr.w	sl, [pc, #220]	; bfac <adc_thread+0xf4>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bed2:	4c37      	ldr	r4, [pc, #220]	; (bfb0 <adc_thread+0xf8>)
    bed4:	2700      	movs	r7, #0
    bed6:	46a3      	mov	fp, r4
			adc_value[adc_channels[i].channel_id] = buf_adc;
    bed8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; bfb4 <adc_thread+0xfc>
	if (!spec->channel_cfg_dt_node_exists) {
    bedc:	7963      	ldrb	r3, [r4, #5]
    bede:	b13b      	cbz	r3, bef0 <adc_thread+0x38>
	seq->channels = BIT(spec->channel_id);
    bee0:	2301      	movs	r3, #1
    bee2:	7922      	ldrb	r2, [r4, #4]
    bee4:	4093      	lsls	r3, r2
    bee6:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    bee8:	7c23      	ldrb	r3, [r4, #16]
    beea:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    beec:	7c63      	ldrb	r3, [r4, #17]
    beee:	7473      	strb	r3, [r6, #17]
    bef0:	f04f 32ff 	mov.w	r2, #4294967295
    bef4:	f04f 33ff 	mov.w	r3, #4294967295
    bef8:	4650      	mov	r0, sl
    befa:	f019 fdff 	bl	25afc <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    befe:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    bf00:	68ab      	ldr	r3, [r5, #8]
    bf02:	4631      	mov	r1, r6
    bf04:	4628      	mov	r0, r5
    bf06:	685b      	ldr	r3, [r3, #4]
    bf08:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id] = buf_adc;
    bf0a:	7922      	ldrb	r2, [r4, #4]
    bf0c:	f9b8 1000 	ldrsh.w	r1, [r8]
    bf10:	4b29      	ldr	r3, [pc, #164]	; (bfb8 <adc_thread+0x100>)
    bf12:	9201      	str	r2, [sp, #4]
    bf14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (flag == 1)
    bf18:	f8df 90a0 	ldr.w	r9, [pc, #160]	; bfbc <adc_thread+0x104>
	return z_impl_k_mutex_unlock(mutex);
    bf1c:	4650      	mov	r0, sl
    bf1e:	f019 fe67 	bl	25bf0 <z_impl_k_mutex_unlock>
    bf22:	f8d9 3000 	ldr.w	r3, [r9]
    bf26:	9a01      	ldr	r2, [sp, #4]
    bf28:	2b01      	cmp	r3, #1
    bf2a:	d12d      	bne.n	bf88 <adc_thread+0xd0>
				printk("- %s, channel %d: ", adc_channels[i].dev->name, adc_channels[i].channel_id);
    bf2c:	6829      	ldr	r1, [r5, #0]
    bf2e:	4824      	ldr	r0, [pc, #144]	; (bfc0 <adc_thread+0x108>)
    bf30:	f01e fa94 	bl	2a45c <printk>
				printk("%" PRId16, buf_adc);
    bf34:	f9b8 1000 	ldrsh.w	r1, [r8]
    bf38:	4822      	ldr	r0, [pc, #136]	; (bfc4 <adc_thread+0x10c>)
    bf3a:	f01e fa8f 	bl	2a45c <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    bf3e:	7963      	ldrb	r3, [r4, #5]
				val_mv = buf_adc;
    bf40:	f9b8 5000 	ldrsh.w	r5, [r8]
    bf44:	b1e3      	cbz	r3, bf80 <adc_thread+0xc8>
	if (spec->channel_cfg.differential) {
    bf46:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bf48:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    bf4a:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bf4e:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bf50:	bf0a      	itet	eq
    bf52:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    bf54:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    bf56:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    bf58:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    bf5a:	bf08      	it	eq
    bf5c:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    bf5e:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    bf60:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    bf62:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    bf64:	bf44      	itt	mi
    bf66:	f103 33ff 	addmi.w	r3, r3, #4294967295
    bf6a:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    bf6c:	79a0      	ldrb	r0, [r4, #6]
    bf6e:	a903      	add	r1, sp, #12
    bf70:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    bf72:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    bf74:	f014 fc9e 	bl	208b4 <adc_gain_invert>
	if (ret == 0) {
    bf78:	b910      	cbnz	r0, bf80 <adc_thread+0xc8>
		*valp = (adc_mv >> resolution);
    bf7a:	9d03      	ldr	r5, [sp, #12]
    bf7c:	9b01      	ldr	r3, [sp, #4]
    bf7e:	411d      	asrs	r5, r3
				printk(" = %" PRId32 " mV\n", val_mv);
    bf80:	4629      	mov	r1, r5
    bf82:	4811      	ldr	r0, [pc, #68]	; (bfc8 <adc_thread+0x110>)
    bf84:	f01e fa6a 	bl	2a45c <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    bf88:	3701      	adds	r7, #1
    bf8a:	2f05      	cmp	r7, #5
    bf8c:	f104 0414 	add.w	r4, r4, #20
    bf90:	d1a4      	bne.n	bedc <adc_thread+0x24>
		flag = 0;
    bf92:	2300      	movs	r3, #0
		k_sleep(K_MSEC(100));
    bf94:	f640 40cd 	movw	r0, #3277	; 0xccd
    bf98:	2100      	movs	r1, #0
		flag = 0;
    bf9a:	f8c9 3000 	str.w	r3, [r9]
		k_sleep(K_MSEC(100));
    bf9e:	f01e f879 	bl	2a094 <k_sleep.isra.0>
	{
    bfa2:	e796      	b.n	bed2 <adc_thread+0x1a>
    bfa4:	20008ca8 	.word	0x20008ca8
    bfa8:	20008440 	.word	0x20008440
    bfac:	2000a754 	.word	0x2000a754
    bfb0:	000335a8 	.word	0x000335a8
    bfb4:	20030f56 	.word	0x20030f56
    bfb8:	20030f46 	.word	0x20030f46
    bfbc:	2000a750 	.word	0x2000a750
    bfc0:	0003487c 	.word	0x0003487c
    bfc4:	0003488f 	.word	0x0003488f
    bfc8:	00034893 	.word	0x00034893

0000bfcc <feed_circular_buffer_thread>:
void feed_circular_buffer_thread(void){
    bfcc:	b570      	push	{r4, r5, r6, lr}
     k_sem_take(&circular_buffer_sh,K_FOREVER);
    bfce:	4e12      	ldr	r6, [pc, #72]	; (c018 <feed_circular_buffer_thread+0x4c>)
     printk("LOG Circular Buffer\n");
    bfd0:	4d12      	ldr	r5, [pc, #72]	; (c01c <feed_circular_buffer_thread+0x50>)
     dig_probe=gpio_pin_get_dt(DIG_3_ADR);//READS A DIGITAL INPUT
    bfd2:	4c13      	ldr	r4, [pc, #76]	; (c020 <feed_circular_buffer_thread+0x54>)
     k_sem_take(&circular_buffer_sh,K_FOREVER);
    bfd4:	f04f 32ff 	mov.w	r2, #4294967295
    bfd8:	f04f 33ff 	mov.w	r3, #4294967295
    bfdc:	4630      	mov	r0, r6
    bfde:	f01e f812 	bl	2a006 <k_sem_take.constprop.0.isra.0>
	 color(6);
    bfe2:	2006      	movs	r0, #6
    bfe4:	f001 fdda 	bl	db9c <color>
     printk("LOG Circular Buffer\n");
    bfe8:	4628      	mov	r0, r5
    bfea:	f01e fa37 	bl	2a45c <printk>
	 color(255);
    bfee:	20ff      	movs	r0, #255	; 0xff
    bff0:	f001 fdd4 	bl	db9c <color>
     dig_probe=gpio_pin_get_dt(DIG_3_ADR);//READS A DIGITAL INPUT
    bff4:	4620      	mov	r0, r4
    bff6:	f01d ffc2 	bl	29f7e <gpio_pin_get_dt>
    bffa:	4b0a      	ldr	r3, [pc, #40]	; (c024 <feed_circular_buffer_thread+0x58>)
    bffc:	7018      	strb	r0, [r3, #0]
     feed_circular_buffer();
    bffe:	f001 f947 	bl	d290 <feed_circular_buffer>
     print_current_position_cb(C_Buffer_Current_Position);
    c002:	4b09      	ldr	r3, [pc, #36]	; (c028 <feed_circular_buffer_thread+0x5c>)
    c004:	6818      	ldr	r0, [r3, #0]
    c006:	f001 faa9 	bl	d55c <print_current_position_cb>
     k_sleep(K_MSEC(100));
    c00a:	f640 40cd 	movw	r0, #3277	; 0xccd
    c00e:	2100      	movs	r1, #0
    c010:	f01e f840 	bl	2a094 <k_sleep.isra.0>
   while(1){	
    c014:	e7de      	b.n	bfd4 <feed_circular_buffer_thread+0x8>
    c016:	bf00      	nop
    c018:	20008d38 	.word	0x20008d38
    c01c:	0003489d 	.word	0x0003489d
    c020:	00033614 	.word	0x00033614
    c024:	200311d1 	.word	0x200311d1
    c028:	2002f9e0 	.word	0x2002f9e0

0000c02c <shoot_minute_save_thread>:
{
    c02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint64_t actual_time = k_uptime_get() / 1000;
    c030:	f01d ffbc 	bl	29fac <k_uptime_get>
    c034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c038:	2300      	movs	r3, #0
    c03a:	f7fc ff31 	bl	8ea0 <__aeabi_ldivmod>
	h = (actual_time / 3600);
    c03e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    c042:	2300      	movs	r3, #0
	uint64_t actual_time = k_uptime_get() / 1000;
    c044:	460d      	mov	r5, r1
    c046:	4606      	mov	r6, r0
	h = (actual_time / 3600);
    c048:	f7fc ff7a 	bl	8f40 <__aeabi_uldivmod>
	m = (actual_time - (3600 * h)) / 60;
    c04c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    c050:	fb03 f100 	mul.w	r1, r3, r0
    c054:	1a70      	subs	r0, r6, r1
    c056:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    c05a:	223c      	movs	r2, #60	; 0x3c
    c05c:	2300      	movs	r3, #0
    c05e:	f7fc ff6f 	bl	8f40 <__aeabi_uldivmod>
    k_sem_take(&timer_init,K_FOREVER); //wait init
    c062:	f04f 32ff 	mov.w	r2, #4294967295
	m = (actual_time - (3600 * h)) / 60;
    c066:	4605      	mov	r5, r0
    k_sem_take(&timer_init,K_FOREVER); //wait init
    c068:	f04f 33ff 	mov.w	r3, #4294967295
    c06c:	4822      	ldr	r0, [pc, #136]	; (c0f8 <shoot_minute_save_thread+0xcc>)
    c06e:	f01d ffca 	bl	2a006 <k_sem_take.constprop.0.isra.0>
			k_sem_give(&circular_buffer_sh);
    c072:	f8df 8088 	ldr.w	r8, [pc, #136]	; c0fc <shoot_minute_save_thread+0xd0>
			if (lora_cycle_minute>=Initial_Setup.interval_uplink){
    c076:	4e22      	ldr	r6, [pc, #136]	; (c100 <shoot_minute_save_thread+0xd4>)
		actual_time = k_uptime_get() / 1000;
    c078:	f01d ff98 	bl	29fac <k_uptime_get>
    c07c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c080:	2300      	movs	r3, #0
    c082:	f7fc ff0d 	bl	8ea0 <__aeabi_ldivmod>
		h = (actual_time / 3600);
    c086:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    c08a:	2300      	movs	r3, #0
		actual_time = k_uptime_get() / 1000;
    c08c:	460f      	mov	r7, r1
    c08e:	4681      	mov	r9, r0
		h = (actual_time / 3600);
    c090:	f7fc ff56 	bl	8f40 <__aeabi_uldivmod>
		m = (actual_time - (3600 * h)) / 60;
    c094:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    c098:	fb03 f100 	mul.w	r1, r3, r0
    c09c:	ebb9 0001 	subs.w	r0, r9, r1
    c0a0:	f04f 0300 	mov.w	r3, #0
    c0a4:	eb67 71e1 	sbc.w	r1, r7, r1, asr #31
    c0a8:	223c      	movs	r2, #60	; 0x3c
    c0aa:	f7fc ff49 	bl	8f40 <__aeabi_uldivmod>
		if (m == (last_minute + 1))
    c0ae:	1c6b      	adds	r3, r5, #1
    c0b0:	4283      	cmp	r3, r0
		m = (actual_time - (3600 * h)) / 60;
    c0b2:	4604      	mov	r4, r0
		if (m == (last_minute + 1))
    c0b4:	d119      	bne.n	c0ea <shoot_minute_save_thread+0xbe>
				last_minute = -1;
    c0b6:	283b      	cmp	r0, #59	; 0x3b
    c0b8:	bf18      	it	ne
    c0ba:	4604      	movne	r4, r0
			k_sem_give(&circular_buffer_sh);
    c0bc:	4640      	mov	r0, r8
				last_minute = -1;
    c0be:	bf08      	it	eq
    c0c0:	f04f 34ff 	moveq.w	r4, #4294967295
			k_sem_give(&circular_buffer_sh);
    c0c4:	f01d ff70 	bl	29fa8 <k_sem_give>
			if (lora_cycle_minute>=Initial_Setup.interval_uplink){
    c0c8:	4b0e      	ldr	r3, [pc, #56]	; (c104 <shoot_minute_save_thread+0xd8>)
    c0ca:	7832      	ldrb	r2, [r6, #0]
    c0cc:	885b      	ldrh	r3, [r3, #2]
    c0ce:	429a      	cmp	r2, r3
    c0d0:	d304      	bcc.n	c0dc <shoot_minute_save_thread+0xb0>
				k_sem_give(&lorawan_tx);
    c0d2:	480d      	ldr	r0, [pc, #52]	; (c108 <shoot_minute_save_thread+0xdc>)
    c0d4:	f01d ff68 	bl	29fa8 <k_sem_give>
				lora_cycle_minute=0;
    c0d8:	2300      	movs	r3, #0
    c0da:	7033      	strb	r3, [r6, #0]
			lora_cycle_minute++;
    c0dc:	7833      	ldrb	r3, [r6, #0]
			printk("Minute Cycle thread \n");
    c0de:	480b      	ldr	r0, [pc, #44]	; (c10c <shoot_minute_save_thread+0xe0>)
			lora_cycle_minute++;
    c0e0:	3301      	adds	r3, #1
    c0e2:	7033      	strb	r3, [r6, #0]
			printk("Minute Cycle thread \n");
    c0e4:	4625      	mov	r5, r4
    c0e6:	f01e f9b9 	bl	2a45c <printk>
		k_sleep(K_MSEC(100));
    c0ea:	f640 40cd 	movw	r0, #3277	; 0xccd
    c0ee:	2100      	movs	r1, #0
    c0f0:	f01d ffd0 	bl	2a094 <k_sleep.isra.0>
	{
    c0f4:	e7c0      	b.n	c078 <shoot_minute_save_thread+0x4c>
    c0f6:	bf00      	nop
    c0f8:	20008e58 	.word	0x20008e58
    c0fc:	20008d38 	.word	0x20008d38
    c100:	200311bd 	.word	0x200311bd
    c104:	2000b094 	.word	0x2000b094
    c108:	20008dc8 	.word	0x20008dc8
    c10c:	000348b2 	.word	0x000348b2

0000c110 <alarm_infra_thread>:
		
			
	}
}

void alarm_infra_thread(void){
    c110:	b570      	push	{r4, r5, r6, lr}
    int32_t reactivate=0;
     //WAIT TO TURN ON THE ALARM
	 k_sem_take(&alarm_infra_init,K_FOREVER);
    c112:	f04f 33ff 	mov.w	r3, #4294967295
    c116:	f04f 32ff 	mov.w	r2, #4294967295
    c11a:	481b      	ldr	r0, [pc, #108]	; (c188 <alarm_infra_thread+0x78>)
    c11c:	f01d ff73 	bl	2a006 <k_sem_take.constprop.0.isra.0>
     sensor_status.busy[SENSOR_DIG_4]=ON;
    c120:	2301      	movs	r3, #1
    c122:	4c1a      	ldr	r4, [pc, #104]	; (c18c <alarm_infra_thread+0x7c>)
	 while(1){
	   reactivate=SLIP_TIME_REACTIVATE*1000;
	   k_sem_take(&alarm_infra,K_FOREVER);
    c124:	4d1a      	ldr	r5, [pc, #104]	; (c190 <alarm_infra_thread+0x80>)
	   color(1);
       printk("EMERGENCY - Alarm 4 - at %" PRIu32 "\n", k_cycle_get_32());
    c126:	4e1b      	ldr	r6, [pc, #108]	; (c194 <alarm_infra_thread+0x84>)
     sensor_status.busy[SENSOR_DIG_4]=ON;
    c128:	7423      	strb	r3, [r4, #16]
	   k_sem_take(&alarm_infra,K_FOREVER);
    c12a:	f04f 32ff 	mov.w	r2, #4294967295
    c12e:	f04f 33ff 	mov.w	r3, #4294967295
    c132:	4628      	mov	r0, r5
    c134:	f01d ff67 	bl	2a006 <k_sem_take.constprop.0.isra.0>
	   color(1);
    c138:	2001      	movs	r0, #1
    c13a:	f001 fd2f 	bl	db9c <color>
    c13e:	f023 ffe2 	bl	30106 <sys_clock_cycle_get_32>
    c142:	4601      	mov	r1, r0
       printk("EMERGENCY - Alarm 4 - at %" PRIu32 "\n", k_cycle_get_32());
    c144:	4630      	mov	r0, r6
    c146:	f01e f989 	bl	2a45c <printk>
	   gpio_pin_set_dt(LED4, ON); //SET LED 4
    c14a:	2101      	movs	r1, #1
    c14c:	4812      	ldr	r0, [pc, #72]	; (c198 <alarm_infra_thread+0x88>)
    c14e:	f01d ff62 	bl	2a016 <gpio_pin_set_dt.isra.0>
	   if(sensor_status.number[SENSOR_DIG_4]<255)sensor_status.number[SENSOR_DIG_4]++;
    c152:	7923      	ldrb	r3, [r4, #4]
    c154:	4a11      	ldr	r2, [pc, #68]	; (c19c <alarm_infra_thread+0x8c>)
    c156:	2bff      	cmp	r3, #255	; 0xff
    c158:	d006      	beq.n	c168 <alarm_infra_thread+0x58>
    c15a:	3301      	adds	r3, #1
    c15c:	b2db      	uxtb	r3, r3
	   if(sensor_status.number[SENSOR_DIG_4]==1)Initial_Setup.interval_uplink=LORAWAN_INTERVAL_ALARM;
    c15e:	2b01      	cmp	r3, #1
	   if(sensor_status.number[SENSOR_DIG_4]<255)sensor_status.number[SENSOR_DIG_4]++;
    c160:	7123      	strb	r3, [r4, #4]
	   if(sensor_status.number[SENSOR_DIG_4]==1)Initial_Setup.interval_uplink=LORAWAN_INTERVAL_ALARM;
    c162:	bf04      	itt	eq
    c164:	2303      	moveq	r3, #3
    c166:	8053      	strheq	r3, [r2, #2]
	   printk("New Interval UpLink Time: %d minutes\n",Initial_Setup.interval_uplink);
    c168:	8851      	ldrh	r1, [r2, #2]
    c16a:	480d      	ldr	r0, [pc, #52]	; (c1a0 <alarm_infra_thread+0x90>)
    c16c:	f01e f976 	bl	2a45c <printk>
	   k_sem_give(&lorawan_tx);
    c170:	480c      	ldr	r0, [pc, #48]	; (c1a4 <alarm_infra_thread+0x94>)
    c172:	f01d ff19 	bl	29fa8 <k_sem_give>
	   color(255);
    c176:	20ff      	movs	r0, #255	; 0xff
    c178:	f001 fd10 	bl	db9c <color>
	   k_msleep(reactivate);
    c17c:	480a      	ldr	r0, [pc, #40]	; (c1a8 <alarm_infra_thread+0x98>)
    c17e:	f01d ff8b 	bl	2a098 <k_msleep.isra.0>
	   sensor_status.busy[SENSOR_DIG_4]=0;
    c182:	2300      	movs	r3, #0
    c184:	7423      	strb	r3, [r4, #16]
	 while(1){
    c186:	e7d0      	b.n	c12a <alarm_infra_thread+0x1a>
    c188:	20008cd8 	.word	0x20008cd8
    c18c:	200311be 	.word	0x200311be
    c190:	20008cc0 	.word	0x20008cc0
    c194:	000348c8 	.word	0x000348c8
    c198:	20008454 	.word	0x20008454
    c19c:	2000b094 	.word	0x2000b094
    c1a0:	000348e5 	.word	0x000348e5
    c1a4:	20008dc8 	.word	0x20008dc8
    c1a8:	000186a0 	.word	0x000186a0

0000c1ac <uart_cb>:
{
    c1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type)
    c1ae:	780b      	ldrb	r3, [r1, #0]
    c1b0:	2b05      	cmp	r3, #5
    c1b2:	d829      	bhi.n	c208 <uart_cb+0x5c>
    c1b4:	e8df f003 	tbb	[pc, r3]
    c1b8:	6b2c9503 	.word	0x6b2c9503
    c1bc:	4984      	.short	0x4984
		if ((evt->data.tx.len == 0) ||
    c1be:	688b      	ldr	r3, [r1, #8]
    c1c0:	b313      	cbz	r3, c208 <uart_cb+0x5c>
			(!evt->data.tx.buf))
    c1c2:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    c1c4:	b300      	cbz	r0, c208 <uart_cb+0x5c>
		if (aborted_buf){
    c1c6:	4a51      	ldr	r2, [pc, #324]	; (c30c <uart_cb+0x160>)
    c1c8:	6813      	ldr	r3, [r2, #0]
    c1ca:	b1fb      	cbz	r3, c20c <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    c1cc:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    c1ce:	2300      	movs	r3, #0
    c1d0:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    c1d2:	4a4f      	ldr	r2, [pc, #316]	; (c310 <uart_cb+0x164>)
    c1d4:	6013      	str	r3, [r2, #0]
		k_free(buf);
    c1d6:	f025 fc01 	bl	319dc <k_free>
	return z_impl_k_queue_get(queue, timeout);
    c1da:	2200      	movs	r2, #0
    c1dc:	2300      	movs	r3, #0
    c1de:	484d      	ldr	r0, [pc, #308]	; (c314 <uart_cb+0x168>)
    c1e0:	f019 fd44 	bl	25c6c <z_impl_k_queue_get>
		if (!buf)
    c1e4:	b180      	cbz	r0, c208 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS))
    c1e6:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c1ea:	1d01      	adds	r1, r0, #4
    c1ec:	484a      	ldr	r0, [pc, #296]	; (c318 <uart_cb+0x16c>)
    c1ee:	f01d ff02 	bl	29ff6 <uart_tx.constprop.0>
    c1f2:	b148      	cbz	r0, c208 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    c1f4:	4b49      	ldr	r3, [pc, #292]	; (c31c <uart_cb+0x170>)
    c1f6:	2202      	movs	r2, #2
    c1f8:	9302      	str	r3, [sp, #8]
    c1fa:	2300      	movs	r3, #0
    c1fc:	4618      	mov	r0, r3
    c1fe:	e9cd 3300 	strd	r3, r3, [sp]
    c202:	4947      	ldr	r1, [pc, #284]	; (c320 <uart_cb+0x174>)
			LOG_WRN("Not able to allocate UART receive buffer");
    c204:	f01d fee0 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
}
    c208:	b004      	add	sp, #16
    c20a:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
    c20c:	3804      	subs	r0, #4
    c20e:	e7e2      	b.n	c1d6 <uart_cb+0x2a>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    c210:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    c212:	68cb      	ldr	r3, [r1, #12]
    c214:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
    c218:	4403      	add	r3, r0
		if (disable_req)
    c21a:	4842      	ldr	r0, [pc, #264]	; (c324 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
    c21c:	b29b      	uxth	r3, r3
    c21e:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		if (disable_req)
    c222:	7802      	ldrb	r2, [r0, #0]
    c224:	2a00      	cmp	r2, #0
    c226:	d1ef      	bne.n	c208 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    c228:	684a      	ldr	r2, [r1, #4]
    c22a:	4413      	add	r3, r2
    c22c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    c230:	2b0a      	cmp	r3, #10
    c232:	d001      	beq.n	c238 <uart_cb+0x8c>
    c234:	2b0d      	cmp	r3, #13
    c236:	d1e7      	bne.n	c208 <uart_cb+0x5c>
			disable_req = true;
    c238:	2301      	movs	r3, #1
    c23a:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    c23c:	4836      	ldr	r0, [pc, #216]	; (c318 <uart_cb+0x16c>)
    c23e:	6883      	ldr	r3, [r0, #8]
    c240:	695b      	ldr	r3, [r3, #20]
}
    c242:	b004      	add	sp, #16
    c244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c248:	4718      	bx	r3
		disable_req = false;
    c24a:	2400      	movs	r4, #0
    c24c:	4b35      	ldr	r3, [pc, #212]	; (c324 <uart_cb+0x178>)
		buf = k_malloc(sizeof(*buf));
    c24e:	206c      	movs	r0, #108	; 0x6c
		disable_req = false;
    c250:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    c252:	f025 fbca 	bl	319ea <k_malloc>
    c256:	4603      	mov	r3, r0
		if (buf)
    c258:	b140      	cbz	r0, c26c <uart_cb+0xc0>
			buf->len = 0;
    c25a:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    c25e:	1d01      	adds	r1, r0, #4
    c260:	482d      	ldr	r0, [pc, #180]	; (c318 <uart_cb+0x16c>)
}
    c262:	b004      	add	sp, #16
    c264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    c268:	f01d bebd 	b.w	29fe6 <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    c26c:	4a2e      	ldr	r2, [pc, #184]	; (c328 <uart_cb+0x17c>)
    c26e:	9000      	str	r0, [sp, #0]
    c270:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c274:	492a      	ldr	r1, [pc, #168]	; (c320 <uart_cb+0x174>)
    c276:	2202      	movs	r2, #2
    c278:	f01d fea6 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    c27c:	f240 6267 	movw	r2, #1639	; 0x667
    c280:	2300      	movs	r3, #0
    c282:	482a      	ldr	r0, [pc, #168]	; (c32c <uart_cb+0x180>)
}
    c284:	b004      	add	sp, #16
    c286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    c28a:	f019 bf79 	b.w	26180 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    c28e:	206c      	movs	r0, #108	; 0x6c
    c290:	f025 fbab 	bl	319ea <k_malloc>
    c294:	4603      	mov	r3, r0
		if (buf)
    c296:	b160      	cbz	r0, c2b2 <uart_cb+0x106>
			buf->len = 0;
    c298:	2200      	movs	r2, #0
    c29a:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
	return api->rx_buf_rsp(dev, buf, len);
    c29e:	481e      	ldr	r0, [pc, #120]	; (c318 <uart_cb+0x16c>)
    c2a0:	1d19      	adds	r1, r3, #4
    c2a2:	6882      	ldr	r2, [r0, #8]
    c2a4:	6914      	ldr	r4, [r2, #16]
    c2a6:	2264      	movs	r2, #100	; 0x64
    c2a8:	4623      	mov	r3, r4
}
    c2aa:	b004      	add	sp, #16
    c2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2b0:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    c2b2:	4a1d      	ldr	r2, [pc, #116]	; (c328 <uart_cb+0x17c>)
    c2b4:	491a      	ldr	r1, [pc, #104]	; (c320 <uart_cb+0x174>)
    c2b6:	e9cd 0201 	strd	r0, r2, [sp, #4]
    c2ba:	9000      	str	r0, [sp, #0]
    c2bc:	2202      	movs	r2, #2
    c2be:	e7a1      	b.n	c204 <uart_cb+0x58>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    c2c0:	684b      	ldr	r3, [r1, #4]
    c2c2:	1f19      	subs	r1, r3, #4
		if (buf->len > 0)
    c2c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
    c2c8:	b12b      	cbz	r3, c2d6 <uart_cb+0x12a>
			k_fifo_put(&fifo_uart_rx_data, buf);
    c2ca:	4819      	ldr	r0, [pc, #100]	; (c330 <uart_cb+0x184>)
}
    c2cc:	b004      	add	sp, #16
    c2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    c2d2:	f024 bf42 	b.w	3115a <k_queue_append>
			k_free(buf);
    c2d6:	4608      	mov	r0, r1
}
    c2d8:	b004      	add	sp, #16
    c2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    c2de:	f025 bb7d 	b.w	319dc <k_free>
		if (!aborted_buf)
    c2e2:	4a0a      	ldr	r2, [pc, #40]	; (c30c <uart_cb+0x160>)
    c2e4:	6813      	ldr	r3, [r2, #0]
    c2e6:	b90b      	cbnz	r3, c2ec <uart_cb+0x140>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    c2e8:	684b      	ldr	r3, [r1, #4]
    c2ea:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    c2ec:	4808      	ldr	r0, [pc, #32]	; (c310 <uart_cb+0x164>)
    c2ee:	688b      	ldr	r3, [r1, #8]
    c2f0:	6801      	ldr	r1, [r0, #0]
    c2f2:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
    c2f4:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    c2f6:	6003      	str	r3, [r0, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c2f8:	f8b1 2064 	ldrh.w	r2, [r1, #100]	; 0x64
    c2fc:	4806      	ldr	r0, [pc, #24]	; (c318 <uart_cb+0x16c>)
    c2fe:	1ad2      	subs	r2, r2, r3
    c300:	4419      	add	r1, r3
}
    c302:	b004      	add	sp, #16
    c304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    c308:	f01d be75 	b.w	29ff6 <uart_tx.constprop.0>
    c30c:	2000a6a4 	.word	0x2000a6a4
    c310:	2000a6a0 	.word	0x2000a6a0
    c314:	20008eb8 	.word	0x20008eb8
    c318:	00032b8c 	.word	0x00032b8c
    c31c:	0003490b 	.word	0x0003490b
    c320:	000332fc 	.word	0x000332fc
    c324:	200311bc 	.word	0x200311bc
    c328:	00034929 	.word	0x00034929
    c32c:	20009998 	.word	0x20009998
    c330:	20008ea0 	.word	0x20008ea0

0000c334 <gnss_write_thread>:
{
    c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c338:	b085      	sub	sp, #20
	uint64_t time = k_uptime_get();
    c33a:	f01d fe37 	bl	29fac <k_uptime_get>
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c33e:	4b76      	ldr	r3, [pc, #472]	; (c518 <gnss_write_thread+0x1e4>)
    c340:	4f76      	ldr	r7, [pc, #472]	; (c51c <gnss_write_thread+0x1e8>)
    c342:	889a      	ldrh	r2, [r3, #4]
    c344:	6818      	ldr	r0, [r3, #0]
    c346:	799b      	ldrb	r3, [r3, #6]
    c348:	f8ad 2008 	strh.w	r2, [sp, #8]
    c34c:	f88d 300a 	strb.w	r3, [sp, #10]
    c350:	2300      	movs	r3, #0
    c352:	f8ad 300b 	strh.w	r3, [sp, #11]
    c356:	f88d 300d 	strb.w	r3, [sp, #13]
    char marker[2]="\n";
    c35a:	230a      	movs	r3, #10
    c35c:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
    c360:	f8ad 3000 	strh.w	r3, [sp]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c364:	2220      	movs	r2, #32
    char marker[2]="\n";
    c366:	463b      	mov	r3, r7
    const char nmea_id[10] = "$GPRMC"; //capture this sentence
    c368:	9001      	str	r0, [sp, #4]
	while (i < BUFF_SIZE)buffer[i++] = 0x20;//space
    c36a:	3c01      	subs	r4, #1
    c36c:	f803 2b01 	strb.w	r2, [r3], #1
    c370:	d1fb      	bne.n	c36a <gnss_write_thread+0x36>
	buf2a = k_malloc(sizeof(*buf2a));
    c372:	206c      	movs	r0, #108	; 0x6c
    c374:	f025 fb39 	bl	319ea <k_malloc>
	k_sem_take(&gps_init,K_FOREVER); 
    c378:	f04f 32ff 	mov.w	r2, #4294967295
    c37c:	f04f 33ff 	mov.w	r3, #4294967295
    c380:	4867      	ldr	r0, [pc, #412]	; (c520 <gnss_write_thread+0x1ec>)
    c382:	f01d fe40 	bl	2a006 <k_sem_take.constprop.0.isra.0>
	uint32_t i = 0, j = 1, k = 0, h = 0, g = 0, index = 0, bfcnt = 0;
    c386:	46a1      	mov	r9, r4
	uint8_t state = 0, pkt_init = 0;
    c388:	4626      	mov	r6, r4
    c38a:	4625      	mov	r5, r4
    c38c:	f8df 8194 	ldr.w	r8, [pc, #404]	; c524 <gnss_write_thread+0x1f0>
   				ret = strstr(buffer, nmea_id);
    c390:	f8df a188 	ldr.w	sl, [pc, #392]	; c51c <gnss_write_thread+0x1e8>
    c394:	f04f 32ff 	mov.w	r2, #4294967295
    c398:	f04f 33ff 	mov.w	r3, #4294967295
    c39c:	4640      	mov	r0, r8
    c39e:	f019 fc65 	bl	25c6c <z_impl_k_queue_get>
    c3a2:	4683      	mov	fp, r0
	z_impl_k_queue_init(queue);
    c3a4:	4640      	mov	r0, r8
    c3a6:	f024 fecc 	bl	31142 <z_impl_k_queue_init>
		if (buf2a->len > 0)
    c3aa:	f8bb 1068 	ldrh.w	r1, [fp, #104]	; 0x68
    c3ae:	b1d9      	cbz	r1, c3e8 <gnss_write_thread+0xb4>
			k = (buf2a->len);
    c3b0:	4689      	mov	r9, r1
			while (i < k && pkt_init == 0)
    c3b2:	b9ce      	cbnz	r6, c3e8 <gnss_write_thread+0xb4>
			index = 0;
    c3b4:	4632      	mov	r2, r6
			i = 0;
    c3b6:	4630      	mov	r0, r6
    c3b8:	f10b 0c03 	add.w	ip, fp, #3
				switch (buf2a->data[i])
    c3bc:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    c3c0:	2b52      	cmp	r3, #82	; 0x52
    c3c2:	d806      	bhi.n	c3d2 <gnss_write_thread+0x9e>
    c3c4:	2b46      	cmp	r3, #70	; 0x46
    c3c6:	d85d      	bhi.n	c484 <gnss_write_thread+0x150>
    c3c8:	2b24      	cmp	r3, #36	; 0x24
    c3ca:	d07b      	beq.n	c4c4 <gnss_write_thread+0x190>
    c3cc:	2b43      	cmp	r3, #67	; 0x43
    c3ce:	f000 808e 	beq.w	c4ee <gnss_write_thread+0x1ba>
				i++;
    c3d2:	3001      	adds	r0, #1
			while (i < k && pkt_init == 0)
    c3d4:	4288      	cmp	r0, r1
    c3d6:	d3f1      	bcc.n	c3bc <gnss_write_thread+0x88>
			if (state == 6 && pkt_init == 0)
    c3d8:	2d06      	cmp	r5, #6
    c3da:	d105      	bne.n	c3e8 <gnss_write_thread+0xb4>
					if (buf2a->data[index]!=0x0D) {
    c3dc:	f10b 0b04 	add.w	fp, fp, #4
				while (index < k)
    c3e0:	428a      	cmp	r2, r1
    c3e2:	f0c0 8089 	bcc.w	c4f8 <gnss_write_thread+0x1c4>
				pkt_init=1;
    c3e6:	2601      	movs	r6, #1
	return z_impl_k_queue_get(queue, timeout);
    c3e8:	f04f 33ff 	mov.w	r3, #4294967295
    c3ec:	f04f 32ff 	mov.w	r2, #4294967295
    c3f0:	4640      	mov	r0, r8
    c3f2:	f019 fc3b 	bl	25c6c <z_impl_k_queue_get>
		if (buf2a->len > 0)
    c3f6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d0ca      	beq.n	c394 <gnss_write_thread+0x60>
			if ((pkt_init >= 1) && (bfcnt < BUFF_SIZE)  )
    c3fe:	b16e      	cbz	r6, c41c <gnss_write_thread+0xe8>
    c400:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c404:	d20d      	bcs.n	c422 <gnss_write_thread+0xee>
    c406:	f109 0203 	add.w	r2, r9, #3
    c40a:	1cc3      	adds	r3, r0, #3
    c40c:	4410      	add	r0, r2
				while ((index < k)  && (bfcnt < BUFF_SIZE))
    c40e:	4298      	cmp	r0, r3
    c410:	d002      	beq.n	c418 <gnss_write_thread+0xe4>
    c412:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
    c416:	d177      	bne.n	c508 <gnss_write_thread+0x1d4>
				pkt_init++;
    c418:	3601      	adds	r6, #1
    c41a:	b2f6      	uxtb	r6, r6
			if (bfcnt >= BUFF_SIZE - 1)
    c41c:	f5b4 7fef 	cmp.w	r4, #478	; 0x1de
    c420:	d9b8      	bls.n	c394 <gnss_write_thread+0x60>
   				ret = strstr(buffer, nmea_id);
    c422:	a901      	add	r1, sp, #4
    c424:	4650      	mov	r0, sl
   				i=parse_comma_delimited_str(token, field, 20);
    c426:	4c40      	ldr	r4, [pc, #256]	; (c528 <gnss_write_thread+0x1f4>)
   				ret = strstr(buffer, nmea_id);
    c428:	f025 fcbd 	bl	31da6 <strstr>
   				token = strtok(ret, marker);
    c42c:	4669      	mov	r1, sp
    c42e:	f01b fbc5 	bl	27bbc <strtok>
   				i=parse_comma_delimited_str(token, field, 20);
    c432:	2214      	movs	r2, #20
    c434:	4621      	mov	r1, r4
    c436:	f01d fe5e 	bl	2a0f6 <parse_comma_delimited_str>
				if (i==12){
    c43a:	280c      	cmp	r0, #12
    c43c:	d117      	bne.n	c46e <gnss_write_thread+0x13a>
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c43e:	68a3      	ldr	r3, [r4, #8]
    c440:	4d3a      	ldr	r5, [pc, #232]	; (c52c <gnss_write_thread+0x1f8>)
    c442:	781b      	ldrb	r3, [r3, #0]
    c444:	3b40      	subs	r3, #64	; 0x40
    c446:	b2db      	uxtb	r3, r3
				  if (position.gps_fixed==1){  
    c448:	2b01      	cmp	r3, #1
				  position.gps_fixed=*field[2]-0x40; //char A=0x41 - 0x40 = 1
    c44a:	732b      	strb	r3, [r5, #12]
				  if (position.gps_fixed==1){  
    c44c:	d10f      	bne.n	c46e <gnss_write_thread+0x13a>
				   position.latitude=atof(field[3]);
    c44e:	68e0      	ldr	r0, [r4, #12]
    c450:	f025 fad0 	bl	319f4 <atof>
    c454:	f7fc fa76 	bl	8944 <__aeabi_d2f>
    c458:	6068      	str	r0, [r5, #4]
				   position.longitude=atof(field[5]);
    c45a:	6960      	ldr	r0, [r4, #20]
    c45c:	f025 faca 	bl	319f4 <atof>
    c460:	f7fc fa70 	bl	8944 <__aeabi_d2f>
				   fill_date(field[1],field[9]);
    c464:	6a61      	ldr	r1, [r4, #36]	; 0x24
				   position.longitude=atof(field[5]);
    c466:	60a8      	str	r0, [r5, #8]
				   fill_date(field[1],field[9]);
    c468:	6860      	ldr	r0, [r4, #4]
    c46a:	f000 fde9 	bl	d040 <fill_date>
				pkt_init=1;
    c46e:	463b      	mov	r3, r7
    c470:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
				while (index < BUFF_SIZE)buffer[index++] = 0x20;//space
    c474:	2220      	movs	r2, #32
    c476:	3c01      	subs	r4, #1
    c478:	f803 2b01 	strb.w	r2, [r3], #1
    c47c:	d1fb      	bne.n	c476 <gnss_write_thread+0x142>
				pkt_init = 0;
    c47e:	4626      	mov	r6, r4
				state = 0;
    c480:	4625      	mov	r5, r4
    c482:	e787      	b.n	c394 <gnss_write_thread+0x60>
				switch (buf2a->data[i])
    c484:	3b47      	subs	r3, #71	; 0x47
    c486:	2b0b      	cmp	r3, #11
    c488:	d8a3      	bhi.n	c3d2 <gnss_write_thread+0x9e>
    c48a:	f20f 0e08 	addw	lr, pc, #8
    c48e:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    c492:	bf00      	nop
    c494:	0000c4cf 	.word	0x0000c4cf
    c498:	0000c3d3 	.word	0x0000c3d3
    c49c:	0000c3d3 	.word	0x0000c3d3
    c4a0:	0000c3d3 	.word	0x0000c3d3
    c4a4:	0000c3d3 	.word	0x0000c3d3
    c4a8:	0000c3d3 	.word	0x0000c3d3
    c4ac:	0000c4e7 	.word	0x0000c4e7
    c4b0:	0000c3d3 	.word	0x0000c3d3
    c4b4:	0000c3d3 	.word	0x0000c3d3
    c4b8:	0000c4d7 	.word	0x0000c4d7
    c4bc:	0000c3d3 	.word	0x0000c3d3
    c4c0:	0000c4df 	.word	0x0000c4df
					if (state == 0)state = 1;
    c4c4:	2d01      	cmp	r5, #1
    c4c6:	bf38      	it	cc
    c4c8:	2501      	movcc	r5, #1
    c4ca:	b2ed      	uxtb	r5, r5
    c4cc:	e781      	b.n	c3d2 <gnss_write_thread+0x9e>
					if (state == 1)state = 2;
    c4ce:	2d01      	cmp	r5, #1
    c4d0:	bf08      	it	eq
    c4d2:	2502      	moveq	r5, #2
    c4d4:	e77d      	b.n	c3d2 <gnss_write_thread+0x9e>
					if (state == 2)state = 3;
    c4d6:	2d02      	cmp	r5, #2
    c4d8:	bf08      	it	eq
    c4da:	2503      	moveq	r5, #3
    c4dc:	e779      	b.n	c3d2 <gnss_write_thread+0x9e>
					if (state == 3)state = 4;
    c4de:	2d03      	cmp	r5, #3
    c4e0:	bf08      	it	eq
    c4e2:	2504      	moveq	r5, #4
    c4e4:	e775      	b.n	c3d2 <gnss_write_thread+0x9e>
					if (state == 4)state = 5;
    c4e6:	2d04      	cmp	r5, #4
    c4e8:	bf08      	it	eq
    c4ea:	2505      	moveq	r5, #5
    c4ec:	e771      	b.n	c3d2 <gnss_write_thread+0x9e>
					if (state == 5){
    c4ee:	2d05      	cmp	r5, #5
						state = 6;
    c4f0:	bf04      	itt	eq
    c4f2:	2506      	moveq	r5, #6
					    index = i - 5;
    c4f4:	1f42      	subeq	r2, r0, #5
    c4f6:	e76c      	b.n	c3d2 <gnss_write_thread+0x9e>
					if (buf2a->data[index]!=0x0D) {
    c4f8:	f81b 3002 	ldrb.w	r3, [fp, r2]
					index++;
    c4fc:	3201      	adds	r2, #1
					if (buf2a->data[index]!=0x0D) {
    c4fe:	2b0d      	cmp	r3, #13
						buffer[bfcnt] = buf2a->data[index];
    c500:	bf1c      	itt	ne
    c502:	553b      	strbne	r3, [r7, r4]
						bfcnt++;
    c504:	3401      	addne	r4, #1
					index++;
    c506:	e76b      	b.n	c3e0 <gnss_write_thread+0xac>
					if (buf2a->data[index]!=0x0D) {
    c508:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c50c:	2a0d      	cmp	r2, #13
						buffer[bfcnt] = buf2a->data[index];
    c50e:	bf1c      	itt	ne
    c510:	553a      	strbne	r2, [r7, r4]
						bfcnt++;
    c512:	3401      	addne	r4, #1
					index++;
    c514:	e77b      	b.n	c40e <gnss_write_thread+0xda>
    c516:	bf00      	nop
    c518:	00033360 	.word	0x00033360
    c51c:	20030fdc 	.word	0x20030fdc
    c520:	20008d68 	.word	0x20008d68
    c524:	20008e88 	.word	0x20008e88
    c528:	2000a650 	.word	0x2000a650
    c52c:	2000a6dc 	.word	0x2000a6dc

0000c530 <ble_cmd_received_thread>:
{
    c530:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_sem_take(&cmd_init_ok, K_FOREVER);
    c532:	f04f 32ff 	mov.w	r2, #4294967295
    c536:	f04f 33ff 	mov.w	r3, #4294967295
    c53a:	4816      	ldr	r0, [pc, #88]	; (c594 <ble_cmd_received_thread+0x64>)
{
    c53c:	b0b5      	sub	sp, #212	; 0xd4
	k_sem_take(&cmd_init_ok, K_FOREVER);
    c53e:	f01d fd62 	bl	2a006 <k_sem_take.constprop.0.isra.0>
    printk("cmd interpreter init OK\n");
    c542:	4815      	ldr	r0, [pc, #84]	; (c598 <ble_cmd_received_thread+0x68>)
    c544:	f01d ff8a 	bl	2a45c <printk>
    c548:	4d14      	ldr	r5, [pc, #80]	; (c59c <ble_cmd_received_thread+0x6c>)
		printk("cmd received from ble OK\n");
    c54a:	4e15      	ldr	r6, [pc, #84]	; (c5a0 <ble_cmd_received_thread+0x70>)
         if (current_conn) bt_nus_send(NULL, buf_cmd.data, buf_cmd.len);
    c54c:	4f15      	ldr	r7, [pc, #84]	; (c5a4 <ble_cmd_received_thread+0x74>)
    c54e:	f04f 33ff 	mov.w	r3, #4294967295
    c552:	f04f 32ff 	mov.w	r2, #4294967295
    c556:	4628      	mov	r0, r5
    c558:	f019 fb88 	bl	25c6c <z_impl_k_queue_get>
    c55c:	4604      	mov	r4, r0
		printk("cmd received from ble OK\n");
    c55e:	4630      	mov	r0, r6
    c560:	f01d ff7c 	bl	2a45c <printk>
		buf_cmd=cmd_interpreter(buf->data,buf->len);
    c564:	4668      	mov	r0, sp
    c566:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    c56a:	1d21      	adds	r1, r4, #4
    c56c:	f001 fbd0 	bl	dd10 <cmd_interpreter>
    c570:	2266      	movs	r2, #102	; 0x66
    c572:	4669      	mov	r1, sp
    c574:	a81a      	add	r0, sp, #104	; 0x68
    c576:	f025 fa54 	bl	31a22 <memcpy>
		if (buf_cmd.len>0){
    c57a:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
    c57e:	2a00      	cmp	r2, #0
    c580:	d0e5      	beq.n	c54e <ble_cmd_received_thread+0x1e>
         if (current_conn) bt_nus_send(NULL, buf_cmd.data, buf_cmd.len);
    c582:	683b      	ldr	r3, [r7, #0]
    c584:	2b00      	cmp	r3, #0
    c586:	d0e2      	beq.n	c54e <ble_cmd_received_thread+0x1e>
    c588:	a91a      	add	r1, sp, #104	; 0x68
    c58a:	2000      	movs	r0, #0
    c58c:	f004 fd06 	bl	10f9c <bt_nus_send>
    c590:	e7dd      	b.n	c54e <ble_cmd_received_thread+0x1e>
    c592:	bf00      	nop
    c594:	20008d50 	.word	0x20008d50
    c598:	00034952 	.word	0x00034952
    c59c:	20008e70 	.word	0x20008e70
    c5a0:	0003496b 	.word	0x0003496b
    c5a4:	2000a6d4 	.word	0x2000a6d4

0000c5a8 <ble_write_thread>:
{
    c5a8:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    c5aa:	f04f 32ff 	mov.w	r2, #4294967295
    c5ae:	f04f 33ff 	mov.w	r3, #4294967295
    c5b2:	480d      	ldr	r0, [pc, #52]	; (c5e8 <ble_write_thread+0x40>)
    c5b4:	f01d fd27 	bl	2a006 <k_sem_take.constprop.0.isra.0>
    c5b8:	4d0c      	ldr	r5, [pc, #48]	; (c5ec <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    c5ba:	4e0d      	ldr	r6, [pc, #52]	; (c5f0 <ble_write_thread+0x48>)
    c5bc:	f04f 32ff 	mov.w	r2, #4294967295
    c5c0:	f04f 33ff 	mov.w	r3, #4294967295
    c5c4:	4628      	mov	r0, r5
    c5c6:	f019 fb51 	bl	25c6c <z_impl_k_queue_get>
    c5ca:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len))
    c5cc:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
    c5d0:	1d01      	adds	r1, r0, #4
    c5d2:	2000      	movs	r0, #0
    c5d4:	f004 fce2 	bl	10f9c <bt_nus_send>
    c5d8:	b110      	cbz	r0, c5e0 <ble_write_thread+0x38>
			printk("Falha aqui- Failed to send data over BLE connection");
    c5da:	4630      	mov	r0, r6
    c5dc:	f01d ff3e 	bl	2a45c <printk>
		k_free(buf);
    c5e0:	4620      	mov	r0, r4
    c5e2:	f025 f9fb 	bl	319dc <k_free>
	{
    c5e6:	e7e9      	b.n	c5bc <ble_write_thread+0x14>
    c5e8:	20008cf0 	.word	0x20008cf0
    c5ec:	20008ea0 	.word	0x20008ea0
    c5f0:	00034985 	.word	0x00034985

0000c5f4 <lorawan_thread>:
{
    c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lora_dev = DEVICE_DT_GET(DT_NODELABEL(lora0));
    c5f6:	4c4a      	ldr	r4, [pc, #296]	; (c720 <lorawan_thread+0x12c>)
    c5f8:	4b4a      	ldr	r3, [pc, #296]	; (c724 <lorawan_thread+0x130>)
    k_sem_take(&lorawan_init, K_FOREVER);  // WAIT FOR INIT
    c5fa:	f04f 32ff 	mov.w	r2, #4294967295
    lora_dev = DEVICE_DT_GET(DT_NODELABEL(lora0));
    c5fe:	6023      	str	r3, [r4, #0]
    k_sem_take(&lorawan_init, K_FOREVER);  // WAIT FOR INIT
    c600:	4849      	ldr	r0, [pc, #292]	; (c728 <lorawan_thread+0x134>)
    c602:	f04f 33ff 	mov.w	r3, #4294967295
    c606:	f01d fcfe 	bl	2a006 <k_sem_take.constprop.0.isra.0>
	color(10);
    c60a:	200a      	movs	r0, #10
    c60c:	f001 fac6 	bl	db9c <color>
    printk("LoraWan Thread Started\n\n");
    c610:	4846      	ldr	r0, [pc, #280]	; (c72c <lorawan_thread+0x138>)
    c612:	f01d ff23 	bl	2a45c <printk>
    color(255);
    c616:	20ff      	movs	r0, #255	; 0xff
    c618:	f001 fac0 	bl	db9c <color>
	if (!device_is_ready(lora_dev)) {
    c61c:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    c61e:	f024 fc2c 	bl	30e7a <z_device_is_ready>
    c622:	b930      	cbnz	r0, c632 <lorawan_thread+0x3e>
		printk("%s: device not ready.\n\n", lora_dev->name);
    c624:	6823      	ldr	r3, [r4, #0]
    c626:	4842      	ldr	r0, [pc, #264]	; (c730 <lorawan_thread+0x13c>)
    c628:	6819      	ldr	r1, [r3, #0]
}
    c62a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("%s: device not ready.\n\n", lora_dev->name);
    c62e:	f01d bf15 	b.w	2a45c <printk>
    lorawan_set_region(LORAWAN_REGION_EU868);
    c632:	2005      	movs	r0, #5
    c634:	f005 fed2 	bl	123dc <lorawan_set_region>
	lorawan_register_downlink_callback(&downlink_cb);
    c638:	483e      	ldr	r0, [pc, #248]	; (c734 <lorawan_thread+0x140>)
    c63a:	f006 f887 	bl	1274c <lorawan_register_downlink_callback>
	lorawan_register_dr_changed_callback(lorwan_datarate_changed);
    c63e:	483e      	ldr	r0, [pc, #248]	; (c738 <lorawan_thread+0x144>)
    c640:	f006 f894 	bl	1276c <lorawan_register_dr_changed_callback>
	lorawan_set_conf_msg_tries(10);
    c644:	200a      	movs	r0, #10
    c646:	f01f faee 	bl	2bc26 <lorawan_set_conf_msg_tries>
   	        printk("Joining network over OTAA\n\n");
    c64a:	4e3c      	ldr	r6, [pc, #240]	; (c73c <lorawan_thread+0x148>)
	  Initial_Setup.joined=ON;
    c64c:	4d3c      	ldr	r5, [pc, #240]	; (c740 <lorawan_thread+0x14c>)
			join_cfg.mode = LORAWAN_CLASS_A; //was A
    c64e:	4c3d      	ldr	r4, [pc, #244]	; (c744 <lorawan_thread+0x150>)
			join_cfg.dev_eui = dev_eui;
    c650:	4f3d      	ldr	r7, [pc, #244]	; (c748 <lorawan_thread+0x154>)
    	    color(10);
    c652:	200a      	movs	r0, #10
    c654:	f001 faa2 	bl	db9c <color>
   	        printk("Joining network over OTAA\n\n");
    c658:	4630      	mov	r0, r6
    c65a:	f01d feff 	bl	2a45c <printk>
			color(255);
    c65e:	20ff      	movs	r0, #255	; 0xff
    c660:	f001 fa9c 	bl	db9c <color>
            k_sleep(K_MSEC(1000));
    c664:	2100      	movs	r1, #0
    c666:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c66a:	f01d fd13 	bl	2a094 <k_sleep.isra.0>
            lorawan_start();
    c66e:	f006 f883 	bl	12778 <lorawan_start>
			k_sleep(K_MSEC(500));//500ms
    c672:	2100      	movs	r1, #0
    c674:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c678:	f01d fd0c 	bl	2a094 <k_sleep.isra.0>
		    lorawan_enable_adr( true );
    c67c:	2001      	movs	r0, #1
    c67e:	f005 ffd7 	bl	12630 <lorawan_enable_adr>
			join_cfg.mode = LORAWAN_CLASS_A; //was A
    c682:	2300      	movs	r3, #0
    c684:	7523      	strb	r3, [r4, #20]
			join_cfg.otaa.join_eui = join_eui;
    c686:	4b31      	ldr	r3, [pc, #196]	; (c74c <lorawan_thread+0x158>)
			join_cfg.dev_eui = dev_eui;
    c688:	6127      	str	r7, [r4, #16]
			join_cfg.otaa.join_eui = join_eui;
    c68a:	6023      	str	r3, [r4, #0]
			join_cfg.otaa.app_key = app_key;
    c68c:	4b30      	ldr	r3, [pc, #192]	; (c750 <lorawan_thread+0x15c>)
			join_cfg.otaa.nwk_key = app_key;
    c68e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
    c692:	f014 f903 	bl	2089c <z_impl_sys_rand32_get>
     		dev_nonce = random & 0x0000FFFF;
    c696:	b280      	uxth	r0, r0
			join_cfg.otaa.dev_nonce = dev_nonce;
    c698:	60e0      	str	r0, [r4, #12]
		    ret = lorawan_join(&join_cfg);
    c69a:	482a      	ldr	r0, [pc, #168]	; (c744 <lorawan_thread+0x150>)
    c69c:	f005 fece 	bl	1243c <lorawan_join>
			 if (ret<0){
    c6a0:	2800      	cmp	r0, #0
				 color(10);
    c6a2:	f04f 000a 	mov.w	r0, #10
			 if (ret<0){
    c6a6:	db2c      	blt.n	c702 <lorawan_thread+0x10e>
	  color(10);
    c6a8:	f001 fa78 	bl	db9c <color>
	  printk("Joined OTAA\n\n");
    c6ac:	4829      	ldr	r0, [pc, #164]	; (c754 <lorawan_thread+0x160>)
    c6ae:	f01d fed5 	bl	2a45c <printk>
	  color(255);
    c6b2:	20ff      	movs	r0, #255	; 0xff
    c6b4:	f001 fa72 	bl	db9c <color>
	  Initial_Setup.joined=ON;
    c6b8:	2301      	movs	r3, #1
    c6ba:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
      for(int i=0;i<=15;i++){Initial_Setup.nwk_key[i]=join_cfg.otaa.nwk_key[i];}
    c6be:	6863      	ldr	r3, [r4, #4]
    c6c0:	4925      	ldr	r1, [pc, #148]	; (c758 <lorawan_thread+0x164>)
    c6c2:	1e5a      	subs	r2, r3, #1
    c6c4:	330f      	adds	r3, #15
    c6c6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    c6ca:	429a      	cmp	r2, r3
    c6cc:	f801 0f01 	strb.w	r0, [r1, #1]!
    c6d0:	d1f9      	bne.n	c6c6 <lorawan_thread+0xd2>
      Initial_Setup.dev_nonce=join_cfg.otaa.dev_nonce;
    c6d2:	68e3      	ldr	r3, [r4, #12]
	  lorawan_reconnect=0;
    c6d4:	4c21      	ldr	r4, [pc, #132]	; (c75c <lorawan_thread+0x168>)
      Initial_Setup.dev_nonce=join_cfg.otaa.dev_nonce;
    c6d6:	646b      	str	r3, [r5, #68]	; 0x44
      flash_write_setup();
    c6d8:	f000 fc9e 	bl	d018 <flash_write_setup>
	  flash_read_setup();
    c6dc:	f000 fca6 	bl	d02c <flash_read_setup>
	  print_setup();
    c6e0:	f001 f9de 	bl	daa0 <print_setup>
	  lorawan_reconnect=0;
    c6e4:	2300      	movs	r3, #0
    c6e6:	7023      	strb	r3, [r4, #0]
      while (!lorawan_reconnect) {
    c6e8:	7823      	ldrb	r3, [r4, #0]
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d1af      	bne.n	c64e <lorawan_thread+0x5a>
		  k_sem_take(&lorawan_tx, K_FOREVER);
    c6ee:	f04f 32ff 	mov.w	r2, #4294967295
    c6f2:	f04f 33ff 	mov.w	r3, #4294967295
    c6f6:	481a      	ldr	r0, [pc, #104]	; (c760 <lorawan_thread+0x16c>)
    c6f8:	f01d fc85 	bl	2a006 <k_sem_take.constprop.0.isra.0>
		  lorawan_tx_data();
    c6fc:	f001 f88a 	bl	d814 <lorawan_tx_data>
    c700:	e7f2      	b.n	c6e8 <lorawan_thread+0xf4>
				 color(10);
    c702:	f001 fa4b 	bl	db9c <color>
				 printk("Failed..Waiting some seconds to try join again\n\n");
    c706:	4817      	ldr	r0, [pc, #92]	; (c764 <lorawan_thread+0x170>)
    c708:	f01d fea8 	bl	2a45c <printk>
				 color(255);
    c70c:	20ff      	movs	r0, #255	; 0xff
    c70e:	f001 fa45 	bl	db9c <color>
			     k_sleep(K_MSEC(53000));
    c712:	f44f 10d4 	mov.w	r0, #1736704	; 0x1a8000
    c716:	2100      	movs	r1, #0
    c718:	f01d fcbc 	bl	2a094 <k_sleep.isra.0>
   	 while ( ret < 0 ) {
    c71c:	e799      	b.n	c652 <lorawan_thread+0x5e>
    c71e:	bf00      	nop
    c720:	2000a6c0 	.word	0x2000a6c0
    c724:	00032c34 	.word	0x00032c34
    c728:	20008d98 	.word	0x20008d98
    c72c:	000349b9 	.word	0x000349b9
    c730:	000349d2 	.word	0x000349d2
    c734:	20008434 	.word	0x20008434
    c738:	0000b6f5 	.word	0x0000b6f5
    c73c:	000349ea 	.word	0x000349ea
    c740:	2000b094 	.word	0x2000b094
    c744:	2000a6a8 	.word	0x2000a6a8
    c748:	20008aa8 	.word	0x20008aa8
    c74c:	20008aa0 	.word	0x20008aa0
    c750:	20008a90 	.word	0x20008a90
    c754:	00034a06 	.word	0x00034a06
    c758:	2000b0c5 	.word	0x2000b0c5
    c75c:	200311d0 	.word	0x200311d0
    c760:	20008dc8 	.word	0x20008dc8
    c764:	00034a14 	.word	0x00034a14

0000c768 <flash_init>:
{
    c768:	b538      	push	{r3, r4, r5, lr}
    color(10);
    c76a:	200a      	movs	r0, #10
    c76c:	f001 fa16 	bl	db9c <color>
	fs.flash_device = NVS_PARTITION_DEVICE;
    c770:	4c3c      	ldr	r4, [pc, #240]	; (c864 <flash_init+0xfc>)
    c772:	483d      	ldr	r0, [pc, #244]	; (c868 <flash_init+0x100>)
    c774:	62a0      	str	r0, [r4, #40]	; 0x28
    c776:	f024 fb80 	bl	30e7a <z_device_is_ready>
	if (!device_is_ready(fs.flash_device))
    c77a:	b930      	cbnz	r0, c78a <flash_init+0x22>
		printk("Flash device %s is not ready\n", fs.flash_device->name);
    c77c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c77e:	483b      	ldr	r0, [pc, #236]	; (c86c <flash_init+0x104>)
    c780:	6819      	ldr	r1, [r3, #0]
}
    c782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c786:	f01d be69 	b.w	2a45c <printk>
	fs.offset = NVS_PARTITION_OFFSET;
    c78a:	2100      	movs	r1, #0
	rc = flash_get_page_info_by_offs(fs.flash_device, fs.offset, &info);
    c78c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	fs.offset = NVS_PARTITION_OFFSET;
    c78e:	6021      	str	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    c790:	4d37      	ldr	r5, [pc, #220]	; (c870 <flash_init+0x108>)
    c792:	462a      	mov	r2, r5
    c794:	f023 f9c4 	bl	2fb20 <z_impl_flash_get_page_info_by_offs>
	if (rc)
    c798:	b120      	cbz	r0, c7a4 <flash_init+0x3c>
		printk("Unable to get page info\n");
    c79a:	4836      	ldr	r0, [pc, #216]	; (c874 <flash_init+0x10c>)
}
    c79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Flash Init failed\n");
    c7a0:	f01d be5c 	b.w	2a45c <printk>
	fs.sector_size = info.size;
    c7a4:	686b      	ldr	r3, [r5, #4]
	rc = nvs_mount(&fs);
    c7a6:	4620      	mov	r0, r4
	fs.sector_size = info.size;
    c7a8:	81a3      	strh	r3, [r4, #12]
	fs.sector_count = 2048U; // NUMBER OF SECTORS total 0X800000 BYTES
    c7aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c7ae:	81e3      	strh	r3, [r4, #14]
	rc = nvs_mount(&fs);
    c7b0:	f003 fbac 	bl	ff0c <nvs_mount>
	if (rc)
    c7b4:	b108      	cbz	r0, c7ba <flash_init+0x52>
		printk("Flash Init failed\n");
    c7b6:	4830      	ldr	r0, [pc, #192]	; (c878 <flash_init+0x110>)
    c7b8:	e7f0      	b.n	c79c <flash_init+0x34>
	rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    c7ba:	4d30      	ldr	r5, [pc, #192]	; (c87c <flash_init+0x114>)
    c7bc:	2304      	movs	r3, #4
    c7be:	462a      	mov	r2, r5
    c7c0:	2101      	movs	r1, #1
    c7c2:	4620      	mov	r0, r4
    c7c4:	f01e fb66 	bl	2ae94 <nvs_read>
	if (rc > 0)
    c7c8:	2800      	cmp	r0, #0
    c7ca:	dd2c      	ble.n	c826 <flash_init+0xbe>
		printk("Id: %d, button2_counter: %d\n",
    c7cc:	2101      	movs	r1, #1
    c7ce:	682a      	ldr	r2, [r5, #0]
    c7d0:	482b      	ldr	r0, [pc, #172]	; (c880 <flash_init+0x118>)
    c7d2:	f01d fe43 	bl	2a45c <printk>
	rc = nvs_read(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c7d6:	4c2b      	ldr	r4, [pc, #172]	; (c884 <flash_init+0x11c>)
    c7d8:	2304      	movs	r3, #4
    c7da:	4622      	mov	r2, r4
    c7dc:	2102      	movs	r1, #2
    c7de:	4821      	ldr	r0, [pc, #132]	; (c864 <flash_init+0xfc>)
    c7e0:	f01e fb58 	bl	2ae94 <nvs_read>
	if (rc > 0)
    c7e4:	2800      	cmp	r0, #0
    c7e6:	dd29      	ble.n	c83c <flash_init+0xd4>
		printk("Id: %d, Current Position: %d\n",
    c7e8:	6822      	ldr	r2, [r4, #0]
    c7ea:	2102      	movs	r1, #2
    c7ec:	4826      	ldr	r0, [pc, #152]	; (c888 <flash_init+0x120>)
    c7ee:	f01d fe35 	bl	2a45c <printk>
		if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS)
    c7f2:	4b26      	ldr	r3, [pc, #152]	; (c88c <flash_init+0x124>)
    c7f4:	681a      	ldr	r2, [r3, #0]
    c7f6:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
			C_Buffer_Free_Position = C_Buffer_Current_Position + 1;
    c7fa:	bf3e      	ittt	cc
    c7fc:	6822      	ldrcc	r2, [r4, #0]
    c7fe:	3201      	addcc	r2, #1
    c800:	601a      	strcc	r2, [r3, #0]
		if (C_Buffer_Free_Position == CIRCULAR_BUFFER_ELEMENTS)
    c802:	681a      	ldr	r2, [r3, #0]
    c804:	f5b2 6fb4 	cmp.w	r2, #1440	; 0x5a0
    c808:	d101      	bne.n	c80e <flash_init+0xa6>
			C_Buffer_Free_Position = 0;
    c80a:	2200      	movs	r2, #0
    c80c:	601a      	str	r2, [r3, #0]
	rc = nvs_read(&fs, SETUP_POSITION, &Initial_Setup, sizeof(Initial_Setup));
    c80e:	2103      	movs	r1, #3
    c810:	234c      	movs	r3, #76	; 0x4c
    c812:	4a1f      	ldr	r2, [pc, #124]	; (c890 <flash_init+0x128>)
    c814:	4813      	ldr	r0, [pc, #76]	; (c864 <flash_init+0xfc>)
    c816:	f01e fb3d 	bl	2ae94 <nvs_read>
	if (rc > 0)
    c81a:	2800      	cmp	r0, #0
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c81c:	f04f 0103 	mov.w	r1, #3
	if (rc > 0)
    c820:	dd17      	ble.n	c852 <flash_init+0xea>
		printk("Id: %d, Setup OK\n",SETUP_POSITION);
    c822:	481c      	ldr	r0, [pc, #112]	; (c894 <flash_init+0x12c>)
    c824:	e7ad      	b.n	c782 <flash_init+0x1a>
		printk("No Reboot counter found, adding it at id %d\n",
    c826:	2101      	movs	r1, #1
    c828:	481b      	ldr	r0, [pc, #108]	; (c898 <flash_init+0x130>)
    c82a:	f01d fe17 	bl	2a45c <printk>
		(void)nvs_write(&fs, BOOT_POSITION, &button2_counter,
    c82e:	2304      	movs	r3, #4
    c830:	462a      	mov	r2, r5
    c832:	2101      	movs	r1, #1
    c834:	4620      	mov	r0, r4
    c836:	f003 fd3b 	bl	102b0 <nvs_write>
    c83a:	e7cc      	b.n	c7d6 <flash_init+0x6e>
		printk("Current Position counter found, adding it at id %d\n",
    c83c:	2102      	movs	r1, #2
    c83e:	4817      	ldr	r0, [pc, #92]	; (c89c <flash_init+0x134>)
    c840:	f01d fe0c 	bl	2a45c <printk>
		(void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position, sizeof(C_Buffer_Current_Position));
    c844:	2304      	movs	r3, #4
    c846:	4622      	mov	r2, r4
    c848:	2102      	movs	r1, #2
    c84a:	4806      	ldr	r0, [pc, #24]	; (c864 <flash_init+0xfc>)
    c84c:	f003 fd30 	bl	102b0 <nvs_write>
    c850:	e7dd      	b.n	c80e <flash_init+0xa6>
		printk("No initial Setup found, adding it on position=%d\n",SETUP_POSITION);
    c852:	4813      	ldr	r0, [pc, #76]	; (c8a0 <flash_init+0x138>)
    c854:	f01d fe02 	bl	2a45c <printk>
		setup_initialize();
    c858:	f001 f8c2 	bl	d9e0 <setup_initialize>
}
    c85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		flash_write_setup();
    c860:	f000 bbda 	b.w	d018 <flash_write_setup>
    c864:	2000a720 	.word	0x2000a720
    c868:	00032c1c 	.word	0x00032c1c
    c86c:	00034a45 	.word	0x00034a45
    c870:	2000a714 	.word	0x2000a714
    c874:	00034a63 	.word	0x00034a63
    c878:	00034a7c 	.word	0x00034a7c
    c87c:	2000a710 	.word	0x2000a710
    c880:	00034a8f 	.word	0x00034a8f
    c884:	2002f9e0 	.word	0x2002f9e0
    c888:	00034ad9 	.word	0x00034ad9
    c88c:	2002f9e4 	.word	0x2002f9e4
    c890:	2000b094 	.word	0x2000b094
    c894:	00034b2b 	.word	0x00034b2b
    c898:	00034aac 	.word	0x00034aac
    c89c:	00034af7 	.word	0x00034af7
    c8a0:	00034b3d 	.word	0x00034b3d

0000c8a4 <send_bluetooth>:
{
    c8a4:	b084      	sub	sp, #16
    c8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8aa:	ac06      	add	r4, sp, #24
    c8ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c8b0:	203d      	movs	r0, #61	; 0x3d
	uint32_t comprimento = buf.len;
    c8b2:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c8b6:	f025 f898 	bl	319ea <k_malloc>
	int k = 0;
    c8ba:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    c8bc:	4605      	mov	r5, r0
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c8be:	f8df 8054 	ldr.w	r8, [pc, #84]	; c914 <send_bluetooth+0x70>
	while (k < comprimento - 1)
    c8c2:	1e77      	subs	r7, r6, #1
    c8c4:	42a7      	cmp	r7, r4
    c8c6:	d91d      	bls.n	c904 <send_bluetooth+0x60>
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c8c8:	42b4      	cmp	r4, r6
    c8ca:	d301      	bcc.n	c8d0 <send_bluetooth+0x2c>
    c8cc:	2200      	movs	r2, #0
    c8ce:	e00f      	b.n	c8f0 <send_bluetooth+0x4c>
    c8d0:	2200      	movs	r2, #0
    c8d2:	1e6b      	subs	r3, r5, #1
			data[small_pkt] = buf.data[k];
    c8d4:	f104 0118 	add.w	r1, r4, #24
    c8d8:	4469      	add	r1, sp
			small_pkt++;
    c8da:	3201      	adds	r2, #1
			*(packet_data + small_pkt) = buf.data[k];
    c8dc:	7909      	ldrb	r1, [r1, #4]
			small_pkt++;
    c8de:	b292      	uxth	r2, r2
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c8e0:	2a3d      	cmp	r2, #61	; 0x3d
			*(packet_data + small_pkt) = buf.data[k];
    c8e2:	f803 1f01 	strb.w	r1, [r3, #1]!
			k++;
    c8e6:	f104 0401 	add.w	r4, r4, #1
		while (small_pkt < BLE_NUS_MAX_DATA_LEN && k < comprimento)
    c8ea:	d001      	beq.n	c8f0 <send_bluetooth+0x4c>
    c8ec:	42a6      	cmp	r6, r4
    c8ee:	d8f1      	bhi.n	c8d4 <send_bluetooth+0x30>
		if (bt_nus_send(NULL, packet_data, small_pkt))
    c8f0:	4629      	mov	r1, r5
    c8f2:	2000      	movs	r0, #0
    c8f4:	f004 fb52 	bl	10f9c <bt_nus_send>
    c8f8:	2800      	cmp	r0, #0
    c8fa:	d0e3      	beq.n	c8c4 <send_bluetooth+0x20>
			printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    c8fc:	4640      	mov	r0, r8
    c8fe:	f01d fdad 	bl	2a45c <printk>
    c902:	e7df      	b.n	c8c4 <send_bluetooth+0x20>
	k_free(packet_data);
    c904:	4628      	mov	r0, r5
    c906:	f025 f869 	bl	319dc <k_free>
}
    c90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c90e:	2000      	movs	r0, #0
    c910:	b004      	add	sp, #16
    c912:	4770      	bx	lr
    c914:	00034b6f 	.word	0x00034b6f

0000c918 <send_protobuf_thread>:
{
    c918:	b510      	push	{r4, lr}
		k_sem_take(&send_proto, K_FOREVER);
    c91a:	4c05      	ldr	r4, [pc, #20]	; (c930 <send_protobuf_thread+0x18>)
    c91c:	f04f 32ff 	mov.w	r2, #4294967295
    c920:	f04f 33ff 	mov.w	r3, #4294967295
    c924:	4620      	mov	r0, r4
    c926:	f01d fb6e 	bl	2a006 <k_sem_take.constprop.0.isra.0>
		send_protobuf();
    c92a:	f01d fbc5 	bl	2a0b8 <send_protobuf>
	while (1)
    c92e:	e7f5      	b.n	c91c <send_protobuf_thread+0x4>
    c930:	20008e40 	.word	0x20008e40

0000c934 <configure_all_buttons>:
{
    c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c936:	4c36      	ldr	r4, [pc, #216]	; (ca10 <configure_all_buttons+0xdc>)
	color(14);
    c938:	200e      	movs	r0, #14
    c93a:	f001 f92f 	bl	db9c <color>
	gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    c93e:	4620      	mov	r0, r4
    c940:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c944:	f01d fb7b 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c948:	4620      	mov	r0, r4
    c94a:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c94e:	f01d fb8b 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    c952:	4930      	ldr	r1, [pc, #192]	; (ca14 <configure_all_buttons+0xe0>)
    c954:	4b30      	ldr	r3, [pc, #192]	; (ca18 <configure_all_buttons+0xe4>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c956:	4c31      	ldr	r4, [pc, #196]	; (ca1c <configure_all_buttons+0xe8>)
    c958:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c95a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    c95e:	4620      	mov	r0, r4
    c960:	608b      	str	r3, [r1, #8]
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c962:	4d2f      	ldr	r5, [pc, #188]	; (ca20 <configure_all_buttons+0xec>)
	gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    c964:	f01d fb51 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c968:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c96a:	4f2e      	ldr	r7, [pc, #184]	; (ca24 <configure_all_buttons+0xf0>)
	printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    c96c:	2217      	movs	r2, #23
    c96e:	4631      	mov	r1, r6
    c970:	4628      	mov	r0, r5
    c972:	f01d fd73 	bl	2a45c <printk>
	gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    c976:	4638      	mov	r0, r7
    c978:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c97c:	f01d fb5f 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c980:	4638      	mov	r0, r7
    c982:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c986:	f01d fb6f 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c98a:	4927      	ldr	r1, [pc, #156]	; (ca28 <configure_all_buttons+0xf4>)
    c98c:	4b27      	ldr	r3, [pc, #156]	; (ca2c <configure_all_buttons+0xf8>)
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c98e:	4620      	mov	r0, r4
    c990:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c996:	4f26      	ldr	r7, [pc, #152]	; (ca30 <configure_all_buttons+0xfc>)
    c998:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    c99a:	f01d fb36 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    c99e:	2218      	movs	r2, #24
    c9a0:	4631      	mov	r1, r6
    c9a2:	4628      	mov	r0, r5
    c9a4:	f01d fd5a 	bl	2a45c <printk>
	gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    c9a8:	4638      	mov	r0, r7
    c9aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c9ae:	f01d fb46 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON3_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c9b2:	4638      	mov	r0, r7
    c9b4:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c9b8:	f01d fb56 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c9bc:	491d      	ldr	r1, [pc, #116]	; (ca34 <configure_all_buttons+0x100>)
    c9be:	4b1e      	ldr	r3, [pc, #120]	; (ca38 <configure_all_buttons+0x104>)
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c9c0:	4620      	mov	r0, r4
    c9c2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c9c4:	f44f 7380 	mov.w	r3, #256	; 0x100
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c9c8:	4f1c      	ldr	r7, [pc, #112]	; (ca3c <configure_all_buttons+0x108>)
    c9ca:	608b      	str	r3, [r1, #8]
	gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    c9cc:	f01d fb1d 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    c9d0:	2208      	movs	r2, #8
    c9d2:	4631      	mov	r1, r6
    c9d4:	4628      	mov	r0, r5
    c9d6:	f01d fd41 	bl	2a45c <printk>
	gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    c9da:	4638      	mov	r0, r7
    c9dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c9e0:	f01d fb2d 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	gpio_pin_interrupt_configure_dt(BUTTON4_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    c9e4:	4638      	mov	r0, r7
    c9e6:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    c9ea:	f01d fb3d 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    c9ee:	4914      	ldr	r1, [pc, #80]	; (ca40 <configure_all_buttons+0x10c>)
    c9f0:	4b14      	ldr	r3, [pc, #80]	; (ca44 <configure_all_buttons+0x110>)
	gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    c9f2:	4620      	mov	r0, r4
    c9f4:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    c9f6:	f44f 7300 	mov.w	r3, #512	; 0x200
    c9fa:	608b      	str	r3, [r1, #8]
    c9fc:	f01d fb05 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    ca00:	4631      	mov	r1, r6
    ca02:	4628      	mov	r0, r5
}
    ca04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    ca08:	2209      	movs	r2, #9
    ca0a:	f01d bd27 	b.w	2a45c <printk>
    ca0e:	bf00      	nop
    ca10:	0003364c 	.word	0x0003364c
    ca14:	2000a7bc 	.word	0x2000a7bc
    ca18:	0000bd69 	.word	0x0000bd69
    ca1c:	00032b2c 	.word	0x00032b2c
    ca20:	00034b93 	.word	0x00034b93
    ca24:	00033644 	.word	0x00033644
    ca28:	2000a7b0 	.word	0x2000a7b0
    ca2c:	0000bd3d 	.word	0x0000bd3d
    ca30:	0003363c 	.word	0x0003363c
    ca34:	2000a7a4 	.word	0x2000a7a4
    ca38:	0000b6b5 	.word	0x0000b6b5
    ca3c:	00033634 	.word	0x00033634
    ca40:	2000a798 	.word	0x2000a798
    ca44:	0000b6d5 	.word	0x0000b6d5

0000ca48 <configure_digital_inputs>:
{
    ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    ca4a:	4c48      	ldr	r4, [pc, #288]	; (cb6c <configure_digital_inputs+0x124>)
    color(14);
    ca4c:	200e      	movs	r0, #14
    ca4e:	f001 f8a5 	bl	db9c <color>
	gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT);
    ca52:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ca56:	4620      	mov	r0, r4
    ca58:	f01d faf1 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 4 Value:%d \n", gpio_pin_get_dt(DIG_0_ADR));
    ca5c:	4620      	mov	r0, r4
    ca5e:	f01d fa8e 	bl	29f7e <gpio_pin_get_dt>
    ca62:	4601      	mov	r1, r0
    ca64:	4842      	ldr	r0, [pc, #264]	; (cb70 <configure_digital_inputs+0x128>)
    ca66:	f01d fcf9 	bl	2a45c <printk>
	gpio_pin_interrupt_configure_dt(DIG_0_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    ca6a:	4620      	mov	r0, r4
    ca6c:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    ca70:	f01d fafa 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    ca74:	493f      	ldr	r1, [pc, #252]	; (cb74 <configure_digital_inputs+0x12c>)
    ca76:	4b40      	ldr	r3, [pc, #256]	; (cb78 <configure_digital_inputs+0x130>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    ca78:	4c40      	ldr	r4, [pc, #256]	; (cb7c <configure_digital_inputs+0x134>)
    ca7a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    ca7c:	2310      	movs	r3, #16
    ca7e:	4620      	mov	r0, r4
    ca80:	608b      	str	r3, [r1, #8]
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    ca82:	4d3f      	ldr	r5, [pc, #252]	; (cb80 <configure_digital_inputs+0x138>)
	gpio_add_callback(DIG_0.port, DIG_0_CB);
    ca84:	f01d fac1 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    ca88:	6826      	ldr	r6, [r4, #0]
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    ca8a:	4f3e      	ldr	r7, [pc, #248]	; (cb84 <configure_digital_inputs+0x13c>)
	printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    ca8c:	2204      	movs	r2, #4
    ca8e:	4631      	mov	r1, r6
    ca90:	4628      	mov	r0, r5
    ca92:	f01d fce3 	bl	2a45c <printk>
	gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    ca96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ca9a:	4638      	mov	r0, r7
    ca9c:	f01d facf 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 5 Value:%d \n", gpio_pin_get_dt(DIG_1_ADR));
    caa0:	4638      	mov	r0, r7
    caa2:	f01d fa6c 	bl	29f7e <gpio_pin_get_dt>
    caa6:	4601      	mov	r1, r0
    caa8:	4837      	ldr	r0, [pc, #220]	; (cb88 <configure_digital_inputs+0x140>)
    caaa:	f01d fcd7 	bl	2a45c <printk>
	gpio_pin_interrupt_configure_dt(DIG_1_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    caae:	4638      	mov	r0, r7
    cab0:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    cab4:	f01d fad8 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    cab8:	4934      	ldr	r1, [pc, #208]	; (cb8c <configure_digital_inputs+0x144>)
    caba:	4b35      	ldr	r3, [pc, #212]	; (cb90 <configure_digital_inputs+0x148>)
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    cabc:	4f35      	ldr	r7, [pc, #212]	; (cb94 <configure_digital_inputs+0x14c>)
    cabe:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    cac0:	2320      	movs	r3, #32
	gpio_add_callback(DIG_1.port, DIG_1_CB);
    cac2:	4620      	mov	r0, r4
    cac4:	608b      	str	r3, [r1, #8]
    cac6:	f01d faa0 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    caca:	2205      	movs	r2, #5
    cacc:	4631      	mov	r1, r6
    cace:	4628      	mov	r0, r5
    cad0:	f01d fcc4 	bl	2a45c <printk>
	gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    cad4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cad8:	4638      	mov	r0, r7
    cada:	f01d fab0 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 6 Value:%d \n", gpio_pin_get_dt(DIG_2_ADR));
    cade:	4638      	mov	r0, r7
    cae0:	f01d fa4d 	bl	29f7e <gpio_pin_get_dt>
    cae4:	4601      	mov	r1, r0
    cae6:	482c      	ldr	r0, [pc, #176]	; (cb98 <configure_digital_inputs+0x150>)
    cae8:	f01d fcb8 	bl	2a45c <printk>
	gpio_pin_interrupt_configure_dt(DIG_2_ADR, GPIO_INT_EDGE_TO_ACTIVE);
    caec:	4638      	mov	r0, r7
    caee:	f04f 61b8 	mov.w	r1, #96468992	; 0x5c00000
    caf2:	f01d fab9 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    caf6:	4929      	ldr	r1, [pc, #164]	; (cb9c <configure_digital_inputs+0x154>)
    caf8:	4b29      	ldr	r3, [pc, #164]	; (cba0 <configure_digital_inputs+0x158>)
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    cafa:	4620      	mov	r0, r4
    cafc:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    cafe:	2340      	movs	r3, #64	; 0x40
    gpio_pin_configure_dt(DIG_3_ADR, GPIO_INPUT);
    cb00:	4f28      	ldr	r7, [pc, #160]	; (cba4 <configure_digital_inputs+0x15c>)
    cb02:	608b      	str	r3, [r1, #8]
	gpio_add_callback(DIG_2.port, DIG_2_CB);
    cb04:	f01d fa81 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    cb08:	2206      	movs	r2, #6
    cb0a:	4631      	mov	r1, r6
    cb0c:	4628      	mov	r0, r5
    cb0e:	f01d fca5 	bl	2a45c <printk>
    gpio_pin_configure_dt(DIG_3_ADR, GPIO_INPUT);
    cb12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cb16:	4638      	mov	r0, r7
    cb18:	f01d fa91 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	printk("(Led4_Status)GPIO 0 Pin 27 Value:%d \n", gpio_pin_get_dt(DIG_3_ADR));
    cb1c:	4638      	mov	r0, r7
    cb1e:	f01d fa2e 	bl	29f7e <gpio_pin_get_dt>
	gpio_pin_configure_dt(DIG_4_ADR, GPIO_INPUT);
    cb22:	4f21      	ldr	r7, [pc, #132]	; (cba8 <configure_digital_inputs+0x160>)
	printk("(Led4_Status)GPIO 0 Pin 27 Value:%d \n", gpio_pin_get_dt(DIG_3_ADR));
    cb24:	4601      	mov	r1, r0
    cb26:	4821      	ldr	r0, [pc, #132]	; (cbac <configure_digital_inputs+0x164>)
    cb28:	f01d fc98 	bl	2a45c <printk>
	gpio_pin_configure_dt(DIG_4_ADR, GPIO_INPUT);
    cb2c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    cb30:	4638      	mov	r0, r7
    cb32:	f01d fa84 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	printk("GPIO 1 Pin 7 Value:%d \n", gpio_pin_get_dt(DIG_4_ADR));
    cb36:	4638      	mov	r0, r7
    cb38:	f01d fa21 	bl	29f7e <gpio_pin_get_dt>
    cb3c:	4601      	mov	r1, r0
    cb3e:	481c      	ldr	r0, [pc, #112]	; (cbb0 <configure_digital_inputs+0x168>)
    cb40:	f01d fc8c 	bl	2a45c <printk>
	gpio_pin_interrupt_configure_dt(DIG_4_ADR, GPIO_INT_LEVEL_ACTIVE);
    cb44:	4638      	mov	r0, r7
    cb46:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
    cb4a:	f01d fa8d 	bl	2a068 <gpio_pin_interrupt_configure_dt.isra.0>
	callback->handler = handler;
    cb4e:	4919      	ldr	r1, [pc, #100]	; (cbb4 <configure_digital_inputs+0x16c>)
    cb50:	4b19      	ldr	r3, [pc, #100]	; (cbb8 <configure_digital_inputs+0x170>)
	gpio_add_callback(DIG_4.port, DIG_4_CB);
    cb52:	4620      	mov	r0, r4
    cb54:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    cb56:	2380      	movs	r3, #128	; 0x80
    cb58:	608b      	str	r3, [r1, #8]
    cb5a:	f01d fa56 	bl	2a00a <gpio_add_callback.isra.0>
	printk("Set up Digital Input at %s pin %d\n", DIG_4.port->name, DIG_4.pin);
    cb5e:	4631      	mov	r1, r6
    cb60:	4628      	mov	r0, r5
}
    cb62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printk("Set up Digital Input at %s pin %d\n", DIG_4.port->name, DIG_4.pin);
    cb66:	2207      	movs	r2, #7
    cb68:	f01d bc78 	b.w	2a45c <printk>
    cb6c:	0003362c 	.word	0x0003362c
    cb70:	00034baf 	.word	0x00034baf
    cb74:	2000a78c 	.word	0x2000a78c
    cb78:	0000b679 	.word	0x0000b679
    cb7c:	00032b14 	.word	0x00032b14
    cb80:	00034bc7 	.word	0x00034bc7
    cb84:	00033624 	.word	0x00033624
    cb88:	00034bea 	.word	0x00034bea
    cb8c:	2000a780 	.word	0x2000a780
    cb90:	0000b68d 	.word	0x0000b68d
    cb94:	0003361c 	.word	0x0003361c
    cb98:	00034c02 	.word	0x00034c02
    cb9c:	2000a774 	.word	0x2000a774
    cba0:	0000b6a1 	.word	0x0000b6a1
    cba4:	00033614 	.word	0x00033614
    cba8:	0003360c 	.word	0x0003360c
    cbac:	00034c1a 	.word	0x00034c1a
    cbb0:	00034c40 	.word	0x00034c40
    cbb4:	2000a768 	.word	0x2000a768
    cbb8:	0000b765 	.word	0x0000b765

0000cbbc <configure_led>:
{
    cbbc:	b508      	push	{r3, lr}
	gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    cbbe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cbc2:	480a      	ldr	r0, [pc, #40]	; (cbec <configure_led+0x30>)
    cbc4:	f01d fa3b 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    cbc8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cbcc:	4808      	ldr	r0, [pc, #32]	; (cbf0 <configure_led+0x34>)
    cbce:	f01d fa36 	bl	2a03e <gpio_pin_configure_dt.isra.0>
	gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    cbd2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cbd6:	4807      	ldr	r0, [pc, #28]	; (cbf4 <configure_led+0x38>)
    cbd8:	f01d fa31 	bl	2a03e <gpio_pin_configure_dt.isra.0>
}
    cbdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    cbe0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    cbe4:	4804      	ldr	r0, [pc, #16]	; (cbf8 <configure_led+0x3c>)
    cbe6:	f01d ba2a 	b.w	2a03e <gpio_pin_configure_dt.isra.0>
    cbea:	bf00      	nop
    cbec:	2000846c 	.word	0x2000846c
    cbf0:	20008464 	.word	0x20008464
    cbf4:	2000845c 	.word	0x2000845c
    cbf8:	20008454 	.word	0x20008454

0000cbfc <turn_off_all_leds>:
{
    cbfc:	b508      	push	{r3, lr}
	gpio_pin_set_dt(LED1, OFF);
    cbfe:	2100      	movs	r1, #0
    cc00:	4808      	ldr	r0, [pc, #32]	; (cc24 <turn_off_all_leds+0x28>)
    cc02:	f01d fa08 	bl	2a016 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED2, OFF);
    cc06:	2100      	movs	r1, #0
    cc08:	4807      	ldr	r0, [pc, #28]	; (cc28 <turn_off_all_leds+0x2c>)
    cc0a:	f01d fa04 	bl	2a016 <gpio_pin_set_dt.isra.0>
	gpio_pin_set_dt(LED3, OFF);
    cc0e:	2100      	movs	r1, #0
    cc10:	4806      	ldr	r0, [pc, #24]	; (cc2c <turn_off_all_leds+0x30>)
    cc12:	f01d fa00 	bl	2a016 <gpio_pin_set_dt.isra.0>
}
    cc16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpio_pin_set_dt(LED4, OFF);
    cc1a:	2100      	movs	r1, #0
    cc1c:	4804      	ldr	r0, [pc, #16]	; (cc30 <turn_off_all_leds+0x34>)
    cc1e:	f01d b9fa 	b.w	2a016 <gpio_pin_set_dt.isra.0>
    cc22:	bf00      	nop
    cc24:	2000846c 	.word	0x2000846c
    cc28:	20008464 	.word	0x20008464
    cc2c:	2000845c 	.word	0x2000845c
    cc30:	20008454 	.word	0x20008454

0000cc34 <configure_adc>:
{
    cc34:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    cc36:	2500      	movs	r5, #0
    cc38:	4c12      	ldr	r4, [pc, #72]	; (cc84 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev))
    cc3a:	f854 0c06 	ldr.w	r0, [r4, #-6]
    cc3e:	f024 f91c 	bl	30e7a <z_device_is_ready>
    cc42:	b920      	cbnz	r0, cc4e <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    cc44:	4810      	ldr	r0, [pc, #64]	; (cc88 <configure_adc+0x54>)
}
    cc46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    cc4a:	f01d bc07 	b.w	2a45c <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    cc4e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    cc52:	b16b      	cbz	r3, cc70 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    cc54:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    cc58:	6883      	ldr	r3, [r0, #8]
    cc5a:	4621      	mov	r1, r4
    cc5c:	681b      	ldr	r3, [r3, #0]
    cc5e:	4798      	blx	r3
		if (err < 0)
    cc60:	1e02      	subs	r2, r0, #0
    cc62:	da08      	bge.n	cc76 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    cc64:	4629      	mov	r1, r5
}
    cc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    cc6a:	4808      	ldr	r0, [pc, #32]	; (cc8c <configure_adc+0x58>)
    cc6c:	f01d bbf6 	b.w	2a45c <printk>
		return -ENOTSUP;
    cc70:	f06f 0285 	mvn.w	r2, #133	; 0x85
    cc74:	e7f6      	b.n	cc64 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++)
    cc76:	3501      	adds	r5, #1
    cc78:	2d05      	cmp	r5, #5
    cc7a:	f104 0414 	add.w	r4, r4, #20
    cc7e:	d1dc      	bne.n	cc3a <configure_adc+0x6>
}
    cc80:	bd38      	pop	{r3, r4, r5, pc}
    cc82:	bf00      	nop
    cc84:	000335ae 	.word	0x000335ae
    cc88:	00034c58 	.word	0x00034c58
    cc8c:	00034c79 	.word	0x00034c79

0000cc90 <main>:
{
    cc90:	b570      	push	{r4, r5, r6, lr}
	sensor_status.busy[SENSOR_DIG_4]=ON;
    cc92:	2201      	movs	r2, #1
	sensor_status.active[SENSOR_DIG_4]=OFF;
    cc94:	2600      	movs	r6, #0
	sensor_status.busy[SENSOR_DIG_4]=ON;
    cc96:	4b7e      	ldr	r3, [pc, #504]	; (ce90 <main+0x200>)
{
    cc98:	b08a      	sub	sp, #40	; 0x28
    color(3);
    cc9a:	2003      	movs	r0, #3
	sensor_status.busy[SENSOR_DIG_4]=ON;
    cc9c:	741a      	strb	r2, [r3, #16]
	sensor_status.active[SENSOR_DIG_4]=OFF;
    cc9e:	729e      	strb	r6, [r3, #10]
    color(3);
    cca0:	f000 ff7c 	bl	db9c <color>
	return z_impl_k_mutex_init(mutex);
    cca4:	487b      	ldr	r0, [pc, #492]	; (ce94 <main+0x204>)
    cca6:	f024 f9d2 	bl	3104e <z_impl_k_mutex_init>
	configure_led();
    ccaa:	f7ff ff87 	bl	cbbc <configure_led>
	turn_off_all_leds();
    ccae:	f7ff ffa5 	bl	cbfc <turn_off_all_leds>
	configure_all_buttons();
    ccb2:	f7ff fe3f 	bl	c934 <configure_all_buttons>
	configure_digital_inputs();
    ccb6:	f7ff fec7 	bl	ca48 <configure_digital_inputs>
	configure_adc();
    ccba:	f7ff ffbb 	bl	cc34 <configure_adc>
    ccbe:	4d76      	ldr	r5, [pc, #472]	; (ce98 <main+0x208>)
    ccc0:	4628      	mov	r0, r5
    ccc2:	f024 f8da 	bl	30e7a <z_device_is_ready>
	if (!device_is_ready(uart))
    ccc6:	b1d0      	cbz	r0, ccfe <main+0x6e>
	rx = k_malloc(sizeof(*rx));
    ccc8:	206c      	movs	r0, #108	; 0x6c
    ccca:	f024 fe8e 	bl	319ea <k_malloc>
	if (rx)
    ccce:	4604      	mov	r4, r0
    ccd0:	b1a8      	cbz	r0, ccfe <main+0x6e>
		rx->len = 0;
    ccd2:	f8a0 6068 	strh.w	r6, [r0, #104]	; 0x68
	k_work_init_delayable(&uart_work, uart_work_handler);
    ccd6:	4971      	ldr	r1, [pc, #452]	; (ce9c <main+0x20c>)
    ccd8:	4871      	ldr	r0, [pc, #452]	; (cea0 <main+0x210>)
    ccda:	f024 fb19 	bl	31310 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    ccde:	68ab      	ldr	r3, [r5, #8]
    cce0:	681b      	ldr	r3, [r3, #0]
    cce2:	b973      	cbnz	r3, cd02 <main+0x72>
		k_free(rx);
    cce4:	4620      	mov	r0, r4
    cce6:	f024 fe79 	bl	319dc <k_free>
		LOG_ERR("Cannot initialize UART callback");
    ccea:	4b6e      	ldr	r3, [pc, #440]	; (cea4 <main+0x214>)
    ccec:	2201      	movs	r2, #1
    ccee:	9302      	str	r3, [sp, #8]
    ccf0:	2300      	movs	r3, #0
    ccf2:	496d      	ldr	r1, [pc, #436]	; (cea8 <main+0x218>)
    ccf4:	4618      	mov	r0, r3
    ccf6:	e9cd 3300 	strd	r3, r3, [sp]
    ccfa:	f01d f965 	bl	29fc8 <z_log_msg_runtime_create.constprop.0>
		error();
    ccfe:	f01d f9f1 	bl	2a0e4 <error>
	return api->callback_set(dev, callback, user_data);
    cd02:	4632      	mov	r2, r6
    cd04:	4628      	mov	r0, r5
    cd06:	4969      	ldr	r1, [pc, #420]	; (ceac <main+0x21c>)
    cd08:	4798      	blx	r3
	if (err)
    cd0a:	2800      	cmp	r0, #0
    cd0c:	d1ea      	bne.n	cce4 <main+0x54>
	tx = k_malloc(sizeof(*tx));
    cd0e:	206c      	movs	r0, #108	; 0x6c
    cd10:	f024 fe6b 	bl	319ea <k_malloc>
	if (tx)
    cd14:	4606      	mov	r6, r0
    cd16:	2800      	cmp	r0, #0
    cd18:	d0f1      	beq.n	ccfe <main+0x6e>
		pos = snprintf(tx->data, sizeof(tx->data),
    cd1a:	1d03      	adds	r3, r0, #4
    cd1c:	4618      	mov	r0, r3
    cd1e:	4964      	ldr	r1, [pc, #400]	; (ceb0 <main+0x220>)
    cd20:	f025 f808 	bl	31d34 <strcpy>
		tx->len = pos;
    cd24:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    cd26:	4601      	mov	r1, r0
		tx->len = pos;
    cd28:	f8a6 2068 	strh.w	r2, [r6, #104]	; 0x68
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    cd2c:	4628      	mov	r0, r5
    cd2e:	f01d f962 	bl	29ff6 <uart_tx.constprop.0>
	if (err)
    cd32:	4601      	mov	r1, r0
    cd34:	b118      	cbz	r0, cd3e <main+0xae>
		printf("Cannot display welcome message (err: %d)", err);
    cd36:	485f      	ldr	r0, [pc, #380]	; (ceb4 <main+0x224>)
    cd38:	f01a ff0c 	bl	27b54 <iprintf>
	if (err)
    cd3c:	e7df      	b.n	ccfe <main+0x6e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    cd3e:	4628      	mov	r0, r5
    cd40:	1d21      	adds	r1, r4, #4
    cd42:	f01d f950 	bl	29fe6 <uart_rx_enable.constprop.0>
	if (err)
    cd46:	2800      	cmp	r0, #0
    cd48:	d1d9      	bne.n	ccfe <main+0x6e>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    cd4a:	485b      	ldr	r0, [pc, #364]	; (ceb8 <main+0x228>)
    cd4c:	f00f fe10 	bl	1c970 <bt_conn_auth_cb_register>
		if (err)
    cd50:	b128      	cbz	r0, cd5e <main+0xce>
			printk("Failed to register authorization callbacks.\n");
    cd52:	485a      	ldr	r0, [pc, #360]	; (cebc <main+0x22c>)
}
    cd54:	b00a      	add	sp, #40	; 0x28
    cd56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    cd5a:	f01d bb7f 	b.w	2a45c <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    cd5e:	4858      	ldr	r0, [pc, #352]	; (cec0 <main+0x230>)
    cd60:	f00f fe20 	bl	1c9a4 <bt_conn_auth_info_cb_register>
		if (err)
    cd64:	b108      	cbz	r0, cd6a <main+0xda>
			printk("Failed to register authorization info callbacks.\n");
    cd66:	4857      	ldr	r0, [pc, #348]	; (cec4 <main+0x234>)
    cd68:	e7f4      	b.n	cd54 <main+0xc4>
	err = bt_enable(NULL);
    cd6a:	f00d fee7 	bl	1ab3c <bt_enable>
	if (err)
    cd6e:	2800      	cmp	r0, #0
    cd70:	d1c5      	bne.n	ccfe <main+0x6e>
    color(6);
    cd72:	2006      	movs	r0, #6
    cd74:	f000 ff12 	bl	db9c <color>
	printf("Bluetooth initialized \n\r");
    cd78:	4853      	ldr	r0, [pc, #332]	; (cec8 <main+0x238>)
    cd7a:	f01a feeb 	bl	27b54 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    cd7e:	4853      	ldr	r0, [pc, #332]	; (cecc <main+0x23c>)
    cd80:	f01a fee8 	bl	27b54 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    cd84:	4852      	ldr	r0, [pc, #328]	; (ced0 <main+0x240>)
    cd86:	f01a fee5 	bl	27b54 <iprintf>
    color(255);
    cd8a:	20ff      	movs	r0, #255	; 0xff
    cd8c:	f000 ff06 	bl	db9c <color>
	k_sem_give(&ble_init_ok);
    cd90:	4850      	ldr	r0, [pc, #320]	; (ced4 <main+0x244>)
    cd92:	f01d f909 	bl	29fa8 <k_sem_give>
	err = bt_nus_init(&nus_cb);
    cd96:	4850      	ldr	r0, [pc, #320]	; (ced8 <main+0x248>)
    cd98:	f004 f8f4 	bl	10f84 <bt_nus_init>
	if (err)
    cd9c:	4601      	mov	r1, r0
    cd9e:	b128      	cbz	r0, cdac <main+0x11c>
		printf("Failed to initialize UART service (err: %d)", err);
    cda0:	484e      	ldr	r0, [pc, #312]	; (cedc <main+0x24c>)
}
    cda2:	b00a      	add	sp, #40	; 0x28
    cda4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    cda8:	f01a bed4 	b.w	27b54 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    cdac:	4d4c      	ldr	r5, [pc, #304]	; (cee0 <main+0x250>)
    cdae:	ac05      	add	r4, sp, #20
    cdb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cdb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cdb4:	682b      	ldr	r3, [r5, #0]
    cdb6:	2501      	movs	r5, #1
    cdb8:	6023      	str	r3, [r4, #0]
    cdba:	2202      	movs	r2, #2
    cdbc:	4b49      	ldr	r3, [pc, #292]	; (cee4 <main+0x254>)
    cdbe:	494a      	ldr	r1, [pc, #296]	; (cee8 <main+0x258>)
    cdc0:	9500      	str	r5, [sp, #0]
    cdc2:	a805      	add	r0, sp, #20
    cdc4:	f00e fd32 	bl	1b82c <bt_le_adv_start>
	if (err)
    cdc8:	4604      	mov	r4, r0
    cdca:	b128      	cbz	r0, cdd8 <main+0x148>
		printf("Advertising failed to start (err %d)", err);
    cdcc:	4601      	mov	r1, r0
    cdce:	4847      	ldr	r0, [pc, #284]	; (ceec <main+0x25c>)
    cdd0:	f01a fec0 	bl	27b54 <iprintf>
}
    cdd4:	b00a      	add	sp, #40	; 0x28
    cdd6:	bd70      	pop	{r4, r5, r6, pc}
	flag = 1; // print ad values once
    cdd8:	4b45      	ldr	r3, [pc, #276]	; (cef0 <main+0x260>)
	k_msleep(300);
    cdda:	f44f 7096 	mov.w	r0, #300	; 0x12c
	flag = 1; // print ad values once
    cdde:	601d      	str	r5, [r3, #0]
	k_msleep(300);
    cde0:	f01d f95a 	bl	2a098 <k_msleep.isra.0>
	flash_init();
    cde4:	f7ff fcc0 	bl	c768 <flash_init>
	setup_initialize();
    cde8:	f000 fdfa 	bl	d9e0 <setup_initialize>
	flash_write_setup();
    cdec:	f000 f914 	bl	d018 <flash_write_setup>
	flash_read_setup();
    cdf0:	f000 f91c 	bl	d02c <flash_read_setup>
	print_setup();
    cdf4:	f000 fe54 	bl	daa0 <print_setup>
    cdf8:	4e3e      	ldr	r6, [pc, #248]	; (cef4 <main+0x264>)
    cdfa:	4630      	mov	r0, r6
    cdfc:	f024 f83d 	bl	30e7a <z_device_is_ready>
	if (!device_is_ready(uart_2))
    ce00:	2800      	cmp	r0, #0
    ce02:	f43f af7c 	beq.w	ccfe <main+0x6e>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    ce06:	206c      	movs	r0, #108	; 0x6c
    ce08:	f024 fdef 	bl	319ea <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    ce0c:	493a      	ldr	r1, [pc, #232]	; (cef8 <main+0x268>)
	rx_uart2->len = 0;
    ce0e:	f8a0 4068 	strh.w	r4, [r0, #104]	; 0x68
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    ce12:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    ce14:	4839      	ldr	r0, [pc, #228]	; (cefc <main+0x26c>)
    ce16:	f024 fa7b 	bl	31310 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    ce1a:	68b3      	ldr	r3, [r6, #8]
    ce1c:	681b      	ldr	r3, [r3, #0]
    ce1e:	b11b      	cbz	r3, ce28 <main+0x198>
	return api->callback_set(dev, callback, user_data);
    ce20:	4622      	mov	r2, r4
    ce22:	4630      	mov	r0, r6
    ce24:	4936      	ldr	r1, [pc, #216]	; (cf00 <main+0x270>)
    ce26:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), UART_WAIT_FOR_RX);
    ce28:	1d29      	adds	r1, r5, #4
    ce2a:	4832      	ldr	r0, [pc, #200]	; (cef4 <main+0x264>)
    ce2c:	f01d f8db 	bl	29fe6 <uart_rx_enable.constprop.0>
    k_sem_give(&adc_init);
    ce30:	4834      	ldr	r0, [pc, #208]	; (cf04 <main+0x274>)
    ce32:	f01d f8b9 	bl	29fa8 <k_sem_give>
    k_msleep(200);
    ce36:	20c8      	movs	r0, #200	; 0xc8
    ce38:	f01d f92e 	bl	2a098 <k_msleep.isra.0>
    k_sem_give(&timer_init);
    ce3c:	4832      	ldr	r0, [pc, #200]	; (cf08 <main+0x278>)
    ce3e:	f01d f8b3 	bl	29fa8 <k_sem_give>
	k_msleep(1000);
    ce42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ce46:	f01d f927 	bl	2a098 <k_msleep.isra.0>
	k_sem_give(&gps_init);
    ce4a:	4830      	ldr	r0, [pc, #192]	; (cf0c <main+0x27c>)
    ce4c:	f01d f8ac 	bl	29fa8 <k_sem_give>
	k_msleep(1000);
    ce50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ce54:	f01d f920 	bl	2a098 <k_msleep.isra.0>
    k_sem_give(&lorawan_init);  //START HELIUM JOIN
    ce58:	482d      	ldr	r0, [pc, #180]	; (cf10 <main+0x280>)
    ce5a:	f01d f8a5 	bl	29fa8 <k_sem_give>
    k_sem_give(&cmd_init_ok);
    ce5e:	482d      	ldr	r0, [pc, #180]	; (cf14 <main+0x284>)
    ce60:	f01d f8a2 	bl	29fa8 <k_sem_give>
    k_msleep(alarm_wait_time); //TIME TO INIT ALARM SYSTEM
    ce64:	f242 7010 	movw	r0, #10000	; 0x2710
    ce68:	f01d f916 	bl	2a098 <k_msleep.isra.0>
	k_sem_give(&alarm_infra_init);
    ce6c:	482a      	ldr	r0, [pc, #168]	; (cf18 <main+0x288>)
    ce6e:	f01d f89b 	bl	29fa8 <k_sem_give>
	color(1);
    ce72:	2001      	movs	r0, #1
    ce74:	f000 fe92 	bl	db9c <color>
    printk("Alarm Working \n");
    ce78:	4828      	ldr	r0, [pc, #160]	; (cf1c <main+0x28c>)
    ce7a:	f01d faef 	bl	2a45c <printk>
	color(255);
    ce7e:	20ff      	movs	r0, #255	; 0xff
    ce80:	f000 fe8c 	bl	db9c <color>
			k_sleep(K_MSEC(60000));
    ce84:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
    ce88:	2100      	movs	r1, #0
    ce8a:	f01d f903 	bl	2a094 <k_sleep.isra.0>
	for (;;){
    ce8e:	e7f9      	b.n	ce84 <main+0x1f4>
    ce90:	200311be 	.word	0x200311be
    ce94:	2000a754 	.word	0x2000a754
    ce98:	00032b8c 	.word	0x00032b8c
    ce9c:	0000b7d9 	.word	0x0000b7d9
    cea0:	20009998 	.word	0x20009998
    cea4:	00034c9b 	.word	0x00034c9b
    cea8:	000332fc 	.word	0x000332fc
    ceac:	0000c1ad 	.word	0x0000c1ad
    ceb0:	00034cbb 	.word	0x00034cbb
    ceb4:	00034ce2 	.word	0x00034ce2
    ceb8:	2000841c 	.word	0x2000841c
    cebc:	00034d0b 	.word	0x00034d0b
    cec0:	2000840c 	.word	0x2000840c
    cec4:	00034d38 	.word	0x00034d38
    cec8:	00034d6a 	.word	0x00034d6a
    cecc:	00034d83 	.word	0x00034d83
    ced0:	00034da4 	.word	0x00034da4
    ced4:	20008cf0 	.word	0x20008cf0
    ced8:	20008400 	.word	0x20008400
    cedc:	00034dcd 	.word	0x00034dcd
    cee0:	0003336c 	.word	0x0003336c
    cee4:	00033590 	.word	0x00033590
    cee8:	00033598 	.word	0x00033598
    ceec:	00034df9 	.word	0x00034df9
    cef0:	2000a750 	.word	0x2000a750
    cef4:	00032b74 	.word	0x00032b74
    cef8:	0000b785 	.word	0x0000b785
    cefc:	20009968 	.word	0x20009968
    cf00:	0000b82d 	.word	0x0000b82d
    cf04:	20008ca8 	.word	0x20008ca8
    cf08:	20008e58 	.word	0x20008e58
    cf0c:	20008d68 	.word	0x20008d68
    cf10:	20008d98 	.word	0x20008d98
    cf14:	20008d50 	.word	0x20008d50
    cf18:	20008cd8 	.word	0x20008cd8
    cf1c:	00034e1e 	.word	0x00034e1e

0000cf20 <commandFunc1>:
}

/*below CPI under test*/


void commandFunc1(uint16_t param) {
    cf20:	4601      	mov	r1, r0
    printk("Command 1 ok: Param:%u\n", param);
    cf22:	4801      	ldr	r0, [pc, #4]	; (cf28 <commandFunc1+0x8>)
    cf24:	f01d ba9a 	b.w	2a45c <printk>
    cf28:	00034f52 	.word	0x00034f52

0000cf2c <commandFunc2>:
}

void commandFunc2(uint16_t param) {
    cf2c:	4601      	mov	r1, r0
    printk("Command 2 ok: Param:%u\n", param);
    cf2e:	4801      	ldr	r0, [pc, #4]	; (cf34 <commandFunc2+0x8>)
    cf30:	f01d ba94 	b.w	2a45c <printk>
    cf34:	00034f6a 	.word	0x00034f6a

0000cf38 <commandFunc3>:
}

void commandFunc3(uint16_t param) {
    cf38:	4601      	mov	r1, r0
    printk("Command 3 ok: Param:%u\n", param);
    cf3a:	4801      	ldr	r0, [pc, #4]	; (cf40 <commandFunc3+0x8>)
    cf3c:	f01d ba8e 	b.w	2a45c <printk>
    cf40:	00034f82 	.word	0x00034f82

0000cf44 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
    cf44:	4602      	mov	r2, r0
    cf46:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    cf48:	4801      	ldr	r0, [pc, #4]	; (cf50 <k_mutex_lock.constprop.0.isra.0+0xc>)
    cf4a:	f018 bdd7 	b.w	25afc <z_impl_k_mutex_lock>
    cf4e:	bf00      	nop
    cf50:	20008c40 	.word	0x20008c40

0000cf54 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    cf54:	4801      	ldr	r0, [pc, #4]	; (cf5c <k_mutex_unlock.constprop.0.isra.0+0x8>)
    cf56:	f018 be4b 	b.w	25bf0 <z_impl_k_mutex_unlock>
    cf5a:	bf00      	nop
    cf5c:	20008c40 	.word	0x20008c40

0000cf60 <adc_raw_to_millivolts_dt.constprop.0.isra.0>:
	if (!spec->channel_cfg_dt_node_exists) {
    cf60:	4b10      	ldr	r3, [pc, #64]	; (cfa4 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x44>)
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    cf62:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!spec->channel_cfg_dt_node_exists) {
    cf64:	795a      	ldrb	r2, [r3, #5]
static inline int adc_raw_to_millivolts_dt(const struct adc_dt_spec *spec,
    cf66:	4605      	mov	r5, r0
	if (!spec->channel_cfg_dt_node_exists) {
    cf68:	b1d2      	cbz	r2, cfa0 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    cf6a:	79da      	ldrb	r2, [r3, #7]
	resolution = spec->resolution;
    cf6c:	7c1c      	ldrb	r4, [r3, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    cf6e:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
    cf70:	bf09      	itett	eq
    cf72:	681a      	ldreq	r2, [r3, #0]
		vref_mv = spec->vref_mv;
    cf74:	89d9      	ldrhne	r1, [r3, #14]
	return api->ref_internal;
    cf76:	6892      	ldreq	r2, [r2, #8]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    cf78:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
    cf7a:	7a9a      	ldrb	r2, [r3, #10]
    cf7c:	0692      	lsls	r2, r2, #26
	int32_t adc_mv = *valp * ref_mv;
    cf7e:	6802      	ldr	r2, [r0, #0]
		resolution -= 1U;
    cf80:	bf48      	it	mi
    cf82:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int32_t adc_mv = *valp * ref_mv;
    cf86:	fb01 f202 	mul.w	r2, r1, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    cf8a:	7998      	ldrb	r0, [r3, #6]
    cf8c:	a901      	add	r1, sp, #4
		resolution -= 1U;
    cf8e:	bf48      	it	mi
    cf90:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    cf92:	9201      	str	r2, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
    cf94:	f013 fc8e 	bl	208b4 <adc_gain_invert>
	if (ret == 0) {
    cf98:	b910      	cbnz	r0, cfa0 <adc_raw_to_millivolts_dt.constprop.0.isra.0+0x40>
		*valp = (adc_mv >> resolution);
    cf9a:	9b01      	ldr	r3, [sp, #4]
    cf9c:	4123      	asrs	r3, r4
    cf9e:	602b      	str	r3, [r5, #0]
}
    cfa0:	b003      	add	sp, #12
    cfa2:	bd30      	pop	{r4, r5, pc}
    cfa4:	000335a8 	.word	0x000335a8

0000cfa8 <gpio_pin_set_dt.constprop.0.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    cfa8:	2101      	movs	r1, #1
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    cfaa:	4603      	mov	r3, r0
	return gpio_pin_set(spec->port, spec->pin, value);
    cfac:	4a08      	ldr	r2, [pc, #32]	; (cfd0 <gpio_pin_set_dt.constprop.0.isra.0+0x28>)
    cfae:	6810      	ldr	r0, [r2, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    cfb0:	7912      	ldrb	r2, [r2, #4]
    cfb2:	4091      	lsls	r1, r2
    cfb4:	6902      	ldr	r2, [r0, #16]
    cfb6:	6812      	ldr	r2, [r2, #0]
    cfb8:	4211      	tst	r1, r2
		value = (value != 0) ? 0 : 1;
    cfba:	bf18      	it	ne
    cfbc:	f083 0301 	eorne.w	r3, r3, #1
	if (value != 0)	{
    cfc0:	b113      	cbz	r3, cfc8 <gpio_pin_set_dt.constprop.0.isra.0+0x20>
	return api->port_set_bits_raw(port, pins);
    cfc2:	6883      	ldr	r3, [r0, #8]
    cfc4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    cfc6:	4718      	bx	r3
    cfc8:	6883      	ldr	r3, [r0, #8]
    cfca:	691b      	ldr	r3, [r3, #16]
    cfcc:	e7fb      	b.n	cfc6 <gpio_pin_set_dt.constprop.0.isra.0+0x1e>
    cfce:	bf00      	nop
    cfd0:	20008454 	.word	0x20008454

0000cfd4 <flash_button2_counter>:
void flash_button2_counter(void){
    cfd4:	b510      	push	{r4, lr}
    button2_counter++;
    cfd6:	4c0d      	ldr	r4, [pc, #52]	; (d00c <flash_button2_counter+0x38>)
	(void)nvs_write(
    cfd8:	2101      	movs	r1, #1
    button2_counter++;
    cfda:	6823      	ldr	r3, [r4, #0]
	(void)nvs_write(
    cfdc:	4622      	mov	r2, r4
    button2_counter++;
    cfde:	3301      	adds	r3, #1
    cfe0:	6023      	str	r3, [r4, #0]
	(void)nvs_write(
    cfe2:	480b      	ldr	r0, [pc, #44]	; (d010 <flash_button2_counter+0x3c>)
    cfe4:	2304      	movs	r3, #4
    cfe6:	f003 f963 	bl	102b0 <nvs_write>
    rc = nvs_read(&fs, BOOT_POSITION, &button2_counter, sizeof(button2_counter));
    cfea:	2304      	movs	r3, #4
    cfec:	4622      	mov	r2, r4
    cfee:	2101      	movs	r1, #1
    cff0:	4807      	ldr	r0, [pc, #28]	; (d010 <flash_button2_counter+0x3c>)
    cff2:	f01d ff4f 	bl	2ae94 <nvs_read>
	if (rc > 0) { /* item was found, show it */
    cff6:	2800      	cmp	r0, #0
    cff8:	dd06      	ble.n	d008 <flash_button2_counter+0x34>
		printk("Id: %d, button2_counter: %d\n",
    cffa:	6822      	ldr	r2, [r4, #0]
    cffc:	2101      	movs	r1, #1
}
    cffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Id: %d, button2_counter: %d\n",
    d002:	4804      	ldr	r0, [pc, #16]	; (d014 <flash_button2_counter+0x40>)
    d004:	f01d ba2a 	b.w	2a45c <printk>
}
    d008:	bd10      	pop	{r4, pc}
    d00a:	bf00      	nop
    d00c:	2000a710 	.word	0x2000a710
    d010:	2000a720 	.word	0x2000a720
    d014:	00034a8f 	.word	0x00034a8f

0000d018 <flash_write_setup>:
    err=nvs_write(&fs, SETUP_POSITION, &Initial_Setup,size_setup);
    d018:	234c      	movs	r3, #76	; 0x4c
    d01a:	2103      	movs	r1, #3
    d01c:	4a01      	ldr	r2, [pc, #4]	; (d024 <flash_write_setup+0xc>)
    d01e:	4802      	ldr	r0, [pc, #8]	; (d028 <flash_write_setup+0x10>)
    d020:	f003 b946 	b.w	102b0 <nvs_write>
    d024:	2000b094 	.word	0x2000b094
    d028:	2000a720 	.word	0x2000a720

0000d02c <flash_read_setup>:
	(void)nvs_read(&fs, SETUP_POSITION, &Initial_Setup, sizeof(Initial_Setup));
    d02c:	234c      	movs	r3, #76	; 0x4c
    d02e:	2103      	movs	r1, #3
    d030:	4a01      	ldr	r2, [pc, #4]	; (d038 <flash_read_setup+0xc>)
    d032:	4802      	ldr	r0, [pc, #8]	; (d03c <flash_read_setup+0x10>)
    d034:	f01d bf2e 	b.w	2ae94 <nvs_read>
    d038:	2000b094 	.word	0x2000b094
    d03c:	2000a720 	.word	0x2000a720

0000d040 <fill_date>:
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    d040:	b573      	push	{r0, r1, r4, r5, r6, lr}
				   part[0]=field_date[0];
    d042:	780b      	ldrb	r3, [r1, #0]
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    d044:	4604      	mov	r4, r0
				   part[0]=field_date[0];
    d046:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[1];
    d04a:	784b      	ldrb	r3, [r1, #1]
           position.t.tm_mday=atoi(part);
    d04c:	a801      	add	r0, sp, #4
void fill_date(uint8_t *field_time,uint8_t *field_date ){
    d04e:	460d      	mov	r5, r1
           part[1]=field_date[1];
    d050:	f88d 3005 	strb.w	r3, [sp, #5]
           position.t.tm_mday=atoi(part);
    d054:	f024 fcd1 	bl	319fa <atoi>
    d058:	4e1b      	ldr	r6, [pc, #108]	; (d0c8 <fill_date+0x88>)
    d05a:	61f0      	str	r0, [r6, #28]
				   part[0]=field_date[2];
    d05c:	78ab      	ldrb	r3, [r5, #2]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    d05e:	a801      	add	r0, sp, #4
				   part[0]=field_date[2];
    d060:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[3];
    d064:	78eb      	ldrb	r3, [r5, #3]
    d066:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_mon=(atoi(part)-1); 	// Month, where 0 = jan
    d06a:	f024 fcc6 	bl	319fa <atoi>
    d06e:	3801      	subs	r0, #1
    d070:	6230      	str	r0, [r6, #32]
				   part[0]=field_date[4];
    d072:	792b      	ldrb	r3, [r5, #4]
				   position.t.tm_year=atoi(part);	
    d074:	a801      	add	r0, sp, #4
				   part[0]=field_date[4];
    d076:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_date[5];
    d07a:	796b      	ldrb	r3, [r5, #5]
    d07c:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_year=atoi(part);	
    d080:	f024 fcbb 	bl	319fa <atoi>
    d084:	6270      	str	r0, [r6, #36]	; 0x24
				   part[0]=field_time[0];
    d086:	7823      	ldrb	r3, [r4, #0]
				   position.t.tm_hour=atoi(part);	
    d088:	a801      	add	r0, sp, #4
				   part[0]=field_time[0];
    d08a:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[1];
    d08e:	7863      	ldrb	r3, [r4, #1]
    d090:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_hour=atoi(part);	
    d094:	f024 fcb1 	bl	319fa <atoi>
    d098:	61b0      	str	r0, [r6, #24]
				   part[0]=field_time[2];
    d09a:	78a3      	ldrb	r3, [r4, #2]
				   position.t.tm_min=atoi(part);	
    d09c:	a801      	add	r0, sp, #4
				   part[0]=field_time[2];
    d09e:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[3];
    d0a2:	78e3      	ldrb	r3, [r4, #3]
    d0a4:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_min=atoi(part);	
    d0a8:	f024 fca7 	bl	319fa <atoi>
    d0ac:	6170      	str	r0, [r6, #20]
				   part[0]=field_time[4];
    d0ae:	7923      	ldrb	r3, [r4, #4]
				   position.t.tm_sec=atoi(part);	
    d0b0:	a801      	add	r0, sp, #4
				   part[0]=field_time[4];
    d0b2:	f88d 3004 	strb.w	r3, [sp, #4]
           part[1]=field_time[5];
    d0b6:	7963      	ldrb	r3, [r4, #5]
    d0b8:	f88d 3005 	strb.w	r3, [sp, #5]
				   position.t.tm_sec=atoi(part);	
    d0bc:	f024 fc9d 	bl	319fa <atoi>
    d0c0:	6130      	str	r0, [r6, #16]
}
    d0c2:	b002      	add	sp, #8
    d0c4:	bd70      	pop	{r4, r5, r6, pc}
    d0c6:	bf00      	nop
    d0c8:	2000a6dc 	.word	0x2000a6dc

0000d0cc <time_stamp_function>:
uint64_t time_stamp_function(void) {
    d0cc:	b510      	push	{r4, lr}
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    d0ce:	4c15      	ldr	r4, [pc, #84]	; (d124 <time_stamp_function+0x58>)
uint64_t time_stamp_function(void) {
    d0d0:	b08a      	sub	sp, #40	; 0x28
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    d0d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    t_of_day = mktime(&t);
    d0d4:	a801      	add	r0, sp, #4
    t.tm_year = (2000+position.t.tm_year)-1900;  // Year - 1900
    d0d6:	3364      	adds	r3, #100	; 0x64
    d0d8:	9306      	str	r3, [sp, #24]
    t.tm_mon = position.t.tm_mon;         // Month, where 0 = jan
    d0da:	6a23      	ldr	r3, [r4, #32]
    d0dc:	9305      	str	r3, [sp, #20]
    t.tm_mday = position.t.tm_mday;       // Day of the month
    d0de:	69e3      	ldr	r3, [r4, #28]
    d0e0:	9304      	str	r3, [sp, #16]
    t.tm_hour = position.t.tm_hour;
    d0e2:	69a3      	ldr	r3, [r4, #24]
    d0e4:	9303      	str	r3, [sp, #12]
    t.tm_min = position.t.tm_min;
    d0e6:	6963      	ldr	r3, [r4, #20]
    d0e8:	9302      	str	r3, [sp, #8]
    t.tm_sec = position.t.tm_sec;
    d0ea:	6923      	ldr	r3, [r4, #16]
    d0ec:	9301      	str	r3, [sp, #4]
    t.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
    d0ee:	f04f 33ff 	mov.w	r3, #4294967295
    d0f2:	9309      	str	r3, [sp, #36]	; 0x24
    t_of_day = mktime(&t);
    d0f4:	f019 ff90 	bl	27018 <mktime>
    if (position.gps_fixed !=1 ){t_of_day=k_uptime_get()/1000;}
    d0f8:	7b23      	ldrb	r3, [r4, #12]
    d0fa:	2b01      	cmp	r3, #1
    d0fc:	d010      	beq.n	d120 <time_stamp_function+0x54>
	return z_impl_k_uptime_ticks();
    d0fe:	f024 fab6 	bl	3166e <z_impl_k_uptime_ticks>
    d102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d106:	fba0 0302 	umull	r0, r3, r0, r2
    d10a:	fb02 3101 	mla	r1, r2, r1, r3
    d10e:	0bc0      	lsrs	r0, r0, #15
    d110:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    d114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d118:	2300      	movs	r3, #0
    d11a:	0bc9      	lsrs	r1, r1, #15
    d11c:	f7fb fec0 	bl	8ea0 <__aeabi_ldivmod>
}
    d120:	b00a      	add	sp, #40	; 0x28
    d122:	bd10      	pop	{r4, pc}
    d124:	2000a6dc 	.word	0x2000a6dc

0000d128 <values_of_gnss_module>:
Gnss values_of_gnss_module(void){
    d128:	b570      	push	{r4, r5, r6, lr}
  gnss_return_value.latitude=position.latitude;
    d12a:	4b05      	ldr	r3, [pc, #20]	; (d140 <values_of_gnss_module+0x18>)
Gnss values_of_gnss_module(void){
    d12c:	4604      	mov	r4, r0
  gnss_return_value.latitude=position.latitude;
    d12e:	685e      	ldr	r6, [r3, #4]
  gnss_return_value.longitude=position.longitude;
    d130:	689d      	ldr	r5, [r3, #8]
  gnss_return_value.timestamp=time_stamp_function();
    d132:	f7ff ffcb 	bl	d0cc <time_stamp_function>
  return gnss_return_value;
    d136:	6066      	str	r6, [r4, #4]
  gnss_return_value.timestamp=time_stamp_function();
    d138:	6020      	str	r0, [r4, #0]
  return gnss_return_value;
    d13a:	60a5      	str	r5, [r4, #8]
}
    d13c:	4620      	mov	r0, r4
    d13e:	bd70      	pop	{r4, r5, r6, pc}
    d140:	2000a6dc 	.word	0x2000a6dc

0000d144 <values_of_analog_sensor>:
Analog values_of_analog_sensor(uint8_t channel){
    d144:	b538      	push	{r3, r4, r5, lr}
    d146:	460d      	mov	r5, r1
    d148:	4604      	mov	r4, r0
  analog_return_value.timestamp=time_stamp_function();
    d14a:	f7ff ffbf 	bl	d0cc <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    d14e:	4b03      	ldr	r3, [pc, #12]	; (d15c <values_of_analog_sensor+0x18>)
    d150:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
  return analog_return_value;
    d154:	e9c4 0300 	strd	r0, r3, [r4]
}
    d158:	4620      	mov	r0, r4
    d15a:	bd38      	pop	{r3, r4, r5, pc}
    d15c:	20030f46 	.word	0x20030f46

0000d160 <values_of_ntc_sensor>:
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    d160:	b570      	push	{r4, r5, r6, lr}
    d162:	460d      	mov	r5, r1
    d164:	4604      	mov	r4, r0
  ntc_return.timestamp=time_stamp_function();
    d166:	f7ff ffb1 	bl	d0cc <time_stamp_function>
  switch (sensor_number){
    d16a:	2d02      	cmp	r5, #2
Ntc values_of_ntc_sensor(uint8_t sensor_number){
    d16c:	f04f 0600 	mov.w	r6, #0
  switch (sensor_number){
    d170:	d00a      	beq.n	d188 <values_of_ntc_sensor+0x28>
    d172:	2d03      	cmp	r5, #3
    d174:	d00c      	beq.n	d190 <values_of_ntc_sensor+0x30>
    d176:	2d01      	cmp	r5, #1
    d178:	d102      	bne.n	d180 <values_of_ntc_sensor+0x20>
    case NTC_1:ntc_return.value=adc_value[NTC_1_CH];
    d17a:	4b07      	ldr	r3, [pc, #28]	; (d198 <values_of_ntc_sensor+0x38>)
    d17c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
  return ntc_return;
    d180:	6020      	str	r0, [r4, #0]
    d182:	80a6      	strh	r6, [r4, #4]
}
    d184:	4620      	mov	r0, r4
    d186:	bd70      	pop	{r4, r5, r6, pc}
    case NTC_2:ntc_return.value=adc_value[NTC_2_CH];
    d188:	4b03      	ldr	r3, [pc, #12]	; (d198 <values_of_ntc_sensor+0x38>)
    d18a:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
              break;
    d18e:	e7f7      	b.n	d180 <values_of_ntc_sensor+0x20>
    case NTC_3:ntc_return.value=adc_value[NTC_3_CH];
    d190:	4b01      	ldr	r3, [pc, #4]	; (d198 <values_of_ntc_sensor+0x38>)
    d192:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
              break;
    d196:	e7f3      	b.n	d180 <values_of_ntc_sensor+0x20>
    d198:	20030f46 	.word	0x20030f46

0000d19c <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    d19c:	b538      	push	{r3, r4, r5, lr}
    d19e:	460d      	mov	r5, r1
    d1a0:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    d1a2:	f7ff ff93 	bl	d0cc <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    d1a6:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    d1a8:	4b04      	ldr	r3, [pc, #16]	; (d1bc <values_of_digital_sensor+0x20>)
    d1aa:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    d1ae:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    d1b2:	e9c4 0200 	strd	r0, r2, [r4]
}
    d1b6:	4620      	mov	r0, r4
    d1b8:	bd38      	pop	{r3, r4, r5, pc}
    d1ba:	bf00      	nop
    d1bc:	20030f36 	.word	0x20030f36

0000d1c0 <read_memory>:
_Circular_Buffer read_memory(uint32_t Pos){
    d1c0:	b570      	push	{r4, r5, r6, lr}
    d1c2:	4605      	mov	r5, r0
    d1c4:	460c      	mov	r4, r1
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d1c6:	f04f 30ff 	mov.w	r0, #4294967295
    d1ca:	f04f 31ff 	mov.w	r1, #4294967295
    d1ce:	f7ff feb9 	bl	cf44 <k_mutex_lock.constprop.0.isra.0>
    buf = k_malloc(size);
    d1d2:	2068      	movs	r0, #104	; 0x68
    d1d4:	f024 fc09 	bl	319ea <k_malloc>
    uint16_t Id= Pos + BASE_DATA_BUFFER;
    d1d8:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_read(&fs, Id, buf, size);
    d1dc:	2368      	movs	r3, #104	; 0x68
    d1de:	4602      	mov	r2, r0
    buf = k_malloc(size);
    d1e0:	4606      	mov	r6, r0
    err=nvs_read(&fs, Id, buf, size);
    d1e2:	b289      	uxth	r1, r1
    d1e4:	4806      	ldr	r0, [pc, #24]	; (d200 <read_memory+0x40>)
    d1e6:	f01d fe55 	bl	2ae94 <nvs_read>
    printf("Result read=%d bytes\n",err);
    d1ea:	b281      	uxth	r1, r0
    d1ec:	4805      	ldr	r0, [pc, #20]	; (d204 <read_memory+0x44>)
    d1ee:	f01a fcb1 	bl	27b54 <iprintf>
    return *buf;
    d1f2:	2268      	movs	r2, #104	; 0x68
    d1f4:	4631      	mov	r1, r6
    d1f6:	4628      	mov	r0, r5
    d1f8:	f024 fc13 	bl	31a22 <memcpy>
}
    d1fc:	4628      	mov	r0, r5
    d1fe:	bd70      	pop	{r4, r5, r6, pc}
    d200:	2000a720 	.word	0x2000a720
    d204:	00034f9a 	.word	0x00034f9a

0000d208 <save_memory>:
void save_memory(uint32_t Pos){
    d208:	b570      	push	{r4, r5, r6, lr}
    d20a:	4604      	mov	r4, r0
        case 6: printk("\033[36m");       // Ciano
    d20c:	4818      	ldr	r0, [pc, #96]	; (d270 <save_memory+0x68>)
    d20e:	f01d f925 	bl	2a45c <printk>
    printf("Size of structure=%d bytes\n",size);
    d212:	2168      	movs	r1, #104	; 0x68
    d214:	4817      	ldr	r0, [pc, #92]	; (d274 <save_memory+0x6c>)
    d216:	f01a fc9d 	bl	27b54 <iprintf>
    buf = k_malloc(size);
    d21a:	2068      	movs	r0, #104	; 0x68
    d21c:	f024 fbe5 	bl	319ea <k_malloc>
    *buf=C_Buffer[Pos];
    d220:	2668      	movs	r6, #104	; 0x68
    buf = k_malloc(size);
    d222:	4605      	mov	r5, r0
    *buf=C_Buffer[Pos];
    d224:	4914      	ldr	r1, [pc, #80]	; (d278 <save_memory+0x70>)
    d226:	4632      	mov	r2, r6
    d228:	fb06 1104 	mla	r1, r6, r4, r1
    d22c:	f024 fbf9 	bl	31a22 <memcpy>
    printf("Position %d\n",Pos); 
    d230:	4621      	mov	r1, r4
    d232:	4812      	ldr	r0, [pc, #72]	; (d27c <save_memory+0x74>)
    d234:	f01a fc8e 	bl	27b54 <iprintf>
    uint16_t id= Pos + BASE_DATA_BUFFER;
    d238:	f504 717a 	add.w	r1, r4, #1000	; 0x3e8
    err=nvs_write(&fs, id, buf,size);
    d23c:	4c10      	ldr	r4, [pc, #64]	; (d280 <save_memory+0x78>)
    d23e:	4633      	mov	r3, r6
    d240:	462a      	mov	r2, r5
    d242:	4620      	mov	r0, r4
    d244:	b289      	uxth	r1, r1
    d246:	f003 f833 	bl	102b0 <nvs_write>
    printf("Result=%d bytes saved\n",err);
    d24a:	b281      	uxth	r1, r0
    d24c:	480d      	ldr	r0, [pc, #52]	; (d284 <save_memory+0x7c>)
    d24e:	f01a fc81 	bl	27b54 <iprintf>
    (void)nvs_write(&fs, LOG_POSITION, &C_Buffer_Current_Position,sizeof(C_Buffer_Current_Position));
    d252:	2304      	movs	r3, #4
    d254:	2102      	movs	r1, #2
    d256:	4620      	mov	r0, r4
    d258:	4a0b      	ldr	r2, [pc, #44]	; (d288 <save_memory+0x80>)
    d25a:	f003 f829 	bl	102b0 <nvs_write>
        case 255: printk("\033[0m");       // Padrão (branco)
    d25e:	480b      	ldr	r0, [pc, #44]	; (d28c <save_memory+0x84>)
    d260:	f01d f8fc 	bl	2a45c <printk>
    k_free(buf);
    d264:	4628      	mov	r0, r5
}
    d266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_free(buf);
    d26a:	f024 bbb7 	b.w	319dc <k_free>
    d26e:	bf00      	nop
    d270:	00034fb0 	.word	0x00034fb0
    d274:	00034fb6 	.word	0x00034fb6
    d278:	2000b0e0 	.word	0x2000b0e0
    d27c:	00034fd2 	.word	0x00034fd2
    d280:	2000a720 	.word	0x2000a720
    d284:	00034fdf 	.word	0x00034fdf
    d288:	2002f9e0 	.word	0x2002f9e0
    d28c:	00034ff6 	.word	0x00034ff6

0000d290 <feed_circular_buffer>:
void feed_circular_buffer(void){
    d290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    d294:	4f45      	ldr	r7, [pc, #276]	; (d3ac <feed_circular_buffer+0x11c>)
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d296:	f04f 30ff 	mov.w	r0, #4294967295
    d29a:	f04f 31ff 	mov.w	r1, #4294967295
void feed_circular_buffer(void){
    d29e:	b09b      	sub	sp, #108	; 0x6c
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d2a0:	f7ff fe50 	bl	cf44 <k_mutex_lock.constprop.0.isra.0>
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    d2a4:	683c      	ldr	r4, [r7, #0]
    d2a6:	f5b4 6fb4 	cmp.w	r4, #1440	; 0x5a0
    d2aa:	d27c      	bcs.n	d3a6 <feed_circular_buffer+0x116>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d2ac:	46e8      	mov	r8, sp
    d2ae:	f04f 0968 	mov.w	r9, #104	; 0x68
    d2b2:	4645      	mov	r5, r8
    d2b4:	4e3e      	ldr	r6, [pc, #248]	; (d3b0 <feed_circular_buffer+0x120>)
     C_Buffer_Current_Position=C_Buffer_Free_Position;
    d2b6:	4b3f      	ldr	r3, [pc, #252]	; (d3b4 <feed_circular_buffer+0x124>)
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d2b8:	4640      	mov	r0, r8
     C_Buffer_Current_Position=C_Buffer_Free_Position;
    d2ba:	601c      	str	r4, [r3, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d2bc:	fb09 6404 	mla	r4, r9, r4, r6
    d2c0:	3404      	adds	r4, #4
    d2c2:	f7ff ff31 	bl	d128 <values_of_gnss_module>
    d2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2d2:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    d2d4:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    d2d6:	6023      	str	r3, [r4, #0]
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    d2d8:	683c      	ldr	r4, [r7, #0]
    d2da:	4640      	mov	r0, r8
    d2dc:	fb09 6404 	mla	r4, r9, r4, r6
    d2e0:	3438      	adds	r4, #56	; 0x38
    d2e2:	f7ff ff2f 	bl	d144 <values_of_analog_sensor>
    d2e6:	e898 0003 	ldmia.w	r8, {r0, r1}
    d2ea:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    d2ee:	2101      	movs	r1, #1
    d2f0:	a80e      	add	r0, sp, #56	; 0x38
    d2f2:	f7ff ff35 	bl	d160 <values_of_ntc_sensor>
    d2f6:	683b      	ldr	r3, [r7, #0]
    d2f8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
    d2fc:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d300:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    d302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d306:	a810      	add	r0, sp, #64	; 0x40
    d308:	f7ff ff2a 	bl	d160 <values_of_ntc_sensor>
    d30c:	683b      	ldr	r3, [r7, #0]
    d30e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
    d312:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d316:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    d318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d31c:	a812      	add	r0, sp, #72	; 0x48
    d31e:	f7ff ff1f 	bl	d160 <values_of_ntc_sensor>
    d322:	683b      	ldr	r3, [r7, #0]
    d324:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    d328:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d32c:	2101      	movs	r1, #1
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    d32e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d332:	a814      	add	r0, sp, #80	; 0x50
    d334:	f7ff ff14 	bl	d160 <values_of_ntc_sensor>
    d338:	683b      	ldr	r3, [r7, #0]
    d33a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    d33c:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d340:	2102      	movs	r1, #2
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    d342:	641a      	str	r2, [r3, #64]	; 0x40
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d344:	a816      	add	r0, sp, #88	; 0x58
    d346:	f7ff ff0b 	bl	d160 <values_of_ntc_sensor>
    d34a:	683b      	ldr	r3, [r7, #0]
    d34c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d34e:	fb09 6303 	mla	r3, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d352:	2103      	movs	r1, #3
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    d354:	649a      	str	r2, [r3, #72]	; 0x48
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d356:	a818      	add	r0, sp, #96	; 0x60
    d358:	f7ff ff02 	bl	d160 <values_of_ntc_sensor>
    d35c:	683c      	ldr	r4, [r7, #0]
    d35e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d360:	fb09 6404 	mla	r4, r9, r4, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d364:	2100      	movs	r1, #0
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    d366:	6523      	str	r3, [r4, #80]	; 0x50
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d368:	4640      	mov	r0, r8
    d36a:	f7ff ff17 	bl	d19c <values_of_digital_sensor>
    d36e:	e898 0003 	ldmia.w	r8, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d372:	683b      	ldr	r3, [r7, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d374:	3458      	adds	r4, #88	; 0x58
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d376:	fb09 6603 	mla	r6, r9, r3, r6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    d37a:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    d37e:	3660      	adds	r6, #96	; 0x60
    d380:	2101      	movs	r1, #1
    d382:	4640      	mov	r0, r8
    d384:	f7ff ff0a 	bl	d19c <values_of_digital_sensor>
    d388:	e898 0003 	ldmia.w	r8, {r0, r1}
    d38c:	e886 0003 	stmia.w	r6, {r0, r1}
     save_memory(C_Buffer_Free_Position);
    d390:	6838      	ldr	r0, [r7, #0]
    d392:	f7ff ff39 	bl	d208 <save_memory>
     C_Buffer_Free_Position++;
    d396:	683b      	ldr	r3, [r7, #0]
    d398:	3301      	adds	r3, #1
    d39a:	603b      	str	r3, [r7, #0]
}
    d39c:	b01b      	add	sp, #108	; 0x6c
    d39e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    k_mutex_unlock(&c_buffer_busy);  
    d3a2:	f7ff bdd7 	b.w	cf54 <k_mutex_unlock.constprop.0.isra.0>
    d3a6:	2300      	movs	r3, #0
    d3a8:	e7f7      	b.n	d39a <feed_circular_buffer+0x10a>
    d3aa:	bf00      	nop
    d3ac:	2002f9e4 	.word	0x2002f9e4
    d3b0:	2000b0e0 	.word	0x2000b0e0
    d3b4:	2002f9e0 	.word	0x2002f9e0

0000d3b8 <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    d3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    d3ba:	4b1c      	ldr	r3, [pc, #112]	; (d42c <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    d3bc:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    d3be:	6818      	ldr	r0, [r3, #0]
    d3c0:	889b      	ldrh	r3, [r3, #4]
    d3c2:	9000      	str	r0, [sp, #0]
    d3c4:	2218      	movs	r2, #24
    d3c6:	2100      	movs	r1, #0
    d3c8:	f10d 0006 	add.w	r0, sp, #6
    d3cc:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    d3d0:	2601      	movs	r6, #1
   char tag[30]="10203";
    d3d2:	f024 fb60 	bl	31a96 <memset>
     msg.positions.timestamp=1;
    d3d6:	2300      	movs	r3, #0
    msg.timestamp=0;
    d3d8:	4c15      	ldr	r4, [pc, #84]	; (d430 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    d3da:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    d3dc:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    d3e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d3e4:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    d3e6:	4b13      	ldr	r3, [pc, #76]	; (d434 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    d3e8:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    d3ea:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    d3ec:	230b      	movs	r3, #11
    d3ee:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    d3f0:	4b11      	ldr	r3, [pc, #68]	; (d438 <fill_fields_to_test+0x80>)
    d3f2:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    d3f4:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    d3f6:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    d3f8:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    d3fa:	7766      	strb	r6, [r4, #29]
    d3fc:	f104 001e 	add.w	r0, r4, #30
    d400:	f024 fc98 	bl	31d34 <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    d404:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    d408:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    d40c:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    d410:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    d412:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    d416:	f7fb fb9f 	bl	8b58 <__aeabi_i2f>
   while (sensor_id<6){
    d41a:	3501      	adds	r5, #1
    d41c:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    d41e:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    d420:	f104 0424 	add.w	r4, r4, #36	; 0x24
    d424:	d1e6      	bne.n	d3f4 <fill_fields_to_test+0x3c>
}
    d426:	4802      	ldr	r0, [pc, #8]	; (d430 <fill_fields_to_test+0x78>)
    d428:	b009      	add	sp, #36	; 0x24
    d42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d42c:	000333f8 	.word	0x000333f8
    d430:	2000afa4 	.word	0x2000afa4
    d434:	40400000 	.word	0x40400000
    d438:	41400000 	.word	0x41400000

0000d43c <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
   k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d43e:	f04f 31ff 	mov.w	r1, #4294967295
buf_data send_array_dd_v0(void){
    d442:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    d446:	4607      	mov	r7, r0
   k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d448:	f04f 30ff 	mov.w	r0, #4294967295
    d44c:	f7ff fd7a 	bl	cf44 <k_mutex_lock.constprop.0.isra.0>
   History_st *data = fill_fields_to_test();
    d450:	f7ff ffb2 	bl	d3b8 <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    d454:	2202      	movs	r2, #2
    d456:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    d45a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    d45e:	4a3a      	ldr	r2, [pc, #232]	; (d548 <send_array_dd_v0+0x10c>)
    d460:	ae0c      	add	r6, sp, #48	; 0x30
    d462:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d464:	4631      	mov	r1, r6
    d466:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    d468:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    d46a:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    d46c:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d46e:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    d470:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    d472:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    d474:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    d476:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    d478:	f101 010c 	add.w	r1, r1, #12
    d47c:	d1f8      	bne.n	d470 <send_array_dd_v0+0x34>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    d47e:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    d480:	6958      	ldr	r0, [r3, #20]
    d482:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    d484:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    d486:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    d488:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    d48c:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    d490:	f101 0108 	add.w	r1, r1, #8
    d494:	d1f6      	bne.n	d484 <send_array_dd_v0+0x48>
    d496:	f103 051e 	add.w	r5, r3, #30
    d49a:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    d49e:	f855 3c06 	ldr.w	r3, [r5, #-6]
    d4a2:	4629      	mov	r1, r5
    d4a4:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    d4a8:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    d4ac:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    d4b0:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    d4b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    d4b8:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    d4bc:	f024 fc3a 	bl	31d34 <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    d4c0:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    d4c2:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    d4c4:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    d4c8:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    d4ca:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    d4ce:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    d4d2:	4633      	mov	r3, r6
    d4d4:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    d4d8:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    d4da:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    d4dc:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    d4e0:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    d4e4:	f103 0308 	add.w	r3, r3, #8
    d4e8:	d1f6      	bne.n	d4d8 <send_array_dd_v0+0x9c>
   while (sensor_id<6){
    d4ea:	3524      	adds	r5, #36	; 0x24
    d4ec:	42a5      	cmp	r5, r4
    d4ee:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    d4f2:	d1d4      	bne.n	d49e <send_array_dd_v0+0x62>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    d4f4:	466c      	mov	r4, sp
    d4f6:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    d4fa:	4668      	mov	r0, sp
    d4fc:	4913      	ldr	r1, [pc, #76]	; (d54c <send_array_dd_v0+0x110>)
    d4fe:	ad07      	add	r5, sp, #28
    d500:	f000 fd42 	bl	df88 <pb_ostream_from_buffer>
    d504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d508:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    d50a:	4911      	ldr	r1, [pc, #68]	; (d550 <send_array_dd_v0+0x114>)
    d50c:	aa0c      	add	r2, sp, #48	; 0x30
    d50e:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    d510:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    d512:	f000 ffb9 	bl	e488 <pb_encode>
   int j=0;
    d516:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    d518:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    d51a:	490c      	ldr	r1, [pc, #48]	; (d54c <send_array_dd_v0+0x110>)
    d51c:	4a0d      	ldr	r2, [pc, #52]	; (d554 <send_array_dd_v0+0x118>)
    d51e:	4283      	cmp	r3, r0
    d520:	d10b      	bne.n	d53a <send_array_dd_v0+0xfe>
   function_return.len=total_bytes_encoded;
    d522:	490d      	ldr	r1, [pc, #52]	; (d558 <send_array_dd_v0+0x11c>)
   return function_return;
    d524:	f240 72dc 	movw	r2, #2012	; 0x7dc
    d528:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    d52a:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
   return function_return;
    d52e:	f024 fa78 	bl	31a22 <memcpy>
}
    d532:	4638      	mov	r0, r7
    d534:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    d538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    d53a:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    d53e:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    d540:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    d544:	e7eb      	b.n	d51e <send_array_dd_v0+0xe2>
    d546:	bf00      	nop
    d548:	0012d687 	.word	0x0012d687
    d54c:	200311d2 	.word	0x200311d2
    d550:	00033660 	.word	0x00033660
    d554:	2000a7cb 	.word	0x2000a7cb
    d558:	2000a7c8 	.word	0x2000a7c8

0000d55c <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d560:	4680      	mov	r8, r0
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d562:	f04f 31ff 	mov.w	r1, #4294967295
void print_current_position_cb(uint32_t pos){
    d566:	b08f      	sub	sp, #60	; 0x3c
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d568:	f04f 30ff 	mov.w	r0, #4294967295
    d56c:	f7ff fcea 	bl	cf44 <k_mutex_lock.constprop.0.isra.0>
        case 13: printk("\033[95m");      // Magenta claro
    d570:	4859      	ldr	r0, [pc, #356]	; (d6d8 <print_current_position_cb+0x17c>)
    d572:	f01c ff73 	bl	2a45c <printk>
    printf("\n\n####Position %d #####\n",pos);
    d576:	4641      	mov	r1, r8
    d578:	4858      	ldr	r0, [pc, #352]	; (d6dc <print_current_position_cb+0x180>)
    d57a:	f01a faeb 	bl	27b54 <iprintf>
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d57e:	4b58      	ldr	r3, [pc, #352]	; (d6e0 <print_current_position_cb+0x184>)
        case 2: printk("\033[32m");       // Verde
    d580:	4858      	ldr	r0, [pc, #352]	; (d6e4 <print_current_position_cb+0x188>)
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d582:	7b1b      	ldrb	r3, [r3, #12]
    d584:	2b01      	cmp	r3, #1
    d586:	f040 8098 	bne.w	d6ba <print_current_position_cb+0x15e>
        case 2: printk("\033[32m");       // Verde
    d58a:	f01c ff67 	bl	2a45c <printk>
    if (position.gps_fixed==1) {color(2);printf("GPS Fixed  :Yes\n");}
    d58e:	4856      	ldr	r0, [pc, #344]	; (d6e8 <print_current_position_cb+0x18c>)
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d590:	2468      	movs	r4, #104	; 0x68
    d592:	4f56      	ldr	r7, [pc, #344]	; (d6ec <print_current_position_cb+0x190>)
      else {color(2); printf("GPS Fixed  :No\n");}
    d594:	f01a fade 	bl	27b54 <iprintf>
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d598:	fb04 7408 	mla	r4, r4, r8, r7
        case 13: printk("\033[95m");      // Magenta claro
    d59c:	484e      	ldr	r0, [pc, #312]	; (d6d8 <print_current_position_cb+0x17c>)
    d59e:	f01c ff5d 	bl	2a45c <printk>
    sprintf(buf_lati, "%f", C_Buffer[pos].gnss_module.latitude);
    d5a2:	68a0      	ldr	r0, [r4, #8]
    d5a4:	f7fa ff3c 	bl	8420 <__aeabi_f2d>
    d5a8:	220e      	movs	r2, #14
    d5aa:	e9cd 0100 	strd	r0, r1, [sp]
    d5ae:	4b50      	ldr	r3, [pc, #320]	; (d6f0 <print_current_position_cb+0x194>)
    d5b0:	2100      	movs	r1, #0
    d5b2:	a806      	add	r0, sp, #24
    d5b4:	f024 fb97 	bl	31ce6 <__sprintf_chk>
    sprintf(buf_long, "%f", C_Buffer[pos].gnss_module.longitude);
    d5b8:	68e0      	ldr	r0, [r4, #12]
    d5ba:	f7fa ff31 	bl	8420 <__aeabi_f2d>
    d5be:	4b4c      	ldr	r3, [pc, #304]	; (d6f0 <print_current_position_cb+0x194>)
    d5c0:	e9cd 0100 	strd	r0, r1, [sp]
    d5c4:	220e      	movs	r2, #14
    d5c6:	2100      	movs	r1, #0
    d5c8:	a80a      	add	r0, sp, #40	; 0x28
    d5ca:	f024 fb8c 	bl	31ce6 <__sprintf_chk>
    printf("https://www.google.com/maps/place/%c%c ",buf_lati[0],buf_lati[1]);
    d5ce:	f89d 2019 	ldrb.w	r2, [sp, #25]
    d5d2:	f89d 1018 	ldrb.w	r1, [sp, #24]
    d5d6:	4847      	ldr	r0, [pc, #284]	; (d6f4 <print_current_position_cb+0x198>)
    d5d8:	f01a fabc 	bl	27b54 <iprintf>
    i=2;
    d5dc:	2302      	movs	r3, #2
    while (buf_lati[i]){buf_lati[i-2]=buf_lati[i];i++;}
    d5de:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d5e2:	eb0d 0102 	add.w	r1, sp, r2
    d5e6:	f811 2c20 	ldrb.w	r2, [r1, #-32]
    d5ea:	2a00      	cmp	r2, #0
    d5ec:	d169      	bne.n	d6c2 <print_current_position_cb+0x166>
    printf("%s,",buf_lati);
    d5ee:	a906      	add	r1, sp, #24
    d5f0:	4841      	ldr	r0, [pc, #260]	; (d6f8 <print_current_position_cb+0x19c>)
    d5f2:	f01a faaf 	bl	27b54 <iprintf>
    printf("%c%c ",buf_long[0],buf_long[1]);    
    d5f6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    d5fa:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    d5fe:	483f      	ldr	r0, [pc, #252]	; (d6fc <print_current_position_cb+0x1a0>)
    d600:	f01a faa8 	bl	27b54 <iprintf>
    i=2;
    d604:	2302      	movs	r3, #2
    while (buf_long[i]){buf_long[i-2]=buf_long[i];i++;}
    d606:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d60a:	eb0d 0102 	add.w	r1, sp, r2
    d60e:	f811 2c10 	ldrb.w	r2, [r1, #-16]
    d612:	2a00      	cmp	r2, #0
    d614:	d15a      	bne.n	d6cc <print_current_position_cb+0x170>
      C_Buffer[pos].gnss_module.latitude,
    d616:	2468      	movs	r4, #104	; 0x68
    d618:	fb04 f408 	mul.w	r4, r4, r8
    printf("%s \n",buf_long);
    d61c:	a90a      	add	r1, sp, #40	; 0x28
      C_Buffer[pos].gnss_module.latitude,
    d61e:	193d      	adds	r5, r7, r4
    printf("%s \n",buf_long);
    d620:	4837      	ldr	r0, [pc, #220]	; (d700 <print_current_position_cb+0x1a4>)
    d622:	f01a fa97 	bl	27b54 <iprintf>
    printf("GNSS Position Lat=%f Long=%f UTC Epoch Unix Timestamp=%d \n",
    d626:	68a8      	ldr	r0, [r5, #8]
    d628:	f7fa fefa 	bl	8420 <__aeabi_f2d>
    d62c:	686b      	ldr	r3, [r5, #4]
    d62e:	4682      	mov	sl, r0
    d630:	9302      	str	r3, [sp, #8]
    d632:	68e8      	ldr	r0, [r5, #12]
    d634:	468b      	mov	fp, r1
    d636:	f7fa fef3 	bl	8420 <__aeabi_f2d>
    d63a:	4652      	mov	r2, sl
    d63c:	e9cd 0100 	strd	r0, r1, [sp]
    d640:	465b      	mov	r3, fp
    d642:	4830      	ldr	r0, [pc, #192]	; (d704 <print_current_position_cb+0x1a8>)
    d644:	f01a fa86 	bl	27b54 <iprintf>
    val_mv = C_Buffer[pos].analog.value;
    d648:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d64a:	a805      	add	r0, sp, #20
    val_mv = C_Buffer[pos].analog.value;
    d64c:	9305      	str	r3, [sp, #20]
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d64e:	f7ff fc87 	bl	cf60 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  Value=%d  %"PRId32"mV \n",
    d652:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    d654:	9a05      	ldr	r2, [sp, #20]
    d656:	482c      	ldr	r0, [pc, #176]	; (d708 <print_current_position_cb+0x1ac>)
    d658:	f01a fa7c 	bl	27b54 <iprintf>
    d65c:	2501      	movs	r5, #1
    d65e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
      printf("NTC %d Value=%d %3.1f C\n",
    d662:	4c2a      	ldr	r4, [pc, #168]	; (d70c <print_current_position_cb+0x1b0>)
    d664:	443e      	add	r6, r7
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d666:	b2e9      	uxtb	r1, r5
    d668:	f836 0035 	ldrh.w	r0, [r6, r5, lsl #3]
      C_Buffer[pos].ntc[i].value,
    d66c:	f936 a035 	ldrsh.w	sl, [r6, r5, lsl #3]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    d670:	f7fb fed6 	bl	9420 <ntc_temperature>
      printf("NTC %d Value=%d %3.1f C\n",
    d674:	f7fa fed4 	bl	8420 <__aeabi_f2d>
    d678:	f105 39ff 	add.w	r9, r5, #4294967295
    d67c:	e9cd 0100 	strd	r0, r1, [sp]
    d680:	4652      	mov	r2, sl
    d682:	4649      	mov	r1, r9
    d684:	4620      	mov	r0, r4
    while (i<3){
    d686:	3501      	adds	r5, #1
      printf("NTC %d Value=%d %3.1f C\n",
    d688:	f01a fa64 	bl	27b54 <iprintf>
    while (i<3){
    d68c:	2d04      	cmp	r5, #4
    d68e:	d1ea      	bne.n	d666 <print_current_position_cb+0x10a>
      printf("Digital%d  Value=%d\n",
    d690:	2368      	movs	r3, #104	; 0x68
    d692:	fb03 7708 	mla	r7, r3, r8, r7
    d696:	2100      	movs	r1, #0
    d698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    d69a:	481d      	ldr	r0, [pc, #116]	; (d710 <print_current_position_cb+0x1b4>)
    d69c:	f01a fa5a 	bl	27b54 <iprintf>
    d6a0:	2101      	movs	r1, #1
    d6a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    d6a4:	481a      	ldr	r0, [pc, #104]	; (d710 <print_current_position_cb+0x1b4>)
    d6a6:	f01a fa55 	bl	27b54 <iprintf>
        case 255: printk("\033[0m");       // Padrão (branco)
    d6aa:	481a      	ldr	r0, [pc, #104]	; (d714 <print_current_position_cb+0x1b8>)
    d6ac:	f01c fed6 	bl	2a45c <printk>
  k_mutex_unlock(&c_buffer_busy);
    d6b0:	f7ff fc50 	bl	cf54 <k_mutex_unlock.constprop.0.isra.0>
}
    d6b4:	b00f      	add	sp, #60	; 0x3c
    d6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 2: printk("\033[32m");       // Verde
    d6ba:	f01c fecf 	bl	2a45c <printk>
      else {color(2); printf("GPS Fixed  :No\n");}
    d6be:	4816      	ldr	r0, [pc, #88]	; (d718 <print_current_position_cb+0x1bc>)
    d6c0:	e766      	b.n	d590 <print_current_position_cb+0x34>
    while (buf_lati[i]){buf_lati[i-2]=buf_lati[i];i++;}
    d6c2:	3301      	adds	r3, #1
    d6c4:	f801 2c22 	strb.w	r2, [r1, #-34]
    d6c8:	b2db      	uxtb	r3, r3
    d6ca:	e788      	b.n	d5de <print_current_position_cb+0x82>
    while (buf_long[i]){buf_long[i-2]=buf_long[i];i++;}
    d6cc:	3301      	adds	r3, #1
    d6ce:	f801 2c12 	strb.w	r2, [r1, #-18]
    d6d2:	b2db      	uxtb	r3, r3
    d6d4:	e797      	b.n	d606 <print_current_position_cb+0xaa>
    d6d6:	bf00      	nop
    d6d8:	00034ffb 	.word	0x00034ffb
    d6dc:	00035001 	.word	0x00035001
    d6e0:	2000a6dc 	.word	0x2000a6dc
    d6e4:	0003501a 	.word	0x0003501a
    d6e8:	00035020 	.word	0x00035020
    d6ec:	2000b0e0 	.word	0x2000b0e0
    d6f0:	00035041 	.word	0x00035041
    d6f4:	00035044 	.word	0x00035044
    d6f8:	0003506c 	.word	0x0003506c
    d6fc:	00035066 	.word	0x00035066
    d700:	00035070 	.word	0x00035070
    d704:	00035075 	.word	0x00035075
    d708:	000350b0 	.word	0x000350b0
    d70c:	000350c9 	.word	0x000350c9
    d710:	000350e2 	.word	0x000350e2
    d714:	00034ff6 	.word	0x00034ff6
    d718:	00035031 	.word	0x00035031

0000d71c <print_current_position_cb_new>:
void print_current_position_cb_new(uint32_t pos){
    d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d720:	4605      	mov	r5, r0
    d722:	b0a0      	sub	sp, #128	; 0x80
   C_Buffer = k_malloc(size);
    d724:	2068      	movs	r0, #104	; 0x68
    d726:	f024 f960 	bl	319ea <k_malloc>
    d72a:	4604      	mov	r4, r0
   *C_Buffer=read_memory(pos);
    d72c:	4629      	mov	r1, r5
    d72e:	a804      	add	r0, sp, #16
    d730:	f7ff fd46 	bl	d1c0 <read_memory>
    d734:	2268      	movs	r2, #104	; 0x68
    d736:	a904      	add	r1, sp, #16
    d738:	4620      	mov	r0, r4
    d73a:	f024 f972 	bl	31a22 <memcpy>
    k_mutex_lock(&c_buffer_busy,K_FOREVER);
    d73e:	f04f 31ff 	mov.w	r1, #4294967295
    d742:	f04f 30ff 	mov.w	r0, #4294967295
    d746:	f7ff fbfd 	bl	cf44 <k_mutex_lock.constprop.0.isra.0>
        case 13: printk("\033[95m");      // Magenta claro
    d74a:	482b      	ldr	r0, [pc, #172]	; (d7f8 <print_current_position_cb_new+0xdc>)
    d74c:	f01c fe86 	bl	2a45c <printk>
    printf("\n\n####Position %d #####\n",pos);
    d750:	4629      	mov	r1, r5
    d752:	482a      	ldr	r0, [pc, #168]	; (d7fc <print_current_position_cb_new+0xe0>)
    d754:	f01a f9fe 	bl	27b54 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    d758:	68a0      	ldr	r0, [r4, #8]
    d75a:	f7fa fe61 	bl	8420 <__aeabi_f2d>
    d75e:	6863      	ldr	r3, [r4, #4]
    d760:	4606      	mov	r6, r0
    d762:	9302      	str	r3, [sp, #8]
    d764:	68e0      	ldr	r0, [r4, #12]
    d766:	460f      	mov	r7, r1
    d768:	f7fa fe5a 	bl	8420 <__aeabi_f2d>
    d76c:	4632      	mov	r2, r6
    d76e:	e9cd 0100 	strd	r0, r1, [sp]
    d772:	463b      	mov	r3, r7
    d774:	4822      	ldr	r0, [pc, #136]	; (d800 <print_current_position_cb_new+0xe4>)
    d776:	f01a f9ed 	bl	27b54 <iprintf>
    val_mv = C_Buffer->analog.value;
    d77a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d77c:	a81f      	add	r0, sp, #124	; 0x7c
    val_mv = C_Buffer->analog.value;
    d77e:	931f      	str	r3, [sp, #124]	; 0x7c
    adc_raw_to_millivolts_dt(&adc_channels[ANALOG_SENSOR],&val_mv);
    d780:	f7ff fbee 	bl	cf60 <adc_raw_to_millivolts_dt.constprop.0.isra.0>
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    d784:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    d788:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d78a:	481e      	ldr	r0, [pc, #120]	; (d804 <print_current_position_cb_new+0xe8>)
    d78c:	f01a f9e2 	bl	27b54 <iprintf>
    while (i<3){
    d790:	4625      	mov	r5, r4
    int i=0;
    d792:	2600      	movs	r6, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d794:	f8df 8070 	ldr.w	r8, [pc, #112]	; d808 <print_current_position_cb_new+0xec>
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d798:	1c77      	adds	r7, r6, #1
    d79a:	f8b5 0044 	ldrh.w	r0, [r5, #68]	; 0x44
    d79e:	b2f9      	uxtb	r1, r7
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d7a0:	f8d5 9040 	ldr.w	r9, [r5, #64]	; 0x40
      C_Buffer->ntc[i].value,
    d7a4:	f9b5 a044 	ldrsh.w	sl, [r5, #68]	; 0x44
      ntc_temperature(C_Buffer->ntc[i].value,(i+1)));
    d7a8:	f7fb fe3a 	bl	9420 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    d7ac:	f7fa fe38 	bl	8420 <__aeabi_f2d>
    d7b0:	4653      	mov	r3, sl
    d7b2:	e9cd 0100 	strd	r0, r1, [sp]
    d7b6:	464a      	mov	r2, r9
    d7b8:	4631      	mov	r1, r6
    d7ba:	4640      	mov	r0, r8
    d7bc:	f01a f9ca 	bl	27b54 <iprintf>
    while (i<3){
    d7c0:	2f03      	cmp	r7, #3
      i++;
    d7c2:	463e      	mov	r6, r7
    while (i<3){
    d7c4:	f105 0508 	add.w	r5, r5, #8
    d7c8:	d1e6      	bne.n	d798 <print_current_position_cb_new+0x7c>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    d7ca:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    d7ce:	2100      	movs	r1, #0
    d7d0:	480e      	ldr	r0, [pc, #56]	; (d80c <print_current_position_cb_new+0xf0>)
    d7d2:	f01a f9bf 	bl	27b54 <iprintf>
    d7d6:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    d7da:	2101      	movs	r1, #1
    d7dc:	480b      	ldr	r0, [pc, #44]	; (d80c <print_current_position_cb_new+0xf0>)
    d7de:	f01a f9b9 	bl	27b54 <iprintf>
        case 255: printk("\033[0m");       // Padrão (branco)
    d7e2:	480b      	ldr	r0, [pc, #44]	; (d810 <print_current_position_cb_new+0xf4>)
    d7e4:	f01c fe3a 	bl	2a45c <printk>
 k_free(C_Buffer);
    d7e8:	4620      	mov	r0, r4
    d7ea:	f024 f8f7 	bl	319dc <k_free>
}
    d7ee:	b020      	add	sp, #128	; 0x80
    d7f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 k_mutex_unlock(&c_buffer_busy);
    d7f4:	f7ff bbae 	b.w	cf54 <k_mutex_unlock.constprop.0.isra.0>
    d7f8:	00034ffb 	.word	0x00034ffb
    d7fc:	00035001 	.word	0x00035001
    d800:	000350f7 	.word	0x000350f7
    d804:	00035123 	.word	0x00035123
    d808:	00035149 	.word	0x00035149
    d80c:	0003516f 	.word	0x0003516f
    d810:	00034ff6 	.word	0x00034ff6

0000d814 <lorawan_tx_data>:
void lorawan_tx_data(void){
    d814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data_test[] =  { 0X00 , 0X00 , 0X00 , 0X00 , //LATITUDE
    d818:	4b61      	ldr	r3, [pc, #388]	; (d9a0 <lorawan_tx_data+0x18c>)
void lorawan_tx_data(void){
    d81a:	b08d      	sub	sp, #52	; 0x34
  char data_test[] =  { 0X00 , 0X00 , 0X00 , 0X00 , //LATITUDE
    d81c:	ac06      	add	r4, sp, #24
    d81e:	f103 0518 	add.w	r5, r3, #24
    d822:	4622      	mov	r2, r4
    d824:	6818      	ldr	r0, [r3, #0]
    d826:	6859      	ldr	r1, [r3, #4]
    d828:	3308      	adds	r3, #8
    d82a:	c203      	stmia	r2!, {r0, r1}
    d82c:	42ab      	cmp	r3, r5
    d82e:	4614      	mov	r4, r2
    d830:	d1f7      	bne.n	d822 <lorawan_tx_data+0xe>
  k_mutex_lock(&c_buffer_busy, K_FOREVER);
    d832:	f04f 31ff 	mov.w	r1, #4294967295
    d836:	f04f 30ff 	mov.w	r0, #4294967295
    d83a:	f7ff fb83 	bl	cf44 <k_mutex_lock.constprop.0.isra.0>
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d83e:	2268      	movs	r2, #104	; 0x68
  uint32_t pos=C_Buffer_Current_Position;
    d840:	4b58      	ldr	r3, [pc, #352]	; (d9a4 <lorawan_tx_data+0x190>)
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d842:	4c59      	ldr	r4, [pc, #356]	; (d9a8 <lorawan_tx_data+0x194>)
  uint32_t pos=C_Buffer_Current_Position;
    d844:	681b      	ldr	r3, [r3, #0]
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d846:	ad06      	add	r5, sp, #24
    d848:	fb02 4403 	mla	r4, r2, r3, r4
    d84c:	68a3      	ldr	r3, [r4, #8]
  float c=C_Buffer[pos].gnss_module.timestamp; //4 bytes 8 
    d84e:	6860      	ldr	r0, [r4, #4]
  float a=C_Buffer[pos].gnss_module.latitude;  //4 bytes 0..3
    d850:	9302      	str	r3, [sp, #8]
  float b=C_Buffer[pos].gnss_module.longitude; //4 bytes 4..7
    d852:	68e3      	ldr	r3, [r4, #12]
    d854:	9303      	str	r3, [sp, #12]
  float c=C_Buffer[pos].gnss_module.timestamp; //4 bytes 8 
    d856:	f7fb f97f 	bl	8b58 <__aeabi_i2f>
    d85a:	9004      	str	r0, [sp, #16]
  float d=C_Buffer[pos].analog.value;          //4 bytes 12..17
    d85c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    d85e:	f7fb f97b 	bl	8b58 <__aeabi_i2f>
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d862:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
  uint8_t f=C_Buffer[pos].digital[1].value;      //1 byte 17
    d866:	f894 b064 	ldrb.w	fp, [r4, #100]	; 0x64
  uint16_t g=C_Buffer[pos].ntc[0].value;          //2 bytes 18..19
    d86a:	f9b4 a044 	ldrsh.w	sl, [r4, #68]	; 0x44
    d86e:	f8b4 7044 	ldrh.w	r7, [r4, #68]	; 0x44
  uint16_t h=C_Buffer[pos].ntc[1].value;          //2 bytes 20..21
    d872:	f9b4 904c 	ldrsh.w	r9, [r4, #76]	; 0x4c
    d876:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d87a:	f9b4 8054 	ldrsh.w	r8, [r4, #84]	; 0x54
  float d=C_Buffer[pos].analog.value;          //4 bytes 12..17
    d87e:	9005      	str	r0, [sp, #20]
  uint16_t i=C_Buffer[pos].ntc[2].value;          //2 bytes 22..23
    d880:	9301      	str	r3, [sp, #4]
  k_mutex_unlock(&c_buffer_busy);
    d882:	2404      	movs	r4, #4
    d884:	f7ff fb66 	bl	cf54 <k_mutex_unlock.constprop.0.isra.0>
    d888:	462b      	mov	r3, r5
    d88a:	f10d 0c08 	add.w	ip, sp, #8
    d88e:	a803      	add	r0, sp, #12
    d890:	a904      	add	r1, sp, #16
    d892:	aa05      	add	r2, sp, #20
     data_test[i]    =*(ptr_lati      + i);
    d894:	f81c eb01 	ldrb.w	lr, [ip], #1
  for (int i = 0; i < sizeof(float); i++) {
    d898:	3c01      	subs	r4, #1
     data_test[i]    =*(ptr_lati      + i);
    d89a:	f803 eb01 	strb.w	lr, [r3], #1
     data_test[i+4]  =*(ptr_long      + i);
    d89e:	f810 eb01 	ldrb.w	lr, [r0], #1
    d8a2:	f883 e003 	strb.w	lr, [r3, #3]
     data_test[i+8]  =*(ptr_timestamp + i);
    d8a6:	f811 eb01 	ldrb.w	lr, [r1], #1
    d8aa:	f883 e007 	strb.w	lr, [r3, #7]
     data_test[i+12] =*(ptr_analog    + i);
    d8ae:	f812 eb01 	ldrb.w	lr, [r2], #1
    d8b2:	f883 e00b 	strb.w	lr, [r3, #11]
  for (int i = 0; i < sizeof(float); i++) {
    d8b6:	d1ed      	bne.n	d894 <lorawan_tx_data+0x80>
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d8b8:	4b3c      	ldr	r3, [pc, #240]	; (d9ac <lorawan_tx_data+0x198>)
        case 12: printk("\033[94m");      // Azul claro
    d8ba:	483d      	ldr	r0, [pc, #244]	; (d9b0 <lorawan_tx_data+0x19c>)
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d8bc:	791b      	ldrb	r3, [r3, #4]
     data_test[21]    =*(ptr_ntc1 + 1); //first LSB and after MSB - little endian
    d8be:	f3c6 2607 	ubfx	r6, r6, #8, #8
     data_test[16] = sensor_status.number[SENSOR_DIG_4]; //ALARM COUNTER
    d8c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d8c6:	9b01      	ldr	r3, [sp, #4]
     data_test[19]    =*(ptr_ntc0 + 1); //first LSB and after MSB - little endian
    d8c8:	f3c7 2707 	ubfx	r7, r7, #8, #8
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d8cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
     data_test[21]    =*(ptr_ntc1 + 1); //first LSB and after MSB - little endian
    d8d0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
     data_test[23]    =*(ptr_ntc2 + 1); //first LSB and after MSB - little endian
    d8d4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
     data_test[17] =*(ptr_digi1);
    d8d8:	f88d b029 	strb.w	fp, [sp, #41]	; 0x29
     data_test[18]    =*(ptr_ntc0 + 0); //first LSB and after MSB - little endian
    d8dc:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
     data_test[19]    =*(ptr_ntc0 + 1); //first LSB and after MSB - little endian
    d8e0:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
     data_test[20]    =*(ptr_ntc1 + 0); //first LSB and after MSB - little endian
    d8e4:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
     data_test[22]    =*(ptr_ntc2 + 0); //first LSB and after MSB - little endian
    d8e8:	f88d 802e 	strb.w	r8, [sp, #46]	; 0x2e
        case 12: printk("\033[94m");      // Azul claro
    d8ec:	f01c fdb6 	bl	2a45c <printk>
 printk("HELIUM PAYLOAD: ");
    d8f0:	4830      	ldr	r0, [pc, #192]	; (d9b4 <lorawan_tx_data+0x1a0>)
    d8f2:	f01c fdb3 	bl	2a45c <printk>
     printk("%02X ",data_test[h]);
    d8f6:	4e30      	ldr	r6, [pc, #192]	; (d9b8 <lorawan_tx_data+0x1a4>)
    d8f8:	4630      	mov	r0, r6
    d8fa:	f815 1b01 	ldrb.w	r1, [r5], #1
 for (int h = 0; h < sizeof(data_test); h++) {
    d8fe:	3401      	adds	r4, #1
     printk("%02X ",data_test[h]);
    d900:	f01c fdac 	bl	2a45c <printk>
 for (int h = 0; h < sizeof(data_test); h++) {
    d904:	2c18      	cmp	r4, #24
    d906:	d1f7      	bne.n	d8f8 <lorawan_tx_data+0xe4>
        case 10: printk("\033[92m");      // Verde claro
    d908:	482c      	ldr	r0, [pc, #176]	; (d9bc <lorawan_tx_data+0x1a8>)
    d90a:	f01c fda7 	bl	2a45c <printk>
  data_sent_cnt++;
    d90e:	4d2c      	ldr	r5, [pc, #176]	; (d9c0 <lorawan_tx_data+0x1ac>)
  printk("\nSending payload...\n");
    d910:	482c      	ldr	r0, [pc, #176]	; (d9c4 <lorawan_tx_data+0x1b0>)
    d912:	f01c fda3 	bl	2a45c <printk>
        case 255: printk("\033[0m");       // Padrão (branco)
    d916:	482c      	ldr	r0, [pc, #176]	; (d9c8 <lorawan_tx_data+0x1b4>)
    d918:	f01c fda0 	bl	2a45c <printk>
  data_sent_cnt++;
    d91c:	682b      	ldr	r3, [r5, #0]
  ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d91e:	a906      	add	r1, sp, #24
  data_sent_cnt++;
    d920:	3301      	adds	r3, #1
    d922:	602b      	str	r3, [r5, #0]
  ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d924:	4622      	mov	r2, r4
    d926:	2300      	movs	r3, #0
    d928:	2002      	movs	r0, #2
    d92a:	f004 fe95 	bl	12658 <lorawan_send>
		if (ret < 0) {
    d92e:	1e01      	subs	r1, r0, #0
    d930:	da2a      	bge.n	d988 <lorawan_tx_data+0x174>
			printk("lorawan_send confirm failed -trying again : %d\n\n", ret);
    d932:	4826      	ldr	r0, [pc, #152]	; (d9cc <lorawan_tx_data+0x1b8>)
    d934:	f01c fd92 	bl	2a45c <printk>
    d938:	2606      	movs	r6, #6
        }else{printk("Data send failed-trying again ret=%d \n ",ret);
    d93a:	4f25      	ldr	r7, [pc, #148]	; (d9d0 <lorawan_tx_data+0x1bc>)
       ret = lorawan_send(2, data_test, sizeof(data_test),LORAWAN_MSG_UNCONFIRMED);
    d93c:	2218      	movs	r2, #24
    d93e:	2300      	movs	r3, #0
    d940:	2002      	movs	r0, #2
    d942:	eb0d 0102 	add.w	r1, sp, r2
    d946:	f004 fe87 	bl	12658 <lorawan_send>
       if (ret==0){
    d94a:	4604      	mov	r4, r0
    d94c:	b970      	cbnz	r0, d96c <lorawan_tx_data+0x158>
        printk("Payload Data sent %d\n",data_sent_cnt);
    d94e:	6829      	ldr	r1, [r5, #0]
    d950:	4820      	ldr	r0, [pc, #128]	; (d9d4 <lorawan_tx_data+0x1c0>)
    d952:	f01c fd83 	bl	2a45c <printk>
    if(data_sent_cnt>=DATA_SENT_JOIN_AGAIN){lorawan_reconnect=1;data_sent_cnt=0;}
    d956:	682b      	ldr	r3, [r5, #0]
    d958:	2b27      	cmp	r3, #39	; 0x27
    d95a:	d904      	bls.n	d966 <lorawan_tx_data+0x152>
    d95c:	2201      	movs	r2, #1
    d95e:	4b1e      	ldr	r3, [pc, #120]	; (d9d8 <lorawan_tx_data+0x1c4>)
    d960:	701a      	strb	r2, [r3, #0]
    d962:	2300      	movs	r3, #0
    d964:	602b      	str	r3, [r5, #0]
}
    d966:	b00d      	add	sp, #52	; 0x34
    d968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else{printk("Data send failed-trying again ret=%d \n ",ret);
    d96c:	4601      	mov	r1, r0
    d96e:	4638      	mov	r0, r7
    d970:	f01c fd74 	bl	2a45c <printk>
	return z_impl_k_sleep(timeout);
    d974:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    d978:	2100      	movs	r1, #0
    d97a:	f018 fecf 	bl	2671c <z_impl_k_sleep>
      while(ret<0 && nt<=RETRY){ 
    d97e:	2c00      	cmp	r4, #0
    d980:	dae9      	bge.n	d956 <lorawan_tx_data+0x142>
    d982:	3e01      	subs	r6, #1
    d984:	d1da      	bne.n	d93c <lorawan_tx_data+0x128>
    d986:	e7e6      	b.n	d956 <lorawan_tx_data+0x142>
        case 10: printk("\033[92m");      // Verde claro
    d988:	480c      	ldr	r0, [pc, #48]	; (d9bc <lorawan_tx_data+0x1a8>)
    d98a:	f01c fd67 	bl	2a45c <printk>
		        printk("Payload Data sent %d\n\n",data_sent_cnt);
    d98e:	6829      	ldr	r1, [r5, #0]
    d990:	4812      	ldr	r0, [pc, #72]	; (d9dc <lorawan_tx_data+0x1c8>)
    d992:	f01c fd63 	bl	2a45c <printk>
        case 255: printk("\033[0m");       // Padrão (branco)
    d996:	480c      	ldr	r0, [pc, #48]	; (d9c8 <lorawan_tx_data+0x1b4>)
    d998:	f01c fd60 	bl	2a45c <printk>
                break;
    d99c:	e7db      	b.n	d956 <lorawan_tx_data+0x142>
    d99e:	bf00      	nop
    d9a0:	00033416 	.word	0x00033416
    d9a4:	2002f9e0 	.word	0x2002f9e0
    d9a8:	2000b0e0 	.word	0x2000b0e0
    d9ac:	200311be 	.word	0x200311be
    d9b0:	00035191 	.word	0x00035191
    d9b4:	00035197 	.word	0x00035197
    d9b8:	000351a8 	.word	0x000351a8
    d9bc:	000351ae 	.word	0x000351ae
    d9c0:	2000a6d8 	.word	0x2000a6d8
    d9c4:	000351b4 	.word	0x000351b4
    d9c8:	00034ff6 	.word	0x00034ff6
    d9cc:	000351c9 	.word	0x000351c9
    d9d0:	00035210 	.word	0x00035210
    d9d4:	000351fa 	.word	0x000351fa
    d9d8:	200311d0 	.word	0x200311d0
    d9dc:	00035238 	.word	0x00035238

0000d9e0 <setup_initialize>:
void setup_initialize(void){
    d9e0:	b570      	push	{r4, r5, r6, lr}
    d9e2:	b088      	sub	sp, #32
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d9e4:	466b      	mov	r3, sp
    d9e6:	4a25      	ldr	r2, [pc, #148]	; (da7c <setup_initialize+0x9c>)
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d9e8:	ac04      	add	r4, sp, #16
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d9ea:	6810      	ldr	r0, [r2, #0]
    d9ec:	6851      	ldr	r1, [r2, #4]
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d9ee:	4a24      	ldr	r2, [pc, #144]	; (da80 <setup_initialize+0xa0>)
  uint8_t dev[8] = LORAWAN_DEV_EUI_HELIUM;
    d9f0:	c303      	stmia	r3!, {r0, r1}
  uint8_t join[8] = LORAWAN_JOIN_EUI_HELIUM;
    d9f2:	6810      	ldr	r0, [r2, #0]
    d9f4:	6851      	ldr	r1, [r2, #4]
    d9f6:	4622      	mov	r2, r4
    d9f8:	c303      	stmia	r3!, {r0, r1}
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    d9fa:	4b22      	ldr	r3, [pc, #136]	; (da84 <setup_initialize+0xa4>)
    d9fc:	f103 0610 	add.w	r6, r3, #16
    da00:	4625      	mov	r5, r4
    da02:	6818      	ldr	r0, [r3, #0]
    da04:	6859      	ldr	r1, [r3, #4]
    da06:	3308      	adds	r3, #8
    da08:	c503      	stmia	r5!, {r0, r1}
    da0a:	42b3      	cmp	r3, r6
    da0c:	462c      	mov	r4, r5
    da0e:	d1f7      	bne.n	da00 <setup_initialize+0x20>
  for(i=0;i<=7;i++){Initial_Setup.dev[i] = dev[i];} 
    da10:	4668      	mov	r0, sp
  uint8_t key[16] = LORAWAN_APP_KEY_HELIUM;
    da12:	2308      	movs	r3, #8
    da14:	491c      	ldr	r1, [pc, #112]	; (da88 <setup_initialize+0xa8>)
  for(i=0;i<=7;i++){Initial_Setup.dev[i] = dev[i];} 
    da16:	f810 4b01 	ldrb.w	r4, [r0], #1
    da1a:	3b01      	subs	r3, #1
    da1c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    da20:	f801 4f01 	strb.w	r4, [r1, #1]!
    da24:	d1f7      	bne.n	da16 <setup_initialize+0x36>
    da26:	2308      	movs	r3, #8
    da28:	4918      	ldr	r1, [pc, #96]	; (da8c <setup_initialize+0xac>)
    da2a:	a802      	add	r0, sp, #8
  for(i=0;i<=7;i++){Initial_Setup.join[i] = join[i];} 
    da2c:	f810 4b01 	ldrb.w	r4, [r0], #1
    da30:	3b01      	subs	r3, #1
    da32:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    da36:	f801 4f01 	strb.w	r4, [r1, #1]!
    da3a:	d1f7      	bne.n	da2c <setup_initialize+0x4c>
    da3c:	4611      	mov	r1, r2
  for(i=0;i<=15;i++){Initial_Setup.key[i] = key[i];} 
    da3e:	461a      	mov	r2, r3
    da40:	4813      	ldr	r0, [pc, #76]	; (da90 <setup_initialize+0xb0>)
    da42:	3201      	adds	r2, #1
    da44:	f811 4b01 	ldrb.w	r4, [r1], #1
    da48:	b2d2      	uxtb	r2, r2
    da4a:	2a10      	cmp	r2, #16
    da4c:	f800 4f01 	strb.w	r4, [r0, #1]!
    da50:	d1f7      	bne.n	da42 <setup_initialize+0x62>
  for(i=0;i<=15;i++){Initial_Setup.nwk_key[i] = 0;} 
    da52:	2200      	movs	r2, #0
    da54:	490f      	ldr	r1, [pc, #60]	; (da94 <setup_initialize+0xb4>)
    da56:	3301      	adds	r3, #1
    da58:	b2db      	uxtb	r3, r3
    da5a:	2b10      	cmp	r3, #16
    da5c:	f801 2f01 	strb.w	r2, [r1, #1]!
    da60:	d1f9      	bne.n	da56 <setup_initialize+0x76>
  Initial_Setup.joined=OFF;
    da62:	4b0d      	ldr	r3, [pc, #52]	; (da98 <setup_initialize+0xb8>)
  Initial_Setup.led_blink_time=RUN_LED_BLINK_INTERVAL;
    da64:	490d      	ldr	r1, [pc, #52]	; (da9c <setup_initialize+0xbc>)
  Initial_Setup.turn_angle[3]=0;
    da66:	e9c3 2202 	strd	r2, r2, [r3, #8]
  Initial_Setup.joined=OFF;
    da6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  Initial_Setup.dev_nonce=0;
    da6e:	645a      	str	r2, [r3, #68]	; 0x44
  Initial_Setup.led_blink_time=RUN_LED_BLINK_INTERVAL;
    da70:	6019      	str	r1, [r3, #0]
  Initial_Setup.output_port=0;
    da72:	711a      	strb	r2, [r3, #4]
  Initial_Setup.turn_angle[0]=0;
    da74:	80da      	strh	r2, [r3, #6]
  Initial_Setup.turn_speed[2]=0;
    da76:	821a      	strh	r2, [r3, #16]
}
    da78:	b008      	add	sp, #32
    da7a:	bd70      	pop	{r4, r5, r6, pc}
    da7c:	0003524f 	.word	0x0003524f
    da80:	00035258 	.word	0x00035258
    da84:	00035261 	.word	0x00035261
    da88:	2000b0a5 	.word	0x2000b0a5
    da8c:	2000b0ad 	.word	0x2000b0ad
    da90:	2000b0b5 	.word	0x2000b0b5
    da94:	2000b0c5 	.word	0x2000b0c5
    da98:	2000b094 	.word	0x2000b094
    da9c:	000a00c8 	.word	0x000a00c8

0000daa0 <print_setup>:
void print_setup(void){
    daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  printk("Led Blink Time      : %d ms\n",Initial_Setup.led_blink_time);
    daa2:	4c2f      	ldr	r4, [pc, #188]	; (db60 <print_setup+0xc0>)
    daa4:	482f      	ldr	r0, [pc, #188]	; (db64 <print_setup+0xc4>)
    daa6:	8821      	ldrh	r1, [r4, #0]
    daa8:	f01c fcd8 	bl	2a45c <printk>
	  printk("Interval UpLink Time: %d minutes\n",Initial_Setup.interval_uplink);
    daac:	8861      	ldrh	r1, [r4, #2]
    daae:	482e      	ldr	r0, [pc, #184]	; (db68 <print_setup+0xc8>)
    dab0:	f01c fcd4 	bl	2a45c <printk>
    printk("DEV     : ");
    dab4:	482d      	ldr	r0, [pc, #180]	; (db6c <print_setup+0xcc>)
    dab6:	f01c fcd1 	bl	2a45c <printk>
    for(int i=0;i<=7;i++){printk("%02X ",Initial_Setup.dev[i]);}
    daba:	2500      	movs	r5, #0
    dabc:	4f2c      	ldr	r7, [pc, #176]	; (db70 <print_setup+0xd0>)
    dabe:	f104 0611 	add.w	r6, r4, #17
    dac2:	4638      	mov	r0, r7
    dac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    dac8:	3501      	adds	r5, #1
    daca:	f01c fcc7 	bl	2a45c <printk>
    dace:	2d08      	cmp	r5, #8
    dad0:	d1f7      	bne.n	dac2 <print_setup+0x22>
    printk("\n");
    dad2:	4828      	ldr	r0, [pc, #160]	; (db74 <print_setup+0xd4>)
    dad4:	f01c fcc2 	bl	2a45c <printk>
    printk("JOIN    : ");
    dad8:	4827      	ldr	r0, [pc, #156]	; (db78 <print_setup+0xd8>)
    dada:	f01c fcbf 	bl	2a45c <printk>
    for(int i=0;i<=7;i++){printk("%02X ",Initial_Setup.join[i]);}
    dade:	2500      	movs	r5, #0
    dae0:	4e26      	ldr	r6, [pc, #152]	; (db7c <print_setup+0xdc>)
    dae2:	4f23      	ldr	r7, [pc, #140]	; (db70 <print_setup+0xd0>)
    dae4:	4638      	mov	r0, r7
    dae6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    daea:	3501      	adds	r5, #1
    daec:	f01c fcb6 	bl	2a45c <printk>
    daf0:	2d08      	cmp	r5, #8
    daf2:	d1f7      	bne.n	dae4 <print_setup+0x44>
    printk("\n");
    daf4:	481f      	ldr	r0, [pc, #124]	; (db74 <print_setup+0xd4>)
    daf6:	f01c fcb1 	bl	2a45c <printk>
    printk("KEY     : ");
    dafa:	4821      	ldr	r0, [pc, #132]	; (db80 <print_setup+0xe0>)
    dafc:	f01c fcae 	bl	2a45c <printk>
    for(int i=0;i<=15;i++){printk("%02X ",Initial_Setup.key[i]);}
    db00:	2500      	movs	r5, #0
    db02:	4e20      	ldr	r6, [pc, #128]	; (db84 <print_setup+0xe4>)
    db04:	4f1a      	ldr	r7, [pc, #104]	; (db70 <print_setup+0xd0>)
    db06:	4638      	mov	r0, r7
    db08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    db0c:	3501      	adds	r5, #1
    db0e:	f01c fca5 	bl	2a45c <printk>
    db12:	2d10      	cmp	r5, #16
    db14:	d1f7      	bne.n	db06 <print_setup+0x66>
    printk("\n");
    db16:	4817      	ldr	r0, [pc, #92]	; (db74 <print_setup+0xd4>)
    db18:	f01c fca0 	bl	2a45c <printk>
    printk("NWK_KEY : ");
    db1c:	481a      	ldr	r0, [pc, #104]	; (db88 <print_setup+0xe8>)
    db1e:	f01c fc9d 	bl	2a45c <printk>
    for(int i=0;i<=15;i++){printk("%02X ",Initial_Setup.nwk_key[i]);}
    db22:	2500      	movs	r5, #0
    db24:	4e19      	ldr	r6, [pc, #100]	; (db8c <print_setup+0xec>)
    db26:	4f12      	ldr	r7, [pc, #72]	; (db70 <print_setup+0xd0>)
    db28:	4638      	mov	r0, r7
    db2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    db2e:	3501      	adds	r5, #1
    db30:	f01c fc94 	bl	2a45c <printk>
    db34:	2d10      	cmp	r5, #16
    db36:	d1f7      	bne.n	db28 <print_setup+0x88>
    printk("\n");
    db38:	480e      	ldr	r0, [pc, #56]	; (db74 <print_setup+0xd4>)
    db3a:	f01c fc8f 	bl	2a45c <printk>
    printk("DEV_NOUNCE: %08X\n",Initial_Setup.dev_nonce);
    db3e:	4814      	ldr	r0, [pc, #80]	; (db90 <print_setup+0xf0>)
    db40:	6c61      	ldr	r1, [r4, #68]	; 0x44
    db42:	f01c fc8b 	bl	2a45c <printk>
    if(Initial_Setup.joined==1){printk("JOIN = ON");}else{printk("JOIN = OFF");}
    db46:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    db4a:	2b01      	cmp	r3, #1
    db4c:	bf0c      	ite	eq
    db4e:	4811      	ldreq	r0, [pc, #68]	; (db94 <print_setup+0xf4>)
    db50:	4811      	ldrne	r0, [pc, #68]	; (db98 <print_setup+0xf8>)
    db52:	f01c fc83 	bl	2a45c <printk>
}
    db56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printk("\n");
    db5a:	4806      	ldr	r0, [pc, #24]	; (db74 <print_setup+0xd4>)
    db5c:	f01c bc7e 	b.w	2a45c <printk>
    db60:	2000b094 	.word	0x2000b094
    db64:	00035272 	.word	0x00035272
    db68:	000348e9 	.word	0x000348e9
    db6c:	0003528f 	.word	0x0003528f
    db70:	000351a8 	.word	0x000351a8
    db74:	000349e8 	.word	0x000349e8
    db78:	0003529a 	.word	0x0003529a
    db7c:	2000b0ad 	.word	0x2000b0ad
    db80:	000352a5 	.word	0x000352a5
    db84:	2000b0b5 	.word	0x2000b0b5
    db88:	000352b0 	.word	0x000352b0
    db8c:	2000b0c5 	.word	0x2000b0c5
    db90:	000352bb 	.word	0x000352bb
    db94:	000352cd 	.word	0x000352cd
    db98:	000352d7 	.word	0x000352d7

0000db9c <color>:
    switch (color) {
    db9c:	280f      	cmp	r0, #15
    db9e:	d80c      	bhi.n	dbba <color+0x1e>
    dba0:	3801      	subs	r0, #1
    dba2:	280e      	cmp	r0, #14
    dba4:	d80b      	bhi.n	dbbe <color+0x22>
    dba6:	e8df f000 	tbb	[pc, r0]
    dbaa:	0f0d      	.short	0x0f0d
    dbac:	17151311 	.word	0x17151311
    dbb0:	1f1d1b19 	.word	0x1f1d1b19
    dbb4:	27252321 	.word	0x27252321
    dbb8:	29          	.byte	0x29
    dbb9:	00          	.byte	0x00
    dbba:	28ff      	cmp	r0, #255	; 0xff
    dbbc:	d120      	bne.n	dc00 <color+0x64>
        case 0: printk("\033[0m");        // Preto
    dbbe:	4811      	ldr	r0, [pc, #68]	; (dc04 <color+0x68>)
        case 15: printk("\033[97m");      // Branco claro
    dbc0:	f01c bc4c 	b.w	2a45c <printk>
        case 1: printk("\033[31m");       // Vermelho
    dbc4:	4810      	ldr	r0, [pc, #64]	; (dc08 <color+0x6c>)
    dbc6:	e7fb      	b.n	dbc0 <color+0x24>
        case 2: printk("\033[32m");       // Verde
    dbc8:	4810      	ldr	r0, [pc, #64]	; (dc0c <color+0x70>)
    dbca:	e7f9      	b.n	dbc0 <color+0x24>
        case 3: printk("\033[33m");       // Amarelo
    dbcc:	4810      	ldr	r0, [pc, #64]	; (dc10 <color+0x74>)
    dbce:	e7f7      	b.n	dbc0 <color+0x24>
        case 4: printk("\033[34m");       // Azul
    dbd0:	4810      	ldr	r0, [pc, #64]	; (dc14 <color+0x78>)
    dbd2:	e7f5      	b.n	dbc0 <color+0x24>
        case 5: printk("\033[35m");       // Magenta
    dbd4:	4810      	ldr	r0, [pc, #64]	; (dc18 <color+0x7c>)
    dbd6:	e7f3      	b.n	dbc0 <color+0x24>
        case 6: printk("\033[36m");       // Ciano
    dbd8:	4810      	ldr	r0, [pc, #64]	; (dc1c <color+0x80>)
    dbda:	e7f1      	b.n	dbc0 <color+0x24>
        case 7: printk("\033[37m");       // Branco
    dbdc:	4810      	ldr	r0, [pc, #64]	; (dc20 <color+0x84>)
    dbde:	e7ef      	b.n	dbc0 <color+0x24>
        case 8: printk("\033[90m");       // Cinza claro
    dbe0:	4810      	ldr	r0, [pc, #64]	; (dc24 <color+0x88>)
    dbe2:	e7ed      	b.n	dbc0 <color+0x24>
        case 9: printk("\033[91m");       // Vermelho claro
    dbe4:	4810      	ldr	r0, [pc, #64]	; (dc28 <color+0x8c>)
    dbe6:	e7eb      	b.n	dbc0 <color+0x24>
        case 10: printk("\033[92m");      // Verde claro
    dbe8:	4810      	ldr	r0, [pc, #64]	; (dc2c <color+0x90>)
    dbea:	e7e9      	b.n	dbc0 <color+0x24>
        case 11: printk("\033[93m");      // Amarelo claro
    dbec:	4810      	ldr	r0, [pc, #64]	; (dc30 <color+0x94>)
    dbee:	e7e7      	b.n	dbc0 <color+0x24>
        case 12: printk("\033[94m");      // Azul claro
    dbf0:	4810      	ldr	r0, [pc, #64]	; (dc34 <color+0x98>)
    dbf2:	e7e5      	b.n	dbc0 <color+0x24>
        case 13: printk("\033[95m");      // Magenta claro
    dbf4:	4810      	ldr	r0, [pc, #64]	; (dc38 <color+0x9c>)
    dbf6:	e7e3      	b.n	dbc0 <color+0x24>
        case 14: printk("\033[96m");      // Ciano claro
    dbf8:	4810      	ldr	r0, [pc, #64]	; (dc3c <color+0xa0>)
    dbfa:	e7e1      	b.n	dbc0 <color+0x24>
        case 15: printk("\033[97m");      // Branco claro
    dbfc:	4810      	ldr	r0, [pc, #64]	; (dc40 <color+0xa4>)
    dbfe:	e7df      	b.n	dbc0 <color+0x24>
}
    dc00:	4770      	bx	lr
    dc02:	bf00      	nop
    dc04:	00034ff6 	.word	0x00034ff6
    dc08:	000352e2 	.word	0x000352e2
    dc0c:	0003501a 	.word	0x0003501a
    dc10:	000352e8 	.word	0x000352e8
    dc14:	000352ee 	.word	0x000352ee
    dc18:	000352f4 	.word	0x000352f4
    dc1c:	00034fb0 	.word	0x00034fb0
    dc20:	000352fa 	.word	0x000352fa
    dc24:	00035300 	.word	0x00035300
    dc28:	00035306 	.word	0x00035306
    dc2c:	000351ae 	.word	0x000351ae
    dc30:	0003530c 	.word	0x0003530c
    dc34:	00035191 	.word	0x00035191
    dc38:	00034ffb 	.word	0x00034ffb
    dc3c:	00035312 	.word	0x00035312
    dc40:	00035318 	.word	0x00035318

0000dc44 <executeCommand>:
    {"1", commandFunc1},
    {"2", commandFunc2},
    {"3", commandFunc3}
};

void executeCommand(char *commandString, uint16_t param) {
    dc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc48:	4d0e      	ldr	r5, [pc, #56]	; (dc84 <executeCommand+0x40>)
    dc4a:	4606      	mov	r6, r0
    dc4c:	460f      	mov	r7, r1
    int i;
    for (i = 0; i < MAX_COMMANDS; i++) {
    dc4e:	2400      	movs	r4, #0
    dc50:	46a8      	mov	r8, r5
        if (strncmp(commands[i].command, commandString, MAX_COMMAND_LENGTH) == 0) {
    dc52:	2202      	movs	r2, #2
    dc54:	4631      	mov	r1, r6
    dc56:	4628      	mov	r0, r5
    dc58:	f024 f874 	bl	31d44 <strncmp>
    dc5c:	b938      	cbnz	r0, dc6e <executeCommand+0x2a>
            commands[i].function(param);
    dc5e:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    dc62:	4638      	mov	r0, r7
    dc64:	f8d8 3004 	ldr.w	r3, [r8, #4]
            return;
        }
    }
    
    printf("Command invalid\n");
}
    dc68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            commands[i].function(param);
    dc6c:	4718      	bx	r3
    for (i = 0; i < MAX_COMMANDS; i++) {
    dc6e:	3401      	adds	r4, #1
    dc70:	2c0a      	cmp	r4, #10
    dc72:	f105 0508 	add.w	r5, r5, #8
    dc76:	d1ec      	bne.n	dc52 <executeCommand+0xe>
    printf("Command invalid\n");
    dc78:	4803      	ldr	r0, [pc, #12]	; (dc88 <executeCommand+0x44>)
}
    dc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printf("Command invalid\n");
    dc7e:	f019 bf69 	b.w	27b54 <iprintf>
    dc82:	bf00      	nop
    dc84:	20008474 	.word	0x20008474
    dc88:	0003531e 	.word	0x0003531e

0000dc8c <cmd_interpreter_pwd>:
void cmd_interpreter_pwd(uint8_t *data, uint8_t len, uint8_t *password) {
    dc8c:	b530      	push	{r4, r5, lr}
    dc8e:	4615      	mov	r5, r2
    char password_definition[] = {'1', '2', '3', '4', '5', '6'};
    dc90:	4b0f      	ldr	r3, [pc, #60]	; (dcd0 <cmd_interpreter_pwd+0x44>)
void cmd_interpreter_pwd(uint8_t *data, uint8_t len, uint8_t *password) {
    dc92:	4604      	mov	r4, r0
    char password_definition[] = {'1', '2', '3', '4', '5', '6'};
    dc94:	6818      	ldr	r0, [r3, #0]
void cmd_interpreter_pwd(uint8_t *data, uint8_t len, uint8_t *password) {
    dc96:	b085      	sub	sp, #20
    char password_definition[] = {'1', '2', '3', '4', '5', '6'};
    dc98:	889b      	ldrh	r3, [r3, #4]
    dc9a:	9002      	str	r0, [sp, #8]

    
    if (memcmp(password, password_definition, sizeof(password_definition)) != 0) {
    dc9c:	2206      	movs	r2, #6
    dc9e:	4628      	mov	r0, r5
    dca0:	a902      	add	r1, sp, #8
    char password_definition[] = {'1', '2', '3', '4', '5', '6'};
    dca2:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (memcmp(password, password_definition, sizeof(password_definition)) != 0) {
    dca6:	f023 feac 	bl	31a02 <memcmp>
    dcaa:	4605      	mov	r5, r0
    dcac:	b120      	cbz	r0, dcb8 <cmd_interpreter_pwd+0x2c>
        printk("Wrong Password\n");
    dcae:	4809      	ldr	r0, [pc, #36]	; (dcd4 <cmd_interpreter_pwd+0x48>)
    dcb0:	f01c fbd4 	bl	2a45c <printk>
    command[MAX_COMMAND_LENGTH - 1] = '\0';

    uint16_t param = data[MAX_COMMAND_LENGTH];

    executeCommand(command, param);
}
    dcb4:	b005      	add	sp, #20
    dcb6:	bd30      	pop	{r4, r5, pc}
    strncpy(command, (char *)data, MAX_COMMAND_LENGTH - 1);
    dcb8:	4621      	mov	r1, r4
    dcba:	2201      	movs	r2, #1
    dcbc:	a801      	add	r0, sp, #4
    dcbe:	f024 f853 	bl	31d68 <strncpy>
    executeCommand(command, param);
    dcc2:	78a1      	ldrb	r1, [r4, #2]
    dcc4:	a801      	add	r0, sp, #4
    command[MAX_COMMAND_LENGTH - 1] = '\0';
    dcc6:	f88d 5005 	strb.w	r5, [sp, #5]
    executeCommand(command, param);
    dcca:	f7ff ffbb 	bl	dc44 <executeCommand>
    dcce:	e7f1      	b.n	dcb4 <cmd_interpreter_pwd+0x28>
    dcd0:	0003533f 	.word	0x0003533f
    dcd4:	0003532f 	.word	0x0003532f

0000dcd8 <test_command>:


void test_command(void) {
    dcd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[] = {'1', 0x00,0x0A};
    dcda:	4b0b      	ldr	r3, [pc, #44]	; (dd08 <test_command+0x30>)
    uint8_t len = sizeof(data) / sizeof(data[0]);

    uint8_t password_sent[] = {'1', '2', '3', '4', '5', '6'};
    cmd_interpreter_pwd(data, len, password_sent);
    dcdc:	2103      	movs	r1, #3
    uint8_t data[] = {'1', 0x00,0x0A};
    dcde:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    dce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    dce4:	f8ad 2004 	strh.w	r2, [sp, #4]
    dce8:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t password_sent[] = {'1', '2', '3', '4', '5', '6'};
    dcec:	4b07      	ldr	r3, [pc, #28]	; (dd0c <test_command+0x34>)
    cmd_interpreter_pwd(data, len, password_sent);
    dcee:	aa02      	add	r2, sp, #8
    uint8_t password_sent[] = {'1', '2', '3', '4', '5', '6'};
    dcf0:	6818      	ldr	r0, [r3, #0]
    dcf2:	889b      	ldrh	r3, [r3, #4]
    dcf4:	9002      	str	r0, [sp, #8]
    cmd_interpreter_pwd(data, len, password_sent);
    dcf6:	a801      	add	r0, sp, #4
    uint8_t password_sent[] = {'1', '2', '3', '4', '5', '6'};
    dcf8:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd_interpreter_pwd(data, len, password_sent);
    dcfc:	f7ff ffc6 	bl	dc8c <cmd_interpreter_pwd>
}
    dd00:	b005      	add	sp, #20
    dd02:	f85d fb04 	ldr.w	pc, [sp], #4
    dd06:	bf00      	nop
    dd08:	000333f8 	.word	0x000333f8
    dd0c:	0003533f 	.word	0x0003533f

0000dd10 <cmd_interpreter>:
Data_Return cmd_interpreter(uint8_t *data,uint8_t len){
    dd10:	b570      	push	{r4, r5, r6, lr}
  buf.len=0;
    dd12:	2300      	movs	r3, #0
Data_Return cmd_interpreter(uint8_t *data,uint8_t len){
    dd14:	460e      	mov	r6, r1
  buf.len=0;
    dd16:	4c52      	ldr	r4, [pc, #328]	; (de60 <cmd_interpreter+0x150>)
Data_Return cmd_interpreter(uint8_t *data,uint8_t len){
    dd18:	4605      	mov	r5, r0
        case 4: printk("\033[34m");       // Azul
    dd1a:	4852      	ldr	r0, [pc, #328]	; (de64 <cmd_interpreter+0x154>)
  buf.len=0;
    dd1c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        case 4: printk("\033[34m");       // Azul
    dd20:	f01c fb9c 	bl	2a45c <printk>
  	switch(data[0]){
    dd24:	7833      	ldrb	r3, [r6, #0]
    dd26:	2b39      	cmp	r3, #57	; 0x39
    dd28:	d80b      	bhi.n	dd42 <cmd_interpreter+0x32>
    dd2a:	2b2f      	cmp	r3, #47	; 0x2f
    dd2c:	d90d      	bls.n	dd4a <cmd_interpreter+0x3a>
    dd2e:	3b30      	subs	r3, #48	; 0x30
    dd30:	2b09      	cmp	r3, #9
    dd32:	d80a      	bhi.n	dd4a <cmd_interpreter+0x3a>
    dd34:	e8df f003 	tbb	[pc, r3]
    dd38:	09090941 	.word	0x09090941
    dd3c:	53362513 	.word	0x53362513
    dd40:	8d64      	.short	0x8d64
    dd42:	2b52      	cmp	r3, #82	; 0x52
    dd44:	d06d      	beq.n	de22 <cmd_interpreter+0x112>
    dd46:	2b57      	cmp	r3, #87	; 0x57
    dd48:	d078      	beq.n	de3c <cmd_interpreter+0x12c>
        case 0: printk("\033[0m");        // Preto
    dd4a:	4847      	ldr	r0, [pc, #284]	; (de68 <cmd_interpreter+0x158>)
    dd4c:	f01c fb86 	bl	2a45c <printk>
	  return buf;
    dd50:	2266      	movs	r2, #102	; 0x66
    dd52:	4628      	mov	r0, r5
    dd54:	4942      	ldr	r1, [pc, #264]	; (de60 <cmd_interpreter+0x150>)
    dd56:	f023 fe64 	bl	31a22 <memcpy>
}
    dd5a:	4628      	mov	r0, r5
    dd5c:	bd70      	pop	{r4, r5, r6, pc}
        case 1: printk("\033[31m");       // Vermelho
    dd5e:	4843      	ldr	r0, [pc, #268]	; (de6c <cmd_interpreter+0x15c>)
    dd60:	f01c fb7c 	bl	2a45c <printk>
         sensor_status.number[SENSOR_DIG_4]=0;
    dd64:	2200      	movs	r2, #0
    dd66:	4b42      	ldr	r3, [pc, #264]	; (de70 <cmd_interpreter+0x160>)
			   printk("ALARM FLAG RESET 4\n");
    dd68:	4842      	ldr	r0, [pc, #264]	; (de74 <cmd_interpreter+0x164>)
         sensor_status.number[SENSOR_DIG_4]=0;
    dd6a:	711a      	strb	r2, [r3, #4]
         Initial_Setup.interval_uplink=LORAWAN_INTERVAL_NORMAL;
    dd6c:	220a      	movs	r2, #10
    dd6e:	4b42      	ldr	r3, [pc, #264]	; (de78 <cmd_interpreter+0x168>)
    dd70:	805a      	strh	r2, [r3, #2]
			   printk("ALARM FLAG RESET 4\n");
    dd72:	f01c fb73 	bl	2a45c <printk>
         buf.len=sprintf(buf.data, "ALARM FLAG RESET");
    dd76:	4941      	ldr	r1, [pc, #260]	; (de7c <cmd_interpreter+0x16c>)
         buf.len=sprintf(buf.data, "TURNED OFF LED 4");
    dd78:	4839      	ldr	r0, [pc, #228]	; (de60 <cmd_interpreter+0x150>)
    dd7a:	f023 ffdb 	bl	31d34 <strcpy>
    dd7e:	2310      	movs	r3, #16
    dd80:	e00d      	b.n	dd9e <cmd_interpreter+0x8e>
        case 1: printk("\033[31m");       // Vermelho
    dd82:	483a      	ldr	r0, [pc, #232]	; (de6c <cmd_interpreter+0x15c>)
    dd84:	f01c fb6a 	bl	2a45c <printk>
			   gpio_pin_set_dt(LED4, ON);
    dd88:	2001      	movs	r0, #1
    dd8a:	f7ff f90d 	bl	cfa8 <gpio_pin_set_dt.constprop.0.isra.0>
			   printk("TURNED ON LED 4\n");
    dd8e:	483c      	ldr	r0, [pc, #240]	; (de80 <cmd_interpreter+0x170>)
    dd90:	f01c fb64 	bl	2a45c <printk>
         buf.len=sprintf(buf.data, "TURNED ON LED 4");
    dd94:	493b      	ldr	r1, [pc, #236]	; (de84 <cmd_interpreter+0x174>)
    dd96:	4832      	ldr	r0, [pc, #200]	; (de60 <cmd_interpreter+0x150>)
    dd98:	f023 ffcc 	bl	31d34 <strcpy>
    dd9c:	230f      	movs	r3, #15
    dd9e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
			break;
    dda2:	e7d2      	b.n	dd4a <cmd_interpreter+0x3a>
        case 1: printk("\033[31m");       // Vermelho
    dda4:	4831      	ldr	r0, [pc, #196]	; (de6c <cmd_interpreter+0x15c>)
    dda6:	f01c fb59 	bl	2a45c <printk>
			   gpio_pin_set_dt(LED4, OFF);
    ddaa:	2000      	movs	r0, #0
    ddac:	f7ff f8fc 	bl	cfa8 <gpio_pin_set_dt.constprop.0.isra.0>
			   printk("TURNED OFF LED 4\n");
    ddb0:	4835      	ldr	r0, [pc, #212]	; (de88 <cmd_interpreter+0x178>)
    ddb2:	f01c fb53 	bl	2a45c <printk>
         buf.len=sprintf(buf.data, "TURNED OFF LED 4");
    ddb6:	4935      	ldr	r1, [pc, #212]	; (de8c <cmd_interpreter+0x17c>)
    ddb8:	e7de      	b.n	dd78 <cmd_interpreter+0x68>
        case 2: printk("\033[32m");       // Verde
    ddba:	4835      	ldr	r0, [pc, #212]	; (de90 <cmd_interpreter+0x180>)
    ddbc:	f01c fb4e 	bl	2a45c <printk>
			    setup_initialize();
    ddc0:	f7ff fe0e 	bl	d9e0 <setup_initialize>
				  flash_write_setup();
    ddc4:	f7ff f928 	bl	d018 <flash_write_setup>
				  print_setup();
    ddc8:	f7ff fe6a 	bl	daa0 <print_setup>
				  printk("Setup Reset\n");
    ddcc:	4831      	ldr	r0, [pc, #196]	; (de94 <cmd_interpreter+0x184>)
    ddce:	f01c fb45 	bl	2a45c <printk>
          buf.len=sprintf(buf.data, "SETUP RESET");
    ddd2:	4931      	ldr	r1, [pc, #196]	; (de98 <cmd_interpreter+0x188>)
    ddd4:	4822      	ldr	r0, [pc, #136]	; (de60 <cmd_interpreter+0x150>)
    ddd6:	f023 ffad 	bl	31d34 <strcpy>
    ddda:	230b      	movs	r3, #11
    dddc:	e7df      	b.n	dd9e <cmd_interpreter+0x8e>
        case 1: printk("\033[31m");       // Vermelho
    ddde:	4823      	ldr	r0, [pc, #140]	; (de6c <cmd_interpreter+0x15c>)
    dde0:	f01c fb3c 	bl	2a45c <printk>
           sensor_status.active[SENSOR_DIG_4]=0;
    dde4:	2200      	movs	r2, #0
    dde6:	4b22      	ldr	r3, [pc, #136]	; (de70 <cmd_interpreter+0x160>)
           printk("ALARM OFF\n");
    dde8:	482c      	ldr	r0, [pc, #176]	; (de9c <cmd_interpreter+0x18c>)
           sensor_status.active[SENSOR_DIG_4]=0;
    ddea:	729a      	strb	r2, [r3, #10]
           sensor_status.busy[SENSOR_DIG_4]=ON;
    ddec:	2201      	movs	r2, #1
    ddee:	741a      	strb	r2, [r3, #16]
           printk("ALARM OFF\n");
    ddf0:	f01c fb34 	bl	2a45c <printk>
           buf.len=sprintf(buf.data, "ALARM OFF");
    ddf4:	492a      	ldr	r1, [pc, #168]	; (dea0 <cmd_interpreter+0x190>)
    ddf6:	481a      	ldr	r0, [pc, #104]	; (de60 <cmd_interpreter+0x150>)
    ddf8:	f023 ff9c 	bl	31d34 <strcpy>
    ddfc:	2309      	movs	r3, #9
    ddfe:	e7ce      	b.n	dd9e <cmd_interpreter+0x8e>
        case 1: printk("\033[31m");       // Vermelho
    de00:	481a      	ldr	r0, [pc, #104]	; (de6c <cmd_interpreter+0x15c>)
    de02:	f01c fb2b 	bl	2a45c <printk>
           sensor_status.active[SENSOR_DIG_4]=1;
    de06:	2201      	movs	r2, #1
    de08:	4b19      	ldr	r3, [pc, #100]	; (de70 <cmd_interpreter+0x160>)
           printk("ALARM ON\n");
    de0a:	4826      	ldr	r0, [pc, #152]	; (dea4 <cmd_interpreter+0x194>)
           sensor_status.active[SENSOR_DIG_4]=1;
    de0c:	729a      	strb	r2, [r3, #10]
           sensor_status.busy[SENSOR_DIG_4]=OFF;
    de0e:	2200      	movs	r2, #0
    de10:	741a      	strb	r2, [r3, #16]
           printk("ALARM ON\n");
    de12:	f01c fb23 	bl	2a45c <printk>
           buf.len=sprintf(buf.data, "ALARM ON");
    de16:	4924      	ldr	r1, [pc, #144]	; (dea8 <cmd_interpreter+0x198>)
    de18:	4811      	ldr	r0, [pc, #68]	; (de60 <cmd_interpreter+0x150>)
    de1a:	f023 ff8b 	bl	31d34 <strcpy>
    de1e:	2308      	movs	r3, #8
    de20:	e7bd      	b.n	dd9e <cmd_interpreter+0x8e>
        case 3: printk("\033[33m");       // Amarelo
    de22:	4822      	ldr	r0, [pc, #136]	; (deac <cmd_interpreter+0x19c>)
    de24:	f01c fb1a 	bl	2a45c <printk>
			    flash_read_setup();
    de28:	f7ff f900 	bl	d02c <flash_read_setup>
			    print_setup();
    de2c:	f7ff fe38 	bl	daa0 <print_setup>
          buf.len=sprintf(buf.data, "COMMAND READ"); 
    de30:	4620      	mov	r0, r4
    de32:	491f      	ldr	r1, [pc, #124]	; (deb0 <cmd_interpreter+0x1a0>)
    de34:	f023 ff7e 	bl	31d34 <strcpy>
    de38:	230c      	movs	r3, #12
    de3a:	e7b0      	b.n	dd9e <cmd_interpreter+0x8e>
        case 3: printk("\033[33m");       // Amarelo
    de3c:	481b      	ldr	r0, [pc, #108]	; (deac <cmd_interpreter+0x19c>)
    de3e:	f01c fb0d 	bl	2a45c <printk>
			     print_setup();
    de42:	f7ff fe2d 	bl	daa0 <print_setup>
           buf.len=sprintf(buf.data, "COMMAND WRITE");             
    de46:	4620      	mov	r0, r4
    de48:	491a      	ldr	r1, [pc, #104]	; (deb4 <cmd_interpreter+0x1a4>)
    de4a:	f023 ff73 	bl	31d34 <strcpy>
    de4e:	230d      	movs	r3, #13
    de50:	e7a5      	b.n	dd9e <cmd_interpreter+0x8e>
        case 3: printk("\033[33m");       // Amarelo
    de52:	4816      	ldr	r0, [pc, #88]	; (deac <cmd_interpreter+0x19c>)
    de54:	f01c fb02 	bl	2a45c <printk>
			     test_command();
    de58:	f7ff ff3e 	bl	dcd8 <test_command>
			break;
    de5c:	e775      	b.n	dd4a <cmd_interpreter+0x3a>
    de5e:	bf00      	nop
    de60:	20030f58 	.word	0x20030f58
    de64:	000352ee 	.word	0x000352ee
    de68:	00034ff6 	.word	0x00034ff6
    de6c:	000352e2 	.word	0x000352e2
    de70:	200311be 	.word	0x200311be
    de74:	00035346 	.word	0x00035346
    de78:	2000b094 	.word	0x2000b094
    de7c:	0003535a 	.word	0x0003535a
    de80:	0003536b 	.word	0x0003536b
    de84:	0003537c 	.word	0x0003537c
    de88:	0003538c 	.word	0x0003538c
    de8c:	0003539e 	.word	0x0003539e
    de90:	0003501a 	.word	0x0003501a
    de94:	000353af 	.word	0x000353af
    de98:	000353bc 	.word	0x000353bc
    de9c:	000353c8 	.word	0x000353c8
    dea0:	000353d3 	.word	0x000353d3
    dea4:	000353dd 	.word	0x000353dd
    dea8:	000353e7 	.word	0x000353e7
    deac:	000352e8 	.word	0x000352e8
    deb0:	000353f0 	.word	0x000353f0
    deb4:	000353fd 	.word	0x000353fd

0000deb8 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    deb8:	b500      	push	{lr}
    pb_type_t type = field->type;
    deba:	7d83      	ldrb	r3, [r0, #22]
{
    debc:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    debe:	2b3f      	cmp	r3, #63	; 0x3f
{
    dec0:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    dec2:	d849      	bhi.n	df58 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    dec4:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    dec8:	d01c      	beq.n	df04 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    deca:	2820      	cmp	r0, #32
    decc:	d102      	bne.n	ded4 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    dece:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    ded0:	8818      	ldrh	r0, [r3, #0]
    ded2:	e006      	b.n	dee2 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    ded4:	2830      	cmp	r0, #48	; 0x30
    ded6:	d0fa      	beq.n	dece <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    ded8:	2810      	cmp	r0, #16
    deda:	d106      	bne.n	deea <pb_check_proto3_default_value+0x32>
    dedc:	6a0a      	ldr	r2, [r1, #32]
    dede:	b122      	cbz	r2, deea <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    dee0:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    dee2:	fab0 f080 	clz	r0, r0
    dee6:	0940      	lsrs	r0, r0, #5
    dee8:	e00c      	b.n	df04 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    deea:	680a      	ldr	r2, [r1, #0]
    deec:	6890      	ldr	r0, [r2, #8]
    deee:	b980      	cbnz	r0, df12 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    def0:	f003 020f 	and.w	r2, r3, #15
    def4:	2a05      	cmp	r2, #5
    def6:	d80e      	bhi.n	df16 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    def8:	69cb      	ldr	r3, [r1, #28]
    defa:	8a4a      	ldrh	r2, [r1, #18]
    defc:	441a      	add	r2, r3
    defe:	4293      	cmp	r3, r2
    df00:	d103      	bne.n	df0a <pb_check_proto3_default_value+0x52>
            return true;
    df02:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    df04:	b00b      	add	sp, #44	; 0x2c
    df06:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    df0a:	f813 1b01 	ldrb.w	r1, [r3], #1
    df0e:	2900      	cmp	r1, #0
    df10:	d0f5      	beq.n	defe <pb_check_proto3_default_value+0x46>
            return false;
    df12:	2000      	movs	r0, #0
    df14:	e7f6      	b.n	df04 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    df16:	2a06      	cmp	r2, #6
    df18:	d101      	bne.n	df1e <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    df1a:	69cb      	ldr	r3, [r1, #28]
    df1c:	e7d8      	b.n	ded0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    df1e:	2a07      	cmp	r2, #7
    df20:	d102      	bne.n	df28 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    df22:	69cb      	ldr	r3, [r1, #28]
    df24:	7818      	ldrb	r0, [r3, #0]
    df26:	e7dc      	b.n	dee2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    df28:	2a0b      	cmp	r2, #11
    df2a:	d101      	bne.n	df30 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    df2c:	8a48      	ldrh	r0, [r1, #18]
    df2e:	e7d8      	b.n	dee2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    df30:	f003 030e 	and.w	r3, r3, #14
    df34:	2b08      	cmp	r3, #8
    df36:	d1e5      	bne.n	df04 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    df38:	69ca      	ldr	r2, [r1, #28]
    df3a:	4668      	mov	r0, sp
    df3c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    df3e:	f01c f990 	bl	2a262 <pb_field_iter_begin>
    df42:	2800      	cmp	r0, #0
    df44:	d0dd      	beq.n	df02 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    df46:	4668      	mov	r0, sp
    df48:	f7ff ffb6 	bl	deb8 <pb_check_proto3_default_value>
    df4c:	2800      	cmp	r0, #0
    df4e:	d0d9      	beq.n	df04 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    df50:	4668      	mov	r0, sp
    df52:	f01c f9a9 	bl	2a2a8 <pb_field_iter_next>
    df56:	e7f4      	b.n	df42 <pb_check_proto3_default_value+0x8a>
    df58:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    df5c:	2a80      	cmp	r2, #128	; 0x80
    df5e:	d101      	bne.n	df64 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    df60:	69c0      	ldr	r0, [r0, #28]
    df62:	e7be      	b.n	dee2 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    df64:	2a40      	cmp	r2, #64	; 0x40
    df66:	d1d4      	bne.n	df12 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    df68:	f003 030f 	and.w	r3, r3, #15
    df6c:	2b0a      	cmp	r3, #10
    df6e:	d102      	bne.n	df76 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    df70:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    df72:	6818      	ldr	r0, [r3, #0]
    df74:	e7b5      	b.n	dee2 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    df76:	6803      	ldr	r3, [r0, #0]
    df78:	4a02      	ldr	r2, [pc, #8]	; (df84 <pb_check_proto3_default_value+0xcc>)
    df7a:	68d8      	ldr	r0, [r3, #12]
    df7c:	4290      	cmp	r0, r2
    df7e:	d1b0      	bne.n	dee2 <pb_check_proto3_default_value+0x2a>
    df80:	e7f6      	b.n	df70 <pb_check_proto3_default_value+0xb8>
    df82:	bf00      	nop
    df84:	0002a2c7 	.word	0x0002a2c7

0000df88 <pb_ostream_from_buffer>:
    return stream;
    df88:	6082      	str	r2, [r0, #8]
    df8a:	2200      	movs	r2, #0
{
    df8c:	b510      	push	{r4, lr}
    return stream;
    df8e:	4c03      	ldr	r4, [pc, #12]	; (df9c <pb_ostream_from_buffer+0x14>)
    df90:	e9c0 2203 	strd	r2, r2, [r0, #12]
    df94:	e9c0 4100 	strd	r4, r1, [r0]
}
    df98:	bd10      	pop	{r4, pc}
    df9a:	bf00      	nop
    df9c:	0002a2f7 	.word	0x0002a2f7

0000dfa0 <pb_write>:
{
    dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfa2:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    dfa4:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    dfa6:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    dfa8:	b19a      	cbz	r2, dfd2 <pb_write+0x32>
    dfaa:	6806      	ldr	r6, [r0, #0]
    dfac:	b18e      	cbz	r6, dfd2 <pb_write+0x32>
    dfae:	18d3      	adds	r3, r2, r3
    dfb0:	d202      	bcs.n	dfb8 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    dfb2:	6887      	ldr	r7, [r0, #8]
    dfb4:	429f      	cmp	r7, r3
    dfb6:	d207      	bcs.n	dfc8 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    dfb8:	6923      	ldr	r3, [r4, #16]
    dfba:	4a08      	ldr	r2, [pc, #32]	; (dfdc <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	bf08      	it	eq
    dfc0:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    dfc2:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    dfc4:	6123      	str	r3, [r4, #16]
}
    dfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    dfc8:	47b0      	blx	r6
    dfca:	b910      	cbnz	r0, dfd2 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    dfcc:	6923      	ldr	r3, [r4, #16]
    dfce:	4a04      	ldr	r2, [pc, #16]	; (dfe0 <pb_write+0x40>)
    dfd0:	e7f4      	b.n	dfbc <pb_write+0x1c>
    stream->bytes_written += count;
    dfd2:	68e3      	ldr	r3, [r4, #12]
    return true;
    dfd4:	2001      	movs	r0, #1
    stream->bytes_written += count;
    dfd6:	442b      	add	r3, r5
    dfd8:	60e3      	str	r3, [r4, #12]
    return true;
    dfda:	e7f4      	b.n	dfc6 <pb_write+0x26>
    dfdc:	0003540b 	.word	0x0003540b
    dfe0:	00035417 	.word	0x00035417

0000dfe4 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    dfe4:	b410      	push	{r4}
    dfe6:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    dfe8:	8a4b      	ldrh	r3, [r1, #18]
    dfea:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    dfee:	2c02      	cmp	r4, #2
    dff0:	d117      	bne.n	e022 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    dff2:	2b01      	cmp	r3, #1
    dff4:	d105      	bne.n	e002 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    dff6:	69cb      	ldr	r3, [r1, #28]
    dff8:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    dffa:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    dffc:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    dffe:	f01c b983 	b.w	2a308 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    e002:	2b02      	cmp	r3, #2
    e004:	d102      	bne.n	e00c <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    e006:	69cb      	ldr	r3, [r1, #28]
    e008:	881a      	ldrh	r2, [r3, #0]
    e00a:	e7f6      	b.n	dffa <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    e00c:	2b04      	cmp	r3, #4
    e00e:	d102      	bne.n	e016 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    e010:	69cb      	ldr	r3, [r1, #28]
    e012:	681a      	ldr	r2, [r3, #0]
    e014:	e7f1      	b.n	dffa <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    e016:	2b08      	cmp	r3, #8
    e018:	d11f      	bne.n	e05a <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    e01a:	69cb      	ldr	r3, [r1, #28]
    e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e020:	e7ec      	b.n	dffc <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    e022:	2b01      	cmp	r3, #1
    e024:	d108      	bne.n	e038 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    e026:	69cb      	ldr	r3, [r1, #28]
    e028:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    e02c:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    e02e:	2c03      	cmp	r4, #3
    e030:	d1e4      	bne.n	dffc <pb_enc_varint+0x18>
}
    e032:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    e034:	f01c b9a7 	b.w	2a386 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    e038:	2b02      	cmp	r3, #2
    e03a:	d103      	bne.n	e044 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    e03c:	69cb      	ldr	r3, [r1, #28]
    e03e:	f9b3 2000 	ldrsh.w	r2, [r3]
    e042:	e7f3      	b.n	e02c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    e044:	2b04      	cmp	r3, #4
    e046:	d102      	bne.n	e04e <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    e048:	69cb      	ldr	r3, [r1, #28]
    e04a:	681a      	ldr	r2, [r3, #0]
    e04c:	e7ee      	b.n	e02c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    e04e:	2b08      	cmp	r3, #8
    e050:	d103      	bne.n	e05a <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    e052:	69cb      	ldr	r3, [r1, #28]
    e054:	e9d3 2300 	ldrd	r2, r3, [r3]
    e058:	e7e9      	b.n	e02e <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    e05a:	6903      	ldr	r3, [r0, #16]
    e05c:	4a03      	ldr	r2, [pc, #12]	; (e06c <pb_enc_varint+0x88>)
    e05e:	2b00      	cmp	r3, #0
    e060:	bf08      	it	eq
    e062:	4613      	moveq	r3, r2
    e064:	6103      	str	r3, [r0, #16]
}
    e066:	bc10      	pop	{r4}
    e068:	2000      	movs	r0, #0
    e06a:	4770      	bx	lr
    e06c:	00035420 	.word	0x00035420

0000e070 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    e070:	8a4a      	ldrh	r2, [r1, #18]
    e072:	2a04      	cmp	r2, #4
    e074:	d102      	bne.n	e07c <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    e076:	69c9      	ldr	r1, [r1, #28]
    e078:	f01c b98e 	b.w	2a398 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    e07c:	2a08      	cmp	r2, #8
    e07e:	d102      	bne.n	e086 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    e080:	69c9      	ldr	r1, [r1, #28]
    e082:	f01c b98c 	b.w	2a39e <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    e086:	6902      	ldr	r2, [r0, #16]
    e088:	4903      	ldr	r1, [pc, #12]	; (e098 <pb_enc_fixed+0x28>)
    e08a:	2a00      	cmp	r2, #0
    e08c:	bf08      	it	eq
    e08e:	460a      	moveq	r2, r1
    e090:	6102      	str	r2, [r0, #16]
    }
}
    e092:	2000      	movs	r0, #0
    e094:	4770      	bx	lr
    e096:	bf00      	nop
    e098:	00035420 	.word	0x00035420

0000e09c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    e09c:	7d8a      	ldrb	r2, [r1, #22]
{
    e09e:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    e0a0:	f002 020f 	and.w	r2, r2, #15
    e0a4:	2a0b      	cmp	r2, #11
    e0a6:	d811      	bhi.n	e0cc <pb_encode_tag_for_field+0x30>
    e0a8:	e8df f002 	tbb	[pc, r2]
    e0ac:	0c0c0c0c 	.word	0x0c0c0c0c
    e0b0:	0a0a060e 	.word	0x0a0a060e
    e0b4:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    e0b8:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    e0ba:	8a1a      	ldrh	r2, [r3, #16]
    e0bc:	f01c b972 	b.w	2a3a4 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    e0c0:	2102      	movs	r1, #2
            break;
    e0c2:	e7fa      	b.n	e0ba <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    e0c4:	2100      	movs	r1, #0
    e0c6:	e7f8      	b.n	e0ba <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    e0c8:	2105      	movs	r1, #5
    e0ca:	e7f6      	b.n	e0ba <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    e0cc:	6903      	ldr	r3, [r0, #16]
    e0ce:	4a03      	ldr	r2, [pc, #12]	; (e0dc <pb_encode_tag_for_field+0x40>)
    e0d0:	2b00      	cmp	r3, #0
    e0d2:	bf08      	it	eq
    e0d4:	4613      	moveq	r3, r2
    e0d6:	6103      	str	r3, [r0, #16]
}
    e0d8:	2000      	movs	r0, #0
    e0da:	4770      	bx	lr
    e0dc:	00035432 	.word	0x00035432

0000e0e0 <pb_encode_submessage>:
{
    e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0e4:	460e      	mov	r6, r1
    e0e6:	4617      	mov	r7, r2
    e0e8:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    e0ea:	2214      	movs	r2, #20
    e0ec:	2100      	movs	r1, #0
{
    e0ee:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    e0f0:	a801      	add	r0, sp, #4
    e0f2:	f023 fcd0 	bl	31a96 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    e0f6:	463a      	mov	r2, r7
    e0f8:	4631      	mov	r1, r6
    e0fa:	a801      	add	r0, sp, #4
    e0fc:	f000 f9c4 	bl	e488 <pb_encode>
    e100:	b910      	cbnz	r0, e108 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    e102:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    e104:	6123      	str	r3, [r4, #16]
    e106:	e008      	b.n	e11a <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    e108:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    e10c:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    e10e:	4643      	mov	r3, r8
    e110:	462a      	mov	r2, r5
    e112:	4620      	mov	r0, r4
    e114:	f01c f8f8 	bl	2a308 <pb_encode_varint>
    e118:	b918      	cbnz	r0, e122 <pb_encode_submessage+0x42>
        return false;
    e11a:	2000      	movs	r0, #0
}
    e11c:	b006      	add	sp, #24
    e11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    e122:	6821      	ldr	r1, [r4, #0]
    e124:	b921      	cbnz	r1, e130 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    e126:	462a      	mov	r2, r5
    e128:	4620      	mov	r0, r4
    e12a:	f7ff ff39 	bl	dfa0 <pb_write>
    e12e:	e7f5      	b.n	e11c <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    e130:	68e3      	ldr	r3, [r4, #12]
    e132:	68a2      	ldr	r2, [r4, #8]
    e134:	442b      	add	r3, r5
    e136:	4293      	cmp	r3, r2
    e138:	d905      	bls.n	e146 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    e13a:	6923      	ldr	r3, [r4, #16]
    e13c:	4a0e      	ldr	r2, [pc, #56]	; (e178 <pb_encode_submessage+0x98>)
    e13e:	2b00      	cmp	r3, #0
    e140:	bf08      	it	eq
    e142:	4613      	moveq	r3, r2
    e144:	e7de      	b.n	e104 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    e146:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    e148:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    e14a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    e14c:	a801      	add	r0, sp, #4
    e14e:	4631      	mov	r1, r6
    substream.max_size = size;
    e150:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    e154:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    e158:	f000 f996 	bl	e488 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    e15c:	9a04      	ldr	r2, [sp, #16]
    e15e:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    e160:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    e162:	4413      	add	r3, r2
    e164:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    e166:	9b02      	ldr	r3, [sp, #8]
    e168:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    e16a:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    e16c:	d101      	bne.n	e172 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    e16e:	6123      	str	r3, [r4, #16]
    e170:	e7d4      	b.n	e11c <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    e172:	4a02      	ldr	r2, [pc, #8]	; (e17c <pb_encode_submessage+0x9c>)
    e174:	e7e3      	b.n	e13e <pb_encode_submessage+0x5e>
    e176:	bf00      	nop
    e178:	0003540b 	.word	0x0003540b
    e17c:	00035445 	.word	0x00035445

0000e180 <encode_basic_field>:
{
    e180:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    e182:	69cb      	ldr	r3, [r1, #28]
{
    e184:	4604      	mov	r4, r0
    e186:	460d      	mov	r5, r1
    if (!field->pData)
    e188:	2b00      	cmp	r3, #0
    e18a:	d07f      	beq.n	e28c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    e18c:	f7ff ff86 	bl	e09c <pb_encode_tag_for_field>
    e190:	2800      	cmp	r0, #0
    e192:	d073      	beq.n	e27c <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    e194:	7da8      	ldrb	r0, [r5, #22]
    e196:	f000 030f 	and.w	r3, r0, #15
    e19a:	2b0b      	cmp	r3, #11
    e19c:	d873      	bhi.n	e286 <encode_basic_field+0x106>
    e19e:	e8df f003 	tbb	[pc, r3]
    e1a2:	1106      	.short	0x1106
    e1a4:	17171111 	.word	0x17171111
    e1a8:	5252351d 	.word	0x5252351d
    e1ac:	6f72      	.short	0x6f72
        if (p[i] != 0)
    e1ae:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    e1b0:	4620      	mov	r0, r4
}
    e1b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    e1b6:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    e1b8:	2300      	movs	r3, #0
    e1ba:	3a00      	subs	r2, #0
    e1bc:	bf18      	it	ne
    e1be:	2201      	movne	r2, #1
    e1c0:	f01c b8a2 	b.w	2a308 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    e1c4:	4629      	mov	r1, r5
    e1c6:	4620      	mov	r0, r4
}
    e1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    e1cc:	f7ff bf0a 	b.w	dfe4 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    e1d0:	4629      	mov	r1, r5
    e1d2:	4620      	mov	r0, r4
}
    e1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    e1d8:	f7ff bf4a 	b.w	e070 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    e1dc:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    e1de:	b909      	cbnz	r1, e1e4 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    e1e0:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    e1e2:	e00e      	b.n	e202 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    e1e4:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    e1e6:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    e1e8:	d80a      	bhi.n	e200 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    e1ea:	8a6b      	ldrh	r3, [r5, #18]
    e1ec:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    e1ee:	4293      	cmp	r3, r2
    e1f0:	d206      	bcs.n	e200 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    e1f2:	6923      	ldr	r3, [r4, #16]
    e1f4:	4a26      	ldr	r2, [pc, #152]	; (e290 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    e1f6:	2b00      	cmp	r3, #0
    e1f8:	bf08      	it	eq
    e1fa:	4613      	moveq	r3, r2
    e1fc:	6123      	str	r3, [r4, #16]
    e1fe:	e03d      	b.n	e27c <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    e200:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    e202:	4620      	mov	r0, r4
}
    e204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    e208:	f01c b8d2 	b.w	2a3b0 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    e20c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    e210:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    e212:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    e214:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    e216:	d00e      	beq.n	e236 <encode_basic_field+0xb6>
        if (max_size == 0)
    e218:	b913      	cbnz	r3, e220 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    e21a:	6923      	ldr	r3, [r4, #16]
    e21c:	4a1d      	ldr	r2, [pc, #116]	; (e294 <encode_basic_field+0x114>)
    e21e:	e7ea      	b.n	e1f6 <encode_basic_field+0x76>
        max_size -= 1;
    e220:	3b01      	subs	r3, #1
    if (str == NULL)
    e222:	2900      	cmp	r1, #0
    e224:	d0dc      	beq.n	e1e0 <encode_basic_field+0x60>
    size_t size = 0;
    e226:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    e228:	429a      	cmp	r2, r3
    e22a:	5c88      	ldrb	r0, [r1, r2]
    e22c:	d006      	beq.n	e23c <encode_basic_field+0xbc>
    e22e:	2800      	cmp	r0, #0
    e230:	d0e7      	beq.n	e202 <encode_basic_field+0x82>
            size++;
    e232:	3201      	adds	r2, #1
            p++;
    e234:	e7f8      	b.n	e228 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    e236:	f04f 33ff 	mov.w	r3, #4294967295
    e23a:	e7f2      	b.n	e222 <encode_basic_field+0xa2>
        if (*p != '\0')
    e23c:	2800      	cmp	r0, #0
    e23e:	d0e0      	beq.n	e202 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    e240:	6923      	ldr	r3, [r4, #16]
    e242:	4a15      	ldr	r2, [pc, #84]	; (e298 <encode_basic_field+0x118>)
    e244:	e7d7      	b.n	e1f6 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    e246:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e248:	b912      	cbnz	r2, e250 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    e24a:	6923      	ldr	r3, [r4, #16]
    e24c:	4a13      	ldr	r2, [pc, #76]	; (e29c <encode_basic_field+0x11c>)
    e24e:	e7d2      	b.n	e1f6 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    e250:	2b09      	cmp	r3, #9
    e252:	d006      	beq.n	e262 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    e254:	4620      	mov	r0, r4
    e256:	69ea      	ldr	r2, [r5, #28]
    e258:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    e25a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    e25e:	f7ff bf3f 	b.w	e0e0 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    e262:	6a2a      	ldr	r2, [r5, #32]
    e264:	2a00      	cmp	r2, #0
    e266:	d0f5      	beq.n	e254 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    e268:	f852 3c08 	ldr.w	r3, [r2, #-8]
    e26c:	2b00      	cmp	r3, #0
    e26e:	d0f1      	beq.n	e254 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    e270:	4629      	mov	r1, r5
    e272:	4620      	mov	r0, r4
    e274:	3a04      	subs	r2, #4
    e276:	4798      	blx	r3
    e278:	2800      	cmp	r0, #0
    e27a:	d1eb      	bne.n	e254 <encode_basic_field+0xd4>
        return false;
    e27c:	2000      	movs	r0, #0
}
    e27e:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    e280:	8a6a      	ldrh	r2, [r5, #18]
    e282:	69e9      	ldr	r1, [r5, #28]
    e284:	e7bd      	b.n	e202 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    e286:	6923      	ldr	r3, [r4, #16]
    e288:	4a05      	ldr	r2, [pc, #20]	; (e2a0 <encode_basic_field+0x120>)
    e28a:	e7b4      	b.n	e1f6 <encode_basic_field+0x76>
        return true;
    e28c:	2001      	movs	r0, #1
    e28e:	e7f6      	b.n	e27e <encode_basic_field+0xfe>
    e290:	00035459 	.word	0x00035459
    e294:	0003546d 	.word	0x0003546d
    e298:	00035480 	.word	0x00035480
    e29c:	00035494 	.word	0x00035494
    e2a0:	00035432 	.word	0x00035432

0000e2a4 <encode_field>:
{
    e2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    e2a8:	7d8b      	ldrb	r3, [r1, #22]
{
    e2aa:	4605      	mov	r5, r0
    e2ac:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    e2b0:	2a30      	cmp	r2, #48	; 0x30
{
    e2b2:	460c      	mov	r4, r1
    e2b4:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    e2b6:	d112      	bne.n	e2de <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    e2b8:	6a0b      	ldr	r3, [r1, #32]
    e2ba:	881a      	ldrh	r2, [r3, #0]
    e2bc:	8a0b      	ldrh	r3, [r1, #16]
    e2be:	429a      	cmp	r2, r3
    e2c0:	d114      	bne.n	e2ec <encode_field+0x48>
    if (!field->pData)
    e2c2:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    e2c4:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    e2c6:	b9ea      	cbnz	r2, e304 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    e2c8:	f013 0f30 	tst.w	r3, #48	; 0x30
    e2cc:	d10e      	bne.n	e2ec <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    e2ce:	692b      	ldr	r3, [r5, #16]
    e2d0:	4a69      	ldr	r2, [pc, #420]	; (e478 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    e2d2:	2b00      	cmp	r3, #0
    e2d4:	bf08      	it	eq
    e2d6:	4613      	moveq	r3, r2
    e2d8:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    e2da:	2000      	movs	r0, #0
    e2dc:	e007      	b.n	e2ee <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    e2de:	2a10      	cmp	r2, #16
    e2e0:	d1ef      	bne.n	e2c2 <encode_field+0x1e>
        if (field->pSize)
    e2e2:	6a0a      	ldr	r2, [r1, #32]
    e2e4:	b132      	cbz	r2, e2f4 <encode_field+0x50>
        if (p[i] != 0)
    e2e6:	7813      	ldrb	r3, [r2, #0]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d1ea      	bne.n	e2c2 <encode_field+0x1e>
            return true;
    e2ec:	2001      	movs	r0, #1
}
    e2ee:	b007      	add	sp, #28
    e2f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    e2f4:	2b3f      	cmp	r3, #63	; 0x3f
    e2f6:	d8e4      	bhi.n	e2c2 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    e2f8:	4608      	mov	r0, r1
    e2fa:	f7ff fddd 	bl	deb8 <pb_check_proto3_default_value>
    e2fe:	2800      	cmp	r0, #0
    e300:	d0df      	beq.n	e2c2 <encode_field+0x1e>
    e302:	e7f3      	b.n	e2ec <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    e304:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    e308:	2a40      	cmp	r2, #64	; 0x40
    e30a:	d10c      	bne.n	e326 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    e30c:	6823      	ldr	r3, [r4, #0]
    e30e:	68db      	ldr	r3, [r3, #12]
    e310:	2b00      	cmp	r3, #0
    e312:	d0eb      	beq.n	e2ec <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    e314:	4622      	mov	r2, r4
    e316:	4629      	mov	r1, r5
    e318:	2000      	movs	r0, #0
    e31a:	4798      	blx	r3
    e31c:	2800      	cmp	r0, #0
    e31e:	d1e5      	bne.n	e2ec <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    e320:	692b      	ldr	r3, [r5, #16]
    e322:	4a56      	ldr	r2, [pc, #344]	; (e47c <encode_field+0x1d8>)
    e324:	e7d5      	b.n	e2d2 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    e326:	f003 0130 	and.w	r1, r3, #48	; 0x30
    e32a:	2920      	cmp	r1, #32
    e32c:	f040 809d 	bne.w	e46a <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    e330:	6a21      	ldr	r1, [r4, #32]
    e332:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    e334:	2e00      	cmp	r6, #0
    e336:	d0d9      	beq.n	e2ec <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    e338:	2a80      	cmp	r2, #128	; 0x80
    e33a:	d120      	bne.n	e37e <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    e33c:	f003 030f 	and.w	r3, r3, #15
    e340:	2b05      	cmp	r3, #5
    e342:	d85e      	bhi.n	e402 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    e344:	2102      	movs	r1, #2
    e346:	4628      	mov	r0, r5
    e348:	8a22      	ldrh	r2, [r4, #16]
    e34a:	f01c f82b 	bl	2a3a4 <pb_encode_tag>
    e34e:	2800      	cmp	r0, #0
    e350:	d0c3      	beq.n	e2da <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    e352:	7da3      	ldrb	r3, [r4, #22]
    e354:	f003 030f 	and.w	r3, r3, #15
    e358:	2b04      	cmp	r3, #4
    e35a:	d116      	bne.n	e38a <encode_field+0xe6>
            size = 4 * (size_t)count;
    e35c:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    e35e:	463a      	mov	r2, r7
    e360:	2300      	movs	r3, #0
    e362:	4628      	mov	r0, r5
    e364:	f01b ffd0 	bl	2a308 <pb_encode_varint>
    e368:	2800      	cmp	r0, #0
    e36a:	d0b6      	beq.n	e2da <encode_field+0x36>
        if (stream->callback == NULL)
    e36c:	6829      	ldr	r1, [r5, #0]
    e36e:	bb79      	cbnz	r1, e3d0 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    e370:	463a      	mov	r2, r7
    e372:	4628      	mov	r0, r5
}
    e374:	b007      	add	sp, #28
    e376:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    e37a:	f7ff be11 	b.w	dfa0 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    e37e:	8aa2      	ldrh	r2, [r4, #20]
    e380:	42b2      	cmp	r2, r6
    e382:	d2db      	bcs.n	e33c <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    e384:	692b      	ldr	r3, [r5, #16]
    e386:	4a3e      	ldr	r2, [pc, #248]	; (e480 <encode_field+0x1dc>)
    e388:	e7a3      	b.n	e2d2 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e38a:	2b05      	cmp	r3, #5
    e38c:	d101      	bne.n	e392 <encode_field+0xee>
            size = 8 * (size_t)count;
    e38e:	00f7      	lsls	r7, r6, #3
    e390:	e7e5      	b.n	e35e <encode_field+0xba>
            void *pData_orig = field->pData;
    e392:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    e394:	2214      	movs	r2, #20
    e396:	2100      	movs	r1, #0
    e398:	a801      	add	r0, sp, #4
    e39a:	f023 fb7c 	bl	31a96 <memset>
            void *pData_orig = field->pData;
    e39e:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    e3a2:	4621      	mov	r1, r4
    e3a4:	a801      	add	r0, sp, #4
    e3a6:	f7ff fe1d 	bl	dfe4 <pb_enc_varint>
    e3aa:	b928      	cbnz	r0, e3b8 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    e3ac:	692b      	ldr	r3, [r5, #16]
    e3ae:	2b00      	cmp	r3, #0
    e3b0:	d192      	bne.n	e2d8 <encode_field+0x34>
    e3b2:	9b05      	ldr	r3, [sp, #20]
    e3b4:	4a33      	ldr	r2, [pc, #204]	; (e484 <encode_field+0x1e0>)
    e3b6:	e78c      	b.n	e2d2 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    e3b8:	69e3      	ldr	r3, [r4, #28]
    e3ba:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    e3bc:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    e3be:	4413      	add	r3, r2
    e3c0:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    e3c2:	b2bb      	uxth	r3, r7
    e3c4:	429e      	cmp	r6, r3
    e3c6:	d8ec      	bhi.n	e3a2 <encode_field+0xfe>
            size = sizestream.bytes_written;
    e3c8:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    e3ca:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    e3ce:	e7c6      	b.n	e35e <encode_field+0xba>
    e3d0:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e3d2:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    e3d4:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e3d6:	f003 030e 	and.w	r3, r3, #14
    e3da:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    e3dc:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    e3de:	d10d      	bne.n	e3fc <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    e3e0:	f7ff fe46 	bl	e070 <pb_enc_fixed>
    e3e4:	2800      	cmp	r0, #0
    e3e6:	f43f af78 	beq.w	e2da <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    e3ea:	69e3      	ldr	r3, [r4, #28]
    e3ec:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    e3ee:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    e3f0:	4413      	add	r3, r2
    e3f2:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    e3f4:	b2bb      	uxth	r3, r7
    e3f6:	429e      	cmp	r6, r3
    e3f8:	d8eb      	bhi.n	e3d2 <encode_field+0x12e>
    e3fa:	e777      	b.n	e2ec <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    e3fc:	f7ff fdf2 	bl	dfe4 <pb_enc_varint>
    e400:	e7f0      	b.n	e3e4 <encode_field+0x140>
    e402:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    e406:	7da3      	ldrb	r3, [r4, #22]
    e408:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    e40c:	2b86      	cmp	r3, #134	; 0x86
    e40e:	d127      	bne.n	e460 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    e410:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    e412:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    e414:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    e418:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    e41a:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    e41e:	f1b9 0f00 	cmp.w	r9, #0
    e422:	d11a      	bne.n	e45a <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    e424:	f7ff fe3a 	bl	e09c <pb_encode_tag_for_field>
    e428:	b908      	cbnz	r0, e42e <encode_field+0x18a>
                field->pData = pData_orig;
    e42a:	61e7      	str	r7, [r4, #28]
                if (!status)
    e42c:	e755      	b.n	e2da <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    e42e:	2201      	movs	r2, #1
    e430:	4628      	mov	r0, r5
    e432:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    e434:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    e438:	f7ff fdb2 	bl	dfa0 <pb_write>
                field->pData = pData_orig;
    e43c:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    e43e:	2800      	cmp	r0, #0
    e440:	f43f af4b 	beq.w	e2da <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    e444:	69e3      	ldr	r3, [r4, #28]
    e446:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    e448:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    e44c:	4413      	add	r3, r2
    e44e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    e450:	fa1f f388 	uxth.w	r3, r8
    e454:	429e      	cmp	r6, r3
    e456:	d8d6      	bhi.n	e406 <encode_field+0x162>
    e458:	e748      	b.n	e2ec <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    e45a:	f7ff fe91 	bl	e180 <encode_basic_field>
    e45e:	e7ed      	b.n	e43c <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    e460:	4621      	mov	r1, r4
    e462:	4628      	mov	r0, r5
    e464:	f7ff fe8c 	bl	e180 <encode_basic_field>
    e468:	e7e9      	b.n	e43e <encode_field+0x19a>
        return encode_basic_field(stream, field);
    e46a:	4621      	mov	r1, r4
    e46c:	4628      	mov	r0, r5
}
    e46e:	b007      	add	sp, #28
    e470:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    e474:	f7ff be84 	b.w	e180 <encode_basic_field>
    e478:	000354ad 	.word	0x000354ad
    e47c:	000354c4 	.word	0x000354c4
    e480:	000354d3 	.word	0x000354d3
    e484:	000354eb 	.word	0x000354eb

0000e488 <pb_encode>:
{
    e488:	b530      	push	{r4, r5, lr}
    e48a:	b095      	sub	sp, #84	; 0x54
    e48c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    e48e:	4668      	mov	r0, sp
    e490:	f01b ff15 	bl	2a2be <pb_field_iter_begin_const>
    e494:	b370      	cbz	r0, e4f4 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    e496:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e49a:	f003 030f 	and.w	r3, r3, #15
    e49e:	2b0a      	cmp	r3, #10
    e4a0:	d121      	bne.n	e4e6 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    e4a2:	9b07      	ldr	r3, [sp, #28]
    e4a4:	681d      	ldr	r5, [r3, #0]
    while (extension)
    e4a6:	b91d      	cbnz	r5, e4b0 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    e4a8:	4668      	mov	r0, sp
    e4aa:	f01b fefd 	bl	2a2a8 <pb_field_iter_next>
    e4ae:	e7f1      	b.n	e494 <pb_encode+0xc>
        if (extension->type->encode)
    e4b0:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    e4b2:	4629      	mov	r1, r5
        if (extension->type->encode)
    e4b4:	685b      	ldr	r3, [r3, #4]
    e4b6:	b123      	cbz	r3, e4c2 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    e4b8:	4620      	mov	r0, r4
    e4ba:	4798      	blx	r3
        if (!status)
    e4bc:	b158      	cbz	r0, e4d6 <pb_encode+0x4e>
        extension = extension->next;
    e4be:	68ad      	ldr	r5, [r5, #8]
    e4c0:	e7f1      	b.n	e4a6 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    e4c2:	a80a      	add	r0, sp, #40	; 0x28
    e4c4:	f01b fefd 	bl	2a2c2 <pb_field_iter_begin_extension_const>
    e4c8:	b940      	cbnz	r0, e4dc <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    e4ca:	6923      	ldr	r3, [r4, #16]
    e4cc:	4a0a      	ldr	r2, [pc, #40]	; (e4f8 <pb_encode+0x70>)
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	bf08      	it	eq
    e4d2:	4613      	moveq	r3, r2
    e4d4:	6123      	str	r3, [r4, #16]
                return false;
    e4d6:	2000      	movs	r0, #0
}
    e4d8:	b015      	add	sp, #84	; 0x54
    e4da:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    e4dc:	4620      	mov	r0, r4
    e4de:	a90a      	add	r1, sp, #40	; 0x28
    e4e0:	f7ff fee0 	bl	e2a4 <encode_field>
    e4e4:	e7ea      	b.n	e4bc <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    e4e6:	4669      	mov	r1, sp
    e4e8:	4620      	mov	r0, r4
    e4ea:	f7ff fedb 	bl	e2a4 <encode_field>
    e4ee:	2800      	cmp	r0, #0
    e4f0:	d1da      	bne.n	e4a8 <pb_encode+0x20>
    e4f2:	e7f0      	b.n	e4d6 <pb_encode+0x4e>
        return true; /* Empty message type */
    e4f4:	2001      	movs	r0, #1
    e4f6:	e7ef      	b.n	e4d8 <pb_encode+0x50>
    e4f8:	000354f2 	.word	0x000354f2

0000e4fc <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    e4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e500:	b091      	sub	sp, #68	; 0x44
    e502:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    e504:	f002 0304 	and.w	r3, r2, #4
    e508:	9302      	str	r3, [sp, #8]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    e50a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    e50e:	3301      	adds	r3, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    e510:	0784      	lsls	r4, r0, #30
{
    e512:	4605      	mov	r5, r0
    e514:	460e      	mov	r6, r1
    e516:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    e51a:	9203      	str	r2, [sp, #12]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    e51c:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    e51e:	f040 81bd 	bne.w	e89c <cbvprintf_package+0x3a0>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    e522:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    e524:	b130      	cbz	r0, e534 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    e526:	2907      	cmp	r1, #7
    e528:	d809      	bhi.n	e53e <cbvprintf_package+0x42>
		return -ENOSPC;
    e52a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    e52e:	b011      	add	sp, #68	; 0x44
    e530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    e534:	f001 0607 	and.w	r6, r1, #7
    e538:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    e53a:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    e53e:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    e540:	f04f 0900 	mov.w	r9, #0
	align = VA_STACK_ALIGN(char *);
    e544:	f04f 0a04 	mov.w	sl, #4
	s = fmt--;
    e548:	1e59      	subs	r1, r3, #1
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    e54a:	f04f 33ff 	mov.w	r3, #4294967295
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    e54e:	464f      	mov	r7, r9
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    e550:	9301      	str	r3, [sp, #4]
	bool parsing = false;
    e552:	46cb      	mov	fp, r9
	size = sizeof(char *);
    e554:	4653      	mov	r3, sl
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    e556:	f8cd 9010 	str.w	r9, [sp, #16]
			if (buf0 != NULL) {
    e55a:	b10d      	cbz	r5, e560 <cbvprintf_package+0x64>
				*(const char **)buf = s;
    e55c:	9a00      	ldr	r2, [sp, #0]
    e55e:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e560:	9805      	ldr	r0, [sp, #20]
    e562:	2800      	cmp	r0, #0
    e564:	f300 80eb 	bgt.w	e73e <cbvprintf_package+0x242>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    e568:	4899      	ldr	r0, [pc, #612]	; (e7d0 <cbvprintf_package+0x2d4>)
    e56a:	9a00      	ldr	r2, [sp, #0]
    e56c:	4282      	cmp	r2, r0
    e56e:	d303      	bcc.n	e578 <cbvprintf_package+0x7c>
    e570:	4898      	ldr	r0, [pc, #608]	; (e7d4 <cbvprintf_package+0x2d8>)
    e572:	4282      	cmp	r2, r0
    e574:	f0c0 80e3 	bcc.w	e73e <cbvprintf_package+0x242>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e578:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e57a:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e57e:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e580:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e584:	f100 8106 	bmi.w	e794 <cbvprintf_package+0x298>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    e588:	2f0f      	cmp	r7, #15
    e58a:	f200 80b4 	bhi.w	e6f6 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    e58e:	2d00      	cmp	r5, #0
    e590:	f000 8108 	beq.w	e7a4 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
    e594:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e598:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    e59c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    e59e:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    e5a2:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    e5a6:	9804      	ldr	r0, [sp, #16]
    e5a8:	3001      	adds	r0, #1
    e5aa:	9004      	str	r0, [sp, #16]
    e5ac:	e0ea      	b.n	e784 <cbvprintf_package+0x288>
			switch (*fmt) {
    e5ae:	287a      	cmp	r0, #122	; 0x7a
    e5b0:	d860      	bhi.n	e674 <cbvprintf_package+0x178>
    e5b2:	284b      	cmp	r0, #75	; 0x4b
    e5b4:	d80e      	bhi.n	e5d4 <cbvprintf_package+0xd8>
    e5b6:	2847      	cmp	r0, #71	; 0x47
    e5b8:	d85c      	bhi.n	e674 <cbvprintf_package+0x178>
    e5ba:	2829      	cmp	r0, #41	; 0x29
    e5bc:	d82f      	bhi.n	e61e <cbvprintf_package+0x122>
    e5be:	2825      	cmp	r0, #37	; 0x25
    e5c0:	d055      	beq.n	e66e <cbvprintf_package+0x172>
    e5c2:	d857      	bhi.n	e674 <cbvprintf_package+0x178>
    e5c4:	2820      	cmp	r0, #32
    e5c6:	d07d      	beq.n	e6c4 <cbvprintf_package+0x1c8>
    e5c8:	3823      	subs	r0, #35	; 0x23
    e5ca:	f1d0 0b00 	rsbs	fp, r0, #0
    e5ce:	eb4b 0b00 	adc.w	fp, fp, r0
    e5d2:	e077      	b.n	e6c4 <cbvprintf_package+0x1c8>
    e5d4:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    e5d8:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    e5dc:	d84a      	bhi.n	e674 <cbvprintf_package+0x178>
    e5de:	e8df f00c 	tbb	[pc, ip]
    e5e2:	4971      	.short	0x4971
    e5e4:	49494949 	.word	0x49494949
    e5e8:	49494949 	.word	0x49494949
    e5ec:	494c4949 	.word	0x494c4949
    e5f0:	49494949 	.word	0x49494949
    e5f4:	5a494949 	.word	0x5a494949
    e5f8:	5a4c4c49 	.word	0x5a4c4c49
    e5fc:	4c715a5a 	.word	0x4c715a5a
    e600:	4971496e 	.word	0x4971496e
    e604:	49184c18 	.word	0x49184c18
    e608:	4c808349 	.word	0x4c808349
    e60c:	494c4949 	.word	0x494c4949
    e610:	80          	.byte	0x80
    e611:	00          	.byte	0x00
    e612:	2000      	movs	r0, #0
    e614:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    e618:	f04f 0a04 	mov.w	sl, #4
    e61c:	e039      	b.n	e692 <cbvprintf_package+0x196>
    e61e:	2201      	movs	r2, #1
			switch (*fmt) {
    e620:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    e624:	fa5f fc8c 	uxtb.w	ip, ip
    e628:	fa02 fc0c 	lsl.w	ip, r2, ip
    e62c:	ea1c 0f0e 	tst.w	ip, lr
    e630:	d148      	bne.n	e6c4 <cbvprintf_package+0x1c8>
    e632:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    e636:	d12e      	bne.n	e696 <cbvprintf_package+0x19a>
    e638:	ea1c 0b02 	ands.w	fp, ip, r2
    e63c:	d042      	beq.n	e6c4 <cbvprintf_package+0x1c8>
		buf = (void *) ROUND_UP(buf, align);
    e63e:	3c01      	subs	r4, #1
    e640:	4454      	add	r4, sl
    e642:	f1ca 0c00 	rsb	ip, sl, #0
    e646:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    e64a:	2d00      	cmp	r5, #0
    e64c:	d061      	beq.n	e712 <cbvprintf_package+0x216>
    e64e:	eba3 0c05 	sub.w	ip, r3, r5
    e652:	44a4      	add	ip, r4
    e654:	4566      	cmp	r6, ip
    e656:	f4ff af68 	bcc.w	e52a <cbvprintf_package+0x2e>
		if (is_str_arg) {
    e65a:	2800      	cmp	r0, #0
    e65c:	d168      	bne.n	e730 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    e65e:	2b04      	cmp	r3, #4
    e660:	d147      	bne.n	e6f2 <cbvprintf_package+0x1f6>
			int v = va_arg(ap, int);
    e662:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    e666:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    e668:	2304      	movs	r3, #4
    e66a:	3404      	adds	r4, #4
    e66c:	e02a      	b.n	e6c4 <cbvprintf_package+0x1c8>
				arg_idx--;
    e66e:	9a01      	ldr	r2, [sp, #4]
    e670:	3a01      	subs	r2, #1
    e672:	9201      	str	r2, [sp, #4]
				parsing = false;
    e674:	f04f 0b00 	mov.w	fp, #0
				continue;
    e678:	e024      	b.n	e6c4 <cbvprintf_package+0x1c8>
				if (fmt[-1] == 'l') {
    e67a:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    e67e:	286c      	cmp	r0, #108	; 0x6c
    e680:	d134      	bne.n	e6ec <cbvprintf_package+0x1f0>
					if (fmt[-2] == 'l') {
    e682:	2000      	movs	r0, #0
    e684:	f811 3c02 	ldrb.w	r3, [r1, #-2]
				parsing = false;
    e688:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    e68a:	2b6c      	cmp	r3, #108	; 0x6c
    e68c:	d1c4      	bne.n	e618 <cbvprintf_package+0x11c>
						align = VA_STACK_ALIGN(long long);
    e68e:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    e692:	4653      	mov	r3, sl
    e694:	e7d3      	b.n	e63e <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
    e696:	f108 0807 	add.w	r8, r8, #7
    e69a:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    e69e:	3407      	adds	r4, #7
    e6a0:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
    e6a4:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				if (buf0 != NULL) {
    e6a8:	b135      	cbz	r5, e6b8 <cbvprintf_package+0x1bc>
					if (BUF_OFFSET + size > len) {
    e6aa:	9806      	ldr	r0, [sp, #24]
    e6ac:	4420      	add	r0, r4
    e6ae:	42b0      	cmp	r0, r6
    e6b0:	f63f af3b 	bhi.w	e52a <cbvprintf_package+0x2e>
						*(long double *)buf = v.ld;
    e6b4:	e9c4 ab00 	strd	sl, fp, [r4]
				parsing = false;
    e6b8:	f04f 0b00 	mov.w	fp, #0
				buf += size;
    e6bc:	3408      	adds	r4, #8
			switch (*fmt) {
    e6be:	f04f 0a08 	mov.w	sl, #8
    e6c2:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    e6c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    e6c8:	2800      	cmp	r0, #0
    e6ca:	d078      	beq.n	e7be <cbvprintf_package+0x2c2>
			if (!parsing) {
    e6cc:	f1bb 0f00 	cmp.w	fp, #0
    e6d0:	f47f af6d 	bne.w	e5ae <cbvprintf_package+0xb2>
				if (*fmt == '%') {
    e6d4:	2825      	cmp	r0, #37	; 0x25
    e6d6:	d1f5      	bne.n	e6c4 <cbvprintf_package+0x1c8>
					parsing = true;
    e6d8:	f04f 0b01 	mov.w	fp, #1
					arg_idx++;
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	3301      	adds	r3, #1
    e6e0:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
    e6e2:	f04f 0a04 	mov.w	sl, #4
    e6e6:	e7ec      	b.n	e6c2 <cbvprintf_package+0x1c6>
			switch (*fmt) {
    e6e8:	4658      	mov	r0, fp
    e6ea:	e793      	b.n	e614 <cbvprintf_package+0x118>
    e6ec:	2000      	movs	r0, #0
				parsing = false;
    e6ee:	4683      	mov	fp, r0
    e6f0:	e7a5      	b.n	e63e <cbvprintf_package+0x142>
		} else if (size == sizeof(long long)) {
    e6f2:	2b08      	cmp	r3, #8
    e6f4:	d002      	beq.n	e6fc <cbvprintf_package+0x200>
					return -EINVAL;
    e6f6:	f06f 0015 	mvn.w	r0, #21
    e6fa:	e718      	b.n	e52e <cbvprintf_package+0x32>
			long long v = va_arg(ap, long long);
    e6fc:	f108 0807 	add.w	r8, r8, #7
    e700:	f028 0807 	bic.w	r8, r8, #7
    e704:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    e708:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    e70c:	2308      	movs	r3, #8
    e70e:	3408      	adds	r4, #8
    e710:	e7d8      	b.n	e6c4 <cbvprintf_package+0x1c8>
		if (is_str_arg) {
    e712:	b968      	cbnz	r0, e730 <cbvprintf_package+0x234>
		} else if (size == sizeof(int)) {
    e714:	2b04      	cmp	r3, #4
    e716:	d102      	bne.n	e71e <cbvprintf_package+0x222>
			int v = va_arg(ap, int);
    e718:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    e71c:	e7a4      	b.n	e668 <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
    e71e:	2b08      	cmp	r3, #8
    e720:	d1e9      	bne.n	e6f6 <cbvprintf_package+0x1fa>
			long long v = va_arg(ap, long long);
    e722:	f108 0807 	add.w	r8, r8, #7
    e726:	f028 0807 	bic.w	r8, r8, #7
    e72a:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    e72e:	e7ed      	b.n	e70c <cbvprintf_package+0x210>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e730:	9a05      	ldr	r2, [sp, #20]
    e732:	3a01      	subs	r2, #1
    e734:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    e736:	f858 2b04 	ldr.w	r2, [r8], #4
    e73a:	9200      	str	r2, [sp, #0]
    e73c:	e70d      	b.n	e55a <cbvprintf_package+0x5e>
			if (is_ro && !do_ro) {
    e73e:	9a03      	ldr	r2, [sp, #12]
    e740:	0790      	lsls	r0, r2, #30
    e742:	d520      	bpl.n	e786 <cbvprintf_package+0x28a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e744:	f04f 0c01 	mov.w	ip, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    e748:	eba4 0e05 	sub.w	lr, r4, r5
    e74c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    e750:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    e754:	d2cf      	bcs.n	e6f6 <cbvprintf_package+0x1fa>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    e756:	2f0f      	cmp	r7, #15
    e758:	d8cd      	bhi.n	e6f6 <cbvprintf_package+0x1fa>
				if (buf0 != NULL) {
    e75a:	b1f5      	cbz	r5, e79a <cbvprintf_package+0x29e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    e75c:	f107 0240 	add.w	r2, r7, #64	; 0x40
    e760:	eb0d 0e02 	add.w	lr, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    e764:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    e766:	b2c0      	uxtb	r0, r0
    e768:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    e76c:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    e770:	f1bc 0f00 	cmp.w	ip, #0
    e774:	f43f af17 	beq.w	e5a6 <cbvprintf_package+0xaa>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    e778:	f060 007f 	orn	r0, r0, #127	; 0x7f
    e77c:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    e780:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    e784:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    e786:	f1c5 0208 	rsb	r2, r5, #8
			switch (*fmt) {
    e78a:	f64f 7eda 	movw	lr, #65498	; 0xffda
			buf += sizeof(char *);
    e78e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    e790:	9206      	str	r2, [sp, #24]
    e792:	e797      	b.n	e6c4 <cbvprintf_package+0x1c8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    e794:	f04f 0c00 	mov.w	ip, #0
    e798:	e7da      	b.n	e750 <cbvprintf_package+0x254>
				} else if (is_ro) {
    e79a:	f1bc 0f00 	cmp.w	ip, #0
    e79e:	d001      	beq.n	e7a4 <cbvprintf_package+0x2a8>
					len += 1;
    e7a0:	3601      	adds	r6, #1
    e7a2:	e7ef      	b.n	e784 <cbvprintf_package+0x288>
				} else if (rws_pos_en) {
    e7a4:	9802      	ldr	r0, [sp, #8]
					len += 2;
    e7a6:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d1eb      	bne.n	e784 <cbvprintf_package+0x288>
					len += strlen(s) + 1 + 1;
    e7ac:	9800      	ldr	r0, [sp, #0]
    e7ae:	e9cd 3106 	strd	r3, r1, [sp, #24]
    e7b2:	f7fa fe2a 	bl	940a <strlen>
    e7b6:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    e7ba:	4406      	add	r6, r0
    e7bc:	e7e2      	b.n	e784 <cbvprintf_package+0x288>
	if (BUF_OFFSET / sizeof(int) > 255) {
    e7be:	1b63      	subs	r3, r4, r5
    e7c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e7c4:	d297      	bcs.n	e6f6 <cbvprintf_package+0x1fa>
	if (buf0 == NULL) {
    e7c6:	b93d      	cbnz	r5, e7d8 <cbvprintf_package+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    e7c8:	f1a6 0408 	sub.w	r4, r6, #8
    e7cc:	18e0      	adds	r0, r4, r3
    e7ce:	e6ae      	b.n	e52e <cbvprintf_package+0x32>
    e7d0:	000329f4 	.word	0x000329f4
    e7d4:	00038e34 	.word	0x00038e34
	if (rws_pos_en) {
    e7d8:	9a02      	ldr	r2, [sp, #8]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    e7da:	089b      	lsrs	r3, r3, #2
	*(char **)buf0 = NULL;
    e7dc:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    e7de:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    e7e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    e7e4:	b1c2      	cbz	r2, e818 <cbvprintf_package+0x31c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    e7e6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    e7e8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    e7ec:	f1b9 0f00 	cmp.w	r9, #0
    e7f0:	d005      	beq.n	e7fe <cbvprintf_package+0x302>
		for (i = 0; i < s_idx; i++) {
    e7f2:	2200      	movs	r2, #0
    e7f4:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
    e7f6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    e7fa:	4297      	cmp	r7, r2
    e7fc:	d10e      	bne.n	e81c <cbvprintf_package+0x320>
			*buf++ = str_ptr_arg[i];
    e7fe:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    e802:	f1c5 0301 	rsb	r3, r5, #1
    e806:	f10d 0820 	add.w	r8, sp, #32
    e80a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    e80c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    e810:	4557      	cmp	r7, sl
    e812:	d112      	bne.n	e83a <cbvprintf_package+0x33e>
	return BUF_OFFSET;
    e814:	1b60      	subs	r0, r4, r5
    e816:	e68a      	b.n	e52e <cbvprintf_package+0x32>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    e818:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    e81a:	e7e5      	b.n	e7e8 <cbvprintf_package+0x2ec>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    e81c:	f810 3b01 	ldrb.w	r3, [r0], #1
    e820:	0619      	lsls	r1, r3, #24
    e822:	d508      	bpl.n	e836 <cbvprintf_package+0x33a>
			if (BUF_OFFSET + 1 > len) {
    e824:	eb04 0e0c 	add.w	lr, r4, ip
    e828:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    e82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    e82e:	f4ff ae7c 	bcc.w	e52a <cbvprintf_package+0x2e>
			*buf++ = pos;
    e832:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    e836:	3201      	adds	r2, #1
    e838:	e7df      	b.n	e7fa <cbvprintf_package+0x2fe>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    e83a:	f1b9 0f00 	cmp.w	r9, #0
    e83e:	d003      	beq.n	e848 <cbvprintf_package+0x34c>
    e840:	f998 2000 	ldrsb.w	r2, [r8]
    e844:	2a00      	cmp	r2, #0
    e846:	db17      	blt.n	e878 <cbvprintf_package+0x37c>
		if (rws_pos_en) {
    e848:	9b02      	ldr	r3, [sp, #8]
    e84a:	b1d3      	cbz	r3, e882 <cbvprintf_package+0x386>
			*buf++ = str_ptr_arg[i];
    e84c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    e850:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    e854:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    e856:	9b01      	ldr	r3, [sp, #4]
    e858:	1898      	adds	r0, r3, r2
    e85a:	4420      	add	r0, r4
    e85c:	4286      	cmp	r6, r0
    e85e:	f4ff ae64 	bcc.w	e52a <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    e862:	f898 0000 	ldrb.w	r0, [r8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e866:	9900      	ldr	r1, [sp, #0]
    e868:	f804 0b01 	strb.w	r0, [r4], #1
    e86c:	4620      	mov	r0, r4
    e86e:	9203      	str	r2, [sp, #12]
    e870:	f023 f8d7 	bl	31a22 <memcpy>
		buf += size;
    e874:	9a03      	ldr	r2, [sp, #12]
    e876:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    e878:	f10a 0a01 	add.w	sl, sl, #1
    e87c:	f108 0801 	add.w	r8, r8, #1
    e880:	e7c6      	b.n	e810 <cbvprintf_package+0x314>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    e882:	f898 2000 	ldrb.w	r2, [r8]
    e886:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    e88a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    e88c:	9b02      	ldr	r3, [sp, #8]
			size = strlen(s) + 1;
    e88e:	9800      	ldr	r0, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    e890:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    e894:	f7fa fdb9 	bl	940a <strlen>
    e898:	1c42      	adds	r2, r0, #1
    e89a:	e7dc      	b.n	e856 <cbvprintf_package+0x35a>
		return -EFAULT;
    e89c:	f06f 000d 	mvn.w	r0, #13
    e8a0:	e645      	b.n	e52e <cbvprintf_package+0x32>
    e8a2:	bf00      	nop

0000e8a4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    e8a4:	4b01      	ldr	r3, [pc, #4]	; (e8ac <char_out+0x8>)
    e8a6:	681b      	ldr	r3, [r3, #0]
    e8a8:	4718      	bx	r3
    e8aa:	bf00      	nop
    e8ac:	200084c4 	.word	0x200084c4

0000e8b0 <__printk_hook_install>:
	_char_out = fn;
    e8b0:	4b01      	ldr	r3, [pc, #4]	; (e8b8 <__printk_hook_install+0x8>)
    e8b2:	6018      	str	r0, [r3, #0]
}
    e8b4:	4770      	bx	lr
    e8b6:	bf00      	nop
    e8b8:	200084c4 	.word	0x200084c4

0000e8bc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    e8bc:	b507      	push	{r0, r1, r2, lr}
    e8be:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    e8c0:	2100      	movs	r1, #0
    e8c2:	4602      	mov	r2, r0
    e8c4:	9100      	str	r1, [sp, #0]
    e8c6:	4803      	ldr	r0, [pc, #12]	; (e8d4 <vprintk+0x18>)
    e8c8:	f000 f9a2 	bl	ec10 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    e8cc:	b003      	add	sp, #12
    e8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d2:	bf00      	nop
    e8d4:	0000e8a5 	.word	0x0000e8a5

0000e8d8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    e8d8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    e8da:	2500      	movs	r5, #0
{
    e8dc:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    e8de:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    e8e2:	4604      	mov	r4, r0
    e8e4:	9500      	str	r5, [sp, #0]
    e8e6:	a903      	add	r1, sp, #12
    e8e8:	4805      	ldr	r0, [pc, #20]	; (e900 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    e8ea:	9505      	str	r5, [sp, #20]
    e8ec:	f000 f990 	bl	ec10 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    e8f0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    e8f4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    e8f6:	bfb8      	it	lt
    e8f8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    e8fa:	b007      	add	sp, #28
    e8fc:	bd30      	pop	{r4, r5, pc}
    e8fe:	bf00      	nop
    e900:	0002a437 	.word	0x0002a437

0000e904 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    e904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e908:	8b05      	ldrh	r5, [r0, #24]
{
    e90a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    e90c:	0728      	lsls	r0, r5, #28
{
    e90e:	4690      	mov	r8, r2
	if (processing) {
    e910:	d411      	bmi.n	e936 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    e912:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e914:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    e918:	f040 80cd 	bne.w	eab6 <process_event+0x1b2>
			evt = process_recheck(mgr);
    e91c:	4620      	mov	r0, r4
    e91e:	f01b ff86 	bl	2a82e <process_recheck>
		}

		if (evt == EVT_NOP) {
    e922:	b178      	cbz	r0, e944 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    e924:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e926:	8b21      	ldrh	r1, [r4, #24]
    e928:	2804      	cmp	r0, #4
    e92a:	d811      	bhi.n	e950 <process_event+0x4c>
    e92c:	e8df f000 	tbb	[pc, r0]
    e930:	856d10c3 	.word	0x856d10c3
    e934:	95          	.byte	0x95
    e935:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    e936:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    e938:	bf0c      	ite	eq
    e93a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e93e:	f045 0520 	orrne.w	r5, r5, #32
    e942:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    e944:	f388 8811 	msr	BASEPRI, r8
    e948:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    e94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e950:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    e954:	45aa      	cmp	sl, r5
    e956:	f000 80a6 	beq.w	eaa6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    e95a:	2700      	movs	r7, #0
    e95c:	46b9      	mov	r9, r7
    e95e:	463e      	mov	r6, r7
    e960:	68a3      	ldr	r3, [r4, #8]
    e962:	2b00      	cmp	r3, #0
    e964:	f000 80bd 	beq.w	eae2 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    e968:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    e96c:	8321      	strh	r1, [r4, #24]
    e96e:	f388 8811 	msr	BASEPRI, r8
    e972:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    e976:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e978:	2900      	cmp	r1, #0
    e97a:	f000 80bb 	beq.w	eaf4 <process_event+0x1f0>
	return node->next;
    e97e:	680d      	ldr	r5, [r1, #0]
    e980:	2900      	cmp	r1, #0
    e982:	f000 80b7 	beq.w	eaf4 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    e986:	4633      	mov	r3, r6
    e988:	4652      	mov	r2, sl
    e98a:	4620      	mov	r0, r4
    e98c:	f8d1 8004 	ldr.w	r8, [r1, #4]
    e990:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e992:	2d00      	cmp	r5, #0
    e994:	d076      	beq.n	ea84 <process_event+0x180>
    e996:	682b      	ldr	r3, [r5, #0]
    e998:	4629      	mov	r1, r5
    e99a:	461d      	mov	r5, r3
    e99c:	e7f0      	b.n	e980 <process_event+0x7c>
    e99e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    e9a2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    e9a4:	2a01      	cmp	r2, #1
    e9a6:	d81b      	bhi.n	e9e0 <process_event+0xdc>
	list->head = NULL;
    e9a8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e9aa:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    e9ae:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    e9b0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e9b2:	b289      	uxth	r1, r1
	list->tail = NULL;
    e9b4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    e9b8:	d109      	bne.n	e9ce <process_event+0xca>
    e9ba:	463b      	mov	r3, r7
    e9bc:	e003      	b.n	e9c6 <process_event+0xc2>
				mgr->refs += 1U;
    e9be:	8b62      	ldrh	r2, [r4, #26]
    e9c0:	3201      	adds	r2, #1
    e9c2:	8362      	strh	r2, [r4, #26]
	return node->next;
    e9c4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    e9c6:	2b00      	cmp	r3, #0
    e9c8:	d1f9      	bne.n	e9be <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e9ca:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    e9ce:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e9d0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e9d2:	f01b ff2c 	bl	2a82e <process_recheck>
    e9d6:	2800      	cmp	r0, #0
    e9d8:	d07b      	beq.n	ead2 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e9da:	f041 0120 	orr.w	r1, r1, #32
    e9de:	e077      	b.n	ead0 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    e9e0:	2b04      	cmp	r3, #4
    e9e2:	d10a      	bne.n	e9fa <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e9e4:	f021 0107 	bic.w	r1, r1, #7
    e9e8:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    e9ea:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    e9ec:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    e9ee:	f01b ff1e 	bl	2a82e <process_recheck>
    e9f2:	b110      	cbz	r0, e9fa <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    e9f4:	f041 0120 	orr.w	r1, r1, #32
    e9f8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    e9fa:	8b21      	ldrh	r1, [r4, #24]
    e9fc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ea00:	45aa      	cmp	sl, r5
    ea02:	d050      	beq.n	eaa6 <process_event+0x1a2>
    ea04:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    ea06:	46b9      	mov	r9, r7
    ea08:	e7aa      	b.n	e960 <process_event+0x5c>
			transit = mgr->transitions->start;
    ea0a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ea0c:	f021 0107 	bic.w	r1, r1, #7
    ea10:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    ea14:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    ea16:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    ea1a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    ea1c:	d12d      	bne.n	ea7a <process_event+0x176>
		    || (transit != NULL)) {
    ea1e:	f1b9 0f00 	cmp.w	r9, #0
    ea22:	d040      	beq.n	eaa6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ea24:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    ea28:	8321      	strh	r1, [r4, #24]
    ea2a:	f388 8811 	msr	BASEPRI, r8
    ea2e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    ea32:	4620      	mov	r0, r4
    ea34:	4939      	ldr	r1, [pc, #228]	; (eb1c <process_event+0x218>)
    ea36:	47c8      	blx	r9
    ea38:	e029      	b.n	ea8e <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ea3a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    ea3e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ea40:	f041 0104 	orr.w	r1, r1, #4
    ea44:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    ea46:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    ea48:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    ea4c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    ea4e:	d0e6      	beq.n	ea1e <process_event+0x11a>
    ea50:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ea52:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    ea56:	463e      	mov	r6, r7
    ea58:	e782      	b.n	e960 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ea5a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    ea5e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ea60:	f041 0105 	orr.w	r1, r1, #5
    ea64:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    ea66:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    ea68:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    ea6c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    ea6e:	d0d6      	beq.n	ea1e <process_event+0x11a>
    ea70:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ea72:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    ea76:	463e      	mov	r6, r7
    ea78:	e772      	b.n	e960 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    ea7a:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ea7c:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    ea80:	463e      	mov	r6, r7
    ea82:	e76d      	b.n	e960 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ea84:	462b      	mov	r3, r5
    ea86:	e787      	b.n	e998 <process_event+0x94>
			if (transit != NULL) {
    ea88:	f1b9 0f00 	cmp.w	r9, #0
    ea8c:	d1d1      	bne.n	ea32 <process_event+0x12e>
	__asm__ volatile(
    ea8e:	f04f 0320 	mov.w	r3, #32
    ea92:	f3ef 8811 	mrs	r8, BASEPRI
    ea96:	f383 8812 	msr	BASEPRI_MAX, r3
    ea9a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ea9e:	8b23      	ldrh	r3, [r4, #24]
    eaa0:	f023 0308 	bic.w	r3, r3, #8
    eaa4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    eaa6:	8b25      	ldrh	r5, [r4, #24]
    eaa8:	06ea      	lsls	r2, r5, #27
    eaaa:	d52e      	bpl.n	eb0a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    eaac:	f025 0310 	bic.w	r3, r5, #16
    eab0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    eab2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    eab6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    eab8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    eaba:	2e00      	cmp	r6, #0
    eabc:	f6bf af6f 	bge.w	e99e <process_event+0x9a>
	list->head = NULL;
    eac0:	2300      	movs	r3, #0
		*clients = mgr->clients;
    eac2:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    eac4:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    eac8:	f021 0107 	bic.w	r1, r1, #7
    eacc:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ead0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ead2:	8b21      	ldrh	r1, [r4, #24]
    ead4:	f04f 0900 	mov.w	r9, #0
    ead8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    eadc:	45aa      	cmp	sl, r5
    eade:	f47f af3f 	bne.w	e960 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    eae2:	2f00      	cmp	r7, #0
    eae4:	d09b      	beq.n	ea1e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    eae6:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    eaea:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    eaec:	f388 8811 	msr	BASEPRI, r8
    eaf0:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    eaf4:	2f00      	cmp	r7, #0
    eaf6:	d0c7      	beq.n	ea88 <process_event+0x184>
	return node->next;
    eaf8:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    eafa:	4639      	mov	r1, r7
    eafc:	4633      	mov	r3, r6
    eafe:	4652      	mov	r2, sl
    eb00:	4620      	mov	r0, r4
    eb02:	f01b fec0 	bl	2a886 <notify_one>
	list->head = node;
    eb06:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    eb08:	e7f4      	b.n	eaf4 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    eb0a:	06ab      	lsls	r3, r5, #26
    eb0c:	f57f af1a 	bpl.w	e944 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    eb10:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    eb14:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    eb16:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    eb1a:	e6ff      	b.n	e91c <process_event+0x18>
    eb1c:	0002a8b3 	.word	0x0002a8b3

0000eb20 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    eb20:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    eb22:	4c09      	ldr	r4, [pc, #36]	; (eb48 <crc8_ccitt+0x28>)
    eb24:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    eb26:	4291      	cmp	r1, r2
    eb28:	d100      	bne.n	eb2c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    eb2a:	bd10      	pop	{r4, pc}
		val ^= p[i];
    eb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
    eb30:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    eb32:	0903      	lsrs	r3, r0, #4
    eb34:	5ce3      	ldrb	r3, [r4, r3]
    eb36:	0100      	lsls	r0, r0, #4
    eb38:	b2c0      	uxtb	r0, r0
    eb3a:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    eb3c:	0918      	lsrs	r0, r3, #4
    eb3e:	5c20      	ldrb	r0, [r4, r0]
    eb40:	011b      	lsls	r3, r3, #4
    eb42:	b2db      	uxtb	r3, r3
    eb44:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    eb46:	e7ee      	b.n	eb26 <crc8_ccitt+0x6>
    eb48:	00035515 	.word	0x00035515

0000eb4c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    eb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb4e:	4602      	mov	r2, r0
    eb50:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    eb52:	270a      	movs	r7, #10
	size_t val = 0;
    eb54:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    eb56:	4e07      	ldr	r6, [pc, #28]	; (eb74 <extract_decimal+0x28>)
    eb58:	460b      	mov	r3, r1
    eb5a:	781c      	ldrb	r4, [r3, #0]
    eb5c:	3101      	adds	r1, #1
    eb5e:	5d35      	ldrb	r5, [r6, r4]
    eb60:	076d      	lsls	r5, r5, #29
    eb62:	d401      	bmi.n	eb68 <extract_decimal+0x1c>
	}
	*str = sp;
    eb64:	6013      	str	r3, [r2, #0]
	return val;
}
    eb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    eb68:	fb07 4300 	mla	r3, r7, r0, r4
    eb6c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    eb70:	e7f2      	b.n	eb58 <extract_decimal+0xc>
    eb72:	bf00      	nop
    eb74:	00038a4e 	.word	0x00038a4e

0000eb78 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    eb78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb7c:	4615      	mov	r5, r2
    eb7e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    eb80:	78d3      	ldrb	r3, [r2, #3]
    eb82:	4a22      	ldr	r2, [pc, #136]	; (ec0c <encode_uint+0x94>)
	switch (specifier) {
    eb84:	2b6f      	cmp	r3, #111	; 0x6f
    eb86:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    eb8a:	4680      	mov	r8, r0
    eb8c:	460f      	mov	r7, r1
    eb8e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    eb92:	d029      	beq.n	ebe8 <encode_uint+0x70>
    eb94:	d824      	bhi.n	ebe0 <encode_uint+0x68>
		return 10;
    eb96:	2b58      	cmp	r3, #88	; 0x58
    eb98:	bf0c      	ite	eq
    eb9a:	2610      	moveq	r6, #16
    eb9c:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    eb9e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    eba2:	4632      	mov	r2, r6
    eba4:	2300      	movs	r3, #0
    eba6:	4640      	mov	r0, r8
    eba8:	4639      	mov	r1, r7
    ebaa:	f7fa f9c9 	bl	8f40 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    ebae:	2a09      	cmp	r2, #9
    ebb0:	b2d4      	uxtb	r4, r2
    ebb2:	d81e      	bhi.n	ebf2 <encode_uint+0x7a>
    ebb4:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    ebb6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ebb8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    ebba:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ebbe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    ebc2:	d301      	bcc.n	ebc8 <encode_uint+0x50>
    ebc4:	45d1      	cmp	r9, sl
    ebc6:	d811      	bhi.n	ebec <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    ebc8:	782b      	ldrb	r3, [r5, #0]
    ebca:	069b      	lsls	r3, r3, #26
    ebcc:	d505      	bpl.n	ebda <encode_uint+0x62>
		if (radix == 8) {
    ebce:	2e08      	cmp	r6, #8
    ebd0:	d115      	bne.n	ebfe <encode_uint+0x86>
			conv->altform_0 = true;
    ebd2:	78ab      	ldrb	r3, [r5, #2]
    ebd4:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    ebd8:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    ebda:	4648      	mov	r0, r9
    ebdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    ebe0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    ebe4:	2b70      	cmp	r3, #112	; 0x70
    ebe6:	e7d7      	b.n	eb98 <encode_uint+0x20>
	switch (specifier) {
    ebe8:	2608      	movs	r6, #8
    ebea:	e7d8      	b.n	eb9e <encode_uint+0x26>
		value /= radix;
    ebec:	4680      	mov	r8, r0
    ebee:	460f      	mov	r7, r1
    ebf0:	e7d7      	b.n	eba2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ebf2:	f1bb 0f01 	cmp.w	fp, #1
    ebf6:	bf0c      	ite	eq
    ebf8:	3437      	addeq	r4, #55	; 0x37
    ebfa:	3457      	addne	r4, #87	; 0x57
    ebfc:	e7db      	b.n	ebb6 <encode_uint+0x3e>
		} else if (radix == 16) {
    ebfe:	2e10      	cmp	r6, #16
    ec00:	d1eb      	bne.n	ebda <encode_uint+0x62>
			conv->altform_0c = true;
    ec02:	78ab      	ldrb	r3, [r5, #2]
    ec04:	f043 0310 	orr.w	r3, r3, #16
    ec08:	e7e6      	b.n	ebd8 <encode_uint+0x60>
    ec0a:	bf00      	nop
    ec0c:	00038a4e 	.word	0x00038a4e

0000ec10 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    ec10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec14:	4682      	mov	sl, r0
    ec16:	4617      	mov	r7, r2
    ec18:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    ec1a:	2500      	movs	r5, #0
{
    ec1c:	b097      	sub	sp, #92	; 0x5c
    ec1e:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    ec20:	7838      	ldrb	r0, [r7, #0]
    ec22:	b908      	cbnz	r0, ec28 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    ec24:	4628      	mov	r0, r5
    ec26:	e349      	b.n	f2bc <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    ec28:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    ec2a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    ec2c:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    ec2e:	d006      	beq.n	ec3e <z_cbvprintf_impl+0x2e>
			OUTC('%');
    ec30:	9903      	ldr	r1, [sp, #12]
    ec32:	47d0      	blx	sl
    ec34:	2800      	cmp	r0, #0
    ec36:	f2c0 8341 	blt.w	f2bc <z_cbvprintf_impl+0x6ac>
    ec3a:	3501      	adds	r5, #1
		if (bps == NULL) {
    ec3c:	e1f0      	b.n	f020 <z_cbvprintf_impl+0x410>
		} state = {
    ec3e:	2218      	movs	r2, #24
    ec40:	2100      	movs	r1, #0
    ec42:	a810      	add	r0, sp, #64	; 0x40
    ec44:	f022 ff27 	bl	31a96 <memset>
	if (*sp == '%') {
    ec48:	787b      	ldrb	r3, [r7, #1]
    ec4a:	2b25      	cmp	r3, #37	; 0x25
    ec4c:	f000 80a3 	beq.w	ed96 <z_cbvprintf_impl+0x186>
    ec50:	2300      	movs	r3, #0
    ec52:	4698      	mov	r8, r3
    ec54:	469e      	mov	lr, r3
    ec56:	469c      	mov	ip, r3
    ec58:	4618      	mov	r0, r3
    ec5a:	1c79      	adds	r1, r7, #1
    ec5c:	460e      	mov	r6, r1
		switch (*sp) {
    ec5e:	f811 2b01 	ldrb.w	r2, [r1], #1
    ec62:	2a2b      	cmp	r2, #43	; 0x2b
    ec64:	f000 80c6 	beq.w	edf4 <z_cbvprintf_impl+0x1e4>
    ec68:	f200 80bd 	bhi.w	ede6 <z_cbvprintf_impl+0x1d6>
    ec6c:	2a20      	cmp	r2, #32
    ec6e:	f000 80c4 	beq.w	edfa <z_cbvprintf_impl+0x1ea>
    ec72:	2a23      	cmp	r2, #35	; 0x23
    ec74:	f000 80c4 	beq.w	ee00 <z_cbvprintf_impl+0x1f0>
    ec78:	b12b      	cbz	r3, ec86 <z_cbvprintf_impl+0x76>
    ec7a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ec7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ec82:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ec86:	f1b8 0f00 	cmp.w	r8, #0
    ec8a:	d005      	beq.n	ec98 <z_cbvprintf_impl+0x88>
    ec8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ec90:	f043 0320 	orr.w	r3, r3, #32
    ec94:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ec98:	f1be 0f00 	cmp.w	lr, #0
    ec9c:	d005      	beq.n	ecaa <z_cbvprintf_impl+0x9a>
    ec9e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    eca2:	f043 0310 	orr.w	r3, r3, #16
    eca6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ecaa:	f1bc 0f00 	cmp.w	ip, #0
    ecae:	d005      	beq.n	ecbc <z_cbvprintf_impl+0xac>
    ecb0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ecb4:	f043 0308 	orr.w	r3, r3, #8
    ecb8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ecbc:	b128      	cbz	r0, ecca <z_cbvprintf_impl+0xba>
    ecbe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ecc2:	f043 0304 	orr.w	r3, r3, #4
    ecc6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    ecca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ecce:	f003 0144 	and.w	r1, r3, #68	; 0x44
    ecd2:	2944      	cmp	r1, #68	; 0x44
    ecd4:	d103      	bne.n	ecde <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    ecd6:	f36f 1386 	bfc	r3, #6, #1
    ecda:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    ecde:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    ece2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    ece4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ece8:	9609      	str	r6, [sp, #36]	; 0x24
    ecea:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    ecee:	f040 808c 	bne.w	ee0a <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    ecf2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    ecf6:	f043 0301 	orr.w	r3, r3, #1
    ecfa:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    ecfe:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    ed00:	781a      	ldrb	r2, [r3, #0]
    ed02:	2a2e      	cmp	r2, #46	; 0x2e
    ed04:	bf0c      	ite	eq
    ed06:	2101      	moveq	r1, #1
    ed08:	2100      	movne	r1, #0
    ed0a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ed0e:	f361 0241 	bfi	r2, r1, #1, #1
    ed12:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    ed16:	d10c      	bne.n	ed32 <z_cbvprintf_impl+0x122>
	++sp;
    ed18:	1c5a      	adds	r2, r3, #1
    ed1a:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    ed1c:	785a      	ldrb	r2, [r3, #1]
    ed1e:	2a2a      	cmp	r2, #42	; 0x2a
    ed20:	f040 8083 	bne.w	ee2a <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    ed24:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    ed28:	3302      	adds	r3, #2
		conv->prec_star = true;
    ed2a:	f042 0204 	orr.w	r2, r2, #4
    ed2e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    ed32:	781a      	ldrb	r2, [r3, #0]
    ed34:	2a6c      	cmp	r2, #108	; 0x6c
    ed36:	f000 80a4 	beq.w	ee82 <z_cbvprintf_impl+0x272>
    ed3a:	f200 8086 	bhi.w	ee4a <z_cbvprintf_impl+0x23a>
    ed3e:	2a68      	cmp	r2, #104	; 0x68
    ed40:	f000 808c 	beq.w	ee5c <z_cbvprintf_impl+0x24c>
    ed44:	2a6a      	cmp	r2, #106	; 0x6a
    ed46:	f000 80a5 	beq.w	ee94 <z_cbvprintf_impl+0x284>
    ed4a:	2a4c      	cmp	r2, #76	; 0x4c
    ed4c:	f000 80aa 	beq.w	eea4 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    ed50:	461a      	mov	r2, r3
    ed52:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    ed56:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    ed58:	9204      	str	r2, [sp, #16]
    ed5a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    ed5e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    ed62:	f200 8117 	bhi.w	ef94 <z_cbvprintf_impl+0x384>
    ed66:	2b6d      	cmp	r3, #109	; 0x6d
    ed68:	f200 80a9 	bhi.w	eebe <z_cbvprintf_impl+0x2ae>
    ed6c:	2b69      	cmp	r3, #105	; 0x69
    ed6e:	f200 8111 	bhi.w	ef94 <z_cbvprintf_impl+0x384>
    ed72:	2b57      	cmp	r3, #87	; 0x57
    ed74:	f200 80be 	bhi.w	eef4 <z_cbvprintf_impl+0x2e4>
    ed78:	2b41      	cmp	r3, #65	; 0x41
    ed7a:	d003      	beq.n	ed84 <z_cbvprintf_impl+0x174>
    ed7c:	3b45      	subs	r3, #69	; 0x45
    ed7e:	2b02      	cmp	r3, #2
    ed80:	f200 8108 	bhi.w	ef94 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    ed84:	2204      	movs	r2, #4
    ed86:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ed8a:	f362 0302 	bfi	r3, r2, #0, #3
    ed8e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    ed92:	2301      	movs	r3, #1
			break;
    ed94:	e0ca      	b.n	ef2c <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    ed96:	1cba      	adds	r2, r7, #2
    ed98:	9204      	str	r2, [sp, #16]
    ed9a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    ed9e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    eda2:	07da      	lsls	r2, r3, #31
    eda4:	f140 80fd 	bpl.w	efa2 <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    eda8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    edac:	f1b9 0f00 	cmp.w	r9, #0
    edb0:	da07      	bge.n	edc2 <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    edb2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    edb6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    edba:	f042 0204 	orr.w	r2, r2, #4
    edbe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    edc2:	075e      	lsls	r6, r3, #29
    edc4:	f140 80f6 	bpl.w	efb4 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    edc8:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    edcc:	f1bb 0f00 	cmp.w	fp, #0
    edd0:	f280 80f5 	bge.w	efbe <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    edd4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    edd8:	f36f 0341 	bfc	r3, #1, #1
    eddc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    ede0:	f04f 3bff 	mov.w	fp, #4294967295
    ede4:	e0eb      	b.n	efbe <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    ede6:	2a2d      	cmp	r2, #45	; 0x2d
    ede8:	d00d      	beq.n	ee06 <z_cbvprintf_impl+0x1f6>
    edea:	2a30      	cmp	r2, #48	; 0x30
    edec:	f47f af44 	bne.w	ec78 <z_cbvprintf_impl+0x68>
    edf0:	2301      	movs	r3, #1
	} while (loop);
    edf2:	e733      	b.n	ec5c <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    edf4:	f04f 0c01 	mov.w	ip, #1
    edf8:	e730      	b.n	ec5c <z_cbvprintf_impl+0x4c>
    edfa:	f04f 0e01 	mov.w	lr, #1
    edfe:	e72d      	b.n	ec5c <z_cbvprintf_impl+0x4c>
    ee00:	f04f 0801 	mov.w	r8, #1
    ee04:	e72a      	b.n	ec5c <z_cbvprintf_impl+0x4c>
    ee06:	2001      	movs	r0, #1
    ee08:	e728      	b.n	ec5c <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    ee0a:	a809      	add	r0, sp, #36	; 0x24
    ee0c:	f7ff fe9e 	bl	eb4c <extract_decimal>
	if (sp != wp) {
    ee10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee12:	42b3      	cmp	r3, r6
    ee14:	f43f af74 	beq.w	ed00 <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    ee18:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    ee1c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    ee1e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    ee20:	f360 0241 	bfi	r2, r0, #1, #1
    ee24:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    ee28:	e76a      	b.n	ed00 <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    ee2a:	a809      	add	r0, sp, #36	; 0x24
    ee2c:	f7ff fe8e 	bl	eb4c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    ee30:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    ee34:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    ee36:	f3c3 0240 	ubfx	r2, r3, #1, #1
    ee3a:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    ee3e:	f362 0341 	bfi	r3, r2, #1, #1
    ee42:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    ee46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee48:	e773      	b.n	ed32 <z_cbvprintf_impl+0x122>
	switch (*sp) {
    ee4a:	2a74      	cmp	r2, #116	; 0x74
    ee4c:	d026      	beq.n	ee9c <z_cbvprintf_impl+0x28c>
    ee4e:	2a7a      	cmp	r2, #122	; 0x7a
    ee50:	f47f af7e 	bne.w	ed50 <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    ee54:	2106      	movs	r1, #6
    ee56:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ee5a:	e00c      	b.n	ee76 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    ee5c:	785a      	ldrb	r2, [r3, #1]
    ee5e:	2a68      	cmp	r2, #104	; 0x68
    ee60:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ee64:	d106      	bne.n	ee74 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    ee66:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    ee68:	f361 02c6 	bfi	r2, r1, #3, #4
    ee6c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    ee70:	3302      	adds	r3, #2
    ee72:	e76d      	b.n	ed50 <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    ee74:	2102      	movs	r1, #2
    ee76:	f361 02c6 	bfi	r2, r1, #3, #4
    ee7a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    ee7e:	3301      	adds	r3, #1
    ee80:	e766      	b.n	ed50 <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    ee82:	785a      	ldrb	r2, [r3, #1]
    ee84:	2a6c      	cmp	r2, #108	; 0x6c
    ee86:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ee8a:	d101      	bne.n	ee90 <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    ee8c:	2104      	movs	r1, #4
    ee8e:	e7eb      	b.n	ee68 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    ee90:	2103      	movs	r1, #3
    ee92:	e7f0      	b.n	ee76 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    ee94:	2105      	movs	r1, #5
    ee96:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    ee9a:	e7ec      	b.n	ee76 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    ee9c:	2107      	movs	r1, #7
    ee9e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    eea2:	e7e8      	b.n	ee76 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    eea4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    eea8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    eeac:	f022 0202 	bic.w	r2, r2, #2
    eeb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    eeb4:	f042 0202 	orr.w	r2, r2, #2
    eeb8:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    eebc:	e7df      	b.n	ee7e <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    eebe:	3b6e      	subs	r3, #110	; 0x6e
    eec0:	b2d9      	uxtb	r1, r3
    eec2:	2301      	movs	r3, #1
    eec4:	408b      	lsls	r3, r1
    eec6:	f240 4182 	movw	r1, #1154	; 0x482
    eeca:	420b      	tst	r3, r1
    eecc:	d138      	bne.n	ef40 <z_cbvprintf_impl+0x330>
    eece:	f013 0f24 	tst.w	r3, #36	; 0x24
    eed2:	d152      	bne.n	ef7a <z_cbvprintf_impl+0x36a>
    eed4:	07d8      	lsls	r0, r3, #31
    eed6:	d55d      	bpl.n	ef94 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    eed8:	2103      	movs	r1, #3
    eeda:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    eede:	f361 0302 	bfi	r3, r1, #0, #3
    eee2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    eee6:	f002 0378 	and.w	r3, r2, #120	; 0x78
    eeea:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    eeee:	424b      	negs	r3, r1
    eef0:	414b      	adcs	r3, r1
    eef2:	e01b      	b.n	ef2c <z_cbvprintf_impl+0x31c>
    eef4:	2001      	movs	r0, #1
	switch (conv->specifier) {
    eef6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    eefa:	b2c9      	uxtb	r1, r1
    eefc:	fa00 f101 	lsl.w	r1, r0, r1
    ef00:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    ef04:	f47f af3e 	bne.w	ed84 <z_cbvprintf_impl+0x174>
    ef08:	f640 0601 	movw	r6, #2049	; 0x801
    ef0c:	4231      	tst	r1, r6
    ef0e:	d11d      	bne.n	ef4c <z_cbvprintf_impl+0x33c>
    ef10:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ef14:	d03e      	beq.n	ef94 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    ef16:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ef1a:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ef1e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    ef22:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    ef24:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ef28:	d034      	beq.n	ef94 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    ef2a:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    ef2c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    ef30:	f3c2 0140 	ubfx	r1, r2, #1, #1
    ef34:	430b      	orrs	r3, r1
    ef36:	f363 0241 	bfi	r2, r3, #1, #1
    ef3a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    ef3e:	e72e      	b.n	ed9e <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    ef40:	2102      	movs	r1, #2
    ef42:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    ef46:	f361 0302 	bfi	r3, r1, #0, #3
    ef4a:	e7e8      	b.n	ef1e <z_cbvprintf_impl+0x30e>
    ef4c:	2002      	movs	r0, #2
    ef4e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    ef52:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    ef56:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ef5a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    ef5c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    ef60:	bf02      	ittt	eq
    ef62:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    ef66:	f041 0101 	orreq.w	r1, r1, #1
    ef6a:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    ef6e:	2b63      	cmp	r3, #99	; 0x63
    ef70:	d1db      	bne.n	ef2a <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ef72:	1e13      	subs	r3, r2, #0
    ef74:	bf18      	it	ne
    ef76:	2301      	movne	r3, #1
    ef78:	e7d8      	b.n	ef2c <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    ef7a:	2103      	movs	r1, #3
    ef7c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ef80:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ef84:	f361 0302 	bfi	r3, r1, #0, #3
    ef88:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    ef8c:	bf14      	ite	ne
    ef8e:	2301      	movne	r3, #1
    ef90:	2300      	moveq	r3, #0
    ef92:	e7cb      	b.n	ef2c <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    ef94:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    ef98:	f043 0301 	orr.w	r3, r3, #1
    ef9c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    efa0:	e7c3      	b.n	ef2a <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    efa2:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    efa6:	2a00      	cmp	r2, #0
		int width = -1;
    efa8:	bfac      	ite	ge
    efaa:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    efae:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    efb2:	e706      	b.n	edc2 <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    efb4:	0798      	lsls	r0, r3, #30
    efb6:	f57f af13 	bpl.w	ede0 <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    efba:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    efbe:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    efc0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    efc4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    efc8:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    efcc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    efd0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    efd2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    efd6:	d133      	bne.n	f040 <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    efd8:	1ecb      	subs	r3, r1, #3
    efda:	2b04      	cmp	r3, #4
    efdc:	d804      	bhi.n	efe8 <z_cbvprintf_impl+0x3d8>
    efde:	e8df f003 	tbb	[pc, r3]
    efe2:	4621      	.short	0x4621
    efe4:	2146      	.short	0x2146
    efe6:	21          	.byte	0x21
    efe7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    efe8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    efea:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    efec:	ea4f 72e3 	mov.w	r2, r3, asr #31
    eff0:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    eff4:	d11c      	bne.n	f030 <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    eff6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    effa:	17da      	asrs	r2, r3, #31
    effc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    f000:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    f002:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    f006:	f013 0603 	ands.w	r6, r3, #3
    f00a:	d050      	beq.n	f0ae <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    f00c:	463a      	mov	r2, r7
    f00e:	4650      	mov	r0, sl
    f010:	9b04      	ldr	r3, [sp, #16]
    f012:	9903      	ldr	r1, [sp, #12]
    f014:	f01b fcf3 	bl	2a9fe <outs>
    f018:	2800      	cmp	r0, #0
    f01a:	f2c0 814f 	blt.w	f2bc <z_cbvprintf_impl+0x6ac>
    f01e:	4405      	add	r5, r0
			continue;
    f020:	9f04      	ldr	r7, [sp, #16]
    f022:	e5fd      	b.n	ec20 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    f024:	f854 3b04 	ldr.w	r3, [r4], #4
    f028:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    f02a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    f02e:	e7e8      	b.n	f002 <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    f030:	2902      	cmp	r1, #2
    f032:	d1e5      	bne.n	f000 <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    f034:	b21a      	sxth	r2, r3
    f036:	f343 33c0 	sbfx	r3, r3, #15, #1
    f03a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    f03e:	e7df      	b.n	f000 <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    f040:	2b02      	cmp	r3, #2
    f042:	d124      	bne.n	f08e <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    f044:	1ecb      	subs	r3, r1, #3
    f046:	2b04      	cmp	r3, #4
    f048:	d804      	bhi.n	f054 <z_cbvprintf_impl+0x444>
    f04a:	e8df f003 	tbb	[pc, r3]
    f04e:	1018      	.short	0x1018
    f050:	1810      	.short	0x1810
    f052:	18          	.byte	0x18
    f053:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    f054:	2901      	cmp	r1, #1
    f056:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    f05a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    f05e:	d014      	beq.n	f08a <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    f060:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    f062:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    f066:	d1cc      	bne.n	f002 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    f068:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    f06a:	9310      	str	r3, [sp, #64]	; 0x40
    f06c:	e7c9      	b.n	f002 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    f06e:	3407      	adds	r4, #7
    f070:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    f074:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    f078:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    f07c:	e7c1      	b.n	f002 <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    f07e:	f854 3b04 	ldr.w	r3, [r4], #4
    f082:	9310      	str	r3, [sp, #64]	; 0x40
    f084:	2300      	movs	r3, #0
    f086:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    f088:	e7bb      	b.n	f002 <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    f08a:	b2db      	uxtb	r3, r3
    f08c:	e7cd      	b.n	f02a <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    f08e:	2b04      	cmp	r3, #4
    f090:	d108      	bne.n	f0a4 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    f092:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    f094:	f024 0407 	bic.w	r4, r4, #7
    f098:	e9d4 2300 	ldrd	r2, r3, [r4]
    f09c:	3408      	adds	r4, #8
    f09e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    f0a2:	e7ae      	b.n	f002 <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    f0a4:	2b03      	cmp	r3, #3
    f0a6:	d1ac      	bne.n	f002 <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    f0a8:	f854 3b04 	ldr.w	r3, [r4], #4
    f0ac:	e7dd      	b.n	f06a <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    f0ae:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    f0b2:	2878      	cmp	r0, #120	; 0x78
    f0b4:	d8b4      	bhi.n	f020 <z_cbvprintf_impl+0x410>
    f0b6:	2862      	cmp	r0, #98	; 0x62
    f0b8:	d81c      	bhi.n	f0f4 <z_cbvprintf_impl+0x4e4>
    f0ba:	2825      	cmp	r0, #37	; 0x25
    f0bc:	f43f adb8 	beq.w	ec30 <z_cbvprintf_impl+0x20>
    f0c0:	2858      	cmp	r0, #88	; 0x58
    f0c2:	d1ad      	bne.n	f020 <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    f0c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    f0c8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    f0cc:	9300      	str	r3, [sp, #0]
    f0ce:	aa12      	add	r2, sp, #72	; 0x48
    f0d0:	ab0a      	add	r3, sp, #40	; 0x28
    f0d2:	f7ff fd51 	bl	eb78 <encode_uint>
			if (precision >= 0) {
    f0d6:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    f0da:	4607      	mov	r7, r0
			if (precision >= 0) {
    f0dc:	f280 8097 	bge.w	f20e <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    f0e0:	2f00      	cmp	r7, #0
    f0e2:	d09d      	beq.n	f020 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    f0e4:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    f0e8:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    f0ec:	2e00      	cmp	r6, #0
    f0ee:	d04e      	beq.n	f18e <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    f0f0:	3001      	adds	r0, #1
    f0f2:	e04c      	b.n	f18e <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    f0f4:	3863      	subs	r0, #99	; 0x63
    f0f6:	2815      	cmp	r0, #21
    f0f8:	d892      	bhi.n	f020 <z_cbvprintf_impl+0x410>
    f0fa:	a201      	add	r2, pc, #4	; (adr r2, f100 <z_cbvprintf_impl+0x4f0>)
    f0fc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    f100:	0000f17f 	.word	0x0000f17f
    f104:	0000f1e5 	.word	0x0000f1e5
    f108:	0000f021 	.word	0x0000f021
    f10c:	0000f021 	.word	0x0000f021
    f110:	0000f021 	.word	0x0000f021
    f114:	0000f021 	.word	0x0000f021
    f118:	0000f1e5 	.word	0x0000f1e5
    f11c:	0000f021 	.word	0x0000f021
    f120:	0000f021 	.word	0x0000f021
    f124:	0000f021 	.word	0x0000f021
    f128:	0000f021 	.word	0x0000f021
    f12c:	0000f26d 	.word	0x0000f26d
    f130:	0000f209 	.word	0x0000f209
    f134:	0000f22f 	.word	0x0000f22f
    f138:	0000f021 	.word	0x0000f021
    f13c:	0000f021 	.word	0x0000f021
    f140:	0000f159 	.word	0x0000f159
    f144:	0000f021 	.word	0x0000f021
    f148:	0000f209 	.word	0x0000f209
    f14c:	0000f021 	.word	0x0000f021
    f150:	0000f021 	.word	0x0000f021
    f154:	0000f209 	.word	0x0000f209
			if (precision >= 0) {
    f158:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    f15c:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    f15e:	db0a      	blt.n	f176 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    f160:	4659      	mov	r1, fp
    f162:	4638      	mov	r0, r7
    f164:	f022 fe13 	bl	31d8e <strnlen>
			bpe = bps + len;
    f168:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    f16c:	2f00      	cmp	r7, #0
    f16e:	f43f af57 	beq.w	f020 <z_cbvprintf_impl+0x410>
		char sign = 0;
    f172:	2600      	movs	r6, #0
    f174:	e00b      	b.n	f18e <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    f176:	4638      	mov	r0, r7
    f178:	f7fa f947 	bl	940a <strlen>
    f17c:	e7f4      	b.n	f168 <z_cbvprintf_impl+0x558>
		char sign = 0;
    f17e:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    f180:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    f182:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    f184:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    f188:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    f18c:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    f18e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    f192:	f013 0210 	ands.w	r2, r3, #16
    f196:	9205      	str	r2, [sp, #20]
    f198:	f000 8083 	beq.w	f2a2 <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    f19c:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    f19e:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    f1a0:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    f1a4:	bf48      	it	mi
    f1a6:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    f1a8:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    f1aa:	bf48      	it	mi
    f1ac:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    f1ae:	f1b9 0f00 	cmp.w	r9, #0
    f1b2:	f340 8090 	ble.w	f2d6 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    f1b6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    f1ba:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    f1be:	f3c2 0380 	ubfx	r3, r2, #2, #1
    f1c2:	0750      	lsls	r0, r2, #29
    f1c4:	9306      	str	r3, [sp, #24]
    f1c6:	f100 8086 	bmi.w	f2d6 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    f1ca:	0651      	lsls	r1, r2, #25
    f1cc:	d579      	bpl.n	f2c2 <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    f1ce:	b13e      	cbz	r6, f1e0 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    f1d0:	4630      	mov	r0, r6
    f1d2:	9903      	ldr	r1, [sp, #12]
    f1d4:	47d0      	blx	sl
    f1d6:	2800      	cmp	r0, #0
    f1d8:	db70      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f1da:	9b06      	ldr	r3, [sp, #24]
    f1dc:	3501      	adds	r5, #1
    f1de:	461e      	mov	r6, r3
					pad = '0';
    f1e0:	2230      	movs	r2, #48	; 0x30
    f1e2:	e06f      	b.n	f2c4 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    f1e4:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    f1e6:	bf5a      	itte	pl
    f1e8:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    f1ec:	015e      	lslpl	r6, r3, #5
				sign = '+';
    f1ee:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    f1f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	f6bf af65 	bge.w	f0c4 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    f1fa:	4252      	negs	r2, r2
    f1fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    f200:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    f202:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    f206:	e75d      	b.n	f0c4 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    f208:	2600      	movs	r6, #0
    f20a:	e75b      	b.n	f0c4 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    f20c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    f20e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    f212:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    f216:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    f218:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    f21c:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    f21e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    f222:	f67f af5d 	bls.w	f0e0 <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    f226:	ebab 0303 	sub.w	r3, fp, r3
    f22a:	9313      	str	r3, [sp, #76]	; 0x4c
    f22c:	e758      	b.n	f0e0 <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    f22e:	9810      	ldr	r0, [sp, #64]	; 0x40
    f230:	b380      	cbz	r0, f294 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    f232:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    f236:	ab0a      	add	r3, sp, #40	; 0x28
    f238:	2100      	movs	r1, #0
    f23a:	f8cd 8000 	str.w	r8, [sp]
    f23e:	aa12      	add	r2, sp, #72	; 0x48
    f240:	f7ff fc9a 	bl	eb78 <encode_uint>
				conv->altform_0c = true;
    f244:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    f248:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    f24c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    f250:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    f254:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    f258:	4607      	mov	r7, r0
				conv->altform_0c = true;
    f25a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    f25e:	dad5      	bge.n	f20c <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    f260:	2800      	cmp	r0, #0
    f262:	f43f aedd 	beq.w	f020 <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    f266:	eba8 0000 	sub.w	r0, r8, r0
    f26a:	e782      	b.n	f172 <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    f26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    f26e:	2907      	cmp	r1, #7
    f270:	f63f aed6 	bhi.w	f020 <z_cbvprintf_impl+0x410>
    f274:	e8df f001 	tbb	[pc, r1]
    f278:	0c06040c 	.word	0x0c06040c
    f27c:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    f280:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    f282:	e6cd      	b.n	f020 <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    f284:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    f286:	e6cb      	b.n	f020 <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    f288:	17ea      	asrs	r2, r5, #31
    f28a:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    f28e:	e6c7      	b.n	f020 <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    f290:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    f292:	e6c5      	b.n	f020 <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    f294:	f8df 80bc 	ldr.w	r8, [pc, #188]	; f354 <z_cbvprintf_impl+0x744>
		char sign = 0;
    f298:	4606      	mov	r6, r0
    f29a:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    f29e:	2005      	movs	r0, #5
    f2a0:	e775      	b.n	f18e <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    f2a2:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    f2a4:	bf48      	it	mi
    f2a6:	3001      	addmi	r0, #1
    f2a8:	e779      	b.n	f19e <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    f2aa:	4610      	mov	r0, r2
    f2ac:	9307      	str	r3, [sp, #28]
    f2ae:	9206      	str	r2, [sp, #24]
    f2b0:	9903      	ldr	r1, [sp, #12]
    f2b2:	47d0      	blx	sl
    f2b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    f2b8:	2800      	cmp	r0, #0
    f2ba:	da04      	bge.n	f2c6 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    f2bc:	b017      	add	sp, #92	; 0x5c
    f2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    f2c2:	2220      	movs	r2, #32
					pad = '0';
    f2c4:	464b      	mov	r3, r9
				while (width-- > 0) {
    f2c6:	4619      	mov	r1, r3
    f2c8:	2900      	cmp	r1, #0
    f2ca:	f103 33ff 	add.w	r3, r3, #4294967295
    f2ce:	dcec      	bgt.n	f2aa <z_cbvprintf_impl+0x69a>
    f2d0:	444d      	add	r5, r9
    f2d2:	4699      	mov	r9, r3
    f2d4:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    f2d6:	b12e      	cbz	r6, f2e4 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    f2d8:	4630      	mov	r0, r6
    f2da:	9903      	ldr	r1, [sp, #12]
    f2dc:	47d0      	blx	sl
    f2de:	2800      	cmp	r0, #0
    f2e0:	dbec      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f2e2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    f2e4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    f2e8:	06da      	lsls	r2, r3, #27
    f2ea:	d401      	bmi.n	f2f0 <z_cbvprintf_impl+0x6e0>
    f2ec:	071b      	lsls	r3, r3, #28
    f2ee:	d505      	bpl.n	f2fc <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    f2f0:	2030      	movs	r0, #48	; 0x30
    f2f2:	9903      	ldr	r1, [sp, #12]
    f2f4:	47d0      	blx	sl
    f2f6:	2800      	cmp	r0, #0
    f2f8:	dbe0      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f2fa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    f2fc:	9b05      	ldr	r3, [sp, #20]
    f2fe:	b133      	cbz	r3, f30e <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    f300:	9903      	ldr	r1, [sp, #12]
    f302:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    f306:	47d0      	blx	sl
    f308:	2800      	cmp	r0, #0
    f30a:	dbd7      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f30c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f30e:	44ab      	add	fp, r5
    f310:	e005      	b.n	f31e <z_cbvprintf_impl+0x70e>
				OUTC('0');
    f312:	2030      	movs	r0, #48	; 0x30
    f314:	9903      	ldr	r1, [sp, #12]
    f316:	47d0      	blx	sl
    f318:	2800      	cmp	r0, #0
    f31a:	dbcf      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f31c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f31e:	ebab 0305 	sub.w	r3, fp, r5
    f322:	2b00      	cmp	r3, #0
    f324:	dcf5      	bgt.n	f312 <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    f326:	4643      	mov	r3, r8
    f328:	463a      	mov	r2, r7
    f32a:	4650      	mov	r0, sl
    f32c:	9903      	ldr	r1, [sp, #12]
    f32e:	f01b fb66 	bl	2a9fe <outs>
    f332:	2800      	cmp	r0, #0
    f334:	dbc2      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f336:	4405      	add	r5, r0
		while (width > 0) {
    f338:	44a9      	add	r9, r5
    f33a:	eba9 0305 	sub.w	r3, r9, r5
    f33e:	2b00      	cmp	r3, #0
    f340:	f77f ae6e 	ble.w	f020 <z_cbvprintf_impl+0x410>
			OUTC(' ');
    f344:	2020      	movs	r0, #32
    f346:	9903      	ldr	r1, [sp, #12]
    f348:	47d0      	blx	sl
    f34a:	2800      	cmp	r0, #0
    f34c:	dbb6      	blt.n	f2bc <z_cbvprintf_impl+0x6ac>
    f34e:	3501      	adds	r5, #1
			--width;
    f350:	e7f3      	b.n	f33a <z_cbvprintf_impl+0x72a>
    f352:	bf00      	nop
    f354:	0003552a 	.word	0x0003552a

0000f358 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f358:	b148      	cbz	r0, f36e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    f35a:	4b05      	ldr	r3, [pc, #20]	; (f370 <arch_busy_wait+0x18>)
    f35c:	4a05      	ldr	r2, [pc, #20]	; (f374 <arch_busy_wait+0x1c>)
    f35e:	681b      	ldr	r3, [r3, #0]
    f360:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    f364:	4358      	muls	r0, r3
    f366:	4b04      	ldr	r3, [pc, #16]	; (f378 <arch_busy_wait+0x20>)
    f368:	f043 0301 	orr.w	r3, r3, #1
    f36c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f36e:	4770      	bx	lr
    f370:	20008788 	.word	0x20008788
    f374:	000f4240 	.word	0x000f4240
    f378:	00033470 	.word	0x00033470

0000f37c <z_log_msg_runtime_create.constprop.0>:
 *
 * @param fmt String.
 *
 * @param ... String arguments.
 */
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    f37c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
    f37e:	ab0b      	add	r3, sp, #44	; 0x2c
    f380:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    f382:	9303      	str	r3, [sp, #12]
    f384:	4b05      	ldr	r3, [pc, #20]	; (f39c <z_log_msg_runtime_create.constprop.0+0x20>)
    f386:	2201      	movs	r2, #1
    f388:	9302      	str	r3, [sp, #8]
    f38a:	2300      	movs	r3, #0
    f38c:	4618      	mov	r0, r3
    f38e:	e9cd 3300 	strd	r3, r3, [sp]
    f392:	f000 f9c3 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
	z_log_msg_runtime_vcreate(domain_id, source, level,
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    f396:	b007      	add	sp, #28
    f398:	f85d fb04 	ldr.w	pc, [sp], #4
    f39c:	0003552f 	.word	0x0003552f

0000f3a0 <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    f3a0:	b570      	push	{r4, r5, r6, lr}
    f3a2:	b086      	sub	sp, #24
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    f3a4:	a805      	add	r0, sp, #20
    f3a6:	f014 fb2d 	bl	23a04 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    f3aa:	4b28      	ldr	r3, [pc, #160]	; (f44c <sync_rtc_setup+0xac>)
    f3ac:	4298      	cmp	r0, r3
    f3ae:	d149      	bne.n	f444 <sync_rtc_setup+0xa4>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    f3b0:	f013 fe78 	bl	230a4 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    f3b4:	1e04      	subs	r4, r0, #0
    f3b6:	da0f      	bge.n	f3d8 <sync_rtc_setup+0x38>
		nrfx_dppi_channel_free(channels.ch.ppi);
    f3b8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f3bc:	f014 fb28 	bl	23a10 <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    f3c0:	4b23      	ldr	r3, [pc, #140]	; (f450 <sync_rtc_setup+0xb0>)
    f3c2:	2201      	movs	r2, #1
    f3c4:	9302      	str	r3, [sp, #8]
    f3c6:	2300      	movs	r3, #0
    f3c8:	4922      	ldr	r1, [pc, #136]	; (f454 <sync_rtc_setup+0xb4>)
    f3ca:	4618      	mov	r0, r3
    f3cc:	e9cd 3300 	strd	r3, r3, [sp]
    f3d0:	9403      	str	r4, [sp, #12]
    f3d2:	f7ff ffd3 	bl	f37c <z_log_msg_runtime_create.constprop.0>
	}

	return rv;
    f3d6:	e032      	b.n	f43e <sync_rtc_setup+0x9e>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    f3d8:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    f3dc:	4d1e      	ldr	r5, [pc, #120]	; (f458 <sync_rtc_setup+0xb8>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    f3de:	f88d 4015 	strb.w	r4, [sp, #21]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    f3e2:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    f3e4:	f8ad 3016 	strh.w	r3, [sp, #22]
    f3e8:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    f3ea:	9b05      	ldr	r3, [sp, #20]
    f3ec:	b914      	cbnz	r4, f3f4 <sync_rtc_setup+0x54>
		return -ENOSYS;
    f3ee:	f06f 0457 	mvn.w	r4, #87	; 0x57
    f3f2:	e7e5      	b.n	f3c0 <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f3f4:	2108      	movs	r1, #8
    f3f6:	4628      	mov	r0, r5
    f3f8:	4a18      	ldr	r2, [pc, #96]	; (f45c <sync_rtc_setup+0xbc>)
    f3fa:	47a0      	blx	r4
	if (err < 0) {
    f3fc:	1e04      	subs	r4, r0, #0
    f3fe:	dbdf      	blt.n	f3c0 <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    f400:	6933      	ldr	r3, [r6, #16]
    f402:	2b00      	cmp	r3, #0
    f404:	d0f3      	beq.n	f3ee <sync_rtc_setup+0x4e>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    f406:	2201      	movs	r2, #1
    f408:	2108      	movs	r1, #8
    f40a:	4628      	mov	r0, r5
    f40c:	4798      	blx	r3
	if (rv < 0) {
    f40e:	1e04      	subs	r4, r0, #0
    f410:	dbd6      	blt.n	f3c0 <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    f412:	2301      	movs	r3, #1
    f414:	f89d 5014 	ldrb.w	r5, [sp, #20]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    f418:	4a11      	ldr	r2, [pc, #68]	; (f460 <sync_rtc_setup+0xc0>)
    f41a:	40ab      	lsls	r3, r5
    f41c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    f420:	f89d 0015 	ldrb.w	r0, [sp, #21]
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f424:	f89d 6017 	ldrb.w	r6, [sp, #23]
    f428:	f020 fe62 	bl	300f0 <z_nrf_rtc_timer_capture_task_address_get>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    f42c:	4b0d      	ldr	r3, [pc, #52]	; (f464 <sync_rtc_setup+0xc4>)
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    f42e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f432:	00b6      	lsls	r6, r6, #2
    f434:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    f438:	519d      	str	r5, [r3, r6]
	if (rv != 0) {
    f43a:	2c00      	cmp	r4, #0
    f43c:	d1c0      	bne.n	f3c0 <sync_rtc_setup+0x20>
}
    f43e:	4620      	mov	r0, r4
    f440:	b006      	add	sp, #24
    f442:	bd70      	pop	{r4, r5, r6, pc}
		rv = -ENODEV;
    f444:	f06f 0412 	mvn.w	r4, #18
    f448:	e7ba      	b.n	f3c0 <sync_rtc_setup+0x20>
    f44a:	bf00      	nop
    f44c:	0bad0000 	.word	0x0bad0000
    f450:	0003552f 	.word	0x0003552f
    f454:	00033334 	.word	0x00033334
    f458:	00032bec 	.word	0x00032bec
    f45c:	0000f4ad 	.word	0x0000f4ad
    f460:	40017000 	.word	0x40017000
    f464:	4002a180 	.word	0x4002a180

0000f468 <rtc_cb>:
{
    f468:	b538      	push	{r3, r4, r5, lr}
    f46a:	9c04      	ldr	r4, [sp, #16]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    f46c:	f3c4 2507 	ubfx	r5, r4, #8, #8
    f470:	4628      	mov	r0, r5
    f472:	f013 fc77 	bl	22d64 <z_nrf_rtc_timer_compare_evt_address_get>

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    f476:	2100      	movs	r1, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    f478:	4b0a      	ldr	r3, [pc, #40]	; (f4a4 <rtc_cb+0x3c>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    f47a:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    f47c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f480:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    f484:	5099      	str	r1, [r3, r2]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    f486:	2301      	movs	r3, #1
    f488:	b2e4      	uxtb	r4, r4
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    f48a:	4a07      	ldr	r2, [pc, #28]	; (f4a8 <rtc_cb+0x40>)
    f48c:	40a3      	lsls	r3, r4
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    f48e:	4628      	mov	r0, r5
    f490:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    f494:	f013 fe24 	bl	230e0 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    f498:	4620      	mov	r0, r4
}
    f49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    f49e:	f014 bab7 	b.w	23a10 <nrfx_dppi_channel_free>
    f4a2:	bf00      	nop
    f4a4:	4002a080 	.word	0x4002a080
    f4a8:	40017000 	.word	0x40017000

0000f4ac <mbox_callback>:
{
    f4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f4ae:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    f4b0:	6883      	ldr	r3, [r0, #8]
    f4b2:	691b      	ldr	r3, [r3, #16]
    f4b4:	b10b      	cbz	r3, f4ba <mbox_callback+0xe>
	return api->set_enabled(channel->dev, channel->id, enable);
    f4b6:	2200      	movs	r2, #0
    f4b8:	4798      	blx	r3
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    f4ba:	f3c4 2607 	ubfx	r6, r4, #8, #8
    f4be:	4630      	mov	r0, r6
    f4c0:	f013 fc58 	bl	22d74 <z_nrf_rtc_timer_compare_read>
    f4c4:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    f4c6:	4630      	mov	r0, r6
    f4c8:	f020 fe12 	bl	300f0 <z_nrf_rtc_timer_capture_task_address_get>

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    f4cc:	2700      	movs	r7, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    f4ce:	4b10      	ldr	r3, [pc, #64]	; (f510 <mbox_callback+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    f4d0:	0e22      	lsrs	r2, r4, #24
    f4d2:	0092      	lsls	r2, r2, #2
    f4d4:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    f4d8:	509f      	str	r7, [r3, r2]
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    f4da:	4630      	mov	r0, r6
    f4dc:	f013 fc42 	bl	22d64 <z_nrf_rtc_timer_compare_evt_address_get>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    f4e0:	0ba2      	lsrs	r2, r4, #14
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    f4e2:	4b0c      	ldr	r3, [pc, #48]	; (f514 <mbox_callback+0x68>)
    f4e4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    f4e8:	4413      	add	r3, r2
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    f4ea:	b2e2      	uxtb	r2, r4
    f4ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    f4f0:	601a      	str	r2, [r3, #0]
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    f4f2:	4b09      	ldr	r3, [pc, #36]	; (f518 <mbox_callback+0x6c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    f4f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    f4f8:	f105 0232 	add.w	r2, r5, #50	; 0x32
    f4fc:	9300      	str	r3, [sp, #0]
    f4fe:	4630      	mov	r0, r6
    f500:	463b      	mov	r3, r7
    f502:	9401      	str	r4, [sp, #4]
    f504:	0052      	lsls	r2, r2, #1
    f506:	f020 fdfc 	bl	30102 <z_nrf_rtc_timer_set>
}
    f50a:	b003      	add	sp, #12
    f50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f50e:	bf00      	nop
    f510:	4002a180 	.word	0x4002a180
    f514:	4002a080 	.word	0x4002a080
    f518:	0000f469 	.word	0x0000f469

0000f51c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    f51c:	f020 be8f 	b.w	3023e <SystemInit>

0000f520 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    f520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f524:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    f526:	482f      	ldr	r0, [pc, #188]	; (f5e4 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    f528:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    f52a:	f01b faef 	bl	2ab0c <atomic_inc>
    f52e:	4606      	mov	r6, r0
    f530:	b970      	cbnz	r0, f550 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f532:	4c2d      	ldr	r4, [pc, #180]	; (f5e8 <z_log_init.isra.0+0xc8>)
	uint32_t mask = 0;
    f534:	4605      	mov	r5, r0
    f536:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    f538:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f53c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; f5ec <z_log_init.isra.0+0xcc>
    f540:	4554      	cmp	r4, sl
    f542:	d307      	bcc.n	f554 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    f544:	f1b9 0f00 	cmp.w	r9, #0
    f548:	d002      	beq.n	f550 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    f54a:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    f54e:	b9e5      	cbnz	r5, f58a <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    f550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    f554:	7b23      	ldrb	r3, [r4, #12]
    f556:	b173      	cbz	r3, f576 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    f558:	6823      	ldr	r3, [r4, #0]
    f55a:	68db      	ldr	r3, [r3, #12]
    f55c:	b10b      	cbz	r3, f562 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    f55e:	4620      	mov	r0, r4
    f560:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    f562:	6823      	ldr	r3, [r4, #0]
    f564:	691b      	ldr	r3, [r3, #16]
    f566:	b943      	cbnz	r3, f57a <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    f568:	6863      	ldr	r3, [r4, #4]
    f56a:	2204      	movs	r2, #4
    f56c:	4620      	mov	r0, r4
    f56e:	6819      	ldr	r1, [r3, #0]
    f570:	f000 f8c0 	bl	f6f4 <log_backend_enable>
			i++;
    f574:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f576:	3410      	adds	r4, #16
    f578:	e7e2      	b.n	f540 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    f57a:	4620      	mov	r0, r4
    f57c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    f57e:	2800      	cmp	r0, #0
    f580:	d0f2      	beq.n	f568 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    f582:	fa0b f306 	lsl.w	r3, fp, r6
    f586:	431d      	orrs	r5, r3
    f588:	e7f4      	b.n	f574 <z_log_init.isra.0+0x54>
    f58a:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    f58c:	fa95 f4a5 	rbit	r4, r5
    f590:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    f594:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f598:	0126      	lsls	r6, r4, #4
    f59a:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    f59e:	ea6f 0b03 	mvn.w	fp, r3
    f5a2:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f5a6:	7b23      	ldrb	r3, [r4, #12]
    f5a8:	b163      	cbz	r3, f5c4 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    f5aa:	f858 3006 	ldr.w	r3, [r8, r6]
    f5ae:	691b      	ldr	r3, [r3, #16]
    f5b0:	b993      	cbnz	r3, f5d8 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    f5b2:	4446      	add	r6, r8
			log_backend_enable(backend,
    f5b4:	6873      	ldr	r3, [r6, #4]
    f5b6:	2204      	movs	r2, #4
    f5b8:	4620      	mov	r0, r4
    f5ba:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    f5bc:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    f5c0:	f000 f898 	bl	f6f4 <log_backend_enable>
	while (mask_cpy) {
    f5c4:	2d00      	cmp	r5, #0
    f5c6:	d1e1      	bne.n	f58c <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    f5c8:	b127      	cbz	r7, f5d4 <z_log_init.isra.0+0xb4>
    f5ca:	f44f 70a4 	mov.w	r0, #328	; 0x148
    f5ce:	2100      	movs	r1, #0
    f5d0:	f017 f8a4 	bl	2671c <z_impl_k_sleep>
    f5d4:	464d      	mov	r5, r9
    f5d6:	e7ba      	b.n	f54e <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    f5d8:	4620      	mov	r0, r4
    f5da:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    f5dc:	2800      	cmp	r0, #0
    f5de:	d1f1      	bne.n	f5c4 <z_log_init.isra.0+0xa4>
    f5e0:	e7e7      	b.n	f5b2 <z_log_init.isra.0+0x92>
    f5e2:	bf00      	nop
    f5e4:	2002f9f0 	.word	0x2002f9f0
    f5e8:	00033344 	.word	0x00033344
    f5ec:	00033354 	.word	0x00033354

0000f5f0 <log_format_func_t_get>:
}
    f5f0:	4b01      	ldr	r3, [pc, #4]	; (f5f8 <log_format_func_t_get+0x8>)
    f5f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f5f6:	4770      	bx	lr
    f5f8:	00033878 	.word	0x00033878

0000f5fc <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    f5fc:	b508      	push	{r3, lr}
    f5fe:	4603      	mov	r3, r0
    f600:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    f602:	b12b      	cbz	r3, f610 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    f604:	4a04      	ldr	r2, [pc, #16]	; (f618 <log_set_timestamp_func+0x1c>)
    f606:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    f608:	f000 fa7c 	bl	fb04 <log_output_timestamp_freq_set>
	}

	return 0;
    f60c:	2000      	movs	r0, #0
}
    f60e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    f610:	f06f 0015 	mvn.w	r0, #21
    f614:	e7fb      	b.n	f60e <log_set_timestamp_func+0x12>
    f616:	bf00      	nop
    f618:	200084c8 	.word	0x200084c8

0000f61c <log_core_init>:
	panic_mode = false;
    f61c:	2300      	movs	r3, #0
    f61e:	4a04      	ldr	r2, [pc, #16]	; (f630 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    f620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    f624:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    f626:	4a03      	ldr	r2, [pc, #12]	; (f634 <log_core_init+0x18>)
		log_set_timestamp_func(default_get_timestamp,
    f628:	4803      	ldr	r0, [pc, #12]	; (f638 <log_core_init+0x1c>)
	dropped_cnt = 0;
    f62a:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    f62c:	f7ff bfe6 	b.w	f5fc <log_set_timestamp_func>
    f630:	200319a5 	.word	0x200319a5
    f634:	2002f9e8 	.word	0x2002f9e8
    f638:	0002ab09 	.word	0x0002ab09

0000f63c <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    f63c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    f63e:	4d0b      	ldr	r5, [pc, #44]	; (f66c <z_impl_log_panic+0x30>)
    f640:	7829      	ldrb	r1, [r5, #0]
    f642:	b941      	cbnz	r1, f656 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    f644:	2001      	movs	r0, #1
    f646:	f7ff ff6b 	bl	f520 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f64a:	4c09      	ldr	r4, [pc, #36]	; (f670 <z_impl_log_panic+0x34>)
    f64c:	4e09      	ldr	r6, [pc, #36]	; (f674 <z_impl_log_panic+0x38>)
    f64e:	42b4      	cmp	r4, r6
    f650:	d302      	bcc.n	f658 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    f652:	2301      	movs	r3, #1
    f654:	702b      	strb	r3, [r5, #0]
}
    f656:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    f658:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    f65a:	795b      	ldrb	r3, [r3, #5]
    f65c:	b11b      	cbz	r3, f666 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    f65e:	6823      	ldr	r3, [r4, #0]
    f660:	4620      	mov	r0, r4
    f662:	689b      	ldr	r3, [r3, #8]
    f664:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f666:	3410      	adds	r4, #16
    f668:	e7f1      	b.n	f64e <z_impl_log_panic+0x12>
    f66a:	bf00      	nop
    f66c:	200319a5 	.word	0x200319a5
    f670:	00033344 	.word	0x00033344
    f674:	00033354 	.word	0x00033354

0000f678 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    f678:	b510      	push	{r4, lr}
    f67a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    f67c:	4806      	ldr	r0, [pc, #24]	; (f698 <z_log_dropped+0x20>)
    f67e:	f01b fa45 	bl	2ab0c <atomic_inc>
	if (buffered) {
    f682:	b13c      	cbz	r4, f694 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    f684:	4b05      	ldr	r3, [pc, #20]	; (f69c <z_log_dropped+0x24>)
    f686:	e8d3 1fef 	ldaex	r1, [r3]
    f68a:	3901      	subs	r1, #1
    f68c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    f690:	2a00      	cmp	r2, #0
    f692:	d1f8      	bne.n	f686 <z_log_dropped+0xe>
		atomic_dec(&buffered_cnt);
	}
}
    f694:	bd10      	pop	{r4, pc}
    f696:	bf00      	nop
    f698:	2002f9e8 	.word	0x2002f9e8
    f69c:	2002f9ec 	.word	0x2002f9ec

0000f6a0 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    f6a0:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    f6a2:	4b0a      	ldr	r3, [pc, #40]	; (f6cc <z_log_msg_commit+0x2c>)
{
    f6a4:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    f6a6:	681b      	ldr	r3, [r3, #0]
    f6a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f6aa:	4c09      	ldr	r4, [pc, #36]	; (f6d0 <z_log_msg_commit+0x30>)
    f6ac:	4e09      	ldr	r6, [pc, #36]	; (f6d4 <z_log_msg_commit+0x34>)
	msg->hdr.timestamp = timestamp_func();
    f6ae:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f6b0:	42b4      	cmp	r4, r6
    f6b2:	d300      	bcc.n	f6b6 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    f6b4:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    f6b6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    f6b8:	795b      	ldrb	r3, [r3, #5]
    f6ba:	b123      	cbz	r3, f6c6 <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    f6bc:	6823      	ldr	r3, [r4, #0]
    f6be:	4629      	mov	r1, r5
    f6c0:	4620      	mov	r0, r4
    f6c2:	681b      	ldr	r3, [r3, #0]
    f6c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    f6c6:	3410      	adds	r4, #16
    f6c8:	e7f2      	b.n	f6b0 <z_log_msg_commit+0x10>
    f6ca:	bf00      	nop
    f6cc:	200084c8 	.word	0x200084c8
    f6d0:	00033344 	.word	0x00033344
    f6d4:	00033354 	.word	0x00033354

0000f6d8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    f6d8:	4a04      	ldr	r2, [pc, #16]	; (f6ec <log_source_name_get+0x14>)
    f6da:	4b05      	ldr	r3, [pc, #20]	; (f6f0 <log_source_name_get+0x18>)
    f6dc:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    f6de:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    f6e2:	bf34      	ite	cc
    f6e4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    f6e8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    f6ea:	4770      	bx	lr
    f6ec:	000331d4 	.word	0x000331d4
    f6f0:	00033344 	.word	0x00033344

0000f6f4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    f6f4:	4b08      	ldr	r3, [pc, #32]	; (f718 <log_backend_enable+0x24>)
{
    f6f6:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    f6f8:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    f6fa:	6844      	ldr	r4, [r0, #4]
    f6fc:	111b      	asrs	r3, r3, #4
    f6fe:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    f700:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    f702:	6843      	ldr	r3, [r0, #4]
    f704:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    f706:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    f708:	6843      	ldr	r3, [r0, #4]
    f70a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    f70c:	6843      	ldr	r3, [r0, #4]
    f70e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    f710:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    f712:	f01b ba0b 	b.w	2ab2c <z_log_notify_backend_enabled>
    f716:	bf00      	nop
    f718:	00033344 	.word	0x00033344

0000f71c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f720:	b085      	sub	sp, #20
    f722:	af02      	add	r7, sp, #8
    f724:	4604      	mov	r4, r0
    f726:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    f72a:	460e      	mov	r6, r1
    f72c:	4693      	mov	fp, r2
    f72e:	4698      	mov	r8, r3
    f730:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int plen;

	if (fmt) {
    f732:	f1ba 0f00 	cmp.w	sl, #0
    f736:	d035      	beq.n	f7a4 <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
    f738:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    f73c:	f8cd 9000 	str.w	r9, [sp]
    f740:	2110      	movs	r1, #16
    f742:	4653      	mov	r3, sl
    f744:	2000      	movs	r0, #0
    f746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f748:	f7fe fed8 	bl	e4fc <cbvprintf_package>
    f74c:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    f74e:	4a16      	ldr	r2, [pc, #88]	; (f7a8 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
    f750:	f004 0407 	and.w	r4, r4, #7
    f754:	f00b 0b07 	and.w	fp, fp, #7
    f758:	00e4      	lsls	r4, r4, #3
    f75a:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    f75e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    f762:	4314      	orrs	r4, r2
    f764:	4a11      	ldr	r2, [pc, #68]	; (f7ac <z_impl_z_log_msg_runtime_vcreate+0x90>)
    f766:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    f76a:	3517      	adds	r5, #23
    f76c:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    f76e:	f025 0507 	bic.w	r5, r5, #7
    f772:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    f776:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    f778:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    f77a:	f1ba 0f00 	cmp.w	sl, #0
    f77e:	d007      	beq.n	f790 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    f780:	f8cd 9000 	str.w	r9, [sp]
    f784:	4653      	mov	r3, sl
    f786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f788:	f105 0010 	add.w	r0, r5, #16
    f78c:	f7fe feb6 	bl	e4fc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    f790:	4643      	mov	r3, r8
    f792:	4622      	mov	r2, r4
    f794:	4631      	mov	r1, r6
    f796:	4628      	mov	r0, r5
    f798:	f01b f9cb 	bl	2ab32 <z_log_msg_finalize>
	}
}
    f79c:	370c      	adds	r7, #12
    f79e:	46bd      	mov	sp, r7
    f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    f7a4:	4651      	mov	r1, sl
    f7a6:	e7d2      	b.n	f74e <z_impl_z_log_msg_runtime_vcreate+0x32>
    f7a8:	0007fe00 	.word	0x0007fe00
    f7ac:	7ff80000 	.word	0x7ff80000

0000f7b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    f7b0:	b40e      	push	{r1, r2, r3}
    f7b2:	b503      	push	{r0, r1, lr}
    f7b4:	ab03      	add	r3, sp, #12
    f7b6:	f853 2b04 	ldr.w	r2, [r3], #4
    f7ba:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f7bc:	4804      	ldr	r0, [pc, #16]	; (f7d0 <print_formatted+0x20>)
	va_start(args, fmt);
    f7be:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    f7c0:	f01b f9fa 	bl	2abb8 <cbvprintf>
	va_end(args);

	return length;
}
    f7c4:	b002      	add	sp, #8
    f7c6:	f85d eb04 	ldr.w	lr, [sp], #4
    f7ca:	b003      	add	sp, #12
    f7cc:	4770      	bx	lr
    f7ce:	bf00      	nop
    f7d0:	0002ab67 	.word	0x0002ab67

0000f7d4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    f7d4:	06ca      	lsls	r2, r1, #27
    f7d6:	d405      	bmi.n	f7e4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    f7d8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    f7da:	bf4c      	ite	mi
    f7dc:	4902      	ldrmi	r1, [pc, #8]	; (f7e8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    f7de:	4903      	ldrpl	r1, [pc, #12]	; (f7ec <newline_print+0x18>)
    f7e0:	f7ff bfe6 	b.w	f7b0 <print_formatted>
	}
}
    f7e4:	4770      	bx	lr
    f7e6:	bf00      	nop
    f7e8:	000349e8 	.word	0x000349e8
    f7ec:	00034cdf 	.word	0x00034cdf

0000f7f0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    f7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7f4:	b089      	sub	sp, #36	; 0x24
    f7f6:	469a      	mov	sl, r3
    f7f8:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    f7fc:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    f800:	9305      	str	r3, [sp, #20]
    f802:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f804:	4604      	mov	r4, r0
    f806:	460d      	mov	r5, r1
    f808:	9e16      	ldr	r6, [sp, #88]	; 0x58
    f80a:	9206      	str	r2, [sp, #24]
    f80c:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    f80e:	f1bb 0f00 	cmp.w	fp, #0
    f812:	f000 8085 	beq.w	f920 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    f816:	f006 0308 	and.w	r3, r6, #8
    f81a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    f81c:	f01b f987 	bl	2ab2e <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    f820:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    f824:	4602      	mov	r2, r0
    f826:	2800      	cmp	r0, #0
    f828:	d049      	beq.n	f8be <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    f82a:	4620      	mov	r0, r4
    f82c:	4985      	ldr	r1, [pc, #532]	; (fa44 <log_output_process+0x254>)
    f82e:	f7ff ffbf 	bl	f7b0 <print_formatted>
    f832:	4680      	mov	r8, r0
	if (stamp) {
    f834:	f1b9 0f00 	cmp.w	r9, #0
    f838:	d008      	beq.n	f84c <log_output_process+0x5c>
	if (!format) {
    f83a:	f016 0f44 	tst.w	r6, #68	; 0x44
    f83e:	d140      	bne.n	f8c2 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    f840:	462a      	mov	r2, r5
    f842:	4620      	mov	r0, r4
    f844:	4980      	ldr	r1, [pc, #512]	; (fa48 <log_output_process+0x258>)
    f846:	f7ff ffb3 	bl	f7b0 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    f84a:	4480      	add	r8, r0
	if (color) {
    f84c:	f006 0301 	and.w	r3, r6, #1
    f850:	b153      	cbz	r3, f868 <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    f852:	4b7e      	ldr	r3, [pc, #504]	; (fa4c <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    f854:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    f856:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    f85a:	4b7d      	ldr	r3, [pc, #500]	; (fa50 <log_output_process+0x260>)
    f85c:	497d      	ldr	r1, [pc, #500]	; (fa54 <log_output_process+0x264>)
    f85e:	2a00      	cmp	r2, #0
    f860:	bf08      	it	eq
    f862:	461a      	moveq	r2, r3
    f864:	f7ff ffa4 	bl	f7b0 <print_formatted>
	if (level_on) {
    f868:	f006 0308 	and.w	r3, r6, #8
    f86c:	2b00      	cmp	r3, #0
    f86e:	d054      	beq.n	f91a <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    f870:	4b79      	ldr	r3, [pc, #484]	; (fa58 <log_output_process+0x268>)
    f872:	4620      	mov	r0, r4
    f874:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    f878:	4978      	ldr	r1, [pc, #480]	; (fa5c <log_output_process+0x26c>)
    f87a:	f7ff ff99 	bl	f7b0 <print_formatted>
    f87e:	4605      	mov	r5, r0
	if (domain) {
    f880:	9b06      	ldr	r3, [sp, #24]
    f882:	b12b      	cbz	r3, f890 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    f884:	461a      	mov	r2, r3
    f886:	4620      	mov	r0, r4
    f888:	4975      	ldr	r1, [pc, #468]	; (fa60 <log_output_process+0x270>)
    f88a:	f7ff ff91 	bl	f7b0 <print_formatted>
    f88e:	4405      	add	r5, r0
	if (source) {
    f890:	f1ba 0f00 	cmp.w	sl, #0
    f894:	d005      	beq.n	f8a2 <log_output_process+0xb2>
		total += print_formatted(output,
    f896:	4652      	mov	r2, sl
    f898:	4620      	mov	r0, r4
    f89a:	4972      	ldr	r1, [pc, #456]	; (fa64 <log_output_process+0x274>)
    f89c:	f7ff ff88 	bl	f7b0 <print_formatted>
    f8a0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    f8a2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    f8a4:	2f00      	cmp	r7, #0
    f8a6:	d149      	bne.n	f93c <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    f8a8:	9b04      	ldr	r3, [sp, #16]
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	d14f      	bne.n	f94e <log_output_process+0x15e>
	if (color) {
    f8ae:	07f3      	lsls	r3, r6, #31
    f8b0:	f100 80c1 	bmi.w	fa36 <log_output_process+0x246>
	newline_print(output, flags);
    f8b4:	4631      	mov	r1, r6
    f8b6:	4620      	mov	r0, r4
    f8b8:	f7ff ff8c 	bl	f7d4 <newline_print>
}
    f8bc:	e0b5      	b.n	fa2a <log_output_process+0x23a>
	uint32_t length = 0U;
    f8be:	4680      	mov	r8, r0
    f8c0:	e7b8      	b.n	f834 <log_output_process+0x44>
	} else if (freq != 0U) {
    f8c2:	4b69      	ldr	r3, [pc, #420]	; (fa68 <log_output_process+0x278>)
    f8c4:	6818      	ldr	r0, [r3, #0]
    f8c6:	2800      	cmp	r0, #0
    f8c8:	d0bf      	beq.n	f84a <log_output_process+0x5a>
		timestamp /= timestamp_div;
    f8ca:	4b68      	ldr	r3, [pc, #416]	; (fa6c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    f8cc:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    f8d0:	681b      	ldr	r3, [r3, #0]
    f8d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    f8d6:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    f8da:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    f8de:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    f8e2:	fb09 f505 	mul.w	r5, r9, r5
    f8e6:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f8ea:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    f8ee:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    f8f2:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f8f6:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    f8fa:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    f8fe:	fb09 f505 	mul.w	r5, r9, r5
    f902:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    f906:	fb0c 1113 	mls	r1, ip, r3, r1
    f90a:	4620      	mov	r0, r4
    f90c:	9100      	str	r1, [sp, #0]
    f90e:	e9cd e501 	strd	lr, r5, [sp, #4]
    f912:	4957      	ldr	r1, [pc, #348]	; (fa70 <log_output_process+0x280>)
    f914:	f7ff ff4c 	bl	f7b0 <print_formatted>
    f918:	e797      	b.n	f84a <log_output_process+0x5a>
	int total = 0;
    f91a:	f006 0508 	and.w	r5, r6, #8
    f91e:	e7af      	b.n	f880 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f920:	f1ba 0f01 	cmp.w	sl, #1
    f924:	d106      	bne.n	f934 <log_output_process+0x144>
	if (package) {
    f926:	2f00      	cmp	r7, #0
    f928:	d165      	bne.n	f9f6 <log_output_process+0x206>
	if (data_len) {
    f92a:	9b04      	ldr	r3, [sp, #16]
    f92c:	2b00      	cmp	r3, #0
    f92e:	d07c      	beq.n	fa2a <log_output_process+0x23a>
		prefix_offset = 0;
    f930:	2500      	movs	r5, #0
    f932:	e00c      	b.n	f94e <log_output_process+0x15e>
	if (package) {
    f934:	2f00      	cmp	r7, #0
    f936:	d0f8      	beq.n	f92a <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f938:	484e      	ldr	r0, [pc, #312]	; (fa74 <log_output_process+0x284>)
    f93a:	e05d      	b.n	f9f8 <log_output_process+0x208>
		cb = out_func;
    f93c:	484e      	ldr	r0, [pc, #312]	; (fa78 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    f93e:	463b      	mov	r3, r7
    f940:	4622      	mov	r2, r4
    f942:	494e      	ldr	r1, [pc, #312]	; (fa7c <log_output_process+0x28c>)
    f944:	f01a fd44 	bl	2a3d0 <cbpprintf_external>
	if (data_len) {
    f948:	9b04      	ldr	r3, [sp, #16]
    f94a:	2b00      	cmp	r3, #0
    f94c:	d069      	beq.n	fa22 <log_output_process+0x232>
		print_formatted(output, " ");
    f94e:	f8df 8130 	ldr.w	r8, [pc, #304]	; fa80 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    f952:	f8df 9130 	ldr.w	r9, [pc, #304]	; fa84 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f956:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    f958:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f95a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    f95c:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f95e:	bf28      	it	cs
    f960:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    f962:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    f966:	f7ff ff35 	bl	f7d4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    f96a:	4555      	cmp	r5, sl
    f96c:	dc46      	bgt.n	f9fc <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    f96e:	9b05      	ldr	r3, [sp, #20]
    f970:	4649      	mov	r1, r9
    f972:	4620      	mov	r0, r4
    f974:	781a      	ldrb	r2, [r3, #0]
    f976:	f7ff ff1b 	bl	f7b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f97a:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    f97e:	f01a 0f07 	tst.w	sl, #7
    f982:	d103      	bne.n	f98c <log_output_process+0x19c>
			print_formatted(output, " ");
    f984:	4641      	mov	r1, r8
    f986:	4620      	mov	r0, r4
    f988:	f7ff ff12 	bl	f7b0 <print_formatted>
		if (i < length) {
    f98c:	4557      	cmp	r7, sl
    f98e:	d93c      	bls.n	fa0a <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    f990:	9b05      	ldr	r3, [sp, #20]
    f992:	4649      	mov	r1, r9
    f994:	4620      	mov	r0, r4
    f996:	f813 200a 	ldrb.w	r2, [r3, sl]
    f99a:	f7ff ff09 	bl	f7b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f99e:	f10a 0a01 	add.w	sl, sl, #1
    f9a2:	f1ba 0f10 	cmp.w	sl, #16
    f9a6:	d1ea      	bne.n	f97e <log_output_process+0x18e>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f9a8:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    f9ac:	4620      	mov	r0, r4
    f9ae:	4936      	ldr	r1, [pc, #216]	; (fa88 <log_output_process+0x298>)
    f9b0:	f7ff fefe 	bl	f7b0 <print_formatted>
		if (i < length) {
    f9b4:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    f9b6:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    f9b8:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    f9ba:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    f9bc:	4b33      	ldr	r3, [pc, #204]	; (fa8c <log_output_process+0x29c>)
    f9be:	5c99      	ldrb	r1, [r3, r2]
    f9c0:	f011 0f97 	tst.w	r1, #151	; 0x97
    f9c4:	bf08      	it	eq
    f9c6:	222e      	moveq	r2, #46	; 0x2e
    f9c8:	4931      	ldr	r1, [pc, #196]	; (fa90 <log_output_process+0x2a0>)
    f9ca:	f7ff fef1 	bl	f7b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    f9ce:	f10a 0a01 	add.w	sl, sl, #1
    f9d2:	f1ba 0f10 	cmp.w	sl, #16
    f9d6:	d01d      	beq.n	fa14 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    f9d8:	f01a 0f07 	tst.w	sl, #7
    f9dc:	d103      	bne.n	f9e6 <log_output_process+0x1f6>
			print_formatted(output, " ");
    f9de:	4641      	mov	r1, r8
    f9e0:	4620      	mov	r0, r4
    f9e2:	f7ff fee5 	bl	f7b0 <print_formatted>
		if (i < length) {
    f9e6:	4557      	cmp	r7, sl
    f9e8:	4652      	mov	r2, sl
    f9ea:	d8e4      	bhi.n	f9b6 <log_output_process+0x1c6>
			print_formatted(output, " ");
    f9ec:	4641      	mov	r1, r8
    f9ee:	4620      	mov	r0, r4
    f9f0:	f7ff fede 	bl	f7b0 <print_formatted>
    f9f4:	e7eb      	b.n	f9ce <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    f9f6:	4820      	ldr	r0, [pc, #128]	; (fa78 <log_output_process+0x288>)
		prefix_offset = 0;
    f9f8:	465d      	mov	r5, fp
    f9fa:	e7a0      	b.n	f93e <log_output_process+0x14e>
		print_formatted(output, " ");
    f9fc:	4641      	mov	r1, r8
    f9fe:	4620      	mov	r0, r4
    fa00:	f7ff fed6 	bl	f7b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    fa04:	f10a 0a01 	add.w	sl, sl, #1
    fa08:	e7af      	b.n	f96a <log_output_process+0x17a>
			print_formatted(output, "   ");
    fa0a:	4620      	mov	r0, r4
    fa0c:	4921      	ldr	r1, [pc, #132]	; (fa94 <log_output_process+0x2a4>)
    fa0e:	f7ff fecf 	bl	f7b0 <print_formatted>
    fa12:	e7c4      	b.n	f99e <log_output_process+0x1ae>
		data += length;
    fa14:	9b05      	ldr	r3, [sp, #20]
    fa16:	443b      	add	r3, r7
    fa18:	9305      	str	r3, [sp, #20]
	} while (len);
    fa1a:	9b04      	ldr	r3, [sp, #16]
    fa1c:	1bdb      	subs	r3, r3, r7
    fa1e:	9304      	str	r3, [sp, #16]
    fa20:	d199      	bne.n	f956 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    fa22:	f1bb 0f00 	cmp.w	fp, #0
    fa26:	f47f af42 	bne.w	f8ae <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    fa2a:	4620      	mov	r0, r4
}
    fa2c:	b009      	add	sp, #36	; 0x24
    fa2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    fa32:	f01b b8c8 	b.w	2abc6 <log_output_flush>
		print_formatted(output, "%s", log_color);
    fa36:	4620      	mov	r0, r4
    fa38:	4a05      	ldr	r2, [pc, #20]	; (fa50 <log_output_process+0x260>)
    fa3a:	4906      	ldr	r1, [pc, #24]	; (fa54 <log_output_process+0x264>)
    fa3c:	f7ff feb8 	bl	f7b0 <print_formatted>
}
    fa40:	e738      	b.n	f8b4 <log_output_process+0xc4>
    fa42:	bf00      	nop
    fa44:	0003556d 	.word	0x0003556d
    fa48:	00035571 	.word	0x00035571
    fa4c:	00033888 	.word	0x00033888
    fa50:	00034ff6 	.word	0x00034ff6
    fa54:	00035e6d 	.word	0x00035e6d
    fa58:	0003389c 	.word	0x0003389c
    fa5c:	00035596 	.word	0x00035596
    fa60:	0003559c 	.word	0x0003559c
    fa64:	000355a0 	.word	0x000355a0
    fa68:	2002f9f8 	.word	0x2002f9f8
    fa6c:	2002f9f4 	.word	0x2002f9f4
    fa70:	0003557a 	.word	0x0003557a
    fa74:	0002ab83 	.word	0x0002ab83
    fa78:	0002ab67 	.word	0x0002ab67
    fa7c:	0002abb9 	.word	0x0002abb9
    fa80:	00035236 	.word	0x00035236
    fa84:	000355a5 	.word	0x000355a5
    fa88:	000355ab 	.word	0x000355ab
    fa8c:	00038a4e 	.word	0x00038a4e
    fa90:	000355ad 	.word	0x000355ad
    fa94:	00038907 	.word	0x00038907

0000fa98 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    fa9c:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    fa9e:	684b      	ldr	r3, [r1, #4]
    faa0:	4605      	mov	r5, r0
    faa2:	460c      	mov	r4, r1
    faa4:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    faa6:	688e      	ldr	r6, [r1, #8]
    faa8:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    faaa:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    faae:	b15b      	cbz	r3, fac8 <log_output_msg_process+0x30>
    fab0:	4a13      	ldr	r2, [pc, #76]	; (fb00 <log_output_msg_process+0x68>)
    fab2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    fab4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    fab8:	2900      	cmp	r1, #0
    faba:	db1f      	blt.n	fafc <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    fabc:	7820      	ldrb	r0, [r4, #0]
    fabe:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    fac2:	f7ff fe09 	bl	f6d8 <log_source_name_get>
    fac6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    fac8:	4621      	mov	r1, r4
    faca:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    face:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    fad0:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    fad4:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    fad6:	eb01 0402 	add.w	r4, r1, r2
    fada:	bf08      	it	eq
    fadc:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    fade:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    fae2:	e9cd 0803 	strd	r0, r8, [sp, #12]
    fae6:	e9cd 1401 	strd	r1, r4, [sp, #4]
    faea:	2200      	movs	r2, #0
    faec:	4631      	mov	r1, r6
    faee:	4628      	mov	r0, r5
    faf0:	9700      	str	r7, [sp, #0]
    faf2:	f7ff fe7d 	bl	f7f0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    faf6:	b006      	add	sp, #24
    faf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    fafc:	2300      	movs	r3, #0
    fafe:	e7e3      	b.n	fac8 <log_output_msg_process+0x30>
    fb00:	000331d4 	.word	0x000331d4

0000fb04 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    fb04:	2100      	movs	r1, #0
    fb06:	2301      	movs	r3, #1
    fb08:	4a06      	ldr	r2, [pc, #24]	; (fb24 <log_output_timestamp_freq_set+0x20>)
    fb0a:	4290      	cmp	r0, r2
    fb0c:	d806      	bhi.n	fb1c <log_output_timestamp_freq_set+0x18>
    fb0e:	4a06      	ldr	r2, [pc, #24]	; (fb28 <log_output_timestamp_freq_set+0x24>)
    fb10:	b901      	cbnz	r1, fb14 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    fb12:	2301      	movs	r3, #1
    fb14:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    fb16:	4b05      	ldr	r3, [pc, #20]	; (fb2c <log_output_timestamp_freq_set+0x28>)
    fb18:	6018      	str	r0, [r3, #0]
}
    fb1a:	4770      	bx	lr
		timestamp_div *= 2U;
    fb1c:	2101      	movs	r1, #1
		frequency /= 2U;
    fb1e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    fb20:	005b      	lsls	r3, r3, #1
    fb22:	e7f2      	b.n	fb0a <log_output_timestamp_freq_set+0x6>
    fb24:	000f4240 	.word	0x000f4240
    fb28:	2002f9f4 	.word	0x2002f9f4
    fb2c:	2002f9f8 	.word	0x2002f9f8

0000fb30 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    fb30:	2201      	movs	r2, #1
    fb32:	4b01      	ldr	r3, [pc, #4]	; (fb38 <log_backend_rtt_init+0x8>)
    fb34:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    fb36:	4770      	bx	lr
    fb38:	200319a6 	.word	0x200319a6

0000fb3c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    fb3c:	4b01      	ldr	r3, [pc, #4]	; (fb44 <format_set+0x8>)
	return 0;
}
    fb3e:	2000      	movs	r0, #0
	log_format_current = log_type;
    fb40:	6019      	str	r1, [r3, #0]
}
    fb42:	4770      	bx	lr
    fb44:	2002fa10 	.word	0x2002fa10

0000fb48 <panic>:
	panic_mode = true;
    fb48:	2201      	movs	r2, #1
    fb4a:	4b02      	ldr	r3, [pc, #8]	; (fb54 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    fb4c:	4802      	ldr	r0, [pc, #8]	; (fb58 <panic+0x10>)
    fb4e:	701a      	strb	r2, [r3, #0]
    fb50:	f01b b839 	b.w	2abc6 <log_output_flush>
    fb54:	200319a7 	.word	0x200319a7
    fb58:	000338cc 	.word	0x000338cc

0000fb5c <process>:
{
    fb5c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    fb5e:	4b06      	ldr	r3, [pc, #24]	; (fb78 <process+0x1c>)
{
    fb60:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    fb62:	6818      	ldr	r0, [r3, #0]
    fb64:	f7ff fd44 	bl	f5f0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    fb68:	4621      	mov	r1, r4
}
    fb6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    fb6e:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    fb70:	220f      	movs	r2, #15
    fb72:	4802      	ldr	r0, [pc, #8]	; (fb7c <process+0x20>)
    fb74:	4718      	bx	r3
    fb76:	bf00      	nop
    fb78:	2002fa10 	.word	0x2002fa10
    fb7c:	000338cc 	.word	0x000338cc

0000fb80 <data_out_block_mode>:
{
    fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb82:	4607      	mov	r7, r0
    fb84:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    fb86:	2404      	movs	r4, #4
    fb88:	4d17      	ldr	r5, [pc, #92]	; (fbe8 <data_out_block_mode+0x68>)
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    fb8a:	4632      	mov	r2, r6
    fb8c:	4639      	mov	r1, r7
    fb8e:	2000      	movs	r0, #0
    fb90:	f015 fcc2 	bl	25518 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    fb94:	b1c8      	cbz	r0, fbca <data_out_block_mode+0x4a>
	host_present = true;
    fb96:	2301      	movs	r3, #1
    fb98:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    fb9a:	4b14      	ldr	r3, [pc, #80]	; (fbec <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    fb9c:	781b      	ldrb	r3, [r3, #0]
    fb9e:	b92b      	cbnz	r3, fbac <data_out_block_mode+0x2c>
}
    fba0:	4630      	mov	r0, r6
    fba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    fba4:	b95c      	cbnz	r4, fbbe <data_out_block_mode+0x3e>
		host_present = false;
    fba6:	702c      	strb	r4, [r5, #0]
    fba8:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    fbac:	2000      	movs	r0, #0
    fbae:	f015 fcfb 	bl	255a8 <SEGGER_RTT_HasDataUp>
    fbb2:	2800      	cmp	r0, #0
    fbb4:	d0f4      	beq.n	fba0 <data_out_block_mode+0x20>
    fbb6:	782b      	ldrb	r3, [r5, #0]
    fbb8:	2b00      	cmp	r3, #0
    fbba:	d1f3      	bne.n	fba4 <data_out_block_mode+0x24>
    fbbc:	e7f0      	b.n	fba0 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    fbbe:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    fbc0:	f241 3088 	movw	r0, #5000	; 0x1388
    fbc4:	f021 fd55 	bl	31672 <z_impl_k_busy_wait>
}
    fbc8:	e7f0      	b.n	fbac <data_out_block_mode+0x2c>
		} else if (host_present) {
    fbca:	782b      	ldrb	r3, [r5, #0]
    fbcc:	b113      	cbz	r3, fbd4 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    fbce:	3c01      	subs	r4, #1
    fbd0:	d104      	bne.n	fbdc <data_out_block_mode+0x5c>
		host_present = false;
    fbd2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    fbd4:	782b      	ldrb	r3, [r5, #0]
    fbd6:	2b00      	cmp	r3, #0
    fbd8:	d1d7      	bne.n	fb8a <data_out_block_mode+0xa>
    fbda:	e7e1      	b.n	fba0 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    fbdc:	f241 3088 	movw	r0, #5000	; 0x1388
    fbe0:	f021 fd47 	bl	31672 <z_impl_k_busy_wait>
    fbe4:	e7f6      	b.n	fbd4 <data_out_block_mode+0x54>
    fbe6:	bf00      	nop
    fbe8:	200319a6 	.word	0x200319a6
    fbec:	200319a7 	.word	0x200319a7

0000fbf0 <nvs_flash_erase_sector>:

/* erase a sector and verify erase was OK.
 * return 0 if OK, errorcode on error.
 */
static int nvs_flash_erase_sector(struct nvs_fs *fs, uint32_t addr)
{
    fbf0:	b570      	push	{r4, r5, r6, lr}
	off_t offset;

	addr &= ADDR_SECT_MASK;

	offset = fs->offset;
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    fbf2:	8983      	ldrh	r3, [r0, #12]
    fbf4:	6805      	ldr	r5, [r0, #0]
	addr &= ADDR_SECT_MASK;
    fbf6:	0c0e      	lsrs	r6, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
    fbf8:	0c09      	lsrs	r1, r1, #16
    fbfa:	fb03 5501 	mla	r5, r3, r1, r5
{
    fbfe:	b086      	sub	sp, #24

	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    fc00:	e9cd 5304 	strd	r5, r3, [sp, #16]
    fc04:	4b11      	ldr	r3, [pc, #68]	; (fc4c <nvs_flash_erase_sector+0x5c>)
    fc06:	2208      	movs	r2, #8
    fc08:	9303      	str	r3, [sp, #12]
    fc0a:	4b11      	ldr	r3, [pc, #68]	; (fc50 <nvs_flash_erase_sector+0x60>)
{
    fc0c:	4604      	mov	r4, r0
	LOG_DBG("Erasing flash at %lx, len %d", (long int) offset,
    fc0e:	9302      	str	r3, [sp, #8]
    fc10:	2300      	movs	r3, #0
    fc12:	4910      	ldr	r1, [pc, #64]	; (fc54 <nvs_flash_erase_sector+0x64>)
    fc14:	4618      	mov	r0, r3
    fc16:	e9cd 3200 	strd	r3, r2, [sp]
    fc1a:	2204      	movs	r2, #4
    fc1c:	f01b f853 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
	addr &= ADDR_SECT_MASK;
    fc20:	0436      	lsls	r6, r6, #16
		fs->sector_size);

#ifdef CONFIG_NVS_LOOKUP_CACHE
	nvs_lookup_cache_invalidate(fs, addr >> ADDR_SECT_SHIFT);
#endif
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
    fc22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    fc24:	89a2      	ldrh	r2, [r4, #12]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    fc26:	6883      	ldr	r3, [r0, #8]
    fc28:	4629      	mov	r1, r5
    fc2a:	689b      	ldr	r3, [r3, #8]
    fc2c:	4798      	blx	r3

	if (rc) {
    fc2e:	b950      	cbnz	r0, fc46 <nvs_flash_erase_sector+0x56>
		return rc;
	}

	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
    fc30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    fc32:	4631      	mov	r1, r6
    fc34:	4620      	mov	r0, r4
    fc36:	89a3      	ldrh	r3, [r4, #12]
    fc38:	7912      	ldrb	r2, [r2, #4]
    fc3a:	f01b f81f 	bl	2ac7c <nvs_flash_cmp_const>
			fs->sector_size)) {
		rc = -ENXIO;
    fc3e:	2800      	cmp	r0, #0
    fc40:	bf18      	it	ne
    fc42:	f06f 0005 	mvnne.w	r0, #5
	}

	return rc;
}
    fc46:	b006      	add	sp, #24
    fc48:	bd70      	pop	{r4, r5, r6, pc}
    fc4a:	bf00      	nop
    fc4c:	000357a3 	.word	0x000357a3
    fc50:	000355e0 	.word	0x000355e0
    fc54:	000332ac 	.word	0x000332ac

0000fc58 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    fc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t data_end_addr, ate_end_addr;
	struct nvs_ate end_ate;
	size_t ate_size;
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
    fc5c:	884b      	ldrh	r3, [r1, #2]
{
    fc5e:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Recovering last ate from sector %d",
    fc60:	9304      	str	r3, [sp, #16]
    fc62:	4b1d      	ldr	r3, [pc, #116]	; (fcd8 <nvs_recover_last_ate+0x80>)
    fc64:	2408      	movs	r4, #8
    fc66:	9303      	str	r3, [sp, #12]
    fc68:	4b1c      	ldr	r3, [pc, #112]	; (fcdc <nvs_recover_last_ate+0x84>)
{
    fc6a:	4607      	mov	r7, r0
	LOG_DBG("Recovering last ate from sector %d",
    fc6c:	9302      	str	r3, [sp, #8]
    fc6e:	2300      	movs	r3, #0
{
    fc70:	460d      	mov	r5, r1
	LOG_DBG("Recovering last ate from sector %d",
    fc72:	4618      	mov	r0, r3
    fc74:	e9cd 3400 	strd	r3, r4, [sp]
    fc78:	4919      	ldr	r1, [pc, #100]	; (fce0 <nvs_recover_last_ate+0x88>)
    fc7a:	2204      	movs	r2, #4
    fc7c:	f01b f823 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fc80:	4621      	mov	r1, r4
    fc82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fc84:	f01b f82f 	bl	2ace6 <nvs_al_size.isra.0>
    fc88:	4680      	mov	r8, r0

	*addr -= ate_size;
    fc8a:	682c      	ldr	r4, [r5, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    fc8c:	f8df 9054 	ldr.w	r9, [pc, #84]	; fce4 <nvs_recover_last_ate+0x8c>
	*addr -= ate_size;
    fc90:	1a24      	subs	r4, r4, r0
    fc92:	602c      	str	r4, [r5, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    fc94:	ea04 0609 	and.w	r6, r4, r9
	while (ate_end_addr > data_end_addr) {
    fc98:	42b4      	cmp	r4, r6
    fc9a:	d803      	bhi.n	fca4 <nvs_recover_last_ate+0x4c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    fc9c:	2000      	movs	r0, #0
}
    fc9e:	b009      	add	sp, #36	; 0x24
    fca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fca4:	2308      	movs	r3, #8
    fca6:	4621      	mov	r1, r4
    fca8:	4638      	mov	r0, r7
    fcaa:	aa06      	add	r2, sp, #24
    fcac:	f01a ff98 	bl	2abe0 <nvs_flash_rd>
		if (rc) {
    fcb0:	2800      	cmp	r0, #0
    fcb2:	d1f4      	bne.n	fc9e <nvs_recover_last_ate+0x46>
		if (nvs_ate_valid(fs, &end_ate)) {
    fcb4:	4638      	mov	r0, r7
    fcb6:	a906      	add	r1, sp, #24
    fcb8:	f01b f81f 	bl	2acfa <nvs_ate_valid>
    fcbc:	b140      	cbz	r0, fcd0 <nvs_recover_last_ate+0x78>
			data_end_addr += end_ate.offset + end_ate.len;
    fcbe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    fcc2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
			data_end_addr &= ADDR_SECT_MASK;
    fcc6:	ea06 0609 	and.w	r6, r6, r9
			data_end_addr += end_ate.offset + end_ate.len;
    fcca:	4413      	add	r3, r2
    fccc:	441e      	add	r6, r3
			*addr = ate_end_addr;
    fcce:	602c      	str	r4, [r5, #0]
		ate_end_addr -= ate_size;
    fcd0:	eba4 0408 	sub.w	r4, r4, r8
    fcd4:	e7e0      	b.n	fc98 <nvs_recover_last_ate+0x40>
    fcd6:	bf00      	nop
    fcd8:	0003578e 	.word	0x0003578e
    fcdc:	00035601 	.word	0x00035601
    fce0:	000332ac 	.word	0x000332ac
    fce4:	ffff0000 	.word	0xffff0000

0000fce8 <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
    fce8:	b530      	push	{r4, r5, lr}
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    fcea:	8883      	ldrh	r3, [r0, #4]
{
    fcec:	b089      	sub	sp, #36	; 0x24
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    fcee:	9304      	str	r3, [sp, #16]
    fcf0:	4b10      	ldr	r3, [pc, #64]	; (fd34 <nvs_add_gc_done_ate+0x4c>)
    fcf2:	2500      	movs	r5, #0
    fcf4:	9303      	str	r3, [sp, #12]
    fcf6:	4b10      	ldr	r3, [pc, #64]	; (fd38 <nvs_add_gc_done_ate+0x50>)
{
    fcf8:	4604      	mov	r4, r0
	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
    fcfa:	9302      	str	r3, [sp, #8]
    fcfc:	2308      	movs	r3, #8
    fcfe:	2204      	movs	r2, #4
    fd00:	4628      	mov	r0, r5
    fd02:	e9cd 5300 	strd	r5, r3, [sp]
    fd06:	490d      	ldr	r1, [pc, #52]	; (fd3c <nvs_add_gc_done_ate+0x54>)
    fd08:	462b      	mov	r3, r5
    fd0a:	f01a ffdc 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
	gc_done_ate.id = 0xffff;
    fd0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fd12:	f8ad 3018 	strh.w	r3, [sp, #24]
	gc_done_ate.len = 0U;
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fd16:	68a3      	ldr	r3, [r4, #8]
	nvs_ate_crc8_update(&gc_done_ate);
    fd18:	a806      	add	r0, sp, #24
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fd1a:	f8ad 301a 	strh.w	r3, [sp, #26]
	gc_done_ate.len = 0U;
    fd1e:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&gc_done_ate);
    fd22:	f01a ffa2 	bl	2ac6a <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
    fd26:	4620      	mov	r0, r4
    fd28:	a906      	add	r1, sp, #24
    fd2a:	f01b f8a2 	bl	2ae72 <nvs_flash_ate_wrt>
}
    fd2e:	b009      	add	sp, #36	; 0x24
    fd30:	bd30      	pop	{r4, r5, pc}
    fd32:	bf00      	nop
    fd34:	00035773 	.word	0x00035773
    fd38:	00035628 	.word	0x00035628
    fd3c:	000332ac 	.word	0x000332ac

0000fd40 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    fd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fd44:	2108      	movs	r1, #8
{
    fd46:	b09b      	sub	sp, #108	; 0x6c
    fd48:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    fd4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    fd4c:	f01a ffcb 	bl	2ace6 <nvs_al_size.isra.0>
    fd50:	4605      	mov	r5, r0

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fd52:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
    fd54:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fd56:	0c1b      	lsrs	r3, r3, #16
    fd58:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
    fd5a:	a909      	add	r1, sp, #36	; 0x24
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    fd5c:	9309      	str	r3, [sp, #36]	; 0x24
	nvs_sector_advance(fs, &sec_addr);
    fd5e:	f01a ff4d 	bl	2abfc <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fd62:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    fd66:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fd68:	aa0c      	add	r2, sp, #48	; 0x30
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fd6a:	445e      	add	r6, fp
    fd6c:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fd6e:	2308      	movs	r3, #8
    fd70:	4631      	mov	r1, r6
    fd72:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    fd74:	960a      	str	r6, [sp, #40]	; 0x28
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    fd76:	f01a ff33 	bl	2abe0 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    fd7a:	1e02      	subs	r2, r0, #0
    fd7c:	f2c0 80bb 	blt.w	fef6 <nvs_gc+0x1b6>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    fd80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fd82:	aa0c      	add	r2, sp, #48	; 0x30
    fd84:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fd86:	2300      	movs	r3, #0
		if (data8[i] != value) {
    fd88:	f812 0b01 	ldrb.w	r0, [r2], #1
    fd8c:	4281      	cmp	r1, r0
    fd8e:	f040 80a1 	bne.w	fed4 <nvs_gc+0x194>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    fd92:	3301      	adds	r3, #1
    fd94:	2b08      	cmp	r3, #8
    fd96:	d1f7      	bne.n	fd88 <nvs_gc+0x48>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
    fd98:	68a3      	ldr	r3, [r4, #8]
    fd9a:	6862      	ldr	r2, [r4, #4]
    fd9c:	442b      	add	r3, r5
    fd9e:	429a      	cmp	r2, r3
    fda0:	f080 8090 	bcs.w	fec4 <nvs_gc+0x184>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
    fda4:	4659      	mov	r1, fp
    fda6:	4620      	mov	r0, r4
    fda8:	f7ff ff22 	bl	fbf0 <nvs_flash_erase_sector>
    fdac:	4602      	mov	r2, r0
	if (rc) {
    fdae:	e0a2      	b.n	fef6 <nvs_gc+0x1b6>
		gc_addr += close_ate.offset;
    fdb0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
		gc_addr &= ADDR_SECT_MASK;
    fdb4:	0c36      	lsrs	r6, r6, #16
    fdb6:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
    fdb8:	441e      	add	r6, r3
    fdba:	960a      	str	r6, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fdbc:	aa0e      	add	r2, sp, #56	; 0x38
    fdbe:	4620      	mov	r0, r4
    fdc0:	a90a      	add	r1, sp, #40	; 0x28
		gc_prev_addr = gc_addr;
    fdc2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    fdc6:	f01a ffd0 	bl	2ad6a <nvs_prev_ate>
		if (rc) {
    fdca:	4602      	mov	r2, r0
    fdcc:	2800      	cmp	r0, #0
    fdce:	f040 8092 	bne.w	fef6 <nvs_gc+0x1b6>
		if (!nvs_ate_valid(fs, &gc_ate)) {
    fdd2:	4620      	mov	r0, r4
    fdd4:	a90e      	add	r1, sp, #56	; 0x38
    fdd6:	f01a ff90 	bl	2acfa <nvs_ate_valid>
    fdda:	b918      	cbnz	r0, fde4 <nvs_gc+0xa4>
	} while (gc_prev_addr != stop_addr);
    fddc:	9b07      	ldr	r3, [sp, #28]
    fdde:	4553      	cmp	r3, sl
    fde0:	d1ec      	bne.n	fdbc <nvs_gc+0x7c>
    fde2:	e7d9      	b.n	fd98 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
    fde4:	6863      	ldr	r3, [r4, #4]
    fde6:	930b      	str	r3, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fde8:	aa10      	add	r2, sp, #64	; 0x40
    fdea:	4620      	mov	r0, r4
    fdec:	a90b      	add	r1, sp, #44	; 0x2c
			wlk_prev_addr = wlk_addr;
    fdee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    fdf0:	f01a ffbb 	bl	2ad6a <nvs_prev_ate>
			if (rc) {
    fdf4:	4602      	mov	r2, r0
    fdf6:	2800      	cmp	r0, #0
    fdf8:	d17d      	bne.n	fef6 <nvs_gc+0x1b6>
			if ((wlk_ate.id == gc_ate.id) &&
    fdfa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    fdfe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fe02:	429a      	cmp	r2, r3
    fe04:	d038      	beq.n	fe78 <nvs_gc+0x138>
		} while (wlk_addr != fs->ate_wra);
    fe06:	6862      	ldr	r2, [r4, #4]
    fe08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fe0a:	429a      	cmp	r2, r3
    fe0c:	d1ec      	bne.n	fde8 <nvs_gc+0xa8>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    fe0e:	45b2      	cmp	sl, r6
    fe10:	d1e4      	bne.n	fddc <nvs_gc+0x9c>
    fe12:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    fe16:	2b00      	cmp	r3, #0
    fe18:	d0e0      	beq.n	fddc <nvs_gc+0x9c>
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);
    fe1a:	9305      	str	r3, [sp, #20]
    fe1c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    fe20:	2208      	movs	r2, #8
    fe22:	9304      	str	r3, [sp, #16]
    fe24:	4b36      	ldr	r3, [pc, #216]	; (ff00 <nvs_gc+0x1c0>)
    fe26:	4937      	ldr	r1, [pc, #220]	; (ff04 <nvs_gc+0x1c4>)
    fe28:	9303      	str	r3, [sp, #12]
    fe2a:	4b37      	ldr	r3, [pc, #220]	; (ff08 <nvs_gc+0x1c8>)
    fe2c:	9302      	str	r3, [sp, #8]
    fe2e:	2300      	movs	r3, #0
    fe30:	4618      	mov	r0, r3
    fe32:	e9cd 3200 	strd	r3, r2, [sp]
    fe36:	2204      	movs	r2, #4
    fe38:	f01a ff45 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
			data_addr += gc_ate.offset;
    fe3c:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    fe40:	ea4f 431a 	mov.w	r3, sl, lsr #16
    fe44:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
    fe46:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fe48:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
    fe4a:	a80e      	add	r0, sp, #56	; 0x38
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    fe4c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			nvs_ate_crc8_update(&gc_ate);
    fe50:	f01a ff0b 	bl	2ac6a <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fe54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    fe56:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    fe5a:	681e      	ldr	r6, [r3, #0]
    fe5c:	4276      	negs	r6, r6
	block_size =
    fe5e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    fe62:	f1b9 0f00 	cmp.w	r9, #0
    fe66:	d10e      	bne.n	fe86 <nvs_gc+0x146>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    fe68:	4620      	mov	r0, r4
    fe6a:	a90e      	add	r1, sp, #56	; 0x38
    fe6c:	f01b f801 	bl	2ae72 <nvs_flash_ate_wrt>
			if (rc) {
    fe70:	4602      	mov	r2, r0
    fe72:	2800      	cmp	r0, #0
    fe74:	d0b2      	beq.n	fddc <nvs_gc+0x9c>
    fe76:	e03e      	b.n	fef6 <nvs_gc+0x1b6>
			    (nvs_ate_valid(fs, &wlk_ate))) {
    fe78:	4620      	mov	r0, r4
    fe7a:	a910      	add	r1, sp, #64	; 0x40
    fe7c:	f01a ff3d 	bl	2acfa <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
    fe80:	2800      	cmp	r0, #0
    fe82:	d0c0      	beq.n	fe06 <nvs_gc+0xc6>
    fe84:	e7c3      	b.n	fe0e <nvs_gc+0xce>
		bytes_to_copy = MIN(block_size, len);
    fe86:	454e      	cmp	r6, r9
    fe88:	46b0      	mov	r8, r6
    fe8a:	bf28      	it	cs
    fe8c:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    fe8e:	aa12      	add	r2, sp, #72	; 0x48
    fe90:	4643      	mov	r3, r8
    fe92:	4639      	mov	r1, r7
    fe94:	4620      	mov	r0, r4
    fe96:	f01a fea3 	bl	2abe0 <nvs_flash_rd>
		if (rc) {
    fe9a:	4602      	mov	r2, r0
    fe9c:	bb58      	cbnz	r0, fef6 <nvs_gc+0x1b6>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    fe9e:	4643      	mov	r3, r8
    fea0:	68a1      	ldr	r1, [r4, #8]
    fea2:	aa12      	add	r2, sp, #72	; 0x48
    fea4:	4620      	mov	r0, r4
    fea6:	f01a ffaa 	bl	2adfe <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    feaa:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    feac:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    feae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    feb0:	f01a ff19 	bl	2ace6 <nvs_al_size.isra.0>
    feb4:	68a3      	ldr	r3, [r4, #8]
    feb6:	4403      	add	r3, r0
    feb8:	60a3      	str	r3, [r4, #8]
		if (rc) {
    feba:	b9e2      	cbnz	r2, fef6 <nvs_gc+0x1b6>
		len -= bytes_to_copy;
    febc:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
    fec0:	4447      	add	r7, r8
    fec2:	e7ce      	b.n	fe62 <nvs_gc+0x122>
		rc = nvs_add_gc_done_ate(fs);
    fec4:	4620      	mov	r0, r4
    fec6:	f7ff ff0f 	bl	fce8 <nvs_add_gc_done_ate>
		if (rc) {
    feca:	4602      	mov	r2, r0
    fecc:	2800      	cmp	r0, #0
    fece:	f43f af69 	beq.w	fda4 <nvs_gc+0x64>
    fed2:	e010      	b.n	fef6 <nvs_gc+0x1b6>
	stop_addr = gc_addr - ate_size;
    fed4:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fed6:	4620      	mov	r0, r4
    fed8:	a90c      	add	r1, sp, #48	; 0x30
	stop_addr = gc_addr - ate_size;
    feda:	9307      	str	r3, [sp, #28]
	if (nvs_close_ate_valid(fs, &close_ate)) {
    fedc:	f01a ff27 	bl	2ad2e <nvs_close_ate_valid>
    fee0:	2800      	cmp	r0, #0
    fee2:	f47f af65 	bne.w	fdb0 <nvs_gc+0x70>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    fee6:	4620      	mov	r0, r4
    fee8:	a90a      	add	r1, sp, #40	; 0x28
    feea:	f7ff feb5 	bl	fc58 <nvs_recover_last_ate>
		if (rc) {
    feee:	4602      	mov	r2, r0
    fef0:	2800      	cmp	r0, #0
    fef2:	f43f af63 	beq.w	fdbc <nvs_gc+0x7c>
		return rc;
	}
	return 0;
}
    fef6:	4610      	mov	r0, r2
    fef8:	b01b      	add	sp, #108	; 0x6c
    fefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fefe:	bf00      	nop
    ff00:	00035787 	.word	0x00035787
    ff04:	000332ac 	.word	0x000332ac
    ff08:	00035645 	.word	0x00035645

0000ff0c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    ff0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff10:	4604      	mov	r4, r0
    ff12:	b08e      	sub	sp, #56	; 0x38

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ff14:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
    ff18:	4638      	mov	r0, r7
    ff1a:	f021 f898 	bl	3104e <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ff1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ff20:	6883      	ldr	r3, [r0, #8]
    ff22:	68db      	ldr	r3, [r3, #12]
    ff24:	4798      	blx	r3
    ff26:	4603      	mov	r3, r0
    ff28:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ff2a:	b930      	cbnz	r0, ff3a <nvs_mount+0x2e>
		LOG_ERR("Could not obtain flash parameters");
    ff2c:	4a90      	ldr	r2, [pc, #576]	; (10170 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x170>)
    ff2e:	9000      	str	r0, [sp, #0]
    ff30:	e9cd 0201 	strd	r0, r2, [sp, #4]
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
		LOG_ERR("Configuration error - sector count");
    ff34:	2201      	movs	r2, #1
    ff36:	498f      	ldr	r1, [pc, #572]	; (10174 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x174>)
    ff38:	e00f      	b.n	ff5a <nvs_mount+0x4e>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ff3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ff3c:	6883      	ldr	r3, [r0, #8]
    ff3e:	68db      	ldr	r3, [r3, #12]
    ff40:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ff42:	6803      	ldr	r3, [r0, #0]
    ff44:	3b01      	subs	r3, #1
    ff46:	2b1f      	cmp	r3, #31
    ff48:	d90f      	bls.n	ff6a <nvs_mount+0x5e>
		LOG_ERR("Unsupported write block size");
    ff4a:	4b8b      	ldr	r3, [pc, #556]	; (10178 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x178>)
    ff4c:	9302      	str	r3, [sp, #8]
    ff4e:	2300      	movs	r3, #0
    ff50:	2201      	movs	r2, #1
    ff52:	4618      	mov	r0, r3
    ff54:	e9cd 3300 	strd	r3, r3, [sp]
    ff58:	4986      	ldr	r1, [pc, #536]	; (10174 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x174>)
    ff5a:	f01a feb4 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    ff5e:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ff62:	4628      	mov	r0, r5
    ff64:	b00e      	add	sp, #56	; 0x38
    ff66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ff6a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ff6c:	6821      	ldr	r1, [r4, #0]
    ff6e:	aa0b      	add	r2, sp, #44	; 0x2c
    ff70:	f01f fdd6 	bl	2fb20 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    ff74:	b108      	cbz	r0, ff7a <nvs_mount+0x6e>
		LOG_ERR("Unable to get page info");
    ff76:	4b81      	ldr	r3, [pc, #516]	; (1017c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x17c>)
    ff78:	e7e8      	b.n	ff4c <nvs_mount+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    ff7a:	89a5      	ldrh	r5, [r4, #12]
    ff7c:	b12d      	cbz	r5, ff8a <nvs_mount+0x7e>
    ff7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ff80:	fbb5 f2f3 	udiv	r2, r5, r3
    ff84:	fb03 5512 	mls	r5, r3, r2, r5
    ff88:	b10d      	cbz	r5, ff8e <nvs_mount+0x82>
		LOG_ERR("Invalid sector size");
    ff8a:	4b7d      	ldr	r3, [pc, #500]	; (10180 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x180>)
    ff8c:	e7de      	b.n	ff4c <nvs_mount+0x40>
	if (fs->sector_count < 2) {
    ff8e:	89e3      	ldrh	r3, [r4, #14]
    ff90:	2b01      	cmp	r3, #1
    ff92:	d805      	bhi.n	ffa0 <nvs_mount+0x94>
		LOG_ERR("Configuration error - sector count");
    ff94:	4b7b      	ldr	r3, [pc, #492]	; (10184 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x184>)
    ff96:	9500      	str	r5, [sp, #0]
    ff98:	e9cd 5301 	strd	r5, r3, [sp, #4]
    ff9c:	462b      	mov	r3, r5
    ff9e:	e7c9      	b.n	ff34 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ffa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    ffa2:	9506      	str	r5, [sp, #24]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    ffa4:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ffa8:	f04f 33ff 	mov.w	r3, #4294967295
    ffac:	f04f 32ff 	mov.w	r2, #4294967295
    ffb0:	4638      	mov	r0, r7
    ffb2:	f015 fda3 	bl	25afc <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ffb6:	2108      	movs	r1, #8
    ffb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ffba:	f01a fe94 	bl	2ace6 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    ffbe:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    ffc0:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    ffc2:	89e3      	ldrh	r3, [r4, #14]
    ffc4:	fa1f fa85 	uxth.w	sl, r5
    ffc8:	4553      	cmp	r3, sl
    ffca:	d808      	bhi.n	ffde <nvs_mount+0xd2>
	if (closed_sectors == fs->sector_count) {
    ffcc:	89e3      	ldrh	r3, [r4, #14]
    ffce:	4543      	cmp	r3, r8
    ffd0:	d123      	bne.n	1001a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    ffd2:	4638      	mov	r0, r7
    ffd4:	f015 fe0c 	bl	25bf0 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    ffd8:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    ffdc:	e7c1      	b.n	ff62 <nvs_mount+0x56>
		       (uint16_t)(fs->sector_size - ate_size);
    ffde:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    ffe0:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    ffe2:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    ffe4:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    ffe8:	464a      	mov	r2, r9
    ffea:	2308      	movs	r3, #8
    ffec:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    ffee:	9106      	str	r1, [sp, #24]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    fff0:	f01a fe44 	bl	2ac7c <nvs_flash_cmp_const>
		if (rc) {
    fff4:	b178      	cbz	r0, 10016 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16>
			nvs_sector_advance(fs, &addr);
    fff6:	4620      	mov	r0, r4
    fff8:	a906      	add	r1, sp, #24
    fffa:	f01a fdff 	bl	2abfc <nvs_sector_advance>
			closed_sectors++;
    fffe:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   10002:	2308      	movs	r3, #8
   10004:	464a      	mov	r2, r9
   10006:	4620      	mov	r0, r4
   10008:	9906      	ldr	r1, [sp, #24]
			closed_sectors++;
   1000a:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1000e:	f01a fe35 	bl	2ac7c <nvs_flash_cmp_const>
			if (!rc) {
   10012:	2800      	cmp	r0, #0
   10014:	d0da      	beq.n	ffcc <nvs_mount+0xc0>
	for (i = 0; i < fs->sector_count; i++) {
   10016:	3501      	adds	r5, #1
   10018:	e7d3      	b.n	ffc2 <nvs_mount+0xb6>
	if (i == fs->sector_count) {
   1001a:	4553      	cmp	r3, sl
   1001c:	d10b      	bne.n	10036 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x36>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1001e:	9906      	ldr	r1, [sp, #24]
   10020:	2308      	movs	r3, #8
   10022:	464a      	mov	r2, r9
   10024:	4620      	mov	r0, r4
   10026:	1b89      	subs	r1, r1, r6
   10028:	f01a fe28 	bl	2ac7c <nvs_flash_cmp_const>
		if (!rc) {
   1002c:	b918      	cbnz	r0, 10036 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x36>
			nvs_sector_advance(fs, &addr);
   1002e:	4620      	mov	r0, r4
   10030:	a906      	add	r1, sp, #24
   10032:	f01a fde3 	bl	2abfc <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   10036:	4620      	mov	r0, r4
   10038:	a906      	add	r1, sp, #24
   1003a:	f7ff fe0d 	bl	fc58 <nvs_recover_last_ate>
	if (rc) {
   1003e:	4605      	mov	r5, r0
   10040:	b118      	cbz	r0, 1004a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4a>
   10042:	4638      	mov	r0, r7
   10044:	f015 fdd4 	bl	25bf0 <z_impl_k_mutex_unlock>
	if (rc) {
   10048:	e78b      	b.n	ff62 <nvs_mount+0x56>
	fs->ate_wra = addr;
   1004a:	9b06      	ldr	r3, [sp, #24]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1004c:	ea4f 4813 	mov.w	r8, r3, lsr #16
   10050:	ea4f 4808 	mov.w	r8, r8, lsl #16
	fs->ate_wra = addr;
   10054:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   10056:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   1005a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   1005e:	4299      	cmp	r1, r3
   10060:	d30f      	bcc.n	10082 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x82>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   10062:	2308      	movs	r3, #8
   10064:	4620      	mov	r0, r4
   10066:	aa07      	add	r2, sp, #28
   10068:	f01a fdba 	bl	2abe0 <nvs_flash_rd>
		if (rc) {
   1006c:	4605      	mov	r5, r0
   1006e:	2800      	cmp	r0, #0
   10070:	d1e7      	bne.n	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
   10072:	ab07      	add	r3, sp, #28
		if (data8[i] != value) {
   10074:	f813 2b01 	ldrb.w	r2, [r3], #1
   10078:	4591      	cmp	r9, r2
   1007a:	d143      	bne.n	10104 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x104>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1007c:	3501      	adds	r5, #1
   1007e:	2d08      	cmp	r5, #8
   10080:	d1f8      	bne.n	10074 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x74>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   10082:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   10084:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   10086:	0c1b      	lsrs	r3, r3, #16
   10088:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   1008a:	a906      	add	r1, sp, #24
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1008c:	9306      	str	r3, [sp, #24]
	nvs_sector_advance(fs, &addr);
   1008e:	f01a fdb5 	bl	2abfc <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   10092:	464a      	mov	r2, r9
   10094:	4620      	mov	r0, r4
   10096:	89a3      	ldrh	r3, [r4, #12]
   10098:	9906      	ldr	r1, [sp, #24]
   1009a:	f01a fdef 	bl	2ac7c <nvs_flash_cmp_const>
	if (rc < 0) {
   1009e:	1e05      	subs	r5, r0, #0
   100a0:	dbcf      	blt.n	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
		addr = fs->ate_wra + ate_size;
   100a2:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   100a4:	f000 8082 	beq.w	101ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1ac>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   100a8:	f64f 79ff 	movw	r9, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
   100ac:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   100b0:	89a3      	ldrh	r3, [r4, #12]
   100b2:	fa1f f288 	uxth.w	r2, r8
   100b6:	1b9b      	subs	r3, r3, r6
   100b8:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
   100ba:	f8cd 8018 	str.w	r8, [sp, #24]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   100be:	d33d      	bcc.n	1013c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x13c>
		LOG_INF("No GC Done marker found: restarting gc");
   100c0:	4b31      	ldr	r3, [pc, #196]	; (10188 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x188>)
   100c2:	2203      	movs	r2, #3
   100c4:	9302      	str	r3, [sp, #8]
   100c6:	2300      	movs	r3, #0
   100c8:	492a      	ldr	r1, [pc, #168]	; (10174 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x174>)
   100ca:	4618      	mov	r0, r3
   100cc:	e9cd 3300 	strd	r3, r3, [sp]
   100d0:	f01a fdf9 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   100d4:	4620      	mov	r0, r4
   100d6:	6861      	ldr	r1, [r4, #4]
   100d8:	f7ff fd8a 	bl	fbf0 <nvs_flash_erase_sector>
		if (rc) {
   100dc:	4605      	mov	r5, r0
   100de:	2800      	cmp	r0, #0
   100e0:	d1af      	bne.n	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
		fs->ate_wra &= ADDR_SECT_MASK;
   100e2:	6863      	ldr	r3, [r4, #4]
   100e4:	4a29      	ldr	r2, [pc, #164]	; (1018c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x18c>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   100e6:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   100e8:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   100ea:	440b      	add	r3, r1
   100ec:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   100f0:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   100f2:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
   100f4:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   100f6:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   100f8:	f7ff fe22 	bl	fd40 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   100fc:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   100fe:	2d00      	cmp	r5, #0
   10100:	d070      	beq.n	101e4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1e4>
   10102:	e79e      	b.n	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
		if (nvs_ate_valid(fs, &last_ate)) {
   10104:	4620      	mov	r0, r4
   10106:	a907      	add	r1, sp, #28
   10108:	f01a fdf7 	bl	2acfa <nvs_ate_valid>
   1010c:	6862      	ldr	r2, [r4, #4]
   1010e:	b910      	cbnz	r0, 10116 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x116>
		fs->ate_wra -= ate_size;
   10110:	1b92      	subs	r2, r2, r6
   10112:	6062      	str	r2, [r4, #4]
   10114:	e7a1      	b.n	1005a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5a>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   10116:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   1011a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   1011e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   10120:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   10124:	4429      	add	r1, r5
   10126:	f01a fdde 	bl	2ace6 <nvs_al_size.isra.0>
   1012a:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1012c:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1012e:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   10130:	d1ee      	bne.n	10110 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x110>
   10132:	2d00      	cmp	r5, #0
   10134:	d0ec      	beq.n	10110 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x110>
				rc = -ESPIPE;
   10136:	f06f 051c 	mvn.w	r5, #28
   1013a:	e090      	b.n	1025e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x25e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1013c:	2308      	movs	r3, #8
   1013e:	4641      	mov	r1, r8
   10140:	4620      	mov	r0, r4
   10142:	aa09      	add	r2, sp, #36	; 0x24
   10144:	f01a fd4c 	bl	2abe0 <nvs_flash_rd>
			if (rc) {
   10148:	4605      	mov	r5, r0
   1014a:	2800      	cmp	r0, #0
   1014c:	f47f af79 	bne.w	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   10150:	4620      	mov	r0, r4
   10152:	a909      	add	r1, sp, #36	; 0x24
   10154:	f01a fdd1 	bl	2acfa <nvs_ate_valid>
   10158:	b138      	cbz	r0, 1016a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16a>
   1015a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1015e:	454b      	cmp	r3, r9
   10160:	d103      	bne.n	1016a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16a>
			    (gc_done_ate.id == 0xffff) &&
   10162:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10166:	2b00      	cmp	r3, #0
   10168:	d07f      	beq.n	1026a <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x26a>
			addr += ate_size;
   1016a:	44b0      	add	r8, r6
   1016c:	e7a0      	b.n	100b0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb0>
   1016e:	bf00      	nop
   10170:	0003566f 	.word	0x0003566f
   10174:	000332ac 	.word	0x000332ac
   10178:	00035691 	.word	0x00035691
   1017c:	000356ae 	.word	0x000356ae
   10180:	000356c6 	.word	0x000356c6
   10184:	000356da 	.word	0x000356da
   10188:	00035737 	.word	0x00035737
   1018c:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   10190:	464a      	mov	r2, r9
   10192:	4620      	mov	r0, r4
   10194:	1a5b      	subs	r3, r3, r1
   10196:	f01a fd71 	bl	2ac7c <nvs_flash_cmp_const>
		if (rc < 0) {
   1019a:	1e05      	subs	r5, r0, #0
   1019c:	f6ff af51 	blt.w	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
		if (!rc) {
   101a0:	d008      	beq.n	101b4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1b4>
		fs->data_wra += fs->flash_parameters->write_block_size;
   101a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   101a4:	68a3      	ldr	r3, [r4, #8]
   101a6:	6812      	ldr	r2, [r2, #0]
   101a8:	4413      	add	r3, r2
   101aa:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   101ac:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   101b0:	428b      	cmp	r3, r1
   101b2:	d8ed      	bhi.n	10190 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x190>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   101b4:	6861      	ldr	r1, [r4, #4]
   101b6:	89a3      	ldrh	r3, [r4, #12]
   101b8:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   101bc:	429a      	cmp	r2, r3
   101be:	d19e      	bne.n	100fe <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xfe>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   101c0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 10298 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x298>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   101c4:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   101c6:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   101ca:	429a      	cmp	r2, r3
   101cc:	d097      	beq.n	100fe <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xfe>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   101ce:	4620      	mov	r0, r4
   101d0:	f7ff fd0e 	bl	fbf0 <nvs_flash_erase_sector>
		if (rc) {
   101d4:	4605      	mov	r5, r0
   101d6:	2800      	cmp	r0, #0
   101d8:	f47f af33 	bne.w	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   101dc:	6863      	ldr	r3, [r4, #4]
   101de:	ea03 0308 	and.w	r3, r3, r8
   101e2:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   101e4:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   101e6:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   101e8:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   101ec:	429a      	cmp	r2, r3
   101ee:	d032      	beq.n	10256 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x256>
   101f0:	4638      	mov	r0, r7
   101f2:	f015 fcfd 	bl	25bf0 <z_impl_k_mutex_unlock>
	fs->ready = true;
   101f6:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   101f8:	2500      	movs	r5, #0
	fs->ready = true;
   101fa:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   101fc:	89a3      	ldrh	r3, [r4, #12]
   101fe:	4628      	mov	r0, r5
   10200:	9304      	str	r3, [sp, #16]
   10202:	89e3      	ldrh	r3, [r4, #14]
   10204:	2203      	movs	r2, #3
   10206:	9303      	str	r3, [sp, #12]
   10208:	4b24      	ldr	r3, [pc, #144]	; (1029c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x29c>)
   1020a:	e9cd 5500 	strd	r5, r5, [sp]
   1020e:	9302      	str	r3, [sp, #8]
   10210:	4923      	ldr	r1, [pc, #140]	; (102a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a0>)
   10212:	462b      	mov	r3, r5
   10214:	f01a fd57 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("alloc wra: %d, %x",
   10218:	6863      	ldr	r3, [r4, #4]
   1021a:	4628      	mov	r0, r5
   1021c:	b29a      	uxth	r2, r3
   1021e:	0c1b      	lsrs	r3, r3, #16
   10220:	9303      	str	r3, [sp, #12]
   10222:	4b20      	ldr	r3, [pc, #128]	; (102a4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a4>)
   10224:	9204      	str	r2, [sp, #16]
   10226:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1022a:	2203      	movs	r2, #3
   1022c:	462b      	mov	r3, r5
   1022e:	491c      	ldr	r1, [pc, #112]	; (102a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a0>)
   10230:	9500      	str	r5, [sp, #0]
   10232:	f01a fd48 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
	LOG_INF("data wra: %d, %x",
   10236:	68a3      	ldr	r3, [r4, #8]
   10238:	4628      	mov	r0, r5
   1023a:	b29a      	uxth	r2, r3
   1023c:	0c1b      	lsrs	r3, r3, #16
   1023e:	9303      	str	r3, [sp, #12]
   10240:	4b19      	ldr	r3, [pc, #100]	; (102a8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a8>)
   10242:	9204      	str	r2, [sp, #16]
   10244:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10248:	2203      	movs	r2, #3
   1024a:	462b      	mov	r3, r5
   1024c:	4914      	ldr	r1, [pc, #80]	; (102a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a0>)
   1024e:	9500      	str	r5, [sp, #0]
   10250:	f01a fd39 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
	return 0;
   10254:	e685      	b.n	ff62 <nvs_mount+0x56>
		rc = nvs_add_gc_done_ate(fs);
   10256:	4620      	mov	r0, r4
   10258:	f7ff fd46 	bl	fce8 <nvs_add_gc_done_ate>
   1025c:	4605      	mov	r5, r0
   1025e:	4638      	mov	r0, r7
   10260:	f015 fcc6 	bl	25bf0 <z_impl_k_mutex_unlock>
	if (rc) {
   10264:	2d00      	cmp	r5, #0
   10266:	d0c6      	beq.n	101f6 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1f6>
   10268:	e67b      	b.n	ff62 <nvs_mount+0x56>
			LOG_INF("GC Done marker found");
   1026a:	4b10      	ldr	r3, [pc, #64]	; (102ac <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2ac>)
   1026c:	2203      	movs	r2, #3
   1026e:	4628      	mov	r0, r5
   10270:	e9cd 5301 	strd	r5, r3, [sp, #4]
   10274:	490a      	ldr	r1, [pc, #40]	; (102a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a0>)
   10276:	462b      	mov	r3, r5
   10278:	9500      	str	r5, [sp, #0]
   1027a:	f01a fd24 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1027e:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   10280:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   10282:	0c1b      	lsrs	r3, r3, #16
   10284:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   10286:	a906      	add	r1, sp, #24
			addr = fs->ate_wra & ADDR_SECT_MASK;
   10288:	9306      	str	r3, [sp, #24]
			nvs_sector_advance(fs, &addr);
   1028a:	f01a fcb7 	bl	2abfc <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   1028e:	4620      	mov	r0, r4
   10290:	9906      	ldr	r1, [sp, #24]
   10292:	f7ff fcad 	bl	fbf0 <nvs_flash_erase_sector>
   10296:	e731      	b.n	100fc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xfc>
   10298:	ffff0000 	.word	0xffff0000
   1029c:	000356fd 	.word	0x000356fd
   102a0:	000332ac 	.word	0x000332ac
   102a4:	00035714 	.word	0x00035714
   102a8:	00035726 	.word	0x00035726
   102ac:	0003575e 	.word	0x0003575e

000102b0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102b4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   102b6:	7c03      	ldrb	r3, [r0, #16]
{
   102b8:	4604      	mov	r4, r0
   102ba:	4689      	mov	r9, r1
   102bc:	4690      	mov	r8, r2
   102be:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
   102c0:	b973      	cbnz	r3, 102e0 <nvs_write+0x30>
		LOG_ERR("NVS not initialized");
   102c2:	4a66      	ldr	r2, [pc, #408]	; (1045c <nvs_write+0x1ac>)
   102c4:	4618      	mov	r0, r3
   102c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   102ca:	4965      	ldr	r1, [pc, #404]	; (10460 <nvs_write+0x1b0>)
   102cc:	2201      	movs	r2, #1
   102ce:	9300      	str	r3, [sp, #0]
   102d0:	f01a fcf9 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   102d4:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   102d8:	4630      	mov	r0, r6
   102da:	b00d      	add	sp, #52	; 0x34
   102dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   102e0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   102e2:	2108      	movs	r1, #8
   102e4:	4610      	mov	r0, r2
   102e6:	f01a fcfe 	bl	2ace6 <nvs_al_size.isra.0>
   102ea:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   102ec:	4629      	mov	r1, r5
   102ee:	4610      	mov	r0, r2
   102f0:	f01a fcf9 	bl	2ace6 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   102f4:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
   102f6:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   102f8:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   102fc:	42ab      	cmp	r3, r5
   102fe:	f0c0 80a9 	bcc.w	10454 <nvs_write+0x1a4>
   10302:	b11d      	cbz	r5, 1030c <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   10304:	f1b8 0f00 	cmp.w	r8, #0
   10308:	f000 80a4 	beq.w	10454 <nvs_write+0x1a4>
	wlk_addr = fs->ate_wra;
   1030c:	6863      	ldr	r3, [r4, #4]
   1030e:	9307      	str	r3, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   10310:	4620      	mov	r0, r4
   10312:	aa08      	add	r2, sp, #32
   10314:	a907      	add	r1, sp, #28
		rd_addr = wlk_addr;
   10316:	f8dd b01c 	ldr.w	fp, [sp, #28]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1031a:	f01a fd26 	bl	2ad6a <nvs_prev_ate>
		if (rc) {
   1031e:	4606      	mov	r6, r0
   10320:	2800      	cmp	r0, #0
   10322:	d1d9      	bne.n	102d8 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10324:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10328:	454b      	cmp	r3, r9
   1032a:	d005      	beq.n	10338 <nvs_write+0x88>
		if (wlk_addr == fs->ate_wra) {
   1032c:	6862      	ldr	r2, [r4, #4]
   1032e:	9b07      	ldr	r3, [sp, #28]
   10330:	429a      	cmp	r2, r3
   10332:	d1ed      	bne.n	10310 <nvs_write+0x60>
		if (len == 0) {
   10334:	b9e5      	cbnz	r5, 10370 <nvs_write+0xc0>
   10336:	e7cf      	b.n	102d8 <nvs_write+0x28>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   10338:	4620      	mov	r0, r4
   1033a:	a908      	add	r1, sp, #32
   1033c:	f01a fcdd 	bl	2acfa <nvs_ate_valid>
   10340:	2800      	cmp	r0, #0
   10342:	d0f3      	beq.n	1032c <nvs_write+0x7c>
		rd_addr += wlk_ate.offset;
   10344:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
			if (wlk_ate.len == 0U) {
   10348:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
		if (len == 0) {
   1034c:	b175      	cbz	r5, 1036c <nvs_write+0xbc>
		} else if (len == wlk_ate.len) {
   1034e:	42ab      	cmp	r3, r5
   10350:	d10e      	bne.n	10370 <nvs_write+0xc0>
		rd_addr &= ADDR_SECT_MASK;
   10352:	ea4f 411b 	mov.w	r1, fp, lsr #16
   10356:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   10358:	4401      	add	r1, r0
   1035a:	462b      	mov	r3, r5
   1035c:	4642      	mov	r2, r8
   1035e:	4620      	mov	r0, r4
   10360:	f01a fc59 	bl	2ac16 <nvs_flash_block_cmp>
			if (rc <= 0) {
   10364:	2800      	cmp	r0, #0
   10366:	dc03      	bgt.n	10370 <nvs_write+0xc0>
   10368:	4606      	mov	r6, r0
   1036a:	e7b5      	b.n	102d8 <nvs_write+0x28>
			if (wlk_ate.len == 0U) {
   1036c:	2b00      	cmp	r3, #0
   1036e:	d0b3      	beq.n	102d8 <nvs_write+0x28>
	if (data_size) {
   10370:	2f00      	cmp	r7, #0
   10372:	d13e      	bne.n	103f2 <nvs_write+0x142>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   10374:	f104 0314 	add.w	r3, r4, #20
   10378:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   1037a:	f04f 32ff 	mov.w	r2, #4294967295
   1037e:	f04f 33ff 	mov.w	r3, #4294967295
   10382:	f104 0014 	add.w	r0, r4, #20
   10386:	f015 fbb9 	bl	25afc <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   1038a:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 10464 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
   1038e:	89e3      	ldrh	r3, [r4, #14]
   10390:	429e      	cmp	r6, r3
   10392:	d05c      	beq.n	1044e <nvs_write+0x19e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   10394:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   10398:	18f9      	adds	r1, r7, r3
   1039a:	428a      	cmp	r2, r1
   1039c:	d32c      	bcc.n	103f8 <nvs_write+0x148>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1039e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	entry.part = 0xff;
   103a2:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   103a4:	a80a      	add	r0, sp, #40	; 0x28
	entry.part = 0xff;
   103a6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	entry.id = id;
   103aa:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
	entry.len = (uint16_t)len;
   103ae:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	nvs_ate_crc8_update(&entry);
   103b2:	f01a fc5a 	bl	2ac6a <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   103b6:	462b      	mov	r3, r5
   103b8:	4642      	mov	r2, r8
   103ba:	68a1      	ldr	r1, [r4, #8]
   103bc:	4620      	mov	r0, r4
   103be:	f01a fd1e 	bl	2adfe <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   103c2:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   103c4:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   103c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   103c8:	f01a fc8d 	bl	2ace6 <nvs_al_size.isra.0>
   103cc:	68a2      	ldr	r2, [r4, #8]
   103ce:	4402      	add	r2, r0
   103d0:	60a2      	str	r2, [r4, #8]
	if (rc) {
   103d2:	f1ba 0f00 	cmp.w	sl, #0
   103d6:	d107      	bne.n	103e8 <nvs_write+0x138>
	rc = nvs_flash_ate_wrt(fs, &entry);
   103d8:	4620      	mov	r0, r4
   103da:	a90a      	add	r1, sp, #40	; 0x28
   103dc:	f01a fd49 	bl	2ae72 <nvs_flash_ate_wrt>
	rc = len;
   103e0:	2800      	cmp	r0, #0
   103e2:	bf14      	ite	ne
   103e4:	4682      	movne	sl, r0
   103e6:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   103e8:	9805      	ldr	r0, [sp, #20]
   103ea:	f015 fc01 	bl	25bf0 <z_impl_k_mutex_unlock>
	return rc;
   103ee:	4656      	mov	r6, sl
   103f0:	e772      	b.n	102d8 <nvs_write+0x28>
		required_space = data_size + ate_size;
   103f2:	4457      	add	r7, sl
   103f4:	b2bf      	uxth	r7, r7
   103f6:	e7bd      	b.n	10374 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   103f8:	2108      	movs	r1, #8
   103fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   103fc:	f01a fc73 	bl	2ace6 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   10400:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10404:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	close_ate.len = 0U;
   10408:	2300      	movs	r3, #0
   1040a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1040e:	1813      	adds	r3, r2, r0
   10410:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	fs->ate_wra += (fs->sector_size - ate_size);
   10414:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   10416:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   1041a:	441a      	add	r2, r3
   1041c:	1a10      	subs	r0, r2, r0
   1041e:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   10420:	a80a      	add	r0, sp, #40	; 0x28
   10422:	f01a fc22 	bl	2ac6a <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   10426:	a90a      	add	r1, sp, #40	; 0x28
   10428:	4620      	mov	r0, r4
   1042a:	f01a fd22 	bl	2ae72 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1042e:	4620      	mov	r0, r4
   10430:	1d21      	adds	r1, r4, #4
   10432:	f01a fbe3 	bl	2abfc <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   10436:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
   10438:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1043a:	ea03 030b 	and.w	r3, r3, fp
   1043e:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   10440:	f7ff fc7e 	bl	fd40 <nvs_gc>
		if (rc) {
   10444:	4682      	mov	sl, r0
   10446:	2800      	cmp	r0, #0
   10448:	d1ce      	bne.n	103e8 <nvs_write+0x138>
		gc_count++;
   1044a:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   1044c:	e79f      	b.n	1038e <nvs_write+0xde>
			rc = -ENOSPC;
   1044e:	f06f 0a1b 	mvn.w	sl, #27
   10452:	e7c9      	b.n	103e8 <nvs_write+0x138>
		return -EINVAL;
   10454:	f06f 0615 	mvn.w	r6, #21
   10458:	e73e      	b.n	102d8 <nvs_write+0x28>
   1045a:	bf00      	nop
   1045c:	0003565b 	.word	0x0003565b
   10460:	000332ac 	.word	0x000332ac
   10464:	ffff0000 	.word	0xffff0000

00010468 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   10468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1046c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1046e:	7c03      	ldrb	r3, [r0, #16]
{
   10470:	b088      	sub	sp, #32
   10472:	4604      	mov	r4, r0
   10474:	460f      	mov	r7, r1
   10476:	4690      	mov	r8, r2
   10478:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
   1047c:	b96b      	cbnz	r3, 1049a <nvs_read_hist+0x32>
		LOG_ERR("NVS not initialized");
   1047e:	4a2f      	ldr	r2, [pc, #188]	; (1053c <nvs_read_hist+0xd4>)
   10480:	4618      	mov	r0, r3
   10482:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10486:	492e      	ldr	r1, [pc, #184]	; (10540 <nvs_read_hist+0xd8>)
   10488:	2201      	movs	r2, #1
   1048a:	9300      	str	r3, [sp, #0]
   1048c:	f01a fc1b 	bl	2acc6 <z_log_msg_runtime_create.constprop.0>
		return -EACCES;
   10490:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   10494:	b008      	add	sp, #32
   10496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1049a:	2108      	movs	r1, #8
   1049c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1049e:	f01a fc22 	bl	2ace6 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   104a2:	89a3      	ldrh	r3, [r4, #12]
   104a4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   104a8:	42b3      	cmp	r3, r6
   104aa:	d343      	bcc.n	10534 <nvs_read_hist+0xcc>
	cnt_his = 0U;
   104ac:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
   104ae:	f8d4 a004 	ldr.w	sl, [r4, #4]
   104b2:	f8cd a014 	str.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   104b6:	454d      	cmp	r5, r9
   104b8:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   104ba:	f8dd a014 	ldr.w	sl, [sp, #20]
	while (cnt_his <= cnt) {
   104be:	d909      	bls.n	104d4 <nvs_read_hist+0x6c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   104c0:	6863      	ldr	r3, [r4, #4]
   104c2:	4553      	cmp	r3, sl
   104c4:	d11e      	bne.n	10504 <nvs_read_hist+0x9c>
   104c6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   104ca:	42bb      	cmp	r3, r7
   104cc:	d01a      	beq.n	10504 <nvs_read_hist+0x9c>
		return -ENOENT;
   104ce:	f06f 0001 	mvn.w	r0, #1
   104d2:	e7df      	b.n	10494 <nvs_read_hist+0x2c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   104d4:	4620      	mov	r0, r4
   104d6:	aa06      	add	r2, sp, #24
   104d8:	a905      	add	r1, sp, #20
   104da:	f01a fc46 	bl	2ad6a <nvs_prev_ate>
		if (rc) {
   104de:	2800      	cmp	r0, #0
   104e0:	d1d8      	bne.n	10494 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   104e2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   104e6:	42bb      	cmp	r3, r7
   104e8:	d106      	bne.n	104f8 <nvs_read_hist+0x90>
   104ea:	4620      	mov	r0, r4
   104ec:	a906      	add	r1, sp, #24
   104ee:	f01a fc04 	bl	2acfa <nvs_ate_valid>
   104f2:	b108      	cbz	r0, 104f8 <nvs_read_hist+0x90>
			cnt_his++;
   104f4:	3501      	adds	r5, #1
   104f6:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   104f8:	6862      	ldr	r2, [r4, #4]
   104fa:	9b05      	ldr	r3, [sp, #20]
   104fc:	429a      	cmp	r2, r3
   104fe:	d1da      	bne.n	104b6 <nvs_read_hist+0x4e>
		rd_addr = wlk_addr;
   10500:	4651      	mov	r1, sl
   10502:	e7e0      	b.n	104c6 <nvs_read_hist+0x5e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   10504:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   10508:	2b00      	cmp	r3, #0
   1050a:	d0e0      	beq.n	104ce <nvs_read_hist+0x66>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1050c:	45a9      	cmp	r9, r5
   1050e:	d8de      	bhi.n	104ce <nvs_read_hist+0x66>
	rd_addr += wlk_ate.offset;
   10510:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	rd_addr &= ADDR_SECT_MASK;
   10514:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   10516:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   10518:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1051c:	bf28      	it	cs
   1051e:	4633      	movcs	r3, r6
   10520:	4401      	add	r1, r0
   10522:	4642      	mov	r2, r8
   10524:	4620      	mov	r0, r4
   10526:	f01a fb5b 	bl	2abe0 <nvs_flash_rd>
	if (rc) {
   1052a:	2800      	cmp	r0, #0
   1052c:	d1b2      	bne.n	10494 <nvs_read_hist+0x2c>
	return wlk_ate.len;
   1052e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   10532:	e7af      	b.n	10494 <nvs_read_hist+0x2c>
		return -EINVAL;
   10534:	f06f 0015 	mvn.w	r0, #21
   10538:	e7ac      	b.n	10494 <nvs_read_hist+0x2c>
   1053a:	bf00      	nop
   1053c:	0003565b 	.word	0x0003565b
   10540:	000332ac 	.word	0x000332ac

00010544 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   10544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10546:	4603      	mov	r3, r0
	const struct ipc_service_backend *backend;

	if (!instance) {
   10548:	b960      	cbnz	r0, 10564 <ipc_service_open_instance+0x20>
		LOG_ERR("Invalid instance");
   1054a:	4a11      	ldr	r2, [pc, #68]	; (10590 <ipc_service_open_instance+0x4c>)
   1054c:	9000      	str	r0, [sp, #0]
   1054e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10552:	4910      	ldr	r1, [pc, #64]	; (10594 <ipc_service_open_instance+0x50>)
   10554:	2201      	movs	r2, #1
   10556:	f01a fca4 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1055a:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
   1055e:	b005      	add	sp, #20
   10560:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
   10564:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
   10566:	b95b      	cbnz	r3, 10580 <ipc_service_open_instance+0x3c>
		LOG_ERR("Invalid backend configuration");
   10568:	4a0b      	ldr	r2, [pc, #44]	; (10598 <ipc_service_open_instance+0x54>)
   1056a:	4618      	mov	r0, r3
   1056c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   10570:	4908      	ldr	r1, [pc, #32]	; (10594 <ipc_service_open_instance+0x50>)
   10572:	2201      	movs	r2, #1
   10574:	9300      	str	r3, [sp, #0]
   10576:	f01a fc94 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1057a:	f06f 0004 	mvn.w	r0, #4
   1057e:	e7ee      	b.n	1055e <ipc_service_open_instance+0x1a>
	if (!backend->open_instance) {
   10580:	681b      	ldr	r3, [r3, #0]
   10582:	b11b      	cbz	r3, 1058c <ipc_service_open_instance+0x48>
}
   10584:	b005      	add	sp, #20
   10586:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
   1058a:	4718      	bx	r3
		return 0;
   1058c:	4618      	mov	r0, r3
   1058e:	e7e6      	b.n	1055e <ipc_service_open_instance+0x1a>
   10590:	000357c1 	.word	0x000357c1
   10594:	000332b4 	.word	0x000332b4
   10598:	000357d2 	.word	0x000357d2

0001059c <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   1059c:	b530      	push	{r4, r5, lr}
   1059e:	b085      	sub	sp, #20
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   105a0:	b108      	cbz	r0, 105a6 <ipc_service_register_endpoint+0xa>
   105a2:	b101      	cbz	r1, 105a6 <ipc_service_register_endpoint+0xa>
   105a4:	b96a      	cbnz	r2, 105c2 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
   105a6:	4b13      	ldr	r3, [pc, #76]	; (105f4 <ipc_service_register_endpoint+0x58>)
   105a8:	2201      	movs	r2, #1
   105aa:	9302      	str	r3, [sp, #8]
   105ac:	2300      	movs	r3, #0
   105ae:	4912      	ldr	r1, [pc, #72]	; (105f8 <ipc_service_register_endpoint+0x5c>)
   105b0:	4618      	mov	r0, r3
   105b2:	e9cd 3300 	strd	r3, r3, [sp]
   105b6:	f01a fc74 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   105ba:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
   105be:	b005      	add	sp, #20
   105c0:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
   105c2:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
   105c4:	b10c      	cbz	r4, 105ca <ipc_service_register_endpoint+0x2e>
   105c6:	68e5      	ldr	r5, [r4, #12]
   105c8:	b965      	cbnz	r5, 105e4 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
   105ca:	4b0c      	ldr	r3, [pc, #48]	; (105fc <ipc_service_register_endpoint+0x60>)
   105cc:	2201      	movs	r2, #1
   105ce:	9302      	str	r3, [sp, #8]
   105d0:	2300      	movs	r3, #0
   105d2:	4909      	ldr	r1, [pc, #36]	; (105f8 <ipc_service_register_endpoint+0x5c>)
   105d4:	4618      	mov	r0, r3
   105d6:	e9cd 3300 	strd	r3, r3, [sp]
   105da:	f01a fc62 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   105de:	f06f 0004 	mvn.w	r0, #4
   105e2:	e7ec      	b.n	105be <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
   105e4:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
   105e8:	68e3      	ldr	r3, [r4, #12]
}
   105ea:	b005      	add	sp, #20
   105ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
   105f0:	4718      	bx	r3
   105f2:	bf00      	nop
   105f4:	000357f0 	.word	0x000357f0
   105f8:	000332b4 	.word	0x000332b4
   105fc:	000357d2 	.word	0x000357d2

00010600 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   10600:	b530      	push	{r4, r5, lr}
   10602:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
   10604:	4604      	mov	r4, r0
{
   10606:	b085      	sub	sp, #20
	if (!ept) {
   10608:	b960      	cbnz	r0, 10624 <ipc_service_send+0x24>
		LOG_ERR("Invalid endpoint");
   1060a:	4b19      	ldr	r3, [pc, #100]	; (10670 <ipc_service_send+0x70>)
   1060c:	9000      	str	r0, [sp, #0]
   1060e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10612:	2201      	movs	r2, #1
   10614:	4603      	mov	r3, r0
   10616:	4917      	ldr	r1, [pc, #92]	; (10674 <ipc_service_send+0x74>)
   10618:	f01a fc43 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1061c:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
   10620:	b005      	add	sp, #20
   10622:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
   10624:	6800      	ldr	r0, [r0, #0]
   10626:	b958      	cbnz	r0, 10640 <ipc_service_send+0x40>
		LOG_ERR("Endpoint not registered\n");
   10628:	4b13      	ldr	r3, [pc, #76]	; (10678 <ipc_service_send+0x78>)
   1062a:	9000      	str	r0, [sp, #0]
   1062c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10630:	2201      	movs	r2, #1
   10632:	4603      	mov	r3, r0
   10634:	490f      	ldr	r1, [pc, #60]	; (10674 <ipc_service_send+0x74>)
   10636:	f01a fc34 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -ENOENT;
   1063a:	f06f 0001 	mvn.w	r0, #1
   1063e:	e7ef      	b.n	10620 <ipc_service_send+0x20>
	backend = ept->instance->api;
   10640:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
   10642:	b10a      	cbz	r2, 10648 <ipc_service_send+0x48>
   10644:	6895      	ldr	r5, [r2, #8]
   10646:	b965      	cbnz	r5, 10662 <ipc_service_send+0x62>
		LOG_ERR("Invalid backend configuration");
   10648:	4b0c      	ldr	r3, [pc, #48]	; (1067c <ipc_service_send+0x7c>)
   1064a:	2201      	movs	r2, #1
   1064c:	9302      	str	r3, [sp, #8]
   1064e:	2300      	movs	r3, #0
   10650:	4908      	ldr	r1, [pc, #32]	; (10674 <ipc_service_send+0x74>)
   10652:	4618      	mov	r0, r3
   10654:	e9cd 3300 	strd	r3, r3, [sp]
   10658:	f01a fc23 	bl	2aea2 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1065c:	f06f 0004 	mvn.w	r0, #4
   10660:	e7de      	b.n	10620 <ipc_service_send+0x20>
	return backend->send(ept->instance, ept->token, data, len);
   10662:	460a      	mov	r2, r1
   10664:	46ac      	mov	ip, r5
   10666:	6861      	ldr	r1, [r4, #4]
}
   10668:	b005      	add	sp, #20
   1066a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
   1066e:	4760      	bx	ip
   10670:	0003581c 	.word	0x0003581c
   10674:	000332b4 	.word	0x000332b4
   10678:	0003582d 	.word	0x0003582d
   1067c:	000357d2 	.word	0x000357d2

00010680 <shared_memory_prepare>:
__ssp_bos_icheck3(memset, void *, int)
   10680:	2000      	movs	r0, #0
   10682:	4b01      	ldr	r3, [pc, #4]	; (10688 <shared_memory_prepare+0x8>)
   10684:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   10686:	4770      	bx	lr
   10688:	20070000 	.word	0x20070000

0001068c <advertise_ept>:
{
   1068c:	b530      	push	{r4, r5, lr}
   1068e:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10690:	490e      	ldr	r1, [pc, #56]	; (106cc <advertise_ept+0x40>)
{
   10692:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10694:	9102      	str	r1, [sp, #8]
   10696:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
   1069a:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   1069c:	e9cd 3100 	strd	r3, r1, [sp]
   106a0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   106a4:	f04f 33ff 	mov.w	r3, #4294967295
   106a8:	4620      	mov	r0, r4
   106aa:	f014 fcf1 	bl	25090 <rpmsg_create_ept>
	if (err != 0) {
   106ae:	b950      	cbnz	r0, 106c6 <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
   106b0:	2301      	movs	r3, #1
   106b2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   106b6:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
   106ba:	b123      	cbz	r3, 106c6 <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
   106bc:	4620      	mov	r0, r4
}
   106be:	b005      	add	sp, #20
   106c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
   106c4:	4718      	bx	r3
}
   106c6:	b005      	add	sp, #20
   106c8:	bd30      	pop	{r4, r5, pc}
   106ca:	bf00      	nop
   106cc:	0002afb3 	.word	0x0002afb3

000106d0 <get_ept>:
{
   106d0:	b538      	push	{r3, r4, r5, lr}
   106d2:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   106d4:	4611      	mov	r1, r2
{
   106d6:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   106d8:	f01a fc6d 	bl	2afb6 <get_ept_slot_with_name>
	if (ept != NULL) {
   106dc:	4603      	mov	r3, r0
   106de:	b938      	cbnz	r0, 106f0 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
   106e0:	4628      	mov	r0, r5
   106e2:	4904      	ldr	r1, [pc, #16]	; (106f4 <get_ept+0x24>)
   106e4:	f01a fc67 	bl	2afb6 <get_ept_slot_with_name>
   106e8:	4603      	mov	r3, r0
	if (ept != NULL) {
   106ea:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
   106ec:	6023      	str	r3, [r4, #0]
}
   106ee:	bd38      	pop	{r3, r4, r5, pc}
		return true;
   106f0:	2001      	movs	r0, #1
   106f2:	e7fb      	b.n	106ec <get_ept+0x1c>
   106f4:	000368f4 	.word	0x000368f4

000106f8 <open>:
{
   106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   106fc:	2301      	movs	r3, #1
   106fe:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
   10700:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   10702:	6846      	ldr	r6, [r0, #4]
{
   10704:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   10706:	f505 7763 	add.w	r7, r5, #908	; 0x38c
   1070a:	e8d7 2fef 	ldaex	r2, [r7]
   1070e:	2a00      	cmp	r2, #0
   10710:	d103      	bne.n	1071a <open+0x22>
   10712:	e8c7 3fe1 	stlex	r1, r3, [r7]
   10716:	2900      	cmp	r1, #0
   10718:	d1f7      	bne.n	1070a <open+0x12>
   1071a:	f040 80b8 	bne.w	1088e <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   1071e:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10720:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
   10722:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   10724:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   10726:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   1072a:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
   1072e:	bf26      	itte	cs
   10730:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
   10734:	fab3 f383 	clzcs	r3, r3
		return 0;
   10738:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
   1073a:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
   1073e:	bf28      	it	cs
   10740:	f1c3 0320 	rsbcs	r3, r3, #32
   10744:	3b01      	subs	r3, #1
	if (num_desc == 0) {
   10746:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
   10748:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
   1074c:	f000 8099 	beq.w	10882 <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
   10750:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   10752:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   10754:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
   10756:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   10758:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   1075c:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   1075e:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
   10760:	3209      	adds	r2, #9
   10762:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
   10766:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
   10768:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
   1076c:	440a      	add	r2, r1
	return (buf_size * num);
   1076e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10770:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   10774:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   10776:	eb01 014c 	add.w	r1, r1, ip, lsl #1
   1077a:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
   1077e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10780:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   10782:	eb00 0341 	add.w	r3, r0, r1, lsl #1
   10786:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   1078a:	3303      	adds	r3, #3
   1078c:	4413      	add	r3, r2
   1078e:	f023 0303 	bic.w	r3, r3, #3
   10792:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
   10796:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
   10798:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
   1079c:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
   107a0:	4b3c      	ldr	r3, [pc, #240]	; (10894 <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
   107a2:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
   107a4:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
   107a8:	6831      	ldr	r1, [r6, #0]
   107aa:	f000 fa1d 	bl	10be8 <ipc_static_vrings_init>
	if (err != 0) {
   107ae:	4604      	mov	r4, r0
   107b0:	bb30      	cbnz	r0, 10800 <open+0x108>
	const struct backend_config_t *conf = instance->config;
   107b2:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
   107b6:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   107ba:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
   107be:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   107c2:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
   107c4:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   107c6:	bf08      	it	eq
   107c8:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
   107ca:	f020 fd9b 	bl	31304 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   107ce:	2300      	movs	r3, #0
   107d0:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
   107d4:	4930      	ldr	r1, [pc, #192]	; (10898 <open+0x1a0>)
   107d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   107da:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   107de:	9300      	str	r3, [sp, #0]
   107e0:	4658      	mov	r0, fp
   107e2:	4623      	mov	r3, r4
   107e4:	f015 fbf8 	bl	25fd8 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   107e8:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
   107ec:	492b      	ldr	r1, [pc, #172]	; (1089c <open+0x1a4>)
   107ee:	f020 fd4b 	bl	31288 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
   107f2:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
   107f6:	6883      	ldr	r3, [r0, #8]
   107f8:	685c      	ldr	r4, [r3, #4]
   107fa:	b91c      	cbnz	r4, 10804 <open+0x10c>
		return -ENOSYS;
   107fc:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
   10800:	2100      	movs	r1, #0
   10802:	e037      	b.n	10874 <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   10804:	464b      	mov	r3, r9
   10806:	4a26      	ldr	r2, [pc, #152]	; (108a0 <open+0x1a8>)
   10808:	f8da 1018 	ldr.w	r1, [sl, #24]
   1080c:	47a0      	blx	r4
	if (err != 0) {
   1080e:	4604      	mov	r4, r0
   10810:	2800      	cmp	r0, #0
   10812:	d1f5      	bne.n	10800 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
   10814:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
   10818:	6883      	ldr	r3, [r0, #8]
   1081a:	691b      	ldr	r3, [r3, #16]
   1081c:	2b00      	cmp	r3, #0
   1081e:	d0ed      	beq.n	107fc <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
   10820:	2201      	movs	r2, #1
   10822:	f8da 1018 	ldr.w	r1, [sl, #24]
   10826:	4798      	blx	r3
	if (err != 0) {
   10828:	4604      	mov	r4, r0
   1082a:	2800      	cmp	r0, #0
   1082c:	d1e8      	bne.n	10800 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
   1082e:	4b1d      	ldr	r3, [pc, #116]	; (108a4 <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   10830:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
   10832:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
   10836:	4b1c      	ldr	r3, [pc, #112]	; (108a8 <open+0x1b0>)
   10838:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   1083c:	4b1b      	ldr	r3, [pc, #108]	; (108ac <open+0x1b4>)
   1083e:	9303      	str	r3, [sp, #12]
   10840:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
   10844:	9302      	str	r3, [sp, #8]
   10846:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   1084a:	e9cd 8300 	strd	r8, r3, [sp]
   1084e:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
   10852:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   10854:	f8d5 1388 	ldr.w	r1, [r5, #904]	; 0x388
   10858:	f000 f98e 	bl	10b78 <ipc_rpmsg_init>
	if (err != 0) {
   1085c:	4604      	mov	r4, r0
   1085e:	2800      	cmp	r0, #0
   10860:	d1ce      	bne.n	10800 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   10862:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   10866:	f014 fcc1 	bl	251ec <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
   1086a:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   1086c:	f8c5 0390 	str.w	r0, [r5, #912]	; 0x390
	if (data->tx_buffer_size < 0) {
   10870:	db0a      	blt.n	10888 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
   10872:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
   10874:	4638      	mov	r0, r7
   10876:	f01a fbd3 	bl	2b020 <atomic_set.isra.0>
}
   1087a:	4620      	mov	r0, r4
   1087c:	b005      	add	sp, #20
   1087e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   10882:	f06f 040b 	mvn.w	r4, #11
   10886:	e7bb      	b.n	10800 <open+0x108>
		err = -EINVAL;
   10888:	f06f 0415 	mvn.w	r4, #21
   1088c:	e7b8      	b.n	10800 <open+0x108>
		return -EALREADY;
   1088e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   10892:	e7f2      	b.n	1087a <open+0x182>
   10894:	0002b009 	.word	0x0002b009
   10898:	20052c68 	.word	0x20052c68
   1089c:	0002afef 	.word	0x0002afef
   108a0:	0002afe3 	.word	0x0002afe3
   108a4:	00010975 	.word	0x00010975
   108a8:	0002b0c1 	.word	0x0002b0c1
   108ac:	0002b051 	.word	0x0002b051

000108b0 <close>:
{
   108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   108b4:	4606      	mov	r6, r0
   108b6:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
   108ba:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
   108bc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   108c0:	f505 7763 	add.w	r7, r5, #908	; 0x38c
   108c4:	e8d7 3fef 	ldaex	r3, [r7]
   108c8:	2b02      	cmp	r3, #2
   108ca:	d103      	bne.n	108d4 <close+0x24>
   108cc:	e8c7 9fe2 	stlex	r2, r9, [r7]
   108d0:	2a00      	cmp	r2, #0
   108d2:	d1f7      	bne.n	108c4 <close+0x14>
   108d4:	d149      	bne.n	1096a <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
   108d6:	4826      	ldr	r0, [pc, #152]	; (10970 <close+0xc0>)
   108d8:	f105 0140 	add.w	r1, r5, #64	; 0x40
   108dc:	f7f8 fd8b 	bl	93f6 <strcmp>
   108e0:	b120      	cbz	r0, 108ec <close+0x3c>
		return -EBUSY;
   108e2:	f06f 040f 	mvn.w	r4, #15
}
   108e6:	4620      	mov	r0, r4
   108e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
   108ec:	4820      	ldr	r0, [pc, #128]	; (10970 <close+0xc0>)
   108ee:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
   108f2:	f7f8 fd80 	bl	93f6 <strcmp>
   108f6:	2800      	cmp	r0, #0
   108f8:	d1f3      	bne.n	108e2 <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   108fa:	4628      	mov	r0, r5
   108fc:	f8d5 1388 	ldr.w	r1, [r5, #904]	; 0x388
   10900:	f01a fc11 	bl	2b126 <ipc_rpmsg_deinit>
	if (err != 0) {
   10904:	4604      	mov	r4, r0
   10906:	bb70      	cbnz	r0, 10966 <close+0xb6>
	const struct backend_config_t *conf = instance->config;
   10908:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
   1090a:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
   1090c:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
   1090e:	6883      	ldr	r3, [r0, #8]
   10910:	691b      	ldr	r3, [r3, #16]
   10912:	b333      	cbz	r3, 10962 <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
   10914:	4622      	mov	r2, r4
   10916:	6989      	ldr	r1, [r1, #24]
   10918:	4798      	blx	r3
	if (err != 0) {
   1091a:	4604      	mov	r4, r0
   1091c:	bb18      	cbnz	r0, 10966 <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
   1091e:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
   10922:	4649      	mov	r1, r9
   10924:	4630      	mov	r0, r6
   10926:	f015 fb8f 	bl	26048 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   1092a:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   1092c:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
   10930:	f001 f9ba 	bl	11ca8 <z_impl_k_thread_abort>
   10934:	4630      	mov	r0, r6
   10936:	f8d8 1000 	ldr.w	r1, [r8]
   1093a:	f01a fc31 	bl	2b1a0 <ipc_static_vrings_deinit>
	if (err != 0) {
   1093e:	4604      	mov	r4, r0
   10940:	b988      	cbnz	r0, 10966 <close+0xb6>
   10942:	4601      	mov	r1, r0
   10944:	22e8      	movs	r2, #232	; 0xe8
   10946:	4630      	mov	r0, r6
   10948:	f021 f8a5 	bl	31a96 <memset>
   1094c:	4621      	mov	r1, r4
   1094e:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   10952:	4628      	mov	r0, r5
   10954:	f021 f89f 	bl	31a96 <memset>
	atomic_set(&data->state, STATE_READY);
   10958:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
   1095a:	4638      	mov	r0, r7
   1095c:	f01a fb60 	bl	2b020 <atomic_set.isra.0>
	return err;
   10960:	e7c1      	b.n	108e6 <close+0x36>
		return -ENOSYS;
   10962:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
   10966:	2102      	movs	r1, #2
   10968:	e7f7      	b.n	1095a <close+0xaa>
		return -EALREADY;
   1096a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1096e:	e7ba      	b.n	108e6 <close+0x36>
   10970:	000368f4 	.word	0x000368f4

00010974 <bound_cb>:
{
   10974:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
   10976:	4604      	mov	r4, r0
   10978:	b140      	cbz	r0, 1098c <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   1097a:	2300      	movs	r3, #0
   1097c:	2201      	movs	r2, #1
   1097e:	e9cd 3200 	strd	r3, r2, [sp]
   10982:	4b07      	ldr	r3, [pc, #28]	; (109a0 <bound_cb+0x2c>)
   10984:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   10988:	f014 fb36 	bl	24ff8 <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
   1098c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1098e:	681b      	ldr	r3, [r3, #0]
   10990:	b123      	cbz	r3, 1099c <bound_cb+0x28>
		ept->cb->bound(ept->priv);
   10992:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
   10994:	b002      	add	sp, #8
   10996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
   1099a:	4718      	bx	r3
}
   1099c:	b002      	add	sp, #8
   1099e:	bd10      	pop	{r4, pc}
   109a0:	000368f4 	.word	0x000368f4

000109a4 <send>:
{
   109a4:	b513      	push	{r0, r1, r4, lr}
   109a6:	4604      	mov	r4, r0
   109a8:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   109aa:	6921      	ldr	r1, [r4, #16]
   109ac:	f501 7163 	add.w	r1, r1, #908	; 0x38c
   109b0:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   109b4:	2902      	cmp	r1, #2
   109b6:	d110      	bne.n	109da <send+0x36>
	if (len == 0) {
   109b8:	b193      	cbz	r3, 109e0 <send+0x3c>
	if (!rpmsg_ept) {
   109ba:	b1a0      	cbz	r0, 109e6 <send+0x42>
   109bc:	2101      	movs	r1, #1
   109be:	e9cd 3100 	strd	r3, r1, [sp]
   109c2:	4613      	mov	r3, r2
   109c4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   109c8:	f014 fb16 	bl	24ff8 <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
   109cc:	4b07      	ldr	r3, [pc, #28]	; (109ec <send+0x48>)
		return -ENOMEM;
   109ce:	4298      	cmp	r0, r3
   109d0:	bf08      	it	eq
   109d2:	f06f 000b 	mvneq.w	r0, #11
}
   109d6:	b002      	add	sp, #8
   109d8:	bd10      	pop	{r4, pc}
		return -EBUSY;
   109da:	f06f 000f 	mvn.w	r0, #15
   109de:	e7fa      	b.n	109d6 <send+0x32>
		return -EBADMSG;
   109e0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   109e4:	e7f7      	b.n	109d6 <send+0x32>
		return -ENOENT;
   109e6:	f06f 0001 	mvn.w	r0, #1
   109ea:	e7f4      	b.n	109d6 <send+0x32>
   109ec:	fffff82e 	.word	0xfffff82e

000109f0 <register_ept>:
{
   109f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   109f4:	4688      	mov	r8, r1
   109f6:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
   109f8:	6906      	ldr	r6, [r0, #16]
   109fa:	f506 7363 	add.w	r3, r6, #908	; 0x38c
   109fe:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   10a02:	2b02      	cmp	r3, #2
   10a04:	d15f      	bne.n	10ac6 <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10a06:	6813      	ldr	r3, [r2, #0]
   10a08:	b923      	cbnz	r3, 10a14 <register_ept+0x24>
		return -EINVAL;
   10a0a:	f06f 0015 	mvn.w	r0, #21
}
   10a0e:	b003      	add	sp, #12
   10a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   10a14:	781b      	ldrb	r3, [r3, #0]
   10a16:	2b00      	cmp	r3, #0
   10a18:	d0f7      	beq.n	10a0a <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
   10a1a:	f8d6 9388 	ldr.w	r9, [r6, #904]	; 0x388
   10a1e:	f1b9 0f00 	cmp.w	r9, #0
   10a22:	d133      	bne.n	10a8c <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   10a24:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
   10a28:	f04f 32ff 	mov.w	r2, #4294967295
   10a2c:	f04f 33ff 	mov.w	r3, #4294967295
   10a30:	4638      	mov	r0, r7
   10a32:	f015 f863 	bl	25afc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   10a36:	4630      	mov	r0, r6
   10a38:	682a      	ldr	r2, [r5, #0]
   10a3a:	a901      	add	r1, sp, #4
   10a3c:	f7ff fe48 	bl	106d0 <get_ept>
	if (rpmsg_ept == NULL) {
   10a40:	9c01      	ldr	r4, [sp, #4]
   10a42:	b91c      	cbnz	r4, 10a4c <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10a44:	4638      	mov	r0, r7
   10a46:	f01a fae9 	bl	2b01c <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   10a4a:	e7de      	b.n	10a0a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   10a4c:	f105 0308 	add.w	r3, r5, #8
   10a50:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   10a52:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
   10a54:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
   10a58:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
   10a5a:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   10a5c:	b160      	cbz	r0, 10a78 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10a5e:	4638      	mov	r0, r7
   10a60:	f01a fadc 	bl	2b01c <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   10a64:	4621      	mov	r1, r4
   10a66:	4630      	mov	r0, r6
   10a68:	6e23      	ldr	r3, [r4, #96]	; 0x60
   10a6a:	682a      	ldr	r2, [r5, #0]
   10a6c:	f7ff fe0e 	bl	1068c <advertise_ept>
	return 0;
   10a70:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
   10a72:	f8c8 4000 	str.w	r4, [r8]
	return 0;
   10a76:	e7ca      	b.n	10a0e <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   10a78:	2220      	movs	r2, #32
   10a7a:	6829      	ldr	r1, [r5, #0]
   10a7c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   10a80:	f021 f972 	bl	31d68 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
   10a84:	4638      	mov	r0, r7
   10a86:	f01a fac9 	bl	2b01c <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
   10a8a:	e7f1      	b.n	10a70 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
   10a8c:	4630      	mov	r0, r6
   10a8e:	490f      	ldr	r1, [pc, #60]	; (10acc <register_ept+0xdc>)
   10a90:	f01a fa91 	bl	2afb6 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
   10a94:	4604      	mov	r4, r0
   10a96:	2800      	cmp	r0, #0
   10a98:	d0b7      	beq.n	10a0a <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
   10a9a:	f105 0308 	add.w	r3, r5, #8
   10a9e:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   10aa0:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
   10aa2:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
   10aa4:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   10aa6:	2300      	movs	r3, #0
   10aa8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
   10aac:	2220      	movs	r2, #32
   10aae:	6829      	ldr	r1, [r5, #0]
   10ab0:	3040      	adds	r0, #64	; 0x40
   10ab2:	f021 f959 	bl	31d68 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   10ab6:	4622      	mov	r2, r4
   10ab8:	2101      	movs	r1, #1
   10aba:	4630      	mov	r0, r6
   10abc:	f000 f83e 	bl	10b3c <ipc_rpmsg_register_ept>
	if (err != 0) {
   10ac0:	2800      	cmp	r0, #0
   10ac2:	d0d5      	beq.n	10a70 <register_ept+0x80>
   10ac4:	e7a1      	b.n	10a0a <register_ept+0x1a>
		return -EBUSY;
   10ac6:	f06f 000f 	mvn.w	r0, #15
   10aca:	e7a0      	b.n	10a0e <register_ept+0x1e>
   10acc:	000368f4 	.word	0x000368f4

00010ad0 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   10ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ad4:	4605      	mov	r5, r0
   10ad6:	460e      	mov	r6, r1
   10ad8:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10ada:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   10adc:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
   10ae0:	b085      	sub	sp, #20
   10ae2:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
   10ae6:	4621      	mov	r1, r4
   10ae8:	4630      	mov	r0, r6
   10aea:	f7f8 fc84 	bl	93f6 <strcmp>
   10aee:	b9e0      	cbnz	r0, 10b2a <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10af0:	4b11      	ldr	r3, [pc, #68]	; (10b38 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
   10af2:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   10af6:	9302      	str	r3, [sp, #8]
   10af8:	f8da 3010 	ldr.w	r3, [sl, #16]
   10afc:	4632      	mov	r2, r6
   10afe:	e9cd 8300 	strd	r8, r3, [sp]
   10b02:	4629      	mov	r1, r5
   10b04:	f04f 33ff 	mov.w	r3, #4294967295
   10b08:	4658      	mov	r0, fp
   10b0a:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
   10b0e:	f014 fabf 	bl	25090 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   10b12:	b960      	cbnz	r0, 10b2e <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
   10b14:	2370      	movs	r3, #112	; 0x70
   10b16:	2201      	movs	r2, #1
   10b18:	fb03 9307 	mla	r3, r3, r7, r9
   10b1c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
   10b20:	f8da 300c 	ldr.w	r3, [sl, #12]
   10b24:	b10b      	cbz	r3, 10b2a <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
   10b26:	4658      	mov	r0, fp
   10b28:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10b2a:	3470      	adds	r4, #112	; 0x70
   10b2c:	b117      	cbz	r7, 10b34 <ns_bind_cb+0x64>
			}
		}
	}
}
   10b2e:	b005      	add	sp, #20
   10b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   10b34:	2701      	movs	r7, #1
   10b36:	e7d6      	b.n	10ae6 <ns_bind_cb+0x16>
   10b38:	0002b123 	.word	0x0002b123

00010b3c <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
   10b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10b3e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   10b40:	b190      	cbz	r0, 10b68 <ipc_rpmsg_register_ept+0x2c>
   10b42:	b18a      	cbz	r2, 10b68 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   10b44:	2901      	cmp	r1, #1
   10b46:	d112      	bne.n	10b6e <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   10b48:	4b0a      	ldr	r3, [pc, #40]	; (10b74 <ipc_rpmsg_register_ept+0x38>)
   10b4a:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   10b4e:	9302      	str	r3, [sp, #8]
   10b50:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
   10b54:	3240      	adds	r2, #64	; 0x40
   10b56:	9301      	str	r3, [sp, #4]
   10b58:	f04f 33ff 	mov.w	r3, #4294967295
   10b5c:	4620      	mov	r0, r4
   10b5e:	9300      	str	r3, [sp, #0]
   10b60:	f014 fa96 	bl	25090 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
   10b64:	b004      	add	sp, #16
   10b66:	bd10      	pop	{r4, pc}
		return -EINVAL;
   10b68:	f06f 0015 	mvn.w	r0, #21
   10b6c:	e7fa      	b.n	10b64 <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
   10b6e:	2000      	movs	r0, #0
   10b70:	e7f8      	b.n	10b64 <ipc_rpmsg_register_ept+0x28>
   10b72:	bf00      	nop
   10b74:	0002b123 	.word	0x0002b123

00010b78 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   10b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b7c:	b087      	sub	sp, #28
   10b7e:	460e      	mov	r6, r1
   10b80:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
   10b84:	4614      	mov	r4, r2
   10b86:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
   10b8a:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   10b8c:	b330      	cbz	r0, 10bdc <ipc_rpmsg_init+0x64>
   10b8e:	b329      	cbz	r1, 10bdc <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
   10b90:	f8df c050 	ldr.w	ip, [pc, #80]	; 10be4 <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   10b94:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
   10b98:	2d00      	cmp	r5, #0
   10b9a:	bf08      	it	eq
   10b9c:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
   10b9e:	b99e      	cbnz	r6, 10bc8 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
   10ba0:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   10ba4:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
   10ba8:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
   10baa:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   10bac:	f020 f948 	bl	30e40 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   10bb0:	ab03      	add	r3, sp, #12
   10bb2:	e9cd 4300 	strd	r4, r3, [sp]
   10bb6:	462a      	mov	r2, r5
   10bb8:	463b      	mov	r3, r7
   10bba:	4641      	mov	r1, r8
   10bbc:	4648      	mov	r0, r9
   10bbe:	f014 fb3b 	bl	25238 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   10bc2:	b007      	add	sp, #28
   10bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   10bc8:	2200      	movs	r2, #0
   10bca:	4641      	mov	r1, r8
   10bcc:	920e      	str	r2, [sp, #56]	; 0x38
   10bce:	4648      	mov	r0, r9
   10bd0:	462a      	mov	r2, r5
}
   10bd2:	b007      	add	sp, #28
   10bd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   10bd8:	f014 bc58 	b.w	2548c <rpmsg_init_vdev>
		return -EINVAL;
   10bdc:	f06f 0015 	mvn.w	r0, #21
   10be0:	e7ef      	b.n	10bc2 <ipc_rpmsg_init+0x4a>
   10be2:	bf00      	nop
   10be4:	00010ad1 	.word	0x00010ad1

00010be8 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
   10be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bea:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
   10bec:	4604      	mov	r4, r0
{
   10bee:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
   10bf0:	2800      	cmp	r0, #0
   10bf2:	d06f      	beq.n	10cd4 <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
   10bf4:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
   10bf6:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
   10bf8:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10bfa:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
   10bfc:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
   10c00:	4f36      	ldr	r7, [pc, #216]	; (10cdc <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10c02:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
   10c04:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
   10c08:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   10c0c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10c10:	f04f 33ff 	mov.w	r3, #4294967295
   10c14:	9300      	str	r3, [sp, #0]
   10c16:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   10c18:	f01f fbd0 	bl	303bc <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   10c1c:	4a30      	ldr	r2, [pc, #192]	; (10ce0 <ipc_static_vrings_init+0xf8>)
   10c1e:	ab06      	add	r3, sp, #24
   10c20:	e892 0003 	ldmia.w	r2, {r0, r1}
   10c24:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
   10c28:	4618      	mov	r0, r3
   10c2a:	f014 f905 	bl	24e38 <metal_init>
	if (err != 0) {
   10c2e:	4605      	mov	r5, r0
   10c30:	b9d8      	cbnz	r0, 10c6a <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
   10c32:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10c36:	f014 f8df 	bl	24df8 <metal_register_generic_device>
	if (err != 0) {
   10c3a:	4605      	mov	r5, r0
   10c3c:	b9a8      	cbnz	r0, 10c6a <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   10c3e:	4639      	mov	r1, r7
   10c40:	4828      	ldr	r0, [pc, #160]	; (10ce4 <ipc_static_vrings_init+0xfc>)
   10c42:	aa05      	add	r2, sp, #20
   10c44:	f01f fb8c 	bl	30360 <metal_device_open>
	if (err != 0) {
   10c48:	4605      	mov	r5, r0
   10c4a:	b970      	cbnz	r0, 10c6a <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
   10c4c:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
   10c4e:	689a      	ldr	r2, [r3, #8]
   10c50:	b172      	cbz	r2, 10c70 <ipc_static_vrings_init+0x88>
   10c52:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   10c54:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
   10c58:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   10c5c:	f01a fa92 	bl	2b184 <virtqueue_allocate>
   10c60:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   10c64:	b930      	cbnz	r0, 10c74 <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
   10c66:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
   10c6a:	4628      	mov	r0, r5
   10c6c:	b009      	add	sp, #36	; 0x24
   10c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c70:	4603      	mov	r3, r0
   10c72:	e7ef      	b.n	10c54 <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   10c74:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   10c78:	f01a fa84 	bl	2b184 <virtqueue_allocate>
   10c7c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   10c80:	2800      	cmp	r0, #0
   10c82:	d0f0      	beq.n	10c66 <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   10c84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   10c88:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   10c8c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   10c90:	2304      	movs	r3, #4
   10c92:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   10c96:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
   10c9a:	2302      	movs	r3, #2
   10c9c:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   10c9e:	4b12      	ldr	r3, [pc, #72]	; (10ce8 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   10ca0:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10ca4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   10ca8:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   10cac:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   10cb0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
   10cb4:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   10cb6:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   10cba:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   10cbe:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   10cc2:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   10cc6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   10cca:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
   10cce:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
   10cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
   10cd2:	e7ca      	b.n	10c6a <ipc_static_vrings_init+0x82>
		return -EINVAL;
   10cd4:	f06f 0515 	mvn.w	r5, #21
   10cd8:	e7c7      	b.n	10c6a <ipc_static_vrings_init+0x82>
   10cda:	bf00      	nop
   10cdc:	00035857 	.word	0x00035857
   10ce0:	00033380 	.word	0x00033380
   10ce4:	00035861 	.word	0x00035861
   10ce8:	00033908 	.word	0x00033908

00010cec <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cf0:	4605      	mov	r5, r0
	__asm__ volatile(
   10cf2:	f04f 0320 	mov.w	r3, #32
   10cf6:	f3ef 8611 	mrs	r6, BASEPRI
   10cfa:	f383 8812 	msr	BASEPRI_MAX, r3
   10cfe:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10d02:	f04f 090c 	mov.w	r9, #12
	return list->head;
   10d06:	4b0d      	ldr	r3, [pc, #52]	; (10d3c <pm_state_notify+0x50>)
   10d08:	4f0d      	ldr	r7, [pc, #52]	; (10d40 <pm_state_notify+0x54>)
   10d0a:	681c      	ldr	r4, [r3, #0]
   10d0c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 10d44 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   10d10:	b92c      	cbnz	r4, 10d1e <pm_state_notify+0x32>
	__asm__ volatile(
   10d12:	f386 8811 	msr	BASEPRI, r6
   10d16:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   10d1e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   10d22:	2d00      	cmp	r5, #0
   10d24:	bf18      	it	ne
   10d26:	4613      	movne	r3, r2
		if (callback) {
   10d28:	b12b      	cbz	r3, 10d36 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   10d2a:	f898 2014 	ldrb.w	r2, [r8, #20]
   10d2e:	fb09 f202 	mul.w	r2, r9, r2
   10d32:	5cb8      	ldrb	r0, [r7, r2]
   10d34:	4798      	blx	r3
	return node->next;
   10d36:	6824      	ldr	r4, [r4, #0]
   10d38:	e7ea      	b.n	10d10 <pm_state_notify+0x24>
   10d3a:	bf00      	nop
   10d3c:	2002fa2c 	.word	0x2002fa2c
   10d40:	2002fa20 	.word	0x2002fa20
   10d44:	20030ea0 	.word	0x20030ea0

00010d48 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10d48:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10d4a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10d4c:	4b16      	ldr	r3, [pc, #88]	; (10da8 <pm_system_resume+0x60>)
   10d4e:	7d1c      	ldrb	r4, [r3, #20]
   10d50:	f004 031f 	and.w	r3, r4, #31
   10d54:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d56:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d58:	4b14      	ldr	r3, [pc, #80]	; (10dac <pm_system_resume+0x64>)
   10d5a:	0961      	lsrs	r1, r4, #5
   10d5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10d60:	e8d3 1fef 	ldaex	r1, [r3]
   10d64:	ea01 0500 	and.w	r5, r1, r0
   10d68:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10d6c:	2e00      	cmp	r6, #0
   10d6e:	d1f7      	bne.n	10d60 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10d70:	420a      	tst	r2, r1
   10d72:	d013      	beq.n	10d9c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   10d74:	4b0e      	ldr	r3, [pc, #56]	; (10db0 <pm_system_resume+0x68>)
   10d76:	4d0f      	ldr	r5, [pc, #60]	; (10db4 <pm_system_resume+0x6c>)
   10d78:	b18b      	cbz	r3, 10d9e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10d7a:	230c      	movs	r3, #12
   10d7c:	4363      	muls	r3, r4
   10d7e:	18ea      	adds	r2, r5, r3
   10d80:	7851      	ldrb	r1, [r2, #1]
   10d82:	5ce8      	ldrb	r0, [r5, r3]
   10d84:	f019 fe97 	bl	2aab6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10d88:	2000      	movs	r0, #0
   10d8a:	f7ff ffaf 	bl	10cec <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10d8e:	230c      	movs	r3, #12
   10d90:	435c      	muls	r4, r3
   10d92:	2300      	movs	r3, #0
   10d94:	192a      	adds	r2, r5, r4
   10d96:	512b      	str	r3, [r5, r4]
   10d98:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10d9c:	bd70      	pop	{r4, r5, r6, pc}
   10d9e:	f383 8811 	msr	BASEPRI, r3
   10da2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10da6:	e7ef      	b.n	10d88 <pm_system_resume+0x40>
   10da8:	20030ea0 	.word	0x20030ea0
   10dac:	2002fa34 	.word	0x2002fa34
   10db0:	0002aab7 	.word	0x0002aab7
   10db4:	2002fa20 	.word	0x2002fa20

00010db8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   10db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   10dbc:	4b32      	ldr	r3, [pc, #200]	; (10e88 <pm_system_suspend+0xd0>)
{
   10dbe:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   10dc0:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   10dc2:	f04f 0320 	mov.w	r3, #32
   10dc6:	f3ef 8811 	mrs	r8, BASEPRI
   10dca:	f383 8812 	msr	BASEPRI_MAX, r3
   10dce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   10dd2:	240c      	movs	r4, #12
   10dd4:	436c      	muls	r4, r5
   10dd6:	4b2d      	ldr	r3, [pc, #180]	; (10e8c <pm_system_suspend+0xd4>)
   10dd8:	4e2d      	ldr	r6, [pc, #180]	; (10e90 <pm_system_suspend+0xd8>)
   10dda:	5d19      	ldrb	r1, [r3, r4]
   10ddc:	191a      	adds	r2, r3, r4
   10dde:	2900      	cmp	r1, #0
   10de0:	d047      	beq.n	10e72 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10de2:	ca07      	ldmia	r2, {r0, r1, r2}
   10de4:	eb06 0c04 	add.w	ip, r6, r4
   10de8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   10dec:	2200      	movs	r2, #0
   10dee:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   10df0:	f388 8811 	msr	BASEPRI, r8
   10df4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10df8:	230c      	movs	r3, #12
   10dfa:	436b      	muls	r3, r5
   10dfc:	5cf0      	ldrb	r0, [r6, r3]
   10dfe:	18f2      	adds	r2, r6, r3
   10e00:	b3a8      	cbz	r0, 10e6e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   10e02:	1c7b      	adds	r3, r7, #1
   10e04:	d010      	beq.n	10e28 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10e06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10e0a:	2100      	movs	r1, #0
   10e0c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   10e10:	4c20      	ldr	r4, [pc, #128]	; (10e94 <pm_system_suspend+0xdc>)
   10e12:	2300      	movs	r3, #0
   10e14:	fbec 4100 	umlal	r4, r1, ip, r0
   10e18:	4a1f      	ldr	r2, [pc, #124]	; (10e98 <pm_system_suspend+0xe0>)
   10e1a:	4620      	mov	r0, r4
   10e1c:	f7f8 f890 	bl	8f40 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10e20:	2101      	movs	r1, #1
   10e22:	1a38      	subs	r0, r7, r0
   10e24:	f020 fc03 	bl	3162e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   10e28:	f015 fbba 	bl	265a0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10e2c:	2001      	movs	r0, #1
   10e2e:	f7ff ff5d 	bl	10cec <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10e32:	4b1a      	ldr	r3, [pc, #104]	; (10e9c <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10e34:	096a      	lsrs	r2, r5, #5
   10e36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10e3a:	2201      	movs	r2, #1
   10e3c:	f005 011f 	and.w	r1, r5, #31
   10e40:	408a      	lsls	r2, r1
   10e42:	e8d3 0fef 	ldaex	r0, [r3]
   10e46:	4310      	orrs	r0, r2
   10e48:	e8c3 0fe1 	stlex	r1, r0, [r3]
   10e4c:	2900      	cmp	r1, #0
   10e4e:	d1f8      	bne.n	10e42 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
   10e50:	4b13      	ldr	r3, [pc, #76]	; (10ea0 <pm_system_suspend+0xe8>)
   10e52:	b13b      	cbz	r3, 10e64 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
   10e54:	230c      	movs	r3, #12
   10e56:	fb03 f005 	mul.w	r0, r3, r5
   10e5a:	1833      	adds	r3, r6, r0
   10e5c:	7859      	ldrb	r1, [r3, #1]
   10e5e:	5c30      	ldrb	r0, [r6, r0]
   10e60:	f019 fe1d 	bl	2aa9e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   10e64:	f7ff ff70 	bl	10d48 <pm_system_resume>
	k_sched_unlock();
   10e68:	f015 fbae 	bl	265c8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   10e6c:	2001      	movs	r0, #1
}
   10e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   10e72:	4601      	mov	r1, r0
   10e74:	4628      	mov	r0, r5
   10e76:	f000 f815 	bl	10ea4 <pm_policy_next_state>
		if (info != NULL) {
   10e7a:	2800      	cmp	r0, #0
   10e7c:	d0b8      	beq.n	10df0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   10e7e:	c807      	ldmia	r0, {r0, r1, r2}
   10e80:	4434      	add	r4, r6
   10e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10e86:	e7b3      	b.n	10df0 <pm_system_suspend+0x38>
   10e88:	20030ea0 	.word	0x20030ea0
   10e8c:	2002fa14 	.word	0x2002fa14
   10e90:	2002fa20 	.word	0x2002fa20
   10e94:	000f423f 	.word	0x000f423f
   10e98:	000f4240 	.word	0x000f4240
   10e9c:	2002fa34 	.word	0x2002fa34
   10ea0:	0002aa9f 	.word	0x0002aa9f

00010ea4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ea8:	b085      	sub	sp, #20
   10eaa:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   10eac:	a903      	add	r1, sp, #12
   10eae:	f000 f843 	bl	10f38 <pm_state_cpu_get_all>
   10eb2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10eb6:	4604      	mov	r4, r0
   10eb8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10ebc:	4b1b      	ldr	r3, [pc, #108]	; (10f2c <pm_policy_next_state+0x88>)
   10ebe:	9d03      	ldr	r5, [sp, #12]
   10ec0:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10ec4:	1e43      	subs	r3, r0, #1
   10ec6:	b21b      	sxth	r3, r3
   10ec8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10ecc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10f30 <pm_policy_next_state+0x8c>
   10ed0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10ed4:	b924      	cbnz	r4, 10ee0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10ed6:	46a1      	mov	r9, r4
}
   10ed8:	4648      	mov	r0, r9
   10eda:	b005      	add	sp, #20
   10edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ee0:	46c4      	mov	ip, r8
   10ee2:	4659      	mov	r1, fp
   10ee4:	6868      	ldr	r0, [r5, #4]
   10ee6:	2300      	movs	r3, #0
   10ee8:	fbe0 c107 	umlal	ip, r1, r0, r7
   10eec:	4a11      	ldr	r2, [pc, #68]	; (10f34 <pm_policy_next_state+0x90>)
   10eee:	4660      	mov	r0, ip
   10ef0:	f7f8 f826 	bl	8f40 <__aeabi_uldivmod>
   10ef4:	46c4      	mov	ip, r8
   10ef6:	4659      	mov	r1, fp
   10ef8:	9001      	str	r0, [sp, #4]
   10efa:	68a8      	ldr	r0, [r5, #8]
   10efc:	2300      	movs	r3, #0
   10efe:	fbe0 c107 	umlal	ip, r1, r0, r7
   10f02:	4a0c      	ldr	r2, [pc, #48]	; (10f34 <pm_policy_next_state+0x90>)
   10f04:	4660      	mov	r0, ip
   10f06:	f7f8 f81b 	bl	8f40 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10f0a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   10f0e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10f10:	d001      	beq.n	10f16 <pm_policy_next_state+0x72>
   10f12:	4582      	cmp	sl, r0
   10f14:	d905      	bls.n	10f22 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10f16:	1c73      	adds	r3, r6, #1
   10f18:	d0de      	beq.n	10ed8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   10f1a:	9b01      	ldr	r3, [sp, #4]
   10f1c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   10f1e:	42b0      	cmp	r0, r6
   10f20:	d9da      	bls.n	10ed8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10f22:	3c01      	subs	r4, #1
   10f24:	b2a4      	uxth	r4, r4
   10f26:	3d0c      	subs	r5, #12
   10f28:	e7d4      	b.n	10ed4 <pm_policy_next_state+0x30>
   10f2a:	bf00      	nop
   10f2c:	200084f8 	.word	0x200084f8
   10f30:	000f423f 	.word	0x000f423f
   10f34:	000f4240 	.word	0x000f4240

00010f38 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10f38:	b908      	cbnz	r0, 10f3e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   10f3a:	4b02      	ldr	r3, [pc, #8]	; (10f44 <pm_state_cpu_get_all+0xc>)
   10f3c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   10f3e:	2000      	movs	r0, #0
   10f40:	4770      	bx	lr
   10f42:	bf00      	nop
   10f44:	0003392c 	.word	0x0003392c

00010f48 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   10f48:	4b03      	ldr	r3, [pc, #12]	; (10f58 <nus_ccc_cfg_changed+0x10>)
   10f4a:	689b      	ldr	r3, [r3, #8]
   10f4c:	b11b      	cbz	r3, 10f56 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   10f4e:	1e48      	subs	r0, r1, #1
   10f50:	bf18      	it	ne
   10f52:	2001      	movne	r0, #1
   10f54:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   10f56:	4770      	bx	lr
   10f58:	2002fa38 	.word	0x2002fa38

00010f5c <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   10f5c:	b510      	push	{r4, lr}
   10f5e:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   10f60:	4b03      	ldr	r3, [pc, #12]	; (10f70 <on_receive+0x14>)
{
   10f62:	4611      	mov	r1, r2
	if (nus_cb.received) {
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	b10b      	cbz	r3, 10f6c <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   10f68:	4622      	mov	r2, r4
   10f6a:	4798      	blx	r3
}
	return len;
}
   10f6c:	4620      	mov	r0, r4
   10f6e:	bd10      	pop	{r4, pc}
   10f70:	2002fa38 	.word	0x2002fa38

00010f74 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   10f74:	4b02      	ldr	r3, [pc, #8]	; (10f80 <on_sent+0xc>)
   10f76:	685b      	ldr	r3, [r3, #4]
   10f78:	b103      	cbz	r3, 10f7c <on_sent+0x8>
		nus_cb.sent(conn);
   10f7a:	4718      	bx	r3
	}
}
   10f7c:	4770      	bx	lr
   10f7e:	bf00      	nop
   10f80:	2002fa38 	.word	0x2002fa38

00010f84 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   10f84:	b130      	cbz	r0, 10f94 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   10f86:	4b04      	ldr	r3, [pc, #16]	; (10f98 <bt_nus_init+0x14>)
   10f88:	6802      	ldr	r2, [r0, #0]
   10f8a:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   10f8c:	6842      	ldr	r2, [r0, #4]
   10f8e:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   10f90:	6882      	ldr	r2, [r0, #8]
   10f92:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   10f94:	2000      	movs	r0, #0
   10f96:	4770      	bx	lr
   10f98:	2002fa38 	.word	0x2002fa38

00010f9c <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   10f9c:	b570      	push	{r4, r5, r6, lr}
   10f9e:	460e      	mov	r6, r1
   10fa0:	4615      	mov	r5, r2
   10fa2:	4604      	mov	r4, r0
   10fa4:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   10fa6:	2100      	movs	r1, #0
   10fa8:	2218      	movs	r2, #24
   10faa:	4668      	mov	r0, sp
   10fac:	f020 fd73 	bl	31a96 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10fb0:	490b      	ldr	r1, [pc, #44]	; (10fe0 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10fb2:	4b0c      	ldr	r3, [pc, #48]	; (10fe4 <bt_nus_send+0x48>)
	params.data = data;
   10fb4:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   10fb8:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   10fbc:	9304      	str	r3, [sp, #16]

	if (!conn) {
   10fbe:	b92c      	cbnz	r4, 10fcc <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10fc0:	4669      	mov	r1, sp
   10fc2:	4620      	mov	r0, r4
   10fc4:	f00d fc02 	bl	1e7cc <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10fc8:	b006      	add	sp, #24
   10fca:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   10fcc:	2201      	movs	r2, #1
   10fce:	4620      	mov	r0, r4
   10fd0:	f01d fe4c 	bl	2ec6c <bt_gatt_is_subscribed>
   10fd4:	2800      	cmp	r0, #0
   10fd6:	d1f3      	bne.n	10fc0 <bt_nus_send+0x24>
		return -EINVAL;
   10fd8:	f06f 0015 	mvn.w	r0, #21
   10fdc:	e7f4      	b.n	10fc8 <bt_nus_send+0x2c>
   10fde:	bf00      	nop
   10fe0:	00033954 	.word	0x00033954
   10fe4:	00010f75 	.word	0x00010f75

00010fe8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10fe8:	4904      	ldr	r1, [pc, #16]	; (10ffc <sub_bytes+0x14>)
   10fea:	1e43      	subs	r3, r0, #1
   10fec:	300f      	adds	r0, #15
   10fee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10ff2:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10ff4:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10ff6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10ff8:	d1f9      	bne.n	10fee <sub_bytes+0x6>
	}
}
   10ffa:	4770      	bx	lr
   10ffc:	00035873 	.word	0x00035873

00011000 <tc_aes128_set_encrypt_key>:
{
   11000:	b5f0      	push	{r4, r5, r6, r7, lr}
   11002:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   11004:	4e26      	ldr	r6, [pc, #152]	; (110a0 <tc_aes128_set_encrypt_key+0xa0>)
{
   11006:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   11008:	ad01      	add	r5, sp, #4
{
   1100a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1100c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1100e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11010:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11014:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   11018:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1101c:	4638      	mov	r0, r7
   1101e:	2f00      	cmp	r7, #0
   11020:	d039      	beq.n	11096 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   11022:	2c00      	cmp	r4, #0
   11024:	d039      	beq.n	1109a <tc_aes128_set_encrypt_key+0x9a>
   11026:	1f38      	subs	r0, r7, #4
   11028:	4602      	mov	r2, r0
   1102a:	4621      	mov	r1, r4
   1102c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1102e:	784b      	ldrb	r3, [r1, #1]
   11030:	780d      	ldrb	r5, [r1, #0]
   11032:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11034:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   11038:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   1103a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1103c:	432b      	orrs	r3, r5
   1103e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   11042:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11044:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11048:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1104c:	d1ef      	bne.n	1102e <tc_aes128_set_encrypt_key+0x2e>
   1104e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11050:	4c14      	ldr	r4, [pc, #80]	; (110a4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   11052:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   11054:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   11056:	d116      	bne.n	11086 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11058:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1105c:	5ca5      	ldrb	r5, [r4, r2]
   1105e:	0e1a      	lsrs	r2, r3, #24
   11060:	5ca2      	ldrb	r2, [r4, r2]
   11062:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   11066:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1106a:	5d65      	ldrb	r5, [r4, r5]
   1106c:	b2db      	uxtb	r3, r3
   1106e:	5ce3      	ldrb	r3, [r4, r3]
   11070:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   11074:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   11078:	f021 0303 	bic.w	r3, r1, #3
   1107c:	3330      	adds	r3, #48	; 0x30
   1107e:	446b      	add	r3, sp
   11080:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   11084:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   11086:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1108a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1108c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1108e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   11090:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11092:	d1de      	bne.n	11052 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   11094:	2001      	movs	r0, #1
}
   11096:	b00d      	add	sp, #52	; 0x34
   11098:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1109a:	4620      	mov	r0, r4
   1109c:	e7fb      	b.n	11096 <tc_aes128_set_encrypt_key+0x96>
   1109e:	bf00      	nop
   110a0:	00033388 	.word	0x00033388
   110a4:	00035873 	.word	0x00035873

000110a8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   110a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   110ac:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   110ae:	6803      	ldr	r3, [r0, #0]
{
   110b0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   110b2:	9302      	str	r3, [sp, #8]
   110b4:	6843      	ldr	r3, [r0, #4]
   110b6:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 11274 <compress+0x1cc>
   110ba:	9303      	str	r3, [sp, #12]
   110bc:	6883      	ldr	r3, [r0, #8]
   110be:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   110c2:	9304      	str	r3, [sp, #16]
   110c4:	68c3      	ldr	r3, [r0, #12]
   110c6:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   110c8:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   110ca:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   110ce:	9306      	str	r3, [sp, #24]
   110d0:	6943      	ldr	r3, [r0, #20]
   110d2:	9307      	str	r3, [sp, #28]
   110d4:	6983      	ldr	r3, [r0, #24]
   110d6:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   110da:	9308      	str	r3, [sp, #32]
   110dc:	69c3      	ldr	r3, [r0, #28]
   110de:	4698      	mov	r8, r3
   110e0:	9309      	str	r3, [sp, #36]	; 0x24
   110e2:	9b08      	ldr	r3, [sp, #32]
   110e4:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   110e6:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   110e8:	ab0c      	add	r3, sp, #48	; 0x30
   110ea:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   110ec:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   110f0:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   110f2:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   110f6:	44a9      	add	r9, r5
   110f8:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   110fc:	9d00      	ldr	r5, [sp, #0]
   110fe:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   11102:	444b      	add	r3, r9
   11104:	ea25 0502 	bic.w	r5, r5, r2
   11108:	ea02 090c 	and.w	r9, r2, ip
   1110c:	ea85 0509 	eor.w	r5, r5, r9
   11110:	442b      	add	r3, r5
   11112:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   11114:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   11118:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1111c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   11120:	4025      	ands	r5, r4
   11122:	ea06 090b 	and.w	r9, r6, fp
   11126:	ea85 0509 	eor.w	r5, r5, r9
   1112a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   1112e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   11130:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   11132:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   11134:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   11138:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1113a:	46de      	mov	lr, fp
   1113c:	f8dd 8000 	ldr.w	r8, [sp]
   11140:	f040 8088 	bne.w	11254 <compress+0x1ac>
   11144:	f04f 0a10 	mov.w	sl, #16
   11148:	494b      	ldr	r1, [pc, #300]	; (11278 <compress+0x1d0>)
   1114a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   1114c:	4651      	mov	r1, sl
   1114e:	f10a 0a01 	add.w	sl, sl, #1
   11152:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   11156:	f00a 070f 	and.w	r7, sl, #15
   1115a:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1115e:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11162:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   11166:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   1116a:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   1116c:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   11170:	f101 070e 	add.w	r7, r1, #14
   11174:	f007 070f 	and.w	r7, r7, #15
   11178:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   1117c:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   11180:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   11182:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   11186:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   1118a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1118e:	f001 010f 	and.w	r1, r1, #15
   11192:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   11196:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   1119a:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   1119e:	f859 ec40 	ldr.w	lr, [r9, #-64]
   111a2:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   111a6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   111aa:	4471      	add	r1, lr
		s0 = sigma0(s0);
   111ac:	f8dd e004 	ldr.w	lr, [sp, #4]
   111b0:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   111b4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   111b8:	4441      	add	r1, r8
		s1 = sigma1(s1);
   111ba:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   111be:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111c0:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   111c4:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111c8:	ea2c 0705 	bic.w	r7, ip, r5
   111cc:	ea87 0708 	eor.w	r7, r7, r8
   111d0:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   111d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   111d8:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   111dc:	4477      	add	r7, lr
   111de:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   111e2:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111e6:	4477      	add	r7, lr
   111e8:	440f      	add	r7, r1
   111ea:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   111ec:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111f0:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   111f2:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   111f6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   111fa:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   111fe:	ea07 0703 	and.w	r7, r7, r3
   11202:	ea04 0806 	and.w	r8, r4, r6
   11206:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1120a:	ea87 0708 	eor.w	r7, r7, r8
   1120e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   11210:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   11212:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   11216:	f8cd c000 	str.w	ip, [sp]
   1121a:	46b3      	mov	fp, r6
   1121c:	d122      	bne.n	11264 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1121e:	9902      	ldr	r1, [sp, #8]
   11220:	4439      	add	r1, r7
   11222:	6001      	str	r1, [r0, #0]
   11224:	9903      	ldr	r1, [sp, #12]
   11226:	4419      	add	r1, r3
   11228:	9b04      	ldr	r3, [sp, #16]
   1122a:	6041      	str	r1, [r0, #4]
   1122c:	4423      	add	r3, r4
   1122e:	6083      	str	r3, [r0, #8]
   11230:	9b05      	ldr	r3, [sp, #20]
   11232:	4433      	add	r3, r6
   11234:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   11236:	9b06      	ldr	r3, [sp, #24]
   11238:	4473      	add	r3, lr
   1123a:	6103      	str	r3, [r0, #16]
   1123c:	9b07      	ldr	r3, [sp, #28]
   1123e:	442b      	add	r3, r5
   11240:	6143      	str	r3, [r0, #20]
   11242:	9b08      	ldr	r3, [sp, #32]
   11244:	4413      	add	r3, r2
   11246:	6183      	str	r3, [r0, #24]
   11248:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1124a:	4463      	add	r3, ip
   1124c:	61c3      	str	r3, [r0, #28]
}
   1124e:	b01d      	add	sp, #116	; 0x74
   11250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11254:	46b3      	mov	fp, r6
   11256:	f8cd c000 	str.w	ip, [sp]
   1125a:	4626      	mov	r6, r4
   1125c:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   1125e:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   11260:	462a      	mov	r2, r5
   11262:	e740      	b.n	110e6 <compress+0x3e>
   11264:	4694      	mov	ip, r2
   11266:	4626      	mov	r6, r4
   11268:	462a      	mov	r2, r5
   1126a:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   1126c:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   1126e:	463b      	mov	r3, r7
   11270:	e76c      	b.n	1114c <compress+0xa4>
   11272:	bf00      	nop
   11274:	000339a4 	.word	0x000339a4
   11278:	000339e0 	.word	0x000339e0

0001127c <tc_sha256_init>:
{
   1127c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   1127e:	4604      	mov	r4, r0
   11280:	b1c8      	cbz	r0, 112b6 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   11282:	2270      	movs	r2, #112	; 0x70
   11284:	2100      	movs	r1, #0
   11286:	f019 ffc8 	bl	2b21a <_set>
	s->iv[1] = 0xbb67ae85;
   1128a:	4b0b      	ldr	r3, [pc, #44]	; (112b8 <tc_sha256_init+0x3c>)
   1128c:	4a0b      	ldr	r2, [pc, #44]	; (112bc <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   1128e:	490c      	ldr	r1, [pc, #48]	; (112c0 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   11290:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   11294:	4b0b      	ldr	r3, [pc, #44]	; (112c4 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   11296:	480c      	ldr	r0, [pc, #48]	; (112c8 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   11298:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   1129c:	4b0b      	ldr	r3, [pc, #44]	; (112cc <tc_sha256_init+0x50>)
   1129e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   112a2:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   112a4:	4b0a      	ldr	r3, [pc, #40]	; (112d0 <tc_sha256_init+0x54>)
   112a6:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   112a8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   112ac:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   112b0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   112b4:	61e3      	str	r3, [r4, #28]
}
   112b6:	bd10      	pop	{r4, pc}
   112b8:	bb67ae85 	.word	0xbb67ae85
   112bc:	6a09e667 	.word	0x6a09e667
   112c0:	3c6ef372 	.word	0x3c6ef372
   112c4:	a54ff53a 	.word	0xa54ff53a
   112c8:	510e527f 	.word	0x510e527f
   112cc:	9b05688c 	.word	0x9b05688c
   112d0:	1f83d9ab 	.word	0x1f83d9ab

000112d4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   112d4:	4901      	ldr	r1, [pc, #4]	; (112dc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   112d6:	2210      	movs	r2, #16
	str	r2, [r1]
   112d8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   112da:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   112dc:	e000ed10 	.word	0xe000ed10

000112e0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   112e0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   112e2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   112e4:	f380 8811 	msr	BASEPRI, r0
	isb
   112e8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   112ec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   112f0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   112f2:	b662      	cpsie	i
	isb
   112f4:	f3bf 8f6f 	isb	sy

	bx	lr
   112f8:	4770      	bx	lr
   112fa:	bf00      	nop

000112fc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   112fc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   112fe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11300:	f381 8811 	msr	BASEPRI, r1

	wfe
   11304:	bf20      	wfe

	msr	BASEPRI, r0
   11306:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1130a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1130c:	4770      	bx	lr
   1130e:	bf00      	nop

00011310 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   11310:	b570      	push	{r4, r5, r6, lr}
   11312:	4606      	mov	r6, r0

	if (esf != NULL) {
   11314:	460d      	mov	r5, r1
{
   11316:	b086      	sub	sp, #24
	if (esf != NULL) {
   11318:	2900      	cmp	r1, #0
   1131a:	d038      	beq.n	1138e <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1131c:	2400      	movs	r4, #0
   1131e:	688b      	ldr	r3, [r1, #8]
   11320:	2201      	movs	r2, #1
   11322:	9305      	str	r3, [sp, #20]
   11324:	684b      	ldr	r3, [r1, #4]
   11326:	4620      	mov	r0, r4
   11328:	9304      	str	r3, [sp, #16]
   1132a:	680b      	ldr	r3, [r1, #0]
   1132c:	491b      	ldr	r1, [pc, #108]	; (1139c <z_arm_fatal_error+0x8c>)
   1132e:	9303      	str	r3, [sp, #12]
   11330:	4b1b      	ldr	r3, [pc, #108]	; (113a0 <z_arm_fatal_error+0x90>)
   11332:	e9cd 4400 	strd	r4, r4, [sp]
   11336:	9302      	str	r3, [sp, #8]
   11338:	4623      	mov	r3, r4
   1133a:	f01a fbac 	bl	2ba96 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1133e:	696b      	ldr	r3, [r5, #20]
   11340:	2201      	movs	r2, #1
   11342:	9305      	str	r3, [sp, #20]
   11344:	692b      	ldr	r3, [r5, #16]
   11346:	4620      	mov	r0, r4
   11348:	9304      	str	r3, [sp, #16]
   1134a:	68eb      	ldr	r3, [r5, #12]
   1134c:	4913      	ldr	r1, [pc, #76]	; (1139c <z_arm_fatal_error+0x8c>)
   1134e:	9303      	str	r3, [sp, #12]
   11350:	4b14      	ldr	r3, [pc, #80]	; (113a4 <z_arm_fatal_error+0x94>)
   11352:	9400      	str	r4, [sp, #0]
   11354:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11358:	4623      	mov	r3, r4
   1135a:	f01a fb9c 	bl	2ba96 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1135e:	69eb      	ldr	r3, [r5, #28]
   11360:	2201      	movs	r2, #1
   11362:	9303      	str	r3, [sp, #12]
   11364:	4b10      	ldr	r3, [pc, #64]	; (113a8 <z_arm_fatal_error+0x98>)
   11366:	4620      	mov	r0, r4
   11368:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1136c:	490b      	ldr	r1, [pc, #44]	; (1139c <z_arm_fatal_error+0x8c>)
   1136e:	4623      	mov	r3, r4
   11370:	9400      	str	r4, [sp, #0]
   11372:	f01a fb90 	bl	2ba96 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11376:	69ab      	ldr	r3, [r5, #24]
   11378:	2201      	movs	r2, #1
   1137a:	9303      	str	r3, [sp, #12]
   1137c:	4b0b      	ldr	r3, [pc, #44]	; (113ac <z_arm_fatal_error+0x9c>)
   1137e:	4620      	mov	r0, r4
   11380:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11384:	4905      	ldr	r1, [pc, #20]	; (1139c <z_arm_fatal_error+0x8c>)
   11386:	4623      	mov	r3, r4
   11388:	9400      	str	r4, [sp, #0]
   1138a:	f01a fb84 	bl	2ba96 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1138e:	4629      	mov	r1, r5
   11390:	4630      	mov	r0, r6
}
   11392:	b006      	add	sp, #24
   11394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   11398:	f014 b916 	b.w	255c8 <z_fatal_error>
   1139c:	000332f4 	.word	0x000332f4
   113a0:	00035973 	.word	0x00035973
   113a4:	000359a2 	.word	0x000359a2
   113a8:	000359d1 	.word	0x000359d1
   113ac:	000359e0 	.word	0x000359e0

000113b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   113b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   113b2:	2800      	cmp	r0, #0
   113b4:	db07      	blt.n	113c6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113b6:	2301      	movs	r3, #1
   113b8:	0941      	lsrs	r1, r0, #5
   113ba:	4a03      	ldr	r2, [pc, #12]	; (113c8 <arch_irq_enable+0x18>)
   113bc:	f000 001f 	and.w	r0, r0, #31
   113c0:	4083      	lsls	r3, r0
   113c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   113c6:	4770      	bx	lr
   113c8:	e000e100 	.word	0xe000e100

000113cc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   113cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   113ce:	2800      	cmp	r0, #0
   113d0:	db0c      	blt.n	113ec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   113d2:	2201      	movs	r2, #1
   113d4:	4906      	ldr	r1, [pc, #24]	; (113f0 <arch_irq_disable+0x24>)
   113d6:	0943      	lsrs	r3, r0, #5
   113d8:	f000 001f 	and.w	r0, r0, #31
   113dc:	4082      	lsls	r2, r0
   113de:	3320      	adds	r3, #32
   113e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   113e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113e8:	f3bf 8f6f 	isb	sy
}
   113ec:	4770      	bx	lr
   113ee:	bf00      	nop
   113f0:	e000e100 	.word	0xe000e100

000113f4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   113f4:	4b05      	ldr	r3, [pc, #20]	; (1140c <arch_irq_is_enabled+0x18>)
   113f6:	0942      	lsrs	r2, r0, #5
   113f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   113fc:	2301      	movs	r3, #1
   113fe:	f000 001f 	and.w	r0, r0, #31
   11402:	fa03 f000 	lsl.w	r0, r3, r0
}
   11406:	4010      	ands	r0, r2
   11408:	4770      	bx	lr
   1140a:	bf00      	nop
   1140c:	e000e100 	.word	0xe000e100

00011410 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11410:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11412:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
   11414:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11418:	bfac      	ite	ge
   1141a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1141e:	4b06      	ldrlt	r3, [pc, #24]	; (11438 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11420:	ea4f 1141 	mov.w	r1, r1, lsl #5
   11424:	b2c9      	uxtb	r1, r1
   11426:	bfab      	itete	ge
   11428:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1142c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11430:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11434:	5419      	strblt	r1, [r3, r0]
}
   11436:	4770      	bx	lr
   11438:	e000ed14 	.word	0xe000ed14

0001143c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1143c:	bf30      	wfi
    b z_SysNmiOnReset
   1143e:	f7ff bffd 	b.w	1143c <z_SysNmiOnReset>
   11442:	bf00      	nop

00011444 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11444:	4a0b      	ldr	r2, [pc, #44]	; (11474 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   11446:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11448:	4b0b      	ldr	r3, [pc, #44]	; (11478 <z_arm_prep_c+0x34>)
   1144a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1144e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11450:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11454:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11458:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1145c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11464:	f014 f950 	bl	25708 <z_bss_zero>
	z_data_copy();
   11468:	f015 f9ea 	bl	26840 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1146c:	f000 fb96 	bl	11b9c <z_arm_interrupt_init>
	z_cstart();
   11470:	f014 f98e 	bl	25790 <z_cstart>
   11474:	00008000 	.word	0x00008000
   11478:	e000ed00 	.word	0xe000ed00

0001147c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1147c:	4a0a      	ldr	r2, [pc, #40]	; (114a8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1147e:	490b      	ldr	r1, [pc, #44]	; (114ac <arch_swap+0x30>)
	_current->arch.basepri = key;
   11480:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   11482:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   11484:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	_current->arch.swap_return_value = _k_neg_eagain;
   11488:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1148c:	4908      	ldr	r1, [pc, #32]	; (114b0 <arch_swap+0x34>)
   1148e:	684b      	ldr	r3, [r1, #4]
   11490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11494:	604b      	str	r3, [r1, #4]
   11496:	2300      	movs	r3, #0
   11498:	f383 8811 	msr	BASEPRI, r3
   1149c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   114a0:	6893      	ldr	r3, [r2, #8]
}
   114a2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   114a6:	4770      	bx	lr
   114a8:	20030ea0 	.word	0x20030ea0
   114ac:	000343ec 	.word	0x000343ec
   114b0:	e000ed00 	.word	0xe000ed00

000114b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   114b4:	4916      	ldr	r1, [pc, #88]	; (11510 <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   114b6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   114b8:	f882 e0a1 	strb.w	lr, [r2, #161]	; 0xa1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   114bc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   114c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   114c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   114c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   114ca:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   114cc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   114d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   114d4:	4f0f      	ldr	r7, [pc, #60]	; (11514 <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   114d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   114da:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   114dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   114de:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   114e0:	f992 e0a1 	ldrsb.w	lr, [r2, #161]	; 0xa1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   114e4:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
   114e8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   114ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   114ee:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   114f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   114f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   114fa:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   114fe:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   11502:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   11504:	f01a fae6 	bl	2bad4 <configure_builtin_stack_guard>
    pop {r2, lr}
   11508:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1150c:	4770      	bx	lr
   1150e:	0000      	.short	0x0000
    ldr r1, =_kernel
   11510:	20030ea0 	.word	0x20030ea0
    ldr v4, =_SCS_ICSR
   11514:	e000ed04 	.word	0xe000ed04

00011518 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11518:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1151c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1151e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11522:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11526:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11528:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1152c:	2902      	cmp	r1, #2
    beq _oops
   1152e:	d0ff      	beq.n	11530 <_oops>

00011530 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11530:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   11532:	f01a fac0 	bl	2bab6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   11536:	bd01      	pop	{r0, pc}

00011538 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   11538:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1153c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1153e:	490d      	ldr	r1, [pc, #52]	; (11574 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   11540:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11544:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   11546:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1154a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1154e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   11550:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   11554:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1155c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   11560:	2300      	movs	r3, #0
   11562:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   11566:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1156a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1156c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   1156e:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11572:	4770      	bx	lr
   11574:	0002a491 	.word	0x0002a491

00011578 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11578:	4b09      	ldr	r3, [pc, #36]	; (115a0 <arch_switch_to_main_thread+0x28>)
   1157a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1157c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   11580:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11584:	4610      	mov	r0, r2
   11586:	f381 8809 	msr	PSP, r1
   1158a:	2100      	movs	r1, #0
   1158c:	b663      	cpsie	if
   1158e:	f381 8811 	msr	BASEPRI, r1
   11592:	f3bf 8f6f 	isb	sy
   11596:	2200      	movs	r2, #0
   11598:	2300      	movs	r3, #0
   1159a:	f018 ff79 	bl	2a490 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1159e:	bf00      	nop
   115a0:	20030ea0 	.word	0x20030ea0

000115a4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   115a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   115a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   115a8:	4a0b      	ldr	r2, [pc, #44]	; (115d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   115aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   115ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   115ae:	bf1e      	ittt	ne
	movne	r1, #0
   115b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   115b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   115b4:	f01f fd3c 	blne	31030 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   115b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   115ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   115be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   115c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   115c6:	4905      	ldr	r1, [pc, #20]	; (115dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   115c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   115ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   115cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   115ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   115d2:	4903      	ldr	r1, [pc, #12]	; (115e0 <_isr_wrapper+0x3c>)
	bx r1
   115d4:	4708      	bx	r1
   115d6:	0000      	.short	0x0000
	ldr r2, =_kernel
   115d8:	20030ea0 	.word	0x20030ea0
	ldr r1, =_sw_isr_table
   115dc:	00032c4c 	.word	0x00032c4c
	ldr r1, =z_arm_int_exit
   115e0:	000115e5 	.word	0x000115e5

000115e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   115e4:	4b04      	ldr	r3, [pc, #16]	; (115f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   115e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   115e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   115ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   115ec:	d003      	beq.n	115f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   115ee:	4903      	ldr	r1, [pc, #12]	; (115fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   115f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   115f4:	600a      	str	r2, [r1, #0]

000115f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   115f6:	4770      	bx	lr
	ldr r3, =_kernel
   115f8:	20030ea0 	.word	0x20030ea0
	ldr r1, =_SCS_ICSR
   115fc:	e000ed04 	.word	0xe000ed04

00011600 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11600:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   11602:	2400      	movs	r4, #0
   11604:	4b3d      	ldr	r3, [pc, #244]	; (116fc <mem_manage_fault.constprop.0+0xfc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   11606:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   11608:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1160a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1160c:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1160e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   11610:	2201      	movs	r2, #1
   11612:	4620      	mov	r0, r4
   11614:	e9cd 4400 	strd	r4, r4, [sp]
   11618:	4939      	ldr	r1, [pc, #228]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   1161a:	f01a fa60 	bl	2bade <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1161e:	4b39      	ldr	r3, [pc, #228]	; (11704 <mem_manage_fault.constprop.0+0x104>)
   11620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11622:	06dd      	lsls	r5, r3, #27
   11624:	d509      	bpl.n	1163a <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   11626:	4b38      	ldr	r3, [pc, #224]	; (11708 <mem_manage_fault.constprop.0+0x108>)
   11628:	2201      	movs	r2, #1
   1162a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1162e:	4620      	mov	r0, r4
   11630:	4623      	mov	r3, r4
   11632:	4933      	ldr	r1, [pc, #204]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   11634:	9400      	str	r4, [sp, #0]
   11636:	f01a fa52 	bl	2bade <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1163a:	4b32      	ldr	r3, [pc, #200]	; (11704 <mem_manage_fault.constprop.0+0x104>)
   1163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1163e:	0718      	lsls	r0, r3, #28
   11640:	d509      	bpl.n	11656 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   11642:	4b32      	ldr	r3, [pc, #200]	; (1170c <mem_manage_fault.constprop.0+0x10c>)
   11644:	2201      	movs	r2, #1
   11646:	9302      	str	r3, [sp, #8]
   11648:	2300      	movs	r3, #0
   1164a:	492d      	ldr	r1, [pc, #180]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   1164c:	4618      	mov	r0, r3
   1164e:	e9cd 3300 	strd	r3, r3, [sp]
   11652:	f01a fa44 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   11656:	4d2b      	ldr	r5, [pc, #172]	; (11704 <mem_manage_fault.constprop.0+0x104>)
   11658:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1165a:	0799      	lsls	r1, r3, #30
   1165c:	d51e      	bpl.n	1169c <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   1165e:	2400      	movs	r4, #0
   11660:	4b2b      	ldr	r3, [pc, #172]	; (11710 <mem_manage_fault.constprop.0+0x110>)
   11662:	2201      	movs	r2, #1
   11664:	9302      	str	r3, [sp, #8]
   11666:	4620      	mov	r0, r4
   11668:	4623      	mov	r3, r4
   1166a:	e9cd 4400 	strd	r4, r4, [sp]
   1166e:	4924      	ldr	r1, [pc, #144]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   11670:	f01a fa35 	bl	2bade <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   11674:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   11676:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11678:	0612      	lsls	r2, r2, #24
   1167a:	d50f      	bpl.n	1169c <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1167c:	9303      	str	r3, [sp, #12]
   1167e:	4b25      	ldr	r3, [pc, #148]	; (11714 <mem_manage_fault.constprop.0+0x114>)
   11680:	2201      	movs	r2, #1
   11682:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11686:	4620      	mov	r0, r4
   11688:	4623      	mov	r3, r4
   1168a:	491d      	ldr	r1, [pc, #116]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   1168c:	9400      	str	r4, [sp, #0]
   1168e:	f01a fa26 	bl	2bade <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   11692:	b11f      	cbz	r7, 1169c <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   11694:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1169a:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1169c:	4b19      	ldr	r3, [pc, #100]	; (11704 <mem_manage_fault.constprop.0+0x104>)
   1169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   116a0:	07dc      	lsls	r4, r3, #31
   116a2:	d509      	bpl.n	116b8 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   116a4:	4b1c      	ldr	r3, [pc, #112]	; (11718 <mem_manage_fault.constprop.0+0x118>)
   116a6:	2201      	movs	r2, #1
   116a8:	9302      	str	r3, [sp, #8]
   116aa:	2300      	movs	r3, #0
   116ac:	4914      	ldr	r1, [pc, #80]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   116ae:	4618      	mov	r0, r3
   116b0:	e9cd 3300 	strd	r3, r3, [sp]
   116b4:	f01a fa13 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   116b8:	4b12      	ldr	r3, [pc, #72]	; (11704 <mem_manage_fault.constprop.0+0x104>)
   116ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   116bc:	0698      	lsls	r0, r3, #26
   116be:	d509      	bpl.n	116d4 <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   116c0:	4b16      	ldr	r3, [pc, #88]	; (1171c <mem_manage_fault.constprop.0+0x11c>)
   116c2:	2201      	movs	r2, #1
   116c4:	9302      	str	r3, [sp, #8]
   116c6:	2300      	movs	r3, #0
   116c8:	490d      	ldr	r1, [pc, #52]	; (11700 <mem_manage_fault.constprop.0+0x100>)
   116ca:	4618      	mov	r0, r3
   116cc:	e9cd 3300 	strd	r3, r3, [sp]
   116d0:	f01a fa05 	bl	2bade <z_log_msg_runtime_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   116d4:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   116d6:	4b0b      	ldr	r3, [pc, #44]	; (11704 <mem_manage_fault.constprop.0+0x104>)
   116d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116da:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   116dc:	bf58      	it	pl
   116de:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   116e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116e2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   116e4:	bf42      	ittt	mi
   116e6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   116e8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   116ec:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   116ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   116f0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   116f4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   116f6:	7030      	strb	r0, [r6, #0]

	return reason;
}
   116f8:	b005      	add	sp, #20
   116fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116fc:	00035a0e 	.word	0x00035a0e
   11700:	000332f4 	.word	0x000332f4
   11704:	e000ed00 	.word	0xe000ed00
   11708:	00035a24 	.word	0x00035a24
   1170c:	00035a57 	.word	0x00035a57
   11710:	00035a6a 	.word	0x00035a6a
   11714:	00035a82 	.word	0x00035a82
   11718:	00035a98 	.word	0x00035a98
   1171c:	00035ab7 	.word	0x00035ab7

00011720 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11720:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   11722:	2400      	movs	r4, #0
   11724:	4b3b      	ldr	r3, [pc, #236]	; (11814 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   11726:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   11728:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1172a:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1172c:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1172e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   11730:	2201      	movs	r2, #1
   11732:	4620      	mov	r0, r4
   11734:	e9cd 4400 	strd	r4, r4, [sp]
   11738:	4937      	ldr	r1, [pc, #220]	; (11818 <bus_fault.constprop.0+0xf8>)
   1173a:	f01a f9d0 	bl	2bade <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1173e:	4b37      	ldr	r3, [pc, #220]	; (1181c <bus_fault.constprop.0+0xfc>)
   11740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11742:	04db      	lsls	r3, r3, #19
   11744:	d509      	bpl.n	1175a <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   11746:	4b36      	ldr	r3, [pc, #216]	; (11820 <bus_fault.constprop.0+0x100>)
   11748:	2201      	movs	r2, #1
   1174a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1174e:	4620      	mov	r0, r4
   11750:	4623      	mov	r3, r4
   11752:	4931      	ldr	r1, [pc, #196]	; (11818 <bus_fault.constprop.0+0xf8>)
   11754:	9400      	str	r4, [sp, #0]
   11756:	f01a f9c2 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1175a:	4b30      	ldr	r3, [pc, #192]	; (1181c <bus_fault.constprop.0+0xfc>)
   1175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1175e:	051d      	lsls	r5, r3, #20
   11760:	d509      	bpl.n	11776 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   11762:	4b30      	ldr	r3, [pc, #192]	; (11824 <bus_fault.constprop.0+0x104>)
   11764:	2201      	movs	r2, #1
   11766:	9302      	str	r3, [sp, #8]
   11768:	2300      	movs	r3, #0
   1176a:	492b      	ldr	r1, [pc, #172]	; (11818 <bus_fault.constprop.0+0xf8>)
   1176c:	4618      	mov	r0, r3
   1176e:	e9cd 3300 	strd	r3, r3, [sp]
   11772:	f01a f9b4 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   11776:	4d29      	ldr	r5, [pc, #164]	; (1181c <bus_fault.constprop.0+0xfc>)
   11778:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1177a:	059c      	lsls	r4, r3, #22
   1177c:	d51e      	bpl.n	117bc <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   1177e:	2400      	movs	r4, #0
   11780:	4b29      	ldr	r3, [pc, #164]	; (11828 <bus_fault.constprop.0+0x108>)
   11782:	2201      	movs	r2, #1
   11784:	4620      	mov	r0, r4
   11786:	9302      	str	r3, [sp, #8]
   11788:	e9cd 4400 	strd	r4, r4, [sp]
   1178c:	4623      	mov	r3, r4
   1178e:	4922      	ldr	r1, [pc, #136]	; (11818 <bus_fault.constprop.0+0xf8>)
   11790:	f01a f9a5 	bl	2bade <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   11794:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   11796:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   11798:	0410      	lsls	r0, r2, #16
   1179a:	d50f      	bpl.n	117bc <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1179c:	9303      	str	r3, [sp, #12]
   1179e:	4b23      	ldr	r3, [pc, #140]	; (1182c <bus_fault.constprop.0+0x10c>)
   117a0:	2201      	movs	r2, #1
   117a2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   117a6:	4620      	mov	r0, r4
   117a8:	4623      	mov	r3, r4
   117aa:	491b      	ldr	r1, [pc, #108]	; (11818 <bus_fault.constprop.0+0xf8>)
   117ac:	9400      	str	r4, [sp, #0]
   117ae:	f01a f996 	bl	2bade <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   117b2:	b11f      	cbz	r7, 117bc <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   117b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   117b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   117ba:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   117bc:	4b17      	ldr	r3, [pc, #92]	; (1181c <bus_fault.constprop.0+0xfc>)
   117be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   117c0:	0559      	lsls	r1, r3, #21
   117c2:	d509      	bpl.n	117d8 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   117c4:	4b1a      	ldr	r3, [pc, #104]	; (11830 <bus_fault.constprop.0+0x110>)
   117c6:	2201      	movs	r2, #1
   117c8:	9302      	str	r3, [sp, #8]
   117ca:	2300      	movs	r3, #0
   117cc:	4912      	ldr	r1, [pc, #72]	; (11818 <bus_fault.constprop.0+0xf8>)
   117ce:	4618      	mov	r0, r3
   117d0:	e9cd 3300 	strd	r3, r3, [sp]
   117d4:	f01a f983 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   117d8:	4a10      	ldr	r2, [pc, #64]	; (1181c <bus_fault.constprop.0+0xfc>)
   117da:	6a93      	ldr	r3, [r2, #40]	; 0x28
   117dc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   117e0:	d012      	beq.n	11808 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   117e2:	4b14      	ldr	r3, [pc, #80]	; (11834 <bus_fault.constprop.0+0x114>)
   117e4:	9302      	str	r3, [sp, #8]
   117e6:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   117e8:	2201      	movs	r2, #1
   117ea:	4618      	mov	r0, r3
   117ec:	e9cd 3300 	strd	r3, r3, [sp]
   117f0:	4909      	ldr	r1, [pc, #36]	; (11818 <bus_fault.constprop.0+0xf8>)
   117f2:	f01a f974 	bl	2bade <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   117f6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   117f8:	4a08      	ldr	r2, [pc, #32]	; (1181c <bus_fault.constprop.0+0xfc>)
   117fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
   117fc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   11800:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   11802:	7030      	strb	r0, [r6, #0]

	return reason;
}
   11804:	b005      	add	sp, #20
   11806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   11808:	6a92      	ldr	r2, [r2, #40]	; 0x28
   1180a:	0492      	lsls	r2, r2, #18
   1180c:	d5f3      	bpl.n	117f6 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1180e:	4a0a      	ldr	r2, [pc, #40]	; (11838 <bus_fault.constprop.0+0x118>)
   11810:	9202      	str	r2, [sp, #8]
   11812:	e7e9      	b.n	117e8 <bus_fault.constprop.0+0xc8>
   11814:	00035ae6 	.word	0x00035ae6
   11818:	000332f4 	.word	0x000332f4
   1181c:	e000ed00 	.word	0xe000ed00
   11820:	00035afc 	.word	0x00035afc
   11824:	00035a57 	.word	0x00035a57
   11828:	00035b0d 	.word	0x00035b0d
   1182c:	00035b26 	.word	0x00035b26
   11830:	00035b3b 	.word	0x00035b3b
   11834:	00035b56 	.word	0x00035b56
   11838:	00035ab7 	.word	0x00035ab7

0001183c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1183c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1183e:	2400      	movs	r4, #0
   11840:	4b3b      	ldr	r3, [pc, #236]	; (11930 <usage_fault.constprop.0+0xf4>)
   11842:	2201      	movs	r2, #1
   11844:	9302      	str	r3, [sp, #8]
   11846:	4620      	mov	r0, r4
   11848:	4623      	mov	r3, r4
   1184a:	e9cd 4400 	strd	r4, r4, [sp]
   1184e:	4939      	ldr	r1, [pc, #228]	; (11934 <usage_fault.constprop.0+0xf8>)
   11850:	f01a f945 	bl	2bade <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   11854:	4b38      	ldr	r3, [pc, #224]	; (11938 <usage_fault.constprop.0+0xfc>)
   11856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11858:	019b      	lsls	r3, r3, #6
   1185a:	d509      	bpl.n	11870 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   1185c:	4b37      	ldr	r3, [pc, #220]	; (1193c <usage_fault.constprop.0+0x100>)
   1185e:	2201      	movs	r2, #1
   11860:	e9cd 4301 	strd	r4, r3, [sp, #4]
   11864:	4620      	mov	r0, r4
   11866:	4623      	mov	r3, r4
   11868:	4932      	ldr	r1, [pc, #200]	; (11934 <usage_fault.constprop.0+0xf8>)
   1186a:	9400      	str	r4, [sp, #0]
   1186c:	f01a f937 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   11870:	4b31      	ldr	r3, [pc, #196]	; (11938 <usage_fault.constprop.0+0xfc>)
   11872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11874:	01dc      	lsls	r4, r3, #7
   11876:	d509      	bpl.n	1188c <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   11878:	4b31      	ldr	r3, [pc, #196]	; (11940 <usage_fault.constprop.0+0x104>)
   1187a:	2201      	movs	r2, #1
   1187c:	9302      	str	r3, [sp, #8]
   1187e:	2300      	movs	r3, #0
   11880:	492c      	ldr	r1, [pc, #176]	; (11934 <usage_fault.constprop.0+0xf8>)
   11882:	4618      	mov	r0, r3
   11884:	e9cd 3300 	strd	r3, r3, [sp]
   11888:	f01a f929 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1188c:	4b2a      	ldr	r3, [pc, #168]	; (11938 <usage_fault.constprop.0+0xfc>)
   1188e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   11890:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   11894:	d00a      	beq.n	118ac <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   11896:	4b2b      	ldr	r3, [pc, #172]	; (11944 <usage_fault.constprop.0+0x108>)
   11898:	2201      	movs	r2, #1
   1189a:	9302      	str	r3, [sp, #8]
   1189c:	2300      	movs	r3, #0
   1189e:	4925      	ldr	r1, [pc, #148]	; (11934 <usage_fault.constprop.0+0xf8>)
   118a0:	4618      	mov	r0, r3
   118a2:	e9cd 3300 	strd	r3, r3, [sp]
   118a6:	f01a f91a 	bl	2bade <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   118aa:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   118ac:	4b22      	ldr	r3, [pc, #136]	; (11938 <usage_fault.constprop.0+0xfc>)
   118ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   118b0:	0318      	lsls	r0, r3, #12
   118b2:	d509      	bpl.n	118c8 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   118b4:	4b24      	ldr	r3, [pc, #144]	; (11948 <usage_fault.constprop.0+0x10c>)
   118b6:	2201      	movs	r2, #1
   118b8:	9302      	str	r3, [sp, #8]
   118ba:	2300      	movs	r3, #0
   118bc:	491d      	ldr	r1, [pc, #116]	; (11934 <usage_fault.constprop.0+0xf8>)
   118be:	4618      	mov	r0, r3
   118c0:	e9cd 3300 	strd	r3, r3, [sp]
   118c4:	f01a f90b 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   118c8:	4b1b      	ldr	r3, [pc, #108]	; (11938 <usage_fault.constprop.0+0xfc>)
   118ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   118cc:	0359      	lsls	r1, r3, #13
   118ce:	d509      	bpl.n	118e4 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   118d0:	4b1e      	ldr	r3, [pc, #120]	; (1194c <usage_fault.constprop.0+0x110>)
   118d2:	2201      	movs	r2, #1
   118d4:	9302      	str	r3, [sp, #8]
   118d6:	2300      	movs	r3, #0
   118d8:	4916      	ldr	r1, [pc, #88]	; (11934 <usage_fault.constprop.0+0xf8>)
   118da:	4618      	mov	r0, r3
   118dc:	e9cd 3300 	strd	r3, r3, [sp]
   118e0:	f01a f8fd 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   118e4:	4b14      	ldr	r3, [pc, #80]	; (11938 <usage_fault.constprop.0+0xfc>)
   118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   118e8:	039a      	lsls	r2, r3, #14
   118ea:	d509      	bpl.n	11900 <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   118ec:	4b18      	ldr	r3, [pc, #96]	; (11950 <usage_fault.constprop.0+0x114>)
   118ee:	2201      	movs	r2, #1
   118f0:	9302      	str	r3, [sp, #8]
   118f2:	2300      	movs	r3, #0
   118f4:	490f      	ldr	r1, [pc, #60]	; (11934 <usage_fault.constprop.0+0xf8>)
   118f6:	4618      	mov	r0, r3
   118f8:	e9cd 3300 	strd	r3, r3, [sp]
   118fc:	f01a f8ef 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11900:	4b0d      	ldr	r3, [pc, #52]	; (11938 <usage_fault.constprop.0+0xfc>)
   11902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11904:	03db      	lsls	r3, r3, #15
   11906:	d509      	bpl.n	1191c <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11908:	4b12      	ldr	r3, [pc, #72]	; (11954 <usage_fault.constprop.0+0x118>)
   1190a:	2201      	movs	r2, #1
   1190c:	9302      	str	r3, [sp, #8]
   1190e:	2300      	movs	r3, #0
   11910:	4908      	ldr	r1, [pc, #32]	; (11934 <usage_fault.constprop.0+0xf8>)
   11912:	4618      	mov	r0, r3
   11914:	e9cd 3300 	strd	r3, r3, [sp]
   11918:	f01a f8e1 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1191c:	4a06      	ldr	r2, [pc, #24]	; (11938 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   1191e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11920:	6a93      	ldr	r3, [r2, #40]	; 0x28
   11922:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   11926:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1192a:	6293      	str	r3, [r2, #40]	; 0x28
}
   1192c:	b004      	add	sp, #16
   1192e:	bd10      	pop	{r4, pc}
   11930:	00035b6e 	.word	0x00035b6e
   11934:	000332f4 	.word	0x000332f4
   11938:	e000ed00 	.word	0xe000ed00
   1193c:	00035b86 	.word	0x00035b86
   11940:	00035b99 	.word	0x00035b99
   11944:	00035bb3 	.word	0x00035bb3
   11948:	00035bdd 	.word	0x00035bdd
   1194c:	00035bfb 	.word	0x00035bfb
   11950:	00035c20 	.word	0x00035c20
   11954:	00035c3a 	.word	0x00035c3a

00011958 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1195c:	4b78      	ldr	r3, [pc, #480]	; (11b40 <z_arm_fault+0x1e8>)
{
   1195e:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11960:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   11964:	4689      	mov	r9, r1
   11966:	4616      	mov	r6, r2
   11968:	2500      	movs	r5, #0
   1196a:	b091      	sub	sp, #68	; 0x44
   1196c:	f3c8 0708 	ubfx	r7, r8, #0, #9
   11970:	f385 8811 	msr	BASEPRI, r5
   11974:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11978:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1197c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   11980:	d125      	bne.n	119ce <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   11982:	f012 0301 	ands.w	r3, r2, #1
   11986:	d122      	bne.n	119ce <z_arm_fault+0x76>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   11988:	0651      	lsls	r1, r2, #25
   1198a:	d403      	bmi.n	11994 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1198c:	0732      	lsls	r2, r6, #28
   1198e:	d40d      	bmi.n	119ac <z_arm_fault+0x54>
			*nested_exc = true;
   11990:	2501      	movs	r5, #1
   11992:	e00d      	b.n	119b0 <z_arm_fault+0x58>
		PR_FAULT_INFO("Exception occurred in Secure State");
   11994:	4a6b      	ldr	r2, [pc, #428]	; (11b44 <z_arm_fault+0x1ec>)
   11996:	4618      	mov	r0, r3
   11998:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1199c:	496a      	ldr	r1, [pc, #424]	; (11b48 <z_arm_fault+0x1f0>)
   1199e:	2201      	movs	r2, #1
   119a0:	9300      	str	r3, [sp, #0]
   119a2:	f01a f89c 	bl	2bade <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   119a6:	f016 0604 	ands.w	r6, r6, #4
   119aa:	d000      	beq.n	119ae <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)psp;
   119ac:	464c      	mov	r4, r9
	*nested_exc = false;
   119ae:	2500      	movs	r5, #0
	*recoverable = false;
   119b0:	f04f 0900 	mov.w	r9, #0
	switch (fault) {
   119b4:	1efb      	subs	r3, r7, #3
	*recoverable = false;
   119b6:	f88d 901f 	strb.w	r9, [sp, #31]
	switch (fault) {
   119ba:	2b09      	cmp	r3, #9
   119bc:	f200 80a6 	bhi.w	11b0c <z_arm_fault+0x1b4>
   119c0:	e8df f003 	tbb	[pc, r3]
   119c4:	969e9a07 	.word	0x969e9a07
   119c8:	a4a4a4a4 	.word	0xa4a4a4a4
   119cc:	a2a4      	.short	0xa2a4
		return NULL;
   119ce:	462c      	mov	r4, r5
   119d0:	e7ee      	b.n	119b0 <z_arm_fault+0x58>
	PR_FAULT_INFO("***** HARD FAULT *****");
   119d2:	4b5e      	ldr	r3, [pc, #376]	; (11b4c <z_arm_fault+0x1f4>)
   119d4:	2201      	movs	r2, #1
   119d6:	e9cd 9301 	strd	r9, r3, [sp, #4]
   119da:	2300      	movs	r3, #0
   119dc:	495a      	ldr	r1, [pc, #360]	; (11b48 <z_arm_fault+0x1f0>)
   119de:	4618      	mov	r0, r3
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   119e0:	4f57      	ldr	r7, [pc, #348]	; (11b40 <z_arm_fault+0x1e8>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   119e2:	f8cd 9000 	str.w	r9, [sp]
   119e6:	f01a f87a 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   119ea:	f88d 901f 	strb.w	r9, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   119ee:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   119f0:	f016 0602 	ands.w	r6, r6, #2
   119f4:	d005      	beq.n	11a02 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   119f6:	4b56      	ldr	r3, [pc, #344]	; (11b50 <z_arm_fault+0x1f8>)
	PR_FAULT_INFO(
   119f8:	e9cd 9301 	strd	r9, r3, [sp, #4]
   119fc:	f8cd 9000 	str.w	r9, [sp]
   11a00:	e006      	b.n	11a10 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   11a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a04:	2b00      	cmp	r3, #0
   11a06:	da0b      	bge.n	11a20 <z_arm_fault+0xc8>
		PR_EXC("  Debug event");
   11a08:	4b52      	ldr	r3, [pc, #328]	; (11b54 <z_arm_fault+0x1fc>)
   11a0a:	9600      	str	r6, [sp, #0]
   11a0c:	e9cd 6301 	strd	r6, r3, [sp, #4]
	PR_FAULT_INFO(
   11a10:	2300      	movs	r3, #0
   11a12:	2201      	movs	r2, #1
   11a14:	4618      	mov	r0, r3
   11a16:	494c      	ldr	r1, [pc, #304]	; (11b48 <z_arm_fault+0x1f0>)
   11a18:	f01a f861 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11a1c:	2300      	movs	r3, #0
   11a1e:	e030      	b.n	11a82 <z_arm_fault+0x12a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11a22:	005b      	lsls	r3, r3, #1
   11a24:	d5fa      	bpl.n	11a1c <z_arm_fault+0xc4>
		PR_EXC("  Fault escalation (see below)");
   11a26:	4b4c      	ldr	r3, [pc, #304]	; (11b58 <z_arm_fault+0x200>)
   11a28:	2201      	movs	r2, #1
   11a2a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11a2e:	4630      	mov	r0, r6
   11a30:	4633      	mov	r3, r6
   11a32:	4945      	ldr	r1, [pc, #276]	; (11b48 <z_arm_fault+0x1f0>)
   11a34:	9600      	str	r6, [sp, #0]
   11a36:	f01a f852 	bl	2bade <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11a3a:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11a3c:	69a2      	ldr	r2, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11a42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a48:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11a4c:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   11a4e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   11a56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   11a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a5c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11a60:	f64d 7302 	movw	r3, #57090	; 0xdf02
   11a64:	429a      	cmp	r2, r3
   11a66:	d12c      	bne.n	11ac2 <z_arm_fault+0x16a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   11a68:	6823      	ldr	r3, [r4, #0]
   11a6a:	2201      	movs	r2, #1
   11a6c:	9303      	str	r3, [sp, #12]
   11a6e:	4b3b      	ldr	r3, [pc, #236]	; (11b5c <z_arm_fault+0x204>)
   11a70:	4630      	mov	r0, r6
   11a72:	e9cd 6301 	strd	r6, r3, [sp, #4]
   11a76:	4934      	ldr	r1, [pc, #208]	; (11b48 <z_arm_fault+0x1f0>)
   11a78:	4633      	mov	r3, r6
   11a7a:	9600      	str	r6, [sp, #0]
   11a7c:	f01a f82f 	bl	2bade <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   11a80:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   11a82:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11a86:	b9ca      	cbnz	r2, 11abc <z_arm_fault+0x164>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   11a88:	ae08      	add	r6, sp, #32
   11a8a:	f104 0720 	add.w	r7, r4, #32
   11a8e:	4632      	mov	r2, r6
   11a90:	6820      	ldr	r0, [r4, #0]
   11a92:	6861      	ldr	r1, [r4, #4]
   11a94:	3408      	adds	r4, #8
   11a96:	c203      	stmia	r2!, {r0, r1}
   11a98:	42bc      	cmp	r4, r7
   11a9a:	4616      	mov	r6, r2
   11a9c:	d1f7      	bne.n	11a8e <z_arm_fault+0x136>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   11a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11aa0:	2d00      	cmp	r5, #0
   11aa2:	d047      	beq.n	11b34 <z_arm_fault+0x1dc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   11aa4:	f3c2 0108 	ubfx	r1, r2, #0, #9
   11aa8:	b921      	cbnz	r1, 11ab4 <z_arm_fault+0x15c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   11aaa:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   11aae:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11ab2:	920f      	str	r2, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   11ab4:	4618      	mov	r0, r3
   11ab6:	a908      	add	r1, sp, #32
   11ab8:	f7ff fc2a 	bl	11310 <z_arm_fatal_error>
}
   11abc:	b011      	add	sp, #68	; 0x44
   11abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   11ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ac4:	b2db      	uxtb	r3, r3
   11ac6:	b12b      	cbz	r3, 11ad4 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
   11ac8:	2001      	movs	r0, #1
   11aca:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   11ace:	f7ff fd97 	bl	11600 <mem_manage_fault.constprop.0>
   11ad2:	e00f      	b.n	11af4 <z_arm_fault+0x19c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   11ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ad6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   11ada:	d005      	beq.n	11ae8 <z_arm_fault+0x190>
			reason = bus_fault(esf, 1, recoverable);
   11adc:	2001      	movs	r0, #1
   11ade:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   11ae2:	f7ff fe1d 	bl	11720 <bus_fault.constprop.0>
   11ae6:	e005      	b.n	11af4 <z_arm_fault+0x19c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   11ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11aee:	d395      	bcc.n	11a1c <z_arm_fault+0xc4>
			reason = usage_fault(esf);
   11af0:	f7ff fea4 	bl	1183c <usage_fault.constprop.0>
   11af4:	4603      	mov	r3, r0
   11af6:	e7c4      	b.n	11a82 <z_arm_fault+0x12a>
		reason = mem_manage_fault(esf, 0, recoverable);
   11af8:	2000      	movs	r0, #0
   11afa:	f10d 011f 	add.w	r1, sp, #31
   11afe:	e7e6      	b.n	11ace <z_arm_fault+0x176>
		reason = bus_fault(esf, 0, recoverable);
   11b00:	2000      	movs	r0, #0
   11b02:	f10d 011f 	add.w	r1, sp, #31
   11b06:	e7ec      	b.n	11ae2 <z_arm_fault+0x18a>
	PR_FAULT_INFO(
   11b08:	4b15      	ldr	r3, [pc, #84]	; (11b60 <z_arm_fault+0x208>)
   11b0a:	e775      	b.n	119f8 <z_arm_fault+0xa0>
	PR_FAULT_INFO("***** %s %d) *****",
   11b0c:	4a15      	ldr	r2, [pc, #84]	; (11b64 <z_arm_fault+0x20c>)
   11b0e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   11b12:	4b15      	ldr	r3, [pc, #84]	; (11b68 <z_arm_fault+0x210>)
   11b14:	bf18      	it	ne
   11b16:	4613      	movne	r3, r2
   11b18:	3f10      	subs	r7, #16
   11b1a:	e9cd 3703 	strd	r3, r7, [sp, #12]
   11b1e:	4b13      	ldr	r3, [pc, #76]	; (11b6c <z_arm_fault+0x214>)
   11b20:	2201      	movs	r2, #1
   11b22:	9302      	str	r3, [sp, #8]
   11b24:	2300      	movs	r3, #0
   11b26:	4908      	ldr	r1, [pc, #32]	; (11b48 <z_arm_fault+0x1f0>)
   11b28:	4618      	mov	r0, r3
   11b2a:	e9cd 3300 	strd	r3, r3, [sp]
   11b2e:	f019 ffd6 	bl	2bade <z_log_msg_runtime_create.constprop.0>
}
   11b32:	e773      	b.n	11a1c <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11b34:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   11b38:	f022 0201 	bic.w	r2, r2, #1
   11b3c:	e7b9      	b.n	11ab2 <z_arm_fault+0x15a>
   11b3e:	bf00      	nop
   11b40:	e000ed00 	.word	0xe000ed00
   11b44:	00035c93 	.word	0x00035c93
   11b48:	000332f4 	.word	0x000332f4
   11b4c:	00035cb6 	.word	0x00035cb6
   11b50:	00035ccd 	.word	0x00035ccd
   11b54:	00035cee 	.word	0x00035cee
   11b58:	00035cfc 	.word	0x00035cfc
   11b5c:	00035d1b 	.word	0x00035d1b
   11b60:	00035d37 	.word	0x00035d37
   11b64:	00035c7a 	.word	0x00035c7a
   11b68:	00035c65 	.word	0x00035c65
   11b6c:	00035d5b 	.word	0x00035d5b

00011b70 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11b70:	4b04      	ldr	r3, [pc, #16]	; (11b84 <z_arm_fault_init+0x14>)
   11b72:	695a      	ldr	r2, [r3, #20]
   11b74:	f042 0210 	orr.w	r2, r2, #16
   11b78:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   11b7a:	695a      	ldr	r2, [r3, #20]
   11b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11b80:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11b82:	4770      	bx	lr
   11b84:	e000ed00 	.word	0xe000ed00

00011b88 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   11b88:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11b8c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11b90:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11b92:	4672      	mov	r2, lr
	bl z_arm_fault
   11b94:	f7ff fee0 	bl	11958 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   11b98:	bd01      	pop	{r0, pc}
   11b9a:	bf00      	nop

00011b9c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11b9c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11b9e:	2120      	movs	r1, #32
   11ba0:	4803      	ldr	r0, [pc, #12]	; (11bb0 <z_arm_interrupt_init+0x14>)
   11ba2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11ba4:	3301      	adds	r3, #1
   11ba6:	2b45      	cmp	r3, #69	; 0x45
   11ba8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11bac:	d1f9      	bne.n	11ba2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11bae:	4770      	bx	lr
   11bb0:	e000e100 	.word	0xe000e100

00011bb4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11bb4:	2000      	movs	r0, #0
    msr CONTROL, r0
   11bb6:	f380 8814 	msr	CONTROL, r0
    isb
   11bba:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   11bbe:	2000      	movs	r0, #0
    msr MSPLIM, r0
   11bc0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   11bc4:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   11bc8:	f7fd fca8 	bl	f51c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11bcc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11bce:	490e      	ldr	r1, [pc, #56]	; (11c08 <__start+0x54>)
    str r0, [r1]
   11bd0:	6008      	str	r0, [r1, #0]
    dsb
   11bd2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11bd6:	480d      	ldr	r0, [pc, #52]	; (11c0c <__start+0x58>)
    msr msp, r0
   11bd8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11bdc:	f000 f83e 	bl	11c5c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11be0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11be2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   11be6:	480a      	ldr	r0, [pc, #40]	; (11c10 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   11be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11bec:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11bee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11bf2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   11bf6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   11bf8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   11bfa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   11bfe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   11c02:	f7ff fc1f 	bl	11444 <z_arm_prep_c>
   11c06:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   11c08:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   11c0c:	20054c58 	.word	0x20054c58
    ldr r0, =z_interrupt_stacks
   11c10:	20053f18 	.word	0x20053f18

00011c14 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   11c14:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11c18:	4905      	ldr	r1, [pc, #20]	; (11c30 <sys_arch_reboot+0x1c>)
   11c1a:	4b06      	ldr	r3, [pc, #24]	; (11c34 <sys_arch_reboot+0x20>)
   11c1c:	68ca      	ldr	r2, [r1, #12]
   11c1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11c22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11c24:	60cb      	str	r3, [r1, #12]
   11c26:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   11c2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11c2c:	e7fd      	b.n	11c2a <sys_arch_reboot+0x16>
   11c2e:	bf00      	nop
   11c30:	e000ed00 	.word	0xe000ed00
   11c34:	05fa0004 	.word	0x05fa0004

00011c38 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   11c38:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   11c3a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   11c3c:	4906      	ldr	r1, [pc, #24]	; (11c58 <z_arm_clear_arm_mpu_config+0x20>)
   11c3e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   11c42:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   11c46:	4293      	cmp	r3, r2
   11c48:	db00      	blt.n	11c4c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   11c4a:	4770      	bx	lr
  mpu->RNR = rnr;
   11c4c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   11c50:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   11c54:	3301      	adds	r3, #1
   11c56:	e7f6      	b.n	11c46 <z_arm_clear_arm_mpu_config+0xe>
   11c58:	e000ed00 	.word	0xe000ed00

00011c5c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11c5c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11c5e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11c60:	2400      	movs	r4, #0
   11c62:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   11c66:	f7ff ffe7 	bl	11c38 <z_arm_clear_arm_mpu_config>
   11c6a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11c6c:	f04f 30ff 	mov.w	r0, #4294967295
   11c70:	4a0c      	ldr	r2, [pc, #48]	; (11ca4 <z_arm_init_arch_hw_at_boot+0x48>)
   11c72:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11c76:	3301      	adds	r3, #1
   11c78:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   11c7a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11c7e:	d1f8      	bne.n	11c72 <z_arm_init_arch_hw_at_boot+0x16>
   11c80:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11c82:	f04f 30ff 	mov.w	r0, #4294967295
   11c86:	4a07      	ldr	r2, [pc, #28]	; (11ca4 <z_arm_init_arch_hw_at_boot+0x48>)
   11c88:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11c8c:	3301      	adds	r3, #1
   11c8e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11c90:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11c94:	d1f8      	bne.n	11c88 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   11c96:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   11c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11c9c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11ca0:	bd10      	pop	{r4, pc}
   11ca2:	bf00      	nop
   11ca4:	e000e100 	.word	0xe000e100

00011ca8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   11ca8:	4b08      	ldr	r3, [pc, #32]	; (11ccc <z_impl_k_thread_abort+0x24>)
   11caa:	689b      	ldr	r3, [r3, #8]
   11cac:	4283      	cmp	r3, r0
   11cae:	d10b      	bne.n	11cc8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11cb0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11cb4:	b143      	cbz	r3, 11cc8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11cb6:	4b06      	ldr	r3, [pc, #24]	; (11cd0 <z_impl_k_thread_abort+0x28>)
   11cb8:	685a      	ldr	r2, [r3, #4]
   11cba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11cbe:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11cc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   11cc6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   11cc8:	f014 bd48 	b.w	2675c <z_thread_abort>
   11ccc:	20030ea0 	.word	0x20030ea0
   11cd0:	e000ed00 	.word	0xe000ed00

00011cd4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   11cd6:	4c09      	ldr	r4, [pc, #36]	; (11cfc <z_arm_configure_static_mpu_regions+0x28>)
   11cd8:	4a09      	ldr	r2, [pc, #36]	; (11d00 <z_arm_configure_static_mpu_regions+0x2c>)
   11cda:	4623      	mov	r3, r4
   11cdc:	2101      	movs	r1, #1
   11cde:	4809      	ldr	r0, [pc, #36]	; (11d04 <z_arm_configure_static_mpu_regions+0x30>)
   11ce0:	f000 f918 	bl	11f14 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11ce4:	2300      	movs	r3, #0
   11ce6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   11ce8:	4b07      	ldr	r3, [pc, #28]	; (11d08 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11cea:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11cec:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11cee:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11cf0:	9301      	str	r3, [sp, #4]
   11cf2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11cf4:	f000 f918 	bl	11f28 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   11cf8:	b004      	add	sp, #16
   11cfa:	bd10      	pop	{r4, pc}
   11cfc:	20070000 	.word	0x20070000
   11d00:	20008000 	.word	0x20008000
   11d04:	00033aa4 	.word	0x00033aa4
   11d08:	20009038 	.word	0x20009038

00011d0c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   11d0c:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   11d0e:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11d10:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   11d12:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   11d16:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   11d1a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11d1c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11d1e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   11d20:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   11d24:	4905      	ldr	r1, [pc, #20]	; (11d3c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   11d26:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   11d2a:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   11d2e:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   11d32:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   11d36:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   11d3a:	bd10      	pop	{r4, pc}
   11d3c:	e000ed00 	.word	0xe000ed00

00011d40 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   11d40:	2807      	cmp	r0, #7
{
   11d42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   11d44:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   11d46:	d90f      	bls.n	11d68 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   11d48:	4b09      	ldr	r3, [pc, #36]	; (11d70 <region_allocate_and_init+0x30>)
   11d4a:	9003      	str	r0, [sp, #12]
   11d4c:	9302      	str	r3, [sp, #8]
   11d4e:	2300      	movs	r3, #0
   11d50:	2201      	movs	r2, #1
   11d52:	4618      	mov	r0, r3
   11d54:	e9cd 3300 	strd	r3, r3, [sp]
   11d58:	4906      	ldr	r1, [pc, #24]	; (11d74 <region_allocate_and_init+0x34>)
   11d5a:	f019 fedb 	bl	2bb14 <z_log_msg_runtime_create.constprop.0>
   11d5e:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11d62:	4620      	mov	r0, r4
   11d64:	b004      	add	sp, #16
   11d66:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   11d68:	f7ff ffd0 	bl	11d0c <region_init>
	return index;
   11d6c:	e7f9      	b.n	11d62 <region_allocate_and_init+0x22>
   11d6e:	bf00      	nop
   11d70:	00035d72 	.word	0x00035d72
   11d74:	000332dc 	.word	0x000332dc

00011d78 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d7c:	4689      	mov	r9, r1
   11d7e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   11d80:	4606      	mov	r6, r0
   11d82:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   11d86:	4d54      	ldr	r5, [pc, #336]	; (11ed8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11d88:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   11d8a:	45c8      	cmp	r8, r9
   11d8c:	da2d      	bge.n	11dea <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   11d8e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11d92:	f1ba 0f00 	cmp.w	sl, #0
   11d96:	d04a      	beq.n	11e2e <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   11d98:	f1ba 0f1f 	cmp.w	sl, #31
   11d9c:	d917      	bls.n	11dce <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   11d9e:	f01a 0f1f 	tst.w	sl, #31
   11da2:	d114      	bne.n	11dce <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   11da4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11da8:	f01b 0f1f 	tst.w	fp, #31
   11dac:	d10f      	bne.n	11dce <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11dae:	4658      	mov	r0, fp
   11db0:	f019 fea7 	bl	2bb02 <arm_cmse_mpu_region_get>
   11db4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11db6:	eb0a 000b 	add.w	r0, sl, fp
   11dba:	3801      	subs	r0, #1
   11dbc:	f019 fea1 	bl	2bb02 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11dc0:	4287      	cmp	r7, r0
   11dc2:	d016      	beq.n	11df2 <mpu_configure_regions_and_partition.constprop.0+0x7a>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11dc4:	f06f 0715 	mvn.w	r7, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11dc8:	4b44      	ldr	r3, [pc, #272]	; (11edc <mpu_configure_regions_and_partition.constprop.0+0x164>)
   11dca:	9703      	str	r7, [sp, #12]
   11dcc:	e002      	b.n	11dd4 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11dce:	4b44      	ldr	r3, [pc, #272]	; (11ee0 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   11dd0:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   11dd4:	9302      	str	r3, [sp, #8]
   11dd6:	2300      	movs	r3, #0
   11dd8:	2201      	movs	r2, #1
   11dda:	4618      	mov	r0, r3
   11ddc:	e9cd 3300 	strd	r3, r3, [sp]
   11de0:	4940      	ldr	r1, [pc, #256]	; (11ee4 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   11de2:	f019 fe97 	bl	2bb14 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   11de6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   11dea:	4620      	mov	r0, r4
   11dec:	b009      	add	sp, #36	; 0x24
   11dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   11df2:	f117 0f16 	cmn.w	r7, #22
   11df6:	d0e7      	beq.n	11dc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
   11df8:	42bc      	cmp	r4, r7
   11dfa:	dde5      	ble.n	11dc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   11dfc:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11e00:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   11e04:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11e08:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11e0c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   11e10:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11e14:	e9d6 3200 	ldrd	r3, r2, [r6]
   11e18:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   11e1a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   11e1c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   11e20:	d11d      	bne.n	11e5e <mpu_configure_regions_and_partition.constprop.0+0xe6>
   11e22:	45d3      	cmp	fp, sl
   11e24:	d107      	bne.n	11e36 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   11e26:	4631      	mov	r1, r6
   11e28:	b2f8      	uxtb	r0, r7
   11e2a:	f019 fe83 	bl	2bb34 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   11e2e:	f108 0801 	add.w	r8, r8, #1
   11e32:	360c      	adds	r6, #12
   11e34:	e7a9      	b.n	11d8a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   11e36:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   11e38:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11e3c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   11e40:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   11e44:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   11e48:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
   11e4a:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   11e4e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11e50:	f019 fe70 	bl	2bb34 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11e54:	f110 0f16 	cmn.w	r0, #22
   11e58:	d0c5      	beq.n	11de6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   11e5a:	1c44      	adds	r4, r0, #1
   11e5c:	e7e7      	b.n	11e2e <mpu_configure_regions_and_partition.constprop.0+0xb6>
	MPU->RNR = rnr;
   11e5e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   11e62:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
   11e66:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11e68:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11e6c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11e70:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   11e72:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   11e74:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
   11e76:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
   11e78:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
   11e7c:	d0e8      	beq.n	11e50 <mpu_configure_regions_and_partition.constprop.0+0xd8>
				mpu_configure_region(reg_index, &regions[i]);
   11e7e:	f019 fe59 	bl	2bb34 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11e82:	f110 0f16 	cmn.w	r0, #22
   11e86:	d0ae      	beq.n	11de6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   11e88:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   11e8c:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11e90:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   11e94:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = mpu_get_rbar() &
   11e98:	f362 0304 	bfi	r3, r2, #0, #5
   11e9c:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   11ea0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11ea4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11ea8:	085b      	lsrs	r3, r3, #1
   11eaa:	f363 1247 	bfi	r2, r3, #5, #3
   11eae:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   11eb2:	e9d6 3200 	ldrd	r3, r2, [r6]
   11eb6:	4413      	add	r3, r2
   11eb8:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11eba:	f023 031f 	bic.w	r3, r3, #31
   11ebe:	445b      	add	r3, fp
   11ec0:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   11ec4:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   11ec6:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   11eca:	a904      	add	r1, sp, #16
   11ecc:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   11ece:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   11ed0:	f7ff ff36 	bl	11d40 <region_allocate_and_init>
   11ed4:	e7be      	b.n	11e54 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   11ed6:	bf00      	nop
   11ed8:	e000ed00 	.word	0xe000ed00
   11edc:	00035dbb 	.word	0x00035dbb
   11ee0:	00035d98 	.word	0x00035d98
   11ee4:	000332dc 	.word	0x000332dc

00011ee8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   11ee8:	2205      	movs	r2, #5
   11eea:	4b04      	ldr	r3, [pc, #16]	; (11efc <arm_core_mpu_enable+0x14>)
   11eec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   11ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11ef4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   11ef8:	4770      	bx	lr
   11efa:	bf00      	nop
   11efc:	e000ed00 	.word	0xe000ed00

00011f00 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   11f00:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   11f04:	2200      	movs	r2, #0
   11f06:	4b02      	ldr	r3, [pc, #8]	; (11f10 <arm_core_mpu_disable+0x10>)
   11f08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   11f0c:	4770      	bx	lr
   11f0e:	bf00      	nop
   11f10:	e000ed00 	.word	0xe000ed00

00011f14 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   11f14:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   11f16:	4c03      	ldr	r4, [pc, #12]	; (11f24 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   11f18:	7822      	ldrb	r2, [r4, #0]
   11f1a:	f7ff ff2d 	bl	11d78 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   11f1e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   11f20:	bd10      	pop	{r4, pc}
   11f22:	bf00      	nop
   11f24:	200319a9 	.word	0x200319a9

00011f28 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f2c:	4d29      	ldr	r5, [pc, #164]	; (11fd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   11f2e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   11f30:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11f32:	f04f 0800 	mov.w	r8, #0
   11f36:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   11f38:	4f27      	ldr	r7, [pc, #156]	; (11fd8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11f3a:	45d0      	cmp	r8, sl
   11f3c:	da1b      	bge.n	11f76 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   11f3e:	f8d6 9004 	ldr.w	r9, [r6, #4]
   11f42:	f1b9 0f00 	cmp.w	r9, #0
   11f46:	d03f      	beq.n	11fc8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   11f48:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11f4a:	4608      	mov	r0, r1
   11f4c:	9101      	str	r1, [sp, #4]
   11f4e:	f019 fdd8 	bl	2bb02 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11f52:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11f54:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11f56:	eb09 0001 	add.w	r0, r9, r1
   11f5a:	3801      	subs	r0, #1
   11f5c:	f019 fdd1 	bl	2bb02 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11f60:	4284      	cmp	r4, r0
   11f62:	f04f 0214 	mov.w	r2, #20
   11f66:	4b1d      	ldr	r3, [pc, #116]	; (11fdc <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   11f68:	d008      	beq.n	11f7c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   11f6a:	fb02 f308 	mul.w	r3, r2, r8
   11f6e:	f06f 0215 	mvn.w	r2, #21
   11f72:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   11f76:	b003      	add	sp, #12
   11f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11f7c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   11f80:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   11f82:	d0f8      	beq.n	11f76 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   11f84:	7819      	ldrb	r1, [r3, #0]
   11f86:	42a1      	cmp	r1, r4
   11f88:	ddf5      	ble.n	11f76 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   11f8a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   11f8e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   11f92:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   11f96:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11f9a:	f100 0108 	add.w	r1, r0, #8
   11f9e:	7b00      	ldrb	r0, [r0, #12]
   11fa0:	f364 0004 	bfi	r0, r4, #0, #5
   11fa4:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   11fa6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11faa:	790c      	ldrb	r4, [r1, #4]
   11fac:	0840      	lsrs	r0, r0, #1
   11fae:	f360 1447 	bfi	r4, r0, #5, #3
   11fb2:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   11fb4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   11fb8:	f021 011f 	bic.w	r1, r1, #31
   11fbc:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   11fbe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   11fc2:	f021 011f 	bic.w	r1, r1, #31
   11fc6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11fc8:	f108 0801 	add.w	r8, r8, #1
   11fcc:	3514      	adds	r5, #20
   11fce:	360c      	adds	r6, #12
   11fd0:	e7b3      	b.n	11f3a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   11fd2:	bf00      	nop
   11fd4:	2002fa44 	.word	0x2002fa44
   11fd8:	e000ed00 	.word	0xe000ed00
   11fdc:	200319a9 	.word	0x200319a9

00011fe0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   11fe0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   11fe2:	4d0e      	ldr	r5, [pc, #56]	; (1201c <z_arm_mpu_init+0x3c>)
   11fe4:	682c      	ldr	r4, [r5, #0]
   11fe6:	2c08      	cmp	r4, #8
   11fe8:	d815      	bhi.n	12016 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11fea:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   11fec:	f7ff ff88 	bl	11f00 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   11ff0:	4b0b      	ldr	r3, [pc, #44]	; (12020 <z_arm_mpu_init+0x40>)
   11ff2:	4a0c      	ldr	r2, [pc, #48]	; (12024 <z_arm_mpu_init+0x44>)
   11ff4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11ff8:	4284      	cmp	r4, r0
   11ffa:	d105      	bne.n	12008 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   11ffc:	4b0a      	ldr	r3, [pc, #40]	; (12028 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   11ffe:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   12000:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   12002:	f7ff ff71 	bl	11ee8 <arm_core_mpu_enable>
}
   12006:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   12008:	6869      	ldr	r1, [r5, #4]
   1200a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1200e:	f7ff fe7d 	bl	11d0c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12012:	3001      	adds	r0, #1
   12014:	e7f0      	b.n	11ff8 <z_arm_mpu_init+0x18>
		return -1;
   12016:	f04f 30ff 	mov.w	r0, #4294967295
   1201a:	e7f4      	b.n	12006 <z_arm_mpu_init+0x26>
   1201c:	00033ab0 	.word	0x00033ab0
   12020:	e000ed00 	.word	0xe000ed00
   12024:	0044ffaa 	.word	0x0044ffaa
   12028:	200319a9 	.word	0x200319a9

0001202c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1202c:	4b01      	ldr	r3, [pc, #4]	; (12034 <__stdout_hook_install+0x8>)
   1202e:	6018      	str	r0, [r3, #0]
}
   12030:	4770      	bx	lr
   12032:	bf00      	nop
   12034:	20008534 	.word	0x20008534

00012038 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   12038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1203a:	4606      	mov	r6, r0
   1203c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1203e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   12040:	4f06      	ldr	r7, [pc, #24]	; (1205c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   12042:	42ac      	cmp	r4, r5
   12044:	da08      	bge.n	12058 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   12046:	683b      	ldr	r3, [r7, #0]
   12048:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1204a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1204c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   1204e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   12052:	d001      	beq.n	12058 <z_impl_zephyr_read_stdin+0x20>
   12054:	280d      	cmp	r0, #13
   12056:	d1f4      	bne.n	12042 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   12058:	4620      	mov	r0, r4
   1205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1205c:	20008530 	.word	0x20008530

00012060 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   12060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12062:	460d      	mov	r5, r1
   12064:	4f09      	ldr	r7, [pc, #36]	; (1208c <z_impl_zephyr_write_stdout+0x2c>)
   12066:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   12068:	f1c0 0401 	rsb	r4, r0, #1
   1206c:	19a3      	adds	r3, r4, r6
   1206e:	429d      	cmp	r5, r3
   12070:	dc01      	bgt.n	12076 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   12072:	4628      	mov	r0, r5
   12074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   12076:	7873      	ldrb	r3, [r6, #1]
   12078:	2b0a      	cmp	r3, #10
   1207a:	d102      	bne.n	12082 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   1207c:	200d      	movs	r0, #13
   1207e:	683b      	ldr	r3, [r7, #0]
   12080:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   12082:	683b      	ldr	r3, [r7, #0]
   12084:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   12088:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   1208a:	e7ef      	b.n	1206c <z_impl_zephyr_write_stdout+0xc>
   1208c:	20008534 	.word	0x20008534

00012090 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   12090:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   12092:	2105      	movs	r1, #5
   12094:	4801      	ldr	r0, [pc, #4]	; (1209c <_exit+0xc>)
   12096:	f7ff ffe3 	bl	12060 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   1209a:	e7fe      	b.n	1209a <_exit+0xa>
   1209c:	00035dde 	.word	0x00035dde

000120a0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   120a0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   120a2:	4c07      	ldr	r4, [pc, #28]	; (120c0 <_sbrk+0x20>)
   120a4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   120a6:	18c2      	adds	r2, r0, r3
   120a8:	4806      	ldr	r0, [pc, #24]	; (120c4 <_sbrk+0x24>)
   120aa:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   120ae:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   120b2:	428a      	cmp	r2, r1
		heap_sz += count;
   120b4:	bf36      	itet	cc
   120b6:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   120b8:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   120bc:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   120be:	bd10      	pop	{r4, pc}
   120c0:	2002fa58 	.word	0x2002fa58
   120c4:	2005dcb4 	.word	0x2005dcb4

000120c8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   120c8:	b508      	push	{r3, lr}
   120ca:	211d      	movs	r1, #29
   120cc:	4804      	ldr	r0, [pc, #16]	; (120e0 <__chk_fail+0x18>)
   120ce:	f7ff ffc7 	bl	12060 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   120d2:	4040      	eors	r0, r0
   120d4:	f380 8811 	msr	BASEPRI, r0
   120d8:	f04f 0003 	mov.w	r0, #3
   120dc:	df02      	svc	2
	CODE_UNREACHABLE;
   120de:	bf00      	nop
   120e0:	00035de4 	.word	0x00035de4

000120e4 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   120e4:	2000      	movs	r0, #0
   120e6:	4b02      	ldr	r3, [pc, #8]	; (120f0 <remoteproc_mgr_boot+0xc>)
   120e8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   120ec:	4770      	bx	lr
   120ee:	bf00      	nop
   120f0:	40005000 	.word	0x40005000

000120f4 <get_battery_level>:
	/* Do not change the default value */
}

static uint8_t get_battery_level(void)
{
	if (get_battery_level_user != NULL) {
   120f4:	4b02      	ldr	r3, [pc, #8]	; (12100 <get_battery_level+0xc>)
   120f6:	681b      	ldr	r3, [r3, #0]
   120f8:	b103      	cbz	r3, 120fc <get_battery_level+0x8>
		return get_battery_level_user();
   120fa:	4718      	bx	r3
	}

	return 255;
}
   120fc:	20ff      	movs	r0, #255	; 0xff
   120fe:	4770      	bx	lr
   12100:	2002fa60 	.word	0x2002fa60

00012104 <lorawan_init>:
	list->head = NULL;
   12104:	2000      	movs	r0, #0
   12106:	4b0a      	ldr	r3, [pc, #40]	; (12130 <lorawan_init+0x2c>)
{
	ARG_UNUSED(dev);

	sys_slist_init(&dl_callbacks);

	mac_primitives.MacMcpsConfirm = mcps_confirm_handler;
   12108:	4a0a      	ldr	r2, [pc, #40]	; (12134 <lorawan_init+0x30>)
	list->tail = NULL;
   1210a:	e9c3 0000 	strd	r0, r0, [r3]
   1210e:	4b0a      	ldr	r3, [pc, #40]	; (12138 <lorawan_init+0x34>)
   12110:	601a      	str	r2, [r3, #0]
	mac_primitives.MacMcpsIndication = mcps_indication_handler;
   12112:	4a0a      	ldr	r2, [pc, #40]	; (1213c <lorawan_init+0x38>)
   12114:	605a      	str	r2, [r3, #4]
	mac_primitives.MacMlmeConfirm = mlme_confirm_handler;
   12116:	4a0a      	ldr	r2, [pc, #40]	; (12140 <lorawan_init+0x3c>)
   12118:	609a      	str	r2, [r3, #8]
	mac_primitives.MacMlmeIndication = mlme_indication_handler;
   1211a:	4a0a      	ldr	r2, [pc, #40]	; (12144 <lorawan_init+0x40>)
   1211c:	60da      	str	r2, [r3, #12]
	mac_callbacks.GetBatteryLevel = get_battery_level;
   1211e:	4b0a      	ldr	r3, [pc, #40]	; (12148 <lorawan_init+0x44>)
   12120:	4a0a      	ldr	r2, [pc, #40]	; (1214c <lorawan_init+0x48>)
	mac_callbacks.GetTemperatureLevel = NULL;

	if (IS_ENABLED(CONFIG_LORAWAN_NVM_NONE)) {
		mac_callbacks.NvmDataChange = NULL;
   12122:	6098      	str	r0, [r3, #8]
	mac_callbacks.GetTemperatureLevel = NULL;
   12124:	e9c3 2000 	strd	r2, r0, [r3]
	} else {
		mac_callbacks.NvmDataChange = lorawan_nvm_data_mgmt_event;
	}

	mac_callbacks.MacProcessNotify = mac_process_notify;
   12128:	4a09      	ldr	r2, [pc, #36]	; (12150 <lorawan_init+0x4c>)
   1212a:	60da      	str	r2, [r3, #12]

	return 0;
}
   1212c:	4770      	bx	lr
   1212e:	bf00      	nop
   12130:	2002fa84 	.word	0x2002fa84
   12134:	00012349 	.word	0x00012349
   12138:	2002fa74 	.word	0x2002fa74
   1213c:	00012265 	.word	0x00012265
   12140:	00012155 	.word	0x00012155
   12144:	00012315 	.word	0x00012315
   12148:	2002fa64 	.word	0x2002fa64
   1214c:	000120f5 	.word	0x000120f5
   12150:	0002bbe3 	.word	0x0002bbe3

00012154 <mlme_confirm_handler>:
{
   12154:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   12156:	7803      	ldrb	r3, [r0, #0]
{
   12158:	b090      	sub	sp, #64	; 0x40
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   1215a:	9304      	str	r3, [sp, #16]
   1215c:	4b23      	ldr	r3, [pc, #140]	; (121ec <mlme_confirm_handler+0x98>)
   1215e:	2600      	movs	r6, #0
   12160:	9303      	str	r3, [sp, #12]
   12162:	4b23      	ldr	r3, [pc, #140]	; (121f0 <mlme_confirm_handler+0x9c>)
{
   12164:	4605      	mov	r5, r0
	LOG_DBG("Received MlmeConfirm (for MlmeRequest %d)",
   12166:	9302      	str	r3, [sp, #8]
   12168:	2308      	movs	r3, #8
   1216a:	2204      	movs	r2, #4
   1216c:	e9cd 6300 	strd	r6, r3, [sp]
   12170:	4630      	mov	r0, r6
   12172:	4633      	mov	r3, r6
   12174:	491f      	ldr	r1, [pc, #124]	; (121f4 <mlme_confirm_handler+0xa0>)
   12176:	f019 fd36 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	if (mlme_confirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   1217a:	786c      	ldrb	r4, [r5, #1]
   1217c:	b174      	cbz	r4, 1219c <mlme_confirm_handler+0x48>
		LOG_ERR("MlmeConfirm failed : %s",
   1217e:	4620      	mov	r0, r4
   12180:	f000 fb64 	bl	1284c <lorawan_eventinfo2str>
   12184:	4b1c      	ldr	r3, [pc, #112]	; (121f8 <mlme_confirm_handler+0xa4>)
   12186:	2201      	movs	r2, #1
   12188:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1218c:	4633      	mov	r3, r6
   1218e:	9003      	str	r0, [sp, #12]
   12190:	9600      	str	r6, [sp, #0]
		LOG_INF("Joined network! DevAddr: %08x", mib_req.Param.DevAddr);
   12192:	4618      	mov	r0, r3
   12194:	4917      	ldr	r1, [pc, #92]	; (121f4 <mlme_confirm_handler+0xa0>)
   12196:	f019 fd26 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
   1219a:	e004      	b.n	121a6 <mlme_confirm_handler+0x52>
	switch (mlme_confirm->MlmeRequest) {
   1219c:	782b      	ldrb	r3, [r5, #0]
   1219e:	2b01      	cmp	r3, #1
   121a0:	d009      	beq.n	121b6 <mlme_confirm_handler+0x62>
   121a2:	2b04      	cmp	r3, #4
   121a4:	d016      	beq.n	121d4 <mlme_confirm_handler+0x80>
	last_mlme_confirm_status = mlme_confirm->Status;
   121a6:	786a      	ldrb	r2, [r5, #1]
   121a8:	4b14      	ldr	r3, [pc, #80]	; (121fc <mlme_confirm_handler+0xa8>)
   121aa:	701a      	strb	r2, [r3, #0]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   121ac:	4814      	ldr	r0, [pc, #80]	; (12200 <mlme_confirm_handler+0xac>)
   121ae:	f013 fd91 	bl	25cd4 <z_impl_k_sem_give>
}
   121b2:	b010      	add	sp, #64	; 0x40
   121b4:	bd70      	pop	{r4, r5, r6, pc}
		mib_req.Type = MIB_DEV_ADDR;
   121b6:	2307      	movs	r3, #7
		LoRaMacMibGetRequestConfirm(&mib_req);
   121b8:	a806      	add	r0, sp, #24
		mib_req.Type = MIB_DEV_ADDR;
   121ba:	f88d 3018 	strb.w	r3, [sp, #24]
		LoRaMacMibGetRequestConfirm(&mib_req);
   121be:	f005 f81f 	bl	17200 <LoRaMacMibGetRequestConfirm>
		LOG_INF("Joined network! DevAddr: %08x", mib_req.Param.DevAddr);
   121c2:	9b07      	ldr	r3, [sp, #28]
   121c4:	2203      	movs	r2, #3
   121c6:	9303      	str	r3, [sp, #12]
   121c8:	4b0e      	ldr	r3, [pc, #56]	; (12204 <mlme_confirm_handler+0xb0>)
   121ca:	9400      	str	r4, [sp, #0]
   121cc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   121d0:	4623      	mov	r3, r4
   121d2:	e7de      	b.n	12192 <mlme_confirm_handler+0x3e>
		LOG_INF("Link check not implemented yet!");
   121d4:	4b0c      	ldr	r3, [pc, #48]	; (12208 <mlme_confirm_handler+0xb4>)
   121d6:	2203      	movs	r2, #3
   121d8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   121dc:	4620      	mov	r0, r4
   121de:	4623      	mov	r3, r4
   121e0:	4904      	ldr	r1, [pc, #16]	; (121f4 <mlme_confirm_handler+0xa0>)
   121e2:	9400      	str	r4, [sp, #0]
   121e4:	f019 fcff 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
   121e8:	e7dd      	b.n	121a6 <mlme_confirm_handler+0x52>
   121ea:	bf00      	nop
   121ec:	000360c6 	.word	0x000360c6
   121f0:	00035e2a 	.word	0x00035e2a
   121f4:	000332cc 	.word	0x000332cc
   121f8:	00035e58 	.word	0x00035e58
   121fc:	200319aa 	.word	0x200319aa
   12200:	20008df8 	.word	0x20008df8
   12204:	00035e70 	.word	0x00035e70
   12208:	00035e8e 	.word	0x00035e8e

0001220c <datarate_observe>:
	mib_req.Type = MIB_CHANNELS_DATARATE;
   1220c:	232d      	movs	r3, #45	; 0x2d
{
   1220e:	b530      	push	{r4, r5, lr}
	if ((mib_req.Param.ChannelsDatarate != current_datarate) ||
   12210:	4c10      	ldr	r4, [pc, #64]	; (12254 <datarate_observe+0x48>)
{
   12212:	b08f      	sub	sp, #60	; 0x3c
   12214:	4605      	mov	r5, r0
	LoRaMacMibGetRequestConfirm(&mib_req);
   12216:	a804      	add	r0, sp, #16
	mib_req.Type = MIB_CHANNELS_DATARATE;
   12218:	f88d 3010 	strb.w	r3, [sp, #16]
	LoRaMacMibGetRequestConfirm(&mib_req);
   1221c:	f004 fff0 	bl	17200 <LoRaMacMibGetRequestConfirm>
	if ((mib_req.Param.ChannelsDatarate != current_datarate) ||
   12220:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   12224:	7822      	ldrb	r2, [r4, #0]
   12226:	4293      	cmp	r3, r2
   12228:	d100      	bne.n	1222c <datarate_observe+0x20>
   1222a:	b18d      	cbz	r5, 12250 <datarate_observe+0x44>
		current_datarate = mib_req.Param.ChannelsDatarate;
   1222c:	b2d8      	uxtb	r0, r3
		if (dr_change_cb) {
   1222e:	4b0a      	ldr	r3, [pc, #40]	; (12258 <datarate_observe+0x4c>)
		current_datarate = mib_req.Param.ChannelsDatarate;
   12230:	7020      	strb	r0, [r4, #0]
		if (dr_change_cb) {
   12232:	681b      	ldr	r3, [r3, #0]
   12234:	b103      	cbz	r3, 12238 <datarate_observe+0x2c>
			dr_change_cb(current_datarate);
   12236:	4798      	blx	r3
		LOG_INF("Datarate changed: DR_%d", current_datarate);
   12238:	7823      	ldrb	r3, [r4, #0]
   1223a:	2203      	movs	r2, #3
   1223c:	9303      	str	r3, [sp, #12]
   1223e:	4b07      	ldr	r3, [pc, #28]	; (1225c <datarate_observe+0x50>)
   12240:	4907      	ldr	r1, [pc, #28]	; (12260 <datarate_observe+0x54>)
   12242:	9302      	str	r3, [sp, #8]
   12244:	2300      	movs	r3, #0
   12246:	4618      	mov	r0, r3
   12248:	e9cd 3300 	strd	r3, r3, [sp]
   1224c:	f019 fccb 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
}
   12250:	b00f      	add	sp, #60	; 0x3c
   12252:	bd30      	pop	{r4, r5, pc}
   12254:	200319ad 	.word	0x200319ad
   12258:	2002fa5c 	.word	0x2002fa5c
   1225c:	00035eae 	.word	0x00035eae
   12260:	000332cc 	.word	0x000332cc

00012264 <mcps_indication_handler>:
{
   12264:	b5f0      	push	{r4, r5, r6, r7, lr}
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   12266:	7803      	ldrb	r3, [r0, #0]
{
   12268:	b087      	sub	sp, #28
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   1226a:	9304      	str	r3, [sp, #16]
   1226c:	4b23      	ldr	r3, [pc, #140]	; (122fc <mcps_indication_handler+0x98>)
   1226e:	2400      	movs	r4, #0
   12270:	9303      	str	r3, [sp, #12]
   12272:	4b23      	ldr	r3, [pc, #140]	; (12300 <mcps_indication_handler+0x9c>)
{
   12274:	4605      	mov	r5, r0
	LOG_DBG("Received McpsIndication %d", mcps_indication->McpsIndication);
   12276:	9302      	str	r3, [sp, #8]
   12278:	2308      	movs	r3, #8
   1227a:	4620      	mov	r0, r4
   1227c:	e9cd 4300 	strd	r4, r3, [sp]
   12280:	2204      	movs	r2, #4
   12282:	4623      	mov	r3, r4
   12284:	491f      	ldr	r1, [pc, #124]	; (12304 <mcps_indication_handler+0xa0>)
   12286:	f019 fcae 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	if (mcps_indication->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   1228a:	7868      	ldrb	r0, [r5, #1]
   1228c:	b170      	cbz	r0, 122ac <mcps_indication_handler+0x48>
		LOG_ERR("McpsIndication failed : %s",
   1228e:	f000 fadd 	bl	1284c <lorawan_eventinfo2str>
   12292:	4b1d      	ldr	r3, [pc, #116]	; (12308 <mcps_indication_handler+0xa4>)
   12294:	9003      	str	r0, [sp, #12]
   12296:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1229a:	2201      	movs	r2, #1
   1229c:	4623      	mov	r3, r4
   1229e:	4620      	mov	r0, r4
   122a0:	4918      	ldr	r1, [pc, #96]	; (12304 <mcps_indication_handler+0xa0>)
   122a2:	9400      	str	r4, [sp, #0]
   122a4:	f019 fc9f 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
}
   122a8:	b007      	add	sp, #28
   122aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (lorawan_adr_enable) {
   122ac:	4b17      	ldr	r3, [pc, #92]	; (1230c <mcps_indication_handler+0xa8>)
   122ae:	781b      	ldrb	r3, [r3, #0]
   122b0:	b10b      	cbz	r3, 122b6 <mcps_indication_handler+0x52>
		datarate_observe(false);
   122b2:	f7ff ffab 	bl	1220c <datarate_observe>
	return list->head;
   122b6:	4b16      	ldr	r3, [pc, #88]	; (12310 <mcps_indication_handler+0xac>)
   122b8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   122ba:	2c00      	cmp	r4, #0
   122bc:	d0f4      	beq.n	122a8 <mcps_indication_handler+0x44>
		if ((cb->port == LW_RECV_PORT_ANY) ||
   122be:	f64f 77ff 	movw	r7, #65535	; 0xffff
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   122c2:	3c08      	subs	r4, #8
		if ((cb->port == LW_RECV_PORT_ANY) ||
   122c4:	8823      	ldrh	r3, [r4, #0]
		    (cb->port == mcps_indication->Port)) {
   122c6:	78e8      	ldrb	r0, [r5, #3]
		if ((cb->port == LW_RECV_PORT_ANY) ||
   122c8:	42bb      	cmp	r3, r7
   122ca:	d001      	beq.n	122d0 <mcps_indication_handler+0x6c>
   122cc:	4283      	cmp	r3, r0
   122ce:	d110      	bne.n	122f2 <mcps_indication_handler+0x8e>
			cb->cb(mcps_indication->Port,
   122d0:	68ab      	ldr	r3, [r5, #8]
   122d2:	7969      	ldrb	r1, [r5, #5]
   122d4:	9301      	str	r3, [sp, #4]
   122d6:	7b2b      	ldrb	r3, [r5, #12]
   122d8:	f101 3cff 	add.w	ip, r1, #4294967295
   122dc:	9300      	str	r3, [sp, #0]
   122de:	f1dc 0100 	rsbs	r1, ip, #0
   122e2:	6866      	ldr	r6, [r4, #4]
   122e4:	f995 3010 	ldrsb.w	r3, [r5, #16]
   122e8:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
   122ec:	eb41 010c 	adc.w	r1, r1, ip
   122f0:	47b0      	blx	r6
	return node->next;
   122f2:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&dl_callbacks, cb, node) {
   122f4:	2c00      	cmp	r4, #0
   122f6:	d0d7      	beq.n	122a8 <mcps_indication_handler+0x44>
   122f8:	3c08      	subs	r4, #8
   122fa:	e7e3      	b.n	122c4 <mcps_indication_handler+0x60>
   122fc:	000360ae 	.word	0x000360ae
   12300:	00035ec6 	.word	0x00035ec6
   12304:	000332cc 	.word	0x000332cc
   12308:	00035ee5 	.word	0x00035ee5
   1230c:	200319ac 	.word	0x200319ac
   12310:	2002fa84 	.word	0x2002fa84

00012314 <mlme_indication_handler>:
{
   12314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("Received MlmeIndication %d", mlme_indication->MlmeIndication);
   12316:	7803      	ldrb	r3, [r0, #0]
   12318:	2208      	movs	r2, #8
   1231a:	9304      	str	r3, [sp, #16]
   1231c:	4b07      	ldr	r3, [pc, #28]	; (1233c <mlme_indication_handler+0x28>)
   1231e:	4908      	ldr	r1, [pc, #32]	; (12340 <mlme_indication_handler+0x2c>)
   12320:	9303      	str	r3, [sp, #12]
   12322:	4b08      	ldr	r3, [pc, #32]	; (12344 <mlme_indication_handler+0x30>)
   12324:	9302      	str	r3, [sp, #8]
   12326:	2300      	movs	r3, #0
   12328:	e9cd 3200 	strd	r3, r2, [sp]
   1232c:	4618      	mov	r0, r3
   1232e:	2204      	movs	r2, #4
   12330:	f019 fc59 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
}
   12334:	b007      	add	sp, #28
   12336:	f85d fb04 	ldr.w	pc, [sp], #4
   1233a:	bf00      	nop
   1233c:	000360db 	.word	0x000360db
   12340:	000332cc 	.word	0x000332cc
   12344:	00035f00 	.word	0x00035f00

00012348 <mcps_confirm_handler>:
{
   12348:	b5f0      	push	{r4, r5, r6, r7, lr}
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   1234a:	2400      	movs	r4, #0
   1234c:	2608      	movs	r6, #8
{
   1234e:	4605      	mov	r5, r0
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   12350:	7803      	ldrb	r3, [r0, #0]
{
   12352:	b087      	sub	sp, #28
	LOG_DBG("Received McpsConfirm (for McpsRequest %d)",
   12354:	9304      	str	r3, [sp, #16]
   12356:	4f19      	ldr	r7, [pc, #100]	; (123bc <mcps_confirm_handler+0x74>)
   12358:	4b19      	ldr	r3, [pc, #100]	; (123c0 <mcps_confirm_handler+0x78>)
   1235a:	2204      	movs	r2, #4
   1235c:	9302      	str	r3, [sp, #8]
   1235e:	4620      	mov	r0, r4
   12360:	4623      	mov	r3, r4
   12362:	e9cd 4600 	strd	r4, r6, [sp]
   12366:	4917      	ldr	r1, [pc, #92]	; (123c4 <mcps_confirm_handler+0x7c>)
   12368:	9703      	str	r7, [sp, #12]
   1236a:	f019 fc3c 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	if (mcps_confirm->Status != LORAMAC_EVENT_INFO_STATUS_OK) {
   1236e:	786b      	ldrb	r3, [r5, #1]
   12370:	b1e3      	cbz	r3, 123ac <mcps_confirm_handler+0x64>
		LOG_ERR("McpsRequest failed : %s",
   12372:	4618      	mov	r0, r3
   12374:	f000 fa6a 	bl	1284c <lorawan_eventinfo2str>
   12378:	4b13      	ldr	r3, [pc, #76]	; (123c8 <mcps_confirm_handler+0x80>)
   1237a:	2201      	movs	r2, #1
   1237c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12380:	4623      	mov	r3, r4
   12382:	9003      	str	r0, [sp, #12]
   12384:	9400      	str	r4, [sp, #0]
		LOG_DBG("McpsRequest success!");
   12386:	4618      	mov	r0, r3
   12388:	490e      	ldr	r1, [pc, #56]	; (123c4 <mcps_confirm_handler+0x7c>)
   1238a:	f019 fc2c 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	if (lorawan_adr_enable) {
   1238e:	4b0f      	ldr	r3, [pc, #60]	; (123cc <mcps_confirm_handler+0x84>)
   12390:	781b      	ldrb	r3, [r3, #0]
   12392:	b113      	cbz	r3, 1239a <mcps_confirm_handler+0x52>
		datarate_observe(false);
   12394:	2000      	movs	r0, #0
   12396:	f7ff ff39 	bl	1220c <datarate_observe>
	last_mcps_confirm_status = mcps_confirm->Status;
   1239a:	786a      	ldrb	r2, [r5, #1]
   1239c:	4b0c      	ldr	r3, [pc, #48]	; (123d0 <mcps_confirm_handler+0x88>)
   1239e:	701a      	strb	r2, [r3, #0]
   123a0:	480c      	ldr	r0, [pc, #48]	; (123d4 <mcps_confirm_handler+0x8c>)
}
   123a2:	b007      	add	sp, #28
   123a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   123a8:	f013 bc94 	b.w	25cd4 <z_impl_k_sem_give>
		LOG_DBG("McpsRequest success!");
   123ac:	4a0a      	ldr	r2, [pc, #40]	; (123d8 <mcps_confirm_handler+0x90>)
   123ae:	9703      	str	r7, [sp, #12]
   123b0:	e9cd 6201 	strd	r6, r2, [sp, #4]
   123b4:	9300      	str	r3, [sp, #0]
   123b6:	2204      	movs	r2, #4
   123b8:	e7e5      	b.n	12386 <mcps_confirm_handler+0x3e>
   123ba:	bf00      	nop
   123bc:	00036099 	.word	0x00036099
   123c0:	00035f1f 	.word	0x00035f1f
   123c4:	000332cc 	.word	0x000332cc
   123c8:	00035f4d 	.word	0x00035f4d
   123cc:	200319ac 	.word	0x200319ac
   123d0:	200319ab 	.word	0x200319ab
   123d4:	20008de0 	.word	0x20008de0
   123d8:	00035f65 	.word	0x00035f65

000123dc <lorawan_set_region>:
{
   123dc:	b510      	push	{r4, lr}
	switch (region) {
   123de:	2805      	cmp	r0, #5
{
   123e0:	b086      	sub	sp, #24
	switch (region) {
   123e2:	d113      	bne.n	1240c <lorawan_set_region+0x30>
		selected_region = LORAMAC_REGION_EU868;
   123e4:	4b10      	ldr	r3, [pc, #64]	; (12428 <lorawan_set_region+0x4c>)
	LOG_DBG("Selected region %d", region);
   123e6:	2400      	movs	r4, #0
		selected_region = LORAMAC_REGION_EU868;
   123e8:	7018      	strb	r0, [r3, #0]
	LOG_DBG("Selected region %d", region);
   123ea:	4b10      	ldr	r3, [pc, #64]	; (1242c <lorawan_set_region+0x50>)
   123ec:	9004      	str	r0, [sp, #16]
   123ee:	9303      	str	r3, [sp, #12]
   123f0:	4b0f      	ldr	r3, [pc, #60]	; (12430 <lorawan_set_region+0x54>)
   123f2:	4620      	mov	r0, r4
   123f4:	9302      	str	r3, [sp, #8]
   123f6:	2308      	movs	r3, #8
   123f8:	2204      	movs	r2, #4
   123fa:	e9cd 4300 	strd	r4, r3, [sp]
   123fe:	490d      	ldr	r1, [pc, #52]	; (12434 <lorawan_set_region+0x58>)
   12400:	4623      	mov	r3, r4
   12402:	f019 fbf0 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	return 0;
   12406:	4620      	mov	r0, r4
}
   12408:	b006      	add	sp, #24
   1240a:	bd10      	pop	{r4, pc}
		LOG_ERR("No support for region %d!", region);
   1240c:	4b0a      	ldr	r3, [pc, #40]	; (12438 <lorawan_set_region+0x5c>)
	switch (region) {
   1240e:	9003      	str	r0, [sp, #12]
		LOG_ERR("No support for region %d!", region);
   12410:	9302      	str	r3, [sp, #8]
   12412:	2300      	movs	r3, #0
   12414:	2201      	movs	r2, #1
   12416:	4618      	mov	r0, r3
   12418:	e9cd 3300 	strd	r3, r3, [sp]
   1241c:	4905      	ldr	r1, [pc, #20]	; (12434 <lorawan_set_region+0x58>)
   1241e:	f019 fbe2 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   12422:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12426:	e7ef      	b.n	12408 <lorawan_set_region+0x2c>
   12428:	20008b16 	.word	0x20008b16
   1242c:	0003610e 	.word	0x0003610e
   12430:	00035f7e 	.word	0x00035f7e
   12434:	000332cc 	.word	0x000332cc
   12438:	00035f95 	.word	0x00035f95

0001243c <lorawan_join>:
{
   1243c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1243e:	4604      	mov	r4, r0
   12440:	b09f      	sub	sp, #124	; 0x7c
	return z_impl_k_mutex_lock(mutex, timeout);
   12442:	f04f 32ff 	mov.w	r2, #4294967295
   12446:	f04f 33ff 	mov.w	r3, #4294967295
   1244a:	486e      	ldr	r0, [pc, #440]	; (12604 <lorawan_join+0x1c8>)
   1244c:	f013 fb56 	bl	25afc <z_impl_k_mutex_lock>
	mib_req.Param.EnablePublicNetwork = true;
   12450:	2601      	movs	r6, #1
	mib_req.Type = MIB_PUBLIC_NETWORK;
   12452:	231d      	movs	r3, #29
	LoRaMacMibSetRequestConfirm(&mib_req);
   12454:	a80a      	add	r0, sp, #40	; 0x28
	mib_req.Type = MIB_PUBLIC_NETWORK;
   12456:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	mib_req.Param.EnablePublicNetwork = true;
   1245a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	LoRaMacMibSetRequestConfirm(&mib_req);
   1245e:	f004 ffaf 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	if (join_cfg->mode == LORAWAN_ACT_OTAA) {
   12462:	7d25      	ldrb	r5, [r4, #20]
   12464:	2d00      	cmp	r5, #0
   12466:	d176      	bne.n	12556 <lorawan_join+0x11a>
	mlme_req.Req.Join.Datarate = default_datarate;
   12468:	4b67      	ldr	r3, [pc, #412]	; (12608 <lorawan_join+0x1cc>)
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
   1246a:	2702      	movs	r7, #2
	mlme_req.Req.Join.Datarate = default_datarate;
   1246c:	781b      	ldrb	r3, [r3, #0]
		if (LoRaMacMibGetRequestConfirm(&mib_req) !=
   1246e:	a814      	add	r0, sp, #80	; 0x50
	mlme_req.Req.Join.Datarate = default_datarate;
   12470:	f88d 3019 	strb.w	r3, [sp, #25]
		mib_req.Type = MIB_NVM_CTXS;
   12474:	2334      	movs	r3, #52	; 0x34
	mlme_req.Type = MLME_JOIN;
   12476:	f88d 6014 	strb.w	r6, [sp, #20]
	mlme_req.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
   1247a:	f88d 7018 	strb.w	r7, [sp, #24]
		mib_req.Type = MIB_NVM_CTXS;
   1247e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		if (LoRaMacMibGetRequestConfirm(&mib_req) !=
   12482:	f004 febd 	bl	17200 <LoRaMacMibGetRequestConfirm>
   12486:	b328      	cbz	r0, 124d4 <lorawan_join+0x98>
			LOG_ERR("Could not get NVM context");
   12488:	4b60      	ldr	r3, [pc, #384]	; (1260c <lorawan_join+0x1d0>)
   1248a:	4632      	mov	r2, r6
   1248c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   12490:	4628      	mov	r0, r5
   12492:	462b      	mov	r3, r5
   12494:	495e      	ldr	r1, [pc, #376]	; (12610 <lorawan_join+0x1d4>)
   12496:	9500      	str	r5, [sp, #0]
   12498:	f019 fba5 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1249c:	24ea      	movs	r4, #234	; 0xea
			LOG_ERR("OTAA join failed: %s",
   1249e:	4620      	mov	r0, r4
   124a0:	f000 f9c8 	bl	12834 <lorawan_status2str>
   124a4:	4b5b      	ldr	r3, [pc, #364]	; (12614 <lorawan_join+0x1d8>)
   124a6:	9003      	str	r0, [sp, #12]
   124a8:	9302      	str	r3, [sp, #8]
   124aa:	2300      	movs	r3, #0
   124ac:	2201      	movs	r2, #1
   124ae:	4618      	mov	r0, r3
   124b0:	e9cd 3300 	strd	r3, r3, [sp]
   124b4:	4956      	ldr	r1, [pc, #344]	; (12610 <lorawan_join+0x1d4>)
   124b6:	f019 fb96 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
			ret = lorawan_status2errno(status);
   124ba:	4620      	mov	r0, r4
   124bc:	f000 f9d2 	bl	12864 <lorawan_status2errno>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
   124c0:	4604      	mov	r4, r0
	if (ret == 0) {
   124c2:	2800      	cmp	r0, #0
   124c4:	f000 8088 	beq.w	125d8 <lorawan_join+0x19c>
	return z_impl_k_mutex_unlock(mutex);
   124c8:	484e      	ldr	r0, [pc, #312]	; (12604 <lorawan_join+0x1c8>)
   124ca:	f013 fb91 	bl	25bf0 <z_impl_k_mutex_unlock>
}
   124ce:	4620      	mov	r0, r4
   124d0:	b01f      	add	sp, #124	; 0x7c
   124d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mib_req.Param.Contexts->Crypto.DevNonce =
   124d4:	68e2      	ldr	r2, [r4, #12]
   124d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   124d8:	a814      	add	r0, sp, #80	; 0x50
		mib_req.Param.Contexts->Crypto.DevNonce =
   124da:	809a      	strh	r2, [r3, #4]
	mib_req.Param.DevEui = join_cfg->dev_eui;
   124dc:	6923      	ldr	r3, [r4, #16]
	mib_req.Type = MIB_DEV_EUI;
   124de:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
	mib_req.Param.DevEui = join_cfg->dev_eui;
   124e2:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   124e4:	f004 ff6c 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_JOIN_EUI;
   124e8:	2303      	movs	r3, #3
   124ea:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
   124ee:	6823      	ldr	r3, [r4, #0]
	LoRaMacMibSetRequestConfirm(&mib_req);
   124f0:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.JoinEui = join_cfg->otaa.join_eui;
   124f2:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   124f4:	f004 ff64 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_KEY;
   124f8:	2309      	movs	r3, #9
	mib_req.Type = MIB_APP_KEY;
   124fa:	2508      	movs	r5, #8
	mib_req.Type = MIB_NWK_KEY;
   124fc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
   12500:	6863      	ldr	r3, [r4, #4]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12502:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NwkKey = join_cfg->otaa.nwk_key;
   12504:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12506:	f004 ff5b 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
   1250a:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   1250c:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AppKey = join_cfg->otaa.app_key;
   1250e:	9315      	str	r3, [sp, #84]	; 0x54
	mib_req.Type = MIB_APP_KEY;
   12510:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	LoRaMacMibSetRequestConfirm(&mib_req);
   12514:	f004 ff54 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	return LoRaMacMlmeRequest(&mlme_req);
   12518:	a805      	add	r0, sp, #20
   1251a:	f005 fa29 	bl	17970 <LoRaMacMlmeRequest>
   1251e:	4603      	mov	r3, r0
   12520:	4604      	mov	r4, r0
		if (status != LORAMAC_STATUS_OK) {
   12522:	2800      	cmp	r0, #0
   12524:	d1bb      	bne.n	1249e <lorawan_join+0x62>
		LOG_DBG("Network join request sent!");
   12526:	4a3c      	ldr	r2, [pc, #240]	; (12618 <lorawan_join+0x1dc>)
   12528:	4939      	ldr	r1, [pc, #228]	; (12610 <lorawan_join+0x1d4>)
   1252a:	9203      	str	r2, [sp, #12]
   1252c:	4a3b      	ldr	r2, [pc, #236]	; (1261c <lorawan_join+0x1e0>)
   1252e:	9000      	str	r0, [sp, #0]
   12530:	e9cd 5201 	strd	r5, r2, [sp, #4]
   12534:	2204      	movs	r2, #4
   12536:	f019 fb56 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_sem_take(sem, timeout);
   1253a:	f04f 33ff 	mov.w	r3, #4294967295
   1253e:	f04f 32ff 	mov.w	r2, #4294967295
   12542:	4837      	ldr	r0, [pc, #220]	; (12620 <lorawan_join+0x1e4>)
   12544:	f013 fbec 	bl	25d20 <z_impl_k_sem_take>
		if (last_mlme_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
   12548:	4b36      	ldr	r3, [pc, #216]	; (12624 <lorawan_join+0x1e8>)
   1254a:	7818      	ldrb	r0, [r3, #0]
   1254c:	2800      	cmp	r0, #0
   1254e:	d043      	beq.n	125d8 <lorawan_join+0x19c>
			ret = lorawan_eventinfo2errno(last_mlme_confirm_status);
   12550:	f000 f99a 	bl	12888 <lorawan_eventinfo2errno>
   12554:	e7b4      	b.n	124c0 <lorawan_join+0x84>
	} else if (join_cfg->mode == LORAWAN_ACT_ABP) {
   12556:	2d01      	cmp	r5, #1
   12558:	d150      	bne.n	125fc <lorawan_join+0x1c0>
	mib_req.Type = MIB_ABP_LORAWAN_VERSION;
   1255a:	2335      	movs	r3, #53	; 0x35
   1255c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
   12560:	4b31      	ldr	r3, [pc, #196]	; (12628 <lorawan_join+0x1ec>)
	LoRaMacMibSetRequestConfirm(&mib_req);
   12562:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AbpLrWanVersion.Value = LORAWAN_ABP_VERSION;
   12564:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12566:	f004 ff2b 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NET_ID;
   1256a:	2306      	movs	r3, #6
   1256c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NetID = 0;
   12570:	2300      	movs	r3, #0
	LoRaMacMibSetRequestConfirm(&mib_req);
   12572:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NetID = 0;
   12574:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12576:	f004 ff23 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_DEV_ADDR;
   1257a:	2307      	movs	r3, #7
   1257c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
   12580:	6823      	ldr	r3, [r4, #0]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12582:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.DevAddr = join_cfg->abp.dev_addr;
   12584:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12586:	f004 ff1b 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_F_NWK_S_INT_KEY;
   1258a:	230c      	movs	r3, #12
   1258c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
   12590:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   12592:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.FNwkSIntKey = join_cfg->abp.nwk_skey;
   12594:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   12596:	f004 ff13 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_S_NWK_S_INT_KEY;
   1259a:	230d      	movs	r3, #13
   1259c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
   125a0:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   125a2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.SNwkSIntKey = join_cfg->abp.nwk_skey;
   125a4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   125a6:	f004 ff0b 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_NWK_S_ENC_KEY;
   125aa:	230e      	movs	r3, #14
   125ac:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
   125b0:	68a3      	ldr	r3, [r4, #8]
	LoRaMacMibSetRequestConfirm(&mib_req);
   125b2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.NwkSEncKey = join_cfg->abp.nwk_skey;
   125b4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   125b6:	f004 ff03 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	mib_req.Type = MIB_APP_S_KEY;
   125ba:	230f      	movs	r3, #15
   125bc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
   125c0:	6863      	ldr	r3, [r4, #4]
	LoRaMacMibSetRequestConfirm(&mib_req);
   125c2:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Param.AppSKey = join_cfg->abp.app_skey;
   125c4:	9315      	str	r3, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   125c6:	f004 fefb 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	LoRaMacMibSetRequestConfirm(&mib_req);
   125ca:	a814      	add	r0, sp, #80	; 0x50
	mib_req.Type = MIB_NETWORK_ACTIVATION;
   125cc:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
	mib_req.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
   125d0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	LoRaMacMibSetRequestConfirm(&mib_req);
   125d4:	f004 fef4 	bl	173c0 <LoRaMacMibSetRequestConfirm>
		if (!lorawan_adr_enable) {
   125d8:	4b14      	ldr	r3, [pc, #80]	; (1262c <lorawan_join+0x1f0>)
   125da:	781b      	ldrb	r3, [r3, #0]
   125dc:	b94b      	cbnz	r3, 125f2 <lorawan_join+0x1b6>
			mib_req.Type = MIB_CHANNELS_DATARATE;
   125de:	232d      	movs	r3, #45	; 0x2d
   125e0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
			mib_req.Param.ChannelsDatarate = default_datarate;
   125e4:	4b08      	ldr	r3, [pc, #32]	; (12608 <lorawan_join+0x1cc>)
			LoRaMacMibSetRequestConfirm(&mib_req);
   125e6:	a814      	add	r0, sp, #80	; 0x50
			mib_req.Param.ChannelsDatarate = default_datarate;
   125e8:	781b      	ldrb	r3, [r3, #0]
   125ea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
			LoRaMacMibSetRequestConfirm(&mib_req);
   125ee:	f004 fee7 	bl	173c0 <LoRaMacMibSetRequestConfirm>
		datarate_observe(true);
   125f2:	2001      	movs	r0, #1
   125f4:	f7ff fe0a 	bl	1220c <datarate_observe>
   125f8:	2400      	movs	r4, #0
   125fa:	e765      	b.n	124c8 <lorawan_join+0x8c>
		ret = -EINVAL;
   125fc:	f06f 0415 	mvn.w	r4, #21
   12600:	e762      	b.n	124c8 <lorawan_join+0x8c>
   12602:	bf00      	nop
   12604:	20008c54 	.word	0x20008c54
   12608:	200319ae 	.word	0x200319ae
   1260c:	00035faf 	.word	0x00035faf
   12610:	000332cc 	.word	0x000332cc
   12614:	00035fc9 	.word	0x00035fc9
   12618:	00036101 	.word	0x00036101
   1261c:	00035fde 	.word	0x00035fde
   12620:	20008df8 	.word	0x20008df8
   12624:	200319aa 	.word	0x200319aa
   12628:	01000300 	.word	0x01000300
   1262c:	200319ac 	.word	0x200319ac

00012630 <lorawan_enable_adr>:
{
   12630:	b500      	push	{lr}
	if (enable != lorawan_adr_enable) {
   12632:	4b08      	ldr	r3, [pc, #32]	; (12654 <lorawan_enable_adr+0x24>)
{
   12634:	b08b      	sub	sp, #44	; 0x2c
	if (enable != lorawan_adr_enable) {
   12636:	781a      	ldrb	r2, [r3, #0]
   12638:	4282      	cmp	r2, r0
   1263a:	d008      	beq.n	1264e <lorawan_enable_adr+0x1e>
		lorawan_adr_enable = enable;
   1263c:	7018      	strb	r0, [r3, #0]
		mib_req.Type = MIB_ADR;
   1263e:	2305      	movs	r3, #5
		mib_req.Param.AdrEnable = lorawan_adr_enable;
   12640:	f88d 0004 	strb.w	r0, [sp, #4]
		LoRaMacMibSetRequestConfirm(&mib_req);
   12644:	4668      	mov	r0, sp
		mib_req.Type = MIB_ADR;
   12646:	f88d 3000 	strb.w	r3, [sp]
		LoRaMacMibSetRequestConfirm(&mib_req);
   1264a:	f004 feb9 	bl	173c0 <LoRaMacMibSetRequestConfirm>
}
   1264e:	b00b      	add	sp, #44	; 0x2c
   12650:	f85d fb04 	ldr.w	pc, [sp], #4
   12654:	200319ac 	.word	0x200319ac

00012658 <lorawan_send>:
{
   12658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1265a:	4607      	mov	r7, r0
   1265c:	4615      	mov	r5, r2
   1265e:	461c      	mov	r4, r3
	if (data == NULL) {
   12660:	460e      	mov	r6, r1
{
   12662:	b08b      	sub	sp, #44	; 0x2c
	if (data == NULL) {
   12664:	2900      	cmp	r1, #0
   12666:	d05f      	beq.n	12728 <lorawan_send+0xd0>
	return z_impl_k_mutex_lock(mutex, timeout);
   12668:	f04f 32ff 	mov.w	r2, #4294967295
   1266c:	f04f 33ff 	mov.w	r3, #4294967295
   12670:	482f      	ldr	r0, [pc, #188]	; (12730 <lorawan_send+0xd8>)
   12672:	f013 fa43 	bl	25afc <z_impl_k_mutex_lock>
	status = LoRaMacQueryTxPossible(len, &tx_info);
   12676:	4628      	mov	r0, r5
   12678:	a904      	add	r1, sp, #16
   1267a:	f004 fd5f 	bl	1713c <LoRaMacQueryTxPossible>
	if (status != LORAMAC_STATUS_OK) {
   1267e:	b388      	cbz	r0, 126e4 <lorawan_send+0x8c>
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
   12680:	f000 f8d8 	bl	12834 <lorawan_status2str>
   12684:	2400      	movs	r4, #0
		empty_frame = true;
   12686:	2501      	movs	r5, #1
		LOG_ERR("LoRaWAN Query Tx Possible Failed: %s",
   12688:	4b2a      	ldr	r3, [pc, #168]	; (12734 <lorawan_send+0xdc>)
   1268a:	9003      	str	r0, [sp, #12]
   1268c:	9302      	str	r3, [sp, #8]
   1268e:	2201      	movs	r2, #1
   12690:	4623      	mov	r3, r4
   12692:	4620      	mov	r0, r4
   12694:	e9cd 4400 	strd	r4, r4, [sp]
   12698:	4927      	ldr	r1, [pc, #156]	; (12738 <lorawan_send+0xe0>)
   1269a:	f019 faa4 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
		mcps_req.Type = MCPS_UNCONFIRMED;
   1269e:	f88d 4014 	strb.w	r4, [sp, #20]
		mcps_req.Req.Unconfirmed.fBuffer = NULL;
   126a2:	9407      	str	r4, [sp, #28]
		mcps_req.Req.Unconfirmed.fBufferSize = 0;
   126a4:	f8ad 4020 	strh.w	r4, [sp, #32]
	status = LoRaMacMcpsRequest(&mcps_req);
   126a8:	a805      	add	r0, sp, #20
		mcps_req.Req.Unconfirmed.Datarate = DR_0;
   126aa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
	status = LoRaMacMcpsRequest(&mcps_req);
   126ae:	f005 fa57 	bl	17b60 <LoRaMacMcpsRequest>
	if (status != LORAMAC_STATUS_OK) {
   126b2:	4604      	mov	r4, r0
   126b4:	b330      	cbz	r0, 12704 <lorawan_send+0xac>
		LOG_ERR("LoRaWAN Send failed: %s", lorawan_status2str(status));
   126b6:	f000 f8bd 	bl	12834 <lorawan_status2str>
   126ba:	4b20      	ldr	r3, [pc, #128]	; (1273c <lorawan_send+0xe4>)
   126bc:	2201      	movs	r2, #1
   126be:	9302      	str	r3, [sp, #8]
   126c0:	2300      	movs	r3, #0
   126c2:	491d      	ldr	r1, [pc, #116]	; (12738 <lorawan_send+0xe0>)
   126c4:	e9cd 3300 	strd	r3, r3, [sp]
   126c8:	9003      	str	r0, [sp, #12]
   126ca:	4618      	mov	r0, r3
   126cc:	f019 fa8b 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
		ret = lorawan_status2errno(status);
   126d0:	4620      	mov	r0, r4
   126d2:	f000 f8c7 	bl	12864 <lorawan_status2errno>
   126d6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   126d8:	4815      	ldr	r0, [pc, #84]	; (12730 <lorawan_send+0xd8>)
   126da:	f013 fa89 	bl	25bf0 <z_impl_k_mutex_unlock>
}
   126de:	4620      	mov	r0, r4
   126e0:	b00b      	add	sp, #44	; 0x2c
   126e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (type) {
   126e4:	b15c      	cbz	r4, 126fe <lorawan_send+0xa6>
   126e6:	2c01      	cmp	r4, #1
   126e8:	d009      	beq.n	126fe <lorawan_send+0xa6>
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   126ea:	4b15      	ldr	r3, [pc, #84]	; (12740 <lorawan_send+0xe8>)
		mcps_req.Req.Unconfirmed.fBufferSize = len;
   126ec:	f8ad 5020 	strh.w	r5, [sp, #32]
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   126f0:	f993 4000 	ldrsb.w	r4, [r3]
	bool empty_frame = false;
   126f4:	2500      	movs	r5, #0
		mcps_req.Req.Unconfirmed.fPort = port;
   126f6:	f88d 7018 	strb.w	r7, [sp, #24]
		mcps_req.Req.Unconfirmed.fBuffer = data;
   126fa:	9607      	str	r6, [sp, #28]
		mcps_req.Req.Unconfirmed.Datarate = current_datarate;
   126fc:	e7d4      	b.n	126a8 <lorawan_send+0x50>
			mcps_req.Type = MCPS_CONFIRMED;
   126fe:	f88d 4014 	strb.w	r4, [sp, #20]
			break;
   12702:	e7f2      	b.n	126ea <lorawan_send+0x92>
	return z_impl_k_sem_take(sem, timeout);
   12704:	f04f 33ff 	mov.w	r3, #4294967295
   12708:	f04f 32ff 	mov.w	r2, #4294967295
   1270c:	480d      	ldr	r0, [pc, #52]	; (12744 <lorawan_send+0xec>)
   1270e:	f013 fb07 	bl	25d20 <z_impl_k_sem_take>
	if (last_mcps_confirm_status != LORAMAC_EVENT_INFO_STATUS_OK) {
   12712:	4b0d      	ldr	r3, [pc, #52]	; (12748 <lorawan_send+0xf0>)
   12714:	7818      	ldrb	r0, [r3, #0]
   12716:	b108      	cbz	r0, 1271c <lorawan_send+0xc4>
		ret = lorawan_eventinfo2errno(last_mcps_confirm_status);
   12718:	f000 f8b6 	bl	12888 <lorawan_eventinfo2errno>
		ret = -EAGAIN;
   1271c:	2d00      	cmp	r5, #0
	int ret = 0;
   1271e:	4604      	mov	r4, r0
		ret = -EAGAIN;
   12720:	bf18      	it	ne
   12722:	f06f 040a 	mvnne.w	r4, #10
   12726:	e7d7      	b.n	126d8 <lorawan_send+0x80>
		return -EINVAL;
   12728:	f06f 0415 	mvn.w	r4, #21
   1272c:	e7d7      	b.n	126de <lorawan_send+0x86>
   1272e:	bf00      	nop
   12730:	20008c68 	.word	0x20008c68
   12734:	00035ffd 	.word	0x00035ffd
   12738:	000332cc 	.word	0x000332cc
   1273c:	00036022 	.word	0x00036022
   12740:	200319ad 	.word	0x200319ad
   12744:	20008de0 	.word	0x20008de0
   12748:	200319ab 	.word	0x200319ab

0001274c <lorawan_register_downlink_callback>:
	parent->next = child;
   1274c:	2300      	movs	r3, #0
   1274e:	6083      	str	r3, [r0, #8]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12750:	4b05      	ldr	r3, [pc, #20]	; (12768 <lorawan_register_downlink_callback+0x1c>)
	sys_slist_append(&dl_callbacks, &cb->node);
   12752:	f100 0208 	add.w	r2, r0, #8
   12756:	6859      	ldr	r1, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   12758:	b911      	cbnz	r1, 12760 <lorawan_register_downlink_callback+0x14>
	list->head = node;
   1275a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1275e:	4770      	bx	lr
	parent->next = child;
   12760:	600a      	str	r2, [r1, #0]
	list->tail = node;
   12762:	605a      	str	r2, [r3, #4]
}
   12764:	4770      	bx	lr
   12766:	bf00      	nop
   12768:	2002fa84 	.word	0x2002fa84

0001276c <lorawan_register_dr_changed_callback>:
	dr_change_cb = cb;
   1276c:	4b01      	ldr	r3, [pc, #4]	; (12774 <lorawan_register_dr_changed_callback+0x8>)
   1276e:	6018      	str	r0, [r3, #0]
}
   12770:	4770      	bx	lr
   12772:	bf00      	nop
   12774:	2002fa5c 	.word	0x2002fa5c

00012778 <lorawan_start>:
{
   12778:	b570      	push	{r4, r5, r6, lr}
	status = LoRaMacInitialization(&mac_primitives, &mac_callbacks,
   1277a:	4e24      	ldr	r6, [pc, #144]	; (1280c <lorawan_start+0x94>)
   1277c:	4924      	ldr	r1, [pc, #144]	; (12810 <lorawan_start+0x98>)
   1277e:	7832      	ldrb	r2, [r6, #0]
   12780:	4824      	ldr	r0, [pc, #144]	; (12814 <lorawan_start+0x9c>)
{
   12782:	b092      	sub	sp, #72	; 0x48
	status = LoRaMacInitialization(&mac_primitives, &mac_callbacks,
   12784:	f004 fb0c 	bl	16da0 <LoRaMacInitialization>
	if (status != LORAMAC_STATUS_OK) {
   12788:	4604      	mov	r4, r0
   1278a:	b180      	cbz	r0, 127ae <lorawan_start+0x36>
		LOG_ERR("LoRaMacInitialization failed: %s",
   1278c:	f000 f852 	bl	12834 <lorawan_status2str>
   12790:	4b21      	ldr	r3, [pc, #132]	; (12818 <lorawan_start+0xa0>)
   12792:	9003      	str	r0, [sp, #12]
   12794:	9302      	str	r3, [sp, #8]
   12796:	2300      	movs	r3, #0
   12798:	e9cd 3300 	strd	r3, r3, [sp]
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
   1279c:	4618      	mov	r0, r3
   1279e:	2201      	movs	r2, #1
   127a0:	491e      	ldr	r1, [pc, #120]	; (1281c <lorawan_start+0xa4>)
   127a2:	f019 fa20 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   127a6:	f06f 0015 	mvn.w	r0, #21
}
   127aa:	b012      	add	sp, #72	; 0x48
   127ac:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("LoRaMAC Initialized");
   127ae:	4b1c      	ldr	r3, [pc, #112]	; (12820 <lorawan_start+0xa8>)
   127b0:	2204      	movs	r2, #4
   127b2:	9303      	str	r3, [sp, #12]
   127b4:	4b1b      	ldr	r3, [pc, #108]	; (12824 <lorawan_start+0xac>)
   127b6:	4919      	ldr	r1, [pc, #100]	; (1281c <lorawan_start+0xa4>)
   127b8:	9302      	str	r3, [sp, #8]
   127ba:	2308      	movs	r3, #8
   127bc:	e9cd 0300 	strd	r0, r3, [sp]
   127c0:	4603      	mov	r3, r0
   127c2:	f019 fa10 	bl	2bbe6 <z_log_msg_runtime_create.constprop.0>
	status = LoRaMacStart();
   127c6:	f004 fcb1 	bl	1712c <LoRaMacStart>
	if (status != LORAMAC_STATUS_OK) {
   127ca:	4605      	mov	r5, r0
   127cc:	b140      	cbz	r0, 127e0 <lorawan_start+0x68>
		LOG_ERR("Failed to start the LoRaMAC stack: %s",
   127ce:	f000 f831 	bl	12834 <lorawan_status2str>
   127d2:	4b15      	ldr	r3, [pc, #84]	; (12828 <lorawan_start+0xb0>)
   127d4:	9003      	str	r0, [sp, #12]
   127d6:	e9cd 4301 	strd	r4, r3, [sp, #4]
   127da:	9400      	str	r4, [sp, #0]
   127dc:	4623      	mov	r3, r4
   127de:	e7dd      	b.n	1279c <lorawan_start+0x24>
	phy_params.Attribute = PHY_DEF_TX_DR;
   127e0:	2306      	movs	r3, #6
	phy_param = RegionGetPhyParam(selected_region, &phy_params);
   127e2:	a906      	add	r1, sp, #24
   127e4:	7830      	ldrb	r0, [r6, #0]
	phy_params.Attribute = PHY_DEF_TX_DR;
   127e6:	f88d 3018 	strb.w	r3, [sp, #24]
	phy_param = RegionGetPhyParam(selected_region, &phy_params);
   127ea:	f01a faa0 	bl	2cd2e <RegionGetPhyParam>
	default_datarate = phy_param.Value;
   127ee:	4b0f      	ldr	r3, [pc, #60]	; (1282c <lorawan_start+0xb4>)
   127f0:	b2c0      	uxtb	r0, r0
   127f2:	7018      	strb	r0, [r3, #0]
	current_datarate = default_datarate;
   127f4:	4b0e      	ldr	r3, [pc, #56]	; (12830 <lorawan_start+0xb8>)
   127f6:	7018      	strb	r0, [r3, #0]
	mib_req.Type = MIB_SYSTEM_MAX_RX_ERROR;
   127f8:	2330      	movs	r3, #48	; 0x30
   127fa:	f88d 3020 	strb.w	r3, [sp, #32]
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
   127fe:	23c8      	movs	r3, #200	; 0xc8
	LoRaMacMibSetRequestConfirm(&mib_req);
   12800:	a808      	add	r0, sp, #32
	mib_req.Param.SystemMaxRxError = CONFIG_LORAWAN_SYSTEM_MAX_RX_ERROR;
   12802:	9309      	str	r3, [sp, #36]	; 0x24
	LoRaMacMibSetRequestConfirm(&mib_req);
   12804:	f004 fddc 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	return 0;
   12808:	4628      	mov	r0, r5
   1280a:	e7ce      	b.n	127aa <lorawan_start+0x32>
   1280c:	20008b16 	.word	0x20008b16
   12810:	2002fa64 	.word	0x2002fa64
   12814:	2002fa74 	.word	0x2002fa74
   12818:	0003603a 	.word	0x0003603a
   1281c:	000332cc 	.word	0x000332cc
   12820:	000360f3 	.word	0x000360f3
   12824:	0003605b 	.word	0x0003605b
   12828:	00036073 	.word	0x00036073
   1282c:	200319ae 	.word	0x200319ae
   12830:	200319ad 	.word	0x200319ad

00012834 <lorawan_status2str>:
	[LORAMAC_STATUS_ERROR] = "Unknown error",
};

const char *lorawan_status2str(unsigned int status)
{
	if (status < ARRAY_SIZE(status2str)) {
   12834:	2817      	cmp	r0, #23
		return status2str[status];
   12836:	bf9a      	itte	ls
   12838:	4b02      	ldrls	r3, [pc, #8]	; (12844 <lorawan_status2str+0x10>)
   1283a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown status!";
   1283e:	4802      	ldrhi	r0, [pc, #8]	; (12848 <lorawan_status2str+0x14>)
	}
}
   12840:	4770      	bx	lr
   12842:	bf00      	nop
   12844:	00033bb4 	.word	0x00033bb4
   12848:	00036129 	.word	0x00036129

0001284c <lorawan_eventinfo2str>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = "Beacon not found",
};

const char *lorawan_eventinfo2str(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2str)) {
   1284c:	280f      	cmp	r0, #15
		return eventinfo2str[status];
   1284e:	bf9a      	itte	ls
   12850:	4b02      	ldrls	r3, [pc, #8]	; (1285c <lorawan_eventinfo2str+0x10>)
   12852:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
	} else {
		return "Unknown event!";
   12856:	4802      	ldrhi	r0, [pc, #8]	; (12860 <lorawan_eventinfo2str+0x14>)
	}
}
   12858:	4770      	bx	lr
   1285a:	bf00      	nop
   1285c:	00033b74 	.word	0x00033b74
   12860:	00036139 	.word	0x00036139

00012864 <lorawan_status2errno>:
	[LORAMAC_STATUS_MC_GROUP_UNDEFINED] = -EINVAL,
};

const int lorawan_status2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
   12864:	2816      	cmp	r0, #22
{
   12866:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(status2errno) && status2errno[status] != 0) {
   12868:	d808      	bhi.n	1287c <lorawan_status2errno+0x18>
   1286a:	4a06      	ldr	r2, [pc, #24]	; (12884 <lorawan_status2errno+0x20>)
   1286c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   12870:	b930      	cbnz	r0, 12880 <lorawan_status2errno+0x1c>
		return status2errno[status];
	} else {
		return status == LORAMAC_STATUS_OK ? 0 : -EINVAL;
   12872:	2b00      	cmp	r3, #0
   12874:	bf18      	it	ne
   12876:	f06f 0015 	mvnne.w	r0, #21
   1287a:	4770      	bx	lr
   1287c:	f06f 0015 	mvn.w	r0, #21
	}
}
   12880:	4770      	bx	lr
   12882:	bf00      	nop
   12884:	00033b18 	.word	0x00033b18

00012888 <lorawan_eventinfo2errno>:
	[LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND] = -EINVAL,
};

const int lorawan_eventinfo2errno(unsigned int status)
{
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   12888:	280f      	cmp	r0, #15
{
   1288a:	4603      	mov	r3, r0
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   1288c:	d808      	bhi.n	128a0 <lorawan_eventinfo2errno+0x18>
	    eventinfo2errno[status] != 0) {
   1288e:	4a06      	ldr	r2, [pc, #24]	; (128a8 <lorawan_eventinfo2errno+0x20>)
   12890:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
	if (status < ARRAY_SIZE(eventinfo2errno) &&
   12894:	b930      	cbnz	r0, 128a4 <lorawan_eventinfo2errno+0x1c>
		return eventinfo2errno[status];
	} else {
		return status == LORAMAC_EVENT_INFO_STATUS_OK ? 0 : -EINVAL;
   12896:	2b00      	cmp	r3, #0
   12898:	bf18      	it	ne
   1289a:	f06f 0015 	mvnne.w	r0, #21
   1289e:	4770      	bx	lr
   128a0:	f06f 0015 	mvn.w	r0, #21
	}
}
   128a4:	4770      	bx	lr
   128a6:	bf00      	nop
   128a8:	00033ad8 	.word	0x00033ad8

000128ac <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
   128ac:	4801      	ldr	r0, [pc, #4]	; (128b4 <timer_callback+0x8>)
   128ae:	f013 bb8d 	b.w	25fcc <k_work_submit>
   128b2:	bf00      	nop
   128b4:	20008538 	.word	0x20008538

000128b8 <RtcBkupWrite>:

K_TIMER_DEFINE(lora_timer, timer_callback, NULL);

void RtcBkupWrite(uint32_t data0, uint32_t data1)
{
	backup_reg[0] = data0;
   128b8:	4b01      	ldr	r3, [pc, #4]	; (128c0 <RtcBkupWrite+0x8>)
   128ba:	6018      	str	r0, [r3, #0]
	backup_reg[1] = data1;
   128bc:	6059      	str	r1, [r3, #4]
}
   128be:	4770      	bx	lr
   128c0:	2002fa8c 	.word	0x2002fa8c

000128c4 <RtcBkupRead>:

void RtcBkupRead(uint32_t *data0, uint32_t *data1)
{
	*data0 = backup_reg[0];
   128c4:	4b02      	ldr	r3, [pc, #8]	; (128d0 <RtcBkupRead+0xc>)
   128c6:	681a      	ldr	r2, [r3, #0]
	*data1 = backup_reg[1];
   128c8:	685b      	ldr	r3, [r3, #4]
	*data0 = backup_reg[0];
   128ca:	6002      	str	r2, [r0, #0]
	*data1 = backup_reg[1];
   128cc:	600b      	str	r3, [r1, #0]
}
   128ce:	4770      	bx	lr
   128d0:	2002fa8c 	.word	0x2002fa8c

000128d4 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
   128d4:	b508      	push	{r3, lr}
	return (k_uptime_get_32() - saved_time);
   128d6:	f019 f9ba 	bl	2bc4e <k_uptime_get_32>
   128da:	4b02      	ldr	r3, [pc, #8]	; (128e4 <RtcGetTimerElapsedTime+0x10>)
   128dc:	681b      	ldr	r3, [r3, #0]
}
   128de:	1ac0      	subs	r0, r0, r3
   128e0:	bd08      	pop	{r3, pc}
   128e2:	bf00      	nop
   128e4:	2002fa94 	.word	0x2002fa94

000128e8 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
   128e8:	4801      	ldr	r0, [pc, #4]	; (128f0 <RtcStopAlarm+0x8>)
   128ea:	f01e bef4 	b.w	316d6 <z_impl_k_timer_stop>
   128ee:	bf00      	nop
   128f0:	20008b50 	.word	0x20008b50

000128f4 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
   128f4:	b507      	push	{r0, r1, r2, lr}
   128f6:	4601      	mov	r1, r0
			return ((t * to_hz + off) / from_hz);
   128f8:	f240 30e7 	movw	r0, #999	; 0x3e7
   128fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12900:	2300      	movs	r3, #0
   12902:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   12906:	0c49      	lsrs	r1, r1, #17
   12908:	f7f6 fb1a 	bl	8f40 <__aeabi_uldivmod>
   1290c:	4602      	mov	r2, r0
   1290e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   12910:	2100      	movs	r1, #0
   12912:	2000      	movs	r0, #0
   12914:	e9cd 0100 	strd	r0, r1, [sp]
   12918:	4802      	ldr	r0, [pc, #8]	; (12924 <RtcSetAlarm+0x30>)
   1291a:	f014 f957 	bl	26bcc <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
   1291e:	b003      	add	sp, #12
   12920:	f85d fb04 	ldr.w	pc, [sp], #4
   12924:	20008b50 	.word	0x20008b50

00012928 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
   12928:	b508      	push	{r3, lr}
	saved_time = k_uptime_get_32();
   1292a:	f019 f990 	bl	2bc4e <k_uptime_get_32>
   1292e:	4b01      	ldr	r3, [pc, #4]	; (12934 <RtcSetTimerContext+0xc>)
   12930:	6018      	str	r0, [r3, #0]

	return saved_time;
}
   12932:	bd08      	pop	{r3, pc}
   12934:	2002fa94 	.word	0x2002fa94

00012938 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
   12938:	4b01      	ldr	r3, [pc, #4]	; (12940 <RtcGetTimerContext+0x8>)
   1293a:	6818      	ldr	r0, [r3, #0]
   1293c:	4770      	bx	lr
   1293e:	bf00      	nop
   12940:	2002fa94 	.word	0x2002fa94

00012944 <sx12xx_ev_rx_done>:
	return true;
}

static void sx12xx_ev_rx_done(uint8_t *payload, uint16_t size, int16_t rssi,
			      int8_t snr)
{
   12944:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
   12948:	4c23      	ldr	r4, [pc, #140]	; (129d8 <sx12xx_ev_rx_done+0x94>)
{
   1294a:	469a      	mov	sl, r3

	/* Receiving in asynchronous mode */
	if (dev_data.async_rx_cb) {
   1294c:	e9d4 9301 	ldrd	r9, r3, [r4, #4]
{
   12950:	4607      	mov	r7, r0
   12952:	460d      	mov	r5, r1
   12954:	4616      	mov	r6, r2
	if (dev_data.async_rx_cb) {
   12956:	b17b      	cbz	r3, 12978 <sx12xx_ev_rx_done+0x34>
		/* Start receiving again */
		Radio.Rx(0);
   12958:	4b20      	ldr	r3, [pc, #128]	; (129dc <sx12xx_ev_rx_done+0x98>)
   1295a:	2000      	movs	r0, #0
   1295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1295e:	4798      	blx	r3
		/* Run the callback */
		dev_data.async_rx_cb(dev_data.dev, payload, size, rssi, snr);
   12960:	f8cd a000 	str.w	sl, [sp]
   12964:	4633      	mov	r3, r6
   12966:	462a      	mov	r2, r5
   12968:	4639      	mov	r1, r7
   1296a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   1296e:	6820      	ldr	r0, [r4, #0]
   12970:	47c0      	blx	r8
	/* Completely release modem */
	dev_data.operation_done = NULL;
	atomic_clear(&dev_data.modem_usage);
	/* Notify caller RX is complete */
	k_poll_signal_raise(sig, 0);
}
   12972:	b002      	add	sp, #8
   12974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12978:	2302      	movs	r3, #2
   1297a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1297e:	e8d2 1fef 	ldaex	r1, [r2]
   12982:	2901      	cmp	r1, #1
   12984:	d103      	bne.n	1298e <sx12xx_ev_rx_done+0x4a>
   12986:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1298a:	2800      	cmp	r0, #0
   1298c:	d1f7      	bne.n	1297e <sx12xx_ev_rx_done+0x3a>
   1298e:	4690      	mov	r8, r2
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
   12990:	d1ef      	bne.n	12972 <sx12xx_ev_rx_done+0x2e>
	if (size < *dev_data.rx_params.size) {
   12992:	6ca3      	ldr	r3, [r4, #72]	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12994:	4639      	mov	r1, r7
   12996:	781a      	ldrb	r2, [r3, #0]
   12998:	42aa      	cmp	r2, r5
		*dev_data.rx_params.size = size;
   1299a:	bf88      	it	hi
   1299c:	701d      	strbhi	r5, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
   1299e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   129a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
   129a2:	781a      	ldrb	r2, [r3, #0]
   129a4:	f01f f83d 	bl	31a22 <memcpy>
	if (dev_data.rx_params.rssi) {
   129a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   129aa:	b103      	cbz	r3, 129ae <sx12xx_ev_rx_done+0x6a>
		*dev_data.rx_params.rssi = rssi;
   129ac:	801e      	strh	r6, [r3, #0]
	if (dev_data.rx_params.snr) {
   129ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   129b0:	b10b      	cbz	r3, 129b6 <sx12xx_ev_rx_done+0x72>
		*dev_data.rx_params.snr = snr;
   129b2:	f883 a000 	strb.w	sl, [r3]
	Radio.Sleep();
   129b6:	4b09      	ldr	r3, [pc, #36]	; (129dc <sx12xx_ev_rx_done+0x98>)
   129b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   129ba:	4798      	blx	r3
	dev_data.operation_done = NULL;
   129bc:	2100      	movs	r1, #0
   129be:	6061      	str	r1, [r4, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   129c0:	e8d8 3fef 	ldaex	r3, [r8]
   129c4:	e8c8 1fe2 	stlex	r2, r1, [r8]
   129c8:	2a00      	cmp	r2, #0
   129ca:	d1f9      	bne.n	129c0 <sx12xx_ev_rx_done+0x7c>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   129cc:	4648      	mov	r0, r9
}
   129ce:	b002      	add	sp, #8
   129d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129d4:	f014 b9a2 	b.w	26d1c <z_impl_k_poll_signal_raise>
   129d8:	2002fa98 	.word	0x2002fa98
   129dc:	00033c2c 	.word	0x00033c2c

000129e0 <modem_release.constprop.0>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   129e0:	2302      	movs	r3, #2
static bool modem_release(struct sx12xx_data *data)
   129e2:	b510      	push	{r4, lr}
   129e4:	4c0d      	ldr	r4, [pc, #52]	; (12a1c <modem_release.constprop.0+0x3c>)
   129e6:	e8d4 2fef 	ldaex	r2, [r4]
   129ea:	2a01      	cmp	r2, #1
   129ec:	d103      	bne.n	129f6 <modem_release.constprop.0+0x16>
   129ee:	e8c4 3fe1 	stlex	r1, r3, [r4]
   129f2:	2900      	cmp	r1, #0
   129f4:	d1f7      	bne.n	129e6 <modem_release.constprop.0+0x6>
   129f6:	bf0c      	ite	eq
   129f8:	2001      	moveq	r0, #1
   129fa:	2000      	movne	r0, #0
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
   129fc:	d10c      	bne.n	12a18 <modem_release.constprop.0+0x38>
	Radio.Sleep();
   129fe:	4b08      	ldr	r3, [pc, #32]	; (12a20 <modem_release.constprop.0+0x40>)
   12a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12a02:	4798      	blx	r3
	data->operation_done = NULL;
   12a04:	2300      	movs	r3, #0
   12a06:	f844 3c3c 	str.w	r3, [r4, #-60]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12a0a:	e8d4 2fef 	ldaex	r2, [r4]
   12a0e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   12a12:	2900      	cmp	r1, #0
   12a14:	d1f9      	bne.n	12a0a <modem_release.constprop.0+0x2a>
	return true;
   12a16:	2001      	movs	r0, #1
}
   12a18:	bd10      	pop	{r4, pc}
   12a1a:	bf00      	nop
   12a1c:	2002fad8 	.word	0x2002fad8
   12a20:	00033c2c 	.word	0x00033c2c

00012a24 <sx12xx_ev_tx_done>:

static void sx12xx_ev_tx_done(void)
{
   12a24:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
   12a26:	4b06      	ldr	r3, [pc, #24]	; (12a40 <sx12xx_ev_tx_done+0x1c>)
   12a28:	685c      	ldr	r4, [r3, #4]

	if (modem_release(&dev_data)) {
   12a2a:	f7ff ffd9 	bl	129e0 <modem_release.constprop.0>
   12a2e:	b130      	cbz	r0, 12a3e <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
   12a30:	b12c      	cbz	r4, 12a3e <sx12xx_ev_tx_done+0x1a>
   12a32:	2100      	movs	r1, #0
   12a34:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
   12a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12a3a:	f014 b96f 	b.w	26d1c <z_impl_k_poll_signal_raise>
   12a3e:	bd10      	pop	{r4, pc}
   12a40:	2002fa98 	.word	0x2002fa98

00012a44 <__sx12xx_configure_pin>:
{
   12a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a46:	4604      	mov	r4, r0
   12a48:	460e      	mov	r6, r1
	if (!device_is_ready(gpio->port)) {
   12a4a:	6800      	ldr	r0, [r0, #0]
{
   12a4c:	b087      	sub	sp, #28
   12a4e:	f01e fa14 	bl	30e7a <z_device_is_ready>
   12a52:	6825      	ldr	r5, [r4, #0]
   12a54:	4603      	mov	r3, r0
	if (!device_is_ready(gpio->port)) {
   12a56:	b970      	cbnz	r0, 12a76 <__sx12xx_configure_pin+0x32>
		LOG_ERR("GPIO device not ready %s", gpio->port->name);
   12a58:	682a      	ldr	r2, [r5, #0]
   12a5a:	491f      	ldr	r1, [pc, #124]	; (12ad8 <__sx12xx_configure_pin+0x94>)
   12a5c:	9203      	str	r2, [sp, #12]
   12a5e:	4a1f      	ldr	r2, [pc, #124]	; (12adc <__sx12xx_configure_pin+0x98>)
   12a60:	9000      	str	r0, [sp, #0]
   12a62:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12a66:	2201      	movs	r2, #1
   12a68:	f019 f939 	bl	2bcde <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   12a6c:	f06f 0512 	mvn.w	r5, #18
}
   12a70:	4628      	mov	r0, r5
   12a72:	b007      	add	sp, #28
   12a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				  spec->dt_flags | extra_flags);
   12a76:	88e3      	ldrh	r3, [r4, #6]
				  spec->pin,
   12a78:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   12a7a:	4333      	orrs	r3, r6
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   12a7c:	02d8      	lsls	r0, r3, #11
	const struct gpio_driver_api *api =
   12a7e:	f8d5 c008 	ldr.w	ip, [r5, #8]
	struct gpio_driver_data *data =
   12a82:	692f      	ldr	r7, [r5, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   12a84:	d506      	bpl.n	12a94 <__sx12xx_configure_pin+0x50>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   12a86:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
   12a8a:	d003      	beq.n	12a94 <__sx12xx_configure_pin+0x50>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   12a8c:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   12a8e:	bf48      	it	mi
   12a90:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12a94:	2601      	movs	r6, #1
   12a96:	6838      	ldr	r0, [r7, #0]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   12a98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12a9c:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12a9e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12aa0:	bf4c      	ite	mi
   12aa2:	4330      	orrmi	r0, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12aa4:	43b0      	bicpl	r0, r6
   12aa6:	6038      	str	r0, [r7, #0]
	return api->pin_configure(port, pin, flags);
   12aa8:	f8dc 3000 	ldr.w	r3, [ip]
   12aac:	4628      	mov	r0, r5
   12aae:	4798      	blx	r3
	if (err) {
   12ab0:	4605      	mov	r5, r0
   12ab2:	2800      	cmp	r0, #0
   12ab4:	d0dc      	beq.n	12a70 <__sx12xx_configure_pin+0x2c>
		LOG_ERR("Cannot configure gpio %s %d: %d", gpio->port->name,
   12ab6:	9005      	str	r0, [sp, #20]
   12ab8:	7923      	ldrb	r3, [r4, #4]
   12aba:	2201      	movs	r2, #1
   12abc:	9304      	str	r3, [sp, #16]
   12abe:	6823      	ldr	r3, [r4, #0]
   12ac0:	4905      	ldr	r1, [pc, #20]	; (12ad8 <__sx12xx_configure_pin+0x94>)
   12ac2:	681b      	ldr	r3, [r3, #0]
   12ac4:	9303      	str	r3, [sp, #12]
   12ac6:	4b06      	ldr	r3, [pc, #24]	; (12ae0 <__sx12xx_configure_pin+0x9c>)
   12ac8:	9302      	str	r3, [sp, #8]
   12aca:	2300      	movs	r3, #0
   12acc:	4618      	mov	r0, r3
   12ace:	e9cd 3300 	strd	r3, r3, [sp]
   12ad2:	f019 f904 	bl	2bcde <z_log_msg_runtime_create.constprop.0>
		return err;
   12ad6:	e7cb      	b.n	12a70 <__sx12xx_configure_pin+0x2c>
   12ad8:	0003332c 	.word	0x0003332c
   12adc:	000363c1 	.word	0x000363c1
   12ae0:	000363da 	.word	0x000363da

00012ae4 <sx12xx_lora_send_async>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12ae4:	2001      	movs	r0, #1
	return ret;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
   12ae6:	b570      	push	{r4, r5, r6, lr}
   12ae8:	460d      	mov	r5, r1
   12aea:	490d      	ldr	r1, [pc, #52]	; (12b20 <sx12xx_lora_send_async+0x3c>)
   12aec:	e8d1 4fef 	ldaex	r4, [r1]
   12af0:	2c00      	cmp	r4, #0
   12af2:	d103      	bne.n	12afc <sx12xx_lora_send_async+0x18>
   12af4:	e8c1 0fe6 	stlex	r6, r0, [r1]
   12af8:	2e00      	cmp	r6, #0
   12afa:	d1f7      	bne.n	12aec <sx12xx_lora_send_async+0x8>
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
   12afc:	d10c      	bne.n	12b18 <sx12xx_lora_send_async+0x34>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   12afe:	4e09      	ldr	r6, [pc, #36]	; (12b24 <sx12xx_lora_send_async+0x40>)
   12b00:	b2d4      	uxtb	r4, r2
	dev_data.operation_done = async;
   12b02:	f841 3c3c 	str.w	r3, [r1, #-60]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
   12b06:	4621      	mov	r1, r4
   12b08:	6d73      	ldr	r3, [r6, #84]	; 0x54
   12b0a:	4798      	blx	r3

	Radio.Send(data, data_len);
   12b0c:	4628      	mov	r0, r5
   12b0e:	4621      	mov	r1, r4
   12b10:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   12b12:	4798      	blx	r3

	return 0;
   12b14:	2000      	movs	r0, #0
}
   12b16:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   12b18:	f06f 000f 	mvn.w	r0, #15
   12b1c:	e7fb      	b.n	12b16 <sx12xx_lora_send_async+0x32>
   12b1e:	bf00      	nop
   12b20:	2002fad8 	.word	0x2002fad8
   12b24:	00033c2c 	.word	0x00033c2c

00012b28 <sx12xx_lora_send>:
{
   12b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12b2c:	2400      	movs	r4, #0
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12b2e:	2601      	movs	r6, #1
{
   12b30:	b090      	sub	sp, #64	; 0x40
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12b32:	ad07      	add	r5, sp, #28
{
   12b34:	4681      	mov	r9, r0
   12b36:	468a      	mov	sl, r1
   12b38:	4617      	mov	r7, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12b3a:	4621      	mov	r1, r4
   12b3c:	2210      	movs	r2, #16
	if (!dev_data.tx_cfg.frequency) {
   12b3e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 12c10 <sx12xx_lora_send+0xe8>
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12b42:	a80b      	add	r0, sp, #44	; 0x2c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12b44:	e9cd 5507 	strd	r5, r5, [sp, #28]
   12b48:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12b4c:	f01e ffa3 	bl	31a96 <memset>
   12b50:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
	if (!dev_data.tx_cfg.frequency) {
   12b54:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12b58:	950f      	str	r5, [sp, #60]	; 0x3c
	if (!dev_data.tx_cfg.frequency) {
   12b5a:	2b00      	cmp	r3, #0
   12b5c:	d054      	beq.n	12c08 <sx12xx_lora_send+0xe0>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
   12b5e:	462b      	mov	r3, r5
   12b60:	463a      	mov	r2, r7
   12b62:	4651      	mov	r1, sl
   12b64:	4648      	mov	r0, r9
   12b66:	f7ff ffbd 	bl	12ae4 <sx12xx_lora_send_async>
	if (ret < 0) {
   12b6a:	1e05      	subs	r5, r0, #0
   12b6c:	db48      	blt.n	12c00 <sx12xx_lora_send+0xd8>
	air_time = Radio.TimeOnAir(MODEM_LORA,
   12b6e:	b2fb      	uxtb	r3, r7
   12b70:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12b74:	9603      	str	r6, [sp, #12]
   12b76:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   12b7a:	4d26      	ldr	r5, [pc, #152]	; (12c14 <sx12xx_lora_send+0xec>)
   12b7c:	9300      	str	r3, [sp, #0]
   12b7e:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
   12b82:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
   12b86:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
   12b8a:	4630      	mov	r0, r6
   12b8c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
   12b8e:	47a8      	blx	r5
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
   12b90:	4b21      	ldr	r3, [pc, #132]	; (12c18 <sx12xx_lora_send+0xf0>)
	air_time = Radio.TimeOnAir(MODEM_LORA,
   12b92:	4605      	mov	r5, r0
	LOG_DBG("Expected air time of %d bytes = %dms", data_len, air_time);
   12b94:	9303      	str	r3, [sp, #12]
   12b96:	4b21      	ldr	r3, [pc, #132]	; (12c1c <sx12xx_lora_send+0xf4>)
   12b98:	e9cd 7004 	strd	r7, r0, [sp, #16]
   12b9c:	9302      	str	r3, [sp, #8]
   12b9e:	2308      	movs	r3, #8
   12ba0:	4620      	mov	r0, r4
   12ba2:	e9cd 4300 	strd	r4, r3, [sp]
   12ba6:	2204      	movs	r2, #4
   12ba8:	4623      	mov	r3, r4
   12baa:	491d      	ldr	r1, [pc, #116]	; (12c20 <sx12xx_lora_send+0xf8>)
   12bac:	f019 f897 	bl	2bcde <z_log_msg_runtime_create.constprop.0>
   12bb0:	f240 30e7 	movw	r0, #999	; 0x3e7
   12bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12bb8:	2300      	movs	r3, #0
   12bba:	eb00 4005 	add.w	r0, r0, r5, lsl #16
   12bbe:	f3c5 410e 	ubfx	r1, r5, #16, #15
   12bc2:	f7f6 f9bd 	bl	8f40 <__aeabi_uldivmod>
   12bc6:	4602      	mov	r2, r0
   12bc8:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
   12bca:	4631      	mov	r1, r6
   12bcc:	a80b      	add	r0, sp, #44	; 0x2c
   12bce:	f014 f849 	bl	26c64 <z_impl_k_poll>
	if (ret < 0) {
   12bd2:	1e05      	subs	r5, r0, #0
   12bd4:	da14      	bge.n	12c00 <sx12xx_lora_send+0xd8>
		LOG_ERR("Packet transmission failed!");
   12bd6:	4b13      	ldr	r3, [pc, #76]	; (12c24 <sx12xx_lora_send+0xfc>)
   12bd8:	4632      	mov	r2, r6
   12bda:	4620      	mov	r0, r4
   12bdc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12be0:	490f      	ldr	r1, [pc, #60]	; (12c20 <sx12xx_lora_send+0xf8>)
   12be2:	4623      	mov	r3, r4
   12be4:	9400      	str	r4, [sp, #0]
   12be6:	f019 f87a 	bl	2bcde <z_log_msg_runtime_create.constprop.0>
		if (!modem_release(&dev_data)) {
   12bea:	f7ff fef9 	bl	129e0 <modem_release.constprop.0>
   12bee:	b938      	cbnz	r0, 12c00 <sx12xx_lora_send+0xd8>
   12bf0:	f04f 32ff 	mov.w	r2, #4294967295
   12bf4:	f04f 33ff 	mov.w	r3, #4294967295
   12bf8:	4631      	mov	r1, r6
   12bfa:	a80b      	add	r0, sp, #44	; 0x2c
   12bfc:	f014 f832 	bl	26c64 <z_impl_k_poll>
}
   12c00:	4628      	mov	r0, r5
   12c02:	b010      	add	sp, #64	; 0x40
   12c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   12c08:	f06f 0515 	mvn.w	r5, #21
   12c0c:	e7f8      	b.n	12c00 <sx12xx_lora_send+0xd8>
   12c0e:	bf00      	nop
   12c10:	2002fa98 	.word	0x2002fa98
   12c14:	00033c2c 	.word	0x00033c2c
   12c18:	0003644f 	.word	0x0003644f
   12c1c:	000363fa 	.word	0x000363fa
   12c20:	0003332c 	.word	0x0003332c
   12c24:	00036423 	.word	0x00036423

00012c28 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
   12c28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12c2a:	2400      	movs	r4, #0
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12c2c:	2601      	movs	r6, #1
{
   12c2e:	b091      	sub	sp, #68	; 0x44
   12c30:	f88d 2017 	strb.w	r2, [sp, #23]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12c34:	ad07      	add	r5, sp, #28
{
   12c36:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12c38:	2210      	movs	r2, #16
   12c3a:	4621      	mov	r1, r4
   12c3c:	a80b      	add	r0, sp, #44	; 0x2c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
   12c3e:	e9cd 5507 	strd	r5, r5, [sp, #28]
   12c42:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
   12c46:	f01e ff26 	bl	31a96 <memset>
   12c4a:	4b22      	ldr	r3, [pc, #136]	; (12cd4 <sx12xx_lora_recv+0xac>)
   12c4c:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
   12c50:	950f      	str	r5, [sp, #60]	; 0x3c
   12c52:	e8d3 2fef 	ldaex	r2, [r3]
   12c56:	42a2      	cmp	r2, r4
   12c58:	d103      	bne.n	12c62 <sx12xx_lora_recv+0x3a>
   12c5a:	e8c3 6fe1 	stlex	r1, r6, [r3]
   12c5e:	2900      	cmp	r1, #0
   12c60:	d1f7      	bne.n	12c52 <sx12xx_lora_recv+0x2a>
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
   12c62:	d134      	bne.n	12cce <sx12xx_lora_recv+0xa6>
	dev_data.async_rx_cb = NULL;
	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
   12c64:	f10d 0217 	add.w	r2, sp, #23
   12c68:	609a      	str	r2, [r3, #8]
	dev_data.rx_params.rssi = rssi;
   12c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
	dev_data.operation_done = &done;
   12c6c:	e943 540f 	strd	r5, r4, [r3, #-60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
   12c70:	60da      	str	r2, [r3, #12]
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12c72:	4d19      	ldr	r5, [pc, #100]	; (12cd8 <sx12xx_lora_recv+0xb0>)
	dev_data.rx_params.snr = snr;
   12c74:	9a19      	ldr	r2, [sp, #100]	; 0x64
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12c76:	21ff      	movs	r1, #255	; 0xff
	dev_data.rx_params.snr = snr;
   12c78:	611a      	str	r2, [r3, #16]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12c7a:	4630      	mov	r0, r6
	dev_data.rx_params.buf = data;
   12c7c:	605f      	str	r7, [r3, #4]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12c7e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   12c80:	4798      	blx	r3
	Radio.Rx(0);
   12c82:	4620      	mov	r0, r4
   12c84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   12c86:	4798      	blx	r3
   12c88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   12c8c:	4631      	mov	r1, r6
   12c8e:	a80b      	add	r0, sp, #44	; 0x2c
   12c90:	f013 ffe8 	bl	26c64 <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
   12c94:	1e05      	subs	r5, r0, #0
   12c96:	da0a      	bge.n	12cae <sx12xx_lora_recv+0x86>
		if (!modem_release(&dev_data)) {
   12c98:	f7ff fea2 	bl	129e0 <modem_release.constprop.0>
   12c9c:	b950      	cbnz	r0, 12cb4 <sx12xx_lora_recv+0x8c>
   12c9e:	f04f 32ff 	mov.w	r2, #4294967295
   12ca2:	f04f 33ff 	mov.w	r3, #4294967295
   12ca6:	4631      	mov	r1, r6
   12ca8:	a80b      	add	r0, sp, #44	; 0x2c
   12caa:	f013 ffdb 	bl	26c64 <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
   12cae:	f89d 5017 	ldrb.w	r5, [sp, #23]
   12cb2:	e009      	b.n	12cc8 <sx12xx_lora_recv+0xa0>
		LOG_INF("Receive timeout");
   12cb4:	4b09      	ldr	r3, [pc, #36]	; (12cdc <sx12xx_lora_recv+0xb4>)
   12cb6:	2203      	movs	r2, #3
   12cb8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12cbc:	4620      	mov	r0, r4
   12cbe:	4623      	mov	r3, r4
   12cc0:	4907      	ldr	r1, [pc, #28]	; (12ce0 <sx12xx_lora_recv+0xb8>)
   12cc2:	9400      	str	r4, [sp, #0]
   12cc4:	f019 f80b 	bl	2bcde <z_log_msg_runtime_create.constprop.0>
}
   12cc8:	4628      	mov	r0, r5
   12cca:	b011      	add	sp, #68	; 0x44
   12ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
   12cce:	f06f 050f 	mvn.w	r5, #15
   12cd2:	e7f9      	b.n	12cc8 <sx12xx_lora_recv+0xa0>
   12cd4:	2002fad8 	.word	0x2002fad8
   12cd8:	00033c2c 	.word	0x00033c2c
   12cdc:	0003643f 	.word	0x0003643f
   12ce0:	0003332c 	.word	0x0003332c

00012ce4 <sx12xx_lora_recv_async>:

int sx12xx_lora_recv_async(const struct device *dev, lora_recv_cb cb)
{
   12ce4:	b510      	push	{r4, lr}
	/* Cancel ongoing reception */
	if (cb == NULL) {
   12ce6:	b929      	cbnz	r1, 12cf4 <sx12xx_lora_recv_async+0x10>
		if (!modem_release(&dev_data)) {
   12ce8:	f7ff fe7a 	bl	129e0 <modem_release.constprop.0>
   12cec:	b9b0      	cbnz	r0, 12d1c <sx12xx_lora_recv_async+0x38>
			/* Not receiving or already being stopped */
			return -EINVAL;
   12cee:	f06f 0015 	mvn.w	r0, #21
	/* Start reception */
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
	Radio.Rx(0);

	return 0;
}
   12cf2:	bd10      	pop	{r4, pc}
   12cf4:	2001      	movs	r0, #1
   12cf6:	4b0c      	ldr	r3, [pc, #48]	; (12d28 <sx12xx_lora_recv_async+0x44>)
   12cf8:	e8d3 2fef 	ldaex	r2, [r3]
   12cfc:	2a00      	cmp	r2, #0
   12cfe:	d103      	bne.n	12d08 <sx12xx_lora_recv_async+0x24>
   12d00:	e8c3 0fe4 	stlex	r4, r0, [r3]
   12d04:	2c00      	cmp	r4, #0
   12d06:	d1f7      	bne.n	12cf8 <sx12xx_lora_recv_async+0x14>
	if (!modem_acquire(&dev_data)) {
   12d08:	d10a      	bne.n	12d20 <sx12xx_lora_recv_async+0x3c>
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12d0a:	4c08      	ldr	r4, [pc, #32]	; (12d2c <sx12xx_lora_recv_async+0x48>)
	dev_data.async_rx_cb = cb;
   12d0c:	f843 1c38 	str.w	r1, [r3, #-56]
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
   12d10:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12d12:	21ff      	movs	r1, #255	; 0xff
   12d14:	4798      	blx	r3
	Radio.Rx(0);
   12d16:	2000      	movs	r0, #0
   12d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12d1a:	4798      	blx	r3
		return 0;
   12d1c:	2000      	movs	r0, #0
   12d1e:	e7e8      	b.n	12cf2 <sx12xx_lora_recv_async+0xe>
		return -EBUSY;
   12d20:	f06f 000f 	mvn.w	r0, #15
   12d24:	e7e5      	b.n	12cf2 <sx12xx_lora_recv_async+0xe>
   12d26:	bf00      	nop
   12d28:	2002fad8 	.word	0x2002fad8
   12d2c:	00033c2c 	.word	0x00033c2c

00012d30 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
   12d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d32:	460c      	mov	r4, r1
   12d34:	2701      	movs	r7, #1
   12d36:	4d29      	ldr	r5, [pc, #164]	; (12ddc <sx12xx_lora_config+0xac>)
   12d38:	b08b      	sub	sp, #44	; 0x2c
   12d3a:	e8d5 3fef 	ldaex	r3, [r5]
   12d3e:	2b00      	cmp	r3, #0
   12d40:	d103      	bne.n	12d4a <sx12xx_lora_config+0x1a>
   12d42:	e8c5 7fe2 	stlex	r2, r7, [r5]
   12d46:	2a00      	cmp	r2, #0
   12d48:	d1f7      	bne.n	12d3a <sx12xx_lora_config+0xa>
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
   12d4a:	d143      	bne.n	12dd4 <sx12xx_lora_config+0xa4>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
   12d4c:	4e24      	ldr	r6, [pc, #144]	; (12de0 <sx12xx_lora_config+0xb0>)
   12d4e:	6820      	ldr	r0, [r4, #0]
   12d50:	68f3      	ldr	r3, [r6, #12]
   12d52:	4798      	blx	r3

	if (config->tx) {
   12d54:	7ae3      	ldrb	r3, [r4, #11]
   12d56:	b34b      	cbz	r3, 12dac <sx12xx_lora_config+0x7c>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
   12d58:	4623      	mov	r3, r4
   12d5a:	3d10      	subs	r5, #16
   12d5c:	f104 0710 	add.w	r7, r4, #16
   12d60:	462a      	mov	r2, r5
   12d62:	6818      	ldr	r0, [r3, #0]
   12d64:	6859      	ldr	r1, [r3, #4]
   12d66:	3308      	adds	r3, #8
   12d68:	c203      	stmia	r2!, {r0, r1}
   12d6a:	42bb      	cmp	r3, r7
   12d6c:	4615      	mov	r5, r2
   12d6e:	d1f7      	bne.n	12d60 <sx12xx_lora_config+0x30>
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
   12d70:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   12d74:	2200      	movs	r2, #0
   12d76:	2001      	movs	r0, #1
   12d78:	9308      	str	r3, [sp, #32]
   12d7a:	7b23      	ldrb	r3, [r4, #12]
   12d7c:	e9cd 2205 	strd	r2, r2, [sp, #20]
   12d80:	e9cd 2003 	strd	r2, r0, [sp, #12]
   12d84:	9307      	str	r3, [sp, #28]
   12d86:	8923      	ldrh	r3, [r4, #8]
   12d88:	69f5      	ldr	r5, [r6, #28]
   12d8a:	9302      	str	r3, [sp, #8]
   12d8c:	79a3      	ldrb	r3, [r4, #6]
   12d8e:	9301      	str	r3, [sp, #4]
   12d90:	7963      	ldrb	r3, [r4, #5]
   12d92:	9300      	str	r3, [sp, #0]
   12d94:	7923      	ldrb	r3, [r4, #4]
   12d96:	f994 100a 	ldrsb.w	r1, [r4, #10]
   12d9a:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, config->iq_inverted, true);
	}

	Radio.SetPublicNetwork(config->public_network);
   12d9c:	6db3      	ldr	r3, [r6, #88]	; 0x58
   12d9e:	7b60      	ldrb	r0, [r4, #13]
   12da0:	4798      	blx	r3

	modem_release(&dev_data);
   12da2:	f7ff fe1d 	bl	129e0 <modem_release.constprop.0>
	return 0;
   12da6:	2000      	movs	r0, #0
}
   12da8:	b00b      	add	sp, #44	; 0x2c
   12daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
   12dac:	9709      	str	r7, [sp, #36]	; 0x24
   12dae:	7b22      	ldrb	r2, [r4, #12]
   12db0:	e9cd 3305 	strd	r3, r3, [sp, #20]
   12db4:	e9cd 3207 	strd	r3, r2, [sp, #28]
   12db8:	220a      	movs	r2, #10
   12dba:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12dbe:	9202      	str	r2, [sp, #8]
   12dc0:	8922      	ldrh	r2, [r4, #8]
   12dc2:	4638      	mov	r0, r7
   12dc4:	e9cd 3200 	strd	r3, r2, [sp]
   12dc8:	69b5      	ldr	r5, [r6, #24]
   12dca:	79a3      	ldrb	r3, [r4, #6]
   12dcc:	7962      	ldrb	r2, [r4, #5]
   12dce:	7921      	ldrb	r1, [r4, #4]
   12dd0:	47a8      	blx	r5
   12dd2:	e7e3      	b.n	12d9c <sx12xx_lora_config+0x6c>
		return -EBUSY;
   12dd4:	f06f 000f 	mvn.w	r0, #15
   12dd8:	e7e6      	b.n	12da8 <sx12xx_lora_config+0x78>
   12dda:	bf00      	nop
   12ddc:	2002fad8 	.word	0x2002fad8
   12de0:	00033c2c 	.word	0x00033c2c

00012de4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
   12de4:	b538      	push	{r3, r4, r5, lr}
   12de6:	2401      	movs	r4, #1
   12de8:	4608      	mov	r0, r1
   12dea:	4611      	mov	r1, r2
   12dec:	461a      	mov	r2, r3
   12dee:	4b09      	ldr	r3, [pc, #36]	; (12e14 <sx12xx_lora_test_cw+0x30>)
   12df0:	e8d3 5fef 	ldaex	r5, [r3]
   12df4:	2d00      	cmp	r5, #0
   12df6:	d104      	bne.n	12e02 <sx12xx_lora_test_cw+0x1e>
   12df8:	e8c3 4fec 	stlex	ip, r4, [r3]
   12dfc:	f1bc 0f00 	cmp.w	ip, #0
   12e00:	d1f6      	bne.n	12df0 <sx12xx_lora_test_cw+0xc>
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
   12e02:	d104      	bne.n	12e0e <sx12xx_lora_test_cw+0x2a>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
   12e04:	4b04      	ldr	r3, [pc, #16]	; (12e18 <sx12xx_lora_test_cw+0x34>)
   12e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   12e08:	4798      	blx	r3
	return 0;
   12e0a:	2000      	movs	r0, #0
}
   12e0c:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   12e0e:	f06f 000f 	mvn.w	r0, #15
   12e12:	e7fb      	b.n	12e0c <sx12xx_lora_test_cw+0x28>
   12e14:	2002fad8 	.word	0x2002fad8
   12e18:	00033c2c 	.word	0x00033c2c

00012e1c <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
   12e1c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12e1e:	2400      	movs	r4, #0
   12e20:	4b0b      	ldr	r3, [pc, #44]	; (12e50 <sx12xx_init+0x34>)
   12e22:	e8d3 2fef 	ldaex	r2, [r3]
   12e26:	e8c3 4fe1 	stlex	r1, r4, [r3]
   12e2a:	2900      	cmp	r1, #0
   12e2c:	d1f9      	bne.n	12e22 <sx12xx_init+0x6>
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.dev = dev;
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   12e2e:	4909      	ldr	r1, [pc, #36]	; (12e54 <sx12xx_init+0x38>)
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
   12e30:	4d09      	ldr	r5, [pc, #36]	; (12e58 <sx12xx_init+0x3c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
   12e32:	f843 1c34 	str.w	r1, [r3, #-52]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   12e36:	4909      	ldr	r1, [pc, #36]	; (12e5c <sx12xx_init+0x40>)
	Radio.Init(&dev_data.events);
   12e38:	682a      	ldr	r2, [r5, #0]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
   12e3a:	f843 1c2c 	str.w	r1, [r3, #-44]
	dev_data.dev = dev;
   12e3e:	f843 0c40 	str.w	r0, [r3, #-64]
	Radio.Init(&dev_data.events);
   12e42:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   12e46:	4790      	blx	r2
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
   12e48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   12e4a:	4798      	blx	r3

	return 0;
}
   12e4c:	4620      	mov	r0, r4
   12e4e:	bd38      	pop	{r3, r4, r5, pc}
   12e50:	2002fad8 	.word	0x2002fad8
   12e54:	00012a25 	.word	0x00012a25
   12e58:	00033c2c 	.word	0x00033c2c
   12e5c:	00012945 	.word	0x00012945

00012e60 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
   12e60:	4b03      	ldr	r3, [pc, #12]	; (12e70 <sx127x_dio_work_handle+0x10>)
   12e62:	1ac0      	subs	r0, r0, r3

	(*DioIrq[dio])(NULL);
   12e64:	4b03      	ldr	r3, [pc, #12]	; (12e74 <sx127x_dio_work_handle+0x14>)
	int dio = work - dev_data.dio_work;
   12e66:	1100      	asrs	r0, r0, #4
	(*DioIrq[dio])(NULL);
   12e68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   12e6c:	2000      	movs	r0, #0
   12e6e:	4718      	bx	r3
   12e70:	2002fb04 	.word	0x2002fb04
   12e74:	20008558 	.word	0x20008558

00012e78 <sx127x_irq_callback>:
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == sx127x_dios[i].port &&
   12e78:	4b08      	ldr	r3, [pc, #32]	; (12e9c <sx127x_irq_callback+0x24>)
   12e7a:	4283      	cmp	r3, r0
   12e7c:	d10d      	bne.n	12e9a <sx127x_irq_callback+0x22>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   12e7e:	fa92 f3a2 	rbit	r3, r2
   12e82:	fab3 f383 	clz	r3, r3
   12e86:	b142      	cbz	r2, 12e9a <sx127x_irq_callback+0x22>
   12e88:	2b0b      	cmp	r3, #11
   12e8a:	d102      	bne.n	12e92 <sx127x_irq_callback+0x1a>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
   12e8c:	4804      	ldr	r0, [pc, #16]	; (12ea0 <sx127x_irq_callback+0x28>)
   12e8e:	f013 b89d 	b.w	25fcc <k_work_submit>
		if (dev == sx127x_dios[i].port &&
   12e92:	2b0c      	cmp	r3, #12
   12e94:	d101      	bne.n	12e9a <sx127x_irq_callback+0x22>
			k_work_submit(&dev_data.dio_work[i]);
   12e96:	4803      	ldr	r0, [pc, #12]	; (12ea4 <sx127x_irq_callback+0x2c>)
   12e98:	e7f9      	b.n	12e8e <sx127x_irq_callback+0x16>
		}
	}
}
   12e9a:	4770      	bx	lr
   12e9c:	00032b14 	.word	0x00032b14
   12ea0:	2002fb04 	.word	0x2002fb04
   12ea4:	2002fb14 	.word	0x2002fb14

00012ea8 <gpio_pin_set_dt.constprop.0.isra.0>:
	const struct gpio_driver_data *const data =
   12ea8:	4b08      	ldr	r3, [pc, #32]	; (12ecc <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   12eaa:	691a      	ldr	r2, [r3, #16]
   12eac:	6812      	ldr	r2, [r2, #0]
   12eae:	0552      	lsls	r2, r2, #21
		value = (value != 0) ? 0 : 1;
   12eb0:	bf48      	it	mi
   12eb2:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
   12eb6:	b128      	cbz	r0, 12ec4 <gpio_pin_set_dt.constprop.0.isra.0+0x1c>
	return api->port_set_bits_raw(port, pins);
   12eb8:	689b      	ldr	r3, [r3, #8]
   12eba:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   12ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   12ec0:	4802      	ldr	r0, [pc, #8]	; (12ecc <gpio_pin_set_dt.constprop.0.isra.0+0x24>)
   12ec2:	4718      	bx	r3
   12ec4:	689b      	ldr	r3, [r3, #8]
   12ec6:	691b      	ldr	r3, [r3, #16]
   12ec8:	e7f8      	b.n	12ebc <gpio_pin_set_dt.constprop.0.isra.0+0x14>
   12eca:	bf00      	nop
   12ecc:	00032b14 	.word	0x00032b14

00012ed0 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
   12ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed4:	4680      	mov	r8, r0
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   12ed6:	2600      	movs	r6, #0
   12ed8:	4c36      	ldr	r4, [pc, #216]	; (12fb4 <SX1276IoIrqInit+0xe4>)
   12eda:	4d37      	ldr	r5, [pc, #220]	; (12fb8 <SX1276IoIrqInit+0xe8>)
			LOG_ERR("GPIO port %s not ready",
				sx127x_dios[i].port->name);
			return;
		}

		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   12edc:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 12fbc <SX1276IoIrqInit+0xec>
{
   12ee0:	b085      	sub	sp, #20
		if (!irqHandlers[i]) {
   12ee2:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	d05d      	beq.n	12fa6 <SX1276IoIrqInit+0xd6>
		if (!device_is_ready(sx127x_dios[i].port)) {
   12eea:	6827      	ldr	r7, [r4, #0]
   12eec:	4638      	mov	r0, r7
   12eee:	f01d ffc4 	bl	30e7a <z_device_is_ready>
   12ef2:	4603      	mov	r3, r0
   12ef4:	b960      	cbnz	r0, 12f10 <SX1276IoIrqInit+0x40>
			LOG_ERR("GPIO port %s not ready",
   12ef6:	683a      	ldr	r2, [r7, #0]
   12ef8:	4931      	ldr	r1, [pc, #196]	; (12fc0 <SX1276IoIrqInit+0xf0>)
   12efa:	9203      	str	r2, [sp, #12]
   12efc:	4a31      	ldr	r2, [pc, #196]	; (12fc4 <SX1276IoIrqInit+0xf4>)
   12efe:	9000      	str	r0, [sp, #0]
   12f00:	e9cd 0201 	strd	r0, r2, [sp, #4]
   12f04:	2201      	movs	r2, #1
   12f06:	f018 fefc 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
		}
		gpio_pin_interrupt_configure_dt(&sx127x_dios[i],
						GPIO_INT_EDGE_TO_ACTIVE);
	}

}
   12f0a:	b005      	add	sp, #20
   12f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
   12f10:	eb0b 1006 	add.w	r0, fp, r6, lsl #4
   12f14:	492c      	ldr	r1, [pc, #176]	; (12fc8 <SX1276IoIrqInit+0xf8>)
   12f16:	f01e f9b7 	bl	31288 <k_work_init>
				  spec->dt_flags | extra_flags);
   12f1a:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
   12f1c:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   12f1e:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   12f20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   12f24:	f013 0f01 	tst.w	r3, #1
   12f28:	f04f 0301 	mov.w	r3, #1
	struct gpio_driver_data *data =
   12f2c:	f8d0 e010 	ldr.w	lr, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12f30:	fa03 f301 	lsl.w	r3, r3, r1
   12f34:	f8de c000 	ldr.w	ip, [lr]
	const struct gpio_driver_api *api =
   12f38:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   12f3c:	bf14      	ite	ne
   12f3e:	ea43 030c 	orrne.w	r3, r3, ip
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   12f42:	ea2c 0303 	biceq.w	r3, ip, r3
   12f46:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
   12f4a:	f8d9 3000 	ldr.w	r3, [r9]
   12f4e:	4798      	blx	r3
				   BIT(sx127x_dios[i].pin));
   12f50:	2201      	movs	r2, #1
   12f52:	f894 9004 	ldrb.w	r9, [r4, #4]
	callback->handler = handler;
   12f56:	4b1d      	ldr	r3, [pc, #116]	; (12fcc <SX1276IoIrqInit+0xfc>)
   12f58:	fa02 fa09 	lsl.w	sl, r2, r9
	callback->pin_mask = pin_mask;
   12f5c:	e9c5 3a01 	strd	r3, sl, [r5, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   12f60:	68bb      	ldr	r3, [r7, #8]
   12f62:	69db      	ldr	r3, [r3, #28]
   12f64:	b953      	cbnz	r3, 12f7c <SX1276IoIrqInit+0xac>
			LOG_ERR("Could not set gpio callback.");
   12f66:	4b1a      	ldr	r3, [pc, #104]	; (12fd0 <SX1276IoIrqInit+0x100>)
   12f68:	2201      	movs	r2, #1
   12f6a:	9302      	str	r3, [sp, #8]
   12f6c:	2300      	movs	r3, #0
   12f6e:	4914      	ldr	r1, [pc, #80]	; (12fc0 <SX1276IoIrqInit+0xf0>)
   12f70:	4618      	mov	r0, r3
   12f72:	e9cd 3300 	strd	r3, r3, [sp]
   12f76:	f018 fec4 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
			return;
   12f7a:	e7c6      	b.n	12f0a <SX1276IoIrqInit+0x3a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   12f7c:	4629      	mov	r1, r5
   12f7e:	4638      	mov	r0, r7
   12f80:	4798      	blx	r3
		if (gpio_add_callback(sx127x_dios[i].port, &callbacks[i]) < 0) {
   12f82:	2800      	cmp	r0, #0
   12f84:	dbef      	blt.n	12f66 <SX1276IoIrqInit+0x96>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   12f86:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   12f88:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   12f8a:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   12f8c:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12f8e:	699f      	ldr	r7, [r3, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   12f90:	ea1a 0f02 	tst.w	sl, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
   12f94:	bf14      	ite	ne
   12f96:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   12f9a:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   12f9e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   12fa2:	4649      	mov	r1, r9
   12fa4:	47b8      	blx	r7
	for (i = 0; i < SX127X_MAX_DIO; i++) {
   12fa6:	3408      	adds	r4, #8
   12fa8:	350c      	adds	r5, #12
   12faa:	2e00      	cmp	r6, #0
   12fac:	d1ad      	bne.n	12f0a <SX1276IoIrqInit+0x3a>
   12fae:	2601      	movs	r6, #1
   12fb0:	e797      	b.n	12ee2 <SX1276IoIrqInit+0x12>
   12fb2:	bf00      	nop
   12fb4:	00033cb0 	.word	0x00033cb0
   12fb8:	2002faec 	.word	0x2002faec
   12fbc:	2002fb04 	.word	0x2002fb04
   12fc0:	00033324 	.word	0x00033324
   12fc4:	0003646e 	.word	0x0003646e
   12fc8:	00012e61 	.word	0x00012e61
   12fcc:	00012e79 	.word	0x00012e79
   12fd0:	00036485 	.word	0x00036485

00012fd4 <sx127x_read>:

	return spi_write_dt(&dev_config.bus, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
   12fd4:	b510      	push	{r4, lr}
   12fd6:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
   12fd8:	f10d 0307 	add.w	r3, sp, #7
   12fdc:	9306      	str	r3, [sp, #24]
   12fde:	2301      	movs	r3, #1
   12fe0:	e9cd 3107 	strd	r3, r1, [sp, #28]
	struct spi_buf_set tx = {
   12fe4:	2302      	movs	r3, #2
	return sx127x_transceive(reg_addr, false, data, len);
   12fe6:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
   12fe8:	aa06      	add	r2, sp, #24
		const struct spi_buf_set rx = {
   12fea:	e9cd 3203 	strd	r3, r2, [sp, #12]
   12fee:	f88d 0007 	strb.w	r0, [sp, #7]
	struct spi_buf_set tx = {
   12ff2:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
   12ff4:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   12ff6:	4804      	ldr	r0, [pc, #16]	; (13008 <sx127x_read+0x34>)
   12ff8:	4904      	ldr	r1, [pc, #16]	; (1300c <sx127x_read+0x38>)
   12ffa:	6883      	ldr	r3, [r0, #8]
   12ffc:	aa02      	add	r2, sp, #8
   12ffe:	681c      	ldr	r4, [r3, #0]
   13000:	ab04      	add	r3, sp, #16
   13002:	47a0      	blx	r4
}
   13004:	b00a      	add	sp, #40	; 0x28
   13006:	bd10      	pop	{r4, pc}
   13008:	00032c04 	.word	0x00032c04
   1300c:	00033c9c 	.word	0x00033c9c

00013010 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
   13010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13012:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
   13014:	b2c0      	uxtb	r0, r0
   13016:	f7ff ffdd 	bl	12fd4 <sx127x_read>
	if (ret < 0) {
   1301a:	2800      	cmp	r0, #0
   1301c:	da0a      	bge.n	13034 <SX1276ReadBuffer+0x24>
		LOG_ERR("Unable to read address: 0x%x", addr);
   1301e:	4b06      	ldr	r3, [pc, #24]	; (13038 <SX1276ReadBuffer+0x28>)
   13020:	2201      	movs	r2, #1
   13022:	9302      	str	r3, [sp, #8]
   13024:	2300      	movs	r3, #0
   13026:	4905      	ldr	r1, [pc, #20]	; (1303c <SX1276ReadBuffer+0x2c>)
   13028:	4618      	mov	r0, r3
   1302a:	e9cd 3300 	strd	r3, r3, [sp]
   1302e:	9403      	str	r4, [sp, #12]
   13030:	f018 fe67 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
	}
}
   13034:	b004      	add	sp, #16
   13036:	bd10      	pop	{r4, pc}
   13038:	000364a2 	.word	0x000364a2
   1303c:	00033324 	.word	0x00033324

00013040 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
   13040:	b530      	push	{r4, r5, lr}
   13042:	4605      	mov	r5, r0
   13044:	b087      	sub	sp, #28
   13046:	482f      	ldr	r0, [pc, #188]	; (13104 <sx127x_lora_init+0xc4>)
   13048:	f01d ff17 	bl	30e7a <z_device_is_ready>
	if (!device_is_ready(spec->bus)) {
   1304c:	b368      	cbz	r0, 130aa <sx127x_lora_init+0x6a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   1304e:	4b2e      	ldr	r3, [pc, #184]	; (13108 <sx127x_lora_init+0xc8>)
   13050:	6818      	ldr	r0, [r3, #0]
   13052:	f01d ff12 	bl	30e7a <z_device_is_ready>
	if (spec->config.cs &&
   13056:	b340      	cbz	r0, 130aa <sx127x_lora_init+0x6a>
	if (ret) {
		return ret;
	}

	/* Setup Reset gpio and perform soft reset */
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
   13058:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
   1305c:	482b      	ldr	r0, [pc, #172]	; (1310c <sx127x_lora_init+0xcc>)
   1305e:	f7ff fcf1 	bl	12a44 <__sx12xx_configure_pin>
	if (ret) {
   13062:	4604      	mov	r4, r0
   13064:	bb68      	cbnz	r0, 130c2 <sx127x_lora_init+0x82>
	return z_impl_k_sleep(timeout);
   13066:	2100      	movs	r1, #0
   13068:	f640 40cd 	movw	r0, #3277	; 0xccd
   1306c:	f013 fb56 	bl	2671c <z_impl_k_sleep>
		return ret;
	}

	k_sleep(K_MSEC(100));
	gpio_pin_set_dt(&dev_config.reset, 0);
   13070:	4620      	mov	r0, r4
   13072:	f7ff ff19 	bl	12ea8 <gpio_pin_set_dt.constprop.0.isra.0>
   13076:	2100      	movs	r1, #0
   13078:	f640 40cd 	movw	r0, #3277	; 0xccd
   1307c:	f013 fb4e 	bl	2671c <z_impl_k_sleep>
	k_sleep(K_MSEC(100));

	ret = sx127x_read(REG_VERSION, &regval, 1);
   13080:	2201      	movs	r2, #1
   13082:	2042      	movs	r0, #66	; 0x42
   13084:	f10d 0117 	add.w	r1, sp, #23
   13088:	f7ff ffa4 	bl	12fd4 <sx127x_read>
	if (ret < 0) {
   1308c:	2800      	cmp	r0, #0
   1308e:	da1b      	bge.n	130c8 <sx127x_lora_init+0x88>
		LOG_ERR("Unable to read version info");
   13090:	4b1f      	ldr	r3, [pc, #124]	; (13110 <sx127x_lora_init+0xd0>)
   13092:	4620      	mov	r0, r4
   13094:	e9cd 4301 	strd	r4, r3, [sp, #4]
   13098:	9400      	str	r4, [sp, #0]
   1309a:	4623      	mov	r3, r4
   1309c:	2201      	movs	r2, #1
   1309e:	491d      	ldr	r1, [pc, #116]	; (13114 <sx127x_lora_init+0xd4>)
   130a0:	f018 fe2f 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   130a4:	f06f 0404 	mvn.w	r4, #4
   130a8:	e00b      	b.n	130c2 <sx127x_lora_init+0x82>
		LOG_ERR("SPI device not ready");
   130aa:	4b1b      	ldr	r3, [pc, #108]	; (13118 <sx127x_lora_init+0xd8>)
   130ac:	2201      	movs	r2, #1
   130ae:	9302      	str	r3, [sp, #8]
   130b0:	2300      	movs	r3, #0
   130b2:	4918      	ldr	r1, [pc, #96]	; (13114 <sx127x_lora_init+0xd4>)
   130b4:	4618      	mov	r0, r3
   130b6:	e9cd 3300 	strd	r3, r3, [sp]
   130ba:	f018 fe22 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   130be:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
   130c2:	4620      	mov	r0, r4
   130c4:	b007      	add	sp, #28
   130c6:	bd30      	pop	{r4, r5, pc}
	LOG_INF("SX127x version 0x%02x found", regval);
   130c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   130cc:	2203      	movs	r2, #3
   130ce:	9303      	str	r3, [sp, #12]
   130d0:	4b12      	ldr	r3, [pc, #72]	; (1311c <sx127x_lora_init+0xdc>)
   130d2:	4620      	mov	r0, r4
   130d4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   130d8:	490e      	ldr	r1, [pc, #56]	; (13114 <sx127x_lora_init+0xd4>)
   130da:	4623      	mov	r3, r4
   130dc:	9400      	str	r4, [sp, #0]
   130de:	f018 fe10 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
	ret = sx12xx_init(dev);
   130e2:	4628      	mov	r0, r5
   130e4:	f7ff fe9a 	bl	12e1c <sx12xx_init>
	if (ret < 0) {
   130e8:	1e05      	subs	r5, r0, #0
   130ea:	daea      	bge.n	130c2 <sx127x_lora_init+0x82>
		LOG_ERR("Failed to initialize SX12xx common");
   130ec:	4b0c      	ldr	r3, [pc, #48]	; (13120 <sx127x_lora_init+0xe0>)
   130ee:	4620      	mov	r0, r4
   130f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   130f4:	9400      	str	r4, [sp, #0]
   130f6:	4623      	mov	r3, r4
   130f8:	2201      	movs	r2, #1
   130fa:	4906      	ldr	r1, [pc, #24]	; (13114 <sx127x_lora_init+0xd4>)
   130fc:	f018 fe01 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
		return ret;
   13100:	462c      	mov	r4, r5
   13102:	e7de      	b.n	130c2 <sx127x_lora_init+0x82>
   13104:	00032c04 	.word	0x00032c04
   13108:	20008548 	.word	0x20008548
   1310c:	00033ca8 	.word	0x00033ca8
   13110:	000364d4 	.word	0x000364d4
   13114:	00033324 	.word	0x00033324
   13118:	000364bf 	.word	0x000364bf
   1311c:	000364f0 	.word	0x000364f0
   13120:	0003650c 	.word	0x0003650c

00013124 <sx127x_write>:
{
   13124:	b510      	push	{r4, lr}
   13126:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
   13128:	f10d 0307 	add.w	r3, sp, #7
   1312c:	9304      	str	r3, [sp, #16]
   1312e:	2301      	movs	r3, #1
   13130:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
   13134:	ab04      	add	r3, sp, #16
   13136:	9302      	str	r3, [sp, #8]
   13138:	2302      	movs	r3, #2
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
   1313a:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1313e:	f88d 0007 	strb.w	r0, [sp, #7]
   13142:	9207      	str	r2, [sp, #28]
	struct spi_buf_set tx = {
   13144:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   13146:	4804      	ldr	r0, [pc, #16]	; (13158 <sx127x_write+0x34>)
   13148:	4904      	ldr	r1, [pc, #16]	; (1315c <sx127x_write+0x38>)
   1314a:	6883      	ldr	r3, [r0, #8]
   1314c:	aa02      	add	r2, sp, #8
   1314e:	681c      	ldr	r4, [r3, #0]
   13150:	2300      	movs	r3, #0
   13152:	47a0      	blx	r4
}
   13154:	b008      	add	sp, #32
   13156:	bd10      	pop	{r4, pc}
   13158:	00032c04 	.word	0x00032c04
   1315c:	00033c9c 	.word	0x00033c9c

00013160 <SX1276WriteBuffer>:
{
   13160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13162:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
   13164:	b2c0      	uxtb	r0, r0
   13166:	f7ff ffdd 	bl	13124 <sx127x_write>
	if (ret < 0) {
   1316a:	2800      	cmp	r0, #0
   1316c:	da0a      	bge.n	13184 <SX1276WriteBuffer+0x24>
		LOG_ERR("Unable to write address: 0x%x", addr);
   1316e:	4b06      	ldr	r3, [pc, #24]	; (13188 <SX1276WriteBuffer+0x28>)
   13170:	2201      	movs	r2, #1
   13172:	9302      	str	r3, [sp, #8]
   13174:	2300      	movs	r3, #0
   13176:	4905      	ldr	r1, [pc, #20]	; (1318c <SX1276WriteBuffer+0x2c>)
   13178:	4618      	mov	r0, r3
   1317a:	e9cd 3300 	strd	r3, r3, [sp]
   1317e:	9403      	str	r4, [sp, #12]
   13180:	f018 fdbf 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
}
   13184:	b004      	add	sp, #16
   13186:	bd10      	pop	{r4, pc}
   13188:	0003652f 	.word	0x0003652f
   1318c:	00033324 	.word	0x00033324

00013190 <SX1276SetRfTxPower>:
{
   13190:	b530      	push	{r4, r5, lr}
	uint8_t pa_config = 0;
   13192:	2400      	movs	r4, #0
{
   13194:	b087      	sub	sp, #28
   13196:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   13198:	2201      	movs	r2, #1
   1319a:	204d      	movs	r0, #77	; 0x4d
   1319c:	f10d 0117 	add.w	r1, sp, #23
	uint8_t pa_config = 0;
   131a0:	f88d 4016 	strb.w	r4, [sp, #22]
	uint8_t pa_dac = 0;
   131a4:	f88d 4017 	strb.w	r4, [sp, #23]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
   131a8:	f7ff ff14 	bl	12fd4 <sx127x_read>
	if (ret < 0) {
   131ac:	42a0      	cmp	r0, r4
   131ae:	da0b      	bge.n	131c8 <SX1276SetRfTxPower+0x38>
		LOG_ERR("Unable to read PA dac");
   131b0:	4b21      	ldr	r3, [pc, #132]	; (13238 <SX1276SetRfTxPower+0xa8>)
   131b2:	9400      	str	r4, [sp, #0]
   131b4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   131b8:	4623      	mov	r3, r4
		LOG_ERR("Unable to write PA dac");
   131ba:	2201      	movs	r2, #1
   131bc:	4618      	mov	r0, r3
   131be:	491f      	ldr	r1, [pc, #124]	; (1323c <SX1276SetRfTxPower+0xac>)
   131c0:	f018 fd9f 	bl	2bd02 <z_log_msg_runtime_create.constprop.0>
}
   131c4:	b007      	add	sp, #28
   131c6:	bd30      	pop	{r4, r5, pc}
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   131c8:	2d14      	cmp	r5, #20
   131ca:	462a      	mov	r2, r5
   131cc:	bfa8      	it	ge
   131ce:	2214      	movge	r2, #20
   131d0:	2a02      	cmp	r2, #2
   131d2:	bfb8      	it	lt
   131d4:	2202      	movlt	r2, #2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   131d6:	f89d 1017 	ldrb.w	r1, [sp, #23]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   131da:	f89d 3016 	ldrb.w	r3, [sp, #22]
		if (power > 17) {
   131de:	2d11      	cmp	r5, #17
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   131e0:	b2d2      	uxtb	r2, r2
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
   131e2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   131e6:	bfcc      	ite	gt
   131e8:	3a05      	subgt	r2, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   131ea:	3a02      	suble	r2, #2
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
   131ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			pa_dac |= SX127X_PADAC_20DBM_ON;
   131f0:	bfcc      	ite	gt
   131f2:	f041 0107 	orrgt.w	r1, r1, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   131f6:	f041 0104 	orrle.w	r1, r1, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   131fa:	4313      	orrs	r3, r2
   131fc:	b2db      	uxtb	r3, r3
			pa_dac |= SX127X_PADAC_20DBM_OFF;
   131fe:	f88d 1017 	strb.w	r1, [sp, #23]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   13202:	2201      	movs	r2, #1
   13204:	2009      	movs	r0, #9
   13206:	f10d 0116 	add.w	r1, sp, #22
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
   1320a:	f88d 3016 	strb.w	r3, [sp, #22]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
   1320e:	f7ff ff89 	bl	13124 <sx127x_write>
	if (ret < 0) {
   13212:	2800      	cmp	r0, #0
   13214:	da05      	bge.n	13222 <SX1276SetRfTxPower+0x92>
		LOG_ERR("Unable to write PA config");
   13216:	4b0a      	ldr	r3, [pc, #40]	; (13240 <SX1276SetRfTxPower+0xb0>)
		LOG_ERR("Unable to write PA dac");
   13218:	9302      	str	r3, [sp, #8]
   1321a:	2300      	movs	r3, #0
   1321c:	e9cd 3300 	strd	r3, r3, [sp]
   13220:	e7cb      	b.n	131ba <SX1276SetRfTxPower+0x2a>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
   13222:	2201      	movs	r2, #1
   13224:	204d      	movs	r0, #77	; 0x4d
   13226:	f10d 0117 	add.w	r1, sp, #23
   1322a:	f7ff ff7b 	bl	13124 <sx127x_write>
	if (ret < 0) {
   1322e:	2800      	cmp	r0, #0
   13230:	dac8      	bge.n	131c4 <SX1276SetRfTxPower+0x34>
		LOG_ERR("Unable to write PA dac");
   13232:	4b04      	ldr	r3, [pc, #16]	; (13244 <SX1276SetRfTxPower+0xb4>)
   13234:	e7f0      	b.n	13218 <SX1276SetRfTxPower+0x88>
   13236:	bf00      	nop
   13238:	0003654d 	.word	0x0003654d
   1323c:	00033324 	.word	0x00033324
   13240:	00036563 	.word	0x00036563
   13244:	0003657d 	.word	0x0003657d

00013248 <SX1276GetDio1PinState>:
{
   13248:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_driver_data *const data =
   1324a:	4809      	ldr	r0, [pc, #36]	; (13270 <SX1276GetDio1PinState+0x28>)
   1324c:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
   1324e:	6883      	ldr	r3, [r0, #8]
   13250:	a901      	add	r1, sp, #4
   13252:	685b      	ldr	r3, [r3, #4]
   13254:	4798      	blx	r3
	if (ret == 0) {
   13256:	b920      	cbnz	r0, 13262 <SX1276GetDio1PinState+0x1a>
		*value ^= data->invert;
   13258:	6823      	ldr	r3, [r4, #0]
   1325a:	9801      	ldr	r0, [sp, #4]
   1325c:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1325e:	f3c0 3000 	ubfx	r0, r0, #12, #1
}
   13262:	2800      	cmp	r0, #0
   13264:	bfd4      	ite	le
   13266:	2000      	movle	r0, #0
   13268:	2001      	movgt	r0, #1
   1326a:	b002      	add	sp, #8
   1326c:	bd10      	pop	{r4, pc}
   1326e:	bf00      	nop
   13270:	00032b14 	.word	0x00032b14

00013274 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
   13274:	f243 0039 	movw	r0, #12345	; 0x3039
   13278:	4b06      	ldr	r3, [pc, #24]	; (13294 <rand1+0x20>)
   1327a:	4907      	ldr	r1, [pc, #28]	; (13298 <rand1+0x24>)
   1327c:	681a      	ldr	r2, [r3, #0]
   1327e:	fb01 0002 	mla	r0, r1, r2, r0
   13282:	6018      	str	r0, [r3, #0]
   13284:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13288:	fbb0 f3f3 	udiv	r3, r0, r3
   1328c:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
   13290:	1ac0      	subs	r0, r0, r3
   13292:	4770      	bx	lr
   13294:	20008554 	.word	0x20008554
   13298:	41c64e6d 	.word	0x41c64e6d

0001329c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
   1329c:	4b01      	ldr	r3, [pc, #4]	; (132a4 <srand1+0x8>)
   1329e:	6018      	str	r0, [r3, #0]
}
   132a0:	4770      	bx	lr
   132a2:	bf00      	nop
   132a4:	20008554 	.word	0x20008554

000132a8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
   132a8:	b530      	push	{r4, r5, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
   132aa:	b130      	cbz	r0, 132ba <Crc32+0x12>
    uint32_t crc = 0xFFFFFFFF;
   132ac:	f04f 33ff 	mov.w	r3, #4294967295
    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   132b0:	4d09      	ldr	r5, [pc, #36]	; (132d8 <Crc32+0x30>)
   132b2:	4401      	add	r1, r0
    for( uint16_t i = 0; i < length; ++i )
   132b4:	4281      	cmp	r1, r0
   132b6:	d101      	bne.n	132bc <Crc32+0x14>
        }
    }

    return ~crc;
   132b8:	43d8      	mvns	r0, r3
}
   132ba:	bd30      	pop	{r4, r5, pc}
        crc ^= ( uint32_t )buffer[i];
   132bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   132c0:	4053      	eors	r3, r2
   132c2:	2208      	movs	r2, #8
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   132c4:	f343 0400 	sbfx	r4, r3, #0, #1
        for( uint16_t i = 0; i < 8; i++ )
   132c8:	3a01      	subs	r2, #1
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   132ca:	402c      	ands	r4, r5
        for( uint16_t i = 0; i < 8; i++ )
   132cc:	b292      	uxth	r2, r2
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
   132ce:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
   132d2:	2a00      	cmp	r2, #0
   132d4:	d1f6      	bne.n	132c4 <Crc32+0x1c>
   132d6:	e7ed      	b.n	132b4 <Crc32+0xc>
   132d8:	edb88320 	.word	0xedb88320

000132dc <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   132dc:	4a04      	ldr	r2, [pc, #16]	; (132f0 <TimerInsertNewHeadTimer+0x14>)
   132de:	6813      	ldr	r3, [r2, #0]

    if( cur != NULL )
   132e0:	b10b      	cbz	r3, 132e6 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
   132e2:	2100      	movs	r1, #0
   132e4:	7259      	strb	r1, [r3, #9]
    }

    obj->Next = cur;
   132e6:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
   132e8:	6010      	str	r0, [r2, #0]
    TimerSetTimeout( TimerListHead );
   132ea:	f018 be22 	b.w	2bf32 <TimerSetTimeout>
   132ee:	bf00      	nop
   132f0:	2002fb24 	.word	0x2002fb24

000132f4 <TimerStart>:
{
   132f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   132f6:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   132f8:	a801      	add	r0, sp, #4
   132fa:	f018 fce0 	bl	2bcbe <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
   132fe:	b16c      	cbz	r4, 1331c <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
   13300:	4d17      	ldr	r5, [pc, #92]	; (13360 <TimerStart+0x6c>)
   13302:	682a      	ldr	r2, [r5, #0]
   13304:	4613      	mov	r3, r2

    while( cur != NULL )
   13306:	b973      	cbnz	r3, 13326 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
   13308:	6863      	ldr	r3, [r4, #4]
   1330a:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
   1330c:	2301      	movs	r3, #1
   1330e:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
   13310:	b96a      	cbnz	r2, 1332e <TimerStart+0x3a>
        RtcSetTimerContext( );
   13312:	f7ff fb09 	bl	12928 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
   13316:	4620      	mov	r0, r4
   13318:	f7ff ffe0 	bl	132dc <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
   1331c:	a801      	add	r0, sp, #4
   1331e:	f018 fcd8 	bl	2bcd2 <BoardCriticalSectionEnd>
}
   13322:	b003      	add	sp, #12
   13324:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
   13326:	429c      	cmp	r4, r3
   13328:	d0f8      	beq.n	1331c <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
   1332a:	695b      	ldr	r3, [r3, #20]
   1332c:	e7eb      	b.n	13306 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
   1332e:	f7ff fad1 	bl	128d4 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
   13332:	6823      	ldr	r3, [r4, #0]
   13334:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
   13336:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
   13338:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
   1333a:	681a      	ldr	r2, [r3, #0]
   1333c:	4290      	cmp	r0, r2
   1333e:	d3ea      	bcc.n	13316 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
   13340:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
   13342:	6959      	ldr	r1, [r3, #20]
   13344:	b911      	cbnz	r1, 1334c <TimerStart+0x58>
    cur->Next = obj;
   13346:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
   13348:	6161      	str	r1, [r4, #20]
   1334a:	e7e7      	b.n	1331c <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
   1334c:	6811      	ldr	r1, [r2, #0]
   1334e:	4288      	cmp	r0, r1
   13350:	d902      	bls.n	13358 <TimerStart+0x64>
            next = next->Next;
   13352:	4613      	mov	r3, r2
   13354:	6952      	ldr	r2, [r2, #20]
   13356:	e7f4      	b.n	13342 <TimerStart+0x4e>
            cur->Next = obj;
   13358:	615c      	str	r4, [r3, #20]
            obj->Next = next;
   1335a:	6162      	str	r2, [r4, #20]
            return;
   1335c:	e7de      	b.n	1331c <TimerStart+0x28>
   1335e:	bf00      	nop
   13360:	2002fb24 	.word	0x2002fb24

00013364 <TimerIrqHandler>:
{
   13364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
   13366:	f7ff fae7 	bl	12938 <RtcGetTimerContext>
    if( TimerListHead != NULL )
   1336a:	4c1c      	ldr	r4, [pc, #112]	; (133dc <TimerIrqHandler+0x78>)
    uint32_t old =  RtcGetTimerContext( );
   1336c:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
   1336e:	f7ff fadb 	bl	12928 <RtcSetTimerContext>
    if( TimerListHead != NULL )
   13372:	6823      	ldr	r3, [r4, #0]
   13374:	b1a3      	cbz	r3, 133a0 <TimerIrqHandler+0x3c>
    uint32_t deltaContext = now - old; // intentional wrap around
   13376:	461e      	mov	r6, r3
   13378:	1b47      	subs	r7, r0, r5
                next->Timestamp -= deltaContext;
   1337a:	1a2d      	subs	r5, r5, r0
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   1337c:	6971      	ldr	r1, [r6, #20]
   1337e:	b929      	cbnz	r1, 1338c <TimerIrqHandler+0x28>
        TimerListHead = TimerListHead->Next;
   13380:	695a      	ldr	r2, [r3, #20]
        cur->IsStarted = false;
   13382:	7219      	strb	r1, [r3, #8]
        TimerListHead = TimerListHead->Next;
   13384:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   13386:	68da      	ldr	r2, [r3, #12]
   13388:	b942      	cbnz	r2, 1339c <TimerIrqHandler+0x38>
   1338a:	e7fe      	b.n	1338a <TimerIrqHandler+0x26>
            if( next->Timestamp > deltaContext )
   1338c:	680a      	ldr	r2, [r1, #0]
   1338e:	42ba      	cmp	r2, r7
                next->Timestamp = 0;
   13390:	bf94      	ite	ls
   13392:	2200      	movls	r2, #0
                next->Timestamp -= deltaContext;
   13394:	1952      	addhi	r2, r2, r5
   13396:	600a      	str	r2, [r1, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
   13398:	6976      	ldr	r6, [r6, #20]
   1339a:	e7ef      	b.n	1337c <TimerIrqHandler+0x18>
        ExecuteCallBack( cur->Callback, cur->Context );
   1339c:	6918      	ldr	r0, [r3, #16]
   1339e:	4790      	blx	r2
        cur->IsStarted = false;
   133a0:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   133a2:	6823      	ldr	r3, [r4, #0]
   133a4:	b92b      	cbnz	r3, 133b2 <TimerIrqHandler+0x4e>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   133a6:	6820      	ldr	r0, [r4, #0]
   133a8:	b980      	cbnz	r0, 133cc <TimerIrqHandler+0x68>
}
   133aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
   133ac:	6918      	ldr	r0, [r3, #16]
   133ae:	4790      	blx	r2
   133b0:	e7f7      	b.n	133a2 <TimerIrqHandler+0x3e>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
   133b2:	681d      	ldr	r5, [r3, #0]
   133b4:	f7ff fa8e 	bl	128d4 <RtcGetTimerElapsedTime>
   133b8:	4285      	cmp	r5, r0
   133ba:	d2f4      	bcs.n	133a6 <TimerIrqHandler+0x42>
        cur = TimerListHead;
   133bc:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
   133be:	695a      	ldr	r2, [r3, #20]
        cur->IsStarted = false;
   133c0:	721e      	strb	r6, [r3, #8]
        TimerListHead = TimerListHead->Next;
   133c2:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
   133c4:	68da      	ldr	r2, [r3, #12]
   133c6:	2a00      	cmp	r2, #0
   133c8:	d1f0      	bne.n	133ac <TimerIrqHandler+0x48>
   133ca:	e7fe      	b.n	133ca <TimerIrqHandler+0x66>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
   133cc:	7a43      	ldrb	r3, [r0, #9]
   133ce:	2b00      	cmp	r3, #0
   133d0:	d1eb      	bne.n	133aa <TimerIrqHandler+0x46>
}
   133d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        TimerSetTimeout( TimerListHead );
   133d6:	f018 bdac 	b.w	2bf32 <TimerSetTimeout>
   133da:	bf00      	nop
   133dc:	2002fb24 	.word	0x2002fb24

000133e0 <TimerStop>:
{
   133e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
   133e2:	4d13      	ldr	r5, [pc, #76]	; (13430 <TimerStop+0x50>)
{
   133e4:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
   133e6:	a801      	add	r0, sp, #4
   133e8:	f018 fc69 	bl	2bcbe <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
   133ec:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
   133ee:	b16b      	cbz	r3, 1340c <TimerStop+0x2c>
   133f0:	b164      	cbz	r4, 1340c <TimerStop+0x2c>
    obj->IsStarted = false;
   133f2:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
   133f4:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
   133f6:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
   133f8:	d111      	bne.n	1341e <TimerStop+0x3e>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   133fa:	7a59      	ldrb	r1, [r3, #9]
            if( TimerListHead->Next != NULL )
   133fc:	695c      	ldr	r4, [r3, #20]
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
   133fe:	b161      	cbz	r1, 1341a <TimerStop+0x3a>
            TimerListHead->IsNext2Expire = false;
   13400:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
   13402:	b144      	cbz	r4, 13416 <TimerStop+0x36>
                TimerSetTimeout( TimerListHead );
   13404:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
   13406:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
   13408:	f018 fd93 	bl	2bf32 <TimerSetTimeout>
        CRITICAL_SECTION_END( );
   1340c:	a801      	add	r0, sp, #4
   1340e:	f018 fc60 	bl	2bcd2 <BoardCriticalSectionEnd>
}
   13412:	b003      	add	sp, #12
   13414:	bd30      	pop	{r4, r5, pc}
                RtcStopAlarm( );
   13416:	f7ff fa67 	bl	128e8 <RtcStopAlarm>
                TimerListHead = NULL;
   1341a:	602c      	str	r4, [r5, #0]
   1341c:	e7f6      	b.n	1340c <TimerStop+0x2c>
                cur = cur->Next;
   1341e:	461a      	mov	r2, r3
   13420:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
   13422:	2b00      	cmp	r3, #0
   13424:	d0f2      	beq.n	1340c <TimerStop+0x2c>
            if( cur == obj )
   13426:	429c      	cmp	r4, r3
   13428:	d1f9      	bne.n	1341e <TimerStop+0x3e>
                if( cur->Next != NULL )
   1342a:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
   1342c:	6153      	str	r3, [r2, #20]
   1342e:	e7ed      	b.n	1340c <TimerStop+0x2c>
   13430:	2002fb24 	.word	0x2002fb24

00013434 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13434:	4b09      	ldr	r3, [pc, #36]	; (1345c <GetFskBandwidthRegValue+0x28>)
{
   13436:	2200      	movs	r2, #0
   13438:	4619      	mov	r1, r3
   1343a:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
   1343c:	681c      	ldr	r4, [r3, #0]
   1343e:	4284      	cmp	r4, r0
   13440:	d802      	bhi.n	13448 <GetFskBandwidthRegValue+0x14>
   13442:	689c      	ldr	r4, [r3, #8]
   13444:	4284      	cmp	r4, r0
   13446:	d805      	bhi.n	13454 <GetFskBandwidthRegValue+0x20>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
   13448:	3201      	adds	r2, #1
   1344a:	2a15      	cmp	r2, #21
   1344c:	f103 0308 	add.w	r3, r3, #8
   13450:	d1f4      	bne.n	1343c <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
   13452:	e7fe      	b.n	13452 <GetFskBandwidthRegValue+0x1e>
            return FskBandwidths[i].RegValue;
   13454:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   13458:	7908      	ldrb	r0, [r1, #4]
}
   1345a:	bd10      	pop	{r4, pc}
   1345c:	00033ccc 	.word	0x00033ccc

00013460 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
   13460:	4b05      	ldr	r3, [pc, #20]	; (13478 <SX1276OnDio4Irq+0x18>)
   13462:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   13466:	b92a      	cbnz	r2, 13474 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
   13468:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
   1346c:	b912      	cbnz	r2, 13474 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   1346e:	2201      	movs	r2, #1
   13470:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
   13474:	4770      	bx	lr
   13476:	bf00      	nop
   13478:	2002fb70 	.word	0x2002fb70

0001347c <SX1276GetStatus>:
}
   1347c:	4b01      	ldr	r3, [pc, #4]	; (13484 <SX1276GetStatus+0x8>)
   1347e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
   13482:	4770      	bx	lr
   13484:	2002fb70 	.word	0x2002fb70

00013488 <SX1276GetTimeOnAir>:
{
   13488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1348a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1348e:	f89d c018 	ldrb.w	ip, [sp, #24]
   13492:	f89d e01c 	ldrb.w	lr, [sp, #28]
   13496:	f89d 5020 	ldrb.w	r5, [sp, #32]
    switch( modem )
   1349a:	b140      	cbz	r0, 134ae <SX1276GetTimeOnAir+0x26>
   1349c:	2801      	cmp	r0, #1
   1349e:	d014      	beq.n	134ca <SX1276GetTimeOnAir+0x42>
   134a0:	2201      	movs	r2, #1
   134a2:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
   134a4:	1898      	adds	r0, r3, r2
   134a6:	3801      	subs	r0, #1
   134a8:	fbb0 f0f2 	udiv	r0, r0, r2
}
   134ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
   134ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
           ( ( fixLen == false ) ? 8 : 0 ) +
   134b2:	f08c 0c01 	eor.w	ip, ip, #1
    return ( preambleLen << 3 ) +
   134b6:	00e3      	lsls	r3, r4, #3
   134b8:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
           ( ( fixLen == false ) ? 8 : 0 ) +
   134bc:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
   134be:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
             ( syncWordLength << 3 ) +
   134c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
   134c6:	434b      	muls	r3, r1
        break;
   134c8:	e7ec      	b.n	134a4 <SX1276GetTimeOnAir+0x1c>
    if( ( datarate == 5 ) || ( datarate == 6 ) )
   134ca:	1f50      	subs	r0, r2, #5
   134cc:	2801      	cmp	r0, #1
    int32_t crDenom           = coderate + 4;
   134ce:	f103 0304 	add.w	r3, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
   134d2:	d804      	bhi.n	134de <SX1276GetTimeOnAir+0x56>
        if( preambleLen < 12 )
   134d4:	2c0c      	cmp	r4, #12
   134d6:	bf38      	it	cc
   134d8:	240c      	movcc	r4, #12
    bool    lowDatareOptimize = false;
   134da:	2700      	movs	r7, #0
   134dc:	e006      	b.n	134ec <SX1276GetTimeOnAir+0x64>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   134de:	b9c9      	cbnz	r1, 13514 <SX1276GetTimeOnAir+0x8c>
   134e0:	f1a2 070b 	sub.w	r7, r2, #11
   134e4:	2f01      	cmp	r7, #1
   134e6:	bf8c      	ite	hi
   134e8:	2700      	movhi	r7, #0
   134ea:	2701      	movls	r7, #1
                            ( fixLen ? 0 : 20 );
   134ec:	f1bc 0f00 	cmp.w	ip, #0
                            ( crcOn ? 16 : 0 ) -
   134f0:	ea4f 1005 	mov.w	r0, r5, lsl #4
                            ( fixLen ? 0 : 20 );
   134f4:	bf0c      	ite	eq
   134f6:	2514      	moveq	r5, #20
   134f8:	2500      	movne	r5, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
   134fa:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
   134fe:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    if( datarate <= 6 )
   13502:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
   13504:	ea4f 0682 	mov.w	r6, r2, lsl #2
   13508:	4428      	add	r0, r5
            ceilDenominator = 4 * ( datarate - 2 );
   1350a:	f1a2 0c02 	sub.w	ip, r2, #2
    if( datarate <= 6 )
   1350e:	d808      	bhi.n	13522 <SX1276GetTimeOnAir+0x9a>
            ceilDenominator = 4 * datarate;
   13510:	4635      	mov	r5, r6
   13512:	e00b      	b.n	1352c <SX1276GetTimeOnAir+0xa4>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   13514:	2901      	cmp	r1, #1
   13516:	d1e0      	bne.n	134da <SX1276GetTimeOnAir+0x52>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
   13518:	f1a2 000c 	sub.w	r0, r2, #12
   1351c:	4247      	negs	r7, r0
   1351e:	4147      	adcs	r7, r0
   13520:	e7e4      	b.n	134ec <SX1276GetTimeOnAir+0x64>
        ceilNumerator += 8;
   13522:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
   13524:	2f00      	cmp	r7, #0
   13526:	d0f3      	beq.n	13510 <SX1276GetTimeOnAir+0x88>
            ceilDenominator = 4 * ( datarate - 2 );
   13528:	ea4f 058c 	mov.w	r5, ip, lsl #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
   1352c:	2800      	cmp	r0, #0
   1352e:	bfac      	ite	ge
   13530:	182e      	addge	r6, r5, r0
   13532:	1c2e      	addlt	r6, r5, #0
   13534:	1e70      	subs	r0, r6, #1
   13536:	fb90 f0f5 	sdiv	r0, r0, r5
   1353a:	fb03 4400 	mla	r4, r3, r0, r4
    if( datarate <= 6 )
   1353e:	2a06      	cmp	r2, #6
    int32_t intermediate =
   13540:	bf8c      	ite	hi
   13542:	340c      	addhi	r4, #12
        intermediate += 2;
   13544:	340e      	addls	r4, #14
    switch( bw )
   13546:	2902      	cmp	r1, #2
   13548:	d80a      	bhi.n	13560 <SX1276GetTimeOnAir+0xd8>
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
   1354a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
   1354e:	00a3      	lsls	r3, r4, #2
   13550:	3301      	adds	r3, #1
   13552:	fa03 f30c 	lsl.w	r3, r3, ip
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
   13556:	4353      	muls	r3, r2
   13558:	4a02      	ldr	r2, [pc, #8]	; (13564 <SX1276GetTimeOnAir+0xdc>)
   1355a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   1355e:	e7a1      	b.n	134a4 <SX1276GetTimeOnAir+0x1c>
    return ( numerator + denominator - 1 ) / denominator;
   13560:	deff      	udf	#255	; 0xff
   13562:	bf00      	nop
   13564:	00033cc0 	.word	0x00033cc0

00013568 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   13568:	f643 5309 	movw	r3, #15625	; 0x3d09
   1356c:	fbb0 f2f3 	udiv	r2, r0, r3
{
   13570:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   13572:	f641 6484 	movw	r4, #7812	; 0x1e84
   13576:	fb03 0112 	mls	r1, r3, r2, r0
   1357a:	eb04 2401 	add.w	r4, r4, r1, lsl #8
   1357e:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
   13582:	4b0a      	ldr	r3, [pc, #40]	; (135ac <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
   13584:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
   13588:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
   1358c:	f3c4 4107 	ubfx	r1, r4, #16, #8
   13590:	2006      	movs	r0, #6
   13592:	f018 fd15 	bl	2bfc0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
   13596:	f3c4 2107 	ubfx	r1, r4, #8, #8
   1359a:	2007      	movs	r0, #7
   1359c:	f018 fd10 	bl	2bfc0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
   135a0:	b2e1      	uxtb	r1, r4
   135a2:	2008      	movs	r0, #8
}
   135a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
   135a8:	f018 bd0a 	b.w	2bfc0 <SX1276Write>
   135ac:	2002fb70 	.word	0x2002fb70

000135b0 <SX1276OnDio3Irq>:
{
   135b0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
   135b2:	4b11      	ldr	r3, [pc, #68]	; (135f8 <SX1276OnDio3Irq+0x48>)
   135b4:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
   135b8:	2e01      	cmp	r6, #1
   135ba:	d11c      	bne.n	135f6 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
   135bc:	2012      	movs	r0, #18
   135be:	f018 fd0a 	bl	2bfd6 <SX1276Read>
   135c2:	f010 0401 	ands.w	r4, r0, #1
   135c6:	4d0d      	ldr	r5, [pc, #52]	; (135fc <SX1276OnDio3Irq+0x4c>)
   135c8:	d00b      	beq.n	135e2 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
   135ca:	2105      	movs	r1, #5
   135cc:	2012      	movs	r0, #18
   135ce:	f018 fcf7 	bl	2bfc0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   135d2:	682b      	ldr	r3, [r5, #0]
   135d4:	b17b      	cbz	r3, 135f6 <SX1276OnDio3Irq+0x46>
   135d6:	699b      	ldr	r3, [r3, #24]
   135d8:	b16b      	cbz	r3, 135f6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
   135da:	4630      	mov	r0, r6
}
   135dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
   135e0:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
   135e2:	2104      	movs	r1, #4
   135e4:	2012      	movs	r0, #18
   135e6:	f018 fceb 	bl	2bfc0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
   135ea:	682b      	ldr	r3, [r5, #0]
   135ec:	b11b      	cbz	r3, 135f6 <SX1276OnDio3Irq+0x46>
   135ee:	699b      	ldr	r3, [r3, #24]
   135f0:	b10b      	cbz	r3, 135f6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
   135f2:	4620      	mov	r0, r4
   135f4:	e7f2      	b.n	135dc <SX1276OnDio3Irq+0x2c>
}
   135f6:	bd70      	pop	{r4, r5, r6, pc}
   135f8:	2002fb70 	.word	0x2002fb70
   135fc:	2002fcb4 	.word	0x2002fcb4

00013600 <SX1276OnDio2Irq>:
{
   13600:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   13602:	4c31      	ldr	r4, [pc, #196]	; (136c8 <SX1276OnDio2Irq+0xc8>)
   13604:	f894 10e0 	ldrb.w	r1, [r4, #224]	; 0xe0
   13608:	2901      	cmp	r1, #1
   1360a:	d002      	beq.n	13612 <SX1276OnDio2Irq+0x12>
   1360c:	2902      	cmp	r1, #2
   1360e:	d052      	beq.n	136b6 <SX1276OnDio2Irq+0xb6>
}
   13610:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   13612:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13616:	b1cb      	cbz	r3, 1364c <SX1276OnDio2Irq+0x4c>
   13618:	2b01      	cmp	r3, #1
   1361a:	d1f9      	bne.n	13610 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   1361c:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   13620:	2b00      	cmp	r3, #0
   13622:	d0f5      	beq.n	13610 <SX1276OnDio2Irq+0x10>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   13624:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
   13626:	2012      	movs	r0, #18
   13628:	f018 fcca 	bl	2bfc0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
   1362c:	4b27      	ldr	r3, [pc, #156]	; (136cc <SX1276OnDio2Irq+0xcc>)
   1362e:	681b      	ldr	r3, [r3, #0]
   13630:	2b00      	cmp	r3, #0
   13632:	d0ed      	beq.n	13610 <SX1276OnDio2Irq+0x10>
   13634:	695c      	ldr	r4, [r3, #20]
   13636:	2c00      	cmp	r4, #0
   13638:	d0ea      	beq.n	13610 <SX1276OnDio2Irq+0x10>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   1363a:	201c      	movs	r0, #28
   1363c:	f018 fccb 	bl	2bfd6 <SX1276Read>
   13640:	4623      	mov	r3, r4
}
   13642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
   13646:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1364a:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
   1364c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1364e:	bb6b      	cbnz	r3, 136ac <SX1276OnDio2Irq+0xac>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
   13650:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
   13654:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   13658:	2b00      	cmp	r3, #0
   1365a:	d1d9      	bne.n	13610 <SX1276OnDio2Irq+0x10>
                    TimerStop( &RxTimeoutSyncWord );
   1365c:	481c      	ldr	r0, [pc, #112]	; (136d0 <SX1276OnDio2Irq+0xd0>)
   1365e:	f7ff febf 	bl	133e0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   13662:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13664:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
   13666:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   1366a:	f018 fcb4 	bl	2bfd6 <SX1276Read>
   1366e:	0840      	lsrs	r0, r0, #1
   13670:	4240      	negs	r0, r0
   13672:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   13676:	201b      	movs	r0, #27
   13678:	f018 fcad 	bl	2bfd6 <SX1276Read>
   1367c:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
   1367e:	201c      	movs	r0, #28
   13680:	f018 fca9 	bl	2bfd6 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13684:	f643 5309 	movw	r3, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   13688:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   1368c:	b2c0      	uxtb	r0, r0
   1368e:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
   13690:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   13692:	435d      	muls	r5, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13694:	3080      	adds	r0, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   13696:	eb05 2510 	add.w	r5, r5, r0, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   1369a:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
   1369c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
   136a0:	f018 fc99 	bl	2bfd6 <SX1276Read>
   136a4:	0940      	lsrs	r0, r0, #5
   136a6:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
   136aa:	e7b1      	b.n	13610 <SX1276OnDio2Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
   136ac:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
   136b0:	2b00      	cmp	r3, #0
   136b2:	d0ad      	beq.n	13610 <SX1276OnDio2Irq+0x10>
   136b4:	e7ce      	b.n	13654 <SX1276OnDio2Irq+0x54>
            switch( SX1276.Settings.Modem )
   136b6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   136ba:	2b01      	cmp	r3, #1
   136bc:	d1a8      	bne.n	13610 <SX1276OnDio2Irq+0x10>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
   136be:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   136c2:	2b00      	cmp	r3, #0
   136c4:	d0a4      	beq.n	13610 <SX1276OnDio2Irq+0x10>
   136c6:	e7ae      	b.n	13626 <SX1276OnDio2Irq+0x26>
   136c8:	2002fb70 	.word	0x2002fb70
   136cc:	2002fcb4 	.word	0x2002fcb4
   136d0:	2002fb28 	.word	0x2002fb28

000136d4 <SX1276OnDio1Irq>:
{
   136d4:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   136d6:	4c40      	ldr	r4, [pc, #256]	; (137d8 <SX1276OnDio1Irq+0x104>)
   136d8:	f894 50e0 	ldrb.w	r5, [r4, #224]	; 0xe0
   136dc:	2d01      	cmp	r5, #1
   136de:	d002      	beq.n	136e6 <SX1276OnDio1Irq+0x12>
   136e0:	2d02      	cmp	r5, #2
   136e2:	d059      	beq.n	13798 <SX1276OnDio1Irq+0xc4>
}
   136e4:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   136e6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   136ea:	b1cb      	cbz	r3, 13720 <SX1276OnDio1Irq+0x4c>
   136ec:	2b01      	cmp	r3, #1
   136ee:	d1f9      	bne.n	136e4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 0 )
   136f0:	f7ff fdaa 	bl	13248 <SX1276GetDio1PinState>
   136f4:	2800      	cmp	r0, #0
   136f6:	d0f5      	beq.n	136e4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutTimer );
   136f8:	4838      	ldr	r0, [pc, #224]	; (137dc <SX1276OnDio1Irq+0x108>)
   136fa:	f7ff fe71 	bl	133e0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
   136fe:	2180      	movs	r1, #128	; 0x80
   13700:	2012      	movs	r0, #18
   13702:	f018 fc5d 	bl	2bfc0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   13706:	2300      	movs	r3, #0
   13708:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   1370c:	4b34      	ldr	r3, [pc, #208]	; (137e0 <SX1276OnDio1Irq+0x10c>)
   1370e:	681b      	ldr	r3, [r3, #0]
   13710:	2b00      	cmp	r3, #0
   13712:	d0e7      	beq.n	136e4 <SX1276OnDio1Irq+0x10>
   13714:	68db      	ldr	r3, [r3, #12]
   13716:	2b00      	cmp	r3, #0
   13718:	d0e4      	beq.n	136e4 <SX1276OnDio1Irq+0x10>
}
   1371a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
   1371e:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
   13720:	f7ff fd92 	bl	13248 <SX1276GetDio1PinState>
   13724:	2800      	cmp	r0, #0
   13726:	d0dd      	beq.n	136e4 <SX1276OnDio1Irq+0x10>
                TimerStop( &RxTimeoutSyncWord );
   13728:	482e      	ldr	r0, [pc, #184]	; (137e4 <SX1276OnDio1Irq+0x110>)
   1372a:	f7ff fe59 	bl	133e0 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   1372e:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   13732:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   13736:	4313      	orrs	r3, r2
   13738:	b29b      	uxth	r3, r3
   1373a:	b93b      	cbnz	r3, 1374c <SX1276OnDio1Irq+0x78>
                    if( SX1276.Settings.Fsk.FixLen == false )
   1373c:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
   13740:	b9e8      	cbnz	r0, 1377e <SX1276OnDio1Irq+0xaa>
    SX1276ReadBuffer( 0, buffer, size );
   13742:	462a      	mov	r2, r5
   13744:	f504 718b 	add.w	r1, r4, #278	; 0x116
   13748:	f7ff fc62 	bl	13010 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1374c:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   13750:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   13754:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   13758:	4923      	ldr	r1, [pc, #140]	; (137e8 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   1375a:	1a12      	subs	r2, r2, r0
   1375c:	429a      	cmp	r2, r3
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   1375e:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
   13760:	db13      	blt.n	1378a <SX1276OnDio1Irq+0xb6>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
   13762:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
   13764:	b2d2      	uxtb	r2, r2
   13766:	2000      	movs	r0, #0
   13768:	f7ff fc52 	bl	13010 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
   1376c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   13770:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   13774:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   13776:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   13778:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
   1377c:	e7b2      	b.n	136e4 <SX1276OnDio1Irq+0x10>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   1377e:	2032      	movs	r0, #50	; 0x32
   13780:	f018 fc29 	bl	2bfd6 <SX1276Read>
   13784:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   13788:	e7e0      	b.n	1374c <SX1276OnDio1Irq+0x78>
    SX1276ReadBuffer( 0, buffer, size );
   1378a:	2000      	movs	r0, #0
   1378c:	b2d2      	uxtb	r2, r2
   1378e:	f7ff fc3f 	bl	13010 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
   13792:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   13796:	e7ef      	b.n	13778 <SX1276OnDio1Irq+0xa4>
            switch( SX1276.Settings.Modem )
   13798:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
   1379c:	2d00      	cmp	r5, #0
   1379e:	d1a1      	bne.n	136e4 <SX1276OnDio1Irq+0x10>
                if( SX1276GetDio1PinState( ) == 1 )
   137a0:	f7ff fd52 	bl	13248 <SX1276GetDio1PinState>
   137a4:	2801      	cmp	r0, #1
   137a6:	d09d      	beq.n	136e4 <SX1276OnDio1Irq+0x10>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   137a8:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
   137ac:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
   137b0:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   137b4:	490c      	ldr	r1, [pc, #48]	; (137e8 <SX1276OnDio1Irq+0x114>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   137b6:	1a1b      	subs	r3, r3, r0
   137b8:	4293      	cmp	r3, r2
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
   137ba:	4401      	add	r1, r0
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
   137bc:	dd07      	ble.n	137ce <SX1276OnDio1Irq+0xfa>
    SX1276WriteBuffer( 0, buffer, size );
   137be:	4628      	mov	r0, r5
   137c0:	f7ff fcce 	bl	13160 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   137c4:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
   137c8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   137cc:	e7d3      	b.n	13776 <SX1276OnDio1Irq+0xa2>
    SX1276WriteBuffer( 0, buffer, size );
   137ce:	4628      	mov	r0, r5
   137d0:	b2da      	uxtb	r2, r3
   137d2:	f7ff fcc5 	bl	13160 <SX1276WriteBuffer>
   137d6:	e7dc      	b.n	13792 <SX1276OnDio1Irq+0xbe>
   137d8:	2002fb70 	.word	0x2002fb70
   137dc:	2002fb40 	.word	0x2002fb40
   137e0:	2002fcb4 	.word	0x2002fcb4
   137e4:	2002fb28 	.word	0x2002fb28
   137e8:	200319af 	.word	0x200319af

000137ec <SX1276OnDio0Irq>:
    volatile uint8_t irqFlags = 0;
   137ec:	2300      	movs	r3, #0
{
   137ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   137f0:	4c8e      	ldr	r4, [pc, #568]	; (13a2c <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
   137f2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
   137f6:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   137fa:	2b01      	cmp	r3, #1
   137fc:	d004      	beq.n	13808 <SX1276OnDio0Irq+0x1c>
   137fe:	2b02      	cmp	r3, #2
   13800:	f000 80ff 	beq.w	13a02 <SX1276OnDio0Irq+0x216>
}
   13804:	b002      	add	sp, #8
   13806:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
   13808:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1380c:	b33b      	cbz	r3, 1385e <SX1276OnDio0Irq+0x72>
   1380e:	2b01      	cmp	r3, #1
   13810:	d1f8      	bne.n	13804 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
   13812:	2140      	movs	r1, #64	; 0x40
   13814:	2012      	movs	r0, #18
   13816:	f018 fbd3 	bl	2bfc0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
   1381a:	2012      	movs	r0, #18
   1381c:	f018 fbdb 	bl	2bfd6 <SX1276Read>
   13820:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
   13824:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13828:	4d81      	ldr	r5, [pc, #516]	; (13a30 <SX1276OnDio0Irq+0x244>)
   1382a:	f013 0f20 	tst.w	r3, #32
   1382e:	f000 8093 	beq.w	13958 <SX1276OnDio0Irq+0x16c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
   13832:	2120      	movs	r1, #32
   13834:	2012      	movs	r0, #18
   13836:	f018 fbc3 	bl	2bfc0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
   1383a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1383e:	b90b      	cbnz	r3, 13844 <SX1276OnDio0Irq+0x58>
                            SX1276.Settings.State = RF_IDLE;
   13840:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
   13844:	487b      	ldr	r0, [pc, #492]	; (13a34 <SX1276OnDio0Irq+0x248>)
   13846:	f7ff fdcb 	bl	133e0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1384a:	682b      	ldr	r3, [r5, #0]
   1384c:	2b00      	cmp	r3, #0
   1384e:	d0d9      	beq.n	13804 <SX1276OnDio0Irq+0x18>
   13850:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   13852:	2b00      	cmp	r3, #0
   13854:	d0d6      	beq.n	13804 <SX1276OnDio0Irq+0x18>
}
   13856:	b002      	add	sp, #8
   13858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
   1385c:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
   1385e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   13862:	4d73      	ldr	r5, [pc, #460]	; (13a30 <SX1276OnDio0Irq+0x244>)
   13864:	b393      	cbz	r3, 138cc <SX1276OnDio0Irq+0xe0>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
   13866:	203f      	movs	r0, #63	; 0x3f
   13868:	f018 fbb5 	bl	2bfd6 <SX1276Read>
   1386c:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
   13870:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13874:	079b      	lsls	r3, r3, #30
   13876:	d429      	bmi.n	138cc <SX1276OnDio0Irq+0xe0>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   13878:	210b      	movs	r1, #11
   1387a:	203e      	movs	r0, #62	; 0x3e
   1387c:	f018 fba0 	bl	2bfc0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   13880:	2110      	movs	r1, #16
   13882:	203f      	movs	r0, #63	; 0x3f
   13884:	f018 fb9c 	bl	2bfc0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
   13888:	486a      	ldr	r0, [pc, #424]	; (13a34 <SX1276OnDio0Irq+0x248>)
   1388a:	f7ff fda9 	bl	133e0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
   1388e:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
   13892:	b98e      	cbnz	r6, 138b8 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
   13894:	4868      	ldr	r0, [pc, #416]	; (13a38 <SX1276OnDio0Irq+0x24c>)
   13896:	f7ff fda3 	bl	133e0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
   1389a:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
   1389e:	682b      	ldr	r3, [r5, #0]
   138a0:	b113      	cbz	r3, 138a8 <SX1276OnDio0Irq+0xbc>
   138a2:	691b      	ldr	r3, [r3, #16]
   138a4:	b103      	cbz	r3, 138a8 <SX1276OnDio0Irq+0xbc>
                            RadioEvents->RxError( );
   138a6:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   138a8:	2300      	movs	r3, #0
   138aa:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
   138ae:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
   138b2:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
   138b6:	e7a5      	b.n	13804 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   138b8:	200d      	movs	r0, #13
   138ba:	f018 fb8c 	bl	2bfd6 <SX1276Read>
   138be:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   138c2:	b2c9      	uxtb	r1, r1
   138c4:	200d      	movs	r0, #13
   138c6:	f018 fb7b 	bl	2bfc0 <SX1276Write>
   138ca:	e7e8      	b.n	1389e <SX1276OnDio0Irq+0xb2>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
   138cc:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
   138d0:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
   138d4:	4e59      	ldr	r6, [pc, #356]	; (13a3c <SX1276OnDio0Irq+0x250>)
   138d6:	ea52 0301 	orrs.w	r3, r2, r1
   138da:	d10a      	bne.n	138f2 <SX1276OnDio0Irq+0x106>
                    if( SX1276.Settings.Fsk.FixLen == false )
   138dc:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
   138e0:	bb50      	cbnz	r0, 13938 <SX1276OnDio0Irq+0x14c>
    SX1276ReadBuffer( 0, buffer, size );
   138e2:	2201      	movs	r2, #1
   138e4:	4956      	ldr	r1, [pc, #344]	; (13a40 <SX1276OnDio0Irq+0x254>)
   138e6:	f7ff fb93 	bl	13010 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   138ea:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
   138ee:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   138f2:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
   138f4:	2000      	movs	r0, #0
   138f6:	b2d2      	uxtb	r2, r2
   138f8:	4431      	add	r1, r6
   138fa:	f7ff fb89 	bl	13010 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   138fe:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
   13902:	484c      	ldr	r0, [pc, #304]	; (13a34 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
   13904:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
   13908:	f7ff fd6a 	bl	133e0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
   1390c:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   13910:	b9c3      	cbnz	r3, 13944 <SX1276OnDio0Irq+0x158>
                    TimerStop( &RxTimeoutSyncWord );
   13912:	4849      	ldr	r0, [pc, #292]	; (13a38 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
   13914:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
   13918:	f7ff fd62 	bl	133e0 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   1391c:	682b      	ldr	r3, [r5, #0]
   1391e:	2b00      	cmp	r3, #0
   13920:	d0c2      	beq.n	138a8 <SX1276OnDio0Irq+0xbc>
   13922:	689d      	ldr	r5, [r3, #8]
   13924:	2d00      	cmp	r5, #0
   13926:	d0bf      	beq.n	138a8 <SX1276OnDio0Irq+0xbc>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
   13928:	2300      	movs	r3, #0
   1392a:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
   1392e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
   13932:	4842      	ldr	r0, [pc, #264]	; (13a3c <SX1276OnDio0Irq+0x250>)
   13934:	47a8      	blx	r5
   13936:	e7b7      	b.n	138a8 <SX1276OnDio0Irq+0xbc>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
   13938:	2032      	movs	r0, #50	; 0x32
   1393a:	f018 fb4c 	bl	2bfd6 <SX1276Read>
   1393e:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
   13942:	e7d2      	b.n	138ea <SX1276OnDio0Irq+0xfe>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   13944:	200d      	movs	r0, #13
   13946:	f018 fb46 	bl	2bfd6 <SX1276Read>
   1394a:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1394e:	b2c9      	uxtb	r1, r1
   13950:	200d      	movs	r0, #13
   13952:	f018 fb35 	bl	2bfc0 <SX1276Write>
   13956:	e7e1      	b.n	1391c <SX1276OnDio0Irq+0x130>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
   13958:	2019      	movs	r0, #25
   1395a:	f018 fb3c 	bl	2bfd6 <SX1276Read>
   1395e:	b240      	sxtb	r0, r0
   13960:	3002      	adds	r0, #2
   13962:	1080      	asrs	r0, r0, #2
   13964:	f884 013c 	strb.w	r0, [r4, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
   13968:	201a      	movs	r0, #26
   1396a:	f018 fb34 	bl	2bfd6 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
   1396e:	f994 213c 	ldrsb.w	r2, [r4, #316]	; 0x13c
   13972:	4934      	ldr	r1, [pc, #208]	; (13a44 <SX1276OnDio0Irq+0x258>)
   13974:	2a00      	cmp	r2, #0
   13976:	f340 130b 	sbfx	r3, r0, #4, #12
   1397a:	da3a      	bge.n	139f2 <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   1397c:	f8d4 60e4 	ldr.w	r6, [r4, #228]	; 0xe4
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
   13980:	b292      	uxth	r2, r2
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13982:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   13984:	bf8c      	ite	hi
   13986:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   13988:	3aa4      	subls	r2, #164	; 0xa4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
   1398a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   1398c:	4410      	add	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   1398e:	4403      	add	r3, r0
   13990:	b21b      	sxth	r3, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   13992:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
   13994:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
   13998:	f018 fb1d 	bl	2bfd6 <SX1276Read>
   1399c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
   139a0:	2010      	movs	r0, #16
   139a2:	f018 fb18 	bl	2bfd6 <SX1276Read>
   139a6:	4601      	mov	r1, r0
   139a8:	200d      	movs	r0, #13
   139aa:	f018 fb09 	bl	2bfc0 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
   139ae:	2000      	movs	r0, #0
   139b0:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
   139b4:	4921      	ldr	r1, [pc, #132]	; (13a3c <SX1276OnDio0Irq+0x250>)
   139b6:	f7ff fb2b 	bl	13010 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
   139ba:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   139be:	b90b      	cbnz	r3, 139c4 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
   139c0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
   139c4:	481b      	ldr	r0, [pc, #108]	; (13a34 <SX1276OnDio0Irq+0x248>)
   139c6:	f7ff fd0b 	bl	133e0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
   139ca:	682b      	ldr	r3, [r5, #0]
   139cc:	2b00      	cmp	r3, #0
   139ce:	f43f af19 	beq.w	13804 <SX1276OnDio0Irq+0x18>
   139d2:	689d      	ldr	r5, [r3, #8]
   139d4:	2d00      	cmp	r5, #0
   139d6:	f43f af15 	beq.w	13804 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   139da:	46ac      	mov	ip, r5
   139dc:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
   139e0:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
   139e4:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   139e8:	4814      	ldr	r0, [pc, #80]	; (13a3c <SX1276OnDio0Irq+0x250>)
}
   139ea:	b002      	add	sp, #8
   139ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
   139f0:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   139f2:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   139f6:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   139f8:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
   139fa:	bf8c      	ite	hi
   139fc:	389d      	subhi	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
   139fe:	38a4      	subls	r0, #164	; 0xa4
   13a00:	e7c5      	b.n	1398e <SX1276OnDio0Irq+0x1a2>
            TimerStop( &TxTimeoutTimer );
   13a02:	4811      	ldr	r0, [pc, #68]	; (13a48 <SX1276OnDio0Irq+0x25c>)
   13a04:	f7ff fcec 	bl	133e0 <TimerStop>
            switch( SX1276.Settings.Modem )
   13a08:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13a0c:	2b01      	cmp	r3, #1
   13a0e:	d103      	bne.n	13a18 <SX1276OnDio0Irq+0x22c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
   13a10:	2108      	movs	r1, #8
   13a12:	2012      	movs	r0, #18
   13a14:	f018 fad4 	bl	2bfc0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
   13a18:	2300      	movs	r3, #0
   13a1a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
   13a1e:	4b04      	ldr	r3, [pc, #16]	; (13a30 <SX1276OnDio0Irq+0x244>)
   13a20:	681b      	ldr	r3, [r3, #0]
   13a22:	2b00      	cmp	r3, #0
   13a24:	f43f aeee 	beq.w	13804 <SX1276OnDio0Irq+0x18>
   13a28:	681b      	ldr	r3, [r3, #0]
   13a2a:	e712      	b.n	13852 <SX1276OnDio0Irq+0x66>
   13a2c:	2002fb70 	.word	0x2002fb70
   13a30:	2002fcb4 	.word	0x2002fcb4
   13a34:	2002fb40 	.word	0x2002fb40
   13a38:	2002fb28 	.word	0x2002fb28
   13a3c:	200319af 	.word	0x200319af
   13a40:	2002fc86 	.word	0x2002fc86
   13a44:	1f4add40 	.word	0x1f4add40
   13a48:	2002fb58 	.word	0x2002fb58

00013a4c <RxChainCalibration>:
{
   13a4c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
   13a4e:	2009      	movs	r0, #9
   13a50:	f018 fac1 	bl	2bfd6 <SX1276Read>
   13a54:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13a56:	2006      	movs	r0, #6
   13a58:	f018 fabd 	bl	2bfd6 <SX1276Read>
   13a5c:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
   13a5e:	2007      	movs	r0, #7
   13a60:	f018 fab9 	bl	2bfd6 <SX1276Read>
   13a64:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
   13a66:	2008      	movs	r0, #8
   13a68:	f018 fab5 	bl	2bfd6 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13a6c:	f643 5309 	movw	r3, #15625	; 0x3d09
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
   13a70:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   13a74:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13a76:	b2c0      	uxtb	r0, r0
   13a78:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
   13a7a:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   13a7c:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
   13a7e:	3080      	adds	r0, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
   13a80:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
   13a82:	eb04 2410 	add.w	r4, r4, r0, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
   13a86:	2009      	movs	r0, #9
   13a88:	f018 fa9a 	bl	2bfc0 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   13a8c:	203b      	movs	r0, #59	; 0x3b
   13a8e:	f018 faa2 	bl	2bfd6 <SX1276Read>
   13a92:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   13a96:	b2c9      	uxtb	r1, r1
   13a98:	203b      	movs	r0, #59	; 0x3b
   13a9a:	f018 fa91 	bl	2bfc0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   13a9e:	203b      	movs	r0, #59	; 0x3b
   13aa0:	f018 fa99 	bl	2bfd6 <SX1276Read>
   13aa4:	0682      	lsls	r2, r0, #26
   13aa6:	d4fa      	bmi.n	13a9e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
   13aa8:	480c      	ldr	r0, [pc, #48]	; (13adc <RxChainCalibration+0x90>)
   13aaa:	f7ff fd5d 	bl	13568 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
   13aae:	203b      	movs	r0, #59	; 0x3b
   13ab0:	f018 fa91 	bl	2bfd6 <SX1276Read>
   13ab4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   13ab8:	b2c9      	uxtb	r1, r1
   13aba:	203b      	movs	r0, #59	; 0x3b
   13abc:	f018 fa80 	bl	2bfc0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
   13ac0:	203b      	movs	r0, #59	; 0x3b
   13ac2:	f018 fa88 	bl	2bfd6 <SX1276Read>
   13ac6:	0683      	lsls	r3, r0, #26
   13ac8:	d4fa      	bmi.n	13ac0 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
   13aca:	4629      	mov	r1, r5
   13acc:	2009      	movs	r0, #9
   13ace:	f018 fa77 	bl	2bfc0 <SX1276Write>
    SX1276SetChannel( initialFreq );
   13ad2:	4620      	mov	r0, r4
}
   13ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
   13ad8:	f7ff bd46 	b.w	13568 <SX1276SetChannel>
   13adc:	33bca100 	.word	0x33bca100

00013ae0 <SX1276SetSleep>:
{
   13ae0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   13ae2:	480a      	ldr	r0, [pc, #40]	; (13b0c <SX1276SetSleep+0x2c>)
   13ae4:	f7ff fc7c 	bl	133e0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   13ae8:	4809      	ldr	r0, [pc, #36]	; (13b10 <SX1276SetSleep+0x30>)
   13aea:	f7ff fc79 	bl	133e0 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   13aee:	4809      	ldr	r0, [pc, #36]	; (13b14 <SX1276SetSleep+0x34>)
   13af0:	f7ff fc76 	bl	133e0 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13af4:	2000      	movs	r0, #0
   13af6:	f018 fa79 	bl	2bfec <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
   13afa:	2000      	movs	r0, #0
   13afc:	f018 f913 	bl	2bd26 <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
   13b00:	2200      	movs	r2, #0
   13b02:	4b05      	ldr	r3, [pc, #20]	; (13b18 <SX1276SetSleep+0x38>)
   13b04:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   13b08:	bd08      	pop	{r3, pc}
   13b0a:	bf00      	nop
   13b0c:	2002fb40 	.word	0x2002fb40
   13b10:	2002fb58 	.word	0x2002fb58
   13b14:	2002fb28 	.word	0x2002fb28
   13b18:	2002fb70 	.word	0x2002fb70

00013b1c <SX1276SetStby>:
{
   13b1c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
   13b1e:	4808      	ldr	r0, [pc, #32]	; (13b40 <SX1276SetStby+0x24>)
   13b20:	f7ff fc5e 	bl	133e0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
   13b24:	4807      	ldr	r0, [pc, #28]	; (13b44 <SX1276SetStby+0x28>)
   13b26:	f7ff fc5b 	bl	133e0 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
   13b2a:	4807      	ldr	r0, [pc, #28]	; (13b48 <SX1276SetStby+0x2c>)
   13b2c:	f7ff fc58 	bl	133e0 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
   13b30:	2001      	movs	r0, #1
   13b32:	f018 fa5b 	bl	2bfec <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
   13b36:	2200      	movs	r2, #0
   13b38:	4b04      	ldr	r3, [pc, #16]	; (13b4c <SX1276SetStby+0x30>)
   13b3a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   13b3e:	bd08      	pop	{r3, pc}
   13b40:	2002fb40 	.word	0x2002fb40
   13b44:	2002fb58 	.word	0x2002fb58
   13b48:	2002fb28 	.word	0x2002fb28
   13b4c:	2002fb70 	.word	0x2002fb70

00013b50 <SX1276Send>:
{
   13b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
   13b52:	4c60      	ldr	r4, [pc, #384]	; (13cd4 <SX1276Send+0x184>)
{
   13b54:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
   13b56:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
   13b5a:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
   13b5e:	b1db      	cbz	r3, 13b98 <SX1276Send+0x48>
   13b60:	2b01      	cmp	r3, #1
   13b62:	d045      	beq.n	13bf0 <SX1276Send+0xa0>
   13b64:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
   13b66:	485c      	ldr	r0, [pc, #368]	; (13cd8 <SX1276Send+0x188>)
   13b68:	f7ff fc3a 	bl	133e0 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
   13b6c:	4629      	mov	r1, r5
   13b6e:	485b      	ldr	r0, [pc, #364]	; (13cdc <SX1276Send+0x18c>)
   13b70:	f018 f9fd 	bl	2bf6e <TimerSetValue>
    switch( SX1276.Settings.Modem )
   13b74:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13b78:	2b00      	cmp	r3, #0
   13b7a:	d076      	beq.n	13c6a <SX1276Send+0x11a>
   13b7c:	2b01      	cmp	r3, #1
   13b7e:	f000 808c 	beq.w	13c9a <SX1276Send+0x14a>
    SX1276.Settings.State = RF_TX_RUNNING;
   13b82:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
   13b84:	4855      	ldr	r0, [pc, #340]	; (13cdc <SX1276Send+0x18c>)
    SX1276.Settings.State = RF_TX_RUNNING;
   13b86:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   13b8a:	f7ff fbb3 	bl	132f4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   13b8e:	2003      	movs	r0, #3
   13b90:	f018 fa2c 	bl	2bfec <SX1276SetOpMode>
}
   13b94:	b003      	add	sp, #12
   13b96:	bd30      	pop	{r4, r5, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
   13b98:	f89d 1007 	ldrb.w	r1, [sp, #7]
            if( SX1276.Settings.Fsk.FixLen == false )
   13b9c:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   13ba0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
   13ba4:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
   13ba8:	b9f0      	cbnz	r0, 13be8 <SX1276Send+0x98>
    SX1276WriteBuffer( 0, buffer, size );
   13baa:	2201      	movs	r2, #1
   13bac:	f10d 0107 	add.w	r1, sp, #7
   13bb0:	f7ff fad6 	bl	13160 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
   13bb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13bb8:	1e53      	subs	r3, r2, #1
   13bba:	2b3f      	cmp	r3, #63	; 0x3f
   13bbc:	d904      	bls.n	13bc8 <SX1276Send+0x78>
                memcpy1( RxTxBuffer, buffer, size );
   13bbe:	4629      	mov	r1, r5
   13bc0:	4847      	ldr	r0, [pc, #284]	; (13ce0 <SX1276Send+0x190>)
   13bc2:	f018 f8d0 	bl	2bd66 <memcpy1>
   13bc6:	2220      	movs	r2, #32
    SX1276WriteBuffer( 0, buffer, size );
   13bc8:	4629      	mov	r1, r5
   13bca:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
   13bcc:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
   13bd0:	f7ff fac6 	bl	13160 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   13bd4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
   13bd8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
   13bdc:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
   13be0:	4413      	add	r3, r2
   13be2:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
   13be6:	e7be      	b.n	13b66 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
   13be8:	2032      	movs	r0, #50	; 0x32
   13bea:	f018 f9e9 	bl	2bfc0 <SX1276Write>
   13bee:	e7e1      	b.n	13bb4 <SX1276Send+0x64>
            if( SX1276.Settings.LoRa.IqInverted == true )
   13bf0:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   13bf4:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   13bf6:	b36b      	cbz	r3, 13c54 <SX1276Send+0x104>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
   13bf8:	f018 f9ed 	bl	2bfd6 <SX1276Read>
   13bfc:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13c00:	2033      	movs	r0, #51	; 0x33
   13c02:	f018 f9dd 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13c06:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13c08:	203b      	movs	r0, #59	; 0x3b
   13c0a:	f018 f9d9 	bl	2bfc0 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
   13c0e:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13c12:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
   13c14:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
   13c18:	f018 f9d2 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
   13c1c:	2100      	movs	r1, #0
   13c1e:	200e      	movs	r0, #14
   13c20:	f018 f9ce 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13c24:	2100      	movs	r1, #0
   13c26:	200d      	movs	r0, #13
   13c28:	f018 f9ca 	bl	2bfc0 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
   13c2c:	2001      	movs	r0, #1
   13c2e:	f018 f9d2 	bl	2bfd6 <SX1276Read>
   13c32:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
   13c36:	d104      	bne.n	13c42 <SX1276Send+0xf2>
                SX1276SetStby( );
   13c38:	f7ff ff70 	bl	13b1c <SX1276SetStby>
                DelayMs( 1 );
   13c3c:	2001      	movs	r0, #1
   13c3e:	f018 f9bd 	bl	2bfbc <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
   13c42:	4629      	mov	r1, r5
   13c44:	2000      	movs	r0, #0
   13c46:	f89d 2007 	ldrb.w	r2, [sp, #7]
   13c4a:	f7ff fa89 	bl	13160 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
   13c4e:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
   13c52:	e788      	b.n	13b66 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13c54:	f018 f9bf 	bl	2bfd6 <SX1276Read>
   13c58:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13c5c:	f041 0101 	orr.w	r1, r1, #1
   13c60:	2033      	movs	r0, #51	; 0x33
   13c62:	f018 f9ad 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13c66:	211d      	movs	r1, #29
   13c68:	e7ce      	b.n	13c08 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13c6a:	2040      	movs	r0, #64	; 0x40
   13c6c:	f018 f9b3 	bl	2bfd6 <SX1276Read>
   13c70:	f000 0103 	and.w	r1, r0, #3
   13c74:	2040      	movs	r0, #64	; 0x40
   13c76:	f018 f9a3 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13c7a:	2041      	movs	r0, #65	; 0x41
   13c7c:	f018 f9ab 	bl	2bfd6 <SX1276Read>
   13c80:	f000 013e 	and.w	r1, r0, #62	; 0x3e
   13c84:	2041      	movs	r0, #65	; 0x41
   13c86:	f018 f99b 	bl	2bfc0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13c8a:	2035      	movs	r0, #53	; 0x35
   13c8c:	f018 f9a3 	bl	2bfd6 <SX1276Read>
   13c90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13c94:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
   13c98:	e773      	b.n	13b82 <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13c9a:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   13c9e:	b173      	cbz	r3, 13cbe <SX1276Send+0x16e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13ca0:	21f5      	movs	r1, #245	; 0xf5
   13ca2:	2011      	movs	r0, #17
   13ca4:	f018 f98c 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
   13ca8:	2040      	movs	r0, #64	; 0x40
   13caa:	f018 f994 	bl	2bfd6 <SX1276Read>
   13cae:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   13cb2:	2040      	movs	r0, #64	; 0x40
   13cb4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   13cb8:	f018 f982 	bl	2bfc0 <SX1276Write>
   13cbc:	e761      	b.n	13b82 <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   13cbe:	21f7      	movs	r1, #247	; 0xf7
   13cc0:	2011      	movs	r0, #17
   13cc2:	f018 f97d 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
   13cc6:	2040      	movs	r0, #64	; 0x40
   13cc8:	f018 f985 	bl	2bfd6 <SX1276Read>
   13ccc:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   13cd0:	e7ef      	b.n	13cb2 <SX1276Send+0x162>
   13cd2:	bf00      	nop
   13cd4:	2002fb70 	.word	0x2002fb70
   13cd8:	2002fb40 	.word	0x2002fb40
   13cdc:	2002fb58 	.word	0x2002fb58
   13ce0:	200319af 	.word	0x200319af

00013ce4 <SX1276SetRx>:
{
   13ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
   13ce6:	4c82      	ldr	r4, [pc, #520]	; (13ef0 <SX1276SetRx+0x20c>)
{
   13ce8:	4605      	mov	r5, r0
    TimerStop( &TxTimeoutTimer );
   13cea:	4882      	ldr	r0, [pc, #520]	; (13ef4 <SX1276SetRx+0x210>)
   13cec:	f7ff fb78 	bl	133e0 <TimerStop>
    switch( SX1276.Settings.Modem )
   13cf0:	f894 60e1 	ldrb.w	r6, [r4, #225]	; 0xe1
   13cf4:	b14e      	cbz	r6, 13d0a <SX1276SetRx+0x26>
   13cf6:	2e01      	cmp	r6, #1
   13cf8:	d04d      	beq.n	13d96 <SX1276SetRx+0xb2>
    SX1276.Settings.State = RF_RX_RUNNING;
   13cfa:	2301      	movs	r3, #1
   13cfc:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   13d00:	2d00      	cmp	r5, #0
   13d02:	f000 80f2 	beq.w	13eea <SX1276SetRx+0x206>
    bool rxContinuous = false;
   13d06:	2700      	movs	r7, #0
   13d08:	e029      	b.n	13d5e <SX1276SetRx+0x7a>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13d0a:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
   13d0c:	f894 7102 	ldrb.w	r7, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
   13d10:	f018 f961 	bl	2bfd6 <SX1276Read>
   13d14:	f000 0103 	and.w	r1, r0, #3
   13d18:	f041 010c 	orr.w	r1, r1, #12
   13d1c:	2040      	movs	r0, #64	; 0x40
   13d1e:	f018 f94f 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
   13d22:	2041      	movs	r0, #65	; 0x41
   13d24:	f018 f957 	bl	2bfd6 <SX1276Read>
   13d28:	f060 013e 	orn	r1, r0, #62	; 0x3e
   13d2c:	b2c9      	uxtb	r1, r1
   13d2e:	2041      	movs	r0, #65	; 0x41
   13d30:	f018 f946 	bl	2bfc0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
   13d34:	2035      	movs	r0, #53	; 0x35
   13d36:	f018 f94e 	bl	2bfd6 <SX1276Read>
   13d3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13d3e:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
   13d42:	211e      	movs	r1, #30
   13d44:	200d      	movs	r0, #13
   13d46:	f018 f93b 	bl	2bfc0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   13d4a:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   13d4e:	f8a4 6118 	strh.w	r6, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   13d52:	f8a4 6116 	strh.w	r6, [r4, #278]	; 0x116
    SX1276.Settings.State = RF_RX_RUNNING;
   13d56:	2301      	movs	r3, #1
   13d58:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
   13d5c:	b135      	cbz	r5, 13d6c <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
   13d5e:	4866      	ldr	r0, [pc, #408]	; (13ef8 <SX1276SetRx+0x214>)
   13d60:	4629      	mov	r1, r5
   13d62:	f018 f904 	bl	2bf6e <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
   13d66:	4864      	ldr	r0, [pc, #400]	; (13ef8 <SX1276SetRx+0x214>)
   13d68:	f7ff fac4 	bl	132f4 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
   13d6c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   13d70:	2b00      	cmp	r3, #0
   13d72:	f040 80b4 	bne.w	13ede <SX1276SetRx+0x1fa>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
   13d76:	2005      	movs	r0, #5
   13d78:	f018 f938 	bl	2bfec <SX1276SetOpMode>
        if( rxContinuous == false )
   13d7c:	2f00      	cmp	r7, #0
   13d7e:	f040 80b6 	bne.w	13eee <SX1276SetRx+0x20a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
   13d82:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   13d86:	485d      	ldr	r0, [pc, #372]	; (13efc <SX1276SetRx+0x218>)
   13d88:	f018 f8f1 	bl	2bf6e <TimerSetValue>
}
   13d8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
   13d90:	485a      	ldr	r0, [pc, #360]	; (13efc <SX1276SetRx+0x218>)
   13d92:	f7ff baaf 	b.w	132f4 <TimerStart>
            if( SX1276.Settings.LoRa.IqInverted == true )
   13d96:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13d9a:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
   13d9c:	b333      	cbz	r3, 13dec <SX1276SetRx+0x108>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
   13d9e:	f018 f91a 	bl	2bfd6 <SX1276Read>
   13da2:	f040 0141 	orr.w	r1, r0, #65	; 0x41
   13da6:	b2c9      	uxtb	r1, r1
   13da8:	2033      	movs	r0, #51	; 0x33
   13daa:	f018 f909 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
   13dae:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13db0:	203b      	movs	r0, #59	; 0x3b
   13db2:	f018 f905 	bl	2bfc0 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13db6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13dba:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
   13dbc:	2b08      	cmp	r3, #8
   13dbe:	d87d      	bhi.n	13ebc <SX1276SetRx+0x1d8>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
   13dc0:	f018 f909 	bl	2bfd6 <SX1276Read>
   13dc4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   13dc8:	2031      	movs	r0, #49	; 0x31
   13dca:	f018 f8f9 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
   13dce:	2100      	movs	r1, #0
   13dd0:	2030      	movs	r0, #48	; 0x30
   13dd2:	f018 f8f5 	bl	2bfc0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
   13dd6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   13dda:	2b08      	cmp	r3, #8
   13ddc:	d81c      	bhi.n	13e18 <SX1276SetRx+0x134>
   13dde:	e8df f003 	tbb	[pc, r3]
   13de2:	3610      	.short	0x3610
   13de4:	5e544a40 	.word	0x5e544a40
   13de8:	6868      	.short	0x6868
   13dea:	68          	.byte	0x68
   13deb:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
   13dec:	f018 f8f3 	bl	2bfd6 <SX1276Read>
   13df0:	f000 01be 	and.w	r1, r0, #190	; 0xbe
   13df4:	f041 0101 	orr.w	r1, r1, #1
   13df8:	2033      	movs	r0, #51	; 0x33
   13dfa:	f018 f8e1 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
   13dfe:	211d      	movs	r1, #29
   13e00:	e7d6      	b.n	13db0 <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
   13e02:	202f      	movs	r0, #47	; 0x2f
   13e04:	2148      	movs	r1, #72	; 0x48
   13e06:	f018 f8db 	bl	2bfc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
   13e0a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13e0e:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
   13e12:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13e14:	f7ff fba8 	bl	13568 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13e18:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
   13e1c:	f894 7132 	ldrb.w	r7, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   13e20:	2b00      	cmp	r3, #0
   13e22:	d052      	beq.n	13eca <SX1276SetRx+0x1e6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13e24:	211d      	movs	r1, #29
   13e26:	2011      	movs	r0, #17
   13e28:	f018 f8ca 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
   13e2c:	2040      	movs	r0, #64	; 0x40
   13e2e:	f018 f8d2 	bl	2bfd6 <SX1276Read>
   13e32:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13e36:	2040      	movs	r0, #64	; 0x40
   13e38:	f018 f8c2 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
   13e3c:	2100      	movs	r1, #0
   13e3e:	200f      	movs	r0, #15
   13e40:	f018 f8be 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
   13e44:	2100      	movs	r1, #0
   13e46:	200d      	movs	r0, #13
   13e48:	f018 f8ba 	bl	2bfc0 <SX1276Write>
        break;
   13e4c:	e783      	b.n	13d56 <SX1276SetRx+0x72>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13e4e:	202f      	movs	r0, #47	; 0x2f
   13e50:	2144      	movs	r1, #68	; 0x44
   13e52:	f018 f8b5 	bl	2bfc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
   13e56:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13e5a:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
   13e5e:	3034      	adds	r0, #52	; 0x34
   13e60:	e7d8      	b.n	13e14 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13e62:	202f      	movs	r0, #47	; 0x2f
   13e64:	2144      	movs	r1, #68	; 0x44
   13e66:	f018 f8ab 	bl	2bfc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
   13e6a:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13e6e:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
   13e72:	3004      	adds	r0, #4
   13e74:	e7ce      	b.n	13e14 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13e76:	202f      	movs	r0, #47	; 0x2f
   13e78:	2144      	movs	r1, #68	; 0x44
   13e7a:	f018 f8a1 	bl	2bfc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
   13e7e:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13e82:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
   13e86:	305e      	adds	r0, #94	; 0x5e
   13e88:	e7c4      	b.n	13e14 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13e8a:	202f      	movs	r0, #47	; 0x2f
   13e8c:	2144      	movs	r1, #68	; 0x44
   13e8e:	f018 f897 	bl	2bfc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
   13e92:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13e96:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
   13e9a:	3012      	adds	r0, #18
   13e9c:	e7ba      	b.n	13e14 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
   13e9e:	202f      	movs	r0, #47	; 0x2f
   13ea0:	2144      	movs	r1, #68	; 0x44
   13ea2:	f018 f88d 	bl	2bfc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
   13ea6:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
   13eaa:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
   13eae:	30c6      	adds	r0, #198	; 0xc6
   13eb0:	e7b0      	b.n	13e14 <SX1276SetRx+0x130>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
   13eb2:	2140      	movs	r1, #64	; 0x40
   13eb4:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
   13eb6:	f018 f883 	bl	2bfc0 <SX1276Write>
   13eba:	e7ad      	b.n	13e18 <SX1276SetRx+0x134>
   13ebc:	f018 f88b 	bl	2bfd6 <SX1276Read>
   13ec0:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13ec4:	b2c9      	uxtb	r1, r1
   13ec6:	2031      	movs	r0, #49	; 0x31
   13ec8:	e7f5      	b.n	13eb6 <SX1276SetRx+0x1d2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
   13eca:	211f      	movs	r1, #31
   13ecc:	2011      	movs	r0, #17
   13ece:	f018 f877 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
   13ed2:	2040      	movs	r0, #64	; 0x40
   13ed4:	f018 f87f 	bl	2bfd6 <SX1276Read>
   13ed8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
   13edc:	e7ab      	b.n	13e36 <SX1276SetRx+0x152>
        if( rxContinuous == true )
   13ede:	b127      	cbz	r7, 13eea <SX1276SetRx+0x206>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
   13ee0:	2005      	movs	r0, #5
}
   13ee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
   13ee6:	f018 b881 	b.w	2bfec <SX1276SetOpMode>
   13eea:	2006      	movs	r0, #6
   13eec:	e7f9      	b.n	13ee2 <SX1276SetRx+0x1fe>
}
   13eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13ef0:	2002fb70 	.word	0x2002fb70
   13ef4:	2002fb58 	.word	0x2002fb58
   13ef8:	2002fb40 	.word	0x2002fb40
   13efc:	2002fb28 	.word	0x2002fb28

00013f00 <SX1276ReadRssi>:
{
   13f00:	b508      	push	{r3, lr}
    switch( modem )
   13f02:	b120      	cbz	r0, 13f0e <SX1276ReadRssi+0xe>
   13f04:	2801      	cmp	r0, #1
   13f06:	d00a      	beq.n	13f1e <SX1276ReadRssi+0x1e>
   13f08:	f04f 30ff 	mov.w	r0, #4294967295
}
   13f0c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
   13f0e:	2011      	movs	r0, #17
   13f10:	f018 f861 	bl	2bfd6 <SX1276Read>
   13f14:	f3c0 0047 	ubfx	r0, r0, #1, #8
   13f18:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   13f1a:	b200      	sxth	r0, r0
   13f1c:	e7f6      	b.n	13f0c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13f1e:	4b07      	ldr	r3, [pc, #28]	; (13f3c <SX1276ReadRssi+0x3c>)
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   13f20:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
   13f22:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   13f26:	4b06      	ldr	r3, [pc, #24]	; (13f40 <SX1276ReadRssi+0x40>)
   13f28:	429a      	cmp	r2, r3
   13f2a:	d903      	bls.n	13f34 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
   13f2c:	f018 f853 	bl	2bfd6 <SX1276Read>
   13f30:	389d      	subs	r0, #157	; 0x9d
   13f32:	e7f2      	b.n	13f1a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
   13f34:	f018 f84f 	bl	2bfd6 <SX1276Read>
   13f38:	38a4      	subs	r0, #164	; 0xa4
   13f3a:	e7ee      	b.n	13f1a <SX1276ReadRssi+0x1a>
   13f3c:	2002fb70 	.word	0x2002fb70
   13f40:	1f4add40 	.word	0x1f4add40

00013f44 <SX1276SetModem>:
{
   13f44:	b510      	push	{r4, lr}
   13f46:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
   13f48:	2001      	movs	r0, #1
   13f4a:	f018 f844 	bl	2bfd6 <SX1276Read>
   13f4e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
   13f52:	42a0      	cmp	r0, r4
   13f54:	4b17      	ldr	r3, [pc, #92]	; (13fb4 <SX1276SetModem+0x70>)
   13f56:	d102      	bne.n	13f5e <SX1276SetModem+0x1a>
   13f58:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
   13f5c:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
   13f5e:	2c01      	cmp	r4, #1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13f60:	f04f 0000 	mov.w	r0, #0
    SX1276.Settings.Modem = modem;
   13f64:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
    switch( SX1276.Settings.Modem )
   13f68:	d013      	beq.n	13f92 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13f6a:	f018 f83f 	bl	2bfec <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
   13f6e:	2001      	movs	r0, #1
   13f70:	f018 f831 	bl	2bfd6 <SX1276Read>
   13f74:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   13f78:	2001      	movs	r0, #1
   13f7a:	f018 f821 	bl	2bfc0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   13f7e:	2100      	movs	r1, #0
   13f80:	2040      	movs	r0, #64	; 0x40
   13f82:	f018 f81d 	bl	2bfc0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
   13f86:	2130      	movs	r1, #48	; 0x30
}
   13f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   13f8c:	2041      	movs	r0, #65	; 0x41
   13f8e:	f018 b817 	b.w	2bfc0 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   13f92:	f018 f82b 	bl	2bfec <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
   13f96:	4620      	mov	r0, r4
   13f98:	f018 f81d 	bl	2bfd6 <SX1276Read>
   13f9c:	f060 017f 	orn	r1, r0, #127	; 0x7f
   13fa0:	b2c9      	uxtb	r1, r1
   13fa2:	4620      	mov	r0, r4
   13fa4:	f018 f80c 	bl	2bfc0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
   13fa8:	2100      	movs	r1, #0
   13faa:	2040      	movs	r0, #64	; 0x40
   13fac:	f018 f808 	bl	2bfc0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
   13fb0:	2100      	movs	r1, #0
   13fb2:	e7e9      	b.n	13f88 <SX1276SetModem+0x44>
   13fb4:	2002fb70 	.word	0x2002fb70

00013fb8 <SX1276Init>:
{
   13fb8:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
   13fba:	4b17      	ldr	r3, [pc, #92]	; (14018 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   13fbc:	4917      	ldr	r1, [pc, #92]	; (1401c <SX1276Init+0x64>)
    RadioEvents = events;
   13fbe:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
   13fc0:	4817      	ldr	r0, [pc, #92]	; (14020 <SX1276Init+0x68>)
   13fc2:	f017 ffcc 	bl	2bf5e <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
   13fc6:	4915      	ldr	r1, [pc, #84]	; (1401c <SX1276Init+0x64>)
   13fc8:	4816      	ldr	r0, [pc, #88]	; (14024 <SX1276Init+0x6c>)
   13fca:	f017 ffc8 	bl	2bf5e <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
   13fce:	4913      	ldr	r1, [pc, #76]	; (1401c <SX1276Init+0x64>)
   13fd0:	4815      	ldr	r0, [pc, #84]	; (14028 <SX1276Init+0x70>)
   13fd2:	f017 ffc4 	bl	2bf5e <TimerInit>
    SX1276Reset( );
   13fd6:	f017 fea8 	bl	2bd2a <SX1276Reset>
    RxChainCalibration( );
   13fda:	f7ff fd37 	bl	13a4c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
   13fde:	2000      	movs	r0, #0
   13fe0:	f018 f804 	bl	2bfec <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
   13fe4:	4811      	ldr	r0, [pc, #68]	; (1402c <SX1276Init+0x74>)
   13fe6:	f7fe ff73 	bl	12ed0 <SX1276IoIrqInit>
   13fea:	2500      	movs	r5, #0
   13fec:	4c10      	ldr	r4, [pc, #64]	; (14030 <SX1276Init+0x78>)
        SX1276SetModem( RadioRegsInit[i].Modem );
   13fee:	7820      	ldrb	r0, [r4, #0]
   13ff0:	f7ff ffa8 	bl	13f44 <SX1276SetModem>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   13ff4:	3501      	adds	r5, #1
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   13ff6:	78a1      	ldrb	r1, [r4, #2]
   13ff8:	7860      	ldrb	r0, [r4, #1]
   13ffa:	f017 ffe1 	bl	2bfc0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   13ffe:	2d10      	cmp	r5, #16
   14000:	f104 0403 	add.w	r4, r4, #3
   14004:	d1f3      	bne.n	13fee <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
   14006:	2000      	movs	r0, #0
   14008:	f7ff ff9c 	bl	13f44 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
   1400c:	2200      	movs	r2, #0
   1400e:	4b09      	ldr	r3, [pc, #36]	; (14034 <SX1276Init+0x7c>)
   14010:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
   14014:	bd38      	pop	{r3, r4, r5, pc}
   14016:	bf00      	nop
   14018:	2002fcb4 	.word	0x2002fcb4
   1401c:	000145f9 	.word	0x000145f9
   14020:	2002fb58 	.word	0x2002fb58
   14024:	2002fb40 	.word	0x2002fb40
   14028:	2002fb28 	.word	0x2002fb28
   1402c:	20008558 	.word	0x20008558
   14030:	000365a2 	.word	0x000365a2
   14034:	2002fb70 	.word	0x2002fb70

00014038 <SX1276SetRxConfig>:
{
   14038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1403c:	4605      	mov	r5, r0
   1403e:	b087      	sub	sp, #28
   14040:	9300      	str	r3, [sp, #0]
   14042:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14044:	460c      	mov	r4, r1
   14046:	9301      	str	r3, [sp, #4]
   14048:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   1404c:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   14050:	9302      	str	r3, [sp, #8]
   14052:	4616      	mov	r6, r2
   14054:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   14058:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1405c:	9303      	str	r3, [sp, #12]
   1405e:	9204      	str	r2, [sp, #16]
   14060:	9105      	str	r1, [sp, #20]
   14062:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
   14066:	f8bd b048 	ldrh.w	fp, [sp, #72]	; 0x48
   1406a:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1406e:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   14072:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    SX1276SetModem( modem );
   14076:	f7ff ff65 	bl	13f44 <SX1276SetModem>
    SX1276SetStby( );
   1407a:	f7ff fd4f 	bl	13b1c <SX1276SetStby>
    switch( modem )
   1407e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
   14082:	b12d      	cbz	r5, 14090 <SX1276SetRxConfig+0x58>
   14084:	2d01      	cmp	r5, #1
   14086:	9905      	ldr	r1, [sp, #20]
   14088:	d06b      	beq.n	14162 <SX1276SetRxConfig+0x12a>
}
   1408a:	b007      	add	sp, #28
   1408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   14090:	498f      	ldr	r1, [pc, #572]	; (142d0 <SX1276SetRxConfig+0x298>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   14092:	9801      	ldr	r0, [sp, #4]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
   14094:	f881 3102 	strb.w	r3, [r1, #258]	; 0x102
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
   14098:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1409c:	fb03 f30b 	mul.w	r3, r3, fp
   140a0:	fbb3 f3f6 	udiv	r3, r3, r6
   140a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   140a8:	4b8a      	ldr	r3, [pc, #552]	; (142d4 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.Datarate = datarate;
   140aa:	f8c1 60f8 	str.w	r6, [r1, #248]	; 0xf8
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   140ae:	fbb3 f6f6 	udiv	r6, r3, r6
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   140b2:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
   140b6:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   140ba:	f8c1 40f0 	str.w	r4, [r1, #240]	; 0xf0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   140be:	2002      	movs	r0, #2
            SX1276.Settings.Fsk.FixLen = fixLen;
   140c0:	f881 80fe 	strb.w	r8, [r1, #254]	; 0xfe
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
   140c4:	f881 90ff 	strb.w	r9, [r1, #255]	; 0xff
            SX1276.Settings.Fsk.CrcOn = crcOn;
   140c8:	f881 a100 	strb.w	sl, [r1, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   140cc:	f8a1 70fc 	strh.w	r7, [r1, #252]	; 0xfc
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   140d0:	f3c6 2107 	ubfx	r1, r6, #8, #8
   140d4:	f017 ff74 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
   140d8:	b2f1      	uxtb	r1, r6
   140da:	2003      	movs	r0, #3
   140dc:	f017 ff70 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
   140e0:	4620      	mov	r0, r4
   140e2:	f7ff f9a7 	bl	13434 <GetFskBandwidthRegValue>
   140e6:	4601      	mov	r1, r0
   140e8:	2012      	movs	r0, #18
   140ea:	f017 ff69 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
   140ee:	9801      	ldr	r0, [sp, #4]
   140f0:	f7ff f9a0 	bl	13434 <GetFskBandwidthRegValue>
   140f4:	4601      	mov	r1, r0
   140f6:	2013      	movs	r0, #19
   140f8:	f017 ff62 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   140fc:	2025      	movs	r0, #37	; 0x25
   140fe:	0a39      	lsrs	r1, r7, #8
   14100:	f017 ff5e 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   14104:	2026      	movs	r0, #38	; 0x26
   14106:	b2f9      	uxtb	r1, r7
   14108:	f017 ff5a 	bl	2bfc0 <SX1276Write>
            if( fixLen == 1 )
   1410c:	f1b8 0f00 	cmp.w	r8, #0
   14110:	d01b      	beq.n	1414a <SX1276SetRxConfig+0x112>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
   14112:	4649      	mov	r1, r9
   14114:	2032      	movs	r0, #50	; 0x32
   14116:	f017 ff53 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   1411a:	2030      	movs	r0, #48	; 0x30
   1411c:	f017 ff5b 	bl	2bfd6 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
   14120:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   14124:	4305      	orrs	r5, r0
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
   14126:	ea45 110a 	orr.w	r1, r5, sl, lsl #4
            SX1276Write( REG_PACKETCONFIG1,
   1412a:	b2c9      	uxtb	r1, r1
   1412c:	2030      	movs	r0, #48	; 0x30
   1412e:	f017 ff47 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   14132:	2031      	movs	r0, #49	; 0x31
   14134:	f017 ff4f 	bl	2bfd6 <SX1276Read>
   14138:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1413c:	2031      	movs	r0, #49	; 0x31
   1413e:	b2c9      	uxtb	r1, r1
}
   14140:	b007      	add	sp, #28
   14142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   14146:	f017 bf3b 	b.w	2bfc0 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
   1414a:	21ff      	movs	r1, #255	; 0xff
   1414c:	2032      	movs	r0, #50	; 0x32
   1414e:	f017 ff37 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   14152:	2030      	movs	r0, #48	; 0x30
   14154:	f017 ff3f 	bl	2bfd6 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   14158:	f06f 057f 	mvn.w	r5, #127	; 0x7f
                           RF_PACKETCONFIG1_CRC_MASK &
   1415c:	f000 006f 	and.w	r0, r0, #111	; 0x6f
   14160:	e7e0      	b.n	14124 <SX1276SetRxConfig+0xec>
            if( bandwidth > 2 )
   14162:	2c02      	cmp	r4, #2
   14164:	d900      	bls.n	14168 <SX1276SetRxConfig+0x130>
                while( 1 );
   14166:	e7fe      	b.n	14166 <SX1276SetRxConfig+0x12e>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   14168:	4d59      	ldr	r5, [pc, #356]	; (142d0 <SX1276SetRxConfig+0x298>)
            else if( datarate < 6 )
   1416a:	2e06      	cmp	r6, #6
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
   1416c:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
            else if( datarate < 6 )
   14170:	4633      	mov	r3, r6
   14172:	bf38      	it	cc
   14174:	2306      	movcc	r3, #6
            bandwidth += 7;
   14176:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   14178:	2b0c      	cmp	r3, #12
            SX1276.Settings.LoRa.Coderate = coderate;
   1417a:	9800      	ldr	r0, [sp, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   1417c:	f885 112f 	strb.w	r1, [r5, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14180:	9902      	ldr	r1, [sp, #8]
   14182:	bf28      	it	cs
   14184:	230c      	movcs	r3, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   14186:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
   14188:	e9c5 4648 	strd	r4, r6, [r5, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
   1418c:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   14190:	f8a5 712a 	strh.w	r7, [r5, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
   14194:	f885 812c 	strb.w	r8, [r5, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
   14198:	f885 912d 	strb.w	r9, [r5, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
   1419c:	f885 a12e 	strb.w	sl, [r5, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   141a0:	f885 1130 	strb.w	r1, [r5, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   141a4:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   141a8:	d177      	bne.n	1429a <SX1276SetRxConfig+0x262>
   141aa:	f1a3 020b 	sub.w	r2, r3, #11
   141ae:	2a01      	cmp	r2, #1
   141b0:	bf8c      	ite	hi
   141b2:	2200      	movhi	r2, #0
   141b4:	2201      	movls	r2, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   141b6:	201d      	movs	r0, #29
   141b8:	f885 2128 	strb.w	r2, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG1,
   141bc:	9301      	str	r3, [sp, #4]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   141be:	f017 ff0a 	bl	2bfd6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   141c2:	9b00      	ldr	r3, [sp, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
   141c4:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   141c6:	ea48 0143 	orr.w	r1, r8, r3, lsl #1
   141ca:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
   141ce:	b2c9      	uxtb	r1, r1
   141d0:	f017 fef6 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   141d4:	201e      	movs	r0, #30
   141d6:	f017 fefe 	bl	2bfd6 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG2,
   141da:	9b01      	ldr	r3, [sp, #4]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
   141dc:	f3cb 2101 	ubfx	r1, fp, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
   141e0:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
   141e4:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
   141e8:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
   141ec:	4301      	orrs	r1, r0
   141ee:	b2c9      	uxtb	r1, r1
   141f0:	201e      	movs	r0, #30
   141f2:	f017 fee5 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   141f6:	2026      	movs	r0, #38	; 0x26
   141f8:	f017 feed 	bl	2bfd6 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   141fc:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
   14200:	f020 0108 	bic.w	r1, r0, #8
   14204:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
   14208:	2026      	movs	r0, #38	; 0x26
   1420a:	b2c9      	uxtb	r1, r1
   1420c:	f017 fed8 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
   14210:	201f      	movs	r0, #31
   14212:	fa5f f18b 	uxtb.w	r1, fp
   14216:	f017 fed3 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
   1421a:	2020      	movs	r0, #32
   1421c:	0a39      	lsrs	r1, r7, #8
   1421e:	f017 fecf 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
   14222:	2021      	movs	r0, #33	; 0x21
   14224:	b2f9      	uxtb	r1, r7
   14226:	f017 fecb 	bl	2bfc0 <SX1276Write>
            if( fixLen == 1 )
   1422a:	f1b8 0f00 	cmp.w	r8, #0
   1422e:	d003      	beq.n	14238 <SX1276SetRxConfig+0x200>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
   14230:	4649      	mov	r1, r9
   14232:	2022      	movs	r0, #34	; 0x22
   14234:	f017 fec4 	bl	2bfc0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   14238:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
   1423c:	b16b      	cbz	r3, 1425a <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   1423e:	2044      	movs	r0, #68	; 0x44
   14240:	f017 fec9 	bl	2bfd6 <SX1276Read>
   14244:	f060 017f 	orn	r1, r0, #127	; 0x7f
   14248:	b2c9      	uxtb	r1, r1
   1424a:	2044      	movs	r0, #68	; 0x44
   1424c:	f017 feb8 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   14250:	2024      	movs	r0, #36	; 0x24
   14252:	f895 1130 	ldrb.w	r1, [r5, #304]	; 0x130
   14256:	f017 feb3 	bl	2bfc0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   1425a:	2c09      	cmp	r4, #9
   1425c:	d12a      	bne.n	142b4 <SX1276SetRxConfig+0x27c>
   1425e:	f8d5 20e4 	ldr.w	r2, [r5, #228]	; 0xe4
   14262:	4b1d      	ldr	r3, [pc, #116]	; (142d8 <SX1276SetRxConfig+0x2a0>)
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   14264:	2102      	movs	r1, #2
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   14266:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   14268:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
   1426c:	d91e      	bls.n	142ac <SX1276SetRxConfig+0x274>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   1426e:	f017 fea7 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
   14272:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
   14274:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
   14276:	f017 fea3 	bl	2bfc0 <SX1276Write>
            if( datarate == 6 )
   1427a:	2e06      	cmp	r6, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   1427c:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
   14280:	d81b      	bhi.n	142ba <SX1276SetRxConfig+0x282>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   14282:	f017 fea8 	bl	2bfd6 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   14286:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   1428a:	f041 0105 	orr.w	r1, r1, #5
   1428e:	2031      	movs	r0, #49	; 0x31
   14290:	f017 fe96 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   14294:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   14296:	2037      	movs	r0, #55	; 0x37
   14298:	e752      	b.n	14140 <SX1276SetRxConfig+0x108>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   1429a:	2c08      	cmp	r4, #8
   1429c:	d104      	bne.n	142a8 <SX1276SetRxConfig+0x270>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   1429e:	2e0b      	cmp	r6, #11
   142a0:	bf94      	ite	ls
   142a2:	2200      	movls	r2, #0
   142a4:	2201      	movhi	r2, #1
   142a6:	e786      	b.n	141b6 <SX1276SetRxConfig+0x17e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   142a8:	2200      	movs	r2, #0
   142aa:	e784      	b.n	141b6 <SX1276SetRxConfig+0x17e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
   142ac:	f017 fe88 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
   142b0:	217f      	movs	r1, #127	; 0x7f
   142b2:	e7df      	b.n	14274 <SX1276SetRxConfig+0x23c>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
   142b4:	2103      	movs	r1, #3
   142b6:	2036      	movs	r0, #54	; 0x36
   142b8:	e7dd      	b.n	14276 <SX1276SetRxConfig+0x23e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   142ba:	f017 fe8c 	bl	2bfd6 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   142be:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   142c2:	f041 0103 	orr.w	r1, r1, #3
   142c6:	2031      	movs	r0, #49	; 0x31
   142c8:	f017 fe7a 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   142cc:	210a      	movs	r1, #10
   142ce:	e7e2      	b.n	14296 <SX1276SetRxConfig+0x25e>
   142d0:	2002fb70 	.word	0x2002fb70
   142d4:	01e84800 	.word	0x01e84800
   142d8:	1f4add40 	.word	0x1f4add40

000142dc <SX1276SetTxConfig>:
{
   142dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142e0:	468a      	mov	sl, r1
   142e2:	b087      	sub	sp, #28
   142e4:	461e      	mov	r6, r3
   142e6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   142ea:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   142ee:	9305      	str	r3, [sp, #20]
   142f0:	4617      	mov	r7, r2
   142f2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   142f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   142f8:	9302      	str	r3, [sp, #8]
   142fa:	9104      	str	r1, [sp, #16]
   142fc:	9203      	str	r2, [sp, #12]
   142fe:	9001      	str	r0, [sp, #4]
   14300:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   14304:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   14308:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
   1430c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
   14310:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
   14314:	f7ff fe16 	bl	13f44 <SX1276SetModem>
    SX1276SetStby( );
   14318:	f7ff fc00 	bl	13b1c <SX1276SetStby>
    SX1276SetRfTxPower( power );
   1431c:	4650      	mov	r0, sl
   1431e:	f7fe ff37 	bl	13190 <SX1276SetRfTxPower>
    switch( modem )
   14322:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
   14326:	9b01      	ldr	r3, [sp, #4]
   14328:	b12b      	cbz	r3, 14336 <SX1276SetTxConfig+0x5a>
   1432a:	2b01      	cmp	r3, #1
   1432c:	9b05      	ldr	r3, [sp, #20]
   1432e:	d05b      	beq.n	143e8 <SX1276SetTxConfig+0x10c>
}
   14330:	b007      	add	sp, #28
   14332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
   14336:	4b76      	ldr	r3, [pc, #472]	; (14510 <SX1276SetTxConfig+0x234>)
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
   14338:	2004      	movs	r0, #4
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
   1433a:	e9c3 763b 	strd	r7, r6, [r3, #236]	; 0xec
            SX1276.Settings.Fsk.FixLen = fixLen;
   1433e:	f883 50fe 	strb.w	r5, [r3, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
   14342:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
            SX1276.Settings.Fsk.IqInverted = iqInverted;
   14346:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
            SX1276.Settings.Fsk.TxTimeout = timeout;
   1434a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
   1434e:	f883 a0e8 	strb.w	sl, [r3, #232]	; 0xe8
            SX1276.Settings.Fsk.Datarate = datarate;
   14352:	f8c3 80f8 	str.w	r8, [r3, #248]	; 0xf8
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
   14356:	f8a3 90fc 	strh.w	r9, [r3, #252]	; 0xfc
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
   1435a:	f643 5309 	movw	r3, #15625	; 0x3d09
   1435e:	fbb7 f2f3 	udiv	r2, r7, r3
   14362:	f641 6684 	movw	r6, #7812	; 0x1e84
   14366:	fb03 7712 	mls	r7, r3, r2, r7
   1436a:	eb06 2607 	add.w	r6, r6, r7, lsl #8
   1436e:	fbb6 f6f3 	udiv	r6, r6, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
   14372:	eb06 2602 	add.w	r6, r6, r2, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
   14376:	f3c6 2107 	ubfx	r1, r6, #8, #8
   1437a:	f017 fe21 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
   1437e:	b2f1      	uxtb	r1, r6
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   14380:	4e64      	ldr	r6, [pc, #400]	; (14514 <SX1276SetTxConfig+0x238>)
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
   14382:	2005      	movs	r0, #5
   14384:	f017 fe1c 	bl	2bfc0 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
   14388:	fbb6 f6f8 	udiv	r6, r6, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
   1438c:	2002      	movs	r0, #2
   1438e:	f3c6 2107 	ubfx	r1, r6, #8, #8
   14392:	f017 fe15 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
   14396:	2003      	movs	r0, #3
   14398:	b2f1      	uxtb	r1, r6
   1439a:	f017 fe11 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   1439e:	2025      	movs	r0, #37	; 0x25
   143a0:	ea4f 2119 	mov.w	r1, r9, lsr #8
   143a4:	f017 fe0c 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
   143a8:	fa5f f189 	uxtb.w	r1, r9
   143ac:	2026      	movs	r0, #38	; 0x26
   143ae:	f017 fe07 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
   143b2:	2030      	movs	r0, #48	; 0x30
   143b4:	f017 fe0f 	bl	2bfd6 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
   143b8:	f085 0501 	eor.w	r5, r5, #1
                           ( crcOn << 4 ) );
   143bc:	0124      	lsls	r4, r4, #4
            SX1276Write( REG_PACKETCONFIG1,
   143be:	f000 006f 	and.w	r0, r0, #111	; 0x6f
   143c2:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
   143c6:	4304      	orrs	r4, r0
   143c8:	b2e1      	uxtb	r1, r4
   143ca:	2030      	movs	r0, #48	; 0x30
   143cc:	f017 fdf8 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
   143d0:	2031      	movs	r0, #49	; 0x31
   143d2:	f017 fe00 	bl	2bfd6 <SX1276Read>
   143d6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   143da:	2031      	movs	r0, #49	; 0x31
   143dc:	b2c9      	uxtb	r1, r1
}
   143de:	b007      	add	sp, #28
   143e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   143e4:	f017 bdec 	b.w	2bfc0 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
   143e8:	4f49      	ldr	r7, [pc, #292]	; (14510 <SX1276SetTxConfig+0x234>)
            if( bandwidth > 2 )
   143ea:	2e02      	cmp	r6, #2
            SX1276.Settings.LoRa.Power = power;
   143ec:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
   143f0:	d900      	bls.n	143f4 <SX1276SetTxConfig+0x118>
                while( 1 );
   143f2:	e7fe      	b.n	143f2 <SX1276SetTxConfig+0x116>
            else if( datarate < 6 )
   143f4:	f1b8 0f06 	cmp.w	r8, #6
   143f8:	46c2      	mov	sl, r8
   143fa:	bf38      	it	cc
   143fc:	f04f 0a06 	movcc.w	sl, #6
            bandwidth += 7;
   14400:	3607      	adds	r6, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
   14402:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14406:	9802      	ldr	r0, [sp, #8]
   14408:	bf28      	it	cs
   1440a:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   1440e:	2e07      	cmp	r6, #7
            SX1276.Settings.LoRa.Datarate = datarate;
   14410:	e9c7 6848 	strd	r6, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
   14414:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
   14418:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
   1441c:	f887 512c 	strb.w	r5, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
   14420:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
   14424:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
   14428:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
   1442c:	f887 1131 	strb.w	r1, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
   14430:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   14434:	d156      	bne.n	144e4 <SX1276SetTxConfig+0x208>
   14436:	f1aa 020b 	sub.w	r2, sl, #11
   1443a:	2a01      	cmp	r2, #1
   1443c:	bf8c      	ite	hi
   1443e:	2200      	movhi	r2, #0
   14440:	2201      	movls	r2, #1
   14442:	f887 2128 	strb.w	r2, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
   14446:	b16b      	cbz	r3, 14464 <SX1276SetTxConfig+0x188>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
   14448:	2044      	movs	r0, #68	; 0x44
   1444a:	f017 fdc4 	bl	2bfd6 <SX1276Read>
   1444e:	f060 017f 	orn	r1, r0, #127	; 0x7f
   14452:	b2c9      	uxtb	r1, r1
   14454:	2044      	movs	r0, #68	; 0x44
   14456:	f017 fdb3 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
   1445a:	2024      	movs	r0, #36	; 0x24
   1445c:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
   14460:	f017 fdae 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
   14464:	201d      	movs	r0, #29
   14466:	f017 fdb6 	bl	2bfd6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
   1446a:	ea45 014b 	orr.w	r1, r5, fp, lsl #1
   1446e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
   14472:	b2c9      	uxtb	r1, r1
   14474:	201d      	movs	r0, #29
   14476:	f017 fda3 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
   1447a:	201e      	movs	r0, #30
   1447c:	f017 fdab 	bl	2bfd6 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
   14480:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
   14482:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
   14486:	ea44 140a 	orr.w	r4, r4, sl, lsl #4
   1448a:	4304      	orrs	r4, r0
   1448c:	b2e1      	uxtb	r1, r4
   1448e:	201e      	movs	r0, #30
   14490:	f017 fd96 	bl	2bfc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
   14494:	2026      	movs	r0, #38	; 0x26
   14496:	f017 fd9e 	bl	2bfd6 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
   1449a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
            SX1276Write( REG_LR_MODEMCONFIG3,
   1449e:	f020 0108 	bic.w	r1, r0, #8
   144a2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
   144a6:	2026      	movs	r0, #38	; 0x26
   144a8:	b2c9      	uxtb	r1, r1
   144aa:	f017 fd89 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
   144ae:	2020      	movs	r0, #32
   144b0:	ea4f 2119 	mov.w	r1, r9, lsr #8
   144b4:	f017 fd84 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
   144b8:	2021      	movs	r0, #33	; 0x21
   144ba:	fa5f f189 	uxtb.w	r1, r9
   144be:	f017 fd7f 	bl	2bfc0 <SX1276Write>
            if( datarate == 6 )
   144c2:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   144c6:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
   144ca:	d815      	bhi.n	144f8 <SX1276SetTxConfig+0x21c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   144cc:	f017 fd83 	bl	2bfd6 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   144d0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   144d4:	f041 0105 	orr.w	r1, r1, #5
   144d8:	2031      	movs	r0, #49	; 0x31
   144da:	f017 fd71 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   144de:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   144e0:	2037      	movs	r0, #55	; 0x37
   144e2:	e77c      	b.n	143de <SX1276SetTxConfig+0x102>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
   144e4:	2e08      	cmp	r6, #8
   144e6:	d105      	bne.n	144f4 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
   144e8:	f1b8 0f0b 	cmp.w	r8, #11
   144ec:	bf94      	ite	ls
   144ee:	2200      	movls	r2, #0
   144f0:	2201      	movhi	r2, #1
   144f2:	e7a6      	b.n	14442 <SX1276SetTxConfig+0x166>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
   144f4:	2200      	movs	r2, #0
   144f6:	e7a4      	b.n	14442 <SX1276SetTxConfig+0x166>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
   144f8:	f017 fd6d 	bl	2bfd6 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
   144fc:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   14500:	f041 0103 	orr.w	r1, r1, #3
   14504:	2031      	movs	r0, #49	; 0x31
   14506:	f017 fd5b 	bl	2bfc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
   1450a:	210a      	movs	r1, #10
   1450c:	e7e8      	b.n	144e0 <SX1276SetTxConfig+0x204>
   1450e:	bf00      	nop
   14510:	2002fb70 	.word	0x2002fb70
   14514:	01e84800 	.word	0x01e84800

00014518 <SX1276SetTxContinuousWave>:
    uint32_t timeout = ( uint32_t )time * 1000;
   14518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   1451c:	b530      	push	{r4, r5, lr}
   1451e:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
   14520:	fb03 f402 	mul.w	r4, r3, r2
{
   14524:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
   14526:	f7ff f81f 	bl	13568 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
   1452a:	2300      	movs	r3, #0
   1452c:	2205      	movs	r2, #5
   1452e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14532:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
   14536:	4618      	mov	r0, r3
   14538:	e9cd 3306 	strd	r3, r3, [sp, #24]
   1453c:	e9cd 3304 	strd	r3, r3, [sp, #16]
   14540:	9303      	str	r3, [sp, #12]
   14542:	4629      	mov	r1, r5
   14544:	9200      	str	r2, [sp, #0]
   14546:	9408      	str	r4, [sp, #32]
   14548:	461a      	mov	r2, r3
   1454a:	f7ff fec7 	bl	142dc <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
   1454e:	2031      	movs	r0, #49	; 0x31
   14550:	f017 fd41 	bl	2bfd6 <SX1276Read>
   14554:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
   14558:	2031      	movs	r0, #49	; 0x31
   1455a:	f017 fd31 	bl	2bfc0 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   1455e:	4d0d      	ldr	r5, [pc, #52]	; (14594 <SX1276SetTxContinuousWave+0x7c>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
   14560:	21f0      	movs	r1, #240	; 0xf0
   14562:	2040      	movs	r0, #64	; 0x40
   14564:	f017 fd2c 	bl	2bfc0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
   14568:	21a0      	movs	r1, #160	; 0xa0
   1456a:	2041      	movs	r0, #65	; 0x41
   1456c:	f017 fd28 	bl	2bfc0 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
   14570:	4621      	mov	r1, r4
   14572:	4628      	mov	r0, r5
   14574:	f017 fcfb 	bl	2bf6e <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
   14578:	2202      	movs	r2, #2
   1457a:	4b07      	ldr	r3, [pc, #28]	; (14598 <SX1276SetTxContinuousWave+0x80>)
    TimerStart( &TxTimeoutTimer );
   1457c:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
   1457e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
   14582:	f7fe feb7 	bl	132f4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   14586:	2003      	movs	r0, #3
}
   14588:	b00b      	add	sp, #44	; 0x2c
   1458a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
   1458e:	f017 bd2d 	b.w	2bfec <SX1276SetOpMode>
   14592:	bf00      	nop
   14594:	2002fb58 	.word	0x2002fb58
   14598:	2002fb70 	.word	0x2002fb70

0001459c <SX1276SetMaxPayloadLength>:
{
   1459c:	b538      	push	{r3, r4, r5, lr}
   1459e:	4605      	mov	r5, r0
   145a0:	460c      	mov	r4, r1
    SX1276SetModem( modem );
   145a2:	f7ff fccf 	bl	13f44 <SX1276SetModem>
    switch( modem )
   145a6:	b115      	cbz	r5, 145ae <SX1276SetMaxPayloadLength+0x12>
   145a8:	2d01      	cmp	r5, #1
   145aa:	d00b      	beq.n	145c4 <SX1276SetMaxPayloadLength+0x28>
}
   145ac:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
   145ae:	4b07      	ldr	r3, [pc, #28]	; (145cc <SX1276SetMaxPayloadLength+0x30>)
   145b0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   145b4:	2b00      	cmp	r3, #0
   145b6:	d1f9      	bne.n	145ac <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
   145b8:	4621      	mov	r1, r4
   145ba:	2032      	movs	r0, #50	; 0x32
}
   145bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
   145c0:	f017 bcfe 	b.w	2bfc0 <SX1276Write>
   145c4:	4621      	mov	r1, r4
   145c6:	2023      	movs	r0, #35	; 0x23
   145c8:	e7f8      	b.n	145bc <SX1276SetMaxPayloadLength+0x20>
   145ca:	bf00      	nop
   145cc:	2002fb70 	.word	0x2002fb70

000145d0 <SX1276SetPublicNetwork>:
{
   145d0:	b510      	push	{r4, lr}
   145d2:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
   145d4:	2001      	movs	r0, #1
   145d6:	f7ff fcb5 	bl	13f44 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
   145da:	4b06      	ldr	r3, [pc, #24]	; (145f4 <SX1276SetPublicNetwork+0x24>)
   145dc:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
   145e0:	b12c      	cbz	r4, 145ee <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
   145e2:	2134      	movs	r1, #52	; 0x34
}
   145e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
   145e8:	2039      	movs	r0, #57	; 0x39
   145ea:	f017 bce9 	b.w	2bfc0 <SX1276Write>
   145ee:	2112      	movs	r1, #18
   145f0:	e7f8      	b.n	145e4 <SX1276SetPublicNetwork+0x14>
   145f2:	bf00      	nop
   145f4:	2002fb70 	.word	0x2002fb70

000145f8 <SX1276OnTimeoutIrq>:
{
   145f8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
   145fa:	4c2d      	ldr	r4, [pc, #180]	; (146b0 <SX1276OnTimeoutIrq+0xb8>)
   145fc:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
   14600:	2b01      	cmp	r3, #1
   14602:	d002      	beq.n	1460a <SX1276OnTimeoutIrq+0x12>
   14604:	2b02      	cmp	r3, #2
   14606:	d02d      	beq.n	14664 <SX1276OnTimeoutIrq+0x6c>
}
   14608:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
   1460a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
   1460e:	b9cb      	cbnz	r3, 14644 <SX1276OnTimeoutIrq+0x4c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
   14610:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   14614:	210b      	movs	r1, #11
   14616:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
   14618:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
   1461c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
   14620:	f017 fcce 	bl	2bfc0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
   14624:	2110      	movs	r1, #16
   14626:	203f      	movs	r0, #63	; 0x3f
   14628:	f017 fcca 	bl	2bfc0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
   1462c:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
   14630:	b193      	cbz	r3, 14658 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
   14632:	200d      	movs	r0, #13
   14634:	f017 fccf 	bl	2bfd6 <SX1276Read>
   14638:	f040 0140 	orr.w	r1, r0, #64	; 0x40
   1463c:	b2c9      	uxtb	r1, r1
   1463e:	200d      	movs	r0, #13
   14640:	f017 fcbe 	bl	2bfc0 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
   14644:	4b1b      	ldr	r3, [pc, #108]	; (146b4 <SX1276OnTimeoutIrq+0xbc>)
   14646:	681b      	ldr	r3, [r3, #0]
   14648:	2b00      	cmp	r3, #0
   1464a:	d0dd      	beq.n	14608 <SX1276OnTimeoutIrq+0x10>
   1464c:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   1464e:	2b00      	cmp	r3, #0
   14650:	d0da      	beq.n	14608 <SX1276OnTimeoutIrq+0x10>
}
   14652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
   14656:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
   14658:	4817      	ldr	r0, [pc, #92]	; (146b8 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
   1465a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
   1465e:	f7fe febf 	bl	133e0 <TimerStop>
   14662:	e7ef      	b.n	14644 <SX1276OnTimeoutIrq+0x4c>
        SX1276Reset( );
   14664:	f017 fb61 	bl	2bd2a <SX1276Reset>
        RxChainCalibration( );
   14668:	f7ff f9f0 	bl	13a4c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
   1466c:	2000      	movs	r0, #0
   1466e:	f017 fcbd 	bl	2bfec <SX1276SetOpMode>
   14672:	2600      	movs	r6, #0
   14674:	4d11      	ldr	r5, [pc, #68]	; (146bc <SX1276OnTimeoutIrq+0xc4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
   14676:	7828      	ldrb	r0, [r5, #0]
   14678:	f7ff fc64 	bl	13f44 <SX1276SetModem>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   1467c:	3601      	adds	r6, #1
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
   1467e:	78a9      	ldrb	r1, [r5, #2]
   14680:	7868      	ldrb	r0, [r5, #1]
   14682:	f017 fc9d 	bl	2bfc0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
   14686:	2e10      	cmp	r6, #16
   14688:	f105 0503 	add.w	r5, r5, #3
   1468c:	d1f3      	bne.n	14676 <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
   1468e:	2000      	movs	r0, #0
   14690:	f7ff fc58 	bl	13f44 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
   14694:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
   14698:	f7ff ff9a 	bl	145d0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
   1469c:	2300      	movs	r3, #0
   1469e:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
   146a2:	4b04      	ldr	r3, [pc, #16]	; (146b4 <SX1276OnTimeoutIrq+0xbc>)
   146a4:	681b      	ldr	r3, [r3, #0]
   146a6:	2b00      	cmp	r3, #0
   146a8:	d0ae      	beq.n	14608 <SX1276OnTimeoutIrq+0x10>
   146aa:	685b      	ldr	r3, [r3, #4]
   146ac:	e7cf      	b.n	1464e <SX1276OnTimeoutIrq+0x56>
   146ae:	bf00      	nop
   146b0:	2002fb70 	.word	0x2002fb70
   146b4:	2002fcb4 	.word	0x2002fcb4
   146b8:	2002fb28 	.word	0x2002fb28
   146bc:	000365a2 	.word	0x000365a2

000146c0 <aes_set_key>:

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
   146c0:	f1a1 0310 	sub.w	r3, r1, #16
   146c4:	b2db      	uxtb	r3, r3
   146c6:	2b10      	cmp	r3, #16
{
   146c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   146cc:	4604      	mov	r4, r0
    switch( keylen )
   146ce:	d804      	bhi.n	146da <aes_set_key+0x1a>
   146d0:	483c      	ldr	r0, [pc, #240]	; (147c4 <aes_set_key+0x104>)
   146d2:	fa20 f303 	lsr.w	r3, r0, r3
   146d6:	07db      	lsls	r3, r3, #31
   146d8:	d405      	bmi.n	146e6 <aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
   146da:	2300      	movs	r3, #0
        return ( uint8_t )-1;
   146dc:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
   146de:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
   146e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch( keylen )
   146e6:	4625      	mov	r5, r4
   146e8:	1e56      	subs	r6, r2, #1
        *d++ = *s++;
   146ea:	f815 3b01 	ldrb.w	r3, [r5], #1
   146ee:	f806 3f01 	strb.w	r3, [r6, #1]!
    while( nn-- )
   146f2:	1b63      	subs	r3, r4, r5
   146f4:	440b      	add	r3, r1
   146f6:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
   146fa:	d1f6      	bne.n	146ea <aes_set_key+0x2a>
    ctx->rnd = (hi >> 4) - 1;
   146fc:	4688      	mov	r8, r1
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   146fe:	f04f 0e01 	mov.w	lr, #1
    hi = (keylen + 28) << 2;
   14702:	f101 031c 	add.w	r3, r1, #28
   14706:	009b      	lsls	r3, r3, #2
   14708:	fa5f fc83 	uxtb.w	ip, r3
    ctx->rnd = (hi >> 4) - 1;
   1470c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   14710:	3b01      	subs	r3, #1
            t0 = s_box(t1) ^ rc;
   14712:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 147c8 <aes_set_key+0x108>
    ctx->rnd = (hi >> 4) - 1;
   14716:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1471a:	1853      	adds	r3, r2, r1
        if( cc % keylen == 0 )
   1471c:	fbb8 faf1 	udiv	sl, r8, r1
   14720:	fb01 8a1a 	mls	sl, r1, sl, r8
   14724:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
        t0 = ctx->ksch[cc - 4];
   14728:	f813 7c04 	ldrb.w	r7, [r3, #-4]
        t1 = ctx->ksch[cc - 3];
   1472c:	f813 6c03 	ldrb.w	r6, [r3, #-3]
        t2 = ctx->ksch[cc - 2];
   14730:	f813 5c02 	ldrb.w	r5, [r3, #-2]
        t3 = ctx->ksch[cc - 1];
   14734:	f813 4c01 	ldrb.w	r4, [r3, #-1]
        if( cc % keylen == 0 )
   14738:	d133      	bne.n	147a2 <aes_set_key+0xe2>
            t0 = s_box(t1) ^ rc;
   1473a:	f819 a006 	ldrb.w	sl, [r9, r6]
            t1 = s_box(t2);
   1473e:	f819 6005 	ldrb.w	r6, [r9, r5]
            t2 = s_box(t3);
   14742:	f819 5004 	ldrb.w	r5, [r9, r4]
            t3 = s_box(tt);
   14746:	f819 4007 	ldrb.w	r4, [r9, r7]
            rc = f2(rc);
   1474a:	ea4f 17de 	mov.w	r7, lr, lsr #7
   1474e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
            t0 = s_box(t1) ^ rc;
   14752:	ea8e 0a0a 	eor.w	sl, lr, sl
            rc = f2(rc);
   14756:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   1475a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
   1475e:	b2ff      	uxtb	r7, r7
   14760:	fa5f fe8e 	uxtb.w	lr, lr
   14764:	ea87 0e0e 	eor.w	lr, r7, lr
            t0 = s_box(t1) ^ rc;
   14768:	4657      	mov	r7, sl
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   1476a:	f892 a000 	ldrb.w	sl, [r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1476e:	f108 0804 	add.w	r8, r8, #4
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
   14772:	ea87 070a 	eor.w	r7, r7, sl
   14776:	701f      	strb	r7, [r3, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   14778:	7857      	ldrb	r7, [r2, #1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1477a:	fa5f f888 	uxtb.w	r8, r8
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
   1477e:	407e      	eors	r6, r7
   14780:	705e      	strb	r6, [r3, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   14782:	7896      	ldrb	r6, [r2, #2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   14784:	45c4      	cmp	ip, r8
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
   14786:	ea85 0506 	eor.w	r5, r5, r6
   1478a:	709d      	strb	r5, [r3, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   1478c:	78d5      	ldrb	r5, [r2, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1478e:	f103 0304 	add.w	r3, r3, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
   14792:	ea84 0405 	eor.w	r4, r4, r5
   14796:	f803 4c01 	strb.w	r4, [r3, #-1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
   1479a:	f102 0204 	add.w	r2, r2, #4
   1479e:	d8bd      	bhi.n	1471c <aes_set_key+0x5c>
   147a0:	e79f      	b.n	146e2 <aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
   147a2:	2918      	cmp	r1, #24
   147a4:	d9e1      	bls.n	1476a <aes_set_key+0xaa>
   147a6:	f1ba 0f10 	cmp.w	sl, #16
   147aa:	d1de      	bne.n	1476a <aes_set_key+0xaa>
            t0 = s_box(t0);
   147ac:	f8df a018 	ldr.w	sl, [pc, #24]	; 147c8 <aes_set_key+0x108>
   147b0:	f81a 7007 	ldrb.w	r7, [sl, r7]
            t1 = s_box(t1);
   147b4:	f81a 6006 	ldrb.w	r6, [sl, r6]
            t2 = s_box(t2);
   147b8:	f81a 5005 	ldrb.w	r5, [sl, r5]
            t3 = s_box(t3);
   147bc:	f81a 4004 	ldrb.w	r4, [sl, r4]
   147c0:	e7d3      	b.n	1476a <aes_set_key+0xaa>
   147c2:	bf00      	nop
   147c4:	00010101 	.word	0x00010101
   147c8:	000367d2 	.word	0x000367d2

000147cc <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
   147cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( ctx->rnd )
   147d0:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
{
   147d4:	b0a3      	sub	sp, #140	; 0x8c
   147d6:	911d      	str	r1, [sp, #116]	; 0x74
   147d8:	921b      	str	r2, [sp, #108]	; 0x6c
    if( ctx->rnd )
   147da:	9301      	str	r3, [sp, #4]
   147dc:	2b00      	cmp	r3, #0
   147de:	f000 8153 	beq.w	14a88 <aes_encrypt+0x2bc>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
   147e2:	4601      	mov	r1, r0
   147e4:	a81e      	add	r0, sp, #120	; 0x78
   147e6:	f017 fcb3 	bl	2c150 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
   147ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   147ec:	4ca7      	ldr	r4, [pc, #668]	; (14a8c <aes_encrypt+0x2c0>)
   147ee:	3310      	adds	r3, #16
   147f0:	9302      	str	r3, [sp, #8]
        for( r = 1 ; r < ctx->rnd ; ++r )
   147f2:	2300      	movs	r3, #0
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   147f4:	4da6      	ldr	r5, [pc, #664]	; (14a90 <aes_encrypt+0x2c4>)
   147f6:	4ea7      	ldr	r6, [pc, #668]	; (14a94 <aes_encrypt+0x2c8>)
        for( r = 1 ; r < ctx->rnd ; ++r )
   147f8:	9303      	str	r3, [sp, #12]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   147fa:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
   147fe:	f89d c081 	ldrb.w	ip, [sp, #129]	; 0x81
   14802:	9004      	str	r0, [sp, #16]
   14804:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   14808:	9b02      	ldr	r3, [sp, #8]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   1480a:	9005      	str	r0, [sp, #20]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   1480c:	5c20      	ldrb	r0, [r4, r0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   1480e:	f89d 8078 	ldrb.w	r8, [sp, #120]	; 0x78
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   14812:	9006      	str	r0, [sp, #24]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14814:	f89d 007b 	ldrb.w	r0, [sp, #123]	; 0x7b
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14818:	f89d e07d 	ldrb.w	lr, [sp, #125]	; 0x7d
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   1481c:	9007      	str	r0, [sp, #28]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1481e:	5c20      	ldrb	r0, [r4, r0]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14820:	f89d a082 	ldrb.w	sl, [sp, #130]	; 0x82
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   14824:	9008      	str	r0, [sp, #32]
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14826:	9804      	ldr	r0, [sp, #16]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14828:	f89d 9087 	ldrb.w	r9, [sp, #135]	; 0x87
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   1482c:	5c20      	ldrb	r0, [r4, r0]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
   1482e:	931c      	str	r3, [sp, #112]	; 0x70
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   14830:	9009      	str	r0, [sp, #36]	; 0x24
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14832:	f814 000c 	ldrb.w	r0, [r4, ip]
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14836:	f814 200a 	ldrb.w	r2, [r4, sl]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   1483a:	900a      	str	r0, [sp, #40]	; 0x28
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1483c:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14840:	f814 3009 	ldrb.w	r3, [r4, r9]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14844:	900b      	str	r0, [sp, #44]	; 0x2c
   14846:	f89d 0085 	ldrb.w	r0, [sp, #133]	; 0x85
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   1484a:	f814 1008 	ldrb.w	r1, [r4, r8]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1484e:	900c      	str	r0, [sp, #48]	; 0x30
   14850:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14854:	f814 700e 	ldrb.w	r7, [r4, lr]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   14858:	900d      	str	r0, [sp, #52]	; 0x34
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   1485a:	5c20      	ldrb	r0, [r4, r0]
   1485c:	900e      	str	r0, [sp, #56]	; 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   1485e:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
   14862:	900f      	str	r0, [sp, #60]	; 0x3c
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14864:	5c20      	ldrb	r0, [r4, r0]
   14866:	9010      	str	r0, [sp, #64]	; 0x40
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   14868:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1486a:	5c20      	ldrb	r0, [r4, r0]
   1486c:	9011      	str	r0, [sp, #68]	; 0x44
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   1486e:	980c      	ldr	r0, [sp, #48]	; 0x30
   14870:	5c20      	ldrb	r0, [r4, r0]
   14872:	9012      	str	r0, [sp, #72]	; 0x48
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   14874:	f89d 0084 	ldrb.w	r0, [sp, #132]	; 0x84
   14878:	9013      	str	r0, [sp, #76]	; 0x4c
   1487a:	f89d 0079 	ldrb.w	r0, [sp, #121]	; 0x79
   1487e:	9014      	str	r0, [sp, #80]	; 0x50
   14880:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
   14884:	9015      	str	r0, [sp, #84]	; 0x54
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   14886:	5c20      	ldrb	r0, [r4, r0]
   14888:	9016      	str	r0, [sp, #88]	; 0x58
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   1488a:	f89d 0083 	ldrb.w	r0, [sp, #131]	; 0x83
   1488e:	9017      	str	r0, [sp, #92]	; 0x5c
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   14890:	5c20      	ldrb	r0, [r4, r0]
   14892:	9018      	str	r0, [sp, #96]	; 0x60
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   14894:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14896:	5c20      	ldrb	r0, [r4, r0]
   14898:	9019      	str	r0, [sp, #100]	; 0x64
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   1489a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1489c:	5c20      	ldrb	r0, [r4, r0]
   1489e:	901a      	str	r0, [sp, #104]	; 0x68
        for( r = 1 ; r < ctx->rnd ; ++r )
   148a0:	9803      	ldr	r0, [sp, #12]
   148a2:	3001      	adds	r0, #1
   148a4:	9003      	str	r0, [sp, #12]
   148a6:	9802      	ldr	r0, [sp, #8]
   148a8:	f8dd b004 	ldr.w	fp, [sp, #4]
   148ac:	3010      	adds	r0, #16
   148ae:	9002      	str	r0, [sp, #8]
   148b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   148b4:	4583      	cmp	fp, r0
   148b6:	d836      	bhi.n	14926 <aes_encrypt+0x15a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   148b8:	f88d 1078 	strb.w	r1, [sp, #120]	; 0x78
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   148bc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   148c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   148c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
   148c4:	f88d 107c 	strb.w	r1, [sp, #124]	; 0x7c
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
   148c8:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   148cc:	9911      	ldr	r1, [sp, #68]	; 0x44
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   148ce:	9a06      	ldr	r2, [sp, #24]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   148d0:	f88d 1080 	strb.w	r1, [sp, #128]	; 0x80
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   148d4:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   148d8:	9919      	ldr	r1, [sp, #100]	; 0x64
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   148da:	9a16      	ldr	r2, [sp, #88]	; 0x58
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
   148dc:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
   148e0:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   148e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   148e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   148e8:	f88d 107d 	strb.w	r1, [sp, #125]	; 0x7d
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   148ec:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   148f0:	9912      	ldr	r1, [sp, #72]	; 0x48
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   148f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   148f4:	f88d 1081 	strb.w	r1, [sp, #129]	; 0x81
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
   148f8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   148fc:	991a      	ldr	r1, [sp, #104]	; 0x68
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   148fe:	9a08      	ldr	r2, [sp, #32]
   14900:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   14904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14906:	981d      	ldr	r0, [sp, #116]	; 0x74
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
   14908:	f88d 1085 	strb.w	r1, [sp, #133]	; 0x85
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
   1490c:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   14910:	a91e      	add	r1, sp, #120	; 0x78
   14912:	eb03 120b 	add.w	r2, r3, fp, lsl #4
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
   14916:	f88d 7079 	strb.w	r7, [sp, #121]	; 0x79
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
   1491a:	f017 fc19 	bl	2c150 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
   1491e:	2000      	movs	r0, #0
}
   14920:	b023      	add	sp, #140	; 0x8c
   14922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14926:	f815 b008 	ldrb.w	fp, [r5, r8]
   1492a:	ea82 0003 	eor.w	r0, r2, r3
   1492e:	ea8b 0000 	eor.w	r0, fp, r0
   14932:	f816 b00e 	ldrb.w	fp, [r6, lr]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14936:	404b      	eors	r3, r1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
   14938:	ea80 000b 	eor.w	r0, r0, fp
   1493c:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14940:	f815 000e 	ldrb.w	r0, [r5, lr]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14944:	407a      	eors	r2, r7
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
   14946:	4043      	eors	r3, r0
   14948:	f816 000a 	ldrb.w	r0, [r6, sl]
   1494c:	4043      	eors	r3, r0
   1494e:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   14952:	ea81 0307 	eor.w	r3, r1, r7
   14956:	f815 100a 	ldrb.w	r1, [r5, sl]
    xor_block(d, k);
   1495a:	a81e      	add	r0, sp, #120	; 0x78
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   1495c:	4059      	eors	r1, r3
   1495e:	f816 3009 	ldrb.w	r3, [r6, r9]
   14962:	4059      	eors	r1, r3
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   14964:	f816 3008 	ldrb.w	r3, [r6, r8]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
   14968:	f88d 107a 	strb.w	r1, [sp, #122]	; 0x7a
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
   1496c:	4053      	eors	r3, r2
   1496e:	f815 2009 	ldrb.w	r2, [r5, r9]
   14972:	4053      	eors	r3, r2
   14974:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
   14978:	9a08      	ldr	r2, [sp, #32]
   1497a:	9b06      	ldr	r3, [sp, #24]
   1497c:	4053      	eors	r3, r2
   1497e:	9a04      	ldr	r2, [sp, #16]
   14980:	5caa      	ldrb	r2, [r5, r2]
   14982:	4053      	eors	r3, r2
   14984:	f816 200c 	ldrb.w	r2, [r6, ip]
   14988:	4053      	eors	r3, r2
   1498a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
   1498e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   14992:	405a      	eors	r2, r3
   14994:	f815 300c 	ldrb.w	r3, [r5, ip]
   14998:	4053      	eors	r3, r2
   1499a:	9a05      	ldr	r2, [sp, #20]
   1499c:	5cb2      	ldrb	r2, [r6, r2]
   1499e:	4053      	eors	r3, r2
   149a0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
   149a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   149a8:	405a      	eors	r2, r3
   149aa:	9b05      	ldr	r3, [sp, #20]
   149ac:	5ceb      	ldrb	r3, [r5, r3]
   149ae:	4053      	eors	r3, r2
   149b0:	9a07      	ldr	r2, [sp, #28]
   149b2:	5cb2      	ldrb	r2, [r6, r2]
   149b4:	4053      	eors	r3, r2
   149b6:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
   149ba:	9b06      	ldr	r3, [sp, #24]
   149bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   149be:	4053      	eors	r3, r2
   149c0:	9a04      	ldr	r2, [sp, #16]
   149c2:	5cb2      	ldrb	r2, [r6, r2]
   149c4:	405a      	eors	r2, r3
   149c6:	9b07      	ldr	r3, [sp, #28]
   149c8:	5ceb      	ldrb	r3, [r5, r3]
   149ca:	405a      	eors	r2, r3
   149cc:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
   149d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   149d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   149d4:	4053      	eors	r3, r2
   149d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   149d8:	5caa      	ldrb	r2, [r5, r2]
   149da:	4053      	eors	r3, r2
   149dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   149de:	5cb2      	ldrb	r2, [r6, r2]
   149e0:	4053      	eors	r3, r2
   149e2:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
   149e6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
   149ea:	405a      	eors	r2, r3
   149ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   149ee:	5ceb      	ldrb	r3, [r5, r3]
   149f0:	4053      	eors	r3, r2
   149f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   149f4:	5cb2      	ldrb	r2, [r6, r2]
   149f6:	4053      	eors	r3, r2
   149f8:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
   149fc:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   14a00:	405a      	eors	r2, r3
   14a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14a04:	5ceb      	ldrb	r3, [r5, r3]
   14a06:	4053      	eors	r3, r2
   14a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14a0a:	5cb2      	ldrb	r2, [r6, r2]
   14a0c:	4053      	eors	r3, r2
   14a0e:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   14a12:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14a16:	4053      	eors	r3, r2
   14a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14a1a:	5cb2      	ldrb	r2, [r6, r2]
   14a1c:	405a      	eors	r2, r3
   14a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14a20:	5ceb      	ldrb	r3, [r5, r3]
    xor_block(d, k);
   14a22:	991c      	ldr	r1, [sp, #112]	; 0x70
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
   14a24:	405a      	eors	r2, r3
   14a26:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
   14a2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14a2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14a2e:	4053      	eors	r3, r2
   14a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14a32:	5caa      	ldrb	r2, [r5, r2]
   14a34:	4053      	eors	r3, r2
   14a36:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14a38:	5cb2      	ldrb	r2, [r6, r2]
   14a3a:	4053      	eors	r3, r2
   14a3c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
   14a40:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
   14a44:	405a      	eors	r2, r3
   14a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14a48:	5ceb      	ldrb	r3, [r5, r3]
   14a4a:	4053      	eors	r3, r2
   14a4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14a4e:	5cb2      	ldrb	r2, [r6, r2]
   14a50:	4053      	eors	r3, r2
   14a52:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
   14a56:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
   14a5a:	405a      	eors	r2, r3
   14a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14a5e:	5ceb      	ldrb	r3, [r5, r3]
   14a60:	4053      	eors	r3, r2
   14a62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14a64:	5cb2      	ldrb	r2, [r6, r2]
   14a66:	4053      	eors	r3, r2
   14a68:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
   14a6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14a6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14a70:	4053      	eors	r3, r2
   14a72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14a74:	5cb2      	ldrb	r2, [r6, r2]
   14a76:	4053      	eors	r3, r2
   14a78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   14a7a:	5caa      	ldrb	r2, [r5, r2]
   14a7c:	4053      	eors	r3, r2
   14a7e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    xor_block(d, k);
   14a82:	f017 fb24 	bl	2c0ce <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
   14a86:	e6b8      	b.n	147fa <aes_encrypt+0x2e>
        return ( uint8_t )-1;
   14a88:	20ff      	movs	r0, #255	; 0xff
   14a8a:	e749      	b.n	14920 <aes_encrypt+0x154>
   14a8c:	000367d2 	.word	0x000367d2
   14a90:	000366d2 	.word	0x000366d2
   14a94:	000365d2 	.word	0x000365d2

00014a98 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
   14a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a9c:	b0cb      	sub	sp, #300	; 0x12c
   14a9e:	4606      	mov	r6, r0
   14aa0:	4617      	mov	r7, r2
   14aa2:	4698      	mov	r8, r3
    if( ( buffer == NULL ) || ( cmac == NULL ) )
   14aa4:	460d      	mov	r5, r1
{
   14aa6:	f8dd 9148 	ldr.w	r9, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
   14aaa:	b389      	cbz	r1, 14b10 <ComputeCmac+0x78>
   14aac:	f1b9 0f00 	cmp.w	r9, #0
   14ab0:	d02e      	beq.n	14b10 <ComputeCmac+0x78>
        if( SeNvm->KeyList[i].KeyID == keyID )
   14ab2:	2400      	movs	r4, #0
    }

    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
   14ab4:	a804      	add	r0, sp, #16
   14ab6:	f017 fb8d 	bl	2c1d4 <AES_CMAC_Init>
        if( SeNvm->KeyList[i].KeyID == keyID )
   14aba:	4b16      	ldr	r3, [pc, #88]	; (14b14 <ComputeCmac+0x7c>)
   14abc:	6819      	ldr	r1, [r3, #0]
   14abe:	f101 0314 	add.w	r3, r1, #20
   14ac2:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   14ac6:	5c1a      	ldrb	r2, [r3, r0]
   14ac8:	4542      	cmp	r2, r8
   14aca:	d113      	bne.n	14af4 <ComputeCmac+0x5c>
    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
   14acc:	3015      	adds	r0, #21
   14ace:	4401      	add	r1, r0
   14ad0:	a804      	add	r0, sp, #16
   14ad2:	f017 fb8f 	bl	2c1f4 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
   14ad6:	b9a6      	cbnz	r6, 14b02 <ComputeCmac+0x6a>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
   14ad8:	463a      	mov	r2, r7
   14ada:	4629      	mov	r1, r5
   14adc:	a804      	add	r0, sp, #16
   14ade:	f017 fb8e 	bl	2c1fe <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
   14ae2:	4668      	mov	r0, sp
   14ae4:	a904      	add	r1, sp, #16
   14ae6:	f017 fbf5 	bl	2c2d4 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
   14aea:	9b00      	ldr	r3, [sp, #0]
   14aec:	2000      	movs	r0, #0
   14aee:	f8c9 3000 	str.w	r3, [r9]
   14af2:	e003      	b.n	14afc <ComputeCmac+0x64>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14af4:	3401      	adds	r4, #1
   14af6:	2c17      	cmp	r4, #23
   14af8:	d1e3      	bne.n	14ac2 <ComputeCmac+0x2a>
   14afa:	2003      	movs	r0, #3
                              ( uint32_t ) Cmac[0] );
    }

    return retval;
}
   14afc:	b04b      	add	sp, #300	; 0x12c
   14afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
   14b02:	2210      	movs	r2, #16
   14b04:	4631      	mov	r1, r6
   14b06:	eb0d 0002 	add.w	r0, sp, r2
   14b0a:	f017 fb78 	bl	2c1fe <AES_CMAC_Update>
   14b0e:	e7e3      	b.n	14ad8 <ComputeCmac+0x40>
        return SECURE_ELEMENT_ERROR_NPE;
   14b10:	2002      	movs	r0, #2
   14b12:	e7f3      	b.n	14afc <ComputeCmac+0x64>
   14b14:	2002fcb8 	.word	0x2002fcb8

00014b18 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmData_t* nvm )
{
   14b18:	b530      	push	{r4, r5, lr}
   14b1a:	b0e9      	sub	sp, #420	; 0x1a4
    SecureElementNvmData_t seNvmInit =
   14b1c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   14b20:	2100      	movs	r1, #0
{
   14b22:	4604      	mov	r4, r0
    SecureElementNvmData_t seNvmInit =
   14b24:	4668      	mov	r0, sp
   14b26:	f01c ffb6 	bl	31a96 <memset>
   14b2a:	4b28      	ldr	r3, [pc, #160]	; (14bcc <SecureElementInit+0xb4>)
   14b2c:	f10d 0215 	add.w	r2, sp, #21
   14b30:	f103 0120 	add.w	r1, r3, #32
   14b34:	f853 0b04 	ldr.w	r0, [r3], #4
   14b38:	428b      	cmp	r3, r1
   14b3a:	f842 0b04 	str.w	r0, [r2], #4
   14b3e:	d1f9      	bne.n	14b34 <SecureElementInit+0x1c>
   14b40:	881b      	ldrh	r3, [r3, #0]
   14b42:	4923      	ldr	r1, [pc, #140]	; (14bd0 <SecureElementInit+0xb8>)
   14b44:	8013      	strh	r3, [r2, #0]
   14b46:	2303      	movs	r3, #3
   14b48:	2245      	movs	r2, #69	; 0x45
   14b4a:	a816      	add	r0, sp, #88	; 0x58
   14b4c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
   14b50:	f01c ff67 	bl	31a22 <memcpy>
   14b54:	237f      	movs	r3, #127	; 0x7f
   14b56:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   14b5a:	2380      	movs	r3, #128	; 0x80
   14b5c:	f88d 30be 	strb.w	r3, [sp, #190]	; 0xbe
   14b60:	2381      	movs	r3, #129	; 0x81
   14b62:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
   14b66:	2382      	movs	r3, #130	; 0x82
   14b68:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
   14b6c:	2383      	movs	r3, #131	; 0x83
   14b6e:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
   14b72:	2384      	movs	r3, #132	; 0x84
   14b74:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
   14b78:	2385      	movs	r3, #133	; 0x85
   14b7a:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
   14b7e:	2386      	movs	r3, #134	; 0x86
   14b80:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
   14b84:	2387      	movs	r3, #135	; 0x87
   14b86:	f88d 3135 	strb.w	r3, [sp, #309]	; 0x135
   14b8a:	2388      	movs	r3, #136	; 0x88
   14b8c:	f88d 3146 	strb.w	r3, [sp, #326]	; 0x146
   14b90:	2389      	movs	r3, #137	; 0x89
   14b92:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   14b96:	238a      	movs	r3, #138	; 0x8a
   14b98:	f88d 3168 	strb.w	r3, [sp, #360]	; 0x168
   14b9c:	238b      	movs	r3, #139	; 0x8b
   14b9e:	f88d 3179 	strb.w	r3, [sp, #377]	; 0x179
   14ba2:	238c      	movs	r3, #140	; 0x8c
   14ba4:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
   14ba8:	b16c      	cbz	r4, 14bc6 <SecureElementInit+0xae>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
   14baa:	4d0a      	ldr	r5, [pc, #40]	; (14bd4 <SecureElementInit+0xbc>)

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
   14bac:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   14bb0:	4669      	mov	r1, sp
   14bb2:	4620      	mov	r0, r4
    SeNvm = nvm;
   14bb4:	602c      	str	r4, [r5, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
   14bb6:	f017 f8d6 	bl	2bd66 <memcpy1>

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    // Get a DevEUI from MCU unique ID
    SoftSeHalGetUniqueId( SeNvm->DevEui );
   14bba:	6828      	ldr	r0, [r5, #0]
   14bbc:	f017 fd02 	bl	2c5c4 <SoftSeHalGetUniqueId>
#endif
#endif
    return SECURE_ELEMENT_SUCCESS;
   14bc0:	2000      	movs	r0, #0
}
   14bc2:	b069      	add	sp, #420	; 0x1a4
   14bc4:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14bc6:	2002      	movs	r0, #2
   14bc8:	e7fb      	b.n	14bc2 <SecureElementInit+0xaa>
   14bca:	bf00      	nop
   14bcc:	000368d2 	.word	0x000368d2
   14bd0:	000368f5 	.word	0x000368f5
   14bd4:	2002fcb8 	.word	0x2002fcb8

00014bd8 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
   14bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bdc:	460d      	mov	r5, r1
   14bde:	4616      	mov	r6, r2
   14be0:	4698      	mov	r8, r3
    if( buffer == NULL || encBuffer == NULL )
   14be2:	4607      	mov	r7, r0
{
   14be4:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
   14be6:	b370      	cbz	r0, 14c46 <SecureElementAesEncrypt+0x6e>
   14be8:	b36b      	cbz	r3, 14c46 <SecureElementAesEncrypt+0x6e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
   14bea:	f011 040f 	ands.w	r4, r1, #15
   14bee:	d12c      	bne.n	14c4a <SecureElementAesEncrypt+0x72>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

    aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
   14bf0:	22f0      	movs	r2, #240	; 0xf0
   14bf2:	4621      	mov	r1, r4
   14bf4:	a801      	add	r0, sp, #4
   14bf6:	f017 f8ca 	bl	2bd8e <memset1>
        if( SeNvm->KeyList[i].KeyID == keyID )
   14bfa:	4621      	mov	r1, r4
   14bfc:	4b14      	ldr	r3, [pc, #80]	; (14c50 <SecureElementAesEncrypt+0x78>)
   14bfe:	6818      	ldr	r0, [r3, #0]
   14c00:	f100 0214 	add.w	r2, r0, #20
   14c04:	eb01 1301 	add.w	r3, r1, r1, lsl #4
   14c08:	5cd4      	ldrb	r4, [r2, r3]
   14c0a:	42b4      	cmp	r4, r6
   14c0c:	d10b      	bne.n	14c26 <SecureElementAesEncrypt+0x4e>
    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );

    if( retval == SECURE_ELEMENT_SUCCESS )
    {
        aes_set_key( pItem->KeyValue, 16, &aesContext );
   14c0e:	3315      	adds	r3, #21
   14c10:	2110      	movs	r1, #16
   14c12:	aa01      	add	r2, sp, #4
   14c14:	4418      	add	r0, r3
   14c16:	f7ff fd53 	bl	146c0 <aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
   14c1a:	462c      	mov	r4, r5
   14c1c:	1b2e      	subs	r6, r5, r4
   14c1e:	b2f6      	uxtb	r6, r6
   14c20:	b944      	cbnz	r4, 14c34 <SecureElementAesEncrypt+0x5c>
   14c22:	4620      	mov	r0, r4
   14c24:	e003      	b.n	14c2e <SecureElementAesEncrypt+0x56>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14c26:	3101      	adds	r1, #1
   14c28:	2917      	cmp	r1, #23
   14c2a:	d1eb      	bne.n	14c04 <SecureElementAesEncrypt+0x2c>
   14c2c:	2003      	movs	r0, #3
            block = block + 16;
            size  = size - 16;
        }
    }
    return retval;
}
   14c2e:	b03e      	add	sp, #248	; 0xf8
   14c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
   14c34:	aa01      	add	r2, sp, #4
   14c36:	eb08 0106 	add.w	r1, r8, r6
   14c3a:	19b8      	adds	r0, r7, r6
            size  = size - 16;
   14c3c:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
   14c3e:	f7ff fdc5 	bl	147cc <aes_encrypt>
            size  = size - 16;
   14c42:	b2a4      	uxth	r4, r4
   14c44:	e7ea      	b.n	14c1c <SecureElementAesEncrypt+0x44>
        return SECURE_ELEMENT_ERROR_NPE;
   14c46:	2002      	movs	r0, #2
   14c48:	e7f1      	b.n	14c2e <SecureElementAesEncrypt+0x56>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   14c4a:	2005      	movs	r0, #5
   14c4c:	e7ef      	b.n	14c2e <SecureElementAesEncrypt+0x56>
   14c4e:	bf00      	nop
   14c50:	2002fcb8 	.word	0x2002fcb8

00014c54 <SecureElementSetKey.part.0>:
        if( SeNvm->KeyList[i].KeyID == keyID )
   14c54:	2200      	movs	r2, #0
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14c56:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
   14c58:	4e1c      	ldr	r6, [pc, #112]	; (14ccc <SecureElementSetKey.part.0+0x78>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14c5a:	4603      	mov	r3, r0
        if( SeNvm->KeyList[i].KeyID == keyID )
   14c5c:	6834      	ldr	r4, [r6, #0]
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
   14c5e:	4608      	mov	r0, r1
   14c60:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
   14c62:	f104 0114 	add.w	r1, r4, #20
   14c66:	eb02 1502 	add.w	r5, r2, r2, lsl #4
   14c6a:	5d4f      	ldrb	r7, [r1, r5]
   14c6c:	429f      	cmp	r7, r3
   14c6e:	d127      	bne.n	14cc0 <SecureElementSetKey.part.0+0x6c>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
   14c70:	2b80      	cmp	r3, #128	; 0x80
   14c72:	f105 0515 	add.w	r5, r5, #21
   14c76:	d008      	beq.n	14c8a <SecureElementSetKey.part.0+0x36>
   14c78:	337d      	adds	r3, #125	; 0x7d
   14c7a:	b2db      	uxtb	r3, r3
   14c7c:	2b06      	cmp	r3, #6
   14c7e:	d818      	bhi.n	14cb2 <SecureElementSetKey.part.0+0x5e>
   14c80:	2249      	movs	r2, #73	; 0x49
   14c82:	fa22 f303 	lsr.w	r3, r2, r3
   14c86:	07db      	lsls	r3, r3, #31
   14c88:	d513      	bpl.n	14cb2 <SecureElementSetKey.part.0+0x5e>
                uint8_t               decryptedKey[16] = { 0 };
   14c8a:	2300      	movs	r3, #0
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   14c8c:	227f      	movs	r2, #127	; 0x7f
   14c8e:	2110      	movs	r1, #16
                uint8_t               decryptedKey[16] = { 0 };
   14c90:	e9cd 3300 	strd	r3, r3, [sp]
   14c94:	e9cd 3302 	strd	r3, r3, [sp, #8]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
   14c98:	466b      	mov	r3, sp
   14c9a:	f7ff ff9d 	bl	14bd8 <SecureElementAesEncrypt>
   14c9e:	4604      	mov	r4, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
   14ca0:	6830      	ldr	r0, [r6, #0]
   14ca2:	2210      	movs	r2, #16
   14ca4:	4669      	mov	r1, sp
   14ca6:	4428      	add	r0, r5
   14ca8:	f017 f85d 	bl	2bd66 <memcpy1>
}
   14cac:	4620      	mov	r0, r4
   14cae:	b005      	add	sp, #20
   14cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
   14cb2:	4601      	mov	r1, r0
   14cb4:	2210      	movs	r2, #16
   14cb6:	1960      	adds	r0, r4, r5
   14cb8:	f017 f855 	bl	2bd66 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
   14cbc:	2400      	movs	r4, #0
   14cbe:	e7f5      	b.n	14cac <SecureElementSetKey.part.0+0x58>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
   14cc0:	3201      	adds	r2, #1
   14cc2:	2a17      	cmp	r2, #23
   14cc4:	d1cf      	bne.n	14c66 <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   14cc6:	2403      	movs	r4, #3
   14cc8:	e7f0      	b.n	14cac <SecureElementSetKey.part.0+0x58>
   14cca:	bf00      	nop
   14ccc:	2002fcb8 	.word	0x2002fcb8

00014cd0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
   14cd0:	4601      	mov	r1, r0
{
   14cd2:	b508      	push	{r3, lr}
    if( devEui == NULL )
   14cd4:	b130      	cbz	r0, 14ce4 <SecureElementSetDevEui+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
   14cd6:	4b04      	ldr	r3, [pc, #16]	; (14ce8 <SecureElementSetDevEui+0x18>)
   14cd8:	2208      	movs	r2, #8
   14cda:	6818      	ldr	r0, [r3, #0]
   14cdc:	f017 f843 	bl	2bd66 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14ce0:	2000      	movs	r0, #0
}
   14ce2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14ce4:	2002      	movs	r0, #2
   14ce6:	e7fc      	b.n	14ce2 <SecureElementSetDevEui+0x12>
   14ce8:	2002fcb8 	.word	0x2002fcb8

00014cec <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
   14cec:	4b01      	ldr	r3, [pc, #4]	; (14cf4 <SecureElementGetDevEui+0x8>)
   14cee:	6818      	ldr	r0, [r3, #0]
   14cf0:	4770      	bx	lr
   14cf2:	bf00      	nop
   14cf4:	2002fcb8 	.word	0x2002fcb8

00014cf8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
   14cf8:	4601      	mov	r1, r0
{
   14cfa:	b508      	push	{r3, lr}
    if( joinEui == NULL )
   14cfc:	b138      	cbz	r0, 14d0e <SecureElementSetJoinEui+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
   14cfe:	2208      	movs	r2, #8
   14d00:	4b04      	ldr	r3, [pc, #16]	; (14d14 <SecureElementSetJoinEui+0x1c>)
   14d02:	6818      	ldr	r0, [r3, #0]
   14d04:	4410      	add	r0, r2
   14d06:	f017 f82e 	bl	2bd66 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14d0a:	2000      	movs	r0, #0
}
   14d0c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14d0e:	2002      	movs	r0, #2
   14d10:	e7fc      	b.n	14d0c <SecureElementSetJoinEui+0x14>
   14d12:	bf00      	nop
   14d14:	2002fcb8 	.word	0x2002fcb8

00014d18 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
   14d18:	4b01      	ldr	r3, [pc, #4]	; (14d20 <SecureElementGetJoinEui+0x8>)
   14d1a:	6818      	ldr	r0, [r3, #0]
}
   14d1c:	3008      	adds	r0, #8
   14d1e:	4770      	bx	lr
   14d20:	2002fcb8 	.word	0x2002fcb8

00014d24 <SecureElementSetPin>:

SecureElementStatus_t SecureElementSetPin( uint8_t* pin )
{
    if( pin == NULL )
   14d24:	4601      	mov	r1, r0
{
   14d26:	b508      	push	{r3, lr}
    if( pin == NULL )
   14d28:	b138      	cbz	r0, 14d3a <SecureElementSetPin+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
   14d2a:	4b05      	ldr	r3, [pc, #20]	; (14d40 <SecureElementSetPin+0x1c>)
   14d2c:	2204      	movs	r2, #4
   14d2e:	6818      	ldr	r0, [r3, #0]
   14d30:	3010      	adds	r0, #16
   14d32:	f017 f818 	bl	2bd66 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
   14d36:	2000      	movs	r0, #0
}
   14d38:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   14d3a:	2002      	movs	r0, #2
   14d3c:	e7fc      	b.n	14d38 <SecureElementSetPin+0x14>
   14d3e:	bf00      	nop
   14d40:	2002fcb8 	.word	0x2002fcb8

00014d44 <SecureElementGetPin>:

uint8_t* SecureElementGetPin( void )
{
    return SeNvm->Pin;
   14d44:	4b01      	ldr	r3, [pc, #4]	; (14d4c <SecureElementGetPin+0x8>)
   14d46:	6818      	ldr	r0, [r3, #0]
}
   14d48:	3010      	adds	r0, #16
   14d4a:	4770      	bx	lr
   14d4c:	2002fcb8 	.word	0x2002fcb8

00014d50 <OnRadioTxTimeout>:
    }
}

static void OnRadioTxTimeout( void )
{
    LoRaMacRadioEvents.Events.TxTimeout = 1;
   14d50:	4a06      	ldr	r2, [pc, #24]	; (14d6c <OnRadioTxTimeout+0x1c>)
   14d52:	7813      	ldrb	r3, [r2, #0]
   14d54:	f043 0308 	orr.w	r3, r3, #8
   14d58:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14d5a:	4b05      	ldr	r3, [pc, #20]	; (14d70 <OnRadioTxTimeout+0x20>)
   14d5c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14d60:	b113      	cbz	r3, 14d68 <OnRadioTxTimeout+0x18>
   14d62:	68db      	ldr	r3, [r3, #12]
   14d64:	b103      	cbz	r3, 14d68 <OnRadioTxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14d66:	4718      	bx	r3
    }
}
   14d68:	4770      	bx	lr
   14d6a:	bf00      	nop
   14d6c:	2002fcd0 	.word	0x2002fcd0
   14d70:	200301c0 	.word	0x200301c0

00014d74 <OnRadioRxError>:

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
   14d74:	4a06      	ldr	r2, [pc, #24]	; (14d90 <OnRadioRxError+0x1c>)
   14d76:	7813      	ldrb	r3, [r2, #0]
   14d78:	f043 0304 	orr.w	r3, r3, #4
   14d7c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14d7e:	4b05      	ldr	r3, [pc, #20]	; (14d94 <OnRadioRxError+0x20>)
   14d80:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14d84:	b113      	cbz	r3, 14d8c <OnRadioRxError+0x18>
   14d86:	68db      	ldr	r3, [r3, #12]
   14d88:	b103      	cbz	r3, 14d8c <OnRadioRxError+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14d8a:	4718      	bx	r3
    }
}
   14d8c:	4770      	bx	lr
   14d8e:	bf00      	nop
   14d90:	2002fcd0 	.word	0x2002fcd0
   14d94:	200301c0 	.word	0x200301c0

00014d98 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
    LoRaMacRadioEvents.Events.RxTimeout = 1;
   14d98:	4a06      	ldr	r2, [pc, #24]	; (14db4 <OnRadioRxTimeout+0x1c>)
   14d9a:	7813      	ldrb	r3, [r2, #0]
   14d9c:	f043 0302 	orr.w	r3, r3, #2
   14da0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14da2:	4b05      	ldr	r3, [pc, #20]	; (14db8 <OnRadioRxTimeout+0x20>)
   14da4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14da8:	b113      	cbz	r3, 14db0 <OnRadioRxTimeout+0x18>
   14daa:	68db      	ldr	r3, [r3, #12]
   14dac:	b103      	cbz	r3, 14db0 <OnRadioRxTimeout+0x18>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
   14dae:	4718      	bx	r3
    }
}
   14db0:	4770      	bx	lr
   14db2:	bf00      	nop
   14db4:	2002fcd0 	.word	0x2002fcd0
   14db8:	200301c0 	.word	0x200301c0

00014dbc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14dbc:	4b04      	ldr	r3, [pc, #16]	; (14dd0 <UpdateRxSlotIdleState+0x14>)
   14dbe:	4a05      	ldr	r2, [pc, #20]	; (14dd4 <UpdateRxSlotIdleState+0x18>)
   14dc0:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
   14dc4:	2b02      	cmp	r3, #2
   14dc6:	bf18      	it	ne
   14dc8:	2306      	movne	r3, #6
   14dca:	f882 348c 	strb.w	r3, [r2, #1164]	; 0x48c
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
   14dce:	4770      	bx	lr
   14dd0:	2002fd64 	.word	0x2002fd64
   14dd4:	200301c0 	.word	0x200301c0

00014dd8 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
   14dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14dda:	4b09      	ldr	r3, [pc, #36]	; (14e00 <GetMaxAppPayloadWithoutFOptsLength+0x28>)
    getPhy.Datarate = datarate;
   14ddc:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14de0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14de4:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   14de8:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
   14dec:	220d      	movs	r2, #13
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14dee:	a902      	add	r1, sp, #8
    getPhy.Attribute = PHY_MAX_PAYLOAD;
   14df0:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   14df4:	f017 ff9b 	bl	2cd2e <RegionGetPhyParam>

    return phyParam.Value;
}
   14df8:	b2c0      	uxtb	r0, r0
   14dfa:	b005      	add	sp, #20
   14dfc:	f85d fb04 	ldr.w	pc, [sp], #4
   14e00:	2002fd64 	.word	0x2002fd64

00014e04 <OnRetransmitTimeoutTimerEvent>:
{
   14e04:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
   14e06:	4809      	ldr	r0, [pc, #36]	; (14e2c <OnRetransmitTimeoutTimerEvent+0x28>)
   14e08:	f7fe faea 	bl	133e0 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
   14e0c:	4b08      	ldr	r3, [pc, #32]	; (14e30 <OnRetransmitTimeoutTimerEvent+0x2c>)
   14e0e:	f893 241a 	ldrb.w	r2, [r3, #1050]	; 0x41a
   14e12:	b112      	cbz	r2, 14e1a <OnRetransmitTimeoutTimerEvent+0x16>
        MacCtx.RetransmitTimeoutRetry = true;
   14e14:	2201      	movs	r2, #1
   14e16:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14e1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   14e1e:	b123      	cbz	r3, 14e2a <OnRetransmitTimeoutTimerEvent+0x26>
   14e20:	68db      	ldr	r3, [r3, #12]
   14e22:	b113      	cbz	r3, 14e2a <OnRetransmitTimeoutTimerEvent+0x26>
}
   14e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14e28:	4718      	bx	r3
}
   14e2a:	bd10      	pop	{r4, pc}
   14e2c:	200305c0 	.word	0x200305c0
   14e30:	200301c0 	.word	0x200301c0

00014e34 <PrepareRxDoneAbort>:
{
   14e34:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
   14e36:	4c0c      	ldr	r4, [pc, #48]	; (14e68 <PrepareRxDoneAbort+0x34>)
   14e38:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   14e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14e40:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
   14e44:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   14e48:	b113      	cbz	r3, 14e50 <PrepareRxDoneAbort+0x1c>
        OnRetransmitTimeoutTimerEvent( NULL );
   14e4a:	2000      	movs	r0, #0
   14e4c:	f7ff ffda 	bl	14e04 <OnRetransmitTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
   14e50:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   14e54:	f023 0312 	bic.w	r3, r3, #18
   14e58:	f043 0312 	orr.w	r3, r3, #18
   14e5c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
}
   14e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateRxSlotIdleState( );
   14e64:	f7ff bfaa 	b.w	14dbc <UpdateRxSlotIdleState>
   14e68:	200301c0 	.word	0x200301c0

00014e6c <HandleRadioRxErrorTimeout>:
{
   14e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14e6e:	4e2e      	ldr	r6, [pc, #184]	; (14f28 <HandleRadioRxErrorTimeout+0xbc>)
{
   14e70:	4607      	mov	r7, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14e72:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
{
   14e76:	460d      	mov	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   14e78:	2b02      	cmp	r3, #2
   14e7a:	d002      	beq.n	14e82 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
   14e7c:	4b2b      	ldr	r3, [pc, #172]	; (14f2c <HandleRadioRxErrorTimeout+0xc0>)
   14e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14e80:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
   14e82:	f017 fc39 	bl	2c6f8 <LoRaMacClassBIsBeaconExpected>
   14e86:	4604      	mov	r4, r0
   14e88:	b980      	cbnz	r0, 14eac <HandleRadioRxErrorTimeout+0x40>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   14e8a:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   14e8e:	2b01      	cmp	r3, #1
   14e90:	d016      	beq.n	14ec0 <HandleRadioRxErrorTimeout+0x54>
            if( MacCtx.NodeAckRequested == true )
   14e92:	4c27      	ldr	r4, [pc, #156]	; (14f30 <HandleRadioRxErrorTimeout+0xc4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14e94:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
            if( MacCtx.NodeAckRequested == true )
   14e98:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   14e9c:	b36a      	cbz	r2, 14efa <HandleRadioRxErrorTimeout+0x8e>
            if( MacCtx.NodeAckRequested == true )
   14e9e:	b10b      	cbz	r3, 14ea4 <HandleRadioRxErrorTimeout+0x38>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
   14ea0:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
   14ea4:	4628      	mov	r0, r5
   14ea6:	f003 f8b7 	bl	18018 <LoRaMacConfirmQueueSetStatusCmn>
   14eaa:	e036      	b.n	14f1a <HandleRadioRxErrorTimeout+0xae>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
   14eac:	2002      	movs	r0, #2
   14eae:	f017 fc19 	bl	2c6e4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
   14eb2:	2000      	movs	r0, #0
   14eb4:	f017 fc1b 	bl	2c6ee <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   14eb8:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   14ebc:	2b01      	cmp	r3, #1
   14ebe:	d111      	bne.n	14ee4 <HandleRadioRxErrorTimeout+0x78>
        if( LoRaMacClassBIsPingExpected( ) == true )
   14ec0:	f017 fc1c 	bl	2c6fc <LoRaMacClassBIsPingExpected>
   14ec4:	b190      	cbz	r0, 14eec <HandleRadioRxErrorTimeout+0x80>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   14ec6:	2000      	movs	r0, #0
   14ec8:	f017 fc0d 	bl	2c6e6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
   14ecc:	2000      	movs	r0, #0
   14ece:	f017 fc0f 	bl	2c6f0 <LoRaMacClassBPingSlotTimerEvent>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
   14ed2:	f017 fc15 	bl	2c700 <LoRaMacClassBIsMulticastExpected>
   14ed6:	b128      	cbz	r0, 14ee4 <HandleRadioRxErrorTimeout+0x78>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   14ed8:	2000      	movs	r0, #0
   14eda:	f017 fc05 	bl	2c6e8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
   14ede:	2000      	movs	r0, #0
   14ee0:	f017 fc07 	bl	2c6f2 <LoRaMacClassBMulticastSlotTimerEvent>
}
   14ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    UpdateRxSlotIdleState( );
   14ee8:	f7ff bf68 	b.w	14dbc <UpdateRxSlotIdleState>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
   14eec:	f017 fc08 	bl	2c700 <LoRaMacClassBIsMulticastExpected>
   14ef0:	2800      	cmp	r0, #0
   14ef2:	d1f1      	bne.n	14ed8 <HandleRadioRxErrorTimeout+0x6c>
    if( classBRx == false )
   14ef4:	2c00      	cmp	r4, #0
   14ef6:	d0cc      	beq.n	14e92 <HandleRadioRxErrorTimeout+0x26>
   14ef8:	e7f4      	b.n	14ee4 <HandleRadioRxErrorTimeout+0x78>
            if( MacCtx.NodeAckRequested == true )
   14efa:	b10b      	cbz	r3, 14f00 <HandleRadioRxErrorTimeout+0x94>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
   14efc:	f884 7445 	strb.w	r7, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
   14f00:	4638      	mov	r0, r7
   14f02:	f003 f889 	bl	18018 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
   14f06:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
   14f08:	f017 f849 	bl	2bf9e <TimerGetElapsedTime>
   14f0c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
   14f10:	4298      	cmp	r0, r3
   14f12:	d3e7      	bcc.n	14ee4 <HandleRadioRxErrorTimeout+0x78>
                TimerStop( &MacCtx.RxWindowTimer2 );
   14f14:	4807      	ldr	r0, [pc, #28]	; (14f34 <HandleRadioRxErrorTimeout+0xc8>)
   14f16:	f7fe fa63 	bl	133e0 <TimerStop>
            MacCtx.MacFlags.Bits.MacDone = 1;
   14f1a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   14f1e:	f043 0310 	orr.w	r3, r3, #16
   14f22:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   14f26:	e7dd      	b.n	14ee4 <HandleRadioRxErrorTimeout+0x78>
   14f28:	2002fd64 	.word	0x2002fd64
   14f2c:	00033c2c 	.word	0x00033c2c
   14f30:	200301c0 	.word	0x200301c0
   14f34:	20030560 	.word	0x20030560

00014f38 <OnRadioRxDone>:
{
   14f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f3c:	4616      	mov	r6, r2
   14f3e:	461d      	mov	r5, r3
   14f40:	4680      	mov	r8, r0
   14f42:	460f      	mov	r7, r1
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
   14f44:	f017 f824 	bl	2bf90 <TimerGetCurrentTime>
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14f48:	4a0b      	ldr	r2, [pc, #44]	; (14f78 <OnRadioRxDone+0x40>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
   14f4a:	4c0c      	ldr	r4, [pc, #48]	; (14f7c <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14f4c:	7813      	ldrb	r3, [r2, #0]
    RxDoneParams.Payload = payload;
   14f4e:	e9c4 0800 	strd	r0, r8, [r4]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
   14f52:	f023 0311 	bic.w	r3, r3, #17
   14f56:	f043 0311 	orr.w	r3, r3, #17
   14f5a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14f5c:	4b08      	ldr	r3, [pc, #32]	; (14f80 <OnRadioRxDone+0x48>)
    RxDoneParams.Size = size;
   14f5e:	8127      	strh	r7, [r4, #8]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14f60:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
    RxDoneParams.Rssi = rssi;
   14f64:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
   14f66:	7325      	strb	r5, [r4, #12]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14f68:	b123      	cbz	r3, 14f74 <OnRadioRxDone+0x3c>
   14f6a:	68db      	ldr	r3, [r3, #12]
   14f6c:	b113      	cbz	r3, 14f74 <OnRadioRxDone+0x3c>
}
   14f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14f72:	4718      	bx	r3
}
   14f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f78:	2002fcd0 	.word	0x2002fcd0
   14f7c:	2002fcbc 	.word	0x2002fcbc
   14f80:	200301c0 	.word	0x200301c0

00014f84 <OnRadioTxDone>:
{
   14f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14f86:	f017 f803 	bl	2bf90 <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
   14f8a:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14f8c:	4b0d      	ldr	r3, [pc, #52]	; (14fc4 <OnRadioTxDone+0x40>)
    MacCtx.LastTxSysTime = SysTimeGet( );
   14f8e:	4d0e      	ldr	r5, [pc, #56]	; (14fc8 <OnRadioTxDone+0x44>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
   14f90:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
   14f92:	4620      	mov	r0, r4
   14f94:	f016 ff59 	bl	2be4a <SysTimeGet>
   14f98:	e894 0003 	ldmia.w	r4, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
   14f9c:	4a0b      	ldr	r2, [pc, #44]	; (14fcc <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
   14f9e:	f505 734e 	add.w	r3, r5, #824	; 0x338
   14fa2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
   14fa6:	7813      	ldrb	r3, [r2, #0]
   14fa8:	f043 0320 	orr.w	r3, r3, #32
   14fac:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
   14fae:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
   14fb2:	b12b      	cbz	r3, 14fc0 <OnRadioTxDone+0x3c>
   14fb4:	68db      	ldr	r3, [r3, #12]
   14fb6:	b11b      	cbz	r3, 14fc0 <OnRadioTxDone+0x3c>
}
   14fb8:	b003      	add	sp, #12
   14fba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        MacCtx.MacCallbacks->MacProcessNotify( );
   14fbe:	4718      	bx	r3
}
   14fc0:	b003      	add	sp, #12
   14fc2:	bd30      	pop	{r4, r5, pc}
   14fc4:	2002fccc 	.word	0x2002fccc
   14fc8:	200301c0 	.word	0x200301c0
   14fcc:	2002fcd0 	.word	0x2002fcd0

00014fd0 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
   14fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14fd4:	2600      	movs	r6, #0
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;

    Nvm.MacGroup2.MaxDCycle = 0;
    Nvm.MacGroup2.AggregatedDCycle = 1;
   14fd6:	f04f 0801 	mov.w	r8, #1
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   14fda:	4c47      	ldr	r4, [pc, #284]	; (150f8 <ResetMacParameters+0x128>)
{
   14fdc:	b090      	sub	sp, #64	; 0x40

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   14fde:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   14fe2:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   14fe6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
   14fea:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    MacCtx.ResponseTimeoutStartTime = 0;
   14fee:	4d43      	ldr	r5, [pc, #268]	; (150fc <ResetMacParameters+0x12c>)
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
   14ff0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   14ff4:	f104 037c 	add.w	r3, r4, #124	; 0x7c
   14ff8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   14ffc:	e9d4 0130 	ldrd	r0, r1, [r4, #192]	; 0xc0
   15000:	f104 0384 	add.w	r3, r4, #132	; 0x84
   15004:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
   15008:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   1500c:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
   15010:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
   15014:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    Nvm.MacGroup1.AdrAckCounter = 0;
   15018:	63a6      	str	r6, [r4, #56]	; 0x38
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
   1501a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   1501e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    Nvm.MacGroup2.MaxDCycle = 0;
   15022:	f884 61a3 	strb.w	r6, [r4, #419]	; 0x1a3
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   15026:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    Nvm.MacGroup2.DownlinkReceived = false;

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
   1502a:	f504 735e 	add.w	r3, r4, #888	; 0x378
   1502e:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
   15030:	f504 735f 	add.w	r3, r4, #892	; 0x37c
   15034:	9304      	str	r3, [sp, #16]
    params.Bands = &RegionBands;
   15036:	4b32      	ldr	r3, [pc, #200]	; (15100 <ResetMacParameters+0x130>)
    Nvm.MacGroup2.AggregatedDCycle = 1;
   15038:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
    Nvm.MacGroup1.SrvAckRequested = false;
   1503c:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   15040:	f884 61a5 	strb.w	r6, [r4, #421]	; 0x1a5
    Nvm.MacGroup2.DownlinkReceived = false;
   15044:	f884 61a6 	strb.w	r6, [r4, #422]	; 0x1a6
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   15048:	a903      	add	r1, sp, #12
    MacCtx.ResponseTimeoutStartTime = 0;
   1504a:	f8c5 6500 	str.w	r6, [r5, #1280]	; 0x500
    MacCtx.ChannelsNbTransCounter = 0;
   1504e:	f8a5 6418 	strh.w	r6, [r5, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
   15052:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
   15056:	f88d 8018 	strb.w	r8, [sp, #24]
    params.Bands = &RegionBands;
   1505a:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   1505c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15060:	f017 fe75 	bl	2cd4e <RegionInitDefaults>
    // Initialize channel index.
    MacCtx.Channel = 0;

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   15064:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   15066:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   1506a:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1506e:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    MacCtx.RxWindow2Config.RxContinuous = false;
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   15072:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   15076:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1507a:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   1507e:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   15082:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   15086:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    MacCtx.RxWindow2Config.RxContinuous = false;
   1508a:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   1508e:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   15092:	683b      	ldr	r3, [r7, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
    classBCallbacks.MacProcessNotify = NULL;
   15094:	e9cd 6601 	strd	r6, r6, [sp, #4]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   15098:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   1509a:	2302      	movs	r3, #2
   1509c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa

    if( MacCtx.MacCallbacks != NULL )
   150a0:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
    MacCtx.Channel = 0;
   150a4:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    MacCtx.RxWindowCConfig.RxContinuous = true;
   150a8:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    if( MacCtx.MacCallbacks != NULL )
   150ac:	b11b      	cbz	r3, 150b6 <ResetMacParameters+0xe6>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
   150ae:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
   150b0:	68db      	ldr	r3, [r3, #12]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
   150b2:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
   150b4:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
   150b6:	4b13      	ldr	r3, [pc, #76]	; (15104 <ResetMacParameters+0x134>)
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   150b8:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
   150ba:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   150be:	9208      	str	r2, [sp, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
   150c0:	f1a3 0214 	sub.w	r2, r3, #20
   150c4:	9209      	str	r2, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
   150c6:	4a10      	ldr	r2, [pc, #64]	; (15108 <ResetMacParameters+0x138>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
   150c8:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
   150ca:	3321      	adds	r3, #33	; 0x21
   150cc:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
   150ce:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
   150d2:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
   150d4:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
   150d8:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
   150da:	1d13      	adds	r3, r2, #4
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
   150dc:	920b      	str	r2, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
   150de:	930e      	str	r3, [sp, #56]	; 0x38
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   150e0:	a807      	add	r0, sp, #28
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
   150e2:	f102 03dc 	add.w	r3, r2, #220	; 0xdc
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   150e6:	f502 725a 	add.w	r2, r2, #872	; 0x368
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
   150ea:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
   150ec:	f017 faf9 	bl	2c6e2 <LoRaMacClassBInit>
}
   150f0:	b010      	add	sp, #64	; 0x40
   150f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150f6:	bf00      	nop
   150f8:	2002fd64 	.word	0x2002fd64
   150fc:	200301c0 	.word	0x200301c0
   15100:	2002fcd4 	.word	0x2002fcd4
   15104:	2003062c 	.word	0x2003062c
   15108:	2002fe40 	.word	0x2002fe40

0001510c <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
   1510c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   1510e:	4e12      	ldr	r6, [pc, #72]	; (15158 <OpenContinuousRxCWindow+0x4c>)
   15110:	4d12      	ldr	r5, [pc, #72]	; (1515c <OpenContinuousRxCWindow+0x50>)
   15112:	9600      	str	r6, [sp, #0]
   15114:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   15116:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
   1511a:	f995 1088 	ldrsb.w	r1, [r5, #136]	; 0x88
   1511e:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   15122:	f017 fe30 	bl	2cd86 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   15126:	2302      	movs	r3, #2
   15128:	74b3      	strb	r3, [r6, #18]
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1512a:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   1512e:	4631      	mov	r1, r6
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   15130:	74f3      	strb	r3, [r6, #19]
    MacCtx.RxWindowCConfig.RxContinuous = true;
   15132:	2301      	movs	r3, #1
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   15134:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   15138:	f106 023c 	add.w	r2, r6, #60	; 0x3c
    MacCtx.RxWindowCConfig.RxContinuous = true;
   1513c:	7473      	strb	r3, [r6, #17]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   1513e:	f017 fe2f 	bl	2cda0 <RegionRxConfig>
   15142:	b130      	cbz	r0, 15152 <OpenContinuousRxCWindow+0x46>
    {
        Radio.Rx( 0 ); // Continuous mode
   15144:	4b06      	ldr	r3, [pc, #24]	; (15160 <OpenContinuousRxCWindow+0x54>)
   15146:	2000      	movs	r0, #0
   15148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1514a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
   1514c:	7cb3      	ldrb	r3, [r6, #18]
   1514e:	f886 30a4 	strb.w	r3, [r6, #164]	; 0xa4
    }
}
   15152:	b002      	add	sp, #8
   15154:	bd70      	pop	{r4, r5, r6, pc}
   15156:	bf00      	nop
   15158:	200305a8 	.word	0x200305a8
   1515c:	2002fd64 	.word	0x2002fd64
   15160:	00033c2c 	.word	0x00033c2c

00015164 <SwitchClass>:
{
   15164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
   15166:	4c38      	ldr	r4, [pc, #224]	; (15248 <SwitchClass+0xe4>)
{
   15168:	4606      	mov	r6, r0
    switch( Nvm.MacGroup2.DeviceClass )
   1516a:	f894 51a0 	ldrb.w	r5, [r4, #416]	; 0x1a0
   1516e:	2d01      	cmp	r5, #1
   15170:	d00d      	beq.n	1518e <SwitchClass+0x2a>
   15172:	2d02      	cmp	r5, #2
   15174:	d060      	beq.n	15238 <SwitchClass+0xd4>
   15176:	b935      	cbnz	r5, 15186 <SwitchClass+0x22>
            if( deviceClass == CLASS_A )
   15178:	b938      	cbnz	r0, 1518a <SwitchClass+0x26>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
   1517a:	e9d4 011f 	ldrd	r0, r1, [r4, #124]	; 0x7c
   1517e:	f104 0384 	add.w	r3, r4, #132	; 0x84
   15182:	e883 0003 	stmia.w	r3, {r0, r1}
                status = LORAMAC_STATUS_OK;
   15186:	2003      	movs	r0, #3
}
   15188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
   1518a:	2801      	cmp	r0, #1
   1518c:	d106      	bne.n	1519c <SwitchClass+0x38>
            status = LoRaMacClassBSwitchClass( deviceClass );
   1518e:	f017 fabe 	bl	2c70e <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
   15192:	2800      	cmp	r0, #0
   15194:	d1f8      	bne.n	15188 <SwitchClass+0x24>
                Nvm.MacGroup2.DeviceClass = deviceClass;
   15196:	f884 61a0 	strb.w	r6, [r4, #416]	; 0x1a0
   1519a:	e7f5      	b.n	15188 <SwitchClass+0x24>
            if( deviceClass == CLASS_C )
   1519c:	2802      	cmp	r0, #2
   1519e:	d1f2      	bne.n	15186 <SwitchClass+0x22>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   151a0:	4f2a      	ldr	r7, [pc, #168]	; (1524c <SwitchClass+0xe8>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
   151a2:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
   151a6:	f507 7c7a 	add.w	ip, r7, #1000	; 0x3e8
   151aa:	f507 7e75 	add.w	lr, r7, #980	; 0x3d4
   151ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   151b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   151b6:	f8de 3000 	ldr.w	r3, [lr]
   151ba:	f8cc 3000 	str.w	r3, [ip]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   151be:	4623      	mov	r3, r4
   151c0:	f887 63fa 	strb.w	r6, [r7, #1018]	; 0x3fa
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
   151c4:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
   151c8:	b382      	cbz	r2, 1522c <SwitchClass+0xc8>
   151ca:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   151ce:	2a02      	cmp	r2, #2
   151d0:	d12c      	bne.n	1522c <SwitchClass+0xc8>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
   151d2:	2330      	movs	r3, #48	; 0x30
   151d4:	fb03 4505 	mla	r5, r3, r5, r4
   151d8:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
   151dc:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
   151e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   151e4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   151e8:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
   151ec:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   151f0:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
   151f4:	2303      	movs	r3, #3
   151f6:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
   151fa:	2301      	movs	r3, #1
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   151fc:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
                        MacCtx.RxWindowCConfig.RxContinuous = true;
   15200:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   15204:	f887 23e8 	strb.w	r2, [r7, #1000]	; 0x3e8
                MacCtx.NodeAckRequested = false;
   15208:	2300      	movs	r3, #0
   1520a:	f887 341a 	strb.w	r3, [r7, #1050]	; 0x41a
                Radio.Sleep( );
   1520e:	4b10      	ldr	r3, [pc, #64]	; (15250 <SwitchClass+0xec>)
   15210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15212:	4798      	blx	r3
                OpenContinuousRxCWindow( );
   15214:	f7ff ff7a 	bl	1510c <OpenContinuousRxCWindow>
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15218:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   1521c:	b123      	cbz	r3, 15228 <SwitchClass+0xc4>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
   1521e:	2201      	movs	r2, #1
   15220:	2020      	movs	r0, #32
   15222:	490c      	ldr	r1, [pc, #48]	; (15254 <SwitchClass+0xf0>)
   15224:	f002 fd8c 	bl	17d40 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_OK;
   15228:	2000      	movs	r0, #0
   1522a:	e7ad      	b.n	15188 <SwitchClass+0x24>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
   1522c:	3501      	adds	r5, #1
   1522e:	2d04      	cmp	r5, #4
   15230:	f103 0330 	add.w	r3, r3, #48	; 0x30
   15234:	d1c6      	bne.n	151c4 <SwitchClass+0x60>
   15236:	e7e7      	b.n	15208 <SwitchClass+0xa4>
            if( deviceClass == CLASS_A )
   15238:	2800      	cmp	r0, #0
   1523a:	d1a4      	bne.n	15186 <SwitchClass+0x22>
                Radio.Sleep( );
   1523c:	4b04      	ldr	r3, [pc, #16]	; (15250 <SwitchClass+0xec>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
   1523e:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
                Radio.Sleep( );
   15242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15244:	4798      	blx	r3
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15246:	e7e7      	b.n	15218 <SwitchClass+0xb4>
   15248:	2002fd64 	.word	0x2002fd64
   1524c:	200301c0 	.word	0x200301c0
   15250:	00033c2c 	.word	0x00033c2c
   15254:	2002ff04 	.word	0x2002ff04

00015258 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
   15258:	b570      	push	{r4, r5, r6, lr}
   1525a:	460c      	mov	r4, r1
    Radio.Standby( );
   1525c:	4e0a      	ldr	r6, [pc, #40]	; (15288 <RxWindowSetup.constprop.0+0x30>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   1525e:	4d0b      	ldr	r5, [pc, #44]	; (1528c <RxWindowSetup.constprop.0+0x34>)
    TimerStop( rxTimer );
   15260:	f7fe f8be 	bl	133e0 <TimerStop>
    Radio.Standby( );
   15264:	6b33      	ldr	r3, [r6, #48]	; 0x30
   15266:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
   15268:	4621      	mov	r1, r4
   1526a:	4a09      	ldr	r2, [pc, #36]	; (15290 <RxWindowSetup.constprop.0+0x38>)
   1526c:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   15270:	f017 fd96 	bl	2cda0 <RegionRxConfig>
   15274:	b130      	cbz	r0, 15284 <RxWindowSetup.constprop.0+0x2c>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
   15276:	6b73      	ldr	r3, [r6, #52]	; 0x34
   15278:	6e68      	ldr	r0, [r5, #100]	; 0x64
   1527a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
   1527c:	7ca2      	ldrb	r2, [r4, #18]
   1527e:	4b05      	ldr	r3, [pc, #20]	; (15294 <RxWindowSetup.constprop.0+0x3c>)
   15280:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
}
   15284:	bd70      	pop	{r4, r5, r6, pc}
   15286:	bf00      	nop
   15288:	00033c2c 	.word	0x00033c2c
   1528c:	2002fd64 	.word	0x2002fd64
   15290:	200305e4 	.word	0x200305e4
   15294:	200301c0 	.word	0x200301c0

00015298 <OnRxWindow1TimerEvent>:
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
   15298:	480e      	ldr	r0, [pc, #56]	; (152d4 <OnRxWindow1TimerEvent+0x3c>)
   1529a:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   1529e:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
   152a2:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
   152a6:	4b0c      	ldr	r3, [pc, #48]	; (152d8 <OnRxWindow1TimerEvent+0x40>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   152a8:	f500 7062 	add.w	r0, r0, #904	; 0x388
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
   152ac:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
   152b0:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   152b4:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   152b8:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   152bc:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
    MacCtx.RxWindow1Config.RxContinuous = false;
   152c0:	2200      	movs	r2, #0
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   152c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
    MacCtx.RxWindow1Config.RxContinuous = false;
   152c6:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
   152ca:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
   152ce:	f7ff bfc3 	b.w	15258 <RxWindowSetup.constprop.0>
   152d2:	bf00      	nop
   152d4:	200301c0 	.word	0x200301c0
   152d8:	2002fd64 	.word	0x2002fd64

000152dc <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
   152dc:	480f      	ldr	r0, [pc, #60]	; (1531c <OnRxWindow2TimerEvent+0x40>)
   152de:	f890 348c 	ldrb.w	r3, [r0, #1164]	; 0x48c
   152e2:	b1d3      	cbz	r3, 1531a <OnRxWindow2TimerEvent+0x3e>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   152e4:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   152e8:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
   152ec:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   152f0:	4b0b      	ldr	r3, [pc, #44]	; (15320 <OnRxWindow2TimerEvent+0x44>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   152f2:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
   152f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   152f8:	6382      	str	r2, [r0, #56]	; 0x38
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   152fa:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   152fe:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   15302:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    MacCtx.RxWindow2Config.RxContinuous = false;
   15306:	2200      	movs	r2, #0
   15308:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   1530c:	2201      	movs	r2, #1
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1530e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
   15312:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
   15316:	f7ff bf9f 	b.w	15258 <RxWindowSetup.constprop.0>
}
   1531a:	4770      	bx	lr
   1531c:	200301c0 	.word	0x200301c0
   15320:	2002fd64 	.word	0x2002fd64

00015324 <StopRetransmission.isra.0>:
        counter++;
    }
    return counter;
}

static bool StopRetransmission( void )
   15324:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
    // Increase Rejoin Uplinks counter
    if( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 )
   15326:	4d21      	ldr	r5, [pc, #132]	; (153ac <StopRetransmission.isra.0+0x88>)
   15328:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   1532c:	b113      	cbz	r3, 15334 <StopRetransmission.isra.0+0x10>
    {
        Nvm.MacGroup1.Rejoin0UplinksCounter++;
   1532e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   15330:	3301      	adds	r3, #1
   15332:	64eb      	str	r3, [r5, #76]	; 0x4c
    }

    if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   15334:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   15338:	4c1d      	ldr	r4, [pc, #116]	; (153b0 <StopRetransmission.isra.0+0x8c>)
   1533a:	b1cb      	cbz	r3, 15370 <StopRetransmission.isra.0+0x4c>
    {
        MacCommand_t* macCmd;
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
   1533c:	200b      	movs	r0, #11
   1533e:	a901      	add	r1, sp, #4
   15340:	f002 fd68 	bl	17e14 <LoRaMacCommandsGetCmd>
   15344:	b9a0      	cbnz	r0, 15370 <StopRetransmission.isra.0+0x4c>
        {
            // Increase the Rekey Uplinks counter
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   15346:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52

            /*
             * If the device has not received a RekeyConf within
             * the first ADR_ACK_LIMIT uplinks it SHALL revert to the Join state.
             */
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   1534a:	f8b4 23fc 	ldrh.w	r2, [r4, #1020]	; 0x3fc
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   1534e:	3301      	adds	r3, #1
   15350:	b29b      	uxth	r3, r3
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   15352:	429a      	cmp	r2, r3
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
   15354:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
   15358:	d10a      	bne.n	15370 <StopRetransmission.isra.0+0x4c>
            {
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
                MacCtx.MacFlags.Bits.MlmeInd = 1;
   1535a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
   1535e:	f885 01b8 	strb.w	r0, [r5, #440]	; 0x1b8
                MacCtx.MacFlags.Bits.MlmeInd = 1;
   15362:	f043 0308 	orr.w	r3, r3, #8
   15366:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
   1536a:	230e      	movs	r3, #14
   1536c:	f884 346c 	strb.w	r3, [r4, #1132]	; 0x46c
            }
        }
    }

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
   15370:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   15374:	0799      	lsls	r1, r3, #30
   15376:	d503      	bpl.n	15380 <StopRetransmission.isra.0+0x5c>
   15378:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1537c:	2b01      	cmp	r3, #1
   1537e:	d907      	bls.n	15390 <StopRetransmission.isra.0+0x6c>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
   15380:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
   15384:	b123      	cbz	r3, 15390 <StopRetransmission.isra.0+0x6c>
        {
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
   15386:	6bab      	ldr	r3, [r5, #56]	; 0x38
    if( counter < ADR_ACK_COUNTER_MAX )
   15388:	1c5a      	adds	r2, r3, #1
        counter++;
   1538a:	bf18      	it	ne
   1538c:	3301      	addne	r3, #1
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
   1538e:	63ab      	str	r3, [r5, #56]	; 0x38
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
   15390:	2300      	movs	r3, #0
   15392:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
   15396:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   1539a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   1539e:	f023 0302 	bic.w	r3, r3, #2
   153a2:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return true;
}
   153a6:	b003      	add	sp, #12
   153a8:	bd30      	pop	{r4, r5, pc}
   153aa:	bf00      	nop
   153ac:	2002fd64 	.word	0x2002fd64
   153b0:	200301c0 	.word	0x200301c0

000153b4 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
   153b4:	4b07      	ldr	r3, [pc, #28]	; (153d4 <LoRaMacIsBusy+0x20>)
   153b6:	781b      	ldrb	r3, [r3, #0]
   153b8:	07db      	lsls	r3, r3, #31
   153ba:	d409      	bmi.n	153d0 <LoRaMacIsBusy+0x1c>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
   153bc:	4b06      	ldr	r3, [pc, #24]	; (153d8 <LoRaMacIsBusy+0x24>)
   153be:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
   153c2:	b92a      	cbnz	r2, 153d0 <LoRaMacIsBusy+0x1c>
   153c4:	f893 048e 	ldrb.w	r0, [r3, #1166]	; 0x48e
   153c8:	3801      	subs	r0, #1
   153ca:	bf18      	it	ne
   153cc:	2001      	movne	r0, #1
   153ce:	4770      	bx	lr
        return true;
   153d0:	2001      	movs	r0, #1
}
   153d2:	4770      	bx	lr
   153d4:	2002fcd0 	.word	0x2002fcd0
   153d8:	200301c0 	.word	0x200301c0

000153dc <PrepareFrame>:
{
   153dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   153e0:	4690      	mov	r8, r2
    MacCtx.PktBufferLen = 0;
   153e2:	2200      	movs	r2, #0
        fBufferSize = 0;
   153e4:	1e1d      	subs	r5, r3, #0
{
   153e6:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
        fBufferSize = 0;
   153ea:	bf08      	it	eq
   153ec:	4691      	moveq	r9, r2
{
   153ee:	4607      	mov	r7, r0
    MacCtx.PktBufferLen = 0;
   153f0:	4c49      	ldr	r4, [pc, #292]	; (15518 <PrepareFrame+0x13c>)
    size_t macCmdsSize = 0;
   153f2:	e9cd 2200 	strd	r2, r2, [sp]
    MacCtx.PktBufferLen = 0;
   153f6:	8022      	strh	r2, [r4, #0]
    MacCtx.NodeAckRequested = false;
   153f8:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
{
   153fc:	460e      	mov	r6, r1
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
   153fe:	464a      	mov	r2, r9
   15400:	4629      	mov	r1, r5
   15402:	f504 709c 	add.w	r0, r4, #312	; 0x138
   15406:	f016 fcae 	bl	2bd66 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
   1540a:	fa5f f289 	uxtb.w	r2, r9
   1540e:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
   15412:	783b      	ldrb	r3, [r7, #0]
   15414:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
   15416:	783b      	ldrb	r3, [r7, #0]
   15418:	095b      	lsrs	r3, r3, #5
   1541a:	2b04      	cmp	r3, #4
   1541c:	d007      	beq.n	1542e <PrepareFrame+0x52>
   1541e:	2b07      	cmp	r3, #7
   15420:	d069      	beq.n	154f6 <PrepareFrame+0x11a>
   15422:	2b02      	cmp	r3, #2
   15424:	d006      	beq.n	15434 <PrepareFrame+0x58>
   15426:	2002      	movs	r0, #2
}
   15428:	b003      	add	sp, #12
   1542a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.NodeAckRequested = true;
   1542e:	2301      	movs	r3, #1
   15430:	f884 341a 	strb.w	r3, [r4, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
   15434:	2304      	movs	r3, #4
   15436:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1543a:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
   1543c:	4d37      	ldr	r5, [pc, #220]	; (1551c <PrepareFrame+0x140>)
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   1543e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
   15442:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
   15446:	783b      	ldrb	r3, [r7, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   15448:	4f35      	ldr	r7, [pc, #212]	; (15520 <PrepareFrame+0x144>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
   1544a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   1544e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
            MacCtx.TxMsg.Message.Data.FPort = fPort;
   15452:	f884 8128 	strb.w	r8, [r4, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
   15456:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   1545a:	7833      	ldrb	r3, [r6, #0]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1545c:	4668      	mov	r0, sp
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   1545e:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
   15462:	f505 739b 	add.w	r3, r5, #310	; 0x136
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
   15466:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
   1546a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1546e:	f002 ff47 	bl	18300 <LoRaMacCryptoGetFCntUp>
   15472:	2800      	cmp	r0, #0
   15474:	d14e      	bne.n	15514 <PrepareFrame+0x138>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
   15476:	9b00      	ldr	r3, [sp, #0]
            MacCtx.McpsConfirm.AckReceived = false;
   15478:	f8a4 0448 	strh.w	r0, [r4, #1096]	; 0x448
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   1547c:	a801      	add	r0, sp, #4
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
   1547e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
   15482:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   15486:	f002 fcf3 	bl	17e70 <LoRaMacCommandsGetSizeSerializedCmds>
   1548a:	2800      	cmp	r0, #0
   1548c:	d140      	bne.n	15510 <PrepareFrame+0x134>
            if( macCmdsSize > 0 )
   1548e:	9b01      	ldr	r3, [sp, #4]
   15490:	b90b      	cbnz	r3, 15496 <PrepareFrame+0xba>
    return LORAMAC_STATUS_OK;
   15492:	2000      	movs	r0, #0
   15494:	e7c8      	b.n	15428 <PrepareFrame+0x4c>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
   15496:	f997 0049 	ldrsb.w	r0, [r7, #73]	; 0x49
   1549a:	f7ff fc9d 	bl	14dd8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
   1549e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
   154a2:	b1cb      	cbz	r3, 154d8 <PrepareFrame+0xfc>
   154a4:	9b01      	ldr	r3, [sp, #4]
   154a6:	2b0f      	cmp	r3, #15
   154a8:	d80e      	bhi.n	154c8 <PrepareFrame+0xec>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
   154aa:	200f      	movs	r0, #15
   154ac:	f505 728b 	add.w	r2, r5, #278	; 0x116
   154b0:	a901      	add	r1, sp, #4
   154b2:	f002 fce9 	bl	17e88 <LoRaMacCommandsSerializeCmds>
   154b6:	bb58      	cbnz	r0, 15510 <PrepareFrame+0x134>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
   154b8:	7833      	ldrb	r3, [r6, #0]
   154ba:	9a01      	ldr	r2, [sp, #4]
   154bc:	f362 0303 	bfi	r3, r2, #0, #4
   154c0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
   154c2:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
   154c6:	e7e4      	b.n	15492 <PrepareFrame+0xb6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
   154c8:	f205 5202 	addw	r2, r5, #1282	; 0x502
   154cc:	a901      	add	r1, sp, #4
   154ce:	f002 fcdb 	bl	17e88 <LoRaMacCommandsSerializeCmds>
   154d2:	b9e8      	cbnz	r0, 15510 <PrepareFrame+0x134>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
   154d4:	200a      	movs	r0, #10
   154d6:	e7a7      	b.n	15428 <PrepareFrame+0x4c>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
   154d8:	f205 5502 	addw	r5, r5, #1282	; 0x502
   154dc:	462a      	mov	r2, r5
   154de:	a901      	add	r1, sp, #4
   154e0:	f002 fcd2 	bl	17e88 <LoRaMacCommandsSerializeCmds>
   154e4:	b9a0      	cbnz	r0, 15510 <PrepareFrame+0x134>
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
   154e6:	9b01      	ldr	r3, [sp, #4]
                    MacCtx.TxMsg.Message.Data.FPort = 0;
   154e8:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
   154ec:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
   154f0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
   154f4:	e7cd      	b.n	15492 <PrepareFrame+0xb6>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
   154f6:	2d00      	cmp	r5, #0
   154f8:	d0cb      	beq.n	15492 <PrepareFrame+0xb6>
   154fa:	2a00      	cmp	r2, #0
   154fc:	d0c9      	beq.n	15492 <PrepareFrame+0xb6>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
   154fe:	4629      	mov	r1, r5
   15500:	1ce0      	adds	r0, r4, #3
   15502:	f016 fc30 	bl	2bd66 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
   15506:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
   1550a:	3301      	adds	r3, #1
   1550c:	8023      	strh	r3, [r4, #0]
   1550e:	e7c0      	b.n	15492 <PrepareFrame+0xb6>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   15510:	2013      	movs	r0, #19
   15512:	e789      	b.n	15428 <PrepareFrame+0x4c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
   15514:	2012      	movs	r0, #18
   15516:	e787      	b.n	15428 <PrepareFrame+0x4c>
   15518:	200301c0 	.word	0x200301c0
   1551c:	200301c2 	.word	0x200301c2
   15520:	2002fd64 	.word	0x2002fd64

00015524 <SendFrameOnChannel>:
    int8_t txPower = 0;
   15524:	2300      	movs	r3, #0
{
   15526:	b570      	push	{r4, r5, r6, lr}
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15528:	4d4a      	ldr	r5, [pc, #296]	; (15654 <SendFrameOnChannel+0x130>)
{
   1552a:	b086      	sub	sp, #24
    int8_t txPower = 0;
   1552c:	f88d 3003 	strb.w	r3, [sp, #3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15530:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    txConfig.PktLen = MacCtx.PktBufferLen;
   15534:	4c48      	ldr	r4, [pc, #288]	; (15658 <SendFrameOnChannel+0x134>)
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15536:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
   1553a:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
{
   1553e:	4606      	mov	r6, r0
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
   15540:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
   15544:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    txConfig.Channel = channel;
   15548:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
   1554c:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   1554e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   15552:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   15556:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
   15558:	8823      	ldrh	r3, [r4, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   1555a:	f10d 0203 	add.w	r2, sp, #3
    txConfig.PktLen = MacCtx.PktBufferLen;
   1555e:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
   15562:	a902      	add	r1, sp, #8
   15564:	f204 431c 	addw	r3, r4, #1052	; 0x41c
   15568:	f017 fc23 	bl	2cdb2 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   1556c:	2301      	movs	r3, #1
   1556e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15572:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    MacCtx.McpsConfirm.Channel = channel;
   15576:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   1557a:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
   1557e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   15582:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
   15586:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
   1558a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
   1558e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
   15592:	f017 f8b7 	bl	2c704 <LoRaMacClassBIsBeaconModeActive>
   15596:	b9b0      	cbnz	r0, 155c6 <SendFrameOnChannel+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   15598:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1559c:	2b01      	cmp	r3, #1
   1559e:	d101      	bne.n	155a4 <SendFrameOnChannel+0x80>
        LoRaMacClassBStopRxSlots( );
   155a0:	f017 f8c4 	bl	2c72c <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
   155a4:	f017 f8b1 	bl	2c70a <LoRaMacClassBHaltBeaconing>
    uint32_t fCntUp = 0;
   155a8:	2300      	movs	r3, #0
   155aa:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
   155ac:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
   155b0:	f995 5049 	ldrsb.w	r5, [r5, #73]	; 0x49
   155b4:	f894 641b 	ldrb.w	r6, [r4, #1051]	; 0x41b
    switch( MacCtx.TxMsg.Type )
   155b8:	2b04      	cmp	r3, #4
   155ba:	d80c      	bhi.n	155d6 <SendFrameOnChannel+0xb2>
   155bc:	e8df f003 	tbb	[pc, r3]
   155c0:	0b312d0e 	.word	0x0b312d0e
   155c4:	35          	.byte	0x35
   155c5:	00          	.byte	0x00
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
   155c6:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
   155ca:	f017 f8ad 	bl	2c728 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
   155ce:	2800      	cmp	r0, #0
   155d0:	d0e2      	beq.n	15598 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
   155d2:	2010      	movs	r0, #16
   155d4:	e000      	b.n	155d8 <SendFrameOnChannel+0xb4>
            return LORAMAC_STATUS_PARAMETER_INVALID;
   155d6:	2003      	movs	r0, #3
}
   155d8:	b006      	add	sp, #24
   155da:	bd70      	pop	{r4, r5, r6, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
   155dc:	481f      	ldr	r0, [pc, #124]	; (1565c <SendFrameOnChannel+0x138>)
   155de:	f002 fec9 	bl	18374 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
   155e2:	2800      	cmp	r0, #0
   155e4:	d132      	bne.n	1564c <SendFrameOnChannel+0x128>
    MacCtx.ResponseTimeoutStartTime = 0;
   155e6:	2500      	movs	r5, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   155e8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   155ec:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   155f0:	f043 0302 	orr.w	r3, r3, #2
   155f4:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
   155f8:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   155fc:	4818      	ldr	r0, [pc, #96]	; (15660 <SendFrameOnChannel+0x13c>)
    MacCtx.ChannelsNbTransCounter++;
   155fe:	3301      	adds	r3, #1
   15600:	b2db      	uxtb	r3, r3
   15602:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
   15606:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   1560a:	4b16      	ldr	r3, [pc, #88]	; (15664 <SendFrameOnChannel+0x140>)
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
   1560c:	8021      	strh	r1, [r4, #0]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   1560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    MacCtx.ResponseTimeoutStartTime = 0;
   15610:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
   15614:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
   15616:	4628      	mov	r0, r5
   15618:	e7de      	b.n	155d8 <SendFrameOnChannel+0xb4>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
   1561a:	4810      	ldr	r0, [pc, #64]	; (1565c <SendFrameOnChannel+0x138>)
   1561c:	f002 ff00 	bl	18420 <LoRaMacCryptoPrepareReJoinType1>
   15620:	e7df      	b.n	155e2 <SendFrameOnChannel+0xbe>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
   15622:	480e      	ldr	r0, [pc, #56]	; (1565c <SendFrameOnChannel+0x138>)
   15624:	f002 ff28 	bl	18478 <LoRaMacCryptoPrepareReJoinType0or2>
   15628:	e7db      	b.n	155e2 <SendFrameOnChannel+0xbe>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
   1562a:	a801      	add	r0, sp, #4
   1562c:	f002 fe68 	bl	18300 <LoRaMacCryptoGetFCntUp>
   15630:	b970      	cbnz	r0, 15650 <SendFrameOnChannel+0x12c>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
   15632:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   15636:	b113      	cbz	r3, 1563e <SendFrameOnChannel+0x11a>
                fCntUp -= 1;
   15638:	9b01      	ldr	r3, [sp, #4]
   1563a:	3b01      	subs	r3, #1
   1563c:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
   1563e:	4632      	mov	r2, r6
   15640:	4b06      	ldr	r3, [pc, #24]	; (1565c <SendFrameOnChannel+0x138>)
   15642:	9801      	ldr	r0, [sp, #4]
   15644:	b2e9      	uxtb	r1, r5
   15646:	f002 ff41 	bl	184cc <LoRaMacCryptoSecureMessage>
   1564a:	e7ca      	b.n	155e2 <SendFrameOnChannel+0xbe>
                return LORAMAC_STATUS_CRYPTO_ERROR;
   1564c:	2011      	movs	r0, #17
   1564e:	e7c3      	b.n	155d8 <SendFrameOnChannel+0xb4>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
   15650:	2012      	movs	r0, #18
   15652:	e7c1      	b.n	155d8 <SendFrameOnChannel+0xb4>
   15654:	2002fd64 	.word	0x2002fd64
   15658:	200301c0 	.word	0x200301c0
   1565c:	200302c8 	.word	0x200302c8
   15660:	200301c2 	.word	0x200301c2
   15664:	00033c2c 	.word	0x00033c2c

00015668 <ScheduleTx>:
{
   15668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1566c:	b08e      	sub	sp, #56	; 0x38
   1566e:	4607      	mov	r7, r0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
   15670:	f017 f842 	bl	2c6f8 <LoRaMacClassBIsBeaconExpected>
   15674:	2800      	cmp	r0, #0
   15676:	f040 80d3 	bne.w	15820 <ScheduleTx+0x1b8>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   1567a:	4c6a      	ldr	r4, [pc, #424]	; (15824 <ScheduleTx+0x1bc>)
   1567c:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   15680:	2b01      	cmp	r3, #1
   15682:	d009      	beq.n	15698 <ScheduleTx+0x30>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
   15684:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15686:	4d68      	ldr	r5, [pc, #416]	; (15828 <ScheduleTx+0x1c0>)
   15688:	b19b      	cbz	r3, 156b2 <ScheduleTx+0x4a>
    switch( MacCtx.TxMsg.Type )
   1568a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
   1568e:	b1c3      	cbz	r3, 156c2 <ScheduleTx+0x5a>
   15690:	2b04      	cmp	r3, #4
   15692:	d01c      	beq.n	156ce <ScheduleTx+0x66>
   15694:	2603      	movs	r6, #3
   15696:	e003      	b.n	156a0 <ScheduleTx+0x38>
        if( LoRaMacClassBIsPingExpected( ) == true )
   15698:	f017 f830 	bl	2c6fc <LoRaMacClassBIsPingExpected>
   1569c:	b120      	cbz	r0, 156a8 <ScheduleTx+0x40>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
   1569e:	260f      	movs	r6, #15
}
   156a0:	4630      	mov	r0, r6
   156a2:	b00e      	add	sp, #56	; 0x38
   156a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
   156a8:	f017 f82a 	bl	2c700 <LoRaMacClassBIsMulticastExpected>
   156ac:	2800      	cmp	r0, #0
   156ae:	d0e9      	beq.n	15684 <ScheduleTx+0x1c>
   156b0:	e7f5      	b.n	1569e <ScheduleTx+0x36>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
   156b2:	f8b4 31a8 	ldrh.w	r3, [r4, #424]	; 0x1a8
   156b6:	f8d5 241c 	ldr.w	r2, [r5, #1052]	; 0x41c
   156ba:	3b01      	subs	r3, #1
   156bc:	4353      	muls	r3, r2
   156be:	6423      	str	r3, [r4, #64]	; 0x40
   156c0:	e7e3      	b.n	1568a <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
   156c2:	485a      	ldr	r0, [pc, #360]	; (1582c <ScheduleTx+0x1c4>)
   156c4:	f017 fa1f 	bl	2cb06 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
   156c8:	b128      	cbz	r0, 156d6 <ScheduleTx+0x6e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
   156ca:	2611      	movs	r6, #17
   156cc:	e7e8      	b.n	156a0 <ScheduleTx+0x38>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
   156ce:	4857      	ldr	r0, [pc, #348]	; (1582c <ScheduleTx+0x1c4>)
   156d0:	f017 fabd 	bl	2cc4e <LoRaMacSerializerData>
   156d4:	e7f8      	b.n	156c8 <ScheduleTx+0x60>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   156d6:	f895 310c 	ldrb.w	r3, [r5, #268]	; 0x10c
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   156da:	f10d 0818 	add.w	r8, sp, #24
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
   156de:	802b      	strh	r3, [r5, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
   156e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   156e2:	4640      	mov	r0, r8
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
   156e4:	9308      	str	r3, [sp, #32]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   156e6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   156ea:	ae02      	add	r6, sp, #8
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   156ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
   156f0:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   156f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   156f8:	f016 fbca 	bl	2be90 <SysTimeGetMcuTime>
   156fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15700:	4630      	mov	r0, r6
   15702:	9300      	str	r3, [sp, #0]
   15704:	e898 0006 	ldmia.w	r8, {r1, r2}
   15708:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
   1570c:	f016 fb61 	bl	2bdd2 <SysTimeSub>
   15710:	e896 0003 	ldmia.w	r6, {r0, r1}
   15714:	ab0b      	add	r3, sp, #44	; 0x2c
   15716:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
   1571a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    nextChan.Joined = true;
   1571c:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
   1571e:	9309      	str	r3, [sp, #36]	; 0x24
    nextChan.LastTxIsJoinRequest = false;
   15720:	2300      	movs	r3, #0
   15722:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    nextChan.PktLen = MacCtx.PktBufferLen;
   15726:	882b      	ldrh	r3, [r5, #0]
    nextChan.Joined = true;
   15728:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    nextChan.PktLen = MacCtx.PktBufferLen;
   1572c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   15730:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
   15734:	b91b      	cbnz	r3, 1573e <ScheduleTx+0xd6>
        nextChan.LastTxIsJoinRequest = true;
   15736:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
        nextChan.Joined = false;
   1573a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
   1573e:	4b3c      	ldr	r3, [pc, #240]	; (15830 <ScheduleTx+0x1c8>)
   15740:	a908      	add	r1, sp, #32
   15742:	9300      	str	r3, [sp, #0]
   15744:	4b3b      	ldr	r3, [pc, #236]	; (15834 <ScheduleTx+0x1cc>)
   15746:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1574a:	f1a3 02e1 	sub.w	r2, r3, #225	; 0xe1
   1574e:	f017 fb72 	bl	2ce36 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
   15752:	4606      	mov	r6, r0
   15754:	b1a0      	cbz	r0, 15780 <ScheduleTx+0x118>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
   15756:	280b      	cmp	r0, #11
   15758:	d1a2      	bne.n	156a0 <ScheduleTx+0x38>
   1575a:	2f00      	cmp	r7, #0
   1575c:	d0a0      	beq.n	156a0 <ScheduleTx+0x38>
            if( MacCtx.DutyCycleWaitTime != 0 )
   1575e:	f8d5 14fc 	ldr.w	r1, [r5, #1276]	; 0x4fc
   15762:	b159      	cbz	r1, 1577c <ScheduleTx+0x114>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
   15764:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
   15768:	4833      	ldr	r0, [pc, #204]	; (15838 <ScheduleTx+0x1d0>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
   1576a:	f043 0320 	orr.w	r3, r3, #32
   1576e:	f8c5 3340 	str.w	r3, [r5, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
   15772:	f016 fbfc 	bl	2bf6e <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
   15776:	4830      	ldr	r0, [pc, #192]	; (15838 <ScheduleTx+0x1d0>)
   15778:	f7fd fdbc 	bl	132f4 <TimerStart>
            return LORAMAC_STATUS_OK;
   1577c:	2600      	movs	r6, #0
   1577e:	e78f      	b.n	156a0 <ScheduleTx+0x38>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   15780:	f894 8058 	ldrb.w	r8, [r4, #88]	; 0x58
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
   15784:	f994 3079 	ldrsb.w	r3, [r4, #121]	; 0x79
   15788:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
   1578c:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   15790:	4640      	mov	r0, r8
   15792:	f017 fb5e 	bl	2ce52 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   15796:	4f29      	ldr	r7, [pc, #164]	; (1583c <ScheduleTx+0x1d4>)
   15798:	b241      	sxtb	r1, r0
   1579a:	9700      	str	r7, [sp, #0]
   1579c:	4640      	mov	r0, r8
   1579e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   157a0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   157a4:	3714      	adds	r7, #20
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   157a6:	f017 faee 	bl	2cd86 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
   157aa:	9700      	str	r7, [sp, #0]
   157ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   157ae:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   157b2:	f994 1080 	ldrsb.w	r1, [r4, #128]	; 0x80
   157b6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   157ba:	f017 fae4 	bl	2cd86 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   157be:	f8d5 13cc 	ldr.w	r1, [r5, #972]	; 0x3cc
   157c2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   157c4:	f8d5 23e0 	ldr.w	r2, [r5, #992]	; 0x3e0
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   157c8:	440b      	add	r3, r1
   157ca:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   157ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   157d0:	4413      	add	r3, r2
   157d2:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   157d6:	f894 31b8 	ldrb.w	r3, [r4, #440]	; 0x1b8
   157da:	b96b      	cbnz	r3, 157f8 <ScheduleTx+0x190>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
   157dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
   157de:	440b      	add	r3, r1
   157e0:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
   157e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   157e6:	4413      	add	r3, r2
   157e8:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    return SendFrameOnChannel( MacCtx.Channel );
   157ec:	f895 041b 	ldrb.w	r0, [r5, #1051]	; 0x41b
   157f0:	f7ff fe98 	bl	15524 <SendFrameOnChannel>
   157f4:	4606      	mov	r6, r0
   157f6:	e753      	b.n	156a0 <ScheduleTx+0x38>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   157f8:	a805      	add	r0, sp, #20
    size_t macCmdsSize = 0;
   157fa:	9605      	str	r6, [sp, #20]
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   157fc:	f002 fb38 	bl	17e70 <LoRaMacCommandsGetSizeSerializedCmds>
   15800:	b960      	cbnz	r0, 1581c <ScheduleTx+0x1b4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
   15802:	f994 0049 	ldrsb.w	r0, [r4, #73]	; 0x49
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
   15806:	f895 6237 	ldrb.w	r6, [r5, #567]	; 0x237
   1580a:	f89d 7014 	ldrb.w	r7, [sp, #20]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
   1580e:	f7ff fae3 	bl	14dd8 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
   15812:	443e      	add	r6, r7
   15814:	42b0      	cmp	r0, r6
   15816:	d2e9      	bcs.n	157ec <ScheduleTx+0x184>
            return LORAMAC_STATUS_LENGTH_ERROR;
   15818:	2608      	movs	r6, #8
   1581a:	e741      	b.n	156a0 <ScheduleTx+0x38>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   1581c:	2613      	movs	r6, #19
   1581e:	e73f      	b.n	156a0 <ScheduleTx+0x38>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
   15820:	260e      	movs	r6, #14
   15822:	e73d      	b.n	156a0 <ScheduleTx+0x38>
   15824:	2002fd64 	.word	0x2002fd64
   15828:	200301c0 	.word	0x200301c0
   1582c:	200302c8 	.word	0x200302c8
   15830:	2002fda4 	.word	0x2002fda4
   15834:	200306bc 	.word	0x200306bc
   15838:	20030530 	.word	0x20030530
   1583c:	20030580 	.word	0x20030580

00015840 <OnTxDelayedTimerEvent>:
{
   15840:	b510      	push	{r4, lr}
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   15842:	4c18      	ldr	r4, [pc, #96]	; (158a4 <OnTxDelayedTimerEvent+0x64>)
    TimerStop( &MacCtx.TxDelayedTimer );
   15844:	4818      	ldr	r0, [pc, #96]	; (158a8 <OnTxDelayedTimerEvent+0x68>)
   15846:	f7fd fdcb 	bl	133e0 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   1584a:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
   1584e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   15852:	f023 0320 	bic.w	r3, r3, #32
   15856:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( startTimeInMs != 0 )
   1585a:	b148      	cbz	r0, 15870 <OnTxDelayedTimerEvent+0x30>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
   1585c:	f016 fb9f 	bl	2bf9e <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
   15860:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   15864:	d904      	bls.n	15870 <OnTxDelayedTimerEvent+0x30>
            Nvm.MacGroup1.SrvAckRequested = false;
   15866:	2200      	movs	r2, #0
   15868:	4b10      	ldr	r3, [pc, #64]	; (158ac <OnTxDelayedTimerEvent+0x6c>)
   1586a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
   1586e:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
   15870:	2001      	movs	r0, #1
   15872:	f7ff fef9 	bl	15668 <ScheduleTx>
   15876:	2800      	cmp	r0, #0
   15878:	d0f9      	beq.n	1586e <OnTxDelayedTimerEvent+0x2e>
   1587a:	280b      	cmp	r0, #11
   1587c:	d0f7      	beq.n	1586e <OnTxDelayedTimerEvent+0x2e>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
   1587e:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15880:	4b0a      	ldr	r3, [pc, #40]	; (158ac <OnTxDelayedTimerEvent+0x6c>)
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
   15882:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15886:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   1588a:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
   1588e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
   15892:	f884 3449 	strb.w	r3, [r4, #1097]	; 0x449
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
   15896:	f002 fbbf 	bl	18018 <LoRaMacConfirmQueueSetStatusCmn>
}
   1589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            StopRetransmission( );
   1589e:	f7ff bd41 	b.w	15324 <StopRetransmission.isra.0>
   158a2:	bf00      	nop
   158a4:	200301c0 	.word	0x200301c0
   158a8:	20030530 	.word	0x20030530
   158ac:	2002fd64 	.word	0x2002fd64

000158b0 <Send>:
{
   158b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   158b4:	4c3b      	ldr	r4, [pc, #236]	; (159a4 <Send+0xf4>)
   158b6:	460e      	mov	r6, r1
   158b8:	4617      	mov	r7, r2
   158ba:	4699      	mov	r9, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   158bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   158be:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   158c2:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
{
   158c6:	b08b      	sub	sp, #44	; 0x2c
   158c8:	4605      	mov	r5, r0
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
   158ca:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
   158ce:	ba5b      	rev16	r3, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   158d0:	9104      	str	r1, [sp, #16]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   158d2:	2a00      	cmp	r2, #0
   158d4:	d064      	beq.n	159a0 <Send+0xf0>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
   158d6:	f894 21a3 	ldrb.w	r2, [r4, #419]	; 0x1a3
   158da:	b902      	cbnz	r2, 158de <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
   158dc:	6422      	str	r2, [r4, #64]	; 0x40
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
   158de:	f04f 0200 	mov.w	r2, #0
   158e2:	f894 01a2 	ldrb.w	r0, [r4, #418]	; 0x1a2
   158e6:	f360 12c7 	bfi	r2, r0, #7, #1
   158ea:	f88d 200c 	strb.w	r2, [sp, #12]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   158ee:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   158f2:	2a01      	cmp	r2, #1
        fCtrl.Bits.FPending      = 1;
   158f4:	bf02      	ittt	eq
   158f6:	f89d 200c 	ldrbeq.w	r2, [sp, #12]
   158fa:	f042 0210 	orreq.w	r2, r2, #16
   158fe:	f88d 200c 	strbeq.w	r2, [sp, #12]
    if( Nvm.MacGroup1.SrvAckRequested == true )
   15902:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
   15906:	b12a      	cbz	r2, 15914 <Send+0x64>
        fCtrl.Bits.Ack = 1;
   15908:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1590c:	f042 0220 	orr.w	r2, r2, #32
   15910:	f88d 200c 	strb.w	r2, [sp, #12]
    adrNext.UpdateChanMask = true;
   15914:	2201      	movs	r2, #1
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   15916:	f8ad 3020 	strh.w	r3, [sp, #32]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   1591a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    adrNext.UpdateChanMask = true;
   1591e:	f88d 2014 	strb.w	r2, [sp, #20]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15922:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15926:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   1592a:	4a1f      	ldr	r2, [pc, #124]	; (159a8 <Send+0xf8>)
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1592c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
   15930:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15934:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    adrNext.Region = Nvm.MacGroup2.Region;
   15938:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1593c:	ab04      	add	r3, sp, #16
   1593e:	9300      	str	r3, [sp, #0]
   15940:	4b1a      	ldr	r3, [pc, #104]	; (159ac <Send+0xfc>)
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
   15942:	f88d 0015 	strb.w	r0, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   15946:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   15948:	9207      	str	r2, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1594a:	f1a3 012f 	sub.w	r1, r3, #47	; 0x2f
   1594e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15952:	a805      	add	r0, sp, #20
   15954:	f016 fe57 	bl	2c606 <LoRaMacAdrCalcNext>
   15958:	f89d 300c 	ldrb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
   1595c:	4632      	mov	r2, r6
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
   1595e:	f360 1386 	bfi	r3, r0, #6, #1
   15962:	f88d 300c 	strb.w	r3, [sp, #12]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
   15966:	4628      	mov	r0, r5
   15968:	463b      	mov	r3, r7
   1596a:	f8cd 9000 	str.w	r9, [sp]
   1596e:	a903      	add	r1, sp, #12
   15970:	f7ff fd34 	bl	153dc <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
   15974:	b108      	cbz	r0, 1597a <Send+0xca>
   15976:	280a      	cmp	r0, #10
   15978:	d103      	bne.n	15982 <Send+0xd2>
        status = ScheduleTx( false );
   1597a:	2000      	movs	r0, #0
   1597c:	f7ff fe74 	bl	15668 <ScheduleTx>
    if( status != LORAMAC_STATUS_OK )
   15980:	b120      	cbz	r0, 1598c <Send+0xdc>
        Nvm.MacGroup1.ChannelsTxPower = txPower;
   15982:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
}
   15986:	b00b      	add	sp, #44	; 0x2c
   15988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
   1598c:	9b04      	ldr	r3, [sp, #16]
        Nvm.MacGroup1.SrvAckRequested = false;
   1598e:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
   15992:	63a3      	str	r3, [r4, #56]	; 0x38
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
   15994:	f002 fa4c 	bl	17e30 <LoRaMacCommandsRemoveNoneStickyCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   15998:	2800      	cmp	r0, #0
   1599a:	bf18      	it	ne
   1599c:	2013      	movne	r0, #19
   1599e:	e7f2      	b.n	15986 <Send+0xd6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
   159a0:	2007      	movs	r0, #7
   159a2:	e7f0      	b.n	15986 <Send+0xd6>
   159a4:	2002fd64 	.word	0x2002fd64
   159a8:	200301c0 	.word	0x200301c0
   159ac:	2002fddc 	.word	0x2002fddc

000159b0 <SendReJoinReq>:
    switch( joinReqType )
   159b0:	2802      	cmp	r0, #2
{
   159b2:	b570      	push	{r4, r5, r6, lr}
   159b4:	4604      	mov	r4, r0
    switch( joinReqType )
   159b6:	d001      	beq.n	159bc <SendReJoinReq+0xc>
   159b8:	d82b      	bhi.n	15a12 <SendReJoinReq+0x62>
   159ba:	bb88      	cbnz	r0, 15a20 <SendReJoinReq+0x70>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   159bc:	2201      	movs	r2, #1
   159be:	4b3c      	ldr	r3, [pc, #240]	; (15ab0 <SendReJoinReq+0x100>)
   159c0:	4d3c      	ldr	r5, [pc, #240]	; (15ab4 <SendReJoinReq+0x104>)
   159c2:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
   159c6:	2202      	movs	r2, #2
   159c8:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
   159cc:	18aa      	adds	r2, r5, r2
            if( joinReqType == REJOIN_REQ_0 )
   159ce:	3c00      	subs	r4, #0
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
   159d0:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   159d4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
            if( joinReqType == REJOIN_REQ_0 )
   159d8:	bf18      	it	ne
   159da:	2401      	movne	r4, #1
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
   159dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   159e0:	f8a5 210c 	strh.w	r2, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
   159e4:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
   159e8:	0a1a      	lsrs	r2, r3, #8
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
   159ea:	0c1b      	lsrs	r3, r3, #16
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
   159ec:	f885 2110 	strb.w	r2, [r5, #272]	; 0x110
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
   159f0:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
            if( joinReqType == REJOIN_REQ_0 )
   159f4:	0064      	lsls	r4, r4, #1
   159f6:	f885 410e 	strb.w	r4, [r5, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   159fa:	f7ff f977 	bl	14cec <SecureElementGetDevEui>
   159fe:	2208      	movs	r2, #8
   15a00:	4601      	mov	r1, r0
   15a02:	f505 7089 	add.w	r0, r5, #274	; 0x112
   15a06:	f016 f9ae 	bl	2bd66 <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
   15a0a:	2008      	movs	r0, #8
   15a0c:	f505 718d 	add.w	r1, r5, #282	; 0x11a
   15a10:	e029      	b.n	15a66 <SendReJoinReq+0xb6>
    switch( joinReqType )
   15a12:	28ff      	cmp	r0, #255	; 0xff
   15a14:	d02d      	beq.n	15a72 <SendReJoinReq+0xc2>
{
   15a16:	2001      	movs	r0, #1
}
   15a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = ScheduleTx( allowDelayedTx );
   15a1c:	f7ff be24 	b.w	15668 <ScheduleTx>
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15a20:	2301      	movs	r3, #1
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
   15a22:	4c24      	ldr	r4, [pc, #144]	; (15ab4 <SendReJoinReq+0x104>)
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15a24:	4a22      	ldr	r2, [pc, #136]	; (15ab0 <SendReJoinReq+0x100>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
   15a26:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            Nvm.MacGroup2.IsRejoinAcceptPending = true;
   15a2a:	f882 31d0 	strb.w	r3, [r2, #464]	; 0x1d0
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
   15a2e:	1ca2      	adds	r2, r4, #2
   15a30:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   15a34:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
   15a38:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
   15a3c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
   15a40:	f7ff f96a 	bl	14d18 <SecureElementGetJoinEui>
   15a44:	2208      	movs	r2, #8
   15a46:	4601      	mov	r1, r0
   15a48:	f204 100f 	addw	r0, r4, #271	; 0x10f
   15a4c:	f016 f98b 	bl	2bd66 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   15a50:	f7ff f94c 	bl	14cec <SecureElementGetDevEui>
   15a54:	2208      	movs	r2, #8
   15a56:	4601      	mov	r1, r0
   15a58:	f204 1017 	addw	r0, r4, #279	; 0x117
   15a5c:	f016 f983 	bl	2bd66 <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
   15a60:	2009      	movs	r0, #9
   15a62:	f504 7190 	add.w	r1, r4, #288	; 0x120
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
   15a66:	f002 fc57 	bl	18318 <LoRaMacCryptoGetRJcount>
   15a6a:	2800      	cmp	r0, #0
   15a6c:	d0d3      	beq.n	15a16 <SendReJoinReq+0x66>
}
   15a6e:	2011      	movs	r0, #17
   15a70:	bd70      	pop	{r4, r5, r6, pc}
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
   15a72:	2600      	movs	r6, #0
   15a74:	4d0f      	ldr	r5, [pc, #60]	; (15ab4 <SendReJoinReq+0x104>)
            SwitchClass( CLASS_A );
   15a76:	2000      	movs	r0, #0
   15a78:	f7ff fb74 	bl	15164 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
   15a7c:	1cab      	adds	r3, r5, #2
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
   15a7e:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
   15a82:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
   15a86:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
   15a8a:	f7ff f945 	bl	14d18 <SecureElementGetJoinEui>
   15a8e:	2208      	movs	r2, #8
   15a90:	4601      	mov	r1, r0
   15a92:	f505 7087 	add.w	r0, r5, #270	; 0x10e
   15a96:	f016 f966 	bl	2bd66 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
   15a9a:	f7ff f927 	bl	14cec <SecureElementGetDevEui>
   15a9e:	2208      	movs	r2, #8
   15aa0:	4601      	mov	r1, r0
   15aa2:	f505 708b 	add.w	r0, r5, #278	; 0x116
   15aa6:	f016 f95e 	bl	2bd66 <memcpy1>
            allowDelayedTx = false;
   15aaa:	4630      	mov	r0, r6
            break;
   15aac:	e7b4      	b.n	15a18 <SendReJoinReq+0x68>
   15aae:	bf00      	nop
   15ab0:	2002fd64 	.word	0x2002fd64
   15ab4:	200301c0 	.word	0x200301c0

00015ab8 <OnForceRejoinReqCycleTimerEvent>:
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    TimerStart( &MacCtx.Rejoin2CycleTimer );
}

static void OnForceRejoinReqCycleTimerEvent( void* context )
{
   15ab8:	b510      	push	{r4, lr}
    if( Nvm.MacGroup1.ForceRejoinRetriesCounter == Nvm.MacGroup2.ForceRejoinMaxRetries )
   15aba:	4c0e      	ldr	r4, [pc, #56]	; (15af4 <OnForceRejoinReqCycleTimerEvent+0x3c>)
   15abc:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   15ac0:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
   15ac4:	429a      	cmp	r2, r3
   15ac6:	d105      	bne.n	15ad4 <OnForceRejoinReqCycleTimerEvent+0x1c>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   15ac8:	480b      	ldr	r0, [pc, #44]	; (15af8 <OnForceRejoinReqCycleTimerEvent+0x40>)
   15aca:	f7fd fc89 	bl	133e0 <TimerStop>
        Nvm.MacGroup1.ForceRejoinRetriesCounter = 0;
   15ace:	2300      	movs	r3, #0
   15ad0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    }

    Nvm.MacGroup1.ForceRejoinRetriesCounter ++;
   15ad4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15ad8:	3301      	adds	r3, #1
   15ada:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   15ade:	f894 31c1 	ldrb.w	r3, [r4, #449]	; 0x1c1
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
    }
}
   15ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   15ae6:	2b01      	cmp	r3, #1
        SendReJoinReq( REJOIN_REQ_0 );
   15ae8:	bf94      	ite	ls
   15aea:	2000      	movls	r0, #0
        SendReJoinReq( REJOIN_REQ_2 );
   15aec:	2002      	movhi	r0, #2
   15aee:	f7ff bf5f 	b.w	159b0 <SendReJoinReq>
   15af2:	bf00      	nop
   15af4:	2002fd64 	.word	0x2002fd64
   15af8:	20030698 	.word	0x20030698

00015afc <OnRejoin2CycleTimerEvent>:
{
   15afc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin2CycleTimer );
   15afe:	480f      	ldr	r0, [pc, #60]	; (15b3c <OnRejoin2CycleTimerEvent+0x40>)
   15b00:	f7fd fc6e 	bl	133e0 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
   15b04:	4b0e      	ldr	r3, [pc, #56]	; (15b40 <OnRejoin2CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15b06:	4a0f      	ldr	r2, [pc, #60]	; (15b44 <OnRejoin2CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
   15b08:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
    if( rejoinCycleTime > 4294967 )
   15b0c:	4c0e      	ldr	r4, [pc, #56]	; (15b48 <OnRejoin2CycleTimerEvent+0x4c>)
   15b0e:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15b10:	bf84      	itt	hi
   15b12:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15b16:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_2 );
   15b18:	f04f 0002 	mov.w	r0, #2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15b1c:	bf88      	it	hi
   15b1e:	f8c4 34f8 	strhi.w	r3, [r4, #1272]	; 0x4f8
    SendReJoinReq( REJOIN_REQ_2 );
   15b22:	f7ff ff45 	bl	159b0 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
   15b26:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   15b2a:	4804      	ldr	r0, [pc, #16]	; (15b3c <OnRejoin2CycleTimerEvent+0x40>)
   15b2c:	f016 fa1f 	bl	2bf6e <TimerSetValue>
}
   15b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin2CycleTimer );
   15b34:	4801      	ldr	r0, [pc, #4]	; (15b3c <OnRejoin2CycleTimerEvent+0x40>)
   15b36:	f7fd bbdd 	b.w	132f4 <TimerStart>
   15b3a:	bf00      	nop
   15b3c:	20030680 	.word	0x20030680
   15b40:	2002fd64 	.word	0x2002fd64
   15b44:	00418937 	.word	0x00418937
   15b48:	200301c0 	.word	0x200301c0

00015b4c <OnRejoin1CycleTimerEvent>:
{
   15b4c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin1CycleTimer );
   15b4e:	480f      	ldr	r0, [pc, #60]	; (15b8c <OnRejoin1CycleTimerEvent+0x40>)
   15b50:	f7fd fc46 	bl	133e0 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
   15b54:	4b0e      	ldr	r3, [pc, #56]	; (15b90 <OnRejoin1CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15b56:	4a0f      	ldr	r2, [pc, #60]	; (15b94 <OnRejoin1CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
   15b58:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
    if( rejoinCycleTime > 4294967 )
   15b5c:	4c0e      	ldr	r4, [pc, #56]	; (15b98 <OnRejoin1CycleTimerEvent+0x4c>)
   15b5e:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15b60:	bf84      	itt	hi
   15b62:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15b66:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_1 );
   15b68:	f04f 0001 	mov.w	r0, #1
        *timeInMiliSec = rejoinCycleTime * 1000;
   15b6c:	bf88      	it	hi
   15b6e:	f8c4 34f4 	strhi.w	r3, [r4, #1268]	; 0x4f4
    SendReJoinReq( REJOIN_REQ_1 );
   15b72:	f7ff ff1d 	bl	159b0 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   15b76:	f8d4 14f4 	ldr.w	r1, [r4, #1268]	; 0x4f4
   15b7a:	4804      	ldr	r0, [pc, #16]	; (15b8c <OnRejoin1CycleTimerEvent+0x40>)
   15b7c:	f016 f9f7 	bl	2bf6e <TimerSetValue>
}
   15b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin1CycleTimer );
   15b84:	4801      	ldr	r0, [pc, #4]	; (15b8c <OnRejoin1CycleTimerEvent+0x40>)
   15b86:	f7fd bbb5 	b.w	132f4 <TimerStart>
   15b8a:	bf00      	nop
   15b8c:	20030668 	.word	0x20030668
   15b90:	2002fd64 	.word	0x2002fd64
   15b94:	00418937 	.word	0x00418937
   15b98:	200301c0 	.word	0x200301c0

00015b9c <OnRejoin0CycleTimerEvent>:
{
   15b9c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.Rejoin0CycleTimer );
   15b9e:	480f      	ldr	r0, [pc, #60]	; (15bdc <OnRejoin0CycleTimerEvent+0x40>)
   15ba0:	f7fd fc1e 	bl	133e0 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
   15ba4:	4b0e      	ldr	r3, [pc, #56]	; (15be0 <OnRejoin0CycleTimerEvent+0x44>)
    if( rejoinCycleTime > 4294967 )
   15ba6:	4a0f      	ldr	r2, [pc, #60]	; (15be4 <OnRejoin0CycleTimerEvent+0x48>)
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
   15ba8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   15bac:	4c0e      	ldr	r4, [pc, #56]	; (15be8 <OnRejoin0CycleTimerEvent+0x4c>)
   15bae:	4293      	cmp	r3, r2
        *timeInMiliSec = rejoinCycleTime * 1000;
   15bb0:	bf84      	itt	hi
   15bb2:	f44f 727a 	movhi.w	r2, #1000	; 0x3e8
   15bb6:	4353      	mulhi	r3, r2
    SendReJoinReq( REJOIN_REQ_0 );
   15bb8:	f04f 0000 	mov.w	r0, #0
        *timeInMiliSec = rejoinCycleTime * 1000;
   15bbc:	bf88      	it	hi
   15bbe:	f8c4 34f0 	strhi.w	r3, [r4, #1264]	; 0x4f0
    SendReJoinReq( REJOIN_REQ_0 );
   15bc2:	f7ff fef5 	bl	159b0 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   15bc6:	f8d4 14f0 	ldr.w	r1, [r4, #1264]	; 0x4f0
   15bca:	4804      	ldr	r0, [pc, #16]	; (15bdc <OnRejoin0CycleTimerEvent+0x40>)
   15bcc:	f016 f9cf 	bl	2bf6e <TimerSetValue>
}
   15bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerStart( &MacCtx.Rejoin0CycleTimer );
   15bd4:	4801      	ldr	r0, [pc, #4]	; (15bdc <OnRejoin0CycleTimerEvent+0x40>)
   15bd6:	f7fd bb8d 	b.w	132f4 <TimerStart>
   15bda:	bf00      	nop
   15bdc:	20030650 	.word	0x20030650
   15be0:	2002fd64 	.word	0x2002fd64
   15be4:	00418937 	.word	0x00418937
   15be8:	200301c0 	.word	0x200301c0

00015bec <ProcessMacCommands.constprop.0>:
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0;
   15bf0:	f04f 0900 	mov.w	r9, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15bf4:	b08f      	sub	sp, #60	; 0x3c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
   15bf6:	2b01      	cmp	r3, #1
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
   15bf8:	4606      	mov	r6, r0
   15bfa:	460f      	mov	r7, r1
   15bfc:	4690      	mov	r8, r2
    uint8_t status = 0;
   15bfe:	f88d 9009 	strb.w	r9, [sp, #9]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   15c02:	f8ad 900c 	strh.w	r9, [sp, #12]
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
   15c06:	d802      	bhi.n	15c0e <ProcessMacCommands.constprop.0+0x22>
   15c08:	464c      	mov	r4, r9
    while( macIndex < commandsSize )
   15c0a:	42bc      	cmp	r4, r7
   15c0c:	d302      	bcc.n	15c14 <ProcessMacCommands.constprop.0+0x28>
}
   15c0e:	b00f      	add	sp, #60	; 0x3c
   15c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
   15c14:	5d30      	ldrb	r0, [r6, r4]
   15c16:	f002 f96b 	bl	17ef0 <LoRaMacCommandsGetCmdSize>
   15c1a:	4420      	add	r0, r4
   15c1c:	42b8      	cmp	r0, r7
   15c1e:	dcf6      	bgt.n	15c0e <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
   15c20:	5d33      	ldrb	r3, [r6, r4]
   15c22:	1c65      	adds	r5, r4, #1
   15c24:	3b01      	subs	r3, #1
   15c26:	b2ed      	uxtb	r5, r5
   15c28:	2b1f      	cmp	r3, #31
   15c2a:	d8f0      	bhi.n	15c0e <ProcessMacCommands.constprop.0+0x22>
   15c2c:	a201      	add	r2, pc, #4	; (adr r2, 15c34 <ProcessMacCommands.constprop.0+0x48>)
   15c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c32:	bf00      	nop
   15c34:	00015cb5 	.word	0x00015cb5
   15c38:	00015cd5 	.word	0x00015cd5
   15c3c:	00015cff 	.word	0x00015cff
   15c40:	00015dfd 	.word	0x00015dfd
   15c44:	00015e25 	.word	0x00015e25
   15c48:	00015ea5 	.word	0x00015ea5
   15c4c:	00015ecb 	.word	0x00015ecb
   15c50:	00015f31 	.word	0x00015f31
   15c54:	00015f61 	.word	0x00015f61
   15c58:	00015fef 	.word	0x00015fef
   15c5c:	00015fdb 	.word	0x00015fdb
   15c60:	00016043 	.word	0x00016043
   15c64:	00016147 	.word	0x00016147
   15c68:	00016069 	.word	0x00016069
   15c6c:	000160d5 	.word	0x000160d5
   15c70:	000161ef 	.word	0x000161ef
   15c74:	00016217 	.word	0x00016217
   15c78:	00016269 	.word	0x00016269
   15c7c:	0001629d 	.word	0x0001629d
   15c80:	00015c0f 	.word	0x00015c0f
   15c84:	00015c0f 	.word	0x00015c0f
   15c88:	00015c0f 	.word	0x00015c0f
   15c8c:	00015c0f 	.word	0x00015c0f
   15c90:	00015c0f 	.word	0x00015c0f
   15c94:	00015c0f 	.word	0x00015c0f
   15c98:	00015c0f 	.word	0x00015c0f
   15c9c:	00015c0f 	.word	0x00015c0f
   15ca0:	00015c0f 	.word	0x00015c0f
   15ca4:	00015c0f 	.word	0x00015c0f
   15ca8:	00015c0f 	.word	0x00015c0f
   15cac:	00015c0f 	.word	0x00015c0f
   15cb0:	00016139 	.word	0x00016139
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
   15cb4:	4ba8      	ldr	r3, [pc, #672]	; (15f58 <ProcessMacCommands.constprop.0+0x36c>)
   15cb6:	5d72      	ldrb	r2, [r6, r5]
   15cb8:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
   15cbc:	429a      	cmp	r2, r3
   15cbe:	d806      	bhi.n	15cce <ProcessMacCommands.constprop.0+0xe2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15cc0:	2001      	movs	r0, #1
   15cc2:	a905      	add	r1, sp, #20
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15cc4:	f002 f8a6 	bl	17e14 <LoRaMacCommandsGetCmd>
   15cc8:	2800      	cmp	r0, #0
   15cca:	f000 8238 	beq.w	1613e <ProcessMacCommands.constprop.0+0x552>
                macIndex++;
   15cce:	3402      	adds	r4, #2
   15cd0:	b2e5      	uxtb	r5, r4
   15cd2:	e012      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
   15cd4:	2004      	movs	r0, #4
   15cd6:	f002 f9b9 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   15cda:	b170      	cbz	r0, 15cfa <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
   15cdc:	2104      	movs	r1, #4
   15cde:	2000      	movs	r0, #0
   15ce0:	f002 f978 	bl	17fd4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
   15ce4:	5d72      	ldrb	r2, [r6, r5]
   15ce6:	4b9d      	ldr	r3, [pc, #628]	; (15f5c <ProcessMacCommands.constprop.0+0x370>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
   15ce8:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
   15cea:	3402      	adds	r4, #2
   15cec:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
   15cf0:	b2e4      	uxtb	r4, r4
   15cf2:	5d32      	ldrb	r2, [r6, r4]
   15cf4:	b2ed      	uxtb	r5, r5
   15cf6:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                uint8_t eirpDwellTime = payload[macIndex++];
   15cfa:	462c      	mov	r4, r5
   15cfc:	e785      	b.n	15c0a <ProcessMacCommands.constprop.0+0x1e>
                int8_t linkAdrDatarate = DR_0;
   15cfe:	2300      	movs	r3, #0
   15d00:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
   15d04:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
   15d08:	f88d 3010 	strb.w	r3, [sp, #16]
                uint8_t linkAdrNbBytesParsed = 0;
   15d0c:	f88d 3018 	strb.w	r3, [sp, #24]
                if( adrBlockFound == false )
   15d10:	f1b9 0f00 	cmp.w	r9, #0
   15d14:	d16d      	bne.n	15df2 <ProcessMacCommands.constprop.0+0x206>
                            linkAdrReq.PayloadSize = 5;
   15d16:	f04f 0905 	mov.w	r9, #5
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15d1a:	4c8f      	ldr	r4, [pc, #572]	; (15f58 <ProcessMacCommands.constprop.0+0x36c>)
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15d1c:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15d20:	1e6b      	subs	r3, r5, #1
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15d22:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
   15d26:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15d2a:	4433      	add	r3, r6
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
   15d2c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
   15d30:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
                        linkAdrReq.Payload = &payload[macIndex - 1];
   15d34:	930b      	str	r3, [sp, #44]	; 0x2c
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
   15d36:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15d3a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15d3e:	f894 31a2 	ldrb.w	r3, [r4, #418]	; 0x1a2
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   15d42:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
   15d46:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   15d4a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
   15d4e:	920a      	str	r2, [sp, #40]	; 0x28
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
   15d50:	b373      	cbz	r3, 15db0 <ProcessMacCommands.constprop.0+0x1c4>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
   15d52:	1c7b      	adds	r3, r7, #1
   15d54:	1b5b      	subs	r3, r3, r5
   15d56:	b2db      	uxtb	r3, r3
   15d58:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
   15d5c:	ab06      	add	r3, sp, #24
   15d5e:	9301      	str	r3, [sp, #4]
   15d60:	ab04      	add	r3, sp, #16
   15d62:	9300      	str	r3, [sp, #0]
   15d64:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15d68:	f10d 030b 	add.w	r3, sp, #11
   15d6c:	f10d 020a 	add.w	r2, sp, #10
   15d70:	a90a      	add	r1, sp, #40	; 0x28
   15d72:	f017 f82b 	bl	2cdcc <RegionLinkAdrReq>
   15d76:	f88d 0009 	strb.w	r0, [sp, #9]
                        if( ( status & 0x07 ) == 0x07 )
   15d7a:	f000 0007 	and.w	r0, r0, #7
   15d7e:	2807      	cmp	r0, #7
   15d80:	d113      	bne.n	15daa <ProcessMacCommands.constprop.0+0x1be>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
   15d82:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
   15d86:	f99d 300a 	ldrsb.w	r3, [sp, #10]
   15d8a:	429a      	cmp	r2, r3
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
   15d8c:	bfb8      	it	lt
   15d8e:	2201      	movlt	r2, #1
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
   15d90:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
   15d94:	f89d 300b 	ldrb.w	r3, [sp, #11]
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
   15d98:	bfb8      	it	lt
   15d9a:	f884 21a5 	strblt.w	r2, [r4, #421]	; 0x1a5
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
   15d9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
   15da2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15da6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                            linkAdrReq.PayloadSize = 5;
   15daa:	f04f 0a00 	mov.w	sl, #0
   15dae:	e009      	b.n	15dc4 <ProcessMacCommands.constprop.0+0x1d8>
   15db0:	2305      	movs	r3, #5
   15db2:	e7d1      	b.n	15d58 <ProcessMacCommands.constprop.0+0x16c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
   15db4:	2201      	movs	r2, #1
   15db6:	2003      	movs	r0, #3
   15db8:	f10d 0109 	add.w	r1, sp, #9
   15dbc:	f001 ffc0 	bl	17d40 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
   15dc0:	f10a 0a01 	add.w	sl, sl, #1
   15dc4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15dc8:	fa5f f28a 	uxtb.w	r2, sl
   15dcc:	fbb3 f1f9 	udiv	r1, r3, r9
   15dd0:	4291      	cmp	r1, r2
   15dd2:	d8ef      	bhi.n	15db4 <ProcessMacCommands.constprop.0+0x1c8>
                        macIndex += linkAdrNbBytesParsed - 1;
   15dd4:	442b      	add	r3, r5
   15dd6:	b2dd      	uxtb	r5, r3
   15dd8:	1e6b      	subs	r3, r5, #1
   15dda:	b2db      	uxtb	r3, r3
                        if( macIndex >= commandsSize )
   15ddc:	429f      	cmp	r7, r3
   15dde:	d90b      	bls.n	15df8 <ProcessMacCommands.constprop.0+0x20c>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
   15de0:	5cf2      	ldrb	r2, [r6, r3]
   15de2:	2a03      	cmp	r2, #3
   15de4:	d09a      	beq.n	15d1c <ProcessMacCommands.constprop.0+0x130>
                        macIndex--;
   15de6:	42af      	cmp	r7, r5
   15de8:	bf88      	it	hi
   15dea:	461d      	movhi	r5, r3
                break;
   15dec:	f04f 0901 	mov.w	r9, #1
   15df0:	e783      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    macIndex += 4;
   15df2:	3405      	adds	r4, #5
   15df4:	b2e5      	uxtb	r5, r4
   15df6:	e7f9      	b.n	15dec <ProcessMacCommands.constprop.0+0x200>
   15df8:	461d      	mov	r5, r3
   15dfa:	e7f7      	b.n	15dec <ProcessMacCommands.constprop.0+0x200>
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15dfc:	2201      	movs	r2, #1
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15dfe:	5d73      	ldrb	r3, [r6, r5]
   15e00:	4955      	ldr	r1, [pc, #340]	; (15f58 <ProcessMacCommands.constprop.0+0x36c>)
   15e02:	f003 030f 	and.w	r3, r3, #15
   15e06:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15e0a:	2004      	movs	r0, #4
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15e0c:	fa02 f303 	lsl.w	r3, r2, r3
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15e10:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15e12:	3402      	adds	r4, #2
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
   15e14:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
   15e18:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
   15e1a:	a903      	add	r1, sp, #12
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15e1c:	f001 ff90 	bl	17d40 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
   15e20:	4625      	mov	r5, r4
   15e22:	e76a      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                status = 0x07;
   15e24:	2307      	movs	r3, #7
   15e26:	f88d 3009 	strb.w	r3, [sp, #9]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15e2a:	5d73      	ldrb	r3, [r6, r5]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e2c:	1d65      	adds	r5, r4, #5
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15e2e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
   15e32:	f003 030f 	and.w	r3, r3, #15
   15e36:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15e3a:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15e3c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
   15e3e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15e42:	5cf2      	ldrb	r2, [r6, r3]
   15e44:	1d23      	adds	r3, r4, #4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e46:	b2db      	uxtb	r3, r3
   15e48:	5cf3      	ldrb	r3, [r6, r3]
                macIndex++;
   15e4a:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15e4c:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e4e:	041b      	lsls	r3, r3, #16
   15e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
   15e54:	5d32      	ldrb	r2, [r6, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15e56:	4c40      	ldr	r4, [pc, #256]	; (15f58 <ProcessMacCommands.constprop.0+0x36c>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e58:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
   15e5a:	2264      	movs	r2, #100	; 0x64
   15e5c:	4353      	muls	r3, r2
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15e5e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   15e62:	a90a      	add	r1, sp, #40	; 0x28
                rxParamSetupReq.Frequency *= 100;
   15e64:	930b      	str	r3, [sp, #44]	; 0x2c
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15e66:	f016 ffc1 	bl	2cdec <RegionRxParamSetupReq>
                if( ( status & 0x07 ) == 0x07 )
   15e6a:	f000 0307 	and.w	r3, r0, #7
   15e6e:	2b07      	cmp	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15e70:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
   15e72:	f88d 0009 	strb.w	r0, [sp, #9]
                if( ( status & 0x07 ) == 0x07 )
   15e76:	d10d      	bne.n	15e94 <ProcessMacCommands.constprop.0+0x2a8>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
   15e78:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   15e7c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
   15e80:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
   15e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e86:	67e3      	str	r3, [r4, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
   15e88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
   15e8c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   15e90:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
                macCmdPayload[0] = status;
   15e94:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
   15e98:	2201      	movs	r2, #1
   15e9a:	2005      	movs	r0, #5
   15e9c:	a903      	add	r1, sp, #12
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
   15e9e:	f001 ff4f 	bl	17d40 <LoRaMacCommandsAddCmd>
                break;
   15ea2:	e72a      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
   15ea4:	4b2d      	ldr	r3, [pc, #180]	; (15f5c <ProcessMacCommands.constprop.0+0x370>)
   15ea6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
   15eaa:	b163      	cbz	r3, 15ec6 <ProcessMacCommands.constprop.0+0x2da>
   15eac:	681b      	ldr	r3, [r3, #0]
   15eae:	b153      	cbz	r3, 15ec6 <ProcessMacCommands.constprop.0+0x2da>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
   15eb0:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
   15eb2:	f008 033f 	and.w	r3, r8, #63	; 0x3f
                macCmdPayload[0] = batteryLevel;
   15eb6:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
   15eba:	2202      	movs	r2, #2
   15ebc:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
   15ebe:	f88d 300d 	strb.w	r3, [sp, #13]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
   15ec2:	a903      	add	r1, sp, #12
   15ec4:	e7eb      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
   15ec6:	20ff      	movs	r0, #255	; 0xff
   15ec8:	e7f3      	b.n	15eb2 <ProcessMacCommands.constprop.0+0x2c6>
                status = 0x03;
   15eca:	2303      	movs	r3, #3
   15ecc:	f88d 3009 	strb.w	r3, [sp, #9]
                newChannelReq.ChannelId = payload[macIndex++];
   15ed0:	5d73      	ldrb	r3, [r6, r5]
                chParam.DrRange.Value = payload[macIndex++];
   15ed2:	1da5      	adds	r5, r4, #6
                newChannelReq.ChannelId = payload[macIndex++];
   15ed4:	f88d 301c 	strb.w	r3, [sp, #28]
                newChannelReq.NewChannel = &chParam;
   15ed8:	ab0a      	add	r3, sp, #40	; 0x28
   15eda:	9306      	str	r3, [sp, #24]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
   15edc:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15ede:	b2db      	uxtb	r3, r3
   15ee0:	5cf2      	ldrb	r2, [r6, r3]
   15ee2:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15ee4:	b2db      	uxtb	r3, r3
   15ee6:	5cf3      	ldrb	r3, [r6, r3]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15ee8:	a906      	add	r1, sp, #24
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15eea:	041b      	lsls	r3, r3, #16
   15eec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                newChannelReq.ChannelId = payload[macIndex++];
   15ef0:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
   15ef2:	b2d2      	uxtb	r2, r2
   15ef4:	5cb2      	ldrb	r2, [r6, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15ef6:	3405      	adds	r4, #5
   15ef8:	4313      	orrs	r3, r2
                chParam.Frequency *= 100;
   15efa:	2264      	movs	r2, #100	; 0x64
   15efc:	4353      	muls	r3, r2
   15efe:	930a      	str	r3, [sp, #40]	; 0x28
                chParam.Rx1Frequency = 0;
   15f00:	2300      	movs	r3, #0
                chParam.DrRange.Value = payload[macIndex++];
   15f02:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
   15f04:	930b      	str	r3, [sp, #44]	; 0x2c
                chParam.DrRange.Value = payload[macIndex++];
   15f06:	5d33      	ldrb	r3, [r6, r4]
   15f08:	b2ed      	uxtb	r5, r5
   15f0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15f0e:	4b12      	ldr	r3, [pc, #72]	; (15f58 <ProcessMacCommands.constprop.0+0x36c>)
   15f10:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   15f14:	f016 ff71 	bl	2cdfa <RegionNewChannelReq>
   15f18:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
   15f1a:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
   15f1c:	f88d 3009 	strb.w	r3, [sp, #9]
                if( ( int8_t )status >= 0 )
   15f20:	f6ff aeeb 	blt.w	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
   15f24:	2201      	movs	r2, #1
   15f26:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
   15f28:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
   15f2c:	a903      	add	r1, sp, #12
   15f2e:	e7b6      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t delay = payload[macIndex++] & 0x0F;
   15f30:	5d73      	ldrb	r3, [r6, r5]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
   15f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15f36:	f003 030f 	and.w	r3, r3, #15
   15f3a:	2b01      	cmp	r3, #1
   15f3c:	bf38      	it	cc
   15f3e:	2301      	movcc	r3, #1
   15f40:	4353      	muls	r3, r2
   15f42:	4a05      	ldr	r2, [pc, #20]	; (15f58 <ProcessMacCommands.constprop.0+0x36c>)
                uint8_t delay = payload[macIndex++] & 0x0F;
   15f44:	3402      	adds	r4, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
   15f46:	6693      	str	r3, [r2, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
   15f48:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   15f4c:	66d3      	str	r3, [r2, #108]	; 0x6c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
   15f4e:	2008      	movs	r0, #8
   15f50:	2200      	movs	r2, #0
                uint8_t delay = payload[macIndex++] & 0x0F;
   15f52:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
   15f54:	a903      	add	r1, sp, #12
   15f56:	e761      	b.n	15e1c <ProcessMacCommands.constprop.0+0x230>
   15f58:	2002fd64 	.word	0x2002fd64
   15f5c:	200301c0 	.word	0x200301c0
                uint8_t eirpDwellTime = payload[macIndex++];
   15f60:	5d73      	ldrb	r3, [r6, r5]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15f62:	4dbb      	ldr	r5, [pc, #748]	; (16250 <ProcessMacCommands.constprop.0+0x664>)
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
   15f64:	f3c3 1240 	ubfx	r2, r3, #5, #1
   15f68:	f88d 2011 	strb.w	r2, [sp, #17]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15f6c:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
   15f70:	f3c3 1200 	ubfx	r2, r3, #4, #1
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15f74:	a904      	add	r1, sp, #16
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
   15f76:	f003 030f 	and.w	r3, r3, #15
   15f7a:	f88d 2010 	strb.w	r2, [sp, #16]
   15f7e:	f88d 3012 	strb.w	r3, [sp, #18]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15f82:	f016 ff41 	bl	2ce08 <RegionTxParamSetupReq>
                uint8_t eirpDwellTime = payload[macIndex++];
   15f86:	3402      	adds	r4, #2
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15f88:	3001      	adds	r0, #1
                uint8_t eirpDwellTime = payload[macIndex++];
   15f8a:	b2e4      	uxtb	r4, r4
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
   15f8c:	f43f af48 	beq.w	15e20 <ProcessMacCommands.constprop.0+0x234>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15f90:	f8bd 3010 	ldrh.w	r3, [sp, #16]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15f94:	4aaf      	ldr	r2, [pc, #700]	; (16254 <ProcessMacCommands.constprop.0+0x668>)
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15f96:	f8a5 308c 	strh.w	r3, [r5, #140]	; 0x8c
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15f9a:	f89d 3012 	ldrb.w	r3, [sp, #18]
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
   15f9e:	f89d a010 	ldrb.w	sl, [sp, #16]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15fa2:	5cd0      	ldrb	r0, [r2, r3]
   15fa4:	f7f2 fdd4 	bl	8b50 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
   15fa8:	2302      	movs	r3, #2
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
   15faa:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15fae:	a90a      	add	r1, sp, #40	; 0x28
   15fb0:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                    getPhy.Attribute = PHY_MIN_TX_DR;
   15fb4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   15fb8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15fbc:	f016 feb7 	bl	2cd2e <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15fc0:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   15fc4:	9006      	str	r0, [sp, #24]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15fc6:	b240      	sxtb	r0, r0
   15fc8:	4298      	cmp	r0, r3
   15fca:	bfb8      	it	lt
   15fcc:	4618      	movlt	r0, r3
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15fce:	2200      	movs	r2, #0
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
   15fd0:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
   15fd4:	a903      	add	r1, sp, #12
   15fd6:	2009      	movs	r0, #9
   15fd8:	e720      	b.n	15e1c <ProcessMacCommands.constprop.0+0x230>
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
   15fda:	4b9d      	ldr	r3, [pc, #628]	; (16250 <ProcessMacCommands.constprop.0+0x664>)
   15fdc:	5d72      	ldrb	r2, [r6, r5]
   15fde:	f893 31b6 	ldrb.w	r3, [r3, #438]	; 0x1b6
   15fe2:	429a      	cmp	r2, r3
   15fe4:	f63f ae73 	bhi.w	15cce <ProcessMacCommands.constprop.0+0xe2>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   15fe8:	200b      	movs	r0, #11
   15fea:	a905      	add	r1, sp, #20
   15fec:	e66a      	b.n	15cc4 <ProcessMacCommands.constprop.0+0xd8>
                status = 0x03;
   15fee:	2303      	movs	r3, #3
   15ff0:	f88d 3009 	strb.w	r3, [sp, #9]
                dlChannelReq.ChannelId = payload[macIndex++];
   15ff4:	5d73      	ldrb	r3, [r6, r5]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   15ff6:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
   15ff8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   15ffc:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
   15ffe:	b2db      	uxtb	r3, r3
   16000:	5cf2      	ldrb	r2, [r6, r3]
   16002:	1d23      	adds	r3, r4, #4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   16004:	b2db      	uxtb	r3, r3
   16006:	5cf3      	ldrb	r3, [r6, r3]
                dlChannelReq.ChannelId = payload[macIndex++];
   16008:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   1600a:	041b      	lsls	r3, r3, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   1600c:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   1600e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
   16012:	5d32      	ldrb	r2, [r6, r4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   16014:	a90a      	add	r1, sp, #40	; 0x28
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   16016:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
   16018:	2264      	movs	r2, #100	; 0x64
   1601a:	4353      	muls	r3, r2
   1601c:	930b      	str	r3, [sp, #44]	; 0x2c
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   1601e:	4b8c      	ldr	r3, [pc, #560]	; (16250 <ProcessMacCommands.constprop.0+0x664>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
   16020:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   16022:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   16026:	f016 fef6 	bl	2ce16 <RegionDlChannelReq>
   1602a:	b2c3      	uxtb	r3, r0
                if( ( int8_t )status >= 0 )
   1602c:	2800      	cmp	r0, #0
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
   1602e:	f88d 3009 	strb.w	r3, [sp, #9]
                if( ( int8_t )status >= 0 )
   16032:	f6ff ae62 	blt.w	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
   16036:	2201      	movs	r2, #1
   16038:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
   1603a:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
   1603e:	a903      	add	r1, sp, #12
   16040:	e72d      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   16042:	2301      	movs	r3, #1
                uint8_t delayExp = 0x0F & payload[macIndex];
   16044:	5d72      	ldrb	r2, [r6, r5]
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   16046:	4884      	ldr	r0, [pc, #528]	; (16258 <ProcessMacCommands.constprop.0+0x66c>)
   16048:	f002 010f 	and.w	r1, r2, #15
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   1604c:	0912      	lsrs	r2, r2, #4
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   1604e:	fa03 f101 	lsl.w	r1, r3, r1
                macIndex++;
   16052:	3402      	adds	r4, #2
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   16054:	4093      	lsls	r3, r2
                MacCtx.AdrAckDelay = 0x01 << delayExp;
   16056:	f8a0 13fe 	strh.w	r1, [r0, #1022]	; 0x3fe
                MacCtx.AdrAckLimit = 0x01 << limitExp;
   1605a:	f8a0 33fc 	strh.w	r3, [r0, #1020]	; 0x3fc
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
   1605e:	2200      	movs	r2, #0
   16060:	200c      	movs	r0, #12
                macIndex++;
   16062:	b2e5      	uxtb	r5, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
   16064:	a903      	add	r1, sp, #12
   16066:	e71a      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
   16068:	f816 b005 	ldrb.w	fp, [r6, r5]
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
   1606c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 16250 <ProcessMacCommands.constprop.0+0x664>
   16070:	f00b 0307 	and.w	r3, fp, #7
   16074:	f88a 31c0 	strb.w	r3, [sl, #448]	; 0x1c0
                macIndex++;
   16078:	1ca3      	adds	r3, r4, #2
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
   1607a:	b2db      	uxtb	r3, r3
   1607c:	5cf2      	ldrb	r2, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   1607e:	2120      	movs	r1, #32
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
   16080:	f3c2 1202 	ubfx	r2, r2, #4, #3
   16084:	f88a 21c1 	strb.w	r2, [sl, #449]	; 0x1c1
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
   16088:	5cf3      	ldrb	r3, [r6, r3]
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   1608a:	2000      	movs	r0, #0
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
   1608c:	f003 030f 	and.w	r3, r3, #15
   16090:	f88a 3049 	strb.w	r3, [sl, #73]	; 0x49
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   16094:	f015 fe5a 	bl	2bd4c <randr>
   16098:	2120      	movs	r1, #32
   1609a:	f3cb 0bc2 	ubfx	fp, fp, #3, #3
    if( rejoinCycleTime > 4294967 )
   1609e:	4b6f      	ldr	r3, [pc, #444]	; (1625c <ProcessMacCommands.constprop.0+0x670>)
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
   160a0:	fa01 f10b 	lsl.w	r1, r1, fp
   160a4:	4401      	add	r1, r0
    if( rejoinCycleTime > 4294967 )
   160a6:	4299      	cmp	r1, r3
        *timeInMiliSec = rejoinCycleTime * 1000;
   160a8:	bf8a      	itet	hi
   160aa:	f44f 737a 	movhi.w	r3, #1000	; 0x3e8
                uint32_t forceRejoinReqCycleTime = 0;
   160ae:	2100      	movls	r1, #0
        *timeInMiliSec = rejoinCycleTime * 1000;
   160b0:	4359      	mulhi	r1, r3
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
   160b2:	486b      	ldr	r0, [pc, #428]	; (16260 <ProcessMacCommands.constprop.0+0x674>)
   160b4:	f015 ff5b 	bl	2bf6e <TimerSetValue>
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   160b8:	f89a 31c1 	ldrb.w	r3, [sl, #449]	; 0x1c1
                macIndex ++;
   160bc:	3403      	adds	r4, #3
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
   160be:	2b01      	cmp	r3, #1
                    SendReJoinReq( REJOIN_REQ_0 );
   160c0:	bf94      	ite	ls
   160c2:	2000      	movls	r0, #0
                    SendReJoinReq( REJOIN_REQ_2 );
   160c4:	2002      	movhi	r0, #2
   160c6:	f7ff fc73 	bl	159b0 <SendReJoinReq>
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
   160ca:	4865      	ldr	r0, [pc, #404]	; (16260 <ProcessMacCommands.constprop.0+0x674>)
                macIndex ++;
   160cc:	b2e5      	uxtb	r5, r4
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
   160ce:	f7fd f911 	bl	132f4 <TimerStart>
                break;
   160d2:	e612      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                macIndex ++;
   160d4:	3402      	adds	r4, #2
                uint8_t maxCountN = 0x0F & payload[macIndex];
   160d6:	5d73      	ldrb	r3, [r6, r5]
                macIndex ++;
   160d8:	b2e5      	uxtb	r5, r4
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   160da:	2401      	movs	r4, #1
                uint8_t maxTimeN = 0x0F & ( payload[macIndex] >> 4 );
   160dc:	091a      	lsrs	r2, r3, #4
                uint8_t maxCountN = 0x0F & payload[macIndex];
   160de:	f003 030f 	and.w	r3, r3, #15
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   160e2:	485b      	ldr	r0, [pc, #364]	; (16250 <ProcessMacCommands.constprop.0+0x664>)
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
   160e4:	3304      	adds	r3, #4
   160e6:	fa04 f303 	lsl.w	r3, r4, r3
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   160ea:	320a      	adds	r2, #10
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
   160ec:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
    if( rejoinCycleTime > 4294967 )
   160f0:	4b5a      	ldr	r3, [pc, #360]	; (1625c <ProcessMacCommands.constprop.0+0x670>)
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   160f2:	fa04 f102 	lsl.w	r1, r4, r2
    if( rejoinCycleTime > 4294967 )
   160f6:	4299      	cmp	r1, r3
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
   160f8:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   160fc:	dd1a      	ble.n	16134 <ProcessMacCommands.constprop.0+0x548>
        *timeInMiliSec = rejoinCycleTime * 1000;
   160fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16102:	f8df a154 	ldr.w	sl, [pc, #340]	; 16258 <ProcessMacCommands.constprop.0+0x66c>
   16106:	4093      	lsls	r3, r2
   16108:	f8ca 34f0 	str.w	r3, [sl, #1264]	; 0x4f0
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
   1610c:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   16110:	f7fd f966 	bl	133e0 <TimerStop>
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   16114:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   16118:	f8da 14f0 	ldr.w	r1, [sl, #1264]	; 0x4f0
   1611c:	f015 ff27 	bl	2bf6e <TimerSetValue>
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
   16120:	f50a 6092 	add.w	r0, sl, #1168	; 0x490
   16124:	f7fd f8e6 	bl	132f4 <TimerStart>
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
   16128:	2201      	movs	r2, #1
   1612a:	200f      	movs	r0, #15
                macCmdPayload[0] = timeOK;
   1612c:	f88d 400c 	strb.w	r4, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
   16130:	a903      	add	r1, sp, #12
   16132:	e6b4      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
                uint8_t timeOK = 0;
   16134:	2400      	movs	r4, #0
   16136:	e7f7      	b.n	16128 <ProcessMacCommands.constprop.0+0x53c>
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
   16138:	2020      	movs	r0, #32
   1613a:	a905      	add	r1, sp, #20
   1613c:	e5c2      	b.n	15cc4 <ProcessMacCommands.constprop.0+0xd8>
                    LoRaMacCommandsRemoveCmd( macCmd );
   1613e:	9805      	ldr	r0, [sp, #20]
   16140:	f001 fe3a 	bl	17db8 <LoRaMacCommandsRemoveCmd>
   16144:	e5c3      	b.n	15cce <ProcessMacCommands.constprop.0+0xe2>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
   16146:	2008      	movs	r0, #8
   16148:	f001 ff80 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   1614c:	f8df b108 	ldr.w	fp, [pc, #264]	; 16258 <ProcessMacCommands.constprop.0+0x66c>
   16150:	2800      	cmp	r0, #0
   16152:	d049      	beq.n	161e8 <ProcessMacCommands.constprop.0+0x5fc>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
   16154:	2108      	movs	r1, #8
   16156:	2000      	movs	r0, #0
   16158:	f001 ff3c 	bl	17fd4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
   1615c:	2300      	movs	r3, #0
   1615e:	f8ad 301e 	strh.w	r3, [sp, #30]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
   16162:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
   16164:	b2db      	uxtb	r3, r3
   16166:	5cf2      	ldrb	r2, [r6, r3]
   16168:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   1616a:	b2db      	uxtb	r3, r3
   1616c:	f816 a003 	ldrb.w	sl, [r6, r3]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
   16170:	5d73      	ldrb	r3, [r6, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   16172:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
   16176:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   1617a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
   1617e:	ea4a 0a03 	orr.w	sl, sl, r3
   16182:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   16184:	b2db      	uxtb	r3, r3
   16186:	5cf3      	ldrb	r3, [r6, r3]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   16188:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   1618a:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   1618c:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
   1618e:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   16192:	5d33      	ldrb	r3, [r6, r4]
                    sysTimeCurrent = SysTimeGet( );
   16194:	ac0a      	add	r4, sp, #40	; 0x28
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   16196:	4353      	muls	r3, r2
                    sysTimeCurrent = SysTimeGet( );
   16198:	4620      	mov	r0, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
   1619a:	121b      	asrs	r3, r3, #8
   1619c:	f8ad 301c 	strh.w	r3, [sp, #28]
                    sysTimeCurrent = SysTimeGet( );
   161a0:	f015 fe53 	bl	2be4a <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
   161a4:	4b2f      	ldr	r3, [pc, #188]	; (16264 <ProcessMacCommands.constprop.0+0x678>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
   161a6:	a808      	add	r0, sp, #32
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
   161a8:	4453      	add	r3, sl
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
   161aa:	9306      	str	r3, [sp, #24]
   161ac:	f8db 333c 	ldr.w	r3, [fp, #828]	; 0x33c
   161b0:	f10d 0a18 	add.w	sl, sp, #24
   161b4:	9300      	str	r3, [sp, #0]
   161b6:	f8db 3338 	ldr.w	r3, [fp, #824]	; 0x338
   161ba:	e89a 0006 	ldmia.w	sl, {r1, r2}
   161be:	f015 fe08 	bl	2bdd2 <SysTimeSub>
   161c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   161c4:	4650      	mov	r0, sl
   161c6:	9300      	str	r3, [sp, #0]
   161c8:	e894 0006 	ldmia.w	r4, {r1, r2}
   161cc:	9b08      	ldr	r3, [sp, #32]
   161ce:	f015 fde5 	bl	2bd9c <SysTimeAdd>
                    SysTimeSet( sysTime );
   161d2:	e89a 0003 	ldmia.w	sl, {r0, r1}
   161d6:	f015 fe17 	bl	2be08 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
   161da:	f016 faa2 	bl	2c722 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
   161de:	2301      	movs	r3, #1
                    gpsEpochTime.SubSeconds = payload[macIndex++];
   161e0:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
   161e2:	f88b 343c 	strb.w	r3, [fp, #1084]	; 0x43c
   161e6:	e588      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
   161e8:	f88b 043c 	strb.w	r0, [fp, #1084]	; 0x43c
   161ec:	e585      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
   161ee:	200b      	movs	r0, #11
   161f0:	f001 ff2c 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   161f4:	2800      	cmp	r0, #0
   161f6:	f43f ad80 	beq.w	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
   161fa:	210b      	movs	r1, #11
   161fc:	2000      	movs	r0, #0
   161fe:	f001 fee9 	bl	17fd4 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
   16202:	4b15      	ldr	r3, [pc, #84]	; (16258 <ProcessMacCommands.constprop.0+0x66c>)
   16204:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
   16208:	3b04      	subs	r3, #4
   1620a:	2b01      	cmp	r3, #1
   1620c:	f67f ad75 	bls.w	15cfa <ProcessMacCommands.constprop.0+0x10e>
                        LoRaMacClassBPingSlotInfoAns( );
   16210:	f016 fa83 	bl	2c71a <LoRaMacClassBPingSlotInfoAns>
   16214:	e571      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                frequency = ( uint32_t )payload[macIndex++];
   16216:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
   16218:	b2db      	uxtb	r3, r3
   1621a:	5cf1      	ldrb	r1, [r6, r3]
   1621c:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   1621e:	b2db      	uxtb	r3, r3
   16220:	5cf3      	ldrb	r3, [r6, r3]
                frequency = ( uint32_t )payload[macIndex++];
   16222:	5d72      	ldrb	r2, [r6, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   16224:	041b      	lsls	r3, r3, #16
   16226:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
   1622a:	2164      	movs	r1, #100	; 0x64
                datarate = payload[macIndex++] & 0x0F;
   1622c:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   1622e:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
   16230:	b2e4      	uxtb	r4, r4
   16232:	5d30      	ldrb	r0, [r6, r4]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
   16234:	4313      	orrs	r3, r2
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
   16236:	4359      	muls	r1, r3
   16238:	f000 000f 	and.w	r0, r0, #15
   1623c:	f016 fa6e 	bl	2c71c <LoRaMacClassBPingSlotChannelReq>
                datarate = payload[macIndex++] & 0x0F;
   16240:	b2ed      	uxtb	r5, r5
                macCmdPayload[0] = status;
   16242:	f88d 000c 	strb.w	r0, [sp, #12]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
   16246:	2201      	movs	r2, #1
   16248:	2011      	movs	r0, #17
   1624a:	a903      	add	r1, sp, #12
   1624c:	e627      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
   1624e:	bf00      	nop
   16250:	2002fd64 	.word	0x2002fd64
   16254:	0003693b 	.word	0x0003693b
   16258:	200301c0 	.word	0x200301c0
   1625c:	00418937 	.word	0x00418937
   16260:	20030698 	.word	0x20030698
   16264:	12d53d80 	.word	0x12d53d80
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
   16268:	200c      	movs	r0, #12
   1626a:	f001 feef 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   1626e:	2800      	cmp	r0, #0
   16270:	f43f ad43 	beq.w	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
   16274:	210c      	movs	r1, #12
   16276:	2000      	movs	r0, #0
   16278:	f001 feac 	bl	17fd4 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
   1627c:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   1627e:	b2db      	uxtb	r3, r3
   16280:	5cf0      	ldrb	r0, [r6, r3]
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   16282:	4a12      	ldr	r2, [pc, #72]	; (162cc <ProcessMacCommands.constprop.0+0x6e0>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   16284:	5d73      	ldrb	r3, [r6, r5]
                    beaconTimingChannel = payload[macIndex++];
   16286:	1d25      	adds	r5, r4, #4
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
   16288:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
   1628a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   1628c:	6812      	ldr	r2, [r2, #0]
   1628e:	5d31      	ldrb	r1, [r6, r4]
   16290:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
                    beaconTimingChannel = payload[macIndex++];
   16294:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
   16296:	f016 fa43 	bl	2c720 <LoRaMacClassBBeaconTimingAns>
   1629a:	e52e      	b.n	15cfa <ProcessMacCommands.constprop.0+0x10e>
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
   1629c:	2064      	movs	r0, #100	; 0x64
                    frequency = ( uint32_t )payload[macIndex++];
   1629e:	5d72      	ldrb	r2, [r6, r5]
   162a0:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   162a2:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
   162a4:	3403      	adds	r4, #3
   162a6:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   162a8:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
   162aa:	5cf1      	ldrb	r1, [r6, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
   162ac:	5d33      	ldrb	r3, [r6, r4]
   162ae:	b2ed      	uxtb	r5, r5
   162b0:	041b      	lsls	r3, r3, #16
   162b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   162b6:	4313      	orrs	r3, r2
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
   162b8:	4358      	muls	r0, r3
   162ba:	f016 fa33 	bl	2c724 <LoRaMacClassBBeaconFreqReq>
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
   162be:	2201      	movs	r2, #1
   162c0:	f88d 000c 	strb.w	r0, [sp, #12]
   162c4:	a903      	add	r1, sp, #12
   162c6:	2013      	movs	r0, #19
   162c8:	e5e9      	b.n	15e9e <ProcessMacCommands.constprop.0+0x2b2>
   162ca:	bf00      	nop
   162cc:	2002fcbc 	.word	0x2002fcbc

000162d0 <SetTxContinuousWave>:
{
   162d0:	b510      	push	{r4, lr}
   162d2:	4604      	mov	r4, r0
   162d4:	4608      	mov	r0, r1
   162d6:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
   162d8:	4b06      	ldr	r3, [pc, #24]	; (162f4 <SetTxContinuousWave+0x24>)
   162da:	4622      	mov	r2, r4
   162dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   162de:	b249      	sxtb	r1, r1
   162e0:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   162e2:	4a05      	ldr	r2, [pc, #20]	; (162f8 <SetTxContinuousWave+0x28>)
}
   162e4:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
   162e6:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
   162ea:	f043 0302 	orr.w	r3, r3, #2
   162ee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
   162f2:	bd10      	pop	{r4, pc}
   162f4:	00033c2c 	.word	0x00033c2c
   162f8:	200301c0 	.word	0x200301c0

000162fc <LoRaMacProcess>:
{
   162fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16300:	b0ab      	sub	sp, #172	; 0xac
    CRITICAL_SECTION_BEGIN( );
   16302:	a80a      	add	r0, sp, #40	; 0x28
   16304:	f015 fcdb 	bl	2bcbe <BoardCriticalSectionBegin>
    LoRaMacRadioEvents.Value = 0;
   16308:	2300      	movs	r3, #0
    events = LoRaMacRadioEvents;
   1630a:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 165e4 <LoRaMacProcess+0x2e8>
    CRITICAL_SECTION_END( );
   1630e:	a80a      	add	r0, sp, #40	; 0x28
    events = LoRaMacRadioEvents;
   16310:	f8db 5000 	ldr.w	r5, [fp]
    LoRaMacRadioEvents.Value = 0;
   16314:	4cb4      	ldr	r4, [pc, #720]	; (165e8 <LoRaMacProcess+0x2ec>)
   16316:	f8cb 3000 	str.w	r3, [fp]
    CRITICAL_SECTION_END( );
   1631a:	f015 fcda 	bl	2bcd2 <BoardCriticalSectionEnd>
    if( events.Value != 0 )
   1631e:	2d00      	cmp	r5, #0
   16320:	f000 80d8 	beq.w	164d4 <LoRaMacProcess+0x1d8>
        if( events.Events.TxDone == 1 )
   16324:	b2eb      	uxtb	r3, r5
   16326:	06a9      	lsls	r1, r5, #26
   16328:	9303      	str	r3, [sp, #12]
   1632a:	d559      	bpl.n	163e0 <LoRaMacProcess+0xe4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   1632c:	4daf      	ldr	r5, [pc, #700]	; (165ec <LoRaMacProcess+0x2f0>)
   1632e:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   16332:	2b02      	cmp	r3, #2
   16334:	d002      	beq.n	1633c <LoRaMacProcess+0x40>
        Radio.Sleep( );
   16336:	4bae      	ldr	r3, [pc, #696]	; (165f0 <LoRaMacProcess+0x2f4>)
   16338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1633a:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
   1633c:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
   16340:	48ac      	ldr	r0, [pc, #688]	; (165f4 <LoRaMacProcess+0x2f8>)
   16342:	f015 fe14 	bl	2bf6e <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
   16346:	48ab      	ldr	r0, [pc, #684]	; (165f4 <LoRaMacProcess+0x2f8>)
   16348:	f7fc ffd4 	bl	132f4 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
   1634c:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
   16350:	48a9      	ldr	r0, [pc, #676]	; (165f8 <LoRaMacProcess+0x2fc>)
   16352:	f015 fe0c 	bl	2bf6e <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
   16356:	48a8      	ldr	r0, [pc, #672]	; (165f8 <LoRaMacProcess+0x2fc>)
   16358:	f7fc ffcc 	bl	132f4 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
   1635c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   16360:	2b00      	cmp	r3, #0
   16362:	f000 8106 	beq.w	16572 <LoRaMacProcess+0x276>
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
   16366:	2314      	movs	r3, #20
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16368:	a914      	add	r1, sp, #80	; 0x50
   1636a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
   1636e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16372:	f016 fcdc 	bl	2cd2e <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
   16376:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1637a:	9011      	str	r0, [sp, #68]	; 0x44
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
   1637c:	4401      	add	r1, r0
   1637e:	489f      	ldr	r0, [pc, #636]	; (165fc <LoRaMacProcess+0x300>)
   16380:	f015 fdf5 	bl	2bf6e <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
   16384:	489d      	ldr	r0, [pc, #628]	; (165fc <LoRaMacProcess+0x300>)
   16386:	f7fc ffb5 	bl	132f4 <TimerStart>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   1638a:	4b9d      	ldr	r3, [pc, #628]	; (16600 <LoRaMacProcess+0x304>)
    txDone.Channel = MacCtx.Channel;
   1638c:	f894 241b 	ldrb.w	r2, [r4, #1051]	; 0x41b
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   16390:	681b      	ldr	r3, [r3, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   16392:	af0f      	add	r7, sp, #60	; 0x3c
   16394:	4638      	mov	r0, r7
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
   16396:	63eb      	str	r3, [r5, #60]	; 0x3c
    txDone.Channel = MacCtx.Channel;
   16398:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
   1639c:	931f      	str	r3, [sp, #124]	; 0x7c
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
   1639e:	f015 fd77 	bl	2be90 <SysTimeGetMcuTime>
   163a2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   163a6:	ae06      	add	r6, sp, #24
   163a8:	9300      	str	r3, [sp, #0]
   163aa:	4630      	mov	r0, r6
   163ac:	e897 0006 	ldmia.w	r7, {r1, r2}
   163b0:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
   163b4:	f015 fd0d 	bl	2bdd2 <SysTimeSub>
   163b8:	e896 0003 	ldmia.w	r6, {r0, r1}
   163bc:	ab21      	add	r3, sp, #132	; 0x84
   163be:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
   163c2:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   163c6:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
   163ca:	9320      	str	r3, [sp, #128]	; 0x80
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   163cc:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   163d0:	a91e      	add	r1, sp, #120	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
   163d2:	3b00      	subs	r3, #0
   163d4:	bf18      	it	ne
   163d6:	2301      	movne	r3, #1
   163d8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
   163dc:	f016 fcb1 	bl	2cd42 <RegionSetBandTxDone>
        if( events.Events.RxDone == 1 )
   163e0:	9b03      	ldr	r3, [sp, #12]
   163e2:	06da      	lsls	r2, r3, #27
   163e4:	d54a      	bpl.n	1647c <LoRaMacProcess+0x180>
    uint32_t downLinkCounter = 0;
   163e6:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
   163e8:	4d80      	ldr	r5, [pc, #512]	; (165ec <LoRaMacProcess+0x2f0>)
    uint8_t *payload = RxDoneParams.Payload;
   163ea:	f8df 9218 	ldr.w	r9, [pc, #536]	; 16604 <LoRaMacProcess+0x308>
    uint32_t address = Nvm.MacGroup2.DevAddr;
   163ee:	f8d5 20dc 	ldr.w	r2, [r5, #220]	; 0xdc
    int16_t rssi = RxDoneParams.Rssi;
   163f2:	f9b9 a00a 	ldrsh.w	sl, [r9, #10]
    uint32_t address = Nvm.MacGroup2.DevAddr;
   163f6:	9205      	str	r2, [sp, #20]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   163f8:	f89b 2000 	ldrb.w	r2, [fp]
    int8_t snr = RxDoneParams.Snr;
   163fc:	f999 700c 	ldrsb.w	r7, [r9, #12]
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   16400:	f363 0200 	bfi	r2, r3, #0, #1
    uint32_t downLinkCounter = 0;
   16404:	930c      	str	r3, [sp, #48]	; 0x30
    uint8_t macCmdPayload[2] = { 0 };
   16406:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
   1640a:	f88b 2000 	strb.w	r2, [fp]
    MacCtx.McpsConfirm.AckReceived = false;
   1640e:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
   16412:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
    MacCtx.McpsIndication.Multicast = 0;
   16416:	f8a4 3422 	strh.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
   1641a:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
   1641e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
   16422:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.AckReceived = false;
   16426:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
   1642a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
   1642e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
   16432:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
   16436:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
   1643a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
   1643e:	4b6c      	ldr	r3, [pc, #432]	; (165f0 <LoRaMacProcess+0x2f4>)
    MacCtx.McpsIndication.Rssi = rssi;
   16440:	f8a4 a42e 	strh.w	sl, [r4, #1070]	; 0x42e
    Radio.Sleep( );
   16444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    MacCtx.McpsIndication.Snr = snr;
   16446:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
   1644a:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    uint8_t *payload = RxDoneParams.Payload;
   1644e:	f8d9 8004 	ldr.w	r8, [r9, #4]
    uint16_t size = RxDoneParams.Size;
   16452:	f8b9 6008 	ldrh.w	r6, [r9, #8]
    Radio.Sleep( );
   16456:	4798      	blx	r3
    if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
   16458:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1645c:	b913      	cbnz	r3, 16464 <LoRaMacProcess+0x168>
        TimerStop( &MacCtx.RxWindowTimer2 );
   1645e:	4866      	ldr	r0, [pc, #408]	; (165f8 <LoRaMacProcess+0x2fc>)
   16460:	f7fc ffbe 	bl	133e0 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
   16464:	4631      	mov	r1, r6
   16466:	4640      	mov	r0, r8
   16468:	f016 f944 	bl	2c6f4 <LoRaMacClassBRxBeacon>
   1646c:	4683      	mov	fp, r0
   1646e:	2800      	cmp	r0, #0
   16470:	f000 8082 	beq.w	16578 <LoRaMacProcess+0x27c>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
   16474:	f8a4 a47e 	strh.w	sl, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
   16478:	f884 7480 	strb.w	r7, [r4, #1152]	; 0x480
        if( events.Events.TxTimeout == 1 )
   1647c:	9b03      	ldr	r3, [sp, #12]
   1647e:	0719      	lsls	r1, r3, #28
   16480:	d51a      	bpl.n	164b8 <LoRaMacProcess+0x1bc>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
   16482:	4b5a      	ldr	r3, [pc, #360]	; (165ec <LoRaMacProcess+0x2f0>)
   16484:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   16488:	2b02      	cmp	r3, #2
   1648a:	d002      	beq.n	16492 <LoRaMacProcess+0x196>
        Radio.Sleep( );
   1648c:	4b58      	ldr	r3, [pc, #352]	; (165f0 <LoRaMacProcess+0x2f4>)
   1648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16490:	4798      	blx	r3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
   16492:	2002      	movs	r0, #2
    UpdateRxSlotIdleState( );
   16494:	f7fe fc92 	bl	14dbc <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
   16498:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
   1649c:	f001 fdbc 	bl	18018 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
   164a0:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   164a4:	b113      	cbz	r3, 164ac <LoRaMacProcess+0x1b0>
        MacCtx.RetransmitTimeoutRetry = true;
   164a6:	2301      	movs	r3, #1
   164a8:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
   164ac:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   164b0:	f043 0310 	orr.w	r3, r3, #16
   164b4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( events.Events.RxError == 1 )
   164b8:	9b03      	ldr	r3, [sp, #12]
   164ba:	075a      	lsls	r2, r3, #29
   164bc:	d503      	bpl.n	164c6 <LoRaMacProcess+0x1ca>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
   164be:	2106      	movs	r1, #6
   164c0:	2005      	movs	r0, #5
   164c2:	f7fe fcd3 	bl	14e6c <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
   164c6:	9b03      	ldr	r3, [sp, #12]
   164c8:	079b      	lsls	r3, r3, #30
   164ca:	d503      	bpl.n	164d4 <LoRaMacProcess+0x1d8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
   164cc:	2104      	movs	r1, #4
   164ce:	2003      	movs	r0, #3
   164d0:	f7fe fccc 	bl	14e6c <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
   164d4:	f016 f92c 	bl	2c730 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
   164d8:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
   164dc:	06d7      	lsls	r7, r2, #27
   164de:	f140 8389 	bpl.w	16bf4 <LoRaMacProcess+0x8f8>
    MacCtx.AllowRequests = requestState;
   164e2:	2300      	movs	r3, #0
   164e4:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
   164e8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   164ec:	061e      	lsls	r6, r3, #24
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   164ee:	bf44      	itt	mi
   164f0:	f023 0382 	bicmi.w	r3, r3, #130	; 0x82
   164f4:	f8c4 3340 	strmi.w	r3, [r4, #832]	; 0x340
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
   164f8:	f012 0f05 	tst.w	r2, #5
   164fc:	f000 82f3 	beq.w	16ae6 <LoRaMacProcess+0x7ea>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
   16500:	200a      	movs	r0, #10
   16502:	f001 fda3 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   16506:	2800      	cmp	r0, #0
   16508:	f000 82ed 	beq.w	16ae6 <LoRaMacProcess+0x7ea>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
   1650c:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
   16510:	07dd      	lsls	r5, r3, #31
   16512:	f100 82e8 	bmi.w	16ae6 <LoRaMacProcess+0x7ea>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16516:	0758      	lsls	r0, r3, #29
   16518:	f140 82ff 	bpl.w	16b1a <LoRaMacProcess+0x81e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   1651c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16520:	f023 0302 	bic.w	r3, r3, #2
   16524:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.MacState == LORAMAC_IDLE )
   16528:	f8d4 1340 	ldr.w	r1, [r4, #832]	; 0x340
   1652c:	2900      	cmp	r1, #0
   1652e:	f040 8358 	bne.w	16be2 <LoRaMacProcess+0x8e6>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   16532:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16536:	f013 0001 	ands.w	r0, r3, #1
        if( reqEvents.Bits.MlmeReq == 1 )
   1653a:	f003 0504 	and.w	r5, r3, #4
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   1653e:	f000 8342 	beq.w	16bc6 <LoRaMacProcess+0x8ca>
            MacCtx.MacFlags.Bits.McpsReq = 0;
   16542:	f361 0300 	bfi	r3, r1, #0, #1
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16546:	075e      	lsls	r6, r3, #29
            MacCtx.MacFlags.Bits.McpsReq = 0;
   16548:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   1654c:	b2da      	uxtb	r2, r3
   1654e:	d504      	bpl.n	1655a <LoRaMacProcess+0x25e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   16550:	4613      	mov	r3, r2
   16552:	f361 0382 	bfi	r3, r1, #2, #1
   16556:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   1655a:	2301      	movs	r3, #1
   1655c:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
   16560:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16564:	4828      	ldr	r0, [pc, #160]	; (16608 <LoRaMacProcess+0x30c>)
   16566:	681b      	ldr	r3, [r3, #0]
   16568:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
   1656a:	2d00      	cmp	r5, #0
   1656c:	f000 8331 	beq.w	16bd2 <LoRaMacProcess+0x8d6>
   16570:	e3d8      	b.n	16d24 <LoRaMacProcess+0xa28>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16572:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
   16576:	e708      	b.n	1638a <LoRaMacProcess+0x8e>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   16578:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1657c:	2b01      	cmp	r3, #1
   1657e:	d10c      	bne.n	1659a <LoRaMacProcess+0x29e>
        if( LoRaMacClassBIsPingExpected( ) == true )
   16580:	f016 f8bc 	bl	2c6fc <LoRaMacClassBIsPingExpected>
   16584:	4682      	mov	sl, r0
   16586:	b188      	cbz	r0, 165ac <LoRaMacProcess+0x2b0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   16588:	4658      	mov	r0, fp
   1658a:	f016 f8ac 	bl	2c6e6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
   1658e:	4658      	mov	r0, fp
   16590:	f016 f8ae 	bl	2c6f0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
   16594:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   16596:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    macHdr.Value = payload[pktHeaderLen++];
   1659a:	f898 b000 	ldrb.w	fp, [r8]
    if( macHdr.Bits.Major != 0 )
   1659e:	f01b 0f03 	tst.w	fp, #3
   165a2:	d00f      	beq.n	165c4 <LoRaMacProcess+0x2c8>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   165a4:	2301      	movs	r3, #1
   165a6:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
   165aa:	e187      	b.n	168bc <LoRaMacProcess+0x5c0>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
   165ac:	f016 f8a8 	bl	2c700 <LoRaMacClassBIsMulticastExpected>
   165b0:	2800      	cmp	r0, #0
   165b2:	d0f2      	beq.n	1659a <LoRaMacProcess+0x29e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   165b4:	4650      	mov	r0, sl
   165b6:	f016 f897 	bl	2c6e8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
   165ba:	4650      	mov	r0, sl
   165bc:	f016 f899 	bl	2c6f2 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   165c0:	2305      	movs	r3, #5
   165c2:	e7e8      	b.n	16596 <LoRaMacProcess+0x29a>
    switch( macHdr.Bits.MType )
   165c4:	ea4f 135b 	mov.w	r3, fp, lsr #5
   165c8:	3b01      	subs	r3, #1
   165ca:	2b06      	cmp	r3, #6
   165cc:	f200 8277 	bhi.w	16abe <LoRaMacProcess+0x7c2>
   165d0:	e8df f013 	tbh	[pc, r3, lsl #1]
   165d4:	0275001c 	.word	0x0275001c
   165d8:	027500c9 	.word	0x027500c9
   165dc:	027500c6 	.word	0x027500c6
   165e0:	0265      	.short	0x0265
   165e2:	bf00      	nop
   165e4:	2002fcd0 	.word	0x2002fcd0
   165e8:	200301c0 	.word	0x200301c0
   165ec:	2002fd64 	.word	0x2002fd64
   165f0:	00033c2c 	.word	0x00033c2c
   165f4:	20030548 	.word	0x20030548
   165f8:	20030560 	.word	0x20030560
   165fc:	200305c0 	.word	0x200305c0
   16600:	2002fccc 	.word	0x2002fccc
   16604:	2002fcbc 	.word	0x2002fcbc
   16608:	20030604 	.word	0x20030604
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
   1660c:	2e10      	cmp	r6, #16
   1660e:	d9c9      	bls.n	165a4 <LoRaMacProcess+0x2a8>
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
   16610:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
            macMsgJoinAccept.BufSize = size;
   16614:	b2f6      	uxtb	r6, r6
            macMsgJoinAccept.Buffer = payload;
   16616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
            macMsgJoinAccept.BufSize = size;
   1661a:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
   1661e:	b11b      	cbz	r3, 16628 <LoRaMacProcess+0x32c>
   16620:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16624:	2b00      	cmp	r3, #0
   16626:	d0bd      	beq.n	165a4 <LoRaMacProcess+0x2a8>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
   16628:	f7fe fb76 	bl	14d18 <SecureElementGetJoinEui>
   1662c:	aa14      	add	r2, sp, #80	; 0x50
   1662e:	4601      	mov	r1, r0
   16630:	20ff      	movs	r0, #255	; 0xff
   16632:	f002 f8d3 	bl	187dc <LoRaMacCryptoHandleJoinAccept>
   16636:	4607      	mov	r7, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   16638:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   1663c:	2207      	movs	r2, #7
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   1663e:	f3c3 0303 	ubfx	r3, r3, #0, #4
   16642:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16646:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   1664a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   1664e:	a91e      	add	r1, sp, #120	; 0x78
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16650:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
   16654:	f016 fb81 	bl	2cd5a <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
   16658:	2f00      	cmp	r7, #0
   1665a:	d177      	bne.n	1674c <LoRaMacProcess+0x450>
   1665c:	2800      	cmp	r0, #0
   1665e:	d075      	beq.n	1674c <LoRaMacProcess+0x450>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16660:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
   16664:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16668:	041b      	lsls	r3, r3, #16
   1666a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
   1666e:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
   16672:	f99d 1060 	ldrsb.w	r1, [sp, #96]	; 0x60
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
   16676:	4313      	orrs	r3, r2
   16678:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
   1667c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
   1667e:	f04f 0801 	mov.w	r8, #1
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
   16682:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   16686:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   1668a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   1668e:	f3c3 1202 	ubfx	r2, r3, #4, #3
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   16692:	f3c3 0303 	ubfx	r3, r3, #0, #4
   16696:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
   1669a:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
   1669e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
   166a2:	f885 2079 	strb.w	r2, [r5, #121]	; 0x79
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
   166a6:	2b01      	cmp	r3, #1
   166a8:	bf38      	it	cc
   166aa:	2301      	movcc	r3, #1
   166ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   166b0:	4353      	muls	r3, r2
   166b2:	66ab      	str	r3, [r5, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
   166b4:	4413      	add	r3, r2
   166b6:	66eb      	str	r3, [r5, #108]	; 0x6c
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
   166b8:	4aa9      	ldr	r2, [pc, #676]	; (16960 <LoRaMacProcess+0x664>)
   166ba:	4baa      	ldr	r3, [pc, #680]	; (16964 <LoRaMacProcess+0x668>)
                applyCFList.Size = size - 17;
   166bc:	3e11      	subs	r6, #17
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
   166be:	ea13 0321 	ands.w	r3, r3, r1, asr #32
   166c2:	bf38      	it	cc
   166c4:	4613      	movcc	r3, r2
   166c6:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
                applyCFList.Payload = macMsgJoinAccept.CFList;
   166ca:	f10d 0362 	add.w	r3, sp, #98	; 0x62
   166ce:	9312      	str	r3, [sp, #72]	; 0x48
                applyCFList.JoinChannel = MacCtx.Channel;
   166d0:	f894 341b 	ldrb.w	r3, [r4, #1051]	; 0x41b
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   166d4:	a911      	add	r1, sp, #68	; 0x44
                applyCFList.JoinChannel = MacCtx.Channel;
   166d6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
   166da:	f885 8078 	strb.w	r8, [r5, #120]	; 0x78
                applyCFList.Size = size - 17;
   166de:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
   166e2:	f016 fb43 	bl	2cd6c <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
   166e6:	2302      	movs	r3, #2
   166e8:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
   166ec:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   166f0:	b143      	cbz	r3, 16704 <LoRaMacProcess+0x408>
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
   166f2:	4642      	mov	r2, r8
   166f4:	200b      	movs	r0, #11
   166f6:	a909      	add	r1, sp, #36	; 0x24
                    Nvm.MacGroup1.RekeyIndUplinksCounter = 0;
   166f8:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
                    macCmdPayload[0] = Nvm.MacGroup2.Version.Fields.Minor;
   166fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
   16700:	f001 fb1e 	bl	17d40 <LoRaMacCommandsAddCmd>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   16704:	2001      	movs	r0, #1
   16706:	f001 fca1 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   1670a:	b118      	cbz	r0, 16714 <LoRaMacProcess+0x418>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
   1670c:	2101      	movs	r1, #1
   1670e:	2000      	movs	r0, #0
   16710:	f001 fc60 	bl	17fd4 <LoRaMacConfirmQueueSetStatus>
                if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
   16714:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16718:	b12b      	cbz	r3, 16726 <LoRaMacProcess+0x42a>
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
   1671a:	2300      	movs	r3, #0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   1671c:	4892      	ldr	r0, [pc, #584]	; (16968 <LoRaMacProcess+0x66c>)
                    Nvm.MacGroup2.IsRejoinAcceptPending = false;
   1671e:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16722:	f7fc fe5d 	bl	133e0 <TimerStop>
    if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16726:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   1672a:	2b01      	cmp	r3, #1
   1672c:	f200 81d5 	bhi.w	16ada <LoRaMacProcess+0x7de>
        if( MacCtx.NodeAckRequested == true )
   16730:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
   16734:	2b00      	cmp	r3, #0
   16736:	f040 81c8 	bne.w	16aca <LoRaMacProcess+0x7ce>
        MacCtx.MacFlags.Bits.MacDone = 1;
   1673a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   1673e:	f043 0310 	orr.w	r3, r3, #16
   16742:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
   16746:	f7fe fb39 	bl	14dbc <UpdateRxSlotIdleState>
   1674a:	e697      	b.n	1647c <LoRaMacProcess+0x180>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   1674c:	2001      	movs	r0, #1
   1674e:	f001 fc7d 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   16752:	2800      	cmp	r0, #0
   16754:	d0e7      	beq.n	16726 <LoRaMacProcess+0x42a>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
   16756:	2101      	movs	r1, #1
   16758:	2007      	movs	r0, #7
   1675a:	f001 fc3b 	bl	17fd4 <LoRaMacConfirmQueueSetStatus>
   1675e:	e7e2      	b.n	16726 <LoRaMacProcess+0x42a>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
   16760:	2301      	movs	r3, #1
   16762:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   16766:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1676a:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1676e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
   16772:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16776:	a90d      	add	r1, sp, #52	; 0x34
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
   16778:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            getPhy.Attribute = PHY_MAX_PAYLOAD;
   1677c:	230d      	movs	r3, #13
   1677e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16782:	f016 fad4 	bl	2cd2e <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
   16786:	f1a6 030d 	sub.w	r3, r6, #13
   1678a:	b21b      	sxth	r3, r3
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1678c:	900b      	str	r0, [sp, #44]	; 0x2c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
   1678e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   16792:	b200      	sxth	r0, r0
   16794:	4283      	cmp	r3, r0
   16796:	f73f af05 	bgt.w	165a4 <LoRaMacProcess+0x2a8>
   1679a:	2e0b      	cmp	r6, #11
   1679c:	f67f af02 	bls.w	165a4 <LoRaMacProcess+0x2a8>
            macMsgData.FRMPayload = MacCtx.RxPayload;
   167a0:	4b72      	ldr	r3, [pc, #456]	; (1696c <LoRaMacProcess+0x670>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
   167a2:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.FRMPayload = MacCtx.RxPayload;
   167a4:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
   167a6:	23ff      	movs	r3, #255	; 0xff
            macMsgData.Buffer = payload;
   167a8:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
   167ac:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
   167b0:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
   167b4:	f016 f93d 	bl	2ca32 <LoRaMacParserData>
   167b8:	4680      	mov	r8, r0
   167ba:	2800      	cmp	r0, #0
   167bc:	f47f aef2 	bne.w	165a4 <LoRaMacProcess+0x2a8>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
   167c0:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   167c4:	2b01      	cmp	r3, #1
   167c6:	d114      	bne.n	167f2 <LoRaMacProcess+0x4f6>
                if( LoRaMacClassBIsPingExpected( ) == true )
   167c8:	f015 ff98 	bl	2c6fc <LoRaMacClassBIsPingExpected>
   167cc:	4606      	mov	r6, r0
   167ce:	2800      	cmp	r0, #0
   167d0:	d043      	beq.n	1685a <LoRaMacProcess+0x55e>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   167d2:	4640      	mov	r0, r8
   167d4:	f015 ff87 	bl	2c6e6 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
   167d8:	4640      	mov	r0, r8
   167da:	f015 ff89 	bl	2c6f0 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
   167de:	2304      	movs	r3, #4
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
   167e0:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   167e4:	9820      	ldr	r0, [sp, #128]	; 0x80
   167e6:	f3c1 1100 	ubfx	r1, r1, #4, #1
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   167ea:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
   167ee:	f015 ff9e 	bl	2c72e <LoRaMacClassBSetFPendingBit>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
   167f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
   167f4:	a914      	add	r1, sp, #80	; 0x50
   167f6:	a81e      	add	r0, sp, #120	; 0x78
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
   167f8:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
   167fc:	f015 fee4 	bl	2c5c8 <DetermineFrameType>
   16800:	4680      	mov	r8, r0
   16802:	2800      	cmp	r0, #0
   16804:	f47f aece 	bne.w	165a4 <LoRaMacProcess+0x2a8>
            downLinkCounter = 0;
   16808:	4603      	mov	r3, r0
   1680a:	4959      	ldr	r1, [pc, #356]	; (16970 <LoRaMacProcess+0x674>)
   1680c:	900c      	str	r0, [sp, #48]	; 0x30
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
   1680e:	f8d1 00e4 	ldr.w	r0, [r1, #228]	; 0xe4
   16812:	4282      	cmp	r2, r0
   16814:	d12d      	bne.n	16872 <LoRaMacProcess+0x576>
   16816:	f891 60e1 	ldrb.w	r6, [r1, #225]	; 0xe1
   1681a:	b356      	cbz	r6, 16872 <LoRaMacProcess+0x576>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
   1681c:	2230      	movs	r2, #48	; 0x30
   1681e:	fb02 5303 	mla	r3, r2, r3, r5
   16822:	f893 a0e2 	ldrb.w	sl, [r3, #226]	; 0xe2
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
   16826:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1682a:	681b      	ldr	r3, [r3, #0]
   1682c:	930c      	str	r3, [sp, #48]	; 0x30
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
   1682e:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   16832:	2b02      	cmp	r3, #2
   16834:	d102      	bne.n	1683c <LoRaMacProcess+0x540>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
   16836:	2303      	movs	r3, #3
   16838:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
   1683c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   16840:	2b03      	cmp	r3, #3
   16842:	f47f aeaf 	bne.w	165a4 <LoRaMacProcess+0x2a8>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
   16846:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   1684a:	f013 0f60 	tst.w	r3, #96	; 0x60
   1684e:	f47f aea9 	bne.w	165a4 <LoRaMacProcess+0x2a8>
   16852:	f04f 0801 	mov.w	r8, #1
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
   16856:	9005      	str	r0, [sp, #20]
   16858:	e011      	b.n	1687e <LoRaMacProcess+0x582>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
   1685a:	f015 ff51 	bl	2c700 <LoRaMacClassBIsMulticastExpected>
   1685e:	2800      	cmp	r0, #0
   16860:	d0c7      	beq.n	167f2 <LoRaMacProcess+0x4f6>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
   16862:	4630      	mov	r0, r6
   16864:	f015 ff40 	bl	2c6e8 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
   16868:	4630      	mov	r0, r6
   1686a:	f015 ff42 	bl	2c6f2 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
   1686e:	2305      	movs	r3, #5
   16870:	e7b6      	b.n	167e0 <LoRaMacProcess+0x4e4>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
   16872:	3301      	adds	r3, #1
   16874:	2b04      	cmp	r3, #4
   16876:	f101 0130 	add.w	r1, r1, #48	; 0x30
   1687a:	d1c8      	bne.n	1680e <LoRaMacProcess+0x512>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
   1687c:	469a      	mov	sl, r3
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
   1687e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   16882:	f895 61b6 	ldrb.w	r6, [r5, #438]	; 0x1b6
   16886:	9304      	str	r3, [sp, #16]
    switch( addrID )
   16888:	f1ba 0f04 	cmp.w	sl, #4
   1688c:	d810      	bhi.n	168b0 <LoRaMacProcess+0x5b4>
   1688e:	e8df f00a 	tbb	[pc, sl]
   16892:	0324      	.short	0x0324
   16894:	2220      	.short	0x2220
   16896:	18          	.byte	0x18
   16897:	00          	.byte	0x00
            *fCntID = MC_FCNT_DOWN_1;
   16898:	2605      	movs	r6, #5
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
   1689a:	4630      	mov	r0, r6
   1689c:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
   168a0:	aa0c      	add	r2, sp, #48	; 0x30
   168a2:	f016 f83b 	bl	2c91c <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   168a6:	b1f0      	cbz	r0, 168e6 <LoRaMacProcess+0x5ea>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
   168a8:	2807      	cmp	r0, #7
   168aa:	d101      	bne.n	168b0 <LoRaMacProcess+0x5b4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
   168ac:	2308      	movs	r3, #8
   168ae:	e000      	b.n	168b2 <LoRaMacProcess+0x5b6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   168b0:	2301      	movs	r3, #1
   168b2:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   168b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168b8:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
                PrepareRxDoneAbort( );
   168bc:	f7fe faba 	bl	14e34 <PrepareRxDoneAbort>
                return;
   168c0:	e5dc      	b.n	1647c <LoRaMacProcess+0x180>
            if( lrWanVersion.Fields.Minor == 1 )
   168c2:	2e01      	cmp	r6, #1
   168c4:	d10b      	bne.n	168de <LoRaMacProcess+0x5e2>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
   168c6:	9b04      	ldr	r3, [sp, #16]
   168c8:	b15b      	cbz	r3, 168e2 <LoRaMacProcess+0x5e6>
                    *fCntID = A_FCNT_DOWN;
   168ca:	2b03      	cmp	r3, #3
   168cc:	bf08      	it	eq
   168ce:	2602      	moveq	r6, #2
   168d0:	e7e3      	b.n	1689a <LoRaMacProcess+0x59e>
            *fCntID = MC_FCNT_DOWN_2;
   168d2:	2606      	movs	r6, #6
            break;
   168d4:	e7e1      	b.n	1689a <LoRaMacProcess+0x59e>
            *fCntID = MC_FCNT_DOWN_3;
   168d6:	2607      	movs	r6, #7
            break;
   168d8:	e7df      	b.n	1689a <LoRaMacProcess+0x59e>
    switch( addrID )
   168da:	2604      	movs	r6, #4
   168dc:	e7dd      	b.n	1689a <LoRaMacProcess+0x59e>
                *fCntID = FCNT_DOWN;
   168de:	2603      	movs	r6, #3
   168e0:	e7db      	b.n	1689a <LoRaMacProcess+0x59e>
                    *fCntID = A_FCNT_DOWN;
   168e2:	2602      	movs	r6, #2
   168e4:	e7d9      	b.n	1689a <LoRaMacProcess+0x59e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
   168e6:	ab1e      	add	r3, sp, #120	; 0x78
   168e8:	9300      	str	r3, [sp, #0]
   168ea:	4632      	mov	r2, r6
   168ec:	4650      	mov	r0, sl
   168ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   168f0:	9905      	ldr	r1, [sp, #20]
   168f2:	f001 feb1 	bl	18658 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   168f6:	b120      	cbz	r0, 16902 <LoRaMacProcess+0x606>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
   168f8:	2802      	cmp	r0, #2
   168fa:	bf14      	ite	ne
   168fc:	230b      	movne	r3, #11
   168fe:	230a      	moveq	r3, #10
   16900:	e651      	b.n	165a6 <LoRaMacProcess+0x2aa>
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   16902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16904:	f894 6431 	ldrb.w	r6, [r4, #1073]	; 0x431
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
   16908:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   1690c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16910:	2e01      	cmp	r6, #1
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   16912:	f3c3 1340 	ubfx	r3, r3, #5, #1
   16916:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
   1691a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
                Nvm.MacGroup2.DownlinkReceived = true;
   1691e:	bf9e      	ittt	ls
   16920:	2301      	movls	r3, #1
                Nvm.MacGroup1.AdrAckCounter = 0;
   16922:	63a8      	strls	r0, [r5, #56]	; 0x38
                Nvm.MacGroup2.DownlinkReceived = true;
   16924:	f885 31a6 	strbls.w	r3, [r5, #422]	; 0x1a6
            if( multicast == 1 )
   16928:	f1b8 0f01 	cmp.w	r8, #1
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   1692c:	f884 0421 	strb.w	r0, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
   16930:	f884 8422 	strb.w	r8, [r4, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
   16934:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
   16938:	f884 042c 	strb.w	r0, [r4, #1068]	; 0x42c
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   1693c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            if( multicast == 1 )
   16940:	d118      	bne.n	16974 <LoRaMacProcess+0x678>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
   16942:	2302      	movs	r3, #2
   16944:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   16948:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   1694c:	b91b      	cbnz	r3, 16956 <LoRaMacProcess+0x65a>
   1694e:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16952:	06db      	lsls	r3, r3, #27
   16954:	d52d      	bpl.n	169b2 <LoRaMacProcess+0x6b6>
   16956:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   1695a:	b36b      	cbz	r3, 169b8 <LoRaMacProcess+0x6bc>
   1695c:	e029      	b.n	169b2 <LoRaMacProcess+0x6b6>
   1695e:	bf00      	nop
   16960:	01000400 	.word	0x01000400
   16964:	01010100 	.word	0x01010100
   16968:	20030698 	.word	0x20030698
   1696c:	200303f8 	.word	0x200303f8
   16970:	2002fd64 	.word	0x2002fd64
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
   16974:	f00b 0be0 	and.w	fp, fp, #224	; 0xe0
   16978:	f1bb 0fa0 	cmp.w	fp, #160	; 0xa0
   1697c:	d132      	bne.n	169e4 <LoRaMacProcess+0x6e8>
                    Nvm.MacGroup1.SrvAckRequested = true;
   1697e:	2101      	movs	r1, #1
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
   16980:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
                    Nvm.MacGroup1.SrvAckRequested = true;
   16984:	f885 104a 	strb.w	r1, [r5, #74]	; 0x4a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
   16988:	b90b      	cbnz	r3, 1698e <LoRaMacProcess+0x692>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
   1698a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   1698c:	646b      	str	r3, [r5, #68]	; 0x44
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
   1698e:	2e01      	cmp	r6, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
   16990:	f884 1420 	strb.w	r1, [r4, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
   16994:	f240 81d5 	bls.w	16d42 <LoRaMacProcess+0xa46>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
   16998:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1699c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
   169a0:	f8d9 3000 	ldr.w	r3, [r9]
   169a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   169a8:	f895 31a0 	ldrb.w	r3, [r5, #416]	; 0x1a0
   169ac:	2b00      	cmp	r3, #0
   169ae:	f000 81f1 	beq.w	16d94 <LoRaMacProcess+0xa98>
   169b2:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
   169b6:	b113      	cbz	r3, 169be <LoRaMacProcess+0x6c2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   169b8:	2301      	movs	r3, #1
   169ba:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   169be:	2e01      	cmp	r6, #1
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
   169c0:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   169c4:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   169c8:	d805      	bhi.n	169d6 <LoRaMacProcess+0x6da>
        if( request == MCPS_CONFIRMED )
   169ca:	2a01      	cmp	r2, #1
   169cc:	d101      	bne.n	169d2 <LoRaMacProcess+0x6d6>
            if( fCtrl.Bits.Ack == 1 )
   169ce:	069e      	lsls	r6, r3, #26
   169d0:	d501      	bpl.n	169d6 <LoRaMacProcess+0x6da>
                LoRaMacCommandsRemoveStickyAnsCmds( );
   169d2:	f001 fa3b 	bl	17e4c <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
   169d6:	9a04      	ldr	r2, [sp, #16]
   169d8:	2a03      	cmp	r2, #3
   169da:	d85a      	bhi.n	16a92 <LoRaMacProcess+0x796>
   169dc:	e8df f002 	tbb	[pc, r2]
   169e0:	12522108 	.word	0x12522108
                    Nvm.MacGroup1.SrvAckRequested = false;
   169e4:	2300      	movs	r3, #0
   169e6:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
   169ea:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   169ee:	e7ae      	b.n	1694e <LoRaMacProcess+0x652>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
   169f0:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   169f4:	463a      	mov	r2, r7
   169f6:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   169fa:	f001 010f 	and.w	r1, r1, #15
   169fe:	a822      	add	r0, sp, #136	; 0x88
   16a00:	f7ff f8f4 	bl	15bec <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
   16a04:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
   16a08:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
   16a0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   16a0e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
   16a12:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
   16a16:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
   16a1a:	2301      	movs	r3, #1
   16a1c:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
                    break;
   16a20:	e00d      	b.n	16a3e <LoRaMacProcess+0x742>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
   16a22:	463a      	mov	r2, r7
   16a24:	f89d 1084 	ldrb.w	r1, [sp, #132]	; 0x84
   16a28:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16a2c:	f001 010f 	and.w	r1, r1, #15
   16a30:	a822      	add	r0, sp, #136	; 0x88
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
   16a32:	f7ff f8db 	bl	15bec <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
   16a36:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
   16a3a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
            if( Nvm.MacGroup2.IsRejoinAcceptPending == true )
   16a3e:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   16a42:	b15b      	cbz	r3, 16a5c <LoRaMacProcess+0x760>
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16a44:	2600      	movs	r6, #0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16a46:	48c6      	ldr	r0, [pc, #792]	; (16d60 <LoRaMacProcess+0xa64>)
                Nvm.MacGroup2.IsRejoinAcceptPending = false;
   16a48:	f885 61d0 	strb.w	r6, [r5, #464]	; 0x1d0
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
   16a4c:	f7fc fcc8 	bl	133e0 <TimerStop>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16a50:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16a54:	0758      	lsls	r0, r3, #29
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   16a56:	bf48      	it	mi
   16a58:	f884 6459 	strbmi.w	r6, [r4, #1113]	; 0x459
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
   16a5c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
   16a60:	2ae0      	cmp	r2, #224	; 0xe0
   16a62:	d108      	bne.n	16a76 <LoRaMacProcess+0x77a>
   16a64:	f895 31a7 	ldrb.w	r3, [r5, #423]	; 0x1a7
   16a68:	b92b      	cbnz	r3, 16a76 <LoRaMacProcess+0x77a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
   16a6a:	f884 2423 	strb.w	r2, [r4, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
   16a6e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
   16a72:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
   16a76:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16a7a:	f043 0302 	orr.w	r3, r3, #2
   16a7e:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            break;
   16a82:	e650      	b.n	16726 <LoRaMacProcess+0x42a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
   16a84:	463a      	mov	r2, r7
   16a86:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16a8a:	f89d 10a0 	ldrb.w	r1, [sp, #160]	; 0xa0
   16a8e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   16a90:	e7cf      	b.n	16a32 <LoRaMacProcess+0x736>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   16a92:	2301      	movs	r3, #1
   16a94:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
                    PrepareRxDoneAbort( );
   16a98:	f7fe f9cc 	bl	14e34 <PrepareRxDoneAbort>
                    break;
   16a9c:	e7cf      	b.n	16a3e <LoRaMacProcess+0x742>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
   16a9e:	4db1      	ldr	r5, [pc, #708]	; (16d64 <LoRaMacProcess+0xa68>)
   16aa0:	3e01      	subs	r6, #1
   16aa2:	4628      	mov	r0, r5
   16aa4:	b2b2      	uxth	r2, r6
   16aa6:	f108 0101 	add.w	r1, r8, #1
   16aaa:	f015 f95c 	bl	2bd66 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
   16aae:	2303      	movs	r3, #3
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
   16ab0:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
   16ab4:	f8a4 3420 	strh.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
   16ab8:	f884 642c 	strb.w	r6, [r4, #1068]	; 0x42c
   16abc:	e7db      	b.n	16a76 <LoRaMacProcess+0x77a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   16abe:	2301      	movs	r3, #1
   16ac0:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            PrepareRxDoneAbort( );
   16ac4:	f7fe f9b6 	bl	14e34 <PrepareRxDoneAbort>
            break;
   16ac8:	e62d      	b.n	16726 <LoRaMacProcess+0x42a>
            if( MacCtx.McpsConfirm.AckReceived == true )
   16aca:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
   16ace:	2b00      	cmp	r3, #0
   16ad0:	f43f ae33 	beq.w	1673a <LoRaMacProcess+0x43e>
                OnRetransmitTimeoutTimerEvent( NULL );
   16ad4:	2000      	movs	r0, #0
   16ad6:	f7fe f995 	bl	14e04 <OnRetransmitTimeoutTimerEvent>
    if( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_CLASS_C )
   16ada:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16ade:	2b02      	cmp	r3, #2
   16ae0:	f43f ae31 	beq.w	16746 <LoRaMacProcess+0x44a>
   16ae4:	e629      	b.n	1673a <LoRaMacProcess+0x43e>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16ae6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16aea:	0759      	lsls	r1, r3, #29
   16aec:	d515      	bpl.n	16b1a <LoRaMacProcess+0x81e>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
   16aee:	2001      	movs	r0, #1
   16af0:	f001 faac 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   16af4:	b160      	cbz	r0, 16b10 <LoRaMacProcess+0x814>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
   16af6:	2001      	movs	r0, #1
   16af8:	f001 fa7e 	bl	17ff8 <LoRaMacConfirmQueueGetStatus>
   16afc:	b908      	cbnz	r0, 16b02 <LoRaMacProcess+0x806>
                MacCtx.ChannelsNbTransCounter = 0;
   16afe:	f884 0418 	strb.w	r0, [r4, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
   16b02:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16b06:	f023 0302 	bic.w	r3, r3, #2
   16b0a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
   16b0e:	e004      	b.n	16b1a <LoRaMacProcess+0x81e>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
   16b10:	2005      	movs	r0, #5
   16b12:	f001 fa9b 	bl	1804c <LoRaMacConfirmQueueIsCmdActive>
   16b16:	2800      	cmp	r0, #0
   16b18:	d1f3      	bne.n	16b02 <LoRaMacProcess+0x806>
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
   16b1a:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16b1e:	07da      	lsls	r2, r3, #31
   16b20:	f57f ad02 	bpl.w	16528 <LoRaMacProcess+0x22c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
   16b24:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   16b28:	b10a      	cbz	r2, 16b2e <LoRaMacProcess+0x832>
   16b2a:	2a03      	cmp	r2, #3
   16b2c:	d12b      	bne.n	16b86 <LoRaMacProcess+0x88a>
    if( counter >= limit )
   16b2e:	4a8e      	ldr	r2, [pc, #568]	; (16d68 <LoRaMacProcess+0xa6c>)
   16b30:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   16b34:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   16b38:	4291      	cmp	r1, r2
   16b3a:	d205      	bcs.n	16b48 <LoRaMacProcess+0x84c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   16b3c:	079b      	lsls	r3, r3, #30
   16b3e:	d536      	bpl.n	16bae <LoRaMacProcess+0x8b2>
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
   16b40:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
   16b44:	2b01      	cmp	r3, #1
   16b46:	d832      	bhi.n	16bae <LoRaMacProcess+0x8b2>
            TimerStop( &MacCtx.TxDelayedTimer );
   16b48:	4888      	ldr	r0, [pc, #544]	; (16d6c <LoRaMacProcess+0xa70>)
   16b4a:	f7fc fc49 	bl	133e0 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
   16b4e:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
   16b52:	f023 0320 	bic.w	r3, r3, #32
   16b56:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
   16b5a:	f7fe fbe3 	bl	15324 <StopRetransmission.isra.0>
    if( ( Nvm.MacGroup2.Rejoin0UplinksLimit == Nvm.MacGroup1.Rejoin0UplinksCounter ) &&
   16b5e:	4b82      	ldr	r3, [pc, #520]	; (16d68 <LoRaMacProcess+0xa6c>)
   16b60:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   16b64:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   16b66:	428a      	cmp	r2, r1
   16b68:	f47f acde 	bne.w	16528 <LoRaMacProcess+0x22c>
   16b6c:	f893 11b6 	ldrb.w	r1, [r3, #438]	; 0x1b6
   16b70:	2900      	cmp	r1, #0
   16b72:	f43f acd9 	beq.w	16528 <LoRaMacProcess+0x22c>
        ( Nvm.MacGroup2.Version.Fields.Minor >= 1 ) &&
   16b76:	2a00      	cmp	r2, #0
   16b78:	f43f acd6 	beq.w	16528 <LoRaMacProcess+0x22c>
        Nvm.MacGroup1.Rejoin0UplinksCounter = 0;
   16b7c:	2000      	movs	r0, #0
   16b7e:	64d8      	str	r0, [r3, #76]	; 0x4c
                SendReJoinReq( REJOIN_REQ_0 );
   16b80:	f7fe ff16 	bl	159b0 <SendReJoinReq>
   16b84:	e4d0      	b.n	16528 <LoRaMacProcess+0x22c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
   16b86:	2a01      	cmp	r2, #1
   16b88:	d111      	bne.n	16bae <LoRaMacProcess+0x8b2>
            if( MacCtx.RetransmitTimeoutRetry == true )
   16b8a:	f894 2419 	ldrb.w	r2, [r4, #1049]	; 0x419
   16b8e:	2a00      	cmp	r2, #0
   16b90:	f43f acca 	beq.w	16528 <LoRaMacProcess+0x22c>
    if( counter >= limit )
   16b94:	4a74      	ldr	r2, [pc, #464]	; (16d68 <LoRaMacProcess+0xa6c>)
   16b96:	f894 1418 	ldrb.w	r1, [r4, #1048]	; 0x418
   16b9a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
   16b9e:	4291      	cmp	r1, r2
   16ba0:	d2d2      	bcs.n	16b48 <LoRaMacProcess+0x84c>
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   16ba2:	079f      	lsls	r7, r3, #30
   16ba4:	d503      	bpl.n	16bae <LoRaMacProcess+0x8b2>
        if( stopRetransmission == true )
   16ba6:	f894 3448 	ldrb.w	r3, [r4, #1096]	; 0x448
   16baa:	2b00      	cmp	r3, #0
   16bac:	d1cc      	bne.n	16b48 <LoRaMacProcess+0x84c>
            MacCtx.RetransmitTimeoutRetry = false;
   16bae:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
   16bb0:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
   16bb4:	f884 0419 	strb.w	r0, [r4, #1049]	; 0x419
            MacCtx.MacFlags.Bits.MacDone = 0;
   16bb8:	f36f 1304 	bfc	r3, #4, #1
   16bbc:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
            OnTxDelayedTimerEvent( NULL );
   16bc0:	f7fe fe3e 	bl	15840 <OnTxDelayedTimerEvent>
   16bc4:	e4b0      	b.n	16528 <LoRaMacProcess+0x22c>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
   16bc6:	2201      	movs	r2, #1
   16bc8:	2d00      	cmp	r5, #0
   16bca:	f040 80a5 	bne.w	16d18 <LoRaMacProcess+0xa1c>
    MacCtx.AllowRequests = requestState;
   16bce:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
        LoRaMacClassBResumeBeaconing( );
   16bd2:	f015 fd9b 	bl	2c70c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
   16bd6:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16bda:	f36f 1304 	bfc	r3, #4, #1
   16bde:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   16be2:	2301      	movs	r3, #1
   16be4:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
        MacCtx.MacFlags.Bits.NvmHandle = 1;
   16be8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16bec:	f043 0320 	orr.w	r3, r3, #32
   16bf0:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
   16bf4:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16bf8:	0718      	lsls	r0, r3, #28
   16bfa:	d508      	bpl.n	16c0e <LoRaMacProcess+0x912>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
   16bfc:	f36f 03c3 	bfc	r3, #3, #1
   16c00:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
   16c04:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16c08:	4859      	ldr	r0, [pc, #356]	; (16d70 <LoRaMacProcess+0xa74>)
   16c0a:	68db      	ldr	r3, [r3, #12]
   16c0c:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
   16c0e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16c12:	0799      	lsls	r1, r3, #30
   16c14:	d508      	bpl.n	16c28 <LoRaMacProcess+0x92c>
        MacCtx.MacFlags.Bits.McpsInd = 0;
   16c16:	f36f 0341 	bfc	r3, #1, #1
   16c1a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
   16c1e:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
   16c22:	4854      	ldr	r0, [pc, #336]	; (16d74 <LoRaMacProcess+0xa78>)
   16c24:	685b      	ldr	r3, [r3, #4]
   16c26:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
   16c28:	f894 348c 	ldrb.w	r3, [r4, #1164]	; 0x48c
   16c2c:	2b02      	cmp	r3, #2
   16c2e:	d101      	bne.n	16c34 <LoRaMacProcess+0x938>
        OpenContinuousRxCWindow( );
   16c30:	f7fe fa6c 	bl	1510c <OpenContinuousRxCWindow>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
   16c34:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16c38:	069a      	lsls	r2, r3, #26
   16c3a:	f140 80ae 	bpl.w	16d9a <LoRaMacProcess+0xa9e>
    if( MacCtx.MacState != LORAMAC_IDLE )
   16c3e:	f8d4 5340 	ldr.w	r5, [r4, #832]	; 0x340
        MacCtx.MacFlags.Bits.NvmHandle = 0;
   16c42:	f36f 1345 	bfc	r3, #5, #1
   16c46:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.MacState != LORAMAC_IDLE )
   16c4a:	2d00      	cmp	r5, #0
   16c4c:	f040 80a5 	bne.w	16d9a <LoRaMacProcess+0xa9e>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
   16c50:	4e45      	ldr	r6, [pc, #276]	; (16d68 <LoRaMacProcess+0xa6c>)
   16c52:	2134      	movs	r1, #52	; 0x34
   16c54:	4630      	mov	r0, r6
   16c56:	f7fc fb27 	bl	132a8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
   16c5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16c5c:	211c      	movs	r1, #28
    if( crc != nvmData->Crypto.Crc32 )
   16c5e:	4298      	cmp	r0, r3
        nvmData->Crypto.Crc32 = crc;
   16c60:	bf18      	it	ne
   16c62:	6370      	strne	r0, [r6, #52]	; 0x34
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16c64:	4844      	ldr	r0, [pc, #272]	; (16d78 <LoRaMacProcess+0xa7c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
   16c66:	bf18      	it	ne
   16c68:	2501      	movne	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
   16c6a:	f7fc fb1d 	bl	132a8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
   16c6e:	6d73      	ldr	r3, [r6, #84]	; 0x54
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16c70:	f44f 71be 	mov.w	r1, #380	; 0x17c
    if( crc != nvmData->MacGroup1.Crc32 )
   16c74:	4298      	cmp	r0, r3
        nvmData->MacGroup1.Crc32 = crc;
   16c76:	bf18      	it	ne
   16c78:	6570      	strne	r0, [r6, #84]	; 0x54
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16c7a:	4840      	ldr	r0, [pc, #256]	; (16d7c <LoRaMacProcess+0xa80>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
   16c7c:	bf18      	it	ne
   16c7e:	f045 0502 	orrne.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
   16c82:	f7fc fb11 	bl	132a8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
   16c86:	f8d6 31d4 	ldr.w	r3, [r6, #468]	; 0x1d4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   16c8a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
    if( crc != nvmData->MacGroup2.Crc32 )
   16c8e:	4298      	cmp	r0, r3
        nvmData->MacGroup2.Crc32 = crc;
   16c90:	bf18      	it	ne
   16c92:	f8c6 01d4 	strne.w	r0, [r6, #468]	; 0x1d4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   16c96:	483a      	ldr	r0, [pc, #232]	; (16d80 <LoRaMacProcess+0xa84>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
   16c98:	bf18      	it	ne
   16c9a:	f045 0504 	orrne.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
   16c9e:	f7fc fb03 	bl	132a8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
   16ca2:	f8d6 3374 	ldr.w	r3, [r6, #884]	; 0x374
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   16ca6:	2100      	movs	r1, #0
    if( crc != nvmData->SecureElement.Crc32 )
   16ca8:	4298      	cmp	r0, r3
        nvmData->SecureElement.Crc32 = crc;
   16caa:	bf18      	it	ne
   16cac:	f8c6 0374 	strne.w	r0, [r6, #884]	; 0x374
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   16cb0:	4834      	ldr	r0, [pc, #208]	; (16d84 <LoRaMacProcess+0xa88>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
   16cb2:	bf18      	it	ne
   16cb4:	f045 0508 	orrne.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
   16cb8:	f7fc faf6 	bl	132a8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
   16cbc:	f8d6 3378 	ldr.w	r3, [r6, #888]	; 0x378
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   16cc0:	21c4      	movs	r1, #196	; 0xc4
    if( crc != nvmData->RegionGroup1.Crc32 )
   16cc2:	4298      	cmp	r0, r3
        nvmData->RegionGroup1.Crc32 = crc;
   16cc4:	bf18      	it	ne
   16cc6:	f8c6 0378 	strne.w	r0, [r6, #888]	; 0x378
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   16cca:	482f      	ldr	r0, [pc, #188]	; (16d88 <LoRaMacProcess+0xa8c>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
   16ccc:	bf18      	it	ne
   16cce:	f045 0510 	orrne.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
   16cd2:	f7fc fae9 	bl	132a8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
   16cd6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   16cda:	2114      	movs	r1, #20
    if( crc != nvmData->RegionGroup2.Crc32 )
   16cdc:	4298      	cmp	r0, r3
        nvmData->RegionGroup2.Crc32 = crc;
   16cde:	bf18      	it	ne
   16ce0:	f8c6 0440 	strne.w	r0, [r6, #1088]	; 0x440
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   16ce4:	4829      	ldr	r0, [pc, #164]	; (16d8c <LoRaMacProcess+0xa90>)
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
   16ce6:	bf18      	it	ne
   16ce8:	f045 0520 	orrne.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
   16cec:	f7fc fadc 	bl	132a8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
   16cf0:	f8d6 3458 	ldr.w	r3, [r6, #1112]	; 0x458
   16cf4:	4298      	cmp	r0, r3
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16cf6:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
        nvmData->ClassB.Crc32 = crc;
   16cfa:	bf1c      	itt	ne
   16cfc:	f8c6 0458 	strne.w	r0, [r6, #1112]	; 0x458
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
   16d00:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16d04:	2b00      	cmp	r3, #0
   16d06:	d048      	beq.n	16d9a <LoRaMacProcess+0xa9e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
   16d08:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
   16d0a:	2b00      	cmp	r3, #0
   16d0c:	d045      	beq.n	16d9a <LoRaMacProcess+0xa9e>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
   16d0e:	4628      	mov	r0, r5
}
   16d10:	b02b      	add	sp, #172	; 0xac
   16d12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
   16d16:	4718      	bx	r3
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   16d18:	f360 0382 	bfi	r3, r0, #2, #1
   16d1c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.AllowRequests = requestState;
   16d20:	f884 248e 	strb.w	r2, [r4, #1166]	; 0x48e
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
   16d24:	481a      	ldr	r0, [pc, #104]	; (16d90 <LoRaMacProcess+0xa94>)
   16d26:	f001 f99d 	bl	18064 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
   16d2a:	f001 f9c9 	bl	180c0 <LoRaMacConfirmQueueGetCnt>
   16d2e:	2800      	cmp	r0, #0
   16d30:	f43f af4f 	beq.w	16bd2 <LoRaMacProcess+0x8d6>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
   16d34:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   16d38:	f043 0304 	orr.w	r3, r3, #4
   16d3c:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   16d40:	e747      	b.n	16bd2 <LoRaMacProcess+0x8d6>
            if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
   16d42:	f895 01a0 	ldrb.w	r0, [r5, #416]	; 0x1a0
   16d46:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   16d4a:	f894 2444 	ldrb.w	r2, [r4, #1092]	; 0x444
   16d4e:	b120      	cbz	r0, 16d5a <LoRaMacProcess+0xa5e>
   16d50:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
   16d54:	2800      	cmp	r0, #0
   16d56:	f43f ae38 	beq.w	169ca <LoRaMacProcess+0x6ce>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   16d5a:	f884 1425 	strb.w	r1, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   16d5e:	e634      	b.n	169ca <LoRaMacProcess+0x6ce>
   16d60:	20030698 	.word	0x20030698
   16d64:	200303f8 	.word	0x200303f8
   16d68:	2002fd64 	.word	0x2002fd64
   16d6c:	20030530 	.word	0x20030530
   16d70:	2003062c 	.word	0x2003062c
   16d74:	200305e0 	.word	0x200305e0
   16d78:	2002fd9c 	.word	0x2002fd9c
   16d7c:	2002fdbc 	.word	0x2002fdbc
   16d80:	2002ff3c 	.word	0x2002ff3c
   16d84:	200300dc 	.word	0x200300dc
   16d88:	200300e0 	.word	0x200300e0
   16d8c:	200301a8 	.word	0x200301a8
   16d90:	20030618 	.word	0x20030618
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
   16d94:	f884 1425 	strb.w	r1, [r4, #1061]	; 0x425
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
   16d98:	e61d      	b.n	169d6 <LoRaMacProcess+0x6da>
}
   16d9a:	b02b      	add	sp, #172	; 0xac
   16d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016da0 <LoRaMacInitialization>:
{
   16da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da4:	4689      	mov	r9, r1
   16da6:	4690      	mov	r8, r2
    if( ( primitives == NULL ) ||
   16da8:	4606      	mov	r6, r0
{
   16daa:	b08b      	sub	sp, #44	; 0x2c
    if( ( primitives == NULL ) ||
   16dac:	2800      	cmp	r0, #0
   16dae:	f000 818f 	beq.w	170d0 <LoRaMacInitialization+0x330>
   16db2:	2900      	cmp	r1, #0
   16db4:	f000 818c 	beq.w	170d0 <LoRaMacInitialization+0x330>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
   16db8:	6803      	ldr	r3, [r0, #0]
   16dba:	2b00      	cmp	r3, #0
   16dbc:	f000 8188 	beq.w	170d0 <LoRaMacInitialization+0x330>
   16dc0:	6843      	ldr	r3, [r0, #4]
   16dc2:	2b00      	cmp	r3, #0
   16dc4:	f000 8184 	beq.w	170d0 <LoRaMacInitialization+0x330>
        ( primitives->MacMcpsIndication == NULL ) ||
   16dc8:	6883      	ldr	r3, [r0, #8]
   16dca:	2b00      	cmp	r3, #0
   16dcc:	f000 8180 	beq.w	170d0 <LoRaMacInitialization+0x330>
        ( primitives->MacMlmeConfirm == NULL ) ||
   16dd0:	68c3      	ldr	r3, [r0, #12]
   16dd2:	2b00      	cmp	r3, #0
   16dd4:	f000 817c 	beq.w	170d0 <LoRaMacInitialization+0x330>
    if( RegionIsActive( region ) == false )
   16dd8:	4610      	mov	r0, r2
   16dda:	f015 ffa4 	bl	2cd26 <RegionIsActive>
   16dde:	2800      	cmp	r0, #0
   16de0:	f000 8178 	beq.w	170d4 <LoRaMacInitialization+0x334>
    Nvm.MacGroup2.DeviceClass = CLASS_A;
   16de4:	2700      	movs	r7, #0
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
   16de6:	4cbd      	ldr	r4, [pc, #756]	; (170dc <LoRaMacInitialization+0x33c>)
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
   16de8:	4dbd      	ldr	r5, [pc, #756]	; (170e0 <LoRaMacInitialization+0x340>)
    LoRaMacConfirmQueueInit( primitives );
   16dea:	4630      	mov	r0, r6
   16dec:	f001 f8a4 	bl	17f38 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
   16df0:	f240 425c 	movw	r2, #1116	; 0x45c
   16df4:	2100      	movs	r1, #0
   16df6:	4620      	mov	r0, r4
   16df8:	f014 ffc9 	bl	2bd8e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
   16dfc:	f240 5284 	movw	r2, #1412	; 0x584
   16e00:	2100      	movs	r1, #0
   16e02:	4628      	mov	r0, r5
   16e04:	f014 ffc3 	bl	2bd8e <memset1>
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
   16e08:	4bb6      	ldr	r3, [pc, #728]	; (170e4 <LoRaMacInitialization+0x344>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16e0a:	4640      	mov	r0, r8
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
   16e0c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    params.NvmGroup1 = &Nvm.RegionGroup1;
   16e10:	f504 735e 	add.w	r3, r4, #888	; 0x378
   16e14:	9306      	str	r3, [sp, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
   16e16:	f504 735f 	add.w	r3, r4, #892	; 0x37c
   16e1a:	9307      	str	r3, [sp, #28]
    params.Bands = &RegionBands;
   16e1c:	4bb2      	ldr	r3, [pc, #712]	; (170e8 <LoRaMacInitialization+0x348>)
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16e1e:	a906      	add	r1, sp, #24
    Nvm.MacGroup2.Region = region;
   16e20:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
    Nvm.MacGroup2.DeviceClass = CLASS_A;
   16e24:	f884 71a0 	strb.w	r7, [r4, #416]	; 0x1a0
    params.Type = INIT_TYPE_DEFAULTS;
   16e28:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    params.Bands = &RegionBands;
   16e2c:	9308      	str	r3, [sp, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   16e2e:	f015 ff8e 	bl	2cd4e <RegionInitDefaults>
    getPhy.Attribute = PHY_DUTY_CYCLE;
   16e32:	230e      	movs	r3, #14
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e34:	a904      	add	r1, sp, #16
   16e36:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DUTY_CYCLE;
   16e3a:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e3e:	f015 ff76 	bl	2cd2e <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
   16e42:	1bc0      	subs	r0, r0, r7
   16e44:	bf18      	it	ne
   16e46:	2001      	movne	r0, #1
    getPhy.Attribute = PHY_DEF_TX_POWER;
   16e48:	f04f 0b0a 	mov.w	fp, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
   16e4c:	f884 01a4 	strb.w	r0, [r4, #420]	; 0x1a4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e50:	a904      	add	r1, sp, #16
   16e52:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_TX_POWER;
   16e56:	f88d b010 	strb.w	fp, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e5a:	f015 ff68 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_TX_DR;
   16e5e:	f04f 0a06 	mov.w	sl, #6
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
   16e62:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e66:	a904      	add	r1, sp, #16
   16e68:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_TX_DR;
   16e6c:	f88d a010 	strb.w	sl, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e70:	f015 ff5d 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
   16e74:	230f      	movs	r3, #15
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
   16e76:	f884 00d5 	strb.w	r0, [r4, #213]	; 0xd5
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e7a:	a904      	add	r1, sp, #16
   16e7c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
   16e80:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e84:	f015 ff53 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
   16e88:	2310      	movs	r3, #16
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
   16e8a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e8e:	eb0d 0103 	add.w	r1, sp, r3
   16e92:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
   16e96:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16e9a:	f015 ff48 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
   16e9e:	2311      	movs	r3, #17
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
   16ea0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ea4:	a904      	add	r1, sp, #16
   16ea6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
   16eaa:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16eae:	f015 ff3e 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
   16eb2:	2312      	movs	r3, #18
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
   16eb4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16eb8:	a904      	add	r1, sp, #16
   16eba:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
   16ebe:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ec2:	f015 ff34 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
   16ec6:	2313      	movs	r3, #19
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
   16ec8:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ecc:	a904      	add	r1, sp, #16
   16ece:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
   16ed2:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ed6:	f015 ff2a 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
   16eda:	2315      	movs	r3, #21
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
   16edc:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ee0:	a904      	add	r1, sp, #16
   16ee2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
   16ee6:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16eea:	f015 ff20 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
   16eee:	2316      	movs	r3, #22
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
   16ef0:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16ef4:	a904      	add	r1, sp, #16
   16ef6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
   16efa:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16efe:	f015 ff16 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_RX2_DR;
   16f02:	2317      	movs	r3, #23
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
   16f04:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
   16f08:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f0c:	a904      	add	r1, sp, #16
   16f0e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_RX2_DR;
   16f12:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f16:	f015 ff0a 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
   16f1a:	231c      	movs	r3, #28
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
   16f1c:	b2c0      	uxtb	r0, r0
   16f1e:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
   16f22:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f26:	a904      	add	r1, sp, #16
   16f28:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
   16f2c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f30:	f015 fefd 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
   16f34:	231d      	movs	r3, #29
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
   16f36:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f3a:	a904      	add	r1, sp, #16
   16f3c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
   16f40:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f44:	f015 fef3 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
   16f48:	231e      	movs	r3, #30
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
   16f4a:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f4e:	a904      	add	r1, sp, #16
   16f50:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
   16f54:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f58:	f015 fee9 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
   16f5c:	231f      	movs	r3, #31
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
   16f5e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f62:	a904      	add	r1, sp, #16
   16f64:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
   16f68:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f6c:	f015 fedf 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
   16f70:	230b      	movs	r3, #11
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
   16f72:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f76:	a904      	add	r1, sp, #16
   16f78:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
   16f7c:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f80:	f015 fed5 	bl	2cd2e <RegionGetPhyParam>
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
   16f84:	230c      	movs	r3, #12
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f86:	a904      	add	r1, sp, #16
    MacCtx.AdrAckLimit = phyParam.Value;
   16f88:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f8c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
   16f90:	f04f 0801 	mov.w	r8, #1
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
   16f94:	f88d 3010 	strb.w	r3, [sp, #16]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16f98:	f015 fec9 	bl	2cd2e <RegionGetPhyParam>
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
   16f9c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   16fa0:	9003      	str	r0, [sp, #12]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
   16fa2:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
   16fa4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    MacCtx.AdrAckDelay = phyParam.Value;
   16fa8:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
   16fac:	66a3      	str	r3, [r4, #104]	; 0x68
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
   16fae:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
   16fb2:	f884 80b4 	strb.w	r8, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
   16fb6:	66e3      	str	r3, [r4, #108]	; 0x6c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
   16fb8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
   16fbc:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
   16fc0:	6723      	str	r3, [r4, #112]	; 0x70
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
   16fc2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
   16fc6:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
   16fca:	6763      	str	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
   16fcc:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
   16fd0:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
   16fd4:	f884 8078 	strb.w	r8, [r4, #120]	; 0x78
    Nvm.MacGroup2.IsCertPortOn = true;
   16fd8:	f884 81a7 	strb.w	r8, [r4, #423]	; 0x1a7
    ResetMacParameters( );
   16fdc:	f7fd fff8 	bl	14fd0 <ResetMacParameters>
    MacCtx.MacCallbacks = callbacks;
   16fe0:	e9c5 69d1 	strd	r6, r9, [r5, #836]	; 0x344
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
   16fe4:	466e      	mov	r6, sp
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
   16fe6:	4941      	ldr	r1, [pc, #260]	; (170ec <LoRaMacInitialization+0x34c>)
   16fe8:	f505 705c 	add.w	r0, r5, #880	; 0x370
    Nvm.MacGroup1.AggregatedTimeOff = 0;
   16fec:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
    MacCtx.MacFlags.Value = 0;
   16ff0:	f885 748d 	strb.w	r7, [r5, #1165]	; 0x48d
    Nvm.MacGroup2.PublicNetwork = true;
   16ff4:	f884 81a1 	strb.w	r8, [r4, #417]	; 0x1a1
    MacCtx.MacState = LORAMAC_STOPPED;
   16ff8:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
   16ffc:	f014 ffaf 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
   17000:	493b      	ldr	r1, [pc, #236]	; (170f0 <LoRaMacInitialization+0x350>)
   17002:	f505 7062 	add.w	r0, r5, #904	; 0x388
   17006:	f014 ffaa 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
   1700a:	493a      	ldr	r1, [pc, #232]	; (170f4 <LoRaMacInitialization+0x354>)
   1700c:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
   17010:	f014 ffa5 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
   17014:	4938      	ldr	r1, [pc, #224]	; (170f8 <LoRaMacInitialization+0x358>)
   17016:	f505 6080 	add.w	r0, r5, #1024	; 0x400
   1701a:	f014 ffa0 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
   1701e:	4937      	ldr	r1, [pc, #220]	; (170fc <LoRaMacInitialization+0x35c>)
   17020:	f505 6092 	add.w	r0, r5, #1168	; 0x490
   17024:	f014 ff9b 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
   17028:	4935      	ldr	r1, [pc, #212]	; (17100 <LoRaMacInitialization+0x360>)
   1702a:	f505 6095 	add.w	r0, r5, #1192	; 0x4a8
   1702e:	f014 ff96 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
   17032:	4934      	ldr	r1, [pc, #208]	; (17104 <LoRaMacInitialization+0x364>)
   17034:	f505 6098 	add.w	r0, r5, #1216	; 0x4c0
   17038:	f014 ff91 	bl	2bf5e <TimerInit>
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
   1703c:	4932      	ldr	r1, [pc, #200]	; (17108 <LoRaMacInitialization+0x368>)
   1703e:	f505 609b 	add.w	r0, r5, #1240	; 0x4d8
   17042:	f014 ff8c 	bl	2bf5e <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
   17046:	4630      	mov	r0, r6
   17048:	f014 ff22 	bl	2be90 <SysTimeGetMcuTime>
   1704c:	e896 0003 	ldmia.w	r6, {r0, r1}
   17050:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
   17054:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Value = 0;
   17058:	4b2c      	ldr	r3, [pc, #176]	; (1710c <LoRaMacInitialization+0x36c>)
    Radio.Init( &MacCtx.RadioEvents );
   1705a:	f505 7053 	add.w	r0, r5, #844	; 0x34c
    LoRaMacRadioEvents.Value = 0;
   1705e:	601f      	str	r7, [r3, #0]
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
   17060:	4b2b      	ldr	r3, [pc, #172]	; (17110 <LoRaMacInitialization+0x370>)
    Radio.Init( &MacCtx.RadioEvents );
   17062:	4f2c      	ldr	r7, [pc, #176]	; (17114 <LoRaMacInitialization+0x374>)
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
   17064:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
   17068:	4b2b      	ldr	r3, [pc, #172]	; (17118 <LoRaMacInitialization+0x378>)
   1706a:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
   1706e:	4b2b      	ldr	r3, [pc, #172]	; (1711c <LoRaMacInitialization+0x37c>)
   17070:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
   17074:	4b2a      	ldr	r3, [pc, #168]	; (17120 <LoRaMacInitialization+0x380>)
   17076:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
   1707a:	4b2a      	ldr	r3, [pc, #168]	; (17124 <LoRaMacInitialization+0x384>)
   1707c:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
   17080:	683b      	ldr	r3, [r7, #0]
   17082:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
   17084:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   17088:	f7fd fd46 	bl	14b18 <SecureElementInit>
   1708c:	b120      	cbz	r0, 17098 <LoRaMacInitialization+0x2f8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
   1708e:	2611      	movs	r6, #17
}
   17090:	4630      	mov	r0, r6
   17092:	b00b      	add	sp, #44	; 0x2c
   17094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
   17098:	4620      	mov	r0, r4
   1709a:	f001 f90b 	bl	182b4 <LoRaMacCryptoInit>
   1709e:	2800      	cmp	r0, #0
   170a0:	d1f5      	bne.n	1708e <LoRaMacInitialization+0x2ee>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
   170a2:	f000 fe3f 	bl	17d24 <LoRaMacCommandsInit>
   170a6:	b9b8      	cbnz	r0, 170d8 <LoRaMacInitialization+0x338>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
   170a8:	481f      	ldr	r0, [pc, #124]	; (17128 <LoRaMacInitialization+0x388>)
   170aa:	f001 f94d 	bl	18348 <LoRaMacCryptoSetMulticastReference>
   170ae:	4606      	mov	r6, r0
   170b0:	2800      	cmp	r0, #0
   170b2:	d1ec      	bne.n	1708e <LoRaMacInitialization+0x2ee>
    srand1( Radio.Random( ) );
   170b4:	697b      	ldr	r3, [r7, #20]
   170b6:	4798      	blx	r3
   170b8:	f7fc f8f0 	bl	1329c <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
   170bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   170be:	f894 01a1 	ldrb.w	r0, [r4, #417]	; 0x1a1
   170c2:	4798      	blx	r3
    Radio.Sleep( );
   170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   170c6:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
   170c8:	2301      	movs	r3, #1
   170ca:	f885 348e 	strb.w	r3, [r5, #1166]	; 0x48e
    return LORAMAC_STATUS_OK;
   170ce:	e7df      	b.n	17090 <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   170d0:	2603      	movs	r6, #3
   170d2:	e7dd      	b.n	17090 <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
   170d4:	2609      	movs	r6, #9
   170d6:	e7db      	b.n	17090 <LoRaMacInitialization+0x2f0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   170d8:	2613      	movs	r6, #19
   170da:	e7d9      	b.n	17090 <LoRaMacInitialization+0x2f0>
   170dc:	2002fd64 	.word	0x2002fd64
   170e0:	200301c0 	.word	0x200301c0
   170e4:	01010100 	.word	0x01010100
   170e8:	2002fcd4 	.word	0x2002fcd4
   170ec:	00015841 	.word	0x00015841
   170f0:	00015299 	.word	0x00015299
   170f4:	000152dd 	.word	0x000152dd
   170f8:	00014e05 	.word	0x00014e05
   170fc:	00015b9d 	.word	0x00015b9d
   17100:	00015b4d 	.word	0x00015b4d
   17104:	00015afd 	.word	0x00015afd
   17108:	00015ab9 	.word	0x00015ab9
   1710c:	2002fcd0 	.word	0x2002fcd0
   17110:	00014f85 	.word	0x00014f85
   17114:	00033c2c 	.word	0x00033c2c
   17118:	00014f39 	.word	0x00014f39
   1711c:	00014d75 	.word	0x00014d75
   17120:	00014d51 	.word	0x00014d51
   17124:	00014d99 	.word	0x00014d99
   17128:	2002fe44 	.word	0x2002fe44

0001712c <LoRaMacStart>:
    MacCtx.MacState = LORAMAC_IDLE;
   1712c:	2000      	movs	r0, #0
   1712e:	4b02      	ldr	r3, [pc, #8]	; (17138 <LoRaMacStart+0xc>)
   17130:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
}
   17134:	4770      	bx	lr
   17136:	bf00      	nop
   17138:	200301c0 	.word	0x200301c0

0001713c <LoRaMacQueryTxPossible>:
{
   1713c:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t macCmdsSize = 0;
   1713e:	2700      	movs	r7, #0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   17140:	4b2d      	ldr	r3, [pc, #180]	; (171f8 <LoRaMacQueryTxPossible+0xbc>)
{
   17142:	b08b      	sub	sp, #44	; 0x2c
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   17144:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
{
   17148:	4605      	mov	r5, r0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   1714a:	f88d 2009 	strb.w	r2, [sp, #9]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   1714e:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   17152:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   17154:	f88d 200a 	strb.w	r2, [sp, #10]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   17158:	4a28      	ldr	r2, [pc, #160]	; (171fc <LoRaMacQueryTxPossible+0xc0>)
    if( txInfo == NULL )
   1715a:	460c      	mov	r4, r1
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   1715c:	f892 0418 	ldrb.w	r0, [r2, #1048]	; 0x418
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   17160:	9603      	str	r6, [sp, #12]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
   17162:	f88d 000b 	strb.w	r0, [sp, #11]
    size_t macCmdsSize = 0;
   17166:	9704      	str	r7, [sp, #16]
    if( txInfo == NULL )
   17168:	2900      	cmp	r1, #0
   1716a:	d040      	beq.n	171ee <LoRaMacQueryTxPossible+0xb2>
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   1716c:	f8d2 23fc 	ldr.w	r2, [r2, #1020]	; 0x3fc
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   17170:	f893 11a2 	ldrb.w	r1, [r3, #418]	; 0x1a2
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
   17174:	9207      	str	r2, [sp, #28]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   17176:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
   1717a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
   1717e:	ba52      	rev16	r2, r2
   17180:	f8ad 2020 	strh.w	r2, [sp, #32]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17184:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
    adrNext.Region = Nvm.MacGroup2.Region;
   17188:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
   1718c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    adrNext.Region = Nvm.MacGroup2.Region;
   17190:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   17194:	ab03      	add	r3, sp, #12
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17196:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   1719a:	9300      	str	r3, [sp, #0]
   1719c:	f10d 020a 	add.w	r2, sp, #10
   171a0:	f10d 030b 	add.w	r3, sp, #11
   171a4:	f10d 0109 	add.w	r1, sp, #9
   171a8:	a805      	add	r0, sp, #20
    adrNext.UpdateChanMask = false;
   171aa:	f88d 7014 	strb.w	r7, [sp, #20]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
   171ae:	9606      	str	r6, [sp, #24]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
   171b0:	f015 fa29 	bl	2c606 <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
   171b4:	f99d 0009 	ldrsb.w	r0, [sp, #9]
   171b8:	f7fd fe0e 	bl	14dd8 <GetMaxAppPayloadWithoutFOptsLength>
   171bc:	7060      	strb	r0, [r4, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
   171be:	a804      	add	r0, sp, #16
   171c0:	f000 fe56 	bl	17e70 <LoRaMacCommandsGetSizeSerializedCmds>
   171c4:	b9a8      	cbnz	r0, 171f2 <LoRaMacQueryTxPossible+0xb6>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
   171c6:	9a04      	ldr	r2, [sp, #16]
   171c8:	2a0f      	cmp	r2, #15
   171ca:	d80c      	bhi.n	171e6 <LoRaMacQueryTxPossible+0xaa>
   171cc:	7863      	ldrb	r3, [r4, #1]
   171ce:	429a      	cmp	r2, r3
   171d0:	d809      	bhi.n	171e6 <LoRaMacQueryTxPossible+0xaa>
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
   171d2:	4415      	add	r5, r2
   171d4:	42ab      	cmp	r3, r5
   171d6:	bf2c      	ite	cs
   171d8:	2000      	movcs	r0, #0
   171da:	2001      	movcc	r0, #1
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
   171dc:	1a99      	subs	r1, r3, r2
   171de:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
   171e0:	00c0      	lsls	r0, r0, #3
}
   171e2:	b00b      	add	sp, #44	; 0x2c
   171e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
   171e6:	2300      	movs	r3, #0
           return LORAMAC_STATUS_LENGTH_ERROR;
   171e8:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
   171ea:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
   171ec:	e7f9      	b.n	171e2 <LoRaMacQueryTxPossible+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   171ee:	2003      	movs	r0, #3
   171f0:	e7f7      	b.n	171e2 <LoRaMacQueryTxPossible+0xa6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
   171f2:	2013      	movs	r0, #19
   171f4:	e7f5      	b.n	171e2 <LoRaMacQueryTxPossible+0xa6>
   171f6:	bf00      	nop
   171f8:	2002fd64 	.word	0x2002fd64
   171fc:	200301c0 	.word	0x200301c0

00017200 <LoRaMacMibGetRequestConfirm>:
{
   17200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( mibGet == NULL )
   17202:	4604      	mov	r4, r0
   17204:	2800      	cmp	r0, #0
   17206:	f000 80cf 	beq.w	173a8 <LoRaMacMibGetRequestConfirm+0x1a8>
    switch( mibGet->Type )
   1720a:	7803      	ldrb	r3, [r0, #0]
   1720c:	2b47      	cmp	r3, #71	; 0x47
   1720e:	f200 80c6 	bhi.w	1739e <LoRaMacMibGetRequestConfirm+0x19e>
   17212:	e8df f003 	tbb	[pc, r3]
   17216:	2b24      	.short	0x2b24
   17218:	3936332f 	.word	0x3936332f
   1721c:	c4c4423d 	.word	0xc4c4423d
   17220:	c4c4c4c4 	.word	0xc4c4c4c4
   17224:	c4c4c4c4 	.word	0xc4c4c4c4
   17228:	c4c4c4c4 	.word	0xc4c4c4c4
   1722c:	c4c4c4c4 	.word	0xc4c4c4c4
   17230:	46c4c4c4 	.word	0x46c4c4c4
   17234:	5e5b544a 	.word	0x5e5b544a
   17238:	68646661 	.word	0x68646661
   1723c:	75726f6c 	.word	0x75726f6c
   17240:	8e8a7b78 	.word	0x8e8a7b78
   17244:	9d9a9296 	.word	0x9d9a9296
   17248:	c4a6a8a1 	.word	0xc4a6a8a1
   1724c:	c0bcb8ac 	.word	0xc0bcb8ac
   17250:	c4c4c4c4 	.word	0xc4c4c4c4
   17254:	c4c4c4c4 	.word	0xc4c4c4c4
   17258:	c4c4c4c4 	.word	0xc4c4c4c4
   1725c:	b4c4      	.short	0xb4c4
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
   1725e:	4b53      	ldr	r3, [pc, #332]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17260:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   17264:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
   17266:	2000      	movs	r0, #0
}
   17268:	b004      	add	sp, #16
   1726a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
   1726c:	4b4f      	ldr	r3, [pc, #316]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1726e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
   17272:	e7f7      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
   17274:	f7fd fd3a 	bl	14cec <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
   17278:	6060      	str	r0, [r4, #4]
            break;
   1727a:	e7f4      	b.n	17266 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
   1727c:	f7fd fd4c 	bl	14d18 <SecureElementGetJoinEui>
   17280:	e7fa      	b.n	17278 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.SePin = SecureElementGetPin( );
   17282:	f7fd fd5f 	bl	14d44 <SecureElementGetPin>
   17286:	e7f7      	b.n	17278 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
   17288:	4b48      	ldr	r3, [pc, #288]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1728a:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
   1728e:	e7e9      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
   17290:	4b46      	ldr	r3, [pc, #280]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
   17296:	6063      	str	r3, [r4, #4]
            break;
   17298:	e7e5      	b.n	17266 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
   1729a:	4b44      	ldr	r3, [pc, #272]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1729c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   172a0:	e7f9      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
   172a2:	4b42      	ldr	r3, [pc, #264]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   172a4:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
   172a8:	e7dc      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            getPhy.Attribute = PHY_CHANNELS;
   172aa:	231b      	movs	r3, #27
            getPhy.Attribute = PHY_CHANNELS_MASK;
   172ac:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   172b0:	4b3e      	ldr	r3, [pc, #248]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   172b2:	a902      	add	r1, sp, #8
   172b4:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   172b8:	f015 fd39 	bl	2cd2e <RegionGetPhyParam>
   172bc:	e7dc      	b.n	17278 <LoRaMacMibGetRequestConfirm+0x78>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
   172be:	4b3c      	ldr	r3, [pc, #240]	; (173b0 <LoRaMacMibGetRequestConfirm+0x1b0>)
   172c0:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   172c2:	e893 0003 	ldmia.w	r3, {r0, r1}
   172c6:	e884 0003 	stmia.w	r4, {r0, r1}
            break;
   172ca:	e7cc      	b.n	17266 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
   172cc:	4b39      	ldr	r3, [pc, #228]	; (173b4 <LoRaMacMibGetRequestConfirm+0x1b4>)
   172ce:	3404      	adds	r4, #4
   172d0:	e7f7      	b.n	172c2 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
   172d2:	4b39      	ldr	r3, [pc, #228]	; (173b8 <LoRaMacMibGetRequestConfirm+0x1b8>)
   172d4:	3404      	adds	r4, #4
   172d6:	e7f4      	b.n	172c2 <LoRaMacMibGetRequestConfirm+0xc2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
   172d8:	4b38      	ldr	r3, [pc, #224]	; (173bc <LoRaMacMibGetRequestConfirm+0x1bc>)
   172da:	3404      	adds	r4, #4
   172dc:	e7f1      	b.n	172c2 <LoRaMacMibGetRequestConfirm+0xc2>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
   172de:	2319      	movs	r3, #25
   172e0:	e7e4      	b.n	172ac <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_MASK;
   172e2:	2318      	movs	r3, #24
   172e4:	e7e2      	b.n	172ac <LoRaMacMibGetRequestConfirm+0xac>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
   172e6:	4b31      	ldr	r3, [pc, #196]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   172e8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   172ec:	e7ba      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
   172ee:	4b2f      	ldr	r3, [pc, #188]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   172f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   172f2:	e7d0      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
   172f4:	4b2d      	ldr	r3, [pc, #180]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   172f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   172f8:	e7cd      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
   172fa:	4b2c      	ldr	r3, [pc, #176]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   172fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   172fe:	e7ca      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
   17300:	4b2a      	ldr	r3, [pc, #168]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   17304:	e7c7      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
   17306:	4b29      	ldr	r3, [pc, #164]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1730a:	e7c4      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            getPhy.Attribute = PHY_MIN_TX_DR;
   1730c:	2302      	movs	r3, #2
   1730e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17312:	4b26      	ldr	r3, [pc, #152]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17314:	a902      	add	r1, sp, #8
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17316:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   1731a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1731e:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17322:	f015 fd04 	bl	2cd2e <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
   17326:	7120      	strb	r0, [r4, #4]
            break;
   17328:	e79d      	b.n	17266 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
   1732a:	4b20      	ldr	r3, [pc, #128]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1732c:	f993 30d5 	ldrsb.w	r3, [r3, #213]	; 0xd5
   17330:	e798      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
   17332:	4b1e      	ldr	r3, [pc, #120]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17334:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
   17338:	e794      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
   1733a:	4b1c      	ldr	r3, [pc, #112]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1733c:	f993 30d4 	ldrsb.w	r3, [r3, #212]	; 0xd4
   17340:	e790      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
   17342:	4b1a      	ldr	r3, [pc, #104]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17344:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
   17348:	e78c      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
   1734a:	4b18      	ldr	r3, [pc, #96]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1734c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1734e:	e7a2      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
   17350:	4b16      	ldr	r3, [pc, #88]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17352:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   17356:	e785      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
   17358:	4b14      	ldr	r3, [pc, #80]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   1735a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   1735e:	6063      	str	r3, [r4, #4]
            break;
   17360:	e781      	b.n	17266 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Contexts = GetNvmData( );
   17362:	4b12      	ldr	r3, [pc, #72]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17364:	e797      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
   17366:	4b11      	ldr	r3, [pc, #68]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17368:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   1736c:	e7f7      	b.n	1735e <LoRaMacMibGetRequestConfirm+0x15e>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
   1736e:	4b0f      	ldr	r3, [pc, #60]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17370:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
   17374:	6043      	str	r3, [r0, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
   17376:	f001 faf1 	bl	1895c <RegionGetVersion>
   1737a:	60a0      	str	r0, [r4, #8]
            break;
   1737c:	e773      	b.n	17266 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
   1737e:	4b0b      	ldr	r3, [pc, #44]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17380:	f893 31a7 	ldrb.w	r3, [r3, #423]	; 0x1a7
   17384:	e76e      	b.n	17264 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.Rejoin0CycleInSec = Nvm.MacGroup2.Rejoin0CycleInSec;
   17386:	4b09      	ldr	r3, [pc, #36]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17388:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   1738c:	e783      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.Rejoin1CycleInSec = Nvm.MacGroup2.Rejoin1CycleInSec;
   1738e:	4b07      	ldr	r3, [pc, #28]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17390:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
   17394:	e77f      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
   17396:	4b05      	ldr	r3, [pc, #20]	; (173ac <LoRaMacMibGetRequestConfirm+0x1ac>)
   17398:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
   1739c:	e77b      	b.n	17296 <LoRaMacMibGetRequestConfirm+0x96>
}
   1739e:	b004      	add	sp, #16
   173a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
   173a4:	f015 b9b5 	b.w	2c712 <LoRaMacClassBMibGetRequestConfirm>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   173a8:	2003      	movs	r0, #3
   173aa:	e75d      	b.n	17268 <LoRaMacMibGetRequestConfirm+0x68>
   173ac:	2002fd64 	.word	0x2002fd64
   173b0:	2002fde0 	.word	0x2002fde0
   173b4:	2002fe1c 	.word	0x2002fe1c
   173b8:	2002fde8 	.word	0x2002fde8
   173bc:	2002fe24 	.word	0x2002fe24

000173c0 <LoRaMacMibSetRequestConfirm>:
{
   173c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if( mibSet == NULL )
   173c2:	4604      	mov	r4, r0
   173c4:	b910      	cbnz	r0, 173cc <LoRaMacMibSetRequestConfirm+0xc>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   173c6:	2003      	movs	r0, #3
}
   173c8:	b004      	add	sp, #16
   173ca:	bd70      	pop	{r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
   173cc:	4d9c      	ldr	r5, [pc, #624]	; (17640 <LoRaMacMibSetRequestConfirm+0x280>)
   173ce:	f8d5 3340 	ldr.w	r3, [r5, #832]	; 0x340
   173d2:	079a      	lsls	r2, r3, #30
   173d4:	f100 82b5 	bmi.w	17942 <LoRaMacMibSetRequestConfirm+0x582>
    switch( mibSet->Type )
   173d8:	7802      	ldrb	r2, [r0, #0]
   173da:	2a47      	cmp	r2, #71	; 0x47
   173dc:	f200 82ae 	bhi.w	1793c <LoRaMacMibSetRequestConfirm+0x57c>
   173e0:	e8df f012 	tbh	[pc, r2, lsl #1]
   173e4:	004d0048 	.word	0x004d0048
   173e8:	0061005b 	.word	0x0061005b
   173ec:	00690065 	.word	0x00690065
   173f0:	0073006e 	.word	0x0073006e
   173f4:	00830078 	.word	0x00830078
   173f8:	008f0089 	.word	0x008f0089
   173fc:	009b0095 	.word	0x009b0095
   17400:	00a700a1 	.word	0x00a700a1
   17404:	00b300ad 	.word	0x00b300ad
   17408:	00bf00b9 	.word	0x00bf00b9
   1740c:	00cb00c5 	.word	0x00cb00c5
   17410:	00d700d1 	.word	0x00d700d1
   17414:	00e300dd 	.word	0x00e300dd
   17418:	00ef00e9 	.word	0x00ef00e9
   1741c:	00fb00f5 	.word	0x00fb00f5
   17420:	010302ac 	.word	0x010302ac
   17424:	0134011a 	.word	0x0134011a
   17428:	017d015b 	.word	0x017d015b
   1742c:	0181016e 	.word	0x0181016e
   17430:	018e018a 	.word	0x018e018a
   17434:	01960192 	.word	0x01960192
   17438:	02ac019a 	.word	0x02ac019a
   1743c:	01b0019e 	.word	0x01b0019e
   17440:	01c601d8 	.word	0x01c601d8
   17444:	01f001ea 	.word	0x01f001ea
   17448:	01fc01f7 	.word	0x01fc01f7
   1744c:	02770201 	.word	0x02770201
   17450:	028802ac 	.word	0x028802ac
   17454:	02ac029b 	.word	0x02ac029b
   17458:	02ac02ac 	.word	0x02ac02ac
   1745c:	02ac02ac 	.word	0x02ac02ac
   17460:	02ac02ac 	.word	0x02ac02ac
   17464:	02ac02ac 	.word	0x02ac02ac
   17468:	02ac02ac 	.word	0x02ac02ac
   1746c:	02ac02ac 	.word	0x02ac02ac
   17470:	028302ac 	.word	0x028302ac
            status = SwitchClass( mibSet->Param.Class );
   17474:	7900      	ldrb	r0, [r0, #4]
   17476:	f7fd fe75 	bl	15164 <SwitchClass>
    if( status == LORAMAC_STATUS_OK )
   1747a:	b130      	cbz	r0, 1748a <LoRaMacMibSetRequestConfirm+0xca>
   1747c:	e7a4      	b.n	173c8 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
   1747e:	7903      	ldrb	r3, [r0, #4]
   17480:	2b02      	cmp	r3, #2
   17482:	d0a0      	beq.n	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
   17484:	4a6f      	ldr	r2, [pc, #444]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
   17486:	f882 31b8 	strb.w	r3, [r2, #440]	; 0x1b8
        MacCtx.MacFlags.Bits.NvmHandle = 1;
   1748a:	f895 348d 	ldrb.w	r3, [r5, #1165]	; 0x48d
   1748e:	2000      	movs	r0, #0
   17490:	f043 0320 	orr.w	r3, r3, #32
   17494:	f885 348d 	strb.w	r3, [r5, #1165]	; 0x48d
   17498:	e796      	b.n	173c8 <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
   1749a:	6840      	ldr	r0, [r0, #4]
   1749c:	f7fd fc18 	bl	14cd0 <SecureElementSetDevEui>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
   174a0:	2800      	cmp	r0, #0
   174a2:	d0f2      	beq.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
   174a4:	e78f      	b.n	173c6 <LoRaMacMibSetRequestConfirm+0x6>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
   174a6:	6840      	ldr	r0, [r0, #4]
   174a8:	f7fd fc26 	bl	14cf8 <SecureElementSetJoinEui>
   174ac:	e7f8      	b.n	174a0 <LoRaMacMibSetRequestConfirm+0xe0>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
   174ae:	6840      	ldr	r0, [r0, #4]
   174b0:	f7fd fc38 	bl	14d24 <SecureElementSetPin>
   174b4:	e7f4      	b.n	174a0 <LoRaMacMibSetRequestConfirm+0xe0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
   174b6:	7902      	ldrb	r2, [r0, #4]
   174b8:	4b62      	ldr	r3, [pc, #392]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
   174ba:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
    if( status == LORAMAC_STATUS_OK )
   174be:	e7e4      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
   174c0:	6842      	ldr	r2, [r0, #4]
   174c2:	4b60      	ldr	r3, [pc, #384]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
   174c4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    if( status == LORAMAC_STATUS_OK )
   174c8:	e7df      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
   174ca:	6842      	ldr	r2, [r0, #4]
   174cc:	4b5d      	ldr	r3, [pc, #372]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
   174ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    if( status == LORAMAC_STATUS_OK )
   174d2:	e7da      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.AppKey != NULL )
   174d4:	6841      	ldr	r1, [r0, #4]
   174d6:	2900      	cmp	r1, #0
   174d8:	f43f af75 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
   174dc:	2000      	movs	r0, #0
   174de:	f001 f963 	bl	187a8 <LoRaMacCryptoSetKey>
   174e2:	2800      	cmp	r0, #0
   174e4:	d0d1      	beq.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
   174e6:	2011      	movs	r0, #17
   174e8:	e76e      	b.n	173c8 <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
   174ea:	6841      	ldr	r1, [r0, #4]
   174ec:	2900      	cmp	r1, #0
   174ee:	f43f af6a 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
   174f2:	2001      	movs	r0, #1
   174f4:	e7f3      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.JSIntKey != NULL )
   174f6:	6841      	ldr	r1, [r0, #4]
   174f8:	2900      	cmp	r1, #0
   174fa:	f43f af64 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
   174fe:	2002      	movs	r0, #2
   17500:	e7ed      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.JSEncKey != NULL )
   17502:	6841      	ldr	r1, [r0, #4]
   17504:	2900      	cmp	r1, #0
   17506:	f43f af5e 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
   1750a:	2003      	movs	r0, #3
   1750c:	e7e7      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.FNwkSIntKey != NULL )
   1750e:	6841      	ldr	r1, [r0, #4]
   17510:	2900      	cmp	r1, #0
   17512:	f43f af58 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
   17516:	2004      	movs	r0, #4
   17518:	e7e1      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.SNwkSIntKey != NULL )
   1751a:	6841      	ldr	r1, [r0, #4]
   1751c:	2900      	cmp	r1, #0
   1751e:	f43f af52 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
   17522:	2005      	movs	r0, #5
   17524:	e7db      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.NwkSEncKey != NULL )
   17526:	6841      	ldr	r1, [r0, #4]
   17528:	2900      	cmp	r1, #0
   1752a:	f43f af4c 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
   1752e:	2006      	movs	r0, #6
   17530:	e7d5      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.AppSKey != NULL )
   17532:	6841      	ldr	r1, [r0, #4]
   17534:	2900      	cmp	r1, #0
   17536:	f43f af46 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
   1753a:	2007      	movs	r0, #7
   1753c:	e7cf      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKEKey != NULL )
   1753e:	6841      	ldr	r1, [r0, #4]
   17540:	2900      	cmp	r1, #0
   17542:	f43f af40 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
   17546:	207f      	movs	r0, #127	; 0x7f
   17548:	e7c9      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey0 != NULL )
   1754a:	6841      	ldr	r1, [r0, #4]
   1754c:	2900      	cmp	r1, #0
   1754e:	f43f af3a 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
   17552:	2080      	movs	r0, #128	; 0x80
   17554:	e7c3      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey0 != NULL )
   17556:	6841      	ldr	r1, [r0, #4]
   17558:	2900      	cmp	r1, #0
   1755a:	f43f af34 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
   1755e:	2081      	movs	r0, #129	; 0x81
   17560:	e7bd      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey0 != NULL )
   17562:	6841      	ldr	r1, [r0, #4]
   17564:	2900      	cmp	r1, #0
   17566:	f43f af2e 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
   1756a:	2082      	movs	r0, #130	; 0x82
   1756c:	e7b7      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey1 != NULL )
   1756e:	6841      	ldr	r1, [r0, #4]
   17570:	2900      	cmp	r1, #0
   17572:	f43f af28 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
   17576:	2083      	movs	r0, #131	; 0x83
   17578:	e7b1      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey1 != NULL )
   1757a:	6841      	ldr	r1, [r0, #4]
   1757c:	2900      	cmp	r1, #0
   1757e:	f43f af22 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
   17582:	2084      	movs	r0, #132	; 0x84
   17584:	e7ab      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey1 != NULL )
   17586:	6841      	ldr	r1, [r0, #4]
   17588:	2900      	cmp	r1, #0
   1758a:	f43f af1c 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
   1758e:	2085      	movs	r0, #133	; 0x85
   17590:	e7a5      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey2 != NULL )
   17592:	6841      	ldr	r1, [r0, #4]
   17594:	2900      	cmp	r1, #0
   17596:	f43f af16 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
   1759a:	2086      	movs	r0, #134	; 0x86
   1759c:	e79f      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey2 != NULL )
   1759e:	6841      	ldr	r1, [r0, #4]
   175a0:	2900      	cmp	r1, #0
   175a2:	f43f af10 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
   175a6:	2087      	movs	r0, #135	; 0x87
   175a8:	e799      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey2 != NULL )
   175aa:	6841      	ldr	r1, [r0, #4]
   175ac:	2900      	cmp	r1, #0
   175ae:	f43f af0a 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
   175b2:	2088      	movs	r0, #136	; 0x88
   175b4:	e793      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McKey3 != NULL )
   175b6:	6841      	ldr	r1, [r0, #4]
   175b8:	2900      	cmp	r1, #0
   175ba:	f43f af04 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
   175be:	2089      	movs	r0, #137	; 0x89
   175c0:	e78d      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McAppSKey3 != NULL )
   175c2:	6841      	ldr	r1, [r0, #4]
   175c4:	2900      	cmp	r1, #0
   175c6:	f43f aefe 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
   175ca:	208a      	movs	r0, #138	; 0x8a
   175cc:	e787      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            if( mibSet->Param.McNwkSKey3 != NULL )
   175ce:	6841      	ldr	r1, [r0, #4]
   175d0:	2900      	cmp	r1, #0
   175d2:	f43f aef8 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
   175d6:	208b      	movs	r0, #139	; 0x8b
   175d8:	e781      	b.n	174de <LoRaMacMibSetRequestConfirm+0x11e>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
   175da:	7900      	ldrb	r0, [r0, #4]
   175dc:	4b19      	ldr	r3, [pc, #100]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
   175de:	f883 01a1 	strb.w	r0, [r3, #417]	; 0x1a1
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
   175e2:	4b19      	ldr	r3, [pc, #100]	; (17648 <LoRaMacMibSetRequestConfirm+0x288>)
   175e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   175e6:	4798      	blx	r3
    if( status == LORAMAC_STATUS_OK )
   175e8:	e74f      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   175ea:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   175ec:	4e15      	ldr	r6, [pc, #84]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   175ee:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   175f2:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   175f6:	2207      	movs	r2, #7
   175f8:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   175fc:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   175fe:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17602:	f015 fbaa 	bl	2cd5a <RegionVerify>
   17606:	2800      	cmp	r0, #0
   17608:	f43f aedd 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
   1760c:	367c      	adds	r6, #124	; 0x7c
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
   1760e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   17612:	e886 0003 	stmia.w	r6, {r0, r1}
    if( status == LORAMAC_STATUS_OK )
   17616:	e738      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   17618:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1761a:	4e0a      	ldr	r6, [pc, #40]	; (17644 <LoRaMacMibSetRequestConfirm+0x284>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
   1761c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17620:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17624:	2207      	movs	r2, #7
   17626:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   1762a:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1762c:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17630:	f015 fb93 	bl	2cd5a <RegionVerify>
   17634:	2800      	cmp	r0, #0
   17636:	f43f aec6 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
   1763a:	36b8      	adds	r6, #184	; 0xb8
   1763c:	e7e7      	b.n	1760e <LoRaMacMibSetRequestConfirm+0x24e>
   1763e:	bf00      	nop
   17640:	200301c0 	.word	0x200301c0
   17644:	2002fd64 	.word	0x2002fd64
   17648:	00033c2c 	.word	0x00033c2c
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   1764c:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1764e:	4ebe      	ldr	r6, [pc, #760]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   17650:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17654:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17658:	2207      	movs	r2, #7
   1765a:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   1765e:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17660:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   17664:	f015 fb79 	bl	2cd5a <RegionVerify>
   17668:	2800      	cmp	r0, #0
   1766a:	f43f aeac 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
   1766e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   17672:	f106 0384 	add.w	r3, r6, #132	; 0x84
   17676:	e883 0003 	stmia.w	r3, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
   1767a:	f896 31a0 	ldrb.w	r3, [r6, #416]	; 0x1a0
   1767e:	2b02      	cmp	r3, #2
   17680:	f47f af03 	bne.w	1748a <LoRaMacMibSetRequestConfirm+0xca>
   17684:	f896 31b8 	ldrb.w	r3, [r6, #440]	; 0x1b8
   17688:	2b00      	cmp	r3, #0
   1768a:	f43f aefe 	beq.w	1748a <LoRaMacMibSetRequestConfirm+0xca>
                    Radio.Sleep( );
   1768e:	4baf      	ldr	r3, [pc, #700]	; (1794c <LoRaMacMibSetRequestConfirm+0x58c>)
   17690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17692:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
   17694:	f7fd fd3a 	bl	1510c <OpenContinuousRxCWindow>
    if( status == LORAMAC_STATUS_OK )
   17698:	e6f7      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   1769a:	7a03      	ldrb	r3, [r0, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   1769c:	4eaa      	ldr	r6, [pc, #680]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
   1769e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   176a2:	f896 308d 	ldrb.w	r3, [r6, #141]	; 0x8d
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   176a6:	2207      	movs	r2, #7
   176a8:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
   176ac:	a901      	add	r1, sp, #4
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   176ae:	f88d 3005 	strb.w	r3, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
   176b2:	f015 fb52 	bl	2cd5a <RegionVerify>
   176b6:	2800      	cmp	r0, #0
   176b8:	f43f ae85 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
   176bc:	36c0      	adds	r6, #192	; 0xc0
   176be:	e7a6      	b.n	1760e <LoRaMacMibSetRequestConfirm+0x24e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
   176c0:	6843      	ldr	r3, [r0, #4]
   176c2:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
   176c4:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
   176c6:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
   176ca:	4b9f      	ldr	r3, [pc, #636]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   176cc:	a902      	add	r1, sp, #8
   176ce:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
   176d2:	f015 fb51 	bl	2cd78 <RegionChanMaskSet>
   176d6:	2800      	cmp	r0, #0
   176d8:	f47f aed7 	bne.w	1748a <LoRaMacMibSetRequestConfirm+0xca>
   176dc:	e673      	b.n	173c6 <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
   176de:	6843      	ldr	r3, [r0, #4]
   176e0:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
   176e2:	2300      	movs	r3, #0
   176e4:	e7ef      	b.n	176c6 <LoRaMacMibSetRequestConfirm+0x306>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
   176e6:	7903      	ldrb	r3, [r0, #4]
   176e8:	1e5a      	subs	r2, r3, #1
   176ea:	2a0e      	cmp	r2, #14
   176ec:	f63f ae6b 	bhi.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
   176f0:	4a95      	ldr	r2, [pc, #596]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   176f2:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
    if( status == LORAMAC_STATUS_OK )
   176f6:	e6c8      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
   176f8:	6842      	ldr	r2, [r0, #4]
   176fa:	4b93      	ldr	r3, [pc, #588]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   176fc:	665a      	str	r2, [r3, #100]	; 0x64
    if( status == LORAMAC_STATUS_OK )
   176fe:	e6c4      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
   17700:	6842      	ldr	r2, [r0, #4]
   17702:	4b91      	ldr	r3, [pc, #580]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   17704:	669a      	str	r2, [r3, #104]	; 0x68
    if( status == LORAMAC_STATUS_OK )
   17706:	e6c0      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
   17708:	6842      	ldr	r2, [r0, #4]
   1770a:	4b8f      	ldr	r3, [pc, #572]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   1770c:	66da      	str	r2, [r3, #108]	; 0x6c
    if( status == LORAMAC_STATUS_OK )
   1770e:	e6bc      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
   17710:	6842      	ldr	r2, [r0, #4]
   17712:	4b8d      	ldr	r3, [pc, #564]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   17714:	671a      	str	r2, [r3, #112]	; 0x70
    if( status == LORAMAC_STATUS_OK )
   17716:	e6b8      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
   17718:	6842      	ldr	r2, [r0, #4]
   1771a:	4b8b      	ldr	r3, [pc, #556]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   1771c:	675a      	str	r2, [r3, #116]	; 0x74
    if( status == LORAMAC_STATUS_OK )
   1771e:	e6b4      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17720:	4c89      	ldr	r4, [pc, #548]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
   17722:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17724:	2206      	movs	r2, #6
   17726:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1772a:	a901      	add	r1, sp, #4
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
   1772c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
   17730:	f015 fb13 	bl	2cd5a <RegionVerify>
   17734:	2800      	cmp	r0, #0
   17736:	f43f ae46 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
   1773a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1773e:	f884 30d5 	strb.w	r3, [r4, #213]	; 0xd5
    if( status == LORAMAC_STATUS_OK )
   17742:	e6a2      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
   17744:	7903      	ldrb	r3, [r0, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17746:	4c80      	ldr	r4, [pc, #512]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
   17748:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   1774c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17750:	2205      	movs	r2, #5
   17752:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   17756:	a901      	add	r1, sp, #4
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17758:	f88d 3006 	strb.w	r3, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   1775c:	f015 fafd 	bl	2cd5a <RegionVerify>
   17760:	2800      	cmp	r0, #0
   17762:	f43f ae30 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
   17766:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1776a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    if( status == LORAMAC_STATUS_OK )
   1776e:	e68c      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17770:	4c75      	ldr	r4, [pc, #468]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
   17772:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17774:	220a      	movs	r2, #10
   17776:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1777a:	a901      	add	r1, sp, #4
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
   1777c:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
   17780:	f015 faeb 	bl	2cd5a <RegionVerify>
   17784:	2800      	cmp	r0, #0
   17786:	f43f ae1e 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
   1778a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1778e:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    if( status == LORAMAC_STATUS_OK )
   17792:	e67a      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   17794:	4c6c      	ldr	r4, [pc, #432]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
   17796:	7903      	ldrb	r3, [r0, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   17798:	2209      	movs	r2, #9
   1779a:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
   1779e:	a901      	add	r1, sp, #4
            verify.TxPower = mibSet->Param.ChannelsTxPower;
   177a0:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
   177a4:	f015 fad9 	bl	2cd5a <RegionVerify>
   177a8:	2800      	cmp	r0, #0
   177aa:	f43f ae0c 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
   177ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   177b2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if( status == LORAMAC_STATUS_OK )
   177b6:	e668      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
   177b8:	6842      	ldr	r2, [r0, #4]
   177ba:	4b63      	ldr	r3, [pc, #396]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   177bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   177c0:	65da      	str	r2, [r3, #92]	; 0x5c
    if( status == LORAMAC_STATUS_OK )
   177c2:	e662      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
   177c4:	7902      	ldrb	r2, [r0, #4]
   177c6:	4b60      	ldr	r3, [pc, #384]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   177c8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
   177cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    if( status == LORAMAC_STATUS_OK )
   177d0:	e65b      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
   177d2:	6842      	ldr	r2, [r0, #4]
   177d4:	4b5c      	ldr	r3, [pc, #368]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   177d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    if( status == LORAMAC_STATUS_OK )
   177da:	e656      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
   177dc:	6842      	ldr	r2, [r0, #4]
   177de:	4b5a      	ldr	r3, [pc, #360]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   177e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    if( status == LORAMAC_STATUS_OK )
   177e4:	e651      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.Contexts != 0 )
   177e6:	6844      	ldr	r4, [r0, #4]
   177e8:	2c00      	cmp	r4, #0
   177ea:	f43f adec 	beq.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
    if( MacCtx.MacState != LORAMAC_STOPPED )
   177ee:	2b01      	cmp	r3, #1
   177f0:	f040 80a7 	bne.w	17942 <LoRaMacMibSetRequestConfirm+0x582>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
   177f4:	2134      	movs	r1, #52	; 0x34
   177f6:	4620      	mov	r0, r4
   177f8:	f7fb fd56 	bl	132a8 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
   177fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   177fe:	4298      	cmp	r0, r3
   17800:	d104      	bne.n	1780c <LoRaMacMibSetRequestConfirm+0x44c>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
   17802:	2238      	movs	r2, #56	; 0x38
   17804:	4621      	mov	r1, r4
   17806:	4850      	ldr	r0, [pc, #320]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   17808:	f014 faad 	bl	2bd66 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
   1780c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   17810:	211c      	movs	r1, #28
   17812:	4630      	mov	r0, r6
   17814:	f7fb fd48 	bl	132a8 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
   17818:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1781a:	4298      	cmp	r0, r3
   1781c:	d104      	bne.n	17828 <LoRaMacMibSetRequestConfirm+0x468>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
   1781e:	2220      	movs	r2, #32
   17820:	4631      	mov	r1, r6
   17822:	484b      	ldr	r0, [pc, #300]	; (17950 <LoRaMacMibSetRequestConfirm+0x590>)
   17824:	f014 fa9f 	bl	2bd66 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
   17828:	f104 0658 	add.w	r6, r4, #88	; 0x58
   1782c:	f44f 71be 	mov.w	r1, #380	; 0x17c
   17830:	4630      	mov	r0, r6
   17832:	f7fb fd39 	bl	132a8 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
   17836:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   1783a:	4298      	cmp	r0, r3
   1783c:	d118      	bne.n	17870 <LoRaMacMibSetRequestConfirm+0x4b0>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
   1783e:	f44f 72c0 	mov.w	r2, #384	; 0x180
   17842:	4631      	mov	r1, r6
   17844:	4843      	ldr	r0, [pc, #268]	; (17954 <LoRaMacMibSetRequestConfirm+0x594>)
   17846:	f014 fa8e 	bl	2bd66 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
   1784a:	f895 341b 	ldrb.w	r3, [r5, #1051]	; 0x41b
   1784e:	f885 33e8 	strb.w	r3, [r5, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   17852:	4b3d      	ldr	r3, [pc, #244]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   17854:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17858:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
   1785c:	f8c5 23ec 	str.w	r2, [r5, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
   17860:	f885 33f8 	strb.w	r3, [r5, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
   17864:	2301      	movs	r3, #1
   17866:	f885 33f9 	strb.w	r3, [r5, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
   1786a:	2302      	movs	r3, #2
   1786c:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
   17870:	f504 76ec 	add.w	r6, r4, #472	; 0x1d8
   17874:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   17878:	4630      	mov	r0, r6
   1787a:	f7fb fd15 	bl	132a8 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
   1787e:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
   17882:	4298      	cmp	r0, r3
   17884:	d105      	bne.n	17892 <LoRaMacMibSetRequestConfirm+0x4d2>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
   17886:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1788a:	4631      	mov	r1, r6
   1788c:	4832      	ldr	r0, [pc, #200]	; (17958 <LoRaMacMibSetRequestConfirm+0x598>)
   1788e:	f014 fa6a 	bl	2bd66 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
   17892:	f504 765e 	add.w	r6, r4, #888	; 0x378
   17896:	2100      	movs	r1, #0
   17898:	4630      	mov	r0, r6
   1789a:	f7fb fd05 	bl	132a8 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
   1789e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
   178a2:	4298      	cmp	r0, r3
   178a4:	d104      	bne.n	178b0 <LoRaMacMibSetRequestConfirm+0x4f0>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
   178a6:	2204      	movs	r2, #4
   178a8:	4631      	mov	r1, r6
   178aa:	482c      	ldr	r0, [pc, #176]	; (1795c <LoRaMacMibSetRequestConfirm+0x59c>)
   178ac:	f014 fa5b 	bl	2bd66 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
   178b0:	f204 4644 	addw	r6, r4, #1092	; 0x444
   178b4:	2114      	movs	r1, #20
   178b6:	4630      	mov	r0, r6
   178b8:	f7fb fcf6 	bl	132a8 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
   178bc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   178c0:	4298      	cmp	r0, r3
   178c2:	f47f ade2 	bne.w	1748a <LoRaMacMibSetRequestConfirm+0xca>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
   178c6:	2218      	movs	r2, #24
   178c8:	4631      	mov	r1, r6
   178ca:	4825      	ldr	r0, [pc, #148]	; (17960 <LoRaMacMibSetRequestConfirm+0x5a0>)
   178cc:	f014 fa4b 	bl	2bd66 <memcpy1>
    if( status == LORAMAC_STATUS_OK )
   178d0:	e5db      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
   178d2:	7983      	ldrb	r3, [r0, #6]
   178d4:	2b01      	cmp	r3, #1
   178d6:	f63f ad76 	bhi.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
   178da:	6842      	ldr	r2, [r0, #4]
   178dc:	4b1a      	ldr	r3, [pc, #104]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   178de:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
   178e2:	6840      	ldr	r0, [r0, #4]
   178e4:	f000 fd04 	bl	182f0 <LoRaMacCryptoSetLrWanVersion>
   178e8:	e5fb      	b.n	174e2 <LoRaMacMibSetRequestConfirm+0x122>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
   178ea:	7902      	ldrb	r2, [r0, #4]
   178ec:	4b16      	ldr	r3, [pc, #88]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   178ee:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
    if( status == LORAMAC_STATUS_OK )
   178f2:	e5ca      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
            if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
   178f4:	4b14      	ldr	r3, [pc, #80]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   178f6:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
    if( rejoinCycleTime > 4294967 )
   178fa:	4b1a      	ldr	r3, [pc, #104]	; (17964 <LoRaMacMibSetRequestConfirm+0x5a4>)
   178fc:	4299      	cmp	r1, r3
   178fe:	f67f ad62 	bls.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
        *timeInMiliSec = rejoinCycleTime * 1000;
   17902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17906:	4359      	muls	r1, r3
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   17908:	4817      	ldr	r0, [pc, #92]	; (17968 <LoRaMacMibSetRequestConfirm+0x5a8>)
        *timeInMiliSec = rejoinCycleTime * 1000;
   1790a:	f8c5 14f0 	str.w	r1, [r5, #1264]	; 0x4f0
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
   1790e:	f014 fb2e 	bl	2bf6e <TimerSetValue>
                TimerStart( &MacCtx.Rejoin0CycleTimer );
   17912:	4815      	ldr	r0, [pc, #84]	; (17968 <LoRaMacMibSetRequestConfirm+0x5a8>)
                TimerStart( &MacCtx.Rejoin1CycleTimer );
   17914:	f7fb fcee 	bl	132f4 <TimerStart>
    if( status == LORAMAC_STATUS_OK )
   17918:	e5b7      	b.n	1748a <LoRaMacMibSetRequestConfirm+0xca>
           if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
   1791a:	4b0b      	ldr	r3, [pc, #44]	; (17948 <LoRaMacMibSetRequestConfirm+0x588>)
   1791c:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
    if( rejoinCycleTime > 4294967 )
   17920:	4b10      	ldr	r3, [pc, #64]	; (17964 <LoRaMacMibSetRequestConfirm+0x5a4>)
   17922:	4299      	cmp	r1, r3
   17924:	f67f ad4f 	bls.w	173c6 <LoRaMacMibSetRequestConfirm+0x6>
        *timeInMiliSec = rejoinCycleTime * 1000;
   17928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1792c:	4359      	muls	r1, r3
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   1792e:	480f      	ldr	r0, [pc, #60]	; (1796c <LoRaMacMibSetRequestConfirm+0x5ac>)
        *timeInMiliSec = rejoinCycleTime * 1000;
   17930:	f8c5 14f4 	str.w	r1, [r5, #1268]	; 0x4f4
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
   17934:	f014 fb1b 	bl	2bf6e <TimerSetValue>
                TimerStart( &MacCtx.Rejoin1CycleTimer );
   17938:	480c      	ldr	r0, [pc, #48]	; (1796c <LoRaMacMibSetRequestConfirm+0x5ac>)
   1793a:	e7eb      	b.n	17914 <LoRaMacMibSetRequestConfirm+0x554>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
   1793c:	f014 feeb 	bl	2c716 <LoRaMacMibClassBSetRequestConfirm>
            break;
   17940:	e59b      	b.n	1747a <LoRaMacMibSetRequestConfirm+0xba>
        return LORAMAC_STATUS_BUSY;
   17942:	2001      	movs	r0, #1
   17944:	e540      	b.n	173c8 <LoRaMacMibSetRequestConfirm+0x8>
   17946:	bf00      	nop
   17948:	2002fd64 	.word	0x2002fd64
   1794c:	00033c2c 	.word	0x00033c2c
   17950:	2002fd9c 	.word	0x2002fd9c
   17954:	2002fdbc 	.word	0x2002fdbc
   17958:	2002ff3c 	.word	0x2002ff3c
   1795c:	200300dc 	.word	0x200300dc
   17960:	200301a8 	.word	0x200301a8
   17964:	00418937 	.word	0x00418937
   17968:	20030650 	.word	0x20030650
   1796c:	20030668 	.word	0x20030668

00017970 <LoRaMacMlmeRequest>:
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   17970:	2300      	movs	r3, #0
{
   17972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17976:	b086      	sub	sp, #24
    if( mlmeRequest == NULL )
   17978:	4605      	mov	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
   1797a:	f8ad 3000 	strh.w	r3, [sp]
    if( mlmeRequest == NULL )
   1797e:	2800      	cmp	r0, #0
   17980:	f000 80e6 	beq.w	17b50 <LoRaMacMlmeRequest+0x1e0>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
   17984:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
   17986:	f7fd fd15 	bl	153b4 <LoRaMacIsBusy>
   1798a:	b120      	cbz	r0, 17996 <LoRaMacMlmeRequest+0x26>
        return LORAMAC_STATUS_BUSY;
   1798c:	2601      	movs	r6, #1
}
   1798e:	4630      	mov	r0, r6
   17990:	b006      	add	sp, #24
   17992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
   17996:	f000 fb99 	bl	180cc <LoRaMacConfirmQueueIsFull>
   1799a:	2800      	cmp	r0, #0
   1799c:	d1f6      	bne.n	1798c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
   1799e:	f000 fb8f 	bl	180c0 <LoRaMacConfirmQueueGetCnt>
   179a2:	4601      	mov	r1, r0
   179a4:	b918      	cbnz	r0, 179ae <LoRaMacMlmeRequest+0x3e>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
   179a6:	2214      	movs	r2, #20
   179a8:	486a      	ldr	r0, [pc, #424]	; (17b54 <LoRaMacMlmeRequest+0x1e4>)
   179aa:	f014 f9f0 	bl	2bd8e <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   179ae:	2201      	movs	r2, #1
    queueElement.ReadyToHandle = false;
   179b0:	2100      	movs	r1, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   179b2:	4c69      	ldr	r4, [pc, #420]	; (17b58 <LoRaMacMlmeRequest+0x1e8>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   179b4:	f88d 2005 	strb.w	r2, [sp, #5]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
   179b8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   179bc:	f884 2459 	strb.w	r2, [r4, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
   179c0:	f043 0304 	orr.w	r3, r3, #4
   179c4:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    queueElement.Request = mlmeRequest->Type;
   179c8:	782b      	ldrb	r3, [r5, #0]
    queueElement.ReadyToHandle = false;
   179ca:	f8ad 1006 	strh.w	r1, [sp, #6]
    queueElement.Request = mlmeRequest->Type;
   179ce:	f88d 3004 	strb.w	r3, [sp, #4]
    switch( mlmeRequest->Type )
   179d2:	3b01      	subs	r3, #1
   179d4:	2b0b      	cmp	r3, #11
   179d6:	d807      	bhi.n	179e8 <LoRaMacMlmeRequest+0x78>
   179d8:	e8df f003 	tbb	[pc, r3]
   179dc:	78736217 	.word	0x78736217
   179e0:	88060682 	.word	0x88060682
   179e4:	a594a906 	.word	0xa594a906
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
   179e8:	2602      	movs	r6, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   179ea:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   179ee:	612b      	str	r3, [r5, #16]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
   179f0:	f000 fb66 	bl	180c0 <LoRaMacConfirmQueueGetCnt>
   179f4:	2800      	cmp	r0, #0
   179f6:	d1ca      	bne.n	1798e <LoRaMacMlmeRequest+0x1e>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   179f8:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
            MacCtx.NodeAckRequested = false;
   179fc:	f884 041a 	strb.w	r0, [r4, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
   17a00:	f360 0382 	bfi	r3, r0, #2, #1
   17a04:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
   17a08:	e7c1      	b.n	1798e <LoRaMacMlmeRequest+0x1e>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
   17a0a:	f8d4 6340 	ldr.w	r6, [r4, #832]	; 0x340
   17a0e:	f016 0620 	ands.w	r6, r6, #32
   17a12:	d1bb      	bne.n	1798c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
   17a14:	792f      	ldrb	r7, [r5, #4]
   17a16:	2f02      	cmp	r7, #2
   17a18:	d120      	bne.n	17a5c <LoRaMacMlmeRequest+0xec>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   17a1a:	4f50      	ldr	r7, [pc, #320]	; (17b5c <LoRaMacMlmeRequest+0x1ec>)
                ResetMacParameters( );
   17a1c:	f7fd fad8 	bl	14fd0 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   17a20:	4632      	mov	r2, r6
   17a22:	f995 1005 	ldrsb.w	r1, [r5, #5]
   17a26:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
   17a2a:	f015 f9fb 	bl	2ce24 <RegionAlternateDr>
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
   17a2e:	2307      	movs	r3, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
   17a30:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
                status = SendReJoinReq( JOIN_REQ );
   17a34:	20ff      	movs	r0, #255	; 0xff
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
   17a36:	f88d 3005 	strb.w	r3, [sp, #5]
                status = SendReJoinReq( JOIN_REQ );
   17a3a:	f7fd ffb9 	bl	159b0 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
   17a3e:	4606      	mov	r6, r0
   17a40:	b358      	cbz	r0, 17a9a <LoRaMacMlmeRequest+0x12a>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
   17a42:	2201      	movs	r2, #1
   17a44:	f995 1005 	ldrsb.w	r1, [r5, #5]
   17a48:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
   17a4c:	f015 f9ea 	bl	2ce24 <RegionAlternateDr>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17a50:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
   17a54:	f887 0049 	strb.w	r0, [r7, #73]	; 0x49
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17a58:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   17a5a:	e7c9      	b.n	179f0 <LoRaMacMlmeRequest+0x80>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
   17a5c:	2f01      	cmp	r7, #1
   17a5e:	d1c3      	bne.n	179e8 <LoRaMacMlmeRequest+0x78>
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   17a60:	2302      	movs	r3, #2
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   17a62:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 17b5c <LoRaMacMlmeRequest+0x1ec>
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   17a66:	a902      	add	r1, sp, #8
   17a68:	f898 0058 	ldrb.w	r0, [r8, #88]	; 0x58
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   17a6c:	f88d 3014 	strb.w	r3, [sp, #20]
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
   17a70:	f888 61a5 	strb.w	r6, [r8, #421]	; 0x1a5
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
   17a74:	f015 f96b 	bl	2cd4e <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
   17a78:	792b      	ldrb	r3, [r5, #4]
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
   17a7a:	f88d 6005 	strb.w	r6, [sp, #5]
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
   17a7e:	f888 31b8 	strb.w	r3, [r8, #440]	; 0x1b8
                MacCtx.MacCallbacks->MacProcessNotify( );
   17a82:	f8d4 3348 	ldr.w	r3, [r4, #840]	; 0x348
                queueElement.ReadyToHandle = true;
   17a86:	f88d 7006 	strb.w	r7, [sp, #6]
                MacCtx.MacCallbacks->MacProcessNotify( );
   17a8a:	68db      	ldr	r3, [r3, #12]
   17a8c:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
   17a8e:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
   17a92:	f043 0310 	orr.w	r3, r3, #16
   17a96:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17a9a:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   17a9e:	e01d      	b.n	17adc <LoRaMacMlmeRequest+0x16c>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   17aa0:	2302      	movs	r3, #2
            status = SendReJoinReq( REJOIN_REQ_0 );
   17aa2:	2000      	movs	r0, #0
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   17aa4:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
   17aa8:	f7fd ff82 	bl	159b0 <SendReJoinReq>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17aac:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
   17ab0:	4606      	mov	r6, r0
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17ab2:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   17ab4:	2800      	cmp	r0, #0
   17ab6:	d19b      	bne.n	179f0 <LoRaMacMlmeRequest+0x80>
        LoRaMacConfirmQueueAdd( &queueElement );
   17ab8:	a801      	add	r0, sp, #4
   17aba:	f000 fa51 	bl	17f60 <LoRaMacConfirmQueueAdd>
   17abe:	2600      	movs	r6, #0
   17ac0:	e765      	b.n	1798e <LoRaMacMlmeRequest+0x1e>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   17ac2:	2303      	movs	r3, #3
            status = SendReJoinReq( REJOIN_REQ_1 );
   17ac4:	2001      	movs	r0, #1
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
   17ac6:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
   17aca:	e7ed      	b.n	17aa8 <LoRaMacMlmeRequest+0x138>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17acc:	2200      	movs	r2, #0
   17ace:	4669      	mov	r1, sp
   17ad0:	2002      	movs	r0, #2
   17ad2:	f000 f935 	bl	17d40 <LoRaMacCommandsAddCmd>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17ad6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17ada:	b980      	cbnz	r0, 17afe <LoRaMacMlmeRequest+0x18e>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17adc:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   17ade:	e7eb      	b.n	17ab8 <LoRaMacMlmeRequest+0x148>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
   17ae0:	7b2a      	ldrb	r2, [r5, #12]
   17ae2:	68a9      	ldr	r1, [r5, #8]
   17ae4:	88a8      	ldrh	r0, [r5, #4]
   17ae6:	f7fe fbf3 	bl	162d0 <SetTxContinuousWave>
   17aea:	e7df      	b.n	17aac <LoRaMacMlmeRequest+0x13c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17aec:	2200      	movs	r2, #0
   17aee:	4669      	mov	r1, sp
   17af0:	200d      	movs	r0, #13
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17af2:	f000 f925 	bl	17d40 <LoRaMacCommandsAddCmd>
   17af6:	2800      	cmp	r0, #0
   17af8:	d0cf      	beq.n	17a9a <LoRaMacMlmeRequest+0x12a>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17afa:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
   17afe:	2613      	movs	r6, #19
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17b00:	612b      	str	r3, [r5, #16]
   17b02:	e775      	b.n	179f0 <LoRaMacMlmeRequest+0x80>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
   17b04:	4b15      	ldr	r3, [pc, #84]	; (17b5c <LoRaMacMlmeRequest+0x1ec>)
   17b06:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
   17b0a:	2b00      	cmp	r3, #0
   17b0c:	f47f af6c 	bne.w	179e8 <LoRaMacMlmeRequest+0x78>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
   17b10:	792e      	ldrb	r6, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
   17b12:	f006 0007 	and.w	r0, r6, #7
   17b16:	f014 fdf7 	bl	2c708 <LoRaMacClassBSetPingSlotInfo>
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
   17b1a:	2201      	movs	r2, #1
   17b1c:	4669      	mov	r1, sp
   17b1e:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
   17b20:	f88d 6000 	strb.w	r6, [sp]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
   17b24:	e7e5      	b.n	17af2 <LoRaMacMlmeRequest+0x182>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
   17b26:	2200      	movs	r2, #0
   17b28:	4669      	mov	r1, sp
   17b2a:	2012      	movs	r0, #18
   17b2c:	e7e1      	b.n	17af2 <LoRaMacMlmeRequest+0x182>
            queueElement.RestrictCommonReadyToHandle = true;
   17b2e:	f88d 2007 	strb.w	r2, [sp, #7]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
   17b32:	f014 fdda 	bl	2c6ea <LoRaMacClassBIsAcquisitionInProgress>
   17b36:	4606      	mov	r6, r0
   17b38:	b928      	cbnz	r0, 17b46 <LoRaMacMlmeRequest+0x1d6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
   17b3a:	f014 fdd3 	bl	2c6e4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
   17b3e:	4630      	mov	r0, r6
   17b40:	f014 fdd5 	bl	2c6ee <LoRaMacClassBBeaconTimerEvent>
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17b44:	e7a9      	b.n	17a9a <LoRaMacMlmeRequest+0x12a>
   17b46:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
                status = LORAMAC_STATUS_BUSY;
   17b4a:	2601      	movs	r6, #1
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17b4c:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
   17b4e:	e74f      	b.n	179f0 <LoRaMacMlmeRequest+0x80>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   17b50:	2603      	movs	r6, #3
   17b52:	e71c      	b.n	1798e <LoRaMacMlmeRequest+0x1e>
   17b54:	20030618 	.word	0x20030618
   17b58:	200301c0 	.word	0x200301c0
   17b5c:	2002fd64 	.word	0x2002fd64

00017b60 <LoRaMacMcpsRequest>:
{
   17b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( mcpsRequest == NULL )
   17b64:	4607      	mov	r7, r0
{
   17b66:	b08d      	sub	sp, #52	; 0x34
    if( mcpsRequest == NULL )
   17b68:	b920      	cbnz	r0, 17b74 <LoRaMacMcpsRequest+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   17b6a:	2203      	movs	r2, #3
}
   17b6c:	4610      	mov	r0, r2
   17b6e:	b00d      	add	sp, #52	; 0x34
   17b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
   17b74:	2300      	movs	r3, #0
   17b76:	6103      	str	r3, [r0, #16]
    if( LoRaMacIsBusy( ) == true )
   17b78:	f7fd fc1c 	bl	153b4 <LoRaMacIsBusy>
   17b7c:	4604      	mov	r4, r0
   17b7e:	2800      	cmp	r0, #0
   17b80:	f040 80b8 	bne.w	17cf4 <LoRaMacMcpsRequest+0x194>
    McpsReq_t request = *mcpsRequest;
   17b84:	463e      	mov	r6, r7
   17b86:	ad07      	add	r5, sp, #28
   17b88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   17b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   17b8c:	89bb      	ldrh	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
   17b8e:	2214      	movs	r2, #20
   17b90:	4621      	mov	r1, r4
   17b92:	4859      	ldr	r0, [pc, #356]	; (17cf8 <LoRaMacMcpsRequest+0x198>)
    McpsReq_t request = *mcpsRequest;
   17b94:	783e      	ldrb	r6, [r7, #0]
   17b96:	f997 b00e 	ldrsb.w	fp, [r7, #14]
   17b9a:	9301      	str	r3, [sp, #4]
    macHdr.Value = 0;
   17b9c:	f88d 4008 	strb.w	r4, [sp, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
   17ba0:	f014 f8f5 	bl	2bd8e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   17ba4:	2201      	movs	r2, #1
   17ba6:	f8df 8154 	ldr.w	r8, [pc, #340]	; 17cfc <LoRaMacMcpsRequest+0x19c>
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
   17baa:	4d55      	ldr	r5, [pc, #340]	; (17d00 <LoRaMacMcpsRequest+0x1a0>)
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
   17bac:	f888 2445 	strb.w	r2, [r8, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
   17bb0:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
   17bb4:	2a02      	cmp	r2, #2
   17bb6:	d111      	bne.n	17bdc <LoRaMacMcpsRequest+0x7c>
   17bb8:	f895 21a0 	ldrb.w	r2, [r5, #416]	; 0x1a0
   17bbc:	2a02      	cmp	r2, #2
   17bbe:	d10d      	bne.n	17bdc <LoRaMacMcpsRequest+0x7c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
   17bc0:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
   17bc4:	b952      	cbnz	r2, 17bdc <LoRaMacMcpsRequest+0x7c>
    switch( request.Type )
   17bc6:	2e01      	cmp	r6, #1
   17bc8:	d947      	bls.n	17c5a <LoRaMacMcpsRequest+0xfa>
   17bca:	2e03      	cmp	r6, #3
   17bcc:	d052      	beq.n	17c74 <LoRaMacMcpsRequest+0x114>
   17bce:	2e01      	cmp	r6, #1
   17bd0:	bf38      	it	cc
   17bd2:	2601      	movcc	r6, #1
   17bd4:	46a3      	mov	fp, r4
    uint8_t fPort = 0;
   17bd6:	f04f 0900 	mov.w	r9, #0
            break;
   17bda:	e011      	b.n	17c00 <LoRaMacMcpsRequest+0xa0>
    switch( request.Type )
   17bdc:	2e01      	cmp	r6, #1
   17bde:	d03c      	beq.n	17c5a <LoRaMacMcpsRequest+0xfa>
   17be0:	2e03      	cmp	r6, #3
   17be2:	d047      	beq.n	17c74 <LoRaMacMcpsRequest+0x114>
   17be4:	2e00      	cmp	r6, #0
   17be6:	d155      	bne.n	17c94 <LoRaMacMcpsRequest+0x134>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   17be8:	2102      	movs	r1, #2
   17bea:	f89d 2008 	ldrb.w	r2, [sp, #8]
            fPort = request.Req.Unconfirmed.fPort;
   17bee:	f89d 9020 	ldrb.w	r9, [sp, #32]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   17bf2:	f361 1247 	bfi	r2, r1, #5, #3
            fBuffer = request.Req.Unconfirmed.fBuffer;
   17bf6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
   17bfa:	f88d 2008 	strb.w	r2, [sp, #8]
            readyToSend = true;
   17bfe:	2401      	movs	r4, #1
    getPhy.Attribute = PHY_MIN_TX_DR;
   17c00:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17c02:	f895 108c 	ldrb.w	r1, [r5, #140]	; 0x8c
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17c06:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17c0a:	f88d 1016 	strb.w	r1, [sp, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17c0e:	a905      	add	r1, sp, #20
    getPhy.Attribute = PHY_MIN_TX_DR;
   17c10:	f88d 2014 	strb.w	r2, [sp, #20]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
   17c14:	f015 f88b 	bl	2cd2e <RegionGetPhyParam>
    if( ( adr == true ) &&
   17c18:	f895 31a2 	ldrb.w	r3, [r5, #418]	; 0x1a2
   17c1c:	2202      	movs	r2, #2
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
   17c1e:	f895 c1b8 	ldrb.w	ip, [r5, #440]	; 0x1b8
   17c22:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
   17c26:	b240      	sxtb	r0, r0
    if( ( adr == true ) &&
   17c28:	bbc3      	cbnz	r3, 17c9c <LoRaMacMcpsRequest+0x13c>
    if( readyToSend == true )
   17c2a:	2c00      	cmp	r4, #0
   17c2c:	d03c      	beq.n	17ca8 <LoRaMacMcpsRequest+0x148>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
   17c2e:	4558      	cmp	r0, fp
   17c30:	bfb8      	it	lt
   17c32:	4658      	movlt	r0, fp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17c34:	f895 308c 	ldrb.w	r3, [r5, #140]	; 0x8c
            verify.DatarateParams.Datarate = datarate;
   17c38:	f88d 0010 	strb.w	r0, [sp, #16]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17c3c:	2205      	movs	r2, #5
   17c3e:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
   17c42:	a904      	add	r1, sp, #16
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
   17c44:	f88d 3012 	strb.w	r3, [sp, #18]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
   17c48:	f015 f887 	bl	2cd5a <RegionVerify>
   17c4c:	2800      	cmp	r0, #0
   17c4e:	d08c      	beq.n	17b6a <LoRaMacMcpsRequest+0xa>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
   17c50:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17c54:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
   17c58:	e02c      	b.n	17cb4 <LoRaMacMcpsRequest+0x154>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17c5a:	2104      	movs	r1, #4
   17c5c:	f89d 2008 	ldrb.w	r2, [sp, #8]
            break;
   17c60:	2601      	movs	r6, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17c62:	f361 1247 	bfi	r2, r1, #5, #3
            fPort = request.Req.Confirmed.fPort;
   17c66:	f89d 9020 	ldrb.w	r9, [sp, #32]
            fBuffer = request.Req.Confirmed.fBuffer;
   17c6a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
   17c6e:	f88d 2008 	strb.w	r2, [sp, #8]
            break;
   17c72:	e7c4      	b.n	17bfe <LoRaMacMcpsRequest+0x9e>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
   17c74:	f89d 3008 	ldrb.w	r3, [sp, #8]
            break;
   17c78:	2603      	movs	r6, #3
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
   17c7a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
   17c7e:	f88d 3008 	strb.w	r3, [sp, #8]
            fBufferSize = request.Req.Proprietary.fBufferSize;
   17c82:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            readyToSend = true;
   17c86:	2401      	movs	r4, #1
            fBuffer = request.Req.Proprietary.fBuffer;
   17c88:	f8dd a020 	ldr.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
   17c8c:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            fBufferSize = request.Req.Proprietary.fBufferSize;
   17c90:	9301      	str	r3, [sp, #4]
            break;
   17c92:	e7a0      	b.n	17bd6 <LoRaMacMcpsRequest+0x76>
    switch( request.Type )
   17c94:	f04f 0b00 	mov.w	fp, #0
   17c98:	46d9      	mov	r9, fp
   17c9a:	e7b1      	b.n	17c00 <LoRaMacMcpsRequest+0xa0>
    if( ( adr == true ) &&
   17c9c:	f1bc 0f01 	cmp.w	ip, #1
   17ca0:	d106      	bne.n	17cb0 <LoRaMacMcpsRequest+0x150>
        ( activation == ACTIVATION_TYPE_ABP ) &&
   17ca2:	b929      	cbnz	r1, 17cb0 <LoRaMacMcpsRequest+0x150>
    if( readyToSend == true )
   17ca4:	2c00      	cmp	r4, #0
   17ca6:	d1c5      	bne.n	17c34 <LoRaMacMcpsRequest+0xd4>
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
   17ca8:	f8d8 34fc 	ldr.w	r3, [r8, #1276]	; 0x4fc
   17cac:	613b      	str	r3, [r7, #16]
    return status;
   17cae:	e75d      	b.n	17b6c <LoRaMacMcpsRequest+0xc>
    if( readyToSend == true )
   17cb0:	2c00      	cmp	r4, #0
   17cb2:	d0f9      	beq.n	17ca8 <LoRaMacMcpsRequest+0x148>
        LoRaMacHandleResponseTimeout( REGION_COMMON_CLASS_B_C_RESP_TIMEOUT,
   17cb4:	f8d8 0500 	ldr.w	r0, [r8, #1280]	; 0x500
    if( startTimeInMs != 0 )
   17cb8:	b138      	cbz	r0, 17cca <LoRaMacMcpsRequest+0x16a>
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
   17cba:	f014 f970 	bl	2bf9e <TimerGetElapsedTime>
        if( elapsedTime > timeoutInMs )
   17cbe:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
            Nvm.MacGroup1.SrvAckRequested = false;
   17cc2:	bf84      	itt	hi
   17cc4:	2300      	movhi	r3, #0
   17cc6:	f885 304a 	strbhi.w	r3, [r5, #74]	; 0x4a
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
   17cca:	4652      	mov	r2, sl
   17ccc:	4649      	mov	r1, r9
   17cce:	9b01      	ldr	r3, [sp, #4]
   17cd0:	a802      	add	r0, sp, #8
   17cd2:	f7fd fded 	bl	158b0 <Send>
        if( status == LORAMAC_STATUS_OK )
   17cd6:	4602      	mov	r2, r0
   17cd8:	b940      	cbnz	r0, 17cec <LoRaMacMcpsRequest+0x18c>
            MacCtx.MacFlags.Bits.McpsReq = 1;
   17cda:	f898 348d 	ldrb.w	r3, [r8, #1165]	; 0x48d
            MacCtx.McpsConfirm.McpsRequest = request.Type;
   17cde:	f888 6444 	strb.w	r6, [r8, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
   17ce2:	f043 0301 	orr.w	r3, r3, #1
   17ce6:	f888 348d 	strb.w	r3, [r8, #1165]	; 0x48d
   17cea:	e7dd      	b.n	17ca8 <LoRaMacMcpsRequest+0x148>
            MacCtx.NodeAckRequested = false;
   17cec:	2300      	movs	r3, #0
   17cee:	f888 341a 	strb.w	r3, [r8, #1050]	; 0x41a
   17cf2:	e7d9      	b.n	17ca8 <LoRaMacMcpsRequest+0x148>
        return LORAMAC_STATUS_BUSY;
   17cf4:	2201      	movs	r2, #1
   17cf6:	e739      	b.n	17b6c <LoRaMacMcpsRequest+0xc>
   17cf8:	20030604 	.word	0x20030604
   17cfc:	200301c0 	.word	0x200301c0
   17d00:	2002fd64 	.word	0x2002fd64

00017d04 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
   17d04:	2801      	cmp	r0, #1
   17d06:	d009      	beq.n	17d1c <IsSticky+0x18>
   17d08:	3805      	subs	r0, #5
   17d0a:	b2c3      	uxtb	r3, r0
   17d0c:	2b1b      	cmp	r3, #27
   17d0e:	d804      	bhi.n	17d1a <IsSticky+0x16>
   17d10:	4803      	ldr	r0, [pc, #12]	; (17d20 <IsSticky+0x1c>)
   17d12:	40d8      	lsrs	r0, r3
   17d14:	f000 0001 	and.w	r0, r0, #1
   17d18:	4770      	bx	lr
   17d1a:	2000      	movs	r0, #0
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
            return true;
        default:
            return false;
    }
}
   17d1c:	4770      	bx	lr
   17d1e:	bf00      	nop
   17d20:	08001079 	.word	0x08001079

00017d24 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
   17d24:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
   17d26:	4c05      	ldr	r4, [pc, #20]	; (17d3c <LoRaMacCommandsInit+0x18>)
   17d28:	f44f 7203 	mov.w	r2, #524	; 0x20c
   17d2c:	4620      	mov	r0, r4
   17d2e:	2100      	movs	r1, #0
   17d30:	f014 f82d 	bl	2bd8e <memset1>
    list->First = NULL;
   17d34:	2000      	movs	r0, #0
    list->Last = NULL;
   17d36:	e9c4 0000 	strd	r0, r0, [r4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
   17d3a:	bd10      	pop	{r4, pc}
   17d3c:	20030744 	.word	0x20030744

00017d40 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
   17d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d44:	4680      	mov	r8, r0
   17d46:	4616      	mov	r6, r2
    if( payload == NULL )
   17d48:	b379      	cbz	r1, 17daa <LoRaMacCommandsAddCmd+0x6a>
   17d4a:	2320      	movs	r3, #32
   17d4c:	4c18      	ldr	r4, [pc, #96]	; (17db0 <LoRaMacCommandsAddCmd+0x70>)
   17d4e:	4622      	mov	r2, r4
   17d50:	f104 0010 	add.w	r0, r4, #16
        if( mem[size] != 0x00 )
   17d54:	f812 7f01 	ldrb.w	r7, [r2, #1]!
   17d58:	bb07      	cbnz	r7, 17d9c <LoRaMacCommandsAddCmd+0x5c>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
   17d5a:	4282      	cmp	r2, r0
   17d5c:	d1fa      	bne.n	17d54 <LoRaMacCommandsAddCmd+0x14>
    if( list->First == NULL )
   17d5e:	4d15      	ldr	r5, [pc, #84]	; (17db4 <LoRaMacCommandsAddCmd+0x74>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
   17d60:	3401      	adds	r4, #1
    if( list->First == NULL )
   17d62:	682b      	ldr	r3, [r5, #0]
   17d64:	b903      	cbnz	r3, 17d68 <LoRaMacCommandsAddCmd+0x28>
        list->First = element;
   17d66:	602c      	str	r4, [r5, #0]
    if( list->Last )
   17d68:	686b      	ldr	r3, [r5, #4]
   17d6a:	b103      	cbz	r3, 17d6e <LoRaMacCommandsAddCmd+0x2e>
        list->Last->Next = element;
   17d6c:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
   17d6e:	2300      	movs	r3, #0
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17d70:	1d60      	adds	r0, r4, #5
    element->Next = NULL;
   17d72:	6023      	str	r3, [r4, #0]
    newCmd->PayloadSize = payloadSize;
   17d74:	60a6      	str	r6, [r4, #8]
    list->Last = element;
   17d76:	606c      	str	r4, [r5, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17d78:	b2b2      	uxth	r2, r6
    newCmd->CID = cid;
   17d7a:	f884 8004 	strb.w	r8, [r4, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
   17d7e:	f013 fff2 	bl	2bd66 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
   17d82:	4640      	mov	r0, r8
   17d84:	f7ff ffbe 	bl	17d04 <IsSticky>
   17d88:	7320      	strb	r0, [r4, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
   17d8a:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
   17d8e:	3301      	adds	r3, #1
   17d90:	4433      	add	r3, r6
   17d92:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
}
   17d96:	4638      	mov	r0, r7
   17d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
   17d9c:	3b01      	subs	r3, #1
   17d9e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   17da2:	4604      	mov	r4, r0
   17da4:	d1d3      	bne.n	17d4e <LoRaMacCommandsAddCmd+0xe>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
   17da6:	2702      	movs	r7, #2
   17da8:	e7f5      	b.n	17d96 <LoRaMacCommandsAddCmd+0x56>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17daa:	2701      	movs	r7, #1
   17dac:	e7f3      	b.n	17d96 <LoRaMacCommandsAddCmd+0x56>
   17dae:	bf00      	nop
   17db0:	2003074b 	.word	0x2003074b
   17db4:	20030744 	.word	0x20030744

00017db8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
   17db8:	b510      	push	{r4, lr}
    if( macCmd == NULL )
   17dba:	b320      	cbz	r0, 17e06 <LoRaMacCommandsRemoveCmd+0x4e>
    curElement = list->First;
   17dbc:	4b14      	ldr	r3, [pc, #80]	; (17e10 <LoRaMacCommandsRemoveCmd+0x58>)
    if( list->Last == element )
   17dbe:	e9d3 2100 	ldrd	r2, r1, [r3]
    if( element != curElement )
   17dc2:	4290      	cmp	r0, r2
   17dc4:	d115      	bne.n	17df2 <LoRaMacCommandsRemoveCmd+0x3a>
        list->First = element->Next;
   17dc6:	6802      	ldr	r2, [r0, #0]
    if( list->Last == element )
   17dc8:	4288      	cmp	r0, r1
        list->First = element->Next;
   17dca:	601a      	str	r2, [r3, #0]
    if( list->Last == element )
   17dcc:	d101      	bne.n	17dd2 <LoRaMacCommandsRemoveCmd+0x1a>
        list->Last = PrevElement;
   17dce:	2200      	movs	r2, #0
   17dd0:	605a      	str	r2, [r3, #4]
    element->Next = NULL;
   17dd2:	2400      	movs	r4, #0
   17dd4:	6004      	str	r4, [r0, #0]
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
   17dd6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   17dda:	6881      	ldr	r1, [r0, #8]
   17ddc:	3a01      	subs	r2, #1
   17dde:	1a52      	subs	r2, r2, r1
   17de0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
   17de4:	4621      	mov	r1, r4
   17de6:	2210      	movs	r2, #16
   17de8:	f013 ffd1 	bl	2bd8e <memset1>
    return true;
   17dec:	4620      	mov	r0, r4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17dee:	bd10      	pop	{r4, pc}
   17df0:	4622      	mov	r2, r4
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
   17df2:	b152      	cbz	r2, 17e0a <LoRaMacCommandsRemoveCmd+0x52>
   17df4:	6814      	ldr	r4, [r2, #0]
   17df6:	42a0      	cmp	r0, r4
   17df8:	d1fa      	bne.n	17df0 <LoRaMacCommandsRemoveCmd+0x38>
    if( list->Last == element )
   17dfa:	4288      	cmp	r0, r1
   17dfc:	d100      	bne.n	17e00 <LoRaMacCommandsRemoveCmd+0x48>
        list->Last = PrevElement;
   17dfe:	605a      	str	r2, [r3, #4]
        PrevElement->Next = element->Next;
   17e00:	6801      	ldr	r1, [r0, #0]
   17e02:	6011      	str	r1, [r2, #0]
   17e04:	e7e5      	b.n	17dd2 <LoRaMacCommandsRemoveCmd+0x1a>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17e06:	2001      	movs	r0, #1
   17e08:	e7f1      	b.n	17dee <LoRaMacCommandsRemoveCmd+0x36>
    if( list->Last == element )
   17e0a:	4288      	cmp	r0, r1
   17e0c:	d0e0      	beq.n	17dd0 <LoRaMacCommandsRemoveCmd+0x18>
   17e0e:	e7e0      	b.n	17dd2 <LoRaMacCommandsRemoveCmd+0x1a>
   17e10:	20030744 	.word	0x20030744

00017e14 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17e14:	4b05      	ldr	r3, [pc, #20]	; (17e2c <LoRaMacCommandsGetCmd+0x18>)

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
    {
        curElement = curElement->Next;
   17e16:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
   17e18:	b113      	cbz	r3, 17e20 <LoRaMacCommandsGetCmd+0xc>
   17e1a:	791a      	ldrb	r2, [r3, #4]
   17e1c:	4282      	cmp	r2, r0
   17e1e:	d1fa      	bne.n	17e16 <LoRaMacCommandsGetCmd+0x2>
    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
   17e20:	2b00      	cmp	r3, #0
}
   17e22:	bf0c      	ite	eq
   17e24:	2003      	moveq	r0, #3
   17e26:	2000      	movne	r0, #0
    *macCmd = curElement;
   17e28:	600b      	str	r3, [r1, #0]
}
   17e2a:	4770      	bx	lr
   17e2c:	20030744 	.word	0x20030744

00017e30 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
   17e30:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17e32:	4b05      	ldr	r3, [pc, #20]	; (17e48 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>)
   17e34:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
   17e36:	b900      	cbnz	r0, 17e3a <LoRaMacCommandsRemoveNoneStickyCmds+0xa>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17e38:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
   17e3a:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
   17e3c:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
   17e3e:	b90b      	cbnz	r3, 17e44 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            LoRaMacCommandsRemoveCmd( curElement );
   17e40:	f7ff ffba 	bl	17db8 <LoRaMacCommandsRemoveCmd>
{
   17e44:	4620      	mov	r0, r4
   17e46:	e7f6      	b.n	17e36 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
   17e48:	20030744 	.word	0x20030744

00017e4c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
   17e4c:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
   17e4e:	4b07      	ldr	r3, [pc, #28]	; (17e6c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>)
   17e50:	681a      	ldr	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
   17e52:	b90a      	cbnz	r2, 17e58 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
   17e54:	4610      	mov	r0, r2
   17e56:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
   17e58:	7910      	ldrb	r0, [r2, #4]
        nexElement = curElement->Next;
   17e5a:	6814      	ldr	r4, [r2, #0]
        if( IsSticky( curElement->CID ) == true )
   17e5c:	f7ff ff52 	bl	17d04 <IsSticky>
   17e60:	b110      	cbz	r0, 17e68 <LoRaMacCommandsRemoveStickyAnsCmds+0x1c>
            LoRaMacCommandsRemoveCmd( curElement );
   17e62:	4610      	mov	r0, r2
   17e64:	f7ff ffa8 	bl	17db8 <LoRaMacCommandsRemoveCmd>
{
   17e68:	4622      	mov	r2, r4
   17e6a:	e7f2      	b.n	17e52 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
   17e6c:	20030744 	.word	0x20030744

00017e70 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
   17e70:	b128      	cbz	r0, 17e7e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
   17e72:	4b04      	ldr	r3, [pc, #16]	; (17e84 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
   17e74:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
   17e78:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
   17e7a:	2000      	movs	r0, #0
   17e7c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
   17e7e:	2001      	movs	r0, #1
}
   17e80:	4770      	bx	lr
   17e82:	bf00      	nop
   17e84:	20030744 	.word	0x20030744

00017e88 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
   17e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e8c:	4607      	mov	r7, r0
   17e8e:	460e      	mov	r6, r1
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
   17e90:	4615      	mov	r5, r2
   17e92:	b342      	cbz	r2, 17ee6 <LoRaMacCommandsSerializeCmds+0x5e>
   17e94:	b339      	cbz	r1, 17ee6 <LoRaMacCommandsSerializeCmds+0x5e>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
   17e96:	4b15      	ldr	r3, [pc, #84]	; (17eec <LoRaMacCommandsSerializeCmds+0x64>)
   17e98:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
   17e9a:	2300      	movs	r3, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
   17e9c:	b92c      	cbnz	r4, 17eaa <LoRaMacCommandsSerializeCmds+0x22>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
   17e9e:	4630      	mov	r0, r6
   17ea0:	f7ff ffe6 	bl	17e70 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
   17ea4:	2000      	movs	r0, #0
}
   17ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
   17eaa:	68a2      	ldr	r2, [r4, #8]
   17eac:	1af9      	subs	r1, r7, r3
   17eae:	3201      	adds	r2, #1
   17eb0:	4291      	cmp	r1, r2
   17eb2:	d315      	bcc.n	17ee0 <LoRaMacCommandsSerializeCmds+0x58>
            buffer[itr++] = curElement->CID;
   17eb4:	7922      	ldrb	r2, [r4, #4]
   17eb6:	1c58      	adds	r0, r3, #1
   17eb8:	54ea      	strb	r2, [r5, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
   17eba:	8922      	ldrh	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
   17ebc:	fa5f f880 	uxtb.w	r8, r0
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
   17ec0:	1d61      	adds	r1, r4, #5
   17ec2:	fa55 f080 	uxtab	r0, r5, r0
   17ec6:	f013 ff4e 	bl	2bd66 <memcpy1>
            itr += curElement->PayloadSize;
   17eca:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
   17ecc:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
   17ece:	4498      	add	r8, r3
   17ed0:	fa5f f388 	uxtb.w	r3, r8
        curElement = curElement->Next;
   17ed4:	e7e2      	b.n	17e9c <LoRaMacCommandsSerializeCmds+0x14>
        nextElement = curElement->Next;
   17ed6:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
   17ed8:	4620      	mov	r0, r4
   17eda:	f7ff ff6d 	bl	17db8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
   17ede:	462c      	mov	r4, r5
    while( curElement != NULL )
   17ee0:	2c00      	cmp	r4, #0
   17ee2:	d1f8      	bne.n	17ed6 <LoRaMacCommandsSerializeCmds+0x4e>
   17ee4:	e7db      	b.n	17e9e <LoRaMacCommandsSerializeCmds+0x16>
        return LORAMAC_COMMANDS_ERROR_NPE;
   17ee6:	2001      	movs	r0, #1
   17ee8:	e7dd      	b.n	17ea6 <LoRaMacCommandsSerializeCmds+0x1e>
   17eea:	bf00      	nop
   17eec:	20030744 	.word	0x20030744

00017ef0 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
   17ef0:	3801      	subs	r0, #1
   17ef2:	b2c0      	uxtb	r0, r0
   17ef4:	281f      	cmp	r0, #31
   17ef6:	bf9a      	itte	ls
   17ef8:	4b01      	ldrls	r3, [pc, #4]	; (17f00 <LoRaMacCommandsGetCmdSize+0x10>)
   17efa:	5c18      	ldrbls	r0, [r3, r0]
{
   17efc:	2000      	movhi	r0, #0
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
   17efe:	4770      	bx	lr
   17f00:	0003694b 	.word	0x0003694b

00017f04 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17f04:	b530      	push	{r4, r5, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17f06:	4b0b      	ldr	r3, [pc, #44]	; (17f34 <GetElement.constprop.0+0x30>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17f08:	4604      	mov	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17f0a:	f893 2020 	ldrb.w	r2, [r3, #32]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
   17f0e:	4608      	mov	r0, r1
    if( count == 0 )
   17f10:	b172      	cbz	r2, 17f30 <GetElement.constprop.0+0x2c>
   17f12:	2100      	movs	r1, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17f14:	331c      	adds	r3, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
   17f16:	7805      	ldrb	r5, [r0, #0]
   17f18:	42a5      	cmp	r5, r4
   17f1a:	d008      	beq.n	17f2e <GetElement.constprop.0+0x2a>
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17f1c:	3101      	adds	r1, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17f1e:	4298      	cmp	r0, r3
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17f20:	b2cd      	uxtb	r5, r1
        bufferPointer++;
   17f22:	bf14      	ite	ne
   17f24:	3004      	addne	r0, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17f26:	3810      	subeq	r0, #16
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
   17f28:	42aa      	cmp	r2, r5
   17f2a:	d8f4      	bhi.n	17f16 <GetElement.constprop.0+0x12>
        return NULL;
   17f2c:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
   17f2e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   17f30:	4610      	mov	r0, r2
   17f32:	e7fc      	b.n	17f2e <GetElement.constprop.0+0x2a>
   17f34:	20030950 	.word	0x20030950

00017f38 <LoRaMacConfirmQueueInit>:
void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
    ConfirmQueueCtx.Primitives = primitives;

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
   17f38:	2300      	movs	r3, #0
{
   17f3a:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
   17f3c:	4c07      	ldr	r4, [pc, #28]	; (17f5c <LoRaMacConfirmQueueInit+0x24>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17f3e:	2214      	movs	r2, #20
    ConfirmQueueCtx.Primitives = primitives;
   17f40:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17f42:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17f44:	f104 000c 	add.w	r0, r4, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
   17f48:	f884 3020 	strb.w	r3, [r4, #32]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17f4c:	e9c4 0001 	strd	r0, r0, [r4, #4]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
   17f50:	f013 ff1d 	bl	2bd8e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
   17f54:	2301      	movs	r3, #1
   17f56:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
   17f5a:	bd10      	pop	{r4, pc}
   17f5c:	20030950 	.word	0x20030950

00017f60 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17f60:	4b11      	ldr	r3, [pc, #68]	; (17fa8 <LoRaMacConfirmQueueAdd+0x48>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
   17f62:	f893 2020 	ldrb.w	r2, [r3, #32]
   17f66:	2a04      	cmp	r2, #4
   17f68:	d81b      	bhi.n	17fa2 <LoRaMacConfirmQueueAdd+0x42>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
   17f6a:	7801      	ldrb	r1, [r0, #0]
   17f6c:	689a      	ldr	r2, [r3, #8]
   17f6e:	7011      	strb	r1, [r2, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
   17f70:	7841      	ldrb	r1, [r0, #1]
   17f72:	689a      	ldr	r2, [r3, #8]
   17f74:	7051      	strb	r1, [r2, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
   17f76:	78c1      	ldrb	r1, [r0, #3]
   17f78:	689a      	ldr	r2, [r3, #8]
   17f7a:	70d1      	strb	r1, [r2, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
   17f7c:	7881      	ldrb	r1, [r0, #2]
   17f7e:	689a      	ldr	r2, [r3, #8]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17f80:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
   17f82:	7091      	strb	r1, [r2, #2]
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
   17f84:	f893 2020 	ldrb.w	r2, [r3, #32]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17f88:	f103 011c 	add.w	r1, r3, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
   17f8c:	3201      	adds	r2, #1
   17f8e:	f883 2020 	strb.w	r2, [r3, #32]
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17f92:	689a      	ldr	r2, [r3, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17f94:	428a      	cmp	r2, r1
        bufferPointer++;
   17f96:	bf14      	ite	ne
   17f98:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17f9a:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
   17f9e:	609a      	str	r2, [r3, #8]

    return true;
   17fa0:	4770      	bx	lr
        return false;
   17fa2:	2000      	movs	r0, #0
}
   17fa4:	4770      	bx	lr
   17fa6:	bf00      	nop
   17fa8:	20030950 	.word	0x20030950

00017fac <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   17fac:	4b08      	ldr	r3, [pc, #32]	; (17fd0 <LoRaMacConfirmQueueRemoveFirst+0x24>)
   17fae:	f893 0020 	ldrb.w	r0, [r3, #32]
    if( count == 0 )
   17fb2:	b160      	cbz	r0, 17fce <LoRaMacConfirmQueueRemoveFirst+0x22>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
   17fb4:	3801      	subs	r0, #1
   17fb6:	f883 0020 	strb.w	r0, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );

    return true;
   17fba:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
   17fbc:	685a      	ldr	r2, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   17fbe:	f103 011c 	add.w	r1, r3, #28
   17fc2:	428a      	cmp	r2, r1
        bufferPointer++;
   17fc4:	bf14      	ite	ne
   17fc6:	3204      	addne	r2, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   17fc8:	f103 020c 	addeq.w	r2, r3, #12
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
   17fcc:	605a      	str	r2, [r3, #4]
}
   17fce:	4770      	bx	lr
   17fd0:	20030950 	.word	0x20030950

00017fd4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
   17fd4:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
   17fd6:	4b07      	ldr	r3, [pc, #28]	; (17ff4 <LoRaMacConfirmQueueSetStatus+0x20>)
{
   17fd8:	4604      	mov	r4, r0
    if( count == 0 )
   17fda:	f893 2020 	ldrb.w	r2, [r3, #32]
{
   17fde:	4608      	mov	r0, r1
    if( count == 0 )
   17fe0:	b132      	cbz	r2, 17ff0 <LoRaMacConfirmQueueSetStatus+0x1c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
   17fe2:	6859      	ldr	r1, [r3, #4]
   17fe4:	f7ff ff8e 	bl	17f04 <GetElement.constprop.0>
        if( element != NULL )
   17fe8:	b110      	cbz	r0, 17ff0 <LoRaMacConfirmQueueSetStatus+0x1c>
        {
            element->Status = status;
            element->ReadyToHandle = true;
   17fea:	2301      	movs	r3, #1
            element->Status = status;
   17fec:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
   17fee:	7083      	strb	r3, [r0, #2]
        }
    }
}
   17ff0:	bd10      	pop	{r4, pc}
   17ff2:	bf00      	nop
   17ff4:	20030950 	.word	0x20030950

00017ff8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
   17ff8:	b508      	push	{r3, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
   17ffa:	4b06      	ldr	r3, [pc, #24]	; (18014 <LoRaMacConfirmQueueGetStatus+0x1c>)
    if( count == 0 )
   17ffc:	f893 2020 	ldrb.w	r2, [r3, #32]
   18000:	b12a      	cbz	r2, 1800e <LoRaMacConfirmQueueGetStatus+0x16>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
   18002:	6859      	ldr	r1, [r3, #4]
   18004:	f7ff ff7e 	bl	17f04 <GetElement.constprop.0>
        if( element != NULL )
   18008:	b108      	cbz	r0, 1800e <LoRaMacConfirmQueueGetStatus+0x16>
        {
            return element->Status;
   1800a:	7840      	ldrb	r0, [r0, #1]
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
}
   1800c:	bd08      	pop	{r3, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
   1800e:	2001      	movs	r0, #1
   18010:	e7fc      	b.n	1800c <LoRaMacConfirmQueueGetStatus+0x14>
   18012:	bf00      	nop
   18014:	20030950 	.word	0x20030950

00018018 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
   18018:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
   1801a:	4a0b      	ldr	r2, [pc, #44]	; (18048 <LoRaMacConfirmQueueSetStatusCmn+0x30>)
    if( count == 0 )
   1801c:	f892 1020 	ldrb.w	r1, [r2, #32]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
   18020:	6853      	ldr	r3, [r2, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
   18022:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
    if( count == 0 )
   18026:	b169      	cbz	r1, 18044 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
   18028:	2501      	movs	r5, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   1802a:	f102 041c 	add.w	r4, r2, #28
            if( element->RestrictCommonReadyToHandle == false )
   1802e:	78d9      	ldrb	r1, [r3, #3]
            element->Status = status;
   18030:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
   18032:	b901      	cbnz	r1, 18036 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
                element->ReadyToHandle = true;
   18034:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
   18036:	42a3      	cmp	r3, r4
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
   18038:	6891      	ldr	r1, [r2, #8]
        bufferPointer++;
   1803a:	bf14      	ite	ne
   1803c:	3304      	addne	r3, #4
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
   1803e:	3b10      	subeq	r3, #16
        }while( element != ConfirmQueueCtx.BufferEnd );
   18040:	4299      	cmp	r1, r3
   18042:	d1f4      	bne.n	1802e <LoRaMacConfirmQueueSetStatusCmn+0x16>
    }
}
   18044:	bd30      	pop	{r4, r5, pc}
   18046:	bf00      	nop
   18048:	20030950 	.word	0x20030950

0001804c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
   1804c:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
   1804e:	4b04      	ldr	r3, [pc, #16]	; (18060 <LoRaMacConfirmQueueIsCmdActive+0x14>)
   18050:	6859      	ldr	r1, [r3, #4]
   18052:	f7ff ff57 	bl	17f04 <GetElement.constprop.0>
    {
        return true;
    }
    return false;
}
   18056:	3800      	subs	r0, #0
   18058:	bf18      	it	ne
   1805a:	2001      	movne	r0, #1
   1805c:	bd08      	pop	{r3, pc}
   1805e:	bf00      	nop
   18060:	20030950 	.word	0x20030950

00018064 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
   18064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18066:	4604      	mov	r4, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
   18068:	2600      	movs	r6, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
   1806a:	4d14      	ldr	r5, [pc, #80]	; (180bc <LoRaMacConfirmQueueHandleCb+0x58>)
   1806c:	f895 7020 	ldrb.w	r7, [r5, #32]
    for( uint8_t i = 0; i < nbElements; i++ )
   18070:	b2f3      	uxtb	r3, r6
   18072:	429f      	cmp	r7, r3
   18074:	d801      	bhi.n	1807a <LoRaMacConfirmQueueHandleCb+0x16>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
   18076:	b003      	add	sp, #12
   18078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
   1807a:	686b      	ldr	r3, [r5, #4]
   1807c:	781b      	ldrb	r3, [r3, #0]
   1807e:	7023      	strb	r3, [r4, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
   18080:	686b      	ldr	r3, [r5, #4]
   18082:	785b      	ldrb	r3, [r3, #1]
   18084:	7063      	strb	r3, [r4, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
   18086:	686b      	ldr	r3, [r5, #4]
        if( readyToHandle == true )
   18088:	789a      	ldrb	r2, [r3, #2]
   1808a:	b13a      	cbz	r2, 1809c <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
   1808c:	682b      	ldr	r3, [r5, #0]
   1808e:	4620      	mov	r0, r4
   18090:	689b      	ldr	r3, [r3, #8]
   18092:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
   18094:	f7ff ff8a 	bl	17fac <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
   18098:	3601      	adds	r6, #1
   1809a:	e7e9      	b.n	18070 <LoRaMacConfirmQueueHandleCb+0xc>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
   1809c:	781a      	ldrb	r2, [r3, #0]
   1809e:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
   180a2:	785a      	ldrb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
   180a4:	78db      	ldrb	r3, [r3, #3]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
   180a6:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
   180aa:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacConfirmQueueRemoveFirst( );
   180ae:	f7ff ff7d 	bl	17fac <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
   180b2:	a801      	add	r0, sp, #4
   180b4:	f7ff ff54 	bl	17f60 <LoRaMacConfirmQueueAdd>
   180b8:	e7ee      	b.n	18098 <LoRaMacConfirmQueueHandleCb+0x34>
   180ba:	bf00      	nop
   180bc:	20030950 	.word	0x20030950

000180c0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
   180c0:	4b01      	ldr	r3, [pc, #4]	; (180c8 <LoRaMacConfirmQueueGetCnt+0x8>)
   180c2:	f893 0020 	ldrb.w	r0, [r3, #32]
   180c6:	4770      	bx	lr
   180c8:	20030950 	.word	0x20030950

000180cc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
   180cc:	4b03      	ldr	r3, [pc, #12]	; (180dc <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
   180ce:	f893 0020 	ldrb.w	r0, [r3, #32]
    }
    else
    {
        return false;
    }
}
   180d2:	2804      	cmp	r0, #4
   180d4:	bf94      	ite	ls
   180d6:	2000      	movls	r0, #0
   180d8:	2001      	movhi	r0, #1
   180da:	4770      	bx	lr
   180dc:	20030950 	.word	0x20030950

000180e0 <FOptsEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t FOptsEncrypt( uint16_t size, uint32_t address, uint8_t dir, FCntIdentifier_t fCntID, uint32_t frameCounter, uint8_t* buffer )
{
   180e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    uint8_t bufferIndex = 0;
    uint8_t sBlock[16] = { 0 };
   180e2:	2400      	movs	r4, #0
    uint8_t aBlock[16] = { 0 };

    aBlock[0] = 0x01;
   180e4:	f04f 0c01 	mov.w	ip, #1
{
   180e8:	b089      	sub	sp, #36	; 0x24
   180ea:	4606      	mov	r6, r0
   180ec:	e9dd 570e 	ldrd	r5, r7, [sp, #56]	; 0x38

    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   180f0:	4828      	ldr	r0, [pc, #160]	; (18194 <FOptsEncrypt+0xb4>)
    uint8_t aBlock[16] = { 0 };
   180f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
    uint8_t sBlock[16] = { 0 };
   180f6:	e9cd 4400 	strd	r4, r4, [sp]
   180fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
    uint8_t aBlock[16] = { 0 };
   180fe:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   18102:	6800      	ldr	r0, [r0, #0]
    aBlock[0] = 0x01;
   18104:	f88d c010 	strb.w	ip, [sp, #16]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   18108:	4c23      	ldr	r4, [pc, #140]	; (18198 <FOptsEncrypt+0xb8>)
   1810a:	f8d0 e000 	ldr.w	lr, [r0]
   1810e:	45a6      	cmp	lr, r4
   18110:	d908      	bls.n	18124 <FOptsEncrypt+0x44>
    {
        // Introduced in LoRaWAN 1.1.1 specification
        switch( fCntID )
   18112:	4563      	cmp	r3, ip
   18114:	d904      	bls.n	18120 <FOptsEncrypt+0x40>
   18116:	2b02      	cmp	r3, #2
   18118:	d020      	beq.n	1815c <FOptsEncrypt+0x7c>
   1811a:	2008      	movs	r0, #8
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   1811c:	b009      	add	sp, #36	; 0x24
   1811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                aBlock[4] = 0x01;
   18120:	f88d c014 	strb.w	ip, [sp, #20]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   18124:	0c0b      	lsrs	r3, r1, #16
    aBlock[6] = address & 0xFF;
   18126:	f8ad 1016 	strh.w	r1, [sp, #22]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   1812a:	f88d 3018 	strb.w	r3, [sp, #24]
    aBlock[10] = frameCounter & 0xFF;
   1812e:	f8ad 501a 	strh.w	r5, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   18132:	0c2b      	lsrs	r3, r5, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
   18134:	0e09      	lsrs	r1, r1, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   18136:	0e2d      	lsrs	r5, r5, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   18138:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[5] = dir;
   1813c:	f88d 2015 	strb.w	r2, [sp, #21]
    aBlock[9] = ( address >> 24 ) & 0xFF;
   18140:	f88d 1019 	strb.w	r1, [sp, #25]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   18144:	f88d 501d 	strb.w	r5, [sp, #29]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
   18148:	4b13      	ldr	r3, [pc, #76]	; (18198 <FOptsEncrypt+0xb8>)
   1814a:	6802      	ldr	r2, [r0, #0]
   1814c:	429a      	cmp	r2, r3
        aBlock[15] = 0x01;
   1814e:	bf84      	itt	hi
   18150:	2301      	movhi	r3, #1
   18152:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if( size > 0 )
   18156:	b926      	cbnz	r6, 18162 <FOptsEncrypt+0x82>
    return LORAMAC_CRYPTO_SUCCESS;
   18158:	2000      	movs	r0, #0
   1815a:	e7df      	b.n	1811c <FOptsEncrypt+0x3c>
                aBlock[4] = 0x02;
   1815c:	f88d 3014 	strb.w	r3, [sp, #20]
                break;
   18160:	e7e0      	b.n	18124 <FOptsEncrypt+0x44>
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
   18162:	2110      	movs	r1, #16
   18164:	466b      	mov	r3, sp
   18166:	2206      	movs	r2, #6
   18168:	eb0d 0001 	add.w	r0, sp, r1
   1816c:	f7fc fd34 	bl	14bd8 <SecureElementAesEncrypt>
   18170:	b968      	cbnz	r0, 1818e <FOptsEncrypt+0xae>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   18172:	f100 0320 	add.w	r3, r0, #32
   18176:	eb0d 0203 	add.w	r2, sp, r3
   1817a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
   1817e:	5c3b      	ldrb	r3, [r7, r0]
   18180:	4053      	eors	r3, r2
   18182:	543b      	strb	r3, [r7, r0]
        for( uint8_t i = 0; i < size; i++ )
   18184:	3001      	adds	r0, #1
   18186:	b2c0      	uxtb	r0, r0
   18188:	42b0      	cmp	r0, r6
   1818a:	d3f2      	bcc.n	18172 <FOptsEncrypt+0x92>
   1818c:	e7e4      	b.n	18158 <FOptsEncrypt+0x78>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   1818e:	200e      	movs	r0, #14
   18190:	e7c4      	b.n	1811c <FOptsEncrypt+0x3c>
   18192:	bf00      	nop
   18194:	20030974 	.word	0x20030974
   18198:	01010000 	.word	0x01010000

0001819c <GetLastFcntDown.constprop.0>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
   1819c:	3801      	subs	r0, #1
   1819e:	2806      	cmp	r0, #6
   181a0:	d825      	bhi.n	181ee <GetLastFcntDown.constprop.0+0x52>
   181a2:	e8df f000 	tbb	[pc, r0]
   181a6:	0b04      	.short	0x0b04
   181a8:	1c18130f 	.word	0x1c18130f
   181ac:	20          	.byte	0x20
   181ad:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
   181ae:	4b11      	ldr	r3, [pc, #68]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181b0:	681b      	ldr	r3, [r3, #0]
   181b2:	691a      	ldr	r2, [r3, #16]
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
            break;
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
   181b4:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
   181b6:	631a      	str	r2, [r3, #48]	; 0x30
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
   181b8:	2000      	movs	r0, #0
   181ba:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
   181bc:	4b0d      	ldr	r3, [pc, #52]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181be:	681b      	ldr	r3, [r3, #0]
   181c0:	695a      	ldr	r2, [r3, #20]
   181c2:	e7f7      	b.n	181b4 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.FCntDown;
   181c4:	4b0b      	ldr	r3, [pc, #44]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181c6:	681b      	ldr	r3, [r3, #0]
   181c8:	699a      	ldr	r2, [r3, #24]
   181ca:	e7f3      	b.n	181b4 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
   181cc:	4b09      	ldr	r3, [pc, #36]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181ce:	681b      	ldr	r3, [r3, #0]
   181d0:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
   181d2:	600b      	str	r3, [r1, #0]
            break;
   181d4:	e7f0      	b.n	181b8 <GetLastFcntDown.constprop.0+0x1c>
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
   181d6:	4b07      	ldr	r3, [pc, #28]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181d8:	681b      	ldr	r3, [r3, #0]
   181da:	6a1b      	ldr	r3, [r3, #32]
   181dc:	e7f9      	b.n	181d2 <GetLastFcntDown.constprop.0+0x36>
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
   181de:	4b05      	ldr	r3, [pc, #20]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181e0:	681b      	ldr	r3, [r3, #0]
   181e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   181e4:	e7f5      	b.n	181d2 <GetLastFcntDown.constprop.0+0x36>
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
   181e6:	4b03      	ldr	r3, [pc, #12]	; (181f4 <GetLastFcntDown.constprop.0+0x58>)
   181e8:	681b      	ldr	r3, [r3, #0]
   181ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   181ec:	e7f1      	b.n	181d2 <GetLastFcntDown.constprop.0+0x36>
    switch( fCntID )
   181ee:	2005      	movs	r0, #5
}
   181f0:	4770      	bx	lr
   181f2:	bf00      	nop
   181f4:	20030974 	.word	0x20030974

000181f8 <VerifyCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
   181f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   181fc:	b0c5      	sub	sp, #276	; 0x114
   181fe:	460c      	mov	r4, r1
   18200:	e9dd 864c 	ldrd	r8, r6, [sp, #304]	; 0x130
   18204:	4617      	mov	r7, r2
   18206:	461d      	mov	r5, r3
    if( msg == 0 )
   18208:	4681      	mov	r9, r0
   1820a:	2800      	cmp	r0, #0
   1820c:	d04b      	beq.n	182a6 <VerifyCmacB0.constprop.0+0xae>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   1820e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   18212:	d84a      	bhi.n	182aa <VerifyCmacB0.constprop.0+0xb2>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
   18214:	f44f 7288 	mov.w	r2, #272	; 0x110
   18218:	2100      	movs	r1, #0
   1821a:	4668      	mov	r0, sp
   1821c:	f013 fdb7 	bl	2bd8e <memset1>
    b0[0] = 0x49;
   18220:	2349      	movs	r3, #73	; 0x49
   18222:	f88d 3000 	strb.w	r3, [sp]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
   18226:	2d00      	cmp	r5, #0
   18228:	d03a      	beq.n	182a0 <VerifyCmacB0.constprop.0+0xa8>
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
   1822a:	4b21      	ldr	r3, [pc, #132]	; (182b0 <VerifyCmacB0.constprop.0+0xb8>)
   1822c:	681b      	ldr	r3, [r3, #0]
   1822e:	68da      	ldr	r2, [r3, #12]
        b0[1] = confFCnt & 0xFF;
   18230:	b2d3      	uxtb	r3, r2
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
   18232:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18236:	f88d 2002 	strb.w	r2, [sp, #2]
    b0[4] = 0x00;
   1823a:	f44f 7280 	mov.w	r2, #256	; 0x100
        b0[1] = confFCnt & 0xFF;
   1823e:	f88d 3001 	strb.w	r3, [sp, #1]
    b0[3] = 0x00;
   18242:	2300      	movs	r3, #0
    b0[4] = 0x00;
   18244:	f8ad 2004 	strh.w	r2, [sp, #4]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   18248:	ea4f 4218 	mov.w	r2, r8, lsr #16
   1824c:	f88d 2008 	strb.w	r2, [sp, #8]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   18250:	0c32      	lsrs	r2, r6, #16
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   18252:	4649      	mov	r1, r9
    b0[6] = devAddr & 0xFF;
   18254:	f8ad 8006 	strh.w	r8, [sp, #6]
    b0[10] = fCnt & 0xFF;
   18258:	f8ad 600a 	strh.w	r6, [sp, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   1825c:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   18260:	a804      	add	r0, sp, #16
   18262:	4622      	mov	r2, r4
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   18264:	ea4f 6818 	mov.w	r8, r8, lsr #24
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   18268:	0e36      	lsrs	r6, r6, #24
    b0[3] = 0x00;
   1826a:	f88d 3003 	strb.w	r3, [sp, #3]
    b0[14] = 0x00;
   1826e:	f88d 300e 	strb.w	r3, [sp, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   18272:	f88d 8009 	strb.w	r8, [sp, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   18276:	f88d 600d 	strb.w	r6, [sp, #13]
    b0[15] = msgLen & 0xFF;
   1827a:	f88d 400f 	strb.w	r4, [sp, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
   1827e:	f013 fd72 	bl	2bd66 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
   18282:	f104 0110 	add.w	r1, r4, #16
   18286:	463b      	mov	r3, r7
   18288:	4668      	mov	r0, sp
   1828a:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   1828c:	b289      	uxth	r1, r1
   1828e:	f014 f8e2 	bl	2c456 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
   18292:	b110      	cbz	r0, 1829a <VerifyCmacB0.constprop.0+0xa2>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18294:	2801      	cmp	r0, #1
   18296:	bf18      	it	ne
   18298:	200e      	movne	r0, #14
}
   1829a:	b045      	add	sp, #276	; 0x114
   1829c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   182a0:	462b      	mov	r3, r5
   182a2:	462a      	mov	r2, r5
   182a4:	e7c7      	b.n	18236 <VerifyCmacB0.constprop.0+0x3e>
        return LORAMAC_CRYPTO_ERROR_NPE;
   182a6:	2009      	movs	r0, #9
   182a8:	e7f7      	b.n	1829a <VerifyCmacB0.constprop.0+0xa2>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   182aa:	200d      	movs	r0, #13
   182ac:	e7f5      	b.n	1829a <VerifyCmacB0.constprop.0+0xa2>
   182ae:	bf00      	nop
   182b0:	20030974 	.word	0x20030974

000182b4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
   182b4:	b510      	push	{r4, lr}
    if( nvm == NULL )
   182b6:	b1a8      	cbz	r0, 182e4 <LoRaMacCryptoInit+0x30>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
   182b8:	4c0b      	ldr	r4, [pc, #44]	; (182e8 <LoRaMacCryptoInit+0x34>)

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
   182ba:	2238      	movs	r2, #56	; 0x38
   182bc:	2100      	movs	r1, #0
    CryptoNvm = nvm;
   182be:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
   182c0:	f013 fd65 	bl	2bd8e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
   182c4:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
   182c6:	4a09      	ldr	r2, [pc, #36]	; (182ec <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
   182c8:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
   182ca:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
   182cc:	f04f 32ff 	mov.w	r2, #4294967295
   182d0:	e9c3 0203 	strd	r0, r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   182d4:	e9c3 2205 	strd	r2, r2, [r3, #20]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
   182d8:	e9c3 2207 	strd	r2, r2, [r3, #28]
   182dc:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
   182e0:	631a      	str	r2, [r3, #48]	; 0x30

    // Reset frame counters
    ResetFCnts( );

    return LORAMAC_CRYPTO_SUCCESS;
}
   182e2:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
   182e4:	2008      	movs	r0, #8
   182e6:	e7fc      	b.n	182e2 <LoRaMacCryptoInit+0x2e>
   182e8:	20030974 	.word	0x20030974
   182ec:	01010100 	.word	0x01010100

000182f0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
   182f0:	4b02      	ldr	r3, [pc, #8]	; (182fc <LoRaMacCryptoSetLrWanVersion+0xc>)
   182f2:	681b      	ldr	r3, [r3, #0]
   182f4:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
   182f6:	2000      	movs	r0, #0
   182f8:	4770      	bx	lr
   182fa:	bf00      	nop
   182fc:	20030974 	.word	0x20030974

00018300 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
   18300:	b130      	cbz	r0, 18310 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
   18302:	4b04      	ldr	r3, [pc, #16]	; (18314 <LoRaMacCryptoGetFCntUp+0x14>)
   18304:	681b      	ldr	r3, [r3, #0]
   18306:	68db      	ldr	r3, [r3, #12]
   18308:	3301      	adds	r3, #1
   1830a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
   1830c:	2000      	movs	r0, #0
   1830e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
   18310:	2009      	movs	r0, #9
}
   18312:	4770      	bx	lr
   18314:	20030974 	.word	0x20030974

00018318 <LoRaMacCryptoGetRJcount>:
}

LoRaMacCryptoStatus_t LoRaMacCryptoGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( rJcount == 0 )
   18318:	b181      	cbz	r1, 1833c <LoRaMacCryptoGetRJcount+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
   1831a:	2808      	cmp	r0, #8
   1831c:	d003      	beq.n	18326 <LoRaMacCryptoGetRJcount+0xe>
   1831e:	2809      	cmp	r0, #9
   18320:	d008      	beq.n	18334 <LoRaMacCryptoGetRJcount+0x1c>
   18322:	2005      	movs	r0, #5
   18324:	4770      	bx	lr
    {
        case RJ_COUNT_0:
            *rJcount = RJcount0 + 1;
   18326:	4b06      	ldr	r3, [pc, #24]	; (18340 <LoRaMacCryptoGetRJcount+0x28>)
   18328:	881b      	ldrh	r3, [r3, #0]
   1832a:	3301      	adds	r3, #1
   1832c:	b29b      	uxth	r3, r3
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
   1832e:	2000      	movs	r0, #0
            *rJcount = RJcount0 + 1;
   18330:	800b      	strh	r3, [r1, #0]
   18332:	4770      	bx	lr
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
   18334:	4b03      	ldr	r3, [pc, #12]	; (18344 <LoRaMacCryptoGetRJcount+0x2c>)
   18336:	681b      	ldr	r3, [r3, #0]
   18338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1833a:	e7f6      	b.n	1832a <LoRaMacCryptoGetRJcount+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
   1833c:	2009      	movs	r0, #9
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   1833e:	4770      	bx	lr
   18340:	20030fbe 	.word	0x20030fbe
   18344:	20030974 	.word	0x20030974

00018348 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
   18348:	b180      	cbz	r0, 1836c <LoRaMacCryptoSetMulticastReference+0x24>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
   1834a:	4b09      	ldr	r3, [pc, #36]	; (18370 <LoRaMacCryptoSetMulticastReference+0x28>)
   1834c:	681b      	ldr	r3, [r3, #0]
   1834e:	f103 021c 	add.w	r2, r3, #28
   18352:	6242      	str	r2, [r0, #36]	; 0x24
   18354:	f103 0220 	add.w	r2, r3, #32
   18358:	6542      	str	r2, [r0, #84]	; 0x54
   1835a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   1835e:	3328      	adds	r3, #40	; 0x28
   18360:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
   18364:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    }

    return LORAMAC_CRYPTO_SUCCESS;
   18368:	2000      	movs	r0, #0
   1836a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
   1836c:	2009      	movs	r0, #9
}
   1836e:	4770      	bx	lr
   18370:	20030974 	.word	0x20030974

00018374 <LoRaMacCryptoPrepareJoinRequest>:
    }
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
   18374:	b530      	push	{r4, r5, lr}
    if( macMsg == 0 )
   18376:	4604      	mov	r4, r0
{
   18378:	b087      	sub	sp, #28
    if( macMsg == 0 )
   1837a:	2800      	cmp	r0, #0
   1837c:	d047      	beq.n	1840e <LoRaMacCryptoPrepareJoinRequest+0x9a>
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
   1837e:	4b27      	ldr	r3, [pc, #156]	; (1841c <LoRaMacCryptoPrepareJoinRequest+0xa8>)
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    // Derive lifetime session keys
    if( DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
   18380:	f100 050e 	add.w	r5, r0, #14
    CryptoNvm->DevNonce++;
   18384:	681a      	ldr	r2, [r3, #0]
    memcpyr( compBase + 1, devEUI, 8 );
   18386:	4629      	mov	r1, r5
    CryptoNvm->DevNonce++;
   18388:	8893      	ldrh	r3, [r2, #4]
   1838a:	3301      	adds	r3, #1
   1838c:	b29b      	uxth	r3, r3
   1838e:	8093      	strh	r3, [r2, #4]
    macMsg->DevNonce = CryptoNvm->DevNonce;
   18390:	82c3      	strh	r3, [r0, #22]
    uint8_t compBase[16] = { 0 };
   18392:	2300      	movs	r3, #0
   18394:	e9cd 3302 	strd	r3, r3, [sp, #8]
   18398:	e9cd 3304 	strd	r3, r3, [sp, #16]
            compBase[0] = 0x06;
   1839c:	2306      	movs	r3, #6
    memcpyr( compBase + 1, devEUI, 8 );
   1839e:	2208      	movs	r2, #8
   183a0:	f10d 0009 	add.w	r0, sp, #9
            compBase[0] = 0x06;
   183a4:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   183a8:	f013 fce7 	bl	2bd7a <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   183ac:	2202      	movs	r2, #2
   183ae:	2101      	movs	r1, #1
   183b0:	a802      	add	r0, sp, #8
   183b2:	f014 f86b 	bl	2c48c <SecureElementDeriveAndStoreKey>
   183b6:	b990      	cbnz	r0, 183de <LoRaMacCryptoPrepareJoinRequest+0x6a>
            compBase[0] = 0x05;
   183b8:	2305      	movs	r3, #5
    uint8_t compBase[16] = { 0 };
   183ba:	e9cd 0002 	strd	r0, r0, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   183be:	2208      	movs	r2, #8
   183c0:	4629      	mov	r1, r5
    uint8_t compBase[16] = { 0 };
   183c2:	e9cd 0004 	strd	r0, r0, [sp, #16]
    memcpyr( compBase + 1, devEUI, 8 );
   183c6:	f10d 0009 	add.w	r0, sp, #9
            compBase[0] = 0x05;
   183ca:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpyr( compBase + 1, devEUI, 8 );
   183ce:	f013 fcd4 	bl	2bd7a <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   183d2:	2203      	movs	r2, #3
   183d4:	2101      	movs	r1, #1
   183d6:	a802      	add	r0, sp, #8
   183d8:	f014 f858 	bl	2c48c <SecureElementDeriveAndStoreKey>
   183dc:	b110      	cbz	r0, 183e4 <LoRaMacCryptoPrepareJoinRequest+0x70>
    {
        return LORAMAC_CRYPTO_ERROR;
   183de:	2012      	movs	r0, #18
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   183e0:	b007      	add	sp, #28
   183e2:	bd30      	pop	{r4, r5, pc}
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   183e4:	4620      	mov	r0, r4
   183e6:	f014 fb8e 	bl	2cb06 <LoRaMacSerializerJoinRequest>
   183ea:	b990      	cbnz	r0, 18412 <LoRaMacCryptoPrepareJoinRequest+0x9e>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   183ec:	f104 0318 	add.w	r3, r4, #24
   183f0:	9300      	str	r3, [sp, #0]
   183f2:	2213      	movs	r2, #19
   183f4:	2301      	movs	r3, #1
   183f6:	6821      	ldr	r1, [r4, #0]
   183f8:	f014 f827 	bl	2c44a <SecureElementComputeAesCmac>
   183fc:	b958      	cbnz	r0, 18416 <LoRaMacCryptoPrepareJoinRequest+0xa2>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   183fe:	4620      	mov	r0, r4
   18400:	f014 fb81 	bl	2cb06 <LoRaMacSerializerJoinRequest>
   18404:	3800      	subs	r0, #0
   18406:	bf18      	it	ne
   18408:	2001      	movne	r0, #1
   1840a:	0100      	lsls	r0, r0, #4
   1840c:	e7e8      	b.n	183e0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   1840e:	2009      	movs	r0, #9
   18410:	e7e6      	b.n	183e0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18412:	2010      	movs	r0, #16
   18414:	e7e4      	b.n	183e0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18416:	200e      	movs	r0, #14
   18418:	e7e2      	b.n	183e0 <LoRaMacCryptoPrepareJoinRequest+0x6c>
   1841a:	bf00      	nop
   1841c:	20030974 	.word	0x20030974

00018420 <LoRaMacCryptoPrepareReJoinType1>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
   18420:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( macMsg == 0 )
   18422:	4604      	mov	r4, r0
   18424:	b1f8      	cbz	r0, 18466 <LoRaMacCryptoPrepareReJoinType1+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount1 overflow
    if( CryptoNvm->FCntList.RJcount1 == 65535 )
   18426:	4d13      	ldr	r5, [pc, #76]	; (18474 <LoRaMacCryptoPrepareReJoinType1+0x54>)
   18428:	682b      	ldr	r3, [r5, #0]
   1842a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   1842c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18430:	429a      	cmp	r2, r3
   18432:	d01a      	beq.n	1846a <LoRaMacCryptoPrepareReJoinType1+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18434:	f014 fb9b 	bl	2cb6e <LoRaMacSerializerReJoinType1>
   18438:	b110      	cbz	r0, 18440 <LoRaMacCryptoPrepareReJoinType1+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   1843a:	2010      	movs	r0, #16

    return LORAMAC_CRYPTO_SUCCESS;
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   1843c:	b003      	add	sp, #12
   1843e:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   18440:	f104 031c 	add.w	r3, r4, #28
   18444:	9300      	str	r3, [sp, #0]
   18446:	2214      	movs	r2, #20
   18448:	2302      	movs	r3, #2
   1844a:	6821      	ldr	r1, [r4, #0]
   1844c:	f013 fffd 	bl	2c44a <SecureElementComputeAesCmac>
   18450:	b968      	cbnz	r0, 1846e <LoRaMacCryptoPrepareReJoinType1+0x4e>
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   18452:	4620      	mov	r0, r4
   18454:	f014 fb8b 	bl	2cb6e <LoRaMacSerializerReJoinType1>
   18458:	2800      	cmp	r0, #0
   1845a:	d1ee      	bne.n	1843a <LoRaMacCryptoPrepareReJoinType1+0x1a>
    CryptoNvm->FCntList.RJcount1++;
   1845c:	682a      	ldr	r2, [r5, #0]
   1845e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
   18460:	3301      	adds	r3, #1
   18462:	8593      	strh	r3, [r2, #44]	; 0x2c
    return LORAMAC_CRYPTO_SUCCESS;
   18464:	e7ea      	b.n	1843c <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18466:	2009      	movs	r0, #9
   18468:	e7e8      	b.n	1843c <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
   1846a:	2011      	movs	r0, #17
   1846c:	e7e6      	b.n	1843c <LoRaMacCryptoPrepareReJoinType1+0x1c>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   1846e:	200e      	movs	r0, #14
   18470:	e7e4      	b.n	1843c <LoRaMacCryptoPrepareReJoinType1+0x1c>
   18472:	bf00      	nop
   18474:	20030974 	.word	0x20030974

00018478 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
   18478:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( macMsg == 0 )
   1847a:	4604      	mov	r4, r0
   1847c:	b1e8      	cbz	r0, 184ba <LoRaMacCryptoPrepareReJoinType0or2+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount0 overflow
    if( RJcount0 == 65535 )
   1847e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18482:	4d11      	ldr	r5, [pc, #68]	; (184c8 <LoRaMacCryptoPrepareReJoinType0or2+0x50>)
   18484:	882a      	ldrh	r2, [r5, #0]
   18486:	429a      	cmp	r2, r3
   18488:	d019      	beq.n	184be <LoRaMacCryptoPrepareReJoinType0or2+0x46>
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1848a:	f014 fba8 	bl	2cbde <LoRaMacSerializerReJoinType0or2>
   1848e:	b110      	cbz	r0, 18496 <LoRaMacCryptoPrepareReJoinType0or2+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18490:	2010      	movs	r0, #16

    return LORAMAC_CRYPTO_SUCCESS;
#else
    return LORAMAC_CRYPTO_ERROR;
#endif
}
   18492:	b003      	add	sp, #12
   18494:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
   18496:	f104 0314 	add.w	r3, r4, #20
   1849a:	9300      	str	r3, [sp, #0]
   1849c:	220f      	movs	r2, #15
   1849e:	2305      	movs	r3, #5
   184a0:	6821      	ldr	r1, [r4, #0]
   184a2:	f013 ffd2 	bl	2c44a <SecureElementComputeAesCmac>
   184a6:	b960      	cbnz	r0, 184c2 <LoRaMacCryptoPrepareReJoinType0or2+0x4a>
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   184a8:	4620      	mov	r0, r4
   184aa:	f014 fb98 	bl	2cbde <LoRaMacSerializerReJoinType0or2>
   184ae:	2800      	cmp	r0, #0
   184b0:	d1ee      	bne.n	18490 <LoRaMacCryptoPrepareReJoinType0or2+0x18>
    RJcount0++;
   184b2:	882b      	ldrh	r3, [r5, #0]
   184b4:	3301      	adds	r3, #1
   184b6:	802b      	strh	r3, [r5, #0]
    return LORAMAC_CRYPTO_SUCCESS;
   184b8:	e7eb      	b.n	18492 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_ERROR_NPE;
   184ba:	2009      	movs	r0, #9
   184bc:	e7e9      	b.n	18492 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
   184be:	2004      	movs	r0, #4
   184c0:	e7e7      	b.n	18492 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   184c2:	200e      	movs	r0, #14
   184c4:	e7e5      	b.n	18492 <LoRaMacCryptoPrepareReJoinType0or2+0x1a>
   184c6:	bf00      	nop
   184c8:	20030fbe 	.word	0x20030fbe

000184cc <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
   184cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184d0:	4604      	mov	r4, r0
   184d2:	4688      	mov	r8, r1
   184d4:	4617      	mov	r7, r2
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
   184d6:	461e      	mov	r6, r3
{
   184d8:	b08b      	sub	sp, #44	; 0x2c
    if( macMsg == NULL )
   184da:	2b00      	cmp	r3, #0
   184dc:	d04c      	beq.n	18578 <LoRaMacCryptoSecureMessage+0xac>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
   184de:	4d5d      	ldr	r5, [pc, #372]	; (18654 <LoRaMacCryptoSecureMessage+0x188>)
   184e0:	682b      	ldr	r3, [r5, #0]
   184e2:	68db      	ldr	r3, [r3, #12]
   184e4:	4283      	cmp	r3, r0
   184e6:	f200 80b2 	bhi.w	1864e <LoRaMacCryptoSecureMessage+0x182>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
   184ea:	f896 2020 	ldrb.w	r2, [r6, #32]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
   184ee:	2a00      	cmp	r2, #0
   184f0:	bf0c      	ite	eq
   184f2:	2206      	moveq	r2, #6
   184f4:	2207      	movne	r2, #7
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
   184f6:	4283      	cmp	r3, r0
   184f8:	d306      	bcc.n	18508 <LoRaMacCryptoSecureMessage+0x3c>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   184fa:	4630      	mov	r0, r6
   184fc:	f014 fba7 	bl	2cc4e <LoRaMacSerializerData>
   18500:	4603      	mov	r3, r0
   18502:	b308      	cbz	r0, 18548 <LoRaMacCryptoSecureMessage+0x7c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
   18504:	2010      	movs	r0, #16
   18506:	e01c      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
   18508:	2300      	movs	r3, #0
   1850a:	9001      	str	r0, [sp, #4]
   1850c:	9300      	str	r3, [sp, #0]
   1850e:	68b3      	ldr	r3, [r6, #8]
   18510:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   18514:	6a70      	ldr	r0, [r6, #36]	; 0x24
   18516:	f014 f968 	bl	2c7ea <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   1851a:	b990      	cbnz	r0, 18542 <LoRaMacCryptoSecureMessage+0x76>
        if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   1851c:	682b      	ldr	r3, [r5, #0]
   1851e:	789b      	ldrb	r3, [r3, #2]
   18520:	2b01      	cmp	r3, #1
   18522:	d1ea      	bne.n	184fa <LoRaMacCryptoSecureMessage+0x2e>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP, fCntUp, macMsg->FHDR.FOpts );
   18524:	f106 0310 	add.w	r3, r6, #16
   18528:	f896 c00c 	ldrb.w	ip, [r6, #12]
   1852c:	e9cd 4300 	strd	r4, r3, [sp]
   18530:	4602      	mov	r2, r0
   18532:	4603      	mov	r3, r0
   18534:	68b1      	ldr	r1, [r6, #8]
   18536:	f00c 000f 	and.w	r0, ip, #15
   1853a:	f7ff fdd1 	bl	180e0 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
   1853e:	2800      	cmp	r0, #0
   18540:	d0db      	beq.n	184fa <LoRaMacCryptoSecureMessage+0x2e>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;

    return LORAMAC_CRYPTO_SUCCESS;
}
   18542:	b00b      	add	sp, #44	; 0x2c
   18544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18548:	f8d5 a000 	ldr.w	sl, [r5]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1854c:	f896 c004 	ldrb.w	ip, [r6, #4]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18550:	f89a e002 	ldrb.w	lr, [sl, #2]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18554:	f1ac 0c04 	sub.w	ip, ip, #4
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18558:	f1be 0f01 	cmp.w	lr, #1
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1855c:	6830      	ldr	r0, [r6, #0]
   1855e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
   18562:	68b2      	ldr	r2, [r6, #8]
   18564:	fa1f f18c 	uxth.w	r1, ip
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18568:	d166      	bne.n	18638 <LoRaMacCryptoSecureMessage+0x16c>
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   1856a:	f896 e00c 	ldrb.w	lr, [r6, #12]
        uint32_t cmacF = 0;
   1856e:	e9cd 3304 	strd	r3, r3, [sp, #16]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
   18572:	f3ce 1e40 	ubfx	lr, lr, #5, #1
    if( ( msg == 0 ) || ( cmac == 0 ) )
   18576:	b908      	cbnz	r0, 1857c <LoRaMacCryptoSecureMessage+0xb0>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18578:	2009      	movs	r0, #9
   1857a:	e7e2      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   1857c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   18580:	d901      	bls.n	18586 <LoRaMacCryptoSecureMessage+0xba>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   18582:	200d      	movs	r0, #13
   18584:	e7dd      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
    b1[0] = 0x49;
   18586:	f04f 0b49 	mov.w	fp, #73	; 0x49
   1858a:	f88d b018 	strb.w	fp, [sp, #24]
    if( isAck == true )
   1858e:	f1be 0f00 	cmp.w	lr, #0
   18592:	d04d      	beq.n	18630 <LoRaMacCryptoSecureMessage+0x164>
        uint16_t confFCnt = ( uint16_t )( CryptoNvm->LastDownFCnt % 65536 );
   18594:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
        b1[1] = confFCnt & 0xFF;
   18598:	fa5f fe83 	uxtb.w	lr, r3
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
   1859c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   185a0:	f88d 301a 	strb.w	r3, [sp, #26]
    b1[5] = UPLINK;  // dir = Uplink
   185a4:	2300      	movs	r3, #0
    b1[4] = txCh;
   185a6:	f88d 701c 	strb.w	r7, [sp, #28]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
   185aa:	0c17      	lsrs	r7, r2, #16
    b1[9] = ( devAddr >> 24 ) & 0xFF;
   185ac:	0e12      	lsrs	r2, r2, #24
   185ae:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
   185b2:	0c22      	lsrs	r2, r4, #16
    b1[5] = UPLINK;  // dir = Uplink
   185b4:	f88d 301d 	strb.w	r3, [sp, #29]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
   185b8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    b1[14] = 0x00;
   185bc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
   185c0:	0e22      	lsrs	r2, r4, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   185c2:	ab04      	add	r3, sp, #16
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
   185c4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   185c8:	9300      	str	r3, [sp, #0]
   185ca:	460a      	mov	r2, r1
   185cc:	2305      	movs	r3, #5
   185ce:	4601      	mov	r1, r0
   185d0:	a806      	add	r0, sp, #24
        b1[1] = confFCnt & 0xFF;
   185d2:	f88d e019 	strb.w	lr, [sp, #25]
    b1[3] = txDr;
   185d6:	f88d 801b 	strb.w	r8, [sp, #27]
    b1[6] = devAddr & 0xFF;
   185da:	f8ad 901e 	strh.w	r9, [sp, #30]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
   185de:	f88d 7020 	strb.w	r7, [sp, #32]
    b1[10] = fCntUp & 0xFF;
   185e2:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
    b1[15] = msgLen & 0xFF;
   185e6:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   185ea:	f013 ff2e 	bl	2c44a <SecureElementComputeAesCmac>
   185ee:	bb08      	cbnz	r0, 18634 <LoRaMacCryptoSecureMessage+0x168>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
   185f0:	aa05      	add	r2, sp, #20
   185f2:	7b33      	ldrb	r3, [r6, #12]
   185f4:	7931      	ldrb	r1, [r6, #4]
   185f6:	e9cd 4201 	strd	r4, r2, [sp, #4]
   185fa:	68b2      	ldr	r2, [r6, #8]
   185fc:	3904      	subs	r1, #4
   185fe:	9200      	str	r2, [sp, #0]
   18600:	6830      	ldr	r0, [r6, #0]
   18602:	2204      	movs	r2, #4
   18604:	f3c3 1340 	ubfx	r3, r3, #5, #1
   18608:	b289      	uxth	r1, r1
   1860a:	f014 f954 	bl	2c8b6 <ComputeCmacB0.constprop.0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   1860e:	2800      	cmp	r0, #0
   18610:	d197      	bne.n	18542 <LoRaMacCryptoSecureMessage+0x76>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
   18612:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   18616:	9a05      	ldr	r2, [sp, #20]
   18618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1861c:	62f3      	str	r3, [r6, #44]	; 0x2c
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
   1861e:	4630      	mov	r0, r6
   18620:	f014 fb15 	bl	2cc4e <LoRaMacSerializerData>
   18624:	2800      	cmp	r0, #0
   18626:	f47f af6d 	bne.w	18504 <LoRaMacCryptoSecureMessage+0x38>
    CryptoNvm->FCntList.FCntUp = fCntUp;
   1862a:	682b      	ldr	r3, [r5, #0]
   1862c:	60dc      	str	r4, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
   1862e:	e788      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
   18630:	469e      	mov	lr, r3
   18632:	e7b5      	b.n	185a0 <LoRaMacCryptoSecureMessage+0xd4>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18634:	200e      	movs	r0, #14
   18636:	e784      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
   18638:	f106 072c 	add.w	r7, r6, #44	; 0x2c
   1863c:	9200      	str	r2, [sp, #0]
   1863e:	e9cd 4701 	strd	r4, r7, [sp, #4]
   18642:	2206      	movs	r2, #6
   18644:	f014 f937 	bl	2c8b6 <ComputeCmacB0.constprop.0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18648:	2800      	cmp	r0, #0
   1864a:	d0e8      	beq.n	1861e <LoRaMacCryptoSecureMessage+0x152>
   1864c:	e779      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
   1864e:	2006      	movs	r0, #6
   18650:	e777      	b.n	18542 <LoRaMacCryptoSecureMessage+0x76>
   18652:	bf00      	nop
   18654:	20030974 	.word	0x20030974

00018658 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
   18658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1865c:	b087      	sub	sp, #28
   1865e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   18660:	4681      	mov	r9, r0
   18662:	4688      	mov	r8, r1
   18664:	4617      	mov	r7, r2
   18666:	461e      	mov	r6, r3
    if( macMsg == 0 )
   18668:	2d00      	cmp	r5, #0
   1866a:	f000 8094 	beq.w	18796 <LoRaMacCryptoUnsecureMessage+0x13e>
    uint32_t lastDown = 0;
   1866e:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
   18670:	4610      	mov	r0, r2
   18672:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
   18674:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
   18676:	f7ff fd91 	bl	1819c <GetLastFcntDown.constprop.0>
   1867a:	b120      	cbz	r0, 18686 <LoRaMacCryptoUnsecureMessage+0x2e>
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
   1867c:	2406      	movs	r4, #6
#endif

    UpdateFCntDown( fCntID, fCntDown );

    return LORAMAC_CRYPTO_SUCCESS;
}
   1867e:	4620      	mov	r0, r4
   18680:	b007      	add	sp, #28
   18682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( currentDown > lastDown ) ||
   18686:	9b05      	ldr	r3, [sp, #20]
   18688:	429e      	cmp	r6, r3
   1868a:	d801      	bhi.n	18690 <LoRaMacCryptoUnsecureMessage+0x38>
   1868c:	3301      	adds	r3, #1
   1868e:	d1f5      	bne.n	1867c <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
   18690:	4628      	mov	r0, r5
   18692:	f014 f9ce 	bl	2ca32 <LoRaMacParserData>
   18696:	4604      	mov	r4, r0
   18698:	2800      	cmp	r0, #0
   1869a:	d17e      	bne.n	1879a <LoRaMacCryptoUnsecureMessage+0x142>
        if( KeyAddrList[i].AddrID == addrID )
   1869c:	4b40      	ldr	r3, [pc, #256]	; (187a0 <LoRaMacCryptoUnsecureMessage+0x148>)
   1869e:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
   186a2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   186a6:	4549      	cmp	r1, r9
   186a8:	d104      	bne.n	186b4 <LoRaMacCryptoUnsecureMessage+0x5c>
    if( address != macMsg->FHDR.DevAddr )
   186aa:	68ab      	ldr	r3, [r5, #8]
   186ac:	4543      	cmp	r3, r8
   186ae:	d006      	beq.n	186be <LoRaMacCryptoUnsecureMessage+0x66>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
   186b0:	2402      	movs	r4, #2
   186b2:	e7e4      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
   186b4:	3401      	adds	r4, #1
   186b6:	2c05      	cmp	r4, #5
   186b8:	d1f1      	bne.n	1869e <LoRaMacCryptoUnsecureMessage+0x46>
   186ba:	240b      	movs	r4, #11
   186bc:	e7df      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   186be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 187a4 <LoRaMacCryptoUnsecureMessage+0x14c>
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   186c2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   186c4:	f8da 1000 	ldr.w	r1, [sl]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
   186c8:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
   186ca:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
   186cc:	f892 b001 	ldrb.w	fp, [r2, #1]
        isAck = false;
   186d0:	2900      	cmp	r1, #0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   186d2:	7929      	ldrb	r1, [r5, #4]
   186d4:	e9cd 6001 	strd	r6, r0, [sp, #4]
   186d8:	f8cd 8000 	str.w	r8, [sp]
   186dc:	f1a1 0104 	sub.w	r1, r1, #4
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
   186e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
   186e4:	7892      	ldrb	r2, [r2, #2]
   186e6:	bf08      	it	eq
   186e8:	2300      	moveq	r3, #0
   186ea:	6828      	ldr	r0, [r5, #0]
   186ec:	b289      	uxth	r1, r1
   186ee:	f7ff fd83 	bl	181f8 <VerifyCmacB0.constprop.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   186f2:	4604      	mov	r4, r0
   186f4:	2800      	cmp	r0, #0
   186f6:	d1c2      	bne.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
   186f8:	f895 3020 	ldrb.w	r3, [r5, #32]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
   186fc:	9601      	str	r6, [sp, #4]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
   186fe:	2b00      	cmp	r3, #0
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
   18700:	f04f 0301 	mov.w	r3, #1
   18704:	9300      	str	r3, [sp, #0]
   18706:	bf18      	it	ne
   18708:	465a      	movne	r2, fp
   1870a:	4643      	mov	r3, r8
   1870c:	bf08      	it	eq
   1870e:	2206      	moveq	r2, #6
   18710:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   18714:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18716:	f014 f868 	bl	2c7ea <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   1871a:	4604      	mov	r4, r0
   1871c:	2800      	cmp	r0, #0
   1871e:	d1ae      	bne.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
   18720:	f8da 3000 	ldr.w	r3, [sl]
   18724:	789a      	ldrb	r2, [r3, #2]
   18726:	2a01      	cmp	r2, #1
   18728:	d008      	beq.n	1873c <LoRaMacCryptoUnsecureMessage+0xe4>
    switch( fCntID )
   1872a:	3f01      	subs	r7, #1
   1872c:	2f06      	cmp	r7, #6
   1872e:	d8a6      	bhi.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
   18730:	e8df f007 	tbb	[pc, r7]
   18734:	211d1915 	.word	0x211d1915
   18738:	2925      	.short	0x2925
   1873a:	2d          	.byte	0x2d
   1873b:	00          	.byte	0x00
        if( addrID == UNICAST_DEV_ADDR )
   1873c:	f1b9 0f04 	cmp.w	r9, #4
   18740:	d1f3      	bne.n	1872a <LoRaMacCryptoUnsecureMessage+0xd2>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
   18742:	7b28      	ldrb	r0, [r5, #12]
   18744:	3510      	adds	r5, #16
   18746:	463b      	mov	r3, r7
   18748:	4641      	mov	r1, r8
   1874a:	e9cd 6500 	strd	r6, r5, [sp]
   1874e:	f000 000f 	and.w	r0, r0, #15
   18752:	f7ff fcc5 	bl	180e0 <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
   18756:	2800      	cmp	r0, #0
   18758:	d0e7      	beq.n	1872a <LoRaMacCryptoUnsecureMessage+0xd2>
   1875a:	4604      	mov	r4, r0
   1875c:	e78f      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.NFCntDown = currentDown;
   1875e:	f8da 3000 	ldr.w	r3, [sl]
   18762:	611e      	str	r6, [r3, #16]
            break;
   18764:	e78b      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
   18766:	f8da 3000 	ldr.w	r3, [sl]
   1876a:	615e      	str	r6, [r3, #20]
            break;
   1876c:	e787      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
   1876e:	f8da 3000 	ldr.w	r3, [sl]
   18772:	619e      	str	r6, [r3, #24]
            break;
   18774:	e783      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
   18776:	f8da 3000 	ldr.w	r3, [sl]
   1877a:	61de      	str	r6, [r3, #28]
            break;
   1877c:	e77f      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
   1877e:	f8da 3000 	ldr.w	r3, [sl]
   18782:	621e      	str	r6, [r3, #32]
            break;
   18784:	e77b      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
   18786:	f8da 3000 	ldr.w	r3, [sl]
   1878a:	625e      	str	r6, [r3, #36]	; 0x24
            break;
   1878c:	e777      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
   1878e:	f8da 3000 	ldr.w	r3, [sl]
   18792:	629e      	str	r6, [r3, #40]	; 0x28
            break;
   18794:	e773      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18796:	2409      	movs	r4, #9
   18798:	e771      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
        return LORAMAC_CRYPTO_ERROR_PARSER;
   1879a:	240f      	movs	r4, #15
   1879c:	e76f      	b.n	1867e <LoRaMacCryptoUnsecureMessage+0x26>
   1879e:	bf00      	nop
   187a0:	20008b17 	.word	0x20008b17
   187a4:	20030974 	.word	0x20030974

000187a8 <LoRaMacCryptoSetKey>:
{
   187a8:	b538      	push	{r3, r4, r5, lr}
   187aa:	4605      	mov	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
   187ac:	f013 fe69 	bl	2c482 <SecureElementSetKey>
   187b0:	4604      	mov	r4, r0
   187b2:	b110      	cbz	r0, 187ba <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   187b4:	240e      	movs	r4, #14
}
   187b6:	4620      	mov	r0, r4
   187b8:	bd38      	pop	{r3, r4, r5, pc}
    if( keyID == APP_KEY )
   187ba:	2d00      	cmp	r5, #0
   187bc:	d1fb      	bne.n	187b6 <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
   187be:	4b06      	ldr	r3, [pc, #24]	; (187d8 <LoRaMacCryptoSetKey+0x30>)
   187c0:	4601      	mov	r1, r0
   187c2:	681b      	ldr	r3, [r3, #0]
   187c4:	7898      	ldrb	r0, [r3, #2]
   187c6:	f014 f8cb 	bl	2c960 <LoRaMacCryptoDeriveMcRootKey>
   187ca:	2800      	cmp	r0, #0
   187cc:	d1f2      	bne.n	187b4 <LoRaMacCryptoSetKey+0xc>
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
   187ce:	f014 f861 	bl	2c894 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
   187d2:	2800      	cmp	r0, #0
   187d4:	d0ef      	beq.n	187b6 <LoRaMacCryptoSetKey+0xe>
   187d6:	e7ed      	b.n	187b4 <LoRaMacCryptoSetKey+0xc>
   187d8:	20030974 	.word	0x20030974

000187dc <LoRaMacCryptoHandleJoinAccept>:
{
   187dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   187e0:	4604      	mov	r4, r0
   187e2:	4689      	mov	r9, r1
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
   187e4:	4616      	mov	r6, r2
{
   187e6:	b08f      	sub	sp, #60	; 0x3c
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
   187e8:	2a00      	cmp	r2, #0
   187ea:	f000 80ab 	beq.w	18944 <LoRaMacCryptoHandleJoinAccept+0x168>
   187ee:	2900      	cmp	r1, #0
   187f0:	f000 80a8 	beq.w	18944 <LoRaMacCryptoHandleJoinAccept+0x168>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
   187f4:	2500      	movs	r5, #0
    uint16_t nonce               = CryptoNvm->DevNonce;
   187f6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 18954 <LoRaMacCryptoHandleJoinAccept+0x178>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
   187fa:	221d      	movs	r2, #29
   187fc:	4629      	mov	r1, r5
   187fe:	a806      	add	r0, sp, #24
   18800:	9505      	str	r5, [sp, #20]
   18802:	f019 f948 	bl	31a96 <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
   18806:	f8d8 3000 	ldr.w	r3, [r8]
    if( joinReqType == JOIN_REQ )
   1880a:	2cff      	cmp	r4, #255	; 0xff
    uint16_t nonce               = CryptoNvm->DevNonce;
   1880c:	889f      	ldrh	r7, [r3, #4]
    uint8_t versionMinor         = 0;
   1880e:	f88d 5013 	strb.w	r5, [sp, #19]
    if( joinReqType == JOIN_REQ )
   18812:	d005      	beq.n	18820 <LoRaMacCryptoHandleJoinAccept+0x44>
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
   18814:	f014 0ffd 	tst.w	r4, #253	; 0xfd
            nonce = RJcount0;
   18818:	bf0a      	itet	eq
   1881a:	4b4f      	ldreq	r3, [pc, #316]	; (18958 <LoRaMacCryptoHandleJoinAccept+0x17c>)
            nonce = CryptoNvm->FCntList.RJcount1;
   1881c:	8d9f      	ldrhne	r7, [r3, #44]	; 0x2c
            nonce = RJcount0;
   1881e:	881f      	ldrheq	r7, [r3, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
   18820:	f10d 0313 	add.w	r3, sp, #19
   18824:	ad05      	add	r5, sp, #20
   18826:	9302      	str	r3, [sp, #8]
   18828:	9501      	str	r5, [sp, #4]
   1882a:	7933      	ldrb	r3, [r6, #4]
   1882c:	463a      	mov	r2, r7
   1882e:	9300      	str	r3, [sp, #0]
   18830:	4649      	mov	r1, r9
   18832:	4620      	mov	r0, r4
   18834:	6833      	ldr	r3, [r6, #0]
   18836:	f013 fe45 	bl	2c4c4 <SecureElementProcessJoinAccept>
   1883a:	2800      	cmp	r0, #0
   1883c:	f040 8084 	bne.w	18948 <LoRaMacCryptoHandleJoinAccept+0x16c>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
   18840:	6830      	ldr	r0, [r6, #0]
   18842:	4629      	mov	r1, r5
   18844:	7932      	ldrb	r2, [r6, #4]
   18846:	f013 fa8e 	bl	2bd66 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
   1884a:	4630      	mov	r0, r6
   1884c:	f014 f8a3 	bl	2c996 <LoRaMacParserJoinAccept>
   18850:	2800      	cmp	r0, #0
   18852:	d17b      	bne.n	1894c <LoRaMacCryptoHandleJoinAccept+0x170>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18854:	7a35      	ldrb	r5, [r6, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
   18856:	79f2      	ldrb	r2, [r6, #7]
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
   18858:	79b3      	ldrb	r3, [r6, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   1885a:	042d      	lsls	r5, r5, #16
   1885c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    if( versionMinor == 1 )
   18860:	f89d 0013 	ldrb.w	r0, [sp, #19]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
   18864:	431d      	orrs	r5, r3
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
   18866:	f8d8 3000 	ldr.w	r3, [r8]
    if( versionMinor == 1 )
   1886a:	2801      	cmp	r0, #1
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
   1886c:	689a      	ldr	r2, [r3, #8]
    if( versionMinor == 1 )
   1886e:	d103      	bne.n	18878 <LoRaMacCryptoHandleJoinAccept+0x9c>
    if( isJoinNonceOk == true )
   18870:	4295      	cmp	r5, r2
   18872:	d803      	bhi.n	1887c <LoRaMacCryptoHandleJoinAccept+0xa0>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
   18874:	2403      	movs	r4, #3
   18876:	e03e      	b.n	188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( isJoinNonceOk == true )
   18878:	4295      	cmp	r5, r2
   1887a:	d0fb      	beq.n	18874 <LoRaMacCryptoHandleJoinAccept+0x98>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
   1887c:	2100      	movs	r1, #0
        CryptoNvm->JoinNonce = currentJoinNonce;
   1887e:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
   18880:	f014 f86e 	bl	2c960 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   18884:	4604      	mov	r4, r0
   18886:	2800      	cmp	r0, #0
   18888:	d135      	bne.n	188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( keyID != MC_ROOT_KEY )
   1888a:	f014 f803 	bl	2c894 <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
   1888e:	4604      	mov	r4, r0
   18890:	bb88      	cbnz	r0, 188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
    if( versionMinor == 1 )
   18892:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18896:	2b01      	cmp	r3, #1
   18898:	d131      	bne.n	188fe <LoRaMacCryptoHandleJoinAccept+0x122>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
   1889a:	463b      	mov	r3, r7
   1889c:	464a      	mov	r2, r9
   1889e:	4629      	mov	r1, r5
   188a0:	2004      	movs	r0, #4
   188a2:	f013 ff46 	bl	2c732 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   188a6:	2800      	cmp	r0, #0
   188a8:	d152      	bne.n	18950 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
   188aa:	463b      	mov	r3, r7
   188ac:	464a      	mov	r2, r9
   188ae:	4629      	mov	r1, r5
   188b0:	2005      	movs	r0, #5
   188b2:	f013 ff3e 	bl	2c732 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   188b6:	2800      	cmp	r0, #0
   188b8:	d14a      	bne.n	18950 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, currentJoinNonce, joinEUI, nonce );
   188ba:	463b      	mov	r3, r7
   188bc:	464a      	mov	r2, r9
   188be:	4629      	mov	r1, r5
   188c0:	2006      	movs	r0, #6
   188c2:	f013 ff36 	bl	2c732 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   188c6:	2800      	cmp	r0, #0
   188c8:	d142      	bne.n	18950 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey11x( APP_S_KEY, currentJoinNonce, joinEUI, nonce );
   188ca:	463b      	mov	r3, r7
   188cc:	464a      	mov	r2, r9
   188ce:	4629      	mov	r1, r5
   188d0:	2007      	movs	r0, #7
   188d2:	f013 ff2e 	bl	2c732 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   188d6:	2800      	cmp	r0, #0
   188d8:	d13a      	bne.n	18950 <LoRaMacCryptoHandleJoinAccept+0x174>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
   188da:	f8d8 3000 	ldr.w	r3, [r8]
   188de:	f89d 2013 	ldrb.w	r2, [sp, #19]
    RJcount0 = 0;
   188e2:	491d      	ldr	r1, [pc, #116]	; (18958 <LoRaMacCryptoHandleJoinAccept+0x17c>)
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
   188e4:	709a      	strb	r2, [r3, #2]
    RJcount0 = 0;
   188e6:	2200      	movs	r2, #0
   188e8:	800a      	strh	r2, [r1, #0]
    CryptoNvm->FCntList.FCntUp = 0;
   188ea:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   188ec:	f04f 32ff 	mov.w	r2, #4294967295
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
   188f0:	e9c3 2204 	strd	r2, r2, [r3, #16]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
   188f4:	619a      	str	r2, [r3, #24]
}
   188f6:	4620      	mov	r0, r4
   188f8:	b00f      	add	sp, #60	; 0x3c
   188fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        netID = ( uint32_t )macMsg->NetID[0];
   188fe:	7a73      	ldrb	r3, [r6, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
   18900:	7ab2      	ldrb	r2, [r6, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
   18902:	7af6      	ldrb	r6, [r6, #11]
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
   18904:	4629      	mov	r1, r5
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
   18906:	0436      	lsls	r6, r6, #16
   18908:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
   1890c:	431e      	orrs	r6, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
   1890e:	4632      	mov	r2, r6
   18910:	463b      	mov	r3, r7
   18912:	2007      	movs	r0, #7
   18914:	f013 ff43 	bl	2c79e <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18918:	b9d0      	cbnz	r0, 18950 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
   1891a:	463b      	mov	r3, r7
   1891c:	4632      	mov	r2, r6
   1891e:	4629      	mov	r1, r5
   18920:	2006      	movs	r0, #6
   18922:	f013 ff3c 	bl	2c79e <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18926:	b998      	cbnz	r0, 18950 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
   18928:	463b      	mov	r3, r7
   1892a:	4632      	mov	r2, r6
   1892c:	4629      	mov	r1, r5
   1892e:	2004      	movs	r0, #4
   18930:	f013 ff35 	bl	2c79e <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
   18934:	b960      	cbnz	r0, 18950 <LoRaMacCryptoHandleJoinAccept+0x174>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
   18936:	463b      	mov	r3, r7
   18938:	4632      	mov	r2, r6
   1893a:	4629      	mov	r1, r5
   1893c:	2005      	movs	r0, #5
   1893e:	f013 ff2e 	bl	2c79e <DeriveSessionKey10x>
   18942:	e7c8      	b.n	188d6 <LoRaMacCryptoHandleJoinAccept+0xfa>
        return LORAMAC_CRYPTO_ERROR_NPE;
   18944:	2409      	movs	r4, #9
   18946:	e7d6      	b.n	188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   18948:	240e      	movs	r4, #14
   1894a:	e7d4      	b.n	188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
        return LORAMAC_CRYPTO_ERROR_PARSER;
   1894c:	240f      	movs	r4, #15
   1894e:	e7d2      	b.n	188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
   18950:	4604      	mov	r4, r0
   18952:	e7d0      	b.n	188f6 <LoRaMacCryptoHandleJoinAccept+0x11a>
   18954:	20030974 	.word	0x20030974
   18958:	20030fbe 	.word	0x20030fbe

0001895c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
   1895c:	4800      	ldr	r0, [pc, #0]	; (18960 <RegionGetVersion+0x4>)
   1895e:	4770      	bx	lr
   18960:	02010001 	.word	0x02010001

00018964 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
   18964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18968:	b08f      	sub	sp, #60	; 0x3c
   1896a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   1896e:	9303      	str	r3, [sp, #12]
   18970:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   18974:	4615      	mov	r5, r2
   18976:	460c      	mov	r4, r1
   18978:	9307      	str	r3, [sp, #28]
   1897a:	4682      	mov	sl, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
   1897c:	f013 fb08 	bl	2bf90 <TimerGetCurrentTime>
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
   18980:	4a74      	ldr	r2, [pc, #464]	; (18b54 <RegionCommonUpdateBandTimeOff+0x1f0>)
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
   18982:	f5a8 33f6 	sub.w	r3, r8, #125952	; 0x1ec00
   18986:	3b30      	subs	r3, #48	; 0x30
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
   18988:	fbb3 f3f2 	udiv	r3, r3, r2
   1898c:	4353      	muls	r3, r2
   1898e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
   18990:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
   18994:	3330      	adds	r3, #48	; 0x30
   18996:	9302      	str	r3, [sp, #8]
   18998:	2318      	movs	r3, #24
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
   1899a:	f04f 39ff 	mov.w	r9, #4294967295
   1899e:	fb13 4305 	smlabb	r3, r3, r5, r4
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
   189a2:	2500      	movs	r5, #0
   189a4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 18b58 <RegionCommonUpdateBandTimeOff+0x1f4>
    TimerTime_t currentTime = TimerGetCurrentTime( );
   189a8:	9005      	str	r0, [sp, #20]

    for( uint8_t i = 0; i < nbBands; i++ )
   189aa:	9306      	str	r3, [sp, #24]
   189ac:	9b06      	ldr	r3, [sp, #24]
   189ae:	429c      	cmp	r4, r3
   189b0:	d107      	bne.n	189c2 <RegionCommonUpdateBandTimeOff+0x5e>

    if( validBands == 0 )
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
   189b2:	2d00      	cmp	r5, #0
    }
    return minTimeToWait;
}
   189b4:	bf14      	ite	ne
   189b6:	4648      	movne	r0, r9
   189b8:	f04f 30ff 	moveq.w	r0, #4294967295
   189bc:	b00f      	add	sp, #60	; 0x3c
   189be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
   189c2:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
   189c6:	4640      	mov	r0, r8
   189c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   189cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   189ce:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   189d2:	f8cd 8020 	str.w	r8, [sp, #32]
   189d6:	f013 fa6d 	bl	2beb4 <SysTimeToMs>
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
   189da:	8826      	ldrh	r6, [r4, #0]
    if( joined == false )
   189dc:	f1ba 0f00 	cmp.w	sl, #0
   189e0:	d150      	bne.n	18a84 <RegionCommonUpdateBandTimeOff+0x120>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
   189e2:	f5b8 6f61 	cmp.w	r8, #3600	; 0xe10
   189e6:	d315      	bcc.n	18a14 <RegionCommonUpdateBandTimeOff+0xb0>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
   189e8:	f649 23af 	movw	r3, #39599	; 0x9aaf
   189ec:	4598      	cmp	r8, r3
   189ee:	d80a      	bhi.n	18a06 <RegionCommonUpdateBandTimeOff+0xa2>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   189f0:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   189f4:	bf38      	it	cc
   189f6:	f44f 767a 	movcc.w	r6, #1000	; 0x3e8
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
   189fa:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   189fe:	d107      	bne.n	18a10 <RegionCommonUpdateBandTimeOff+0xac>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
   18a00:	4f56      	ldr	r7, [pc, #344]	; (18b5c <RegionCommonUpdateBandTimeOff+0x1f8>)
            band->LastMaxCreditAssignTime = elapsedTime;
   18a02:	60a0      	str	r0, [r4, #8]
   18a04:	e00b      	b.n	18a1e <RegionCommonUpdateBandTimeOff+0xba>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   18a06:	f242 7310 	movw	r3, #10000	; 0x2710
   18a0a:	429e      	cmp	r6, r3
   18a0c:	bf38      	it	cc
   18a0e:	461e      	movcc	r6, r3
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
   18a10:	4f53      	ldr	r7, [pc, #332]	; (18b60 <RegionCommonUpdateBandTimeOff+0x1fc>)
   18a12:	e004      	b.n	18a1e <RegionCommonUpdateBandTimeOff+0xba>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
   18a14:	2e64      	cmp	r6, #100	; 0x64
   18a16:	d8f0      	bhi.n	189fa <RegionCommonUpdateBandTimeOff+0x96>
            band->LastMaxCreditAssignTime = elapsedTime;
   18a18:	2664      	movs	r6, #100	; 0x64
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
   18a1a:	465f      	mov	r7, fp
            band->LastMaxCreditAssignTime = elapsedTime;
   18a1c:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
   18a1e:	68a1      	ldr	r1, [r4, #8]
   18a20:	a80c      	add	r0, sp, #48	; 0x30
   18a22:	f013 fa66 	bl	2bef2 <SysTimeFromMs>
   18a26:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   18a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a2c:	a80a      	add	r0, sp, #40	; 0x28
   18a2e:	9300      	str	r3, [sp, #0]
   18a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18a32:	f013 f9ce 	bl	2bdd2 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
   18a36:	9a03      	ldr	r2, [sp, #12]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
   18a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
   18a3a:	b912      	cbnz	r2, 18a42 <RegionCommonUpdateBandTimeOff+0xde>
   18a3c:	9a07      	ldr	r2, [sp, #28]
   18a3e:	2a00      	cmp	r2, #0
   18a40:	d031      	beq.n	18aa6 <RegionCommonUpdateBandTimeOff+0x142>
   18a42:	6922      	ldr	r2, [r4, #16]
   18a44:	42ba      	cmp	r2, r7
   18a46:	d12e      	bne.n	18aa6 <RegionCommonUpdateBandTimeOff+0x142>
            ( band->MaxTimeCredits != maxCredits ) ||
   18a48:	4a46      	ldr	r2, [pc, #280]	; (18b64 <RegionCommonUpdateBandTimeOff+0x200>)
   18a4a:	4293      	cmp	r3, r2
   18a4c:	d82b      	bhi.n	18aa6 <RegionCommonUpdateBandTimeOff+0x142>
    if( band->LastBandUpdateTime == 0 )
   18a4e:	6863      	ldr	r3, [r4, #4]
   18a50:	b903      	cbnz	r3, 18a54 <RegionCommonUpdateBandTimeOff+0xf0>
        band->TimeCredits = maxCredits;
   18a52:	60e7      	str	r7, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
   18a54:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   18a58:	4293      	cmp	r3, r2
    band->LastBandUpdateTime = currentTime;
   18a5a:	9b05      	ldr	r3, [sp, #20]
        band->TimeCredits = band->MaxTimeCredits;
   18a5c:	bf88      	it	hi
   18a5e:	60e2      	strhi	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
   18a60:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
   18a62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        if( ( bands[i].TimeCredits > creditCosts ) ||
   18a64:	68e1      	ldr	r1, [r4, #12]
        creditCosts = expectedTimeOnAir * dutyCycle;
   18a66:	4373      	muls	r3, r6
        if( ( bands[i].TimeCredits > creditCosts ) ||
   18a68:	4299      	cmp	r1, r3
   18a6a:	d805      	bhi.n	18a78 <RegionCommonUpdateBandTimeOff+0x114>
   18a6c:	9803      	ldr	r0, [sp, #12]
   18a6e:	2800      	cmp	r0, #0
   18a70:	d15e      	bne.n	18b30 <RegionCommonUpdateBandTimeOff+0x1cc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
   18a72:	f1ba 0f00 	cmp.w	sl, #0
   18a76:	d030      	beq.n	18ada <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
   18a78:	2301      	movs	r3, #1
            validBands++;
   18a7a:	441d      	add	r5, r3
            bands[i].ReadyForTransmission = true;
   18a7c:	7523      	strb	r3, [r4, #20]
            validBands++;
   18a7e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = 0; i < nbBands; i++ )
   18a80:	3418      	adds	r4, #24
   18a82:	e793      	b.n	189ac <RegionCommonUpdateBandTimeOff+0x48>
        if( dutyCycleEnabled == false )
   18a84:	9b03      	ldr	r3, [sp, #12]
    if( band->LastBandUpdateTime == 0 )
   18a86:	6860      	ldr	r0, [r4, #4]
        if( dutyCycleEnabled == false )
   18a88:	bb0b      	cbnz	r3, 18ace <RegionCommonUpdateBandTimeOff+0x16a>
            band->TimeCredits = maxCredits;
   18a8a:	f8c4 b00c 	str.w	fp, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
   18a8e:	b310      	cbz	r0, 18ad6 <RegionCommonUpdateBandTimeOff+0x172>
   18a90:	2e01      	cmp	r6, #1
    band->MaxTimeCredits = maxCredits;
   18a92:	f8c4 b010 	str.w	fp, [r4, #16]
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
   18a96:	bf38      	it	cc
   18a98:	2601      	movcc	r6, #1
   18a9a:	f013 fa80 	bl	2bf9e <TimerGetElapsedTime>
   18a9e:	68e3      	ldr	r3, [r4, #12]
   18aa0:	4403      	add	r3, r0
   18aa2:	60e3      	str	r3, [r4, #12]
   18aa4:	e7d6      	b.n	18a54 <RegionCommonUpdateBandTimeOff+0xf0>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   18aa6:	4b30      	ldr	r3, [pc, #192]	; (18b68 <RegionCommonUpdateBandTimeOff+0x204>)
            band->TimeCredits = maxCredits;
   18aa8:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   18aaa:	4598      	cmp	r8, r3
   18aac:	d90b      	bls.n	18ac6 <RegionCommonUpdateBandTimeOff+0x162>
                timeDiff.SubSeconds = 0;
   18aae:	2300      	movs	r3, #0
   18ab0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
   18ab4:	9b02      	ldr	r3, [sp, #8]
   18ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18ab8:	4618      	mov	r0, r3
   18aba:	930a      	str	r3, [sp, #40]	; 0x28
   18abc:	f013 f9fa 	bl	2beb4 <SysTimeToMs>
    if( band->LastBandUpdateTime == 0 )
   18ac0:	6863      	ldr	r3, [r4, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
   18ac2:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
   18ac4:	b10b      	cbz	r3, 18aca <RegionCommonUpdateBandTimeOff+0x166>
    band->MaxTimeCredits = maxCredits;
   18ac6:	6127      	str	r7, [r4, #16]
    if( joined == true )
   18ac8:	e7c4      	b.n	18a54 <RegionCommonUpdateBandTimeOff+0xf0>
        band->TimeCredits = maxCredits;
   18aca:	60e7      	str	r7, [r4, #12]
   18acc:	e7fb      	b.n	18ac6 <RegionCommonUpdateBandTimeOff+0x162>
    if( band->LastBandUpdateTime == 0 )
   18ace:	2800      	cmp	r0, #0
   18ad0:	d1de      	bne.n	18a90 <RegionCommonUpdateBandTimeOff+0x12c>
        band->TimeCredits = maxCredits;
   18ad2:	f8c4 b00c 	str.w	fp, [r4, #12]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
   18ad6:	2000      	movs	r0, #0
   18ad8:	e7da      	b.n	18a90 <RegionCommonUpdateBandTimeOff+0x12c>
            if( bands[i].MaxTimeCredits > creditCosts )
   18ada:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
   18adc:	f884 a014 	strb.w	sl, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
   18ae0:	d201      	bcs.n	18ae6 <RegionCommonUpdateBandTimeOff+0x182>
                validBands++;
   18ae2:	3501      	adds	r5, #1
   18ae4:	b2ed      	uxtb	r5, r5
                SysTime_t backoffTimeRange = {
   18ae6:	2300      	movs	r3, #0
                if( dutyCycle == BACKOFF_DC_1_HOUR )
   18ae8:	2e64      	cmp	r6, #100	; 0x64
   18aea:	4a20      	ldr	r2, [pc, #128]	; (18b6c <RegionCommonUpdateBandTimeOff+0x208>)
                SysTime_t backoffTimeRange = {
   18aec:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
                if( dutyCycle == BACKOFF_DC_1_HOUR )
   18af0:	d02c      	beq.n	18b4c <RegionCommonUpdateBandTimeOff+0x1e8>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
   18af2:	f649 23b0 	movw	r3, #39600	; 0x9ab0
   18af6:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
   18afa:	bf18      	it	ne
   18afc:	4613      	movne	r3, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
   18afe:	4590      	cmp	r8, r2
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
   18b00:	bf88      	it	hi
   18b02:	9a04      	ldrhi	r2, [sp, #16]
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
   18b04:	ae0a      	add	r6, sp, #40	; 0x28
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
   18b06:	bf82      	ittt	hi
   18b08:	f502 32a8 	addhi.w	r2, r2, #86016	; 0x15000
   18b0c:	f502 72c0 	addhi.w	r2, r2, #384	; 0x180
   18b10:	189b      	addhi	r3, r3, r2
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
   18b12:	930a      	str	r3, [sp, #40]	; 0x28
   18b14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18b16:	4630      	mov	r0, r6
   18b18:	9300      	str	r3, [sp, #0]
   18b1a:	e896 0006 	ldmia.w	r6, {r1, r2}
   18b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18b20:	f013 f957 	bl	2bdd2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
   18b24:	e896 0003 	ldmia.w	r6, {r0, r1}
   18b28:	f013 f9c4 	bl	2beb4 <SysTimeToMs>
   18b2c:	4681      	mov	r9, r0
   18b2e:	e7a7      	b.n	18a80 <RegionCommonUpdateBandTimeOff+0x11c>
            bands[i].ReadyForTransmission = false;
   18b30:	2000      	movs	r0, #0
            if( bands[i].MaxTimeCredits > creditCosts )
   18b32:	4293      	cmp	r3, r2
            bands[i].ReadyForTransmission = false;
   18b34:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
   18b36:	d205      	bcs.n	18b44 <RegionCommonUpdateBandTimeOff+0x1e0>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
   18b38:	1a5b      	subs	r3, r3, r1
   18b3a:	4599      	cmp	r9, r3
   18b3c:	bf28      	it	cs
   18b3e:	4699      	movcs	r9, r3
                validBands++;
   18b40:	3501      	adds	r5, #1
   18b42:	b2ed      	uxtb	r5, r5
            if( joined == false )
   18b44:	f1ba 0f00 	cmp.w	sl, #0
   18b48:	d19a      	bne.n	18a80 <RegionCommonUpdateBandTimeOff+0x11c>
   18b4a:	e7cc      	b.n	18ae6 <RegionCommonUpdateBandTimeOff+0x182>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
   18b4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   18b50:	e7d5      	b.n	18afe <RegionCommonUpdateBandTimeOff+0x19a>
   18b52:	bf00      	nop
   18b54:	00015180 	.word	0x00015180
   18b58:	001b7740 	.word	0x001b7740
   18b5c:	0112a880 	.word	0x0112a880
   18b60:	02932e00 	.word	0x02932e00
   18b64:	0001517f 	.word	0x0001517f
   18b68:	0001ec2f 	.word	0x0001ec2f
   18b6c:	0001ec30 	.word	0x0001ec30

00018b70 <RegionCommonComputeSymbolTimeLoRa>:
    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
   18b70:	4b02      	ldr	r3, [pc, #8]	; (18b7c <RegionCommonComputeSymbolTimeLoRa+0xc>)
   18b72:	fa03 f000 	lsl.w	r0, r3, r0
}
   18b76:	fbb0 f0f1 	udiv	r0, r0, r1
   18b7a:	4770      	bx	lr
   18b7c:	000f4240 	.word	0x000f4240

00018b80 <RegionCommonGetBandwidth>:
    return MAX( txPower, maxBandTxPower );
}

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
   18b80:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   18b84:	4b05      	ldr	r3, [pc, #20]	; (18b9c <RegionCommonGetBandwidth+0x1c>)
   18b86:	4298      	cmp	r0, r3
   18b88:	d005      	beq.n	18b96 <RegionCommonGetBandwidth+0x16>
   18b8a:	4b05      	ldr	r3, [pc, #20]	; (18ba0 <RegionCommonGetBandwidth+0x20>)
   18b8c:	1ac3      	subs	r3, r0, r3
   18b8e:	4258      	negs	r0, r3
   18b90:	4158      	adcs	r0, r3
   18b92:	0040      	lsls	r0, r0, #1
   18b94:	4770      	bx	lr
   18b96:	2001      	movs	r0, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
   18b98:	4770      	bx	lr
   18b9a:	bf00      	nop
   18b9c:	0003d090 	.word	0x0003d090
   18ba0:	0007a120 	.word	0x0007a120

00018ba4 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
   18ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
   18ba6:	4b11      	ldr	r3, [pc, #68]	; (18bec <GetTimeOnAir+0x48>)
{
   18ba8:	460c      	mov	r4, r1
   18baa:	b085      	sub	sp, #20
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   18bac:	4910      	ldr	r1, [pc, #64]	; (18bf0 <GetTimeOnAir+0x4c>)
{
   18bae:	4605      	mov	r5, r0
    int8_t phyDr = DataratesEU868[datarate];
   18bb0:	561f      	ldrsb	r7, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   18bb2:	f7ff ffe5 	bl	18b80 <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   18bb6:	4b0f      	ldr	r3, [pc, #60]	; (18bf4 <GetTimeOnAir+0x50>)
   18bb8:	b2e4      	uxtb	r4, r4
   18bba:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   18bbc:	2301      	movs	r3, #1
    if( datarate == DR_7 )
   18bbe:	2d07      	cmp	r5, #7
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
   18bc0:	4601      	mov	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   18bc2:	e9cd 4302 	strd	r4, r3, [sp, #8]
    if( datarate == DR_7 )
   18bc6:	d10a      	bne.n	18bde <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
   18bc8:	2205      	movs	r2, #5
   18bca:	2300      	movs	r3, #0
   18bcc:	e9cd 2300 	strd	r2, r3, [sp]
   18bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18bd4:	437a      	muls	r2, r7
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
   18bd6:	4618      	mov	r0, r3
   18bd8:	47b0      	blx	r6
    }
    return timeOnAir;
}
   18bda:	b005      	add	sp, #20
   18bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
   18bde:	2208      	movs	r2, #8
   18be0:	2000      	movs	r0, #0
   18be2:	e9cd 2000 	strd	r2, r0, [sp]
   18be6:	463a      	mov	r2, r7
   18be8:	e7f5      	b.n	18bd6 <GetTimeOnAir+0x32>
   18bea:	bf00      	nop
   18bec:	00036973 	.word	0x00036973
   18bf0:	00033d7c 	.word	0x00033d7c
   18bf4:	00033c2c 	.word	0x00033c2c

00018bf8 <VerifyRfFreq>:
{
   18bf8:	b538      	push	{r3, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
   18bfa:	4b19      	ldr	r3, [pc, #100]	; (18c60 <VerifyRfFreq+0x68>)
{
   18bfc:	4604      	mov	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
   18bfe:	6a1b      	ldr	r3, [r3, #32]
{
   18c00:	460d      	mov	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
   18c02:	4798      	blx	r3
   18c04:	b158      	cbz	r0, 18c1e <VerifyRfFreq+0x26>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
   18c06:	4b17      	ldr	r3, [pc, #92]	; (18c64 <VerifyRfFreq+0x6c>)
   18c08:	4a17      	ldr	r2, [pc, #92]	; (18c68 <VerifyRfFreq+0x70>)
   18c0a:	4423      	add	r3, r4
   18c0c:	4293      	cmp	r3, r2
   18c0e:	d907      	bls.n	18c20 <VerifyRfFreq+0x28>
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
   18c10:	4b16      	ldr	r3, [pc, #88]	; (18c6c <VerifyRfFreq+0x74>)
   18c12:	4a17      	ldr	r2, [pc, #92]	; (18c70 <VerifyRfFreq+0x78>)
   18c14:	4423      	add	r3, r4
   18c16:	4293      	cmp	r3, r2
   18c18:	d80c      	bhi.n	18c34 <VerifyRfFreq+0x3c>
   18c1a:	2300      	movs	r3, #0
        *band = 0;
   18c1c:	702b      	strb	r3, [r5, #0]
}
   18c1e:	bd38      	pop	{r3, r4, r5, pc}
   18c20:	2302      	movs	r3, #2
   18c22:	e7fb      	b.n	18c1c <VerifyRfFreq+0x24>
   18c24:	2301      	movs	r3, #1
   18c26:	e7f9      	b.n	18c1c <VerifyRfFreq+0x24>
   18c28:	2305      	movs	r3, #5
   18c2a:	e7f7      	b.n	18c1c <VerifyRfFreq+0x24>
   18c2c:	2303      	movs	r3, #3
   18c2e:	e7f5      	b.n	18c1c <VerifyRfFreq+0x24>
   18c30:	2304      	movs	r3, #4
   18c32:	e7f3      	b.n	18c1c <VerifyRfFreq+0x24>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
   18c34:	4b0f      	ldr	r3, [pc, #60]	; (18c74 <VerifyRfFreq+0x7c>)
   18c36:	4a10      	ldr	r2, [pc, #64]	; (18c78 <VerifyRfFreq+0x80>)
   18c38:	4423      	add	r3, r4
   18c3a:	4293      	cmp	r3, r2
   18c3c:	d9f2      	bls.n	18c24 <VerifyRfFreq+0x2c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
   18c3e:	4b0f      	ldr	r3, [pc, #60]	; (18c7c <VerifyRfFreq+0x84>)
   18c40:	4a0f      	ldr	r2, [pc, #60]	; (18c80 <VerifyRfFreq+0x88>)
   18c42:	4423      	add	r3, r4
   18c44:	4293      	cmp	r3, r2
   18c46:	d9ef      	bls.n	18c28 <VerifyRfFreq+0x30>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
   18c48:	4b0e      	ldr	r3, [pc, #56]	; (18c84 <VerifyRfFreq+0x8c>)
   18c4a:	4a0f      	ldr	r2, [pc, #60]	; (18c88 <VerifyRfFreq+0x90>)
   18c4c:	4423      	add	r3, r4
   18c4e:	4293      	cmp	r3, r2
   18c50:	d9ec      	bls.n	18c2c <VerifyRfFreq+0x34>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
   18c52:	4b0e      	ldr	r3, [pc, #56]	; (18c8c <VerifyRfFreq+0x94>)
   18c54:	4a0e      	ldr	r2, [pc, #56]	; (18c90 <VerifyRfFreq+0x98>)
   18c56:	4423      	add	r3, r4
   18c58:	4293      	cmp	r3, r2
   18c5a:	d9e9      	bls.n	18c30 <VerifyRfFreq+0x38>
        return false;
   18c5c:	2000      	movs	r0, #0
   18c5e:	e7de      	b.n	18c1e <VerifyRfFreq+0x26>
   18c60:	00033c2c 	.word	0x00033c2c
   18c64:	cc8faa40 	.word	0xcc8faa40
   18c68:	001e847f 	.word	0x001e847f
   18c6c:	cc7125c0 	.word	0xcc7125c0
   18c70:	002dc6c0 	.word	0x002dc6c0
   18c74:	cc435eff 	.word	0xcc435eff
   18c78:	000927bf 	.word	0x000927bf
   18c7c:	cc38b0a0 	.word	0xcc38b0a0
   18c80:	0007a120 	.word	0x0007a120
   18c84:	cc2e0240 	.word	0xcc2e0240
   18c88:	0003d090 	.word	0x0003d090
   18c8c:	cc296e60 	.word	0xcc296e60
   18c90:	000493e0 	.word	0x000493e0

00018c94 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
   18c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
   18c96:	2300      	movs	r3, #0
   18c98:	9300      	str	r3, [sp, #0]

    switch( getPhy->Attribute )
   18c9a:	7803      	ldrb	r3, [r0, #0]
   18c9c:	3b0b      	subs	r3, #11
   18c9e:	2b2c      	cmp	r3, #44	; 0x2c
   18ca0:	d862      	bhi.n	18d68 <RegionEU868GetPhyParam+0xd4>
   18ca2:	e8df f003 	tbb	[pc, r3]
   18ca6:	2f2c      	.short	0x2f2c
   18ca8:	3b383631 	.word	0x3b383631
   18cac:	4744413e 	.word	0x4744413e
   18cb0:	51614f61 	.word	0x51614f61
   18cb4:	615b5955 	.word	0x615b5955
   18cb8:	17655e61 	.word	0x17655e61
   18cbc:	61616161 	.word	0x61616161
   18cc0:	61616161 	.word	0x61616161
   18cc4:	61616161 	.word	0x61616161
   18cc8:	6c674f61 	.word	0x6c674f61
   18ccc:	6c4f6161 	.word	0x6c4f6161
   18cd0:	6e61      	.short	0x6e61
   18cd2:	72          	.byte	0x72
   18cd3:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18cd4:	7843      	ldrb	r3, [r0, #1]
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
   18cd6:	a801      	add	r0, sp, #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18cd8:	f88d 3004 	strb.w	r3, [sp, #4]
   18cdc:	2307      	movs	r3, #7
   18cde:	f88d 3005 	strb.w	r3, [sp, #5]
   18ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   18ce6:	f8ad 3006 	strh.w	r3, [sp, #6]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
   18cea:	4b2b      	ldr	r3, [pc, #172]	; (18d98 <RegionEU868GetPhyParam+0x104>)
   18cec:	681b      	ldr	r3, [r3, #0]
   18cee:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
   18cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
   18cf6:	f014 fa9e 	bl	2d236 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
   18cfa:	9000      	str	r0, [sp, #0]
            break;
   18cfc:	e034      	b.n	18d68 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
   18cfe:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18d00:	9300      	str	r3, [sp, #0]
            break;
   18d02:	e031      	b.n	18d68 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
   18d04:	2320      	movs	r3, #32
   18d06:	e7fb      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
   18d08:	f990 3001 	ldrsb.w	r3, [r0, #1]
   18d0c:	4a23      	ldr	r2, [pc, #140]	; (18d9c <RegionEU868GetPhyParam+0x108>)
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18d0e:	5cd3      	ldrb	r3, [r2, r3]
   18d10:	e7f6      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
   18d12:	2301      	movs	r3, #1
   18d14:	e7f4      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_MAX_RX_WINDOW;
   18d16:	f640 33b8 	movw	r3, #3000	; 0xbb8
   18d1a:	e7f1      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
   18d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18d20:	e7ee      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
   18d22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   18d26:	e7eb      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
   18d28:	f241 3388 	movw	r3, #5000	; 0x1388
   18d2c:	e7e8      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
   18d2e:	f241 7370 	movw	r3, #6000	; 0x1770
   18d32:	e7e5      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
   18d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   18d38:	4819      	ldr	r0, [pc, #100]	; (18da0 <RegionEU868GetPhyParam+0x10c>)
   18d3a:	f013 f807 	bl	2bd4c <randr>
   18d3e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   18d42:	e7da      	b.n	18cfa <RegionEU868GetPhyParam+0x66>
            phyParam.Value = EU868_RX_WND_2_FREQ;
   18d44:	4b17      	ldr	r3, [pc, #92]	; (18da4 <RegionEU868GetPhyParam+0x110>)
   18d46:	e7db      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   18d48:	4b13      	ldr	r3, [pc, #76]	; (18d98 <RegionEU868GetPhyParam+0x104>)
   18d4a:	681b      	ldr	r3, [r3, #0]
   18d4c:	33c0      	adds	r3, #192	; 0xc0
   18d4e:	e7d7      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
   18d50:	4b11      	ldr	r3, [pc, #68]	; (18d98 <RegionEU868GetPhyParam+0x104>)
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	33c2      	adds	r3, #194	; 0xc2
   18d56:	e7d3      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
   18d58:	2310      	movs	r3, #16
   18d5a:	e7d1      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Channels = RegionNvmGroup2->Channels;
   18d5c:	4b0e      	ldr	r3, [pc, #56]	; (18d98 <RegionEU868GetPhyParam+0x104>)
   18d5e:	681b      	ldr	r3, [r3, #0]
   18d60:	e7ce      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
   18d62:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   18d66:	9300      	str	r3, [sp, #0]
            break;
        }
    }

    return phyParam;
}
   18d68:	9800      	ldr	r0, [sp, #0]
   18d6a:	b005      	add	sp, #20
   18d6c:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
   18d70:	4b0d      	ldr	r3, [pc, #52]	; (18da8 <RegionEU868GetPhyParam+0x114>)
   18d72:	e7f8      	b.n	18d66 <RegionEU868GetPhyParam+0xd2>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
   18d74:	f240 1311 	movw	r3, #273	; 0x111
   18d78:	f8ad 3000 	strh.w	r3, [sp]
            break;
   18d7c:	e7f4      	b.n	18d68 <RegionEU868GetPhyParam+0xd4>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
   18d7e:	2303      	movs	r3, #3
   18d80:	e7be      	b.n	18d00 <RegionEU868GetPhyParam+0x6c>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
   18d82:	f990 3001 	ldrsb.w	r3, [r0, #1]
   18d86:	4a09      	ldr	r2, [pc, #36]	; (18dac <RegionEU868GetPhyParam+0x118>)
   18d88:	e7c1      	b.n	18d0e <RegionEU868GetPhyParam+0x7a>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
   18d8a:	4909      	ldr	r1, [pc, #36]	; (18db0 <RegionEU868GetPhyParam+0x11c>)
   18d8c:	f990 0001 	ldrsb.w	r0, [r0, #1]
   18d90:	f7ff fef6 	bl	18b80 <RegionCommonGetBandwidth>
   18d94:	e7b1      	b.n	18cfa <RegionEU868GetPhyParam+0x66>
   18d96:	bf00      	nop
   18d98:	2003097c 	.word	0x2003097c
   18d9c:	0003696b 	.word	0x0003696b
   18da0:	fffffc18 	.word	0xfffffc18
   18da4:	33d3e608 	.word	0x33d3e608
   18da8:	4009999a 	.word	0x4009999a
   18dac:	00036973 	.word	0x00036973
   18db0:	00033d7c 	.word	0x00033d7c

00018db4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
   18db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
   18db6:	210c      	movs	r1, #12
   18db8:	4b0a      	ldr	r3, [pc, #40]	; (18de4 <RegionEU868SetBandTxDone+0x30>)
   18dba:	7802      	ldrb	r2, [r0, #0]
   18dbc:	681b      	ldr	r3, [r3, #0]
   18dbe:	fb01 3302 	mla	r3, r1, r2, r3
   18dc2:	7a5b      	ldrb	r3, [r3, #9]
   18dc4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   18dc8:	4b07      	ldr	r3, [pc, #28]	; (18de8 <RegionEU868SetBandTxDone+0x34>)
   18dca:	681d      	ldr	r5, [r3, #0]
   18dcc:	6903      	ldr	r3, [r0, #16]
   18dce:	9300      	str	r3, [sp, #0]
   18dd0:	68c3      	ldr	r3, [r0, #12]
   18dd2:	7842      	ldrb	r2, [r0, #1]
   18dd4:	6881      	ldr	r1, [r0, #8]
   18dd6:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
   18dda:	f014 f8c3 	bl	2cf64 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
   18dde:	b003      	add	sp, #12
   18de0:	bd30      	pop	{r4, r5, pc}
   18de2:	bf00      	nop
   18de4:	2003097c 	.word	0x2003097c
   18de8:	20030978 	.word	0x20030978

00018dec <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
   18dec:	b530      	push	{r4, r5, lr}
   18dee:	b0a5      	sub	sp, #148	; 0x94
   18df0:	4604      	mov	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
   18df2:	228e      	movs	r2, #142	; 0x8e
   18df4:	2100      	movs	r1, #0
   18df6:	f10d 0002 	add.w	r0, sp, #2
   18dfa:	f018 fe4c 	bl	31a96 <memset>
   18dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18e02:	2364      	movs	r3, #100	; 0x64
   18e04:	210a      	movs	r1, #10
   18e06:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   18e0a:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
   18e0e:	7b22      	ldrb	r2, [r4, #12]
    Band_t bands[EU868_MAX_NB_BANDS] =
   18e10:	f8ad 3000 	strh.w	r3, [sp]
    switch( params->Type )
   18e14:	2a01      	cmp	r2, #1
    Band_t bands[EU868_MAX_NB_BANDS] =
   18e16:	f8ad 3018 	strh.w	r3, [sp, #24]
   18e1a:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
   18e1e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    switch( params->Type )
   18e22:	d02e      	beq.n	18e82 <RegionEU868InitDefaults+0x96>
   18e24:	2a02      	cmp	r2, #2
   18e26:	d036      	beq.n	18e96 <RegionEU868InitDefaults+0xaa>
   18e28:	bb4a      	cbnz	r2, 18e7e <RegionEU868InitDefaults+0x92>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
   18e2a:	6823      	ldr	r3, [r4, #0]
   18e2c:	b33b      	cbz	r3, 18e7e <RegionEU868InitDefaults+0x92>
   18e2e:	6863      	ldr	r3, [r4, #4]
   18e30:	b32b      	cbz	r3, 18e7e <RegionEU868InitDefaults+0x92>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
   18e32:	4d1e      	ldr	r5, [pc, #120]	; (18eac <RegionEU868InitDefaults+0xc0>)
            RegionBands = (Band_t*) params->Bands;
   18e34:	68a0      	ldr	r0, [r4, #8]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
   18e36:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
   18e38:	4b1d      	ldr	r3, [pc, #116]	; (18eb0 <RegionEU868InitDefaults+0xc4>)

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   18e3a:	2290      	movs	r2, #144	; 0x90
   18e3c:	4669      	mov	r1, sp
            RegionBands = (Band_t*) params->Bands;
   18e3e:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
   18e40:	f012 ff91 	bl	2bd66 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
   18e44:	682c      	ldr	r4, [r5, #0]
   18e46:	4b1b      	ldr	r3, [pc, #108]	; (18eb4 <RegionEU868InitDefaults+0xc8>)
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18e48:	f104 050c 	add.w	r5, r4, #12
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
   18e4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18e50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18e54:	f103 020c 	add.w	r2, r3, #12
   18e58:	ca07      	ldmia	r2, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
   18e5a:	3318      	adds	r3, #24
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
   18e5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
   18e60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18e64:	f104 0518 	add.w	r5, r4, #24
   18e68:	e885 0007 	stmia.w	r5, {r0, r1, r2}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   18e6c:	2307      	movs	r3, #7
   18e6e:	4621      	mov	r1, r4

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18e70:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
   18e72:	f821 3fc2 	strh.w	r3, [r1, #194]!
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18e76:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18e7a:	f014 f864 	bl	2cf46 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
   18e7e:	b025      	add	sp, #148	; 0x94
   18e80:	bd30      	pop	{r4, r5, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
   18e82:	4b0a      	ldr	r3, [pc, #40]	; (18eac <RegionEU868InitDefaults+0xc0>)
   18e84:	6818      	ldr	r0, [r3, #0]
   18e86:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18e88:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
   18e8c:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
   18e8e:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
   18e90:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
   18e92:	30c0      	adds	r0, #192	; 0xc0
   18e94:	e7f1      	b.n	18e7a <RegionEU868InitDefaults+0x8e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
   18e96:	4b05      	ldr	r3, [pc, #20]	; (18eac <RegionEU868InitDefaults+0xc0>)
   18e98:	681b      	ldr	r3, [r3, #0]
   18e9a:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
   18e9e:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
   18ea2:	430a      	orrs	r2, r1
   18ea4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
   18ea8:	e7e9      	b.n	18e7e <RegionEU868InitDefaults+0x92>
   18eaa:	bf00      	nop
   18eac:	2003097c 	.word	0x2003097c
   18eb0:	20030978 	.word	0x20030978
   18eb4:	000333b4 	.word	0x000333b4

00018eb8 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
   18eb8:	b508      	push	{r3, lr}
    switch( chanMaskSet->ChannelsMaskType )
   18eba:	7902      	ldrb	r2, [r0, #4]
   18ebc:	b11a      	cbz	r2, 18ec6 <RegionEU868ChanMaskSet+0xe>
   18ebe:	2a01      	cmp	r2, #1
   18ec0:	d00b      	beq.n	18eda <RegionEU868ChanMaskSet+0x22>
   18ec2:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
   18ec4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
   18ec6:	2201      	movs	r2, #1
   18ec8:	4b07      	ldr	r3, [pc, #28]	; (18ee8 <RegionEU868ChanMaskSet+0x30>)
   18eca:	6801      	ldr	r1, [r0, #0]
   18ecc:	681b      	ldr	r3, [r3, #0]
   18ece:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   18ed2:	f014 f838 	bl	2cf46 <RegionCommonChanMaskCopy>
    return true;
   18ed6:	2001      	movs	r0, #1
   18ed8:	e7f4      	b.n	18ec4 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
   18eda:	4b03      	ldr	r3, [pc, #12]	; (18ee8 <RegionEU868ChanMaskSet+0x30>)
   18edc:	6801      	ldr	r1, [r0, #0]
   18ede:	681b      	ldr	r3, [r3, #0]
   18ee0:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
   18ee4:	e7f5      	b.n	18ed2 <RegionEU868ChanMaskSet+0x1a>
   18ee6:	bf00      	nop
   18ee8:	2003097c 	.word	0x2003097c

00018eec <RegionEU868ComputeRxWindowParameters>:
void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18eec:	2807      	cmp	r0, #7
{
   18eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18ef0:	bfa8      	it	ge
   18ef2:	2007      	movge	r0, #7
{
   18ef4:	461c      	mov	r4, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18ef6:	4d13      	ldr	r5, [pc, #76]	; (18f44 <RegionEU868ComputeRxWindowParameters+0x58>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
   18ef8:	7058      	strb	r0, [r3, #1]
{
   18efa:	460e      	mov	r6, r1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18efc:	4629      	mov	r1, r5
{
   18efe:	4617      	mov	r7, r2
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18f00:	f7ff fe3e 	bl	18b80 <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
   18f04:	f994 3001 	ldrsb.w	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
   18f08:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
   18f0a:	2b07      	cmp	r3, #7
   18f0c:	d113      	bne.n	18f36 <RegionEU868ComputeRxWindowParameters+0x4a>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
   18f0e:	2032      	movs	r0, #50	; 0x32
   18f10:	f014 f8b1 	bl	2d076 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   18f14:	4b0c      	ldr	r3, [pc, #48]	; (18f48 <RegionEU868ComputeRxWindowParameters+0x5c>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   18f16:	4605      	mov	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
   18f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   18f1a:	4798      	blx	r3
   18f1c:	f104 020c 	add.w	r2, r4, #12
   18f20:	3408      	adds	r4, #8
   18f22:	4603      	mov	r3, r0
   18f24:	9201      	str	r2, [sp, #4]
   18f26:	4631      	mov	r1, r6
   18f28:	463a      	mov	r2, r7
   18f2a:	4628      	mov	r0, r5
   18f2c:	9400      	str	r4, [sp, #0]
   18f2e:	f014 f8a7 	bl	2d080 <RegionCommonComputeRxWindowParameters>
}
   18f32:	b003      	add	sp, #12
   18f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
   18f36:	4a05      	ldr	r2, [pc, #20]	; (18f4c <RegionEU868ComputeRxWindowParameters+0x60>)
   18f38:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   18f3c:	5cd0      	ldrb	r0, [r2, r3]
   18f3e:	f7ff fe17 	bl	18b70 <RegionCommonComputeSymbolTimeLoRa>
   18f42:	e7e7      	b.n	18f14 <RegionEU868ComputeRxWindowParameters+0x28>
   18f44:	00033d7c 	.word	0x00033d7c
   18f48:	00033c2c 	.word	0x00033c2c
   18f4c:	00036973 	.word	0x00036973

00018f50 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
   18f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
   18f54:	4f2f      	ldr	r7, [pc, #188]	; (19014 <RegionEU868RxConfig+0xc4>)
{
   18f56:	b08a      	sub	sp, #40	; 0x28
    if( Radio.GetStatus( ) != RF_IDLE )
   18f58:	687b      	ldr	r3, [r7, #4]
{
   18f5a:	4605      	mov	r5, r0
   18f5c:	4688      	mov	r8, r1
    int8_t dr = rxConfig->Datarate;
   18f5e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint32_t frequency = rxConfig->Frequency;
   18f62:	f8d0 9004 	ldr.w	r9, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
   18f66:	4798      	blx	r3
   18f68:	4604      	mov	r4, r0
   18f6a:	2800      	cmp	r0, #0
   18f6c:	d150      	bne.n	19010 <RegionEU868RxConfig+0xc0>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
   18f6e:	7cab      	ldrb	r3, [r5, #18]
   18f70:	b973      	cbnz	r3, 18f90 <RegionEU868RxConfig+0x40>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
   18f72:	4a29      	ldr	r2, [pc, #164]	; (19018 <RegionEU868RxConfig+0xc8>)
   18f74:	782b      	ldrb	r3, [r5, #0]
   18f76:	6812      	ldr	r2, [r2, #0]
   18f78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18f7c:	0099      	lsls	r1, r3, #2
   18f7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18f82:	f8d3 9004 	ldr.w	r9, [r3, #4]
   18f86:	f1b9 0f00 	cmp.w	r9, #0
   18f8a:	d101      	bne.n	18f90 <RegionEU868RxConfig+0x40>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
   18f8c:	f852 9001 	ldr.w	r9, [r2, r1]
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
   18f90:	4b22      	ldr	r3, [pc, #136]	; (1901c <RegionEU868RxConfig+0xcc>)

    Radio.SetChannel( frequency );
   18f92:	4648      	mov	r0, r9
    phyDr = DataratesEU868[dr];
   18f94:	f913 a006 	ldrsb.w	sl, [r3, r6]
    Radio.SetChannel( frequency );
   18f98:	68fb      	ldr	r3, [r7, #12]
   18f9a:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
   18f9c:	7c6b      	ldrb	r3, [r5, #17]
   18f9e:	2e07      	cmp	r6, #7
   18fa0:	892a      	ldrh	r2, [r5, #8]
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   18fa2:	f8d7 9018 	ldr.w	r9, [r7, #24]
   18fa6:	9309      	str	r3, [sp, #36]	; 0x24
    if( dr == DR_7 )
   18fa8:	d121      	bne.n	18fee <RegionEU868RxConfig+0x9e>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
   18faa:	2300      	movs	r3, #0
   18fac:	2101      	movs	r1, #1
   18fae:	e9cd 3104 	strd	r3, r1, [sp, #16]
   18fb2:	2105      	movs	r1, #5
   18fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18fb8:	4a19      	ldr	r2, [pc, #100]	; (19020 <RegionEU868RxConfig+0xd0>)
   18fba:	4618      	mov	r0, r3
   18fbc:	e9cd 2100 	strd	r2, r1, [sp]
   18fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18fc4:	f24c 3150 	movw	r1, #50000	; 0xc350
   18fc8:	fb02 f20a 	mul.w	r2, r2, sl
   18fcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   18fd0:	9306      	str	r3, [sp, #24]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   18fd2:	47c8      	blx	r9
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateEU868[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
   18fd4:	4b13      	ldr	r3, [pc, #76]	; (19024 <RegionEU868RxConfig+0xd4>)
   18fd6:	4620      	mov	r0, r4
   18fd8:	5d99      	ldrb	r1, [r3, r6]
   18fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18fdc:	310d      	adds	r1, #13
   18fde:	b2c9      	uxtb	r1, r1
   18fe0:	4798      	blx	r3

    *datarate = (uint8_t) dr;
    return true;
   18fe2:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
   18fe4:	f888 6000 	strb.w	r6, [r8]
}
   18fe8:	b00a      	add	sp, #40	; 0x28
   18fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
   18fee:	2100      	movs	r1, #0
   18ff0:	2401      	movs	r4, #1
   18ff2:	2308      	movs	r3, #8
   18ff4:	e9cd 1407 	strd	r1, r4, [sp, #28]
   18ff8:	e9cd 1300 	strd	r1, r3, [sp]
   18ffc:	e9cd 1105 	strd	r1, r1, [sp, #20]
   19000:	e9cd 1103 	strd	r1, r1, [sp, #12]
   19004:	9202      	str	r2, [sp, #8]
   19006:	4623      	mov	r3, r4
   19008:	4652      	mov	r2, sl
   1900a:	4620      	mov	r0, r4
   1900c:	78a9      	ldrb	r1, [r5, #2]
   1900e:	e7e0      	b.n	18fd2 <RegionEU868RxConfig+0x82>
        return false;
   19010:	2000      	movs	r0, #0
   19012:	e7e9      	b.n	18fe8 <RegionEU868RxConfig+0x98>
   19014:	00033c2c 	.word	0x00033c2c
   19018:	2003097c 	.word	0x2003097c
   1901c:	00036973 	.word	0x00036973
   19020:	00014585 	.word	0x00014585
   19024:	0003696b 	.word	0x0003696b

00019028 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
   19028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   1902c:	250c      	movs	r5, #12
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   1902e:	f990 3001 	ldrsb.w	r3, [r0, #1]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   19032:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1911c <RegionEU868TxConfig+0xf4>
{
   19036:	4692      	mov	sl, r2
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   19038:	4a39      	ldr	r2, [pc, #228]	; (19120 <RegionEU868TxConfig+0xf8>)
{
   1903a:	b08d      	sub	sp, #52	; 0x34
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
   1903c:	f912 b003 	ldrsb.w	fp, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   19040:	7802      	ldrb	r2, [r0, #0]
   19042:	f8d9 3000 	ldr.w	r3, [r9]
{
   19046:	4604      	mov	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   19048:	fb05 3302 	mla	r3, r5, r2, r3
   1904c:	4a35      	ldr	r2, [pc, #212]	; (19124 <RegionEU868TxConfig+0xfc>)
   1904e:	7a5b      	ldrb	r3, [r3, #9]
   19050:	6812      	ldr	r2, [r2, #0]
   19052:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19056:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
{
   1905a:	910b      	str	r1, [sp, #44]	; 0x2c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   1905c:	f990 0002 	ldrsb.w	r0, [r0, #2]
   19060:	f993 1002 	ldrsb.w	r1, [r3, #2]
   19064:	f014 f902 	bl	2d26c <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   19068:	492f      	ldr	r1, [pc, #188]	; (19128 <RegionEU868TxConfig+0x100>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
   1906a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   1906c:	f994 0001 	ldrsb.w	r0, [r4, #1]
   19070:	f7ff fd86 	bl	18b80 <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   19074:	68a2      	ldr	r2, [r4, #8]
   19076:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
   19078:	4680      	mov	r8, r0
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   1907a:	4630      	mov	r0, r6
   1907c:	f014 f828 	bl	2d0d0 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
   19080:	7822      	ldrb	r2, [r4, #0]
   19082:	f8d9 1000 	ldr.w	r1, [r9]
   19086:	436a      	muls	r2, r5
   19088:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1912c <RegionEU868TxConfig+0x104>
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
   1908c:	4607      	mov	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
   1908e:	f8d9 300c 	ldr.w	r3, [r9, #12]
   19092:	5888      	ldr	r0, [r1, r2]
   19094:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   19096:	f8d9 301c 	ldr.w	r3, [r9, #28]
   1909a:	2500      	movs	r5, #0
   1909c:	469c      	mov	ip, r3
    if( txConfig->Datarate == DR_7 )
   1909e:	f994 3001 	ldrsb.w	r3, [r4, #1]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   190a2:	e9cd 5505 	strd	r5, r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
   190a6:	2b07      	cmp	r3, #7
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   190a8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   190ac:	e9cd 5307 	strd	r5, r3, [sp, #28]
    if( txConfig->Datarate == DR_7 )
   190b0:	d123      	bne.n	190fa <RegionEU868TxConfig+0xd2>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
   190b2:	2301      	movs	r3, #1
   190b4:	e9cd 5303 	strd	r5, r3, [sp, #12]
   190b8:	2305      	movs	r3, #5
   190ba:	e9cd 5301 	strd	r5, r3, [sp, #4]
   190be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   190c2:	fb03 f30b 	mul.w	r3, r3, fp
   190c6:	4639      	mov	r1, r7
   190c8:	9300      	str	r3, [sp, #0]
   190ca:	f246 12a8 	movw	r2, #25000	; 0x61a8
   190ce:	4643      	mov	r3, r8
   190d0:	4628      	mov	r0, r5
   190d2:	4667      	mov	r7, ip
   190d4:	47b8      	blx	r7
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
   190d6:	89a1      	ldrh	r1, [r4, #12]
   190d8:	f994 0001 	ldrsb.w	r0, [r4, #1]
   190dc:	f7ff fd62 	bl	18ba4 <GetTimeOnAir>
   190e0:	f8ca 0000 	str.w	r0, [sl]

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
   190e4:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
   190e8:	4628      	mov	r0, r5
   190ea:	7b21      	ldrb	r1, [r4, #12]
   190ec:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
   190ee:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
   190f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   190f2:	701e      	strb	r6, [r3, #0]
}
   190f4:	b00d      	add	sp, #52	; 0x34
   190f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
   190fa:	2001      	movs	r0, #1
   190fc:	2308      	movs	r3, #8
   190fe:	e9cd 5003 	strd	r5, r0, [sp, #12]
   19102:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19106:	462a      	mov	r2, r5
   19108:	4643      	mov	r3, r8
   1910a:	4665      	mov	r5, ip
   1910c:	4639      	mov	r1, r7
   1910e:	f8cd b000 	str.w	fp, [sp]
   19112:	47a8      	blx	r5
        modem = MODEM_LORA;
   19114:	2001      	movs	r0, #1
   19116:	4605      	mov	r5, r0
   19118:	e7dd      	b.n	190d6 <RegionEU868TxConfig+0xae>
   1911a:	bf00      	nop
   1911c:	2003097c 	.word	0x2003097c
   19120:	00036973 	.word	0x00036973
   19124:	20030978 	.word	0x20030978
   19128:	00033d7c 	.word	0x00033d7c
   1912c:	00033c2c 	.word	0x00033c2c

00019130 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
   19130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
   19134:	2400      	movs	r4, #0
{
   19136:	4605      	mov	r5, r0
   19138:	468a      	mov	sl, r1
   1913a:	4691      	mov	r9, r2
   1913c:	4698      	mov	r8, r3
    uint8_t status = 0x07;
   1913e:	2607      	movs	r6, #7
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
                    {
                        chMask |= 1 << i;
   19140:	f04f 0b01 	mov.w	fp, #1
{
   19144:	b08d      	sub	sp, #52	; 0x34
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
   19146:	9402      	str	r4, [sp, #8]
   19148:	f8ad 400c 	strh.w	r4, [sp, #12]
    uint16_t chMask = 0;
   1914c:	f8ad 4006 	strh.w	r4, [sp, #6]
    while( bytesProcessed < linkAdrReq->PayloadSize )
   19150:	7a2b      	ldrb	r3, [r5, #8]
   19152:	42a3      	cmp	r3, r4
   19154:	d906      	bls.n	19164 <RegionEU868LinkAdrReq+0x34>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
   19156:	6868      	ldr	r0, [r5, #4]
   19158:	a902      	add	r1, sp, #8
   1915a:	4420      	add	r0, r4
   1915c:	f013 ff26 	bl	2cfac <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
   19160:	2800      	cmp	r0, #0
   19162:	d153      	bne.n	1920c <RegionEU868LinkAdrReq+0xdc>
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   19164:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Status = status;
   19166:	f88d 6014 	strb.w	r6, [sp, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
   1916a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   1916e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
   19172:	4e45      	ldr	r6, [pc, #276]	; (19288 <RegionEU868LinkAdrReq+0x158>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
   19174:	f88d 3016 	strb.w	r3, [sp, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   19178:	f89d 300a 	ldrb.w	r3, [sp, #10]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   1917c:	f10d 020a 	add.w	r2, sp, #10
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
   19180:	f88d 3017 	strb.w	r3, [sp, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   19184:	f89d 3008 	ldrb.w	r3, [sp, #8]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   19188:	f10d 0109 	add.w	r1, sp, #9
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
   1918c:	f88d 3018 	strb.w	r3, [sp, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   19190:	7aeb      	ldrb	r3, [r5, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   19192:	a804      	add	r0, sp, #16
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
   19194:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
   19198:	7b2b      	ldrb	r3, [r5, #12]
   1919a:	f88d 301a 	strb.w	r3, [sp, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
   1919e:	7b6b      	ldrb	r3, [r5, #13]
   191a0:	f88d 301b 	strb.w	r3, [sp, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
   191a4:	2310      	movs	r3, #16
   191a6:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
   191aa:	f10d 0306 	add.w	r3, sp, #6
   191ae:	9308      	str	r3, [sp, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
   191b0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   191b4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
   191b8:	6833      	ldr	r3, [r6, #0]
   191ba:	930a      	str	r3, [sp, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
   191bc:	2307      	movs	r3, #7
   191be:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    linkAdrVerifyParams.Version = linkAdrReq->Version;
   191c2:	682b      	ldr	r3, [r5, #0]
   191c4:	9304      	str	r3, [sp, #16]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   191c6:	ab02      	add	r3, sp, #8
   191c8:	f013 ff0a 	bl	2cfe0 <RegionCommonLinkAdrReqVerifyParams>

    // Update channelsMask if everything is correct
    if( status == 0x07 )
   191cc:	2807      	cmp	r0, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
   191ce:	4605      	mov	r5, r0
    if( status == 0x07 )
   191d0:	d10a      	bne.n	191e8 <RegionEU868LinkAdrReq+0xb8>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
   191d2:	6830      	ldr	r0, [r6, #0]
   191d4:	2202      	movs	r2, #2
   191d6:	2100      	movs	r1, #0
   191d8:	30c0      	adds	r0, #192	; 0xc0
   191da:	f012 fdd8 	bl	2bd8e <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
   191de:	6833      	ldr	r3, [r6, #0]
   191e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   191e4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
   191e8:	4628      	mov	r0, r5
    *drOut = linkAdrParams.Datarate;
   191ea:	f89d 3009 	ldrb.w	r3, [sp, #9]
   191ee:	f88a 3000 	strb.w	r3, [sl]
    *txPowOut = linkAdrParams.TxPower;
   191f2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   191f6:	f889 3000 	strb.w	r3, [r9]
    *nbRepOut = linkAdrParams.NbRep;
   191fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   191fe:	f888 3000 	strb.w	r3, [r8]
    *nbBytesParsed = bytesProcessed;
   19202:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19204:	701c      	strb	r4, [r3, #0]
}
   19206:	b00d      	add	sp, #52	; 0x34
   19208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chMask = linkAdrParams.ChMask;
   1920c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   19210:	f89d 300b 	ldrb.w	r3, [sp, #11]
        bytesProcessed += nextIndex;
   19214:	4420      	add	r0, r4
   19216:	b2c4      	uxtb	r4, r0
        chMask = linkAdrParams.ChMask;
   19218:	f8ad 7006 	strh.w	r7, [sp, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
   1921c:	b9f3      	cbnz	r3, 1925c <RegionEU868LinkAdrReq+0x12c>
   1921e:	b317      	cbz	r7, 19266 <RegionEU868LinkAdrReq+0x136>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
   19220:	2000      	movs	r0, #0
   19222:	4a19      	ldr	r2, [pc, #100]	; (19288 <RegionEU868LinkAdrReq+0x158>)
   19224:	2607      	movs	r6, #7
   19226:	6811      	ldr	r1, [r2, #0]
   19228:	f04f 0c0c 	mov.w	ip, #12
   1922c:	4602      	mov	r2, r0
                if( linkAdrParams.ChMaskCtrl == 6 )
   1922e:	2b06      	cmp	r3, #6
   19230:	d11b      	bne.n	1926a <RegionEU868LinkAdrReq+0x13a>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
   19232:	fb0c fe00 	mul.w	lr, ip, r0
   19236:	f851 e00e 	ldr.w	lr, [r1, lr]
   1923a:	f1be 0f00 	cmp.w	lr, #0
   1923e:	d004      	beq.n	1924a <RegionEU868LinkAdrReq+0x11a>
                        chMask |= 1 << i;
   19240:	fa0b f200 	lsl.w	r2, fp, r0
   19244:	433a      	orrs	r2, r7
   19246:	b297      	uxth	r7, r2
   19248:	2201      	movs	r2, #1
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
   1924a:	3001      	adds	r0, #1
   1924c:	2810      	cmp	r0, #16
   1924e:	d1ee      	bne.n	1922e <RegionEU868LinkAdrReq+0xfe>
   19250:	2a00      	cmp	r2, #0
   19252:	f43f af7d 	beq.w	19150 <RegionEU868LinkAdrReq+0x20>
   19256:	f8ad 7006 	strh.w	r7, [sp, #6]
   1925a:	e779      	b.n	19150 <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
   1925c:	1e5a      	subs	r2, r3, #1
   1925e:	2a04      	cmp	r2, #4
   19260:	d901      	bls.n	19266 <RegionEU868LinkAdrReq+0x136>
   19262:	2b06      	cmp	r3, #6
   19264:	d0dc      	beq.n	19220 <RegionEU868LinkAdrReq+0xf0>
            status &= 0xFE; // Channel mask KO
   19266:	2606      	movs	r6, #6
   19268:	e772      	b.n	19150 <RegionEU868LinkAdrReq+0x20>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   1926a:	fa47 fe00 	asr.w	lr, r7, r0
   1926e:	f01e 0f01 	tst.w	lr, #1
   19272:	d0ea      	beq.n	1924a <RegionEU868LinkAdrReq+0x11a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
   19274:	fb0c fe00 	mul.w	lr, ip, r0
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
   19278:	f851 e00e 	ldr.w	lr, [r1, lr]
                        status &= 0xFE; // Channel mask KO
   1927c:	f1be 0f00 	cmp.w	lr, #0
   19280:	bf08      	it	eq
   19282:	2606      	moveq	r6, #6
   19284:	e7e1      	b.n	1924a <RegionEU868LinkAdrReq+0x11a>
   19286:	bf00      	nop
   19288:	2003097c 	.word	0x2003097c

0001928c <RegionEU868DlChannelReq>:
    // Do not accept the request
    return -1;
}

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
   1928c:	b513      	push	{r0, r1, r4, lr}
   1928e:	4604      	mov	r4, r0
    uint8_t status = 0x03;
    uint8_t band = 0;
   19290:	2000      	movs	r0, #0

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
   19292:	7823      	ldrb	r3, [r4, #0]
    uint8_t band = 0;
   19294:	f88d 0007 	strb.w	r0, [sp, #7]
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
   19298:	2b0f      	cmp	r3, #15
   1929a:	d81c      	bhi.n	192d6 <RegionEU868DlChannelReq+0x4a>
    {
        return 0;
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
   1929c:	6860      	ldr	r0, [r4, #4]
   1929e:	f10d 0107 	add.w	r1, sp, #7
   192a2:	f7ff fca9 	bl	18bf8 <VerifyRfFreq>
   192a6:	7823      	ldrb	r3, [r4, #0]
   192a8:	4a0d      	ldr	r2, [pc, #52]	; (192e0 <RegionEU868DlChannelReq+0x54>)
   192aa:	b158      	cbz	r0, 192c4 <RegionEU868DlChannelReq+0x38>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   192ac:	6812      	ldr	r2, [r2, #0]
   192ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   192b2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   192b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   192ba:	b173      	cbz	r3, 192da <RegionEU868DlChannelReq+0x4e>
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
   192bc:	6863      	ldr	r3, [r4, #4]
   192be:	2003      	movs	r0, #3
   192c0:	604b      	str	r3, [r1, #4]
   192c2:	e007      	b.n	192d4 <RegionEU868DlChannelReq+0x48>
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   192c4:	210c      	movs	r1, #12
   192c6:	434b      	muls	r3, r1
   192c8:	6812      	ldr	r2, [r2, #0]
        status &= 0xFE;
   192ca:	2002      	movs	r0, #2
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
   192cc:	58d3      	ldr	r3, [r2, r3]
   192ce:	b90b      	cbnz	r3, 192d4 <RegionEU868DlChannelReq+0x48>
        status &= 0xFD;
   192d0:	f000 0001 	and.w	r0, r0, #1
    }

    return status;
   192d4:	b240      	sxtb	r0, r0
}
   192d6:	b002      	add	sp, #8
   192d8:	bd10      	pop	{r4, pc}
    uint8_t status = 0x03;
   192da:	2003      	movs	r0, #3
   192dc:	e7f8      	b.n	192d0 <RegionEU868DlChannelReq+0x44>
   192de:	bf00      	nop
   192e0:	2003097c 	.word	0x2003097c

000192e4 <RegionEU868NextChannel>:
{
    return currentDr;
}

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
   192e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192e8:	460e      	mov	r6, r1
   192ea:	461f      	mov	r7, r3
    uint8_t nbEnabledChannels = 0;
   192ec:	2100      	movs	r1, #0
    uint8_t nbRestrictedChannels = 0;
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
   192ee:	2307      	movs	r3, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   192f0:	4d37      	ldr	r5, [pc, #220]	; (193d0 <RegionEU868NextChannel+0xec>)
{
   192f2:	4604      	mov	r4, r0
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   192f4:	6828      	ldr	r0, [r5, #0]
{
   192f6:	b096      	sub	sp, #88	; 0x58
   192f8:	4690      	mov	r8, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   192fa:	30c0      	adds	r0, #192	; 0xc0
   192fc:	2201      	movs	r2, #1
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
   192fe:	e9cd 1104 	strd	r1, r1, [sp, #16]
   19302:	e9cd 1106 	strd	r1, r1, [sp, #24]
    uint8_t nbEnabledChannels = 0;
   19306:	f88d 100c 	strb.w	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
   1930a:	f88d 100d 	strb.w	r1, [sp, #13]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
   1930e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
   19312:	f013 fdfa 	bl	2cf0a <RegionCommonCountChannels>
   19316:	b930      	cbnz	r0, 19326 <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   19318:	682a      	ldr	r2, [r5, #0]
   1931a:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
   1931e:	f043 0307 	orr.w	r3, r3, #7
   19322:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   19326:	682a      	ldr	r2, [r5, #0]
    countChannelsParams.Joined = nextChanParams->Joined;
   19328:	7a63      	ldrb	r3, [r4, #9]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
   1932a:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
   1932e:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
   19332:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    countChannelsParams.Bands = RegionBands;
   19336:	4a27      	ldr	r2, [pc, #156]	; (193d4 <RegionEU868NextChannel+0xf0>)
    countChannelsParams.Joined = nextChanParams->Joined;
   19338:	f88d 3020 	strb.w	r3, [sp, #32]
    countChannelsParams.Bands = RegionBands;
   1933c:	6812      	ldr	r2, [r2, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
   1933e:	f994 3008 	ldrsb.w	r3, [r4, #8]
    countChannelsParams.Bands = RegionBands;
   19342:	920b      	str	r2, [sp, #44]	; 0x2c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
   19344:	2210      	movs	r2, #16
   19346:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    countChannelsParams.JoinChannels = &joinChannels;
   1934a:	f10d 020e 	add.w	r2, sp, #14
   1934e:	920d      	str	r2, [sp, #52]	; 0x34
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
   19350:	6822      	ldr	r2, [r4, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
   19352:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
   19356:	920e      	str	r2, [sp, #56]	; 0x38
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
   19358:	6862      	ldr	r2, [r4, #4]
   1935a:	920f      	str	r2, [sp, #60]	; 0x3c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
   1935c:	7aa2      	ldrb	r2, [r4, #10]
   1935e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
   19362:	2206      	movs	r2, #6
   19364:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
   19368:	aa11      	add	r2, sp, #68	; 0x44
   1936a:	e882 0003 	stmia.w	r2, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
   1936e:	7d22      	ldrb	r2, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19370:	8ae1      	ldrh	r1, [r4, #22]
   19372:	4618      	mov	r0, r3
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
   19374:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19378:	f7ff fc14 	bl	18ba4 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
   1937c:	ab08      	add	r3, sp, #32
   1937e:	9315      	str	r3, [sp, #84]	; 0x54

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
   19380:	f10d 030d 	add.w	r3, sp, #13
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
   19384:	9014      	str	r0, [sp, #80]	; 0x50
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
   19386:	9300      	str	r3, [sp, #0]
   19388:	4639      	mov	r1, r7
   1938a:	f8cd 8004 	str.w	r8, [sp, #4]
   1938e:	ab03      	add	r3, sp, #12
   19390:	aa04      	add	r2, sp, #16
   19392:	a80e      	add	r0, sp, #56	; 0x38
   19394:	f013 ff0b 	bl	2d1ae <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
   19398:	4604      	mov	r4, r0
   1939a:	b978      	cbnz	r0, 193bc <RegionEU868NextChannel+0xd8>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
   1939c:	f89d 100c 	ldrb.w	r1, [sp, #12]
   193a0:	3901      	subs	r1, #1
   193a2:	f012 fcd3 	bl	2bd4c <randr>
   193a6:	f100 0358 	add.w	r3, r0, #88	; 0x58
   193aa:	eb0d 0003 	add.w	r0, sp, r3
   193ae:	f810 3c48 	ldrb.w	r3, [r0, #-72]
   193b2:	7033      	strb	r3, [r6, #0]
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
   193b4:	4620      	mov	r0, r4
   193b6:	b016      	add	sp, #88	; 0x58
   193b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
   193bc:	280c      	cmp	r0, #12
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
   193be:	bf01      	itttt	eq
   193c0:	682a      	ldreq	r2, [r5, #0]
   193c2:	f8b2 30c0 	ldrheq.w	r3, [r2, #192]	; 0xc0
   193c6:	f043 0307 	orreq.w	r3, r3, #7
   193ca:	f8a2 30c0 	strheq.w	r3, [r2, #192]	; 0xc0
   193ce:	e7f1      	b.n	193b4 <RegionEU868NextChannel+0xd0>
   193d0:	2003097c 	.word	0x2003097c
   193d4:	20030978 	.word	0x20030978

000193d8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
   193d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
   193da:	2700      	movs	r7, #0
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
   193dc:	7906      	ldrb	r6, [r0, #4]
{
   193de:	4605      	mov	r5, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   193e0:	2e02      	cmp	r6, #2
    uint8_t band = 0;
   193e2:	f88d 7007 	strb.w	r7, [sp, #7]
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   193e6:	d932      	bls.n	1944e <RegionEU868ChannelAdd+0x76>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
   193e8:	2e0f      	cmp	r6, #15
   193ea:	d84d      	bhi.n	19488 <RegionEU868ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   193ec:	6803      	ldr	r3, [r0, #0]
   193ee:	2207      	movs	r2, #7
   193f0:	7a18      	ldrb	r0, [r3, #8]
   193f2:	4639      	mov	r1, r7
   193f4:	f340 0003 	sbfx	r0, r0, #0, #4
   193f8:	b240      	sxtb	r0, r0
   193fa:	f013 fd64 	bl	2cec6 <RegionCommonValueInRange>
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   193fe:	682b      	ldr	r3, [r5, #0]
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19400:	4604      	mov	r4, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19402:	7a18      	ldrb	r0, [r3, #8]
   19404:	2207      	movs	r2, #7
   19406:	f340 1003 	sbfx	r0, r0, #4, #4
   1940a:	4639      	mov	r1, r7
   1940c:	b240      	sxtb	r0, r0
   1940e:	f013 fd5a 	bl	2cec6 <RegionCommonValueInRange>
   19412:	b1b0      	cbz	r0, 19442 <RegionEU868ChannelAdd+0x6a>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
   19414:	fab4 f484 	clz	r4, r4
   19418:	0964      	lsrs	r4, r4, #5
    {
        drInvalid = true;
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   1941a:	682b      	ldr	r3, [r5, #0]
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   1941c:	f10d 0107 	add.w	r1, sp, #7
   19420:	6818      	ldr	r0, [r3, #0]
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
   19422:	7a1b      	ldrb	r3, [r3, #8]
   19424:	f343 0203 	sbfx	r2, r3, #0, #4
   19428:	f343 1303 	sbfx	r3, r3, #4, #4
   1942c:	b252      	sxtb	r2, r2
   1942e:	b25b      	sxtb	r3, r3
   19430:	429a      	cmp	r2, r3
   19432:	dd08      	ble.n	19446 <RegionEU868ChannelAdd+0x6e>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19434:	f7ff fbe0 	bl	18bf8 <VerifyRfFreq>
   19438:	f1c0 0006 	rsb	r0, r0, #6
   1943c:	b2c0      	uxtb	r0, r0

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
    RegionNvmGroup2->Channels[id].Band = band;
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
   1943e:	b003      	add	sp, #12
   19440:	bdf0      	pop	{r4, r5, r6, r7, pc}
        drInvalid = true;
   19442:	2401      	movs	r4, #1
   19444:	e7e9      	b.n	1941a <RegionEU868ChannelAdd+0x42>
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
   19446:	f7ff fbd7 	bl	18bf8 <VerifyRfFreq>
   1944a:	b910      	cbnz	r0, 19452 <RegionEU868ChannelAdd+0x7a>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   1944c:	b1f4      	cbz	r4, 1948c <RegionEU868ChannelAdd+0xb4>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
   1944e:	2006      	movs	r0, #6
   19450:	e7f5      	b.n	1943e <RegionEU868ChannelAdd+0x66>
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
   19452:	b9ec      	cbnz	r4, 19490 <RegionEU868ChannelAdd+0xb8>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
   19454:	4f0f      	ldr	r7, [pc, #60]	; (19494 <RegionEU868ChannelAdd+0xbc>)
   19456:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1945a:	683b      	ldr	r3, [r7, #0]
   1945c:	220c      	movs	r2, #12
   1945e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19462:	6829      	ldr	r1, [r5, #0]
   19464:	f012 fc7f 	bl	2bd66 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
   19468:	230c      	movs	r3, #12
   1946a:	683a      	ldr	r2, [r7, #0]
   1946c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19470:	fb03 2306 	mla	r3, r3, r6, r2
   19474:	7259      	strb	r1, [r3, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
   19476:	2301      	movs	r3, #1
   19478:	f8b2 10c0 	ldrh.w	r1, [r2, #192]	; 0xc0
   1947c:	40b3      	lsls	r3, r6
   1947e:	430b      	orrs	r3, r1
    return LORAMAC_STATUS_OK;
   19480:	4620      	mov	r0, r4
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
   19482:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
   19486:	e7da      	b.n	1943e <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   19488:	2003      	movs	r0, #3
   1948a:	e7d8      	b.n	1943e <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
   1948c:	2004      	movs	r0, #4
   1948e:	e7d6      	b.n	1943e <RegionEU868ChannelAdd+0x66>
        return LORAMAC_STATUS_DATARATE_INVALID;
   19490:	2005      	movs	r0, #5
   19492:	e7d4      	b.n	1943e <RegionEU868ChannelAdd+0x66>
   19494:	2003097c 	.word	0x2003097c

00019498 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
   19498:	b410      	push	{r4}
    uint8_t id = channelRemove->ChannelId;
   1949a:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
   1949c:	2902      	cmp	r1, #2
   1949e:	d90d      	bls.n	194bc <RegionEU868ChannelsRemove+0x24>
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
   194a0:	4b08      	ldr	r3, [pc, #32]	; (194c4 <RegionEU868ChannelsRemove+0x2c>)
   194a2:	2200      	movs	r2, #0
   194a4:	6818      	ldr	r0, [r3, #0]
   194a6:	230c      	movs	r3, #12
   194a8:	434b      	muls	r3, r1
   194aa:	18c4      	adds	r4, r0, r3
   194ac:	50c2      	str	r2, [r0, r3]
   194ae:	e9c4 2201 	strd	r2, r2, [r4, #4]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   194b2:	30c0      	adds	r0, #192	; 0xc0
   194b4:	2210      	movs	r2, #16
}
   194b6:	bc10      	pop	{r4}
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
   194b8:	f013 bd0e 	b.w	2ced8 <RegionCommonChanDisable>
}
   194bc:	2000      	movs	r0, #0
   194be:	bc10      	pop	{r4}
   194c0:	4770      	bx	lr
   194c2:	bf00      	nop
   194c4:	2003097c 	.word	0x2003097c

000194c8 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   194c8:	4b0e      	ldr	r3, [pc, #56]	; (19504 <bt_hex+0x3c>)
   194ca:	2940      	cmp	r1, #64	; 0x40
   194cc:	bf28      	it	cs
   194ce:	2140      	movcs	r1, #64	; 0x40
{
   194d0:	b570      	push	{r4, r5, r6, lr}
   194d2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   194d4:	4c0c      	ldr	r4, [pc, #48]	; (19508 <bt_hex+0x40>)
   194d6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   194d8:	42b0      	cmp	r0, r6
   194da:	f103 0302 	add.w	r3, r3, #2
   194de:	d104      	bne.n	194ea <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   194e0:	2300      	movs	r3, #0
   194e2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   194e6:	4807      	ldr	r0, [pc, #28]	; (19504 <bt_hex+0x3c>)
   194e8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   194ea:	7802      	ldrb	r2, [r0, #0]
   194ec:	0912      	lsrs	r2, r2, #4
   194ee:	5ca2      	ldrb	r2, [r4, r2]
   194f0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   194f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   194f8:	f002 020f 	and.w	r2, r2, #15
   194fc:	5ca2      	ldrb	r2, [r4, r2]
   194fe:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   19502:	e7e9      	b.n	194d8 <bt_hex+0x10>
   19504:	20031acd 	.word	0x20031acd
   19508:	00036995 	.word	0x00036995

0001950c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   1950c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1950e:	7803      	ldrb	r3, [r0, #0]
   19510:	b08b      	sub	sp, #44	; 0x2c
   19512:	4604      	mov	r4, r0
   19514:	ad07      	add	r5, sp, #28
   19516:	2b03      	cmp	r3, #3
   19518:	d821      	bhi.n	1955e <bt_addr_le_str+0x52>
   1951a:	e8df f003 	tbb	[pc, r3]
   1951e:	1a02      	.short	0x1a02
   19520:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   19522:	4912      	ldr	r1, [pc, #72]	; (1956c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   19524:	4628      	mov	r0, r5
   19526:	f018 fc05 	bl	31d34 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1952a:	9505      	str	r5, [sp, #20]
   1952c:	7863      	ldrb	r3, [r4, #1]
   1952e:	211e      	movs	r1, #30
   19530:	9304      	str	r3, [sp, #16]
   19532:	78a3      	ldrb	r3, [r4, #2]
   19534:	4a0e      	ldr	r2, [pc, #56]	; (19570 <bt_addr_le_str+0x64>)
   19536:	9303      	str	r3, [sp, #12]
   19538:	78e3      	ldrb	r3, [r4, #3]
   1953a:	480e      	ldr	r0, [pc, #56]	; (19574 <bt_addr_le_str+0x68>)
   1953c:	9302      	str	r3, [sp, #8]
   1953e:	7923      	ldrb	r3, [r4, #4]
   19540:	9301      	str	r3, [sp, #4]
   19542:	7963      	ldrb	r3, [r4, #5]
   19544:	9300      	str	r3, [sp, #0]
   19546:	79a3      	ldrb	r3, [r4, #6]
   19548:	f010 ff95 	bl	2a476 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1954c:	4809      	ldr	r0, [pc, #36]	; (19574 <bt_addr_le_str+0x68>)
   1954e:	b00b      	add	sp, #44	; 0x2c
   19550:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   19552:	4909      	ldr	r1, [pc, #36]	; (19578 <bt_addr_le_str+0x6c>)
   19554:	e7e6      	b.n	19524 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   19556:	4909      	ldr	r1, [pc, #36]	; (1957c <bt_addr_le_str+0x70>)
   19558:	e7e4      	b.n	19524 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   1955a:	4909      	ldr	r1, [pc, #36]	; (19580 <bt_addr_le_str+0x74>)
   1955c:	e7e2      	b.n	19524 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1955e:	210a      	movs	r1, #10
   19560:	4628      	mov	r0, r5
   19562:	4a08      	ldr	r2, [pc, #32]	; (19584 <bt_addr_le_str+0x78>)
   19564:	f010 ff87 	bl	2a476 <snprintk>
		break;
   19568:	e7df      	b.n	1952a <bt_addr_le_str+0x1e>
   1956a:	bf00      	nop
   1956c:	000346b6 	.word	0x000346b6
   19570:	000346d8 	.word	0x000346d8
   19574:	20031aaf 	.word	0x20031aaf
   19578:	000346bd 	.word	0x000346bd
   1957c:	000346c4 	.word	0x000346c4
   19580:	000346ce 	.word	0x000346ce
   19584:	00037d55 	.word	0x00037d55

00019588 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   19588:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1958a:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   1958c:	4d09      	ldr	r5, [pc, #36]	; (195b4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1958e:	4b0a      	ldr	r3, [pc, #40]	; (195b8 <long_wq_init+0x30>)
{
   19590:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   19592:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   19594:	9302      	str	r3, [sp, #8]
   19596:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   19598:	f017 feb4 	bl	31304 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   1959c:	ab02      	add	r3, sp, #8
   1959e:	4628      	mov	r0, r5
   195a0:	9300      	str	r3, [sp, #0]
   195a2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   195a6:	230a      	movs	r3, #10
   195a8:	4904      	ldr	r1, [pc, #16]	; (195bc <long_wq_init+0x34>)
   195aa:	f00c fd15 	bl	25fd8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   195ae:	4620      	mov	r0, r4
   195b0:	b005      	add	sp, #20
   195b2:	bd30      	pop	{r4, r5, pc}
   195b4:	20009d60 	.word	0x20009d60
   195b8:	000369ad 	.word	0x000369ad
   195bc:	20053068 	.word	0x20053068

000195c0 <bt_long_wq_schedule>:
{
   195c0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   195c2:	4801      	ldr	r0, [pc, #4]	; (195c8 <bt_long_wq_schedule+0x8>)
   195c4:	f00c bd7e 	b.w	260c4 <k_work_schedule_for_queue>
   195c8:	20009d60 	.word	0x20009d60

000195cc <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   195cc:	7803      	ldrb	r3, [r0, #0]
{
   195ce:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   195d0:	2b01      	cmp	r3, #1
   195d2:	d013      	beq.n	195fc <uuid_to_uuid128+0x30>
   195d4:	2b02      	cmp	r3, #2
   195d6:	d027      	beq.n	19628 <uuid_to_uuid128+0x5c>
   195d8:	b97b      	cbnz	r3, 195fa <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   195da:	460a      	mov	r2, r1
   195dc:	4b18      	ldr	r3, [pc, #96]	; (19640 <uuid_to_uuid128+0x74>)
   195de:	f103 0410 	add.w	r4, r3, #16
   195e2:	f853 5b04 	ldr.w	r5, [r3], #4
   195e6:	42a3      	cmp	r3, r4
   195e8:	f842 5b04 	str.w	r5, [r2], #4
   195ec:	d1f9      	bne.n	195e2 <uuid_to_uuid128+0x16>
   195ee:	781b      	ldrb	r3, [r3, #0]
   195f0:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   195f2:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   195f4:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   195f6:	0a1b      	lsrs	r3, r3, #8
   195f8:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   195fa:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   195fc:	460a      	mov	r2, r1
   195fe:	4b10      	ldr	r3, [pc, #64]	; (19640 <uuid_to_uuid128+0x74>)
   19600:	f103 0410 	add.w	r4, r3, #16
   19604:	f853 5b04 	ldr.w	r5, [r3], #4
   19608:	42a3      	cmp	r3, r4
   1960a:	f842 5b04 	str.w	r5, [r2], #4
   1960e:	d1f9      	bne.n	19604 <uuid_to_uuid128+0x38>
   19610:	781b      	ldrb	r3, [r3, #0]
   19612:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   19614:	6843      	ldr	r3, [r0, #4]
   19616:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1961a:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   1961c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1961e:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   19620:	0a1b      	lsrs	r3, r3, #8
   19622:	738a      	strb	r2, [r1, #14]
   19624:	740b      	strb	r3, [r1, #16]
}
   19626:	e7e8      	b.n	195fa <uuid_to_uuid128+0x2e>
   19628:	f100 0310 	add.w	r3, r0, #16
   1962c:	f850 2b04 	ldr.w	r2, [r0], #4
   19630:	4298      	cmp	r0, r3
   19632:	f841 2b04 	str.w	r2, [r1], #4
   19636:	d1f9      	bne.n	1962c <uuid_to_uuid128+0x60>
   19638:	7803      	ldrb	r3, [r0, #0]
   1963a:	700b      	strb	r3, [r1, #0]
   1963c:	e7dd      	b.n	195fa <uuid_to_uuid128+0x2e>
   1963e:	bf00      	nop
   19640:	000369b6 	.word	0x000369b6

00019644 <bt_buf_get_rx>:
	     type == BT_BUF_ISO_IN) {
		return bt_iso_get_rx(timeout);
	}

#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	if (type == BT_BUF_EVT) {
   19644:	2801      	cmp	r0, #1
{
   19646:	b538      	push	{r3, r4, r5, lr}
   19648:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   1964a:	bf0c      	ite	eq
   1964c:	4806      	ldreq	r0, [pc, #24]	; (19668 <bt_buf_get_rx+0x24>)
   1964e:	4807      	ldrne	r0, [pc, #28]	; (1966c <bt_buf_get_rx+0x28>)
   19650:	f015 ff89 	bl	2f566 <net_buf_alloc_fixed>
   19654:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   19656:	b120      	cbz	r0, 19662 <bt_buf_get_rx+0x1e>
	net_buf_simple_reserve(&buf->b, reserve);
   19658:	2101      	movs	r1, #1
   1965a:	300c      	adds	r0, #12
   1965c:	f015 ff8a 	bl	2f574 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19660:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   19662:	4620      	mov	r0, r4
   19664:	bd38      	pop	{r3, r4, r5, pc}
   19666:	bf00      	nop
   19668:	20008f84 	.word	0x20008f84
   1966c:	20008f00 	.word	0x20008f00

00019670 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   19670:	b510      	push	{r4, lr}
   19672:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   19674:	490a      	ldr	r1, [pc, #40]	; (196a0 <bt_buf_get_cmd_complete+0x30>)
{
   19676:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   19678:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   1967c:	b920      	cbnz	r0, 19688 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1967e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   19682:	2001      	movs	r0, #1
   19684:	f7ff bfde 	b.w	19644 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   19688:	f015 ffa7 	bl	2f5da <net_buf_ref>
   1968c:	2101      	movs	r1, #1
		buf->len = 0U;
   1968e:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   19690:	4604      	mov	r4, r0
   19692:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   19694:	8203      	strh	r3, [r0, #16]
   19696:	300c      	adds	r0, #12
   19698:	f015 ff6c 	bl	2f574 <net_buf_simple_reserve>
}
   1969c:	4620      	mov	r0, r4
   1969e:	bd10      	pop	{r4, pc}
   196a0:	20008000 	.word	0x20008000

000196a4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   196a4:	b570      	push	{r4, r5, r6, lr}
   196a6:	4604      	mov	r4, r0
	switch (evt) {
   196a8:	2c0f      	cmp	r4, #15
{
   196aa:	460d      	mov	r5, r1
   196ac:	4610      	mov	r0, r2
   196ae:	4619      	mov	r1, r3
	switch (evt) {
   196b0:	d805      	bhi.n	196be <bt_buf_get_evt+0x1a>
   196b2:	2c0d      	cmp	r4, #13
   196b4:	d90d      	bls.n	196d2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   196b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   196ba:	f7ff bfd9 	b.w	19670 <bt_buf_get_cmd_complete>
	switch (evt) {
   196be:	2c13      	cmp	r4, #19
   196c0:	d107      	bne.n	196d2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   196c2:	480c      	ldr	r0, [pc, #48]	; (196f4 <bt_buf_get_evt+0x50>)
   196c4:	f015 ff4f 	bl	2f566 <net_buf_alloc_fixed>
			if (buf) {
   196c8:	4604      	mov	r4, r0
   196ca:	b938      	cbnz	r0, 196dc <bt_buf_get_evt+0x38>
{
   196cc:	2400      	movs	r4, #0
}
   196ce:	4620      	mov	r0, r4
   196d0:	bd70      	pop	{r4, r5, r6, pc}
   196d2:	4602      	mov	r2, r0
   196d4:	460b      	mov	r3, r1
		if (discardable) {
   196d6:	b145      	cbz	r5, 196ea <bt_buf_get_evt+0x46>
   196d8:	4807      	ldr	r0, [pc, #28]	; (196f8 <bt_buf_get_evt+0x54>)
   196da:	e7f3      	b.n	196c4 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   196dc:	2101      	movs	r1, #1
   196de:	300c      	adds	r0, #12
   196e0:	f015 ff48 	bl	2f574 <net_buf_simple_reserve>
   196e4:	2301      	movs	r3, #1
   196e6:	7623      	strb	r3, [r4, #24]
}
   196e8:	e7f1      	b.n	196ce <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   196ea:	2001      	movs	r0, #1
}
   196ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   196f0:	f7ff bfa8 	b.w	19644 <bt_buf_get_rx>
   196f4:	20009008 	.word	0x20009008
   196f8:	20008f58 	.word	0x20008f58

000196fc <hci_disconn_complete_prio>:
{
   196fc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   196fe:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19700:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   19704:	781b      	ldrb	r3, [r3, #0]
   19706:	b963      	cbnz	r3, 19722 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   19708:	4620      	mov	r0, r4
   1970a:	f002 fd6f 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   1970e:	4605      	mov	r5, r0
   19710:	b940      	cbnz	r0, 19724 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   19712:	4b08      	ldr	r3, [pc, #32]	; (19734 <hci_disconn_complete_prio+0x38>)
   19714:	881a      	ldrh	r2, [r3, #0]
   19716:	b922      	cbnz	r2, 19722 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   19718:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   1971c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   19720:	8018      	strh	r0, [r3, #0]
}
   19722:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   19724:	2101      	movs	r1, #1
   19726:	f002 fd69 	bl	1c1fc <bt_conn_set_state>
	bt_conn_unref(conn);
   1972a:	4628      	mov	r0, r5
}
   1972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   19730:	f014 ba9b 	b.w	2dc6a <bt_conn_unref>
   19734:	20030fc0 	.word	0x20030fc0

00019738 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   19738:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1973a:	4c08      	ldr	r4, [pc, #32]	; (1975c <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1973c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1973e:	2205      	movs	r2, #5
   19740:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   19744:	f002 ff98 	bl	1c678 <bt_conn_lookup_state_le>
		if (!conn) {
   19748:	b938      	cbnz	r0, 1975a <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1974a:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1974e:	2204      	movs	r2, #4
}
   19750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   19754:	4902      	ldr	r1, [pc, #8]	; (19760 <find_pending_connect.part.0+0x28>)
   19756:	f002 bf8f 	b.w	1c678 <bt_conn_lookup_state_le>
}
   1975a:	bd10      	pop	{r4, pc}
   1975c:	20008000 	.word	0x20008000
   19760:	0003697b 	.word	0x0003697b

00019764 <hci_data_buf_overflow>:
{
   19764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   19766:	68c3      	ldr	r3, [r0, #12]
   19768:	2202      	movs	r2, #2
   1976a:	781b      	ldrb	r3, [r3, #0]
   1976c:	4906      	ldr	r1, [pc, #24]	; (19788 <hci_data_buf_overflow+0x24>)
   1976e:	9303      	str	r3, [sp, #12]
   19770:	4b06      	ldr	r3, [pc, #24]	; (1978c <hci_data_buf_overflow+0x28>)
   19772:	9302      	str	r3, [sp, #8]
   19774:	2300      	movs	r3, #0
   19776:	4618      	mov	r0, r3
   19778:	e9cd 3300 	strd	r3, r3, [sp]
   1977c:	f013 fef5 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   19780:	b005      	add	sp, #20
   19782:	f85d fb04 	ldr.w	pc, [sp], #4
   19786:	bf00      	nop
   19788:	00033234 	.word	0x00033234
   1978c:	000369c7 	.word	0x000369c7

00019790 <rx_queue_put>:
{
   19790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19792:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   19794:	480b      	ldr	r0, [pc, #44]	; (197c4 <rx_queue_put+0x34>)
   19796:	f015 fef1 	bl	2f57c <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1979a:	490b      	ldr	r1, [pc, #44]	; (197c8 <rx_queue_put+0x38>)
   1979c:	480b      	ldr	r0, [pc, #44]	; (197cc <rx_queue_put+0x3c>)
   1979e:	f017 fda0 	bl	312e2 <k_work_submit_to_queue>
	if (err < 0) {
   197a2:	2800      	cmp	r0, #0
   197a4:	da0a      	bge.n	197bc <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   197a6:	4b0a      	ldr	r3, [pc, #40]	; (197d0 <rx_queue_put+0x40>)
   197a8:	9003      	str	r0, [sp, #12]
   197aa:	9302      	str	r3, [sp, #8]
   197ac:	2300      	movs	r3, #0
   197ae:	2201      	movs	r2, #1
   197b0:	4618      	mov	r0, r3
   197b2:	e9cd 3300 	strd	r3, r3, [sp]
   197b6:	4907      	ldr	r1, [pc, #28]	; (197d4 <rx_queue_put+0x44>)
   197b8:	f013 fed7 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   197bc:	b005      	add	sp, #20
   197be:	f85d fb04 	ldr.w	pc, [sp], #4
   197c2:	bf00      	nop
   197c4:	2000813c 	.word	0x2000813c
   197c8:	200085ac 	.word	0x200085ac
   197cc:	20009ed0 	.word	0x20009ed0
   197d0:	000369ef 	.word	0x000369ef
   197d4:	00033234 	.word	0x00033234

000197d8 <hci_hardware_error>:
{
   197d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   197da:	2101      	movs	r1, #1
   197dc:	300c      	adds	r0, #12
   197de:	f015 ff52 	bl	2f686 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   197e2:	7803      	ldrb	r3, [r0, #0]
   197e4:	2201      	movs	r2, #1
   197e6:	9303      	str	r3, [sp, #12]
   197e8:	4b05      	ldr	r3, [pc, #20]	; (19800 <hci_hardware_error+0x28>)
   197ea:	4906      	ldr	r1, [pc, #24]	; (19804 <hci_hardware_error+0x2c>)
   197ec:	9302      	str	r3, [sp, #8]
   197ee:	2300      	movs	r3, #0
   197f0:	4618      	mov	r0, r3
   197f2:	e9cd 3300 	strd	r3, r3, [sp]
   197f6:	f013 feb8 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   197fa:	b005      	add	sp, #20
   197fc:	f85d fb04 	ldr.w	pc, [sp], #4
   19800:	00036a0c 	.word	0x00036a0c
   19804:	00033234 	.word	0x00033234

00019808 <le_data_len_change>:
{
   19808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1980a:	68c3      	ldr	r3, [r0, #12]
   1980c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1980e:	4620      	mov	r0, r4
   19810:	f002 fcec 	bl	1c1ec <bt_conn_lookup_handle>
   19814:	4603      	mov	r3, r0
	if (!conn) {
   19816:	b950      	cbnz	r0, 1982e <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19818:	4a07      	ldr	r2, [pc, #28]	; (19838 <le_data_len_change+0x30>)
   1981a:	4908      	ldr	r1, [pc, #32]	; (1983c <le_data_len_change+0x34>)
   1981c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   19820:	9403      	str	r4, [sp, #12]
   19822:	2201      	movs	r2, #1
   19824:	9000      	str	r0, [sp, #0]
   19826:	f013 fea0 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1982a:	b004      	add	sp, #16
   1982c:	bd10      	pop	{r4, pc}
   1982e:	b004      	add	sp, #16
   19830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   19834:	f014 ba19 	b.w	2dc6a <bt_conn_unref>
   19838:	00036a2e 	.word	0x00036a2e
   1983c:	00033234 	.word	0x00033234

00019840 <le_phy_update_complete>:
{
   19840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19842:	68c3      	ldr	r3, [r0, #12]
   19844:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   19848:	4620      	mov	r0, r4
   1984a:	f002 fccf 	bl	1c1ec <bt_conn_lookup_handle>
   1984e:	4603      	mov	r3, r0
	if (!conn) {
   19850:	b950      	cbnz	r0, 19868 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19852:	4a08      	ldr	r2, [pc, #32]	; (19874 <le_phy_update_complete+0x34>)
   19854:	4908      	ldr	r1, [pc, #32]	; (19878 <le_phy_update_complete+0x38>)
   19856:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1985a:	9403      	str	r4, [sp, #12]
   1985c:	2201      	movs	r2, #1
   1985e:	9000      	str	r0, [sp, #0]
   19860:	f013 fe83 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   19864:	b004      	add	sp, #16
   19866:	bd10      	pop	{r4, pc}
   19868:	b004      	add	sp, #16
   1986a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1986e:	f014 b9fc 	b.w	2dc6a <bt_conn_unref>
   19872:	bf00      	nop
   19874:	00036a2e 	.word	0x00036a2e
   19878:	00033234 	.word	0x00033234

0001987c <hci_disconn_complete>:
{
   1987c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1987e:	68c5      	ldr	r5, [r0, #12]
{
   19880:	b085      	sub	sp, #20
	if (evt->status) {
   19882:	782e      	ldrb	r6, [r5, #0]
   19884:	b986      	cbnz	r6, 198a8 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19886:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1988a:	4638      	mov	r0, r7
   1988c:	f002 fcae 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   19890:	4604      	mov	r4, r0
   19892:	b958      	cbnz	r0, 198ac <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   19894:	4b0b      	ldr	r3, [pc, #44]	; (198c4 <hci_disconn_complete+0x48>)
   19896:	2201      	movs	r2, #1
   19898:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1989c:	490a      	ldr	r1, [pc, #40]	; (198c8 <hci_disconn_complete+0x4c>)
   1989e:	4603      	mov	r3, r0
   198a0:	9703      	str	r7, [sp, #12]
   198a2:	9000      	str	r0, [sp, #0]
   198a4:	f013 fe61 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   198a8:	b005      	add	sp, #20
   198aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   198ac:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   198ae:	4631      	mov	r1, r6
	conn->err = evt->reason;
   198b0:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   198b2:	f002 fca3 	bl	1c1fc <bt_conn_set_state>
		bt_conn_unref(conn);
   198b6:	4620      	mov	r0, r4
}
   198b8:	b005      	add	sp, #20
   198ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   198be:	f014 b9d4 	b.w	2dc6a <bt_conn_unref>
   198c2:	bf00      	nop
   198c4:	00036a52 	.word	0x00036a52
   198c8:	00033234 	.word	0x00033234

000198cc <handle_event>:
{
   198cc:	b530      	push	{r4, r5, lr}
   198ce:	4604      	mov	r4, r0
   198d0:	4608      	mov	r0, r1
   198d2:	b087      	sub	sp, #28
   198d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   198d8:	4293      	cmp	r3, r2
   198da:	d112      	bne.n	19902 <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   198dc:	8a05      	ldrh	r5, [r0, #16]
   198de:	68c0      	ldr	r0, [r0, #12]
   198e0:	4629      	mov	r1, r5
   198e2:	f7ff fdf1 	bl	194c8 <bt_hex>
   198e6:	4b16      	ldr	r3, [pc, #88]	; (19940 <handle_event+0x74>)
   198e8:	e9cd 5004 	strd	r5, r0, [sp, #16]
   198ec:	9302      	str	r3, [sp, #8]
   198ee:	2300      	movs	r3, #0
   198f0:	2202      	movs	r2, #2
   198f2:	4618      	mov	r0, r3
   198f4:	e9cd 3300 	strd	r3, r3, [sp]
   198f8:	4912      	ldr	r1, [pc, #72]	; (19944 <handle_event+0x78>)
   198fa:	9403      	str	r4, [sp, #12]
   198fc:	f013 fe35 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   19900:	e014      	b.n	1992c <handle_event+0x60>
		if (handler->event != event) {
   19902:	4611      	mov	r1, r2
   19904:	f811 5b08 	ldrb.w	r5, [r1], #8
   19908:	42a5      	cmp	r5, r4
   1990a:	d116      	bne.n	1993a <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   1990c:	8a03      	ldrh	r3, [r0, #16]
   1990e:	7851      	ldrb	r1, [r2, #1]
   19910:	4299      	cmp	r1, r3
   19912:	d90d      	bls.n	19930 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   19914:	e9cd 3403 	strd	r3, r4, [sp, #12]
   19918:	4b0b      	ldr	r3, [pc, #44]	; (19948 <handle_event+0x7c>)
   1991a:	2201      	movs	r2, #1
   1991c:	9302      	str	r3, [sp, #8]
   1991e:	2300      	movs	r3, #0
   19920:	4908      	ldr	r1, [pc, #32]	; (19944 <handle_event+0x78>)
   19922:	4618      	mov	r0, r3
   19924:	e9cd 3300 	strd	r3, r3, [sp]
   19928:	f013 fe1f 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1992c:	b007      	add	sp, #28
   1992e:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   19930:	6853      	ldr	r3, [r2, #4]
}
   19932:	b007      	add	sp, #28
   19934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   19938:	4718      	bx	r3
   1993a:	460a      	mov	r2, r1
   1993c:	e7cc      	b.n	198d8 <handle_event+0xc>
   1993e:	bf00      	nop
   19940:	00036a9a 	.word	0x00036a9a
   19944:	00033234 	.word	0x00033234
   19948:	00036a78 	.word	0x00036a78

0001994c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1994c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1994e:	4853      	ldr	r0, [pc, #332]	; (19a9c <rx_work_handler+0x150>)
{
   19950:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   19952:	f015 fe29 	bl	2f5a8 <net_buf_slist_get>
	if (!buf) {
   19956:	4604      	mov	r4, r0
   19958:	2800      	cmp	r0, #0
   1995a:	d064      	beq.n	19a26 <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1995c:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1995e:	2b01      	cmp	r3, #1
   19960:	d063      	beq.n	19a2a <rx_work_handler+0xde>
   19962:	2b03      	cmp	r3, #3
   19964:	f040 8090 	bne.w	19a88 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19968:	8a03      	ldrh	r3, [r0, #16]
   1996a:	2b03      	cmp	r3, #3
   1996c:	d80c      	bhi.n	19988 <rx_work_handler+0x3c>
   1996e:	f240 13ed 	movw	r3, #493	; 0x1ed
   19972:	4a4b      	ldr	r2, [pc, #300]	; (19aa0 <rx_work_handler+0x154>)
   19974:	494b      	ldr	r1, [pc, #300]	; (19aa4 <rx_work_handler+0x158>)
   19976:	484c      	ldr	r0, [pc, #304]	; (19aa8 <rx_work_handler+0x15c>)
   19978:	f011 f858 	bl	2aa2c <assert_print>
   1997c:	4040      	eors	r0, r0
   1997e:	f380 8811 	msr	BASEPRI, r0
   19982:	f04f 0003 	mov.w	r0, #3
   19986:	df02      	svc	2
   19988:	2104      	movs	r1, #4
   1998a:	f104 000c 	add.w	r0, r4, #12
   1998e:	f015 fe7a 	bl	2f686 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   19992:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   19994:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   19996:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   19998:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1999a:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   1999c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   199a0:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   199a2:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   199a4:	d00f      	beq.n	199c6 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   199a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
   199aa:	4b40      	ldr	r3, [pc, #256]	; (19aac <rx_work_handler+0x160>)
   199ac:	2201      	movs	r2, #1
   199ae:	9302      	str	r3, [sp, #8]
   199b0:	2300      	movs	r3, #0
   199b2:	493f      	ldr	r1, [pc, #252]	; (19ab0 <rx_work_handler+0x164>)
   199b4:	4618      	mov	r0, r3
   199b6:	e9cd 3300 	strd	r3, r3, [sp]
   199ba:	f013 fdd6 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   199be:	4620      	mov	r0, r4
   199c0:	f006 fee6 	bl	20790 <net_buf_unref>
		break;
   199c4:	e01a      	b.n	199fc <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   199c6:	f002 fc11 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   199ca:	4605      	mov	r5, r0
   199cc:	b958      	cbnz	r0, 199e6 <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   199ce:	8b63      	ldrh	r3, [r4, #26]
   199d0:	2201      	movs	r2, #1
   199d2:	9303      	str	r3, [sp, #12]
   199d4:	4b37      	ldr	r3, [pc, #220]	; (19ab4 <rx_work_handler+0x168>)
   199d6:	4936      	ldr	r1, [pc, #216]	; (19ab0 <rx_work_handler+0x164>)
   199d8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   199dc:	4603      	mov	r3, r0
   199de:	9000      	str	r0, [sp, #0]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   199e0:	f013 fdc3 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
   199e4:	e7eb      	b.n	199be <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   199e6:	f002 fced 	bl	1c3c4 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   199ea:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   199ec:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   199ee:	0b32      	lsrs	r2, r6, #12
   199f0:	4628      	mov	r0, r5
   199f2:	f002 fac7 	bl	1bf84 <bt_conn_recv>
	bt_conn_unref(conn);
   199f6:	4628      	mov	r0, r5
   199f8:	f014 f937 	bl	2dc6a <bt_conn_unref>
	return list->head;
   199fc:	4b2e      	ldr	r3, [pc, #184]	; (19ab8 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   199fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   19a02:	b183      	cbz	r3, 19a26 <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   19a04:	492d      	ldr	r1, [pc, #180]	; (19abc <rx_work_handler+0x170>)
   19a06:	482e      	ldr	r0, [pc, #184]	; (19ac0 <rx_work_handler+0x174>)
   19a08:	f017 fc6b 	bl	312e2 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   19a0c:	2800      	cmp	r0, #0
   19a0e:	da0a      	bge.n	19a26 <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   19a10:	4b2c      	ldr	r3, [pc, #176]	; (19ac4 <rx_work_handler+0x178>)
   19a12:	9003      	str	r0, [sp, #12]
   19a14:	9302      	str	r3, [sp, #8]
   19a16:	2300      	movs	r3, #0
   19a18:	2201      	movs	r2, #1
   19a1a:	4618      	mov	r0, r3
   19a1c:	e9cd 3300 	strd	r3, r3, [sp]
   19a20:	4923      	ldr	r1, [pc, #140]	; (19ab0 <rx_work_handler+0x164>)
   19a22:	f013 fda2 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   19a26:	b006      	add	sp, #24
   19a28:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   19a2a:	8a03      	ldrh	r3, [r0, #16]
   19a2c:	2b01      	cmp	r3, #1
   19a2e:	d80c      	bhi.n	19a4a <rx_work_handler+0xfe>
   19a30:	f640 136d 	movw	r3, #2413	; 0x96d
   19a34:	4a1a      	ldr	r2, [pc, #104]	; (19aa0 <rx_work_handler+0x154>)
   19a36:	491b      	ldr	r1, [pc, #108]	; (19aa4 <rx_work_handler+0x158>)
   19a38:	481b      	ldr	r0, [pc, #108]	; (19aa8 <rx_work_handler+0x15c>)
   19a3a:	f010 fff7 	bl	2aa2c <assert_print>
   19a3e:	4040      	eors	r0, r0
   19a40:	f380 8811 	msr	BASEPRI, r0
   19a44:	f04f 0003 	mov.w	r0, #3
   19a48:	df02      	svc	2
   19a4a:	2102      	movs	r1, #2
   19a4c:	f104 000c 	add.w	r0, r4, #12
   19a50:	f015 fe19 	bl	2f686 <net_buf_simple_pull_mem>
   19a54:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   19a56:	7800      	ldrb	r0, [r0, #0]
   19a58:	f013 fd45 	bl	2d4e6 <bt_hci_evt_get_flags>
   19a5c:	0783      	lsls	r3, r0, #30
   19a5e:	d40c      	bmi.n	19a7a <rx_work_handler+0x12e>
   19a60:	f640 1371 	movw	r3, #2417	; 0x971
   19a64:	4a0e      	ldr	r2, [pc, #56]	; (19aa0 <rx_work_handler+0x154>)
   19a66:	4918      	ldr	r1, [pc, #96]	; (19ac8 <rx_work_handler+0x17c>)
   19a68:	480f      	ldr	r0, [pc, #60]	; (19aa8 <rx_work_handler+0x15c>)
   19a6a:	f010 ffdf 	bl	2aa2c <assert_print>
   19a6e:	4040      	eors	r0, r0
   19a70:	f380 8811 	msr	BASEPRI, r0
   19a74:	f04f 0003 	mov.w	r0, #3
   19a78:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   19a7a:	2306      	movs	r3, #6
   19a7c:	4621      	mov	r1, r4
   19a7e:	4a13      	ldr	r2, [pc, #76]	; (19acc <rx_work_handler+0x180>)
   19a80:	7828      	ldrb	r0, [r5, #0]
   19a82:	f7ff ff23 	bl	198cc <handle_event>
	net_buf_unref(buf);
   19a86:	e79a      	b.n	199be <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   19a88:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   19a8a:	4b11      	ldr	r3, [pc, #68]	; (19ad0 <rx_work_handler+0x184>)
   19a8c:	2201      	movs	r2, #1
   19a8e:	9302      	str	r3, [sp, #8]
   19a90:	2300      	movs	r3, #0
   19a92:	4907      	ldr	r1, [pc, #28]	; (19ab0 <rx_work_handler+0x164>)
   19a94:	4618      	mov	r0, r3
   19a96:	e9cd 3300 	strd	r3, r3, [sp]
   19a9a:	e7a1      	b.n	199e0 <rx_work_handler+0x94>
   19a9c:	2000813c 	.word	0x2000813c
   19aa0:	00036abc 	.word	0x00036abc
   19aa4:	00036af0 	.word	0x00036af0
   19aa8:	00036b09 	.word	0x00036b09
   19aac:	00036b26 	.word	0x00036b26
   19ab0:	00033234 	.word	0x00033234
   19ab4:	00036b4a 	.word	0x00036b4a
   19ab8:	20008000 	.word	0x20008000
   19abc:	200085ac 	.word	0x200085ac
   19ac0:	20009ed0 	.word	0x20009ed0
   19ac4:	000369ef 	.word	0x000369ef
   19ac8:	00036b6c 	.word	0x00036b6c
   19acc:	00033e04 	.word	0x00033e04
   19ad0:	00036b9a 	.word	0x00036b9a

00019ad4 <hci_le_meta_event>:
{
   19ad4:	b510      	push	{r4, lr}
   19ad6:	2101      	movs	r1, #1
   19ad8:	4604      	mov	r4, r0
   19ada:	300c      	adds	r0, #12
   19adc:	f015 fdd3 	bl	2f686 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   19ae0:	4621      	mov	r1, r4
}
   19ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   19ae6:	230a      	movs	r3, #10
   19ae8:	4a01      	ldr	r2, [pc, #4]	; (19af0 <hci_le_meta_event+0x1c>)
   19aea:	7800      	ldrb	r0, [r0, #0]
   19aec:	f7ff beee 	b.w	198cc <handle_event>
   19af0:	00033e34 	.word	0x00033e34

00019af4 <le_remote_feat_complete>:
{
   19af4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19af6:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19af8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19afc:	4630      	mov	r0, r6
   19afe:	f002 fb75 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   19b02:	4604      	mov	r4, r0
   19b04:	b958      	cbnz	r0, 19b1e <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19b06:	4b10      	ldr	r3, [pc, #64]	; (19b48 <le_remote_feat_complete+0x54>)
   19b08:	2201      	movs	r2, #1
   19b0a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19b0e:	490f      	ldr	r1, [pc, #60]	; (19b4c <le_remote_feat_complete+0x58>)
   19b10:	4603      	mov	r3, r0
   19b12:	9603      	str	r6, [sp, #12]
   19b14:	9000      	str	r0, [sp, #0]
   19b16:	f013 fd28 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   19b1a:	b004      	add	sp, #16
   19b1c:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   19b1e:	782b      	ldrb	r3, [r5, #0]
   19b20:	b93b      	cbnz	r3, 19b32 <le_remote_feat_complete+0x3e>
   19b22:	f8d5 3003 	ldr.w	r3, [r5, #3]
   19b26:	f8c0 30ad 	str.w	r3, [r0, #173]	; 0xad
   19b2a:	f8d5 3007 	ldr.w	r3, [r5, #7]
   19b2e:	f8c0 30b1 	str.w	r3, [r0, #177]	; 0xb1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   19b36:	1d20      	adds	r0, r4, #4
   19b38:	f013 fd00 	bl	2d53c <atomic_or>
	bt_conn_unref(conn);
   19b3c:	4620      	mov	r0, r4
}
   19b3e:	b004      	add	sp, #16
   19b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19b44:	f014 b891 	b.w	2dc6a <bt_conn_unref>
   19b48:	00036a2e 	.word	0x00036a2e
   19b4c:	00033234 	.word	0x00033234

00019b50 <hci_cmd_done>:
{
   19b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b54:	4606      	mov	r6, r0
   19b56:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   19b58:	7a90      	ldrb	r0, [r2, #10]
{
   19b5a:	460f      	mov	r7, r1
   19b5c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   19b5e:	f006 fd55 	bl	2060c <net_buf_pool_get>
   19b62:	4d3d      	ldr	r5, [pc, #244]	; (19c58 <hci_cmd_done+0x108>)
   19b64:	4285      	cmp	r5, r0
   19b66:	d014      	beq.n	19b92 <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   19b68:	7aa4      	ldrb	r4, [r4, #10]
   19b6a:	4620      	mov	r0, r4
   19b6c:	f006 fd4e 	bl	2060c <net_buf_pool_get>
   19b70:	4b3a      	ldr	r3, [pc, #232]	; (19c5c <hci_cmd_done+0x10c>)
   19b72:	e9cd 0505 	strd	r0, r5, [sp, #20]
   19b76:	9302      	str	r3, [sp, #8]
   19b78:	2300      	movs	r3, #0
   19b7a:	2202      	movs	r2, #2
   19b7c:	4618      	mov	r0, r3
   19b7e:	e9cd 6403 	strd	r6, r4, [sp, #12]
   19b82:	e9cd 3300 	strd	r3, r3, [sp]
   19b86:	4936      	ldr	r1, [pc, #216]	; (19c60 <hci_cmd_done+0x110>)
   19b88:	f013 fcef 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   19b8c:	b008      	add	sp, #32
   19b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   19b92:	4620      	mov	r0, r4
   19b94:	f006 fd42 	bl	2061c <net_buf_id>
   19b98:	f04f 080c 	mov.w	r8, #12
   19b9c:	4d31      	ldr	r5, [pc, #196]	; (19c64 <hci_cmd_done+0x114>)
   19b9e:	fb08 5000 	mla	r0, r8, r0, r5
   19ba2:	8843      	ldrh	r3, [r0, #2]
   19ba4:	42b3      	cmp	r3, r6
   19ba6:	d012      	beq.n	19bce <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   19ba8:	4620      	mov	r0, r4
   19baa:	f006 fd37 	bl	2061c <net_buf_id>
   19bae:	fb08 5000 	mla	r0, r8, r0, r5
   19bb2:	8843      	ldrh	r3, [r0, #2]
   19bb4:	2202      	movs	r2, #2
   19bb6:	e9cd 6303 	strd	r6, r3, [sp, #12]
   19bba:	4b2b      	ldr	r3, [pc, #172]	; (19c68 <hci_cmd_done+0x118>)
   19bbc:	4928      	ldr	r1, [pc, #160]	; (19c60 <hci_cmd_done+0x110>)
   19bbe:	9302      	str	r3, [sp, #8]
   19bc0:	2300      	movs	r3, #0
   19bc2:	4618      	mov	r0, r3
   19bc4:	e9cd 3300 	strd	r3, r3, [sp]
   19bc8:	f013 fccf 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return;
   19bcc:	e7de      	b.n	19b8c <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   19bce:	4e27      	ldr	r6, [pc, #156]	; (19c6c <hci_cmd_done+0x11c>)
   19bd0:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   19bd4:	b120      	cbz	r0, 19be0 <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   19bd6:	f006 fddb 	bl	20790 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19bda:	2300      	movs	r3, #0
   19bdc:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   19be0:	4620      	mov	r0, r4
   19be2:	f006 fd1b 	bl	2061c <net_buf_id>
   19be6:	260c      	movs	r6, #12
   19be8:	fb06 5000 	mla	r0, r6, r0, r5
   19bec:	6843      	ldr	r3, [r0, #4]
   19bee:	b19b      	cbz	r3, 19c18 <hci_cmd_done+0xc8>
   19bf0:	b997      	cbnz	r7, 19c18 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   19bf2:	4620      	mov	r0, r4
   19bf4:	f006 fd12 	bl	2061c <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   19bf8:	2101      	movs	r1, #1
   19bfa:	fb06 5000 	mla	r0, r6, r0, r5
   19bfe:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   19c00:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   19c04:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   19c06:	f003 061f 	and.w	r6, r3, #31
   19c0a:	40b1      	lsls	r1, r6
	if (val) {
   19c0c:	095b      	lsrs	r3, r3, #5
   19c0e:	b1e2      	cbz	r2, 19c4a <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19c10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19c14:	f013 fc92 	bl	2d53c <atomic_or>
	if (cmd(buf)->sync) {
   19c18:	4620      	mov	r0, r4
   19c1a:	f006 fcff 	bl	2061c <net_buf_id>
   19c1e:	260c      	movs	r6, #12
   19c20:	fb06 5000 	mla	r0, r6, r0, r5
   19c24:	6883      	ldr	r3, [r0, #8]
   19c26:	2b00      	cmp	r3, #0
   19c28:	d0b0      	beq.n	19b8c <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   19c2a:	4620      	mov	r0, r4
   19c2c:	f006 fcf6 	bl	2061c <net_buf_id>
   19c30:	4370      	muls	r0, r6
   19c32:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   19c34:	4620      	mov	r0, r4
   19c36:	f006 fcf1 	bl	2061c <net_buf_id>
   19c3a:	fb06 5500 	mla	r5, r6, r0, r5
   19c3e:	68a8      	ldr	r0, [r5, #8]
}
   19c40:	b008      	add	sp, #32
   19c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   19c46:	f00c b845 	b.w	25cd4 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19c4a:	43c9      	mvns	r1, r1
   19c4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   19c50:	f013 fc9a 	bl	2d588 <atomic_and.isra.0>
   19c54:	e7e0      	b.n	19c18 <hci_cmd_done+0xc8>
   19c56:	bf00      	nop
   19c58:	20008fdc 	.word	0x20008fdc
   19c5c:	00036bae 	.word	0x00036bae
   19c60:	00033234 	.word	0x00033234
   19c64:	20030980 	.word	0x20030980
   19c68:	00036be3 	.word	0x00036be3
   19c6c:	20008000 	.word	0x20008000

00019c70 <hci_cmd_status>:
{
   19c70:	b538      	push	{r3, r4, r5, lr}
   19c72:	2104      	movs	r1, #4
   19c74:	4604      	mov	r4, r0
   19c76:	300c      	adds	r0, #12
   19c78:	f015 fd05 	bl	2f686 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   19c7c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   19c7e:	7801      	ldrb	r1, [r0, #0]
   19c80:	4622      	mov	r2, r4
   19c82:	8840      	ldrh	r0, [r0, #2]
   19c84:	f7ff ff64 	bl	19b50 <hci_cmd_done>
	if (ncmd) {
   19c88:	b125      	cbz	r5, 19c94 <hci_cmd_status+0x24>
}
   19c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19c8e:	4802      	ldr	r0, [pc, #8]	; (19c98 <hci_cmd_status+0x28>)
   19c90:	f00c b820 	b.w	25cd4 <z_impl_k_sem_give>
   19c94:	bd38      	pop	{r3, r4, r5, pc}
   19c96:	bf00      	nop
   19c98:	20008120 	.word	0x20008120

00019c9c <hci_cmd_complete>:
{
   19c9c:	b538      	push	{r3, r4, r5, lr}
   19c9e:	2103      	movs	r1, #3
   19ca0:	4604      	mov	r4, r0
   19ca2:	300c      	adds	r0, #12
   19ca4:	f015 fcef 	bl	2f686 <net_buf_simple_pull_mem>
	status = buf->data[0];
   19ca8:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   19caa:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   19cac:	4622      	mov	r2, r4
   19cae:	7819      	ldrb	r1, [r3, #0]
   19cb0:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   19cb4:	f7ff ff4c 	bl	19b50 <hci_cmd_done>
	if (ncmd) {
   19cb8:	b125      	cbz	r5, 19cc4 <hci_cmd_complete+0x28>
}
   19cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19cbe:	4802      	ldr	r0, [pc, #8]	; (19cc8 <hci_cmd_complete+0x2c>)
   19cc0:	f00c b808 	b.w	25cd4 <z_impl_k_sem_give>
   19cc4:	bd38      	pop	{r3, r4, r5, pc}
   19cc6:	bf00      	nop
   19cc8:	20008120 	.word	0x20008120

00019ccc <hci_num_completed_packets>:
{
   19ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   19cd0:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
   19cd2:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   19cd4:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   19cd6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 19dc0 <hci_num_completed_packets+0xf4>
	for (i = 0; i < evt->num_handles; i++) {
   19cda:	783b      	ldrb	r3, [r7, #0]
   19cdc:	429d      	cmp	r5, r3
   19cde:	db02      	blt.n	19ce6 <hci_num_completed_packets+0x1a>
}
   19ce0:	b004      	add	sp, #16
   19ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   19ce6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   19cea:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   19cee:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   19cf2:	4650      	mov	r0, sl
   19cf4:	f002 fa7a 	bl	1c1ec <bt_conn_lookup_handle>
		if (!conn) {
   19cf8:	4604      	mov	r4, r0
   19cfa:	b1d8      	cbz	r0, 19d34 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   19cfc:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   19d00:	2e00      	cmp	r6, #0
   19d02:	d032      	beq.n	19d6a <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   19d04:	f04f 0320 	mov.w	r3, #32
   19d08:	f3ef 8211 	mrs	r2, BASEPRI
   19d0c:	f383 8812 	msr	BASEPRI_MAX, r3
   19d10:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   19d14:	69e3      	ldr	r3, [r4, #28]
   19d16:	b1d3      	cbz	r3, 19d4e <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   19d18:	3b01      	subs	r3, #1
   19d1a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19d1c:	f382 8811 	msr	BASEPRI, r2
   19d20:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   19d24:	4620      	mov	r0, r4
   19d26:	f002 f8fb 	bl	1bf20 <bt_conn_get_pkts>
   19d2a:	3e01      	subs	r6, #1
   19d2c:	f00b ffd2 	bl	25cd4 <z_impl_k_sem_give>
   19d30:	b2b6      	uxth	r6, r6
   19d32:	e7e5      	b.n	19d00 <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   19d34:	4b23      	ldr	r3, [pc, #140]	; (19dc4 <hci_num_completed_packets+0xf8>)
   19d36:	2201      	movs	r2, #1
   19d38:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19d3c:	4922      	ldr	r1, [pc, #136]	; (19dc8 <hci_num_completed_packets+0xfc>)
   19d3e:	4603      	mov	r3, r0
   19d40:	f8cd a00c 	str.w	sl, [sp, #12]
   19d44:	9000      	str	r0, [sp, #0]
   19d46:	f013 fc10 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   19d4a:	3501      	adds	r5, #1
   19d4c:	e7c5      	b.n	19cda <hci_num_completed_packets+0xe>
   19d4e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   19d50:	b97b      	cbnz	r3, 19d72 <hci_num_completed_packets+0xa6>
   19d52:	f382 8811 	msr	BASEPRI, r2
   19d56:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   19d5a:	2201      	movs	r2, #1
   19d5c:	4618      	mov	r0, r3
   19d5e:	e9cd 3901 	strd	r3, r9, [sp, #4]
   19d62:	4919      	ldr	r1, [pc, #100]	; (19dc8 <hci_num_completed_packets+0xfc>)
   19d64:	9300      	str	r3, [sp, #0]
   19d66:	f013 fc00 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   19d6a:	4620      	mov	r0, r4
   19d6c:	f013 ff7d 	bl	2dc6a <bt_conn_unref>
   19d70:	e7eb      	b.n	19d4a <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19d72:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   19d74:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19d76:	4283      	cmp	r3, r0
	list->head = node;
   19d78:	6161      	str	r1, [r4, #20]
	list->tail = node;
   19d7a:	bf08      	it	eq
   19d7c:	61a1      	streq	r1, [r4, #24]
   19d7e:	f382 8811 	msr	BASEPRI, r2
   19d82:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19d86:	f04f 0220 	mov.w	r2, #32
   19d8a:	f3ef 8111 	mrs	r1, BASEPRI
   19d8e:	f382 8812 	msr	BASEPRI_MAX, r2
   19d92:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   19d96:	68da      	ldr	r2, [r3, #12]
   19d98:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   19d9a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   19d9e:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   19da2:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   19da4:	b94a      	cbnz	r2, 19dba <hci_num_completed_packets+0xee>
	list->head = node;
   19da6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   19daa:	f381 8811 	msr	BASEPRI, r1
   19dae:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   19db2:	4650      	mov	r0, sl
   19db4:	f00c f90a 	bl	25fcc <k_work_submit>
   19db8:	e7b4      	b.n	19d24 <hci_num_completed_packets+0x58>
	parent->next = child;
   19dba:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19dbc:	6263      	str	r3, [r4, #36]	; 0x24
}
   19dbe:	e7f4      	b.n	19daa <hci_num_completed_packets+0xde>
   19dc0:	00036c32 	.word	0x00036c32
   19dc4:	00036c16 	.word	0x00036c16
   19dc8:	00033234 	.word	0x00033234

00019dcc <le_conn_update_complete>:
{
   19dcc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   19dce:	68c5      	ldr	r5, [r0, #12]
{
   19dd0:	b086      	sub	sp, #24
	handle = sys_le16_to_cpu(evt->handle);
   19dd2:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19dd6:	4630      	mov	r0, r6
   19dd8:	f002 fa08 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   19ddc:	4604      	mov	r4, r0
   19dde:	b958      	cbnz	r0, 19df8 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   19de0:	4b2b      	ldr	r3, [pc, #172]	; (19e90 <le_conn_update_complete+0xc4>)
   19de2:	2201      	movs	r2, #1
   19de4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   19de8:	492a      	ldr	r1, [pc, #168]	; (19e94 <le_conn_update_complete+0xc8>)
   19dea:	4603      	mov	r3, r0
   19dec:	9603      	str	r6, [sp, #12]
   19dee:	9000      	str	r0, [sp, #0]
   19df0:	f013 fbbb 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   19df4:	b006      	add	sp, #24
   19df6:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19df8:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   19dfa:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   19dfc:	2b1a      	cmp	r3, #26
   19dfe:	d119      	bne.n	19e34 <le_conn_update_complete+0x68>
   19e00:	78c3      	ldrb	r3, [r0, #3]
   19e02:	2b01      	cmp	r3, #1
   19e04:	d12a      	bne.n	19e5c <le_conn_update_complete+0x90>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19e0a:	4630      	mov	r0, r6
   19e0c:	f013 fb96 	bl	2d53c <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   19e10:	0542      	lsls	r2, r0, #21
   19e12:	d40f      	bmi.n	19e34 <le_conn_update_complete+0x68>
		param.interval_min = conn->le.interval_min;
   19e14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
   19e18:	4620      	mov	r0, r4
		param.interval_min = conn->le.interval_min;
   19e1a:	9304      	str	r3, [sp, #16]
		param.latency = conn->le.pending_latency;
   19e1c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   19e20:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   19e22:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   19e24:	f002 ff2a 	bl	1cc7c <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   19e28:	4620      	mov	r0, r4
}
   19e2a:	b006      	add	sp, #24
   19e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19e30:	f013 bf1b 	b.w	2dc6a <bt_conn_unref>
		if (!evt->status) {
   19e34:	782b      	ldrb	r3, [r5, #0]
   19e36:	b98b      	cbnz	r3, 19e5c <le_conn_update_complete+0x90>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   19e38:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   19e3c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   19e40:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   19e44:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19e48:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   19e4c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19e50:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19e54:	4630      	mov	r0, r6
   19e56:	f013 fb97 	bl	2d588 <atomic_and.isra.0>
}
   19e5a:	e014      	b.n	19e86 <le_conn_update_complete+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e5c:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   19e60:	05db      	lsls	r3, r3, #23
   19e62:	d5f5      	bpl.n	19e50 <le_conn_update_complete+0x84>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   19e64:	782b      	ldrb	r3, [r5, #0]
   19e66:	2b20      	cmp	r3, #32
   19e68:	d1f2      	bne.n	19e50 <le_conn_update_complete+0x84>
			   conn->le.conn_param_retry_countdown) {
   19e6a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   19e6e:	2b00      	cmp	r3, #0
   19e70:	d0ee      	beq.n	19e50 <le_conn_update_complete+0x84>
			conn->le.conn_param_retry_countdown--;
   19e72:	3b01      	subs	r3, #1
   19e74:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   19e78:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19e7c:	2300      	movs	r3, #0
   19e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19e82:	f00c f949 	bl	26118 <k_work_schedule>
		notify_le_param_updated(conn);
   19e86:	4620      	mov	r0, r4
   19e88:	f002 faca 	bl	1c420 <notify_le_param_updated>
   19e8c:	e7cc      	b.n	19e28 <le_conn_update_complete+0x5c>
   19e8e:	bf00      	nop
   19e90:	00036a2e 	.word	0x00036a2e
   19e94:	00033234 	.word	0x00033234

00019e98 <bt_hci_cmd_state_set_init>:
{
   19e98:	b510      	push	{r4, lr}
	state->bit = bit;
   19e9a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   19e9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   19ea2:	460c      	mov	r4, r1
	state->val = val;
   19ea4:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   19ea6:	f006 fbb9 	bl	2061c <net_buf_id>
   19eaa:	220c      	movs	r2, #12
   19eac:	4b02      	ldr	r3, [pc, #8]	; (19eb8 <bt_hci_cmd_state_set_init+0x20>)
   19eae:	fb02 3300 	mla	r3, r2, r0, r3
   19eb2:	605c      	str	r4, [r3, #4]
}
   19eb4:	bd10      	pop	{r4, pc}
   19eb6:	bf00      	nop
   19eb8:	20030980 	.word	0x20030980

00019ebc <bt_hci_cmd_create>:
{
   19ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   19ec0:	f04f 32ff 	mov.w	r2, #4294967295
   19ec4:	f04f 33ff 	mov.w	r3, #4294967295
   19ec8:	4606      	mov	r6, r0
   19eca:	4817      	ldr	r0, [pc, #92]	; (19f28 <bt_hci_cmd_create+0x6c>)
   19ecc:	460f      	mov	r7, r1
   19ece:	f015 fb4a 	bl	2f566 <net_buf_alloc_fixed>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19ed2:	f04f 0800 	mov.w	r8, #0
   19ed6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   19ed8:	f100 0a0c 	add.w	sl, r0, #12
   19edc:	2101      	movs	r1, #1
   19ede:	4650      	mov	r0, sl
   19ee0:	f015 fb48 	bl	2f574 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   19ee4:	4620      	mov	r0, r4
   19ee6:	f884 8018 	strb.w	r8, [r4, #24]
   19eea:	f006 fb97 	bl	2061c <net_buf_id>
   19eee:	f04f 090c 	mov.w	r9, #12
   19ef2:	4d0e      	ldr	r5, [pc, #56]	; (19f2c <bt_hci_cmd_create+0x70>)
   19ef4:	fb09 5000 	mla	r0, r9, r0, r5
   19ef8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   19efa:	4620      	mov	r0, r4
   19efc:	f006 fb8e 	bl	2061c <net_buf_id>
   19f00:	fb09 5000 	mla	r0, r9, r0, r5
   19f04:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   19f08:	4620      	mov	r0, r4
   19f0a:	f006 fb87 	bl	2061c <net_buf_id>
   19f0e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   19f12:	2103      	movs	r1, #3
   19f14:	4650      	mov	r0, sl
   19f16:	f8c5 8004 	str.w	r8, [r5, #4]
   19f1a:	f015 fb84 	bl	2f626 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   19f1e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   19f20:	7087      	strb	r7, [r0, #2]
}
   19f22:	4620      	mov	r0, r4
   19f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19f28:	20008fdc 	.word	0x20008fdc
   19f2c:	20030980 	.word	0x20030980

00019f30 <bt_hci_cmd_send_sync>:
{
   19f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f34:	4607      	mov	r7, r0
   19f36:	4615      	mov	r5, r2
	if (!buf) {
   19f38:	460c      	mov	r4, r1
{
   19f3a:	b08c      	sub	sp, #48	; 0x30
	if (!buf) {
   19f3c:	b921      	cbnz	r1, 19f48 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   19f3e:	f7ff ffbd 	bl	19ebc <bt_hci_cmd_create>
		if (!buf) {
   19f42:	4604      	mov	r4, r0
   19f44:	2800      	cmp	r0, #0
   19f46:	d056      	beq.n	19ff6 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19f48:	ae06      	add	r6, sp, #24
   19f4a:	2201      	movs	r2, #1
   19f4c:	2100      	movs	r1, #0
   19f4e:	4630      	mov	r0, r6
   19f50:	f017 f918 	bl	31184 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   19f54:	4620      	mov	r0, r4
   19f56:	f006 fb61 	bl	2061c <net_buf_id>
   19f5a:	230c      	movs	r3, #12
   19f5c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 19ffc <bt_hci_cmd_send_sync+0xcc>
   19f60:	fb03 8000 	mla	r0, r3, r0, r8
   19f64:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   19f66:	4620      	mov	r0, r4
   19f68:	f015 fb37 	bl	2f5da <net_buf_ref>
   19f6c:	4601      	mov	r1, r0
   19f6e:	4824      	ldr	r0, [pc, #144]	; (1a000 <bt_hci_cmd_send_sync+0xd0>)
   19f70:	f015 fb31 	bl	2f5d6 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   19f74:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   19f78:	4630      	mov	r0, r6
   19f7a:	2300      	movs	r3, #0
   19f7c:	f00b fed0 	bl	25d20 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   19f80:	4606      	mov	r6, r0
   19f82:	b180      	cbz	r0, 19fa6 <bt_hci_cmd_send_sync+0x76>
   19f84:	f240 1349 	movw	r3, #329	; 0x149
   19f88:	4a1e      	ldr	r2, [pc, #120]	; (1a004 <bt_hci_cmd_send_sync+0xd4>)
   19f8a:	491f      	ldr	r1, [pc, #124]	; (1a008 <bt_hci_cmd_send_sync+0xd8>)
   19f8c:	481f      	ldr	r0, [pc, #124]	; (1a00c <bt_hci_cmd_send_sync+0xdc>)
   19f8e:	f010 fd4d 	bl	2aa2c <assert_print>
   19f92:	4631      	mov	r1, r6
   19f94:	481e      	ldr	r0, [pc, #120]	; (1a010 <bt_hci_cmd_send_sync+0xe0>)
   19f96:	f010 fd49 	bl	2aa2c <assert_print>
   19f9a:	4040      	eors	r0, r0
   19f9c:	f380 8811 	msr	BASEPRI, r0
   19fa0:	f04f 0003 	mov.w	r0, #3
   19fa4:	df02      	svc	2
	status = cmd(buf)->status;
   19fa6:	4620      	mov	r0, r4
   19fa8:	f006 fb38 	bl	2061c <net_buf_id>
   19fac:	230c      	movs	r3, #12
   19fae:	4358      	muls	r0, r3
   19fb0:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   19fb4:	b1be      	cbz	r6, 19fe6 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   19fb6:	4b17      	ldr	r3, [pc, #92]	; (1a014 <bt_hci_cmd_send_sync+0xe4>)
   19fb8:	2202      	movs	r2, #2
   19fba:	9302      	str	r3, [sp, #8]
   19fbc:	2300      	movs	r3, #0
   19fbe:	4916      	ldr	r1, [pc, #88]	; (1a018 <bt_hci_cmd_send_sync+0xe8>)
   19fc0:	4618      	mov	r0, r3
   19fc2:	e9cd 3300 	strd	r3, r3, [sp]
   19fc6:	e9cd 7603 	strd	r7, r6, [sp, #12]
   19fca:	f013 face 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   19fce:	4620      	mov	r0, r4
   19fd0:	f006 fbde 	bl	20790 <net_buf_unref>
			return -ECONNREFUSED;
   19fd4:	2e09      	cmp	r6, #9
   19fd6:	bf14      	ite	ne
   19fd8:	f06f 0004 	mvnne.w	r0, #4
   19fdc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   19fe0:	b00c      	add	sp, #48	; 0x30
   19fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   19fe6:	b115      	cbz	r5, 19fee <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   19fe8:	602c      	str	r4, [r5, #0]
	return 0;
   19fea:	2000      	movs	r0, #0
   19fec:	e7f8      	b.n	19fe0 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   19fee:	4620      	mov	r0, r4
   19ff0:	f006 fbce 	bl	20790 <net_buf_unref>
   19ff4:	e7f9      	b.n	19fea <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   19ff6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19ffa:	e7f1      	b.n	19fe0 <bt_hci_cmd_send_sync+0xb0>
   19ffc:	20030980 	.word	0x20030980
   1a000:	20008144 	.word	0x20008144
   1a004:	00036abc 	.word	0x00036abc
   1a008:	00036c49 	.word	0x00036c49
   1a00c:	00036b09 	.word	0x00036b09
   1a010:	00036c52 	.word	0x00036c52
   1a014:	00036c72 	.word	0x00036c72
   1a018:	00033234 	.word	0x00033234

0001a01c <hci_le_read_max_data_len>:
{
   1a01c:	b570      	push	{r4, r5, r6, lr}
   1a01e:	b086      	sub	sp, #24
   1a020:	4606      	mov	r6, r0
   1a022:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1a024:	f242 002f 	movw	r0, #8239	; 0x202f
   1a028:	2100      	movs	r1, #0
   1a02a:	aa05      	add	r2, sp, #20
   1a02c:	f7ff ff80 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1a030:	4604      	mov	r4, r0
   1a032:	b160      	cbz	r0, 1a04e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   1a034:	4b0b      	ldr	r3, [pc, #44]	; (1a064 <hci_le_read_max_data_len+0x48>)
   1a036:	2201      	movs	r2, #1
   1a038:	9302      	str	r3, [sp, #8]
   1a03a:	2300      	movs	r3, #0
   1a03c:	490a      	ldr	r1, [pc, #40]	; (1a068 <hci_le_read_max_data_len+0x4c>)
   1a03e:	4618      	mov	r0, r3
   1a040:	e9cd 3300 	strd	r3, r3, [sp]
   1a044:	f013 fa91 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a048:	4620      	mov	r0, r4
   1a04a:	b006      	add	sp, #24
   1a04c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1a04e:	9805      	ldr	r0, [sp, #20]
   1a050:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1a052:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1a056:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1a058:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1a05c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1a05e:	f006 fb97 	bl	20790 <net_buf_unref>
	return 0;
   1a062:	e7f1      	b.n	1a048 <hci_le_read_max_data_len+0x2c>
   1a064:	00036c8e 	.word	0x00036c8e
   1a068:	00033234 	.word	0x00033234

0001a06c <bt_hci_le_rand>:
{
   1a06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1a06e:	4b14      	ldr	r3, [pc, #80]	; (1a0c0 <bt_hci_le_rand+0x54>)
{
   1a070:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1a072:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   1a076:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1a078:	2b00      	cmp	r3, #0
   1a07a:	da1d      	bge.n	1a0b8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   1a07c:	b914      	cbnz	r4, 1a084 <bt_hci_le_rand+0x18>
	return 0;
   1a07e:	4620      	mov	r0, r4
}
   1a080:	b003      	add	sp, #12
   1a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   1a084:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1a086:	f04f 0100 	mov.w	r1, #0
   1a08a:	f242 0018 	movw	r0, #8216	; 0x2018
   1a08e:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   1a090:	4626      	mov	r6, r4
   1a092:	bf28      	it	cs
   1a094:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1a096:	f7ff ff4b 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
   1a09a:	2800      	cmp	r0, #0
   1a09c:	d1f0      	bne.n	1a080 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1a09e:	9f01      	ldr	r7, [sp, #4]
   1a0a0:	4632      	mov	r2, r6
   1a0a2:	68f9      	ldr	r1, [r7, #12]
   1a0a4:	4628      	mov	r0, r5
   1a0a6:	3101      	adds	r1, #1
   1a0a8:	f017 fcbb 	bl	31a22 <memcpy>
		net_buf_unref(rsp);
   1a0ac:	4638      	mov	r0, r7
   1a0ae:	f006 fb6f 	bl	20790 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1a0b2:	4435      	add	r5, r6
		len -= count;
   1a0b4:	1ba4      	subs	r4, r4, r6
   1a0b6:	e7e1      	b.n	1a07c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   1a0b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a0bc:	e7e0      	b.n	1a080 <bt_hci_le_rand+0x14>
   1a0be:	bf00      	nop
   1a0c0:	20008000 	.word	0x20008000

0001a0c4 <bt_hci_le_enh_conn_complete>:
{
   1a0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a0c8:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   1a0cc:	2700      	movs	r7, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   1a0ce:	ea6f 5308 	mvn.w	r3, r8, lsl #20
   1a0d2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   1a0d6:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   1a0d8:	4a9f      	ldr	r2, [pc, #636]	; (1a358 <bt_hci_le_enh_conn_complete+0x294>)
   1a0da:	b29b      	uxth	r3, r3
   1a0dc:	8811      	ldrh	r1, [r2, #0]
{
   1a0de:	b08a      	sub	sp, #40	; 0x28
		if (disconnected_handles[i] == handle) {
   1a0e0:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   1a0e2:	bf04      	itt	eq
   1a0e4:	8017      	strheq	r7, [r2, #0]
			return true;
   1a0e6:	2701      	moveq	r7, #1
	bt_id_pending_keys_update();
   1a0e8:	f000 fe2c 	bl	1ad44 <bt_id_pending_keys_update>
	if (evt->status) {
   1a0ec:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a0ee:	fa1f f988 	uxth.w	r9, r8
	if (evt->status) {
   1a0f2:	b37e      	cbz	r6, 1a154 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a0f4:	2e3c      	cmp	r6, #60	; 0x3c
   1a0f6:	d121      	bne.n	1a13c <bt_hci_le_enh_conn_complete+0x78>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a0f8:	f001 fa5e 	bl	1b5b8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a0fc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1a100:	3010      	adds	r0, #16
   1a102:	f013 fa41 	bl	2d588 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1a106:	2000      	movs	r0, #0
   1a108:	f7ff fb16 	bl	19738 <find_pending_connect.part.0>
		if (!conn) {
   1a10c:	4604      	mov	r4, r0
   1a10e:	b958      	cbnz	r0, 1a128 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   1a110:	4b92      	ldr	r3, [pc, #584]	; (1a35c <bt_hci_le_enh_conn_complete+0x298>)
   1a112:	2201      	movs	r2, #1
   1a114:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a118:	4991      	ldr	r1, [pc, #580]	; (1a360 <bt_hci_le_enh_conn_complete+0x29c>)
   1a11a:	4603      	mov	r3, r0
   1a11c:	9000      	str	r0, [sp, #0]
   1a11e:	f013 fa24 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a122:	b00a      	add	sp, #40	; 0x28
   1a124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1a128:	7306      	strb	r6, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a12a:	2100      	movs	r1, #0
   1a12c:	f002 f866 	bl	1c1fc <bt_conn_set_state>
		bt_conn_unref(conn);
   1a130:	4620      	mov	r0, r4
}
   1a132:	b00a      	add	sp, #40	; 0x28
   1a134:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
   1a138:	f013 bd97 	b.w	2dc6a <bt_conn_unref>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1a13c:	4b89      	ldr	r3, [pc, #548]	; (1a364 <bt_hci_le_enh_conn_complete+0x2a0>)
   1a13e:	2202      	movs	r2, #2
   1a140:	9302      	str	r3, [sp, #8]
   1a142:	2300      	movs	r3, #0
   1a144:	4986      	ldr	r1, [pc, #536]	; (1a360 <bt_hci_le_enh_conn_complete+0x29c>)
   1a146:	4618      	mov	r0, r3
   1a148:	e9cd 3300 	strd	r3, r3, [sp]
   1a14c:	9603      	str	r6, [sp, #12]
   1a14e:	f013 fa0c 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return;
   1a152:	e7e6      	b.n	1a122 <bt_hci_le_enh_conn_complete+0x5e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1a154:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1a156:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1a15a:	3b02      	subs	r3, #2
   1a15c:	2b01      	cmp	r3, #1
   1a15e:	d827      	bhi.n	1a1b0 <bt_hci_le_enh_conn_complete+0xec>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1a160:	4651      	mov	r1, sl
   1a162:	a808      	add	r0, sp, #32
   1a164:	f013 f9fa 	bl	2d55c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a168:	f89d 3020 	ldrb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1a16c:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a170:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1a172:	f10d 0019 	add.w	r0, sp, #25
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a176:	f88d 3020 	strb.w	r3, [sp, #32]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1a17a:	f013 f9ea 	bl	2d552 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1a17e:	2301      	movs	r3, #1
   1a180:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1a184:	78eb      	ldrb	r3, [r5, #3]
   1a186:	2b01      	cmp	r3, #1
   1a188:	d025      	beq.n	1a1d6 <bt_hci_le_enh_conn_complete+0x112>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1a18a:	4650      	mov	r0, sl
   1a18c:	f7ff f9be 	bl	1950c <bt_addr_le_str>
   1a190:	4b75      	ldr	r3, [pc, #468]	; (1a368 <bt_hci_le_enh_conn_complete+0x2a4>)
   1a192:	9003      	str	r0, [sp, #12]
   1a194:	9302      	str	r3, [sp, #8]
   1a196:	2300      	movs	r3, #0
   1a198:	2201      	movs	r2, #1
   1a19a:	4618      	mov	r0, r3
   1a19c:	e9cd 3300 	strd	r3, r3, [sp]
   1a1a0:	496f      	ldr	r1, [pc, #444]	; (1a360 <bt_hci_le_enh_conn_complete+0x29c>)
   1a1a2:	f013 f9e2 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1a1a6:	211f      	movs	r1, #31
   1a1a8:	4648      	mov	r0, r9
   1a1aa:	f013 fa05 	bl	2d5b8 <bt_hci_disconnect>
		return;
   1a1ae:	e7b8      	b.n	1a122 <bt_hci_le_enh_conn_complete+0x5e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1a1b0:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   1a1b2:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1a1b4:	2b01      	cmp	r3, #1
   1a1b6:	bf04      	itt	eq
   1a1b8:	4b6c      	ldreq	r3, [pc, #432]	; (1a36c <bt_hci_le_enh_conn_complete+0x2a8>)
   1a1ba:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1a1be:	4630      	mov	r0, r6
   1a1c0:	f013 fb54 	bl	2d86c <bt_lookup_id_addr>
   1a1c4:	4601      	mov	r1, r0
   1a1c6:	a808      	add	r0, sp, #32
   1a1c8:	f013 f9c8 	bl	2d55c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1a1cc:	4651      	mov	r1, sl
   1a1ce:	a806      	add	r0, sp, #24
   1a1d0:	f013 f9c4 	bl	2d55c <bt_addr_le_copy>
   1a1d4:	e7d6      	b.n	1a184 <bt_hci_le_enh_conn_complete+0xc0>
   1a1d6:	a808      	add	r0, sp, #32
   1a1d8:	f7ff faae 	bl	19738 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a1dc:	78eb      	ldrb	r3, [r5, #3]
   1a1de:	4604      	mov	r4, r0
   1a1e0:	2b01      	cmp	r3, #1
   1a1e2:	d10a      	bne.n	1a1fa <bt_hci_le_enh_conn_complete+0x136>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a1e4:	f001 f9e8 	bl	1b5b8 <bt_le_adv_lookup_legacy>
   1a1e8:	4606      	mov	r6, r0
   1a1ea:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1a1ee:	3010      	adds	r0, #16
   1a1f0:	f013 f9ca 	bl	2d588 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1a1f4:	4630      	mov	r0, r6
   1a1f6:	f013 fc67 	bl	2dac8 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1a1fa:	2c00      	cmp	r4, #0
   1a1fc:	d0c5      	beq.n	1a18a <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   1a1fe:	4620      	mov	r0, r4
	conn->err = 0U;
   1a200:	2200      	movs	r2, #0
	conn->handle = handle;
   1a202:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1a206:	a908      	add	r1, sp, #32
   1a208:	f013 f9a8 	bl	2d55c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1a20c:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1a210:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1a214:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   1a218:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1a21c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1a220:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1a224:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   1a226:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a228:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   1a22a:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a22c:	d115      	bne.n	1a25a <bt_hci_le_enh_conn_complete+0x196>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   1a22e:	a906      	add	r1, sp, #24
   1a230:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1a234:	f013 f992 	bl	2d55c <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1a238:	f001 f9be 	bl	1b5b8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1a23c:	7a21      	ldrb	r1, [r4, #8]
   1a23e:	4a4b      	ldr	r2, [pc, #300]	; (1a36c <bt_hci_le_enh_conn_complete+0x2a8>)
   1a240:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   1a244:	4411      	add	r1, r2
   1a246:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1a24a:	f013 f987 	bl	2d55c <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1a24e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1a252:	065d      	lsls	r5, r3, #25
   1a254:	d501      	bpl.n	1a25a <bt_hci_le_enh_conn_complete+0x196>
			bt_le_adv_resume();
   1a256:	f001 fb73 	bl	1b940 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1a25a:	2107      	movs	r1, #7
   1a25c:	4620      	mov	r0, r4
   1a25e:	f001 ffcd 	bl	1c1fc <bt_conn_set_state>
	if (is_disconnected) {
   1a262:	b11f      	cbz	r7, 1a26c <bt_hci_le_enh_conn_complete+0x1a8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1a264:	2101      	movs	r1, #1
   1a266:	4620      	mov	r0, r4
   1a268:	f001 ffc8 	bl	1c1fc <bt_conn_set_state>
	bt_conn_connected(conn);
   1a26c:	4620      	mov	r0, r4
   1a26e:	f013 fd32 	bl	2dcd6 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1a272:	7b63      	ldrb	r3, [r4, #13]
   1a274:	2b07      	cmp	r3, #7
   1a276:	d167      	bne.n	1a348 <bt_hci_le_enh_conn_complete+0x284>
   1a278:	1d23      	adds	r3, r4, #4
   1a27a:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1a27e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1a282:	4e3a      	ldr	r6, [pc, #232]	; (1a36c <bt_hci_le_enh_conn_complete+0x2a8>)
   1a284:	d125      	bne.n	1a2d2 <bt_hci_le_enh_conn_complete+0x20e>
   1a286:	78e3      	ldrb	r3, [r4, #3]
   1a288:	b11b      	cbz	r3, 1a292 <bt_hci_le_enh_conn_complete+0x1ce>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1a28a:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1a28e:	0718      	lsls	r0, r3, #28
   1a290:	d51f      	bpl.n	1a2d2 <bt_hci_le_enh_conn_complete+0x20e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1a292:	2102      	movs	r1, #2
   1a294:	f242 0016 	movw	r0, #8214	; 0x2016
   1a298:	f7ff fe10 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1a29c:	4605      	mov	r5, r0
   1a29e:	2800      	cmp	r0, #0
   1a2a0:	d056      	beq.n	1a350 <bt_hci_le_enh_conn_complete+0x28c>
   1a2a2:	2102      	movs	r1, #2
   1a2a4:	300c      	adds	r0, #12
   1a2a6:	f015 f9be 	bl	2f626 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a2aa:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1a2ac:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   1a2ae:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1a2b0:	4629      	mov	r1, r5
   1a2b2:	f242 0016 	movw	r0, #8214	; 0x2016
   1a2b6:	f7ff fe3b 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
   1a2ba:	b150      	cbz	r0, 1a2d2 <bt_hci_le_enh_conn_complete+0x20e>
			LOG_ERR("Failed read remote features (%d)", err);
   1a2bc:	4b2c      	ldr	r3, [pc, #176]	; (1a370 <bt_hci_le_enh_conn_complete+0x2ac>)
   1a2be:	9003      	str	r0, [sp, #12]
   1a2c0:	9302      	str	r3, [sp, #8]
   1a2c2:	2300      	movs	r3, #0
   1a2c4:	2201      	movs	r2, #1
   1a2c6:	4618      	mov	r0, r3
   1a2c8:	e9cd 3300 	strd	r3, r3, [sp]
   1a2cc:	4924      	ldr	r1, [pc, #144]	; (1a360 <bt_hci_le_enh_conn_complete+0x29c>)
   1a2ce:	f013 f94c 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1a2d2:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   1a2d6:	07d9      	lsls	r1, r3, #31
   1a2d8:	d513      	bpl.n	1a302 <bt_hci_le_enh_conn_complete+0x23e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1a2da:	2500      	movs	r5, #0
   1a2dc:	2302      	movs	r3, #2
   1a2de:	4629      	mov	r1, r5
   1a2e0:	461a      	mov	r2, r3
   1a2e2:	4620      	mov	r0, r4
   1a2e4:	9500      	str	r5, [sp, #0]
   1a2e6:	f013 f9a0 	bl	2d62a <bt_le_set_phy>
		if (err) {
   1a2ea:	b150      	cbz	r0, 1a302 <bt_hci_le_enh_conn_complete+0x23e>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   1a2ec:	4b21      	ldr	r3, [pc, #132]	; (1a374 <bt_hci_le_enh_conn_complete+0x2b0>)
   1a2ee:	9003      	str	r0, [sp, #12]
   1a2f0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a2f4:	2201      	movs	r2, #1
   1a2f6:	462b      	mov	r3, r5
   1a2f8:	4628      	mov	r0, r5
   1a2fa:	4919      	ldr	r1, [pc, #100]	; (1a360 <bt_hci_le_enh_conn_complete+0x29c>)
   1a2fc:	9500      	str	r5, [sp, #0]
   1a2fe:	f013 f934 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1a302:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1a306:	069a      	lsls	r2, r3, #26
   1a308:	d51e      	bpl.n	1a348 <bt_hci_le_enh_conn_complete+0x284>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1a30a:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   1a30e:	689b      	ldr	r3, [r3, #8]
   1a310:	079b      	lsls	r3, r3, #30
   1a312:	d519      	bpl.n	1a348 <bt_hci_le_enh_conn_complete+0x284>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1a314:	f10d 0116 	add.w	r1, sp, #22
   1a318:	a805      	add	r0, sp, #20
   1a31a:	f7ff fe7f 	bl	1a01c <hci_le_read_max_data_len>
			if (!err) {
   1a31e:	4605      	mov	r5, r0
   1a320:	b990      	cbnz	r0, 1a348 <bt_hci_le_enh_conn_complete+0x284>
				err = bt_le_set_data_len(conn,
   1a322:	4620      	mov	r0, r4
   1a324:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a328:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1a32c:	f013 f95f 	bl	2d5ee <bt_le_set_data_len>
				if (err) {
   1a330:	b150      	cbz	r0, 1a348 <bt_hci_le_enh_conn_complete+0x284>
					LOG_ERR("Failed to set data len (%d)", err);
   1a332:	4b11      	ldr	r3, [pc, #68]	; (1a378 <bt_hci_le_enh_conn_complete+0x2b4>)
   1a334:	9003      	str	r0, [sp, #12]
   1a336:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a33a:	2201      	movs	r2, #1
   1a33c:	462b      	mov	r3, r5
   1a33e:	4628      	mov	r0, r5
   1a340:	4907      	ldr	r1, [pc, #28]	; (1a360 <bt_hci_le_enh_conn_complete+0x29c>)
   1a342:	9500      	str	r5, [sp, #0]
   1a344:	f013 f911 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1a348:	4620      	mov	r0, r4
   1a34a:	f013 fc8e 	bl	2dc6a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a34e:	e6e8      	b.n	1a122 <bt_hci_le_enh_conn_complete+0x5e>
		return -ENOBUFS;
   1a350:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a354:	e7b2      	b.n	1a2bc <bt_hci_le_enh_conn_complete+0x1f8>
   1a356:	bf00      	nop
   1a358:	20030fc0 	.word	0x20030fc0
   1a35c:	00036cae 	.word	0x00036cae
   1a360:	00033234 	.word	0x00033234
   1a364:	00036ccf 	.word	0x00036ccf
   1a368:	00036ce8 	.word	0x00036ce8
   1a36c:	20008000 	.word	0x20008000
   1a370:	00036d04 	.word	0x00036d04
   1a374:	00036d25 	.word	0x00036d25
   1a378:	00036d3c 	.word	0x00036d3c

0001a37c <le_legacy_conn_complete>:
{
   1a37c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1a37e:	68c1      	ldr	r1, [r0, #12]
{
   1a380:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1a382:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a384:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   1a386:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1a38a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a38e:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1a390:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1a394:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1a398:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1a39c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1a3a0:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1a3a4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1a3a8:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1a3ac:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1a3b0:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1a3b4:	7b4b      	ldrb	r3, [r1, #13]
   1a3b6:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1a3ba:	f013 f8cf 	bl	2d55c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1a3be:	4907      	ldr	r1, [pc, #28]	; (1a3dc <le_legacy_conn_complete+0x60>)
   1a3c0:	f10d 000b 	add.w	r0, sp, #11
   1a3c4:	f013 f8c5 	bl	2d552 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1a3c8:	f10d 0011 	add.w	r0, sp, #17
   1a3cc:	f013 f8c1 	bl	2d552 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   1a3d0:	4668      	mov	r0, sp
   1a3d2:	f7ff fe77 	bl	1a0c4 <bt_hci_le_enh_conn_complete>
}
   1a3d6:	b009      	add	sp, #36	; 0x24
   1a3d8:	f85d fb04 	ldr.w	pc, [sp], #4
   1a3dc:	0003698f 	.word	0x0003698f

0001a3e0 <bt_security_err_get>:
	switch (hci_err) {
   1a3e0:	2829      	cmp	r0, #41	; 0x29
   1a3e2:	bf9a      	itte	ls
   1a3e4:	4b01      	ldrls	r3, [pc, #4]	; (1a3ec <bt_security_err_get+0xc>)
   1a3e6:	5c18      	ldrbls	r0, [r3, r0]
{
   1a3e8:	2009      	movhi	r0, #9
}
   1a3ea:	4770      	bx	lr
   1a3ec:	00036fde 	.word	0x00036fde

0001a3f0 <hci_encrypt_key_refresh_complete>:
{
   1a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1a3f2:	68c3      	ldr	r3, [r0, #12]
{
   1a3f4:	b085      	sub	sp, #20
	handle = sys_le16_to_cpu(evt->handle);
   1a3f6:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   1a3fa:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   1a3fc:	4630      	mov	r0, r6
   1a3fe:	f001 fef5 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   1a402:	4604      	mov	r4, r0
   1a404:	b958      	cbnz	r0, 1a41e <hci_encrypt_key_refresh_complete+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1a406:	4b1e      	ldr	r3, [pc, #120]	; (1a480 <hci_encrypt_key_refresh_complete+0x90>)
   1a408:	2201      	movs	r2, #1
   1a40a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a40e:	491d      	ldr	r1, [pc, #116]	; (1a484 <hci_encrypt_key_refresh_complete+0x94>)
   1a410:	4603      	mov	r3, r0
   1a412:	9603      	str	r6, [sp, #12]
   1a414:	9000      	str	r0, [sp, #0]
   1a416:	f013 f8a8 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a41a:	b005      	add	sp, #20
   1a41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1a41e:	b16d      	cbz	r5, 1a43c <hci_encrypt_key_refresh_complete+0x4c>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a420:	4628      	mov	r0, r5
   1a422:	f7ff ffdd 	bl	1a3e0 <bt_security_err_get>
   1a426:	4629      	mov	r1, r5
   1a428:	4602      	mov	r2, r0
   1a42a:	4620      	mov	r0, r4
   1a42c:	f002 f8a0 	bl	1c570 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1a430:	4620      	mov	r0, r4
}
   1a432:	b005      	add	sp, #20
   1a434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1a438:	f013 bc17 	b.w	2dc6a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a43c:	7887      	ldrb	r7, [r0, #2]
   1a43e:	2f01      	cmp	r7, #1
   1a440:	d1ee      	bne.n	1a420 <hci_encrypt_key_refresh_complete+0x30>
		bt_smp_update_keys(conn);
   1a442:	f005 fee1 	bl	20208 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1a446:	4620      	mov	r0, r4
   1a448:	f013 f85f 	bl	2d50a <update_sec_level>
   1a44c:	4606      	mov	r6, r0
   1a44e:	2800      	cmp	r0, #0
   1a450:	d1e6      	bne.n	1a420 <hci_encrypt_key_refresh_complete+0x30>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a452:	2005      	movs	r0, #5
   1a454:	f7ff ffc4 	bl	1a3e0 <bt_security_err_get>
   1a458:	2105      	movs	r1, #5
   1a45a:	4602      	mov	r2, r0
   1a45c:	4620      	mov	r0, r4
   1a45e:	f002 f887 	bl	1c570 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1a462:	4b09      	ldr	r3, [pc, #36]	; (1a488 <hci_encrypt_key_refresh_complete+0x98>)
   1a464:	4630      	mov	r0, r6
   1a466:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1a46a:	463a      	mov	r2, r7
   1a46c:	4633      	mov	r3, r6
   1a46e:	4905      	ldr	r1, [pc, #20]	; (1a484 <hci_encrypt_key_refresh_complete+0x94>)
   1a470:	9600      	str	r6, [sp, #0]
   1a472:	f013 f87a 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1a476:	2105      	movs	r1, #5
   1a478:	4620      	mov	r0, r4
   1a47a:	f013 fc35 	bl	2dce8 <bt_conn_disconnect>
   1a47e:	e7d7      	b.n	1a430 <hci_encrypt_key_refresh_complete+0x40>
   1a480:	00036a52 	.word	0x00036a52
   1a484:	00033234 	.word	0x00033234
   1a488:	00036d58 	.word	0x00036d58

0001a48c <hci_encrypt_change>:
{
   1a48c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1a48e:	68c6      	ldr	r6, [r0, #12]
{
   1a490:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1a492:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   1a496:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1a498:	4638      	mov	r0, r7
   1a49a:	f001 fea7 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   1a49e:	4604      	mov	r4, r0
   1a4a0:	b958      	cbnz	r0, 1a4ba <hci_encrypt_change+0x2e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1a4a2:	4b23      	ldr	r3, [pc, #140]	; (1a530 <hci_encrypt_change+0xa4>)
   1a4a4:	2201      	movs	r2, #1
   1a4a6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a4aa:	4922      	ldr	r1, [pc, #136]	; (1a534 <hci_encrypt_change+0xa8>)
   1a4ac:	4603      	mov	r3, r0
   1a4ae:	9703      	str	r7, [sp, #12]
   1a4b0:	9000      	str	r0, [sp, #0]
   1a4b2:	f013 f85a 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a4b6:	b005      	add	sp, #20
   1a4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   1a4ba:	b16d      	cbz	r5, 1a4d8 <hci_encrypt_change+0x4c>
		bt_conn_security_changed(conn, status,
   1a4bc:	4628      	mov	r0, r5
   1a4be:	f7ff ff8f 	bl	1a3e0 <bt_security_err_get>
   1a4c2:	4629      	mov	r1, r5
   1a4c4:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a4c6:	4620      	mov	r0, r4
   1a4c8:	f002 f852 	bl	1c570 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1a4cc:	4620      	mov	r0, r4
}
   1a4ce:	b005      	add	sp, #20
   1a4d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1a4d4:	f013 bbc9 	b.w	2dc6a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a4d8:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1a4da:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   1a4dc:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   1a4de:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1a4e0:	d005      	beq.n	1a4ee <hci_encrypt_change+0x62>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a4e2:	2000      	movs	r0, #0
   1a4e4:	f7ff ff7c 	bl	1a3e0 <bt_security_err_get>
   1a4e8:	2100      	movs	r1, #0
   1a4ea:	4602      	mov	r2, r0
   1a4ec:	e7eb      	b.n	1a4c6 <hci_encrypt_change+0x3a>
		if (conn->encrypt) {
   1a4ee:	b10b      	cbz	r3, 1a4f4 <hci_encrypt_change+0x68>
			bt_smp_update_keys(conn);
   1a4f0:	f005 fe8a 	bl	20208 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	f013 f808 	bl	2d50a <update_sec_level>
   1a4fa:	4605      	mov	r5, r0
   1a4fc:	2800      	cmp	r0, #0
   1a4fe:	d1f0      	bne.n	1a4e2 <hci_encrypt_change+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1a500:	2005      	movs	r0, #5
   1a502:	f7ff ff6d 	bl	1a3e0 <bt_security_err_get>
   1a506:	2105      	movs	r1, #5
   1a508:	4602      	mov	r2, r0
   1a50a:	4620      	mov	r0, r4
   1a50c:	f002 f830 	bl	1c570 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1a510:	4b09      	ldr	r3, [pc, #36]	; (1a538 <hci_encrypt_change+0xac>)
   1a512:	4628      	mov	r0, r5
   1a514:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1a518:	2201      	movs	r2, #1
   1a51a:	462b      	mov	r3, r5
   1a51c:	4905      	ldr	r1, [pc, #20]	; (1a534 <hci_encrypt_change+0xa8>)
   1a51e:	9500      	str	r5, [sp, #0]
   1a520:	f013 f823 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(conn, status);
   1a524:	2105      	movs	r1, #5
   1a526:	4620      	mov	r0, r4
   1a528:	f013 fbde 	bl	2dce8 <bt_conn_disconnect>
   1a52c:	e7ce      	b.n	1a4cc <hci_encrypt_change+0x40>
   1a52e:	bf00      	nop
   1a530:	00036a52 	.word	0x00036a52
   1a534:	00033234 	.word	0x00033234
   1a538:	00036d58 	.word	0x00036d58

0001a53c <bt_send>:
	return bt_dev.drv->send(buf);
   1a53c:	4b02      	ldr	r3, [pc, #8]	; (1a548 <bt_send+0xc>)
   1a53e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
   1a542:	695b      	ldr	r3, [r3, #20]
   1a544:	4718      	bx	r3
   1a546:	bf00      	nop
   1a548:	20008000 	.word	0x20008000

0001a54c <bt_hci_cmd_send>:
{
   1a54c:	b530      	push	{r4, r5, lr}
   1a54e:	4605      	mov	r5, r0
	if (!buf) {
   1a550:	460c      	mov	r4, r1
{
   1a552:	b085      	sub	sp, #20
	if (!buf) {
   1a554:	b919      	cbnz	r1, 1a55e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1a556:	f7ff fcb1 	bl	19ebc <bt_hci_cmd_create>
		if (!buf) {
   1a55a:	4604      	mov	r4, r0
   1a55c:	b1f8      	cbz	r0, 1a59e <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1a55e:	f640 4335 	movw	r3, #3125	; 0xc35
   1a562:	429d      	cmp	r5, r3
   1a564:	d115      	bne.n	1a592 <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   1a566:	4620      	mov	r0, r4
   1a568:	f7ff ffe8 	bl	1a53c <bt_send>
		if (err) {
   1a56c:	4605      	mov	r5, r0
   1a56e:	b1a0      	cbz	r0, 1a59a <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1a570:	4b0c      	ldr	r3, [pc, #48]	; (1a5a4 <bt_hci_cmd_send+0x58>)
   1a572:	9003      	str	r0, [sp, #12]
   1a574:	9302      	str	r3, [sp, #8]
   1a576:	2300      	movs	r3, #0
   1a578:	2201      	movs	r2, #1
   1a57a:	4618      	mov	r0, r3
   1a57c:	e9cd 3300 	strd	r3, r3, [sp]
   1a580:	4909      	ldr	r1, [pc, #36]	; (1a5a8 <bt_hci_cmd_send+0x5c>)
   1a582:	f012 fff2 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   1a586:	4620      	mov	r0, r4
   1a588:	f006 f902 	bl	20790 <net_buf_unref>
}
   1a58c:	4628      	mov	r0, r5
   1a58e:	b005      	add	sp, #20
   1a590:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1a592:	4621      	mov	r1, r4
   1a594:	4805      	ldr	r0, [pc, #20]	; (1a5ac <bt_hci_cmd_send+0x60>)
   1a596:	f015 f81e 	bl	2f5d6 <net_buf_put>
	return 0;
   1a59a:	2500      	movs	r5, #0
   1a59c:	e7f6      	b.n	1a58c <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1a59e:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1a5a2:	e7f3      	b.n	1a58c <bt_hci_cmd_send+0x40>
   1a5a4:	00036d7e 	.word	0x00036d7e
   1a5a8:	00033234 	.word	0x00033234
   1a5ac:	20008144 	.word	0x20008144

0001a5b0 <bt_hci_host_num_completed_packets>:
{
   1a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5b2:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   1a5b4:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   1a5b6:	7e46      	ldrb	r6, [r0, #25]
{
   1a5b8:	b085      	sub	sp, #20
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a5ba:	7a80      	ldrb	r0, [r0, #10]
   1a5bc:	f006 f826 	bl	2060c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a5c0:	4621      	mov	r1, r4
   1a5c2:	f016 fdd5 	bl	31170 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1a5c6:	4b2a      	ldr	r3, [pc, #168]	; (1a670 <bt_hci_host_num_completed_packets+0xc0>)
   1a5c8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1a5cc:	069b      	lsls	r3, r3, #26
   1a5ce:	d50e      	bpl.n	1a5ee <bt_hci_host_num_completed_packets+0x3e>
	conn = bt_conn_lookup_index(index);
   1a5d0:	4630      	mov	r0, r6
   1a5d2:	f002 f9fb 	bl	1c9cc <bt_conn_lookup_index>
	if (!conn) {
   1a5d6:	4604      	mov	r4, r0
   1a5d8:	b958      	cbnz	r0, 1a5f2 <bt_hci_host_num_completed_packets+0x42>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1a5da:	4b26      	ldr	r3, [pc, #152]	; (1a674 <bt_hci_host_num_completed_packets+0xc4>)
   1a5dc:	2202      	movs	r2, #2
   1a5de:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a5e2:	4925      	ldr	r1, [pc, #148]	; (1a678 <bt_hci_host_num_completed_packets+0xc8>)
   1a5e4:	4603      	mov	r3, r0
   1a5e6:	9603      	str	r6, [sp, #12]
   1a5e8:	9000      	str	r0, [sp, #0]
   1a5ea:	f012 ffbe 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a5ee:	b005      	add	sp, #20
   1a5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   1a5f2:	7b43      	ldrb	r3, [r0, #13]
   1a5f4:	3b07      	subs	r3, #7
   1a5f6:	2b01      	cmp	r3, #1
   1a5f8:	d90f      	bls.n	1a61a <bt_hci_host_num_completed_packets+0x6a>
		LOG_WRN("Not reporting packet for non-connected conn");
   1a5fa:	4b20      	ldr	r3, [pc, #128]	; (1a67c <bt_hci_host_num_completed_packets+0xcc>)
   1a5fc:	2202      	movs	r2, #2
   1a5fe:	9302      	str	r3, [sp, #8]
   1a600:	2300      	movs	r3, #0
   1a602:	491d      	ldr	r1, [pc, #116]	; (1a678 <bt_hci_host_num_completed_packets+0xc8>)
   1a604:	4618      	mov	r0, r3
   1a606:	e9cd 3300 	strd	r3, r3, [sp]
   1a60a:	f012 ffae 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1a60e:	4620      	mov	r0, r4
}
   1a610:	b005      	add	sp, #20
   1a612:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1a616:	f013 bb28 	b.w	2dc6a <bt_conn_unref>
	bt_conn_unref(conn);
   1a61a:	f013 fb26 	bl	2dc6a <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1a61e:	2105      	movs	r1, #5
   1a620:	f640 4035 	movw	r0, #3125	; 0xc35
   1a624:	f7ff fc4a 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1a628:	4604      	mov	r4, r0
   1a62a:	b948      	cbnz	r0, 1a640 <bt_hci_host_num_completed_packets+0x90>
		LOG_ERR("Unable to allocate new HCI command");
   1a62c:	4b14      	ldr	r3, [pc, #80]	; (1a680 <bt_hci_host_num_completed_packets+0xd0>)
   1a62e:	2201      	movs	r2, #1
   1a630:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a634:	4910      	ldr	r1, [pc, #64]	; (1a678 <bt_hci_host_num_completed_packets+0xc8>)
   1a636:	4603      	mov	r3, r0
   1a638:	9000      	str	r0, [sp, #0]
   1a63a:	f012 ff96 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return;
   1a63e:	e7d6      	b.n	1a5ee <bt_hci_host_num_completed_packets+0x3e>
	return net_buf_simple_add(&buf->b, len);
   1a640:	f100 070c 	add.w	r7, r0, #12
   1a644:	2101      	movs	r1, #1
   1a646:	4638      	mov	r0, r7
   1a648:	f014 ffed 	bl	2f626 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   1a64c:	2601      	movs	r6, #1
   1a64e:	2104      	movs	r1, #4
   1a650:	7006      	strb	r6, [r0, #0]
   1a652:	4638      	mov	r0, r7
   1a654:	f014 ffe7 	bl	2f626 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   1a658:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   1a65a:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   1a65c:	7086      	strb	r6, [r0, #2]
   1a65e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1a660:	4621      	mov	r1, r4
   1a662:	f640 4035 	movw	r0, #3125	; 0xc35
}
   1a666:	b005      	add	sp, #20
   1a668:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1a66c:	f7ff bf6e 	b.w	1a54c <bt_hci_cmd_send>
   1a670:	20008000 	.word	0x20008000
   1a674:	00036da0 	.word	0x00036da0
   1a678:	00033234 	.word	0x00033234
   1a67c:	00036dc9 	.word	0x00036dc9
   1a680:	00036df5 	.word	0x00036df5

0001a684 <le_ltk_request>:
{
   1a684:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1a686:	68c6      	ldr	r6, [r0, #12]
{
   1a688:	b089      	sub	sp, #36	; 0x24
	handle = sys_le16_to_cpu(evt->handle);
   1a68a:	8837      	ldrh	r7, [r6, #0]
   1a68c:	b2bd      	uxth	r5, r7
	conn = bt_conn_lookup_handle(handle);
   1a68e:	4628      	mov	r0, r5
   1a690:	f001 fdac 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   1a694:	4604      	mov	r4, r0
   1a696:	b958      	cbnz	r0, 1a6b0 <le_ltk_request+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a698:	4b2a      	ldr	r3, [pc, #168]	; (1a744 <le_ltk_request+0xc0>)
   1a69a:	2201      	movs	r2, #1
   1a69c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a6a0:	4929      	ldr	r1, [pc, #164]	; (1a748 <le_ltk_request+0xc4>)
   1a6a2:	4603      	mov	r3, r0
   1a6a4:	9503      	str	r5, [sp, #12]
   1a6a6:	9000      	str	r0, [sp, #0]
   1a6a8:	f012 ff5f 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a6ac:	b009      	add	sp, #36	; 0x24
   1a6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1a6b0:	ad04      	add	r5, sp, #16
   1a6b2:	f8d6 2002 	ldr.w	r2, [r6, #2]
   1a6b6:	f8d6 3006 	ldr.w	r3, [r6, #6]
   1a6ba:	9501      	str	r5, [sp, #4]
   1a6bc:	8971      	ldrh	r1, [r6, #10]
   1a6be:	9100      	str	r1, [sp, #0]
   1a6c0:	f014 fd65 	bl	2f18e <bt_smp_request_ltk>
   1a6c4:	b360      	cbz	r0, 1a720 <le_ltk_request+0x9c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1a6c6:	2112      	movs	r1, #18
   1a6c8:	f242 001a 	movw	r0, #8218	; 0x201a
   1a6cc:	f7ff fbf6 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1a6d0:	4606      	mov	r6, r0
   1a6d2:	b968      	cbnz	r0, 1a6f0 <le_ltk_request+0x6c>
		LOG_ERR("Out of command buffers");
   1a6d4:	4b1d      	ldr	r3, [pc, #116]	; (1a74c <le_ltk_request+0xc8>)
   1a6d6:	2201      	movs	r2, #1
   1a6d8:	9302      	str	r3, [sp, #8]
   1a6da:	2300      	movs	r3, #0
   1a6dc:	491a      	ldr	r1, [pc, #104]	; (1a748 <le_ltk_request+0xc4>)
   1a6de:	4618      	mov	r0, r3
   1a6e0:	e9cd 3300 	strd	r3, r3, [sp]
   1a6e4:	f012 ff41 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   1a6e8:	4620      	mov	r0, r4
   1a6ea:	f013 fabe 	bl	2dc6a <bt_conn_unref>
   1a6ee:	e7dd      	b.n	1a6ac <le_ltk_request+0x28>
   1a6f0:	2112      	movs	r1, #18
   1a6f2:	300c      	adds	r0, #12
   1a6f4:	f014 ff97 	bl	2f626 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1a6f8:	4602      	mov	r2, r0
   1a6fa:	462b      	mov	r3, r5
   1a6fc:	f822 7b02 	strh.w	r7, [r2], #2
   1a700:	af08      	add	r7, sp, #32
   1a702:	461d      	mov	r5, r3
   1a704:	cd03      	ldmia	r5!, {r0, r1}
   1a706:	42bd      	cmp	r5, r7
   1a708:	6010      	str	r0, [r2, #0]
   1a70a:	6051      	str	r1, [r2, #4]
   1a70c:	462b      	mov	r3, r5
   1a70e:	f102 0208 	add.w	r2, r2, #8
   1a712:	d1f6      	bne.n	1a702 <le_ltk_request+0x7e>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1a714:	4631      	mov	r1, r6
   1a716:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a71a:	f7ff ff17 	bl	1a54c <bt_hci_cmd_send>
   1a71e:	e7e3      	b.n	1a6e8 <le_ltk_request+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1a720:	2102      	movs	r1, #2
   1a722:	f242 001b 	movw	r0, #8219	; 0x201b
   1a726:	f7ff fbc9 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1a72a:	4605      	mov	r5, r0
   1a72c:	2800      	cmp	r0, #0
   1a72e:	d0d1      	beq.n	1a6d4 <le_ltk_request+0x50>
   1a730:	2102      	movs	r1, #2
   1a732:	300c      	adds	r0, #12
   1a734:	f014 ff77 	bl	2f626 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a738:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   1a73a:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1a73c:	f242 001b 	movw	r0, #8219	; 0x201b
   1a740:	e7eb      	b.n	1a71a <le_ltk_request+0x96>
   1a742:	bf00      	nop
   1a744:	00036a2e 	.word	0x00036a2e
   1a748:	00033234 	.word	0x00033234
   1a74c:	00036e18 	.word	0x00036e18

0001a750 <le_conn_param_neg_reply>:
{
   1a750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a752:	4606      	mov	r6, r0
   1a754:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1a756:	f242 0021 	movw	r0, #8225	; 0x2021
   1a75a:	2103      	movs	r1, #3
   1a75c:	f7ff fbae 	bl	19ebc <bt_hci_cmd_create>
   1a760:	4604      	mov	r4, r0
	if (!buf) {
   1a762:	b950      	cbnz	r0, 1a77a <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   1a764:	4b0c      	ldr	r3, [pc, #48]	; (1a798 <le_conn_param_neg_reply+0x48>)
   1a766:	2201      	movs	r2, #1
   1a768:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a76c:	490b      	ldr	r1, [pc, #44]	; (1a79c <le_conn_param_neg_reply+0x4c>)
   1a76e:	4603      	mov	r3, r0
   1a770:	9000      	str	r0, [sp, #0]
   1a772:	f012 fefa 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
}
   1a776:	b004      	add	sp, #16
   1a778:	bd70      	pop	{r4, r5, r6, pc}
   1a77a:	2103      	movs	r1, #3
   1a77c:	300c      	adds	r0, #12
   1a77e:	f014 ff52 	bl	2f626 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a782:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1a784:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1a786:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a788:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1a78c:	b004      	add	sp, #16
   1a78e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1a792:	f7ff bedb 	b.w	1a54c <bt_hci_cmd_send>
   1a796:	bf00      	nop
   1a798:	00036e2f 	.word	0x00036e2f
   1a79c:	00033234 	.word	0x00033234

0001a7a0 <le_conn_param_req>:
{
   1a7a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1a7a2:	68c3      	ldr	r3, [r0, #12]
{
   1a7a4:	b086      	sub	sp, #24
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a7a6:	78d9      	ldrb	r1, [r3, #3]
   1a7a8:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1a7aa:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1a7ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a7b0:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a7b4:	7959      	ldrb	r1, [r3, #5]
   1a7b6:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   1a7b8:	b2b5      	uxth	r5, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1a7ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a7be:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   1a7c2:	799a      	ldrb	r2, [r3, #6]
   1a7c4:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   1a7c6:	4628      	mov	r0, r5
	param.latency = sys_le16_to_cpu(evt->latency);
   1a7c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1a7cc:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1a7d0:	7a1a      	ldrb	r2, [r3, #8]
   1a7d2:	7a5b      	ldrb	r3, [r3, #9]
   1a7d4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   1a7d8:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   1a7dc:	f001 fd06 	bl	1c1ec <bt_conn_lookup_handle>
	if (!conn) {
   1a7e0:	4604      	mov	r4, r0
   1a7e2:	b978      	cbnz	r0, 1a804 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1a7e4:	4b1e      	ldr	r3, [pc, #120]	; (1a860 <le_conn_param_req+0xc0>)
   1a7e6:	491f      	ldr	r1, [pc, #124]	; (1a864 <le_conn_param_req+0xc4>)
   1a7e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1a7ec:	9000      	str	r0, [sp, #0]
   1a7ee:	4603      	mov	r3, r0
   1a7f0:	2201      	movs	r2, #1
   1a7f2:	9503      	str	r5, [sp, #12]
   1a7f4:	f012 feb9 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1a7f8:	2102      	movs	r1, #2
   1a7fa:	4628      	mov	r0, r5
   1a7fc:	f7ff ffa8 	bl	1a750 <le_conn_param_neg_reply>
}
   1a800:	b006      	add	sp, #24
   1a802:	bd70      	pop	{r4, r5, r6, pc}
	if (!le_param_req(conn, &param)) {
   1a804:	a904      	add	r1, sp, #16
   1a806:	f001 fe4b 	bl	1c4a0 <le_param_req>
   1a80a:	b938      	cbnz	r0, 1a81c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1a80c:	211e      	movs	r1, #30
   1a80e:	4628      	mov	r0, r5
   1a810:	f7ff ff9e 	bl	1a750 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1a814:	4620      	mov	r0, r4
   1a816:	f013 fa28 	bl	2dc6a <bt_conn_unref>
   1a81a:	e7f1      	b.n	1a800 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1a81c:	210e      	movs	r1, #14
   1a81e:	f242 0020 	movw	r0, #8224	; 0x2020
   1a822:	f7ff fb4b 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1a826:	4605      	mov	r5, r0
   1a828:	2800      	cmp	r0, #0
   1a82a:	d0f3      	beq.n	1a814 <le_conn_param_req+0x74>
   1a82c:	210e      	movs	r1, #14
   1a82e:	300c      	adds	r0, #12
   1a830:	f014 fef9 	bl	2f626 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1a834:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   1a836:	8006      	strh	r6, [r0, #0]
   1a838:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a83c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a840:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1a842:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1a844:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1a848:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1a84a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1a84e:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1a850:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1a854:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1a856:	f242 0020 	movw	r0, #8224	; 0x2020
   1a85a:	f7ff fe77 	bl	1a54c <bt_hci_cmd_send>
   1a85e:	e7d9      	b.n	1a814 <le_conn_param_req+0x74>
   1a860:	00036a2e 	.word	0x00036a2e
   1a864:	00033234 	.word	0x00033234

0001a868 <hci_tx_thread>:
{
   1a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1a86c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 1a9b8 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   1a870:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a9bc <hci_tx_thread+0x154>
{
   1a874:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   1a876:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1a87a:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a87e:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   1a880:	f36f 3394 	bfc	r3, #14, #7
   1a884:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1a888:	f001 fc78 	bl	1c17c <bt_conn_prepare_events>
   1a88c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1a88e:	f04f 32ff 	mov.w	r2, #4294967295
   1a892:	f04f 33ff 	mov.w	r3, #4294967295
   1a896:	4629      	mov	r1, r5
   1a898:	4847      	ldr	r0, [pc, #284]	; (1a9b8 <hci_tx_thread+0x150>)
   1a89a:	f00c f9e3 	bl	26c64 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1a89e:	b160      	cbz	r0, 1a8ba <hci_tx_thread+0x52>
   1a8a0:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1a8a4:	464a      	mov	r2, r9
   1a8a6:	4946      	ldr	r1, [pc, #280]	; (1a9c0 <hci_tx_thread+0x158>)
   1a8a8:	4846      	ldr	r0, [pc, #280]	; (1a9c4 <hci_tx_thread+0x15c>)
   1a8aa:	f010 f8bf 	bl	2aa2c <assert_print>
   1a8ae:	4040      	eors	r0, r0
   1a8b0:	f380 8811 	msr	BASEPRI, r0
   1a8b4:	f04f 0003 	mov.w	r0, #3
   1a8b8:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a8ba:	f04f 0a00 	mov.w	sl, #0
{
   1a8be:	4e3e      	ldr	r6, [pc, #248]	; (1a9b8 <hci_tx_thread+0x150>)
	for (; count; ev++, count--) {
   1a8c0:	b915      	cbnz	r5, 1a8c8 <hci_tx_thread+0x60>
	z_impl_k_yield();
   1a8c2:	f00b fea9 	bl	26618 <z_impl_k_yield>
	while (1) {
   1a8c6:	e7d8      	b.n	1a87a <hci_tx_thread+0x12>
		switch (ev->state) {
   1a8c8:	68f3      	ldr	r3, [r6, #12]
   1a8ca:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1a8ce:	2b01      	cmp	r3, #1
   1a8d0:	d95a      	bls.n	1a988 <hci_tx_thread+0x120>
   1a8d2:	2b04      	cmp	r3, #4
   1a8d4:	d162      	bne.n	1a99c <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1a8d6:	7b33      	ldrb	r3, [r6, #12]
   1a8d8:	2b00      	cmp	r3, #0
   1a8da:	d158      	bne.n	1a98e <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1a8dc:	2200      	movs	r2, #0
   1a8de:	2300      	movs	r3, #0
   1a8e0:	4839      	ldr	r0, [pc, #228]	; (1a9c8 <hci_tx_thread+0x160>)
   1a8e2:	f014 fe45 	bl	2f570 <net_buf_get>
	BT_ASSERT(buf);
   1a8e6:	4604      	mov	r4, r0
   1a8e8:	b960      	cbnz	r0, 1a904 <hci_tx_thread+0x9c>
   1a8ea:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1a8ee:	464a      	mov	r2, r9
   1a8f0:	4936      	ldr	r1, [pc, #216]	; (1a9cc <hci_tx_thread+0x164>)
   1a8f2:	4834      	ldr	r0, [pc, #208]	; (1a9c4 <hci_tx_thread+0x15c>)
   1a8f4:	f010 f89a 	bl	2aa2c <assert_print>
   1a8f8:	4040      	eors	r0, r0
   1a8fa:	f380 8811 	msr	BASEPRI, r0
   1a8fe:	f04f 0003 	mov.w	r0, #3
   1a902:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1a904:	4f32      	ldr	r7, [pc, #200]	; (1a9d0 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   1a906:	f04f 33ff 	mov.w	r3, #4294967295
   1a90a:	f04f 32ff 	mov.w	r2, #4294967295
   1a90e:	4831      	ldr	r0, [pc, #196]	; (1a9d4 <hci_tx_thread+0x16c>)
   1a910:	f00b fa06 	bl	25d20 <z_impl_k_sem_take>
   1a914:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
   1a918:	b183      	cbz	r3, 1a93c <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1a91a:	4b2f      	ldr	r3, [pc, #188]	; (1a9d8 <hci_tx_thread+0x170>)
   1a91c:	2201      	movs	r2, #1
   1a91e:	9302      	str	r3, [sp, #8]
   1a920:	2300      	movs	r3, #0
   1a922:	492e      	ldr	r1, [pc, #184]	; (1a9dc <hci_tx_thread+0x174>)
   1a924:	4618      	mov	r0, r3
   1a926:	e9cd 3300 	strd	r3, r3, [sp]
   1a92a:	f012 fe1e 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1a92e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1a932:	f005 ff2d 	bl	20790 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1a936:	2300      	movs	r3, #0
   1a938:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1a93c:	4620      	mov	r0, r4
   1a93e:	f014 fe4c 	bl	2f5da <net_buf_ref>
   1a942:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	err = bt_send(buf);
   1a946:	4620      	mov	r0, r4
   1a948:	f7ff fdf8 	bl	1a53c <bt_send>
	if (err) {
   1a94c:	b1e0      	cbz	r0, 1a988 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1a94e:	4b24      	ldr	r3, [pc, #144]	; (1a9e0 <hci_tx_thread+0x178>)
   1a950:	9003      	str	r0, [sp, #12]
   1a952:	9302      	str	r3, [sp, #8]
   1a954:	2300      	movs	r3, #0
   1a956:	2201      	movs	r2, #1
   1a958:	4618      	mov	r0, r3
   1a95a:	e9cd 3300 	strd	r3, r3, [sp]
   1a95e:	491f      	ldr	r1, [pc, #124]	; (1a9dc <hci_tx_thread+0x174>)
   1a960:	f012 fe03 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   1a964:	481b      	ldr	r0, [pc, #108]	; (1a9d4 <hci_tx_thread+0x16c>)
   1a966:	f00b f9b5 	bl	25cd4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1a96a:	4620      	mov	r0, r4
   1a96c:	f005 fe56 	bl	2061c <net_buf_id>
   1a970:	220c      	movs	r2, #12
   1a972:	4b1c      	ldr	r3, [pc, #112]	; (1a9e4 <hci_tx_thread+0x17c>)
   1a974:	211f      	movs	r1, #31
   1a976:	fb02 3000 	mla	r0, r2, r0, r3
   1a97a:	4622      	mov	r2, r4
   1a97c:	8840      	ldrh	r0, [r0, #2]
   1a97e:	f7ff f8e7 	bl	19b50 <hci_cmd_done>
		net_buf_unref(buf);
   1a982:	4620      	mov	r0, r4
   1a984:	f005 ff04 	bl	20790 <net_buf_unref>
	for (; count; ev++, count--) {
   1a988:	3614      	adds	r6, #20
   1a98a:	3d01      	subs	r5, #1
   1a98c:	e798      	b.n	1a8c0 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1a98e:	2b01      	cmp	r3, #1
   1a990:	d1fa      	bne.n	1a988 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   1a992:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1a994:	3838      	subs	r0, #56	; 0x38
   1a996:	f001 ff83 	bl	1c8a0 <bt_conn_process_tx>
   1a99a:	e7f5      	b.n	1a988 <hci_tx_thread+0x120>
		switch (ev->state) {
   1a99c:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1a99e:	4b12      	ldr	r3, [pc, #72]	; (1a9e8 <hci_tx_thread+0x180>)
   1a9a0:	2202      	movs	r2, #2
   1a9a2:	e9cd a301 	strd	sl, r3, [sp, #4]
   1a9a6:	2300      	movs	r3, #0
   1a9a8:	490c      	ldr	r1, [pc, #48]	; (1a9dc <hci_tx_thread+0x174>)
   1a9aa:	4618      	mov	r0, r3
   1a9ac:	f8cd a000 	str.w	sl, [sp]
   1a9b0:	f012 fddb 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
   1a9b4:	e7e8      	b.n	1a988 <hci_tx_thread+0x120>
   1a9b6:	bf00      	nop
   1a9b8:	20008570 	.word	0x20008570
   1a9bc:	00036abc 	.word	0x00036abc
   1a9c0:	00036c49 	.word	0x00036c49
   1a9c4:	00036b09 	.word	0x00036b09
   1a9c8:	20008144 	.word	0x20008144
   1a9cc:	00037f0e 	.word	0x00037f0e
   1a9d0:	20008000 	.word	0x20008000
   1a9d4:	20008120 	.word	0x20008120
   1a9d8:	00036e49 	.word	0x00036e49
   1a9dc:	00033234 	.word	0x00033234
   1a9e0:	00036d7e 	.word	0x00036d7e
   1a9e4:	20030980 	.word	0x20030980
   1a9e8:	00036e64 	.word	0x00036e64

0001a9ec <hci_event_prio>:
{
   1a9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9f0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1a9f2:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1a9f6:	4630      	mov	r0, r6
   1a9f8:	f014 fe55 	bl	2f6a6 <net_buf_simple_headroom>
	state->len = buf->len;
   1a9fc:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   1aa00:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1aa02:	f1b8 0f01 	cmp.w	r8, #1
   1aa06:	d80c      	bhi.n	1aa22 <hci_event_prio+0x36>
   1aa08:	f640 537b 	movw	r3, #3451	; 0xd7b
   1aa0c:	4a1b      	ldr	r2, [pc, #108]	; (1aa7c <hci_event_prio+0x90>)
   1aa0e:	491c      	ldr	r1, [pc, #112]	; (1aa80 <hci_event_prio+0x94>)
   1aa10:	481c      	ldr	r0, [pc, #112]	; (1aa84 <hci_event_prio+0x98>)
   1aa12:	f010 f80b 	bl	2aa2c <assert_print>
   1aa16:	4040      	eors	r0, r0
   1aa18:	f380 8811 	msr	BASEPRI, r0
   1aa1c:	f04f 0003 	mov.w	r0, #3
   1aa20:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1aa22:	4630      	mov	r0, r6
   1aa24:	2102      	movs	r1, #2
   1aa26:	f014 fe2e 	bl	2f686 <net_buf_simple_pull_mem>
   1aa2a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1aa2c:	7800      	ldrb	r0, [r0, #0]
   1aa2e:	f012 fd5a 	bl	2d4e6 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1aa32:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1aa34:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1aa36:	d40c      	bmi.n	1aa52 <hci_event_prio+0x66>
   1aa38:	f640 537f 	movw	r3, #3455	; 0xd7f
   1aa3c:	4a0f      	ldr	r2, [pc, #60]	; (1aa7c <hci_event_prio+0x90>)
   1aa3e:	4912      	ldr	r1, [pc, #72]	; (1aa88 <hci_event_prio+0x9c>)
   1aa40:	4810      	ldr	r0, [pc, #64]	; (1aa84 <hci_event_prio+0x98>)
   1aa42:	f00f fff3 	bl	2aa2c <assert_print>
   1aa46:	4040      	eors	r0, r0
   1aa48:	f380 8811 	msr	BASEPRI, r0
   1aa4c:	f04f 0003 	mov.w	r0, #3
   1aa50:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1aa52:	2305      	movs	r3, #5
   1aa54:	4621      	mov	r1, r4
   1aa56:	4a0d      	ldr	r2, [pc, #52]	; (1aa8c <hci_event_prio+0xa0>)
   1aa58:	7838      	ldrb	r0, [r7, #0]
   1aa5a:	f7fe ff37 	bl	198cc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1aa5e:	07b3      	lsls	r3, r6, #30
   1aa60:	d507      	bpl.n	1aa72 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1aa62:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1aa64:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1aa68:	fa13 f585 	uxtah	r5, r3, r5
   1aa6c:	60e5      	str	r5, [r4, #12]
}
   1aa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1aa72:	4620      	mov	r0, r4
}
   1aa74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1aa78:	f005 be8a 	b.w	20790 <net_buf_unref>
   1aa7c:	00036abc 	.word	0x00036abc
   1aa80:	00036af0 	.word	0x00036af0
   1aa84:	00036b09 	.word	0x00036b09
   1aa88:	00036e85 	.word	0x00036e85
   1aa8c:	00033ddc 	.word	0x00033ddc

0001aa90 <bt_recv>:
{
   1aa90:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1aa92:	7e03      	ldrb	r3, [r0, #24]
   1aa94:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   1aa96:	2b01      	cmp	r3, #1
{
   1aa98:	b085      	sub	sp, #20
	switch (bt_buf_get_type(buf)) {
   1aa9a:	d006      	beq.n	1aaaa <bt_recv+0x1a>
   1aa9c:	2b03      	cmp	r3, #3
   1aa9e:	d112      	bne.n	1aac6 <bt_recv+0x36>
			rx_queue_put(buf);
   1aaa0:	f7fe fe76 	bl	19790 <rx_queue_put>
		return 0;
   1aaa4:	2000      	movs	r0, #0
}
   1aaa6:	b005      	add	sp, #20
   1aaa8:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1aaaa:	68c3      	ldr	r3, [r0, #12]
   1aaac:	7818      	ldrb	r0, [r3, #0]
   1aaae:	f012 fd1a 	bl	2d4e6 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1aab2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1aab4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1aab6:	d502      	bpl.n	1aabe <bt_recv+0x2e>
			hci_event_prio(buf);
   1aab8:	4620      	mov	r0, r4
   1aaba:	f7ff ff97 	bl	1a9ec <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1aabe:	07ab      	lsls	r3, r5, #30
   1aac0:	d5f0      	bpl.n	1aaa4 <bt_recv+0x14>
			rx_queue_put(buf);
   1aac2:	4620      	mov	r0, r4
   1aac4:	e7ec      	b.n	1aaa0 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   1aac6:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1aac8:	4b07      	ldr	r3, [pc, #28]	; (1aae8 <bt_recv+0x58>)
   1aaca:	2201      	movs	r2, #1
   1aacc:	9302      	str	r3, [sp, #8]
   1aace:	2300      	movs	r3, #0
   1aad0:	4906      	ldr	r1, [pc, #24]	; (1aaec <bt_recv+0x5c>)
   1aad2:	4618      	mov	r0, r3
   1aad4:	e9cd 3300 	strd	r3, r3, [sp]
   1aad8:	f012 fd47 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1aadc:	4620      	mov	r0, r4
   1aade:	f005 fe57 	bl	20790 <net_buf_unref>
		return -EINVAL;
   1aae2:	f06f 0015 	mvn.w	r0, #21
   1aae6:	e7de      	b.n	1aaa6 <bt_recv+0x16>
   1aae8:	00036e9e 	.word	0x00036e9e
   1aaec:	00033234 	.word	0x00033234

0001aaf0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1aaf0:	4a08      	ldr	r2, [pc, #32]	; (1ab14 <bt_hci_driver_register+0x24>)
{
   1aaf2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1aaf4:	f8d2 015c 	ldr.w	r0, [r2, #348]	; 0x15c
   1aaf8:	b930      	cbnz	r0, 1ab08 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1aafa:	68d9      	ldr	r1, [r3, #12]
   1aafc:	b139      	cbz	r1, 1ab0e <bt_hci_driver_register+0x1e>
   1aafe:	6959      	ldr	r1, [r3, #20]
   1ab00:	b129      	cbz	r1, 1ab0e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1ab02:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	return 0;
   1ab06:	4770      	bx	lr
		return -EALREADY;
   1ab08:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ab0c:	4770      	bx	lr
		return -EINVAL;
   1ab0e:	f06f 0015 	mvn.w	r0, #21
}
   1ab12:	4770      	bx	lr
   1ab14:	20008000 	.word	0x20008000

0001ab18 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ab18:	2104      	movs	r1, #4
   1ab1a:	4801      	ldr	r0, [pc, #4]	; (1ab20 <bt_finalize_init+0x8>)
   1ab1c:	f012 bd0e 	b.w	2d53c <atomic_or>
   1ab20:	200080cc 	.word	0x200080cc

0001ab24 <init_work>:
{
   1ab24:	b510      	push	{r4, lr}
	err = bt_init();
   1ab26:	f7ee fce3 	bl	94f0 <bt_init>
	if (ready_cb) {
   1ab2a:	4b03      	ldr	r3, [pc, #12]	; (1ab38 <init_work+0x14>)
   1ab2c:	681b      	ldr	r3, [r3, #0]
   1ab2e:	b113      	cbz	r3, 1ab36 <init_work+0x12>
}
   1ab30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1ab34:	4718      	bx	r3
}
   1ab36:	bd10      	pop	{r4, pc}
   1ab38:	200309f8 	.word	0x200309f8

0001ab3c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1ab3e:	4e38      	ldr	r6, [pc, #224]	; (1ac20 <bt_enable+0xe4>)
{
   1ab40:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   1ab42:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
{
   1ab46:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   1ab48:	b96b      	cbnz	r3, 1ab66 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   1ab4a:	4a36      	ldr	r2, [pc, #216]	; (1ac24 <bt_enable+0xe8>)
   1ab4c:	4618      	mov	r0, r3
   1ab4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ab52:	4935      	ldr	r1, [pc, #212]	; (1ac28 <bt_enable+0xec>)
   1ab54:	2201      	movs	r2, #1
   1ab56:	9300      	str	r3, [sp, #0]
   1ab58:	f012 fd07 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1ab5c:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1ab60:	4628      	mov	r0, r5
   1ab62:	b009      	add	sp, #36	; 0x24
   1ab64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ab66:	f06f 0102 	mvn.w	r1, #2
   1ab6a:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   1ab6e:	f012 fd0b 	bl	2d588 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ab72:	2101      	movs	r1, #1
   1ab74:	f012 fce2 	bl	2d53c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1ab78:	ea10 0401 	ands.w	r4, r0, r1
   1ab7c:	d14d      	bne.n	1ac1a <bt_enable+0xde>
	ready_cb = cb;
   1ab7e:	4b2b      	ldr	r3, [pc, #172]	; (1ac2c <bt_enable+0xf0>)
   1ab80:	601f      	str	r7, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ab82:	460a      	mov	r2, r1
   1ab84:	f506 7090 	add.w	r0, r6, #288	; 0x120
   1ab88:	f016 fafc 	bl	31184 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1ab8c:	f506 70a2 	add.w	r0, r6, #324	; 0x144
   1ab90:	f016 fad7 	bl	31142 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ab94:	2200      	movs	r2, #0
   1ab96:	2300      	movs	r3, #0
   1ab98:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ab9c:	f06f 0308 	mvn.w	r3, #8
   1aba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1aba4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1aba8:	e9cd 4400 	strd	r4, r4, [sp]
   1abac:	4b20      	ldr	r3, [pc, #128]	; (1ac30 <bt_enable+0xf4>)
   1abae:	4921      	ldr	r1, [pc, #132]	; (1ac34 <bt_enable+0xf8>)
   1abb0:	9404      	str	r4, [sp, #16]
   1abb2:	4821      	ldr	r0, [pc, #132]	; (1ac38 <bt_enable+0xfc>)
   1abb4:	f00a fefe 	bl	259b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1abb8:	4920      	ldr	r1, [pc, #128]	; (1ac3c <bt_enable+0x100>)
   1abba:	481f      	ldr	r0, [pc, #124]	; (1ac38 <bt_enable+0xfc>)
   1abbc:	f00a feac 	bl	25918 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1abc0:	481f      	ldr	r0, [pc, #124]	; (1ac40 <bt_enable+0x104>)
   1abc2:	f016 fb9f 	bl	31304 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1abc6:	f06f 0307 	mvn.w	r3, #7
   1abca:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1abce:	491d      	ldr	r1, [pc, #116]	; (1ac44 <bt_enable+0x108>)
   1abd0:	481b      	ldr	r0, [pc, #108]	; (1ac40 <bt_enable+0x104>)
   1abd2:	9400      	str	r4, [sp, #0]
   1abd4:	f00b fa00 	bl	25fd8 <k_work_queue_start>
   1abd8:	491b      	ldr	r1, [pc, #108]	; (1ac48 <bt_enable+0x10c>)
   1abda:	4819      	ldr	r0, [pc, #100]	; (1ac40 <bt_enable+0x104>)
   1abdc:	f00a fe9c 	bl	25918 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1abe0:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
   1abe4:	68db      	ldr	r3, [r3, #12]
   1abe6:	4798      	blx	r3
	if (err) {
   1abe8:	4605      	mov	r5, r0
   1abea:	b158      	cbz	r0, 1ac04 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   1abec:	4b17      	ldr	r3, [pc, #92]	; (1ac4c <bt_enable+0x110>)
   1abee:	9003      	str	r0, [sp, #12]
   1abf0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1abf4:	2201      	movs	r2, #1
   1abf6:	4623      	mov	r3, r4
   1abf8:	4620      	mov	r0, r4
   1abfa:	490b      	ldr	r1, [pc, #44]	; (1ac28 <bt_enable+0xec>)
   1abfc:	9400      	str	r4, [sp, #0]
   1abfe:	f012 fcb4 	bl	2d56a <z_log_msg_runtime_create.constprop.0>
		return err;
   1ac02:	e7ad      	b.n	1ab60 <bt_enable+0x24>
	if (!cb) {
   1ac04:	b927      	cbnz	r7, 1ac10 <bt_enable+0xd4>
}
   1ac06:	b009      	add	sp, #36	; 0x24
   1ac08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   1ac0c:	f7ee bc70 	b.w	94f0 <bt_init>
	k_work_submit(&bt_dev.init);
   1ac10:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   1ac14:	f00b f9da 	bl	25fcc <k_work_submit>
	return 0;
   1ac18:	e7a2      	b.n	1ab60 <bt_enable+0x24>
		return -EALREADY;
   1ac1a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1ac1e:	e79f      	b.n	1ab60 <bt_enable+0x24>
   1ac20:	20008000 	.word	0x20008000
   1ac24:	00036f9d 	.word	0x00036f9d
   1ac28:	00033234 	.word	0x00033234
   1ac2c:	200309f8 	.word	0x200309f8
   1ac30:	0001a869 	.word	0x0001a869
   1ac34:	20053580 	.word	0x20053580
   1ac38:	20009e28 	.word	0x20009e28
   1ac3c:	00036fb6 	.word	0x00036fb6
   1ac40:	20009ed0 	.word	0x20009ed0
   1ac44:	20053980 	.word	0x20053980
   1ac48:	00036fbc 	.word	0x00036fbc
   1ac4c:	00036fc2 	.word	0x00036fc2

0001ac50 <bt_is_ready>:
   1ac50:	4b02      	ldr	r3, [pc, #8]	; (1ac5c <bt_is_ready+0xc>)
   1ac52:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1ac56:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1ac5a:	4770      	bx	lr
   1ac5c:	200080cc 	.word	0x200080cc

0001ac60 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1ac60:	4800      	ldr	r0, [pc, #0]	; (1ac64 <bt_get_name+0x4>)
   1ac62:	4770      	bx	lr
   1ac64:	00034f33 	.word	0x00034f33

0001ac68 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac6a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1ac6c:	2500      	movs	r5, #0
   1ac6e:	4f09      	ldr	r7, [pc, #36]	; (1ac94 <id_find+0x2c>)
   1ac70:	79fb      	ldrb	r3, [r7, #7]
   1ac72:	b2ec      	uxtb	r4, r5
   1ac74:	42a3      	cmp	r3, r4
   1ac76:	d802      	bhi.n	1ac7e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   1ac78:	f06f 0001 	mvn.w	r0, #1
   1ac7c:	e009      	b.n	1ac92 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1ac7e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1ac82:	4630      	mov	r0, r6
   1ac84:	4439      	add	r1, r7
   1ac86:	f012 fd28 	bl	2d6da <bt_addr_le_eq>
   1ac8a:	3501      	adds	r5, #1
   1ac8c:	2800      	cmp	r0, #0
   1ac8e:	d0ef      	beq.n	1ac70 <id_find+0x8>
   1ac90:	4620      	mov	r0, r4
}
   1ac92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ac94:	20008000 	.word	0x20008000

0001ac98 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1ac98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ac9a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1ac9c:	460d      	mov	r5, r1
   1ac9e:	b171      	cbz	r1, 1acbe <id_create.constprop.0+0x26>
   1aca0:	4628      	mov	r0, r5
   1aca2:	4912      	ldr	r1, [pc, #72]	; (1acec <id_create.constprop.0+0x54>)
   1aca4:	f012 fd19 	bl	2d6da <bt_addr_le_eq>
   1aca8:	b948      	cbnz	r0, 1acbe <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1acaa:	4629      	mov	r1, r5
   1acac:	4810      	ldr	r0, [pc, #64]	; (1acf0 <id_create.constprop.0+0x58>)
   1acae:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1acb2:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1acb4:	f012 fd1e 	bl	2d6f4 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1acb8:	2000      	movs	r0, #0
}
   1acba:	b003      	add	sp, #12
   1acbc:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1acbe:	4668      	mov	r0, sp
   1acc0:	f012 fc03 	bl	2d4ca <bt_addr_le_create_static>
			if (err) {
   1acc4:	2800      	cmp	r0, #0
   1acc6:	d1f8      	bne.n	1acba <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   1acc8:	4668      	mov	r0, sp
   1acca:	f7ff ffcd 	bl	1ac68 <id_find>
   1acce:	2800      	cmp	r0, #0
   1acd0:	daf5      	bge.n	1acbe <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1acd2:	4b07      	ldr	r3, [pc, #28]	; (1acf0 <id_create.constprop.0+0x58>)
   1acd4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1acd8:	4669      	mov	r1, sp
   1acda:	4418      	add	r0, r3
   1acdc:	f012 fd0a 	bl	2d6f4 <bt_addr_le_copy>
		if (addr) {
   1ace0:	2d00      	cmp	r5, #0
   1ace2:	d0e9      	beq.n	1acb8 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1ace4:	4601      	mov	r1, r0
   1ace6:	4628      	mov	r0, r5
   1ace8:	e7e4      	b.n	1acb4 <id_create.constprop.0+0x1c>
   1acea:	bf00      	nop
   1acec:	00036982 	.word	0x00036982
   1acf0:	20008000 	.word	0x20008000

0001acf4 <set_random_address>:
{
   1acf4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1acf6:	2206      	movs	r2, #6
   1acf8:	4911      	ldr	r1, [pc, #68]	; (1ad40 <set_random_address+0x4c>)
   1acfa:	4605      	mov	r5, r0
   1acfc:	f016 fe81 	bl	31a02 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1ad00:	b1c8      	cbz	r0, 1ad36 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1ad02:	2106      	movs	r1, #6
   1ad04:	f242 0005 	movw	r0, #8197	; 0x2005
   1ad08:	f7ff f8d8 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1ad0c:	4604      	mov	r4, r0
   1ad0e:	b1a0      	cbz	r0, 1ad3a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ad10:	2206      	movs	r2, #6
   1ad12:	4629      	mov	r1, r5
   1ad14:	300c      	adds	r0, #12
   1ad16:	f014 fc8c 	bl	2f632 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1ad1a:	2200      	movs	r2, #0
   1ad1c:	4621      	mov	r1, r4
   1ad1e:	f242 0005 	movw	r0, #8197	; 0x2005
   1ad22:	f7ff f905 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1ad26:	b938      	cbnz	r0, 1ad38 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   1ad28:	4805      	ldr	r0, [pc, #20]	; (1ad40 <set_random_address+0x4c>)
   1ad2a:	4629      	mov	r1, r5
   1ad2c:	f012 fcdd 	bl	2d6ea <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1ad30:	2301      	movs	r3, #1
   1ad32:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   1ad36:	2000      	movs	r0, #0
}
   1ad38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1ad3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ad3e:	e7fb      	b.n	1ad38 <set_random_address+0x44>
   1ad40:	20008061 	.word	0x20008061

0001ad44 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ad44:	4b08      	ldr	r3, [pc, #32]	; (1ad68 <bt_id_pending_keys_update+0x24>)
   1ad46:	e8d3 2fef 	ldaex	r2, [r3]
   1ad4a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1ad4e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1ad52:	2800      	cmp	r0, #0
   1ad54:	d1f7      	bne.n	1ad46 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1ad56:	0413      	lsls	r3, r2, #16
   1ad58:	d504      	bpl.n	1ad64 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1ad5a:	2200      	movs	r2, #0
   1ad5c:	2002      	movs	r0, #2
   1ad5e:	4903      	ldr	r1, [pc, #12]	; (1ad6c <bt_id_pending_keys_update+0x28>)
   1ad60:	f005 bb28 	b.w	203b4 <bt_keys_foreach_type>
}
   1ad64:	4770      	bx	lr
   1ad66:	bf00      	nop
   1ad68:	200080cc 	.word	0x200080cc
   1ad6c:	0002d8cb 	.word	0x0002d8cb

0001ad70 <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   1ad70:	2300      	movs	r3, #0
{
   1ad72:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1ad74:	4905      	ldr	r1, [pc, #20]	; (1ad8c <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   1ad76:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1ad7a:	466a      	mov	r2, sp
   1ad7c:	2002      	movs	r0, #2
   1ad7e:	f005 fb19 	bl	203b4 <bt_keys_foreach_type>
}
   1ad82:	9801      	ldr	r0, [sp, #4]
   1ad84:	b003      	add	sp, #12
   1ad86:	f85d fb04 	ldr.w	pc, [sp], #4
   1ad8a:	bf00      	nop
   1ad8c:	0002d7ef 	.word	0x0002d7ef

0001ad90 <bt_id_add>:
{
   1ad90:	b5f0      	push	{r4, r5, r6, r7, lr}
	CHECKIF(keys == NULL) {
   1ad92:	4605      	mov	r5, r0
{
   1ad94:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   1ad96:	b170      	cbz	r0, 1adb6 <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1ad98:	4c59      	ldr	r4, [pc, #356]	; (1af00 <bt_id_add+0x170>)
   1ad9a:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1ad9e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ada2:	b10a      	cbz	r2, 1ada8 <bt_id_add+0x18>
   1ada4:	429a      	cmp	r2, r3
   1ada6:	d208      	bcs.n	1adba <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   1ada8:	3301      	adds	r3, #1
   1adaa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1adae:	7a2b      	ldrb	r3, [r5, #8]
   1adb0:	f043 0304 	orr.w	r3, r3, #4
   1adb4:	722b      	strb	r3, [r5, #8]
}
   1adb6:	b007      	add	sp, #28
   1adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1adba:	2100      	movs	r1, #0
   1adbc:	2206      	movs	r2, #6
   1adbe:	4608      	mov	r0, r1
   1adc0:	f001 fc5a 	bl	1c678 <bt_conn_lookup_state_le>
	if (conn) {
   1adc4:	4606      	mov	r6, r0
   1adc6:	b188      	cbz	r0, 1adec <bt_id_add+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1adc8:	34cc      	adds	r4, #204	; 0xcc
   1adca:	e8d4 3fef 	ldaex	r3, [r4]
   1adce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1add2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1add6:	2a00      	cmp	r2, #0
   1add8:	d1f7      	bne.n	1adca <bt_id_add+0x3a>
	keys->state |= flag;
   1adda:	7a2b      	ldrb	r3, [r5, #8]
   1addc:	f043 0301 	orr.w	r3, r3, #1
   1ade0:	722b      	strb	r3, [r5, #8]
}
   1ade2:	b007      	add	sp, #28
   1ade4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1ade8:	f012 bf3f 	b.w	2dc6a <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1adec:	4601      	mov	r1, r0
   1adee:	4845      	ldr	r0, [pc, #276]	; (1af04 <bt_id_add+0x174>)
   1adf0:	f000 fbdc 	bl	1b5ac <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1adf4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1adf8:	b163      	cbz	r3, 1ae14 <bt_id_add+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1adfa:	4630      	mov	r0, r6
   1adfc:	f012 fccc 	bl	2d798 <addr_res_enable>
		if (err) {
   1ae00:	b140      	cbz	r0, 1ae14 <bt_id_add+0x84>
			LOG_WRN("Failed to disable address resolution");
   1ae02:	4b41      	ldr	r3, [pc, #260]	; (1af08 <bt_id_add+0x178>)
   1ae04:	2202      	movs	r2, #2
   1ae06:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ae0a:	4633      	mov	r3, r6
   1ae0c:	9600      	str	r6, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   1ae0e:	4618      	mov	r0, r3
   1ae10:	493e      	ldr	r1, [pc, #248]	; (1af0c <bt_id_add+0x17c>)
   1ae12:	e054      	b.n	1aebe <bt_id_add+0x12e>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1ae14:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   1ae18:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1ae1c:	429a      	cmp	r2, r3
   1ae1e:	d12b      	bne.n	1ae78 <bt_id_add+0xe8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1ae20:	2600      	movs	r6, #0
   1ae22:	4b3b      	ldr	r3, [pc, #236]	; (1af10 <bt_id_add+0x180>)
   1ae24:	2202      	movs	r2, #2
   1ae26:	4630      	mov	r0, r6
   1ae28:	4938      	ldr	r1, [pc, #224]	; (1af0c <bt_id_add+0x17c>)
   1ae2a:	9302      	str	r3, [sp, #8]
   1ae2c:	e9cd 6600 	strd	r6, r6, [sp]
   1ae30:	4633      	mov	r3, r6
   1ae32:	f012 fca2 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1ae36:	4632      	mov	r2, r6
   1ae38:	4631      	mov	r1, r6
   1ae3a:	f242 0029 	movw	r0, #8233	; 0x2029
   1ae3e:	f7ff f877 	bl	19f30 <bt_hci_cmd_send_sync>
		if (err) {
   1ae42:	b130      	cbz	r0, 1ae52 <bt_id_add+0xc2>
			LOG_ERR("Failed to clear resolution list");
   1ae44:	4b33      	ldr	r3, [pc, #204]	; (1af14 <bt_id_add+0x184>)
   1ae46:	9600      	str	r6, [sp, #0]
   1ae48:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ae4c:	4633      	mov	r3, r6
		LOG_ERR("Failed to set privacy mode");
   1ae4e:	2201      	movs	r2, #1
   1ae50:	e7dd      	b.n	1ae0e <bt_id_add+0x7e>
		bt_dev.le.rl_entries++;
   1ae52:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ae56:	3301      	adds	r3, #1
   1ae58:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1ae5c:	7a2b      	ldrb	r3, [r5, #8]
   1ae5e:	f043 0304 	orr.w	r3, r3, #4
   1ae62:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1ae64:	2001      	movs	r0, #1
   1ae66:	f012 fc97 	bl	2d798 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1ae6a:	2100      	movs	r1, #0
   1ae6c:	482a      	ldr	r0, [pc, #168]	; (1af18 <bt_id_add+0x188>)
}
   1ae6e:	b007      	add	sp, #28
   1ae70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1ae74:	f000 bb9a 	b.w	1b5ac <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1ae78:	462a      	mov	r2, r5
   1ae7a:	1c6f      	adds	r7, r5, #1
   1ae7c:	4639      	mov	r1, r7
   1ae7e:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1ae82:	f012 fc3e 	bl	2d702 <hci_id_add>
	if (err) {
   1ae86:	4606      	mov	r6, r0
   1ae88:	b128      	cbz	r0, 1ae96 <bt_id_add+0x106>
		LOG_ERR("Failed to add IRK to controller");
   1ae8a:	4b24      	ldr	r3, [pc, #144]	; (1af1c <bt_id_add+0x18c>)
		LOG_ERR("Failed to set privacy mode");
   1ae8c:	9302      	str	r3, [sp, #8]
   1ae8e:	2300      	movs	r3, #0
   1ae90:	e9cd 3300 	strd	r3, r3, [sp]
   1ae94:	e7db      	b.n	1ae4e <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   1ae96:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1ae9a:	3301      	adds	r3, #1
   1ae9c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1aea0:	7a2b      	ldrb	r3, [r5, #8]
   1aea2:	f043 0304 	orr.w	r3, r3, #4
   1aea6:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1aea8:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   1aeac:	f013 0304 	ands.w	r3, r3, #4
   1aeb0:	d108      	bne.n	1aec4 <bt_id_add+0x134>
		LOG_WRN("Set privacy mode command is not supported");
   1aeb2:	4a1b      	ldr	r2, [pc, #108]	; (1af20 <bt_id_add+0x190>)
   1aeb4:	4915      	ldr	r1, [pc, #84]	; (1af0c <bt_id_add+0x17c>)
   1aeb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1aeba:	2202      	movs	r2, #2
   1aebc:	9300      	str	r3, [sp, #0]
		LOG_ERR("Failed to set privacy mode");
   1aebe:	f012 fc5c 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
		goto done;
   1aec2:	e7cf      	b.n	1ae64 <bt_id_add+0xd4>
	bt_addr_le_copy(&cp.id_addr, addr);
   1aec4:	4639      	mov	r1, r7
   1aec6:	a804      	add	r0, sp, #16
   1aec8:	f012 fc14 	bl	2d6f4 <bt_addr_le_copy>
	cp.mode = mode;
   1aecc:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1aece:	2108      	movs	r1, #8
   1aed0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1aed4:	f88d 3017 	strb.w	r3, [sp, #23]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1aed8:	f7fe fff0 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1aedc:	4604      	mov	r4, r0
   1aede:	b160      	cbz	r0, 1aefa <bt_id_add+0x16a>
   1aee0:	2208      	movs	r2, #8
   1aee2:	a904      	add	r1, sp, #16
   1aee4:	300c      	adds	r0, #12
   1aee6:	f014 fba4 	bl	2f632 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1aeea:	4632      	mov	r2, r6
   1aeec:	4621      	mov	r1, r4
   1aeee:	f242 004e 	movw	r0, #8270	; 0x204e
   1aef2:	f7ff f81d 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1aef6:	2800      	cmp	r0, #0
   1aef8:	d0b4      	beq.n	1ae64 <bt_id_add+0xd4>
		LOG_ERR("Failed to set privacy mode");
   1aefa:	4b0a      	ldr	r3, [pc, #40]	; (1af24 <bt_id_add+0x194>)
   1aefc:	e7c6      	b.n	1ae8c <bt_id_add+0xfc>
   1aefe:	bf00      	nop
   1af00:	20008000 	.word	0x20008000
   1af04:	0002d849 	.word	0x0002d849
   1af08:	00037014 	.word	0x00037014
   1af0c:	0003324c 	.word	0x0003324c
   1af10:	00037039 	.word	0x00037039
   1af14:	0003706a 	.word	0x0003706a
   1af18:	0002d7c9 	.word	0x0002d7c9
   1af1c:	0003708a 	.word	0x0003708a
   1af20:	000370aa 	.word	0x000370aa
   1af24:	000370d4 	.word	0x000370d4

0001af28 <bt_id_del>:
{
   1af28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   1af2c:	4605      	mov	r5, r0
   1af2e:	b348      	cbz	r0, 1af84 <bt_id_del+0x5c>
	if (!bt_dev.le.rl_size ||
   1af30:	4c46      	ldr	r4, [pc, #280]	; (1b04c <bt_id_del+0x124>)
   1af32:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1af36:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   1af3a:	b1da      	cbz	r2, 1af74 <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1af3c:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   1af3e:	4293      	cmp	r3, r2
   1af40:	dc19      	bgt.n	1af76 <bt_id_del+0x4e>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1af42:	2100      	movs	r1, #0
   1af44:	2206      	movs	r2, #6
   1af46:	4608      	mov	r0, r1
   1af48:	f001 fb96 	bl	1c678 <bt_conn_lookup_state_le>
	if (conn) {
   1af4c:	4606      	mov	r6, r0
   1af4e:	b1e0      	cbz	r0, 1af8a <bt_id_del+0x62>
   1af50:	34cc      	adds	r4, #204	; 0xcc
   1af52:	e8d4 3fef 	ldaex	r3, [r4]
   1af56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1af5a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1af5e:	2a00      	cmp	r2, #0
   1af60:	d1f7      	bne.n	1af52 <bt_id_del+0x2a>
	keys->state |= flag;
   1af62:	7a2b      	ldrb	r3, [r5, #8]
   1af64:	f043 0302 	orr.w	r3, r3, #2
   1af68:	722b      	strb	r3, [r5, #8]
}
   1af6a:	b004      	add	sp, #16
   1af6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1af70:	f012 be7b 	b.w	2dc6a <bt_conn_unref>
		if (bt_dev.le.rl_entries > 0) {
   1af74:	b113      	cbz	r3, 1af7c <bt_id_del+0x54>
			bt_dev.le.rl_entries--;
   1af76:	3b01      	subs	r3, #1
   1af78:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1af7c:	7a2b      	ldrb	r3, [r5, #8]
   1af7e:	f023 0304 	bic.w	r3, r3, #4
   1af82:	722b      	strb	r3, [r5, #8]
}
   1af84:	b004      	add	sp, #16
   1af86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1af8a:	4601      	mov	r1, r0
   1af8c:	4830      	ldr	r0, [pc, #192]	; (1b050 <bt_id_del+0x128>)
   1af8e:	f000 fb0d 	bl	1b5ac <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1af92:	4630      	mov	r0, r6
   1af94:	f012 fc00 	bl	2d798 <addr_res_enable>
	if (err) {
   1af98:	4607      	mov	r7, r0
   1af9a:	b1b8      	cbz	r0, 1afcc <bt_id_del+0xa4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1af9c:	4b2d      	ldr	r3, [pc, #180]	; (1b054 <bt_id_del+0x12c>)
   1af9e:	9003      	str	r0, [sp, #12]
   1afa0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1afa4:	2201      	movs	r2, #1
   1afa6:	4633      	mov	r3, r6
   1afa8:	4630      	mov	r0, r6
   1afaa:	492b      	ldr	r1, [pc, #172]	; (1b058 <bt_id_del+0x130>)
   1afac:	9600      	str	r6, [sp, #0]
   1afae:	f012 fbe4 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
	if (bt_dev.le.rl_entries) {
   1afb2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1afb6:	b113      	cbz	r3, 1afbe <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1afb8:	2001      	movs	r0, #1
   1afba:	f012 fbed 	bl	2d798 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1afbe:	2100      	movs	r1, #0
   1afc0:	4826      	ldr	r0, [pc, #152]	; (1b05c <bt_id_del+0x134>)
}
   1afc2:	b004      	add	sp, #16
   1afc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1afc8:	f000 baf0 	b.w	1b5ac <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1afcc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1afd0:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   1afd4:	429a      	cmp	r2, r3
   1afd6:	d20c      	bcs.n	1aff2 <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   1afd8:	3b01      	subs	r3, #1
   1afda:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1afde:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1afe0:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1afe2:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1afe6:	2002      	movs	r0, #2
   1afe8:	491d      	ldr	r1, [pc, #116]	; (1b060 <bt_id_del+0x138>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   1afea:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1afec:	f005 f9e2 	bl	203b4 <bt_keys_foreach_type>
		goto done;
   1aff0:	e7df      	b.n	1afb2 <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   1aff2:	2107      	movs	r1, #7
   1aff4:	f242 0028 	movw	r0, #8232	; 0x2028
   1aff8:	f7fe ff60 	bl	19ebc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1affc:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   1b000:	4606      	mov	r6, r0
   1b002:	b950      	cbnz	r0, 1b01a <bt_id_del+0xf2>
		LOG_ERR("Failed to remove IRK from controller");
   1b004:	4b17      	ldr	r3, [pc, #92]	; (1b064 <bt_id_del+0x13c>)
   1b006:	2201      	movs	r2, #1
   1b008:	9302      	str	r3, [sp, #8]
   1b00a:	2300      	movs	r3, #0
   1b00c:	4912      	ldr	r1, [pc, #72]	; (1b058 <bt_id_del+0x130>)
   1b00e:	4618      	mov	r0, r3
   1b010:	e9cd 3300 	strd	r3, r3, [sp]
   1b014:	f012 fbb1 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
		goto done;
   1b018:	e7cb      	b.n	1afb2 <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
   1b01a:	2107      	movs	r1, #7
   1b01c:	300c      	adds	r0, #12
   1b01e:	f014 fb02 	bl	2f626 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1b022:	4641      	mov	r1, r8
   1b024:	f012 fb66 	bl	2d6f4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1b028:	463a      	mov	r2, r7
   1b02a:	4631      	mov	r1, r6
   1b02c:	f242 0028 	movw	r0, #8232	; 0x2028
   1b030:	f7fe ff7e 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1b034:	2800      	cmp	r0, #0
   1b036:	d1e5      	bne.n	1b004 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   1b038:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1b03c:	3b01      	subs	r3, #1
   1b03e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1b042:	7a2b      	ldrb	r3, [r5, #8]
   1b044:	f023 0304 	bic.w	r3, r3, #4
   1b048:	722b      	strb	r3, [r5, #8]
   1b04a:	e7b2      	b.n	1afb2 <bt_id_del+0x8a>
   1b04c:	20008000 	.word	0x20008000
   1b050:	0002d849 	.word	0x0002d849
   1b054:	000370ef 	.word	0x000370ef
   1b058:	0003324c 	.word	0x0003324c
   1b05c:	0002d7c9 	.word	0x0002d7c9
   1b060:	0002d765 	.word	0x0002d765
   1b064:	0003711c 	.word	0x0003711c

0001b068 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1b068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b06a:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1b06c:	4604      	mov	r4, r0
   1b06e:	b920      	cbnz	r0, 1b07a <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1b070:	b31d      	cbz	r5, 1b0ba <bt_id_create+0x52>
			return -EINVAL;
   1b072:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1b076:	b004      	add	sp, #16
   1b078:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1b07a:	4921      	ldr	r1, [pc, #132]	; (1b100 <bt_id_create+0x98>)
   1b07c:	f012 fb2d 	bl	2d6da <bt_addr_le_eq>
   1b080:	2800      	cmp	r0, #0
   1b082:	d1f5      	bne.n	1b070 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1b084:	7823      	ldrb	r3, [r4, #0]
   1b086:	2b01      	cmp	r3, #1
   1b088:	d104      	bne.n	1b094 <bt_id_create+0x2c>
   1b08a:	79a3      	ldrb	r3, [r4, #6]
   1b08c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b090:	2bc0      	cmp	r3, #192	; 0xc0
   1b092:	d00a      	beq.n	1b0aa <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   1b094:	4b1b      	ldr	r3, [pc, #108]	; (1b104 <bt_id_create+0x9c>)
   1b096:	2201      	movs	r2, #1
   1b098:	9302      	str	r3, [sp, #8]
   1b09a:	2300      	movs	r3, #0
   1b09c:	491a      	ldr	r1, [pc, #104]	; (1b108 <bt_id_create+0xa0>)
   1b09e:	4618      	mov	r0, r3
   1b0a0:	e9cd 3300 	strd	r3, r3, [sp]
   1b0a4:	f012 fb69 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1b0a8:	e7e3      	b.n	1b072 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1b0aa:	4620      	mov	r0, r4
   1b0ac:	f7ff fddc 	bl	1ac68 <id_find>
   1b0b0:	2800      	cmp	r0, #0
   1b0b2:	dbdd      	blt.n	1b070 <bt_id_create+0x8>
			return -EALREADY;
   1b0b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1b0b8:	e7dd      	b.n	1b076 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1b0ba:	4d14      	ldr	r5, [pc, #80]	; (1b10c <bt_id_create+0xa4>)
   1b0bc:	79eb      	ldrb	r3, [r5, #7]
   1b0be:	2b01      	cmp	r3, #1
   1b0c0:	d01a      	beq.n	1b0f8 <bt_id_create+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b0c2:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   1b0c6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1b0ca:	07db      	lsls	r3, r3, #31
   1b0cc:	d50b      	bpl.n	1b0e6 <bt_id_create+0x7e>
	new_id = bt_dev.id_count;
   1b0ce:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1b0d0:	4621      	mov	r1, r4
   1b0d2:	4630      	mov	r0, r6
   1b0d4:	f7ff fde0 	bl	1ac98 <id_create.constprop.0>
	if (err) {
   1b0d8:	2800      	cmp	r0, #0
   1b0da:	d1cc      	bne.n	1b076 <bt_id_create+0xe>
		bt_dev.id_count++;
   1b0dc:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   1b0de:	4630      	mov	r0, r6
		bt_dev.id_count++;
   1b0e0:	3301      	adds	r3, #1
   1b0e2:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1b0e4:	e7c7      	b.n	1b076 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1b0e6:	2c00      	cmp	r4, #0
   1b0e8:	d0c3      	beq.n	1b072 <bt_id_create+0xa>
   1b0ea:	4620      	mov	r0, r4
   1b0ec:	4904      	ldr	r1, [pc, #16]	; (1b100 <bt_id_create+0x98>)
   1b0ee:	f012 faf4 	bl	2d6da <bt_addr_le_eq>
   1b0f2:	2800      	cmp	r0, #0
   1b0f4:	d0eb      	beq.n	1b0ce <bt_id_create+0x66>
   1b0f6:	e7bc      	b.n	1b072 <bt_id_create+0xa>
		return -ENOMEM;
   1b0f8:	f06f 000b 	mvn.w	r0, #11
   1b0fc:	e7bb      	b.n	1b076 <bt_id_create+0xe>
   1b0fe:	bf00      	nop
   1b100:	00036982 	.word	0x00036982
   1b104:	00037141 	.word	0x00037141
   1b108:	0003324c 	.word	0x0003324c
   1b10c:	20008000 	.word	0x20008000

0001b110 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1b110:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1b112:	4604      	mov	r4, r0
{
   1b114:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   1b116:	b958      	cbnz	r0, 1b130 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   1b118:	4b1d      	ldr	r3, [pc, #116]	; (1b190 <bt_id_read_public_addr+0x80>)
   1b11a:	2202      	movs	r2, #2
   1b11c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1b120:	4603      	mov	r3, r0
   1b122:	491c      	ldr	r1, [pc, #112]	; (1b194 <bt_id_read_public_addr+0x84>)
   1b124:	9000      	str	r0, [sp, #0]
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1b126:	f012 fb28 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
		return 0U;
   1b12a:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1b12c:	b006      	add	sp, #24
   1b12e:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1b130:	2100      	movs	r1, #0
   1b132:	f241 0009 	movw	r0, #4105	; 0x1009
   1b136:	aa05      	add	r2, sp, #20
   1b138:	f7fe fefa 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1b13c:	4606      	mov	r6, r0
   1b13e:	b140      	cbz	r0, 1b152 <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   1b140:	4b15      	ldr	r3, [pc, #84]	; (1b198 <bt_id_read_public_addr+0x88>)
   1b142:	2202      	movs	r2, #2
   1b144:	9302      	str	r3, [sp, #8]
   1b146:	2300      	movs	r3, #0
   1b148:	4912      	ldr	r1, [pc, #72]	; (1b194 <bt_id_read_public_addr+0x84>)
   1b14a:	4618      	mov	r0, r3
   1b14c:	e9cd 3300 	strd	r3, r3, [sp]
   1b150:	e7e9      	b.n	1b126 <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   1b152:	9b05      	ldr	r3, [sp, #20]
   1b154:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1b156:	68dd      	ldr	r5, [r3, #12]
   1b158:	4910      	ldr	r1, [pc, #64]	; (1b19c <bt_id_read_public_addr+0x8c>)
   1b15a:	3501      	adds	r5, #1
   1b15c:	4628      	mov	r0, r5
   1b15e:	f016 fc50 	bl	31a02 <memcmp>
   1b162:	b918      	cbnz	r0, 1b16c <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   1b164:	9805      	ldr	r0, [sp, #20]
   1b166:	f005 fb13 	bl	20790 <net_buf_unref>
		return 0U;
   1b16a:	e7de      	b.n	1b12a <bt_id_read_public_addr+0x1a>
   1b16c:	2206      	movs	r2, #6
   1b16e:	4628      	mov	r0, r5
   1b170:	490b      	ldr	r1, [pc, #44]	; (1b1a0 <bt_id_read_public_addr+0x90>)
   1b172:	f016 fc46 	bl	31a02 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1b176:	2800      	cmp	r0, #0
   1b178:	d0f4      	beq.n	1b164 <bt_id_read_public_addr+0x54>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   1b17a:	4629      	mov	r1, r5
   1b17c:	1c60      	adds	r0, r4, #1
   1b17e:	f012 fab4 	bl	2d6ea <bt_addr_copy>
	net_buf_unref(rsp);
   1b182:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   1b184:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1b186:	f005 fb03 	bl	20790 <net_buf_unref>
	return 1U;
   1b18a:	2001      	movs	r0, #1
   1b18c:	e7ce      	b.n	1b12c <bt_id_read_public_addr+0x1c>
   1b18e:	bf00      	nop
   1b190:	0003716f 	.word	0x0003716f
   1b194:	0003324c 	.word	0x0003324c
   1b198:	00037188 	.word	0x00037188
   1b19c:	0003698f 	.word	0x0003698f
   1b1a0:	00036989 	.word	0x00036989

0001b1a4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1b1a4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1b1a6:	4668      	mov	r0, sp
   1b1a8:	f7ff ffb2 	bl	1b110 <bt_id_read_public_addr>
   1b1ac:	4b04      	ldr	r3, [pc, #16]	; (1b1c0 <bt_setup_public_id_addr+0x1c>)
   1b1ae:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1b1b0:	b118      	cbz	r0, 1b1ba <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1b1b2:	4669      	mov	r1, sp
   1b1b4:	2000      	movs	r0, #0
   1b1b6:	f7ff fd6f 	bl	1ac98 <id_create.constprop.0>
}
   1b1ba:	b003      	add	sp, #12
   1b1bc:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1c0:	20008000 	.word	0x20008000

0001b1c4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1b1c6:	4b25      	ldr	r3, [pc, #148]	; (1b25c <bt_read_static_addr+0x98>)
{
   1b1c8:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1b1ca:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   1b1ce:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1b1d0:	f013 0301 	ands.w	r3, r3, #1
{
   1b1d4:	b087      	sub	sp, #28
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1b1d6:	d10c      	bne.n	1b1f2 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   1b1d8:	4a21      	ldr	r2, [pc, #132]	; (1b260 <bt_read_static_addr+0x9c>)
   1b1da:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1b1dc:	2202      	movs	r2, #2
   1b1de:	4618      	mov	r0, r3
   1b1e0:	e9cd 3300 	strd	r3, r3, [sp]
   1b1e4:	491f      	ldr	r1, [pc, #124]	; (1b264 <bt_read_static_addr+0xa0>)
   1b1e6:	f012 fac8 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
		return 0;
   1b1ea:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1b1ec:	4620      	mov	r0, r4
   1b1ee:	b007      	add	sp, #28
   1b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1b1f2:	2100      	movs	r1, #0
   1b1f4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1b1f8:	aa05      	add	r2, sp, #20
   1b1fa:	f7fe fe99 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1b1fe:	4603      	mov	r3, r0
   1b200:	b118      	cbz	r0, 1b20a <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1b202:	4b19      	ldr	r3, [pc, #100]	; (1b268 <bt_read_static_addr+0xa4>)
   1b204:	9302      	str	r3, [sp, #8]
   1b206:	2300      	movs	r3, #0
   1b208:	e7e8      	b.n	1b1dc <bt_read_static_addr+0x18>
	rp = (void *)rsp->data;
   1b20a:	9805      	ldr	r0, [sp, #20]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1b20c:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   1b20e:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   1b210:	7854      	ldrb	r4, [r2, #1]
   1b212:	3202      	adds	r2, #2
   1b214:	42b4      	cmp	r4, r6
   1b216:	bf28      	it	cs
   1b218:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   1b21a:	429c      	cmp	r4, r3
   1b21c:	dc0e      	bgt.n	1b23c <bt_read_static_addr+0x78>
	net_buf_unref(rsp);
   1b21e:	f005 fab7 	bl	20790 <net_buf_unref>
	if (!cnt) {
   1b222:	2c00      	cmp	r4, #0
   1b224:	d1e2      	bne.n	1b1ec <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   1b226:	4b11      	ldr	r3, [pc, #68]	; (1b26c <bt_read_static_addr+0xa8>)
   1b228:	2202      	movs	r2, #2
   1b22a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1b22e:	4620      	mov	r0, r4
   1b230:	4623      	mov	r3, r4
   1b232:	490c      	ldr	r1, [pc, #48]	; (1b264 <bt_read_static_addr+0xa0>)
   1b234:	9400      	str	r4, [sp, #0]
   1b236:	f012 faa0 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
   1b23a:	e7d7      	b.n	1b1ec <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b23c:	4611      	mov	r1, r2
   1b23e:	fb07 5603 	mla	r6, r7, r3, r5
   1b242:	f102 0c14 	add.w	ip, r2, #20
   1b246:	f851 eb04 	ldr.w	lr, [r1], #4
   1b24a:	4561      	cmp	r1, ip
   1b24c:	f846 eb04 	str.w	lr, [r6], #4
   1b250:	d1f9      	bne.n	1b246 <bt_read_static_addr+0x82>
   1b252:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   1b254:	3301      	adds	r3, #1
   1b256:	8031      	strh	r1, [r6, #0]
   1b258:	3216      	adds	r2, #22
   1b25a:	e7de      	b.n	1b21a <bt_read_static_addr+0x56>
   1b25c:	20008000 	.word	0x20008000
   1b260:	000371a6 	.word	0x000371a6
   1b264:	0003324c 	.word	0x0003324c
   1b268:	000371d2 	.word	0x000371d2
   1b26c:	000371f2 	.word	0x000371f2

0001b270 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1b270:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1b272:	4d15      	ldr	r5, [pc, #84]	; (1b2c8 <bt_setup_random_id_addr+0x58>)
{
   1b274:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1b276:	79ec      	ldrb	r4, [r5, #7]
   1b278:	b92c      	cbnz	r4, 1b286 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1b27a:	2101      	movs	r1, #1
   1b27c:	a802      	add	r0, sp, #8
   1b27e:	f7ff ffa1 	bl	1b1c4 <bt_read_static_addr>
   1b282:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1b284:	b9c0      	cbnz	r0, 1b2b8 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1b286:	2100      	movs	r1, #0
   1b288:	4608      	mov	r0, r1
}
   1b28a:	b008      	add	sp, #32
   1b28c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   1b290:	f7ff beea 	b.w	1b068 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1b294:	ab02      	add	r3, sp, #8
   1b296:	fb06 3102 	mla	r1, r6, r2, r3
   1b29a:	f10d 0001 	add.w	r0, sp, #1
   1b29e:	f012 fa24 	bl	2d6ea <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1b2a2:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1b2a4:	4669      	mov	r1, sp
   1b2a6:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1b2a8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1b2ac:	f7ff fcf4 	bl	1ac98 <id_create.constprop.0>
				if (err) {
   1b2b0:	3401      	adds	r4, #1
   1b2b2:	b110      	cbz	r0, 1b2ba <bt_setup_random_id_addr+0x4a>
}
   1b2b4:	b008      	add	sp, #32
   1b2b6:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1b2b8:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1b2ba:	79eb      	ldrb	r3, [r5, #7]
   1b2bc:	b2e2      	uxtb	r2, r4
   1b2be:	4293      	cmp	r3, r2
   1b2c0:	d8e8      	bhi.n	1b294 <bt_setup_random_id_addr+0x24>
			return 0;
   1b2c2:	2000      	movs	r0, #0
   1b2c4:	e7f6      	b.n	1b2b4 <bt_setup_random_id_addr+0x44>
   1b2c6:	bf00      	nop
   1b2c8:	20008000 	.word	0x20008000

0001b2cc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1b2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2d0:	4690      	mov	r8, r2
   1b2d2:	460e      	mov	r6, r1
   1b2d4:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1b2d6:	4602      	mov	r2, r0
   1b2d8:	2800      	cmp	r0, #0
   1b2da:	d04b      	beq.n	1b374 <bt_id_set_adv_own_addr+0xa8>
   1b2dc:	2b00      	cmp	r3, #0
   1b2de:	d049      	beq.n	1b374 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b2e0:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1b2e2:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b2e4:	d531      	bpl.n	1b34a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1b2e6:	4f25      	ldr	r7, [pc, #148]	; (1b37c <bt_id_set_adv_own_addr+0xb0>)
   1b2e8:	f1b8 0f00 	cmp.w	r8, #0
   1b2ec:	d013      	beq.n	1b316 <bt_id_set_adv_own_addr+0x4a>
   1b2ee:	0688      	lsls	r0, r1, #26
   1b2f0:	d40a      	bmi.n	1b308 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b2f2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1b2f6:	5cfb      	ldrb	r3, [r7, r3]
   1b2f8:	2b01      	cmp	r3, #1
   1b2fa:	d015      	beq.n	1b328 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1b2fc:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1b2fe:	06b2      	lsls	r2, r6, #26
   1b300:	d50f      	bpl.n	1b322 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1b302:	f043 0302 	orr.w	r3, r3, #2
   1b306:	e00b      	b.n	1b320 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1b308:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   1b30c:	0659      	lsls	r1, r3, #25
   1b30e:	d4f0      	bmi.n	1b2f2 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   1b310:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b314:	e006      	b.n	1b324 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b316:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1b31a:	5cfb      	ldrb	r3, [r7, r3]
   1b31c:	2b01      	cmp	r3, #1
   1b31e:	d003      	beq.n	1b328 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   1b320:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1b322:	2000      	movs	r0, #0
}
   1b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1b328:	2107      	movs	r1, #7
   1b32a:	fb01 7104 	mla	r1, r1, r4, r7
   1b32e:	4610      	mov	r0, r2
   1b330:	3101      	adds	r1, #1
   1b332:	f012 faa7 	bl	2d884 <bt_id_set_adv_random_addr>
				if (err) {
   1b336:	2800      	cmp	r0, #0
   1b338:	d1f4      	bne.n	1b324 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   1b33a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1b33e:	5d3b      	ldrb	r3, [r7, r4]
   1b340:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1b342:	f1b8 0f00 	cmp.w	r8, #0
   1b346:	d0ec      	beq.n	1b322 <bt_id_set_adv_own_addr+0x56>
   1b348:	e7d9      	b.n	1b2fe <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1b34a:	074b      	lsls	r3, r1, #29
   1b34c:	d50e      	bpl.n	1b36c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1b34e:	4e0b      	ldr	r6, [pc, #44]	; (1b37c <bt_id_set_adv_own_addr+0xb0>)
   1b350:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1b354:	5df3      	ldrb	r3, [r6, r7]
   1b356:	2b01      	cmp	r3, #1
   1b358:	d1e2      	bne.n	1b320 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1b35a:	2107      	movs	r1, #7
   1b35c:	fb11 3104 	smlabb	r1, r1, r4, r3
   1b360:	4431      	add	r1, r6
   1b362:	f012 fa8f 	bl	2d884 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1b366:	5df3      	ldrb	r3, [r6, r7]
   1b368:	702b      	strb	r3, [r5, #0]
		if (err) {
   1b36a:	e7db      	b.n	1b324 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   1b36c:	f012 fa92 	bl	2d894 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1b370:	2301      	movs	r3, #1
   1b372:	e7f9      	b.n	1b368 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   1b374:	f06f 0015 	mvn.w	r0, #21
   1b378:	e7d4      	b.n	1b324 <bt_id_set_adv_own_addr+0x58>
   1b37a:	bf00      	nop
   1b37c:	20008000 	.word	0x20008000

0001b380 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1b380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b382:	4e13      	ldr	r6, [pc, #76]	; (1b3d0 <bt_id_init+0x50>)
   1b384:	79f5      	ldrb	r5, [r6, #7]
   1b386:	b11d      	cbz	r5, 1b390 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1b388:	2400      	movs	r4, #0
}
   1b38a:	4620      	mov	r0, r4
   1b38c:	b004      	add	sp, #16
   1b38e:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   1b390:	f7ff ff08 	bl	1b1a4 <bt_setup_public_id_addr>
		if (err) {
   1b394:	4604      	mov	r4, r0
   1b396:	b150      	cbz	r0, 1b3ae <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   1b398:	4b0e      	ldr	r3, [pc, #56]	; (1b3d4 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   1b39a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1b39e:	2201      	movs	r2, #1
   1b3a0:	462b      	mov	r3, r5
   1b3a2:	4628      	mov	r0, r5
   1b3a4:	490c      	ldr	r1, [pc, #48]	; (1b3d8 <bt_id_init+0x58>)
   1b3a6:	9500      	str	r5, [sp, #0]
   1b3a8:	f012 f9e7 	bl	2d77a <z_log_msg_runtime_create.constprop.0>
			return err;
   1b3ac:	e7ed      	b.n	1b38a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1b3ae:	79f5      	ldrb	r5, [r6, #7]
   1b3b0:	2d00      	cmp	r5, #0
   1b3b2:	d1e9      	bne.n	1b388 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1b3b4:	f7ff ff5c 	bl	1b270 <bt_setup_random_id_addr>
		if (err) {
   1b3b8:	4604      	mov	r4, r0
   1b3ba:	2800      	cmp	r0, #0
   1b3bc:	d1ec      	bne.n	1b398 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1b3be:	1c70      	adds	r0, r6, #1
   1b3c0:	f7ff fc98 	bl	1acf4 <set_random_address>
		if (err) {
   1b3c4:	4604      	mov	r4, r0
   1b3c6:	2800      	cmp	r0, #0
   1b3c8:	d0de      	beq.n	1b388 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   1b3ca:	4b04      	ldr	r3, [pc, #16]	; (1b3dc <bt_id_init+0x5c>)
   1b3cc:	e7e5      	b.n	1b39a <bt_id_init+0x1a>
   1b3ce:	bf00      	nop
   1b3d0:	20008000 	.word	0x20008000
   1b3d4:	0003721b 	.word	0x0003721b
   1b3d8:	0003324c 	.word	0x0003324c
   1b3dc:	0003723a 	.word	0x0003723a

0001b3e0 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e4:	460c      	mov	r4, r1
   1b3e6:	b087      	sub	sp, #28
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b3e8:	2120      	movs	r1, #32
{
   1b3ea:	4692      	mov	sl, r2
   1b3ec:	9004      	str	r0, [sp, #16]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1b3ee:	f7fe fd65 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1b3f2:	4605      	mov	r5, r0
   1b3f4:	2800      	cmp	r0, #0
   1b3f6:	d05a      	beq.n	1b4ae <hci_set_ad+0xce>
   1b3f8:	2120      	movs	r1, #32
   1b3fa:	300c      	adds	r0, #12
   1b3fc:	f014 f913 	bl	2f626 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   1b400:	2220      	movs	r2, #32
   1b402:	4681      	mov	r9, r0
   1b404:	2100      	movs	r1, #0
   1b406:	f016 fb46 	bl	31a96 <memset>
	uint8_t set_data_len = 0;
   1b40a:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1b40c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1b410:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   1b414:	2300      	movs	r3, #0
   1b416:	f8d4 8000 	ldr.w	r8, [r4]
   1b41a:	6862      	ldr	r2, [r4, #4]
   1b41c:	4293      	cmp	r3, r2
   1b41e:	d30c      	bcc.n	1b43a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   1b420:	3408      	adds	r4, #8
   1b422:	45a2      	cmp	sl, r4
   1b424:	d1f6      	bne.n	1b414 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b426:	2200      	movs	r2, #0
   1b428:	4629      	mov	r1, r5
   1b42a:	9804      	ldr	r0, [sp, #16]
	*data_len = set_data_len;
   1b42c:	f889 6000 	strb.w	r6, [r9]
}
   1b430:	b007      	add	sp, #28
   1b432:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1b436:	f7fe bd7b 	b.w	19f30 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1b43a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1b43e:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b440:	1811      	adds	r1, r2, r0
   1b442:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   1b444:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1b448:	d91a      	bls.n	1b480 <hci_set_ad+0xa0>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b44a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1b44e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1b452:	d101      	bne.n	1b458 <hci_set_ad+0x78>
   1b454:	2a00      	cmp	r2, #0
   1b456:	dc11      	bgt.n	1b47c <hci_set_ad+0x9c>
					LOG_ERR("Too big advertising data");
   1b458:	4b16      	ldr	r3, [pc, #88]	; (1b4b4 <hci_set_ad+0xd4>)
   1b45a:	2201      	movs	r2, #1
   1b45c:	9302      	str	r3, [sp, #8]
   1b45e:	2300      	movs	r3, #0
   1b460:	4915      	ldr	r1, [pc, #84]	; (1b4b8 <hci_set_ad+0xd8>)
   1b462:	4618      	mov	r0, r3
   1b464:	e9cd 3300 	strd	r3, r3, [sp]
   1b468:	f012 fa63 	bl	2d932 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1b46c:	4628      	mov	r0, r5
   1b46e:	f005 f98f 	bl	20790 <net_buf_unref>
					return -EINVAL;
   1b472:	f06f 0015 	mvn.w	r0, #21
}
   1b476:	b007      	add	sp, #28
   1b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1b47c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1b480:	b2d7      	uxtb	r7, r2
   1b482:	1c79      	adds	r1, r7, #1
   1b484:	f80b 1006 	strb.w	r1, [fp, r6]
   1b488:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1b48a:	b2c9      	uxtb	r1, r1
   1b48c:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b490:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b494:	fa5b f080 	uxtab	r0, fp, r0
   1b498:	9305      	str	r3, [sp, #20]
			set_data_len += len;
   1b49a:	3702      	adds	r7, #2
   1b49c:	f016 fac1 	bl	31a22 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1b4a0:	9b05      	ldr	r3, [sp, #20]
			set_data_len += len;
   1b4a2:	4437      	add	r7, r6
   1b4a4:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   1b4a6:	3301      	adds	r3, #1
   1b4a8:	f108 0808 	add.w	r8, r8, #8
   1b4ac:	e7b5      	b.n	1b41a <hci_set_ad+0x3a>
		return -ENOBUFS;
   1b4ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b4b2:	e7e0      	b.n	1b476 <hci_set_ad+0x96>
   1b4b4:	0003725d 	.word	0x0003725d
   1b4b8:	00033204 	.word	0x00033204

0001b4bc <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1b4bc:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1b4be:	4605      	mov	r5, r0
   1b4c0:	4b16      	ldr	r3, [pc, #88]	; (1b51c <le_adv_start_add_conn+0x60>)
   1b4c2:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   1b4c6:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   1b4c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   1b4cc:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   1b4ce:	2207      	movs	r2, #7
   1b4d0:	4628      	mov	r0, r5
   1b4d2:	4913      	ldr	r1, [pc, #76]	; (1b520 <le_adv_start_add_conn+0x64>)
   1b4d4:	f016 fa95 	bl	31a02 <memcmp>
   1b4d8:	4603      	mov	r3, r0
   1b4da:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1b4dc:	b96b      	cbnz	r3, 1b4fa <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1b4de:	4911      	ldr	r1, [pc, #68]	; (1b524 <le_adv_start_add_conn+0x68>)
   1b4e0:	f001 f86c 	bl	1c5bc <bt_conn_add_le>
		if (!conn) {
   1b4e4:	4604      	mov	r4, r0
   1b4e6:	b910      	cbnz	r0, 1b4ee <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   1b4e8:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1b4ec:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1b4ee:	2104      	movs	r1, #4
   1b4f0:	f000 fe84 	bl	1c1fc <bt_conn_set_state>
		return 0;
   1b4f4:	2000      	movs	r0, #0
		*out_conn = conn;
   1b4f6:	6034      	str	r4, [r6, #0]
   1b4f8:	e7f8      	b.n	1b4ec <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1b4fa:	4629      	mov	r1, r5
   1b4fc:	f001 f896 	bl	1c62c <bt_conn_exists_le>
   1b500:	b940      	cbnz	r0, 1b514 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1b502:	7820      	ldrb	r0, [r4, #0]
   1b504:	4629      	mov	r1, r5
   1b506:	f001 f859 	bl	1c5bc <bt_conn_add_le>
	if (!conn) {
   1b50a:	4604      	mov	r4, r0
   1b50c:	2800      	cmp	r0, #0
   1b50e:	d0eb      	beq.n	1b4e8 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1b510:	2105      	movs	r1, #5
   1b512:	e7ed      	b.n	1b4f0 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1b514:	f06f 0015 	mvn.w	r0, #21
   1b518:	e7e8      	b.n	1b4ec <le_adv_start_add_conn+0x30>
   1b51a:	bf00      	nop
   1b51c:	20008000 	.word	0x20008000
   1b520:	00036982 	.word	0x00036982
   1b524:	0003697b 	.word	0x0003697b

0001b528 <valid_adv_param>:
{
   1b528:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1b52a:	6843      	ldr	r3, [r0, #4]
{
   1b52c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1b52e:	0558      	lsls	r0, r3, #21
   1b530:	d501      	bpl.n	1b536 <valid_adv_param+0xe>
		return false;
   1b532:	2000      	movs	r0, #0
}
   1b534:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b536:	6922      	ldr	r2, [r4, #16]
   1b538:	b10a      	cbz	r2, 1b53e <valid_adv_param+0x16>
   1b53a:	07d9      	lsls	r1, r3, #31
   1b53c:	d5f9      	bpl.n	1b532 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   1b53e:	4d19      	ldr	r5, [pc, #100]	; (1b5a4 <valid_adv_param+0x7c>)
   1b540:	7820      	ldrb	r0, [r4, #0]
   1b542:	79eb      	ldrb	r3, [r5, #7]
   1b544:	4283      	cmp	r3, r0
   1b546:	d9f4      	bls.n	1b532 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1b548:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1b54c:	2207      	movs	r2, #7
   1b54e:	4916      	ldr	r1, [pc, #88]	; (1b5a8 <valid_adv_param+0x80>)
   1b550:	4428      	add	r0, r5
   1b552:	f016 fa56 	bl	31a02 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1b556:	2800      	cmp	r0, #0
   1b558:	d0eb      	beq.n	1b532 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b55a:	6860      	ldr	r0, [r4, #4]
   1b55c:	07c2      	lsls	r2, r0, #31
   1b55e:	d406      	bmi.n	1b56e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1b560:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1b564:	2b08      	cmp	r3, #8
   1b566:	d802      	bhi.n	1b56e <valid_adv_param+0x46>
   1b568:	68a3      	ldr	r3, [r4, #8]
   1b56a:	2b9f      	cmp	r3, #159	; 0x9f
   1b56c:	d9e1      	bls.n	1b532 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1b56e:	f010 0f30 	tst.w	r0, #48	; 0x30
   1b572:	d002      	beq.n	1b57a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1b574:	6923      	ldr	r3, [r4, #16]
   1b576:	2b00      	cmp	r3, #0
   1b578:	d0db      	beq.n	1b532 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1b57a:	06c3      	lsls	r3, r0, #27
   1b57c:	d401      	bmi.n	1b582 <valid_adv_param+0x5a>
   1b57e:	6923      	ldr	r3, [r4, #16]
   1b580:	b943      	cbnz	r3, 1b594 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1b582:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1b586:	429a      	cmp	r2, r3
   1b588:	d8d3      	bhi.n	1b532 <valid_adv_param+0xa>
   1b58a:	2a1f      	cmp	r2, #31
   1b58c:	d9d1      	bls.n	1b532 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1b58e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1b592:	d8ce      	bhi.n	1b532 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1b594:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1b598:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1b59c:	bf18      	it	ne
   1b59e:	2001      	movne	r0, #1
   1b5a0:	e7c8      	b.n	1b534 <valid_adv_param+0xc>
   1b5a2:	bf00      	nop
   1b5a4:	20008000 	.word	0x20008000
   1b5a8:	00036982 	.word	0x00036982

0001b5ac <bt_le_ext_adv_foreach>:
{
   1b5ac:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1b5ae:	4801      	ldr	r0, [pc, #4]	; (1b5b4 <bt_le_ext_adv_foreach+0x8>)
   1b5b0:	4718      	bx	r3
   1b5b2:	bf00      	nop
   1b5b4:	20008018 	.word	0x20008018

0001b5b8 <bt_le_adv_lookup_legacy>:
}
   1b5b8:	4800      	ldr	r0, [pc, #0]	; (1b5bc <bt_le_adv_lookup_legacy+0x4>)
   1b5ba:	4770      	bx	lr
   1b5bc:	20008018 	.word	0x20008018

0001b5c0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5c4:	b08d      	sub	sp, #52	; 0x34
   1b5c6:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1b5c8:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b5ca:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1b5ce:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b5d0:	ebba 0403 	subs.w	r4, sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b5d4:	4890      	ldr	r0, [pc, #576]	; (1b818 <bt_le_adv_start_legacy+0x258>)
   1b5d6:	bf18      	it	ne
   1b5d8:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   1b5da:	9307      	str	r3, [sp, #28]
   1b5dc:	f012 f994 	bl	2d908 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b5e0:	0747      	lsls	r7, r0, #29
{
   1b5e2:	460d      	mov	r5, r1
   1b5e4:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b5e6:	f140 810d 	bpl.w	1b804 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1b5ea:	4608      	mov	r0, r1
   1b5ec:	f7ff ff9c 	bl	1b528 <valid_adv_param>
   1b5f0:	b928      	cbnz	r0, 1b5fe <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1b5f2:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1b5f6:	4620      	mov	r0, r4
   1b5f8:	b00d      	add	sp, #52	; 0x34
   1b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1b5fe:	4628      	mov	r0, r5
   1b600:	f012 f95f 	bl	2d8c2 <bt_id_adv_random_addr_check>
   1b604:	4681      	mov	r9, r0
   1b606:	2800      	cmp	r0, #0
   1b608:	d0f3      	beq.n	1b5f2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b60a:	f106 0810 	add.w	r8, r6, #16
   1b60e:	4640      	mov	r0, r8
   1b610:	f012 f97a 	bl	2d908 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1b614:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   1b618:	0600      	lsls	r0, r0, #24
   1b61a:	f100 80f6 	bmi.w	1b80a <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1b61e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1b622:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1b626:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b628:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1b62a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1b62e:	68eb      	ldr	r3, [r5, #12]
   1b630:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b634:	f012 f959 	bl	2d8ea <get_adv_channel_map>
	if (adv->id != param->id) {
   1b638:	7832      	ldrb	r2, [r6, #0]
   1b63a:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1b63c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1b640:	429a      	cmp	r2, r3
   1b642:	d004      	beq.n	1b64e <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b644:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1b648:	4873      	ldr	r0, [pc, #460]	; (1b818 <bt_le_adv_start_legacy+0x258>)
   1b64a:	f012 f960 	bl	2d90e <atomic_and>
	adv->id = param->id;
   1b64e:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1b650:	4a72      	ldr	r2, [pc, #456]	; (1b81c <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   1b652:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1b654:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1b658:	4630      	mov	r0, r6
   1b65a:	4622      	mov	r2, r4
   1b65c:	6869      	ldr	r1, [r5, #4]
   1b65e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1b662:	f7ff fe33 	bl	1b2cc <bt_id_set_adv_own_addr>
	if (err) {
   1b666:	4604      	mov	r4, r0
   1b668:	2800      	cmp	r0, #0
   1b66a:	d1c4      	bne.n	1b5f6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1b66c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   1b670:	f1ba 0f00 	cmp.w	sl, #0
   1b674:	d013      	beq.n	1b69e <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1b676:	6929      	ldr	r1, [r5, #16]
   1b678:	f012 f954 	bl	2d924 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1b67c:	4628      	mov	r0, r5
   1b67e:	f012 f9ec 	bl	2da5a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b682:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1b684:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b686:	07d9      	lsls	r1, r3, #31
   1b688:	d416      	bmi.n	1b6b8 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1b68a:	059b      	lsls	r3, r3, #22
   1b68c:	d403      	bmi.n	1b696 <bt_le_adv_start_legacy+0xd6>
   1b68e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b690:	b90b      	cbnz	r3, 1b696 <bt_le_adv_start_legacy+0xd6>
   1b692:	2f02      	cmp	r7, #2
   1b694:	d159      	bne.n	1b74a <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1b696:	2302      	movs	r3, #2
   1b698:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b69c:	e019      	b.n	1b6d2 <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1b69e:	4960      	ldr	r1, [pc, #384]	; (1b820 <bt_le_adv_start_legacy+0x260>)
   1b6a0:	f012 f940 	bl	2d924 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   1b6a4:	4628      	mov	r0, r5
   1b6a6:	f012 f9d8 	bl	2da5a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b6aa:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   1b6ac:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1b6ae:	07da      	lsls	r2, r3, #31
   1b6b0:	d5eb      	bpl.n	1b68a <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1b6b2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1b6b6:	e00c      	b.n	1b6d2 <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1b6b8:	f013 0f10 	tst.w	r3, #16
   1b6bc:	bf0c      	ite	eq
   1b6be:	2301      	moveq	r3, #1
   1b6c0:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1b6c2:	6929      	ldr	r1, [r5, #16]
   1b6c4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1b6c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b6cc:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1b6ce:	f012 f929 	bl	2d924 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1b6d2:	210f      	movs	r1, #15
   1b6d4:	f242 0006 	movw	r0, #8198	; 0x2006
   1b6d8:	f7fe fbf0 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1b6dc:	4604      	mov	r4, r0
   1b6de:	2800      	cmp	r0, #0
   1b6e0:	f000 8096 	beq.w	1b810 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b6e4:	220f      	movs	r2, #15
   1b6e6:	a908      	add	r1, sp, #32
   1b6e8:	300c      	adds	r0, #12
   1b6ea:	f013 ffa2 	bl	2f632 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1b6ee:	4621      	mov	r1, r4
   1b6f0:	2200      	movs	r2, #0
   1b6f2:	f242 0006 	movw	r0, #8198	; 0x2006
   1b6f6:	f7fe fc1b 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1b6fa:	4604      	mov	r4, r0
   1b6fc:	2800      	cmp	r0, #0
   1b6fe:	f47f af7a 	bne.w	1b5f6 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1b702:	f1ba 0f00 	cmp.w	sl, #0
   1b706:	d026      	beq.n	1b756 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1b708:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b70a:	07dc      	lsls	r4, r3, #31
   1b70c:	d431      	bmi.n	1b772 <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b70e:	4630      	mov	r0, r6
   1b710:	2101      	movs	r1, #1
   1b712:	f012 f9b2 	bl	2da7a <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b716:	9e07      	ldr	r6, [sp, #28]
	if (err) {
   1b718:	4604      	mov	r4, r0
   1b71a:	2800      	cmp	r0, #0
   1b71c:	d06a      	beq.n	1b7f4 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   1b71e:	2500      	movs	r5, #0
   1b720:	4b40      	ldr	r3, [pc, #256]	; (1b824 <bt_le_adv_start_legacy+0x264>)
   1b722:	2201      	movs	r2, #1
   1b724:	9302      	str	r3, [sp, #8]
   1b726:	4628      	mov	r0, r5
   1b728:	462b      	mov	r3, r5
   1b72a:	e9cd 5500 	strd	r5, r5, [sp]
   1b72e:	493e      	ldr	r1, [pc, #248]	; (1b828 <bt_le_adv_start_legacy+0x268>)
   1b730:	f012 f8ff 	bl	2d932 <z_log_msg_runtime_create.constprop.0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b734:	2e00      	cmp	r6, #0
   1b736:	f43f af5e 	beq.w	1b5f6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b73a:	4630      	mov	r0, r6
   1b73c:	4629      	mov	r1, r5
   1b73e:	f000 fd5d 	bl	1c1fc <bt_conn_set_state>
			bt_conn_unref(conn);
   1b742:	4630      	mov	r0, r6
   1b744:	f012 fa91 	bl	2dc6a <bt_conn_unref>
   1b748:	e755      	b.n	1b5f6 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1b74a:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   1b74c:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1b750:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1b754:	e7bd      	b.n	1b6d2 <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1b756:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b758:	4659      	mov	r1, fp
   1b75a:	9300      	str	r3, [sp, #0]
   1b75c:	4630      	mov	r0, r6
   1b75e:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1b762:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b764:	9a05      	ldr	r2, [sp, #20]
   1b766:	f012 f906 	bl	2d976 <le_adv_update.constprop.0>
		if (err) {
   1b76a:	4604      	mov	r4, r0
   1b76c:	2800      	cmp	r0, #0
   1b76e:	d0cb      	beq.n	1b708 <bt_le_adv_start_legacy+0x148>
   1b770:	e741      	b.n	1b5f6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1b772:	4630      	mov	r0, r6
   1b774:	a907      	add	r1, sp, #28
   1b776:	f7ff fea1 	bl	1b4bc <le_adv_start_add_conn>
		if (err) {
   1b77a:	4604      	mov	r4, r0
   1b77c:	2800      	cmp	r0, #0
   1b77e:	d0c6      	beq.n	1b70e <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   1b780:	f110 0f0c 	cmn.w	r0, #12
   1b784:	f47f af37 	bne.w	1b5f6 <bt_le_adv_start_legacy+0x36>
   1b788:	f1ba 0f00 	cmp.w	sl, #0
   1b78c:	f47f af33 	bne.w	1b5f6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1b790:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1b792:	0798      	lsls	r0, r3, #30
   1b794:	f53f af2f 	bmi.w	1b5f6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1b798:	686c      	ldr	r4, [r5, #4]
   1b79a:	f084 0402 	eor.w	r4, r4, #2
   1b79e:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1b7a2:	f004 0201 	and.w	r2, r4, #1
   1b7a6:	210e      	movs	r1, #14
   1b7a8:	4640      	mov	r0, r8
   1b7aa:	f012 f8d1 	bl	2d950 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1b7ae:	1e7b      	subs	r3, r7, #1
   1b7b0:	425a      	negs	r2, r3
   1b7b2:	415a      	adcs	r2, r3
   1b7b4:	2108      	movs	r1, #8
   1b7b6:	4640      	mov	r0, r8
   1b7b8:	f012 f8ca 	bl	2d950 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1b7bc:	1eb9      	subs	r1, r7, #2
   1b7be:	424a      	negs	r2, r1
   1b7c0:	414a      	adcs	r2, r1
   1b7c2:	4640      	mov	r0, r8
   1b7c4:	2109      	movs	r1, #9
   1b7c6:	f012 f8c3 	bl	2d950 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1b7ca:	686a      	ldr	r2, [r5, #4]
   1b7cc:	210a      	movs	r1, #10
   1b7ce:	4640      	mov	r0, r8
   1b7d0:	f002 0201 	and.w	r2, r2, #1
   1b7d4:	f012 f8bc 	bl	2d950 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1b7d8:	464a      	mov	r2, r9
   1b7da:	210b      	movs	r1, #11
   1b7dc:	4640      	mov	r0, r8
   1b7de:	f012 f8b7 	bl	2d950 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1b7e2:	686a      	ldr	r2, [r5, #4]
   1b7e4:	210d      	movs	r1, #13
   1b7e6:	4640      	mov	r0, r8
   1b7e8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1b7ec:	f012 f8b0 	bl	2d950 <atomic_set_bit_to>
	return 0;
   1b7f0:	2400      	movs	r4, #0
   1b7f2:	e700      	b.n	1b5f6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1b7f4:	b116      	cbz	r6, 1b7fc <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   1b7f6:	4630      	mov	r0, r6
   1b7f8:	f012 fa37 	bl	2dc6a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1b7fc:	f1ba 0f00 	cmp.w	sl, #0
   1b800:	d1cf      	bne.n	1b7a2 <bt_le_adv_start_legacy+0x1e2>
   1b802:	e7c9      	b.n	1b798 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   1b804:	f06f 040a 	mvn.w	r4, #10
   1b808:	e6f5      	b.n	1b5f6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1b80a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1b80e:	e6f2      	b.n	1b5f6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1b810:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1b814:	e6ef      	b.n	1b5f6 <bt_le_adv_start_legacy+0x36>
   1b816:	bf00      	nop
   1b818:	200080cc 	.word	0x200080cc
   1b81c:	20008000 	.word	0x20008000
   1b820:	00036982 	.word	0x00036982
   1b824:	00037276 	.word	0x00037276
   1b828:	00033204 	.word	0x00033204

0001b82c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1b82c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b82e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1b830:	9a06      	ldr	r2, [sp, #24]
{
   1b832:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1b834:	e9cd 3200 	strd	r3, r2, [sp]
   1b838:	462b      	mov	r3, r5
   1b83a:	460a      	mov	r2, r1
   1b83c:	4601      	mov	r1, r0
   1b83e:	4811      	ldr	r0, [pc, #68]	; (1b884 <bt_le_adv_start+0x58>)
   1b840:	f7ff febe 	bl	1b5c0 <bt_le_adv_start_legacy>
   1b844:	4621      	mov	r1, r4
   1b846:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   1b848:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   1b84a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   1b84e:	429d      	cmp	r5, r3
   1b850:	d102      	bne.n	1b858 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1b852:	4630      	mov	r0, r6
   1b854:	b002      	add	sp, #8
   1b856:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   1b858:	880a      	ldrh	r2, [r1, #0]
   1b85a:	4282      	cmp	r2, r0
   1b85c:	d104      	bne.n	1b868 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   1b85e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1b860:	b112      	cbz	r2, 1b868 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1b862:	7812      	ldrb	r2, [r2, #0]
   1b864:	07d2      	lsls	r2, r2, #31
   1b866:	d402      	bmi.n	1b86e <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   1b868:	3301      	adds	r3, #1
   1b86a:	3108      	adds	r1, #8
   1b86c:	e7ef      	b.n	1b84e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1b86e:	4906      	ldr	r1, [pc, #24]	; (1b888 <bt_le_adv_start+0x5c>)
   1b870:	4806      	ldr	r0, [pc, #24]	; (1b88c <bt_le_adv_start+0x60>)
   1b872:	f015 fd4d 	bl	31310 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1b876:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b87a:	2300      	movs	r3, #0
   1b87c:	4803      	ldr	r0, [pc, #12]	; (1b88c <bt_le_adv_start+0x60>)
   1b87e:	f00a fc7f 	bl	26180 <k_work_reschedule>
   1b882:	e7e6      	b.n	1b852 <bt_le_adv_start+0x26>
   1b884:	20008018 	.word	0x20008018
   1b888:	0001b915 	.word	0x0001b915
   1b88c:	20008030 	.word	0x20008030

0001b890 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1b890:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1b892:	481a      	ldr	r0, [pc, #104]	; (1b8fc <bt_le_adv_stop+0x6c>)
   1b894:	f012 f918 	bl	2dac8 <bt_le_lim_adv_cancel_timeout>
   1b898:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1b89c:	4818      	ldr	r0, [pc, #96]	; (1b900 <bt_le_adv_stop+0x70>)
   1b89e:	f012 f836 	bl	2d90e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b8a2:	4817      	ldr	r0, [pc, #92]	; (1b900 <bt_le_adv_stop+0x70>)
   1b8a4:	f012 f830 	bl	2d908 <atomic_get>
   1b8a8:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1b8aa:	061a      	lsls	r2, r3, #24
   1b8ac:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1b8b0:	d523      	bpl.n	1b8fa <bt_le_adv_stop+0x6a>
   1b8b2:	4813      	ldr	r0, [pc, #76]	; (1b900 <bt_le_adv_stop+0x70>)
   1b8b4:	f012 f828 	bl	2d908 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1b8b8:	0543      	lsls	r3, r0, #21
   1b8ba:	d514      	bpl.n	1b8e6 <bt_le_adv_stop+0x56>
   1b8bc:	2207      	movs	r2, #7
   1b8be:	4911      	ldr	r1, [pc, #68]	; (1b904 <bt_le_adv_stop+0x74>)
   1b8c0:	4811      	ldr	r0, [pc, #68]	; (1b908 <bt_le_adv_stop+0x78>)
   1b8c2:	f016 f89e 	bl	31a02 <memcmp>
   1b8c6:	4b11      	ldr	r3, [pc, #68]	; (1b90c <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1b8c8:	b998      	cbnz	r0, 1b8f2 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1b8ca:	2204      	movs	r2, #4
   1b8cc:	4910      	ldr	r1, [pc, #64]	; (1b910 <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1b8ce:	7e18      	ldrb	r0, [r3, #24]
   1b8d0:	f000 fed2 	bl	1c678 <bt_conn_lookup_state_le>
   1b8d4:	4604      	mov	r4, r0
	if (conn) {
   1b8d6:	b130      	cbz	r0, 1b8e6 <bt_le_adv_stop+0x56>
		conn->err = status;
   1b8d8:	2100      	movs	r1, #0
   1b8da:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b8dc:	f000 fc8e 	bl	1c1fc <bt_conn_set_state>
		bt_conn_unref(conn);
   1b8e0:	4620      	mov	r0, r4
   1b8e2:	f012 f9c2 	bl	2dc6a <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1b8e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1b8ea:	2100      	movs	r1, #0
   1b8ec:	4803      	ldr	r0, [pc, #12]	; (1b8fc <bt_le_adv_stop+0x6c>)
   1b8ee:	f012 b8c4 	b.w	2da7a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1b8f2:	2205      	movs	r2, #5
   1b8f4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1b8f8:	e7e9      	b.n	1b8ce <bt_le_adv_stop+0x3e>
}
   1b8fa:	bd10      	pop	{r4, pc}
   1b8fc:	20008018 	.word	0x20008018
   1b900:	20008028 	.word	0x20008028
   1b904:	00036982 	.word	0x00036982
   1b908:	20008021 	.word	0x20008021
   1b90c:	20008000 	.word	0x20008000
   1b910:	0003697b 	.word	0x0003697b

0001b914 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1b914:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1b916:	f7ff ffbb 	bl	1b890 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1b91a:	4b07      	ldr	r3, [pc, #28]	; (1b938 <adv_timeout+0x24>)
   1b91c:	9003      	str	r0, [sp, #12]
   1b91e:	9302      	str	r3, [sp, #8]
   1b920:	2300      	movs	r3, #0
   1b922:	2202      	movs	r2, #2
   1b924:	4618      	mov	r0, r3
   1b926:	e9cd 3300 	strd	r3, r3, [sp]
   1b92a:	4904      	ldr	r1, [pc, #16]	; (1b93c <adv_timeout+0x28>)
   1b92c:	f012 f801 	bl	2d932 <z_log_msg_runtime_create.constprop.0>
}
   1b930:	b005      	add	sp, #20
   1b932:	f85d fb04 	ldr.w	pc, [sp], #4
   1b936:	bf00      	nop
   1b938:	00037291 	.word	0x00037291
   1b93c:	00033204 	.word	0x00033204

0001b940 <bt_le_adv_resume>:
{
   1b940:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b942:	4c1e      	ldr	r4, [pc, #120]	; (1b9bc <bt_le_adv_resume+0x7c>)
   1b944:	4620      	mov	r0, r4
   1b946:	f011 ffdf 	bl	2d908 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1b94a:	0440      	lsls	r0, r0, #17
   1b94c:	d534      	bpl.n	1b9b8 <bt_le_adv_resume+0x78>
   1b94e:	4620      	mov	r0, r4
   1b950:	f011 ffda 	bl	2d908 <atomic_get>
   1b954:	0601      	lsls	r1, r0, #24
   1b956:	d42f      	bmi.n	1b9b8 <bt_le_adv_resume+0x78>
   1b958:	4620      	mov	r0, r4
   1b95a:	f011 ffd5 	bl	2d908 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1b95e:	0542      	lsls	r2, r0, #21
   1b960:	d52a      	bpl.n	1b9b8 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   1b962:	a901      	add	r1, sp, #4
   1b964:	f1a4 0010 	sub.w	r0, r4, #16
   1b968:	f7ff fda8 	bl	1b4bc <le_adv_start_add_conn>
	if (err) {
   1b96c:	4605      	mov	r5, r0
   1b96e:	bb18      	cbnz	r0, 1b9b8 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1b970:	2101      	movs	r1, #1
   1b972:	f1a4 0010 	sub.w	r0, r4, #16
   1b976:	f012 f880 	bl	2da7a <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1b97a:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   1b97c:	b928      	cbnz	r0, 1b98a <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   1b97e:	4630      	mov	r0, r6
}
   1b980:	b002      	add	sp, #8
   1b982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1b986:	f012 b970 	b.w	2dc6a <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b98a:	4629      	mov	r1, r5
   1b98c:	4630      	mov	r0, r6
   1b98e:	f000 fc35 	bl	1c1fc <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b992:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1b996:	4620      	mov	r0, r4
   1b998:	f011 ffb9 	bl	2d90e <atomic_and>
   1b99c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1b99e:	4630      	mov	r0, r6
   1b9a0:	f012 f963 	bl	2dc6a <bt_conn_unref>
	if (persist_paused) {
   1b9a4:	046b      	lsls	r3, r5, #17
   1b9a6:	d507      	bpl.n	1b9b8 <bt_le_adv_resume+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b9a8:	e8d4 3fef 	ldaex	r3, [r4]
   1b9ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1b9b0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1b9b4:	2a00      	cmp	r2, #0
   1b9b6:	d1f7      	bne.n	1b9a8 <bt_le_adv_resume+0x68>
}
   1b9b8:	b002      	add	sp, #8
   1b9ba:	bd70      	pop	{r4, r5, r6, pc}
   1b9bc:	20008028 	.word	0x20008028

0001b9c0 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1b9c0:	b530      	push	{r4, r5, lr}
   1b9c2:	b08f      	sub	sp, #60	; 0x3c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1b9c4:	2120      	movs	r1, #32
   1b9c6:	a806      	add	r0, sp, #24
   1b9c8:	f7fe fb50 	bl	1a06c <bt_hci_le_rand>
	if (ret) {
   1b9cc:	4604      	mov	r4, r0
   1b9ce:	bb08      	cbnz	r0, 1ba14 <prng_reseed.constprop.0+0x54>
	return z_impl_k_uptime_ticks();
   1b9d0:	f015 fe4d 	bl	3166e <z_impl_k_uptime_ticks>
   1b9d4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1b9d8:	fba0 2305 	umull	r2, r3, r0, r5
   1b9dc:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1b9e0:	2308      	movs	r3, #8
   1b9e2:	0bd2      	lsrs	r2, r2, #15
   1b9e4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   1b9e8:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   1b9ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1b9ee:	9300      	str	r3, [sp, #0]
   1b9f0:	2220      	movs	r2, #32
   1b9f2:	480a      	ldr	r0, [pc, #40]	; (1ba1c <prng_reseed.constprop.0+0x5c>)
   1b9f4:	ab04      	add	r3, sp, #16
   1b9f6:	a906      	add	r1, sp, #24
   1b9f8:	f00f ffed 	bl	2b9d6 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1b9fc:	b950      	cbnz	r0, 1ba14 <prng_reseed.constprop.0+0x54>
		LOG_ERR("Failed to re-seed PRNG");
   1b9fe:	4b08      	ldr	r3, [pc, #32]	; (1ba20 <prng_reseed.constprop.0+0x60>)
   1ba00:	9400      	str	r4, [sp, #0]
   1ba02:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ba06:	2201      	movs	r2, #1
   1ba08:	4623      	mov	r3, r4
   1ba0a:	4906      	ldr	r1, [pc, #24]	; (1ba24 <prng_reseed.constprop.0+0x64>)
   1ba0c:	f012 f85f 	bl	2dace <z_log_msg_runtime_create.constprop.0>
   1ba10:	f06f 0404 	mvn.w	r4, #4
		return -EIO;
	}

	return 0;
}
   1ba14:	4620      	mov	r0, r4
   1ba16:	b00f      	add	sp, #60	; 0x3c
   1ba18:	bd30      	pop	{r4, r5, pc}
   1ba1a:	bf00      	nop
   1ba1c:	20009f98 	.word	0x20009f98
   1ba20:	000372b7 	.word	0x000372b7
   1ba24:	00033244 	.word	0x00033244

0001ba28 <prng_init>:

int prng_init(void)
{
   1ba28:	b510      	push	{r4, lr}
   1ba2a:	b086      	sub	sp, #24
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   1ba2c:	2108      	movs	r1, #8
   1ba2e:	a804      	add	r0, sp, #16
   1ba30:	f7fe fb1c 	bl	1a06c <bt_hci_le_rand>
	if (ret) {
   1ba34:	4604      	mov	r4, r0
   1ba36:	b980      	cbnz	r0, 1ba5a <prng_init+0x32>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   1ba38:	2208      	movs	r2, #8
   1ba3a:	480b      	ldr	r0, [pc, #44]	; (1ba68 <prng_init+0x40>)
   1ba3c:	a904      	add	r1, sp, #16
   1ba3e:	f00f ffaa 	bl	2b996 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1ba42:	b968      	cbnz	r0, 1ba60 <prng_init+0x38>
		LOG_ERR("Failed to initialize PRNG");
   1ba44:	4b09      	ldr	r3, [pc, #36]	; (1ba6c <prng_init+0x44>)
   1ba46:	9400      	str	r4, [sp, #0]
   1ba48:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ba4c:	2201      	movs	r2, #1
   1ba4e:	4623      	mov	r3, r4
   1ba50:	4907      	ldr	r1, [pc, #28]	; (1ba70 <prng_init+0x48>)
   1ba52:	f012 f83c 	bl	2dace <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1ba56:	f06f 0404 	mvn.w	r4, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1ba5a:	4620      	mov	r0, r4
   1ba5c:	b006      	add	sp, #24
   1ba5e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1ba60:	f7ff ffae 	bl	1b9c0 <prng_reseed.constprop.0>
   1ba64:	4604      	mov	r4, r0
   1ba66:	e7f8      	b.n	1ba5a <prng_init+0x32>
   1ba68:	20009f98 	.word	0x20009f98
   1ba6c:	000372ce 	.word	0x000372ce
   1ba70:	00033244 	.word	0x00033244

0001ba74 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   1ba74:	b538      	push	{r3, r4, r5, lr}
   1ba76:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1ba78:	4604      	mov	r4, r0
   1ba7a:	b198      	cbz	r0, 1baa4 <bt_rand+0x30>
   1ba7c:	b191      	cbz	r1, 1baa4 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1ba7e:	4a0b      	ldr	r2, [pc, #44]	; (1baac <bt_rand+0x38>)
   1ba80:	f00f ffc2 	bl	2ba08 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1ba84:	1c43      	adds	r3, r0, #1
   1ba86:	d107      	bne.n	1ba98 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   1ba88:	f7ff ff9a 	bl	1b9c0 <prng_reseed.constprop.0>
		if (ret) {
   1ba8c:	b948      	cbnz	r0, 1baa2 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1ba8e:	4629      	mov	r1, r5
   1ba90:	4620      	mov	r0, r4
   1ba92:	4a06      	ldr	r2, [pc, #24]	; (1baac <bt_rand+0x38>)
   1ba94:	f00f ffb8 	bl	2ba08 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   1ba98:	2801      	cmp	r0, #1
   1ba9a:	bf0c      	ite	eq
   1ba9c:	2000      	moveq	r0, #0
   1ba9e:	f06f 0004 	mvnne.w	r0, #4
}
   1baa2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1baa4:	f06f 0015 	mvn.w	r0, #21
   1baa8:	e7fb      	b.n	1baa2 <bt_rand+0x2e>
   1baaa:	bf00      	nop
   1baac:	20009f98 	.word	0x20009f98

0001bab0 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1bab0:	2240      	movs	r2, #64	; 0x40
{
   1bab2:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1bab4:	4903      	ldr	r1, [pc, #12]	; (1bac4 <bt_pub_key_is_debug+0x14>)
   1bab6:	f015 ffa4 	bl	31a02 <memcmp>
}
   1baba:	fab0 f080 	clz	r0, r0
   1babe:	0940      	lsrs	r0, r0, #5
   1bac0:	bd08      	pop	{r3, pc}
   1bac2:	bf00      	nop
   1bac4:	0003737e 	.word	0x0003737e

0001bac8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1bac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1baca:	4b3c      	ldr	r3, [pc, #240]	; (1bbbc <bt_pub_key_gen+0xf4>)
{
   1bacc:	b085      	sub	sp, #20
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1bace:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1bad2:	f003 0306 	and.w	r3, r3, #6
   1bad6:	2b06      	cmp	r3, #6
   1bad8:	d00e      	beq.n	1baf8 <bt_pub_key_gen+0x30>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   1bada:	4b39      	ldr	r3, [pc, #228]	; (1bbc0 <bt_pub_key_gen+0xf8>)
   1badc:	2202      	movs	r2, #2
   1bade:	9302      	str	r3, [sp, #8]
   1bae0:	2300      	movs	r3, #0
   1bae2:	4938      	ldr	r1, [pc, #224]	; (1bbc4 <bt_pub_key_gen+0xfc>)
   1bae4:	4618      	mov	r0, r3
   1bae6:	e9cd 3300 	strd	r3, r3, [sp]
   1baea:	f012 f837 	bl	2db5c <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1baee:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1baf2:	4628      	mov	r0, r5
   1baf4:	b005      	add	sp, #20
   1baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   1baf8:	2800      	cmp	r0, #0
   1bafa:	d05b      	beq.n	1bbb4 <bt_pub_key_gen+0xec>
	return list->head;
   1bafc:	4e32      	ldr	r6, [pc, #200]	; (1bbc8 <bt_pub_key_gen+0x100>)
   1bafe:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bb00:	b19a      	cbz	r2, 1bb2a <bt_pub_key_gen+0x62>
   1bb02:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   1bb04:	4283      	cmp	r3, r0
   1bb06:	d10c      	bne.n	1bb22 <bt_pub_key_gen+0x5a>
			LOG_WRN("Callback already registered");
   1bb08:	4b30      	ldr	r3, [pc, #192]	; (1bbcc <bt_pub_key_gen+0x104>)
   1bb0a:	2202      	movs	r2, #2
   1bb0c:	9302      	str	r3, [sp, #8]
   1bb0e:	2300      	movs	r3, #0
   1bb10:	492c      	ldr	r1, [pc, #176]	; (1bbc4 <bt_pub_key_gen+0xfc>)
   1bb12:	4618      	mov	r0, r3
   1bb14:	e9cd 3300 	strd	r3, r3, [sp]
   1bb18:	f012 f820 	bl	2db5c <z_log_msg_runtime_create.constprop.0>
			return -EALREADY;
   1bb1c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1bb20:	e7e7      	b.n	1baf2 <bt_pub_key_gen+0x2a>
	return node->next;
   1bb22:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bb24:	b10b      	cbz	r3, 1bb2a <bt_pub_key_gen+0x62>
   1bb26:	3b04      	subs	r3, #4
   1bb28:	e7ec      	b.n	1bb04 <bt_pub_key_gen+0x3c>
	parent->next = child;
   1bb2a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bb2c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1bb2e:	1d03      	adds	r3, r0, #4
	list->head = node;
   1bb30:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bb32:	b902      	cbnz	r2, 1bb36 <bt_pub_key_gen+0x6e>
	list->tail = node;
   1bb34:	6073      	str	r3, [r6, #4]
   1bb36:	4f26      	ldr	r7, [pc, #152]	; (1bbd0 <bt_pub_key_gen+0x108>)
   1bb38:	e8d7 4fef 	ldaex	r4, [r7]
   1bb3c:	f044 0320 	orr.w	r3, r4, #32
   1bb40:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1bb44:	2a00      	cmp	r2, #0
   1bb46:	d1f7      	bne.n	1bb38 <bt_pub_key_gen+0x70>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1bb48:	f014 0420 	ands.w	r4, r4, #32
   1bb4c:	d001      	beq.n	1bb52 <bt_pub_key_gen+0x8a>
	return 0;
   1bb4e:	2500      	movs	r5, #0
   1bb50:	e7cf      	b.n	1baf2 <bt_pub_key_gen+0x2a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bb52:	e8d7 3fef 	ldaex	r3, [r7]
   1bb56:	f023 0310 	bic.w	r3, r3, #16
   1bb5a:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1bb5e:	2a00      	cmp	r2, #0
   1bb60:	d1f7      	bne.n	1bb52 <bt_pub_key_gen+0x8a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1bb62:	4622      	mov	r2, r4
   1bb64:	4621      	mov	r1, r4
   1bb66:	f242 0025 	movw	r0, #8229	; 0x2025
   1bb6a:	f7fe f9e1 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1bb6e:	4605      	mov	r5, r0
   1bb70:	2800      	cmp	r0, #0
   1bb72:	d0ec      	beq.n	1bb4e <bt_pub_key_gen+0x86>
		LOG_ERR("Sending LE P256 Public Key command failed");
   1bb74:	4b17      	ldr	r3, [pc, #92]	; (1bbd4 <bt_pub_key_gen+0x10c>)
   1bb76:	2201      	movs	r2, #1
   1bb78:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1bb7c:	4620      	mov	r0, r4
   1bb7e:	4623      	mov	r3, r4
   1bb80:	4910      	ldr	r1, [pc, #64]	; (1bbc4 <bt_pub_key_gen+0xfc>)
   1bb82:	9400      	str	r4, [sp, #0]
   1bb84:	f011 ffea 	bl	2db5c <z_log_msg_runtime_create.constprop.0>
   1bb88:	e8d7 3fef 	ldaex	r3, [r7]
   1bb8c:	f023 0320 	bic.w	r3, r3, #32
   1bb90:	e8c7 3fe2 	stlex	r2, r3, [r7]
   1bb94:	2a00      	cmp	r2, #0
   1bb96:	d1f7      	bne.n	1bb88 <bt_pub_key_gen+0xc0>
	return list->head;
   1bb98:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bb9a:	b13c      	cbz	r4, 1bbac <bt_pub_key_gen+0xe4>
			if (cb->func) {
   1bb9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bba0:	3c04      	subs	r4, #4
			if (cb->func) {
   1bba2:	b10b      	cbz	r3, 1bba8 <bt_pub_key_gen+0xe0>
				cb->func(NULL);
   1bba4:	2000      	movs	r0, #0
   1bba6:	4798      	blx	r3
	return node->next;
   1bba8:	6864      	ldr	r4, [r4, #4]
   1bbaa:	e7f6      	b.n	1bb9a <bt_pub_key_gen+0xd2>
	list->head = NULL;
   1bbac:	2300      	movs	r3, #0
	list->tail = NULL;
   1bbae:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   1bbb2:	e79e      	b.n	1baf2 <bt_pub_key_gen+0x2a>
		return -EINVAL;
   1bbb4:	f06f 0515 	mvn.w	r5, #21
   1bbb8:	e79b      	b.n	1baf2 <bt_pub_key_gen+0x2a>
   1bbba:	bf00      	nop
   1bbbc:	20008000 	.word	0x20008000
   1bbc0:	000372f7 	.word	0x000372f7
   1bbc4:	00033224 	.word	0x00033224
   1bbc8:	20030a00 	.word	0x20030a00
   1bbcc:	00037316 	.word	0x00037316
   1bbd0:	200080cc 	.word	0x200080cc
   1bbd4:	00037332 	.word	0x00037332

0001bbd8 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bbd8:	4b04      	ldr	r3, [pc, #16]	; (1bbec <bt_pub_key_get+0x14>)
   1bbda:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   1bbde:	f013 0f10 	tst.w	r3, #16
}
   1bbe2:	4803      	ldr	r0, [pc, #12]	; (1bbf0 <bt_pub_key_get+0x18>)
   1bbe4:	bf08      	it	eq
   1bbe6:	2000      	moveq	r0, #0
   1bbe8:	4770      	bx	lr
   1bbea:	bf00      	nop
   1bbec:	200080cc 	.word	0x200080cc
   1bbf0:	20031b4e 	.word	0x20031b4e

0001bbf4 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1bbf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
   1bbf6:	4e24      	ldr	r6, [pc, #144]	; (1bc88 <bt_dh_key_gen+0x94>)
{
   1bbf8:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   1bbfa:	6833      	ldr	r3, [r6, #0]
   1bbfc:	428b      	cmp	r3, r1
   1bbfe:	d03c      	beq.n	1bc7a <bt_dh_key_gen+0x86>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1bc00:	b123      	cbz	r3, 1bc0c <bt_dh_key_gen+0x18>
		return -EBUSY;
   1bc02:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1bc06:	4620      	mov	r0, r4
   1bc08:	b004      	add	sp, #16
   1bc0a:	bd70      	pop	{r4, r5, r6, pc}
   1bc0c:	4b1f      	ldr	r3, [pc, #124]	; (1bc8c <bt_dh_key_gen+0x98>)
   1bc0e:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1bc12:	0692      	lsls	r2, r2, #26
   1bc14:	d4f5      	bmi.n	1bc02 <bt_dh_key_gen+0xe>
   1bc16:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1bc1a:	06db      	lsls	r3, r3, #27
   1bc1c:	d530      	bpl.n	1bc80 <bt_dh_key_gen+0x8c>
	dh_key_cb = cb;
   1bc1e:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   1bc20:	f242 0026 	movw	r0, #8230	; 0x2026
   1bc24:	2140      	movs	r1, #64	; 0x40
   1bc26:	f7fe f949 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   1bc2a:	4605      	mov	r5, r0
   1bc2c:	b310      	cbz	r0, 1bc74 <bt_dh_key_gen+0x80>
	return net_buf_simple_add(&buf->b, len);
   1bc2e:	2140      	movs	r1, #64	; 0x40
   1bc30:	300c      	adds	r0, #12
   1bc32:	f013 fcf8 	bl	2f626 <net_buf_simple_add>
   1bc36:	4623      	mov	r3, r4
   1bc38:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1bc3c:	f853 1b04 	ldr.w	r1, [r3], #4
   1bc40:	4293      	cmp	r3, r2
   1bc42:	f840 1b04 	str.w	r1, [r0], #4
   1bc46:	d1f9      	bne.n	1bc3c <bt_dh_key_gen+0x48>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1bc48:	2200      	movs	r2, #0
   1bc4a:	4629      	mov	r1, r5
   1bc4c:	f242 0026 	movw	r0, #8230	; 0x2026
   1bc50:	f7fe f96e 	bl	19f30 <bt_hci_cmd_send_sync>
	if (err) {
   1bc54:	4604      	mov	r4, r0
   1bc56:	2800      	cmp	r0, #0
   1bc58:	d0d5      	beq.n	1bc06 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   1bc5a:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1bc5c:	4a0c      	ldr	r2, [pc, #48]	; (1bc90 <bt_dh_key_gen+0x9c>)
		dh_key_cb = NULL;
   1bc5e:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1bc60:	4618      	mov	r0, r3
   1bc62:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1bc66:	490b      	ldr	r1, [pc, #44]	; (1bc94 <bt_dh_key_gen+0xa0>)
   1bc68:	2202      	movs	r2, #2
   1bc6a:	9403      	str	r4, [sp, #12]
   1bc6c:	9300      	str	r3, [sp, #0]
   1bc6e:	f011 ff75 	bl	2db5c <z_log_msg_runtime_create.constprop.0>
		return err;
   1bc72:	e7c8      	b.n	1bc06 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1bc74:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1bc78:	e7ef      	b.n	1bc5a <bt_dh_key_gen+0x66>
		return -EALREADY;
   1bc7a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1bc7e:	e7c2      	b.n	1bc06 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1bc80:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1bc84:	e7bf      	b.n	1bc06 <bt_dh_key_gen+0x12>
   1bc86:	bf00      	nop
   1bc88:	200309fc 	.word	0x200309fc
   1bc8c:	200080cc 	.word	0x200080cc
   1bc90:	0003735c 	.word	0x0003735c
   1bc94:	00033224 	.word	0x00033224

0001bc98 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bc9a:	4b19      	ldr	r3, [pc, #100]	; (1bd00 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1bc9c:	68c5      	ldr	r5, [r0, #12]
   1bc9e:	e8d3 2fef 	ldaex	r2, [r3]
   1bca2:	f022 0220 	bic.w	r2, r2, #32
   1bca6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bcaa:	2900      	cmp	r1, #0
   1bcac:	d1f7      	bne.n	1bc9e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1bcae:	782a      	ldrb	r2, [r5, #0]
   1bcb0:	b98a      	cbnz	r2, 1bcd6 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1bcb2:	4914      	ldr	r1, [pc, #80]	; (1bd04 <bt_hci_evt_le_pkey_complete+0x6c>)
   1bcb4:	1c6a      	adds	r2, r5, #1
   1bcb6:	f105 0041 	add.w	r0, r5, #65	; 0x41
   1bcba:	f852 4b04 	ldr.w	r4, [r2], #4
   1bcbe:	4282      	cmp	r2, r0
   1bcc0:	f841 4b04 	str.w	r4, [r1], #4
   1bcc4:	d1f9      	bne.n	1bcba <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bcc6:	e8d3 1fef 	ldaex	r1, [r3]
   1bcca:	f041 0110 	orr.w	r1, r1, #16
   1bcce:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1bcd2:	2a00      	cmp	r2, #0
   1bcd4:	d1f7      	bne.n	1bcc6 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   1bcd6:	4e0c      	ldr	r6, [pc, #48]	; (1bd08 <bt_hci_evt_le_pkey_complete+0x70>)
   1bcd8:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bcda:	b16c      	cbz	r4, 1bcf8 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1bcdc:	4f09      	ldr	r7, [pc, #36]	; (1bd04 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bcde:	3c04      	subs	r4, #4
		if (cb->func) {
   1bce0:	6823      	ldr	r3, [r4, #0]
   1bce2:	b12b      	cbz	r3, 1bcf0 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   1bce4:	782a      	ldrb	r2, [r5, #0]
   1bce6:	2a00      	cmp	r2, #0
   1bce8:	bf0c      	ite	eq
   1bcea:	4638      	moveq	r0, r7
   1bcec:	2000      	movne	r0, #0
   1bcee:	4798      	blx	r3
	return node->next;
   1bcf0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1bcf2:	b10c      	cbz	r4, 1bcf8 <bt_hci_evt_le_pkey_complete+0x60>
   1bcf4:	3c04      	subs	r4, #4
   1bcf6:	e7f3      	b.n	1bce0 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   1bcf8:	2300      	movs	r3, #0
	list->tail = NULL;
   1bcfa:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1bcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd00:	200080cc 	.word	0x200080cc
   1bd04:	20031b4e 	.word	0x20031b4e
   1bd08:	20030a00 	.word	0x20030a00

0001bd0c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1bd0c:	4905      	ldr	r1, [pc, #20]	; (1bd24 <bt_hci_evt_le_dhkey_complete+0x18>)
   1bd0e:	680b      	ldr	r3, [r1, #0]
   1bd10:	b133      	cbz	r3, 1bd20 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1bd12:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1bd14:	2000      	movs	r0, #0
   1bd16:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1bd18:	7811      	ldrb	r1, [r2, #0]
   1bd1a:	b901      	cbnz	r1, 1bd1e <bt_hci_evt_le_dhkey_complete+0x12>
   1bd1c:	1c50      	adds	r0, r2, #1
   1bd1e:	4718      	bx	r3
	}
}
   1bd20:	4770      	bx	lr
   1bd22:	bf00      	nop
   1bd24:	200309fc 	.word	0x200309fc

0001bd28 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1bd28:	b570      	push	{r4, r5, r6, lr}
   1bd2a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1bd2c:	4b0a      	ldr	r3, [pc, #40]	; (1bd58 <notify_connected+0x30>)
   1bd2e:	681d      	ldr	r5, [r3, #0]
   1bd30:	b925      	cbnz	r5, 1bd3c <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1bd32:	4d0a      	ldr	r5, [pc, #40]	; (1bd5c <notify_connected+0x34>)
   1bd34:	4e0a      	ldr	r6, [pc, #40]	; (1bd60 <notify_connected+0x38>)
   1bd36:	42b5      	cmp	r5, r6
   1bd38:	d307      	bcc.n	1bd4a <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   1bd3a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   1bd3c:	682b      	ldr	r3, [r5, #0]
   1bd3e:	b113      	cbz	r3, 1bd46 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   1bd40:	4620      	mov	r0, r4
   1bd42:	7b21      	ldrb	r1, [r4, #12]
   1bd44:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1bd46:	69ad      	ldr	r5, [r5, #24]
   1bd48:	e7f2      	b.n	1bd30 <notify_connected+0x8>
		if (cb->connected) {
   1bd4a:	682b      	ldr	r3, [r5, #0]
   1bd4c:	b113      	cbz	r3, 1bd54 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1bd4e:	4620      	mov	r0, r4
   1bd50:	7b21      	ldrb	r1, [r4, #12]
   1bd52:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1bd54:	351c      	adds	r5, #28
   1bd56:	e7ee      	b.n	1bd36 <notify_connected+0xe>
   1bd58:	20030a28 	.word	0x20030a28
   1bd5c:	000331a0 	.word	0x000331a0
   1bd60:	000331bc 	.word	0x000331bc

0001bd64 <tx_notify>:
{
   1bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd68:	4604      	mov	r4, r0
	tx->cb = NULL;
   1bd6a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1bd6e:	4f14      	ldr	r7, [pc, #80]	; (1bdc0 <tx_notify+0x5c>)
	__asm__ volatile(
   1bd70:	f04f 0220 	mov.w	r2, #32
   1bd74:	f3ef 8311 	mrs	r3, BASEPRI
   1bd78:	f382 8812 	msr	BASEPRI_MAX, r2
   1bd7c:	f3bf 8f6f 	isb	sy
	return list->head;
   1bd80:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1bd82:	b929      	cbnz	r1, 1bd90 <tx_notify+0x2c>
	__asm__ volatile(
   1bd84:	f383 8811 	msr	BASEPRI, r3
   1bd88:	f3bf 8f6f 	isb	sy
}
   1bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bd90:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1bd92:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bd94:	4281      	cmp	r1, r0
	list->tail = node;
   1bd96:	bf08      	it	eq
   1bd98:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1bd9a:	6222      	str	r2, [r4, #32]
   1bd9c:	f383 8811 	msr	BASEPRI, r3
   1bda0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1bda4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1bda8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   1bdaa:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   1bdae:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1bdb2:	f015 f9d2 	bl	3115a <k_queue_append>
		cb(conn, user_data, 0);
   1bdb6:	2200      	movs	r2, #0
   1bdb8:	4631      	mov	r1, r6
   1bdba:	4620      	mov	r0, r4
   1bdbc:	47a8      	blx	r5
	while (1) {
   1bdbe:	e7d7      	b.n	1bd70 <tx_notify+0xc>
   1bdc0:	20008ee8 	.word	0x20008ee8

0001bdc4 <conn_tx_destroy>:
	tx->cb = NULL;
   1bdc4:	2200      	movs	r2, #0
{
   1bdc6:	b570      	push	{r4, r5, r6, lr}
   1bdc8:	4604      	mov	r4, r0
	void *user_data = tx->user_data;
   1bdca:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1bdce:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   1bdd0:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1bdd4:	4805      	ldr	r0, [pc, #20]	; (1bdec <conn_tx_destroy+0x28>)
   1bdd6:	f015 f9c0 	bl	3115a <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1bdda:	4631      	mov	r1, r6
   1bddc:	4620      	mov	r0, r4
   1bdde:	462b      	mov	r3, r5
}
   1bde0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1bde4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1bde8:	4718      	bx	r3
   1bdea:	bf00      	nop
   1bdec:	20008ee8 	.word	0x20008ee8

0001bdf0 <send_frag>:
{
   1bdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bdf4:	4604      	mov	r4, r0
   1bdf6:	460e      	mov	r6, r1
   1bdf8:	4617      	mov	r7, r2
   1bdfa:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1bdfc:	698d      	ldr	r5, [r1, #24]
{
   1bdfe:	b085      	sub	sp, #20
	return z_impl_k_sem_take(sem, timeout);
   1be00:	f04f 33ff 	mov.w	r3, #4294967295
   1be04:	f04f 32ff 	mov.w	r2, #4294967295
   1be08:	4842      	ldr	r0, [pc, #264]	; (1bf14 <send_frag+0x124>)
   1be0a:	f009 ff89 	bl	25d20 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1be0e:	7b63      	ldrb	r3, [r4, #13]
   1be10:	2b07      	cmp	r3, #7
   1be12:	d173      	bne.n	1befc <send_frag+0x10c>
	__asm__ volatile(
   1be14:	f04f 0320 	mov.w	r3, #32
   1be18:	f3ef 8211 	mrs	r2, BASEPRI
   1be1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1be20:	f3bf 8f6f 	isb	sy
	if (tx) {
   1be24:	2d00      	cmp	r5, #0
   1be26:	d049      	beq.n	1bebc <send_frag+0xcc>
	parent->next = child;
   1be28:	2300      	movs	r3, #0
   1be2a:	602b      	str	r3, [r5, #0]
	return list->tail;
   1be2c:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1be2e:	2b00      	cmp	r3, #0
   1be30:	d141      	bne.n	1beb6 <send_frag+0xc6>
	list->head = node;
   1be32:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1be36:	f382 8811 	msr	BASEPRI, r2
   1be3a:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1be3e:	2104      	movs	r1, #4
   1be40:	f106 000c 	add.w	r0, r6, #12
   1be44:	f013 fc06 	bl	2f654 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1be48:	8823      	ldrh	r3, [r4, #0]
   1be4a:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   1be4e:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   1be52:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1be54:	8a33      	ldrh	r3, [r6, #16]
   1be56:	3b04      	subs	r3, #4
   1be58:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1be5a:	2302      	movs	r3, #2
	return bt_send(buf);
   1be5c:	4630      	mov	r0, r6
   1be5e:	7633      	strb	r3, [r6, #24]
   1be60:	f7fe fb6c 	bl	1a53c <bt_send>
	if (err) {
   1be64:	2800      	cmp	r0, #0
   1be66:	d053      	beq.n	1bf10 <send_frag+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1be68:	4b2b      	ldr	r3, [pc, #172]	; (1bf18 <send_frag+0x128>)
   1be6a:	9003      	str	r0, [sp, #12]
   1be6c:	9302      	str	r3, [sp, #8]
   1be6e:	2300      	movs	r3, #0
   1be70:	2201      	movs	r2, #1
   1be72:	4618      	mov	r0, r3
   1be74:	e9cd 3300 	strd	r3, r3, [sp]
   1be78:	4928      	ldr	r1, [pc, #160]	; (1bf1c <send_frag+0x12c>)
   1be7a:	f011 fea4 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   1be7e:	f04f 0320 	mov.w	r3, #32
   1be82:	f3ef 8711 	mrs	r7, BASEPRI
   1be86:	f383 8812 	msr	BASEPRI_MAX, r3
   1be8a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1be8e:	b315      	cbz	r5, 1bed6 <send_frag+0xe6>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1be90:	4629      	mov	r1, r5
   1be92:	f104 0014 	add.w	r0, r4, #20
   1be96:	f011 fe70 	bl	2db7a <sys_slist_find_and_remove>
	__asm__ volatile(
   1be9a:	f387 8811 	msr	BASEPRI, r7
   1be9e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1bea2:	481c      	ldr	r0, [pc, #112]	; (1bf14 <send_frag+0x124>)
   1bea4:	f009 ff16 	bl	25cd4 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1bea8:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   1beaa:	4629      	mov	r1, r5
   1beac:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   1beae:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1beb0:	f7ff ff88 	bl	1bdc4 <conn_tx_destroy>
   1beb4:	e01b      	b.n	1beee <send_frag+0xfe>
	parent->next = child;
   1beb6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1beb8:	61a5      	str	r5, [r4, #24]
}
   1beba:	e7bc      	b.n	1be36 <send_frag+0x46>
	return list->tail;
   1bebc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1bebe:	b133      	cbz	r3, 1bece <send_frag+0xde>
			pending_no_cb = &tail_tx->pending_no_cb;
   1bec0:	f103 080c 	add.w	r8, r3, #12
   1bec4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1bec6:	3301      	adds	r3, #1
   1bec8:	f8c8 3000 	str.w	r3, [r8]
   1becc:	e7b3      	b.n	1be36 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1bece:	69e3      	ldr	r3, [r4, #28]
   1bed0:	f104 081c 	add.w	r8, r4, #28
   1bed4:	e7f7      	b.n	1bec6 <send_frag+0xd6>
			(*pending_no_cb)--;
   1bed6:	f8d8 3000 	ldr.w	r3, [r8]
   1beda:	3b01      	subs	r3, #1
   1bedc:	f8c8 3000 	str.w	r3, [r8]
   1bee0:	f387 8811 	msr	BASEPRI, r7
   1bee4:	f3bf 8f6f 	isb	sy
   1bee8:	480a      	ldr	r0, [pc, #40]	; (1bf14 <send_frag+0x124>)
   1beea:	f009 fef3 	bl	25cd4 <z_impl_k_sem_give>
	if (always_consume) {
   1beee:	f1b9 0f00 	cmp.w	r9, #0
   1bef2:	d109      	bne.n	1bf08 <send_frag+0x118>
	return false;
   1bef4:	2000      	movs	r0, #0
}
   1bef6:	b005      	add	sp, #20
   1bef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1befc:	4805      	ldr	r0, [pc, #20]	; (1bf14 <send_frag+0x124>)
   1befe:	f009 fee9 	bl	25cd4 <z_impl_k_sem_give>
	if (tx) {
   1bf02:	2d00      	cmp	r5, #0
   1bf04:	d1d0      	bne.n	1bea8 <send_frag+0xb8>
   1bf06:	e7f2      	b.n	1beee <send_frag+0xfe>
		net_buf_unref(buf);
   1bf08:	4630      	mov	r0, r6
   1bf0a:	f004 fc41 	bl	20790 <net_buf_unref>
   1bf0e:	e7f1      	b.n	1bef4 <send_frag+0x104>
	return true;
   1bf10:	2001      	movs	r0, #1
   1bf12:	e7f0      	b.n	1bef6 <send_frag+0x106>
   1bf14:	20008100 	.word	0x20008100
   1bf18:	00036d7e 	.word	0x00036d7e
   1bf1c:	00033214 	.word	0x00033214

0001bf20 <bt_conn_get_pkts>:
}
   1bf20:	4800      	ldr	r0, [pc, #0]	; (1bf24 <bt_conn_get_pkts+0x4>)
   1bf22:	4770      	bx	lr
   1bf24:	20008100 	.word	0x20008100

0001bf28 <bt_conn_new>:
{
   1bf28:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1bf2a:	2200      	movs	r2, #0
   1bf2c:	4604      	mov	r4, r0
   1bf2e:	428a      	cmp	r2, r1
   1bf30:	d102      	bne.n	1bf38 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bf32:	2400      	movs	r4, #0
}
   1bf34:	4620      	mov	r0, r4
   1bf36:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bf38:	2001      	movs	r0, #1
   1bf3a:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1bf3e:	e8d3 5fef 	ldaex	r5, [r3]
   1bf42:	2d00      	cmp	r5, #0
   1bf44:	d104      	bne.n	1bf50 <bt_conn_new+0x28>
   1bf46:	e8c3 0fec 	stlex	ip, r0, [r3]
   1bf4a:	f1bc 0f00 	cmp.w	ip, #0
   1bf4e:	d1f6      	bne.n	1bf3e <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bf50:	d002      	beq.n	1bf58 <bt_conn_new+0x30>
   1bf52:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1bf54:	4402      	add	r2, r0
   1bf56:	e7ea      	b.n	1bf2e <bt_conn_new+0x6>
	if (!conn) {
   1bf58:	2c00      	cmp	r4, #0
   1bf5a:	d0ea      	beq.n	1bf32 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   1bf5c:	22bc      	movs	r2, #188	; 0xbc
   1bf5e:	2100      	movs	r1, #0
   1bf60:	4620      	mov	r0, r4
   1bf62:	f015 fd98 	bl	31a96 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1bf66:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1bf6a:	4904      	ldr	r1, [pc, #16]	; (1bf7c <bt_conn_new+0x54>)
   1bf6c:	f015 f9d0 	bl	31310 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1bf70:	4903      	ldr	r1, [pc, #12]	; (1bf80 <bt_conn_new+0x58>)
   1bf72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bf76:	f015 f987 	bl	31288 <k_work_init>
	return conn;
   1bf7a:	e7db      	b.n	1bf34 <bt_conn_new+0xc>
   1bf7c:	0001c725 	.word	0x0001c725
   1bf80:	0002dbe5 	.word	0x0002dbe5

0001bf84 <bt_conn_recv>:
{
   1bf84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf86:	4616      	mov	r6, r2
   1bf88:	b087      	sub	sp, #28
   1bf8a:	4604      	mov	r4, r0
   1bf8c:	460d      	mov	r5, r1
	tx_notify(conn);
   1bf8e:	f7ff fee9 	bl	1bd64 <tx_notify>
	switch (flags) {
   1bf92:	2e01      	cmp	r6, #1
   1bf94:	d02e      	beq.n	1bff4 <bt_conn_recv+0x70>
   1bf96:	2e02      	cmp	r6, #2
   1bf98:	d165      	bne.n	1c066 <bt_conn_recv+0xe2>
		if (conn->rx) {
   1bf9a:	6923      	ldr	r3, [r4, #16]
   1bf9c:	b163      	cbz	r3, 1bfb8 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   1bf9e:	4b3d      	ldr	r3, [pc, #244]	; (1c094 <bt_conn_recv+0x110>)
   1bfa0:	2201      	movs	r2, #1
   1bfa2:	9302      	str	r3, [sp, #8]
   1bfa4:	2300      	movs	r3, #0
   1bfa6:	493c      	ldr	r1, [pc, #240]	; (1c098 <bt_conn_recv+0x114>)
   1bfa8:	4618      	mov	r0, r3
   1bfaa:	e9cd 3300 	strd	r3, r3, [sp]
   1bfae:	f011 fe0a 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1bfb2:	4620      	mov	r0, r4
   1bfb4:	f011 fe19 	bl	2dbea <bt_conn_reset_rx_state>
		conn->rx = buf;
   1bfb8:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1bfba:	6921      	ldr	r1, [r4, #16]
   1bfbc:	8a0a      	ldrh	r2, [r1, #16]
   1bfbe:	2a01      	cmp	r2, #1
   1bfc0:	d966      	bls.n	1c090 <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1bfc2:	68cb      	ldr	r3, [r1, #12]
   1bfc4:	881b      	ldrh	r3, [r3, #0]
   1bfc6:	3304      	adds	r3, #4
   1bfc8:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1bfca:	429a      	cmp	r2, r3
   1bfcc:	d360      	bcc.n	1c090 <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   1bfce:	d956      	bls.n	1c07e <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1bfd0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1bfd4:	4b31      	ldr	r3, [pc, #196]	; (1c09c <bt_conn_recv+0x118>)
   1bfd6:	2201      	movs	r2, #1
   1bfd8:	9302      	str	r3, [sp, #8]
   1bfda:	2300      	movs	r3, #0
   1bfdc:	492e      	ldr	r1, [pc, #184]	; (1c098 <bt_conn_recv+0x114>)
   1bfde:	4618      	mov	r0, r3
   1bfe0:	e9cd 3300 	strd	r3, r3, [sp]
   1bfe4:	f011 fdef 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1bfe8:	4620      	mov	r0, r4
}
   1bfea:	b007      	add	sp, #28
   1bfec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   1bff0:	f011 bdfb 	b.w	2dbea <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1bff4:	6923      	ldr	r3, [r4, #16]
   1bff6:	b963      	cbnz	r3, 1c012 <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   1bff8:	4a29      	ldr	r2, [pc, #164]	; (1c0a0 <bt_conn_recv+0x11c>)
   1bffa:	4618      	mov	r0, r3
   1bffc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1c000:	4925      	ldr	r1, [pc, #148]	; (1c098 <bt_conn_recv+0x114>)
   1c002:	4632      	mov	r2, r6
   1c004:	9300      	str	r3, [sp, #0]
   1c006:	f011 fdde 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1c00a:	4620      	mov	r0, r4
   1c00c:	f011 fded 	bl	2dbea <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1c010:	e001      	b.n	1c016 <bt_conn_recv+0x92>
		if (!buf->len) {
   1c012:	8a2f      	ldrh	r7, [r5, #16]
   1c014:	b92f      	cbnz	r7, 1c022 <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   1c016:	4628      	mov	r0, r5
}
   1c018:	b007      	add	sp, #28
   1c01a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   1c01e:	f004 bbb7 	b.w	20790 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1c022:	f103 000c 	add.w	r0, r3, #12
   1c026:	f013 fb42 	bl	2f6ae <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1c02a:	4287      	cmp	r7, r0
   1c02c:	d911      	bls.n	1c052 <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1c02e:	2700      	movs	r7, #0
   1c030:	4b1c      	ldr	r3, [pc, #112]	; (1c0a4 <bt_conn_recv+0x120>)
   1c032:	4632      	mov	r2, r6
   1c034:	4638      	mov	r0, r7
   1c036:	4918      	ldr	r1, [pc, #96]	; (1c098 <bt_conn_recv+0x114>)
   1c038:	9302      	str	r3, [sp, #8]
   1c03a:	e9cd 7700 	strd	r7, r7, [sp]
   1c03e:	463b      	mov	r3, r7
   1c040:	f011 fdc1 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1c044:	463a      	mov	r2, r7
   1c046:	4620      	mov	r0, r4
   1c048:	6921      	ldr	r1, [r4, #16]
   1c04a:	f000 fddf 	bl	1cc0c <bt_l2cap_recv>
			conn->rx = NULL;
   1c04e:	6127      	str	r7, [r4, #16]
   1c050:	e7e1      	b.n	1c016 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c052:	6920      	ldr	r0, [r4, #16]
   1c054:	8a2a      	ldrh	r2, [r5, #16]
   1c056:	68e9      	ldr	r1, [r5, #12]
   1c058:	300c      	adds	r0, #12
   1c05a:	f013 faea 	bl	2f632 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1c05e:	4628      	mov	r0, r5
   1c060:	f004 fb96 	bl	20790 <net_buf_unref>
		break;
   1c064:	e7a9      	b.n	1bfba <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1c066:	4b10      	ldr	r3, [pc, #64]	; (1c0a8 <bt_conn_recv+0x124>)
   1c068:	2201      	movs	r2, #1
   1c06a:	9302      	str	r3, [sp, #8]
   1c06c:	2300      	movs	r3, #0
   1c06e:	490a      	ldr	r1, [pc, #40]	; (1c098 <bt_conn_recv+0x114>)
   1c070:	4618      	mov	r0, r3
   1c072:	e9cd 3300 	strd	r3, r3, [sp]
	switch (flags) {
   1c076:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1c078:	f011 fda5 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
   1c07c:	e7c5      	b.n	1c00a <bt_conn_recv+0x86>
	conn->rx = NULL;
   1c07e:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1c080:	2201      	movs	r2, #1
   1c082:	4620      	mov	r0, r4
	conn->rx = NULL;
   1c084:	6123      	str	r3, [r4, #16]
}
   1c086:	b007      	add	sp, #28
   1c088:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   1c08c:	f000 bdbe 	b.w	1cc0c <bt_l2cap_recv>
}
   1c090:	b007      	add	sp, #28
   1c092:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c094:	000373c5 	.word	0x000373c5
   1c098:	00033214 	.word	0x00033214
   1c09c:	00037445 	.word	0x00037445
   1c0a0:	000373e2 	.word	0x000373e2
   1c0a4:	00037400 	.word	0x00037400
   1c0a8:	00037427 	.word	0x00037427

0001c0ac <bt_conn_send_cb>:
{
   1c0ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0b0:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1c0b2:	7b43      	ldrb	r3, [r0, #13]
{
   1c0b4:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c0b6:	2b07      	cmp	r3, #7
{
   1c0b8:	4688      	mov	r8, r1
   1c0ba:	4617      	mov	r7, r2
   1c0bc:	b085      	sub	sp, #20
	if (conn->state != BT_CONN_CONNECTED) {
   1c0be:	d00c      	beq.n	1c0da <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   1c0c0:	4b28      	ldr	r3, [pc, #160]	; (1c164 <bt_conn_send_cb+0xb8>)
   1c0c2:	2201      	movs	r2, #1
   1c0c4:	9302      	str	r3, [sp, #8]
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	4927      	ldr	r1, [pc, #156]	; (1c168 <bt_conn_send_cb+0xbc>)
   1c0ca:	4618      	mov	r0, r3
   1c0cc:	e9cd 3300 	strd	r3, r3, [sp]
   1c0d0:	f011 fd79 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   1c0d4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c0d8:	e01c      	b.n	1c114 <bt_conn_send_cb+0x68>
	if (cb) {
   1c0da:	2a00      	cmp	r2, #0
   1c0dc:	d03f      	beq.n	1c15e <bt_conn_send_cb+0xb2>
	return z_impl_z_current_get();
   1c0de:	f00a fb37 	bl	26750 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1c0e2:	4b22      	ldr	r3, [pc, #136]	; (1c16c <bt_conn_send_cb+0xc0>)
   1c0e4:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1c0e6:	4822      	ldr	r0, [pc, #136]	; (1c170 <bt_conn_send_cb+0xc4>)
   1c0e8:	bf07      	ittee	eq
   1c0ea:	2200      	moveq	r2, #0
   1c0ec:	2300      	moveq	r3, #0
   1c0ee:	f04f 32ff 	movne.w	r2, #4294967295
   1c0f2:	f04f 33ff 	movne.w	r3, #4294967295
   1c0f6:	f009 fdb9 	bl	25c6c <z_impl_k_queue_get>
   1c0fa:	4604      	mov	r4, r0
		if (!tx) {
   1c0fc:	b968      	cbnz	r0, 1c11a <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   1c0fe:	4b1d      	ldr	r3, [pc, #116]	; (1c174 <bt_conn_send_cb+0xc8>)
   1c100:	9000      	str	r0, [sp, #0]
   1c102:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1c106:	2201      	movs	r2, #1
   1c108:	4603      	mov	r3, r0
   1c10a:	4917      	ldr	r1, [pc, #92]	; (1c168 <bt_conn_send_cb+0xbc>)
   1c10c:	f011 fd5b 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   1c110:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1c114:	b005      	add	sp, #20
   1c116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1c11a:	7b73      	ldrb	r3, [r6, #13]
   1c11c:	2500      	movs	r5, #0
   1c11e:	2b07      	cmp	r3, #7
   1c120:	d011      	beq.n	1c146 <bt_conn_send_cb+0x9a>
			LOG_WRN("Disconnected while allocating context");
   1c122:	4b15      	ldr	r3, [pc, #84]	; (1c178 <bt_conn_send_cb+0xcc>)
   1c124:	4628      	mov	r0, r5
   1c126:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1c12a:	2202      	movs	r2, #2
   1c12c:	462b      	mov	r3, r5
   1c12e:	490e      	ldr	r1, [pc, #56]	; (1c168 <bt_conn_send_cb+0xbc>)
   1c130:	9500      	str	r5, [sp, #0]
   1c132:	f011 fd48 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
	k_fifo_put(&free_tx, tx);
   1c136:	4621      	mov	r1, r4
	tx->user_data = NULL;
   1c138:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1c13c:	480c      	ldr	r0, [pc, #48]	; (1c170 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1c13e:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1c140:	f015 f80b 	bl	3115a <k_queue_append>
}
   1c144:	e7c6      	b.n	1c0d4 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   1c146:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1c14a:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   1c14c:	f106 0038 	add.w	r0, r6, #56	; 0x38
   1c150:	4641      	mov	r1, r8
		tx_data(buf)->tx = tx;
   1c152:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   1c156:	f013 fa3e 	bl	2f5d6 <net_buf_put>
	return 0;
   1c15a:	2000      	movs	r0, #0
   1c15c:	e7da      	b.n	1c114 <bt_conn_send_cb+0x68>
   1c15e:	4614      	mov	r4, r2
   1c160:	e7f4      	b.n	1c14c <bt_conn_send_cb+0xa0>
   1c162:	bf00      	nop
   1c164:	00037460 	.word	0x00037460
   1c168:	00033214 	.word	0x00033214
   1c16c:	2000a580 	.word	0x2000a580
   1c170:	20008ee8 	.word	0x20008ee8
   1c174:	0003746f 	.word	0x0003746f
   1c178:	0003748d 	.word	0x0003748d

0001c17c <bt_conn_prepare_events>:
{
   1c17c:	b570      	push	{r4, r5, r6, lr}
   1c17e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   1c180:	4817      	ldr	r0, [pc, #92]	; (1c1e0 <bt_conn_prepare_events+0x64>)
   1c182:	f015 fc13 	bl	319ac <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1c186:	2200      	movs	r2, #0
   1c188:	2101      	movs	r1, #1
   1c18a:	4620      	mov	r0, r4
   1c18c:	4b14      	ldr	r3, [pc, #80]	; (1c1e0 <bt_conn_prepare_events+0x64>)
   1c18e:	f015 fbf0 	bl	31972 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1c192:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c196:	4b13      	ldr	r3, [pc, #76]	; (1c1e4 <bt_conn_prepare_events+0x68>)
   1c198:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   1c19c:	b90a      	cbnz	r2, 1c1a2 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1c19e:	2001      	movs	r0, #1
}
   1c1a0:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c1a2:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   1c1a6:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   1c1aa:	b953      	cbnz	r3, 1c1c2 <bt_conn_prepare_events+0x46>
   1c1ac:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1c1b0:	1d28      	adds	r0, r5, #4
   1c1b2:	f011 fcfd 	bl	2dbb0 <atomic_and>
   1c1b6:	0643      	lsls	r3, r0, #25
   1c1b8:	d503      	bpl.n	1c1c2 <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   1c1ba:	4628      	mov	r0, r5
   1c1bc:	f011 fd1e 	bl	2dbfc <conn_cleanup>
		return -ENOTCONN;
   1c1c0:	e7ed      	b.n	1c19e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1c1c2:	7b6b      	ldrb	r3, [r5, #13]
   1c1c4:	2b07      	cmp	r3, #7
   1c1c6:	d1ea      	bne.n	1c19e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   1c1c8:	4630      	mov	r0, r6
   1c1ca:	4b07      	ldr	r3, [pc, #28]	; (1c1e8 <bt_conn_prepare_events+0x6c>)
   1c1cc:	2200      	movs	r2, #0
   1c1ce:	2104      	movs	r1, #4
   1c1d0:	f015 fbcf 	bl	31972 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1c1d4:	2301      	movs	r3, #1
			ev_count++;
   1c1d6:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1c1d8:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   1c1dc:	e7e0      	b.n	1c1a0 <bt_conn_prepare_events+0x24>
   1c1de:	bf00      	nop
   1c1e0:	200085bc 	.word	0x200085bc
   1c1e4:	2000a18c 	.word	0x2000a18c
   1c1e8:	2000a108 	.word	0x2000a108

0001c1ec <bt_conn_lookup_handle>:
{
   1c1ec:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1c1ee:	2101      	movs	r1, #1
   1c1f0:	4801      	ldr	r0, [pc, #4]	; (1c1f8 <bt_conn_lookup_handle+0xc>)
   1c1f2:	f011 bd4e 	b.w	2dc92 <conn_lookup_handle>
   1c1f6:	bf00      	nop
   1c1f8:	2000a0d0 	.word	0x2000a0d0

0001c1fc <bt_conn_set_state>:
{
   1c1fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   1c1fe:	7b46      	ldrb	r6, [r0, #13]
{
   1c200:	4604      	mov	r4, r0
	if (conn->state == state) {
   1c202:	428e      	cmp	r6, r1
{
   1c204:	460d      	mov	r5, r1
	if (conn->state == state) {
   1c206:	d111      	bne.n	1c22c <bt_conn_set_state+0x30>
	switch (state) {
   1c208:	2e08      	cmp	r6, #8
   1c20a:	bf96      	itet	ls
   1c20c:	4b65      	ldrls	r3, [pc, #404]	; (1c3a4 <bt_conn_set_state+0x1a8>)
	if (conn->state == state) {
   1c20e:	4b66      	ldrhi	r3, [pc, #408]	; (1c3a8 <bt_conn_set_state+0x1ac>)
   1c210:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1c214:	9303      	str	r3, [sp, #12]
   1c216:	4b65      	ldr	r3, [pc, #404]	; (1c3ac <bt_conn_set_state+0x1b0>)
		LOG_WRN("no valid (%u) state was set", state);
   1c218:	9302      	str	r3, [sp, #8]
   1c21a:	2300      	movs	r3, #0
   1c21c:	2202      	movs	r2, #2
   1c21e:	4618      	mov	r0, r3
   1c220:	e9cd 3300 	strd	r3, r3, [sp]
   1c224:	4962      	ldr	r1, [pc, #392]	; (1c3b0 <bt_conn_set_state+0x1b4>)
   1c226:	f011 fcce 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
   1c22a:	e098      	b.n	1c35e <bt_conn_set_state+0x162>
	conn->state = state;
   1c22c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1c22e:	b926      	cbnz	r6, 1c23a <bt_conn_set_state+0x3e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1c230:	7883      	ldrb	r3, [r0, #2]
   1c232:	2b08      	cmp	r3, #8
   1c234:	d001      	beq.n	1c23a <bt_conn_set_state+0x3e>
			bt_conn_ref(conn);
   1c236:	f011 fd04 	bl	2dc42 <bt_conn_ref>
	switch (conn->state) {
   1c23a:	7b63      	ldrb	r3, [r4, #13]
   1c23c:	2b08      	cmp	r3, #8
   1c23e:	f200 80ad 	bhi.w	1c39c <bt_conn_set_state+0x1a0>
   1c242:	e8df f003 	tbb	[pc, r3]
   1c246:	053a      	.short	0x053a
   1c248:	8c8c8c8c 	.word	0x8c8c8c8c
   1c24c:	1c8c      	.short	0x1c8c
   1c24e:	8c          	.byte	0x8c
   1c24f:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   1c250:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1c252:	4d58      	ldr	r5, [pc, #352]	; (1c3b4 <bt_conn_set_state+0x1b8>)
	__asm__ volatile(
   1c254:	f04f 0220 	mov.w	r2, #32
   1c258:	f3ef 8311 	mrs	r3, BASEPRI
   1c25c:	f382 8812 	msr	BASEPRI_MAX, r2
   1c260:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1c264:	69e2      	ldr	r2, [r4, #28]
   1c266:	2a00      	cmp	r2, #0
   1c268:	d073      	beq.n	1c352 <bt_conn_set_state+0x156>
			conn->pending_no_cb--;
   1c26a:	3a01      	subs	r2, #1
   1c26c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1c26e:	f383 8811 	msr	BASEPRI, r3
   1c272:	f3bf 8f6f 	isb	sy
   1c276:	4628      	mov	r0, r5
   1c278:	f009 fd2c 	bl	25cd4 <z_impl_k_sem_give>
}
   1c27c:	e7ea      	b.n	1c254 <bt_conn_set_state+0x58>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c27e:	78a3      	ldrb	r3, [r4, #2]
   1c280:	2b04      	cmp	r3, #4
   1c282:	d06c      	beq.n	1c35e <bt_conn_set_state+0x162>
	z_impl_k_queue_init(queue);
   1c284:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1c288:	f014 ff5b 	bl	31142 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1c28c:	2100      	movs	r1, #0
   1c28e:	484a      	ldr	r0, [pc, #296]	; (1c3b8 <bt_conn_set_state+0x1bc>)
   1c290:	f00a fd44 	bl	26d1c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1c294:	2300      	movs	r3, #0
	list->tail = NULL;
   1c296:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c29a:	78e3      	ldrb	r3, [r4, #3]
   1c29c:	2b01      	cmp	r3, #1
   1c29e:	d15e      	bne.n	1c35e <bt_conn_set_state+0x162>
			conn->le.conn_param_retry_countdown =
   1c2a0:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   1c2a2:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   1c2a6:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1c2aa:	2300      	movs	r3, #0
   1c2ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   1c2b0:	b004      	add	sp, #16
   1c2b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   1c2b6:	f009 bf2f 	b.w	26118 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1c2ba:	78a3      	ldrb	r3, [r4, #2]
   1c2bc:	2b04      	cmp	r3, #4
   1c2be:	d105      	bne.n	1c2cc <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
   1c2c0:	4620      	mov	r0, r4
}
   1c2c2:	b004      	add	sp, #16
   1c2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1c2c8:	f011 bccf 	b.w	2dc6a <bt_conn_unref>
		switch (old_state) {
   1c2cc:	2e08      	cmp	r6, #8
   1c2ce:	d846      	bhi.n	1c35e <bt_conn_set_state+0x162>
   1c2d0:	a301      	add	r3, pc, #4	; (adr r3, 1c2d8 <bt_conn_set_state+0xdc>)
   1c2d2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1c2d6:	bf00      	nop
   1c2d8:	0001c34d 	.word	0x0001c34d
   1c2dc:	0001c2fd 	.word	0x0001c2fd
   1c2e0:	0001c33f 	.word	0x0001c33f
   1c2e4:	0001c2c1 	.word	0x0001c2c1
   1c2e8:	0001c2c1 	.word	0x0001c2c1
   1c2ec:	0001c33f 	.word	0x0001c33f
   1c2f0:	0001c33f 	.word	0x0001c33f
   1c2f4:	0001c35f 	.word	0x0001c35f
   1c2f8:	0001c34d 	.word	0x0001c34d
			tx_notify(conn);
   1c2fc:	4620      	mov	r0, r4
   1c2fe:	f7ff fd31 	bl	1bd64 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c302:	78a3      	ldrb	r3, [r4, #2]
   1c304:	2b01      	cmp	r3, #1
   1c306:	d10a      	bne.n	1c31e <bt_conn_set_state+0x122>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1c308:	f104 0558 	add.w	r5, r4, #88	; 0x58
   1c30c:	4628      	mov	r0, r5
   1c30e:	f015 f80b 	bl	31328 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1c312:	f010 0f0c 	tst.w	r0, #12
   1c316:	d002      	beq.n	1c31e <bt_conn_set_state+0x122>
				k_work_cancel_delayable(&conn->deferred_work);
   1c318:	4628      	mov	r0, r5
   1c31a:	f015 f807 	bl	3132c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c31e:	3404      	adds	r4, #4
   1c320:	e8d4 3fef 	ldaex	r3, [r4]
   1c324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c328:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1c32c:	2a00      	cmp	r2, #0
   1c32e:	d1f7      	bne.n	1c320 <bt_conn_set_state+0x124>
   1c330:	2100      	movs	r1, #0
   1c332:	4821      	ldr	r0, [pc, #132]	; (1c3b8 <bt_conn_set_state+0x1bc>)
}
   1c334:	b004      	add	sp, #16
   1c336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c33a:	f00a bcef 	b.w	26d1c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1c33e:	7b23      	ldrb	r3, [r4, #12]
   1c340:	2b00      	cmp	r3, #0
   1c342:	d0bd      	beq.n	1c2c0 <bt_conn_set_state+0xc4>
				notify_connected(conn);
   1c344:	4620      	mov	r0, r4
   1c346:	f7ff fcef 	bl	1bd28 <notify_connected>
   1c34a:	e7b9      	b.n	1c2c0 <bt_conn_set_state+0xc4>
			LOG_WRN("Invalid (%u) old state", state);
   1c34c:	4b1b      	ldr	r3, [pc, #108]	; (1c3bc <bt_conn_set_state+0x1c0>)
   1c34e:	9503      	str	r5, [sp, #12]
   1c350:	e762      	b.n	1c218 <bt_conn_set_state+0x1c>
	return list->head;
   1c352:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1c354:	b929      	cbnz	r1, 1c362 <bt_conn_set_state+0x166>
   1c356:	f383 8811 	msr	BASEPRI, r3
   1c35a:	f3bf 8f6f 	isb	sy
}
   1c35e:	b004      	add	sp, #16
   1c360:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c362:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1c364:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c366:	4281      	cmp	r1, r0
	list->tail = node;
   1c368:	bf08      	it	eq
   1c36a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   1c36c:	6162      	str	r2, [r4, #20]
   1c36e:	f383 8811 	msr	BASEPRI, r3
   1c372:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c376:	f04f 0220 	mov.w	r2, #32
   1c37a:	f3ef 8311 	mrs	r3, BASEPRI
   1c37e:	f382 8812 	msr	BASEPRI_MAX, r2
   1c382:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1c386:	68ca      	ldr	r2, [r1, #12]
   1c388:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1c38a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1c38c:	f383 8811 	msr	BASEPRI, r3
   1c390:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1c394:	4620      	mov	r0, r4
   1c396:	f7ff fd15 	bl	1bdc4 <conn_tx_destroy>
   1c39a:	e76c      	b.n	1c276 <bt_conn_set_state+0x7a>
		LOG_WRN("no valid (%u) state was set", state);
   1c39c:	4b08      	ldr	r3, [pc, #32]	; (1c3c0 <bt_conn_set_state+0x1c4>)
   1c39e:	9503      	str	r5, [sp, #12]
   1c3a0:	e73a      	b.n	1c218 <bt_conn_set_state+0x1c>
   1c3a2:	bf00      	nop
   1c3a4:	00033e94 	.word	0x00033e94
   1c3a8:	000374b3 	.word	0x000374b3
   1c3ac:	000374bd 	.word	0x000374bd
   1c3b0:	00033214 	.word	0x00033214
   1c3b4:	20008100 	.word	0x20008100
   1c3b8:	200085bc 	.word	0x200085bc
   1c3bc:	000374ce 	.word	0x000374ce
   1c3c0:	000374e5 	.word	0x000374e5

0001c3c4 <bt_conn_index>:
		index = conn - acl_conns;
   1c3c4:	4b03      	ldr	r3, [pc, #12]	; (1c3d4 <bt_conn_index+0x10>)
   1c3c6:	1ac0      	subs	r0, r0, r3
   1c3c8:	4b03      	ldr	r3, [pc, #12]	; (1c3d8 <bt_conn_index+0x14>)
   1c3ca:	1180      	asrs	r0, r0, #6
   1c3cc:	4358      	muls	r0, r3
}
   1c3ce:	b2c0      	uxtb	r0, r0
   1c3d0:	4770      	bx	lr
   1c3d2:	bf00      	nop
   1c3d4:	2000a0d0 	.word	0x2000a0d0
   1c3d8:	aaaaaaab 	.word	0xaaaaaaab

0001c3dc <bt_conn_create_pdu_timeout>:
{
   1c3dc:	b530      	push	{r4, r5, lr}
   1c3de:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   1c3e0:	490c      	ldr	r1, [pc, #48]	; (1c414 <bt_conn_create_pdu_timeout+0x38>)
   1c3e2:	b085      	sub	sp, #20
   1c3e4:	2800      	cmp	r0, #0
   1c3e6:	bf08      	it	eq
   1c3e8:	4608      	moveq	r0, r1
   1c3ea:	f013 f8bc 	bl	2f566 <net_buf_alloc_fixed>
	if (!buf) {
   1c3ee:	4604      	mov	r4, r0
   1c3f0:	b958      	cbnz	r0, 1c40a <bt_conn_create_pdu_timeout+0x2e>
		LOG_WRN("Unable to allocate buffer within timeout");
   1c3f2:	4b09      	ldr	r3, [pc, #36]	; (1c418 <bt_conn_create_pdu_timeout+0x3c>)
   1c3f4:	2202      	movs	r2, #2
   1c3f6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1c3fa:	4908      	ldr	r1, [pc, #32]	; (1c41c <bt_conn_create_pdu_timeout+0x40>)
   1c3fc:	4603      	mov	r3, r0
   1c3fe:	9000      	str	r0, [sp, #0]
   1c400:	f011 fbe1 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
}
   1c404:	4620      	mov	r0, r4
   1c406:	b005      	add	sp, #20
   1c408:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1c40a:	1d69      	adds	r1, r5, #5
   1c40c:	300c      	adds	r0, #12
   1c40e:	f013 f8b1 	bl	2f574 <net_buf_simple_reserve>
	return buf;
   1c412:	e7f7      	b.n	1c404 <bt_conn_create_pdu_timeout+0x28>
   1c414:	20008f2c 	.word	0x20008f2c
   1c418:	00037501 	.word	0x00037501
   1c41c:	00033214 	.word	0x00033214

0001c420 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c422:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c424:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c426:	e8d0 3faf 	lda	r3, [r0]
   1c42a:	059b      	lsls	r3, r3, #22
   1c42c:	d511      	bpl.n	1c452 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1c42e:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1c432:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   1c436:	429a      	cmp	r2, r3
   1c438:	d80b      	bhi.n	1c452 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1c43a:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   1c43e:	429a      	cmp	r2, r3
   1c440:	d307      	bcc.n	1c452 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1c442:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   1c446:	429a      	cmp	r2, r3
   1c448:	d103      	bne.n	1c452 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c44a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1c44e:	f011 fbaf 	bl	2dbb0 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c452:	4b10      	ldr	r3, [pc, #64]	; (1c494 <notify_le_param_updated+0x74>)
   1c454:	681d      	ldr	r5, [r3, #0]
   1c456:	b925      	cbnz	r5, 1c462 <notify_le_param_updated+0x42>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c458:	4d0f      	ldr	r5, [pc, #60]	; (1c498 <notify_le_param_updated+0x78>)
   1c45a:	4f10      	ldr	r7, [pc, #64]	; (1c49c <notify_le_param_updated+0x7c>)
   1c45c:	42bd      	cmp	r5, r7
   1c45e:	d30c      	bcc.n	1c47a <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1c460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1c462:	68ee      	ldr	r6, [r5, #12]
   1c464:	b13e      	cbz	r6, 1c476 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   1c466:	4620      	mov	r0, r4
   1c468:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c46c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c470:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c474:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1c476:	69ad      	ldr	r5, [r5, #24]
   1c478:	e7ed      	b.n	1c456 <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   1c47a:	68ee      	ldr	r6, [r5, #12]
   1c47c:	b13e      	cbz	r6, 1c48e <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   1c47e:	4620      	mov	r0, r4
   1c480:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1c484:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1c488:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1c48c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c48e:	351c      	adds	r5, #28
   1c490:	e7e4      	b.n	1c45c <notify_le_param_updated+0x3c>
   1c492:	bf00      	nop
   1c494:	20030a28 	.word	0x20030a28
   1c498:	000331a0 	.word	0x000331a0
   1c49c:	000331bc 	.word	0x000331bc

0001c4a0 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4a4:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1c4a6:	4608      	mov	r0, r1
{
   1c4a8:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1c4aa:	f011 f8e9 	bl	2d680 <bt_le_conn_params_valid>
   1c4ae:	4605      	mov	r5, r0
   1c4b0:	b918      	cbnz	r0, 1c4ba <le_param_req+0x1a>
		return false;
   1c4b2:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1c4ba:	4b13      	ldr	r3, [pc, #76]	; (1c508 <le_param_req+0x68>)
   1c4bc:	681e      	ldr	r6, [r3, #0]
   1c4be:	b946      	cbnz	r6, 1c4d2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c4c0:	4e12      	ldr	r6, [pc, #72]	; (1c50c <le_param_req+0x6c>)
   1c4c2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1c510 <le_param_req+0x70>
   1c4c6:	4546      	cmp	r6, r8
   1c4c8:	d2f4      	bcs.n	1c4b4 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1c4ca:	68b3      	ldr	r3, [r6, #8]
   1c4cc:	b983      	cbnz	r3, 1c4f0 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c4ce:	361c      	adds	r6, #28
   1c4d0:	e7f9      	b.n	1c4c6 <le_param_req+0x26>
		if (!cb->le_param_req) {
   1c4d2:	68b3      	ldr	r3, [r6, #8]
   1c4d4:	b90b      	cbnz	r3, 1c4da <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c4d6:	69b6      	ldr	r6, [r6, #24]
   1c4d8:	e7f1      	b.n	1c4be <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1c4da:	4621      	mov	r1, r4
   1c4dc:	4638      	mov	r0, r7
   1c4de:	4798      	blx	r3
   1c4e0:	2800      	cmp	r0, #0
   1c4e2:	d0e6      	beq.n	1c4b2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	f011 f8cb 	bl	2d680 <bt_le_conn_params_valid>
   1c4ea:	2800      	cmp	r0, #0
   1c4ec:	d1f3      	bne.n	1c4d6 <le_param_req+0x36>
   1c4ee:	e7e0      	b.n	1c4b2 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1c4f0:	4621      	mov	r1, r4
   1c4f2:	4638      	mov	r0, r7
   1c4f4:	4798      	blx	r3
   1c4f6:	2800      	cmp	r0, #0
   1c4f8:	d0db      	beq.n	1c4b2 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1c4fa:	4620      	mov	r0, r4
   1c4fc:	f011 f8c0 	bl	2d680 <bt_le_conn_params_valid>
   1c500:	2800      	cmp	r0, #0
   1c502:	d1e4      	bne.n	1c4ce <le_param_req+0x2e>
   1c504:	e7d5      	b.n	1c4b2 <le_param_req+0x12>
   1c506:	bf00      	nop
   1c508:	20030a28 	.word	0x20030a28
   1c50c:	000331a0 	.word	0x000331a0
   1c510:	000331bc 	.word	0x000331bc

0001c514 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   1c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c518:	78c3      	ldrb	r3, [r0, #3]
{
   1c51a:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1c51c:	b973      	cbnz	r3, 1c53c <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   1c51e:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c522:	4b10      	ldr	r3, [pc, #64]	; (1c564 <bt_conn_identity_resolved+0x50>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c524:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   1c528:	681d      	ldr	r5, [r3, #0]
   1c52a:	b955      	cbnz	r5, 1c542 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c52c:	4d0e      	ldr	r5, [pc, #56]	; (1c568 <bt_conn_identity_resolved+0x54>)
   1c52e:	4f0f      	ldr	r7, [pc, #60]	; (1c56c <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c530:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c534:	42bd      	cmp	r5, r7
   1c536:	d30c      	bcc.n	1c552 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   1c538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   1c53c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   1c540:	e7ef      	b.n	1c522 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   1c542:	692b      	ldr	r3, [r5, #16]
   1c544:	b11b      	cbz	r3, 1c54e <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c546:	463a      	mov	r2, r7
   1c548:	4631      	mov	r1, r6
   1c54a:	4620      	mov	r0, r4
   1c54c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c54e:	69ad      	ldr	r5, [r5, #24]
   1c550:	e7eb      	b.n	1c52a <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1c552:	692b      	ldr	r3, [r5, #16]
   1c554:	b11b      	cbz	r3, 1c55e <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1c556:	4642      	mov	r2, r8
   1c558:	4631      	mov	r1, r6
   1c55a:	4620      	mov	r0, r4
   1c55c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c55e:	351c      	adds	r5, #28
   1c560:	e7e8      	b.n	1c534 <bt_conn_identity_resolved+0x20>
   1c562:	bf00      	nop
   1c564:	20030a28 	.word	0x20030a28
   1c568:	000331a0 	.word	0x000331a0
   1c56c:	000331bc 	.word	0x000331bc

0001c570 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   1c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1c572:	7a43      	ldrb	r3, [r0, #9]
{
   1c574:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1c576:	7283      	strb	r3, [r0, #10]
{
   1c578:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1c57a:	f011 fc8b 	bl	2de94 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1c57e:	4b0c      	ldr	r3, [pc, #48]	; (1c5b0 <bt_conn_security_changed+0x40>)
   1c580:	681d      	ldr	r5, [r3, #0]
   1c582:	b925      	cbnz	r5, 1c58e <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c584:	4d0b      	ldr	r5, [pc, #44]	; (1c5b4 <bt_conn_security_changed+0x44>)
   1c586:	4f0c      	ldr	r7, [pc, #48]	; (1c5b8 <bt_conn_security_changed+0x48>)
   1c588:	42bd      	cmp	r5, r7
   1c58a:	d308      	bcc.n	1c59e <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   1c58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   1c58e:	696b      	ldr	r3, [r5, #20]
   1c590:	b11b      	cbz	r3, 1c59a <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   1c592:	4632      	mov	r2, r6
   1c594:	4620      	mov	r0, r4
   1c596:	7a61      	ldrb	r1, [r4, #9]
   1c598:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c59a:	69ad      	ldr	r5, [r5, #24]
   1c59c:	e7f1      	b.n	1c582 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   1c59e:	696b      	ldr	r3, [r5, #20]
   1c5a0:	b11b      	cbz	r3, 1c5aa <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   1c5a2:	4632      	mov	r2, r6
   1c5a4:	4620      	mov	r0, r4
   1c5a6:	7a61      	ldrb	r1, [r4, #9]
   1c5a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c5aa:	351c      	adds	r5, #28
   1c5ac:	e7ec      	b.n	1c588 <bt_conn_security_changed+0x18>
   1c5ae:	bf00      	nop
   1c5b0:	20030a28 	.word	0x20030a28
   1c5b4:	000331a0 	.word	0x000331a0
   1c5b8:	000331bc 	.word	0x000331bc

0001c5bc <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1c5bc:	b538      	push	{r3, r4, r5, lr}
   1c5be:	4605      	mov	r5, r0
   1c5c0:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1c5c2:	480b      	ldr	r0, [pc, #44]	; (1c5f0 <bt_conn_add_le+0x34>)
   1c5c4:	2101      	movs	r1, #1
   1c5c6:	f7ff fcaf 	bl	1bf28 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1c5ca:	b180      	cbz	r0, 1c5ee <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   1c5cc:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c5ce:	6823      	ldr	r3, [r4, #0]
   1c5d0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   1c5d4:	88a3      	ldrh	r3, [r4, #4]
   1c5d6:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   1c5da:	79a3      	ldrb	r3, [r4, #6]
   1c5dc:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   1c5e0:	2301      	movs	r3, #1
   1c5e2:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   1c5e4:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1c5e6:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1c5e8:	4b02      	ldr	r3, [pc, #8]	; (1c5f4 <bt_conn_add_le+0x38>)
   1c5ea:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1c5ee:	bd38      	pop	{r3, r4, r5, pc}
   1c5f0:	2000a0d0 	.word	0x2000a0d0
   1c5f4:	00280018 	.word	0x00280018

0001c5f8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1c5f8:	b570      	push	{r4, r5, r6, lr}
   1c5fa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c5fc:	480a      	ldr	r0, [pc, #40]	; (1c628 <bt_conn_lookup_addr_le+0x30>)
{
   1c5fe:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c600:	f011 fb1f 	bl	2dc42 <bt_conn_ref>
   1c604:	4604      	mov	r4, r0

		if (!conn) {
   1c606:	b120      	cbz	r0, 1c612 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1c608:	7883      	ldrb	r3, [r0, #2]
   1c60a:	2b01      	cmp	r3, #1
   1c60c:	d004      	beq.n	1c618 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   1c60e:	f011 fb2c 	bl	2dc6a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1c612:	2400      	movs	r4, #0
}
   1c614:	4620      	mov	r0, r4
   1c616:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c618:	4632      	mov	r2, r6
   1c61a:	4629      	mov	r1, r5
   1c61c:	f011 fbb2 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1c620:	2800      	cmp	r0, #0
   1c622:	d1f7      	bne.n	1c614 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1c624:	4620      	mov	r0, r4
   1c626:	e7f2      	b.n	1c60e <bt_conn_lookup_addr_le+0x16>
   1c628:	2000a0d0 	.word	0x2000a0d0

0001c62c <bt_conn_exists_le>:
{
   1c62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1c62e:	f7ff ffe3 	bl	1c5f8 <bt_conn_lookup_addr_le>
	if (conn) {
   1c632:	4604      	mov	r4, r0
   1c634:	b1a8      	cbz	r0, 1c662 <bt_conn_exists_le+0x36>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1c636:	7b43      	ldrb	r3, [r0, #13]
   1c638:	490b      	ldr	r1, [pc, #44]	; (1c668 <bt_conn_exists_le+0x3c>)
   1c63a:	2b08      	cmp	r3, #8
   1c63c:	bf96      	itet	ls
   1c63e:	4a0b      	ldrls	r2, [pc, #44]	; (1c66c <bt_conn_exists_le+0x40>)
   1c640:	4b0b      	ldrhi	r3, [pc, #44]	; (1c670 <bt_conn_exists_le+0x44>)
   1c642:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1c646:	2202      	movs	r2, #2
   1c648:	9303      	str	r3, [sp, #12]
   1c64a:	4b0a      	ldr	r3, [pc, #40]	; (1c674 <bt_conn_exists_le+0x48>)
   1c64c:	9302      	str	r3, [sp, #8]
   1c64e:	2300      	movs	r3, #0
   1c650:	4618      	mov	r0, r3
   1c652:	e9cd 3300 	strd	r3, r3, [sp]
   1c656:	f011 fab6 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   1c65a:	4620      	mov	r0, r4
   1c65c:	f011 fb05 	bl	2dc6a <bt_conn_unref>
		return true;
   1c660:	2001      	movs	r0, #1
}
   1c662:	b004      	add	sp, #16
   1c664:	bd10      	pop	{r4, pc}
   1c666:	bf00      	nop
   1c668:	00033214 	.word	0x00033214
   1c66c:	00033e94 	.word	0x00033e94
   1c670:	000374b3 	.word	0x000374b3
   1c674:	0003752a 	.word	0x0003752a

0001c678 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c67a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c67c:	480e      	ldr	r0, [pc, #56]	; (1c6b8 <bt_conn_lookup_state_le+0x40>)
{
   1c67e:	460e      	mov	r6, r1
   1c680:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1c682:	f011 fade 	bl	2dc42 <bt_conn_ref>

		if (!conn) {
   1c686:	4604      	mov	r4, r0
   1c688:	b120      	cbz	r0, 1c694 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1c68a:	7883      	ldrb	r3, [r0, #2]
   1c68c:	2b01      	cmp	r3, #1
   1c68e:	d003      	beq.n	1c698 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1c690:	f011 faeb 	bl	2dc6a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1c694:	2400      	movs	r4, #0
   1c696:	e00d      	b.n	1c6b4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1c698:	b136      	cbz	r6, 1c6a8 <bt_conn_lookup_state_le+0x30>
   1c69a:	4632      	mov	r2, r6
   1c69c:	4629      	mov	r1, r5
   1c69e:	f011 fb71 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1c6a2:	b908      	cbnz	r0, 1c6a8 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1c6a4:	4620      	mov	r0, r4
   1c6a6:	e7f3      	b.n	1c690 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1c6a8:	7b63      	ldrb	r3, [r4, #13]
   1c6aa:	42bb      	cmp	r3, r7
   1c6ac:	d1fa      	bne.n	1c6a4 <bt_conn_lookup_state_le+0x2c>
   1c6ae:	7a23      	ldrb	r3, [r4, #8]
   1c6b0:	42ab      	cmp	r3, r5
   1c6b2:	d1f7      	bne.n	1c6a4 <bt_conn_lookup_state_le+0x2c>
}
   1c6b4:	4620      	mov	r0, r4
   1c6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6b8:	2000a0d0 	.word	0x2000a0d0

0001c6bc <send_conn_le_param_update>:
{
   1c6bc:	b538      	push	{r3, r4, r5, lr}
   1c6be:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1c6c0:	4608      	mov	r0, r1
{
   1c6c2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1c6c4:	f010 ffdc 	bl	2d680 <bt_le_conn_params_valid>
   1c6c8:	b338      	cbz	r0, 1c71a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c6ca:	4b15      	ldr	r3, [pc, #84]	; (1c720 <send_conn_le_param_update+0x64>)
   1c6cc:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1c6d0:	0799      	lsls	r1, r3, #30
   1c6d2:	d407      	bmi.n	1c6e4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1c6d4:	78e3      	ldrb	r3, [r4, #3]
   1c6d6:	b173      	cbz	r3, 1c6f6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1c6d8:	4629      	mov	r1, r5
   1c6da:	4620      	mov	r0, r4
}
   1c6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1c6e0:	f000 bacc 	b.w	1cc7c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1c6e4:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   1c6e8:	079a      	lsls	r2, r3, #30
   1c6ea:	d5f3      	bpl.n	1c6d4 <send_conn_le_param_update+0x18>
   1c6ec:	1d23      	adds	r3, r4, #4
   1c6ee:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1c6f2:	055b      	lsls	r3, r3, #21
   1c6f4:	d4ee      	bmi.n	1c6d4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1c6f6:	4629      	mov	r1, r5
   1c6f8:	4620      	mov	r0, r4
   1c6fa:	f011 fb65 	bl	2ddc8 <bt_conn_le_conn_update>
		if (rc == 0) {
   1c6fe:	b958      	cbnz	r0, 1c718 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1c700:	882b      	ldrh	r3, [r5, #0]
   1c702:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1c706:	886b      	ldrh	r3, [r5, #2]
   1c708:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1c70c:	88ab      	ldrh	r3, [r5, #4]
   1c70e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1c712:	88eb      	ldrh	r3, [r5, #6]
   1c714:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   1c718:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c71a:	f06f 0015 	mvn.w	r0, #21
   1c71e:	e7fb      	b.n	1c718 <send_conn_le_param_update+0x5c>
   1c720:	20008000 	.word	0x20008000

0001c724 <deferred_work>:
{
   1c724:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c726:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   1c72a:	4604      	mov	r4, r0
   1c72c:	b087      	sub	sp, #28
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1c72e:	f1a0 0758 	sub.w	r7, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1c732:	b9fb      	cbnz	r3, 1c774 <deferred_work+0x50>
		bt_l2cap_disconnected(conn);
   1c734:	4638      	mov	r0, r7
   1c736:	f011 fb95 	bl	2de64 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1c73a:	4b34      	ldr	r3, [pc, #208]	; (1c80c <deferred_work+0xe8>)
   1c73c:	681d      	ldr	r5, [r3, #0]
   1c73e:	b94d      	cbnz	r5, 1c754 <deferred_work+0x30>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c740:	4d33      	ldr	r5, [pc, #204]	; (1c810 <deferred_work+0xec>)
   1c742:	4e34      	ldr	r6, [pc, #208]	; (1c814 <deferred_work+0xf0>)
   1c744:	42b5      	cmp	r5, r6
   1c746:	d30d      	bcc.n	1c764 <deferred_work+0x40>
		bt_conn_unref(conn);
   1c748:	4638      	mov	r0, r7
}
   1c74a:	b007      	add	sp, #28
   1c74c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1c750:	f011 ba8b 	b.w	2dc6a <bt_conn_unref>
		if (cb->disconnected) {
   1c754:	686b      	ldr	r3, [r5, #4]
   1c756:	b11b      	cbz	r3, 1c760 <deferred_work+0x3c>
			cb->disconnected(conn, conn->err);
   1c758:	4638      	mov	r0, r7
   1c75a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1c75e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1c760:	69ad      	ldr	r5, [r5, #24]
   1c762:	e7ec      	b.n	1c73e <deferred_work+0x1a>
		if (cb->disconnected) {
   1c764:	686b      	ldr	r3, [r5, #4]
   1c766:	b11b      	cbz	r3, 1c770 <deferred_work+0x4c>
			cb->disconnected(conn, conn->err);
   1c768:	4638      	mov	r0, r7
   1c76a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   1c76e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1c770:	351c      	adds	r5, #28
   1c772:	e7e7      	b.n	1c744 <deferred_work+0x20>
	if (conn->type != BT_CONN_TYPE_LE) {
   1c774:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1c778:	2b01      	cmp	r3, #1
   1c77a:	d11f      	bne.n	1c7bc <deferred_work+0x98>
	if (atomic_test_and_clear_bit(conn->flags,
   1c77c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c780:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1c784:	4628      	mov	r0, r5
   1c786:	f011 fa13 	bl	2dbb0 <atomic_and>
   1c78a:	f410 7600 	ands.w	r6, r0, #512	; 0x200
   1c78e:	d023      	beq.n	1c7d8 <deferred_work+0xb4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c790:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   1c792:	4638      	mov	r0, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c794:	9304      	str	r3, [sp, #16]
   1c796:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   1c798:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1c79a:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   1c79c:	f7ff ff8e 	bl	1c6bc <send_conn_le_param_update>
		if (!err) {
   1c7a0:	b970      	cbnz	r0, 1c7c0 <deferred_work+0x9c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c7a2:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1c7a6:	4628      	mov	r0, r5
   1c7a8:	f011 fa02 	bl	2dbb0 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c7ac:	e8d5 3fef 	ldaex	r3, [r5]
   1c7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1c7b4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c7b8:	2a00      	cmp	r2, #0
   1c7ba:	d1f7      	bne.n	1c7ac <deferred_work+0x88>
}
   1c7bc:	b007      	add	sp, #28
   1c7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1c7c0:	4b15      	ldr	r3, [pc, #84]	; (1c818 <deferred_work+0xf4>)
   1c7c2:	9003      	str	r0, [sp, #12]
   1c7c4:	9302      	str	r3, [sp, #8]
   1c7c6:	2300      	movs	r3, #0
   1c7c8:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_WRN("Send auto LE param update failed (err %d)",
   1c7cc:	2202      	movs	r2, #2
   1c7ce:	4618      	mov	r0, r3
   1c7d0:	4912      	ldr	r1, [pc, #72]	; (1c81c <deferred_work+0xf8>)
   1c7d2:	f011 f9f8 	bl	2dbc6 <z_log_msg_runtime_create.constprop.0>
   1c7d6:	e7e9      	b.n	1c7ac <deferred_work+0x88>
		param = BT_LE_CONN_PARAM(
   1c7d8:	4a11      	ldr	r2, [pc, #68]	; (1c820 <deferred_work+0xfc>)
   1c7da:	ab04      	add	r3, sp, #16
   1c7dc:	6810      	ldr	r0, [r2, #0]
   1c7de:	6851      	ldr	r1, [r2, #4]
   1c7e0:	c303      	stmia	r3!, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   1c7e2:	4638      	mov	r0, r7
   1c7e4:	a904      	add	r1, sp, #16
   1c7e6:	f7ff ff69 	bl	1c6bc <send_conn_le_param_update>
		if (!err) {
   1c7ea:	b940      	cbnz	r0, 1c7fe <deferred_work+0xda>
   1c7ec:	e8d5 3fef 	ldaex	r3, [r5]
   1c7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1c7f4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1c7f8:	2a00      	cmp	r2, #0
   1c7fa:	d0d7      	beq.n	1c7ac <deferred_work+0x88>
   1c7fc:	e7f6      	b.n	1c7ec <deferred_work+0xc8>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1c7fe:	4b09      	ldr	r3, [pc, #36]	; (1c824 <deferred_work+0x100>)
   1c800:	9003      	str	r0, [sp, #12]
   1c802:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1c806:	9600      	str	r6, [sp, #0]
   1c808:	4633      	mov	r3, r6
   1c80a:	e7df      	b.n	1c7cc <deferred_work+0xa8>
   1c80c:	20030a28 	.word	0x20030a28
   1c810:	000331a0 	.word	0x000331a0
   1c814:	000331bc 	.word	0x000331bc
   1c818:	0003754d 	.word	0x0003754d
   1c81c:	00033214 	.word	0x00033214
   1c820:	000333f0 	.word	0x000333f0
   1c824:	00037572 	.word	0x00037572

0001c828 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1c828:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1c82a:	4801      	ldr	r0, [pc, #4]	; (1c830 <bt_conn_create_frag_timeout+0x8>)
   1c82c:	f7ff bdd6 	b.w	1c3dc <bt_conn_create_pdu_timeout>
   1c830:	20008fb0 	.word	0x20008fb0

0001c834 <create_frag>:
{
   1c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c838:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1c83a:	f04f 33ff 	mov.w	r3, #4294967295
   1c83e:	f04f 32ff 	mov.w	r2, #4294967295
   1c842:	2000      	movs	r0, #0
{
   1c844:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1c846:	f7ff ffef 	bl	1c828 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1c84a:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   1c84c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c84e:	2b07      	cmp	r3, #7
   1c850:	f04f 0600 	mov.w	r6, #0
   1c854:	d005      	beq.n	1c862 <create_frag+0x2e>
		net_buf_unref(frag);
   1c856:	f003 ff9b 	bl	20790 <net_buf_unref>
		return NULL;
   1c85a:	4635      	mov	r5, r6
}
   1c85c:	4628      	mov	r0, r5
   1c85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1c862:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   1c864:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   1c868:	4e0c      	ldr	r6, [pc, #48]	; (1c89c <create_frag+0x68>)
   1c86a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c86c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1c870:	f012 ff1d 	bl	2f6ae <net_buf_simple_tailroom>
   1c874:	4580      	cmp	r8, r0
   1c876:	d20c      	bcs.n	1c892 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1c878:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1c87c:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   1c880:	4632      	mov	r2, r6
   1c882:	4638      	mov	r0, r7
   1c884:	f012 fed5 	bl	2f632 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1c888:	4631      	mov	r1, r6
   1c88a:	4620      	mov	r0, r4
   1c88c:	f012 fef3 	bl	2f676 <net_buf_simple_pull>
   1c890:	e7e4      	b.n	1c85c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1c892:	4638      	mov	r0, r7
   1c894:	f012 ff0b 	bl	2f6ae <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1c898:	b286      	uxth	r6, r0
   1c89a:	e7ef      	b.n	1c87c <create_frag+0x48>
   1c89c:	20008000 	.word	0x20008000

0001c8a0 <bt_conn_process_tx>:
{
   1c8a0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c8a2:	7b43      	ldrb	r3, [r0, #13]
{
   1c8a4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1c8a6:	b95b      	cbnz	r3, 1c8c0 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c8a8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1c8ac:	3004      	adds	r0, #4
   1c8ae:	f011 f97f 	bl	2dbb0 <atomic_and>
   1c8b2:	0643      	lsls	r3, r0, #25
   1c8b4:	d504      	bpl.n	1c8c0 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   1c8b6:	4620      	mov	r0, r4
}
   1c8b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1c8bc:	f011 b99e 	b.w	2dbfc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1c8c0:	2200      	movs	r2, #0
   1c8c2:	2300      	movs	r3, #0
   1c8c4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1c8c8:	f012 fe52 	bl	2f570 <net_buf_get>
	BT_ASSERT(buf);
   1c8cc:	4605      	mov	r5, r0
   1c8ce:	b960      	cbnz	r0, 1c8ea <bt_conn_process_tx+0x4a>
   1c8d0:	f240 331a 	movw	r3, #794	; 0x31a
   1c8d4:	4a22      	ldr	r2, [pc, #136]	; (1c960 <bt_conn_process_tx+0xc0>)
   1c8d6:	4923      	ldr	r1, [pc, #140]	; (1c964 <bt_conn_process_tx+0xc4>)
   1c8d8:	4823      	ldr	r0, [pc, #140]	; (1c968 <bt_conn_process_tx+0xc8>)
   1c8da:	f00e f8a7 	bl	2aa2c <assert_print>
   1c8de:	4040      	eors	r0, r0
   1c8e0:	f380 8811 	msr	BASEPRI, r0
   1c8e4:	f04f 0003 	mov.w	r0, #3
   1c8e8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1c8ea:	4e20      	ldr	r6, [pc, #128]	; (1c96c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1c8ec:	8a2a      	ldrh	r2, [r5, #16]
   1c8ee:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1c8f2:	429a      	cmp	r2, r3
   1c8f4:	d807      	bhi.n	1c906 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1c8f6:	2300      	movs	r3, #0
   1c8f8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1c8fa:	4629      	mov	r1, r5
   1c8fc:	4620      	mov	r0, r4
   1c8fe:	f7ff fa77 	bl	1bdf0 <send_frag>
	if (!send_buf(conn, buf)) {
   1c902:	b968      	cbnz	r0, 1c920 <bt_conn_process_tx+0x80>
   1c904:	e005      	b.n	1c912 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   1c906:	4629      	mov	r1, r5
   1c908:	4620      	mov	r0, r4
   1c90a:	f7ff ff93 	bl	1c834 <create_frag>
	if (!frag) {
   1c90e:	4601      	mov	r1, r0
   1c910:	b938      	cbnz	r0, 1c922 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   1c912:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1c914:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   1c916:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   1c918:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1c91a:	f003 ff39 	bl	20790 <net_buf_unref>
		if (tx) {
   1c91e:	b9ce      	cbnz	r6, 1c954 <bt_conn_process_tx+0xb4>
}
   1c920:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1c922:	2301      	movs	r3, #1
   1c924:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1c926:	4620      	mov	r0, r4
   1c928:	f7ff fa62 	bl	1bdf0 <send_frag>
   1c92c:	2800      	cmp	r0, #0
   1c92e:	d0f0      	beq.n	1c912 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   1c930:	8a2a      	ldrh	r2, [r5, #16]
   1c932:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1c936:	429a      	cmp	r2, r3
   1c938:	d802      	bhi.n	1c940 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   1c93a:	2300      	movs	r3, #0
   1c93c:	2203      	movs	r2, #3
   1c93e:	e7dc      	b.n	1c8fa <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   1c940:	4629      	mov	r1, r5
   1c942:	4620      	mov	r0, r4
   1c944:	f7ff ff76 	bl	1c834 <create_frag>
		if (!frag) {
   1c948:	4601      	mov	r1, r0
   1c94a:	2800      	cmp	r0, #0
   1c94c:	d0e1      	beq.n	1c912 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1c94e:	2301      	movs	r3, #1
   1c950:	461a      	mov	r2, r3
   1c952:	e7e8      	b.n	1c926 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   1c954:	4631      	mov	r1, r6
   1c956:	4620      	mov	r0, r4
}
   1c958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1c95c:	f7ff ba32 	b.w	1bdc4 <conn_tx_destroy>
   1c960:	0003759c 	.word	0x0003759c
   1c964:	00037f0e 	.word	0x00037f0e
   1c968:	00036b09 	.word	0x00036b09
   1c96c:	20008000 	.word	0x20008000

0001c970 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   1c970:	4b0b      	ldr	r3, [pc, #44]	; (1c9a0 <bt_conn_auth_cb_register+0x30>)
   1c972:	b158      	cbz	r0, 1c98c <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   1c974:	681a      	ldr	r2, [r3, #0]
   1c976:	b962      	cbnz	r2, 1c992 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   1c978:	6902      	ldr	r2, [r0, #16]
   1c97a:	b93a      	cbnz	r2, 1c98c <bt_conn_auth_cb_register+0x1c>
   1c97c:	6802      	ldr	r2, [r0, #0]
   1c97e:	b95a      	cbnz	r2, 1c998 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   1c980:	6842      	ldr	r2, [r0, #4]
   1c982:	b94a      	cbnz	r2, 1c998 <bt_conn_auth_cb_register+0x28>
   1c984:	6882      	ldr	r2, [r0, #8]
   1c986:	b93a      	cbnz	r2, 1c998 <bt_conn_auth_cb_register+0x28>
   1c988:	6942      	ldr	r2, [r0, #20]
   1c98a:	b92a      	cbnz	r2, 1c998 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   1c98c:	6018      	str	r0, [r3, #0]
		return 0;
   1c98e:	2000      	movs	r0, #0
   1c990:	4770      	bx	lr
		return -EALREADY;
   1c992:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c996:	4770      	bx	lr
		return -EINVAL;
   1c998:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   1c99c:	4770      	bx	lr
   1c99e:	bf00      	nop
   1c9a0:	20030a34 	.word	0x20030a34

0001c9a4 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   1c9a4:	b168      	cbz	r0, 1c9c2 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   1c9a6:	2300      	movs	r3, #0
   1c9a8:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1c9aa:	4b07      	ldr	r3, [pc, #28]	; (1c9c8 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1c9ac:	f100 020c 	add.w	r2, r0, #12
   1c9b0:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1c9b2:	b919      	cbnz	r1, 1c9bc <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   1c9b4:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   1c9b8:	2000      	movs	r0, #0
   1c9ba:	4770      	bx	lr
	parent->next = child;
   1c9bc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1c9be:	605a      	str	r2, [r3, #4]
}
   1c9c0:	e7fa      	b.n	1c9b8 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   1c9c2:	f06f 0015 	mvn.w	r0, #21
}
   1c9c6:	4770      	bx	lr
   1c9c8:	20030a2c 	.word	0x20030a2c

0001c9cc <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1c9cc:	b910      	cbnz	r0, 1c9d4 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1c9ce:	4802      	ldr	r0, [pc, #8]	; (1c9d8 <bt_conn_lookup_index+0xc>)
   1c9d0:	f011 b937 	b.w	2dc42 <bt_conn_ref>
}
   1c9d4:	2000      	movs	r0, #0
   1c9d6:	4770      	bx	lr
   1c9d8:	2000a0d0 	.word	0x2000a0d0

0001c9dc <bt_conn_init>:

int bt_conn_init(void)
{
   1c9dc:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1c9de:	480a      	ldr	r0, [pc, #40]	; (1ca08 <bt_conn_init+0x2c>)
   1c9e0:	f014 fbaf 	bl	31142 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1c9e4:	4909      	ldr	r1, [pc, #36]	; (1ca0c <bt_conn_init+0x30>)
   1c9e6:	4808      	ldr	r0, [pc, #32]	; (1ca08 <bt_conn_init+0x2c>)
   1c9e8:	f014 fbb7 	bl	3115a <k_queue_append>
   1c9ec:	4908      	ldr	r1, [pc, #32]	; (1ca10 <bt_conn_init+0x34>)
   1c9ee:	4806      	ldr	r0, [pc, #24]	; (1ca08 <bt_conn_init+0x2c>)
   1c9f0:	f014 fbb3 	bl	3115a <k_queue_append>
	}

	bt_att_init();
   1c9f4:	f001 f846 	bl	1da84 <bt_att_init>

	err = bt_smp_init();
   1c9f8:	f003 fc9e 	bl	20338 <bt_smp_init>
	if (err) {
   1c9fc:	4604      	mov	r4, r0
   1c9fe:	b908      	cbnz	r0, 1ca04 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   1ca00:	f011 fa93 	bl	2df2a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1ca04:	4620      	mov	r0, r4
   1ca06:	bd10      	pop	{r4, pc}
   1ca08:	20008ee8 	.word	0x20008ee8
   1ca0c:	20030a08 	.word	0x20030a08
   1ca10:	20030a18 	.word	0x20030a18

0001ca14 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ca14:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   1ca16:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ca18:	4605      	mov	r5, r0
   1ca1a:	460f      	mov	r7, r1
   1ca1c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1ca1e:	2104      	movs	r1, #4
   1ca20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ca24:	2000      	movs	r0, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1ca26:	b085      	sub	sp, #20
	return bt_conn_create_pdu_timeout(pool,
   1ca28:	f7ff fcd8 	bl	1c3dc <bt_conn_create_pdu_timeout>
	if (!buf) {
   1ca2c:	4604      	mov	r4, r0
   1ca2e:	b960      	cbnz	r0, 1ca4a <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1ca30:	4b0a      	ldr	r3, [pc, #40]	; (1ca5c <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   1ca32:	2201      	movs	r2, #1
   1ca34:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1ca38:	4909      	ldr	r1, [pc, #36]	; (1ca60 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   1ca3a:	4603      	mov	r3, r0
   1ca3c:	9503      	str	r5, [sp, #12]
   1ca3e:	9000      	str	r0, [sp, #0]
   1ca40:	f011 f9eb 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
}
   1ca44:	4620      	mov	r0, r4
   1ca46:	b005      	add	sp, #20
   1ca48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1ca4a:	2104      	movs	r1, #4
   1ca4c:	300c      	adds	r0, #12
   1ca4e:	f012 fdea 	bl	2f626 <net_buf_simple_add>
	hdr->code = code;
   1ca52:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1ca54:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1ca56:	8046      	strh	r6, [r0, #2]
	return buf;
   1ca58:	e7f4      	b.n	1ca44 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   1ca5a:	bf00      	nop
   1ca5c:	00037645 	.word	0x00037645
   1ca60:	0003325c 	.word	0x0003325c

0001ca64 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ca64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1ca66:	4c0b      	ldr	r4, [pc, #44]	; (1ca94 <l2cap_accept+0x30>)
   1ca68:	2300      	movs	r3, #0
   1ca6a:	6822      	ldr	r2, [r4, #0]
   1ca6c:	b92a      	cbnz	r2, 1ca7a <l2cap_accept+0x16>
		}

		l2cap->chan.chan.ops = &ops;
		*chan = &l2cap->chan.chan;

		return 0;
   1ca6e:	4610      	mov	r0, r2
		l2cap->chan.chan.ops = &ops;
   1ca70:	4b09      	ldr	r3, [pc, #36]	; (1ca98 <l2cap_accept+0x34>)
   1ca72:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;
   1ca74:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1ca76:	b004      	add	sp, #16
   1ca78:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   1ca7a:	4a08      	ldr	r2, [pc, #32]	; (1ca9c <l2cap_accept+0x38>)
   1ca7c:	9003      	str	r0, [sp, #12]
   1ca7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ca82:	4618      	mov	r0, r3
   1ca84:	2201      	movs	r2, #1
   1ca86:	4906      	ldr	r1, [pc, #24]	; (1caa0 <l2cap_accept+0x3c>)
   1ca88:	9300      	str	r3, [sp, #0]
   1ca8a:	f011 f9c6 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
   1ca8e:	f06f 000b 	mvn.w	r0, #11
   1ca92:	e7f0      	b.n	1ca76 <l2cap_accept+0x12>
   1ca94:	20030a38 	.word	0x20030a38
   1ca98:	00033ed8 	.word	0x00033ed8
   1ca9c:	0003766d 	.word	0x0003766d
   1caa0:	0003325c 	.word	0x0003325c

0001caa4 <bt_l2cap_connected>:
{
   1caa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1caa6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1caa8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1caaa:	4d1f      	ldr	r5, [pc, #124]	; (1cb28 <bt_l2cap_connected+0x84>)
   1caac:	4f1f      	ldr	r7, [pc, #124]	; (1cb2c <bt_l2cap_connected+0x88>)
   1caae:	42bd      	cmp	r5, r7
   1cab0:	d301      	bcc.n	1cab6 <bt_l2cap_connected+0x12>
}
   1cab2:	b003      	add	sp, #12
   1cab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1cab6:	4620      	mov	r0, r4
   1cab8:	686b      	ldr	r3, [r5, #4]
   1caba:	a901      	add	r1, sp, #4
   1cabc:	4798      	blx	r3
   1cabe:	2800      	cmp	r0, #0
   1cac0:	db2c      	blt.n	1cb1c <bt_l2cap_connected+0x78>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1cac2:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1cac4:	882a      	ldrh	r2, [r5, #0]
   1cac6:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1cac8:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1caca:	68a8      	ldr	r0, [r5, #8]
   1cacc:	f103 0210 	add.w	r2, r3, #16
   1cad0:	e8d2 1fef 	ldaex	r1, [r2]
   1cad4:	e8c2 6fec 	stlex	ip, r6, [r2]
   1cad8:	f1bc 0f00 	cmp.w	ip, #0
   1cadc:	d1f8      	bne.n	1cad0 <bt_l2cap_connected+0x2c>
	parent->next = child;
   1cade:	609e      	str	r6, [r3, #8]
	return list->tail;
   1cae0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1cae2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1cae6:	b9d9      	cbnz	r1, 1cb20 <bt_l2cap_connected+0x7c>
	list->head = node;
   1cae8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1caec:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1caee:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1caf0:	9801      	ldr	r0, [sp, #4]
   1caf2:	6843      	ldr	r3, [r0, #4]
   1caf4:	681b      	ldr	r3, [r3, #0]
   1caf6:	b103      	cbz	r3, 1cafa <bt_l2cap_connected+0x56>
			chan->ops->connected(chan);
   1caf8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cafa:	9b01      	ldr	r3, [sp, #4]
   1cafc:	3310      	adds	r3, #16
   1cafe:	e8d3 1fef 	ldaex	r1, [r3]
   1cb02:	f041 0101 	orr.w	r1, r1, #1
   1cb06:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cb0a:	2a00      	cmp	r2, #0
   1cb0c:	d1f7      	bne.n	1cafe <bt_l2cap_connected+0x5a>
		if (chan->ops->status) {
   1cb0e:	9801      	ldr	r0, [sp, #4]
   1cb10:	6843      	ldr	r3, [r0, #4]
   1cb12:	69db      	ldr	r3, [r3, #28]
   1cb14:	b113      	cbz	r3, 1cb1c <bt_l2cap_connected+0x78>
			chan->ops->status(chan, chan->status);
   1cb16:	f100 0110 	add.w	r1, r0, #16
   1cb1a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1cb1c:	350c      	adds	r5, #12
   1cb1e:	e7c6      	b.n	1caae <bt_l2cap_connected+0xa>
	parent->next = child;
   1cb20:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1cb22:	6562      	str	r2, [r4, #84]	; 0x54
}
   1cb24:	e7e2      	b.n	1caec <bt_l2cap_connected+0x48>
   1cb26:	bf00      	nop
   1cb28:	0003317c 	.word	0x0003317c
   1cb2c:	000331a0 	.word	0x000331a0

0001cb30 <l2cap_recv>:
{
   1cb30:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
   1cb32:	8a0b      	ldrh	r3, [r1, #16]
{
   1cb34:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1cb36:	2b03      	cmp	r3, #3
{
   1cb38:	460c      	mov	r4, r1
   1cb3a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1cb3c:	d803      	bhi.n	1cb46 <l2cap_recv+0x16>
		LOG_ERR("Too small L2CAP signaling PDU");
   1cb3e:	4b2d      	ldr	r3, [pc, #180]	; (1cbf4 <l2cap_recv+0xc4>)
		LOG_ERR("Too small LE conn param rsp");
   1cb40:	9302      	str	r3, [sp, #8]
   1cb42:	2300      	movs	r3, #0
   1cb44:	e01c      	b.n	1cb80 <l2cap_recv+0x50>
	return net_buf_simple_pull_mem(&buf->b, len);
   1cb46:	2104      	movs	r1, #4
   1cb48:	f104 000c 	add.w	r0, r4, #12
   1cb4c:	f012 fd9b 	bl	2f686 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1cb50:	8a23      	ldrh	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   1cb52:	8842      	ldrh	r2, [r0, #2]
   1cb54:	4605      	mov	r5, r0
	if (buf->len != len) {
   1cb56:	429a      	cmp	r2, r3
   1cb58:	d00e      	beq.n	1cb78 <l2cap_recv+0x48>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1cb5a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1cb5e:	4b26      	ldr	r3, [pc, #152]	; (1cbf8 <l2cap_recv+0xc8>)
   1cb60:	2201      	movs	r2, #1
   1cb62:	9302      	str	r3, [sp, #8]
   1cb64:	2300      	movs	r3, #0
   1cb66:	4925      	ldr	r1, [pc, #148]	; (1cbfc <l2cap_recv+0xcc>)
   1cb68:	4618      	mov	r0, r3
   1cb6a:	e9cd 3300 	strd	r3, r3, [sp]
   1cb6e:	f011 f954 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
}
   1cb72:	2000      	movs	r0, #0
   1cb74:	b006      	add	sp, #24
   1cb76:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   1cb78:	7843      	ldrb	r3, [r0, #1]
   1cb7a:	b94b      	cbnz	r3, 1cb90 <l2cap_recv+0x60>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1cb7c:	4a20      	ldr	r2, [pc, #128]	; (1cc00 <l2cap_recv+0xd0>)
   1cb7e:	9202      	str	r2, [sp, #8]
   1cb80:	2201      	movs	r2, #1
   1cb82:	4618      	mov	r0, r3
   1cb84:	e9cd 3300 	strd	r3, r3, [sp]
   1cb88:	491c      	ldr	r1, [pc, #112]	; (1cbfc <l2cap_recv+0xcc>)
   1cb8a:	f011 f946 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
		return 0;
   1cb8e:	e7f0      	b.n	1cb72 <l2cap_recv+0x42>
	switch (hdr->code) {
   1cb90:	7803      	ldrb	r3, [r0, #0]
   1cb92:	2b01      	cmp	r3, #1
   1cb94:	d0ed      	beq.n	1cb72 <l2cap_recv+0x42>
   1cb96:	2b13      	cmp	r3, #19
   1cb98:	d103      	bne.n	1cba2 <l2cap_recv+0x72>
	if (buf->len < sizeof(*rsp)) {
   1cb9a:	2a01      	cmp	r2, #1
   1cb9c:	d8e9      	bhi.n	1cb72 <l2cap_recv+0x42>
		LOG_ERR("Too small LE conn param rsp");
   1cb9e:	4b19      	ldr	r3, [pc, #100]	; (1cc04 <l2cap_recv+0xd4>)
   1cba0:	e7ce      	b.n	1cb40 <l2cap_recv+0x10>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1cba2:	2400      	movs	r4, #0
	switch (hdr->code) {
   1cba4:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1cba6:	4b18      	ldr	r3, [pc, #96]	; (1cc08 <l2cap_recv+0xd8>)
   1cba8:	2202      	movs	r2, #2
   1cbaa:	4620      	mov	r0, r4
   1cbac:	4913      	ldr	r1, [pc, #76]	; (1cbfc <l2cap_recv+0xcc>)
   1cbae:	9302      	str	r3, [sp, #8]
   1cbb0:	e9cd 4400 	strd	r4, r4, [sp]
   1cbb4:	4623      	mov	r3, r4
   1cbb6:	f011 f930 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1cbba:	7869      	ldrb	r1, [r5, #1]
   1cbbc:	2202      	movs	r2, #2
   1cbbe:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1cbc0:	6836      	ldr	r6, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1cbc2:	f7ff ff27 	bl	1ca14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1cbc6:	4605      	mov	r5, r0
   1cbc8:	2800      	cmp	r0, #0
   1cbca:	d0d2      	beq.n	1cb72 <l2cap_recv+0x42>
	return net_buf_simple_add(&buf->b, len);
   1cbcc:	2102      	movs	r1, #2
   1cbce:	300c      	adds	r0, #12
   1cbd0:	f012 fd29 	bl	2f626 <net_buf_simple_add>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1cbd4:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
   1cbd6:	7004      	strb	r4, [r0, #0]
   1cbd8:	7044      	strb	r4, [r0, #1]
   1cbda:	462a      	mov	r2, r5
   1cbdc:	2105      	movs	r1, #5
   1cbde:	4630      	mov	r0, r6
   1cbe0:	9400      	str	r4, [sp, #0]
   1cbe2:	f011 f977 	bl	2ded4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1cbe6:	2800      	cmp	r0, #0
   1cbe8:	d0c3      	beq.n	1cb72 <l2cap_recv+0x42>
		net_buf_unref(buf);
   1cbea:	4628      	mov	r0, r5
   1cbec:	f003 fdd0 	bl	20790 <net_buf_unref>
   1cbf0:	e7bf      	b.n	1cb72 <l2cap_recv+0x42>
   1cbf2:	bf00      	nop
   1cbf4:	00037694 	.word	0x00037694
   1cbf8:	000376b2 	.word	0x000376b2
   1cbfc:	0003325c 	.word	0x0003325c
   1cc00:	000376d3 	.word	0x000376d3
   1cc04:	000376f4 	.word	0x000376f4
   1cc08:	00037710 	.word	0x00037710

0001cc0c <bt_l2cap_recv>:
{
   1cc0c:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1cc0e:	8a0b      	ldrh	r3, [r1, #16]
{
   1cc10:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   1cc12:	2b03      	cmp	r3, #3
{
   1cc14:	460c      	mov	r4, r1
   1cc16:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1cc18:	d80f      	bhi.n	1cc3a <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   1cc1a:	4b15      	ldr	r3, [pc, #84]	; (1cc70 <bt_l2cap_recv+0x64>)
   1cc1c:	2201      	movs	r2, #1
   1cc1e:	9302      	str	r3, [sp, #8]
   1cc20:	2300      	movs	r3, #0
   1cc22:	4914      	ldr	r1, [pc, #80]	; (1cc74 <bt_l2cap_recv+0x68>)
   1cc24:	4618      	mov	r0, r3
   1cc26:	e9cd 3300 	strd	r3, r3, [sp]
   1cc2a:	f011 f8f6 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   1cc2e:	4620      	mov	r0, r4
}
   1cc30:	b005      	add	sp, #20
   1cc32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   1cc36:	f003 bdab 	b.w	20790 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1cc3a:	2104      	movs	r1, #4
   1cc3c:	f104 000c 	add.w	r0, r4, #12
   1cc40:	f012 fd21 	bl	2f686 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1cc44:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1cc46:	4628      	mov	r0, r5
   1cc48:	f011 f966 	bl	2df18 <bt_l2cap_le_lookup_rx_cid>
   1cc4c:	4603      	mov	r3, r0
	if (!chan) {
   1cc4e:	b948      	cbnz	r0, 1cc64 <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1cc50:	4a09      	ldr	r2, [pc, #36]	; (1cc78 <bt_l2cap_recv+0x6c>)
   1cc52:	9103      	str	r1, [sp, #12]
   1cc54:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1cc58:	4906      	ldr	r1, [pc, #24]	; (1cc74 <bt_l2cap_recv+0x68>)
   1cc5a:	2202      	movs	r2, #2
   1cc5c:	9000      	str	r0, [sp, #0]
   1cc5e:	f011 f8dc 	bl	2de1a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1cc62:	e7e4      	b.n	1cc2e <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   1cc64:	6843      	ldr	r3, [r0, #4]
   1cc66:	4621      	mov	r1, r4
   1cc68:	695b      	ldr	r3, [r3, #20]
   1cc6a:	4798      	blx	r3
   1cc6c:	e7df      	b.n	1cc2e <bt_l2cap_recv+0x22>
   1cc6e:	bf00      	nop
   1cc70:	00037738 	.word	0x00037738
   1cc74:	0003325c 	.word	0x0003325c
   1cc78:	00037755 	.word	0x00037755

0001cc7c <bt_l2cap_update_conn_param>:
{
   1cc7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1cc7e:	4b17      	ldr	r3, [pc, #92]	; (1ccdc <bt_l2cap_update_conn_param+0x60>)
{
   1cc80:	460e      	mov	r6, r1
	ident++;
   1cc82:	7819      	ldrb	r1, [r3, #0]
{
   1cc84:	4605      	mov	r5, r0
	ident++;
   1cc86:	3101      	adds	r1, #1
   1cc88:	b2c9      	uxtb	r1, r1
   1cc8a:	2901      	cmp	r1, #1
   1cc8c:	bf38      	it	cc
   1cc8e:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1cc90:	2208      	movs	r2, #8
   1cc92:	2012      	movs	r0, #18
	ident++;
   1cc94:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1cc96:	f7ff febd 	bl	1ca14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1cc9a:	4604      	mov	r4, r0
   1cc9c:	b1d0      	cbz	r0, 1ccd4 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1cc9e:	2108      	movs	r1, #8
   1cca0:	300c      	adds	r0, #12
   1cca2:	f012 fcc0 	bl	2f626 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1cca6:	8833      	ldrh	r3, [r6, #0]
   1cca8:	4622      	mov	r2, r4
   1ccaa:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1ccac:	8873      	ldrh	r3, [r6, #2]
   1ccae:	2105      	movs	r1, #5
   1ccb0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1ccb2:	88b3      	ldrh	r3, [r6, #4]
   1ccb4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1ccb6:	88f3      	ldrh	r3, [r6, #6]
   1ccb8:	80c3      	strh	r3, [r0, #6]
   1ccba:	2300      	movs	r3, #0
   1ccbc:	4628      	mov	r0, r5
   1ccbe:	9300      	str	r3, [sp, #0]
   1ccc0:	f011 f908 	bl	2ded4 <bt_l2cap_send_cb>
	if (err) {
   1ccc4:	4605      	mov	r5, r0
   1ccc6:	b110      	cbz	r0, 1ccce <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1ccc8:	4620      	mov	r0, r4
   1ccca:	f003 fd61 	bl	20790 <net_buf_unref>
}
   1ccce:	4628      	mov	r0, r5
   1ccd0:	b002      	add	sp, #8
   1ccd2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1ccd4:	f06f 050b 	mvn.w	r5, #11
   1ccd8:	e7f9      	b.n	1ccce <bt_l2cap_update_conn_param+0x52>
   1ccda:	bf00      	nop
   1ccdc:	20031b8e 	.word	0x20031b8e

0001cce0 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1cce0:	2823      	cmp	r0, #35	; 0x23
   1cce2:	d81f      	bhi.n	1cd24 <att_op_get_type+0x44>
   1cce4:	281a      	cmp	r0, #26
   1cce6:	d804      	bhi.n	1ccf2 <att_op_get_type+0x12>
   1cce8:	1e43      	subs	r3, r0, #1
   1ccea:	2b18      	cmp	r3, #24
   1ccec:	d90e      	bls.n	1cd0c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1ccee:	2006      	movs	r0, #6
   1ccf0:	4770      	bx	lr
	switch (op) {
   1ccf2:	f1a0 031b 	sub.w	r3, r0, #27
   1ccf6:	2b08      	cmp	r3, #8
   1ccf8:	d81e      	bhi.n	1cd38 <att_op_get_type+0x58>
   1ccfa:	e8df f003 	tbb	[pc, r3]
   1ccfe:	1d05      	.short	0x1d05
   1cd00:	191d231b 	.word	0x191d231b
   1cd04:	1d25      	.short	0x1d25
   1cd06:	05          	.byte	0x05
   1cd07:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1cd08:	2003      	movs	r0, #3
   1cd0a:	4770      	bx	lr
   1cd0c:	2301      	movs	r3, #1
	switch (op) {
   1cd0e:	4a0f      	ldr	r2, [pc, #60]	; (1cd4c <att_op_get_type+0x6c>)
   1cd10:	4083      	lsls	r3, r0
   1cd12:	401a      	ands	r2, r3
   1cd14:	b9c2      	cbnz	r2, 1cd48 <att_op_get_type+0x68>
   1cd16:	4a0e      	ldr	r2, [pc, #56]	; (1cd50 <att_op_get_type+0x70>)
   1cd18:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1cd1a:	2a00      	cmp	r2, #0
   1cd1c:	bf14      	ite	ne
   1cd1e:	2001      	movne	r0, #1
   1cd20:	2006      	moveq	r0, #6
   1cd22:	4770      	bx	lr
	switch (op) {
   1cd24:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1cd28:	2b52      	cmp	r3, #82	; 0x52
   1cd2a:	d105      	bne.n	1cd38 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1cd2c:	2000      	movs	r0, #0
}
   1cd2e:	4770      	bx	lr
		return ATT_REQUEST;
   1cd30:	2001      	movs	r0, #1
   1cd32:	4770      	bx	lr
		return ATT_INDICATION;
   1cd34:	2005      	movs	r0, #5
   1cd36:	4770      	bx	lr
		return ATT_COMMAND;
   1cd38:	f010 0f40 	tst.w	r0, #64	; 0x40
   1cd3c:	bf0c      	ite	eq
   1cd3e:	2006      	moveq	r0, #6
   1cd40:	2000      	movne	r0, #0
   1cd42:	4770      	bx	lr
	switch (op) {
   1cd44:	2004      	movs	r0, #4
   1cd46:	4770      	bx	lr
		return ATT_RESPONSE;
   1cd48:	2002      	movs	r0, #2
   1cd4a:	4770      	bx	lr
   1cd4c:	028aaaaa 	.word	0x028aaaaa
   1cd50:	01455554 	.word	0x01455554

0001cd54 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1cd54:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1cd56:	3804      	subs	r0, #4
   1cd58:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1cd5a:	a901      	add	r1, sp, #4
   1cd5c:	4802      	ldr	r0, [pc, #8]	; (1cd68 <bt_att_released+0x14>)
   1cd5e:	f014 f933 	bl	30fc8 <k_mem_slab_free>
}
   1cd62:	b003      	add	sp, #12
   1cd64:	f85d fb04 	ldr.w	pc, [sp], #4
   1cd68:	20008ba4 	.word	0x20008ba4

0001cd6c <tx_meta_data_free>:
{
   1cd6c:	b510      	push	{r4, lr}
   1cd6e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1cd70:	2100      	movs	r1, #0
   1cd72:	2214      	movs	r2, #20
   1cd74:	f014 fe8f 	bl	31a96 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1cd78:	4621      	mov	r1, r4
}
   1cd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1cd7e:	4801      	ldr	r0, [pc, #4]	; (1cd84 <tx_meta_data_free+0x18>)
   1cd80:	f014 b9eb 	b.w	3115a <k_queue_append>
   1cd84:	20008ed0 	.word	0x20008ed0

0001cd88 <find_type_cb>:
{
   1cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cd8c:	f642 0301 	movw	r3, #10241	; 0x2801
   1cd90:	2500      	movs	r5, #0
{
   1cd92:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1cd94:	f8d2 9000 	ldr.w	r9, [r2]
{
   1cd98:	4607      	mov	r7, r0
   1cd9a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cd9c:	6800      	ldr	r0, [r0, #0]
   1cd9e:	a90d      	add	r1, sp, #52	; 0x34
	struct bt_conn *conn = chan->chan.chan.conn;
   1cda0:	f8d9 8004 	ldr.w	r8, [r9, #4]
{
   1cda4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cda6:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1cdaa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1cdae:	f010 fb3e 	bl	2d42e <bt_uuid_cmp>
   1cdb2:	2800      	cmp	r0, #0
   1cdb4:	d067      	beq.n	1ce86 <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1cdb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cdba:	6838      	ldr	r0, [r7, #0]
   1cdbc:	a90d      	add	r1, sp, #52	; 0x34
   1cdbe:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1cdc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1cdc6:	f010 fb32 	bl	2d42e <bt_uuid_cmp>
   1cdca:	b138      	cbz	r0, 1cddc <find_type_cb+0x54>
		if (data->group &&
   1cdcc:	68a3      	ldr	r3, [r4, #8]
   1cdce:	b11b      	cbz	r3, 1cdd8 <find_type_cb+0x50>
   1cdd0:	885a      	ldrh	r2, [r3, #2]
   1cdd2:	42b2      	cmp	r2, r6
   1cdd4:	d200      	bcs.n	1cdd8 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cdd6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1cdd8:	2001      	movs	r0, #1
   1cdda:	e009      	b.n	1cdf0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1cddc:	6861      	ldr	r1, [r4, #4]
   1cdde:	4608      	mov	r0, r1
   1cde0:	f011 f8ae 	bl	2df40 <net_buf_frags_len>
   1cde4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1cde8:	1a1b      	subs	r3, r3, r0
   1cdea:	2b03      	cmp	r3, #3
   1cdec:	d803      	bhi.n	1cdf6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1cdee:	2000      	movs	r0, #0
}
   1cdf0:	b013      	add	sp, #76	; 0x4c
   1cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1cdf6:	4608      	mov	r0, r1
   1cdf8:	f012 fbf3 	bl	2f5e2 <net_buf_frag_last>
   1cdfc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1cdfe:	6860      	ldr	r0, [r4, #4]
   1ce00:	f011 f89e 	bl	2df40 <net_buf_frags_len>
   1ce04:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1ce08:	f105 0b0c 	add.w	fp, r5, #12
   1ce0c:	ebaa 0a00 	sub.w	sl, sl, r0
   1ce10:	4658      	mov	r0, fp
   1ce12:	f012 fc4c 	bl	2f6ae <net_buf_simple_tailroom>
   1ce16:	4582      	cmp	sl, r0
   1ce18:	d238      	bcs.n	1ce8c <find_type_cb+0x104>
   1ce1a:	6860      	ldr	r0, [r4, #4]
   1ce1c:	f011 f890 	bl	2df40 <net_buf_frags_len>
   1ce20:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   1ce24:	1a18      	subs	r0, r3, r0
	if (!len) {
   1ce26:	b970      	cbnz	r0, 1ce46 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1ce28:	6863      	ldr	r3, [r4, #4]
   1ce2a:	7a98      	ldrb	r0, [r3, #10]
   1ce2c:	f003 fbee 	bl	2060c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1ce30:	2200      	movs	r2, #0
   1ce32:	2300      	movs	r3, #0
   1ce34:	f012 fb97 	bl	2f566 <net_buf_alloc_fixed>
		if (!frag) {
   1ce38:	4605      	mov	r5, r0
   1ce3a:	2800      	cmp	r0, #0
   1ce3c:	d0d7      	beq.n	1cdee <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1ce3e:	4601      	mov	r1, r0
   1ce40:	6860      	ldr	r0, [r4, #4]
   1ce42:	f012 fbdf 	bl	2f604 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1ce46:	2300      	movs	r3, #0
   1ce48:	9300      	str	r3, [sp, #0]
   1ce4a:	2310      	movs	r3, #16
   1ce4c:	4639      	mov	r1, r7
   1ce4e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ce52:	4640      	mov	r0, r8
   1ce54:	eb0d 0203 	add.w	r2, sp, r3
   1ce58:	47c8      	blx	r9
	if (read < 0) {
   1ce5a:	1e07      	subs	r7, r0, #0
   1ce5c:	db13      	blt.n	1ce86 <find_type_cb+0xfe>
	if (read != data->value_len) {
   1ce5e:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ce60:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1ce62:	42ba      	cmp	r2, r7
   1ce64:	d031      	beq.n	1ceca <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1ce66:	4601      	mov	r1, r0
   1ce68:	a80d      	add	r0, sp, #52	; 0x34
   1ce6a:	f010 fb0e 	bl	2d48a <bt_uuid_create>
   1ce6e:	4603      	mov	r3, r0
   1ce70:	b980      	cbnz	r0, 1ce94 <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1ce72:	7c22      	ldrb	r2, [r4, #16]
   1ce74:	9203      	str	r2, [sp, #12]
   1ce76:	4a17      	ldr	r2, [pc, #92]	; (1ced4 <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   1ce78:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ce7c:	4916      	ldr	r1, [pc, #88]	; (1ced8 <find_type_cb+0x150>)
   1ce7e:	2202      	movs	r2, #2
   1ce80:	9300      	str	r3, [sp, #0]
   1ce82:	f011 f94c 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   1ce86:	2300      	movs	r3, #0
   1ce88:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1ce8a:	e7a5      	b.n	1cdd8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1ce8c:	4658      	mov	r0, fp
   1ce8e:	f012 fc0e 	bl	2f6ae <net_buf_simple_tailroom>
   1ce92:	e7c8      	b.n	1ce26 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1ce94:	b2fa      	uxtb	r2, r7
   1ce96:	a904      	add	r1, sp, #16
   1ce98:	a808      	add	r0, sp, #32
   1ce9a:	f010 faf6 	bl	2d48a <bt_uuid_create>
   1ce9e:	4603      	mov	r3, r0
   1cea0:	b910      	cbnz	r0, 1cea8 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   1cea2:	4a0e      	ldr	r2, [pc, #56]	; (1cedc <find_type_cb+0x154>)
   1cea4:	9703      	str	r7, [sp, #12]
   1cea6:	e7e7      	b.n	1ce78 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1cea8:	a908      	add	r1, sp, #32
   1ceaa:	a80d      	add	r0, sp, #52	; 0x34
   1ceac:	f010 fabf 	bl	2d42e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1ceb0:	2800      	cmp	r0, #0
   1ceb2:	d1e8      	bne.n	1ce86 <find_type_cb+0xfe>
	data->err = 0x00;
   1ceb4:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   1ceb6:	2104      	movs	r1, #4
   1ceb8:	7463      	strb	r3, [r4, #17]
   1ceba:	f105 000c 	add.w	r0, r5, #12
   1cebe:	f012 fbb2 	bl	2f626 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1cec2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1cec4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cec6:	68a3      	ldr	r3, [r4, #8]
   1cec8:	e785      	b.n	1cdd6 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   1ceca:	a904      	add	r1, sp, #16
   1cecc:	f014 fd99 	bl	31a02 <memcmp>
   1ced0:	e7ee      	b.n	1ceb0 <find_type_cb+0x128>
   1ced2:	bf00      	nop
   1ced4:	0003778a 	.word	0x0003778a
   1ced8:	0003320c 	.word	0x0003320c
   1cedc:	000377a9 	.word	0x000377a9

0001cee0 <chan_send>:
{
   1cee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cee4:	4606      	mov	r6, r0
   1cee6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1cee8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1ceec:	68cb      	ldr	r3, [r1, #12]
{
   1ceee:	b085      	sub	sp, #20
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1cef0:	2102      	movs	r1, #2
   1cef2:	3090      	adds	r0, #144	; 0x90
   1cef4:	f011 f83e 	bl	2df74 <atomic_test_bit>
   1cef8:	2800      	cmp	r0, #0
   1cefa:	d044      	beq.n	1cf86 <chan_send+0xa6>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1cefc:	781b      	ldrb	r3, [r3, #0]
   1cefe:	2bd2      	cmp	r3, #210	; 0xd2
   1cf00:	d11a      	bne.n	1cf38 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1cf02:	6833      	ldr	r3, [r6, #0]
   1cf04:	4621      	mov	r1, r4
   1cf06:	6818      	ldr	r0, [r3, #0]
   1cf08:	f012 f9cb 	bl	2f2a2 <bt_smp_sign>
		if (err) {
   1cf0c:	4605      	mov	r5, r0
   1cf0e:	b198      	cbz	r0, 1cf38 <chan_send+0x58>
			LOG_ERR("Error signing data");
   1cf10:	4b1e      	ldr	r3, [pc, #120]	; (1cf8c <chan_send+0xac>)
   1cf12:	2201      	movs	r2, #1
   1cf14:	9302      	str	r3, [sp, #8]
   1cf16:	2300      	movs	r3, #0
   1cf18:	491d      	ldr	r1, [pc, #116]	; (1cf90 <chan_send+0xb0>)
   1cf1a:	4618      	mov	r0, r3
   1cf1c:	e9cd 3300 	strd	r3, r3, [sp]
   1cf20:	f011 f8fd 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1cf24:	69a0      	ldr	r0, [r4, #24]
   1cf26:	f7ff ff21 	bl	1cd6c <tx_meta_data_free>
			net_buf_unref(buf);
   1cf2a:	4620      	mov	r0, r4
   1cf2c:	f003 fc30 	bl	20790 <net_buf_unref>
}
   1cf30:	4628      	mov	r0, r5
   1cf32:	b005      	add	sp, #20
   1cf34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1cf38:	f104 000c 	add.w	r0, r4, #12
   1cf3c:	f012 fbb3 	bl	2f6a6 <net_buf_simple_headroom>
	state->len = buf->len;
   1cf40:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1cf44:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cf48:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   1cf4a:	4607      	mov	r7, r0
   1cf4c:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cf4e:	68e3      	ldr	r3, [r4, #12]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cf50:	2104      	movs	r1, #4
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cf52:	7818      	ldrb	r0, [r3, #0]
   1cf54:	f7ff fec4 	bl	1cce0 <att_op_get_type>
	switch (op_type) {
   1cf58:	2805      	cmp	r0, #5
   1cf5a:	bf98      	it	ls
   1cf5c:	4b0d      	ldrls	r3, [pc, #52]	; (1cf94 <chan_send+0xb4>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cf5e:	4622      	mov	r2, r4
   1cf60:	bf94      	ite	ls
   1cf62:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1cf66:	4b0c      	ldrhi	r3, [pc, #48]	; (1cf98 <chan_send+0xb8>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1cf68:	4628      	mov	r0, r5
   1cf6a:	f8cd 9000 	str.w	r9, [sp]
   1cf6e:	f010 ffb1 	bl	2ded4 <bt_l2cap_send_cb>
	if (err) {
   1cf72:	4605      	mov	r5, r0
   1cf74:	2800      	cmp	r0, #0
   1cf76:	d0db      	beq.n	1cf30 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1cf78:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1cf7a:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1cf7e:	fa13 f787 	uxtah	r7, r3, r7
   1cf82:	60e7      	str	r7, [r4, #12]
}
   1cf84:	e7d4      	b.n	1cf30 <chan_send+0x50>
		return -EINVAL;
   1cf86:	f06f 0515 	mvn.w	r5, #21
   1cf8a:	e7d1      	b.n	1cf30 <chan_send+0x50>
   1cf8c:	000377c8 	.word	0x000377c8
   1cf90:	0003320c 	.word	0x0003320c
   1cf94:	00033f00 	.word	0x00033f00
   1cf98:	0002e51b 	.word	0x0002e51b

0001cf9c <att_get>:
{
   1cf9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1cf9e:	7b43      	ldrb	r3, [r0, #13]
   1cfa0:	2b07      	cmp	r3, #7
   1cfa2:	d00d      	beq.n	1cfc0 <att_get+0x24>
		LOG_WRN("Not connected");
   1cfa4:	4b0e      	ldr	r3, [pc, #56]	; (1cfe0 <att_get+0x44>)
   1cfa6:	2202      	movs	r2, #2
   1cfa8:	9302      	str	r3, [sp, #8]
   1cfaa:	2300      	movs	r3, #0
   1cfac:	4618      	mov	r0, r3
   1cfae:	e9cd 3300 	strd	r3, r3, [sp]
   1cfb2:	490c      	ldr	r1, [pc, #48]	; (1cfe4 <att_get+0x48>)
		LOG_ERR("Unable to find ATT channel");
   1cfb4:	f011 f8b3 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1cfb8:	2000      	movs	r0, #0
}
   1cfba:	b005      	add	sp, #20
   1cfbc:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1cfc0:	2104      	movs	r1, #4
   1cfc2:	f010 ffa9 	bl	2df18 <bt_l2cap_le_lookup_rx_cid>
   1cfc6:	4603      	mov	r3, r0
	if (!chan) {
   1cfc8:	b930      	cbnz	r0, 1cfd8 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   1cfca:	4a07      	ldr	r2, [pc, #28]	; (1cfe8 <att_get+0x4c>)
   1cfcc:	4905      	ldr	r1, [pc, #20]	; (1cfe4 <att_get+0x48>)
   1cfce:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1cfd2:	9000      	str	r0, [sp, #0]
   1cfd4:	2201      	movs	r2, #1
   1cfd6:	e7ed      	b.n	1cfb4 <att_get+0x18>
	return att_chan->att;
   1cfd8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1cfdc:	e7ed      	b.n	1cfba <att_get+0x1e>
   1cfde:	bf00      	nop
   1cfe0:	000377db 	.word	0x000377db
   1cfe4:	0003320c 	.word	0x0003320c
   1cfe8:	000377e9 	.word	0x000377e9

0001cfec <bt_att_connected>:
{
   1cfec:	b510      	push	{r4, lr}
   1cfee:	4604      	mov	r4, r0
   1cff0:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1cff4:	e8d3 1fef 	ldaex	r1, [r3]
   1cff8:	f041 0104 	orr.w	r1, r1, #4
   1cffc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1d000:	2a00      	cmp	r2, #0
   1d002:	d1f7      	bne.n	1cff4 <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1d004:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   1d006:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1d008:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1d00a:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1d00c:	f010 fff4 	bl	2dff8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1d010:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1d014:	4903      	ldr	r1, [pc, #12]	; (1d024 <bt_att_connected+0x38>)
   1d016:	f014 f97b 	bl	31310 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1d01a:	6820      	ldr	r0, [r4, #0]
}
   1d01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1d020:	f001 bce4 	b.w	1e9ec <bt_gatt_connected>
   1d024:	0001dc81 	.word	0x0001dc81

0001d028 <read_group_cb>:
{
   1d028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d02c:	f04f 0800 	mov.w	r8, #0
   1d030:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1d034:	4605      	mov	r5, r0
   1d036:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d038:	6800      	ldr	r0, [r0, #0]
   1d03a:	a902      	add	r1, sp, #8
{
   1d03c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1d03e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d040:	f88d 8008 	strb.w	r8, [sp, #8]
   1d044:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d048:	f010 f9f1 	bl	2d42e <bt_uuid_cmp>
   1d04c:	b1a0      	cbz	r0, 1d078 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1d04e:	f642 0301 	movw	r3, #10241	; 0x2801
   1d052:	6828      	ldr	r0, [r5, #0]
   1d054:	a903      	add	r1, sp, #12
   1d056:	f88d 800c 	strb.w	r8, [sp, #12]
   1d05a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d05e:	f010 f9e6 	bl	2d42e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1d062:	b148      	cbz	r0, 1d078 <read_group_cb+0x50>
		if (data->group &&
   1d064:	6923      	ldr	r3, [r4, #16]
   1d066:	b11b      	cbz	r3, 1d070 <read_group_cb+0x48>
   1d068:	885a      	ldrh	r2, [r3, #2]
   1d06a:	42b2      	cmp	r2, r6
   1d06c:	d200      	bcs.n	1d070 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1d06e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1d070:	2001      	movs	r0, #1
}
   1d072:	b004      	add	sp, #16
   1d074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1d078:	6861      	ldr	r1, [r4, #4]
   1d07a:	6828      	ldr	r0, [r5, #0]
   1d07c:	f010 f9d7 	bl	2d42e <bt_uuid_cmp>
   1d080:	b110      	cbz	r0, 1d088 <read_group_cb+0x60>
		data->group = NULL;
   1d082:	2300      	movs	r3, #0
   1d084:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1d086:	e7f3      	b.n	1d070 <read_group_cb+0x48>
	if (data->rsp->len &&
   1d088:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1d08a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1d08c:	781a      	ldrb	r2, [r3, #0]
   1d08e:	b132      	cbz	r2, 1d09e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1d090:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1d092:	8a01      	ldrh	r1, [r0, #16]
   1d094:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1d096:	4293      	cmp	r3, r2
   1d098:	da01      	bge.n	1d09e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1d09a:	2000      	movs	r0, #0
   1d09c:	e7e9      	b.n	1d072 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1d09e:	2104      	movs	r1, #4
   1d0a0:	300c      	adds	r0, #12
   1d0a2:	f012 fac0 	bl	2f626 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1d0a6:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1d0a8:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1d0aa:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1d0ac:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   1d0ae:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1d0b0:	4b07      	ldr	r3, [pc, #28]	; (1d0d0 <read_group_cb+0xa8>)
   1d0b2:	9401      	str	r4, [sp, #4]
   1d0b4:	9300      	str	r3, [sp, #0]
   1d0b6:	4638      	mov	r0, r7
   1d0b8:	2300      	movs	r3, #0
   1d0ba:	68a2      	ldr	r2, [r4, #8]
   1d0bc:	f011 f87f 	bl	2e1be <att_chan_read>
	if (read < 0) {
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	dbea      	blt.n	1d09a <read_group_cb+0x72>
	if (!data->group) {
   1d0c4:	6920      	ldr	r0, [r4, #16]
   1d0c6:	3800      	subs	r0, #0
   1d0c8:	bf18      	it	ne
   1d0ca:	2001      	movne	r0, #1
   1d0cc:	e7d1      	b.n	1d072 <read_group_cb+0x4a>
   1d0ce:	bf00      	nop
   1d0d0:	0002e05f 	.word	0x0002e05f

0001d0d4 <read_type_cb>:
{
   1d0d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1d0d8:	6817      	ldr	r7, [r2, #0]
{
   1d0da:	4605      	mov	r5, r0
   1d0dc:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1d0de:	6800      	ldr	r0, [r0, #0]
   1d0e0:	6851      	ldr	r1, [r2, #4]
{
   1d0e2:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1d0e4:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1d0e6:	f010 f9a2 	bl	2d42e <bt_uuid_cmp>
   1d0ea:	4681      	mov	r9, r0
   1d0ec:	2800      	cmp	r0, #0
   1d0ee:	d13c      	bne.n	1d16a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1d0f0:	4630      	mov	r0, r6
   1d0f2:	2295      	movs	r2, #149	; 0x95
   1d0f4:	4629      	mov	r1, r5
   1d0f6:	f011 fd85 	bl	2ec04 <bt_gatt_check_perm>
   1d0fa:	4606      	mov	r6, r0
   1d0fc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1d0fe:	b140      	cbz	r0, 1d112 <read_type_cb+0x3e>
		if (data->rsp->len) {
   1d100:	68e3      	ldr	r3, [r4, #12]
   1d102:	781b      	ldrb	r3, [r3, #0]
   1d104:	b10b      	cbz	r3, 1d10a <read_type_cb+0x36>
			data->err = 0x00;
   1d106:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1d10a:	2000      	movs	r0, #0
}
   1d10c:	b003      	add	sp, #12
   1d10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1d112:	68a0      	ldr	r0, [r4, #8]
   1d114:	f012 fa65 	bl	2f5e2 <net_buf_frag_last>
   1d118:	2102      	movs	r1, #2
   1d11a:	300c      	adds	r0, #12
   1d11c:	f012 fa83 	bl	2f626 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1d120:	4b13      	ldr	r3, [pc, #76]	; (1d170 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1d122:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1d124:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1d128:	9300      	str	r3, [sp, #0]
   1d12a:	9401      	str	r4, [sp, #4]
   1d12c:	4633      	mov	r3, r6
   1d12e:	4629      	mov	r1, r5
   1d130:	4638      	mov	r0, r7
   1d132:	68a2      	ldr	r2, [r4, #8]
   1d134:	f011 f843 	bl	2e1be <att_chan_read>
	if (read < 0) {
   1d138:	2800      	cmp	r0, #0
   1d13a:	da07      	bge.n	1d14c <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1d13c:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1d140:	bf32      	itee	cc
   1d142:	200e      	movcc	r0, #14
		return -err;
   1d144:	4240      	negcs	r0, r0
   1d146:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1d148:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1d14a:	e7de      	b.n	1d10a <read_type_cb+0x36>
	if (!data->item) {
   1d14c:	6923      	ldr	r3, [r4, #16]
   1d14e:	2b00      	cmp	r3, #0
   1d150:	d0db      	beq.n	1d10a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1d152:	68a0      	ldr	r0, [r4, #8]
   1d154:	f010 fef4 	bl	2df40 <net_buf_frags_len>
   1d158:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1d15a:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1d15c:	68e3      	ldr	r3, [r4, #12]
   1d15e:	781b      	ldrb	r3, [r3, #0]
   1d160:	4298      	cmp	r0, r3
   1d162:	bf94      	ite	ls
   1d164:	2000      	movls	r0, #0
   1d166:	2001      	movhi	r0, #1
   1d168:	e7d0      	b.n	1d10c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1d16a:	2001      	movs	r0, #1
   1d16c:	e7ce      	b.n	1d10c <read_type_cb+0x38>
   1d16e:	bf00      	nop
   1d170:	0002df51 	.word	0x0002df51

0001d174 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1d174:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d176:	b087      	sub	sp, #28
   1d178:	4604      	mov	r4, r0
   1d17a:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1d17c:	2200      	movs	r2, #0
   1d17e:	2300      	movs	r3, #0
   1d180:	4831      	ldr	r0, [pc, #196]	; (1d248 <bt_att_accept+0xd4>)
   1d182:	a904      	add	r1, sp, #16
   1d184:	f008 fb9a 	bl	258bc <k_mem_slab_alloc>
   1d188:	4605      	mov	r5, r0
   1d18a:	b178      	cbz	r0, 1d1ac <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   1d18c:	4b2f      	ldr	r3, [pc, #188]	; (1d24c <bt_att_accept+0xd8>)
   1d18e:	2201      	movs	r2, #1
   1d190:	9302      	str	r3, [sp, #8]
   1d192:	2300      	movs	r3, #0
   1d194:	e9cd 3300 	strd	r3, r3, [sp]
   1d198:	9403      	str	r4, [sp, #12]
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1d19a:	4618      	mov	r0, r3
   1d19c:	492c      	ldr	r1, [pc, #176]	; (1d250 <bt_att_accept+0xdc>)
   1d19e:	f010 ffbe 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1d1a2:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1d1a6:	4630      	mov	r0, r6
   1d1a8:	b007      	add	sp, #28
   1d1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   1d1ac:	f009 fad0 	bl	26750 <z_impl_z_current_get>
	(void)memset(att, 0, sizeof(*att));
   1d1b0:	9e04      	ldr	r6, [sp, #16]
	att_handle_rsp_thread = k_current_get();
   1d1b2:	4b28      	ldr	r3, [pc, #160]	; (1d254 <bt_att_accept+0xe0>)
   1d1b4:	2228      	movs	r2, #40	; 0x28
   1d1b6:	6018      	str	r0, [r3, #0]
   1d1b8:	4629      	mov	r1, r5
   1d1ba:	1d30      	adds	r0, r6, #4
   1d1bc:	f014 fc6b 	bl	31a96 <memset>
	att->conn = conn;
   1d1c0:	6034      	str	r4, [r6, #0]
	sys_slist_init(&att->reqs);
   1d1c2:	9c04      	ldr	r4, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1d1c4:	2200      	movs	r2, #0
   1d1c6:	2300      	movs	r3, #0
	list->tail = NULL;
   1d1c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1d1cc:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
   1d1d0:	4821      	ldr	r0, [pc, #132]	; (1d258 <bt_att_accept+0xe4>)
   1d1d2:	a905      	add	r1, sp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1d1d4:	9505      	str	r5, [sp, #20]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1d1d6:	f008 fb71 	bl	258bc <k_mem_slab_alloc>
   1d1da:	4606      	mov	r6, r0
   1d1dc:	b140      	cbz	r0, 1d1f0 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1d1de:	6823      	ldr	r3, [r4, #0]
   1d1e0:	2202      	movs	r2, #2
   1d1e2:	9303      	str	r3, [sp, #12]
   1d1e4:	4b1d      	ldr	r3, [pc, #116]	; (1d25c <bt_att_accept+0xe8>)
   1d1e6:	9500      	str	r5, [sp, #0]
   1d1e8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1d1ec:	462b      	mov	r3, r5
   1d1ee:	e7d4      	b.n	1d19a <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   1d1f0:	9b05      	ldr	r3, [sp, #20]
   1d1f2:	4601      	mov	r1, r0
   1d1f4:	22e8      	movs	r2, #232	; 0xe8
   1d1f6:	4618      	mov	r0, r3
   1d1f8:	f014 fc4d 	bl	31a96 <memset>
	chan->chan.chan.ops = &ops;
   1d1fc:	4a18      	ldr	r2, [pc, #96]	; (1d260 <bt_att_accept+0xec>)
   1d1fe:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   1d200:	3098      	adds	r0, #152	; 0x98
   1d202:	f013 ff9e 	bl	31142 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d206:	9b05      	ldr	r3, [sp, #20]
   1d208:	3390      	adds	r3, #144	; 0x90
   1d20a:	e8d3 2fef 	ldaex	r2, [r3]
   1d20e:	e8c3 6fe1 	stlex	r1, r6, [r3]
   1d212:	2900      	cmp	r1, #0
   1d214:	d1f9      	bne.n	1d20a <bt_att_accept+0x96>
	chan->att = att;
   1d216:	9b05      	ldr	r3, [sp, #20]
   1d218:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1d21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1d21c:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   1d21e:	b91b      	cbnz	r3, 1d228 <bt_att_accept+0xb4>
   1d220:	f104 000c 	add.w	r0, r4, #12
   1d224:	f013 ff8d 	bl	31142 <z_impl_k_queue_init>
	return list->head;
   1d228:	6a62      	ldr	r2, [r4, #36]	; 0x24
	sys_slist_prepend(&att->chans, &chan->node);
   1d22a:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
	parent->next = child;
   1d22e:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1d232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list->head = node;
   1d234:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1d236:	b902      	cbnz	r2, 1d23a <bt_att_accept+0xc6>
	list->tail = node;
   1d238:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1d23a:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   1d23c:	2b00      	cmp	r3, #0
   1d23e:	d0b0      	beq.n	1d1a2 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   1d240:	3304      	adds	r3, #4
   1d242:	603b      	str	r3, [r7, #0]
	return 0;
   1d244:	e7af      	b.n	1d1a6 <bt_att_accept+0x32>
   1d246:	bf00      	nop
   1d248:	20008b88 	.word	0x20008b88
   1d24c:	00037804 	.word	0x00037804
   1d250:	0003320c 	.word	0x0003320c
   1d254:	20030aec 	.word	0x20030aec
   1d258:	20008ba4 	.word	0x20008ba4
   1d25c:	00037829 	.word	0x00037829
   1d260:	200085cc 	.word	0x200085cc

0001d264 <bt_att_chan_create_pdu>:
{
   1d264:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d266:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   1d268:	3201      	adds	r2, #1
   1d26a:	429a      	cmp	r2, r3
{
   1d26c:	460d      	mov	r5, r1
   1d26e:	b087      	sub	sp, #28
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d270:	d90f      	bls.n	1d292 <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1d272:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d276:	4b25      	ldr	r3, [pc, #148]	; (1d30c <bt_att_chan_create_pdu+0xa8>)
   1d278:	2202      	movs	r2, #2
   1d27a:	9302      	str	r3, [sp, #8]
   1d27c:	2300      	movs	r3, #0
   1d27e:	4924      	ldr	r1, [pc, #144]	; (1d310 <bt_att_chan_create_pdu+0xac>)
   1d280:	4618      	mov	r0, r3
   1d282:	e9cd 3300 	strd	r3, r3, [sp]
   1d286:	f010 ff4a 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1d28a:	2400      	movs	r4, #0
}
   1d28c:	4620      	mov	r0, r4
   1d28e:	b007      	add	sp, #28
   1d290:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   1d292:	4608      	mov	r0, r1
   1d294:	f7ff fd24 	bl	1cce0 <att_op_get_type>
   1d298:	2802      	cmp	r0, #2
   1d29a:	d018      	beq.n	1d2ce <bt_att_chan_create_pdu+0x6a>
   1d29c:	2804      	cmp	r0, #4
   1d29e:	d016      	beq.n	1d2ce <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   1d2a0:	f04f 36ff 	mov.w	r6, #4294967295
   1d2a4:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1d2a8:	2100      	movs	r1, #0
   1d2aa:	4632      	mov	r2, r6
   1d2ac:	463b      	mov	r3, r7
   1d2ae:	4608      	mov	r0, r1
   1d2b0:	f010 fe0d 	bl	2dece <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1d2b4:	4604      	mov	r4, r0
   1d2b6:	b970      	cbnz	r0, 1d2d6 <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1d2b8:	4b16      	ldr	r3, [pc, #88]	; (1d314 <bt_att_chan_create_pdu+0xb0>)
   1d2ba:	2201      	movs	r2, #1
   1d2bc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1d2c0:	4913      	ldr	r1, [pc, #76]	; (1d310 <bt_att_chan_create_pdu+0xac>)
   1d2c2:	4603      	mov	r3, r0
   1d2c4:	9503      	str	r5, [sp, #12]
   1d2c6:	9000      	str	r0, [sp, #0]
   1d2c8:	f010 ff29 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
		return NULL;
   1d2cc:	e7dd      	b.n	1d28a <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   1d2ce:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   1d2d2:	2700      	movs	r7, #0
   1d2d4:	e7e8      	b.n	1d2a8 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   1d2d6:	4810      	ldr	r0, [pc, #64]	; (1d318 <bt_att_chan_create_pdu+0xb4>)
   1d2d8:	463b      	mov	r3, r7
   1d2da:	4632      	mov	r2, r6
   1d2dc:	f008 fcc6 	bl	25c6c <z_impl_k_queue_get>
   1d2e0:	4603      	mov	r3, r0
	if (!data) {
   1d2e2:	b958      	cbnz	r0, 1d2fc <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   1d2e4:	4a0d      	ldr	r2, [pc, #52]	; (1d31c <bt_att_chan_create_pdu+0xb8>)
   1d2e6:	9000      	str	r0, [sp, #0]
   1d2e8:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1d2ec:	4908      	ldr	r1, [pc, #32]	; (1d310 <bt_att_chan_create_pdu+0xac>)
   1d2ee:	2202      	movs	r2, #2
   1d2f0:	f010 ff15 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   1d2f4:	4620      	mov	r0, r4
   1d2f6:	f003 fa4b 	bl	20790 <net_buf_unref>
		return NULL;
   1d2fa:	e7c6      	b.n	1d28a <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   1d2fc:	61a0      	str	r0, [r4, #24]
   1d2fe:	2101      	movs	r1, #1
   1d300:	f104 000c 	add.w	r0, r4, #12
   1d304:	f012 f98f 	bl	2f626 <net_buf_simple_add>
	hdr->code = op;
   1d308:	7005      	strb	r5, [r0, #0]
	return buf;
   1d30a:	e7bf      	b.n	1d28c <bt_att_chan_create_pdu+0x28>
   1d30c:	0003784e 	.word	0x0003784e
   1d310:	0003320c 	.word	0x0003320c
   1d314:	00037645 	.word	0x00037645
   1d318:	20008ed0 	.word	0x20008ed0
   1d31c:	00037873 	.word	0x00037873

0001d320 <bt_att_recv>:
{
   1d320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   1d324:	8a0b      	ldrh	r3, [r1, #16]
{
   1d326:	4607      	mov	r7, r0
   1d328:	460d      	mov	r5, r1
   1d32a:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1d32c:	b963      	cbnz	r3, 1d348 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   1d32e:	4a42      	ldr	r2, [pc, #264]	; (1d438 <bt_att_recv+0x118>)
   1d330:	9300      	str	r3, [sp, #0]
   1d332:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1d336:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   1d338:	4618      	mov	r0, r3
   1d33a:	4940      	ldr	r1, [pc, #256]	; (1d43c <bt_att_recv+0x11c>)
   1d33c:	f010 feef 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
}
   1d340:	2000      	movs	r0, #0
   1d342:	b006      	add	sp, #24
   1d344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1d348:	2101      	movs	r1, #1
   1d34a:	f105 000c 	add.w	r0, r5, #12
   1d34e:	f012 f99a 	bl	2f686 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1d352:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1d356:	4604      	mov	r4, r0
   1d358:	2b00      	cmp	r3, #0
   1d35a:	d0f1      	beq.n	1d340 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1d35c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1d35e:	7802      	ldrb	r2, [r0, #0]
   1d360:	4e37      	ldr	r6, [pc, #220]	; (1d440 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1d362:	f1a7 0804 	sub.w	r8, r7, #4
		if (hdr->code == handlers[i].op) {
   1d366:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   1d36a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1d36e:	4290      	cmp	r0, r2
   1d370:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   1d374:	d111      	bne.n	1d39a <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   1d376:	f891 9002 	ldrb.w	r9, [r1, #2]
   1d37a:	f1b9 0f01 	cmp.w	r9, #1
   1d37e:	d12b      	bne.n	1d3d8 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1d380:	2100      	movs	r1, #0
   1d382:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   1d386:	f010 ffc0 	bl	2e30a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1d38a:	b380      	cbz	r0, 1d3ee <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   1d38c:	4b2d      	ldr	r3, [pc, #180]	; (1d444 <bt_att_recv+0x124>)
   1d38e:	9302      	str	r3, [sp, #8]
   1d390:	2300      	movs	r3, #0
   1d392:	2202      	movs	r2, #2
   1d394:	e9cd 3300 	strd	r3, r3, [sp]
   1d398:	e7ce      	b.n	1d338 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1d39a:	3301      	adds	r3, #1
   1d39c:	2b0e      	cmp	r3, #14
   1d39e:	d1e2      	bne.n	1d366 <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1d3a0:	2500      	movs	r5, #0
   1d3a2:	4b29      	ldr	r3, [pc, #164]	; (1d448 <bt_att_recv+0x128>)
   1d3a4:	4628      	mov	r0, r5
   1d3a6:	4925      	ldr	r1, [pc, #148]	; (1d43c <bt_att_recv+0x11c>)
   1d3a8:	9203      	str	r2, [sp, #12]
   1d3aa:	9302      	str	r3, [sp, #8]
   1d3ac:	2202      	movs	r2, #2
   1d3ae:	462b      	mov	r3, r5
   1d3b0:	e9cd 5500 	strd	r5, r5, [sp]
   1d3b4:	f010 feb3 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1d3b8:	7821      	ldrb	r1, [r4, #0]
   1d3ba:	4608      	mov	r0, r1
   1d3bc:	f7ff fc90 	bl	1cce0 <att_op_get_type>
   1d3c0:	2800      	cmp	r0, #0
   1d3c2:	d0bd      	beq.n	1d340 <bt_att_recv+0x20>
   1d3c4:	2805      	cmp	r0, #5
   1d3c6:	d0bb      	beq.n	1d340 <bt_att_recv+0x20>
	if (!req) {
   1d3c8:	2900      	cmp	r1, #0
   1d3ca:	d0b9      	beq.n	1d340 <bt_att_recv+0x20>
   1d3cc:	2306      	movs	r3, #6
   1d3ce:	2200      	movs	r2, #0
   1d3d0:	4640      	mov	r0, r8
   1d3d2:	f011 f908 	bl	2e5e6 <send_err_rsp.part.0>
   1d3d6:	e7b3      	b.n	1d340 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   1d3d8:	f1b9 0f05 	cmp.w	r9, #5
   1d3dc:	d107      	bne.n	1d3ee <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   1d3de:	2101      	movs	r1, #1
   1d3e0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   1d3e4:	f010 ff91 	bl	2e30a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1d3e8:	b108      	cbz	r0, 1d3ee <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   1d3ea:	4b18      	ldr	r3, [pc, #96]	; (1d44c <bt_att_recv+0x12c>)
   1d3ec:	e7cf      	b.n	1d38e <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   1d3ee:	4456      	add	r6, sl
   1d3f0:	8a2b      	ldrh	r3, [r5, #16]
   1d3f2:	7872      	ldrb	r2, [r6, #1]
   1d3f4:	429a      	cmp	r2, r3
   1d3f6:	d911      	bls.n	1d41c <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1d3f8:	7822      	ldrb	r2, [r4, #0]
   1d3fa:	4910      	ldr	r1, [pc, #64]	; (1d43c <bt_att_recv+0x11c>)
   1d3fc:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1d400:	4b13      	ldr	r3, [pc, #76]	; (1d450 <bt_att_recv+0x130>)
   1d402:	2201      	movs	r2, #1
   1d404:	9302      	str	r3, [sp, #8]
   1d406:	2300      	movs	r3, #0
   1d408:	4618      	mov	r0, r3
   1d40a:	e9cd 3300 	strd	r3, r3, [sp]
   1d40e:	f010 fe86 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1d412:	f1b9 0f01 	cmp.w	r9, #1
   1d416:	d193      	bne.n	1d340 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   1d418:	2304      	movs	r3, #4
   1d41a:	e009      	b.n	1d430 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   1d41c:	6873      	ldr	r3, [r6, #4]
   1d41e:	4629      	mov	r1, r5
   1d420:	4640      	mov	r0, r8
   1d422:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1d424:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1d428:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1d42a:	d189      	bne.n	1d340 <bt_att_recv+0x20>
   1d42c:	2800      	cmp	r0, #0
   1d42e:	d087      	beq.n	1d340 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1d430:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1d432:	2900      	cmp	r1, #0
   1d434:	d084      	beq.n	1d340 <bt_att_recv+0x20>
   1d436:	e7ca      	b.n	1d3ce <bt_att_recv+0xae>
   1d438:	00037892 	.word	0x00037892
   1d43c:	0003320c 	.word	0x0003320c
   1d440:	00033f18 	.word	0x00033f18
   1d444:	000378c7 	.word	0x000378c7
   1d448:	000378ad 	.word	0x000378ad
   1d44c:	000378e3 	.word	0x000378e3
   1d450:	00037902 	.word	0x00037902

0001d454 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d454:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d456:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d458:	6803      	ldr	r3, [r0, #0]
   1d45a:	460d      	mov	r5, r1
   1d45c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d45e:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d460:	bf18      	it	ne
   1d462:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d464:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d466:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1d468:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1d46a:	f011 fc8c 	bl	2ed86 <bt_gatt_change_aware>
   1d46e:	b948      	cbnz	r0, 1d484 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d470:	2105      	movs	r1, #5
   1d472:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d476:	f010 ff48 	bl	2e30a <atomic_test_and_set_bit>
   1d47a:	2800      	cmp	r0, #0
   1d47c:	d048      	beq.n	1d510 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1d47e:	2000      	movs	r0, #0
}
   1d480:	b007      	add	sp, #28
   1d482:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1d484:	2e00      	cmp	r6, #0
   1d486:	d045      	beq.n	1d514 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1d488:	2218      	movs	r2, #24
   1d48a:	2100      	movs	r1, #0
   1d48c:	4668      	mov	r0, sp
   1d48e:	f014 fb02 	bl	31a96 <memset>
	if (rsp) {
   1d492:	bb67      	cbnz	r7, 1d4ee <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1d494:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d496:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   1d498:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d49a:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   1d49c:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1d49e:	2300      	movs	r3, #0
   1d4a0:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1d4a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d4a6:	4a1c      	ldr	r2, [pc, #112]	; (1d518 <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   1d4a8:	9303      	str	r3, [sp, #12]
	data.len = len;
   1d4aa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   1d4ae:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   1d4b2:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d4b6:	2301      	movs	r3, #1
   1d4b8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1d4bc:	466b      	mov	r3, sp
   1d4be:	f010 fd90 	bl	2dfe2 <bt_gatt_foreach_attr>
	if (data.err) {
   1d4c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d4c6:	b1e3      	cbz	r3, 1d502 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1d4c8:	2f00      	cmp	r7, #0
   1d4ca:	d0d8      	beq.n	1d47e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d4cc:	9b01      	ldr	r3, [sp, #4]
   1d4ce:	6998      	ldr	r0, [r3, #24]
   1d4d0:	f7ff fc4c 	bl	1cd6c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d4d4:	9801      	ldr	r0, [sp, #4]
   1d4d6:	f003 f95b 	bl	20790 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1d4da:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1d4de:	2d00      	cmp	r5, #0
   1d4e0:	d0cd      	beq.n	1d47e <att_write_rsp.constprop.0+0x2a>
   1d4e2:	4632      	mov	r2, r6
   1d4e4:	4629      	mov	r1, r5
   1d4e6:	4620      	mov	r0, r4
   1d4e8:	f011 f87d 	bl	2e5e6 <send_err_rsp.part.0>
   1d4ec:	e7c7      	b.n	1d47e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1d4ee:	2200      	movs	r2, #0
   1d4f0:	4639      	mov	r1, r7
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7ff feb6 	bl	1d264 <bt_att_chan_create_pdu>
   1d4f8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1d4fa:	2800      	cmp	r0, #0
   1d4fc:	d1ca      	bne.n	1d494 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1d4fe:	200e      	movs	r0, #14
   1d500:	e7be      	b.n	1d480 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1d502:	9901      	ldr	r1, [sp, #4]
   1d504:	2900      	cmp	r1, #0
   1d506:	d0ba      	beq.n	1d47e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1d508:	4620      	mov	r0, r4
   1d50a:	f010 fe4a 	bl	2e1a2 <bt_att_chan_send_rsp>
   1d50e:	e7b6      	b.n	1d47e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d510:	2012      	movs	r0, #18
   1d512:	e7b5      	b.n	1d480 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d514:	2001      	movs	r0, #1
   1d516:	e7b3      	b.n	1d480 <att_write_rsp.constprop.0+0x2c>
   1d518:	0002df81 	.word	0x0002df81

0001d51c <bt_att_create_pdu>:
{
   1d51c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d51e:	460e      	mov	r6, r1
   1d520:	4615      	mov	r5, r2
	att = att_get(conn);
   1d522:	f7ff fd3b 	bl	1cf9c <att_get>
	if (!att) {
   1d526:	b1c0      	cbz	r0, 1d55a <bt_att_create_pdu+0x3e>
	return list->head;
   1d528:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d52a:	4618      	mov	r0, r3
   1d52c:	b11b      	cbz	r3, 1d536 <bt_att_create_pdu+0x1a>
	return node->next;
   1d52e:	f850 39e0 	ldr.w	r3, [r0], #-224
   1d532:	b103      	cbz	r3, 1d536 <bt_att_create_pdu+0x1a>
   1d534:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d536:	1c6c      	adds	r4, r5, #1
   1d538:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d53a:	b118      	cbz	r0, 1d544 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d53c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1d53e:	42a1      	cmp	r1, r4
   1d540:	d216      	bcs.n	1d570 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d542:	b96b      	cbnz	r3, 1d560 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1d544:	4b0f      	ldr	r3, [pc, #60]	; (1d584 <bt_att_create_pdu+0x68>)
   1d546:	2202      	movs	r2, #2
   1d548:	9302      	str	r3, [sp, #8]
   1d54a:	2300      	movs	r3, #0
   1d54c:	490e      	ldr	r1, [pc, #56]	; (1d588 <bt_att_create_pdu+0x6c>)
   1d54e:	4618      	mov	r0, r3
   1d550:	e9cd 3300 	strd	r3, r3, [sp]
   1d554:	9403      	str	r4, [sp, #12]
   1d556:	f010 fde2 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
}
   1d55a:	2000      	movs	r0, #0
   1d55c:	b004      	add	sp, #16
   1d55e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d560:	4618      	mov	r0, r3
   1d562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1d566:	b153      	cbz	r3, 1d57e <bt_att_create_pdu+0x62>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d568:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d56a:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d56c:	428a      	cmp	r2, r1
   1d56e:	d8f7      	bhi.n	1d560 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   1d570:	462a      	mov	r2, r5
   1d572:	4631      	mov	r1, r6
}
   1d574:	b004      	add	sp, #16
   1d576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1d57a:	f7ff be73 	b.w	1d264 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d57e:	4614      	mov	r4, r2
   1d580:	e7dc      	b.n	1d53c <bt_att_create_pdu+0x20>
   1d582:	bf00      	nop
   1d584:	00037921 	.word	0x00037921
   1d588:	0003320c 	.word	0x0003320c

0001d58c <att_read_group_req>:
{
   1d58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d590:	8a0e      	ldrh	r6, [r1, #16]
{
   1d592:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d594:	3e04      	subs	r6, #4
   1d596:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1d598:	2e02      	cmp	r6, #2
{
   1d59a:	4608      	mov	r0, r1
   1d59c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1d59e:	d001      	beq.n	1d5a4 <att_read_group_req+0x18>
   1d5a0:	2e10      	cmp	r6, #16
   1d5a2:	d16a      	bne.n	1d67a <att_read_group_req+0xee>
   1d5a4:	2104      	movs	r1, #4
   1d5a6:	300c      	adds	r0, #12
   1d5a8:	f012 f86d 	bl	2f686 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d5ac:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d5b0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d5b2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d5b4:	1d01      	adds	r1, r0, #4
   1d5b6:	4632      	mov	r2, r6
   1d5b8:	4640      	mov	r0, r8
   1d5ba:	f00f ff66 	bl	2d48a <bt_uuid_create>
   1d5be:	2800      	cmp	r0, #0
   1d5c0:	d05d      	beq.n	1d67e <att_read_group_req+0xf2>
	if (!start || !end) {
   1d5c2:	2d00      	cmp	r5, #0
   1d5c4:	d03a      	beq.n	1d63c <att_read_group_req+0xb0>
   1d5c6:	2600      	movs	r6, #0
   1d5c8:	2f00      	cmp	r7, #0
   1d5ca:	d036      	beq.n	1d63a <att_read_group_req+0xae>
	if (start > end) {
   1d5cc:	42bd      	cmp	r5, r7
   1d5ce:	d835      	bhi.n	1d63c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1d5d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d5d4:	4640      	mov	r0, r8
   1d5d6:	a901      	add	r1, sp, #4
   1d5d8:	f88d 6004 	strb.w	r6, [sp, #4]
   1d5dc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d5e0:	f00f ff25 	bl	2d42e <bt_uuid_cmp>
   1d5e4:	bb70      	cbnz	r0, 1d644 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1d5e6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d5e8:	2214      	movs	r2, #20
   1d5ea:	2100      	movs	r1, #0
   1d5ec:	a807      	add	r0, sp, #28
   1d5ee:	f014 fa52 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1d5f2:	2201      	movs	r2, #1
   1d5f4:	2111      	movs	r1, #17
   1d5f6:	4630      	mov	r0, r6
   1d5f8:	f7ff ff90 	bl	1d51c <bt_att_create_pdu>
   1d5fc:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1d5fe:	2800      	cmp	r0, #0
   1d600:	d03d      	beq.n	1d67e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1d602:	2101      	movs	r1, #1
   1d604:	300c      	adds	r0, #12
	data.uuid = uuid;
   1d606:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1d60a:	f012 f80c 	bl	2f626 <net_buf_simple_add>
	data.rsp->len = 0U;
   1d60e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d610:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d612:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1d614:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d616:	4a1b      	ldr	r2, [pc, #108]	; (1d684 <att_read_group_req+0xf8>)
	data.group = NULL;
   1d618:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1d61a:	4628      	mov	r0, r5
   1d61c:	ab07      	add	r3, sp, #28
   1d61e:	f010 fce0 	bl	2dfe2 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1d622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d624:	781b      	ldrb	r3, [r3, #0]
   1d626:	bb1b      	cbnz	r3, 1d670 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d628:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d62a:	6998      	ldr	r0, [r3, #24]
   1d62c:	f7ff fb9e 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d630:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d632:	f003 f8ad 	bl	20790 <net_buf_unref>
	if (!req) {
   1d636:	230a      	movs	r3, #10
   1d638:	e001      	b.n	1d63e <att_read_group_req+0xb2>
			*err = 0U;
   1d63a:	463d      	mov	r5, r7
	if (!req) {
   1d63c:	2301      	movs	r3, #1
   1d63e:	462a      	mov	r2, r5
   1d640:	2110      	movs	r1, #16
   1d642:	e00e      	b.n	1d662 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1d644:	f642 0301 	movw	r3, #10241	; 0x2801
   1d648:	4640      	mov	r0, r8
   1d64a:	a907      	add	r1, sp, #28
   1d64c:	f88d 601c 	strb.w	r6, [sp, #28]
   1d650:	f8ad 301e 	strh.w	r3, [sp, #30]
   1d654:	f00f feeb 	bl	2d42e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1d658:	2800      	cmp	r0, #0
   1d65a:	d0c4      	beq.n	1d5e6 <att_read_group_req+0x5a>
	if (!req) {
   1d65c:	2310      	movs	r3, #16
   1d65e:	462a      	mov	r2, r5
   1d660:	4619      	mov	r1, r3
   1d662:	4620      	mov	r0, r4
   1d664:	f010 ffbf 	bl	2e5e6 <send_err_rsp.part.0>
		return 0;
   1d668:	2000      	movs	r0, #0
}
   1d66a:	b00c      	add	sp, #48	; 0x30
   1d66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1d670:	4620      	mov	r0, r4
   1d672:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d674:	f010 fd95 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1d678:	e7f6      	b.n	1d668 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1d67a:	2004      	movs	r0, #4
   1d67c:	e7f5      	b.n	1d66a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1d67e:	200e      	movs	r0, #14
   1d680:	e7f3      	b.n	1d66a <att_read_group_req+0xde>
   1d682:	bf00      	nop
   1d684:	0001d029 	.word	0x0001d029

0001d688 <att_read_mult_vl_req>:
{
   1d688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d68c:	6846      	ldr	r6, [r0, #4]
{
   1d68e:	4604      	mov	r4, r0
   1d690:	460d      	mov	r5, r1
   1d692:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1d694:	2101      	movs	r1, #1
   1d696:	4630      	mov	r0, r6
   1d698:	f011 fb75 	bl	2ed86 <bt_gatt_change_aware>
   1d69c:	b950      	cbnz	r0, 1d6b4 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d69e:	2105      	movs	r1, #5
   1d6a0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d6a4:	f010 fe31 	bl	2e30a <atomic_test_and_set_bit>
   1d6a8:	2800      	cmp	r0, #0
   1d6aa:	d13b      	bne.n	1d724 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d6ac:	2012      	movs	r0, #18
}
   1d6ae:	b005      	add	sp, #20
   1d6b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1d6b4:	2210      	movs	r2, #16
   1d6b6:	2100      	movs	r1, #0
   1d6b8:	4668      	mov	r0, sp
   1d6ba:	f014 f9ec 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1d6be:	2200      	movs	r2, #0
   1d6c0:	2121      	movs	r1, #33	; 0x21
   1d6c2:	4630      	mov	r0, r6
   1d6c4:	f7ff ff2a 	bl	1d51c <bt_att_create_pdu>
   1d6c8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d6ca:	b368      	cbz	r0, 1d728 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d6cc:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d6d0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d72c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1d6d4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1d6d6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1d6da:	8a2b      	ldrh	r3, [r5, #16]
   1d6dc:	2b01      	cmp	r3, #1
   1d6de:	d804      	bhi.n	1d6ea <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1d6e0:	4620      	mov	r0, r4
   1d6e2:	9902      	ldr	r1, [sp, #8]
   1d6e4:	f010 fd5d 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1d6e8:	e01c      	b.n	1d724 <att_read_mult_vl_req+0x9c>
   1d6ea:	4638      	mov	r0, r7
   1d6ec:	f011 ffd3 	bl	2f696 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d6f0:	466b      	mov	r3, sp
   1d6f2:	464a      	mov	r2, r9
   1d6f4:	4601      	mov	r1, r0
   1d6f6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d6f8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1d6fc:	f010 fc71 	bl	2dfe2 <bt_gatt_foreach_attr>
		if (data.err) {
   1d700:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d704:	2b00      	cmp	r3, #0
   1d706:	d0e8      	beq.n	1d6da <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d708:	9b02      	ldr	r3, [sp, #8]
   1d70a:	6998      	ldr	r0, [r3, #24]
   1d70c:	f7ff fb2e 	bl	1cd6c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d710:	9802      	ldr	r0, [sp, #8]
   1d712:	f003 f83d 	bl	20790 <net_buf_unref>
	if (!req) {
   1d716:	4632      	mov	r2, r6
   1d718:	2120      	movs	r1, #32
   1d71a:	4620      	mov	r0, r4
   1d71c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d720:	f010 ff61 	bl	2e5e6 <send_err_rsp.part.0>
			return 0;
   1d724:	2000      	movs	r0, #0
   1d726:	e7c2      	b.n	1d6ae <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1d728:	200e      	movs	r0, #14
   1d72a:	e7c0      	b.n	1d6ae <att_read_mult_vl_req+0x26>
   1d72c:	0002e373 	.word	0x0002e373

0001d730 <att_read_mult_req>:
{
   1d730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d734:	6846      	ldr	r6, [r0, #4]
{
   1d736:	4604      	mov	r4, r0
   1d738:	460d      	mov	r5, r1
   1d73a:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   1d73c:	2101      	movs	r1, #1
   1d73e:	4630      	mov	r0, r6
   1d740:	f011 fb21 	bl	2ed86 <bt_gatt_change_aware>
   1d744:	b950      	cbnz	r0, 1d75c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d746:	2105      	movs	r1, #5
   1d748:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d74c:	f010 fddd 	bl	2e30a <atomic_test_and_set_bit>
   1d750:	2800      	cmp	r0, #0
   1d752:	d13b      	bne.n	1d7cc <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d754:	2012      	movs	r0, #18
}
   1d756:	b005      	add	sp, #20
   1d758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1d75c:	2210      	movs	r2, #16
   1d75e:	2100      	movs	r1, #0
   1d760:	4668      	mov	r0, sp
   1d762:	f014 f998 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1d766:	2200      	movs	r2, #0
   1d768:	210f      	movs	r1, #15
   1d76a:	4630      	mov	r0, r6
   1d76c:	f7ff fed6 	bl	1d51c <bt_att_create_pdu>
   1d770:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d772:	b368      	cbz	r0, 1d7d0 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d774:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d778:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d7d4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1d77c:	9400      	str	r4, [sp, #0]
   1d77e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   1d782:	8a2b      	ldrh	r3, [r5, #16]
   1d784:	2b01      	cmp	r3, #1
   1d786:	d804      	bhi.n	1d792 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1d788:	4620      	mov	r0, r4
   1d78a:	9902      	ldr	r1, [sp, #8]
   1d78c:	f010 fd09 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1d790:	e01c      	b.n	1d7cc <att_read_mult_req+0x9c>
   1d792:	4638      	mov	r0, r7
   1d794:	f011 ff7f 	bl	2f696 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d798:	466b      	mov	r3, sp
   1d79a:	464a      	mov	r2, r9
   1d79c:	4601      	mov	r1, r0
   1d79e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d7a0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d7a4:	f010 fc1d 	bl	2dfe2 <bt_gatt_foreach_attr>
		if (data.err) {
   1d7a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d7ac:	2b00      	cmp	r3, #0
   1d7ae:	d0e8      	beq.n	1d782 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d7b0:	9b02      	ldr	r3, [sp, #8]
   1d7b2:	6998      	ldr	r0, [r3, #24]
   1d7b4:	f7ff fada 	bl	1cd6c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1d7b8:	9802      	ldr	r0, [sp, #8]
   1d7ba:	f002 ffe9 	bl	20790 <net_buf_unref>
	if (!req) {
   1d7be:	4632      	mov	r2, r6
   1d7c0:	210e      	movs	r1, #14
   1d7c2:	4620      	mov	r0, r4
   1d7c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d7c8:	f010 ff0d 	bl	2e5e6 <send_err_rsp.part.0>
			return 0;
   1d7cc:	2000      	movs	r0, #0
   1d7ce:	e7c2      	b.n	1d756 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1d7d0:	200e      	movs	r0, #14
   1d7d2:	e7c0      	b.n	1d756 <att_read_mult_req+0x26>
   1d7d4:	0002e32d 	.word	0x0002e32d

0001d7d8 <att_read_rsp>:
{
   1d7d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d7dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1d7e0:	4604      	mov	r4, r0
   1d7e2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1d7e4:	4640      	mov	r0, r8
   1d7e6:	2101      	movs	r1, #1
{
   1d7e8:	4617      	mov	r7, r2
   1d7ea:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1d7ec:	f011 facb 	bl	2ed86 <bt_gatt_change_aware>
   1d7f0:	b948      	cbnz	r0, 1d806 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1d7f2:	2105      	movs	r1, #5
   1d7f4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d7f8:	f010 fd87 	bl	2e30a <atomic_test_and_set_bit>
   1d7fc:	bb78      	cbnz	r0, 1d85e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1d7fe:	2012      	movs	r0, #18
}
   1d800:	b004      	add	sp, #16
   1d802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1d806:	b38d      	cbz	r5, 1d86c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1d808:	2210      	movs	r2, #16
   1d80a:	2100      	movs	r1, #0
   1d80c:	4668      	mov	r0, sp
   1d80e:	f014 f942 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1d812:	2200      	movs	r2, #0
   1d814:	4639      	mov	r1, r7
   1d816:	4640      	mov	r0, r8
   1d818:	f7ff fe80 	bl	1d51c <bt_att_create_pdu>
   1d81c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d81e:	b338      	cbz	r0, 1d870 <att_read_rsp+0x98>
	data.offset = offset;
   1d820:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d824:	4629      	mov	r1, r5
	data.offset = offset;
   1d826:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d82a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d82c:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1d82e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d832:	4a10      	ldr	r2, [pc, #64]	; (1d874 <att_read_rsp+0x9c>)
   1d834:	466b      	mov	r3, sp
	data.chan = chan;
   1d836:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1d838:	f010 fbd3 	bl	2dfe2 <bt_gatt_foreach_attr>
	if (data.err) {
   1d83c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d840:	b17b      	cbz	r3, 1d862 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d842:	9b02      	ldr	r3, [sp, #8]
   1d844:	6998      	ldr	r0, [r3, #24]
   1d846:	f7ff fa91 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d84a:	9802      	ldr	r0, [sp, #8]
   1d84c:	f002 ffa0 	bl	20790 <net_buf_unref>
	if (!req) {
   1d850:	462a      	mov	r2, r5
   1d852:	4631      	mov	r1, r6
   1d854:	4620      	mov	r0, r4
   1d856:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1d85a:	f010 fec4 	bl	2e5e6 <send_err_rsp.part.0>
			return 0;
   1d85e:	2000      	movs	r0, #0
   1d860:	e7ce      	b.n	1d800 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1d862:	4620      	mov	r0, r4
   1d864:	9902      	ldr	r1, [sp, #8]
   1d866:	f010 fc9c 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1d86a:	e7f8      	b.n	1d85e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1d86c:	2001      	movs	r0, #1
   1d86e:	e7c7      	b.n	1d800 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1d870:	200e      	movs	r0, #14
   1d872:	e7c5      	b.n	1d800 <att_read_rsp+0x28>
   1d874:	0002e32d 	.word	0x0002e32d

0001d878 <att_read_type_req>:
{
   1d878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d87c:	8a0d      	ldrh	r5, [r1, #16]
{
   1d87e:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1d880:	3d04      	subs	r5, #4
   1d882:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1d884:	2d02      	cmp	r5, #2
{
   1d886:	4608      	mov	r0, r1
   1d888:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   1d88a:	d001      	beq.n	1d890 <att_read_type_req+0x18>
   1d88c:	2d10      	cmp	r5, #16
   1d88e:	d150      	bne.n	1d932 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1d890:	2104      	movs	r1, #4
   1d892:	300c      	adds	r0, #12
   1d894:	f011 fef7 	bl	2f686 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d898:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d89c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d89e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1d8a0:	1d01      	adds	r1, r0, #4
   1d8a2:	462a      	mov	r2, r5
   1d8a4:	4640      	mov	r0, r8
   1d8a6:	f00f fdf0 	bl	2d48a <bt_uuid_create>
   1d8aa:	b188      	cbz	r0, 1d8d0 <att_read_type_req+0x58>
	if (!start || !end) {
   1d8ac:	b19e      	cbz	r6, 1d8d6 <att_read_type_req+0x5e>
   1d8ae:	b18f      	cbz	r7, 1d8d4 <att_read_type_req+0x5c>
	if (start > end) {
   1d8b0:	42be      	cmp	r6, r7
   1d8b2:	d810      	bhi.n	1d8d6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1d8b4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1d8b6:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d8b8:	2100      	movs	r1, #0
   1d8ba:	eb0d 0002 	add.w	r0, sp, r2
   1d8be:	f014 f8ea 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1d8c2:	2201      	movs	r2, #1
   1d8c4:	2109      	movs	r1, #9
   1d8c6:	4628      	mov	r0, r5
   1d8c8:	f7ff fe28 	bl	1d51c <bt_att_create_pdu>
   1d8cc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1d8ce:	b960      	cbnz	r0, 1d8ea <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1d8d0:	200e      	movs	r0, #14
   1d8d2:	e007      	b.n	1d8e4 <att_read_type_req+0x6c>
			*err = 0U;
   1d8d4:	463e      	mov	r6, r7
	if (!req) {
   1d8d6:	2301      	movs	r3, #1
   1d8d8:	4632      	mov	r2, r6
   1d8da:	2108      	movs	r1, #8
   1d8dc:	4620      	mov	r0, r4
   1d8de:	f010 fe82 	bl	2e5e6 <send_err_rsp.part.0>
		return 0;
   1d8e2:	2000      	movs	r0, #0
}
   1d8e4:	b00c      	add	sp, #48	; 0x30
   1d8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1d8ea:	2101      	movs	r1, #1
   1d8ec:	300c      	adds	r0, #12
	data.uuid = uuid;
   1d8ee:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1d8f2:	f011 fe98 	bl	2f626 <net_buf_simple_add>
	data.rsp->len = 0U;
   1d8f6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1d8f8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1d8fa:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d8fc:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1d8fe:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d900:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1d904:	4630      	mov	r0, r6
   1d906:	ab06      	add	r3, sp, #24
   1d908:	4a0b      	ldr	r2, [pc, #44]	; (1d938 <att_read_type_req+0xc0>)
   1d90a:	f010 fb6a 	bl	2dfe2 <bt_gatt_foreach_attr>
	if (data.err) {
   1d90e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d912:	b14b      	cbz	r3, 1d928 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d914:	9b08      	ldr	r3, [sp, #32]
   1d916:	6998      	ldr	r0, [r3, #24]
   1d918:	f7ff fa28 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d91c:	9808      	ldr	r0, [sp, #32]
   1d91e:	f002 ff37 	bl	20790 <net_buf_unref>
	if (!req) {
   1d922:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d926:	e7d7      	b.n	1d8d8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1d928:	4620      	mov	r0, r4
   1d92a:	9908      	ldr	r1, [sp, #32]
   1d92c:	f010 fc39 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1d930:	e7d7      	b.n	1d8e2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1d932:	2004      	movs	r0, #4
   1d934:	e7d6      	b.n	1d8e4 <att_read_type_req+0x6c>
   1d936:	bf00      	nop
   1d938:	0001d0d5 	.word	0x0001d0d5

0001d93c <att_find_type_req>:
{
   1d93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d940:	460f      	mov	r7, r1
   1d942:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1d944:	2106      	movs	r1, #6
   1d946:	b086      	sub	sp, #24
   1d948:	f107 000c 	add.w	r0, r7, #12
   1d94c:	f011 fe9b 	bl	2f686 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1d950:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1d952:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1d956:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1d958:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1d95c:	b1c5      	cbz	r5, 1d990 <att_find_type_req+0x54>
   1d95e:	2300      	movs	r3, #0
   1d960:	f1b8 0f00 	cmp.w	r8, #0
   1d964:	d013      	beq.n	1d98e <att_find_type_req+0x52>
	if (start > end) {
   1d966:	4545      	cmp	r5, r8
   1d968:	d812      	bhi.n	1d990 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1d96a:	f88d 3000 	strb.w	r3, [sp]
   1d96e:	f88d 3004 	strb.w	r3, [sp, #4]
   1d972:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d976:	4668      	mov	r0, sp
   1d978:	a901      	add	r1, sp, #4
   1d97a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1d97e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d982:	f00f fd54 	bl	2d42e <bt_uuid_cmp>
   1d986:	4606      	mov	r6, r0
   1d988:	b160      	cbz	r0, 1d9a4 <att_find_type_req+0x68>
	if (!req) {
   1d98a:	230a      	movs	r3, #10
   1d98c:	e001      	b.n	1d992 <att_find_type_req+0x56>
			*err = 0U;
   1d98e:	4645      	mov	r5, r8
	if (!req) {
   1d990:	2301      	movs	r3, #1
   1d992:	462a      	mov	r2, r5
   1d994:	2106      	movs	r1, #6
   1d996:	4620      	mov	r0, r4
   1d998:	f010 fe25 	bl	2e5e6 <send_err_rsp.part.0>
		return 0;
   1d99c:	2000      	movs	r0, #0
}
   1d99e:	b006      	add	sp, #24
   1d9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1d9a4:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1d9a8:	4601      	mov	r1, r0
   1d9aa:	2214      	movs	r2, #20
   1d9ac:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1d9ae:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1d9b0:	f014 f871 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1d9b4:	4632      	mov	r2, r6
   1d9b6:	2107      	movs	r1, #7
   1d9b8:	4650      	mov	r0, sl
   1d9ba:	f7ff fdaf 	bl	1d51c <bt_att_create_pdu>
   1d9be:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1d9c0:	b1f8      	cbz	r0, 1da02 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d9c2:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d9c4:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1d9c6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d9ca:	4628      	mov	r0, r5
   1d9cc:	ab01      	add	r3, sp, #4
   1d9ce:	4a0e      	ldr	r2, [pc, #56]	; (1da08 <att_find_type_req+0xcc>)
	data.value = value;
   1d9d0:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   1d9d4:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   1d9d6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1d9da:	f010 fb02 	bl	2dfe2 <bt_gatt_foreach_attr>
	if (data.err) {
   1d9de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d9e2:	b14b      	cbz	r3, 1d9f8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1d9e4:	9b02      	ldr	r3, [sp, #8]
   1d9e6:	6998      	ldr	r0, [r3, #24]
   1d9e8:	f7ff f9c0 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1d9ec:	9802      	ldr	r0, [sp, #8]
   1d9ee:	f002 fecf 	bl	20790 <net_buf_unref>
	if (!req) {
   1d9f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d9f6:	e7cc      	b.n	1d992 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1d9f8:	4620      	mov	r0, r4
   1d9fa:	9902      	ldr	r1, [sp, #8]
   1d9fc:	f010 fbd1 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1da00:	e7cc      	b.n	1d99c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1da02:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1da04:	e7cb      	b.n	1d99e <att_find_type_req+0x62>
   1da06:	bf00      	nop
   1da08:	0001cd89 	.word	0x0001cd89

0001da0c <att_find_info_req>:
{
   1da0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1da0e:	68cb      	ldr	r3, [r1, #12]
{
   1da10:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1da12:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1da14:	885e      	ldrh	r6, [r3, #2]
{
   1da16:	b085      	sub	sp, #20
	if (!start || !end) {
   1da18:	b195      	cbz	r5, 1da40 <att_find_info_req+0x34>
   1da1a:	b186      	cbz	r6, 1da3e <att_find_info_req+0x32>
	if (start > end) {
   1da1c:	42ae      	cmp	r6, r5
   1da1e:	d30f      	bcc.n	1da40 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1da20:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1da22:	2210      	movs	r2, #16
   1da24:	2100      	movs	r1, #0
   1da26:	4668      	mov	r0, sp
   1da28:	f014 f835 	bl	31a96 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1da2c:	2200      	movs	r2, #0
   1da2e:	2105      	movs	r1, #5
   1da30:	4638      	mov	r0, r7
   1da32:	f7ff fd73 	bl	1d51c <bt_att_create_pdu>
   1da36:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1da38:	b958      	cbnz	r0, 1da52 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1da3a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1da3c:	e007      	b.n	1da4e <att_find_info_req+0x42>
			*err = 0U;
   1da3e:	4635      	mov	r5, r6
	if (!req) {
   1da40:	2301      	movs	r3, #1
   1da42:	462a      	mov	r2, r5
   1da44:	2104      	movs	r1, #4
   1da46:	4620      	mov	r0, r4
   1da48:	f010 fdcd 	bl	2e5e6 <send_err_rsp.part.0>
		return 0;
   1da4c:	2000      	movs	r0, #0
}
   1da4e:	b005      	add	sp, #20
   1da50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1da52:	466b      	mov	r3, sp
   1da54:	4631      	mov	r1, r6
   1da56:	4628      	mov	r0, r5
   1da58:	4a09      	ldr	r2, [pc, #36]	; (1da80 <att_find_info_req+0x74>)
	data.chan = chan;
   1da5a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1da5c:	f010 fac1 	bl	2dfe2 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1da60:	9b02      	ldr	r3, [sp, #8]
   1da62:	b943      	cbnz	r3, 1da76 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1da64:	9b01      	ldr	r3, [sp, #4]
   1da66:	6998      	ldr	r0, [r3, #24]
   1da68:	f7ff f980 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1da6c:	9801      	ldr	r0, [sp, #4]
   1da6e:	f002 fe8f 	bl	20790 <net_buf_unref>
	if (!req) {
   1da72:	230a      	movs	r3, #10
   1da74:	e7e5      	b.n	1da42 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1da76:	4620      	mov	r0, r4
   1da78:	9901      	ldr	r1, [sp, #4]
   1da7a:	f010 fb92 	bl	2e1a2 <bt_att_chan_send_rsp>
	return 0;
   1da7e:	e7e5      	b.n	1da4c <att_find_info_req+0x40>
   1da80:	0002e07f 	.word	0x0002e07f

0001da84 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1da84:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1da86:	4c09      	ldr	r4, [pc, #36]	; (1daac <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1da88:	4d09      	ldr	r5, [pc, #36]	; (1dab0 <bt_att_init+0x2c>)
   1da8a:	4620      	mov	r0, r4
   1da8c:	f013 fb59 	bl	31142 <z_impl_k_queue_init>
   1da90:	4629      	mov	r1, r5
   1da92:	4620      	mov	r0, r4
   1da94:	f013 fb61 	bl	3115a <k_queue_append>
   1da98:	4620      	mov	r0, r4
   1da9a:	f105 0114 	add.w	r1, r5, #20
   1da9e:	f013 fb5c 	bl	3115a <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1daa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1daa6:	f000 bb0b 	b.w	1e0c0 <bt_gatt_init>
   1daaa:	bf00      	nop
   1daac:	20008ed0 	.word	0x20008ed0
   1dab0:	20030ac4 	.word	0x20030ac4

0001dab4 <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   1dab4:	2300      	movs	r3, #0
{
   1dab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dab8:	4605      	mov	r5, r0
   1daba:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1dabc:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1dabe:	f008 fe47 	bl	26750 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1dac2:	4b0c      	ldr	r3, [pc, #48]	; (1daf4 <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1dac4:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   1dac6:	681b      	ldr	r3, [r3, #0]
   1dac8:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   1daca:	bf04      	itt	eq
   1dacc:	2500      	moveq	r5, #0
   1dace:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1dad0:	462a      	mov	r2, r5
   1dad2:	4623      	mov	r3, r4
   1dad4:	4808      	ldr	r0, [pc, #32]	; (1daf8 <bt_att_req_alloc+0x44>)
   1dad6:	f007 fef1 	bl	258bc <k_mem_slab_alloc>
   1dada:	4601      	mov	r1, r0
   1dadc:	b940      	cbnz	r0, 1daf0 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1dade:	9b01      	ldr	r3, [sp, #4]
   1dae0:	221c      	movs	r2, #28
   1dae2:	4618      	mov	r0, r3
   1dae4:	f013 ffd7 	bl	31a96 <memset>
   1dae8:	4603      	mov	r3, r0

	return req;
}
   1daea:	4618      	mov	r0, r3
   1daec:	b003      	add	sp, #12
   1daee:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1daf0:	2300      	movs	r3, #0
   1daf2:	e7fa      	b.n	1daea <bt_att_req_alloc+0x36>
   1daf4:	20030aec 	.word	0x20030aec
   1daf8:	20008bc0 	.word	0x20008bc0

0001dafc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1dafc:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1dafe:	6883      	ldr	r3, [r0, #8]
{
   1db00:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1db02:	b14b      	cbz	r3, 1db18 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1db04:	6998      	ldr	r0, [r3, #24]
   1db06:	f7ff f931 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(req->buf);
   1db0a:	9b01      	ldr	r3, [sp, #4]
   1db0c:	6898      	ldr	r0, [r3, #8]
   1db0e:	f002 fe3f 	bl	20790 <net_buf_unref>
		req->buf = NULL;
   1db12:	2200      	movs	r2, #0
   1db14:	9b01      	ldr	r3, [sp, #4]
   1db16:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1db18:	4803      	ldr	r0, [pc, #12]	; (1db28 <bt_att_req_free+0x2c>)
   1db1a:	a901      	add	r1, sp, #4
   1db1c:	f013 fa54 	bl	30fc8 <k_mem_slab_free>
}
   1db20:	b003      	add	sp, #12
   1db22:	f85d fb04 	ldr.w	pc, [sp], #4
   1db26:	bf00      	nop
   1db28:	20008bc0 	.word	0x20008bc0

0001db2c <att_handle_rsp>:
{
   1db2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1db30:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1db32:	30b0      	adds	r0, #176	; 0xb0
{
   1db34:	461d      	mov	r5, r3
   1db36:	460e      	mov	r6, r1
   1db38:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   1db3a:	f013 fbf7 	bl	3132c <k_work_cancel_delayable>
	if (!chan->req) {
   1db3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1db42:	b97b      	cbnz	r3, 1db64 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   1db44:	4a19      	ldr	r2, [pc, #100]	; (1dbac <att_handle_rsp+0x80>)
   1db46:	4618      	mov	r0, r3
   1db48:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1db4c:	4918      	ldr	r1, [pc, #96]	; (1dbb0 <att_handle_rsp+0x84>)
   1db4e:	2202      	movs	r2, #2
   1db50:	9300      	str	r3, [sp, #0]
   1db52:	f010 fae4 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   1db56:	6820      	ldr	r0, [r4, #0]
   1db58:	f010 fc73 	bl	2e442 <att_req_send_process>
}
   1db5c:	2000      	movs	r0, #0
   1db5e:	b004      	add	sp, #16
   1db60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1db64:	4a13      	ldr	r2, [pc, #76]	; (1dbb4 <att_handle_rsp+0x88>)
   1db66:	f04f 0800 	mov.w	r8, #0
   1db6a:	4293      	cmp	r3, r2
   1db6c:	d102      	bne.n	1db74 <att_handle_rsp+0x48>
		chan->req = NULL;
   1db6e:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   1db72:	e7f0      	b.n	1db56 <att_handle_rsp+0x2a>
	func = chan->req->func;
   1db74:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   1db78:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   1db7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1db80:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1db84:	f7ff ffba 	bl	1dafc <bt_att_req_free>
	att_req_send_process(chan->att);
   1db88:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1db8a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1db8e:	f010 fc58 	bl	2e442 <att_req_send_process>
	if (func) {
   1db92:	f1b9 0f00 	cmp.w	r9, #0
   1db96:	d0e1      	beq.n	1db5c <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   1db98:	6820      	ldr	r0, [r4, #0]
   1db9a:	f8cd a000 	str.w	sl, [sp]
   1db9e:	463b      	mov	r3, r7
   1dba0:	4632      	mov	r2, r6
   1dba2:	4629      	mov	r1, r5
   1dba4:	6800      	ldr	r0, [r0, #0]
   1dba6:	47c8      	blx	r9
   1dba8:	e7d8      	b.n	1db5c <att_handle_rsp+0x30>
   1dbaa:	bf00      	nop
   1dbac:	0003793c 	.word	0x0003793c
   1dbb0:	0003320c 	.word	0x0003320c
   1dbb4:	20030af0 	.word	0x20030af0

0001dbb8 <bt_att_disconnected>:
{
   1dbb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1dbbc:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1dbc0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1dbc2:	2e00      	cmp	r6, #0
   1dbc4:	d056      	beq.n	1dc74 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1dbc6:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1dbca:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1dbce:	f010 fb81 	bl	2e2d4 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1dbd2:	1f27      	subs	r7, r4, #4
   1dbd4:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1dbd8:	2200      	movs	r2, #0
   1dbda:	2300      	movs	r3, #0
   1dbdc:	4640      	mov	r0, r8
   1dbde:	f011 fcc7 	bl	2f570 <net_buf_get>
   1dbe2:	4605      	mov	r5, r0
   1dbe4:	bb28      	cbnz	r0, 1dc32 <bt_att_disconnected+0x7a>
	if (chan->req) {
   1dbe6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1dbea:	b12b      	cbz	r3, 1dbf8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1dbec:	4602      	mov	r2, r0
   1dbee:	4601      	mov	r1, r0
   1dbf0:	230e      	movs	r3, #14
   1dbf2:	4638      	mov	r0, r7
   1dbf4:	f7ff ff9a 	bl	1db2c <att_handle_rsp>
	chan->att = NULL;
   1dbf8:	2300      	movs	r3, #0
   1dbfa:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1dbfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1dc00:	2b00      	cmp	r3, #0
   1dc02:	d137      	bne.n	1dc74 <bt_att_disconnected+0xbc>
	att_reset(att);
   1dc04:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1dc06:	9803      	ldr	r0, [sp, #12]
   1dc08:	2200      	movs	r2, #0
   1dc0a:	2300      	movs	r3, #0
   1dc0c:	300c      	adds	r0, #12
   1dc0e:	f011 fcaf 	bl	2f570 <net_buf_get>
   1dc12:	4605      	mov	r5, r0
   1dc14:	b9a0      	cbnz	r0, 1dc40 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1dc16:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1dc18:	6845      	ldr	r5, [r0, #4]
   1dc1a:	b9c5      	cbnz	r5, 1dc4e <bt_att_disconnected+0x96>
	att->conn = NULL;
   1dc1c:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1dc1e:	a903      	add	r1, sp, #12
   1dc20:	4816      	ldr	r0, [pc, #88]	; (1dc7c <bt_att_disconnected+0xc4>)
   1dc22:	f013 f9d1 	bl	30fc8 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1dc26:	6820      	ldr	r0, [r4, #0]
}
   1dc28:	b004      	add	sp, #16
   1dc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1dc2e:	f000 bf2d 	b.w	1ea8c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1dc32:	69a8      	ldr	r0, [r5, #24]
   1dc34:	f7ff f89a 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(buf);
   1dc38:	4628      	mov	r0, r5
   1dc3a:	f002 fda9 	bl	20790 <net_buf_unref>
   1dc3e:	e7cb      	b.n	1dbd8 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1dc40:	69a8      	ldr	r0, [r5, #24]
   1dc42:	f7ff f893 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(buf);
   1dc46:	4628      	mov	r0, r5
   1dc48:	f002 fda2 	bl	20790 <net_buf_unref>
   1dc4c:	e7db      	b.n	1dc06 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dc4e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1dc50:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dc52:	4295      	cmp	r5, r2
	list->head = node;
   1dc54:	6043      	str	r3, [r0, #4]
	list->tail = node;
   1dc56:	bf08      	it	eq
   1dc58:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1dc5a:	686e      	ldr	r6, [r5, #4]
   1dc5c:	b136      	cbz	r6, 1dc6c <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1dc5e:	69ab      	ldr	r3, [r5, #24]
   1dc60:	210e      	movs	r1, #14
   1dc62:	9300      	str	r3, [sp, #0]
   1dc64:	2300      	movs	r3, #0
   1dc66:	6800      	ldr	r0, [r0, #0]
   1dc68:	461a      	mov	r2, r3
   1dc6a:	47b0      	blx	r6
		bt_att_req_free(req);
   1dc6c:	4628      	mov	r0, r5
   1dc6e:	f7ff ff45 	bl	1dafc <bt_att_req_free>
   1dc72:	e7d0      	b.n	1dc16 <bt_att_disconnected+0x5e>
}
   1dc74:	b004      	add	sp, #16
   1dc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc7a:	bf00      	nop
   1dc7c:	20008b88 	.word	0x20008b88

0001dc80 <att_timeout>:
{
   1dc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   1dc82:	4b09      	ldr	r3, [pc, #36]	; (1dca8 <att_timeout+0x28>)
{
   1dc84:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1dc86:	9302      	str	r3, [sp, #8]
   1dc88:	2300      	movs	r3, #0
   1dc8a:	2201      	movs	r2, #1
   1dc8c:	4618      	mov	r0, r3
   1dc8e:	e9cd 3300 	strd	r3, r3, [sp]
   1dc92:	4906      	ldr	r1, [pc, #24]	; (1dcac <att_timeout+0x2c>)
   1dc94:	f010 fa43 	bl	2e11e <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1dc98:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1dc9c:	b004      	add	sp, #16
   1dc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1dca2:	f7ff bf89 	b.w	1dbb8 <bt_att_disconnected>
   1dca6:	bf00      	nop
   1dca8:	00037953 	.word	0x00037953
   1dcac:	0003320c 	.word	0x0003320c

0001dcb0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1dcb0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1dcb2:	4606      	mov	r6, r0
   1dcb4:	4d13      	ldr	r5, [pc, #76]	; (1dd04 <find_cf_cfg+0x54>)
   1dcb6:	b140      	cbz	r0, 1dcca <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dcb8:	462a      	mov	r2, r5
   1dcba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1dcbe:	1e6c      	subs	r4, r5, #1
   1dcc0:	f010 f860 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1dcc4:	b198      	cbz	r0, 1dcee <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1dcc6:	4620      	mov	r0, r4
   1dcc8:	e00c      	b.n	1dce4 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1dcca:	4628      	mov	r0, r5
   1dccc:	490e      	ldr	r1, [pc, #56]	; (1dd08 <find_cf_cfg+0x58>)
   1dcce:	f010 fe55 	bl	2e97c <bt_addr_le_eq>
   1dcd2:	b940      	cbnz	r0, 1dce6 <find_cf_cfg+0x36>
   1dcd4:	490c      	ldr	r1, [pc, #48]	; (1dd08 <find_cf_cfg+0x58>)
   1dcd6:	f105 0010 	add.w	r0, r5, #16
   1dcda:	f010 fe4f 	bl	2e97c <bt_addr_le_eq>
   1dcde:	b120      	cbz	r0, 1dcea <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1dce0:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1dce4:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1dce6:	1e68      	subs	r0, r5, #1
   1dce8:	e7fc      	b.n	1dce4 <find_cf_cfg+0x34>
	return NULL;
   1dcea:	2000      	movs	r0, #0
   1dcec:	e7fa      	b.n	1dce4 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dcee:	4630      	mov	r0, r6
   1dcf0:	7c21      	ldrb	r1, [r4, #16]
   1dcf2:	f104 0211 	add.w	r2, r4, #17
   1dcf6:	f010 f845 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1dcfa:	2800      	cmp	r0, #0
   1dcfc:	d0f5      	beq.n	1dcea <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1dcfe:	f104 0010 	add.w	r0, r4, #16
   1dd02:	e7ef      	b.n	1dce4 <find_cf_cfg+0x34>
   1dd04:	20030b25 	.word	0x20030b25
   1dd08:	00036982 	.word	0x00036982

0001dd0c <find_sc_cfg>:
{
   1dd0c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1dd0e:	4c0e      	ldr	r4, [pc, #56]	; (1dd48 <find_sc_cfg+0x3c>)
{
   1dd10:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   1dd12:	7823      	ldrb	r3, [r4, #0]
{
   1dd14:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1dd16:	4283      	cmp	r3, r0
   1dd18:	d00c      	beq.n	1dd34 <find_sc_cfg+0x28>
   1dd1a:	7b23      	ldrb	r3, [r4, #12]
   1dd1c:	42ab      	cmp	r3, r5
   1dd1e:	d110      	bne.n	1dd42 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1dd20:	4631      	mov	r1, r6
   1dd22:	480a      	ldr	r0, [pc, #40]	; (1dd4c <find_sc_cfg+0x40>)
   1dd24:	f010 fe2a 	bl	2e97c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1dd28:	b158      	cbz	r0, 1dd42 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1dd2a:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1dd2c:	220c      	movs	r2, #12
   1dd2e:	fb02 4003 	mla	r0, r2, r3, r4
   1dd32:	e007      	b.n	1dd44 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1dd34:	1c60      	adds	r0, r4, #1
   1dd36:	f010 fe21 	bl	2e97c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1dd3a:	2800      	cmp	r0, #0
   1dd3c:	d0ed      	beq.n	1dd1a <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1dd3e:	2300      	movs	r3, #0
   1dd40:	e7f4      	b.n	1dd2c <find_sc_cfg+0x20>
	return NULL;
   1dd42:	2000      	movs	r0, #0
}
   1dd44:	bd70      	pop	{r4, r5, r6, pc}
   1dd46:	bf00      	nop
   1dd48:	20030fc2 	.word	0x20030fc2
   1dd4c:	20030fcf 	.word	0x20030fcf

0001dd50 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1dd50:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1dd52:	1c4a      	adds	r2, r1, #1
{
   1dd54:	460c      	mov	r4, r1
		if (conn) {
   1dd56:	4605      	mov	r5, r0
   1dd58:	b968      	cbnz	r0, 1dd76 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1dd5a:	4610      	mov	r0, r2
   1dd5c:	490d      	ldr	r1, [pc, #52]	; (1dd94 <find_ccc_cfg+0x44>)
   1dd5e:	f010 fe0d 	bl	2e97c <bt_addr_le_eq>
   1dd62:	b930      	cbnz	r0, 1dd72 <find_ccc_cfg+0x22>
   1dd64:	490b      	ldr	r1, [pc, #44]	; (1dd94 <find_ccc_cfg+0x44>)
   1dd66:	f104 000b 	add.w	r0, r4, #11
   1dd6a:	f010 fe07 	bl	2e97c <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1dd6e:	b170      	cbz	r0, 1dd8e <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1dd70:	340a      	adds	r4, #10
   1dd72:	4620      	mov	r0, r4
   1dd74:	e00c      	b.n	1dd90 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1dd76:	7809      	ldrb	r1, [r1, #0]
   1dd78:	f010 f804 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1dd7c:	2800      	cmp	r0, #0
   1dd7e:	d1f8      	bne.n	1dd72 <find_ccc_cfg+0x22>
   1dd80:	4628      	mov	r0, r5
   1dd82:	7aa1      	ldrb	r1, [r4, #10]
   1dd84:	f104 020b 	add.w	r2, r4, #11
   1dd88:	f00f fffc 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1dd8c:	e7ef      	b.n	1dd6e <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1dd8e:	2000      	movs	r0, #0
}
   1dd90:	bd38      	pop	{r3, r4, r5, pc}
   1dd92:	bf00      	nop
   1dd94:	00036982 	.word	0x00036982

0001dd98 <read_ppcp>:
{
   1dd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1dd9a:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1dd9c:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   1dda0:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1dda2:	4a06      	ldr	r2, [pc, #24]	; (1ddbc <read_ppcp+0x24>)
   1dda4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1dda8:	2308      	movs	r3, #8
   1ddaa:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1ddae:	9300      	str	r3, [sp, #0]
   1ddb0:	446b      	add	r3, sp
   1ddb2:	f010 fdf7 	bl	2e9a4 <bt_gatt_attr_read.constprop.0>
}
   1ddb6:	b005      	add	sp, #20
   1ddb8:	f85d fb04 	ldr.w	pc, [sp], #4
   1ddbc:	00280018 	.word	0x00280018

0001ddc0 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1ddc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ddc4:	b085      	sub	sp, #20
   1ddc6:	461e      	mov	r6, r3
   1ddc8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1ddcc:	4681      	mov	r9, r0
   1ddce:	460f      	mov	r7, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1ddd0:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1ddd4:	2b00      	cmp	r3, #0
   1ddd6:	d14a      	bne.n	1de6e <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1ddd8:	1e73      	subs	r3, r6, #1
   1ddda:	2b01      	cmp	r3, #1
   1dddc:	d84a      	bhi.n	1de74 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1ddde:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1dde0:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1dde2:	7815      	ldrb	r5, [r2, #0]
   1dde4:	bf18      	it	ne
   1dde6:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1dde8:	f7ff ffb2 	bl	1dd50 <find_ccc_cfg>
	if (!cfg) {
   1ddec:	4604      	mov	r4, r0
   1ddee:	b9e8      	cbnz	r0, 1de2c <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1ddf0:	b91d      	cbnz	r5, 1ddfa <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1ddf2:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1ddf4:	b005      	add	sp, #20
   1ddf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1ddfa:	4641      	mov	r1, r8
   1ddfc:	f7ff ffa8 	bl	1dd50 <find_ccc_cfg>
		if (!cfg) {
   1de00:	4604      	mov	r4, r0
   1de02:	b958      	cbnz	r0, 1de1c <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   1de04:	4b1d      	ldr	r3, [pc, #116]	; (1de7c <bt_gatt_attr_write_ccc+0xbc>)
   1de06:	9000      	str	r0, [sp, #0]
   1de08:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1de0c:	2202      	movs	r2, #2
   1de0e:	4603      	mov	r3, r0
   1de10:	491b      	ldr	r1, [pc, #108]	; (1de80 <bt_gatt_attr_write_ccc+0xc0>)
   1de12:	f010 fe4f 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1de16:	f06f 0010 	mvn.w	r0, #16
   1de1a:	e7eb      	b.n	1ddf4 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1de1c:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1de20:	3001      	adds	r0, #1
   1de22:	f010 fdb3 	bl	2e98c <bt_addr_le_copy>
		cfg->id = conn->id;
   1de26:	f899 3008 	ldrb.w	r3, [r9, #8]
   1de2a:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1de2c:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1de30:	b98b      	cbnz	r3, 1de56 <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   1de32:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1de34:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   1de38:	42ab      	cmp	r3, r5
   1de3a:	d003      	beq.n	1de44 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   1de3c:	4641      	mov	r1, r8
   1de3e:	4638      	mov	r0, r7
   1de40:	f010 fd24 	bl	2e88c <gatt_ccc_changed>
	if (!value) {
   1de44:	2d00      	cmp	r5, #0
   1de46:	d1d4      	bne.n	1ddf2 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1de48:	490e      	ldr	r1, [pc, #56]	; (1de84 <bt_gatt_attr_write_ccc+0xc4>)
   1de4a:	1c60      	adds	r0, r4, #1
   1de4c:	f010 fd9e 	bl	2e98c <bt_addr_le_copy>
	cfg->id = 0U;
   1de50:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1de52:	8125      	strh	r5, [r4, #8]
}
   1de54:	e7cd      	b.n	1ddf2 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1de56:	462a      	mov	r2, r5
   1de58:	4639      	mov	r1, r7
   1de5a:	4648      	mov	r0, r9
   1de5c:	4798      	blx	r3
		if (write < 0) {
   1de5e:	2800      	cmp	r0, #0
   1de60:	dbc8      	blt.n	1ddf4 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1de62:	3801      	subs	r0, #1
   1de64:	2801      	cmp	r0, #1
   1de66:	d9e4      	bls.n	1de32 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1de68:	f06f 000d 	mvn.w	r0, #13
   1de6c:	e7c2      	b.n	1ddf4 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1de6e:	f06f 0006 	mvn.w	r0, #6
   1de72:	e7bf      	b.n	1ddf4 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1de74:	f06f 000c 	mvn.w	r0, #12
   1de78:	e7bc      	b.n	1ddf4 <bt_gatt_attr_write_ccc+0x34>
   1de7a:	bf00      	nop
   1de7c:	00037966 	.word	0x00037966
   1de80:	0003322c 	.word	0x0003322c
   1de84:	00036982 	.word	0x00036982

0001de88 <clear_cf_cfg>:
{
   1de88:	4602      	mov	r2, r0
   1de8a:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1de8c:	4907      	ldr	r1, [pc, #28]	; (1deac <clear_cf_cfg+0x24>)
   1de8e:	3001      	adds	r0, #1
   1de90:	f010 fd7c 	bl	2e98c <bt_addr_le_copy>
   1de94:	2300      	movs	r3, #0
   1de96:	320c      	adds	r2, #12
   1de98:	f802 3c04 	strb.w	r3, [r2, #-4]
   1de9c:	e8d2 1fef 	ldaex	r1, [r2]
   1dea0:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1dea4:	2800      	cmp	r0, #0
   1dea6:	d1f9      	bne.n	1de9c <clear_cf_cfg+0x14>
}
   1dea8:	bd08      	pop	{r3, pc}
   1deaa:	bf00      	nop
   1deac:	00036982 	.word	0x00036982

0001deb0 <sc_save>:
{
   1deb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1deb4:	4680      	mov	r8, r0
   1deb6:	460f      	mov	r7, r1
   1deb8:	4616      	mov	r6, r2
   1deba:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1debc:	f7ff ff26 	bl	1dd0c <find_sc_cfg>
	if (!cfg) {
   1dec0:	4604      	mov	r4, r0
   1dec2:	b9a8      	cbnz	r0, 1def0 <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1dec4:	4911      	ldr	r1, [pc, #68]	; (1df0c <sc_save+0x5c>)
   1dec6:	f7ff ff21 	bl	1dd0c <find_sc_cfg>
		if (!cfg) {
   1deca:	4604      	mov	r4, r0
   1decc:	b958      	cbnz	r0, 1dee6 <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   1dece:	4b10      	ldr	r3, [pc, #64]	; (1df10 <sc_save+0x60>)
   1ded0:	2201      	movs	r2, #1
   1ded2:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1ded6:	490f      	ldr	r1, [pc, #60]	; (1df14 <sc_save+0x64>)
   1ded8:	4603      	mov	r3, r0
   1deda:	9000      	str	r0, [sp, #0]
   1dedc:	f010 fdea 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
}
   1dee0:	b004      	add	sp, #16
   1dee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1dee6:	4639      	mov	r1, r7
		cfg->id = id;
   1dee8:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1deec:	f010 fd4e 	bl	2e98c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1def0:	8922      	ldrh	r2, [r4, #8]
   1def2:	8963      	ldrh	r3, [r4, #10]
   1def4:	b91a      	cbnz	r2, 1defe <sc_save+0x4e>
   1def6:	b92b      	cbnz	r3, 1df04 <sc_save+0x54>
		cfg->data.start = start;
   1def8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1defa:	8165      	strh	r5, [r4, #10]
   1defc:	e7f0      	b.n	1dee0 <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   1defe:	42b2      	cmp	r2, r6
		*start = new_start;
   1df00:	bf88      	it	hi
   1df02:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1df04:	42ab      	cmp	r3, r5
   1df06:	d2eb      	bcs.n	1dee0 <sc_save+0x30>
   1df08:	e7f7      	b.n	1defa <sc_save+0x4a>
   1df0a:	bf00      	nop
   1df0c:	00036982 	.word	0x00036982
   1df10:	00037980 	.word	0x00037980
   1df14:	0003322c 	.word	0x0003322c

0001df18 <cf_write>:
{
   1df18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1df1c:	461f      	mov	r7, r3
   1df1e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1df22:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   1df24:	2b01      	cmp	r3, #1
{
   1df26:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1df28:	d83b      	bhi.n	1dfa2 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1df2a:	443b      	add	r3, r7
   1df2c:	2b01      	cmp	r3, #1
   1df2e:	463d      	mov	r5, r7
   1df30:	dc3a      	bgt.n	1dfa8 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1df32:	f7ff febd 	bl	1dcb0 <find_cf_cfg>
	if (!cfg) {
   1df36:	4604      	mov	r4, r0
   1df38:	b990      	cbnz	r0, 1df60 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1df3a:	f7ff feb9 	bl	1dcb0 <find_cf_cfg>
	if (!cfg) {
   1df3e:	4604      	mov	r4, r0
   1df40:	b970      	cbnz	r0, 1df60 <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   1df42:	4b1c      	ldr	r3, [pc, #112]	; (1dfb4 <cf_write+0x9c>)
   1df44:	2202      	movs	r2, #2
   1df46:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1df4a:	491b      	ldr	r1, [pc, #108]	; (1dfb8 <cf_write+0xa0>)
   1df4c:	4603      	mov	r3, r0
   1df4e:	9000      	str	r0, [sp, #0]
   1df50:	f010 fdb0 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1df54:	f06f 0510 	mvn.w	r5, #16
}
   1df58:	4628      	mov	r0, r5
   1df5a:	b004      	add	sp, #16
   1df5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1df60:	b197      	cbz	r7, 1df88 <cf_write+0x70>
		    !(value[i / 8] & BIT(i % 8))) {
   1df62:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1df64:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1df66:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1df6a:	fa21 f003 	lsr.w	r0, r1, r3
   1df6e:	07c7      	lsls	r7, r0, #31
   1df70:	d503      	bpl.n	1df7a <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1df72:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1df76:	07c0      	lsls	r0, r0, #31
   1df78:	d519      	bpl.n	1dfae <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1df7a:	3301      	adds	r3, #1
   1df7c:	2b03      	cmp	r3, #3
   1df7e:	d1f4      	bne.n	1df6a <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1df80:	f002 0207 	and.w	r2, r2, #7
   1df84:	4311      	orrs	r1, r2
   1df86:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1df88:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1df8c:	1c60      	adds	r0, r4, #1
   1df8e:	f010 fcfd 	bl	2e98c <bt_addr_le_copy>
	cfg->id = conn->id;
   1df92:	4620      	mov	r0, r4
   1df94:	7a33      	ldrb	r3, [r6, #8]
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1df96:	2100      	movs	r1, #0
	cfg->id = conn->id;
   1df98:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1df9c:	f010 fdba 	bl	2eb14 <atomic_set_bit>
	return len;
   1dfa0:	e7da      	b.n	1df58 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1dfa2:	f06f 0506 	mvn.w	r5, #6
   1dfa6:	e7d7      	b.n	1df58 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1dfa8:	f06f 050c 	mvn.w	r5, #12
   1dfac:	e7d4      	b.n	1df58 <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1dfae:	f06f 0512 	mvn.w	r5, #18
   1dfb2:	e7d1      	b.n	1df58 <cf_write+0x40>
   1dfb4:	0003799f 	.word	0x0003799f
   1dfb8:	0003322c 	.word	0x0003322c

0001dfbc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1dfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dfc0:	4b28      	ldr	r3, [pc, #160]	; (1e064 <disconnected_cb+0xa8>)
{
   1dfc2:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dfc4:	6882      	ldr	r2, [r0, #8]
{
   1dfc6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1dfc8:	429a      	cmp	r2, r3
   1dfca:	d12b      	bne.n	1e024 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1dfcc:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1dfce:	8aab      	ldrh	r3, [r5, #20]
   1dfd0:	b343      	cbz	r3, 1e024 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1dfd2:	f04f 0800 	mov.w	r8, #0
   1dfd6:	1c6c      	adds	r4, r5, #1
   1dfd8:	f105 0915 	add.w	r9, r5, #21

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   1dfdc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1dfe0:	b19b      	cbz	r3, 1e00a <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1dfe2:	4622      	mov	r2, r4
   1dfe4:	4630      	mov	r0, r6
   1dfe6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1dfea:	f00f fecb 	bl	2dd84 <bt_conn_is_peer_addr_le>
   1dfee:	b9e0      	cbnz	r0, 1e02a <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1dff0:	4621      	mov	r1, r4
   1dff2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1dff6:	f7fe faff 	bl	1c5f8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1dffa:	b130      	cbz	r0, 1e00a <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1dffc:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   1dffe:	2b07      	cmp	r3, #7
   1e000:	bf08      	it	eq
   1e002:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1e006:	f00f fe30 	bl	2dc6a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e00a:	340a      	adds	r4, #10
   1e00c:	454c      	cmp	r4, r9
   1e00e:	d1e5      	bne.n	1dfdc <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1e010:	f1b8 0f00 	cmp.w	r8, #0
   1e014:	d106      	bne.n	1e024 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1e016:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1e018:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1e01c:	b113      	cbz	r3, 1e024 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1e01e:	4641      	mov	r1, r8
   1e020:	4638      	mov	r0, r7
   1e022:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1e024:	2001      	movs	r0, #1
   1e026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1e02a:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   1e02e:	4651      	mov	r1, sl
   1e030:	7a30      	ldrb	r0, [r6, #8]
   1e032:	f00f fb49 	bl	2d6c8 <bt_addr_le_is_bonded>
   1e036:	b978      	cbnz	r0, 1e058 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1e038:	4b0b      	ldr	r3, [pc, #44]	; (1e068 <disconnected_cb+0xac>)
   1e03a:	429d      	cmp	r5, r3
   1e03c:	d102      	bne.n	1e044 <disconnected_cb+0x88>
					sc_clear(conn);
   1e03e:	4630      	mov	r0, r6
   1e040:	f010 fd47 	bl	2ead2 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1e044:	4620      	mov	r0, r4
   1e046:	4909      	ldr	r1, [pc, #36]	; (1e06c <disconnected_cb+0xb0>)
   1e048:	f010 fca0 	bl	2e98c <bt_addr_le_copy>
	cfg->id = 0U;
   1e04c:	2300      	movs	r3, #0
   1e04e:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1e052:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1e056:	e7d8      	b.n	1e00a <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1e058:	4651      	mov	r1, sl
   1e05a:	4620      	mov	r0, r4
   1e05c:	f010 fc96 	bl	2e98c <bt_addr_le_copy>
   1e060:	e7d3      	b.n	1e00a <disconnected_cb+0x4e>
   1e062:	bf00      	nop
   1e064:	0001ddc1 	.word	0x0001ddc1
   1e068:	2000860c 	.word	0x2000860c
   1e06c:	00036982 	.word	0x00036982

0001e070 <sc_indicate_rsp>:
{
   1e070:	b510      	push	{r4, lr}
   1e072:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e074:	4811      	ldr	r0, [pc, #68]	; (1e0bc <sc_indicate_rsp+0x4c>)
   1e076:	e8d0 3fef 	ldaex	r3, [r0]
   1e07a:	f023 0302 	bic.w	r3, r3, #2
   1e07e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1e082:	2a00      	cmp	r2, #0
   1e084:	d1f7      	bne.n	1e076 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e086:	e8d0 3faf 	lda	r3, [r0]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1e08a:	07da      	lsls	r2, r3, #31
   1e08c:	d504      	bpl.n	1e098 <sc_indicate_rsp+0x28>
	k_work_reschedule(&gatt_sc.work, timeout);
   1e08e:	2200      	movs	r2, #0
   1e090:	2300      	movs	r3, #0
   1e092:	3830      	subs	r0, #48	; 0x30
   1e094:	f008 f874 	bl	26180 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1e098:	4620      	mov	r0, r4
   1e09a:	f010 fbca 	bl	2e832 <bt_att_fixed_chan_only>
   1e09e:	b160      	cbz	r0, 1e0ba <sc_indicate_rsp+0x4a>
		cfg = find_cf_cfg(conn);
   1e0a0:	4620      	mov	r0, r4
   1e0a2:	f7ff fe05 	bl	1dcb0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1e0a6:	b140      	cbz	r0, 1e0ba <sc_indicate_rsp+0x4a>
   1e0a8:	7a03      	ldrb	r3, [r0, #8]
   1e0aa:	07db      	lsls	r3, r3, #31
   1e0ac:	d505      	bpl.n	1e0ba <sc_indicate_rsp+0x4a>
}
   1e0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1e0b2:	2100      	movs	r1, #0
   1e0b4:	300c      	adds	r0, #12
   1e0b6:	f010 bd2d 	b.w	2eb14 <atomic_set_bit>
}
   1e0ba:	bd10      	pop	{r4, pc}
   1e0bc:	2000a248 	.word	0x2000a248

0001e0c0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e0c0:	2201      	movs	r2, #1
{
   1e0c2:	b510      	push	{r4, lr}
   1e0c4:	4b1b      	ldr	r3, [pc, #108]	; (1e134 <bt_gatt_init+0x74>)
   1e0c6:	e8d3 1fef 	ldaex	r1, [r3]
   1e0ca:	2900      	cmp	r1, #0
   1e0cc:	d103      	bne.n	1e0d6 <bt_gatt_init+0x16>
   1e0ce:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1e0d2:	2800      	cmp	r0, #0
   1e0d4:	d1f7      	bne.n	1e0c6 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   1e0d6:	d12c      	bne.n	1e132 <bt_gatt_init+0x72>
   1e0d8:	4b17      	ldr	r3, [pc, #92]	; (1e138 <bt_gatt_init+0x78>)
   1e0da:	e8d3 1fef 	ldaex	r1, [r3]
   1e0de:	2900      	cmp	r1, #0
   1e0e0:	d103      	bne.n	1e0ea <bt_gatt_init+0x2a>
   1e0e2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1e0e6:	2800      	cmp	r0, #0
   1e0e8:	d1f7      	bne.n	1e0da <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   1e0ea:	d108      	bne.n	1e0fe <bt_gatt_init+0x3e>
   1e0ec:	2000      	movs	r0, #0
   1e0ee:	4913      	ldr	r1, [pc, #76]	; (1e13c <bt_gatt_init+0x7c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1e0f0:	4a13      	ldr	r2, [pc, #76]	; (1e140 <bt_gatt_init+0x80>)
   1e0f2:	880b      	ldrh	r3, [r1, #0]
   1e0f4:	4c13      	ldr	r4, [pc, #76]	; (1e144 <bt_gatt_init+0x84>)
   1e0f6:	42a2      	cmp	r2, r4
   1e0f8:	d315      	bcc.n	1e126 <bt_gatt_init+0x66>
   1e0fa:	b100      	cbz	r0, 1e0fe <bt_gatt_init+0x3e>
   1e0fc:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1e0fe:	2200      	movs	r2, #0
   1e100:	4b11      	ldr	r3, [pc, #68]	; (1e148 <bt_gatt_init+0x88>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1e102:	4912      	ldr	r1, [pc, #72]	; (1e14c <bt_gatt_init+0x8c>)
   1e104:	4812      	ldr	r0, [pc, #72]	; (1e150 <bt_gatt_init+0x90>)
	list->tail = NULL;
   1e106:	e9c3 2200 	strd	r2, r2, [r3]
   1e10a:	f013 f901 	bl	31310 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1e10e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1e112:	2300      	movs	r3, #0
   1e114:	480e      	ldr	r0, [pc, #56]	; (1e150 <bt_gatt_init+0x90>)
   1e116:	f7fb fa53 	bl	195c0 <bt_long_wq_schedule>
}
   1e11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1e11e:	490d      	ldr	r1, [pc, #52]	; (1e154 <bt_gatt_init+0x94>)
   1e120:	480d      	ldr	r0, [pc, #52]	; (1e158 <bt_gatt_init+0x98>)
   1e122:	f013 b8f5 	b.w	31310 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1e126:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1e128:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   1e12a:	4403      	add	r3, r0
   1e12c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1e12e:	2001      	movs	r0, #1
   1e130:	e7e1      	b.n	1e0f6 <bt_gatt_init+0x36>
}
   1e132:	bd10      	pop	{r4, pc}
   1e134:	20030b48 	.word	0x20030b48
   1e138:	20030b44 	.word	0x20030b44
   1e13c:	20030fda 	.word	0x20030fda
   1e140:	000331bc 	.word	0x000331bc
   1e144:	000331d4 	.word	0x000331d4
   1e148:	20030b4c 	.word	0x20030b4c
   1e14c:	0002ec01 	.word	0x0002ec01
   1e150:	2000a1a0 	.word	0x2000a1a0
   1e154:	0001e57d 	.word	0x0001e57d
   1e158:	2000a218 	.word	0x2000a218

0001e15c <bt_gatt_attr_get_handle>:
	if (!attr) {
   1e15c:	4603      	mov	r3, r0
{
   1e15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1e162:	b148      	cbz	r0, 1e178 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1e164:	8a00      	ldrh	r0, [r0, #16]
   1e166:	b938      	cbnz	r0, 1e178 <bt_gatt_attr_get_handle+0x1c>
	uint16_t handle = 1;
   1e168:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1e16a:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e16e:	4911      	ldr	r1, [pc, #68]	; (1e1b4 <bt_gatt_attr_get_handle+0x58>)
   1e170:	f8df e044 	ldr.w	lr, [pc, #68]	; 1e1b8 <bt_gatt_attr_get_handle+0x5c>
   1e174:	4571      	cmp	r1, lr
   1e176:	d301      	bcc.n	1e17c <bt_gatt_attr_get_handle+0x20>
}
   1e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1e17c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1e180:	42bb      	cmp	r3, r7
   1e182:	d304      	bcc.n	1e18e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1e184:	fb0c 7206 	mla	r2, ip, r6, r7
   1e188:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1e18a:	4293      	cmp	r3, r2
   1e18c:	d90e      	bls.n	1e1ac <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1e18e:	4434      	add	r4, r6
   1e190:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e192:	4614      	mov	r4, r2
   1e194:	3108      	adds	r1, #8
   1e196:	e7ed      	b.n	1e174 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1e198:	fb0c 7805 	mla	r8, ip, r5, r7
   1e19c:	4543      	cmp	r3, r8
   1e19e:	d007      	beq.n	1e1b0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1e1a0:	3501      	adds	r5, #1
   1e1a2:	1962      	adds	r2, r4, r5
   1e1a4:	42b5      	cmp	r5, r6
   1e1a6:	b292      	uxth	r2, r2
   1e1a8:	d1f6      	bne.n	1e198 <bt_gatt_attr_get_handle+0x3c>
   1e1aa:	e7f2      	b.n	1e192 <bt_gatt_attr_get_handle+0x36>
   1e1ac:	2500      	movs	r5, #0
   1e1ae:	e7f8      	b.n	1e1a2 <bt_gatt_attr_get_handle+0x46>
   1e1b0:	4610      	mov	r0, r2
   1e1b2:	e7e1      	b.n	1e178 <bt_gatt_attr_get_handle+0x1c>
   1e1b4:	000331bc 	.word	0x000331bc
   1e1b8:	000331d4 	.word	0x000331d4

0001e1bc <bt_gatt_foreach_attr_type>:
{
   1e1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1c0:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1e1c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   1e1c6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1e1ca:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   1e1cc:	2d00      	cmp	r5, #0
   1e1ce:	bf08      	it	eq
   1e1d0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1e1d2:	4b24      	ldr	r3, [pc, #144]	; (1e264 <bt_gatt_foreach_attr_type+0xa8>)
{
   1e1d4:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1e1d6:	881b      	ldrh	r3, [r3, #0]
{
   1e1d8:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   1e1da:	4283      	cmp	r3, r0
   1e1dc:	d23c      	bcs.n	1e258 <bt_gatt_foreach_attr_type+0x9c>
}
   1e1de:	b003      	add	sp, #12
   1e1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1e1e4:	6873      	ldr	r3, [r6, #4]
   1e1e6:	4423      	add	r3, r4
   1e1e8:	42bb      	cmp	r3, r7
   1e1ea:	d232      	bcs.n	1e252 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1e1ec:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e1ee:	3608      	adds	r6, #8
   1e1f0:	4b1d      	ldr	r3, [pc, #116]	; (1e268 <bt_gatt_foreach_attr_type+0xac>)
   1e1f2:	429e      	cmp	r6, r3
   1e1f4:	d3f6      	bcc.n	1e1e4 <bt_gatt_foreach_attr_type+0x28>
   1e1f6:	e7f2      	b.n	1e1de <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1e1f8:	4640      	mov	r0, r8
   1e1fa:	5889      	ldr	r1, [r1, r2]
   1e1fc:	9301      	str	r3, [sp, #4]
   1e1fe:	f00f f916 	bl	2d42e <bt_uuid_cmp>
   1e202:	9b01      	ldr	r3, [sp, #4]
   1e204:	b190      	cbz	r0, 1e22c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1e206:	3401      	adds	r4, #1
   1e208:	f10a 0a01 	add.w	sl, sl, #1
   1e20c:	b2a4      	uxth	r4, r4
   1e20e:	6873      	ldr	r3, [r6, #4]
   1e210:	4553      	cmp	r3, sl
   1e212:	d9ec      	bls.n	1e1ee <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1e214:	9b00      	ldr	r3, [sp, #0]
   1e216:	429c      	cmp	r4, r3
   1e218:	d8e1      	bhi.n	1e1de <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1e21a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e21c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1e21e:	d3f2      	bcc.n	1e206 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e220:	fb0b f20a 	mul.w	r2, fp, sl
   1e224:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1e226:	f1b8 0f00 	cmp.w	r8, #0
   1e22a:	d1e5      	bne.n	1e1f8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1e22c:	f1b9 0f00 	cmp.w	r9, #0
   1e230:	d10b      	bne.n	1e24a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1e232:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1e234:	4618      	mov	r0, r3
	*num_matches -= 1;
   1e236:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1e238:	4621      	mov	r1, r4
   1e23a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e23c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e23e:	4798      	blx	r3
	if (!*num_matches) {
   1e240:	2d00      	cmp	r5, #0
   1e242:	d0cc      	beq.n	1e1de <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e244:	2800      	cmp	r0, #0
   1e246:	d1de      	bne.n	1e206 <bt_gatt_foreach_attr_type+0x4a>
   1e248:	e7c9      	b.n	1e1de <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1e24a:	68da      	ldr	r2, [r3, #12]
   1e24c:	4591      	cmp	r9, r2
   1e24e:	d1da      	bne.n	1e206 <bt_gatt_foreach_attr_type+0x4a>
   1e250:	e7ef      	b.n	1e232 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1e252:	f04f 0a00 	mov.w	sl, #0
   1e256:	e7da      	b.n	1e20e <bt_gatt_foreach_attr_type+0x52>
		uint16_t handle = 1;
   1e258:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1e25a:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1e25e:	4e03      	ldr	r6, [pc, #12]	; (1e26c <bt_gatt_foreach_attr_type+0xb0>)
   1e260:	e7c6      	b.n	1e1f0 <bt_gatt_foreach_attr_type+0x34>
   1e262:	bf00      	nop
   1e264:	20030fda 	.word	0x20030fda
   1e268:	000331d4 	.word	0x000331d4
   1e26c:	000331bc 	.word	0x000331bc

0001e270 <db_hash_gen.constprop.0>:
	uint8_t key[16] = {};
   1e270:	2300      	movs	r3, #0
static void db_hash_gen(bool store)
   1e272:	b510      	push	{r4, lr}
   1e274:	b0cc      	sub	sp, #304	; 0x130
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1e276:	aa20      	add	r2, sp, #128	; 0x80
   1e278:	a904      	add	r1, sp, #16
   1e27a:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   1e27c:	e9cd 3304 	strd	r3, r3, [sp, #16]
   1e280:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1e284:	f00d f91c 	bl	2b4c0 <tc_cmac_setup>
   1e288:	4603      	mov	r3, r0
   1e28a:	b948      	cbnz	r0, 1e2a0 <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   1e28c:	4a17      	ldr	r2, [pc, #92]	; (1e2ec <db_hash_gen.constprop.0+0x7c>)
		LOG_ERR("Unable to calculate hash");
   1e28e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1e292:	4917      	ldr	r1, [pc, #92]	; (1e2f0 <db_hash_gen.constprop.0+0x80>)
   1e294:	2201      	movs	r2, #1
   1e296:	9300      	str	r3, [sp, #0]
   1e298:	f010 fc0c 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
}
   1e29c:	b04c      	add	sp, #304	; 0x130
   1e29e:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1e2a0:	ab08      	add	r3, sp, #32
   1e2a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e2a6:	2001      	movs	r0, #1
   1e2a8:	4a12      	ldr	r2, [pc, #72]	; (1e2f4 <db_hash_gen.constprop.0+0x84>)
   1e2aa:	f010 fc9e 	bl	2ebea <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1e2ae:	4812      	ldr	r0, [pc, #72]	; (1e2f8 <db_hash_gen.constprop.0+0x88>)
   1e2b0:	a908      	add	r1, sp, #32
   1e2b2:	f00d f99a 	bl	2b5ea <tc_cmac_final>
   1e2b6:	4603      	mov	r3, r0
   1e2b8:	b908      	cbnz	r0, 1e2be <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1e2ba:	4a10      	ldr	r2, [pc, #64]	; (1e2fc <db_hash_gen.constprop.0+0x8c>)
   1e2bc:	e7e7      	b.n	1e28e <db_hash_gen.constprop.0+0x1e>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1e2be:	2208      	movs	r2, #8
   1e2c0:	4b0d      	ldr	r3, [pc, #52]	; (1e2f8 <db_hash_gen.constprop.0+0x88>)
   1e2c2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1e2c6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e2c8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   1e2cc:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1e2ce:	f803 4b01 	strb.w	r4, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1e2d2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1e2d4:	d1f7      	bne.n	1e2c6 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e2d6:	4b0a      	ldr	r3, [pc, #40]	; (1e300 <db_hash_gen.constprop.0+0x90>)
   1e2d8:	e8d3 1fef 	ldaex	r1, [r3]
   1e2dc:	f041 0104 	orr.w	r1, r1, #4
   1e2e0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e2e4:	2a00      	cmp	r2, #0
   1e2e6:	d0d9      	beq.n	1e29c <db_hash_gen.constprop.0+0x2c>
   1e2e8:	e7f6      	b.n	1e2d8 <db_hash_gen.constprop.0+0x68>
   1e2ea:	bf00      	nop
   1e2ec:	000379cb 	.word	0x000379cb
   1e2f0:	0003322c 	.word	0x0003322c
   1e2f4:	0002e8d7 	.word	0x0002e8d7
   1e2f8:	2000a190 	.word	0x2000a190
   1e2fc:	000379e4 	.word	0x000379e4
   1e300:	2000a248 	.word	0x2000a248

0001e304 <db_hash_read>:
{
   1e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e308:	4914      	ldr	r1, [pc, #80]	; (1e35c <db_hash_read+0x58>)
{
   1e30a:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e30c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1e310:	4614      	mov	r4, r2
   1e312:	461d      	mov	r5, r3
   1e314:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1e318:	f013 f81c 	bl	31354 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e31c:	4b10      	ldr	r3, [pc, #64]	; (1e360 <db_hash_read+0x5c>)
   1e31e:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1e322:	0759      	lsls	r1, r3, #29
   1e324:	d401      	bmi.n	1e32a <db_hash_read+0x26>
		db_hash_gen(true);
   1e326:	f7ff ffa3 	bl	1e270 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1e32a:	4630      	mov	r0, r6
   1e32c:	f7ff fcc0 	bl	1dcb0 <find_cf_cfg>
	if (cfg &&
   1e330:	b150      	cbz	r0, 1e348 <db_hash_read+0x44>
   1e332:	7a03      	ldrb	r3, [r0, #8]
   1e334:	07da      	lsls	r2, r3, #31
   1e336:	d507      	bpl.n	1e348 <db_hash_read+0x44>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1e338:	300c      	adds	r0, #12
   1e33a:	e8d0 3faf 	lda	r3, [r0]
	    CF_ROBUST_CACHING(cfg) &&
   1e33e:	07db      	lsls	r3, r3, #31
   1e340:	d402      	bmi.n	1e348 <db_hash_read+0x44>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1e342:	2101      	movs	r1, #1
   1e344:	f010 fbe6 	bl	2eb14 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e348:	2310      	movs	r3, #16
   1e34a:	463a      	mov	r2, r7
   1e34c:	9306      	str	r3, [sp, #24]
   1e34e:	4629      	mov	r1, r5
   1e350:	4620      	mov	r0, r4
}
   1e352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1e356:	4b03      	ldr	r3, [pc, #12]	; (1e364 <db_hash_read+0x60>)
   1e358:	f010 bb24 	b.w	2e9a4 <bt_gatt_attr_read.constprop.0>
   1e35c:	2000a1d0 	.word	0x2000a1d0
   1e360:	2000a248 	.word	0x2000a248
   1e364:	2000a190 	.word	0x2000a190

0001e368 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1e368:	2300      	movs	r3, #0
{
   1e36a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1e36c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1e36e:	f7ff fef5 	bl	1e15c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1e372:	1c41      	adds	r1, r0, #1
   1e374:	b289      	uxth	r1, r1
   1e376:	4608      	mov	r0, r1
   1e378:	4a03      	ldr	r2, [pc, #12]	; (1e388 <bt_gatt_attr_next+0x20>)
   1e37a:	ab01      	add	r3, sp, #4
   1e37c:	f010 fc35 	bl	2ebea <bt_gatt_foreach_attr>
}
   1e380:	9801      	ldr	r0, [sp, #4]
   1e382:	b003      	add	sp, #12
   1e384:	f85d fb04 	ldr.w	pc, [sp], #4
   1e388:	0002e887 	.word	0x0002e887

0001e38c <gatt_indicate>:
{
   1e38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e390:	4615      	mov	r5, r2
   1e392:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e394:	2294      	movs	r2, #148	; 0x94
   1e396:	6869      	ldr	r1, [r5, #4]
{
   1e398:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e39a:	f010 fc33 	bl	2ec04 <bt_gatt_check_perm>
   1e39e:	4680      	mov	r8, r0
   1e3a0:	b178      	cbz	r0, 1e3c2 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1e3a2:	4b35      	ldr	r3, [pc, #212]	; (1e478 <gatt_indicate+0xec>)
   1e3a4:	2202      	movs	r2, #2
   1e3a6:	9302      	str	r3, [sp, #8]
   1e3a8:	2300      	movs	r3, #0
   1e3aa:	4934      	ldr	r1, [pc, #208]	; (1e47c <gatt_indicate+0xf0>)
   1e3ac:	4618      	mov	r0, r3
   1e3ae:	e9cd 3300 	strd	r3, r3, [sp]
   1e3b2:	f010 fb7f 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1e3b6:	f04f 35ff 	mov.w	r5, #4294967295
}
   1e3ba:	4628      	mov	r0, r5
   1e3bc:	b004      	add	sp, #16
   1e3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1e3c2:	2202      	movs	r2, #2
   1e3c4:	4638      	mov	r0, r7
   1e3c6:	6869      	ldr	r1, [r5, #4]
   1e3c8:	f010 fc50 	bl	2ec6c <bt_gatt_is_subscribed>
   1e3cc:	4603      	mov	r3, r0
   1e3ce:	b950      	cbnz	r0, 1e3e6 <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1e3d0:	4a2b      	ldr	r2, [pc, #172]	; (1e480 <gatt_indicate+0xf4>)
   1e3d2:	492a      	ldr	r1, [pc, #168]	; (1e47c <gatt_indicate+0xf0>)
   1e3d4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1e3d8:	9000      	str	r0, [sp, #0]
   1e3da:	2202      	movs	r2, #2
   1e3dc:	f010 fb6a 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1e3e0:	f06f 0515 	mvn.w	r5, #21
   1e3e4:	e7e9      	b.n	1e3ba <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e3e6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1e3ea:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1e3ec:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1e3ee:	f7ff fb61 	bl	1dab4 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1e3f2:	3602      	adds	r6, #2
	if (!req) {
   1e3f4:	4604      	mov	r4, r0
   1e3f6:	b1c8      	cbz	r0, 1e42c <gatt_indicate+0xa0>
	req->att_op = op;
   1e3f8:	211d      	movs	r1, #29
	req->func = func;
   1e3fa:	4b22      	ldr	r3, [pc, #136]	; (1e484 <gatt_indicate+0xf8>)
	req->len = len;
   1e3fc:	6146      	str	r6, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e3fe:	4632      	mov	r2, r6
	req->att_op = op;
   1e400:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1e402:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1e406:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1e408:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1e40a:	4638      	mov	r0, r7
   1e40c:	f7ff f886 	bl	1d51c <bt_att_create_pdu>
	if (!buf) {
   1e410:	4606      	mov	r6, r0
   1e412:	b970      	cbnz	r0, 1e432 <gatt_indicate+0xa6>
		LOG_WRN("No buffer available to send indication");
   1e414:	4b1c      	ldr	r3, [pc, #112]	; (1e488 <gatt_indicate+0xfc>)
   1e416:	9000      	str	r0, [sp, #0]
   1e418:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e41c:	2202      	movs	r2, #2
   1e41e:	4603      	mov	r3, r0
   1e420:	4916      	ldr	r1, [pc, #88]	; (1e47c <gatt_indicate+0xf0>)
   1e422:	f010 fb47 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   1e426:	4620      	mov	r0, r4
   1e428:	f7ff fb68 	bl	1dafc <bt_att_req_free>
		return -ENOMEM;
   1e42c:	f06f 050b 	mvn.w	r5, #11
   1e430:	e7c3      	b.n	1e3ba <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1e432:	2301      	movs	r3, #1
   1e434:	4642      	mov	r2, r8
   1e436:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1e438:	f106 0a0c 	add.w	sl, r6, #12
   1e43c:	f010 fa1c 	bl	2e878 <bt_att_set_tx_meta_data>
   1e440:	2102      	movs	r1, #2
   1e442:	4650      	mov	r0, sl
   1e444:	f011 f8ef 	bl	2f626 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1e448:	4680      	mov	r8, r0
   1e44a:	f828 9b02 	strh.w	r9, [r8], #2
   1e44e:	8aa9      	ldrh	r1, [r5, #20]
   1e450:	4650      	mov	r0, sl
   1e452:	f011 f8e8 	bl	2f626 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1e456:	8aaa      	ldrh	r2, [r5, #20]
   1e458:	6929      	ldr	r1, [r5, #16]
   1e45a:	4640      	mov	r0, r8
   1e45c:	f013 fae1 	bl	31a22 <memcpy>
	err = bt_att_req_send(conn, req);
   1e460:	4621      	mov	r1, r4
   1e462:	4638      	mov	r0, r7
	req->buf = buf;
   1e464:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1e466:	f010 f9cf 	bl	2e808 <bt_att_req_send>
	if (err) {
   1e46a:	4605      	mov	r5, r0
   1e46c:	2800      	cmp	r0, #0
   1e46e:	d0a4      	beq.n	1e3ba <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1e470:	4620      	mov	r0, r4
   1e472:	f7ff fb43 	bl	1dafc <bt_att_req_free>
   1e476:	e7a0      	b.n	1e3ba <gatt_indicate+0x2e>
   1e478:	000379fd 	.word	0x000379fd
   1e47c:	0003322c 	.word	0x0003322c
   1e480:	00037a13 	.word	0x00037a13
   1e484:	0002e8a9 	.word	0x0002e8a9
   1e488:	00037a3e 	.word	0x00037a3e

0001e48c <bt_gatt_indicate>:
{
   1e48c:	b530      	push	{r4, r5, lr}
   1e48e:	4604      	mov	r4, r0
   1e490:	460d      	mov	r5, r1
   1e492:	b08b      	sub	sp, #44	; 0x2c
   1e494:	4b36      	ldr	r3, [pc, #216]	; (1e570 <bt_gatt_indicate+0xe4>)
   1e496:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e49a:	075a      	lsls	r2, r3, #29
   1e49c:	d561      	bpl.n	1e562 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e49e:	b110      	cbz	r0, 1e4a6 <bt_gatt_indicate+0x1a>
   1e4a0:	7b43      	ldrb	r3, [r0, #13]
   1e4a2:	2b07      	cmp	r3, #7
   1e4a4:	d160      	bne.n	1e568 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1e4a6:	6868      	ldr	r0, [r5, #4]
   1e4a8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e4aa:	f7ff fe57 	bl	1e15c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e4ae:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e4b0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e4b4:	b33a      	cbz	r2, 1e506 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e4b6:	a905      	add	r1, sp, #20
   1e4b8:	9102      	str	r1, [sp, #8]
   1e4ba:	492e      	ldr	r1, [pc, #184]	; (1e574 <bt_gatt_indicate+0xe8>)
	found->attr = NULL;
   1e4bc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e4be:	9101      	str	r1, [sp, #4]
   1e4c0:	2101      	movs	r1, #1
   1e4c2:	9100      	str	r1, [sp, #0]
   1e4c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e4c8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e4ca:	f7ff fe77 	bl	1e1bc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e4ce:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e4d0:	b91b      	cbnz	r3, 1e4da <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1e4d2:	f06f 0001 	mvn.w	r0, #1
}
   1e4d6:	b00b      	add	sp, #44	; 0x2c
   1e4d8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e4da:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e4dc:	9b05      	ldr	r3, [sp, #20]
   1e4de:	a904      	add	r1, sp, #16
   1e4e0:	6818      	ldr	r0, [r3, #0]
   1e4e2:	2300      	movs	r3, #0
   1e4e4:	f88d 3010 	strb.w	r3, [sp, #16]
   1e4e8:	f642 0303 	movw	r3, #10243	; 0x2803
   1e4ec:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e4f0:	f00e ff9d 	bl	2d42e <bt_uuid_cmp>
   1e4f4:	b970      	cbnz	r0, 1e514 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e4f6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1e4f8:	68c3      	ldr	r3, [r0, #12]
   1e4fa:	799b      	ldrb	r3, [r3, #6]
   1e4fc:	069b      	lsls	r3, r3, #26
   1e4fe:	d405      	bmi.n	1e50c <bt_gatt_indicate+0x80>
			return -EINVAL;
   1e500:	f06f 0015 	mvn.w	r0, #21
   1e504:	e7e7      	b.n	1e4d6 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1e506:	2800      	cmp	r0, #0
   1e508:	d1e8      	bne.n	1e4dc <bt_gatt_indicate+0x50>
   1e50a:	e7e2      	b.n	1e4d2 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e50c:	f010 fb26 	bl	2eb5c <bt_gatt_attr_value_handle>
   1e510:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1e514:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e518:	b13c      	cbz	r4, 1e52a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1e51a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1e51c:	4601      	mov	r1, r0
   1e51e:	462a      	mov	r2, r5
   1e520:	4620      	mov	r0, r4
		params->_ref = 1;
   1e522:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1e524:	f7ff ff32 	bl	1e38c <gatt_indicate>
   1e528:	e7d5      	b.n	1e4d6 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1e52a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e52e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1e530:	2302      	movs	r3, #2
   1e532:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e536:	f642 1302 	movw	r3, #10498	; 0x2902
   1e53a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e53e:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1e540:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e542:	9302      	str	r3, [sp, #8]
   1e544:	4b0c      	ldr	r3, [pc, #48]	; (1e578 <bt_gatt_indicate+0xec>)
   1e546:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e54a:	9301      	str	r3, [sp, #4]
   1e54c:	2301      	movs	r3, #1
   1e54e:	aa04      	add	r2, sp, #16
   1e550:	9300      	str	r3, [sp, #0]
   1e552:	4623      	mov	r3, r4
	data.ind_params = params;
   1e554:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e556:	f88d 4010 	strb.w	r4, [sp, #16]
   1e55a:	f7ff fe2f 	bl	1e1bc <bt_gatt_foreach_attr_type>
	return data.err;
   1e55e:	9807      	ldr	r0, [sp, #28]
   1e560:	e7b9      	b.n	1e4d6 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1e562:	f06f 000a 	mvn.w	r0, #10
   1e566:	e7b6      	b.n	1e4d6 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1e568:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e56c:	e7b3      	b.n	1e4d6 <bt_gatt_indicate+0x4a>
   1e56e:	bf00      	nop
   1e570:	200080cc 	.word	0x200080cc
   1e574:	0002e8cf 	.word	0x0002e8cf
   1e578:	0001e8b5 	.word	0x0001e8b5

0001e57c <sc_process>:
{
   1e57c:	4603      	mov	r3, r0
   1e57e:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e580:	f850 2c08 	ldr.w	r2, [r0, #-8]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e584:	f1a0 0120 	sub.w	r1, r0, #32
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1e588:	9201      	str	r2, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1e58a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e58e:	e8d4 2fef 	ldaex	r2, [r4]
   1e592:	f022 0201 	bic.w	r2, r2, #1
   1e596:	e8c4 2fe0 	stlex	r0, r2, [r4]
   1e59a:	2800      	cmp	r0, #0
   1e59c:	d1f7      	bne.n	1e58e <sc_process+0x12>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e59e:	4a0d      	ldr	r2, [pc, #52]	; (1e5d4 <sc_process+0x58>)
	sc->start = 0U;
   1e5a0:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1e5a2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1e5a6:	4a0c      	ldr	r2, [pc, #48]	; (1e5d8 <sc_process+0x5c>)
	sc->start = 0U;
   1e5a8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->params.func = sc_indicate_rsp;
   1e5ac:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1e5b0:	aa01      	add	r2, sp, #4
   1e5b2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1e5b6:	2204      	movs	r2, #4
	sc->end = 0U;
   1e5b8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   1e5bc:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1e5c0:	f7ff ff64 	bl	1e48c <bt_gatt_indicate>
   1e5c4:	b918      	cbnz	r0, 1e5ce <sc_process+0x52>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1e5c6:	2101      	movs	r1, #1
   1e5c8:	4620      	mov	r0, r4
   1e5ca:	f010 faa3 	bl	2eb14 <atomic_set_bit>
}
   1e5ce:	b002      	add	sp, #8
   1e5d0:	bd10      	pop	{r4, pc}
   1e5d2:	bf00      	nop
   1e5d4:	00033fb0 	.word	0x00033fb0
   1e5d8:	0001e071 	.word	0x0001e071

0001e5dc <update_ccc>:
{
   1e5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5e0:	4b3e      	ldr	r3, [pc, #248]	; (1e6dc <update_ccc+0x100>)
{
   1e5e2:	4617      	mov	r7, r2
	struct bt_conn *conn = data->conn;
   1e5e4:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5e6:	6882      	ldr	r2, [r0, #8]
{
   1e5e8:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5ea:	429a      	cmp	r2, r3
{
   1e5ec:	b086      	sub	sp, #24
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e5ee:	d170      	bne.n	1e6d2 <update_ccc+0xf6>
	ccc = attr->user_data;
   1e5f0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e5f4:	f108 0601 	add.w	r6, r8, #1
   1e5f8:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
   1e5fc:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e600:	b1d3      	cbz	r3, 1e638 <update_ccc+0x5c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1e602:	4632      	mov	r2, r6
   1e604:	4620      	mov	r0, r4
   1e606:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   1e60a:	f00f fbbb 	bl	2dd84 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1e60e:	b198      	cbz	r0, 1e638 <update_ccc+0x5c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1e610:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e614:	4629      	mov	r1, r5
   1e616:	4620      	mov	r0, r4
   1e618:	f010 faf4 	bl	2ec04 <bt_gatt_check_perm>
		if (err) {
   1e61c:	b308      	cbz	r0, 1e662 <update_ccc+0x86>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1e61e:	2803      	cmp	r0, #3
   1e620:	d10e      	bne.n	1e640 <update_ccc+0x64>
				LOG_WRN("CCC %p not writable", attr);
   1e622:	4b2f      	ldr	r3, [pc, #188]	; (1e6e0 <update_ccc+0x104>)
   1e624:	2202      	movs	r2, #2
   1e626:	9302      	str	r3, [sp, #8]
   1e628:	2300      	movs	r3, #0
   1e62a:	492e      	ldr	r1, [pc, #184]	; (1e6e4 <update_ccc+0x108>)
   1e62c:	4618      	mov	r0, r3
   1e62e:	e9cd 3300 	strd	r3, r3, [sp]
   1e632:	9503      	str	r5, [sp, #12]
   1e634:	f010 fa3e 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e638:	360a      	adds	r6, #10
   1e63a:	454e      	cmp	r6, r9
   1e63c:	d1de      	bne.n	1e5fc <update_ccc+0x20>
   1e63e:	e048      	b.n	1e6d2 <update_ccc+0xf6>
			sec = BT_SECURITY_L2;
   1e640:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1e642:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1e644:	bf0c      	ite	eq
   1e646:	f04f 0a03 	moveq.w	sl, #3
   1e64a:	f04f 0a02 	movne.w	sl, #2
			    bt_conn_get_security(conn) < sec) {
   1e64e:	f00f fb97 	bl	2dd80 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1e652:	4582      	cmp	sl, r0
   1e654:	d905      	bls.n	1e662 <update_ccc+0x86>
				if (data->sec < sec) {
   1e656:	793b      	ldrb	r3, [r7, #4]
   1e658:	4553      	cmp	r3, sl
   1e65a:	d2ed      	bcs.n	1e638 <update_ccc+0x5c>
					data->sec = sec;
   1e65c:	f887 a004 	strb.w	sl, [r7, #4]
   1e660:	e7ea      	b.n	1e638 <update_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1e662:	4641      	mov	r1, r8
   1e664:	4628      	mov	r0, r5
   1e666:	f010 f911 	bl	2e88c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1e66a:	4b1f      	ldr	r3, [pc, #124]	; (1e6e8 <update_ccc+0x10c>)
   1e66c:	4598      	cmp	r8, r3
   1e66e:	d130      	bne.n	1e6d2 <update_ccc+0xf6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1e670:	7a20      	ldrb	r0, [r4, #8]
   1e672:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1e676:	f7ff fb49 	bl	1dd0c <find_sc_cfg>
	if (!cfg) {
   1e67a:	b350      	cbz	r0, 1e6d2 <update_ccc+0xf6>
	if (!(cfg->data.start || cfg->data.end)) {
   1e67c:	8902      	ldrh	r2, [r0, #8]
   1e67e:	8943      	ldrh	r3, [r0, #10]
   1e680:	ea52 0103 	orrs.w	r1, r2, r3
   1e684:	d025      	beq.n	1e6d2 <update_ccc+0xf6>
	index = bt_conn_index(conn);
   1e686:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1e688:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1e68c:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   1e690:	f7fd fe98 	bl	1c3c4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1e694:	2318      	movs	r3, #24
   1e696:	4915      	ldr	r1, [pc, #84]	; (1e6ec <update_ccc+0x110>)
   1e698:	4a15      	ldr	r2, [pc, #84]	; (1e6f0 <update_ccc+0x114>)
   1e69a:	fb03 1300 	mla	r3, r3, r0, r1
   1e69e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1e6a0:	4a14      	ldr	r2, [pc, #80]	; (1e6f4 <update_ccc+0x118>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e6a2:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   1e6a4:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1e6a6:	aa05      	add	r2, sp, #20
   1e6a8:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1e6aa:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e6ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1e6b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1e6b4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	f7ff fee8 	bl	1e48c <bt_gatt_indicate>
   1e6bc:	b148      	cbz	r0, 1e6d2 <update_ccc+0xf6>
		LOG_ERR("SC restore indication failed");
   1e6be:	4b0e      	ldr	r3, [pc, #56]	; (1e6f8 <update_ccc+0x11c>)
   1e6c0:	2201      	movs	r2, #1
   1e6c2:	9302      	str	r3, [sp, #8]
   1e6c4:	2300      	movs	r3, #0
   1e6c6:	4907      	ldr	r1, [pc, #28]	; (1e6e4 <update_ccc+0x108>)
   1e6c8:	4618      	mov	r0, r3
   1e6ca:	e9cd 3300 	strd	r3, r3, [sp]
   1e6ce:	f010 f9f1 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
}
   1e6d2:	2001      	movs	r0, #1
   1e6d4:	b006      	add	sp, #24
   1e6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e6da:	bf00      	nop
   1e6dc:	0001ddc1 	.word	0x0001ddc1
   1e6e0:	00037a65 	.word	0x00037a65
   1e6e4:	0003322c 	.word	0x0003322c
   1e6e8:	2000860c 	.word	0x2000860c
   1e6ec:	20030b0c 	.word	0x20030b0c
   1e6f0:	00033fb0 	.word	0x00033fb0
   1e6f4:	0002eb29 	.word	0x0002eb29
   1e6f8:	00037a79 	.word	0x00037a79

0001e6fc <gatt_notify>:
{
   1e6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e700:	4614      	mov	r4, r2
   1e702:	4688      	mov	r8, r1
   1e704:	b085      	sub	sp, #20
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e706:	2294      	movs	r2, #148	; 0x94
   1e708:	6861      	ldr	r1, [r4, #4]
{
   1e70a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e70c:	f010 fa7a 	bl	2ec04 <bt_gatt_check_perm>
   1e710:	b170      	cbz	r0, 1e730 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1e712:	4b2a      	ldr	r3, [pc, #168]	; (1e7bc <gatt_notify+0xc0>)
   1e714:	2202      	movs	r2, #2
   1e716:	9302      	str	r3, [sp, #8]
   1e718:	2300      	movs	r3, #0
   1e71a:	4929      	ldr	r1, [pc, #164]	; (1e7c0 <gatt_notify+0xc4>)
   1e71c:	4618      	mov	r0, r3
   1e71e:	e9cd 3300 	strd	r3, r3, [sp]
   1e722:	f010 f9c7 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   1e726:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e72a:	b005      	add	sp, #20
   1e72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1e730:	2201      	movs	r2, #1
   1e732:	4630      	mov	r0, r6
   1e734:	6861      	ldr	r1, [r4, #4]
   1e736:	f010 fa99 	bl	2ec6c <bt_gatt_is_subscribed>
   1e73a:	4603      	mov	r3, r0
   1e73c:	b950      	cbnz	r0, 1e754 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1e73e:	4a21      	ldr	r2, [pc, #132]	; (1e7c4 <gatt_notify+0xc8>)
   1e740:	9000      	str	r0, [sp, #0]
   1e742:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1e746:	491e      	ldr	r1, [pc, #120]	; (1e7c0 <gatt_notify+0xc4>)
   1e748:	2202      	movs	r2, #2
   1e74a:	f010 f9b3 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1e74e:	f06f 0015 	mvn.w	r0, #21
   1e752:	e7ea      	b.n	1e72a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1e754:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1e756:	211b      	movs	r1, #27
   1e758:	4630      	mov	r0, r6
   1e75a:	3202      	adds	r2, #2
   1e75c:	f7fe fede 	bl	1d51c <bt_att_create_pdu>
	if (!buf) {
   1e760:	4605      	mov	r5, r0
   1e762:	b958      	cbnz	r0, 1e77c <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1e764:	4b18      	ldr	r3, [pc, #96]	; (1e7c8 <gatt_notify+0xcc>)
   1e766:	9000      	str	r0, [sp, #0]
   1e768:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e76c:	2202      	movs	r2, #2
   1e76e:	4603      	mov	r3, r0
   1e770:	4913      	ldr	r1, [pc, #76]	; (1e7c0 <gatt_notify+0xc4>)
   1e772:	f010 f99f 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   1e776:	f06f 000b 	mvn.w	r0, #11
   1e77a:	e7d6      	b.n	1e72a <gatt_notify+0x2e>
   1e77c:	f100 090c 	add.w	r9, r0, #12
   1e780:	2102      	movs	r1, #2
   1e782:	4648      	mov	r0, r9
   1e784:	f010 ff4f 	bl	2f626 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1e788:	4607      	mov	r7, r0
   1e78a:	f827 8b02 	strh.w	r8, [r7], #2
   1e78e:	89a1      	ldrh	r1, [r4, #12]
   1e790:	4648      	mov	r0, r9
   1e792:	f010 ff48 	bl	2f626 <net_buf_simple_add>
   1e796:	89a2      	ldrh	r2, [r4, #12]
   1e798:	68a1      	ldr	r1, [r4, #8]
   1e79a:	4638      	mov	r0, r7
   1e79c:	f013 f941 	bl	31a22 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1e7a0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1e7a4:	4628      	mov	r0, r5
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	f010 f866 	bl	2e878 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1e7ac:	4629      	mov	r1, r5
   1e7ae:	4630      	mov	r0, r6
}
   1e7b0:	b005      	add	sp, #20
   1e7b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1e7b6:	f00f bfe9 	b.w	2e78c <bt_att_send>
   1e7ba:	bf00      	nop
   1e7bc:	000379fd 	.word	0x000379fd
   1e7c0:	0003322c 	.word	0x0003322c
   1e7c4:	00037a13 	.word	0x00037a13
   1e7c8:	00037a96 	.word	0x00037a96

0001e7cc <bt_gatt_notify_cb>:
{
   1e7cc:	b530      	push	{r4, r5, lr}
   1e7ce:	4604      	mov	r4, r0
   1e7d0:	460d      	mov	r5, r1
   1e7d2:	b08b      	sub	sp, #44	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e7d4:	4b34      	ldr	r3, [pc, #208]	; (1e8a8 <bt_gatt_notify_cb+0xdc>)
   1e7d6:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1e7da:	075a      	lsls	r2, r3, #29
   1e7dc:	d55d      	bpl.n	1e89a <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1e7de:	b110      	cbz	r0, 1e7e6 <bt_gatt_notify_cb+0x1a>
   1e7e0:	7b43      	ldrb	r3, [r0, #13]
   1e7e2:	2b07      	cmp	r3, #7
   1e7e4:	d15c      	bne.n	1e8a0 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1e7e6:	6868      	ldr	r0, [r5, #4]
   1e7e8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e7ea:	f7ff fcb7 	bl	1e15c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1e7ee:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1e7f0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1e7f4:	b33a      	cbz	r2, 1e846 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e7f6:	a905      	add	r1, sp, #20
   1e7f8:	9102      	str	r1, [sp, #8]
   1e7fa:	492c      	ldr	r1, [pc, #176]	; (1e8ac <bt_gatt_notify_cb+0xe0>)
	found->attr = NULL;
   1e7fc:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e7fe:	9101      	str	r1, [sp, #4]
   1e800:	2101      	movs	r1, #1
   1e802:	9100      	str	r1, [sp, #0]
   1e804:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1e808:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1e80a:	f7ff fcd7 	bl	1e1bc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1e80e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1e810:	b91b      	cbnz	r3, 1e81a <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1e812:	f06f 0001 	mvn.w	r0, #1
}
   1e816:	b00b      	add	sp, #44	; 0x2c
   1e818:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1e81a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1e81c:	9b05      	ldr	r3, [sp, #20]
   1e81e:	a904      	add	r1, sp, #16
   1e820:	6818      	ldr	r0, [r3, #0]
   1e822:	2300      	movs	r3, #0
   1e824:	f88d 3010 	strb.w	r3, [sp, #16]
   1e828:	f642 0303 	movw	r3, #10243	; 0x2803
   1e82c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e830:	f00e fdfd 	bl	2d42e <bt_uuid_cmp>
   1e834:	b970      	cbnz	r0, 1e854 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1e836:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1e838:	68c3      	ldr	r3, [r0, #12]
   1e83a:	799b      	ldrb	r3, [r3, #6]
   1e83c:	06db      	lsls	r3, r3, #27
   1e83e:	d405      	bmi.n	1e84c <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1e840:	f06f 0015 	mvn.w	r0, #21
   1e844:	e7e7      	b.n	1e816 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1e846:	2800      	cmp	r0, #0
   1e848:	d1e8      	bne.n	1e81c <bt_gatt_notify_cb+0x50>
   1e84a:	e7e2      	b.n	1e812 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1e84c:	f010 f986 	bl	2eb5c <bt_gatt_attr_value_handle>
   1e850:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1e854:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1e858:	b12c      	cbz	r4, 1e866 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1e85a:	4601      	mov	r1, r0
   1e85c:	462a      	mov	r2, r5
   1e85e:	4620      	mov	r0, r4
   1e860:	f7ff ff4c 	bl	1e6fc <gatt_notify>
   1e864:	e7d7      	b.n	1e816 <bt_gatt_notify_cb+0x4a>
	data.err = -ENOTCONN;
   1e866:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e86a:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   1e86e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1e870:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e872:	f8ad 2012 	strh.w	r2, [sp, #18]
   1e876:	aa05      	add	r2, sp, #20
   1e878:	9202      	str	r2, [sp, #8]
   1e87a:	4a0d      	ldr	r2, [pc, #52]	; (1e8b0 <bt_gatt_notify_cb+0xe4>)
	data.type = BT_GATT_CCC_NOTIFY;
   1e87c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e880:	e9cd 3200 	strd	r3, r2, [sp]
   1e884:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e888:	4623      	mov	r3, r4
   1e88a:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1e88c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1e88e:	f88d 4010 	strb.w	r4, [sp, #16]
   1e892:	f7ff fc93 	bl	1e1bc <bt_gatt_foreach_attr_type>
	return data.err;
   1e896:	9807      	ldr	r0, [sp, #28]
   1e898:	e7bd      	b.n	1e816 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1e89a:	f06f 000a 	mvn.w	r0, #10
   1e89e:	e7ba      	b.n	1e816 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1e8a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e8a4:	e7b7      	b.n	1e816 <bt_gatt_notify_cb+0x4a>
   1e8a6:	bf00      	nop
   1e8a8:	200080cc 	.word	0x200080cc
   1e8ac:	0002e8cf 	.word	0x0002e8cf
   1e8b0:	0001e8b5 	.word	0x0001e8b5

0001e8b4 <notify_cb>:
{
   1e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e8b8:	4b46      	ldr	r3, [pc, #280]	; (1e9d4 <notify_cb+0x120>)
{
   1e8ba:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e8bc:	6882      	ldr	r2, [r0, #8]
{
   1e8be:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e8c0:	429a      	cmp	r2, r3
{
   1e8c2:	b085      	sub	sp, #20
	if (attr->write != bt_gatt_attr_write_ccc) {
   1e8c4:	d136      	bne.n	1e934 <notify_cb+0x80>
	ccc = attr->user_data;
   1e8c6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1e8ca:	4b43      	ldr	r3, [pc, #268]	; (1e9d8 <notify_cb+0x124>)
   1e8cc:	459a      	cmp	sl, r3
   1e8ce:	d119      	bne.n	1e904 <notify_cb+0x50>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e8d0:	2600      	movs	r6, #0
   1e8d2:	4c42      	ldr	r4, [pc, #264]	; (1e9dc <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1e8d4:	4f42      	ldr	r7, [pc, #264]	; (1e9e0 <notify_cb+0x12c>)
   1e8d6:	4639      	mov	r1, r7
   1e8d8:	4620      	mov	r0, r4
   1e8da:	f010 f84f 	bl	2e97c <bt_addr_le_eq>
   1e8de:	b978      	cbnz	r0, 1e900 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1e8e0:	2207      	movs	r2, #7
   1e8e2:	4621      	mov	r1, r4
   1e8e4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e8e8:	f7fd fec6 	bl	1c678 <bt_conn_lookup_state_le>
			if (!conn) {
   1e8ec:	bb38      	cbnz	r0, 1e93e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   1e8ee:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1e8f0:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   1e8f2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1e8f4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1e8f8:	8853      	ldrh	r3, [r2, #2]
   1e8fa:	8812      	ldrh	r2, [r2, #0]
   1e8fc:	f7ff fad8 	bl	1deb0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e900:	340c      	adds	r4, #12
   1e902:	b1d6      	cbz	r6, 1e93a <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e904:	f10a 0601 	add.w	r6, sl, #1
   1e908:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   1e90c:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1e910:	89ab      	ldrh	r3, [r5, #12]
   1e912:	429a      	cmp	r2, r3
   1e914:	d10b      	bne.n	1e92e <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1e916:	4631      	mov	r1, r6
   1e918:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1e91c:	f7fd fe6c 	bl	1c5f8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1e920:	4604      	mov	r4, r0
   1e922:	b120      	cbz	r0, 1e92e <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1e924:	7b43      	ldrb	r3, [r0, #13]
   1e926:	2b07      	cmp	r3, #7
   1e928:	d00c      	beq.n	1e944 <notify_cb+0x90>
			bt_conn_unref(conn);
   1e92a:	f00f f99e 	bl	2dc6a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1e92e:	360a      	adds	r6, #10
   1e930:	45b3      	cmp	fp, r6
   1e932:	d1eb      	bne.n	1e90c <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1e934:	f04f 0901 	mov.w	r9, #1
   1e938:	e048      	b.n	1e9cc <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1e93a:	2601      	movs	r6, #1
   1e93c:	e7cb      	b.n	1e8d6 <notify_cb+0x22>
			bt_conn_unref(conn);
   1e93e:	f00f f994 	bl	2dc6a <bt_conn_unref>
   1e942:	e7dd      	b.n	1e900 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1e944:	f8da 3020 	ldr.w	r3, [sl, #32]
   1e948:	b123      	cbz	r3, 1e954 <notify_cb+0xa0>
   1e94a:	4641      	mov	r1, r8
   1e94c:	4798      	blx	r3
   1e94e:	b908      	cbnz	r0, 1e954 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1e950:	4620      	mov	r0, r4
   1e952:	e7ea      	b.n	1e92a <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1e954:	2294      	movs	r2, #148	; 0x94
   1e956:	4641      	mov	r1, r8
   1e958:	4620      	mov	r0, r4
   1e95a:	f010 f953 	bl	2ec04 <bt_gatt_check_perm>
   1e95e:	4681      	mov	r9, r0
   1e960:	b150      	cbz	r0, 1e978 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   1e962:	4b20      	ldr	r3, [pc, #128]	; (1e9e4 <notify_cb+0x130>)
   1e964:	2202      	movs	r2, #2
   1e966:	9302      	str	r3, [sp, #8]
   1e968:	2300      	movs	r3, #0
   1e96a:	491f      	ldr	r1, [pc, #124]	; (1e9e8 <notify_cb+0x134>)
   1e96c:	4618      	mov	r0, r3
   1e96e:	e9cd 3300 	strd	r3, r3, [sp]
   1e972:	f010 f89f 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
			bt_conn_unref(conn);
   1e976:	e7eb      	b.n	1e950 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1e978:	89ab      	ldrh	r3, [r5, #12]
   1e97a:	2b02      	cmp	r3, #2
   1e97c:	d115      	bne.n	1e9aa <notify_cb+0xf6>
   1e97e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e982:	079a      	lsls	r2, r3, #30
   1e984:	d405      	bmi.n	1e992 <notify_cb+0xde>
		bt_conn_unref(conn);
   1e986:	4620      	mov	r0, r4
   1e988:	f00f f96f 	bl	2dc6a <bt_conn_unref>
		data->err = 0;
   1e98c:	2300      	movs	r3, #0
   1e98e:	60ab      	str	r3, [r5, #8]
   1e990:	e7cd      	b.n	1e92e <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1e992:	4620      	mov	r0, r4
   1e994:	692a      	ldr	r2, [r5, #16]
   1e996:	88a9      	ldrh	r1, [r5, #4]
   1e998:	f7ff fcf8 	bl	1e38c <gatt_indicate>
			if (err == 0) {
   1e99c:	4607      	mov	r7, r0
   1e99e:	b980      	cbnz	r0, 1e9c2 <notify_cb+0x10e>
				data->ind_params->_ref++;
   1e9a0:	692a      	ldr	r2, [r5, #16]
   1e9a2:	7d93      	ldrb	r3, [r2, #22]
   1e9a4:	3301      	adds	r3, #1
   1e9a6:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1e9a8:	e7ed      	b.n	1e986 <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1e9aa:	2b01      	cmp	r3, #1
   1e9ac:	d1eb      	bne.n	1e986 <notify_cb+0xd2>
   1e9ae:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1e9b2:	07db      	lsls	r3, r3, #31
   1e9b4:	d5e7      	bpl.n	1e986 <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1e9b6:	4620      	mov	r0, r4
   1e9b8:	692a      	ldr	r2, [r5, #16]
   1e9ba:	88a9      	ldrh	r1, [r5, #4]
   1e9bc:	f7ff fe9e 	bl	1e6fc <gatt_notify>
   1e9c0:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1e9c2:	4620      	mov	r0, r4
   1e9c4:	f00f f951 	bl	2dc6a <bt_conn_unref>
		if (err < 0) {
   1e9c8:	2f00      	cmp	r7, #0
   1e9ca:	dadf      	bge.n	1e98c <notify_cb+0xd8>
}
   1e9cc:	4648      	mov	r0, r9
   1e9ce:	b005      	add	sp, #20
   1e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9d4:	0001ddc1 	.word	0x0001ddc1
   1e9d8:	2000860c 	.word	0x2000860c
   1e9dc:	20030fc3 	.word	0x20030fc3
   1e9e0:	00036982 	.word	0x00036982
   1e9e4:	000379fd 	.word	0x000379fd
   1e9e8:	0003322c 	.word	0x0003322c

0001e9ec <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1e9ec:	b510      	push	{r4, lr}
   1e9ee:	b086      	sub	sp, #24
   1e9f0:	4604      	mov	r4, r0
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1e9f2:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1e9f4:	2001      	movs	r0, #1
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1e9f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e9fa:	4a0f      	ldr	r2, [pc, #60]	; (1ea38 <bt_gatt_connected+0x4c>)
   1e9fc:	ab04      	add	r3, sp, #16
	data.sec = BT_SECURITY_L1;
   1e9fe:	f88d 0014 	strb.w	r0, [sp, #20]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ea02:	f010 f8f2 	bl	2ebea <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   1ea06:	4620      	mov	r0, r4
   1ea08:	f00f f9ba 	bl	2dd80 <bt_conn_get_security>
   1ea0c:	f89d 1014 	ldrb.w	r1, [sp, #20]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1ea10:	4288      	cmp	r0, r1
   1ea12:	d20e      	bcs.n	1ea32 <bt_gatt_connected+0x46>
		int err = bt_conn_set_security(conn, data.sec);
   1ea14:	4620      	mov	r0, r4
   1ea16:	f00f f987 	bl	2dd28 <bt_conn_set_security>

		if (err) {
   1ea1a:	b150      	cbz	r0, 1ea32 <bt_gatt_connected+0x46>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1ea1c:	4b07      	ldr	r3, [pc, #28]	; (1ea3c <bt_gatt_connected+0x50>)
   1ea1e:	9003      	str	r0, [sp, #12]
   1ea20:	9302      	str	r3, [sp, #8]
   1ea22:	2300      	movs	r3, #0
   1ea24:	2202      	movs	r2, #2
   1ea26:	4618      	mov	r0, r3
   1ea28:	e9cd 3300 	strd	r3, r3, [sp]
   1ea2c:	4904      	ldr	r1, [pc, #16]	; (1ea40 <bt_gatt_connected+0x54>)
   1ea2e:	f010 f841 	bl	2eab4 <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1ea32:	b006      	add	sp, #24
   1ea34:	bd10      	pop	{r4, pc}
   1ea36:	bf00      	nop
   1ea38:	0001e5dd 	.word	0x0001e5dd
   1ea3c:	00037abf 	.word	0x00037abf
   1ea40:	0003322c 	.word	0x0003322c

0001ea44 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea46:	4605      	mov	r5, r0
   1ea48:	460e      	mov	r6, r1
   1ea4a:	4617      	mov	r7, r2
	return list->head;
   1ea4c:	4b06      	ldr	r3, [pc, #24]	; (1ea68 <bt_gatt_att_max_mtu_changed+0x24>)
   1ea4e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ea50:	b14c      	cbz	r4, 1ea66 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1ea52:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ea56:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1ea58:	b11b      	cbz	r3, 1ea62 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1ea5a:	463a      	mov	r2, r7
   1ea5c:	4631      	mov	r1, r6
   1ea5e:	4628      	mov	r0, r5
   1ea60:	4798      	blx	r3
	return node->next;
   1ea62:	6864      	ldr	r4, [r4, #4]
   1ea64:	e7f4      	b.n	1ea50 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1ea66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea68:	20030b4c 	.word	0x20030b4c

0001ea6c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   1ea6c:	b507      	push	{r0, r1, r2, lr}
	struct conn_data data;

	LOG_DBG("conn %p", conn);

	data.conn = conn;
   1ea6e:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   1ea70:	2001      	movs	r0, #1

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ea72:	466b      	mov	r3, sp
   1ea74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ea78:	4a03      	ldr	r2, [pc, #12]	; (1ea88 <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1ea7a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ea7e:	f010 f8b4 	bl	2ebea <bt_gatt_foreach_attr>
}
   1ea82:	b003      	add	sp, #12
   1ea84:	f85d fb04 	ldr.w	pc, [sp], #4
   1ea88:	0001e5dd 	.word	0x0001e5dd

0001ea8c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1ea8c:	b570      	push	{r4, r5, r6, lr}
   1ea8e:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1ea90:	4603      	mov	r3, r0
   1ea92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ea96:	2001      	movs	r0, #1
   1ea98:	4a0d      	ldr	r2, [pc, #52]	; (1ead0 <bt_gatt_disconnected+0x44>)
   1ea9a:	f010 f8a6 	bl	2ebea <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1ea9e:	4620      	mov	r0, r4
   1eaa0:	f7ff f906 	bl	1dcb0 <find_cf_cfg>
	if (!cfg) {
   1eaa4:	4605      	mov	r5, r0
   1eaa6:	b188      	cbz	r0, 1eacc <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1eaa8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1eaac:	4631      	mov	r1, r6
   1eaae:	7a20      	ldrb	r0, [r4, #8]
   1eab0:	f00e fe0a 	bl	2d6c8 <bt_addr_le_is_bonded>
   1eab4:	b920      	cbnz	r0, 1eac0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1eab6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1eab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1eabc:	f7ff b9e4 	b.w	1de88 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1eac0:	4631      	mov	r1, r6
   1eac2:	1c68      	adds	r0, r5, #1
}
   1eac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1eac8:	f00f bf60 	b.w	2e98c <bt_addr_le_copy>
}
   1eacc:	bd70      	pop	{r4, r5, r6, pc}
   1eace:	bf00      	nop
   1ead0:	0001dfbd 	.word	0x0001dfbd

0001ead4 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1ead4:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1ead6:	4b05      	ldr	r3, [pc, #20]	; (1eaec <smp_find+0x18>)
{
   1ead8:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1eada:	4618      	mov	r0, r3
   1eadc:	f010 f991 	bl	2ee02 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1eae0:	3b04      	subs	r3, #4
   1eae2:	2800      	cmp	r0, #0
}
   1eae4:	bf14      	ite	ne
   1eae6:	4618      	movne	r0, r3
   1eae8:	2000      	moveq	r0, #0
   1eaea:	bd08      	pop	{r3, pc}
   1eaec:	2000a254 	.word	0x2000a254

0001eaf0 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1eaf0:	4b08      	ldr	r3, [pc, #32]	; (1eb14 <latch_auth_cb+0x24>)
   1eaf2:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1eaf6:	681a      	ldr	r2, [r3, #0]
   1eaf8:	4b07      	ldr	r3, [pc, #28]	; (1eb18 <latch_auth_cb+0x28>)
   1eafa:	e8d0 1fef 	ldaex	r1, [r0]
   1eafe:	4299      	cmp	r1, r3
   1eb00:	d104      	bne.n	1eb0c <latch_auth_cb+0x1c>
   1eb02:	e8c0 2fec 	stlex	ip, r2, [r0]
   1eb06:	f1bc 0f00 	cmp.w	ip, #0
   1eb0a:	d1f6      	bne.n	1eafa <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eb0c:	e8d0 0faf 	lda	r0, [r0]
}
   1eb10:	4770      	bx	lr
   1eb12:	bf00      	nop
   1eb14:	20030a34 	.word	0x20030a34
   1eb18:	2000a250 	.word	0x2000a250

0001eb1c <get_io_capa>:
{
   1eb1c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eb1e:	f7ff ffe7 	bl	1eaf0 <latch_auth_cb>
	if (!smp_auth_cb) {
   1eb22:	4603      	mov	r3, r0
   1eb24:	b1c8      	cbz	r0, 1eb5a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1eb26:	e9d0 1200 	ldrd	r1, r2, [r0]
   1eb2a:	b921      	cbnz	r1, 1eb36 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1eb2c:	2a00      	cmp	r2, #0
   1eb2e:	bf0c      	ite	eq
   1eb30:	2003      	moveq	r0, #3
   1eb32:	2002      	movne	r0, #2
   1eb34:	e010      	b.n	1eb58 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1eb36:	b132      	cbz	r2, 1eb46 <get_io_capa+0x2a>
   1eb38:	6883      	ldr	r3, [r0, #8]
   1eb3a:	b913      	cbnz	r3, 1eb42 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1eb3c:	4b09      	ldr	r3, [pc, #36]	; (1eb64 <get_io_capa+0x48>)
   1eb3e:	781b      	ldrb	r3, [r3, #0]
   1eb40:	b933      	cbnz	r3, 1eb50 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1eb42:	2004      	movs	r0, #4
   1eb44:	e008      	b.n	1eb58 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1eb46:	4907      	ldr	r1, [pc, #28]	; (1eb64 <get_io_capa+0x48>)
   1eb48:	7808      	ldrb	r0, [r1, #0]
   1eb4a:	b128      	cbz	r0, 1eb58 <get_io_capa+0x3c>
   1eb4c:	689b      	ldr	r3, [r3, #8]
   1eb4e:	b933      	cbnz	r3, 1eb5e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1eb50:	3a00      	subs	r2, #0
   1eb52:	bf18      	it	ne
   1eb54:	2201      	movne	r2, #1
   1eb56:	0050      	lsls	r0, r2, #1
}
   1eb58:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1eb5a:	2003      	movs	r0, #3
   1eb5c:	e7fc      	b.n	1eb58 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1eb5e:	2001      	movs	r0, #1
   1eb60:	e7fa      	b.n	1eb58 <get_io_capa+0x3c>
   1eb62:	bf00      	nop
   1eb64:	20031b8f 	.word	0x20031b8f

0001eb68 <get_auth>:
{
   1eb68:	b510      	push	{r4, lr}
	if (sc_supported) {
   1eb6a:	4b0c      	ldr	r3, [pc, #48]	; (1eb9c <get_auth+0x34>)
   1eb6c:	781b      	ldrb	r3, [r3, #0]
   1eb6e:	b17b      	cbz	r3, 1eb90 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1eb70:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1eb74:	f7ff ffd2 	bl	1eb1c <get_io_capa>
	if (bondable) {
   1eb78:	4b09      	ldr	r3, [pc, #36]	; (1eba0 <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1eb7a:	2803      	cmp	r0, #3
	if (bondable) {
   1eb7c:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   1eb7e:	bf0c      	ite	eq
   1eb80:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1eb84:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1eb88:	b12b      	cbz	r3, 1eb96 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1eb8a:	f044 0001 	orr.w	r0, r4, #1
}
   1eb8e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1eb90:	f001 0407 	and.w	r4, r1, #7
   1eb94:	e7ee      	b.n	1eb74 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1eb96:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1eb9a:	e7f8      	b.n	1eb8e <get_auth+0x26>
   1eb9c:	20031b8f 	.word	0x20031b8f
   1eba0:	20008b2b 	.word	0x20008b2b

0001eba4 <smp_chan_get>:
{
   1eba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1eba6:	2106      	movs	r1, #6
   1eba8:	f00f f9b6 	bl	2df18 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ebac:	4604      	mov	r4, r0
   1ebae:	b958      	cbnz	r0, 1ebc8 <smp_chan_get+0x24>
		LOG_ERR("Unable to find SMP channel");
   1ebb0:	4b07      	ldr	r3, [pc, #28]	; (1ebd0 <smp_chan_get+0x2c>)
   1ebb2:	2201      	movs	r2, #1
   1ebb4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1ebb8:	4906      	ldr	r1, [pc, #24]	; (1ebd4 <smp_chan_get+0x30>)
   1ebba:	4603      	mov	r3, r0
   1ebbc:	9000      	str	r0, [sp, #0]
   1ebbe:	f010 f978 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
}
   1ebc2:	4620      	mov	r0, r4
   1ebc4:	b004      	add	sp, #16
   1ebc6:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1ebc8:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1ebcc:	e7f9      	b.n	1ebc2 <smp_chan_get+0x1e>
   1ebce:	bf00      	nop
   1ebd0:	00037afa 	.word	0x00037afa
   1ebd4:	00033274 	.word	0x00033274

0001ebd8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1ebd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1ebda:	4b0d      	ldr	r3, [pc, #52]	; (1ec10 <bt_smp_accept+0x38>)
{
   1ebdc:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1ebde:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   1ebe2:	b930      	cbnz	r0, 1ebf2 <bt_smp_accept+0x1a>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1ebe4:	4a0b      	ldr	r2, [pc, #44]	; (1ec14 <bt_smp_accept+0x3c>)

		*chan = &smp->chan.chan;
   1ebe6:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   1ebe8:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
   1ebea:	600b      	str	r3, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1ebec:	b005      	add	sp, #20
   1ebee:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_ERR("No available SMP context for conn %p", conn);
   1ebf2:	4b09      	ldr	r3, [pc, #36]	; (1ec18 <bt_smp_accept+0x40>)
   1ebf4:	9203      	str	r2, [sp, #12]
   1ebf6:	9302      	str	r3, [sp, #8]
   1ebf8:	2300      	movs	r3, #0
   1ebfa:	2201      	movs	r2, #1
   1ebfc:	4618      	mov	r0, r3
   1ebfe:	e9cd 3300 	strd	r3, r3, [sp]
   1ec02:	4906      	ldr	r1, [pc, #24]	; (1ec1c <bt_smp_accept+0x44>)
   1ec04:	f010 f955 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
   1ec08:	f06f 000b 	mvn.w	r0, #11
   1ec0c:	e7ee      	b.n	1ebec <bt_smp_accept+0x14>
   1ec0e:	bf00      	nop
   1ec10:	2000a250 	.word	0x2000a250
   1ec14:	000340b4 	.word	0x000340b4
   1ec18:	00037b15 	.word	0x00037b15
   1ec1c:	00033274 	.word	0x00033274

0001ec20 <smp_init>:
{
   1ec20:	b538      	push	{r3, r4, r5, lr}
   1ec22:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   1ec24:	22ec      	movs	r2, #236	; 0xec
   1ec26:	2100      	movs	r1, #0
   1ec28:	f012 ff35 	bl	31a96 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1ec2c:	2110      	movs	r1, #16
   1ec2e:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1ec32:	f7fc ff1f 	bl	1ba74 <bt_rand>
   1ec36:	4604      	mov	r4, r0
   1ec38:	b948      	cbnz	r0, 1ec4e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1ec3a:	2105      	movs	r1, #5
   1ec3c:	4628      	mov	r0, r5
   1ec3e:	f010 f947 	bl	2eed0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1ec42:	f7fc ffc9 	bl	1bbd8 <bt_pub_key_get>
   1ec46:	4b03      	ldr	r3, [pc, #12]	; (1ec54 <smp_init+0x34>)
   1ec48:	6018      	str	r0, [r3, #0]
}
   1ec4a:	4620      	mov	r0, r4
   1ec4c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1ec4e:	2408      	movs	r4, #8
   1ec50:	e7fb      	b.n	1ec4a <smp_init+0x2a>
   1ec52:	bf00      	nop
   1ec54:	20030b54 	.word	0x20030b54

0001ec58 <smp_dhkey_generate>:
{
   1ec58:	b530      	push	{r4, r5, lr}
   1ec5a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ec5c:	1d05      	adds	r5, r0, #4
   1ec5e:	2108      	movs	r1, #8
   1ec60:	4628      	mov	r0, r5
{
   1ec62:	b085      	sub	sp, #20
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ec64:	f010 f934 	bl	2eed0 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1ec68:	490b      	ldr	r1, [pc, #44]	; (1ec98 <smp_dhkey_generate+0x40>)
   1ec6a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ec6e:	f7fc ffc1 	bl	1bbf4 <bt_dh_key_gen>
	if (err) {
   1ec72:	b170      	cbz	r0, 1ec92 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ec74:	2108      	movs	r1, #8
   1ec76:	4628      	mov	r0, r5
   1ec78:	f010 f8ea 	bl	2ee50 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1ec7c:	4b07      	ldr	r3, [pc, #28]	; (1ec9c <smp_dhkey_generate+0x44>)
   1ec7e:	2201      	movs	r2, #1
   1ec80:	9302      	str	r3, [sp, #8]
   1ec82:	2300      	movs	r3, #0
   1ec84:	4906      	ldr	r1, [pc, #24]	; (1eca0 <smp_dhkey_generate+0x48>)
   1ec86:	4618      	mov	r0, r3
   1ec88:	e9cd 3300 	strd	r3, r3, [sp]
   1ec8c:	f010 f911 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ec90:	2008      	movs	r0, #8
}
   1ec92:	b005      	add	sp, #20
   1ec94:	bd30      	pop	{r4, r5, pc}
   1ec96:	bf00      	nop
   1ec98:	0002f2a9 	.word	0x0002f2a9
   1ec9c:	00037b3a 	.word	0x00037b3a
   1eca0:	00033274 	.word	0x00033274

0001eca4 <smp_ident_info>:
{
   1eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eca6:	460b      	mov	r3, r1
   1eca8:	4606      	mov	r6, r0
   1ecaa:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ecac:	210d      	movs	r1, #13
   1ecae:	3004      	adds	r0, #4
   1ecb0:	f010 f8a7 	bl	2ee02 <atomic_test_bit>
   1ecb4:	b330      	cbz	r0, 1ed04 <smp_ident_info+0x60>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1ecb6:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ecb8:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1ecbc:	2002      	movs	r0, #2
   1ecbe:	f103 0788 	add.w	r7, r3, #136	; 0x88
   1ecc2:	463a      	mov	r2, r7
   1ecc4:	7a19      	ldrb	r1, [r3, #8]
   1ecc6:	f010 fb80 	bl	2f3ca <bt_keys_get_type>
		if (!keys) {
   1ecca:	4604      	mov	r4, r0
   1eccc:	b980      	cbnz	r0, 1ecf0 <smp_ident_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ecce:	4638      	mov	r0, r7
   1ecd0:	f7fa fc1c 	bl	1950c <bt_addr_le_str>
   1ecd4:	4b0e      	ldr	r3, [pc, #56]	; (1ed10 <smp_ident_info+0x6c>)
   1ecd6:	9003      	str	r0, [sp, #12]
   1ecd8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ecdc:	4620      	mov	r0, r4
   1ecde:	4623      	mov	r3, r4
   1ece0:	2201      	movs	r2, #1
   1ece2:	490c      	ldr	r1, [pc, #48]	; (1ed14 <smp_ident_info+0x70>)
   1ece4:	9400      	str	r4, [sp, #0]
   1ece6:	f010 f8e4 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ecea:	2008      	movs	r0, #8
}
   1ecec:	b005      	add	sp, #20
   1ecee:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ecf0:	462b      	mov	r3, r5
   1ecf2:	342a      	adds	r4, #42	; 0x2a
   1ecf4:	f105 0210 	add.w	r2, r5, #16
   1ecf8:	f853 1b04 	ldr.w	r1, [r3], #4
   1ecfc:	4293      	cmp	r3, r2
   1ecfe:	f844 1b04 	str.w	r1, [r4], #4
   1ed02:	d1f9      	bne.n	1ecf8 <smp_ident_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1ed04:	4630      	mov	r0, r6
   1ed06:	2109      	movs	r1, #9
   1ed08:	f010 f8e2 	bl	2eed0 <atomic_set_bit>
	return 0;
   1ed0c:	2000      	movs	r0, #0
   1ed0e:	e7ed      	b.n	1ecec <smp_ident_info+0x48>
   1ed10:	00037b53 	.word	0x00037b53
   1ed14:	00033274 	.word	0x00033274

0001ed18 <smp_encrypt_info>:
{
   1ed18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed1a:	460b      	mov	r3, r1
   1ed1c:	4606      	mov	r6, r0
   1ed1e:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ed20:	210d      	movs	r1, #13
   1ed22:	3004      	adds	r0, #4
   1ed24:	f010 f86d 	bl	2ee02 <atomic_test_bit>
   1ed28:	b330      	cbz	r0, 1ed78 <smp_encrypt_info+0x60>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1ed2a:	68dd      	ldr	r5, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ed2c:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ed30:	2004      	movs	r0, #4
   1ed32:	f103 0788 	add.w	r7, r3, #136	; 0x88
   1ed36:	463a      	mov	r2, r7
   1ed38:	7a19      	ldrb	r1, [r3, #8]
   1ed3a:	f010 fb46 	bl	2f3ca <bt_keys_get_type>
		if (!keys) {
   1ed3e:	4604      	mov	r4, r0
   1ed40:	b980      	cbnz	r0, 1ed64 <smp_encrypt_info+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ed42:	4638      	mov	r0, r7
   1ed44:	f7fa fbe2 	bl	1950c <bt_addr_le_str>
   1ed48:	4b0e      	ldr	r3, [pc, #56]	; (1ed84 <smp_encrypt_info+0x6c>)
   1ed4a:	9003      	str	r0, [sp, #12]
   1ed4c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1ed50:	4620      	mov	r0, r4
   1ed52:	4623      	mov	r3, r4
   1ed54:	2201      	movs	r2, #1
   1ed56:	490c      	ldr	r1, [pc, #48]	; (1ed88 <smp_encrypt_info+0x70>)
   1ed58:	9400      	str	r4, [sp, #0]
   1ed5a:	f010 f8aa 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ed5e:	2008      	movs	r0, #8
}
   1ed60:	b005      	add	sp, #20
   1ed62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed64:	462b      	mov	r3, r5
   1ed66:	341a      	adds	r4, #26
   1ed68:	f105 0210 	add.w	r2, r5, #16
   1ed6c:	f853 1b04 	ldr.w	r1, [r3], #4
   1ed70:	4293      	cmp	r3, r2
   1ed72:	f844 1b04 	str.w	r1, [r4], #4
   1ed76:	d1f9      	bne.n	1ed6c <smp_encrypt_info+0x54>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1ed78:	4630      	mov	r0, r6
   1ed7a:	2107      	movs	r1, #7
   1ed7c:	f010 f8a8 	bl	2eed0 <atomic_set_bit>
	return 0;
   1ed80:	2000      	movs	r0, #0
   1ed82:	e7ed      	b.n	1ed60 <smp_encrypt_info+0x48>
   1ed84:	00037b53 	.word	0x00037b53
   1ed88:	00033274 	.word	0x00033274

0001ed8c <smp_send_pairing_confirm>:
{
   1ed8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	switch (smp->method) {
   1ed8e:	7a04      	ldrb	r4, [r0, #8]
{
   1ed90:	4605      	mov	r5, r0
	switch (smp->method) {
   1ed92:	2c02      	cmp	r4, #2
   1ed94:	d823      	bhi.n	1edde <smp_send_pairing_confirm+0x52>
   1ed96:	b144      	cbz	r4, 1edaa <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ed98:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1ed9c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1eda0:	40dc      	lsrs	r4, r3
   1eda2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1eda6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1edaa:	2103      	movs	r1, #3
   1edac:	4628      	mov	r0, r5
   1edae:	f010 f89f 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1edb2:	4606      	mov	r6, r0
   1edb4:	b308      	cbz	r0, 1edfa <smp_send_pairing_confirm+0x6e>
   1edb6:	2110      	movs	r1, #16
   1edb8:	300c      	adds	r0, #12
   1edba:	f010 fc34 	bl	2f626 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1edbe:	9000      	str	r0, [sp, #0]
   1edc0:	4816      	ldr	r0, [pc, #88]	; (1ee1c <smp_send_pairing_confirm+0x90>)
   1edc2:	4623      	mov	r3, r4
   1edc4:	6800      	ldr	r0, [r0, #0]
   1edc6:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1edca:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1edce:	f010 fb54 	bl	2f47a <bt_crypto_f4>
   1edd2:	4604      	mov	r4, r0
   1edd4:	b1b0      	cbz	r0, 1ee04 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
   1edd6:	4630      	mov	r0, r6
   1edd8:	f001 fcda 	bl	20790 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1eddc:	e00d      	b.n	1edfa <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   1edde:	2c03      	cmp	r4, #3
   1ede0:	f04f 0300 	mov.w	r3, #0
   1ede4:	d00c      	beq.n	1ee00 <smp_send_pairing_confirm+0x74>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ede6:	4a0e      	ldr	r2, [pc, #56]	; (1ee20 <smp_send_pairing_confirm+0x94>)
   1ede8:	4618      	mov	r0, r3
   1edea:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1edee:	490d      	ldr	r1, [pc, #52]	; (1ee24 <smp_send_pairing_confirm+0x98>)
   1edf0:	2201      	movs	r2, #1
	switch (smp->method) {
   1edf2:	9403      	str	r4, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1edf4:	9300      	str	r3, [sp, #0]
   1edf6:	f010 f85c 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1edfa:	2008      	movs	r0, #8
}
   1edfc:	b004      	add	sp, #16
   1edfe:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1ee00:	461c      	mov	r4, r3
   1ee02:	e7d2      	b.n	1edaa <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1ee04:	4602      	mov	r2, r0
   1ee06:	4631      	mov	r1, r6
   1ee08:	4628      	mov	r0, r5
   1ee0a:	f010 f835 	bl	2ee78 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1ee0e:	1d28      	adds	r0, r5, #4
   1ee10:	4621      	mov	r1, r4
   1ee12:	f010 f81d 	bl	2ee50 <atomic_clear_bit>
	return 0;
   1ee16:	4620      	mov	r0, r4
   1ee18:	e7f0      	b.n	1edfc <smp_send_pairing_confirm+0x70>
   1ee1a:	bf00      	nop
   1ee1c:	20030b54 	.word	0x20030b54
   1ee20:	00037b6d 	.word	0x00037b6d
   1ee24:	00033274 	.word	0x00033274

0001ee28 <smp_public_key_periph>:
{
   1ee28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee2a:	4604      	mov	r4, r0
   1ee2c:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee2e:	f7ff fe5f 	bl	1eaf0 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ee32:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ee34:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ee36:	210e      	movs	r1, #14
   1ee38:	4628      	mov	r0, r5
   1ee3a:	f00f ffe2 	bl	2ee02 <atomic_test_bit>
   1ee3e:	b990      	cbnz	r0, 1ee66 <smp_public_key_periph+0x3e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1ee40:	4b51      	ldr	r3, [pc, #324]	; (1ef88 <smp_public_key_periph+0x160>)
   1ee42:	2220      	movs	r2, #32
   1ee44:	6819      	ldr	r1, [r3, #0]
   1ee46:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ee4a:	f012 fdda 	bl	31a02 <memcmp>
   1ee4e:	4603      	mov	r3, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1ee50:	b948      	cbnz	r0, 1ee66 <smp_public_key_periph+0x3e>
		LOG_WRN("Remote public key rejected");
   1ee52:	4a4e      	ldr	r2, [pc, #312]	; (1ef8c <smp_public_key_periph+0x164>)
   1ee54:	494e      	ldr	r1, [pc, #312]	; (1ef90 <smp_public_key_periph+0x168>)
   1ee56:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1ee5a:	9000      	str	r0, [sp, #0]
   1ee5c:	2202      	movs	r2, #2
   1ee5e:	f010 f828 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ee62:	2008      	movs	r0, #8
   1ee64:	e034      	b.n	1eed0 <smp_public_key_periph+0xa8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1ee66:	210c      	movs	r1, #12
   1ee68:	4620      	mov	r0, r4
   1ee6a:	f010 f841 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1ee6e:	4607      	mov	r7, r0
   1ee70:	2800      	cmp	r0, #0
   1ee72:	d0f6      	beq.n	1ee62 <smp_public_key_periph+0x3a>
   1ee74:	2140      	movs	r1, #64	; 0x40
   1ee76:	300c      	adds	r0, #12
   1ee78:	f010 fbd5 	bl	2f626 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1ee7c:	4b42      	ldr	r3, [pc, #264]	; (1ef88 <smp_public_key_periph+0x160>)
   1ee7e:	4602      	mov	r2, r0
   1ee80:	681b      	ldr	r3, [r3, #0]
   1ee82:	4601      	mov	r1, r0
   1ee84:	f103 0020 	add.w	r0, r3, #32
   1ee88:	f853 cb04 	ldr.w	ip, [r3], #4
   1ee8c:	4283      	cmp	r3, r0
   1ee8e:	f841 cb04 	str.w	ip, [r1], #4
   1ee92:	d1f9      	bne.n	1ee88 <smp_public_key_periph+0x60>
   1ee94:	3220      	adds	r2, #32
   1ee96:	f103 0120 	add.w	r1, r3, #32
   1ee9a:	f853 0b04 	ldr.w	r0, [r3], #4
   1ee9e:	428b      	cmp	r3, r1
   1eea0:	f842 0b04 	str.w	r0, [r2], #4
   1eea4:	d1f9      	bne.n	1ee9a <smp_public_key_periph+0x72>
	smp_send(smp, req_buf, NULL, NULL);
   1eea6:	2200      	movs	r2, #0
   1eea8:	4639      	mov	r1, r7
   1eeaa:	4620      	mov	r0, r4
   1eeac:	f00f ffe4 	bl	2ee78 <smp_send.constprop.0>
	switch (smp->method) {
   1eeb0:	7a23      	ldrb	r3, [r4, #8]
   1eeb2:	2b05      	cmp	r3, #5
   1eeb4:	d85a      	bhi.n	1ef6c <smp_public_key_periph+0x144>
   1eeb6:	e8df f003 	tbb	[pc, r3]
   1eeba:	3903      	.short	0x3903
   1eebc:	5659030d 	.word	0x5659030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1eec0:	2104      	movs	r1, #4
   1eec2:	4620      	mov	r0, r4
   1eec4:	f010 f804 	bl	2eed0 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1eec8:	f7ff ff60 	bl	1ed8c <smp_send_pairing_confirm>
		if (err) {
   1eecc:	2800      	cmp	r0, #0
   1eece:	d03c      	beq.n	1ef4a <smp_public_key_periph+0x122>
}
   1eed0:	b005      	add	sp, #20
   1eed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eed4:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1eed6:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eeda:	f7ff fe09 	bl	1eaf0 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1eede:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eee0:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1eee2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1eee6:	f7fc fdc5 	bl	1ba74 <bt_rand>
   1eeea:	2800      	cmp	r0, #0
   1eeec:	d1b9      	bne.n	1ee62 <smp_public_key_periph+0x3a>
		smp->passkey %= 1000000;
   1eeee:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1eef2:	4a28      	ldr	r2, [pc, #160]	; (1ef94 <smp_public_key_periph+0x16c>)
	smp->passkey_round = 0U;
   1eef4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   1eef8:	fbb3 f1f2 	udiv	r1, r3, r2
   1eefc:	fb02 3311 	mls	r3, r2, r1, r3
   1ef00:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1ef04:	b156      	cbz	r6, 1ef1c <smp_public_key_periph+0xf4>
   1ef06:	6833      	ldr	r3, [r6, #0]
   1ef08:	b143      	cbz	r3, 1ef1c <smp_public_key_periph+0xf4>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ef0a:	210b      	movs	r1, #11
   1ef0c:	4628      	mov	r0, r5
   1ef0e:	f00f ffdf 	bl	2eed0 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1ef12:	4638      	mov	r0, r7
   1ef14:	6833      	ldr	r3, [r6, #0]
   1ef16:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1ef1a:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ef1c:	2103      	movs	r1, #3
   1ef1e:	4620      	mov	r0, r4
   1ef20:	f00f ffd6 	bl	2eed0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ef24:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ef26:	f00f ffd3 	bl	2eed0 <atomic_set_bit>
		break;
   1ef2a:	e00e      	b.n	1ef4a <smp_public_key_periph+0x122>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1ef2c:	4620      	mov	r0, r4
   1ef2e:	2103      	movs	r1, #3
   1ef30:	f00f ffce 	bl	2eed0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1ef34:	210e      	movs	r1, #14
   1ef36:	f00f ffcb 	bl	2eed0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ef3a:	4628      	mov	r0, r5
   1ef3c:	210a      	movs	r1, #10
   1ef3e:	f00f ffc7 	bl	2eed0 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1ef42:	6873      	ldr	r3, [r6, #4]
   1ef44:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ef48:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1ef4a:	4628      	mov	r0, r5
   1ef4c:	2107      	movs	r1, #7
   1ef4e:	f00f ffbf 	bl	2eed0 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1ef52:	2008      	movs	r0, #8
   1ef54:	f7ff fdbe 	bl	1ead4 <smp_find>
   1ef58:	b9a0      	cbnz	r0, 1ef84 <smp_public_key_periph+0x15c>
		return smp_dhkey_generate(smp);
   1ef5a:	4620      	mov	r0, r4
}
   1ef5c:	b005      	add	sp, #20
   1ef5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1ef62:	f7ff be79 	b.w	1ec58 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1ef66:	2104      	movs	r1, #4
   1ef68:	4620      	mov	r0, r4
   1ef6a:	e7dc      	b.n	1ef26 <smp_public_key_periph+0xfe>
	switch (smp->method) {
   1ef6c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ef6e:	4b0a      	ldr	r3, [pc, #40]	; (1ef98 <smp_public_key_periph+0x170>)
   1ef70:	2201      	movs	r2, #1
   1ef72:	9302      	str	r3, [sp, #8]
   1ef74:	2300      	movs	r3, #0
   1ef76:	4906      	ldr	r1, [pc, #24]	; (1ef90 <smp_public_key_periph+0x168>)
   1ef78:	4618      	mov	r0, r3
   1ef7a:	e9cd 3300 	strd	r3, r3, [sp]
   1ef7e:	f00f ff98 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1ef82:	e76e      	b.n	1ee62 <smp_public_key_periph+0x3a>
	return 0;
   1ef84:	2000      	movs	r0, #0
   1ef86:	e7a3      	b.n	1eed0 <smp_public_key_periph+0xa8>
   1ef88:	20030b54 	.word	0x20030b54
   1ef8c:	00037b89 	.word	0x00037b89
   1ef90:	00033274 	.word	0x00033274
   1ef94:	000f4240 	.word	0x000f4240
   1ef98:	00037b6d 	.word	0x00037b6d

0001ef9c <smp_public_key>:
{
   1ef9c:	b530      	push	{r4, r5, lr}
   1ef9e:	4604      	mov	r4, r0
   1efa0:	460d      	mov	r5, r1
   1efa2:	b085      	sub	sp, #20
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1efa4:	f7ff fda4 	bl	1eaf0 <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1efa8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1efac:	4602      	mov	r2, r0
   1efae:	68eb      	ldr	r3, [r5, #12]
   1efb0:	f103 0120 	add.w	r1, r3, #32
   1efb4:	f853 5b04 	ldr.w	r5, [r3], #4
   1efb8:	428b      	cmp	r3, r1
   1efba:	f842 5b04 	str.w	r5, [r2], #4
   1efbe:	d1f9      	bne.n	1efb4 <smp_public_key+0x18>
   1efc0:	f104 0277 	add.w	r2, r4, #119	; 0x77
   1efc4:	f103 0120 	add.w	r1, r3, #32
   1efc8:	f853 5b04 	ldr.w	r5, [r3], #4
   1efcc:	428b      	cmp	r3, r1
   1efce:	f842 5b04 	str.w	r5, [r2], #4
   1efd2:	d1f9      	bne.n	1efc8 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1efd4:	f7fc fd6c 	bl	1bab0 <bt_pub_key_is_debug>
   1efd8:	b940      	cbnz	r0, 1efec <smp_public_key+0x50>
	if (!sc_public_key) {
   1efda:	4b1c      	ldr	r3, [pc, #112]	; (1f04c <smp_public_key+0xb0>)
   1efdc:	681d      	ldr	r5, [r3, #0]
   1efde:	bb75      	cbnz	r5, 1f03e <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1efe0:	1d20      	adds	r0, r4, #4
   1efe2:	2106      	movs	r1, #6
   1efe4:	f00f ff74 	bl	2eed0 <atomic_set_bit>
	return 0;
   1efe8:	4628      	mov	r0, r5
		return 0;
   1efea:	e026      	b.n	1f03a <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   1efec:	4b18      	ldr	r3, [pc, #96]	; (1f050 <smp_public_key+0xb4>)
   1efee:	2203      	movs	r2, #3
   1eff0:	9302      	str	r3, [sp, #8]
   1eff2:	2300      	movs	r3, #0
   1eff4:	4917      	ldr	r1, [pc, #92]	; (1f054 <smp_public_key+0xb8>)
   1eff6:	4618      	mov	r0, r3
   1eff8:	e9cd 3300 	strd	r3, r3, [sp]
   1effc:	f00f ff59 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1f000:	210e      	movs	r1, #14
   1f002:	1d20      	adds	r0, r4, #4
   1f004:	f00f ff64 	bl	2eed0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1f008:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1f00c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1f010:	b933      	cbnz	r3, 1f020 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f012:	7a28      	ldrb	r0, [r5, #8]
   1f014:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1f018:	f001 f9a4 	bl	20364 <bt_keys_get_addr>
   1f01c:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   1f020:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1f024:	2b00      	cmp	r3, #0
   1f026:	d0d8      	beq.n	1efda <smp_public_key+0x3e>
   1f028:	89da      	ldrh	r2, [r3, #14]
   1f02a:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1f02e:	2a00      	cmp	r2, #0
   1f030:	d0d3      	beq.n	1efda <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1f032:	7b5b      	ldrb	r3, [r3, #13]
   1f034:	079b      	lsls	r3, r3, #30
   1f036:	d4d0      	bmi.n	1efda <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1f038:	2003      	movs	r0, #3
}
   1f03a:	b005      	add	sp, #20
   1f03c:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   1f03e:	4620      	mov	r0, r4
}
   1f040:	b005      	add	sp, #20
   1f042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   1f046:	f7ff beef 	b.w	1ee28 <smp_public_key_periph>
   1f04a:	bf00      	nop
   1f04c:	20030b54 	.word	0x20030b54
   1f050:	00037ba4 	.word	0x00037ba4
   1f054:	00033274 	.word	0x00033274

0001f058 <smp_pairing_req>:
{
   1f058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f05c:	460d      	mov	r5, r1
   1f05e:	b086      	sub	sp, #24
   1f060:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f062:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f066:	f7ff fd43 	bl	1eaf0 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1f06a:	f8d5 800c 	ldr.w	r8, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f06e:	4607      	mov	r7, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1f070:	f898 3003 	ldrb.w	r3, [r8, #3]
   1f074:	3b07      	subs	r3, #7
   1f076:	2b09      	cmp	r3, #9
   1f078:	d903      	bls.n	1f082 <smp_pairing_req+0x2a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1f07a:	2006      	movs	r0, #6
}
   1f07c:	b006      	add	sp, #24
   1f07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   1f082:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1f086:	b15b      	cbz	r3, 1f0a0 <smp_pairing_req+0x48>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1f088:	1d25      	adds	r5, r4, #4
   1f08a:	210f      	movs	r1, #15
   1f08c:	4628      	mov	r0, r5
   1f08e:	f00f feb8 	bl	2ee02 <atomic_test_bit>
   1f092:	b980      	cbnz	r0, 1f0b6 <smp_pairing_req+0x5e>
		int ret = smp_init(smp);
   1f094:	4620      	mov	r0, r4
   1f096:	f7ff fdc3 	bl	1ec20 <smp_init>
		if (ret) {
   1f09a:	b160      	cbz	r0, 1f0b6 <smp_pairing_req+0x5e>
			return ret;
   1f09c:	b2c0      	uxtb	r0, r0
   1f09e:	e7ed      	b.n	1f07c <smp_pairing_req+0x24>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f0a0:	7a30      	ldrb	r0, [r6, #8]
   1f0a2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1f0a6:	f001 f95d 	bl	20364 <bt_keys_get_addr>
   1f0aa:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1f0ae:	2800      	cmp	r0, #0
   1f0b0:	d1ea      	bne.n	1f088 <smp_pairing_req+0x30>
			return BT_SMP_ERR_UNSPECIFIED;
   1f0b2:	2008      	movs	r0, #8
   1f0b4:	e7e2      	b.n	1f07c <smp_pairing_req+0x24>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1f0b6:	2301      	movs	r3, #1
   1f0b8:	7263      	strb	r3, [r4, #9]
   1f0ba:	f8d8 3000 	ldr.w	r3, [r8]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1f0be:	4620      	mov	r0, r4
   1f0c0:	f8c4 300a 	str.w	r3, [r4, #10]
   1f0c4:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1f0c8:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1f0ca:	2302      	movs	r3, #2
   1f0cc:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1f0ce:	f898 1002 	ldrb.w	r1, [r8, #2]
   1f0d2:	f7ff fd49 	bl	1eb68 <get_auth>
   1f0d6:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1f0d8:	4620      	mov	r0, r4
   1f0da:	f7ff fd1f 	bl	1eb1c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1f0de:	4ba9      	ldr	r3, [pc, #676]	; (1f384 <smp_pairing_req+0x32c>)
	rsp->io_capability = get_io_capa(smp);
   1f0e0:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1f0e2:	781b      	ldrb	r3, [r3, #0]
   1f0e4:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1f0e6:	2310      	movs	r3, #16
   1f0e8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1f0ea:	f898 3004 	ldrb.w	r3, [r8, #4]
   1f0ee:	f003 0303 	and.w	r3, r3, #3
   1f0f2:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1f0f4:	f898 3005 	ldrb.w	r3, [r8, #5]
   1f0f8:	f003 0301 	and.w	r3, r3, #1
   1f0fc:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1f0fe:	7ce3      	ldrb	r3, [r4, #19]
   1f100:	071b      	lsls	r3, r3, #28
   1f102:	d50d      	bpl.n	1f120 <smp_pairing_req+0xc8>
   1f104:	f898 3002 	ldrb.w	r3, [r8, #2]
   1f108:	0718      	lsls	r0, r3, #28
   1f10a:	d509      	bpl.n	1f120 <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1f10c:	2105      	movs	r1, #5
   1f10e:	4628      	mov	r0, r5
   1f110:	f00f fede 	bl	2eed0 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1f114:	7d63      	ldrb	r3, [r4, #21]
   1f116:	f003 0302 	and.w	r3, r3, #2
   1f11a:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1f11c:	2300      	movs	r3, #0
   1f11e:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1f120:	7ce3      	ldrb	r3, [r4, #19]
   1f122:	0699      	lsls	r1, r3, #26
   1f124:	d507      	bpl.n	1f136 <smp_pairing_req+0xde>
   1f126:	f898 3002 	ldrb.w	r3, [r8, #2]
   1f12a:	069a      	lsls	r2, r3, #26
   1f12c:	d503      	bpl.n	1f136 <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1f12e:	2114      	movs	r1, #20
   1f130:	4628      	mov	r0, r5
   1f132:	f00f fecd 	bl	2eed0 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1f136:	7da3      	ldrb	r3, [r4, #22]
   1f138:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1f13c:	7d63      	ldrb	r3, [r4, #21]
   1f13e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1f142:	7ce3      	ldrb	r3, [r4, #19]
   1f144:	07db      	lsls	r3, r3, #31
   1f146:	d507      	bpl.n	1f158 <smp_pairing_req+0x100>
   1f148:	f898 3002 	ldrb.w	r3, [r8, #2]
   1f14c:	07d8      	lsls	r0, r3, #31
   1f14e:	d503      	bpl.n	1f158 <smp_pairing_req+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1f150:	210d      	movs	r1, #13
   1f152:	4628      	mov	r0, r5
   1f154:	f00f febc 	bl	2eed0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1f158:	2103      	movs	r1, #3
   1f15a:	4628      	mov	r0, r5
   1f15c:	f00f feb8 	bl	2eed0 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f160:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1f162:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f166:	f00f fe4c 	bl	2ee02 <atomic_test_bit>
   1f16a:	bb40      	cbnz	r0, 1f1be <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1f16c:	f1b8 0f04 	cmp.w	r8, #4
   1f170:	d845      	bhi.n	1f1fe <smp_pairing_req+0x1a6>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1f172:	7ae3      	ldrb	r3, [r4, #11]
   1f174:	7ca2      	ldrb	r2, [r4, #18]
   1f176:	4013      	ands	r3, r2
   1f178:	07d9      	lsls	r1, r3, #31
   1f17a:	d43e      	bmi.n	1f1fa <smp_pairing_req+0x1a2>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1f17c:	7b21      	ldrb	r1, [r4, #12]
   1f17e:	7ce3      	ldrb	r3, [r4, #19]
   1f180:	4319      	orrs	r1, r3
   1f182:	f011 0104 	ands.w	r1, r1, #4
   1f186:	d011      	beq.n	1f1ac <smp_pairing_req+0x154>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1f188:	4620      	mov	r0, r4
   1f18a:	f7ff fcc7 	bl	1eb1c <get_io_capa>
   1f18e:	4b7e      	ldr	r3, [pc, #504]	; (1f388 <smp_pairing_req+0x330>)
   1f190:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1f194:	4498      	add	r8, r3
   1f196:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1f19a:	2904      	cmp	r1, #4
   1f19c:	d106      	bne.n	1f1ac <smp_pairing_req+0x154>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1f19e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f1a2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1f1a4:	2b00      	cmp	r3, #0
   1f1a6:	bf14      	ite	ne
   1f1a8:	2101      	movne	r1, #1
   1f1aa:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1f1ac:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1f1ae:	4620      	mov	r0, r4
   1f1b0:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1f1b4:	f00f fe2b 	bl	2ee0e <update_keys_check>
   1f1b8:	bb18      	cbnz	r0, 1f202 <smp_pairing_req+0x1aa>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1f1ba:	2003      	movs	r0, #3
   1f1bc:	e75e      	b.n	1f07c <smp_pairing_req+0x24>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1f1be:	7b23      	ldrb	r3, [r4, #12]
   1f1c0:	7ce0      	ldrb	r0, [r4, #19]
   1f1c2:	ea03 0200 	and.w	r2, r3, r0
   1f1c6:	0712      	lsls	r2, r2, #28
   1f1c8:	d506      	bpl.n	1f1d8 <smp_pairing_req+0x180>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1f1ca:	7ae2      	ldrb	r2, [r4, #11]
   1f1cc:	f894 c012 	ldrb.w	ip, [r4, #18]
   1f1d0:	ea42 020c 	orr.w	r2, r2, ip
   1f1d4:	07d2      	lsls	r2, r2, #31
   1f1d6:	d4e9      	bmi.n	1f1ac <smp_pairing_req+0x154>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1f1d8:	f1b8 0f04 	cmp.w	r8, #4
   1f1dc:	d80f      	bhi.n	1f1fe <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1f1de:	ea43 0100 	orr.w	r1, r3, r0
   1f1e2:	f011 0104 	ands.w	r1, r1, #4
   1f1e6:	d0e1      	beq.n	1f1ac <smp_pairing_req+0x154>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1f1e8:	4620      	mov	r0, r4
   1f1ea:	f7ff fc97 	bl	1eb1c <get_io_capa>
   1f1ee:	4b67      	ldr	r3, [pc, #412]	; (1f38c <smp_pairing_req+0x334>)
   1f1f0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1f1f4:	4443      	add	r3, r8
   1f1f6:	5c19      	ldrb	r1, [r3, r0]
   1f1f8:	e7d8      	b.n	1f1ac <smp_pairing_req+0x154>
		return LEGACY_OOB;
   1f1fa:	2106      	movs	r1, #6
   1f1fc:	e7d6      	b.n	1f1ac <smp_pairing_req+0x154>
		return JUST_WORKS;
   1f1fe:	2100      	movs	r1, #0
   1f200:	e7d4      	b.n	1f1ac <smp_pairing_req+0x154>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1f202:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1f206:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1f208:	2b03      	cmp	r3, #3
   1f20a:	d03c      	beq.n	1f286 <smp_pairing_req+0x22e>
   1f20c:	d82a      	bhi.n	1f264 <smp_pairing_req+0x20c>
   1f20e:	3b01      	subs	r3, #1
   1f210:	2b01      	cmp	r3, #1
   1f212:	f63f af4e 	bhi.w	1f0b2 <smp_pairing_req+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f216:	2105      	movs	r1, #5
   1f218:	4628      	mov	r0, r5
   1f21a:	f00f fdf2 	bl	2ee02 <atomic_test_bit>
   1f21e:	2800      	cmp	r0, #0
   1f220:	f040 80be 	bne.w	1f3a0 <smp_pairing_req+0x348>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f224:	4620      	mov	r0, r4
   1f226:	f7ff fc63 	bl	1eaf0 <latch_auth_cb>
   1f22a:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f22c:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1f22e:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f232:	f7ff fc5d 	bl	1eaf0 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f236:	f108 0188 	add.w	r1, r8, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f23a:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1f23c:	f898 0008 	ldrb.w	r0, [r8, #8]
   1f240:	f001 f930 	bl	204a4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f244:	7a23      	ldrb	r3, [r4, #8]
   1f246:	b310      	cbz	r0, 1f28e <smp_pairing_req+0x236>
   1f248:	7b42      	ldrb	r2, [r0, #13]
   1f24a:	07d2      	lsls	r2, r2, #31
   1f24c:	d51f      	bpl.n	1f28e <smp_pairing_req+0x236>
   1f24e:	b9f3      	cbnz	r3, 1f28e <smp_pairing_req+0x236>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1f250:	4a4f      	ldr	r2, [pc, #316]	; (1f390 <smp_pairing_req+0x338>)
   1f252:	4618      	mov	r0, r3
   1f254:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1f258:	494e      	ldr	r1, [pc, #312]	; (1f394 <smp_pairing_req+0x33c>)
   1f25a:	2201      	movs	r2, #1
   1f25c:	9300      	str	r3, [sp, #0]
   1f25e:	f00f fe28 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1f262:	e726      	b.n	1f0b2 <smp_pairing_req+0x5a>
	switch (sec) {
   1f264:	2b04      	cmp	r3, #4
   1f266:	f47f af24 	bne.w	1f0b2 <smp_pairing_req+0x5a>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f26a:	7d23      	ldrb	r3, [r4, #20]
   1f26c:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1f26e:	4293      	cmp	r3, r2
   1f270:	bf28      	it	cs
   1f272:	4613      	movcs	r3, r2
   1f274:	2b10      	cmp	r3, #16
   1f276:	f47f af00 	bne.w	1f07a <smp_pairing_req+0x22>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f27a:	2105      	movs	r1, #5
   1f27c:	4628      	mov	r0, r5
   1f27e:	f00f fdc0 	bl	2ee02 <atomic_test_bit>
   1f282:	2800      	cmp	r0, #0
   1f284:	d099      	beq.n	1f1ba <smp_pairing_req+0x162>
		if (smp->method == JUST_WORKS) {
   1f286:	7a23      	ldrb	r3, [r4, #8]
   1f288:	2b00      	cmp	r3, #0
   1f28a:	d1c4      	bne.n	1f216 <smp_pairing_req+0x1be>
   1f28c:	e795      	b.n	1f1ba <smp_pairing_req+0x162>
	switch (smp->method) {
   1f28e:	2b06      	cmp	r3, #6
   1f290:	d85d      	bhi.n	1f34e <smp_pairing_req+0x2f6>
   1f292:	e8df f003 	tbb	[pc, r3]
   1f296:	5418      	.short	0x5418
   1f298:	5c5c5c2d 	.word	0x5c5c5c2d
   1f29c:	04          	.byte	0x04
   1f29d:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f29e:	2e00      	cmp	r6, #0
   1f2a0:	d061      	beq.n	1f366 <smp_pairing_req+0x30e>
   1f2a2:	68f3      	ldr	r3, [r6, #12]
   1f2a4:	2b00      	cmp	r3, #0
   1f2a6:	d05e      	beq.n	1f366 <smp_pairing_req+0x30e>
			struct bt_conn_oob_info info = {
   1f2a8:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f2aa:	210a      	movs	r1, #10
   1f2ac:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1f2ae:	f8ad 3014 	strh.w	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f2b2:	f00f fe0d 	bl	2eed0 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f2b6:	68f3      	ldr	r3, [r6, #12]
   1f2b8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f2bc:	a905      	add	r1, sp, #20
   1f2be:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f2c0:	7a23      	ldrb	r3, [r4, #8]
   1f2c2:	2b00      	cmp	r3, #0
   1f2c4:	d151      	bne.n	1f36a <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f2c6:	210f      	movs	r1, #15
   1f2c8:	4628      	mov	r0, r5
   1f2ca:	f00f fd9a 	bl	2ee02 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f2ce:	2800      	cmp	r0, #0
   1f2d0:	d14b      	bne.n	1f36a <smp_pairing_req+0x312>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f2d2:	2f00      	cmp	r7, #0
   1f2d4:	d049      	beq.n	1f36a <smp_pairing_req+0x312>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f2d6:	697b      	ldr	r3, [r7, #20]
   1f2d8:	2b00      	cmp	r3, #0
   1f2da:	d046      	beq.n	1f36a <smp_pairing_req+0x312>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f2dc:	4628      	mov	r0, r5
   1f2de:	210a      	movs	r1, #10
   1f2e0:	f00f fdf6 	bl	2eed0 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1f2e4:	697b      	ldr	r3, [r7, #20]
   1f2e6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1f2ea:	4798      	blx	r3
		return 0;
   1f2ec:	2000      	movs	r0, #0
   1f2ee:	e6c5      	b.n	1f07c <smp_pairing_req+0x24>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1f2f0:	2104      	movs	r1, #4
   1f2f2:	a805      	add	r0, sp, #20
   1f2f4:	f7fc fbbe 	bl	1ba74 <bt_rand>
   1f2f8:	2800      	cmp	r0, #0
   1f2fa:	f47f aeda 	bne.w	1f0b2 <smp_pairing_req+0x5a>
			passkey %= 1000000;
   1f2fe:	9b05      	ldr	r3, [sp, #20]
   1f300:	4a25      	ldr	r2, [pc, #148]	; (1f398 <smp_pairing_req+0x340>)
   1f302:	fbb3 f1f2 	udiv	r1, r3, r2
   1f306:	fb02 3311 	mls	r3, r2, r1, r3
   1f30a:	9305      	str	r3, [sp, #20]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1f30c:	b14e      	cbz	r6, 1f322 <smp_pairing_req+0x2ca>
   1f30e:	6833      	ldr	r3, [r6, #0]
   1f310:	b13b      	cbz	r3, 1f322 <smp_pairing_req+0x2ca>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f312:	210b      	movs	r1, #11
   1f314:	4628      	mov	r0, r5
   1f316:	f00f fddb 	bl	2eed0 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1f31a:	4640      	mov	r0, r8
   1f31c:	6833      	ldr	r3, [r6, #0]
   1f31e:	9905      	ldr	r1, [sp, #20]
   1f320:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1f322:	9b05      	ldr	r3, [sp, #20]
	dst[1] = val >> 8;
   1f324:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   1f328:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   1f32c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1f32e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1f332:	0a1b      	lsrs	r3, r3, #8
   1f334:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1f338:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1f33c:	e7c0      	b.n	1f2c0 <smp_pairing_req+0x268>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f33e:	4628      	mov	r0, r5
   1f340:	210a      	movs	r1, #10
   1f342:	f00f fdc5 	bl	2eed0 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1f346:	4640      	mov	r0, r8
   1f348:	6873      	ldr	r3, [r6, #4]
   1f34a:	4798      	blx	r3
	if (ret) {
   1f34c:	e7b8      	b.n	1f2c0 <smp_pairing_req+0x268>
	switch (smp->method) {
   1f34e:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f350:	4b12      	ldr	r3, [pc, #72]	; (1f39c <smp_pairing_req+0x344>)
   1f352:	2201      	movs	r2, #1
   1f354:	9302      	str	r3, [sp, #8]
   1f356:	2300      	movs	r3, #0
   1f358:	490e      	ldr	r1, [pc, #56]	; (1f394 <smp_pairing_req+0x33c>)
   1f35a:	4618      	mov	r0, r3
   1f35c:	e9cd 3300 	strd	r3, r3, [sp]
   1f360:	f00f fda7 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
	if (ret) {
   1f364:	e6a5      	b.n	1f0b2 <smp_pairing_req+0x5a>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f366:	2002      	movs	r0, #2
   1f368:	e688      	b.n	1f07c <smp_pairing_req+0x24>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1f36a:	2103      	movs	r1, #3
   1f36c:	4620      	mov	r0, r4
   1f36e:	f00f fdaf 	bl	2eed0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f372:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f374:	f00f fdac 	bl	2eed0 <atomic_set_bit>
}
   1f378:	b006      	add	sp, #24
   1f37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
   1f37e:	f00f bdd6 	b.w	2ef2e <send_pairing_rsp>
   1f382:	bf00      	nop
   1f384:	20031b90 	.word	0x20031b90
   1f388:	00037ec5 	.word	0x00037ec5
   1f38c:	00037eac 	.word	0x00037eac
   1f390:	00037bc5 	.word	0x00037bc5
   1f394:	00033274 	.word	0x00033274
   1f398:	000f4240 	.word	0x000f4240
   1f39c:	00037b6d 	.word	0x00037b6d
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1f3a0:	7a23      	ldrb	r3, [r4, #8]
   1f3a2:	b973      	cbnz	r3, 1f3c2 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f3a4:	210f      	movs	r1, #15
   1f3a6:	4628      	mov	r0, r5
   1f3a8:	f00f fd2b 	bl	2ee02 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1f3ac:	b948      	cbnz	r0, 1f3c2 <smp_pairing_req+0x36a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1f3ae:	b147      	cbz	r7, 1f3c2 <smp_pairing_req+0x36a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1f3b0:	697b      	ldr	r3, [r7, #20]
   1f3b2:	b133      	cbz	r3, 1f3c2 <smp_pairing_req+0x36a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f3b4:	4628      	mov	r0, r5
   1f3b6:	210a      	movs	r1, #10
   1f3b8:	f00f fd8a 	bl	2eed0 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1f3bc:	4630      	mov	r0, r6
   1f3be:	697b      	ldr	r3, [r7, #20]
   1f3c0:	e793      	b.n	1f2ea <smp_pairing_req+0x292>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1f3c2:	210c      	movs	r1, #12
   1f3c4:	4620      	mov	r0, r4
   1f3c6:	e7d5      	b.n	1f374 <smp_pairing_req+0x31c>

0001f3c8 <compute_and_check_and_send_periph_dhcheck>:
{
   1f3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f3cc:	4604      	mov	r4, r0
   1f3ce:	b090      	sub	sp, #64	; 0x40
	(void)memset(r, 0, sizeof(r));
   1f3d0:	ad0c      	add	r5, sp, #48	; 0x30
   1f3d2:	2210      	movs	r2, #16
   1f3d4:	2100      	movs	r1, #0
   1f3d6:	4628      	mov	r0, r5
   1f3d8:	f012 fb5d 	bl	31a96 <memset>
	switch (smp->method) {
   1f3dc:	7a23      	ldrb	r3, [r4, #8]
   1f3de:	2b05      	cmp	r3, #5
   1f3e0:	d83a      	bhi.n	1f458 <compute_and_check_and_send_periph_dhcheck+0x90>
   1f3e2:	e8df f003 	tbb	[pc, r3]
   1f3e6:	0306      	.short	0x0306
   1f3e8:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1f3ec:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1f3f0:	930c      	str	r3, [sp, #48]	; 0x30
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f3f2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f3f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1f3fa:	f104 07c7 	add.w	r7, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f3fe:	e9cd 7201 	strd	r7, r2, [sp, #4]
   1f402:	f104 0837 	add.w	r8, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1f406:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1f40a:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1f40e:	9200      	str	r2, [sp, #0]
   1f410:	4641      	mov	r1, r8
   1f412:	464a      	mov	r2, r9
   1f414:	338f      	adds	r3, #143	; 0x8f
   1f416:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1f41a:	f001 f853 	bl	204c4 <bt_crypto_f5>
   1f41e:	4682      	mov	sl, r0
   1f420:	b348      	cbz	r0, 1f476 <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1f422:	4b4e      	ldr	r3, [pc, #312]	; (1f55c <compute_and_check_and_send_periph_dhcheck+0x194>)
   1f424:	9302      	str	r3, [sp, #8]
   1f426:	2300      	movs	r3, #0
   1f428:	e9cd 3300 	strd	r3, r3, [sp]
   1f42c:	2201      	movs	r2, #1
   1f42e:	4618      	mov	r0, r3
   1f430:	494b      	ldr	r1, [pc, #300]	; (1f560 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1f432:	f00f fd3e 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f436:	e01a      	b.n	1f46e <compute_and_check_and_send_periph_dhcheck+0xa6>
		if (smp->oobd_remote) {
   1f438:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   1f43c:	2b00      	cmp	r3, #0
   1f43e:	d0d8      	beq.n	1f3f2 <compute_and_check_and_send_periph_dhcheck+0x2a>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1f440:	462e      	mov	r6, r5
   1f442:	f103 0710 	add.w	r7, r3, #16
   1f446:	4632      	mov	r2, r6
   1f448:	6818      	ldr	r0, [r3, #0]
   1f44a:	6859      	ldr	r1, [r3, #4]
   1f44c:	3308      	adds	r3, #8
   1f44e:	c203      	stmia	r2!, {r0, r1}
   1f450:	42bb      	cmp	r3, r7
   1f452:	4616      	mov	r6, r2
   1f454:	d1f7      	bne.n	1f446 <compute_and_check_and_send_periph_dhcheck+0x7e>
   1f456:	e7cc      	b.n	1f3f2 <compute_and_check_and_send_periph_dhcheck+0x2a>
	switch (smp->method) {
   1f458:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f45a:	4b42      	ldr	r3, [pc, #264]	; (1f564 <compute_and_check_and_send_periph_dhcheck+0x19c>)
   1f45c:	2201      	movs	r2, #1
   1f45e:	9302      	str	r3, [sp, #8]
   1f460:	2300      	movs	r3, #0
   1f462:	493f      	ldr	r1, [pc, #252]	; (1f560 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1f464:	4618      	mov	r0, r3
   1f466:	e9cd 3300 	strd	r3, r3, [sp]
   1f46a:	f00f fd22 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f46e:	2008      	movs	r0, #8
}
   1f470:	b010      	add	sp, #64	; 0x40
   1f472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f476:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f47a:	ae08      	add	r6, sp, #32
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1f47c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1f480:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1f482:	9301      	str	r3, [sp, #4]
   1f484:	f104 0311 	add.w	r3, r4, #17
   1f488:	9202      	str	r2, [sp, #8]
   1f48a:	9300      	str	r3, [sp, #0]
   1f48c:	4642      	mov	r2, r8
   1f48e:	462b      	mov	r3, r5
   1f490:	4649      	mov	r1, r9
   1f492:	4638      	mov	r0, r7
   1f494:	9603      	str	r6, [sp, #12]
   1f496:	f010 f815 	bl	2f4c4 <bt_crypto_f6>
   1f49a:	b130      	cbz	r0, 1f4aa <compute_and_check_and_send_periph_dhcheck+0xe2>
		LOG_ERR("Calculate local DHKey check failed");
   1f49c:	4b32      	ldr	r3, [pc, #200]	; (1f568 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   1f49e:	f8cd a000 	str.w	sl, [sp]
   1f4a2:	e9cd a301 	strd	sl, r3, [sp, #4]
   1f4a6:	4653      	mov	r3, sl
   1f4a8:	e7c0      	b.n	1f42c <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   1f4aa:	7a23      	ldrb	r3, [r4, #8]
   1f4ac:	2b05      	cmp	r3, #5
   1f4ae:	d10e      	bne.n	1f4ce <compute_and_check_and_send_periph_dhcheck+0x106>
		if (smp->oobd_local) {
   1f4b0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1f4b4:	b311      	cbz	r1, 1f4fc <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1f4b6:	460b      	mov	r3, r1
   1f4b8:	46ac      	mov	ip, r5
   1f4ba:	f101 0e10 	add.w	lr, r1, #16
   1f4be:	4662      	mov	r2, ip
   1f4c0:	6818      	ldr	r0, [r3, #0]
   1f4c2:	6859      	ldr	r1, [r3, #4]
   1f4c4:	3308      	adds	r3, #8
   1f4c6:	c203      	stmia	r2!, {r0, r1}
   1f4c8:	4573      	cmp	r3, lr
   1f4ca:	4694      	mov	ip, r2
   1f4cc:	d1f7      	bne.n	1f4be <compute_and_check_and_send_periph_dhcheck+0xf6>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f4ce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f4d2:	f10d 0a10 	add.w	sl, sp, #16
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1f4d6:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1f4da:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1f4dc:	9301      	str	r3, [sp, #4]
   1f4de:	f104 030a 	add.w	r3, r4, #10
   1f4e2:	9202      	str	r2, [sp, #8]
   1f4e4:	9300      	str	r3, [sp, #0]
   1f4e6:	464a      	mov	r2, r9
   1f4e8:	462b      	mov	r3, r5
   1f4ea:	4641      	mov	r1, r8
   1f4ec:	4638      	mov	r0, r7
   1f4ee:	f8cd a00c 	str.w	sl, [sp, #12]
   1f4f2:	f00f ffe7 	bl	2f4c4 <bt_crypto_f6>
   1f4f6:	b130      	cbz	r0, 1f506 <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   1f4f8:	4b1c      	ldr	r3, [pc, #112]	; (1f56c <compute_and_check_and_send_periph_dhcheck+0x1a4>)
   1f4fa:	e793      	b.n	1f424 <compute_and_check_and_send_periph_dhcheck+0x5c>
			memset(r, 0, sizeof(r));
   1f4fc:	2210      	movs	r2, #16
   1f4fe:	4628      	mov	r0, r5
   1f500:	f012 fac9 	bl	31a96 <memset>
   1f504:	e7e3      	b.n	1f4ce <compute_and_check_and_send_periph_dhcheck+0x106>
	if (memcmp(smp->e, re, 16)) {
   1f506:	2210      	movs	r2, #16
   1f508:	4651      	mov	r1, sl
   1f50a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f50e:	f012 fa78 	bl	31a02 <memcmp>
   1f512:	bb00      	cbnz	r0, 1f556 <compute_and_check_and_send_periph_dhcheck+0x18e>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1f514:	210d      	movs	r1, #13
   1f516:	4620      	mov	r0, r4
   1f518:	f00f fcea 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1f51c:	4607      	mov	r7, r0
   1f51e:	2800      	cmp	r0, #0
   1f520:	d0a5      	beq.n	1f46e <compute_and_check_and_send_periph_dhcheck+0xa6>
   1f522:	2110      	movs	r1, #16
   1f524:	300c      	adds	r0, #12
   1f526:	f010 f87e 	bl	2f626 <net_buf_simple_add>
   1f52a:	4632      	mov	r2, r6
   1f52c:	4603      	mov	r3, r0
   1f52e:	4616      	mov	r6, r2
   1f530:	ce03      	ldmia	r6!, {r0, r1}
   1f532:	42ae      	cmp	r6, r5
   1f534:	6018      	str	r0, [r3, #0]
   1f536:	6059      	str	r1, [r3, #4]
   1f538:	4632      	mov	r2, r6
   1f53a:	f103 0308 	add.w	r3, r3, #8
   1f53e:	d1f6      	bne.n	1f52e <compute_and_check_and_send_periph_dhcheck+0x166>
	smp_send(smp, buf, NULL, NULL);
   1f540:	2200      	movs	r2, #0
   1f542:	4639      	mov	r1, r7
   1f544:	4620      	mov	r0, r4
   1f546:	f00f fc97 	bl	2ee78 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f54a:	1d20      	adds	r0, r4, #4
   1f54c:	2101      	movs	r1, #1
   1f54e:	f00f fcbf 	bl	2eed0 <atomic_set_bit>
	return 0;
   1f552:	2000      	movs	r0, #0
   1f554:	e78c      	b.n	1f470 <compute_and_check_and_send_periph_dhcheck+0xa8>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1f556:	200b      	movs	r0, #11
   1f558:	e78a      	b.n	1f470 <compute_and_check_and_send_periph_dhcheck+0xa8>
   1f55a:	bf00      	nop
   1f55c:	00037bf2 	.word	0x00037bf2
   1f560:	00033274 	.word	0x00033274
   1f564:	00037b6d 	.word	0x00037b6d
   1f568:	00037c07 	.word	0x00037c07
   1f56c:	00037c2a 	.word	0x00037c2a

0001f570 <bt_smp_connected>:
{
   1f570:	b538      	push	{r3, r4, r5, lr}
   1f572:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1f574:	4908      	ldr	r1, [pc, #32]	; (1f598 <bt_smp_connected+0x28>)
   1f576:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1f57a:	308c      	adds	r0, #140	; 0x8c
   1f57c:	f011 fec8 	bl	31310 <k_work_init_delayable>
	smp_reset(smp);
   1f580:	4628      	mov	r0, r5
   1f582:	f00f fd4e 	bl	2f022 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f586:	4b05      	ldr	r3, [pc, #20]	; (1f59c <bt_smp_connected+0x2c>)
   1f588:	34bc      	adds	r4, #188	; 0xbc
   1f58a:	e8d4 2fef 	ldaex	r2, [r4]
   1f58e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   1f592:	2900      	cmp	r1, #0
   1f594:	d1f9      	bne.n	1f58a <bt_smp_connected+0x1a>
}
   1f596:	bd38      	pop	{r3, r4, r5, pc}
   1f598:	000201cd 	.word	0x000201cd
   1f59c:	2000a250 	.word	0x2000a250

0001f5a0 <smp_pairing_confirm>:
{
   1f5a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f5a2:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1f5a4:	68cd      	ldr	r5, [r1, #12]
{
   1f5a6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1f5a8:	210b      	movs	r1, #11
   1f5aa:	4630      	mov	r0, r6
   1f5ac:	f00f fc50 	bl	2ee50 <atomic_clear_bit>
   1f5b0:	462b      	mov	r3, r5
   1f5b2:	f104 0217 	add.w	r2, r4, #23
   1f5b6:	f105 0110 	add.w	r1, r5, #16
   1f5ba:	f853 0b04 	ldr.w	r0, [r3], #4
   1f5be:	428b      	cmp	r3, r1
   1f5c0:	f842 0b04 	str.w	r0, [r2], #4
   1f5c4:	d1f9      	bne.n	1f5ba <smp_pairing_confirm+0x1a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f5c6:	2105      	movs	r1, #5
   1f5c8:	4630      	mov	r0, r6
   1f5ca:	f00f fc1a 	bl	2ee02 <atomic_test_bit>
   1f5ce:	b928      	cbnz	r0, 1f5dc <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   1f5d0:	4620      	mov	r0, r4
}
   1f5d2:	b004      	add	sp, #16
   1f5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1f5d8:	f00f bd99 	b.w	2f10e <legacy_pairing_confirm>
	switch (smp->method) {
   1f5dc:	7a23      	ldrb	r3, [r4, #8]
   1f5de:	2b01      	cmp	r3, #1
   1f5e0:	d00a      	beq.n	1f5f8 <smp_pairing_confirm+0x58>
   1f5e2:	2b02      	cmp	r3, #2
   1f5e4:	d115      	bne.n	1f612 <smp_pairing_confirm+0x72>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1f5e6:	2104      	movs	r1, #4
   1f5e8:	4620      	mov	r0, r4
   1f5ea:	f00f fc71 	bl	2eed0 <atomic_set_bit>
}
   1f5ee:	b004      	add	sp, #16
   1f5f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1f5f4:	f7ff bbca 	b.w	1ed8c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f5f8:	210a      	movs	r1, #10
   1f5fa:	4630      	mov	r0, r6
   1f5fc:	f00f fc01 	bl	2ee02 <atomic_test_bit>
   1f600:	2800      	cmp	r0, #0
   1f602:	d0f0      	beq.n	1f5e6 <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f604:	4630      	mov	r0, r6
   1f606:	2100      	movs	r1, #0
   1f608:	f00f fc62 	bl	2eed0 <atomic_set_bit>
			return 0;
   1f60c:	2000      	movs	r0, #0
}
   1f60e:	b004      	add	sp, #16
   1f610:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1f612:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f614:	4b05      	ldr	r3, [pc, #20]	; (1f62c <smp_pairing_confirm+0x8c>)
   1f616:	2201      	movs	r2, #1
   1f618:	9302      	str	r3, [sp, #8]
   1f61a:	2300      	movs	r3, #0
   1f61c:	4904      	ldr	r1, [pc, #16]	; (1f630 <smp_pairing_confirm+0x90>)
   1f61e:	4618      	mov	r0, r3
   1f620:	e9cd 3300 	strd	r3, r3, [sp]
   1f624:	f00f fc45 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f628:	2008      	movs	r0, #8
   1f62a:	e7f0      	b.n	1f60e <smp_pairing_confirm+0x6e>
   1f62c:	00037b6d 	.word	0x00037b6d
   1f630:	00033274 	.word	0x00033274

0001f634 <smp_pairing_random>:
{
   1f634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f638:	4604      	mov	r4, r0
   1f63a:	b089      	sub	sp, #36	; 0x24
   1f63c:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f63e:	f7ff fa57 	bl	1eaf0 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1f642:	f104 0937 	add.w	r9, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f646:	4605      	mov	r5, r0
   1f648:	464a      	mov	r2, r9
   1f64a:	68f3      	ldr	r3, [r6, #12]
   1f64c:	f103 0110 	add.w	r1, r3, #16
   1f650:	f853 0b04 	ldr.w	r0, [r3], #4
   1f654:	428b      	cmp	r3, r1
   1f656:	f842 0b04 	str.w	r0, [r2], #4
   1f65a:	d1f9      	bne.n	1f650 <smp_pairing_random+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f65c:	1d27      	adds	r7, r4, #4
   1f65e:	2105      	movs	r1, #5
   1f660:	4638      	mov	r0, r7
   1f662:	f00f fbce 	bl	2ee02 <atomic_test_bit>
   1f666:	2800      	cmp	r0, #0
   1f668:	d14f      	bne.n	1f70a <smp_pairing_random+0xd6>
	struct bt_conn *conn = smp->chan.chan.conn;
   1f66a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f66e:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f672:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f676:	ad04      	add	r5, sp, #16
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1f678:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1f67a:	9201      	str	r2, [sp, #4]
   1f67c:	9300      	str	r3, [sp, #0]
   1f67e:	4649      	mov	r1, r9
   1f680:	4630      	mov	r0, r6
   1f682:	9502      	str	r5, [sp, #8]
   1f684:	f104 0310 	add.w	r3, r4, #16
   1f688:	f104 0209 	add.w	r2, r4, #9
   1f68c:	f00f fce4 	bl	2f058 <smp_c1>
	if (err) {
   1f690:	bb20      	cbnz	r0, 1f6dc <smp_pairing_random+0xa8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1f692:	2210      	movs	r2, #16
   1f694:	4629      	mov	r1, r5
   1f696:	f104 0017 	add.w	r0, r4, #23
   1f69a:	f012 f9b2 	bl	31a02 <memcmp>
   1f69e:	4680      	mov	r8, r0
   1f6a0:	2800      	cmp	r0, #0
   1f6a2:	d177      	bne.n	1f794 <smp_pairing_random+0x160>
	memcpy(out, r2, 8);
   1f6a4:	462b      	mov	r3, r5
   1f6a6:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   1f6aa:	f8d9 1004 	ldr.w	r1, [r9, #4]
	return bt_encrypt_le(k, out, out);
   1f6ae:	462a      	mov	r2, r5
	memcpy(out, r2, 8);
   1f6b0:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   1f6b2:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   1f6b6:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   1f6ba:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   1f6bc:	4629      	mov	r1, r5
   1f6be:	4630      	mov	r0, r6
   1f6c0:	f00e fa15 	bl	2daee <bt_encrypt_le>
		if (err) {
   1f6c4:	b170      	cbz	r0, 1f6e4 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1f6c6:	4b62      	ldr	r3, [pc, #392]	; (1f850 <smp_pairing_random+0x21c>)
   1f6c8:	f8cd 8000 	str.w	r8, [sp]
   1f6cc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1f6d0:	4643      	mov	r3, r8
		LOG_ERR("Calculate confirm failed");
   1f6d2:	2201      	movs	r2, #1
   1f6d4:	4618      	mov	r0, r3
   1f6d6:	495f      	ldr	r1, [pc, #380]	; (1f854 <smp_pairing_random+0x220>)
   1f6d8:	f00f fbeb 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f6dc:	2008      	movs	r0, #8
}
   1f6de:	b009      	add	sp, #36	; 0x24
   1f6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f6e4:	4633      	mov	r3, r6
   1f6e6:	ae08      	add	r6, sp, #32
   1f6e8:	462a      	mov	r2, r5
   1f6ea:	ca03      	ldmia	r2!, {r0, r1}
   1f6ec:	42b2      	cmp	r2, r6
   1f6ee:	6018      	str	r0, [r3, #0]
   1f6f0:	6059      	str	r1, [r3, #4]
   1f6f2:	4615      	mov	r5, r2
   1f6f4:	f103 0308 	add.w	r3, r3, #8
   1f6f8:	d1f6      	bne.n	1f6e8 <smp_pairing_random+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f6fa:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f6fc:	4638      	mov	r0, r7
   1f6fe:	f00f fbe7 	bl	2eed0 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1f702:	4620      	mov	r0, r4
   1f704:	f00f fc2d 	bl	2ef62 <smp_send_pairing_random>
   1f708:	e7e9      	b.n	1f6de <smp_pairing_random+0xaa>
	switch (smp->method) {
   1f70a:	7a23      	ldrb	r3, [r4, #8]
   1f70c:	2b05      	cmp	r3, #5
   1f70e:	f200 8091 	bhi.w	1f834 <smp_pairing_random+0x200>
   1f712:	e8df f003 	tbb	[pc, r3]
   1f716:	1f19      	.short	0x1f19
   1f718:	658f031f 	.word	0x658f031f
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1f71c:	ab04      	add	r3, sp, #16
   1f71e:	494e      	ldr	r1, [pc, #312]	; (1f858 <smp_pairing_random+0x224>)
   1f720:	9300      	str	r3, [sp, #0]
   1f722:	464a      	mov	r2, r9
   1f724:	6809      	ldr	r1, [r1, #0]
   1f726:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1f72a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f72e:	f000 ff31 	bl	20594 <bt_crypto_g2>
   1f732:	2800      	cmp	r0, #0
   1f734:	d1d2      	bne.n	1f6dc <smp_pairing_random+0xa8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1f736:	210a      	movs	r1, #10
   1f738:	4638      	mov	r0, r7
   1f73a:	f00f fbc9 	bl	2eed0 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1f73e:	68ab      	ldr	r3, [r5, #8]
   1f740:	9904      	ldr	r1, [sp, #16]
   1f742:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f746:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f748:	210d      	movs	r1, #13
   1f74a:	4620      	mov	r0, r4
   1f74c:	f00f fbc0 	bl	2eed0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f750:	2110      	movs	r1, #16
   1f752:	e7d3      	b.n	1f6fc <smp_pairing_random+0xc8>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f754:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1f758:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f75c:	493e      	ldr	r1, [pc, #248]	; (1f858 <smp_pairing_random+0x224>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f75e:	40d3      	lsrs	r3, r2
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f760:	ad04      	add	r5, sp, #16
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1f762:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1f766:	9500      	str	r5, [sp, #0]
   1f768:	464a      	mov	r2, r9
   1f76a:	6809      	ldr	r1, [r1, #0]
   1f76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f770:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1f774:	f00f fe81 	bl	2f47a <bt_crypto_f4>
   1f778:	b128      	cbz	r0, 1f786 <smp_pairing_random+0x152>
		LOG_ERR("Calculate confirm failed");
   1f77a:	4b38      	ldr	r3, [pc, #224]	; (1f85c <smp_pairing_random+0x228>)
   1f77c:	9302      	str	r3, [sp, #8]
   1f77e:	2300      	movs	r3, #0
   1f780:	e9cd 3300 	strd	r3, r3, [sp]
   1f784:	e7a5      	b.n	1f6d2 <smp_pairing_random+0x9e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1f786:	2210      	movs	r2, #16
   1f788:	4629      	mov	r1, r5
   1f78a:	f104 0017 	add.w	r0, r4, #23
   1f78e:	f012 f938 	bl	31a02 <memcmp>
   1f792:	b108      	cbz	r0, 1f798 <smp_pairing_random+0x164>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1f794:	2004      	movs	r0, #4
   1f796:	e7a2      	b.n	1f6de <smp_pairing_random+0xaa>
		atomic_set_bit(smp->allowed_cmds,
   1f798:	2103      	movs	r1, #3
   1f79a:	4620      	mov	r0, r4
   1f79c:	f00f fb98 	bl	2eed0 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1f7a0:	f00f fbdf 	bl	2ef62 <smp_send_pairing_random>
		if (err) {
   1f7a4:	2800      	cmp	r0, #0
   1f7a6:	d19a      	bne.n	1f6de <smp_pairing_random+0xaa>
		smp->passkey_round++;
   1f7a8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1f7ac:	3301      	adds	r3, #1
   1f7ae:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1f7b0:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1f7b2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1f7b6:	d109      	bne.n	1f7cc <smp_pairing_random+0x198>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1f7b8:	210d      	movs	r1, #13
   1f7ba:	4620      	mov	r0, r4
   1f7bc:	f00f fb88 	bl	2eed0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f7c0:	2110      	movs	r1, #16
   1f7c2:	4638      	mov	r0, r7
   1f7c4:	f00f fb84 	bl	2eed0 <atomic_set_bit>
			return 0;
   1f7c8:	2000      	movs	r0, #0
   1f7ca:	e788      	b.n	1f6de <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   1f7cc:	2110      	movs	r1, #16
   1f7ce:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f7d2:	f7fc f94f 	bl	1ba74 <bt_rand>
   1f7d6:	3800      	subs	r0, #0
   1f7d8:	bf18      	it	ne
   1f7da:	2001      	movne	r0, #1
   1f7dc:	00c0      	lsls	r0, r0, #3
   1f7de:	e77e      	b.n	1f6de <smp_pairing_random+0xaa>
		if (bt_rand(smp->prnd, 16)) {
   1f7e0:	2110      	movs	r1, #16
   1f7e2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1f7e6:	f7fc f945 	bl	1ba74 <bt_rand>
   1f7ea:	2800      	cmp	r0, #0
   1f7ec:	f47f af76 	bne.w	1f6dc <smp_pairing_random+0xa8>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1f7f0:	b365      	cbz	r5, 1f84c <smp_pairing_random+0x218>
   1f7f2:	68eb      	ldr	r3, [r5, #12]
   1f7f4:	b353      	cbz	r3, 1f84c <smp_pairing_random+0x218>
			struct bt_conn_oob_info info = {
   1f7f6:	4b1a      	ldr	r3, [pc, #104]	; (1f860 <smp_pairing_random+0x22c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f7f8:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1f7fa:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f7fc:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   1f7fe:	f8ad 3010 	strh.w	r3, [sp, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1f802:	7ca3      	ldrb	r3, [r4, #18]
   1f804:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1f808:	d412      	bmi.n	1f830 <smp_pairing_random+0x1fc>
   1f80a:	2b00      	cmp	r3, #0
   1f80c:	bf14      	ite	ne
   1f80e:	2301      	movne	r3, #1
   1f810:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1f812:	f88d 3011 	strb.w	r3, [sp, #17]
			smp->oobd_local = NULL;
   1f816:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f818:	4638      	mov	r0, r7
			smp->oobd_remote = NULL;
   1f81a:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1f81e:	210c      	movs	r1, #12
   1f820:	f00f fb56 	bl	2eed0 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1f824:	68eb      	ldr	r3, [r5, #12]
   1f826:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1f82a:	a904      	add	r1, sp, #16
   1f82c:	4798      	blx	r3
			return 0;
   1f82e:	e7cb      	b.n	1f7c8 <smp_pairing_random+0x194>
		if (rsp_oob_present) {
   1f830:	005b      	lsls	r3, r3, #1
   1f832:	e7ee      	b.n	1f812 <smp_pairing_random+0x1de>
	switch (smp->method) {
   1f834:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1f836:	4b0b      	ldr	r3, [pc, #44]	; (1f864 <smp_pairing_random+0x230>)
   1f838:	2201      	movs	r2, #1
   1f83a:	9302      	str	r3, [sp, #8]
   1f83c:	2300      	movs	r3, #0
   1f83e:	4905      	ldr	r1, [pc, #20]	; (1f854 <smp_pairing_random+0x220>)
   1f840:	4618      	mov	r0, r3
   1f842:	e9cd 3300 	strd	r3, r3, [sp]
   1f846:	f00f fb34 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1f84a:	e747      	b.n	1f6dc <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1f84c:	2002      	movs	r0, #2
   1f84e:	e746      	b.n	1f6de <smp_pairing_random+0xaa>
   1f850:	00037c4e 	.word	0x00037c4e
   1f854:	00033274 	.word	0x00033274
   1f858:	20030b54 	.word	0x20030b54
   1f85c:	00037c63 	.word	0x00037c63
   1f860:	00033431 	.word	0x00033431
   1f864:	00037b6d 	.word	0x00037b6d

0001f868 <bt_smp_start_security>:
{
   1f868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1f86c:	78c6      	ldrb	r6, [r0, #3]
{
   1f86e:	4604      	mov	r4, r0
	switch (conn->role) {
   1f870:	2e01      	cmp	r6, #1
   1f872:	d005      	beq.n	1f880 <bt_smp_start_security+0x18>
		return -EINVAL;
   1f874:	f06f 0415 	mvn.w	r4, #21
}
   1f878:	4620      	mov	r0, r4
   1f87a:	b003      	add	sp, #12
   1f87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1f880:	f7ff f990 	bl	1eba4 <smp_chan_get>
	if (!smp) {
   1f884:	4605      	mov	r5, r0
   1f886:	2800      	cmp	r0, #0
   1f888:	f000 80ac 	beq.w	1f9e4 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f88c:	1d07      	adds	r7, r0, #4
   1f88e:	2104      	movs	r1, #4
   1f890:	4638      	mov	r0, r7
   1f892:	f00f fab6 	bl	2ee02 <atomic_test_bit>
   1f896:	2800      	cmp	r0, #0
   1f898:	f040 80a7 	bne.w	1f9ea <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f89c:	2103      	movs	r1, #3
   1f89e:	4638      	mov	r0, r7
   1f8a0:	f00f faaf 	bl	2ee02 <atomic_test_bit>
   1f8a4:	b110      	cbz	r0, 1f8ac <bt_smp_start_security+0x44>
		return -EBUSY;
   1f8a6:	f06f 040f 	mvn.w	r4, #15
   1f8aa:	e7e5      	b.n	1f878 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f8ac:	4631      	mov	r1, r6
   1f8ae:	4638      	mov	r0, r7
   1f8b0:	f00f faa7 	bl	2ee02 <atomic_test_bit>
   1f8b4:	2800      	cmp	r0, #0
   1f8b6:	d1f6      	bne.n	1f8a6 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f8b8:	4628      	mov	r0, r5
   1f8ba:	f7ff f919 	bl	1eaf0 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f8be:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1f8c2:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1f8c4:	7a9b      	ldrb	r3, [r3, #10]
   1f8c6:	2b03      	cmp	r3, #3
   1f8c8:	d042      	beq.n	1f950 <bt_smp_start_security+0xe8>
   1f8ca:	d832      	bhi.n	1f932 <bt_smp_start_security+0xca>
   1f8cc:	3b01      	subs	r3, #1
   1f8ce:	2b01      	cmp	r3, #1
   1f8d0:	d948      	bls.n	1f964 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1f8d2:	210b      	movs	r1, #11
   1f8d4:	1d20      	adds	r0, r4, #4
   1f8d6:	f00f fa94 	bl	2ee02 <atomic_test_bit>
   1f8da:	2800      	cmp	r0, #0
   1f8dc:	d1ca      	bne.n	1f874 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1f8de:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f8e2:	b983      	cbnz	r3, 1f906 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1f8e4:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1f8e8:	4632      	mov	r2, r6
   1f8ea:	2020      	movs	r0, #32
   1f8ec:	7a21      	ldrb	r1, [r4, #8]
   1f8ee:	f000 fd6f 	bl	203d0 <bt_keys_find>
   1f8f2:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f8f6:	b930      	cbnz	r0, 1f906 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1f8f8:	4632      	mov	r2, r6
   1f8fa:	2004      	movs	r0, #4
   1f8fc:	7a21      	ldrb	r1, [r4, #8]
   1f8fe:	f000 fd67 	bl	203d0 <bt_keys_find>
   1f902:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1f906:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f90a:	2b00      	cmp	r3, #0
   1f90c:	d0b2      	beq.n	1f874 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1f90e:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1f910:	f012 0f24 	tst.w	r2, #36	; 0x24
   1f914:	d0ae      	beq.n	1f874 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1f916:	7aa1      	ldrb	r1, [r4, #10]
   1f918:	2902      	cmp	r1, #2
   1f91a:	d923      	bls.n	1f964 <bt_smp_start_security+0xfc>
   1f91c:	7b58      	ldrb	r0, [r3, #13]
   1f91e:	07c0      	lsls	r0, r0, #31
   1f920:	d5a8      	bpl.n	1f874 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1f922:	2903      	cmp	r1, #3
   1f924:	d01e      	beq.n	1f964 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f926:	0692      	lsls	r2, r2, #26
   1f928:	d5a4      	bpl.n	1f874 <bt_smp_start_security+0xc>
   1f92a:	7b1b      	ldrb	r3, [r3, #12]
   1f92c:	2b10      	cmp	r3, #16
   1f92e:	d1a1      	bne.n	1f874 <bt_smp_start_security+0xc>
   1f930:	e018      	b.n	1f964 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1f932:	2b04      	cmp	r3, #4
   1f934:	d1cd      	bne.n	1f8d2 <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f936:	4628      	mov	r0, r5
   1f938:	f7ff f8f0 	bl	1eb1c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f93c:	2803      	cmp	r0, #3
   1f93e:	d104      	bne.n	1f94a <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f940:	2e00      	cmp	r6, #0
   1f942:	d0c6      	beq.n	1f8d2 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f944:	68f3      	ldr	r3, [r6, #12]
   1f946:	2b00      	cmp	r3, #0
   1f948:	d0c3      	beq.n	1f8d2 <bt_smp_start_security+0x6a>
   1f94a:	4b29      	ldr	r3, [pc, #164]	; (1f9f0 <bt_smp_start_security+0x188>)
   1f94c:	781b      	ldrb	r3, [r3, #0]
   1f94e:	e007      	b.n	1f960 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1f950:	4628      	mov	r0, r5
   1f952:	f7ff f8e3 	bl	1eb1c <get_io_capa>
   1f956:	2803      	cmp	r0, #3
   1f958:	d104      	bne.n	1f964 <bt_smp_start_security+0xfc>
   1f95a:	2e00      	cmp	r6, #0
   1f95c:	d0b9      	beq.n	1f8d2 <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1f95e:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1f960:	2b00      	cmp	r3, #0
   1f962:	d0b6      	beq.n	1f8d2 <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1f964:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1f968:	b13b      	cbz	r3, 1f97a <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1f96a:	4628      	mov	r0, r5
   1f96c:	f7ff f958 	bl	1ec20 <smp_init>
   1f970:	4680      	mov	r8, r0
   1f972:	b170      	cbz	r0, 1f992 <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1f974:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1f978:	e77e      	b.n	1f878 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f97a:	7a20      	ldrb	r0, [r4, #8]
   1f97c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f980:	f000 fcf0 	bl	20364 <bt_keys_get_addr>
   1f984:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1f988:	2800      	cmp	r0, #0
   1f98a:	d1ee      	bne.n	1f96a <bt_smp_start_security+0x102>
			return -ENOMEM;
   1f98c:	f06f 040b 	mvn.w	r4, #11
   1f990:	e772      	b.n	1f878 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1f992:	210b      	movs	r1, #11
   1f994:	4628      	mov	r0, r5
   1f996:	f00f faab 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1f99a:	4606      	mov	r6, r0
   1f99c:	2800      	cmp	r0, #0
   1f99e:	d0e9      	beq.n	1f974 <bt_smp_start_security+0x10c>
   1f9a0:	2101      	movs	r1, #1
   1f9a2:	300c      	adds	r0, #12
   1f9a4:	f00f fe3f 	bl	2f626 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1f9a8:	2109      	movs	r1, #9
   1f9aa:	4681      	mov	r9, r0
   1f9ac:	4628      	mov	r0, r5
   1f9ae:	f7ff f8db 	bl	1eb68 <get_auth>
   1f9b2:	4643      	mov	r3, r8
   1f9b4:	f889 0000 	strb.w	r0, [r9]
   1f9b8:	4632      	mov	r2, r6
   1f9ba:	4620      	mov	r0, r4
   1f9bc:	2106      	movs	r1, #6
   1f9be:	f8cd 8000 	str.w	r8, [sp]
   1f9c2:	f00e fa87 	bl	2ded4 <bt_l2cap_send_cb>
	if (err) {
   1f9c6:	4604      	mov	r4, r0
   1f9c8:	b118      	cbz	r0, 1f9d2 <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1f9ca:	4630      	mov	r0, r6
   1f9cc:	f000 fee0 	bl	20790 <net_buf_unref>
		return err;
   1f9d0:	e752      	b.n	1f878 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1f9d2:	4638      	mov	r0, r7
   1f9d4:	210f      	movs	r1, #15
   1f9d6:	f00f fa7b 	bl	2eed0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f9da:	2101      	movs	r1, #1
   1f9dc:	4628      	mov	r0, r5
   1f9de:	f00f fa77 	bl	2eed0 <atomic_set_bit>
	return 0;
   1f9e2:	e749      	b.n	1f878 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1f9e4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1f9e8:	e746      	b.n	1f878 <bt_smp_start_security+0x10>
		return -EIO;
   1f9ea:	f06f 0404 	mvn.w	r4, #4
   1f9ee:	e743      	b.n	1f878 <bt_smp_start_security+0x10>
   1f9f0:	20031b8f 	.word	0x20031b8f

0001f9f4 <smp_pairing_complete>:
{
   1f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9f6:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1f9f8:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1f9fc:	1d04      	adds	r4, r0, #4
	if (!status) {
   1f9fe:	bb39      	cbnz	r1, 1fa50 <smp_pairing_complete+0x5c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1fa00:	210d      	movs	r1, #13
   1fa02:	4620      	mov	r0, r4
   1fa04:	f00f f9fd 	bl	2ee02 <atomic_test_bit>
	return list->head;
   1fa08:	4b36      	ldr	r3, [pc, #216]	; (1fae4 <smp_pairing_complete+0xf0>)
   1fa0a:	4607      	mov	r7, r0
   1fa0c:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1fa0e:	b19b      	cbz	r3, 1fa38 <smp_pairing_complete+0x44>
	return node->next;
   1fa10:	681c      	ldr	r4, [r3, #0]
   1fa12:	b104      	cbz	r4, 1fa16 <smp_pairing_complete+0x22>
   1fa14:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1fa16:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1fa1a:	b113      	cbz	r3, 1fa22 <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   1fa1c:	4639      	mov	r1, r7
   1fa1e:	4628      	mov	r0, r5
   1fa20:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1fa22:	b14c      	cbz	r4, 1fa38 <smp_pairing_complete+0x44>
   1fa24:	4623      	mov	r3, r4
   1fa26:	68e4      	ldr	r4, [r4, #12]
   1fa28:	681b      	ldr	r3, [r3, #0]
   1fa2a:	b11c      	cbz	r4, 1fa34 <smp_pairing_complete+0x40>
   1fa2c:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1fa2e:	2b00      	cmp	r3, #0
   1fa30:	d1f4      	bne.n	1fa1c <smp_pairing_complete+0x28>
   1fa32:	e7f7      	b.n	1fa24 <smp_pairing_complete+0x30>
   1fa34:	2b00      	cmp	r3, #0
   1fa36:	d1f1      	bne.n	1fa1c <smp_pairing_complete+0x28>
	smp_reset(smp);
   1fa38:	4630      	mov	r0, r6
   1fa3a:	f00f faf2 	bl	2f022 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1fa3e:	7a6a      	ldrb	r2, [r5, #9]
   1fa40:	7aab      	ldrb	r3, [r5, #10]
   1fa42:	429a      	cmp	r2, r3
   1fa44:	d04d      	beq.n	1fae2 <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   1fa46:	4628      	mov	r0, r5
}
   1fa48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1fa4c:	f7ff bf0c 	b.w	1f868 <bt_smp_start_security>
	switch (smp_err) {
   1fa50:	3901      	subs	r1, #1
   1fa52:	b2c9      	uxtb	r1, r1
   1fa54:	290e      	cmp	r1, #14
   1fa56:	bf96      	itet	ls
   1fa58:	4b23      	ldrls	r3, [pc, #140]	; (1fae8 <smp_pairing_complete+0xf4>)
	if (!status) {
   1fa5a:	2709      	movhi	r7, #9
   1fa5c:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1fa5e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1fa62:	b143      	cbz	r3, 1fa76 <smp_pairing_complete+0x82>
   1fa64:	7b1b      	ldrb	r3, [r3, #12]
   1fa66:	bb33      	cbnz	r3, 1fab6 <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   1fa68:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1fa6c:	f00f fcc1 	bl	2f3f2 <bt_keys_clear>
			conn->le.keys = NULL;
   1fa70:	2300      	movs	r3, #0
   1fa72:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1fa76:	2102      	movs	r1, #2
   1fa78:	4620      	mov	r0, r4
   1fa7a:	f00f f9c2 	bl	2ee02 <atomic_test_bit>
   1fa7e:	b948      	cbnz	r0, 1fa94 <smp_pairing_complete+0xa0>
	switch (err) {
   1fa80:	2f07      	cmp	r7, #7
   1fa82:	bf94      	ite	ls
   1fa84:	4b19      	ldrls	r3, [pc, #100]	; (1faec <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1fa86:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1fa88:	463a      	mov	r2, r7
   1fa8a:	4628      	mov	r0, r5
   1fa8c:	bf98      	it	ls
   1fa8e:	5dd9      	ldrbls	r1, [r3, r7]
   1fa90:	f7fc fd6e 	bl	1c570 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1fa94:	2103      	movs	r1, #3
   1fa96:	4620      	mov	r0, r4
   1fa98:	f00f f9b3 	bl	2ee02 <atomic_test_bit>
   1fa9c:	2800      	cmp	r0, #0
   1fa9e:	d0cb      	beq.n	1fa38 <smp_pairing_complete+0x44>
	return list->head;
   1faa0:	4b10      	ldr	r3, [pc, #64]	; (1fae4 <smp_pairing_complete+0xf0>)
   1faa2:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1faa4:	2b00      	cmp	r3, #0
   1faa6:	d0c7      	beq.n	1fa38 <smp_pairing_complete+0x44>
	return node->next;
   1faa8:	681c      	ldr	r4, [r3, #0]
   1faaa:	b104      	cbz	r4, 1faae <smp_pairing_complete+0xba>
   1faac:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1faae:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1fab2:	b94b      	cbnz	r3, 1fac8 <smp_pairing_complete+0xd4>
   1fab4:	e00b      	b.n	1face <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1fab6:	2102      	movs	r1, #2
   1fab8:	4620      	mov	r0, r4
   1faba:	f00f f9a2 	bl	2ee02 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1fabe:	2800      	cmp	r0, #0
   1fac0:	d1d2      	bne.n	1fa68 <smp_pairing_complete+0x74>
   1fac2:	e7d8      	b.n	1fa76 <smp_pairing_complete+0x82>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1fac4:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1fac6:	b123      	cbz	r3, 1fad2 <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1fac8:	4639      	mov	r1, r7
   1faca:	4628      	mov	r0, r5
   1facc:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1face:	2c00      	cmp	r4, #0
   1fad0:	d0b2      	beq.n	1fa38 <smp_pairing_complete+0x44>
   1fad2:	4623      	mov	r3, r4
   1fad4:	68e4      	ldr	r4, [r4, #12]
   1fad6:	685b      	ldr	r3, [r3, #4]
   1fad8:	2c00      	cmp	r4, #0
   1fada:	d1f3      	bne.n	1fac4 <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   1fadc:	2b00      	cmp	r3, #0
   1fade:	d1f3      	bne.n	1fac8 <smp_pairing_complete+0xd4>
   1fae0:	e7aa      	b.n	1fa38 <smp_pairing_complete+0x44>
}
   1fae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fae4:	20030a2c 	.word	0x20030a2c
   1fae8:	00037e9d 	.word	0x00037e9d
   1faec:	00037e8c 	.word	0x00037e8c

0001faf0 <smp_error>:
{
   1faf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1faf2:	1d03      	adds	r3, r0, #4
{
   1faf4:	4606      	mov	r6, r0
   1faf6:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1faf8:	4618      	mov	r0, r3
   1fafa:	2102      	movs	r1, #2
{
   1fafc:	b085      	sub	sp, #20
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1fafe:	f00f f980 	bl	2ee02 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1fb02:	4604      	mov	r4, r0
   1fb04:	b120      	cbz	r0, 1fb10 <smp_error+0x20>
   1fb06:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1fb0a:	fab4 f484 	clz	r4, r4
   1fb0e:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fb10:	2103      	movs	r1, #3
   1fb12:	4618      	mov	r0, r3
   1fb14:	f00f f975 	bl	2ee02 <atomic_test_bit>
   1fb18:	b1b0      	cbz	r0, 1fb48 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1fb1a:	4639      	mov	r1, r7
   1fb1c:	4630      	mov	r0, r6
   1fb1e:	f7ff ff69 	bl	1f9f4 <smp_pairing_complete>
	if (remote_already_completed) {
   1fb22:	b1f4      	cbz	r4, 1fb62 <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1fb24:	4b1d      	ldr	r3, [pc, #116]	; (1fb9c <smp_error+0xac>)
   1fb26:	491e      	ldr	r1, [pc, #120]	; (1fba0 <smp_error+0xb0>)
   1fb28:	9302      	str	r3, [sp, #8]
   1fb2a:	2300      	movs	r3, #0
   1fb2c:	2202      	movs	r2, #2
   1fb2e:	4618      	mov	r0, r3
   1fb30:	e9cd 3300 	strd	r3, r3, [sp]
   1fb34:	f00f f9bd 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1fb38:	2105      	movs	r1, #5
   1fb3a:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1fb3e:	f00e f8d3 	bl	2dce8 <bt_conn_disconnect>
		return 0;
   1fb42:	2000      	movs	r0, #0
}
   1fb44:	b005      	add	sp, #20
   1fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fb48:	2101      	movs	r1, #1
   1fb4a:	4618      	mov	r0, r3
   1fb4c:	f00f f959 	bl	2ee02 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fb50:	2800      	cmp	r0, #0
   1fb52:	d1e2      	bne.n	1fb1a <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fb54:	210f      	movs	r1, #15
   1fb56:	4618      	mov	r0, r3
   1fb58:	f00f f953 	bl	2ee02 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fb5c:	2800      	cmp	r0, #0
   1fb5e:	d1dc      	bne.n	1fb1a <smp_error+0x2a>
   1fb60:	e7df      	b.n	1fb22 <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1fb62:	2105      	movs	r1, #5
   1fb64:	4630      	mov	r0, r6
   1fb66:	f00f f9c3 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!buf) {
   1fb6a:	4605      	mov	r5, r0
   1fb6c:	b190      	cbz	r0, 1fb94 <smp_error+0xa4>
   1fb6e:	2101      	movs	r1, #1
   1fb70:	300c      	adds	r0, #12
   1fb72:	f00f fd58 	bl	2f626 <net_buf_simple_add>
	rsp->reason = reason;
   1fb76:	7007      	strb	r7, [r0, #0]
   1fb78:	9400      	str	r4, [sp, #0]
   1fb7a:	4623      	mov	r3, r4
   1fb7c:	462a      	mov	r2, r5
   1fb7e:	2106      	movs	r1, #6
   1fb80:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1fb84:	f00e f9a6 	bl	2ded4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1fb88:	2800      	cmp	r0, #0
   1fb8a:	d0da      	beq.n	1fb42 <smp_error+0x52>
		net_buf_unref(buf);
   1fb8c:	4628      	mov	r0, r5
   1fb8e:	f000 fdff 	bl	20790 <net_buf_unref>
   1fb92:	e7d6      	b.n	1fb42 <smp_error+0x52>
		return -ENOBUFS;
   1fb94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1fb98:	e7d4      	b.n	1fb44 <smp_error+0x54>
   1fb9a:	bf00      	nop
   1fb9c:	00037c7c 	.word	0x00037c7c
   1fba0:	00033274 	.word	0x00033274

0001fba4 <bt_smp_recv>:
{
   1fba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1fba8:	8a0b      	ldrh	r3, [r1, #16]
{
   1fbaa:	4604      	mov	r4, r0
   1fbac:	460e      	mov	r6, r1
   1fbae:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1fbb0:	b963      	cbnz	r3, 1fbcc <bt_smp_recv+0x28>
		LOG_ERR("Too small SMP PDU received");
   1fbb2:	4a3c      	ldr	r2, [pc, #240]	; (1fca4 <bt_smp_recv+0x100>)
   1fbb4:	4618      	mov	r0, r3
   1fbb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1fbba:	493b      	ldr	r1, [pc, #236]	; (1fca8 <bt_smp_recv+0x104>)
   1fbbc:	2201      	movs	r2, #1
   1fbbe:	9300      	str	r3, [sp, #0]
   1fbc0:	f00f f977 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
}
   1fbc4:	2000      	movs	r0, #0
   1fbc6:	b006      	add	sp, #24
   1fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1fbcc:	2101      	movs	r1, #1
   1fbce:	f106 000c 	add.w	r0, r6, #12
   1fbd2:	f00f fd58 	bl	2f686 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1fbd6:	2104      	movs	r1, #4
   1fbd8:	4607      	mov	r7, r0
   1fbda:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   1fbde:	f00f f910 	bl	2ee02 <atomic_test_bit>
   1fbe2:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1fbe6:	7839      	ldrb	r1, [r7, #0]
   1fbe8:	4604      	mov	r4, r0
   1fbea:	b158      	cbz	r0, 1fc04 <bt_smp_recv+0x60>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1fbec:	4b2f      	ldr	r3, [pc, #188]	; (1fcac <bt_smp_recv+0x108>)
   1fbee:	2202      	movs	r2, #2
   1fbf0:	9302      	str	r3, [sp, #8]
   1fbf2:	2300      	movs	r3, #0
   1fbf4:	4618      	mov	r0, r3
   1fbf6:	e9cd 3300 	strd	r3, r3, [sp]
   1fbfa:	9103      	str	r1, [sp, #12]
   1fbfc:	492a      	ldr	r1, [pc, #168]	; (1fca8 <bt_smp_recv+0x104>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fbfe:	f00f f958 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return 0;
   1fc02:	e7df      	b.n	1fbc4 <bt_smp_recv+0x20>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1fc04:	290e      	cmp	r1, #14
   1fc06:	d908      	bls.n	1fc1a <bt_smp_recv+0x76>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1fc08:	4b29      	ldr	r3, [pc, #164]	; (1fcb0 <bt_smp_recv+0x10c>)
   1fc0a:	9103      	str	r1, [sp, #12]
   1fc0c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1fc10:	2202      	movs	r2, #2
   1fc12:	4603      	mov	r3, r0
   1fc14:	4924      	ldr	r1, [pc, #144]	; (1fca8 <bt_smp_recv+0x104>)
   1fc16:	9000      	str	r0, [sp, #0]
   1fc18:	e7f1      	b.n	1fbfe <bt_smp_recv+0x5a>
	if (!handlers[hdr->code].func) {
   1fc1a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1fcb4 <bt_smp_recv+0x110>
   1fc1e:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1fc22:	b96b      	cbnz	r3, 1fc40 <bt_smp_recv+0x9c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1fc24:	4a24      	ldr	r2, [pc, #144]	; (1fcb8 <bt_smp_recv+0x114>)
   1fc26:	9103      	str	r1, [sp, #12]
   1fc28:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1fc2c:	491e      	ldr	r1, [pc, #120]	; (1fca8 <bt_smp_recv+0x104>)
   1fc2e:	2202      	movs	r2, #2
   1fc30:	9300      	str	r3, [sp, #0]
   1fc32:	f00f f93e 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1fc36:	2107      	movs	r1, #7
		smp_error(smp, err);
   1fc38:	4628      	mov	r0, r5
   1fc3a:	f7ff ff59 	bl	1faf0 <smp_error>
   1fc3e:	e7c1      	b.n	1fbc4 <bt_smp_recv+0x20>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1fc40:	4628      	mov	r0, r5
   1fc42:	f00f f9dc 	bl	2effe <atomic_test_and_clear_bit>
   1fc46:	783a      	ldrb	r2, [r7, #0]
   1fc48:	4603      	mov	r3, r0
   1fc4a:	b968      	cbnz	r0, 1fc68 <bt_smp_recv+0xc4>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1fc4c:	9203      	str	r2, [sp, #12]
   1fc4e:	4a1b      	ldr	r2, [pc, #108]	; (1fcbc <bt_smp_recv+0x118>)
   1fc50:	4915      	ldr	r1, [pc, #84]	; (1fca8 <bt_smp_recv+0x104>)
   1fc52:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1fc56:	9000      	str	r0, [sp, #0]
   1fc58:	2202      	movs	r2, #2
   1fc5a:	f00f f92a 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1fc5e:	783b      	ldrb	r3, [r7, #0]
   1fc60:	2b05      	cmp	r3, #5
   1fc62:	d0af      	beq.n	1fbc4 <bt_smp_recv+0x20>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1fc64:	2108      	movs	r1, #8
   1fc66:	e7e7      	b.n	1fc38 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   1fc68:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   1fc6c:	8a33      	ldrh	r3, [r6, #16]
   1fc6e:	7909      	ldrb	r1, [r1, #4]
   1fc70:	4299      	cmp	r1, r3
   1fc72:	d00d      	beq.n	1fc90 <bt_smp_recv+0xec>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1fc74:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1fc78:	4b11      	ldr	r3, [pc, #68]	; (1fcc0 <bt_smp_recv+0x11c>)
   1fc7a:	490b      	ldr	r1, [pc, #44]	; (1fca8 <bt_smp_recv+0x104>)
   1fc7c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1fc80:	2201      	movs	r2, #1
   1fc82:	4623      	mov	r3, r4
   1fc84:	4620      	mov	r0, r4
   1fc86:	9400      	str	r4, [sp, #0]
   1fc88:	f00f f913 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1fc8c:	210a      	movs	r1, #10
   1fc8e:	e7d3      	b.n	1fc38 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   1fc90:	4631      	mov	r1, r6
   1fc92:	4628      	mov	r0, r5
   1fc94:	f858 3032 	ldr.w	r3, [r8, r2, lsl #3]
   1fc98:	4798      	blx	r3
	if (err) {
   1fc9a:	4601      	mov	r1, r0
   1fc9c:	2800      	cmp	r0, #0
   1fc9e:	d091      	beq.n	1fbc4 <bt_smp_recv+0x20>
   1fca0:	e7ca      	b.n	1fc38 <bt_smp_recv+0x94>
   1fca2:	bf00      	nop
   1fca4:	00037cd4 	.word	0x00037cd4
   1fca8:	00033274 	.word	0x00033274
   1fcac:	00037cef 	.word	0x00037cef
   1fcb0:	00037d20 	.word	0x00037d20
   1fcb4:	000340dc 	.word	0x000340dc
   1fcb8:	00037d42 	.word	0x00037d42
   1fcbc:	00037d5c 	.word	0x00037d5c
   1fcc0:	00037902 	.word	0x00037902

0001fcc4 <bt_smp_pkey_ready>:
{
   1fcc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	sc_public_key = pkey;
   1fcc6:	4a10      	ldr	r2, [pc, #64]	; (1fd08 <bt_smp_pkey_ready+0x44>)
{
   1fcc8:	4603      	mov	r3, r0
	sc_public_key = pkey;
   1fcca:	6010      	str	r0, [r2, #0]
	if (!pkey) {
   1fccc:	b948      	cbnz	r0, 1fce2 <bt_smp_pkey_ready+0x1e>
		LOG_WRN("Public key not available");
   1fcce:	4a0f      	ldr	r2, [pc, #60]	; (1fd0c <bt_smp_pkey_ready+0x48>)
   1fcd0:	490f      	ldr	r1, [pc, #60]	; (1fd10 <bt_smp_pkey_ready+0x4c>)
   1fcd2:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1fcd6:	9000      	str	r0, [sp, #0]
   1fcd8:	2202      	movs	r2, #2
   1fcda:	f00f f8ea 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
}
   1fcde:	b004      	add	sp, #16
   1fce0:	bd10      	pop	{r4, pc}
	z_impl_k_sem_give(sem);
   1fce2:	480c      	ldr	r0, [pc, #48]	; (1fd14 <bt_smp_pkey_ready+0x50>)
   1fce4:	f005 fff6 	bl	25cd4 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fce8:	4b0b      	ldr	r3, [pc, #44]	; (1fd18 <bt_smp_pkey_ready+0x54>)
		err = smp_public_key_periph(smp);
   1fcea:	1f1c      	subs	r4, r3, #4
   1fcec:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1fcf0:	065b      	lsls	r3, r3, #25
   1fcf2:	d5f4      	bpl.n	1fcde <bt_smp_pkey_ready+0x1a>
		err = smp_public_key_periph(smp);
   1fcf4:	4620      	mov	r0, r4
   1fcf6:	f7ff f897 	bl	1ee28 <smp_public_key_periph>
		if (err) {
   1fcfa:	4601      	mov	r1, r0
   1fcfc:	2800      	cmp	r0, #0
   1fcfe:	d0ee      	beq.n	1fcde <bt_smp_pkey_ready+0x1a>
			smp_error(smp, err);
   1fd00:	4620      	mov	r0, r4
   1fd02:	f7ff fef5 	bl	1faf0 <smp_error>
   1fd06:	e7ea      	b.n	1fcde <bt_smp_pkey_ready+0x1a>
   1fd08:	20030b54 	.word	0x20030b54
   1fd0c:	00037d77 	.word	0x00037d77
   1fd10:	00033274 	.word	0x00033274
   1fd14:	20008e28 	.word	0x20008e28
   1fd18:	2000a254 	.word	0x2000a254

0001fd1c <smp_ident_addr_info>:
{
   1fd1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fd20:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1fd24:	68cf      	ldr	r7, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1fd26:	f023 0302 	bic.w	r3, r3, #2
   1fd2a:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   1fd2e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fd32:	783b      	ldrb	r3, [r7, #0]
{
   1fd34:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fd36:	f106 0888 	add.w	r8, r6, #136	; 0x88
   1fd3a:	b32b      	cbz	r3, 1fd88 <smp_ident_addr_info+0x6c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1fd3c:	79bb      	ldrb	r3, [r7, #6]
   1fd3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fd42:	2bc0      	cmp	r3, #192	; 0xc0
   1fd44:	d020      	beq.n	1fd88 <smp_ident_addr_info+0x6c>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1fd46:	4638      	mov	r0, r7
   1fd48:	f7f9 fbe0 	bl	1950c <bt_addr_le_str>
   1fd4c:	2400      	movs	r4, #0
   1fd4e:	4b4d      	ldr	r3, [pc, #308]	; (1fe84 <smp_ident_addr_info+0x168>)
   1fd50:	2201      	movs	r2, #1
   1fd52:	494d      	ldr	r1, [pc, #308]	; (1fe88 <smp_ident_addr_info+0x16c>)
   1fd54:	9003      	str	r0, [sp, #12]
   1fd56:	9302      	str	r3, [sp, #8]
   1fd58:	4620      	mov	r0, r4
   1fd5a:	4623      	mov	r3, r4
   1fd5c:	e9cd 4400 	strd	r4, r4, [sp]
   1fd60:	f00f f8a7 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1fd64:	4640      	mov	r0, r8
   1fd66:	f7f9 fbd1 	bl	1950c <bt_addr_le_str>
   1fd6a:	4b48      	ldr	r3, [pc, #288]	; (1fe8c <smp_ident_addr_info+0x170>)
   1fd6c:	9003      	str	r0, [sp, #12]
   1fd6e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1fd72:	4620      	mov	r0, r4
   1fd74:	4623      	mov	r3, r4
   1fd76:	2201      	movs	r2, #1
   1fd78:	4943      	ldr	r1, [pc, #268]	; (1fe88 <smp_ident_addr_info+0x16c>)
   1fd7a:	9400      	str	r4, [sp, #0]
   1fd7c:	f00f f899 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1fd80:	200a      	movs	r0, #10
}
   1fd82:	b004      	add	sp, #16
   1fd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1fd88:	2207      	movs	r2, #7
   1fd8a:	4639      	mov	r1, r7
   1fd8c:	4640      	mov	r0, r8
   1fd8e:	f011 fe38 	bl	31a02 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1fd92:	b168      	cbz	r0, 1fdb0 <smp_ident_addr_info+0x94>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1fd94:	4639      	mov	r1, r7
   1fd96:	7a30      	ldrb	r0, [r6, #8]
   1fd98:	f000 fb84 	bl	204a4 <bt_keys_find_addr>
		if (keys) {
   1fd9c:	4605      	mov	r5, r0
   1fd9e:	b138      	cbz	r0, 1fdb0 <smp_ident_addr_info+0x94>
			if (!update_keys_check(smp, keys)) {
   1fda0:	4601      	mov	r1, r0
   1fda2:	4620      	mov	r0, r4
   1fda4:	f00f f833 	bl	2ee0e <update_keys_check>
   1fda8:	b1e8      	cbz	r0, 1fde6 <smp_ident_addr_info+0xca>
			bt_keys_clear(keys);
   1fdaa:	4628      	mov	r0, r5
   1fdac:	f00f fb21 	bl	2f3f2 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fdb0:	210d      	movs	r1, #13
   1fdb2:	1d20      	adds	r0, r4, #4
   1fdb4:	f00f f825 	bl	2ee02 <atomic_test_bit>
   1fdb8:	2800      	cmp	r0, #0
   1fdba:	d052      	beq.n	1fe62 <smp_ident_addr_info+0x146>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1fdbc:	4642      	mov	r2, r8
   1fdbe:	2002      	movs	r0, #2
   1fdc0:	7a31      	ldrb	r1, [r6, #8]
   1fdc2:	f00f fb02 	bl	2f3ca <bt_keys_get_type>
		if (!keys) {
   1fdc6:	4605      	mov	r5, r0
   1fdc8:	b978      	cbnz	r0, 1fdea <smp_ident_addr_info+0xce>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fdca:	4640      	mov	r0, r8
   1fdcc:	f7f9 fb9e 	bl	1950c <bt_addr_le_str>
   1fdd0:	4b2f      	ldr	r3, [pc, #188]	; (1fe90 <smp_ident_addr_info+0x174>)
   1fdd2:	9003      	str	r0, [sp, #12]
   1fdd4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1fdd8:	2201      	movs	r2, #1
   1fdda:	462b      	mov	r3, r5
   1fddc:	4628      	mov	r0, r5
   1fdde:	492a      	ldr	r1, [pc, #168]	; (1fe88 <smp_ident_addr_info+0x16c>)
   1fde0:	9500      	str	r5, [sp, #0]
   1fde2:	f00f f866 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1fde6:	2008      	movs	r0, #8
   1fde8:	e7cb      	b.n	1fd82 <smp_ident_addr_info+0x66>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1fdea:	78f3      	ldrb	r3, [r6, #3]
   1fdec:	bb9b      	cbnz	r3, 1fe56 <smp_ident_addr_info+0x13a>
			dst = &conn->le.resp_addr;
   1fdee:	f106 0396 	add.w	r3, r6, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1fdf2:	781a      	ldrb	r2, [r3, #0]
   1fdf4:	2a01      	cmp	r2, #1
   1fdf6:	d11e      	bne.n	1fe36 <smp_ident_addr_info+0x11a>
		if (bt_addr_le_is_rpa(dst)) {
   1fdf8:	799a      	ldrb	r2, [r3, #6]
   1fdfa:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1fdfe:	2a40      	cmp	r2, #64	; 0x40
   1fe00:	d119      	bne.n	1fe36 <smp_ident_addr_info+0x11a>
   1fe02:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1fe06:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   1fe0a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   1fe0e:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1fe10:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
   1fe14:	b17b      	cbz	r3, 1fe36 <smp_ident_addr_info+0x11a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1fe16:	f896 308e 	ldrb.w	r3, [r6, #142]	; 0x8e
   1fe1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fe1e:	2bc0      	cmp	r3, #192	; 0xc0
   1fe20:	d009      	beq.n	1fe36 <smp_ident_addr_info+0x11a>
				bt_addr_le_copy(&keys->addr, &req->addr);
   1fe22:	4639      	mov	r1, r7
   1fe24:	1c68      	adds	r0, r5, #1
   1fe26:	f00f f81e 	bl	2ee66 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   1fe2a:	4640      	mov	r0, r8
   1fe2c:	f00f f81b 	bl	2ee66 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   1fe30:	4630      	mov	r0, r6
   1fe32:	f7fc fb6f 	bl	1c514 <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1fe36:	4628      	mov	r0, r5
   1fe38:	f7fa ff9a 	bl	1ad70 <bt_id_find_conflict>
	if (conflict) {
   1fe3c:	b170      	cbz	r0, 1fe5c <smp_ident_addr_info+0x140>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1fe3e:	4b15      	ldr	r3, [pc, #84]	; (1fe94 <smp_ident_addr_info+0x178>)
   1fe40:	2202      	movs	r2, #2
   1fe42:	9302      	str	r3, [sp, #8]
   1fe44:	2300      	movs	r3, #0
   1fe46:	4910      	ldr	r1, [pc, #64]	; (1fe88 <smp_ident_addr_info+0x16c>)
   1fe48:	4618      	mov	r0, r3
   1fe4a:	e9cd 3300 	strd	r3, r3, [sp]
   1fe4e:	f00f f830 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1fe52:	2003      	movs	r0, #3
   1fe54:	e795      	b.n	1fd82 <smp_ident_addr_info+0x66>
			dst = &conn->le.init_addr;
   1fe56:	f106 038f 	add.w	r3, r6, #143	; 0x8f
   1fe5a:	e7ca      	b.n	1fdf2 <smp_ident_addr_info+0xd6>
	bt_id_add(new_bond);
   1fe5c:	4628      	mov	r0, r5
   1fe5e:	f7fa ff97 	bl	1ad90 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1fe62:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fe66:	075b      	lsls	r3, r3, #29
   1fe68:	d503      	bpl.n	1fe72 <smp_ident_addr_info+0x156>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1fe6a:	210a      	movs	r1, #10
   1fe6c:	4620      	mov	r0, r4
   1fe6e:	f00f f82f 	bl	2eed0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1fe72:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1fe76:	b109      	cbz	r1, 1fe7c <smp_ident_addr_info+0x160>
	return 0;
   1fe78:	2000      	movs	r0, #0
   1fe7a:	e782      	b.n	1fd82 <smp_ident_addr_info+0x66>
		smp_pairing_complete(smp, 0);
   1fe7c:	4620      	mov	r0, r4
   1fe7e:	f7ff fdb9 	bl	1f9f4 <smp_pairing_complete>
   1fe82:	e7f9      	b.n	1fe78 <smp_ident_addr_info+0x15c>
   1fe84:	00037d90 	.word	0x00037d90
   1fe88:	00033274 	.word	0x00033274
   1fe8c:	00037e0e 	.word	0x00037e0e
   1fe90:	00037b53 	.word	0x00037b53
   1fe94:	00037da4 	.word	0x00037da4

0001fe98 <smp_central_ident>:
{
   1fe98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe9a:	460b      	mov	r3, r1
   1fe9c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1fe9e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1fea2:	b085      	sub	sp, #20
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1fea4:	210d      	movs	r1, #13
   1fea6:	3004      	adds	r0, #4
   1fea8:	f00e ffab 	bl	2ee02 <atomic_test_bit>
   1feac:	b318      	cbz	r0, 1fef6 <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1feae:	f105 0788 	add.w	r7, r5, #136	; 0x88
   1feb2:	7a29      	ldrb	r1, [r5, #8]
   1feb4:	463a      	mov	r2, r7
   1feb6:	2004      	movs	r0, #4
		struct bt_smp_central_ident *req = (void *)buf->data;
   1feb8:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1feba:	f00f fa86 	bl	2f3ca <bt_keys_get_type>
		if (!keys) {
   1febe:	4605      	mov	r5, r0
   1fec0:	b980      	cbnz	r0, 1fee4 <smp_central_ident+0x4c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1fec2:	4638      	mov	r0, r7
   1fec4:	f7f9 fb22 	bl	1950c <bt_addr_le_str>
   1fec8:	4b17      	ldr	r3, [pc, #92]	; (1ff28 <smp_central_ident+0x90>)
   1feca:	9003      	str	r0, [sp, #12]
   1fecc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1fed0:	4628      	mov	r0, r5
   1fed2:	462b      	mov	r3, r5
   1fed4:	2201      	movs	r2, #1
   1fed6:	4915      	ldr	r1, [pc, #84]	; (1ff2c <smp_central_ident+0x94>)
   1fed8:	9500      	str	r5, [sp, #0]
   1feda:	f00e ffea 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1fede:	2008      	movs	r0, #8
}
   1fee0:	b005      	add	sp, #20
   1fee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fee4:	4632      	mov	r2, r6
   1fee6:	f832 3b02 	ldrh.w	r3, [r2], #2
   1feea:	8303      	strh	r3, [r0, #24]
   1feec:	f8d6 3002 	ldr.w	r3, [r6, #2]
   1fef0:	6103      	str	r3, [r0, #16]
   1fef2:	6853      	ldr	r3, [r2, #4]
   1fef4:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1fef6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1fefa:	f023 0201 	bic.w	r2, r3, #1
   1fefe:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ff02:	079a      	lsls	r2, r3, #30
   1ff04:	d508      	bpl.n	1ff18 <smp_central_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ff06:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ff08:	4620      	mov	r0, r4
   1ff0a:	f00e ffe1 	bl	2eed0 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ff0e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ff12:	b129      	cbz	r1, 1ff20 <smp_central_ident+0x88>
	return 0;
   1ff14:	2000      	movs	r0, #0
   1ff16:	e7e3      	b.n	1fee0 <smp_central_ident+0x48>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ff18:	075b      	lsls	r3, r3, #29
   1ff1a:	d5f8      	bpl.n	1ff0e <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ff1c:	210a      	movs	r1, #10
   1ff1e:	e7f3      	b.n	1ff08 <smp_central_ident+0x70>
		smp_pairing_complete(smp, 0);
   1ff20:	4620      	mov	r0, r4
   1ff22:	f7ff fd67 	bl	1f9f4 <smp_pairing_complete>
   1ff26:	e7f5      	b.n	1ff14 <smp_central_ident+0x7c>
   1ff28:	00037b53 	.word	0x00037b53
   1ff2c:	00033274 	.word	0x00033274

0001ff30 <smp_pairing_failed>:
{
   1ff30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ff34:	460e      	mov	r6, r1
   1ff36:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ff38:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ff3c:	f7fe fdd8 	bl	1eaf0 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1ff40:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ff42:	4914      	ldr	r1, [pc, #80]	; (1ff94 <smp_pairing_failed+0x64>)
   1ff44:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ff46:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ff48:	9303      	str	r3, [sp, #12]
   1ff4a:	4b13      	ldr	r3, [pc, #76]	; (1ff98 <smp_pairing_failed+0x68>)
   1ff4c:	2201      	movs	r2, #1
   1ff4e:	9302      	str	r3, [sp, #8]
   1ff50:	2300      	movs	r3, #0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ff52:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ff54:	4618      	mov	r0, r3
   1ff56:	e9cd 3300 	strd	r3, r3, [sp]
   1ff5a:	f00e ffaa 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ff5e:	210a      	movs	r1, #10
   1ff60:	4638      	mov	r0, r7
   1ff62:	f00f f84c 	bl	2effe <atomic_test_and_clear_bit>
   1ff66:	b140      	cbz	r0, 1ff7a <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ff68:	b975      	cbnz	r5, 1ff88 <smp_pairing_failed+0x58>
	smp_pairing_complete(smp, req->reason);
   1ff6a:	4620      	mov	r0, r4
   1ff6c:	7831      	ldrb	r1, [r6, #0]
   1ff6e:	f7ff fd41 	bl	1f9f4 <smp_pairing_complete>
}
   1ff72:	2000      	movs	r0, #0
   1ff74:	b004      	add	sp, #16
   1ff76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1ff7a:	210b      	movs	r1, #11
   1ff7c:	4638      	mov	r0, r7
   1ff7e:	f00f f83e 	bl	2effe <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ff82:	2800      	cmp	r0, #0
   1ff84:	d1f0      	bne.n	1ff68 <smp_pairing_failed+0x38>
   1ff86:	e7f0      	b.n	1ff6a <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ff88:	692b      	ldr	r3, [r5, #16]
   1ff8a:	2b00      	cmp	r3, #0
   1ff8c:	d0ed      	beq.n	1ff6a <smp_pairing_failed+0x3a>
			smp_auth_cb->cancel(conn);
   1ff8e:	4640      	mov	r0, r8
   1ff90:	4798      	blx	r3
   1ff92:	e7ea      	b.n	1ff6a <smp_pairing_failed+0x3a>
   1ff94:	00033274 	.word	0x00033274
   1ff98:	00037ddf 	.word	0x00037ddf

0001ff9c <bt_smp_encrypt_change>:
{
   1ff9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   1ffa0:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ffa2:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1ffa6:	4604      	mov	r4, r0
   1ffa8:	460f      	mov	r7, r1
   1ffaa:	b08c      	sub	sp, #48	; 0x30
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ffac:	2101      	movs	r1, #1
   1ffae:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   1ffb0:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ffb4:	f00f f823 	bl	2effe <atomic_test_and_clear_bit>
   1ffb8:	2800      	cmp	r0, #0
   1ffba:	d068      	beq.n	2008e <bt_smp_encrypt_change+0xf2>
	if (hci_status) {
   1ffbc:	b1e7      	cbz	r7, 1fff8 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ffbe:	2103      	movs	r1, #3
   1ffc0:	4630      	mov	r0, r6
   1ffc2:	f00e ff1e 	bl	2ee02 <atomic_test_bit>
   1ffc6:	2800      	cmp	r0, #0
   1ffc8:	d061      	beq.n	2008e <bt_smp_encrypt_change+0xf2>
			uint8_t smp_err = smp_err_get(
   1ffca:	4638      	mov	r0, r7
   1ffcc:	f7fa fa08 	bl	1a3e0 <bt_security_err_get>
	switch (auth_err) {
   1ffd0:	3801      	subs	r0, #1
   1ffd2:	b2c0      	uxtb	r0, r0
   1ffd4:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   1ffd6:	bf8c      	ite	hi
   1ffd8:	2400      	movhi	r4, #0
   1ffda:	4b75      	ldrls	r3, [pc, #468]	; (201b0 <bt_smp_encrypt_change+0x214>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ffdc:	f04f 0102 	mov.w	r1, #2
   1ffe0:	bf98      	it	ls
   1ffe2:	5c1c      	ldrbls	r4, [r3, r0]
   1ffe4:	4630      	mov	r0, r6
   1ffe6:	f00e ff73 	bl	2eed0 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1ffea:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1ffec:	4628      	mov	r0, r5
}
   1ffee:	b00c      	add	sp, #48	; 0x30
   1fff0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_pairing_complete(smp, 0);
   1fff4:	f7ff bcfe 	b.w	1f9f4 <smp_pairing_complete>
	if (!conn->encrypt) {
   1fff8:	f898 300b 	ldrb.w	r3, [r8, #11]
   1fffc:	2b00      	cmp	r3, #0
   1fffe:	d046      	beq.n	2008e <bt_smp_encrypt_change+0xf2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20000:	2103      	movs	r1, #3
   20002:	4630      	mov	r0, r6
   20004:	f00e fefd 	bl	2ee02 <atomic_test_bit>
   20008:	b928      	cbnz	r0, 20016 <bt_smp_encrypt_change+0x7a>
		smp_reset(smp);
   2000a:	4628      	mov	r0, r5
}
   2000c:	b00c      	add	sp, #48	; 0x30
   2000e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		smp_reset(smp);
   20012:	f00f b806 	b.w	2f022 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   20016:	2105      	movs	r1, #5
   20018:	4630      	mov	r0, r6
   2001a:	f00e fef2 	bl	2ee02 <atomic_test_bit>
   2001e:	b1b8      	cbz	r0, 20050 <bt_smp_encrypt_change+0xb4>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   20020:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   20024:	071b      	lsls	r3, r3, #28
   20026:	d507      	bpl.n	20038 <bt_smp_encrypt_change+0x9c>
   20028:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   2002c:	071f      	lsls	r7, r3, #28
   2002e:	d503      	bpl.n	20038 <bt_smp_encrypt_change+0x9c>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   20030:	2111      	movs	r1, #17
   20032:	4630      	mov	r0, r6
   20034:	f00e ff4c 	bl	2eed0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   20038:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   2003c:	f023 0308 	bic.w	r3, r3, #8
   20040:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   20044:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   20048:	f023 0308 	bic.w	r3, r3, #8
   2004c:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   20050:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   20054:	07d8      	lsls	r0, r3, #31
   20056:	d51d      	bpl.n	20094 <bt_smp_encrypt_change+0xf8>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   20058:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2005a:	4628      	mov	r0, r5
   2005c:	f00e ff38 	bl	2eed0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   20060:	2102      	movs	r1, #2
   20062:	4630      	mov	r0, r6
   20064:	f00e ff34 	bl	2eed0 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   20068:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   2006a:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
   2006e:	b9cf      	cbnz	r7, 200a4 <bt_smp_encrypt_change+0x108>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   20070:	f103 0088 	add.w	r0, r3, #136	; 0x88
   20074:	f7f9 fa4a 	bl	1950c <bt_addr_le_str>
   20078:	4b4e      	ldr	r3, [pc, #312]	; (201b4 <bt_smp_encrypt_change+0x218>)
   2007a:	9003      	str	r0, [sp, #12]
   2007c:	e9cd 7301 	strd	r7, r3, [sp, #4]
   20080:	2201      	movs	r2, #1
   20082:	463b      	mov	r3, r7
   20084:	4638      	mov	r0, r7
   20086:	494c      	ldr	r1, [pc, #304]	; (201b8 <bt_smp_encrypt_change+0x21c>)
   20088:	9700      	str	r7, [sp, #0]
   2008a:	f00e ff12 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
}
   2008e:	b00c      	add	sp, #48	; 0x30
   20090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   20094:	0799      	lsls	r1, r3, #30
   20096:	d501      	bpl.n	2009c <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   20098:	2108      	movs	r1, #8
   2009a:	e7de      	b.n	2005a <bt_smp_encrypt_change+0xbe>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2009c:	075a      	lsls	r2, r3, #29
   2009e:	d5df      	bpl.n	20060 <bt_smp_encrypt_change+0xc4>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   200a0:	210a      	movs	r1, #10
   200a2:	e7da      	b.n	2005a <bt_smp_encrypt_change+0xbe>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   200a4:	2105      	movs	r1, #5
   200a6:	f00e feac 	bl	2ee02 <atomic_test_bit>
   200aa:	4607      	mov	r7, r0
   200ac:	b9b0      	cbnz	r0, 200dc <bt_smp_encrypt_change+0x140>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   200ae:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   200b2:	07db      	lsls	r3, r3, #31
   200b4:	d512      	bpl.n	200dc <bt_smp_encrypt_change+0x140>
	struct bt_keys *keys = conn->le.keys;
   200b6:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   200b8:	211a      	movs	r1, #26
   200ba:	a805      	add	r0, sp, #20
	struct bt_keys *keys = conn->le.keys;
   200bc:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   200c0:	f7fb fcd8 	bl	1ba74 <bt_rand>
   200c4:	4681      	mov	r9, r0
   200c6:	b170      	cbz	r0, 200e6 <bt_smp_encrypt_change+0x14a>
			LOG_ERR("Unable to get random bytes");
   200c8:	4b3c      	ldr	r3, [pc, #240]	; (201bc <bt_smp_encrypt_change+0x220>)
   200ca:	2201      	movs	r2, #1
   200cc:	e9cd 7301 	strd	r7, r3, [sp, #4]
   200d0:	4638      	mov	r0, r7
   200d2:	463b      	mov	r3, r7
   200d4:	4938      	ldr	r1, [pc, #224]	; (201b8 <bt_smp_encrypt_change+0x21c>)
   200d6:	9700      	str	r7, [sp, #0]
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   200d8:	f00e feeb 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   200dc:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   200e0:	2900      	cmp	r1, #0
   200e2:	d1d4      	bne.n	2008e <bt_smp_encrypt_change+0xf2>
   200e4:	e782      	b.n	1ffec <bt_smp_encrypt_change+0x50>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   200e6:	2106      	movs	r1, #6
   200e8:	4628      	mov	r0, r5
   200ea:	f00e ff01 	bl	2eef0 <smp_create_pdu.constprop.0>
		if (!buf) {
   200ee:	4607      	mov	r7, r0
   200f0:	b938      	cbnz	r0, 20102 <bt_smp_encrypt_change+0x166>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   200f2:	4b33      	ldr	r3, [pc, #204]	; (201c0 <bt_smp_encrypt_change+0x224>)
   200f4:	e9cd 7301 	strd	r7, r3, [sp, #4]
   200f8:	2201      	movs	r2, #1
   200fa:	463b      	mov	r3, r7
   200fc:	492e      	ldr	r1, [pc, #184]	; (201b8 <bt_smp_encrypt_change+0x21c>)
   200fe:	9700      	str	r7, [sp, #0]
   20100:	e7ea      	b.n	200d8 <bt_smp_encrypt_change+0x13c>
	return net_buf_simple_add(&buf->b, len);
   20102:	2110      	movs	r1, #16
   20104:	300c      	adds	r0, #12
   20106:	f00f fa8e 	bl	2f626 <net_buf_simple_add>
   2010a:	f898 200c 	ldrb.w	r2, [r8, #12]
   2010e:	a905      	add	r1, sp, #20
   20110:	4682      	mov	sl, r0
   20112:	f011 fc86 	bl	31a22 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   20116:	f898 000c 	ldrb.w	r0, [r8, #12]
   2011a:	280f      	cmp	r0, #15
   2011c:	d805      	bhi.n	2012a <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   2011e:	f1c0 0210 	rsb	r2, r0, #16
   20122:	4649      	mov	r1, r9
   20124:	4450      	add	r0, sl
   20126:	f011 fcb6 	bl	31a96 <memset>
		smp_send(smp, buf, NULL, NULL);
   2012a:	4639      	mov	r1, r7
   2012c:	2200      	movs	r2, #0
   2012e:	4628      	mov	r0, r5
   20130:	f00e fea2 	bl	2ee78 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   20134:	2107      	movs	r1, #7
   20136:	4628      	mov	r0, r5
   20138:	f00e feda 	bl	2eef0 <smp_create_pdu.constprop.0>
		if (!buf) {
   2013c:	4607      	mov	r7, r0
   2013e:	b908      	cbnz	r0, 20144 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   20140:	4b20      	ldr	r3, [pc, #128]	; (201c4 <bt_smp_encrypt_change+0x228>)
   20142:	e7d7      	b.n	200f4 <bt_smp_encrypt_change+0x158>
   20144:	210a      	movs	r1, #10
   20146:	300c      	adds	r0, #12
   20148:	f00f fa6d 	bl	2f626 <net_buf_simple_add>
   2014c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2014e:	aa09      	add	r2, sp, #36	; 0x24
   20150:	ca03      	ldmia	r2!, {r0, r1}
   20152:	f8c3 0002 	str.w	r0, [r3, #2]
   20156:	f8c3 1006 	str.w	r1, [r3, #6]
   2015a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
		smp_send(smp, buf, smp_ident_sent, NULL);
   2015e:	4639      	mov	r1, r7
   20160:	4628      	mov	r0, r5
   20162:	801a      	strh	r2, [r3, #0]
   20164:	4a18      	ldr	r2, [pc, #96]	; (201c8 <bt_smp_encrypt_change+0x22c>)
   20166:	f00e fe87 	bl	2ee78 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   2016a:	4630      	mov	r0, r6
   2016c:	210d      	movs	r1, #13
   2016e:	f00e fe48 	bl	2ee02 <atomic_test_bit>
   20172:	ae09      	add	r6, sp, #36	; 0x24
   20174:	2800      	cmp	r0, #0
   20176:	d0b1      	beq.n	200dc <bt_smp_encrypt_change+0x140>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   20178:	2101      	movs	r1, #1
   2017a:	4640      	mov	r0, r8
   2017c:	f00f f935 	bl	2f3ea <bt_keys_add_type>
   20180:	f108 074a 	add.w	r7, r8, #74	; 0x4a
   20184:	ab05      	add	r3, sp, #20
   20186:	461a      	mov	r2, r3
   20188:	ca03      	ldmia	r2!, {r0, r1}
   2018a:	42b2      	cmp	r2, r6
   2018c:	6038      	str	r0, [r7, #0]
   2018e:	6079      	str	r1, [r7, #4]
   20190:	4613      	mov	r3, r2
   20192:	f107 0708 	add.w	r7, r7, #8
   20196:	d1f6      	bne.n	20186 <bt_smp_encrypt_change+0x1ea>
   20198:	4633      	mov	r3, r6
   2019a:	cb03      	ldmia	r3!, {r0, r1}
   2019c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   201a0:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   201a4:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   201a8:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   201ac:	e796      	b.n	200dc <bt_smp_encrypt_change+0x140>
   201ae:	bf00      	nop
   201b0:	00037e94 	.word	0x00037e94
   201b4:	00037e01 	.word	0x00037e01
   201b8:	00033274 	.word	0x00033274
   201bc:	00037e16 	.word	0x00037e16
   201c0:	00037e31 	.word	0x00037e31
   201c4:	00037e58 	.word	0x00037e58
   201c8:	0002f39d 	.word	0x0002f39d

000201cc <smp_timeout>:
{
   201cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("SMP Timeout");
   201ce:	4b0c      	ldr	r3, [pc, #48]	; (20200 <smp_timeout+0x34>)
{
   201d0:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   201d2:	9302      	str	r3, [sp, #8]
   201d4:	2300      	movs	r3, #0
   201d6:	2201      	movs	r2, #1
   201d8:	4618      	mov	r0, r3
   201da:	e9cd 3300 	strd	r3, r3, [sp]
   201de:	4909      	ldr	r1, [pc, #36]	; (20204 <smp_timeout+0x38>)
   201e0:	f00e fe67 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   201e4:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
   201e8:	2108      	movs	r1, #8
   201ea:	f7ff fc03 	bl	1f9f4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   201ee:	2104      	movs	r1, #4
   201f0:	f5a4 70ba 	sub.w	r0, r4, #372	; 0x174
}
   201f4:	b004      	add	sp, #16
   201f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   201fa:	f00e be69 	b.w	2eed0 <atomic_set_bit>
   201fe:	bf00      	nop
   20200:	00037e80 	.word	0x00037e80
   20204:	00033274 	.word	0x00033274

00020208 <bt_smp_update_keys>:
{
   20208:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2020c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2020e:	f7fe fcc9 	bl	1eba4 <smp_chan_get>
	if (!smp) {
   20212:	4605      	mov	r5, r0
   20214:	2800      	cmp	r0, #0
   20216:	d074      	beq.n	20302 <bt_smp_update_keys+0xfa>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   20218:	1d07      	adds	r7, r0, #4
   2021a:	2103      	movs	r1, #3
   2021c:	4638      	mov	r0, r7
   2021e:	f00e fdf0 	bl	2ee02 <atomic_test_bit>
   20222:	2800      	cmp	r0, #0
   20224:	d06d      	beq.n	20302 <bt_smp_update_keys+0xfa>
	if (conn->le.keys) {
   20226:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2022a:	b108      	cbz	r0, 20230 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   2022c:	f00f f8e1 	bl	2f3f2 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   20230:	f104 0888 	add.w	r8, r4, #136	; 0x88
   20234:	4641      	mov	r1, r8
   20236:	7a20      	ldrb	r0, [r4, #8]
   20238:	f000 f894 	bl	20364 <bt_keys_get_addr>
   2023c:	4606      	mov	r6, r0
   2023e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   20242:	b9a0      	cbnz	r0, 2026e <bt_smp_update_keys+0x66>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   20244:	4640      	mov	r0, r8
   20246:	f7f9 f961 	bl	1950c <bt_addr_le_str>
   2024a:	4b39      	ldr	r3, [pc, #228]	; (20330 <bt_smp_update_keys+0x128>)
   2024c:	9003      	str	r0, [sp, #12]
   2024e:	e9cd 6301 	strd	r6, r3, [sp, #4]
   20252:	4630      	mov	r0, r6
   20254:	4633      	mov	r3, r6
   20256:	2201      	movs	r2, #1
   20258:	4936      	ldr	r1, [pc, #216]	; (20334 <bt_smp_update_keys+0x12c>)
   2025a:	9600      	str	r6, [sp, #0]
   2025c:	f00e fe29 	bl	2eeb2 <z_log_msg_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   20260:	2108      	movs	r1, #8
   20262:	4628      	mov	r0, r5
}
   20264:	b004      	add	sp, #16
   20266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2026a:	f7ff bc41 	b.w	1faf0 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   2026e:	210e      	movs	r1, #14
   20270:	4638      	mov	r0, r7
   20272:	f00e fdc6 	bl	2ee02 <atomic_test_bit>
   20276:	b128      	cbz	r0, 20284 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   20278:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   2027c:	7b53      	ldrb	r3, [r2, #13]
   2027e:	f043 0302 	orr.w	r3, r3, #2
   20282:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   20284:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   20286:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   2028a:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   2028c:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   2028e:	d83b      	bhi.n	20308 <bt_smp_update_keys+0x100>
   20290:	2a00      	cmp	r2, #0
   20292:	d040      	beq.n	20316 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   20294:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20298:	7b53      	ldrb	r3, [r2, #13]
   2029a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2029e:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   202a0:	7d2b      	ldrb	r3, [r5, #20]
   202a2:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   202a4:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   202a8:	428b      	cmp	r3, r1
   202aa:	bf28      	it	cs
   202ac:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   202ae:	4638      	mov	r0, r7
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   202b0:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   202b2:	2105      	movs	r1, #5
   202b4:	f00e fda5 	bl	2ee02 <atomic_test_bit>
   202b8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   202bc:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   202be:	b398      	cbz	r0, 20328 <bt_smp_update_keys+0x120>
		conn->le.keys->flags |= BT_KEYS_SC;
   202c0:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   202c4:	210d      	movs	r1, #13
   202c6:	4638      	mov	r0, r7
		conn->le.keys->flags |= BT_KEYS_SC;
   202c8:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   202ca:	f00e fd9a 	bl	2ee02 <atomic_test_bit>
   202ce:	b1c0      	cbz	r0, 20302 <bt_smp_update_keys+0xfa>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   202d0:	2120      	movs	r1, #32
   202d2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   202d6:	f00f f888 	bl	2f3ea <bt_keys_add_type>
   202da:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   202de:	f105 0247 	add.w	r2, r5, #71	; 0x47
   202e2:	331a      	adds	r3, #26
   202e4:	3557      	adds	r5, #87	; 0x57
   202e6:	f852 1b04 	ldr.w	r1, [r2], #4
   202ea:	42aa      	cmp	r2, r5
   202ec:	f843 1b04 	str.w	r1, [r3], #4
   202f0:	d1f9      	bne.n	202e6 <bt_smp_update_keys+0xde>
__ssp_bos_icheck3(memset, void *, int)
   202f2:	2300      	movs	r3, #0
   202f4:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   202f8:	6113      	str	r3, [r2, #16]
   202fa:	6153      	str	r3, [r2, #20]
   202fc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20300:	8313      	strh	r3, [r2, #24]
}
   20302:	b004      	add	sp, #16
   20304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   20308:	3a05      	subs	r2, #5
   2030a:	2a01      	cmp	r2, #1
   2030c:	d803      	bhi.n	20316 <bt_smp_update_keys+0x10e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   2030e:	f043 0320 	orr.w	r3, r3, #32
   20312:	734b      	strb	r3, [r1, #13]
   20314:	e7be      	b.n	20294 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   20316:	f023 0320 	bic.w	r3, r3, #32
   2031a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   2031c:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   20320:	7b53      	ldrb	r3, [r2, #13]
   20322:	f023 0301 	bic.w	r3, r3, #1
   20326:	e7ba      	b.n	2029e <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   20328:	f022 0210 	bic.w	r2, r2, #16
   2032c:	735a      	strb	r2, [r3, #13]
   2032e:	e7e8      	b.n	20302 <bt_smp_update_keys+0xfa>
   20330:	00037b53 	.word	0x00037b53
   20334:	00033274 	.word	0x00033274

00020338 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   20338:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2033a:	4b07      	ldr	r3, [pc, #28]	; (20358 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2033c:	4807      	ldr	r0, [pc, #28]	; (2035c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2033e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   20342:	f003 0306 	and.w	r3, r3, #6
   20346:	1f9a      	subs	r2, r3, #6
   20348:	4253      	negs	r3, r2
   2034a:	4153      	adcs	r3, r2
   2034c:	4a04      	ldr	r2, [pc, #16]	; (20360 <bt_smp_init+0x28>)
   2034e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   20350:	f7fb fbba 	bl	1bac8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   20354:	2000      	movs	r0, #0
   20356:	bd08      	pop	{r3, pc}
   20358:	20008000 	.word	0x20008000
   2035c:	20008648 	.word	0x20008648
   20360:	20031b8f 	.word	0x20031b8f

00020364 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   20364:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20366:	4c10      	ldr	r4, [pc, #64]	; (203a8 <bt_keys_get_addr+0x44>)
{
   20368:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2036a:	f814 3b01 	ldrb.w	r3, [r4], #1
{
   2036e:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   20370:	4283      	cmp	r3, r0
   20372:	d007      	beq.n	20384 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   20374:	2207      	movs	r2, #7
   20376:	490d      	ldr	r1, [pc, #52]	; (203ac <bt_keys_get_addr+0x48>)
   20378:	480d      	ldr	r0, [pc, #52]	; (203b0 <bt_keys_get_addr+0x4c>)
   2037a:	f011 fb42 	bl	31a02 <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   2037e:	b148      	cbz	r0, 20394 <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   20380:	2000      	movs	r0, #0
}
   20382:	bd70      	pop	{r4, r5, r6, pc}
   20384:	2207      	movs	r2, #7
   20386:	4620      	mov	r0, r4
   20388:	f011 fb3b 	bl	31a02 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   2038c:	2800      	cmp	r0, #0
   2038e:	d1f1      	bne.n	20374 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   20390:	4805      	ldr	r0, [pc, #20]	; (203a8 <bt_keys_get_addr+0x44>)
   20392:	e7f6      	b.n	20382 <bt_keys_get_addr+0x1e>
		keys->id = id;
   20394:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   20398:	682b      	ldr	r3, [r5, #0]
   2039a:	6023      	str	r3, [r4, #0]
   2039c:	88ab      	ldrh	r3, [r5, #4]
   2039e:	80a3      	strh	r3, [r4, #4]
   203a0:	79ab      	ldrb	r3, [r5, #6]
   203a2:	71a3      	strb	r3, [r4, #6]
}
   203a4:	e7f4      	b.n	20390 <bt_keys_get_addr+0x2c>
   203a6:	bf00      	nop
   203a8:	20030b58 	.word	0x20030b58
   203ac:	00036982 	.word	0x00036982
   203b0:	20030b59 	.word	0x20030b59

000203b4 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   203b4:	b410      	push	{r4}
   203b6:	460b      	mov	r3, r1
   203b8:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   203ba:	4a04      	ldr	r2, [pc, #16]	; (203cc <bt_keys_foreach_type+0x18>)
   203bc:	89d4      	ldrh	r4, [r2, #14]
   203be:	4204      	tst	r4, r0
   203c0:	d002      	beq.n	203c8 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
   203c2:	4610      	mov	r0, r2
		}
	}
}
   203c4:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   203c6:	4718      	bx	r3
}
   203c8:	bc10      	pop	{r4}
   203ca:	4770      	bx	lr
   203cc:	20030b58 	.word	0x20030b58

000203d0 <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   203d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   203d4:	2300      	movs	r3, #0
{
   203d6:	4605      	mov	r5, r0
   203d8:	460e      	mov	r6, r1
   203da:	4617      	mov	r7, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   203dc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 20410 <bt_keys_find+0x40>
   203e0:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   203e4:	f898 2000 	ldrb.w	r2, [r8]
   203e8:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   203ea:	b113      	cbz	r3, 203f2 <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   203ec:	2000      	movs	r0, #0
}
   203ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   203f2:	2c00      	cmp	r4, #0
   203f4:	d0fa      	beq.n	203ec <bt_keys_find+0x1c>
   203f6:	42b2      	cmp	r2, r6
   203f8:	d1f8      	bne.n	203ec <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   203fa:	2207      	movs	r2, #7
   203fc:	4639      	mov	r1, r7
   203fe:	4805      	ldr	r0, [pc, #20]	; (20414 <bt_keys_find+0x44>)
   20400:	f011 faff 	bl	31a02 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20404:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   20406:	2800      	cmp	r0, #0
   20408:	d1ea      	bne.n	203e0 <bt_keys_find+0x10>
			return &key_pool[i];
   2040a:	4801      	ldr	r0, [pc, #4]	; (20410 <bt_keys_find+0x40>)
   2040c:	e7ef      	b.n	203ee <bt_keys_find+0x1e>
   2040e:	bf00      	nop
   20410:	20030b58 	.word	0x20030b58
   20414:	20030b59 	.word	0x20030b59

00020418 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   20418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2041a:	780b      	ldrb	r3, [r1, #0]
   2041c:	4606      	mov	r6, r0
   2041e:	2b01      	cmp	r3, #1
   20420:	460c      	mov	r4, r1
   20422:	d001      	beq.n	20428 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   20424:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   20426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   20428:	798b      	ldrb	r3, [r1, #6]
   2042a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2042e:	2b40      	cmp	r3, #64	; 0x40
   20430:	d1f8      	bne.n	20424 <bt_keys_find_irk+0xc>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   20432:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   20434:	4d18      	ldr	r5, [pc, #96]	; (20498 <bt_keys_find_irk+0x80>)
	return memcmp(a, b, sizeof(*a));
   20436:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   2043a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   2043c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2043e:	f002 0202 	and.w	r2, r2, #2
   20442:	b1db      	cbz	r3, 2047c <bt_keys_find_irk+0x64>
   20444:	2300      	movs	r3, #0
   20446:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   20448:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2044a:	f002 0202 	and.w	r2, r2, #2
   2044e:	2b00      	cmp	r3, #0
   20450:	d1e8      	bne.n	20424 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   20452:	2a00      	cmp	r2, #0
   20454:	d0e6      	beq.n	20424 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   20456:	42b1      	cmp	r1, r6
   20458:	d1e4      	bne.n	20424 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2045a:	1c67      	adds	r7, r4, #1
   2045c:	4639      	mov	r1, r7
   2045e:	480f      	ldr	r0, [pc, #60]	; (2049c <bt_keys_find_irk+0x84>)
   20460:	f00c ffbc 	bl	2d3dc <bt_rpa_irk_matches>
   20464:	2301      	movs	r3, #1
   20466:	2800      	cmp	r0, #0
   20468:	d0ed      	beq.n	20446 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2046a:	f8d4 3001 	ldr.w	r3, [r4, #1]
   2046e:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   20472:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   20476:	4b0a      	ldr	r3, [pc, #40]	; (204a0 <bt_keys_find_irk+0x88>)
   20478:	809a      	strh	r2, [r3, #4]
}
   2047a:	e00b      	b.n	20494 <bt_keys_find_irk+0x7c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2047c:	2a00      	cmp	r2, #0
   2047e:	d0e2      	beq.n	20446 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   20480:	42b0      	cmp	r0, r6
   20482:	d1e0      	bne.n	20446 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   20484:	2206      	movs	r2, #6
   20486:	4639      	mov	r1, r7
   20488:	1c60      	adds	r0, r4, #1
   2048a:	f011 faba 	bl	31a02 <memcmp>
   2048e:	2301      	movs	r3, #1
   20490:	2800      	cmp	r0, #0
   20492:	d1d2      	bne.n	2043a <bt_keys_find_irk+0x22>
			return &key_pool[i];
   20494:	4800      	ldr	r0, [pc, #0]	; (20498 <bt_keys_find_irk+0x80>)
   20496:	e7c6      	b.n	20426 <bt_keys_find_irk+0xe>
   20498:	20030b58 	.word	0x20030b58
   2049c:	20030b82 	.word	0x20030b82
   204a0:	20030b92 	.word	0x20030b92

000204a4 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   204a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   204a6:	4c06      	ldr	r4, [pc, #24]	; (204c0 <bt_keys_find_addr+0x1c>)
   204a8:	7823      	ldrb	r3, [r4, #0]
   204aa:	4283      	cmp	r3, r0
   204ac:	d104      	bne.n	204b8 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   204ae:	2207      	movs	r2, #7
   204b0:	1c60      	adds	r0, r4, #1
   204b2:	f011 faa6 	bl	31a02 <memcmp>
   204b6:	b108      	cbz	r0, 204bc <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   204b8:	2000      	movs	r0, #0
}
   204ba:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   204bc:	4620      	mov	r0, r4
   204be:	e7fc      	b.n	204ba <bt_keys_find_addr+0x16>
   204c0:	20030b58 	.word	0x20030b58

000204c4 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   204c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204c8:	b09a      	sub	sp, #104	; 0x68
   204ca:	4616      	mov	r6, r2
   204cc:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   204d0:	aa0c      	add	r2, sp, #48	; 0x30
{
   204d2:	4684      	mov	ip, r0
   204d4:	468a      	mov	sl, r1
   204d6:	4690      	mov	r8, r2
   204d8:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   204da:	4b2c      	ldr	r3, [pc, #176]	; (2058c <bt_crypto_f5+0xc8>)
   204dc:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   204e0:	4614      	mov	r4, r2
   204e2:	6818      	ldr	r0, [r3, #0]
   204e4:	6859      	ldr	r1, [r3, #4]
   204e6:	3308      	adds	r3, #8
   204e8:	c403      	stmia	r4!, {r0, r1}
   204ea:	4573      	cmp	r3, lr
   204ec:	4622      	mov	r2, r4
   204ee:	d1f7      	bne.n	204e0 <bt_crypto_f5+0x1c>
   204f0:	6818      	ldr	r0, [r3, #0]
   204f2:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   204f4:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   204f6:	6020      	str	r0, [r4, #0]
   204f8:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   204fa:	2220      	movs	r2, #32
   204fc:	a804      	add	r0, sp, #16
   204fe:	f00e ff86 	bl	2f40e <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   20502:	466b      	mov	r3, sp
   20504:	2220      	movs	r2, #32
   20506:	4822      	ldr	r0, [pc, #136]	; (20590 <bt_crypto_f5+0xcc>)
   20508:	a904      	add	r1, sp, #16
   2050a:	f00e ff98 	bl	2f43e <bt_crypto_aes_cmac>
	if (err) {
   2050e:	4604      	mov	r4, r0
   20510:	bbc0      	cbnz	r0, 20584 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   20512:	2210      	movs	r2, #16
   20514:	4651      	mov	r1, sl
   20516:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   2051a:	f00e ff78 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2051e:	2210      	movs	r2, #16
   20520:	4631      	mov	r1, r6
   20522:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   20526:	f00e ff72 	bl	2f40e <sys_memcpy_swap>
	m[37] = a1->type;
   2052a:	4629      	mov	r1, r5
   2052c:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   20530:	2206      	movs	r2, #6
   20532:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   20536:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2053a:	f00e ff68 	bl	2f40e <sys_memcpy_swap>
	m[44] = a2->type;
   2053e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   20540:	2206      	movs	r2, #6
	m[44] = a2->type;
   20542:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   20546:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   2054a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2054e:	f00e ff5e 	bl	2f40e <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   20552:	464b      	mov	r3, r9
   20554:	2235      	movs	r2, #53	; 0x35
   20556:	4641      	mov	r1, r8
   20558:	4668      	mov	r0, sp
   2055a:	f00e ff70 	bl	2f43e <bt_crypto_aes_cmac>
	if (err) {
   2055e:	4604      	mov	r4, r0
   20560:	b980      	cbnz	r0, 20584 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   20562:	4648      	mov	r0, r9
   20564:	f00e ff5d 	bl	2f422 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   20568:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   2056a:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   2056c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   20570:	4641      	mov	r1, r8
   20572:	463b      	mov	r3, r7
   20574:	4668      	mov	r0, sp
   20576:	f00e ff62 	bl	2f43e <bt_crypto_aes_cmac>
	if (err) {
   2057a:	4604      	mov	r4, r0
   2057c:	b910      	cbnz	r0, 20584 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   2057e:	4638      	mov	r0, r7
   20580:	f00e ff4f 	bl	2f422 <sys_mem_swap.constprop.0>

	return 0;
}
   20584:	4620      	mov	r0, r4
   20586:	b01a      	add	sp, #104	; 0x68
   20588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2058c:	00033433 	.word	0x00033433
   20590:	00037eed 	.word	0x00037eed

00020594 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   20594:	b570      	push	{r4, r5, r6, lr}
   20596:	460e      	mov	r6, r1
   20598:	461d      	mov	r5, r3
   2059a:	4614      	mov	r4, r2
   2059c:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   2059e:	4601      	mov	r1, r0
   205a0:	2220      	movs	r2, #32
   205a2:	a804      	add	r0, sp, #16
   205a4:	f00e ff33 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   205a8:	2220      	movs	r2, #32
   205aa:	4631      	mov	r1, r6
   205ac:	a80c      	add	r0, sp, #48	; 0x30
   205ae:	f00e ff2e 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   205b2:	2210      	movs	r2, #16
   205b4:	4629      	mov	r1, r5
   205b6:	a814      	add	r0, sp, #80	; 0x50
   205b8:	f00e ff29 	bl	2f40e <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   205bc:	2210      	movs	r2, #16
   205be:	4621      	mov	r1, r4
   205c0:	4668      	mov	r0, sp
   205c2:	f00e ff24 	bl	2f40e <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   205c6:	466b      	mov	r3, sp
   205c8:	2250      	movs	r2, #80	; 0x50
   205ca:	4618      	mov	r0, r3
   205cc:	a904      	add	r1, sp, #16
   205ce:	f00e ff36 	bl	2f43e <bt_crypto_aes_cmac>
	if (err) {
   205d2:	b940      	cbnz	r0, 205e6 <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   205d4:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   205d6:	4a05      	ldr	r2, [pc, #20]	; (205ec <bt_crypto_g2+0x58>)
   205d8:	ba1b      	rev	r3, r3
   205da:	fbb3 f1f2 	udiv	r1, r3, r2
   205de:	fb02 3311 	mls	r3, r2, r1, r3
   205e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   205e4:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   205e6:	b018      	add	sp, #96	; 0x60
   205e8:	bd70      	pop	{r4, r5, r6, pc}
   205ea:	bf00      	nop
   205ec:	000f4240 	.word	0x000f4240

000205f0 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   205f0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   205f2:	4804      	ldr	r0, [pc, #16]	; (20604 <fs_init+0x14>)
   205f4:	f010 fd2b 	bl	3104e <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   205f8:	4b03      	ldr	r3, [pc, #12]	; (20608 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   205fa:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   205fc:	e9c3 3300 	strd	r3, r3, [r3]
   20600:	bd08      	pop	{r3, pc}
   20602:	bf00      	nop
   20604:	20030bb4 	.word	0x20030bb4
   20608:	20030bc8 	.word	0x20030bc8

0002060c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   2060c:	222c      	movs	r2, #44	; 0x2c
   2060e:	4b02      	ldr	r3, [pc, #8]	; (20618 <net_buf_pool_get+0xc>)
   20610:	fb02 3000 	mla	r0, r2, r0, r3
   20614:	4770      	bx	lr
   20616:	bf00      	nop
   20618:	20008f00 	.word	0x20008f00

0002061c <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2061c:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2061e:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20620:	4b05      	ldr	r3, [pc, #20]	; (20638 <net_buf_id+0x1c>)
   20622:	fb01 3302 	mla	r3, r1, r2, r3
   20626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20628:	7f1b      	ldrb	r3, [r3, #28]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   2062a:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2062c:	331b      	adds	r3, #27
   2062e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   20632:	fbb0 f0f3 	udiv	r0, r0, r3
   20636:	4770      	bx	lr
   20638:	20008f00 	.word	0x20008f00

0002063c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   2063c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2063e:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20640:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20642:	4b09      	ldr	r3, [pc, #36]	; (20668 <fixed_data_alloc+0x2c>)
   20644:	fb04 3302 	mla	r3, r4, r2, r3
   20648:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   2064a:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2064c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   2064e:	681a      	ldr	r2, [r3, #0]
   20650:	4294      	cmp	r4, r2
   20652:	bf94      	ite	ls
   20654:	600c      	strls	r4, [r1, #0]
   20656:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   20658:	e9d3 5400 	ldrd	r5, r4, [r3]
   2065c:	f7ff ffde 	bl	2061c <net_buf_id>
}
   20660:	fb05 4000 	mla	r0, r5, r0, r4
   20664:	bd38      	pop	{r3, r4, r5, pc}
   20666:	bf00      	nop
   20668:	20008f00 	.word	0x20008f00

0002066c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2066c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20670:	4605      	mov	r5, r0
   20672:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20674:	4610      	mov	r0, r2
   20676:	4619      	mov	r1, r3
{
   20678:	4691      	mov	r9, r2
   2067a:	4698      	mov	r8, r3
   2067c:	4617      	mov	r7, r2
   2067e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20680:	f010 fffb 	bl	3167a <sys_clock_timeout_end_calc>
   20684:	4682      	mov	sl, r0
   20686:	468b      	mov	fp, r1
	__asm__ volatile(
   20688:	f04f 0320 	mov.w	r3, #32
   2068c:	f3ef 8111 	mrs	r1, BASEPRI
   20690:	f383 8812 	msr	BASEPRI_MAX, r3
   20694:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   20698:	8b6b      	ldrh	r3, [r5, #26]
   2069a:	2b00      	cmp	r3, #0
   2069c:	d058      	beq.n	20750 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2069e:	8b2a      	ldrh	r2, [r5, #24]
   206a0:	429a      	cmp	r2, r3
   206a2:	d93c      	bls.n	2071e <net_buf_alloc_len+0xb2>
   206a4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   206a6:	2200      	movs	r2, #0
   206a8:	2300      	movs	r3, #0
   206aa:	4628      	mov	r0, r5
   206ac:	f005 fade 	bl	25c6c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   206b0:	9900      	ldr	r1, [sp, #0]
   206b2:	4604      	mov	r4, r0
   206b4:	2800      	cmp	r0, #0
   206b6:	d032      	beq.n	2071e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   206b8:	f381 8811 	msr	BASEPRI, r1
   206bc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   206c0:	9b01      	ldr	r3, [sp, #4]
   206c2:	2b00      	cmp	r3, #0
   206c4:	d055      	beq.n	20772 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   206c6:	ea58 0309 	orrs.w	r3, r8, r9
   206ca:	d00f      	beq.n	206ec <net_buf_alloc_len+0x80>
   206cc:	f1b8 3fff 	cmp.w	r8, #4294967295
   206d0:	bf08      	it	eq
   206d2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   206d6:	d009      	beq.n	206ec <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   206d8:	f006 f9f4 	bl	26ac4 <sys_clock_tick_get>
   206dc:	ebba 0700 	subs.w	r7, sl, r0
   206e0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   206e4:	2e00      	cmp	r6, #0
   206e6:	bfbc      	itt	lt
   206e8:	2700      	movlt	r7, #0
   206ea:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   206ec:	f04f 082c 	mov.w	r8, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   206f0:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   206f2:	4d25      	ldr	r5, [pc, #148]	; (20788 <net_buf_alloc_len+0x11c>)
   206f4:	463a      	mov	r2, r7
   206f6:	fb08 5303 	mla	r3, r8, r3, r5
   206fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   206fc:	4620      	mov	r0, r4
   206fe:	681b      	ldr	r3, [r3, #0]
   20700:	a901      	add	r1, sp, #4
   20702:	f8d3 9000 	ldr.w	r9, [r3]
   20706:	4633      	mov	r3, r6
   20708:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2070a:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   2070c:	2800      	cmp	r0, #0
   2070e:	d131      	bne.n	20774 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   20710:	7aa0      	ldrb	r0, [r4, #10]
   20712:	4621      	mov	r1, r4
   20714:	fb00 5008 	mla	r0, r0, r8, r5
   20718:	f010 fd2a 	bl	31170 <k_queue_prepend>
}
   2071c:	e024      	b.n	20768 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   2071e:	8b68      	ldrh	r0, [r5, #26]
   20720:	1e43      	subs	r3, r0, #1
   20722:	836b      	strh	r3, [r5, #26]
   20724:	f381 8811 	msr	BASEPRI, r1
   20728:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   2072c:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   2072e:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20730:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20732:	331b      	adds	r3, #27
   20734:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20738:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2073a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   2073e:	4b12      	ldr	r3, [pc, #72]	; (20788 <net_buf_alloc_len+0x11c>)
   20740:	4a12      	ldr	r2, [pc, #72]	; (2078c <net_buf_alloc_len+0x120>)
   20742:	1aeb      	subs	r3, r5, r3
   20744:	109b      	asrs	r3, r3, #2
   20746:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   20748:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   2074a:	7f2b      	ldrb	r3, [r5, #28]
   2074c:	72e3      	strb	r3, [r4, #11]
		goto success;
   2074e:	e7b7      	b.n	206c0 <net_buf_alloc_len+0x54>
   20750:	f381 8811 	msr	BASEPRI, r1
   20754:	f3bf 8f6f 	isb	sy
   20758:	464a      	mov	r2, r9
   2075a:	4643      	mov	r3, r8
   2075c:	4628      	mov	r0, r5
   2075e:	f005 fa85 	bl	25c6c <z_impl_k_queue_get>
	if (!buf) {
   20762:	4604      	mov	r4, r0
   20764:	2800      	cmp	r0, #0
   20766:	d1ab      	bne.n	206c0 <net_buf_alloc_len+0x54>
		return NULL;
   20768:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2076a:	4620      	mov	r0, r4
   2076c:	b003      	add	sp, #12
   2076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   20772:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   20774:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20776:	2201      	movs	r2, #1
	buf->frags = NULL;
   20778:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   2077a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   2077c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   2077e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   20780:	6963      	ldr	r3, [r4, #20]
   20782:	8262      	strh	r2, [r4, #18]
   20784:	60e3      	str	r3, [r4, #12]
	return buf;
   20786:	e7f0      	b.n	2076a <net_buf_alloc_len+0xfe>
   20788:	20008f00 	.word	0x20008f00
   2078c:	ba2e8ba3 	.word	0xba2e8ba3

00020790 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   20790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20794:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   20796:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   20798:	272c      	movs	r7, #44	; 0x2c
   2079a:	4d15      	ldr	r5, [pc, #84]	; (207f0 <net_buf_unref+0x60>)
	while (buf) {
   2079c:	b90c      	cbnz	r4, 207a2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   207a2:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   207a4:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   207a8:	3b01      	subs	r3, #1
   207aa:	b2db      	uxtb	r3, r3
   207ac:	7223      	strb	r3, [r4, #8]
   207ae:	2b00      	cmp	r3, #0
   207b0:	d1f5      	bne.n	2079e <net_buf_unref+0xe>
		if (buf->__buf) {
   207b2:	6961      	ldr	r1, [r4, #20]
   207b4:	b159      	cbz	r1, 207ce <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   207b6:	7a63      	ldrb	r3, [r4, #9]
   207b8:	07db      	lsls	r3, r3, #31
   207ba:	d407      	bmi.n	207cc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   207bc:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   207be:	4620      	mov	r0, r4
   207c0:	fb07 5303 	mla	r3, r7, r3, r5
   207c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   207c6:	681b      	ldr	r3, [r3, #0]
   207c8:	689b      	ldr	r3, [r3, #8]
   207ca:	4798      	blx	r3
			buf->__buf = NULL;
   207cc:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   207ce:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   207d0:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   207d2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   207d6:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   207d8:	6a1b      	ldr	r3, [r3, #32]
   207da:	b11b      	cbz	r3, 207e4 <net_buf_unref+0x54>
			pool->destroy(buf);
   207dc:	4620      	mov	r0, r4
   207de:	4798      	blx	r3
{
   207e0:	4644      	mov	r4, r8
   207e2:	e7db      	b.n	2079c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   207e4:	4621      	mov	r1, r4
   207e6:	fb00 5007 	mla	r0, r0, r7, r5
   207ea:	f010 fcc1 	bl	31170 <k_queue_prepend>
}
   207ee:	e7f7      	b.n	207e0 <net_buf_unref+0x50>
   207f0:	20008f00 	.word	0x20008f00

000207f4 <xoshiro128_next>:
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
	}
}

static uint32_t xoshiro128_next(void)
{
   207f4:	b570      	push	{r4, r5, r6, lr}
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   207f6:	4b0c      	ldr	r3, [pc, #48]	; (20828 <xoshiro128_next+0x34>)
   207f8:	6819      	ldr	r1, [r3, #0]
   207fa:	68d8      	ldr	r0, [r3, #12]

	const uint32_t t = state[1] << 9;

	state[2] ^= state[0];
   207fc:	e9d3 5201 	ldrd	r5, r2, [r3, #4]
   20800:	404a      	eors	r2, r1
	state[3] ^= state[1];
   20802:	ea80 0405 	eor.w	r4, r0, r5
	state[1] ^= state[2];
   20806:	ea85 0602 	eor.w	r6, r5, r2
   2080a:	605e      	str	r6, [r3, #4]
	state[0] ^= state[3];

	state[2] ^= t;
   2080c:	ea82 2245 	eor.w	r2, r2, r5, lsl #9
	state[0] ^= state[3];
   20810:	ea81 0604 	eor.w	r6, r1, r4
	return (x << k) | (x >> (32 - k));
   20814:	ea4f 5474 	mov.w	r4, r4, ror #21
	const uint32_t result = rotl(state[0] + state[3], 7) + state[0];
   20818:	4408      	add	r0, r1
	state[0] ^= state[3];
   2081a:	601e      	str	r6, [r3, #0]
	state[2] ^= t;
   2081c:	609a      	str	r2, [r3, #8]

	state[3] = rotl(state[3], 11);
   2081e:	60dc      	str	r4, [r3, #12]

	return result;
}
   20820:	eb01 6070 	add.w	r0, r1, r0, ror #25
   20824:	bd70      	pop	{r4, r5, r6, pc}
   20826:	bf00      	nop
   20828:	20030bd0 	.word	0x20030bd0

0002082c <xoshiro128_init_state>:
{
   2082c:	b510      	push	{r4, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   2082e:	480f      	ldr	r0, [pc, #60]	; (2086c <xoshiro128_init_state+0x40>)
   20830:	4c0f      	ldr	r4, [pc, #60]	; (20870 <xoshiro128_init_state+0x44>)
   20832:	6883      	ldr	r3, [r0, #8]
   20834:	2210      	movs	r2, #16
   20836:	4621      	mov	r1, r4
   20838:	681b      	ldr	r3, [r3, #0]
   2083a:	4798      	blx	r3
	if (rc == 0) {
   2083c:	b918      	cbnz	r0, 20846 <xoshiro128_init_state+0x1a>
		initialized = true;
   2083e:	2201      	movs	r2, #1
   20840:	4b0c      	ldr	r3, [pc, #48]	; (20874 <xoshiro128_init_state+0x48>)
   20842:	701a      	strb	r2, [r3, #0]
}
   20844:	bd10      	pop	{r4, pc}
   20846:	f00f fc5e 	bl	30106 <sys_clock_cycle_get_32>
		state[0] = k_cycle_get_32();
   2084a:	6020      	str	r0, [r4, #0]
   2084c:	f00f fc5b 	bl	30106 <sys_clock_cycle_get_32>
		state[1] = k_cycle_get_32() ^ 0x9b64c2b0;
   20850:	4b09      	ldr	r3, [pc, #36]	; (20878 <xoshiro128_init_state+0x4c>)
   20852:	4043      	eors	r3, r0
   20854:	6063      	str	r3, [r4, #4]
   20856:	f00f fc56 	bl	30106 <sys_clock_cycle_get_32>
		state[2] = k_cycle_get_32() ^ 0x86d3d2d4;
   2085a:	4b08      	ldr	r3, [pc, #32]	; (2087c <xoshiro128_init_state+0x50>)
   2085c:	4043      	eors	r3, r0
   2085e:	60a3      	str	r3, [r4, #8]
   20860:	f00f fc51 	bl	30106 <sys_clock_cycle_get_32>
		state[3] = k_cycle_get_32() ^ 0xa00ae278;
   20864:	4b06      	ldr	r3, [pc, #24]	; (20880 <xoshiro128_init_state+0x54>)
   20866:	4043      	eors	r3, r0
   20868:	60e3      	str	r3, [r4, #12]
}
   2086a:	e7eb      	b.n	20844 <xoshiro128_init_state+0x18>
   2086c:	00032b5c 	.word	0x00032b5c
   20870:	20030bd0 	.word	0x20030bd0
   20874:	20031b91 	.word	0x20031b91
   20878:	9b64c2b0 	.word	0x9b64c2b0
   2087c:	86d3d2d4 	.word	0x86d3d2d4
   20880:	a00ae278 	.word	0xa00ae278

00020884 <xoshiro128_initialize>:
{
   20884:	b508      	push	{r3, lr}
   20886:	4804      	ldr	r0, [pc, #16]	; (20898 <xoshiro128_initialize+0x14>)
   20888:	f010 faf7 	bl	30e7a <z_device_is_ready>
	return 0;
   2088c:	2800      	cmp	r0, #0
}
   2088e:	bf0c      	ite	eq
   20890:	f06f 0012 	mvneq.w	r0, #18
   20894:	2000      	movne	r0, #0
   20896:	bd08      	pop	{r3, pc}
   20898:	00032b5c 	.word	0x00032b5c

0002089c <z_impl_sys_rand32_get>:

uint32_t z_impl_sys_rand32_get(void)
{
   2089c:	b508      	push	{r3, lr}
	if (unlikely(!initialized)) {
   2089e:	4b04      	ldr	r3, [pc, #16]	; (208b0 <z_impl_sys_rand32_get+0x14>)
   208a0:	781b      	ldrb	r3, [r3, #0]
   208a2:	b90b      	cbnz	r3, 208a8 <z_impl_sys_rand32_get+0xc>
		xoshiro128_init_state();
   208a4:	f7ff ffc2 	bl	2082c <xoshiro128_init_state>
	}

	return xoshiro128_next();
}
   208a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return xoshiro128_next();
   208ac:	f7ff bfa2 	b.w	207f4 <xoshiro128_next>
   208b0:	20031b91 	.word	0x20031b91

000208b4 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   208b4:	2813      	cmp	r0, #19
   208b6:	d80e      	bhi.n	208d6 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   208b8:	4a08      	ldr	r2, [pc, #32]	; (208dc <adc_gain_invert+0x28>)
   208ba:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   208be:	b153      	cbz	r3, 208d6 <adc_gain_invert+0x22>
   208c0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   208c4:	7852      	ldrb	r2, [r2, #1]
   208c6:	b132      	cbz	r2, 208d6 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   208c8:	6808      	ldr	r0, [r1, #0]
   208ca:	4343      	muls	r3, r0
   208cc:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   208d0:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   208d2:	600b      	str	r3, [r1, #0]
			rv = 0;
   208d4:	4770      	bx	lr
	int rv = -EINVAL;
   208d6:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   208da:	4770      	bx	lr
   208dc:	00037f12 	.word	0x00037f12

000208e0 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   208e0:	2201      	movs	r2, #1
   208e2:	4b05      	ldr	r3, [pc, #20]	; (208f8 <adc_context_start_sampling+0x18>)
   208e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   208e8:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   208ec:	b109      	cbz	r1, 208f2 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   208ee:	60da      	str	r2, [r3, #12]
}
   208f0:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   208f2:	601a      	str	r2, [r3, #0]
   208f4:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   208f6:	4770      	bx	lr
   208f8:	4000e000 	.word	0x4000e000

000208fc <adc_nrfx_channel_setup>:
{
   208fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   208fe:	790d      	ldrb	r5, [r1, #4]
   20900:	f005 041f 	and.w	r4, r5, #31
	if (channel_id >= SAADC_CH_NUM) {
   20904:	2c07      	cmp	r4, #7
   20906:	d825      	bhi.n	20954 <adc_nrfx_channel_setup+0x58>
	switch (channel_cfg->gain) {
   20908:	780a      	ldrb	r2, [r1, #0]
   2090a:	2a0b      	cmp	r2, #11
   2090c:	d818      	bhi.n	20940 <adc_nrfx_channel_setup+0x44>
   2090e:	e8df f002 	tbb	[pc, r2]
   20912:	0707      	.short	0x0707
   20914:	06170707 	.word	0x06170707
   20918:	13111717 	.word	0x13111717
   2091c:	1517      	.short	0x1517
		config.gain = NRF_SAADC_GAIN1_2;
   2091e:	2204      	movs	r2, #4
	switch (channel_cfg->reference) {
   20920:	784b      	ldrb	r3, [r1, #1]
   20922:	2b03      	cmp	r3, #3
   20924:	d01a      	beq.n	2095c <adc_nrfx_channel_setup+0x60>
   20926:	2b04      	cmp	r3, #4
   20928:	f04f 0300 	mov.w	r3, #0
   2092c:	d017      	beq.n	2095e <adc_nrfx_channel_setup+0x62>
		LOG_ERR("Selected ADC reference is not valid");
   2092e:	4a30      	ldr	r2, [pc, #192]	; (209f0 <adc_nrfx_channel_setup+0xf4>)
   20930:	9202      	str	r2, [sp, #8]
   20932:	e008      	b.n	20946 <adc_nrfx_channel_setup+0x4a>
		config.gain = NRF_SAADC_GAIN1;
   20934:	2205      	movs	r2, #5
		break;
   20936:	e7f3      	b.n	20920 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN2;
   20938:	2206      	movs	r2, #6
		break;
   2093a:	e7f1      	b.n	20920 <adc_nrfx_channel_setup+0x24>
		config.gain = NRF_SAADC_GAIN4;
   2093c:	2207      	movs	r2, #7
		break;
   2093e:	e7ef      	b.n	20920 <adc_nrfx_channel_setup+0x24>
		LOG_ERR("Selected ADC gain is not valid");
   20940:	4b2c      	ldr	r3, [pc, #176]	; (209f4 <adc_nrfx_channel_setup+0xf8>)
   20942:	9302      	str	r3, [sp, #8]
   20944:	2300      	movs	r3, #0
   20946:	2201      	movs	r2, #1
   20948:	4618      	mov	r0, r3
   2094a:	e9cd 3300 	strd	r3, r3, [sp]
   2094e:	492a      	ldr	r1, [pc, #168]	; (209f8 <adc_nrfx_channel_setup+0xfc>)
   20950:	f00e feb5 	bl	2f6be <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   20954:	f06f 0015 	mvn.w	r0, #21
}
   20958:	b004      	add	sp, #16
   2095a:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   2095c:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
   2095e:	f244 060a 	movw	r6, #16394	; 0x400a
   20962:	8848      	ldrh	r0, [r1, #2]
   20964:	42b0      	cmp	r0, r6
   20966:	d03d      	beq.n	209e4 <adc_nrfx_channel_setup+0xe8>
   20968:	d80a      	bhi.n	20980 <adc_nrfx_channel_setup+0x84>
   2096a:	f244 0603 	movw	r6, #16387	; 0x4003
   2096e:	42b0      	cmp	r0, r6
   20970:	d014      	beq.n	2099c <adc_nrfx_channel_setup+0xa0>
   20972:	f244 0605 	movw	r6, #16389	; 0x4005
   20976:	42b0      	cmp	r0, r6
   20978:	d032      	beq.n	209e0 <adc_nrfx_channel_setup+0xe4>
   2097a:	b398      	cbz	r0, 209e4 <adc_nrfx_channel_setup+0xe8>
		LOG_ERR("Selected ADC acquisition time is not valid");
   2097c:	4b1f      	ldr	r3, [pc, #124]	; (209fc <adc_nrfx_channel_setup+0x100>)
   2097e:	e7e0      	b.n	20942 <adc_nrfx_channel_setup+0x46>
	switch (channel_cfg->acquisition_time) {
   20980:	f244 0614 	movw	r6, #16404	; 0x4014
   20984:	42b0      	cmp	r0, r6
   20986:	d02f      	beq.n	209e8 <adc_nrfx_channel_setup+0xec>
   20988:	f244 0628 	movw	r6, #16424	; 0x4028
   2098c:	42b0      	cmp	r0, r6
   2098e:	d02d      	beq.n	209ec <adc_nrfx_channel_setup+0xf0>
   20990:	f244 060f 	movw	r6, #16399	; 0x400f
   20994:	42b0      	cmp	r0, r6
   20996:	d1f1      	bne.n	2097c <adc_nrfx_channel_setup+0x80>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   20998:	2003      	movs	r0, #3
   2099a:	e000      	b.n	2099e <adc_nrfx_channel_setup+0xa2>
	nrf_saadc_channel_config_t config = {
   2099c:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   2099e:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   209a2:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   209a4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
   209a8:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   209ac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].PSELP = pselp;
   209b0:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   209b2:	0123      	lsls	r3, r4, #4
   209b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   209b8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   209bc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   209c0:	0123      	lsls	r3, r4, #4
   209c2:	798a      	ldrb	r2, [r1, #6]
   209c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   209c8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   209cc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   209d0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   209d4:	4b0a      	ldr	r3, [pc, #40]	; (20a00 <adc_nrfx_channel_setup+0x104>)
   209d6:	794a      	ldrb	r2, [r1, #5]
   209d8:	4423      	add	r3, r4
   209da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   209de:	e7bb      	b.n	20958 <adc_nrfx_channel_setup+0x5c>
	switch (channel_cfg->acquisition_time) {
   209e0:	2001      	movs	r0, #1
   209e2:	e7dc      	b.n	2099e <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   209e4:	2002      	movs	r0, #2
   209e6:	e7da      	b.n	2099e <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   209e8:	2004      	movs	r0, #4
   209ea:	e7d8      	b.n	2099e <adc_nrfx_channel_setup+0xa2>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   209ec:	2005      	movs	r0, #5
   209ee:	e7d6      	b.n	2099e <adc_nrfx_channel_setup+0xa2>
   209f0:	00037f59 	.word	0x00037f59
   209f4:	00037f3a 	.word	0x00037f3a
   209f8:	000331fc 	.word	0x000331fc
   209fc:	00037f7d 	.word	0x00037f7d
   20a00:	20008160 	.word	0x20008160

00020a04 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   20a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a06:	460c      	mov	r4, r1
   20a08:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
   20a0a:	f04f 33ff 	mov.w	r3, #4294967295
   20a0e:	f04f 32ff 	mov.w	r2, #4294967295
   20a12:	486d      	ldr	r0, [pc, #436]	; (20bc8 <adc_nrfx_read+0x1c4>)
   20a14:	f005 f984 	bl	25d20 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   20a18:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   20a1a:	1e73      	subs	r3, r6, #1
   20a1c:	2bfe      	cmp	r3, #254	; 0xfe
   20a1e:	f04f 0300 	mov.w	r3, #0
   20a22:	d909      	bls.n	20a38 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
   20a24:	4a69      	ldr	r2, [pc, #420]	; (20bcc <adc_nrfx_read+0x1c8>)
   20a26:	9202      	str	r2, [sp, #8]
		LOG_ERR(
   20a28:	2201      	movs	r2, #1
   20a2a:	4618      	mov	r0, r3
   20a2c:	e9cd 3300 	strd	r3, r3, [sp]
   20a30:	4967      	ldr	r1, [pc, #412]	; (20bd0 <adc_nrfx_read+0x1cc>)
   20a32:	f00e fe44 	bl	2f6be <z_log_msg_runtime_create.constprop.0>
	if (error) {
   20a36:	e014      	b.n	20a62 <adc_nrfx_read+0x5e>
   20a38:	461a      	mov	r2, r3
	active_channels = 0U;
   20a3a:	4618      	mov	r0, r3
    p_reg->CH[channel].PSELP = pselp;
   20a3c:	4d65      	ldr	r5, [pc, #404]	; (20bd4 <adc_nrfx_read+0x1d0>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   20a3e:	4f66      	ldr	r7, [pc, #408]	; (20bd8 <adc_nrfx_read+0x1d4>)
		if (selected_channels & BIT(channel_id)) {
   20a40:	fa26 f302 	lsr.w	r3, r6, r2
   20a44:	f013 0301 	ands.w	r3, r3, #1
   20a48:	d039      	beq.n	20abe <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
   20a4a:	5cbb      	ldrb	r3, [r7, r2]
   20a4c:	b98b      	cbnz	r3, 20a72 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
   20a4e:	9203      	str	r2, [sp, #12]
   20a50:	4a62      	ldr	r2, [pc, #392]	; (20bdc <adc_nrfx_read+0x1d8>)
   20a52:	9202      	str	r2, [sp, #8]
   20a54:	e9cd 3300 	strd	r3, r3, [sp]
   20a58:	2201      	movs	r2, #1
   20a5a:	4618      	mov	r0, r3
   20a5c:	495c      	ldr	r1, [pc, #368]	; (20bd0 <adc_nrfx_read+0x1cc>)
   20a5e:	f00e fe2e 	bl	2f6be <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   20a62:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   20a66:	4858      	ldr	r0, [pc, #352]	; (20bc8 <adc_nrfx_read+0x1c4>)
   20a68:	f005 f934 	bl	25cd4 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   20a6c:	4620      	mov	r0, r4
   20a6e:	b007      	add	sp, #28
   20a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   20a72:	f894 c011 	ldrb.w	ip, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   20a76:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
   20a7a:	f1bc 0c00 	subs.w	ip, ip, #0
   20a7e:	bf18      	it	ne
   20a80:	f04f 0c01 	movne.w	ip, #1
   20a84:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
			++active_channels;
   20a88:	3001      	adds	r0, #1
   20a8a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   20a8e:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   20a92:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   20a96:	f102 0151 	add.w	r1, r2, #81	; 0x51
   20a9a:	0109      	lsls	r1, r1, #4
   20a9c:	506b      	str	r3, [r5, r1]
   20a9e:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
   20aa0:	3201      	adds	r2, #1
   20aa2:	2a08      	cmp	r2, #8
   20aa4:	d1cc      	bne.n	20a40 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
   20aa6:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
   20aa8:	2300      	movs	r3, #0
   20aaa:	f1a2 0108 	sub.w	r1, r2, #8
   20aae:	2906      	cmp	r1, #6
   20ab0:	d818      	bhi.n	20ae4 <adc_nrfx_read+0xe0>
   20ab2:	e8df f001 	tbb	[pc, r1]
   20ab6:	171e      	.short	0x171e
   20ab8:	17091720 	.word	0x17091720
   20abc:	15          	.byte	0x15
   20abd:	00          	.byte	0x00
   20abe:	f102 0151 	add.w	r1, r2, #81	; 0x51
   20ac2:	0109      	lsls	r1, r1, #4
   20ac4:	506b      	str	r3, [r5, r1]
}
   20ac6:	e7eb      	b.n	20aa0 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   20ac8:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   20aca:	4a42      	ldr	r2, [pc, #264]	; (20bd4 <adc_nrfx_read+0x1d0>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   20acc:	2801      	cmp	r0, #1
   20ace:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   20ad2:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   20ad4:	d911      	bls.n	20afa <adc_nrfx_read+0xf6>
   20ad6:	b193      	cbz	r3, 20afe <adc_nrfx_read+0xfa>
		LOG_ERR(
   20ad8:	4b41      	ldr	r3, [pc, #260]	; (20be0 <adc_nrfx_read+0x1dc>)
   20ada:	9302      	str	r3, [sp, #8]
   20adc:	2300      	movs	r3, #0
   20ade:	e7a3      	b.n	20a28 <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   20ae0:	2303      	movs	r3, #3
		break;
   20ae2:	e7f2      	b.n	20aca <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   20ae4:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
   20ae6:	4a3f      	ldr	r2, [pc, #252]	; (20be4 <adc_nrfx_read+0x1e0>)
   20ae8:	9300      	str	r3, [sp, #0]
   20aea:	e9cd 3201 	strd	r3, r2, [sp, #4]
   20aee:	2300      	movs	r3, #0
   20af0:	e7b2      	b.n	20a58 <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   20af2:	2300      	movs	r3, #0
   20af4:	e7e9      	b.n	20aca <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
   20af6:	2301      	movs	r3, #1
   20af8:	e7e7      	b.n	20aca <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
   20afa:	2b08      	cmp	r3, #8
   20afc:	d816      	bhi.n	20b2c <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
   20afe:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
   20b02:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   20b04:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
   20b06:	b9b2      	cbnz	r2, 20b36 <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
   20b08:	68e2      	ldr	r2, [r4, #12]
   20b0a:	429a      	cmp	r2, r3
   20b0c:	d217      	bcs.n	20b3e <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   20b0e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   20b12:	4b35      	ldr	r3, [pc, #212]	; (20be8 <adc_nrfx_read+0x1e4>)
   20b14:	2201      	movs	r2, #1
   20b16:	9302      	str	r3, [sp, #8]
   20b18:	2300      	movs	r3, #0
   20b1a:	492d      	ldr	r1, [pc, #180]	; (20bd0 <adc_nrfx_read+0x1cc>)
   20b1c:	4618      	mov	r0, r3
   20b1e:	e9cd 3300 	strd	r3, r3, [sp]
   20b22:	f00e fdcc 	bl	2f6be <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   20b26:	f06f 040b 	mvn.w	r4, #11
   20b2a:	e79c      	b.n	20a66 <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
   20b2c:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
   20b2e:	4b2f      	ldr	r3, [pc, #188]	; (20bec <adc_nrfx_read+0x1e8>)
   20b30:	9302      	str	r3, [sp, #8]
   20b32:	2300      	movs	r3, #0
   20b34:	e78e      	b.n	20a54 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   20b36:	8992      	ldrh	r2, [r2, #12]
   20b38:	fb02 3303 	mla	r3, r2, r3, r3
   20b3c:	e7e4      	b.n	20b08 <adc_nrfx_read+0x104>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   20b3e:	4626      	mov	r6, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   20b40:	68a2      	ldr	r2, [r4, #8]
   20b42:	4b24      	ldr	r3, [pc, #144]	; (20bd4 <adc_nrfx_read+0x1d0>)
   20b44:	4f2a      	ldr	r7, [pc, #168]	; (20bf0 <adc_nrfx_read+0x1ec>)
   20b46:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
   20b4a:	f107 0574 	add.w	r5, r7, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   20b4e:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
   20b52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20b56:	6833      	ldr	r3, [r6, #0]
   20b58:	463e      	mov	r6, r7
   20b5a:	602b      	str	r3, [r5, #0]
	ctx->status = 0;
   20b5c:	2500      	movs	r5, #0
   20b5e:	673d      	str	r5, [r7, #112]	; 0x70

	if (sequence->options) {
   20b60:	6823      	ldr	r3, [r4, #0]
   20b62:	b36b      	cbz	r3, 20bc0 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
   20b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   20b66:	f107 0488 	add.w	r4, r7, #136	; 0x88
   20b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   20b6e:	677c      	str	r4, [r7, #116]	; 0x74
		ctx->sampling_index = 0U;
   20b70:	f8a7 5098 	strh.w	r5, [r7, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   20b74:	b320      	cbz	r0, 20bc0 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20b76:	e8d6 3fef 	ldaex	r3, [r6]
   20b7a:	e8c6 5fe2 	stlex	r2, r5, [r6]
   20b7e:	2a00      	cmp	r2, #0
   20b80:	d1f9      	bne.n	20b76 <adc_nrfx_read+0x172>
   20b82:	491c      	ldr	r1, [pc, #112]	; (20bf4 <adc_nrfx_read+0x1f0>)
   20b84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20b88:	460e      	mov	r6, r1
   20b8a:	4629      	mov	r1, r5
   20b8c:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   20b90:	2300      	movs	r3, #0
   20b92:	fbe4 6100 	umlal	r6, r1, r4, r0
   20b96:	4a18      	ldr	r2, [pc, #96]	; (20bf8 <adc_nrfx_read+0x1f4>)
   20b98:	4630      	mov	r0, r6
   20b9a:	f7e8 f9d1 	bl	8f40 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   20b9e:	2200      	movs	r2, #0
   20ba0:	e9cd 0100 	strd	r0, r1, [sp]
   20ba4:	2300      	movs	r3, #0
   20ba6:	f107 0008 	add.w	r0, r7, #8
   20baa:	f006 f80f 	bl	26bcc <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   20bae:	f04f 32ff 	mov.w	r2, #4294967295
   20bb2:	f04f 33ff 	mov.w	r3, #4294967295
   20bb6:	4811      	ldr	r0, [pc, #68]	; (20bfc <adc_nrfx_read+0x1f8>)
   20bb8:	f005 f8b2 	bl	25d20 <z_impl_k_sem_take>
	return ctx->status;
   20bbc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
	return error;
   20bbe:	e752      	b.n	20a66 <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   20bc0:	480b      	ldr	r0, [pc, #44]	; (20bf0 <adc_nrfx_read+0x1ec>)
   20bc2:	f7ff fe8d 	bl	208e0 <adc_context_start_sampling>
   20bc6:	e7f2      	b.n	20bae <adc_nrfx_read+0x1aa>
   20bc8:	200081a0 	.word	0x200081a0
   20bcc:	00037fa8 	.word	0x00037fa8
   20bd0:	000331fc 	.word	0x000331fc
   20bd4:	4000e000 	.word	0x4000e000
   20bd8:	20008200 	.word	0x20008200
   20bdc:	00037fc6 	.word	0x00037fc6
   20be0:	00038005 	.word	0x00038005
   20be4:	00037fe0 	.word	0x00037fe0
   20be8:	0003805a 	.word	0x0003805a
   20bec:	00038037 	.word	0x00038037
   20bf0:	20008160 	.word	0x20008160
   20bf4:	000f423f 	.word	0x000f423f
   20bf8:	000f4240 	.word	0x000f4240
   20bfc:	200081b8 	.word	0x200081b8

00020c00 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   20c00:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20c02:	2400      	movs	r4, #0
   20c04:	4b0d      	ldr	r3, [pc, #52]	; (20c3c <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   20c06:	200e      	movs	r0, #14
   20c08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20c0c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   20c10:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   20c14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   20c18:	2212      	movs	r2, #18
   20c1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   20c1e:	f7f0 fbc7 	bl	113b0 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20c22:	4622      	mov	r2, r4
   20c24:	2101      	movs	r1, #1
   20c26:	200e      	movs	r0, #14
   20c28:	f7f0 fbf2 	bl	11410 <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   20c2c:	4804      	ldr	r0, [pc, #16]	; (20c40 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   20c2e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   20c30:	b913      	cbnz	r3, 20c38 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   20c32:	3040      	adds	r0, #64	; 0x40
   20c34:	f005 f84e 	bl	25cd4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   20c38:	2000      	movs	r0, #0
   20c3a:	bd10      	pop	{r4, pc}
   20c3c:	4000e000 	.word	0x4000e000
   20c40:	20008160 	.word	0x20008160

00020c44 <saadc_irq_handler>:
{
   20c44:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20c46:	4b2d      	ldr	r3, [pc, #180]	; (20cfc <saadc_irq_handler+0xb8>)
   20c48:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   20c4c:	2a00      	cmp	r2, #0
   20c4e:	d048      	beq.n	20ce2 <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20c50:	2200      	movs	r2, #0
   20c52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   20c56:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20c5a:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   20c5c:	4c28      	ldr	r4, [pc, #160]	; (20d00 <saadc_irq_handler+0xbc>)
   20c5e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   20c60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   20c64:	6f63      	ldr	r3, [r4, #116]	; 0x74
   20c66:	4625      	mov	r5, r4
   20c68:	b3b3      	cbz	r3, 20cd8 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   20c6a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   20c6e:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   20c72:	b133      	cbz	r3, 20c82 <saadc_irq_handler+0x3e>
			action = callback(dev,
   20c74:	f104 0174 	add.w	r1, r4, #116	; 0x74
   20c78:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   20c7a:	2801      	cmp	r0, #1
   20c7c:	d014      	beq.n	20ca8 <saadc_irq_handler+0x64>
   20c7e:	2802      	cmp	r0, #2
   20c80:	d024      	beq.n	20ccc <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   20c82:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   20c86:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   20c8a:	429a      	cmp	r2, r3
   20c8c:	d91e      	bls.n	20ccc <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   20c8e:	3301      	adds	r3, #1
   20c90:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   20c94:	4b19      	ldr	r3, [pc, #100]	; (20cfc <saadc_irq_handler+0xb8>)
   20c96:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   20c9a:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   20c9e:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   20ca0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   20ca4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   20ca8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   20cac:	b923      	cbnz	r3, 20cb8 <saadc_irq_handler+0x74>
}
   20cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   20cb2:	4813      	ldr	r0, [pc, #76]	; (20d00 <saadc_irq_handler+0xbc>)
   20cb4:	f7ff be14 	b.w	208e0 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20cb8:	e8d5 3fef 	ldaex	r3, [r5]
   20cbc:	1e5a      	subs	r2, r3, #1
   20cbe:	e8c5 2fe1 	stlex	r1, r2, [r5]
   20cc2:	2900      	cmp	r1, #0
   20cc4:	d1f8      	bne.n	20cb8 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   20cc6:	2b01      	cmp	r3, #1
   20cc8:	dcf1      	bgt.n	20cae <saadc_irq_handler+0x6a>
   20cca:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   20ccc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   20cd0:	b113      	cbz	r3, 20cd8 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   20cd2:	480c      	ldr	r0, [pc, #48]	; (20d04 <saadc_irq_handler+0xc0>)
   20cd4:	f010 fcff 	bl	316d6 <z_impl_k_timer_stop>
   20cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   20cdc:	480a      	ldr	r0, [pc, #40]	; (20d08 <saadc_irq_handler+0xc4>)
   20cde:	f004 bff9 	b.w	25cd4 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ce2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   20ce6:	2900      	cmp	r1, #0
   20ce8:	d0ef      	beq.n	20cca <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20cea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   20cee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20cf2:	2201      	movs	r2, #1
   20cf4:	609a      	str	r2, [r3, #8]
   20cf6:	601a      	str	r2, [r3, #0]
   20cf8:	605a      	str	r2, [r3, #4]
}
   20cfa:	e7e6      	b.n	20cca <saadc_irq_handler+0x86>
   20cfc:	4000e000 	.word	0x4000e000
   20d00:	20008160 	.word	0x20008160
   20d04:	20008168 	.word	0x20008168
   20d08:	200081b8 	.word	0x200081b8

00020d0c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20d0c:	4b08      	ldr	r3, [pc, #32]	; (20d30 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20d0e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20d10:	1ac3      	subs	r3, r0, r3
{
   20d12:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20d14:	4907      	ldr	r1, [pc, #28]	; (20d34 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   20d16:	109b      	asrs	r3, r3, #2
{
   20d18:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20d1a:	4359      	muls	r1, r3
   20d1c:	2240      	movs	r2, #64	; 0x40
   20d1e:	4806      	ldr	r0, [pc, #24]	; (20d38 <onoff_stop+0x2c>)
   20d20:	f00e fd0c 	bl	2f73c <stop>
	notify(mgr, res);
   20d24:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20d26:	4601      	mov	r1, r0
	notify(mgr, res);
   20d28:	4620      	mov	r0, r4
}
   20d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20d2e:	4718      	bx	r3
   20d30:	20030bf4 	.word	0x20030bf4
   20d34:	b6db6db7 	.word	0xb6db6db7
   20d38:	00032afc 	.word	0x00032afc

00020d3c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20d3c:	2340      	movs	r3, #64	; 0x40
{
   20d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20d40:	4c0b      	ldr	r4, [pc, #44]	; (20d70 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20d42:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   20d44:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20d46:	460b      	mov	r3, r1
{
   20d48:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20d4a:	490a      	ldr	r1, [pc, #40]	; (20d74 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   20d4c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20d4e:	4361      	muls	r1, r4
{
   20d50:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20d52:	4a09      	ldr	r2, [pc, #36]	; (20d78 <onoff_start+0x3c>)
   20d54:	4809      	ldr	r0, [pc, #36]	; (20d7c <onoff_start+0x40>)
   20d56:	f00e fd1d 	bl	2f794 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20d5a:	1e01      	subs	r1, r0, #0
   20d5c:	da05      	bge.n	20d6a <onoff_start+0x2e>
		notify(mgr, err);
   20d5e:	4630      	mov	r0, r6
   20d60:	462b      	mov	r3, r5
	}
}
   20d62:	b002      	add	sp, #8
   20d64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   20d68:	4718      	bx	r3
}
   20d6a:	b002      	add	sp, #8
   20d6c:	bd70      	pop	{r4, r5, r6, pc}
   20d6e:	bf00      	nop
   20d70:	20030bf4 	.word	0x20030bf4
   20d74:	b6db6db7 	.word	0xb6db6db7
   20d78:	0002f7ff 	.word	0x0002f7ff
   20d7c:	00032afc 	.word	0x00032afc

00020d80 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   20d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20d84:	2200      	movs	r2, #0
   20d86:	2101      	movs	r1, #1
{
   20d88:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20d8a:	2005      	movs	r0, #5
   20d8c:	f7f0 fb40 	bl	11410 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20d90:	4811      	ldr	r0, [pc, #68]	; (20dd8 <clk_init+0x58>)
   20d92:	f002 fd61 	bl	23858 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20d96:	4b11      	ldr	r3, [pc, #68]	; (20ddc <clk_init+0x5c>)
   20d98:	4298      	cmp	r0, r3
   20d9a:	d119      	bne.n	20dd0 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20d9c:	f002 fd6c 	bl	23878 <nrfx_clock_enable>
   20da0:	2400      	movs	r4, #0
	return &data->mgr[type];
   20da2:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20da6:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20da8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 20de0 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   20dac:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20dae:	4641      	mov	r1, r8
   20db0:	fb09 5004 	mla	r0, r9, r4, r5
   20db4:	f009 fd8b 	bl	2a8ce <onoff_manager_init>
		if (err < 0) {
   20db8:	2800      	cmp	r0, #0
   20dba:	db07      	blt.n	20dcc <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20dbc:	2301      	movs	r3, #1
   20dbe:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20dc2:	441c      	add	r4, r3
   20dc4:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20dc6:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   20dc8:	d1f0      	bne.n	20dac <clk_init+0x2c>
	}

	return 0;
   20dca:	2000      	movs	r0, #0
}
   20dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   20dd0:	f06f 0004 	mvn.w	r0, #4
   20dd4:	e7fa      	b.n	20dcc <clk_init+0x4c>
   20dd6:	bf00      	nop
   20dd8:	00020e19 	.word	0x00020e19
   20ddc:	0bad0000 	.word	0x0bad0000
   20de0:	0003416c 	.word	0x0003416c

00020de4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20de4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   20de6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   20de8:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   20dea:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20dec:	434b      	muls	r3, r1
   20dee:	4808      	ldr	r0, [pc, #32]	; (20e10 <clkstarted_handle.constprop.0+0x2c>)
   20df0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   20df2:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
   20df4:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   20df8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   20dfa:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   20dfc:	f00e fc8b 	bl	2f716 <set_on_state>
	if (callback) {
   20e00:	b12d      	cbz	r5, 20e0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20e02:	4632      	mov	r2, r6
   20e04:	462b      	mov	r3, r5
}
   20e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20e0a:	4802      	ldr	r0, [pc, #8]	; (20e14 <clkstarted_handle.constprop.0+0x30>)
   20e0c:	4718      	bx	r3
}
   20e0e:	bd70      	pop	{r4, r5, r6, pc}
   20e10:	20030bf4 	.word	0x20030bf4
   20e14:	00032afc 	.word	0x00032afc

00020e18 <clock_event_handler>:
	switch (event) {
   20e18:	2805      	cmp	r0, #5
   20e1a:	d811      	bhi.n	20e40 <clock_event_handler+0x28>
   20e1c:	e8df f000 	tbb	[pc, r0]
   20e20:	10100e03 	.word	0x10100e03
   20e24:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20e26:	4b07      	ldr	r3, [pc, #28]	; (20e44 <clock_event_handler+0x2c>)
   20e28:	6f98      	ldr	r0, [r3, #120]	; 0x78
   20e2a:	f010 0007 	ands.w	r0, r0, #7
   20e2e:	d107      	bne.n	20e40 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20e30:	f7ff bfd8 	b.w	20de4 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   20e34:	2002      	movs	r0, #2
   20e36:	e7fb      	b.n	20e30 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   20e38:	2003      	movs	r0, #3
   20e3a:	e7f9      	b.n	20e30 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20e3c:	2001      	movs	r0, #1
   20e3e:	e7f7      	b.n	20e30 <clock_event_handler+0x18>
}
   20e40:	4770      	bx	lr
   20e42:	bf00      	nop
   20e44:	20030bf4 	.word	0x20030bf4

00020e48 <generic_hfclk_start>:
{
   20e48:	b508      	push	{r3, lr}
	__asm__ volatile(
   20e4a:	f04f 0320 	mov.w	r3, #32
   20e4e:	f3ef 8111 	mrs	r1, BASEPRI
   20e52:	f383 8812 	msr	BASEPRI_MAX, r3
   20e56:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20e5a:	4a11      	ldr	r2, [pc, #68]	; (20ea0 <generic_hfclk_start+0x58>)
   20e5c:	6813      	ldr	r3, [r2, #0]
   20e5e:	f043 0002 	orr.w	r0, r3, #2
   20e62:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20e64:	07da      	lsls	r2, r3, #31
   20e66:	d408      	bmi.n	20e7a <generic_hfclk_start+0x32>
	__asm__ volatile(
   20e68:	f381 8811 	msr	BASEPRI, r1
   20e6c:	f3bf 8f6f 	isb	sy
}
   20e70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20e74:	2001      	movs	r0, #1
   20e76:	f002 bd13 	b.w	238a0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20e7a:	4b0a      	ldr	r3, [pc, #40]	; (20ea4 <generic_hfclk_start+0x5c>)
   20e7c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20e80:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20e84:	07d3      	lsls	r3, r2, #31
   20e86:	d5ef      	bpl.n	20e68 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   20e88:	4807      	ldr	r0, [pc, #28]	; (20ea8 <generic_hfclk_start+0x60>)
   20e8a:	f00e fc44 	bl	2f716 <set_on_state>
   20e8e:	f381 8811 	msr	BASEPRI, r1
   20e92:	f3bf 8f6f 	isb	sy
}
   20e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   20e9a:	2000      	movs	r0, #0
   20e9c:	f7ff bfa2 	b.w	20de4 <clkstarted_handle.constprop.0>
   20ea0:	20030c94 	.word	0x20030c94
   20ea4:	40005000 	.word	0x40005000
   20ea8:	20030c6c 	.word	0x20030c6c

00020eac <api_blocking_start>:
{
   20eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20eae:	2200      	movs	r2, #0
   20eb0:	2301      	movs	r3, #1
   20eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20eb6:	ab04      	add	r3, sp, #16
   20eb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20ebc:	4a09      	ldr	r2, [pc, #36]	; (20ee4 <api_blocking_start+0x38>)
   20ebe:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20ec0:	f8cd d000 	str.w	sp, [sp]
   20ec4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20ec8:	f00e fc92 	bl	2f7f0 <api_start>
	if (err < 0) {
   20ecc:	2800      	cmp	r0, #0
   20ece:	db05      	blt.n	20edc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20ed0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20ed4:	2300      	movs	r3, #0
   20ed6:	4668      	mov	r0, sp
   20ed8:	f004 ff22 	bl	25d20 <z_impl_k_sem_take>
}
   20edc:	b007      	add	sp, #28
   20ede:	f85d fb04 	ldr.w	pc, [sp], #4
   20ee2:	bf00      	nop
   20ee4:	0002f835 	.word	0x0002f835

00020ee8 <generic_hfclk_stop>:
{
   20ee8:	b510      	push	{r4, lr}
	__asm__ volatile(
   20eea:	f04f 0320 	mov.w	r3, #32
   20eee:	f3ef 8411 	mrs	r4, BASEPRI
   20ef2:	f383 8812 	msr	BASEPRI_MAX, r3
   20ef6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   20efa:	4a07      	ldr	r2, [pc, #28]	; (20f18 <generic_hfclk_stop+0x30>)
   20efc:	6813      	ldr	r3, [r2, #0]
   20efe:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   20f02:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   20f04:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   20f06:	d402      	bmi.n	20f0e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20f08:	2001      	movs	r0, #1
   20f0a:	f00f f99d 	bl	30248 <nrfx_clock_stop>
	__asm__ volatile(
   20f0e:	f384 8811 	msr	BASEPRI, r4
   20f12:	f3bf 8f6f 	isb	sy
}
   20f16:	bd10      	pop	{r4, pc}
   20f18:	20030c94 	.word	0x20030c94

00020f1c <z_nrf_clock_control_lf_on>:
{
   20f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20f20:	2201      	movs	r2, #1
   20f22:	4607      	mov	r7, r0
   20f24:	4935      	ldr	r1, [pc, #212]	; (20ffc <z_nrf_clock_control_lf_on+0xe0>)
   20f26:	e8d1 3fef 	ldaex	r3, [r1]
   20f2a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   20f2e:	2800      	cmp	r0, #0
   20f30:	d1f9      	bne.n	20f26 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   20f32:	b933      	cbnz	r3, 20f42 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20f34:	4932      	ldr	r1, [pc, #200]	; (21000 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   20f36:	4833      	ldr	r0, [pc, #204]	; (21004 <z_nrf_clock_control_lf_on+0xe8>)
   20f38:	604b      	str	r3, [r1, #4]
   20f3a:	60cb      	str	r3, [r1, #12]
   20f3c:	608a      	str	r2, [r1, #8]
   20f3e:	f009 fcd9 	bl	2a8f4 <onoff_request>
	switch (start_mode) {
   20f42:	1e7b      	subs	r3, r7, #1
   20f44:	2b01      	cmp	r3, #1
   20f46:	d828      	bhi.n	20f9a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   20f48:	2f01      	cmp	r7, #1
   20f4a:	d106      	bne.n	20f5a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20f4c:	4b2e      	ldr	r3, [pc, #184]	; (21008 <z_nrf_clock_control_lf_on+0xec>)
   20f4e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20f52:	f003 0303 	and.w	r3, r3, #3
   20f56:	2b02      	cmp	r3, #2
   20f58:	d01f      	beq.n	20f9a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20f5a:	f010 f85f 	bl	3101c <k_is_in_isr>
   20f5e:	4605      	mov	r5, r0
   20f60:	b9e8      	cbnz	r0, 20f9e <z_nrf_clock_control_lf_on+0x82>
	return !z_sys_post_kernel;
   20f62:	4b2a      	ldr	r3, [pc, #168]	; (2100c <z_nrf_clock_control_lf_on+0xf0>)
   20f64:	781b      	ldrb	r3, [r3, #0]
   20f66:	b1d3      	cbz	r3, 20f9e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
   20f68:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   20f6a:	4606      	mov	r6, r0
   20f6c:	4b26      	ldr	r3, [pc, #152]	; (21008 <z_nrf_clock_control_lf_on+0xec>)
   20f6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20f72:	4c25      	ldr	r4, [pc, #148]	; (21008 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20f74:	f8df 8098 	ldr.w	r8, [pc, #152]	; 21010 <z_nrf_clock_control_lf_on+0xf4>
   20f78:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20f7c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   20f80:	03d2      	lsls	r2, r2, #15
   20f82:	d516      	bpl.n	20fb2 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20f84:	f003 0303 	and.w	r3, r3, #3
   20f88:	2b02      	cmp	r3, #2
   20f8a:	d001      	beq.n	20f90 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20f8c:	2f01      	cmp	r7, #1
   20f8e:	d110      	bne.n	20fb2 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   20f90:	b375      	cbz	r5, 20ff0 <z_nrf_clock_control_lf_on+0xd4>
   20f92:	f386 8811 	msr	BASEPRI, r6
   20f96:	f3bf 8f6f 	isb	sy
}
   20f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20f9e:	f04f 0320 	mov.w	r3, #32
   20fa2:	f3ef 8611 	mrs	r6, BASEPRI
   20fa6:	f383 8812 	msr	BASEPRI_MAX, r3
   20faa:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20fae:	2501      	movs	r5, #1
   20fb0:	e7df      	b.n	20f72 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20fb2:	b1c5      	cbz	r5, 20fe6 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20fb4:	4630      	mov	r0, r6
   20fb6:	f7f0 f9a1 	bl	112fc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20fba:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20fbe:	b2db      	uxtb	r3, r3
   20fc0:	2b01      	cmp	r3, #1
   20fc2:	d1d9      	bne.n	20f78 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20fc4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20fc8:	2a00      	cmp	r2, #0
   20fca:	d0d5      	beq.n	20f78 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20fcc:	2200      	movs	r2, #0
   20fce:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   20fd2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20fd6:	2202      	movs	r2, #2
   20fd8:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   20fdc:	2220      	movs	r2, #32
   20fde:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20fe2:	60a3      	str	r3, [r4, #8]
}
   20fe4:	e7c8      	b.n	20f78 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
   20fe6:	2100      	movs	r1, #0
   20fe8:	2021      	movs	r0, #33	; 0x21
   20fea:	f005 fb97 	bl	2671c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20fee:	e7e4      	b.n	20fba <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   20ff0:	2202      	movs	r2, #2
   20ff2:	4b05      	ldr	r3, [pc, #20]	; (21008 <z_nrf_clock_control_lf_on+0xec>)
   20ff4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20ff8:	e7cf      	b.n	20f9a <z_nrf_clock_control_lf_on+0x7e>
   20ffa:	bf00      	nop
   20ffc:	20030bf0 	.word	0x20030bf0
   21000:	20030be0 	.word	0x20030be0
   21004:	20030c10 	.word	0x20030c10
   21008:	40005000 	.word	0x40005000
   2100c:	20031fbf 	.word	0x20031fbf
   21010:	e000e100 	.word	0xe000e100

00021014 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   21014:	b508      	push	{r3, lr}
   21016:	4807      	ldr	r0, [pc, #28]	; (21034 <uart_console_init+0x20>)
   21018:	f00f ff2f 	bl	30e7a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   2101c:	b138      	cbz	r0, 2102e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2101e:	4806      	ldr	r0, [pc, #24]	; (21038 <uart_console_init+0x24>)
   21020:	f7f1 f804 	bl	1202c <__stdout_hook_install>
	__printk_hook_install(console_out);
   21024:	4804      	ldr	r0, [pc, #16]	; (21038 <uart_console_init+0x24>)
   21026:	f7ed fc43 	bl	e8b0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2102a:	2000      	movs	r0, #0
}
   2102c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2102e:	f06f 0012 	mvn.w	r0, #18
   21032:	e7fb      	b.n	2102c <uart_console_init+0x18>
   21034:	00032b8c 	.word	0x00032b8c
   21038:	0002103d 	.word	0x0002103d

0002103c <console_out>:
	if ('\n' == c) {
   2103c:	280a      	cmp	r0, #10
{
   2103e:	b538      	push	{r3, r4, r5, lr}
   21040:	4604      	mov	r4, r0
   21042:	4d07      	ldr	r5, [pc, #28]	; (21060 <console_out+0x24>)
	if ('\n' == c) {
   21044:	d104      	bne.n	21050 <console_out+0x14>
	api->poll_out(dev, out_char);
   21046:	68ab      	ldr	r3, [r5, #8]
   21048:	210d      	movs	r1, #13
   2104a:	4628      	mov	r0, r5
   2104c:	69db      	ldr	r3, [r3, #28]
   2104e:	4798      	blx	r3
   21050:	68ab      	ldr	r3, [r5, #8]
   21052:	4803      	ldr	r0, [pc, #12]	; (21060 <console_out+0x24>)
   21054:	69db      	ldr	r3, [r3, #28]
   21056:	b2e1      	uxtb	r1, r4
   21058:	4798      	blx	r3
}
   2105a:	4620      	mov	r0, r4
   2105c:	bd38      	pop	{r3, r4, r5, pc}
   2105e:	bf00      	nop
   21060:	00032b8c 	.word	0x00032b8c

00021064 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   21064:	b530      	push	{r4, r5, lr}
	return port->config;
   21066:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   21068:	f001 041f 	and.w	r4, r1, #31
   2106c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   2106e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   21072:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   21074:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   21078:	d105      	bne.n	21086 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2107a:	4620      	mov	r0, r4
   2107c:	f002 ff18 	bl	23eb0 <nrfx_gpiote_trigger_disable>

		return 0;
   21080:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   21082:	b005      	add	sp, #20
   21084:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   21086:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   21088:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2108c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   21090:	d114      	bne.n	210bc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   21092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   21096:	bf0c      	ite	eq
   21098:	2304      	moveq	r3, #4
   2109a:	2305      	movne	r3, #5
   2109c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   210a0:	2300      	movs	r3, #0
   210a2:	4620      	mov	r0, r4
   210a4:	4619      	mov	r1, r3
   210a6:	aa02      	add	r2, sp, #8
   210a8:	f002 fd40 	bl	23b2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   210ac:	4b1f      	ldr	r3, [pc, #124]	; (2112c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   210ae:	4298      	cmp	r0, r3
   210b0:	d138      	bne.n	21124 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   210b2:	2101      	movs	r1, #1
   210b4:	4620      	mov	r0, r4
   210b6:	f002 feb5 	bl	23e24 <nrfx_gpiote_trigger_enable>
	return 0;
   210ba:	e7e1      	b.n	21080 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   210bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   210c0:	d025      	beq.n	2110e <gpio_nrfx_pin_interrupt_configure+0xaa>
   210c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   210c6:	bf14      	ite	ne
   210c8:	2301      	movne	r3, #1
   210ca:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   210cc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   210d0:	6883      	ldr	r3, [r0, #8]
   210d2:	40cb      	lsrs	r3, r1
   210d4:	07d9      	lsls	r1, r3, #31
   210d6:	d4e3      	bmi.n	210a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
   210d8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   210dc:	d1e0      	bne.n	210a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
   210de:	4a14      	ldr	r2, [pc, #80]	; (21130 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   210e0:	4814      	ldr	r0, [pc, #80]	; (21134 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   210e2:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
   210e4:	2901      	cmp	r1, #1
   210e6:	bf08      	it	eq
   210e8:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
   210ea:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   210ee:	3380      	adds	r3, #128	; 0x80
   210f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   210f4:	07db      	lsls	r3, r3, #31
   210f6:	d4d3      	bmi.n	210a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   210f8:	f10d 0507 	add.w	r5, sp, #7
   210fc:	4629      	mov	r1, r5
   210fe:	4620      	mov	r0, r4
   21100:	f002 fe3c 	bl	23d7c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   21104:	4b0c      	ldr	r3, [pc, #48]	; (21138 <gpio_nrfx_pin_interrupt_configure+0xd4>)
   21106:	4298      	cmp	r0, r3
   21108:	d003      	beq.n	21112 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
   2110a:	9503      	str	r5, [sp, #12]
   2110c:	e7c8      	b.n	210a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   2110e:	2303      	movs	r3, #3
   21110:	e7dc      	b.n	210cc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   21112:	4628      	mov	r0, r5
   21114:	f002 fe80 	bl	23e18 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   21118:	4b04      	ldr	r3, [pc, #16]	; (2112c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   2111a:	4298      	cmp	r0, r3
   2111c:	d0f5      	beq.n	2110a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
   2111e:	f06f 000b 	mvn.w	r0, #11
   21122:	e7ae      	b.n	21082 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   21124:	f06f 0015 	mvn.w	r0, #21
   21128:	e7ab      	b.n	21082 <gpio_nrfx_pin_interrupt_configure+0x1e>
   2112a:	bf00      	nop
   2112c:	0bad0000 	.word	0x0bad0000
   21130:	40842500 	.word	0x40842500
   21134:	40842800 	.word	0x40842800
   21138:	0bad0004 	.word	0x0bad0004

0002113c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2113c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2113e:	f002 fe5b 	bl	23df8 <nrfx_gpiote_is_init>
   21142:	4604      	mov	r4, r0
   21144:	b968      	cbnz	r0, 21162 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   21146:	f002 fe2f 	bl	23da8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2114a:	4b08      	ldr	r3, [pc, #32]	; (2116c <gpio_nrfx_init+0x30>)
   2114c:	4298      	cmp	r0, r3
   2114e:	d10a      	bne.n	21166 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   21150:	4621      	mov	r1, r4
   21152:	4807      	ldr	r0, [pc, #28]	; (21170 <gpio_nrfx_init+0x34>)
   21154:	f002 fe0c 	bl	23d70 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   21158:	4622      	mov	r2, r4
   2115a:	2105      	movs	r1, #5
   2115c:	202f      	movs	r0, #47	; 0x2f
   2115e:	f7f0 f957 	bl	11410 <z_arm_irq_priority_set>
		return 0;
   21162:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   21164:	bd10      	pop	{r4, pc}
		return -EIO;
   21166:	f06f 0004 	mvn.w	r0, #4
   2116a:	e7fb      	b.n	21164 <gpio_nrfx_init+0x28>
   2116c:	0bad0000 	.word	0x0bad0000
   21170:	00021175 	.word	0x00021175

00021174 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21174:	0942      	lsrs	r2, r0, #5
{
   21176:	4603      	mov	r3, r0
   21178:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2117a:	d002      	beq.n	21182 <nrfx_gpio_handler+0xe>
   2117c:	2a01      	cmp	r2, #1
   2117e:	d017      	beq.n	211b0 <nrfx_gpio_handler+0x3c>
}
   21180:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21182:	4e0d      	ldr	r6, [pc, #52]	; (211b8 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   21184:	6932      	ldr	r2, [r6, #16]
   21186:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21188:	2900      	cmp	r1, #0
   2118a:	d0f9      	beq.n	21180 <nrfx_gpio_handler+0xc>
   2118c:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
   2118e:	f003 031f 	and.w	r3, r3, #31
   21192:	680c      	ldr	r4, [r1, #0]
   21194:	409d      	lsls	r5, r3
   21196:	2900      	cmp	r1, #0
   21198:	d0f2      	beq.n	21180 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   2119a:	688a      	ldr	r2, [r1, #8]
   2119c:	402a      	ands	r2, r5
   2119e:	d002      	beq.n	211a6 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   211a0:	4630      	mov	r0, r6
   211a2:	684b      	ldr	r3, [r1, #4]
   211a4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   211a6:	b12c      	cbz	r4, 211b4 <nrfx_gpio_handler+0x40>
   211a8:	6823      	ldr	r3, [r4, #0]
   211aa:	4621      	mov	r1, r4
   211ac:	461c      	mov	r4, r3
   211ae:	e7f2      	b.n	21196 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   211b0:	4e02      	ldr	r6, [pc, #8]	; (211bc <nrfx_gpio_handler+0x48>)
   211b2:	e7e7      	b.n	21184 <nrfx_gpio_handler+0x10>
   211b4:	4623      	mov	r3, r4
   211b6:	e7f8      	b.n	211aa <nrfx_gpio_handler+0x36>
   211b8:	00032b2c 	.word	0x00032b2c
   211bc:	00032b14 	.word	0x00032b14

000211c0 <gpio_nrfx_pin_configure>:
{
   211c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   211c4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   211c6:	f001 051f 	and.w	r5, r1, #31
   211ca:	7b3b      	ldrb	r3, [r7, #12]
{
   211cc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   211ce:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   211d2:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   211d4:	4628      	mov	r0, r5
   211d6:	f10d 0103 	add.w	r1, sp, #3
   211da:	f002 fdcf 	bl	23d7c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   211de:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   211e2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   211e4:	d10b      	bne.n	211fe <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   211e6:	4628      	mov	r0, r5
   211e8:	f002 fe8a 	bl	23f00 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   211ec:	4b3c      	ldr	r3, [pc, #240]	; (212e0 <gpio_nrfx_pin_configure+0x120>)
   211ee:	4598      	cmp	r8, r3
   211f0:	d103      	bne.n	211fa <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   211f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   211f6:	f002 fe09 	bl	23e0c <nrfx_gpiote_channel_free>
		return 0;
   211fa:	2000      	movs	r0, #0
   211fc:	e00c      	b.n	21218 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   211fe:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21200:	4628      	mov	r0, r5
   21202:	4619      	mov	r1, r3
   21204:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   21206:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2120a:	f002 fc8f 	bl	23b2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2120e:	4b34      	ldr	r3, [pc, #208]	; (212e0 <gpio_nrfx_pin_configure+0x120>)
   21210:	4298      	cmp	r0, r3
   21212:	d004      	beq.n	2121e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   21214:	f06f 0015 	mvn.w	r0, #21
}
   21218:	b004      	add	sp, #16
   2121a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   2121e:	4580      	cmp	r8, r0
   21220:	d103      	bne.n	2122a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   21222:	f89d 0003 	ldrb.w	r0, [sp, #3]
   21226:	f002 fdf1 	bl	23e0c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   2122a:	03a3      	lsls	r3, r4, #14
   2122c:	d549      	bpl.n	212c2 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2122e:	f240 3306 	movw	r3, #774	; 0x306
   21232:	4023      	ands	r3, r4
   21234:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   21238:	d019      	beq.n	2126e <gpio_nrfx_pin_configure+0xae>
   2123a:	d80c      	bhi.n	21256 <gpio_nrfx_pin_configure+0x96>
   2123c:	2b06      	cmp	r3, #6
   2123e:	d017      	beq.n	21270 <gpio_nrfx_pin_configure+0xb0>
   21240:	d804      	bhi.n	2124c <gpio_nrfx_pin_configure+0x8c>
   21242:	b1ab      	cbz	r3, 21270 <gpio_nrfx_pin_configure+0xb0>
   21244:	2b02      	cmp	r3, #2
   21246:	d1e5      	bne.n	21214 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   21248:	2304      	movs	r3, #4
   2124a:	e011      	b.n	21270 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   2124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   21250:	d1e0      	bne.n	21214 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   21252:	2301      	movs	r3, #1
   21254:	e00c      	b.n	21270 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   21256:	f240 2202 	movw	r2, #514	; 0x202
   2125a:	4293      	cmp	r3, r2
   2125c:	d026      	beq.n	212ac <gpio_nrfx_pin_configure+0xec>
   2125e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   21262:	d025      	beq.n	212b0 <gpio_nrfx_pin_configure+0xf0>
   21264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21268:	d1d4      	bne.n	21214 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   2126a:	2302      	movs	r3, #2
   2126c:	e000      	b.n	21270 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   2126e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   21270:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   21274:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   21278:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   2127c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   2127e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   21282:	bf4c      	ite	mi
   21284:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   21286:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2128a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   2128c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21290:	d510      	bpl.n	212b4 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   21292:	2301      	movs	r3, #1
   21294:	687a      	ldr	r2, [r7, #4]
   21296:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   21298:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2129a:	2200      	movs	r2, #0
   2129c:	4628      	mov	r0, r5
   2129e:	a901      	add	r1, sp, #4
   212a0:	f002 fcf2 	bl	23c88 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   212a4:	4b0e      	ldr	r3, [pc, #56]	; (212e0 <gpio_nrfx_pin_configure+0x120>)
   212a6:	4298      	cmp	r0, r3
   212a8:	d0a7      	beq.n	211fa <gpio_nrfx_pin_configure+0x3a>
   212aa:	e7b3      	b.n	21214 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   212ac:	2305      	movs	r3, #5
   212ae:	e7df      	b.n	21270 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   212b0:	2303      	movs	r3, #3
   212b2:	e7dd      	b.n	21270 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   212b4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   212b6:	bf41      	itttt	mi
   212b8:	2301      	movmi	r3, #1
   212ba:	687a      	ldrmi	r2, [r7, #4]
   212bc:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   212be:	60d3      	strmi	r3, [r2, #12]
}
   212c0:	e7eb      	b.n	2129a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
   212c2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   212c4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   212c8:	bf4c      	ite	mi
   212ca:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   212cc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   212d0:	461a      	mov	r2, r3
   212d2:	4628      	mov	r0, r5
   212d4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   212d6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   212da:	f002 fc27 	bl	23b2c <nrfx_gpiote_input_configure>
   212de:	e7e1      	b.n	212a4 <gpio_nrfx_pin_configure+0xe4>
   212e0:	0bad0000 	.word	0x0bad0000

000212e4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   212e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   212e8:	6844      	ldr	r4, [r0, #4]
{
   212ea:	b088      	sub	sp, #32
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   212ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   212ee:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   212f0:	2100      	movs	r1, #0
   212f2:	4630      	mov	r0, r6
   212f4:	aa07      	add	r2, sp, #28
   212f6:	f00e ff0a 	bl	3010e <pinctrl_lookup_state>
	if (ret < 0) {
   212fa:	2800      	cmp	r0, #0
   212fc:	db2a      	blt.n	21354 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   212fe:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   21300:	6832      	ldr	r2, [r6, #0]
   21302:	7919      	ldrb	r1, [r3, #4]
   21304:	6818      	ldr	r0, [r3, #0]
   21306:	f001 ff33 	bl	23170 <pinctrl_configure_pins>
	if (err < 0) {
   2130a:	2800      	cmp	r0, #0
   2130c:	db22      	blt.n	21354 <spi_nrfx_init+0x70>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2130e:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   21310:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21312:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   21314:	68ac      	ldr	r4, [r5, #8]
   21316:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   2131a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2131e:	429c      	cmp	r4, r3
   21320:	d304      	bcc.n	2132c <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   21322:	4628      	mov	r0, r5
   21324:	f00e fb34 	bl	2f990 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   21328:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   2132a:	e013      	b.n	21354 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   2132c:	6820      	ldr	r0, [r4, #0]
   2132e:	f00f fda4 	bl	30e7a <z_device_is_ready>
   21332:	4603      	mov	r3, r0
   21334:	b988      	cbnz	r0, 2135a <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   21336:	7922      	ldrb	r2, [r4, #4]
   21338:	4919      	ldr	r1, [pc, #100]	; (213a0 <spi_nrfx_init+0xbc>)
   2133a:	9204      	str	r2, [sp, #16]
   2133c:	6822      	ldr	r2, [r4, #0]
   2133e:	6812      	ldr	r2, [r2, #0]
   21340:	9000      	str	r0, [sp, #0]
   21342:	9203      	str	r2, [sp, #12]
   21344:	4a17      	ldr	r2, [pc, #92]	; (213a4 <spi_nrfx_init+0xc0>)
   21346:	e9cd 0201 	strd	r0, r2, [sp, #4]
   2134a:	2201      	movs	r2, #1
   2134c:	f00e fada 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   21350:	f06f 0012 	mvn.w	r0, #18
#endif
}
   21354:	b008      	add	sp, #32
   21356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return gpio_pin_configure(spec->port,
   2135a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   2135c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   2135e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   21360:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   21364:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21366:	f8dc 7000 	ldr.w	r7, [ip]
	return gpio_pin_configure(spec->port,
   2136a:	bf54      	ite	pl
   2136c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   21370:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   21374:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21378:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2137c:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
   2137e:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21382:	bf4c      	ite	mi
   21384:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21388:	ea27 070e 	bicpl.w	r7, r7, lr
   2138c:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   21390:	f8d8 3000 	ldr.w	r3, [r8]
   21394:	4798      	blx	r3
		if (ret < 0) {
   21396:	2800      	cmp	r0, #0
   21398:	dbdc      	blt.n	21354 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   2139a:	3408      	adds	r4, #8
   2139c:	e7bb      	b.n	21316 <spi_nrfx_init+0x32>
   2139e:	bf00      	nop
   213a0:	0003331c 	.word	0x0003331c
   213a4:	000380e9 	.word	0x000380e9

000213a8 <transfer_next_chunk>:
{
   213a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   213aa:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   213ac:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   213ae:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   213b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   213b2:	b98d      	cbnz	r5, 213d8 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   213b4:	2b00      	cmp	r3, #0
   213b6:	d137      	bne.n	21428 <transfer_next_chunk+0x80>
	int error = 0;
   213b8:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   213ba:	2200      	movs	r2, #0
   213bc:	4620      	mov	r0, r4
   213be:	4611      	mov	r1, r2
   213c0:	f00e fac4 	bl	2f94c <_spi_context_cs_control>
	ctx->sync_status = status;
   213c4:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   213c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   213ca:	f004 fc83 	bl	25cd4 <z_impl_k_sem_give>
	dev_data->busy = false;
   213ce:	2300      	movs	r3, #0
   213d0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   213d4:	b004      	add	sp, #16
   213d6:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   213d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   213da:	bb0b      	cbnz	r3, 21420 <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   213dc:	bb39      	cbnz	r1, 2142e <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   213de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   213e2:	42aa      	cmp	r2, r5
   213e4:	bf28      	it	cs
   213e6:	462a      	movcs	r2, r5
   213e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   213ea:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   213ec:	9100      	str	r1, [sp, #0]
   213ee:	b11b      	cbz	r3, 213f8 <transfer_next_chunk+0x50>
   213f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   213f2:	2b00      	cmp	r3, #0
   213f4:	bf18      	it	ne
   213f6:	4613      	movne	r3, r2
   213f8:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   213fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   213fc:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   213fe:	b11b      	cbz	r3, 21408 <transfer_next_chunk+0x60>
   21400:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   21402:	2b00      	cmp	r3, #0
   21404:	bf18      	it	ne
   21406:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   21408:	2200      	movs	r2, #0
   2140a:	4669      	mov	r1, sp
   2140c:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2140e:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   21410:	f003 fbc8 	bl	24ba4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   21414:	4b0d      	ldr	r3, [pc, #52]	; (2144c <transfer_next_chunk+0xa4>)
   21416:	4298      	cmp	r0, r3
   21418:	d0dc      	beq.n	213d4 <transfer_next_chunk+0x2c>
			error = -EIO;
   2141a:	f06f 0504 	mvn.w	r5, #4
   2141e:	e7cc      	b.n	213ba <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   21420:	429d      	cmp	r5, r3
   21422:	bf28      	it	cs
   21424:	461d      	movcs	r5, r3
   21426:	e7d9      	b.n	213dc <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   21428:	461d      	mov	r5, r3
   2142a:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   2142c:	e7d7      	b.n	213de <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2142e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   21432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21436:	d0d2      	beq.n	213de <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   21438:	2d08      	cmp	r5, #8
   2143a:	bf28      	it	cs
   2143c:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2143e:	6f20      	ldr	r0, [r4, #112]	; 0x70
   21440:	462a      	mov	r2, r5
   21442:	f010 faee 	bl	31a22 <memcpy>
			tx_buf = dev_data->buffer;
   21446:	6f21      	ldr	r1, [r4, #112]	; 0x70
   21448:	e7c9      	b.n	213de <transfer_next_chunk+0x36>
   2144a:	bf00      	nop
   2144c:	0bad0000 	.word	0x0bad0000

00021450 <event_handler>:
{
   21450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   21452:	7803      	ldrb	r3, [r0, #0]
{
   21454:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   21456:	2b00      	cmp	r3, #0
   21458:	d154      	bne.n	21504 <event_handler+0xb4>
	if (!ctx->tx_len) {
   2145a:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2145c:	6e89      	ldr	r1, [r1, #104]	; 0x68
   2145e:	b152      	cbz	r2, 21476 <event_handler+0x26>
	if (len > ctx->tx_len) {
   21460:	4291      	cmp	r1, r2
   21462:	d91d      	bls.n	214a0 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   21464:	4a28      	ldr	r2, [pc, #160]	; (21508 <event_handler+0xb8>)
   21466:	4618      	mov	r0, r3
   21468:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2146c:	4927      	ldr	r1, [pc, #156]	; (2150c <event_handler+0xbc>)
   2146e:	2201      	movs	r2, #1
   21470:	9300      	str	r3, [sp, #0]
   21472:	f00e fa47 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   21476:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   21478:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   2147a:	b15b      	cbz	r3, 21494 <event_handler+0x44>
	if (len > ctx->rx_len) {
   2147c:	429a      	cmp	r2, r3
   2147e:	d928      	bls.n	214d2 <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   21480:	4b21      	ldr	r3, [pc, #132]	; (21508 <event_handler+0xb8>)
   21482:	2201      	movs	r2, #1
   21484:	9302      	str	r3, [sp, #8]
   21486:	2300      	movs	r3, #0
   21488:	4920      	ldr	r1, [pc, #128]	; (2150c <event_handler+0xbc>)
   2148a:	4618      	mov	r0, r3
   2148c:	e9cd 3300 	strd	r3, r3, [sp]
   21490:	f00e fa38 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   21494:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   21496:	b004      	add	sp, #16
   21498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   2149c:	f7ff bf84 	b.w	213a8 <transfer_next_chunk>
	ctx->tx_len -= len;
   214a0:	1a52      	subs	r2, r2, r1
   214a2:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   214a4:	b97a      	cbnz	r2, 214c6 <event_handler+0x76>
		++ctx->current_tx;
   214a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   214a8:	f104 0258 	add.w	r2, r4, #88	; 0x58
		++ctx->current_tx;
   214ac:	3308      	adds	r3, #8
   214ae:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   214b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   214b2:	f104 0148 	add.w	r1, r4, #72	; 0x48
		--ctx->tx_count;
   214b6:	3b01      	subs	r3, #1
   214b8:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   214ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
   214be:	f00e fa0e 	bl	2f8de <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   214c2:	6560      	str	r0, [r4, #84]	; 0x54
   214c4:	e7d7      	b.n	21476 <event_handler+0x26>
	} else if (ctx->tx_buf) {
   214c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   214c8:	2b00      	cmp	r3, #0
   214ca:	d0d4      	beq.n	21476 <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   214cc:	440b      	add	r3, r1
   214ce:	6563      	str	r3, [r4, #84]	; 0x54
   214d0:	e7d1      	b.n	21476 <event_handler+0x26>
	ctx->rx_len -= len;
   214d2:	1a9b      	subs	r3, r3, r2
   214d4:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   214d6:	b97b      	cbnz	r3, 214f8 <event_handler+0xa8>
		++ctx->current_rx;
   214d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   214da:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   214de:	3308      	adds	r3, #8
   214e0:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   214e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   214e4:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   214e8:	3b01      	subs	r3, #1
   214ea:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   214ec:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   214f0:	f00e f9f5 	bl	2f8de <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   214f4:	65e0      	str	r0, [r4, #92]	; 0x5c
   214f6:	e7cd      	b.n	21494 <event_handler+0x44>
	} else if (ctx->rx_buf) {
   214f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   214fa:	2b00      	cmp	r3, #0
   214fc:	d0ca      	beq.n	21494 <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   214fe:	4413      	add	r3, r2
   21500:	65e3      	str	r3, [r4, #92]	; 0x5c
   21502:	e7c7      	b.n	21494 <event_handler+0x44>
}
   21504:	b004      	add	sp, #16
   21506:	bd10      	pop	{r4, pc}
   21508:	0003810d 	.word	0x0003810d
   2150c:	0003331c 	.word	0x0003331c

00021510 <spi_nrfx_transceive>:
{
   21510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21514:	469b      	mov	fp, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   21516:	888b      	ldrh	r3, [r1, #4]
   21518:	460f      	mov	r7, r1
   2151a:	0499      	lsls	r1, r3, #18
   2151c:	4680      	mov	r8, r0
   2151e:	4691      	mov	r9, r2
	struct spi_nrfx_data *dev_data = dev->data;
   21520:	6904      	ldr	r4, [r0, #16]
{
   21522:	b08f      	sub	sp, #60	; 0x3c
   21524:	d435      	bmi.n	21592 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
   21526:	f04f 32ff 	mov.w	r2, #4294967295
   2152a:	f04f 33ff 	mov.w	r3, #4294967295
   2152e:	f104 0010 	add.w	r0, r4, #16
   21532:	f004 fbf5 	bl	25d20 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   21536:	6067      	str	r7, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   21538:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   2153c:	f8d8 a010 	ldr.w	sl, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   21540:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   21542:	9305      	str	r3, [sp, #20]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   21544:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
   21548:	9306      	str	r3, [sp, #24]
   2154a:	b123      	cbz	r3, 21556 <spi_nrfx_transceive+0x46>
   2154c:	f8da 3000 	ldr.w	r3, [sl]
   21550:	429f      	cmp	r7, r3
   21552:	f000 80da 	beq.w	2170a <spi_nrfx_transceive+0x1fa>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   21556:	88be      	ldrh	r6, [r7, #4]
   21558:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   2155c:	d020      	beq.n	215a0 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
   2155e:	4ba1      	ldr	r3, [pc, #644]	; (217e4 <spi_nrfx_transceive+0x2d4>)
   21560:	2201      	movs	r2, #1
   21562:	9302      	str	r3, [sp, #8]
   21564:	2300      	movs	r3, #0
   21566:	49a0      	ldr	r1, [pc, #640]	; (217e8 <spi_nrfx_transceive+0x2d8>)
   21568:	4618      	mov	r0, r3
   2156a:	e9cd 3300 	strd	r3, r3, [sp]
   2156e:	f00e f9c9 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   21572:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   21576:	6823      	ldr	r3, [r4, #0]
   21578:	889b      	ldrh	r3, [r3, #4]
   2157a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   2157e:	d104      	bne.n	2158a <spi_nrfx_transceive+0x7a>
		ctx->owner = NULL;
   21580:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   21582:	f104 0010 	add.w	r0, r4, #16
   21586:	f004 fba5 	bl	25cd4 <z_impl_k_sem_give>
}
   2158a:	4628      	mov	r0, r5
   2158c:	b00f      	add	sp, #60	; 0x3c
   2158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   21592:	69a3      	ldr	r3, [r4, #24]
   21594:	2b00      	cmp	r3, #0
   21596:	d1c6      	bne.n	21526 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   21598:	6863      	ldr	r3, [r4, #4]
   2159a:	429f      	cmp	r7, r3
   2159c:	d1c3      	bne.n	21526 <spi_nrfx_transceive+0x16>
   2159e:	e7cb      	b.n	21538 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   215a0:	f016 0201 	ands.w	r2, r6, #1
   215a4:	d00e      	beq.n	215c4 <spi_nrfx_transceive+0xb4>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   215a6:	f8d8 2000 	ldr.w	r2, [r8]
   215aa:	4618      	mov	r0, r3
   215ac:	9203      	str	r2, [sp, #12]
   215ae:	4a8f      	ldr	r2, [pc, #572]	; (217ec <spi_nrfx_transceive+0x2dc>)
   215b0:	498d      	ldr	r1, [pc, #564]	; (217e8 <spi_nrfx_transceive+0x2d8>)
   215b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   215b6:	9300      	str	r3, [sp, #0]
   215b8:	2201      	movs	r2, #1
   215ba:	f00e f9a3 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   215be:	f06f 0515 	mvn.w	r5, #21
   215c2:	e7d8      	b.n	21576 <spi_nrfx_transceive+0x66>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   215c4:	f016 0308 	ands.w	r3, r6, #8
   215c8:	d00a      	beq.n	215e0 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Loopback mode is not supported");
   215ca:	4b89      	ldr	r3, [pc, #548]	; (217f0 <spi_nrfx_transceive+0x2e0>)
   215cc:	9200      	str	r2, [sp, #0]
   215ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
   215d2:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   215d4:	2201      	movs	r2, #1
   215d6:	4618      	mov	r0, r3
   215d8:	4983      	ldr	r1, [pc, #524]	; (217e8 <spi_nrfx_transceive+0x2d8>)
   215da:	f00e f993 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   215de:	e7ee      	b.n	215be <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   215e0:	f3c6 1245 	ubfx	r2, r6, #5, #6
   215e4:	2a08      	cmp	r2, #8
   215e6:	d004      	beq.n	215f2 <spi_nrfx_transceive+0xe2>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   215e8:	4a82      	ldr	r2, [pc, #520]	; (217f4 <spi_nrfx_transceive+0x2e4>)
   215ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
   215ee:	9300      	str	r3, [sp, #0]
   215f0:	e7f0      	b.n	215d4 <spi_nrfx_transceive+0xc4>
	if (spi_cfg->frequency < 125000) {
   215f2:	683a      	ldr	r2, [r7, #0]
   215f4:	9207      	str	r2, [sp, #28]
   215f6:	9907      	ldr	r1, [sp, #28]
   215f8:	4a7f      	ldr	r2, [pc, #508]	; (217f8 <spi_nrfx_transceive+0x2e8>)
   215fa:	4291      	cmp	r1, r2
   215fc:	d801      	bhi.n	21602 <spi_nrfx_transceive+0xf2>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   215fe:	4a7f      	ldr	r2, [pc, #508]	; (217fc <spi_nrfx_transceive+0x2ec>)
   21600:	e7f3      	b.n	215ea <spi_nrfx_transceive+0xda>
	if (max_freq > 16000000 &&
   21602:	4b7f      	ldr	r3, [pc, #508]	; (21800 <spi_nrfx_transceive+0x2f0>)
   21604:	429d      	cmp	r5, r3
   21606:	d906      	bls.n	21616 <spi_nrfx_transceive+0x106>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   21608:	4a7e      	ldr	r2, [pc, #504]	; (21804 <spi_nrfx_transceive+0x2f4>)
   2160a:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   2160e:	f012 0f03 	tst.w	r2, #3
   21612:	bf18      	it	ne
   21614:	461d      	movne	r5, r3
	config = dev_config->def_config;
   21616:	9b05      	ldr	r3, [sp, #20]
   21618:	f10d 0c20 	add.w	ip, sp, #32
   2161c:	f103 0e0c 	add.w	lr, r3, #12
   21620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   21624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   21628:	9b07      	ldr	r3, [sp, #28]
	config = dev_config->def_config;
   2162a:	e89e 0003 	ldmia.w	lr, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2162e:	42ab      	cmp	r3, r5
   21630:	bf28      	it	cs
   21632:	462b      	movcs	r3, r5
   21634:	461d      	mov	r5, r3
	if (frequency < 250000) {
   21636:	4b74      	ldr	r3, [pc, #464]	; (21808 <spi_nrfx_transceive+0x2f8>)
	config = dev_config->def_config;
   21638:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
   2163c:	429d      	cmp	r5, r3
   2163e:	d946      	bls.n	216ce <spi_nrfx_transceive+0x1be>
	} else if (frequency < 500000) {
   21640:	4b72      	ldr	r3, [pc, #456]	; (2180c <spi_nrfx_transceive+0x2fc>)
   21642:	429d      	cmp	r5, r3
   21644:	d946      	bls.n	216d4 <spi_nrfx_transceive+0x1c4>
	} else if (frequency < 1000000) {
   21646:	4b72      	ldr	r3, [pc, #456]	; (21810 <spi_nrfx_transceive+0x300>)
   21648:	429d      	cmp	r5, r3
   2164a:	d946      	bls.n	216da <spi_nrfx_transceive+0x1ca>
	} else if (frequency < 2000000) {
   2164c:	4b71      	ldr	r3, [pc, #452]	; (21814 <spi_nrfx_transceive+0x304>)
   2164e:	429d      	cmp	r5, r3
   21650:	d946      	bls.n	216e0 <spi_nrfx_transceive+0x1d0>
	} else if (frequency < 4000000) {
   21652:	4b71      	ldr	r3, [pc, #452]	; (21818 <spi_nrfx_transceive+0x308>)
   21654:	429d      	cmp	r5, r3
   21656:	d946      	bls.n	216e6 <spi_nrfx_transceive+0x1d6>
	} else if (frequency < 8000000) {
   21658:	4b70      	ldr	r3, [pc, #448]	; (2181c <spi_nrfx_transceive+0x30c>)
   2165a:	429d      	cmp	r5, r3
   2165c:	d346      	bcc.n	216ec <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 16000000) {
   2165e:	4b68      	ldr	r3, [pc, #416]	; (21800 <spi_nrfx_transceive+0x2f0>)
   21660:	429d      	cmp	r5, r3
   21662:	d346      	bcc.n	216f2 <spi_nrfx_transceive+0x1e2>
		return NRF_SPIM_FREQ_16M;
   21664:	4b6e      	ldr	r3, [pc, #440]	; (21820 <spi_nrfx_transceive+0x310>)
   21666:	429d      	cmp	r5, r3
   21668:	bf2c      	ite	cs
   2166a:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   2166e:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   21672:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   21674:	950a      	str	r5, [sp, #40]	; 0x28
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   21676:	f006 0304 	and.w	r3, r6, #4
   2167a:	d53d      	bpl.n	216f8 <spi_nrfx_transceive+0x1e8>
			return NRF_SPIM_MODE_2;
   2167c:	2b00      	cmp	r3, #0
   2167e:	bf14      	ite	ne
   21680:	2303      	movne	r3, #3
   21682:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   21684:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if (dev_data->initialized) {
   21688:	9b06      	ldr	r3, [sp, #24]
	if (operation & SPI_TRANSFER_LSB) {
   2168a:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   2168e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
	if (dev_data->initialized) {
   21692:	b12b      	cbz	r3, 216a0 <spi_nrfx_transceive+0x190>
		nrfx_spim_uninit(&dev_config->spim);
   21694:	9805      	ldr	r0, [sp, #20]
   21696:	f003 fa33 	bl	24b00 <nrfx_spim_uninit>
		dev_data->initialized = false;
   2169a:	2300      	movs	r3, #0
   2169c:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   216a0:	4653      	mov	r3, sl
   216a2:	4a60      	ldr	r2, [pc, #384]	; (21824 <spi_nrfx_transceive+0x314>)
   216a4:	9805      	ldr	r0, [sp, #20]
   216a6:	a908      	add	r1, sp, #32
   216a8:	f003 f90c 	bl	248c4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   216ac:	4b5e      	ldr	r3, [pc, #376]	; (21828 <spi_nrfx_transceive+0x318>)
   216ae:	4298      	cmp	r0, r3
   216b0:	d026      	beq.n	21700 <spi_nrfx_transceive+0x1f0>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   216b2:	4b5e      	ldr	r3, [pc, #376]	; (2182c <spi_nrfx_transceive+0x31c>)
   216b4:	9003      	str	r0, [sp, #12]
   216b6:	9302      	str	r3, [sp, #8]
   216b8:	2300      	movs	r3, #0
   216ba:	2201      	movs	r2, #1
   216bc:	4618      	mov	r0, r3
   216be:	e9cd 3300 	strd	r3, r3, [sp]
   216c2:	4949      	ldr	r1, [pc, #292]	; (217e8 <spi_nrfx_transceive+0x2d8>)
   216c4:	f00e f91e 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   216c8:	f06f 0504 	mvn.w	r5, #4
   216cc:	e753      	b.n	21576 <spi_nrfx_transceive+0x66>
		return NRF_SPIM_FREQ_125K;
   216ce:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   216d2:	e7ce      	b.n	21672 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_250K;
   216d4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   216d8:	e7cb      	b.n	21672 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_500K;
   216da:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   216de:	e7c8      	b.n	21672 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_1M;
   216e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   216e4:	e7c5      	b.n	21672 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_2M;
   216e6:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   216ea:	e7c2      	b.n	21672 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_4M;
   216ec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   216f0:	e7bf      	b.n	21672 <spi_nrfx_transceive+0x162>
		return NRF_SPIM_FREQ_8M;
   216f2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   216f6:	e7bc      	b.n	21672 <spi_nrfx_transceive+0x162>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   216f8:	3b00      	subs	r3, #0
   216fa:	bf18      	it	ne
   216fc:	2301      	movne	r3, #1
   216fe:	e7c1      	b.n	21684 <spi_nrfx_transceive+0x174>
	dev_data->initialized = true;
   21700:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   21702:	f8ca 7000 	str.w	r7, [sl]
	dev_data->initialized = true;
   21706:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
		dev_data->busy = true;
   2170a:	2301      	movs	r3, #1
   2170c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   21710:	f1b9 0f00 	cmp.w	r9, #0
   21714:	d154      	bne.n	217c0 <spi_nrfx_transceive+0x2b0>
   21716:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   2171a:	2300      	movs	r3, #0
   2171c:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   2171e:	f104 0258 	add.w	r2, r4, #88	; 0x58
   21722:	f104 0148 	add.w	r1, r4, #72	; 0x48
   21726:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2172a:	f00e f8d8 	bl	2f8de <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   2172e:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   21730:	f1bb 0f00 	cmp.w	fp, #0
   21734:	d14c      	bne.n	217d0 <spi_nrfx_transceive+0x2c0>
   21736:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   2173a:	2300      	movs	r3, #0
   2173c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   2173e:	f104 0260 	add.w	r2, r4, #96	; 0x60
   21742:	f104 0150 	add.w	r1, r4, #80	; 0x50
   21746:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2174a:	f00e f8c8 	bl	2f8de <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   2174e:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   21750:	2101      	movs	r1, #1
   21752:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   21754:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   21756:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   21758:	4620      	mov	r0, r4
   2175a:	f00e f8f7 	bl	2f94c <_spi_context_cs_control>
		transfer_next_chunk(dev);
   2175e:	4640      	mov	r0, r8
   21760:	f7ff fe22 	bl	213a8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   21764:	6e25      	ldr	r5, [r4, #96]	; 0x60
   21766:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   21768:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2176a:	429d      	cmp	r5, r3
   2176c:	bf38      	it	cc
   2176e:	461d      	movcc	r5, r3
   21770:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   21774:	435d      	muls	r5, r3
			     ctx->config->frequency;
   21776:	f857 3b28 	ldr.w	r3, [r7], #40
   2177a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2177e:	681b      	ldr	r3, [r3, #0]
   21780:	4631      	mov	r1, r6
   21782:	fbb5 f5f3 	udiv	r5, r5, r3
   21786:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   2178a:	35c8      	adds	r5, #200	; 0xc8
   2178c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21790:	2300      	movs	r3, #0
   21792:	fbe5 010c 	umlal	r0, r1, r5, ip
   21796:	f7e7 fbd3 	bl	8f40 <__aeabi_uldivmod>
   2179a:	4602      	mov	r2, r0
   2179c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2179e:	4638      	mov	r0, r7
   217a0:	f004 fabe 	bl	25d20 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   217a4:	b1e0      	cbz	r0, 217e0 <spi_nrfx_transceive+0x2d0>
		LOG_ERR("Timeout waiting for transfer complete");
   217a6:	4b22      	ldr	r3, [pc, #136]	; (21830 <spi_nrfx_transceive+0x320>)
   217a8:	2201      	movs	r2, #1
   217aa:	e9cd 6301 	strd	r6, r3, [sp, #4]
   217ae:	4630      	mov	r0, r6
   217b0:	4633      	mov	r3, r6
   217b2:	490d      	ldr	r1, [pc, #52]	; (217e8 <spi_nrfx_transceive+0x2d8>)
   217b4:	9600      	str	r6, [sp, #0]
   217b6:	f00e f8a5 	bl	2f904 <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   217ba:	f06f 0573 	mvn.w	r5, #115	; 0x73
   217be:	e6da      	b.n	21576 <spi_nrfx_transceive+0x66>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   217c0:	f8d9 3000 	ldr.w	r3, [r9]
   217c4:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   217c6:	2b00      	cmp	r3, #0
   217c8:	d0a7      	beq.n	2171a <spi_nrfx_transceive+0x20a>
   217ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
   217ce:	e7a5      	b.n	2171c <spi_nrfx_transceive+0x20c>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   217d0:	f8db 3000 	ldr.w	r3, [fp]
   217d4:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   217d6:	2b00      	cmp	r3, #0
   217d8:	d0af      	beq.n	2173a <spi_nrfx_transceive+0x22a>
   217da:	f8db 3004 	ldr.w	r3, [fp, #4]
   217de:	e7ad      	b.n	2173c <spi_nrfx_transceive+0x22c>
	status = ctx->sync_status;
   217e0:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   217e2:	e6c8      	b.n	21576 <spi_nrfx_transceive+0x66>
   217e4:	0003812b 	.word	0x0003812b
   217e8:	0003331c 	.word	0x0003331c
   217ec:	00038145 	.word	0x00038145
   217f0:	00038167 	.word	0x00038167
   217f4:	00038186 	.word	0x00038186
   217f8:	0001e847 	.word	0x0001e847
   217fc:	000381b5 	.word	0x000381b5
   21800:	00f42400 	.word	0x00f42400
   21804:	40005000 	.word	0x40005000
   21808:	0003d08f 	.word	0x0003d08f
   2180c:	0007a11f 	.word	0x0007a11f
   21810:	000f423f 	.word	0x000f423f
   21814:	001e847f 	.word	0x001e847f
   21818:	003d08ff 	.word	0x003d08ff
   2181c:	007a1200 	.word	0x007a1200
   21820:	01e84800 	.word	0x01e84800
   21824:	00021451 	.word	0x00021451
   21828:	0bad0000 	.word	0x0bad0000
   2182c:	000381e6 	.word	0x000381e6
   21830:	0003820d 	.word	0x0003820d

00021834 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   21834:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   21838:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   2183c:	280a      	cmp	r0, #10
   2183e:	bf9a      	itte	ls
   21840:	4b02      	ldrls	r3, [pc, #8]	; (2184c <qspi_get_zephyr_ret_code+0x18>)
   21842:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   21846:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   2184a:	4770      	bx	lr
   2184c:	00034580 	.word	0x00034580

00021850 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   21850:	4b02      	ldr	r3, [pc, #8]	; (2185c <qspi_nor_pages_layout+0xc>)
   21852:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21854:	2301      	movs	r3, #1
   21856:	6013      	str	r3, [r2, #0]
}
   21858:	4770      	bx	lr
   2185a:	bf00      	nop
   2185c:	000342d0 	.word	0x000342d0

00021860 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   21860:	4800      	ldr	r0, [pc, #0]	; (21864 <qspi_flash_get_parameters+0x4>)
   21862:	4770      	bx	lr
   21864:	00034264 	.word	0x00034264

00021868 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   21868:	4b05      	ldr	r3, [pc, #20]	; (21880 <qspi_wait_for_completion.isra.0+0x18>)
   2186a:	4299      	cmp	r1, r3
   2186c:	d106      	bne.n	2187c <qspi_wait_for_completion.isra.0+0x14>
   2186e:	f04f 32ff 	mov.w	r2, #4294967295
   21872:	f04f 33ff 	mov.w	r3, #4294967295
   21876:	3030      	adds	r0, #48	; 0x30
   21878:	f004 ba52 	b.w	25d20 <z_impl_k_sem_take>
}
   2187c:	4770      	bx	lr
   2187e:	bf00      	nop
   21880:	0bad0000 	.word	0x0bad0000

00021884 <qspi_device_init>:
{
   21884:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   21886:	6905      	ldr	r5, [r0, #16]
{
   21888:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   2188a:	4e0f      	ldr	r6, [pc, #60]	; (218c8 <qspi_device_init+0x44>)
	qspi_lock(dev);
   2188c:	4628      	mov	r0, r5
   2188e:	f00e f8b8 	bl	2fa02 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   21892:	f105 0048 	add.w	r0, r5, #72	; 0x48
   21896:	f00e f89d 	bl	2f9d4 <k_sem_give>
	if (!qspi_initialized) {
   2189a:	7833      	ldrb	r3, [r6, #0]
   2189c:	b98b      	cbnz	r3, 218c2 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2189e:	462a      	mov	r2, r5
   218a0:	490a      	ldr	r1, [pc, #40]	; (218cc <qspi_device_init+0x48>)
   218a2:	6860      	ldr	r0, [r4, #4]
   218a4:	f002 fdde 	bl	24464 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   218a8:	f7ff ffc4 	bl	21834 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   218ac:	fab0 f380 	clz	r3, r0
   218b0:	4605      	mov	r5, r0
   218b2:	095b      	lsrs	r3, r3, #5
   218b4:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   218b6:	6920      	ldr	r0, [r4, #16]
   218b8:	3018      	adds	r0, #24
   218ba:	f00e f88b 	bl	2f9d4 <k_sem_give>
}
   218be:	4628      	mov	r0, r5
   218c0:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   218c2:	2500      	movs	r5, #0
   218c4:	e7f7      	b.n	218b6 <qspi_device_init+0x32>
   218c6:	bf00      	nop
   218c8:	20031b9a 	.word	0x20031b9a
   218cc:	0002f9d9 	.word	0x0002f9d9

000218d0 <qspi_send_cmd>:
{
   218d0:	b570      	push	{r4, r5, r6, lr}
	if (cmd->tx_buf) {
   218d2:	684c      	ldr	r4, [r1, #4]
{
   218d4:	4605      	mov	r5, r0
   218d6:	b088      	sub	sp, #32
	if (cmd->tx_buf) {
   218d8:	b1ec      	cbz	r4, 21916 <qspi_send_cmd+0x46>
		tx_buf = cmd->tx_buf->buf;
   218da:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   218de:	6888      	ldr	r0, [r1, #8]
   218e0:	b1d8      	cbz	r0, 2191a <qspi_send_cmd+0x4a>
		rx_len = cmd->rx_buf->len;
   218e2:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   218e6:	b1c8      	cbz	r0, 2191c <qspi_send_cmd+0x4c>
   218e8:	b1c3      	cbz	r3, 2191c <qspi_send_cmd+0x4c>
		if (rx_len != tx_len) {
   218ea:	4283      	cmp	r3, r0
   218ec:	d10f      	bne.n	2190e <qspi_send_cmd+0x3e>
		xfer_len += tx_len;
   218ee:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   218f0:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   218f2:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   218f4:	d915      	bls.n	21922 <qspi_send_cmd+0x52>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   218f6:	e9cd 1303 	strd	r1, r3, [sp, #12]
   218fa:	4b1a      	ldr	r3, [pc, #104]	; (21964 <qspi_send_cmd+0x94>)
   218fc:	2202      	movs	r2, #2
   218fe:	9302      	str	r3, [sp, #8]
   21900:	2300      	movs	r3, #0
   21902:	4919      	ldr	r1, [pc, #100]	; (21968 <qspi_send_cmd+0x98>)
   21904:	4618      	mov	r0, r3
   21906:	e9cd 3300 	strd	r3, r3, [sp]
   2190a:	f00e f86b 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
}
   2190e:	f06f 0015 	mvn.w	r0, #21
   21912:	b008      	add	sp, #32
   21914:	bd70      	pop	{r4, r5, r6, pc}
	size_t tx_len = 0;
   21916:	4623      	mov	r3, r4
   21918:	e7e1      	b.n	218de <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   2191a:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   2191c:	3301      	adds	r3, #1
   2191e:	4403      	add	r3, r0
   21920:	e7e6      	b.n	218f0 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   21922:	f88d 3019 	strb.w	r3, [sp, #25]
   21926:	f240 1301 	movw	r3, #257	; 0x101
   2192a:	f8ad 301a 	strh.w	r3, [sp, #26]
   2192e:	2300      	movs	r3, #0
	qspi_lock(dev);
   21930:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   21932:	f88d 301c 	strb.w	r3, [sp, #28]
   21936:	f88d 1018 	strb.w	r1, [sp, #24]
   2193a:	f88d 201d 	strb.w	r2, [sp, #29]
	qspi_lock(dev);
   2193e:	f00e f860 	bl	2fa02 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   21942:	4621      	mov	r1, r4
   21944:	4632      	mov	r2, r6
   21946:	a806      	add	r0, sp, #24
   21948:	f002 fe66 	bl	24618 <nrfx_qspi_cinstr_xfer>
   2194c:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   2194e:	6928      	ldr	r0, [r5, #16]
   21950:	3018      	adds	r0, #24
   21952:	f00e f83f 	bl	2f9d4 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   21956:	4620      	mov	r0, r4
}
   21958:	b008      	add	sp, #32
   2195a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
   2195e:	f7ff bf69 	b.w	21834 <qspi_get_zephyr_ret_code>
   21962:	bf00      	nop
   21964:	0003824a 	.word	0x0003824a
   21968:	0003330c 	.word	0x0003330c

0002196c <qspi_device_uninit>:
{
   2196c:	b538      	push	{r3, r4, r5, lr}
   2196e:	4604      	mov	r4, r0
	qspi_lock(dev);
   21970:	6900      	ldr	r0, [r0, #16]
   21972:	f00e f846 	bl	2fa02 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   21976:	6925      	ldr	r5, [r4, #16]
   21978:	2200      	movs	r2, #0
   2197a:	2300      	movs	r3, #0
   2197c:	f105 0048 	add.w	r0, r5, #72	; 0x48
   21980:	f004 f9ce 	bl	25d20 <z_impl_k_sem_take>
	if (last) {
   21984:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21986:	b94b      	cbnz	r3, 2199c <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   21988:	4d0a      	ldr	r5, [pc, #40]	; (219b4 <qspi_device_uninit+0x48>)
   2198a:	f002 fe85 	bl	24698 <nrfx_qspi_mem_busy_check>
   2198e:	42a8      	cmp	r0, r5
   21990:	d10a      	bne.n	219a8 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   21992:	f002 fea3 	bl	246dc <nrfx_qspi_uninit>
		qspi_initialized = false;
   21996:	2200      	movs	r2, #0
   21998:	4b07      	ldr	r3, [pc, #28]	; (219b8 <qspi_device_uninit+0x4c>)
   2199a:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   2199c:	6920      	ldr	r0, [r4, #16]
}
   2199e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   219a2:	3018      	adds	r0, #24
   219a4:	f00e b816 	b.w	2f9d4 <k_sem_give>
	return z_impl_k_sleep(timeout);
   219a8:	2100      	movs	r1, #0
   219aa:	f240 6067 	movw	r0, #1639	; 0x667
   219ae:	f004 feb5 	bl	2671c <z_impl_k_sleep>
   219b2:	e7ea      	b.n	2198a <qspi_device_uninit+0x1e>
   219b4:	0bad0000 	.word	0x0bad0000
   219b8:	20031b9a 	.word	0x20031b9a

000219bc <qspi_nor_read>:
{
   219bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219c0:	4681      	mov	r9, r0
   219c2:	460e      	mov	r6, r1
   219c4:	461c      	mov	r4, r3
	if (!dest) {
   219c6:	4690      	mov	r8, r2
{
   219c8:	b08b      	sub	sp, #44	; 0x2c
	if (!dest) {
   219ca:	b1aa      	cbz	r2, 219f8 <qspi_nor_read+0x3c>
	if (!size) {
   219cc:	2b00      	cmp	r3, #0
   219ce:	f000 809f 	beq.w	21b10 <qspi_nor_read+0x154>
	if (addr < 0 ||
   219d2:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   219d4:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   219d6:	db03      	blt.n	219e0 <qspi_nor_read+0x24>
   219d8:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   219da:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   219dc:	4293      	cmp	r3, r2
   219de:	d911      	bls.n	21a04 <qspi_nor_read+0x48>
		LOG_ERR("read error: address or size "
   219e0:	4b4c      	ldr	r3, [pc, #304]	; (21b14 <qspi_nor_read+0x158>)
   219e2:	2201      	movs	r2, #1
   219e4:	9302      	str	r3, [sp, #8]
   219e6:	2300      	movs	r3, #0
   219e8:	e9cd 6403 	strd	r6, r4, [sp, #12]
   219ec:	4618      	mov	r0, r3
   219ee:	e9cd 3300 	strd	r3, r3, [sp]
   219f2:	4949      	ldr	r1, [pc, #292]	; (21b18 <qspi_nor_read+0x15c>)
   219f4:	f00d fff6 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   219f8:	f06f 0515 	mvn.w	r5, #21
}
   219fc:	4628      	mov	r0, r5
   219fe:	b00b      	add	sp, #44	; 0x2c
   21a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   21a04:	f7ff ff3e 	bl	21884 <qspi_device_init>
	if (rc != 0) {
   21a08:	4605      	mov	r5, r0
   21a0a:	2800      	cmp	r0, #0
   21a0c:	d17c      	bne.n	21b08 <qspi_nor_read+0x14c>
	qspi_lock(dev);
   21a0e:	4275      	negs	r5, r6
   21a10:	f005 0503 	and.w	r5, r5, #3
   21a14:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21a18:	f00d fff3 	bl	2fa02 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   21a1c:	42a5      	cmp	r5, r4
   21a1e:	bf28      	it	cs
   21a20:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   21a22:	f1d8 0300 	rsbs	r3, r8, #0
   21a26:	f003 0303 	and.w	r3, r3, #3
   21a2a:	f008 0703 	and.w	r7, r8, #3
   21a2e:	bf58      	it	pl
   21a30:	425f      	negpl	r7, r3
   21a32:	427f      	negs	r7, r7
   21a34:	f007 0703 	and.w	r7, r7, #3
   21a38:	42a7      	cmp	r7, r4
   21a3a:	bf28      	it	cs
   21a3c:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   21a3e:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   21a40:	1be4      	subs	r4, r4, r7
   21a42:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   21a46:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   21a4a:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   21a4c:	bfc8      	it	gt
   21a4e:	46a2      	movgt	sl, r4
   21a50:	f003 0b03 	and.w	fp, r3, #3
   21a54:	bfc8      	it	gt
   21a56:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   21a5a:	f1ba 0f00 	cmp.w	sl, #0
   21a5e:	d019      	beq.n	21a94 <qspi_nor_read+0xd8>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   21a60:	eb08 0307 	add.w	r3, r8, r7
   21a64:	1972      	adds	r2, r6, r5
   21a66:	4651      	mov	r1, sl
   21a68:	4618      	mov	r0, r3
   21a6a:	9307      	str	r3, [sp, #28]
   21a6c:	f00e fc55 	bl	3031a <nrfx_qspi_read>
   21a70:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21a72:	4601      	mov	r1, r0
   21a74:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21a78:	f7ff fef6 	bl	21868 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   21a7c:	4a27      	ldr	r2, [pc, #156]	; (21b1c <qspi_nor_read+0x160>)
   21a7e:	4294      	cmp	r4, r2
   21a80:	d139      	bne.n	21af6 <qspi_nor_read+0x13a>
		if (flash_prefix != dest_prefix) {
   21a82:	42bd      	cmp	r5, r7
   21a84:	d006      	beq.n	21a94 <qspi_nor_read+0xd8>
__ssp_bos_icheck3(memmove, void *, const void *)
   21a86:	9b07      	ldr	r3, [sp, #28]
   21a88:	4652      	mov	r2, sl
   21a8a:	4619      	mov	r1, r3
   21a8c:	eb08 0005 	add.w	r0, r8, r5
   21a90:	f00f ffe7 	bl	31a62 <memmove>
	if (flash_prefix != 0) {
   21a94:	b1ad      	cbz	r5, 21ac2 <qspi_nor_read+0x106>
				     (WORD_SIZE - flash_prefix));
   21a96:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   21a9a:	2104      	movs	r1, #4
   21a9c:	1bf2      	subs	r2, r6, r7
   21a9e:	a808      	add	r0, sp, #32
   21aa0:	f00e fc3b 	bl	3031a <nrfx_qspi_read>
   21aa4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21aa6:	4601      	mov	r1, r0
   21aa8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21aac:	f7ff fedc 	bl	21868 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   21ab0:	4b1a      	ldr	r3, [pc, #104]	; (21b1c <qspi_nor_read+0x160>)
   21ab2:	429c      	cmp	r4, r3
   21ab4:	d11f      	bne.n	21af6 <qspi_nor_read+0x13a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21ab6:	ab08      	add	r3, sp, #32
   21ab8:	462a      	mov	r2, r5
   21aba:	4640      	mov	r0, r8
   21abc:	19d9      	adds	r1, r3, r7
   21abe:	f00f ffb0 	bl	31a22 <memcpy>
	if (flash_suffix != 0) {
   21ac2:	f1bb 0f00 	cmp.w	fp, #0
   21ac6:	d015      	beq.n	21af4 <qspi_nor_read+0x138>
				     addr + flash_prefix + flash_middle);
   21ac8:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   21aca:	2108      	movs	r1, #8
   21acc:	4452      	add	r2, sl
   21ace:	a808      	add	r0, sp, #32
   21ad0:	f00e fc23 	bl	3031a <nrfx_qspi_read>
   21ad4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   21ad6:	4601      	mov	r1, r0
   21ad8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21adc:	f7ff fec4 	bl	21868 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   21ae0:	4b0e      	ldr	r3, [pc, #56]	; (21b1c <qspi_nor_read+0x160>)
   21ae2:	429c      	cmp	r4, r3
   21ae4:	d107      	bne.n	21af6 <qspi_nor_read+0x13a>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   21ae6:	eb0a 0005 	add.w	r0, sl, r5
   21aea:	465a      	mov	r2, fp
   21aec:	a908      	add	r1, sp, #32
   21aee:	4440      	add	r0, r8
   21af0:	f00f ff97 	bl	31a22 <memcpy>
	return res;
   21af4:	4c09      	ldr	r4, [pc, #36]	; (21b1c <qspi_nor_read+0x160>)
	k_sem_give(&dev_data->sem);
   21af6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   21afa:	3018      	adds	r0, #24
   21afc:	f00d ff6a 	bl	2f9d4 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21b00:	4620      	mov	r0, r4
   21b02:	f7ff fe97 	bl	21834 <qspi_get_zephyr_ret_code>
   21b06:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   21b08:	4648      	mov	r0, r9
   21b0a:	f7ff ff2f 	bl	2196c <qspi_device_uninit>
	return rc;
   21b0e:	e775      	b.n	219fc <qspi_nor_read+0x40>
		return 0;
   21b10:	461d      	mov	r5, r3
   21b12:	e773      	b.n	219fc <qspi_nor_read+0x40>
   21b14:	0003826d 	.word	0x0003826d
   21b18:	0003330c 	.word	0x0003330c
   21b1c:	0bad0000 	.word	0x0bad0000

00021b20 <qspi_nor_init>:

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   21b20:	2202      	movs	r2, #2
{
   21b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b26:	4b64      	ldr	r3, [pc, #400]	; (21cb8 <qspi_nor_init+0x198>)
   21b28:	b090      	sub	sp, #64	; 0x40
   21b2a:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   21b2e:	6843      	ldr	r3, [r0, #4]
{
   21b30:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   21b32:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   21b34:	2100      	movs	r1, #0
   21b36:	4630      	mov	r0, r6
   21b38:	aa0d      	add	r2, sp, #52	; 0x34
   21b3a:	f00e fae8 	bl	3010e <pinctrl_lookup_state>
	if (ret < 0) {
   21b3e:	1e04      	subs	r4, r0, #0
   21b40:	db35      	blt.n	21bae <qspi_nor_init+0x8e>
	return pinctrl_apply_state_direct(config, state);
   21b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   21b44:	6832      	ldr	r2, [r6, #0]
   21b46:	7919      	ldrb	r1, [r3, #4]
   21b48:	6818      	ldr	r0, [r3, #0]
   21b4a:	f001 fb11 	bl	23170 <pinctrl_configure_pins>
	if (ret < 0) {
   21b4e:	1e04      	subs	r4, r0, #0
   21b50:	db2d      	blt.n	21bae <qspi_nor_init+0x8e>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   21b52:	2200      	movs	r2, #0
   21b54:	2101      	movs	r1, #1
   21b56:	202b      	movs	r0, #43	; 0x2b
   21b58:	f7ef fc5a 	bl	11410 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   21b5c:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   21b5e:	692a      	ldr	r2, [r5, #16]
   21b60:	4630      	mov	r0, r6
   21b62:	4956      	ldr	r1, [pc, #344]	; (21cbc <qspi_nor_init+0x19c>)
   21b64:	f002 fc7e 	bl	24464 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   21b68:	f7ff fe64 	bl	21834 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   21b6c:	1e04      	subs	r4, r0, #0
   21b6e:	db1e      	blt.n	21bae <qspi_nor_init+0x8e>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   21b70:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   21b72:	3b02      	subs	r3, #2
   21b74:	2b01      	cmp	r3, #1
   21b76:	d91e      	bls.n	21bb6 <qspi_nor_init+0x96>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   21b78:	f896 800a 	ldrb.w	r8, [r6, #10]
   21b7c:	f1a8 0803 	sub.w	r8, r8, #3
   21b80:	f1b8 0f01 	cmp.w	r8, #1
   21b84:	bf8c      	ite	hi
   21b86:	f04f 0800 	movhi.w	r8, #0
   21b8a:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   21b8e:	4628      	mov	r0, r5
   21b90:	f00d ff59 	bl	2fa46 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   21b94:	1e04      	subs	r4, r0, #0
   21b96:	da11      	bge.n	21bbc <qspi_nor_init+0x9c>
			LOG_ERR("RDSR failed: %d", ret);
   21b98:	4b49      	ldr	r3, [pc, #292]	; (21cc0 <qspi_nor_init+0x1a0>)
   21b9a:	2201      	movs	r2, #1
   21b9c:	9302      	str	r3, [sp, #8]
   21b9e:	2300      	movs	r3, #0
   21ba0:	4948      	ldr	r1, [pc, #288]	; (21cc4 <qspi_nor_init+0x1a4>)
   21ba2:	4618      	mov	r0, r3
   21ba4:	e9cd 3300 	strd	r3, r3, [sp]
   21ba8:	9403      	str	r4, [sp, #12]
   21baa:	f00d ff1b 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
}
   21bae:	4620      	mov	r0, r4
   21bb0:	b010      	add	sp, #64	; 0x40
   21bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   21bb6:	f04f 0801 	mov.w	r8, #1
   21bba:	e7e8      	b.n	21b8e <qspi_nor_init+0x6e>
		uint8_t sr = (uint8_t)ret;
   21bbc:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   21bbe:	f3c4 1480 	ubfx	r4, r4, #6, #1
   21bc2:	45a0      	cmp	r8, r4
   21bc4:	ae0a      	add	r6, sp, #40	; 0x28
   21bc6:	af0b      	add	r7, sp, #44	; 0x2c
   21bc8:	d02f      	beq.n	21c2a <qspi_nor_init+0x10a>
	uint8_t sr_array[2] = {0};
   21bca:	2300      	movs	r3, #0
			sr ^= qe_mask;
   21bcc:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   21bd0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		sr_array[0] = sr_val;
   21bd4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
	const struct qspi_buf sr_buf = {
   21bd8:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   21bda:	4628      	mov	r0, r5
   21bdc:	a90d      	add	r1, sp, #52	; 0x34
	struct qspi_cmd cmd = {
   21bde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	const struct qspi_buf sr_buf = {
   21be2:	960b      	str	r6, [sp, #44]	; 0x2c
	struct qspi_cmd cmd = {
   21be4:	930f      	str	r3, [sp, #60]	; 0x3c
   21be6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   21bea:	970e      	str	r7, [sp, #56]	; 0x38
	ret = qspi_send_cmd(dev, &cmd, true);
   21bec:	f7ff fe70 	bl	218d0 <qspi_send_cmd>
	if (ret == 0) {
   21bf0:	1e04      	subs	r4, r0, #0
   21bf2:	d013      	beq.n	21c1c <qspi_nor_init+0xfc>
		if (ret < 0) {
   21bf4:	dadb      	bge.n	21bae <qspi_nor_init+0x8e>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   21bf6:	4a34      	ldr	r2, [pc, #208]	; (21cc8 <qspi_nor_init+0x1a8>)
   21bf8:	4b34      	ldr	r3, [pc, #208]	; (21ccc <qspi_nor_init+0x1ac>)
   21bfa:	4932      	ldr	r1, [pc, #200]	; (21cc4 <qspi_nor_init+0x1a4>)
   21bfc:	f1b8 0f00 	cmp.w	r8, #0
   21c00:	bf18      	it	ne
   21c02:	4613      	movne	r3, r2
   21c04:	e9cd 3403 	strd	r3, r4, [sp, #12]
   21c08:	4b31      	ldr	r3, [pc, #196]	; (21cd0 <qspi_nor_init+0x1b0>)
   21c0a:	2201      	movs	r2, #1
   21c0c:	9302      	str	r3, [sp, #8]
   21c0e:	2300      	movs	r3, #0
   21c10:	4618      	mov	r0, r3
   21c12:	e9cd 3300 	strd	r3, r3, [sp]
   21c16:	f00d fee5 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
	if (ret != 0) {
   21c1a:	e7c8      	b.n	21bae <qspi_nor_init+0x8e>
		ret = qspi_rdsr(dev, 1);
   21c1c:	4628      	mov	r0, r5
   21c1e:	f00d ff12 	bl	2fa46 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   21c22:	1e04      	subs	r4, r0, #0
   21c24:	dbe7      	blt.n	21bf6 <qspi_nor_init+0xd6>
   21c26:	07e3      	lsls	r3, r4, #31
   21c28:	d4f8      	bmi.n	21c1c <qspi_nor_init+0xfc>
	qspi_device_uninit(dev);
   21c2a:	4628      	mov	r0, r5
   21c2c:	f7ff fe9e 	bl	2196c <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   21c30:	2403      	movs	r4, #3
   21c32:	2300      	movs	r3, #0
   21c34:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   21c38:	930e      	str	r3, [sp, #56]	; 0x38
   21c3a:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   21c3c:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   21c3e:	960b      	str	r6, [sp, #44]	; 0x2c
	const struct qspi_cmd cmd = {
   21c40:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   21c44:	970f      	str	r7, [sp, #60]	; 0x3c
	int ret = qspi_device_init(dev);
   21c46:	f7ff fe1d 	bl	21884 <qspi_device_init>
	if (ret == 0) {
   21c4a:	4602      	mov	r2, r0
   21c4c:	b128      	cbz	r0, 21c5a <qspi_nor_init+0x13a>
	qspi_device_uninit(dev);
   21c4e:	4628      	mov	r0, r5
   21c50:	f7ff fe8c 	bl	2196c <qspi_device_uninit>
		return -ENODEV;
   21c54:	f06f 0412 	mvn.w	r4, #18
   21c58:	e7a9      	b.n	21bae <qspi_nor_init+0x8e>
		ret = qspi_send_cmd(dev, &cmd, false);
   21c5a:	4628      	mov	r0, r5
   21c5c:	a90d      	add	r1, sp, #52	; 0x34
   21c5e:	f7ff fe37 	bl	218d0 <qspi_send_cmd>
   21c62:	4607      	mov	r7, r0
	qspi_device_uninit(dev);
   21c64:	4628      	mov	r0, r5
   21c66:	f7ff fe81 	bl	2196c <qspi_device_uninit>
	if (ret != 0) {
   21c6a:	2f00      	cmp	r7, #0
   21c6c:	d1f2      	bne.n	21c54 <qspi_nor_init+0x134>
	const struct qspi_nor_config *qnc = dev->config;
   21c6e:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   21c70:	4622      	mov	r2, r4
   21c72:	4631      	mov	r1, r6
   21c74:	f105 001c 	add.w	r0, r5, #28
   21c78:	f00f fec3 	bl	31a02 <memcmp>
   21c7c:	4604      	mov	r4, r0
   21c7e:	2800      	cmp	r0, #0
   21c80:	d095      	beq.n	21bae <qspi_nor_init+0x8e>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   21c82:	7fab      	ldrb	r3, [r5, #30]
   21c84:	2201      	movs	r2, #1
   21c86:	9308      	str	r3, [sp, #32]
   21c88:	7f6b      	ldrb	r3, [r5, #29]
   21c8a:	4638      	mov	r0, r7
   21c8c:	9307      	str	r3, [sp, #28]
   21c8e:	7f2b      	ldrb	r3, [r5, #28]
   21c90:	490c      	ldr	r1, [pc, #48]	; (21cc4 <qspi_nor_init+0x1a4>)
   21c92:	9306      	str	r3, [sp, #24]
   21c94:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   21c98:	9700      	str	r7, [sp, #0]
   21c9a:	9305      	str	r3, [sp, #20]
   21c9c:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   21ca0:	9304      	str	r3, [sp, #16]
   21ca2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   21ca6:	9303      	str	r3, [sp, #12]
   21ca8:	4b0a      	ldr	r3, [pc, #40]	; (21cd4 <qspi_nor_init+0x1b4>)
   21caa:	e9cd 7301 	strd	r7, r3, [sp, #4]
   21cae:	463b      	mov	r3, r7
   21cb0:	f00d fe98 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   21cb4:	e7ce      	b.n	21c54 <qspi_nor_init+0x134>
   21cb6:	bf00      	nop
   21cb8:	40005000 	.word	0x40005000
   21cbc:	0002f9d9 	.word	0x0002f9d9
   21cc0:	000382bc 	.word	0x000382bc
   21cc4:	0003330c 	.word	0x0003330c
   21cc8:	000374fd 	.word	0x000374fd
   21ccc:	000382b6 	.word	0x000382b6
   21cd0:	000382cc 	.word	0x000382cc
   21cd4:	000382dd 	.word	0x000382dd

00021cd8 <qspi_nor_erase>:
{
   21cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   21cdc:	2900      	cmp	r1, #0
{
   21cde:	4606      	mov	r6, r0
   21ce0:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   21ce2:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   21ce6:	b087      	sub	sp, #28
	if (addr < 0 ||
   21ce8:	db05      	blt.n	21cf6 <qspi_nor_erase+0x1e>
   21cea:	f8da 3018 	ldr.w	r3, [sl, #24]
	    (addr + size) > params->size) {
   21cee:	188a      	adds	r2, r1, r2
	if (addr < 0 ||
   21cf0:	429a      	cmp	r2, r3
	    (addr + size) > params->size) {
   21cf2:	4688      	mov	r8, r1
	if (addr < 0 ||
   21cf4:	d911      	bls.n	21d1a <qspi_nor_erase+0x42>
		LOG_ERR("erase error: address or size "
   21cf6:	4b46      	ldr	r3, [pc, #280]	; (21e10 <qspi_nor_erase+0x138>)
   21cf8:	e9cd 1503 	strd	r1, r5, [sp, #12]
   21cfc:	9302      	str	r3, [sp, #8]
   21cfe:	2300      	movs	r3, #0
   21d00:	2201      	movs	r2, #1
   21d02:	4618      	mov	r0, r3
   21d04:	e9cd 3300 	strd	r3, r3, [sp]
   21d08:	4942      	ldr	r1, [pc, #264]	; (21e14 <qspi_nor_erase+0x13c>)
   21d0a:	f00d fe6b 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   21d0e:	f06f 0415 	mvn.w	r4, #21
}
   21d12:	4620      	mov	r0, r4
   21d14:	b007      	add	sp, #28
   21d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   21d1a:	f3c1 020b 	ubfx	r2, r1, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   21d1e:	2d00      	cmp	r5, #0
   21d20:	d0f5      	beq.n	21d0e <qspi_nor_erase+0x36>
   21d22:	f3c5 030b 	ubfx	r3, r5, #0, #12
   21d26:	4313      	orrs	r3, r2
   21d28:	d1f1      	bne.n	21d0e <qspi_nor_erase+0x36>
	rv = qspi_device_init(dev);
   21d2a:	f7ff fdab 	bl	21884 <qspi_device_init>
	if (rv != 0) {
   21d2e:	4604      	mov	r4, r0
   21d30:	bb68      	cbnz	r0, 21d8e <qspi_nor_erase+0xb6>
	qspi_trans_lock(dev);
   21d32:	6930      	ldr	r0, [r6, #16]
   21d34:	f00d fe6c 	bl	2fa10 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   21d38:	4621      	mov	r1, r4
   21d3a:	4630      	mov	r0, r6
   21d3c:	f00d fe6e 	bl	2fa1c <qspi_nor_write_protection_set>
	if (rv != 0) {
   21d40:	4604      	mov	r4, r0
   21d42:	bb08      	cbnz	r0, 21d88 <qspi_nor_erase+0xb0>
	qspi_lock(dev);
   21d44:	6930      	ldr	r0, [r6, #16]
   21d46:	f00d fe5c 	bl	2fa02 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
   21d4a:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 21e18 <qspi_nor_erase+0x140>
		if (size == params->size) {
   21d4e:	f8da 3018 	ldr.w	r3, [sl, #24]
   21d52:	42ab      	cmp	r3, r5
   21d54:	d11f      	bne.n	21d96 <qspi_nor_erase+0xbe>
			res = nrfx_qspi_chip_erase();
   21d56:	f00e fae3 	bl	30320 <nrfx_qspi_chip_erase>
   21d5a:	46a9      	mov	r9, r5
   21d5c:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   21d5e:	4639      	mov	r1, r7
   21d60:	6930      	ldr	r0, [r6, #16]
   21d62:	f7ff fd81 	bl	21868 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   21d66:	455f      	cmp	r7, fp
   21d68:	d141      	bne.n	21dee <qspi_nor_erase+0x116>
	while (size > 0) {
   21d6a:	ebb5 0509 	subs.w	r5, r5, r9
			addr += adj;
   21d6e:	44c8      	add	r8, r9
	while (size > 0) {
   21d70:	d1ed      	bne.n	21d4e <qspi_nor_erase+0x76>
	k_sem_give(&dev_data->sem);
   21d72:	6930      	ldr	r0, [r6, #16]
   21d74:	3018      	adds	r0, #24
   21d76:	f00d fe2d 	bl	2f9d4 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   21d7a:	2101      	movs	r1, #1
   21d7c:	4630      	mov	r0, r6
   21d7e:	f00d fe4d 	bl	2fa1c <qspi_nor_write_protection_set>
   21d82:	2c00      	cmp	r4, #0
   21d84:	bf08      	it	eq
   21d86:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   21d88:	6930      	ldr	r0, [r6, #16]
   21d8a:	f00d fe23 	bl	2f9d4 <k_sem_give>
	qspi_device_uninit(dev);
   21d8e:	4630      	mov	r0, r6
   21d90:	f7ff fdec 	bl	2196c <qspi_device_uninit>
	return rv;
   21d94:	e7bd      	b.n	21d12 <qspi_nor_erase+0x3a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21d96:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   21d9a:	d30a      	bcc.n	21db2 <qspi_nor_erase+0xda>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   21d9c:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   21da0:	b953      	cbnz	r3, 21db8 <qspi_nor_erase+0xe0>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21da2:	4641      	mov	r1, r8
   21da4:	2001      	movs	r0, #1
   21da6:	f002 fce7 	bl	24778 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   21daa:	f44f 3980 	mov.w	r9, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   21dae:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   21db0:	e7d5      	b.n	21d5e <qspi_nor_erase+0x86>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21db2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   21db6:	d309      	bcc.n	21dcc <qspi_nor_erase+0xf4>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   21db8:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   21dbc:	b930      	cbnz	r0, 21dcc <qspi_nor_erase+0xf4>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21dbe:	4641      	mov	r1, r8
   21dc0:	f002 fcda 	bl	24778 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   21dc4:	f44f 5980 	mov.w	r9, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   21dc8:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   21dca:	e7c8      	b.n	21d5e <qspi_nor_erase+0x86>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   21dcc:	4b13      	ldr	r3, [pc, #76]	; (21e1c <qspi_nor_erase+0x144>)
   21dce:	2201      	movs	r2, #1
   21dd0:	9302      	str	r3, [sp, #8]
   21dd2:	2300      	movs	r3, #0
   21dd4:	490f      	ldr	r1, [pc, #60]	; (21e14 <qspi_nor_erase+0x13c>)
   21dd6:	4618      	mov	r0, r3
   21dd8:	e9cd 3300 	strd	r3, r3, [sp]
   21ddc:	e9cd 8503 	strd	r8, r5, [sp, #12]
   21de0:	f00d fe00 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
		qspi_wait_for_completion(dev, res);
   21de4:	490e      	ldr	r1, [pc, #56]	; (21e20 <qspi_nor_erase+0x148>)
   21de6:	6930      	ldr	r0, [r6, #16]
   21de8:	f7ff fd3e 	bl	21868 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   21dec:	4f0c      	ldr	r7, [pc, #48]	; (21e20 <qspi_nor_erase+0x148>)
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   21dee:	4b0d      	ldr	r3, [pc, #52]	; (21e24 <qspi_nor_erase+0x14c>)
   21df0:	2201      	movs	r2, #1
   21df2:	9302      	str	r3, [sp, #8]
   21df4:	2300      	movs	r3, #0
   21df6:	e9cd 8503 	strd	r8, r5, [sp, #12]
   21dfa:	4618      	mov	r0, r3
   21dfc:	e9cd 3300 	strd	r3, r3, [sp]
   21e00:	4904      	ldr	r1, [pc, #16]	; (21e14 <qspi_nor_erase+0x13c>)
   21e02:	f00d fdef 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
			rv = qspi_get_zephyr_ret_code(res);
   21e06:	4638      	mov	r0, r7
   21e08:	f7ff fd14 	bl	21834 <qspi_get_zephyr_ret_code>
   21e0c:	4604      	mov	r4, r0
			break;
   21e0e:	e7b0      	b.n	21d72 <qspi_nor_erase+0x9a>
   21e10:	0003830f 	.word	0x0003830f
   21e14:	0003330c 	.word	0x0003330c
   21e18:	0bad0000 	.word	0x0bad0000
   21e1c:	00038359 	.word	0x00038359
   21e20:	0bad0004 	.word	0x0bad0004
   21e24:	00038377 	.word	0x00038377

00021e28 <qspi_nor_write>:
{
   21e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e2c:	4605      	mov	r5, r0
   21e2e:	460f      	mov	r7, r1
   21e30:	461e      	mov	r6, r3
	if (!src) {
   21e32:	4690      	mov	r8, r2
{
   21e34:	b088      	sub	sp, #32
	if (!src) {
   21e36:	b1ca      	cbz	r2, 21e6c <qspi_nor_write+0x44>
	if ((size == 0)
   21e38:	b1c3      	cbz	r3, 21e6c <qspi_nor_write+0x44>
	    || ((size > 4) && ((size % 4U) != 0))) {
   21e3a:	2b04      	cmp	r3, #4
   21e3c:	d901      	bls.n	21e42 <qspi_nor_write+0x1a>
   21e3e:	079a      	lsls	r2, r3, #30
   21e40:	d114      	bne.n	21e6c <qspi_nor_write+0x44>
	if ((addr % 4U) != 0) {
   21e42:	07bb      	lsls	r3, r7, #30
   21e44:	d112      	bne.n	21e6c <qspi_nor_write+0x44>
	if (addr < 0 ||
   21e46:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   21e48:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   21e4a:	db03      	blt.n	21e54 <qspi_nor_write+0x2c>
   21e4c:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   21e4e:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   21e50:	4293      	cmp	r3, r2
   21e52:	d911      	bls.n	21e78 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   21e54:	4b40      	ldr	r3, [pc, #256]	; (21f58 <qspi_nor_write+0x130>)
   21e56:	2201      	movs	r2, #1
   21e58:	9302      	str	r3, [sp, #8]
   21e5a:	2300      	movs	r3, #0
   21e5c:	e9cd 7603 	strd	r7, r6, [sp, #12]
   21e60:	4618      	mov	r0, r3
   21e62:	e9cd 3300 	strd	r3, r3, [sp]
   21e66:	493d      	ldr	r1, [pc, #244]	; (21f5c <qspi_nor_write+0x134>)
   21e68:	f00d fdbc 	bl	2f9e4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21e6c:	f06f 0415 	mvn.w	r4, #21
}
   21e70:	4620      	mov	r0, r4
   21e72:	b008      	add	sp, #32
   21e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   21e78:	4628      	mov	r0, r5
   21e7a:	f7ff fd03 	bl	21884 <qspi_device_init>
	if (rc != 0) {
   21e7e:	4604      	mov	r4, r0
   21e80:	2800      	cmp	r0, #0
   21e82:	d160      	bne.n	21f46 <qspi_nor_write+0x11e>
	qspi_trans_lock(dev);
   21e84:	6928      	ldr	r0, [r5, #16]
   21e86:	f00d fdc3 	bl	2fa10 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   21e8a:	4621      	mov	r1, r4
   21e8c:	4628      	mov	r0, r5
   21e8e:	f00d fdc5 	bl	2fa1c <qspi_nor_write_protection_set>
   21e92:	4604      	mov	r4, r0
	qspi_lock(dev);
   21e94:	6928      	ldr	r0, [r5, #16]
   21e96:	f00d fdb4 	bl	2fa02 <qspi_lock.isra.0>
	if (!res) {
   21e9a:	2c00      	cmp	r4, #0
   21e9c:	d140      	bne.n	21f20 <qspi_nor_write+0xf8>
		if (size < 4U) {
   21e9e:	2e03      	cmp	r6, #3
   21ea0:	d81c      	bhi.n	21edc <qspi_nor_write+0xb4>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   21ea2:	463a      	mov	r2, r7
   21ea4:	2104      	movs	r1, #4
   21ea6:	a807      	add	r0, sp, #28
   21ea8:	f00e fa37 	bl	3031a <nrfx_qspi_read>
   21eac:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   21eae:	4601      	mov	r1, r0
   21eb0:	6928      	ldr	r0, [r5, #16]
   21eb2:	f7ff fcd9 	bl	21868 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   21eb6:	4b2a      	ldr	r3, [pc, #168]	; (21f60 <qspi_nor_write+0x138>)
   21eb8:	429c      	cmp	r4, r3
   21eba:	d131      	bne.n	21f20 <qspi_nor_write+0xf8>
		memcpy(buf, sptr, slen);
   21ebc:	4632      	mov	r2, r6
   21ebe:	4641      	mov	r1, r8
   21ec0:	a807      	add	r0, sp, #28
   21ec2:	f00f fdae 	bl	31a22 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21ec6:	463a      	mov	r2, r7
   21ec8:	2104      	movs	r1, #4
   21eca:	a807      	add	r0, sp, #28
			res = nrfx_qspi_write(src, size, addr);
   21ecc:	f00e fa22 	bl	30314 <nrfx_qspi_write>
   21ed0:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21ed2:	4601      	mov	r1, r0
   21ed4:	6928      	ldr	r0, [r5, #16]
   21ed6:	f7ff fcc7 	bl	21868 <qspi_wait_for_completion.isra.0>
   21eda:	e021      	b.n	21f20 <qspi_nor_write+0xf8>
   21edc:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   21ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   21ee4:	d033      	beq.n	21f4e <qspi_nor_write+0x126>
			if (res == NRFX_SUCCESS) {
   21ee6:	f8df a078 	ldr.w	sl, [pc, #120]	; 21f60 <qspi_nor_write+0x138>
			size_t len = MIN(slen, sizeof(buf));
   21eea:	2e04      	cmp	r6, #4
   21eec:	46b1      	mov	r9, r6
   21eee:	bf28      	it	cs
   21ef0:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   21ef4:	4641      	mov	r1, r8
   21ef6:	464a      	mov	r2, r9
   21ef8:	a807      	add	r0, sp, #28
   21efa:	f00f fd92 	bl	31a22 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   21efe:	463a      	mov	r2, r7
   21f00:	2104      	movs	r1, #4
   21f02:	a807      	add	r0, sp, #28
   21f04:	f00e fa06 	bl	30314 <nrfx_qspi_write>
   21f08:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   21f0a:	4601      	mov	r1, r0
   21f0c:	6928      	ldr	r0, [r5, #16]
   21f0e:	f7ff fcab 	bl	21868 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   21f12:	4554      	cmp	r4, sl
   21f14:	d104      	bne.n	21f20 <qspi_nor_write+0xf8>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21f16:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   21f1a:	44c8      	add	r8, r9
				addr += len;
   21f1c:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   21f1e:	d1e4      	bne.n	21eea <qspi_nor_write+0xc2>
	k_sem_give(&dev_data->sem);
   21f20:	6928      	ldr	r0, [r5, #16]
   21f22:	3018      	adds	r0, #24
   21f24:	f00d fd56 	bl	2f9d4 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   21f28:	2101      	movs	r1, #1
   21f2a:	4628      	mov	r0, r5
   21f2c:	f00d fd76 	bl	2fa1c <qspi_nor_write_protection_set>
   21f30:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   21f32:	6928      	ldr	r0, [r5, #16]
   21f34:	f00d fd4e 	bl	2f9d4 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   21f38:	2c00      	cmp	r4, #0
   21f3a:	bf14      	ite	ne
   21f3c:	4620      	movne	r0, r4
   21f3e:	4630      	moveq	r0, r6
   21f40:	f7ff fc78 	bl	21834 <qspi_get_zephyr_ret_code>
   21f44:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   21f46:	4628      	mov	r0, r5
   21f48:	f7ff fd10 	bl	2196c <qspi_device_uninit>
	return rc;
   21f4c:	e790      	b.n	21e70 <qspi_nor_write+0x48>
			res = nrfx_qspi_write(src, size, addr);
   21f4e:	463a      	mov	r2, r7
   21f50:	4631      	mov	r1, r6
   21f52:	4640      	mov	r0, r8
   21f54:	e7ba      	b.n	21ecc <qspi_nor_write+0xa4>
   21f56:	bf00      	nop
   21f58:	00038395 	.word	0x00038395
   21f5c:	0003330c 	.word	0x0003330c
   21f60:	0bad0000 	.word	0x0bad0000

00021f64 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   21f64:	4b02      	ldr	r3, [pc, #8]	; (21f70 <flash_nrf_pages_layout+0xc>)
   21f66:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21f68:	2301      	movs	r3, #1
   21f6a:	6013      	str	r3, [r2, #0]
}
   21f6c:	4770      	bx	lr
   21f6e:	bf00      	nop
   21f70:	20030cb0 	.word	0x20030cb0

00021f74 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   21f74:	4800      	ldr	r0, [pc, #0]	; (21f78 <flash_nrf_get_parameters+0x4>)
   21f76:	4770      	bx	lr
   21f78:	000342ec 	.word	0x000342ec

00021f7c <flash_nrf_read>:
{
   21f7c:	b570      	push	{r4, r5, r6, lr}
   21f7e:	460c      	mov	r4, r1
   21f80:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   21f82:	4619      	mov	r1, r3
   21f84:	4620      	mov	r0, r4
{
   21f86:	461d      	mov	r5, r3
   21f88:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   21f8a:	f00d fd77 	bl	2fa7c <is_regular_addr_valid>
   21f8e:	4603      	mov	r3, r0
   21f90:	b968      	cbnz	r0, 21fae <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   21f92:	4a0f      	ldr	r2, [pc, #60]	; (21fd0 <flash_nrf_read+0x54>)
   21f94:	9000      	str	r0, [sp, #0]
   21f96:	e9cd 0201 	strd	r0, r2, [sp, #4]
   21f9a:	e9cd 4503 	strd	r4, r5, [sp, #12]
   21f9e:	2201      	movs	r2, #1
   21fa0:	490c      	ldr	r1, [pc, #48]	; (21fd4 <flash_nrf_read+0x58>)
   21fa2:	f00d fd7c 	bl	2fa9e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   21fa6:	f06f 0015 	mvn.w	r0, #21
}
   21faa:	b006      	add	sp, #24
   21fac:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   21fae:	b165      	cbz	r5, 21fca <flash_nrf_read+0x4e>
	if (addr < PM_APP_ADDRESS) {
   21fb0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   21fb4:	462a      	mov	r2, r5
   21fb6:	4621      	mov	r1, r4
   21fb8:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   21fba:	da04      	bge.n	21fc6 <flash_nrf_read+0x4a>
}
   21fbc:	b006      	add	sp, #24
   21fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   21fc2:	f008 bd85 	b.w	2aad0 <soc_secure_mem_read>
   21fc6:	f00f fd2c 	bl	31a22 <memcpy>
		return 0;
   21fca:	2000      	movs	r0, #0
   21fcc:	e7ed      	b.n	21faa <flash_nrf_read+0x2e>
   21fce:	bf00      	nop
   21fd0:	000383f5 	.word	0x000383f5
   21fd4:	0003329c 	.word	0x0003329c

00021fd8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   21fd8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21fda:	2201      	movs	r2, #1
   21fdc:	4806      	ldr	r0, [pc, #24]	; (21ff8 <nrf_flash_init+0x20>)
   21fde:	4611      	mov	r1, r2
   21fe0:	f00f f8d0 	bl	31184 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   21fe4:	f00e f990 	bl	30308 <nrfx_nvmc_flash_page_count_get>
   21fe8:	4c04      	ldr	r4, [pc, #16]	; (21ffc <nrf_flash_init+0x24>)
   21fea:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   21fec:	f00e f989 	bl	30302 <nrfx_nvmc_flash_page_size_get>
   21ff0:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   21ff2:	2000      	movs	r0, #0
   21ff4:	bd10      	pop	{r4, pc}
   21ff6:	bf00      	nop
   21ff8:	20030cb8 	.word	0x20030cb8
   21ffc:	20030cb0 	.word	0x20030cb0

00022000 <flash_nrf_erase>:
{
   22000:	b5f0      	push	{r4, r5, r6, r7, lr}
   22002:	b087      	sub	sp, #28
   22004:	460e      	mov	r6, r1
   22006:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22008:	f00e f97b 	bl	30302 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2200c:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2200e:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   22010:	4630      	mov	r0, r6
   22012:	f00d fd33 	bl	2fa7c <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   22016:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   22018:	4603      	mov	r3, r0
   2201a:	b388      	cbz	r0, 22080 <flash_nrf_erase+0x80>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2201c:	fbb6 f3f5 	udiv	r3, r6, r5
   22020:	fb05 6313 	mls	r3, r5, r3, r6
   22024:	b923      	cbnz	r3, 22030 <flash_nrf_erase+0x30>
   22026:	fbb4 f3f5 	udiv	r3, r4, r5
   2202a:	fb05 4313 	mls	r3, r5, r3, r4
   2202e:	b173      	cbz	r3, 2204e <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   22030:	4b18      	ldr	r3, [pc, #96]	; (22094 <flash_nrf_erase+0x94>)
   22032:	2201      	movs	r2, #1
   22034:	9302      	str	r3, [sp, #8]
   22036:	2300      	movs	r3, #0
   22038:	4618      	mov	r0, r3
   2203a:	e9cd 6403 	strd	r6, r4, [sp, #12]
   2203e:	e9cd 3300 	strd	r3, r3, [sp]
   22042:	4915      	ldr	r1, [pc, #84]	; (22098 <flash_nrf_erase+0x98>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   22044:	f00d fd2b 	bl	2fa9e <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   22048:	f06f 0015 	mvn.w	r0, #21
   2204c:	e002      	b.n	22054 <flash_nrf_erase+0x54>
		if (!n_pages) {
   2204e:	42a5      	cmp	r5, r4
   22050:	d902      	bls.n	22058 <flash_nrf_erase+0x58>
			return 0;
   22052:	2000      	movs	r0, #0
}
   22054:	b007      	add	sp, #28
   22056:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   22058:	f04f 32ff 	mov.w	r2, #4294967295
   2205c:	f04f 33ff 	mov.w	r3, #4294967295
   22060:	480e      	ldr	r0, [pc, #56]	; (2209c <flash_nrf_erase+0x9c>)
   22062:	f003 fe5d 	bl	25d20 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   22066:	f00e f94c 	bl	30302 <nrfx_nvmc_flash_page_size_get>
   2206a:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2206c:	4638      	mov	r0, r7
   2206e:	f002 f8bb 	bl	241e8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   22072:	1b64      	subs	r4, r4, r5
   22074:	442f      	add	r7, r5
   22076:	d1f9      	bne.n	2206c <flash_nrf_erase+0x6c>
	z_impl_k_sem_give(sem);
   22078:	4808      	ldr	r0, [pc, #32]	; (2209c <flash_nrf_erase+0x9c>)
   2207a:	f003 fe2b 	bl	25cd4 <z_impl_k_sem_give>
}
   2207e:	e7e8      	b.n	22052 <flash_nrf_erase+0x52>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   22080:	4a07      	ldr	r2, [pc, #28]	; (220a0 <flash_nrf_erase+0xa0>)
   22082:	e9cd 6403 	strd	r6, r4, [sp, #12]
   22086:	e9cd 0201 	strd	r0, r2, [sp, #4]
   2208a:	4903      	ldr	r1, [pc, #12]	; (22098 <flash_nrf_erase+0x98>)
   2208c:	2201      	movs	r2, #1
   2208e:	9000      	str	r0, [sp, #0]
   22090:	e7d8      	b.n	22044 <flash_nrf_erase+0x44>
   22092:	bf00      	nop
   22094:	00038412 	.word	0x00038412
   22098:	0003329c 	.word	0x0003329c
   2209c:	20030cb8 	.word	0x20030cb8
   220a0:	000383f5 	.word	0x000383f5

000220a4 <flash_nrf_write>:
{
   220a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   220a6:	460e      	mov	r6, r1
   220a8:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   220aa:	4619      	mov	r1, r3
   220ac:	4630      	mov	r0, r6
{
   220ae:	461c      	mov	r4, r3
   220b0:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   220b2:	f00d fce3 	bl	2fa7c <is_regular_addr_valid>
   220b6:	4603      	mov	r3, r0
   220b8:	b968      	cbnz	r0, 220d6 <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   220ba:	4a1d      	ldr	r2, [pc, #116]	; (22130 <flash_nrf_write+0x8c>)
   220bc:	e9cd 6403 	strd	r6, r4, [sp, #12]
   220c0:	e9cd 0201 	strd	r0, r2, [sp, #4]
   220c4:	2201      	movs	r2, #1
   220c6:	491b      	ldr	r1, [pc, #108]	; (22134 <flash_nrf_write+0x90>)
   220c8:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   220ca:	f00d fce8 	bl	2fa9e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   220ce:	f06f 0015 	mvn.w	r0, #21
}
   220d2:	b007      	add	sp, #28
   220d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   220d6:	ea46 0504 	orr.w	r5, r6, r4
   220da:	f015 0503 	ands.w	r5, r5, #3
   220de:	d00a      	beq.n	220f6 <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   220e0:	4b15      	ldr	r3, [pc, #84]	; (22138 <flash_nrf_write+0x94>)
   220e2:	2201      	movs	r2, #1
   220e4:	9302      	str	r3, [sp, #8]
   220e6:	2300      	movs	r3, #0
   220e8:	e9cd 6403 	strd	r6, r4, [sp, #12]
   220ec:	4618      	mov	r0, r3
   220ee:	e9cd 3300 	strd	r3, r3, [sp]
   220f2:	4910      	ldr	r1, [pc, #64]	; (22134 <flash_nrf_write+0x90>)
   220f4:	e7e9      	b.n	220ca <flash_nrf_write+0x26>
	if (!len) {
   220f6:	b1a4      	cbz	r4, 22122 <flash_nrf_write+0x7e>
	return z_impl_k_sem_take(sem, timeout);
   220f8:	f04f 32ff 	mov.w	r2, #4294967295
   220fc:	f04f 33ff 	mov.w	r3, #4294967295
   22100:	480e      	ldr	r0, [pc, #56]	; (2213c <flash_nrf_write+0x98>)
   22102:	f003 fe0d 	bl	25d20 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   22106:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   2210a:	42a5      	cmp	r5, r4
   2210c:	eb05 0006 	add.w	r0, r5, r6
   22110:	d109      	bne.n	22126 <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22112:	4a0b      	ldr	r2, [pc, #44]	; (22140 <flash_nrf_write+0x9c>)
   22114:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   22118:	07db      	lsls	r3, r3, #31
   2211a:	d5fb      	bpl.n	22114 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   2211c:	4807      	ldr	r0, [pc, #28]	; (2213c <flash_nrf_write+0x98>)
   2211e:	f003 fdd9 	bl	25cd4 <z_impl_k_sem_give>
	return ret;
   22122:	2000      	movs	r0, #0
   22124:	e7d5      	b.n	220d2 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   22126:	5979      	ldr	r1, [r7, r5]
   22128:	f002 f87a 	bl	24220 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2212c:	3504      	adds	r5, #4
}
   2212e:	e7ec      	b.n	2210a <flash_nrf_write+0x66>
   22130:	000383f5 	.word	0x000383f5
   22134:	0003329c 	.word	0x0003329c
   22138:	00038431 	.word	0x00038431
   2213c:	20030cb8 	.word	0x20030cb8
   22140:	40039000 	.word	0x40039000

00022144 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   22144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   22146:	ab0b      	add	r3, sp, #44	; 0x2c
   22148:	9305      	str	r3, [sp, #20]
   2214a:	9303      	str	r3, [sp, #12]
   2214c:	4b05      	ldr	r3, [pc, #20]	; (22164 <z_log_msg_runtime_create.constprop.0+0x20>)
   2214e:	2201      	movs	r2, #1
   22150:	9302      	str	r3, [sp, #8]
   22152:	2300      	movs	r3, #0
   22154:	4618      	mov	r0, r3
   22156:	e9cd 3300 	strd	r3, r3, [sp]
   2215a:	f7ed fadf 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2215e:	b007      	add	sp, #28
   22160:	f85d fb04 	ldr.w	pc, [sp], #4
   22164:	00038470 	.word	0x00038470

00022168 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   22168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2216a:	461d      	mov	r5, r3
	return config->uarte_regs;
   2216c:	6843      	ldr	r3, [r0, #4]
{
   2216e:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   22170:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   22172:	f8d3 c000 	ldr.w	ip, [r3]
   22176:	f04f 0320 	mov.w	r3, #32
   2217a:	f3ef 8711 	mrs	r7, BASEPRI
   2217e:	f383 8812 	msr	BASEPRI_MAX, r3
   22182:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   22186:	68e3      	ldr	r3, [r4, #12]
   22188:	68d8      	ldr	r0, [r3, #12]
   2218a:	b138      	cbz	r0, 2219c <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   2218c:	f387 8811 	msr	BASEPRI, r7
   22190:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   22194:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   22198:	b003      	add	sp, #12
   2219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   2219c:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   2219e:	68e3      	ldr	r3, [r4, #12]
   221a0:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   221a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   221a6:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   221aa:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   221ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   221b2:	68e3      	ldr	r3, [r4, #12]
   221b4:	d111      	bne.n	221da <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   221b6:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   221b8:	68e3      	ldr	r3, [r4, #12]
   221ba:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   221bc:	4621      	mov	r1, r4
   221be:	4630      	mov	r0, r6
   221c0:	f00d fe28 	bl	2fe14 <start_tx_locked>
   221c4:	f387 8811 	msr	BASEPRI, r7
   221c8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   221cc:	7ae3      	ldrb	r3, [r4, #11]
   221ce:	2b01      	cmp	r3, #1
   221d0:	d101      	bne.n	221d6 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   221d2:	1c6b      	adds	r3, r5, #1
   221d4:	d106      	bne.n	221e4 <uarte_nrfx_tx+0x7c>
	return 0;
   221d6:	2000      	movs	r0, #0
   221d8:	e7de      	b.n	22198 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   221da:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   221dc:	4620      	mov	r0, r4
   221de:	f00d fd92 	bl	2fd06 <setup_tx_cache>
   221e2:	e7eb      	b.n	221bc <uarte_nrfx_tx+0x54>
   221e4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   221e8:	2100      	movs	r1, #0
   221ea:	480a      	ldr	r0, [pc, #40]	; (22214 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   221ec:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   221f0:	2300      	movs	r3, #0
   221f2:	fbc5 0106 	smlal	r0, r1, r5, r6
   221f6:	4a08      	ldr	r2, [pc, #32]	; (22218 <uarte_nrfx_tx+0xb0>)
   221f8:	f7e6 fea2 	bl	8f40 <__aeabi_uldivmod>
   221fc:	68e4      	ldr	r4, [r4, #12]
   221fe:	4602      	mov	r2, r0
   22200:	460b      	mov	r3, r1
   22202:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   22204:	2000      	movs	r0, #0
   22206:	2100      	movs	r1, #0
   22208:	e9cd 0100 	strd	r0, r1, [sp]
   2220c:	4620      	mov	r0, r4
   2220e:	f004 fcdd 	bl	26bcc <z_impl_k_timer_start>
   22212:	e7e0      	b.n	221d6 <uarte_nrfx_tx+0x6e>
   22214:	000f423f 	.word	0x000f423f
   22218:	000f4240 	.word	0x000f4240

0002221c <uarte_nrfx_configure>:
{
   2221c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   2221e:	794b      	ldrb	r3, [r1, #5]
   22220:	2b01      	cmp	r3, #1
   22222:	d029      	beq.n	22278 <uarte_nrfx_configure+0x5c>
   22224:	2b03      	cmp	r3, #3
   22226:	d124      	bne.n	22272 <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22228:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2222a:	798b      	ldrb	r3, [r1, #6]
   2222c:	2b03      	cmp	r3, #3
   2222e:	d120      	bne.n	22272 <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   22230:	79ce      	ldrb	r6, [r1, #7]
   22232:	b10e      	cbz	r6, 22238 <uarte_nrfx_configure+0x1c>
   22234:	2e01      	cmp	r6, #1
   22236:	d11c      	bne.n	22272 <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   22238:	790a      	ldrb	r2, [r1, #4]
   2223a:	2a01      	cmp	r2, #1
   2223c:	d01e      	beq.n	2227c <uarte_nrfx_configure+0x60>
   2223e:	2a02      	cmp	r2, #2
   22240:	d020      	beq.n	22284 <uarte_nrfx_configure+0x68>
   22242:	b9b2      	cbnz	r2, 22272 <uarte_nrfx_configure+0x56>
   22244:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22246:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22248:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   2224a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2224e:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   22252:	d06e      	beq.n	22332 <uarte_nrfx_configure+0x116>
   22254:	d833      	bhi.n	222be <uarte_nrfx_configure+0xa2>
   22256:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2225a:	d06d      	beq.n	22338 <uarte_nrfx_configure+0x11c>
   2225c:	d81c      	bhi.n	22298 <uarte_nrfx_configure+0x7c>
   2225e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   22262:	d06b      	beq.n	2233c <uarte_nrfx_configure+0x120>
   22264:	d810      	bhi.n	22288 <uarte_nrfx_configure+0x6c>
   22266:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2226a:	d06a      	beq.n	22342 <uarte_nrfx_configure+0x126>
   2226c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   22270:	d06a      	beq.n	22348 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   22272:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22276:	e05b      	b.n	22330 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   22278:	2700      	movs	r7, #0
   2227a:	e7d6      	b.n	2222a <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   2227c:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   22280:	220e      	movs	r2, #14
   22282:	e7e0      	b.n	22246 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   22284:	2400      	movs	r4, #0
   22286:	e7fb      	b.n	22280 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   22288:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2228c:	d05f      	beq.n	2234e <uarte_nrfx_configure+0x132>
   2228e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   22292:	d1ee      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22294:	4b38      	ldr	r3, [pc, #224]	; (22378 <uarte_nrfx_configure+0x15c>)
   22296:	e03c      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22298:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2229c:	d05a      	beq.n	22354 <uarte_nrfx_configure+0x138>
   2229e:	d807      	bhi.n	222b0 <uarte_nrfx_configure+0x94>
   222a0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   222a4:	d058      	beq.n	22358 <uarte_nrfx_configure+0x13c>
   222a6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   222aa:	d1e2      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   222ac:	4b33      	ldr	r3, [pc, #204]	; (2237c <uarte_nrfx_configure+0x160>)
   222ae:	e030      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   222b0:	f647 2512 	movw	r5, #31250	; 0x7a12
   222b4:	42ab      	cmp	r3, r5
   222b6:	d1dc      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   222b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   222bc:	e029      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   222be:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   222c2:	d04b      	beq.n	2235c <uarte_nrfx_configure+0x140>
   222c4:	d813      	bhi.n	222ee <uarte_nrfx_configure+0xd2>
   222c6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   222ca:	d04a      	beq.n	22362 <uarte_nrfx_configure+0x146>
   222cc:	d809      	bhi.n	222e2 <uarte_nrfx_configure+0xc6>
   222ce:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   222d2:	42ab      	cmp	r3, r5
   222d4:	d047      	beq.n	22366 <uarte_nrfx_configure+0x14a>
   222d6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   222da:	d1ca      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   222dc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   222e0:	e017      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   222e2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   222e6:	d1c4      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   222e8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   222ec:	e011      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   222ee:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   222f2:	d03b      	beq.n	2236c <uarte_nrfx_configure+0x150>
   222f4:	d808      	bhi.n	22308 <uarte_nrfx_configure+0xec>
   222f6:	4d22      	ldr	r5, [pc, #136]	; (22380 <uarte_nrfx_configure+0x164>)
   222f8:	42ab      	cmp	r3, r5
   222fa:	d03a      	beq.n	22372 <uarte_nrfx_configure+0x156>
   222fc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   22300:	d1b7      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22302:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22306:	e004      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22308:	4d1e      	ldr	r5, [pc, #120]	; (22384 <uarte_nrfx_configure+0x168>)
   2230a:	42ab      	cmp	r3, r5
   2230c:	d1b1      	bne.n	22272 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2230e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   22312:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22314:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   22318:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   2231a:	433a      	orrs	r2, r7
   2231c:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   2231e:	4334      	orrs	r4, r6
   22320:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   22322:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   22326:	1d2b      	adds	r3, r5, #4
   22328:	c903      	ldmia	r1, {r0, r1}
   2232a:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   2232e:	2000      	movs	r0, #0
}
   22330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   22332:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   22336:	e7ec      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22338:	4b13      	ldr	r3, [pc, #76]	; (22388 <uarte_nrfx_configure+0x16c>)
   2233a:	e7ea      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2233c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   22340:	e7e7      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   22342:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22346:	e7e4      	b.n	22312 <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   22348:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2234c:	e7e1      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2234e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   22352:	e7de      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22354:	4b0d      	ldr	r3, [pc, #52]	; (2238c <uarte_nrfx_configure+0x170>)
   22356:	e7dc      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22358:	4b0d      	ldr	r3, [pc, #52]	; (22390 <uarte_nrfx_configure+0x174>)
   2235a:	e7da      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2235c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22360:	e7d7      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   22362:	4b0c      	ldr	r3, [pc, #48]	; (22394 <uarte_nrfx_configure+0x178>)
   22364:	e7d5      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22366:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2236a:	e7d2      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2236c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22370:	e7cf      	b.n	22312 <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   22372:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22376:	e7cc      	b.n	22312 <uarte_nrfx_configure+0xf6>
   22378:	0013b000 	.word	0x0013b000
   2237c:	004ea000 	.word	0x004ea000
   22380:	0003d090 	.word	0x0003d090
   22384:	000f4240 	.word	0x000f4240
   22388:	00275000 	.word	0x00275000
   2238c:	0075c000 	.word	0x0075c000
   22390:	003af000 	.word	0x003af000
   22394:	013a9000 	.word	0x013a9000

00022398 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   22398:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   2239a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2239e:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   223a2:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   223a4:	f8d9 5000 	ldr.w	r5, [r9]
static int uarte_instance_init(const struct device *dev,
   223a8:	b087      	sub	sp, #28
   223aa:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   223ae:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   223b0:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   223b4:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   223b6:	aa05      	add	r2, sp, #20
   223b8:	4640      	mov	r0, r8
   223ba:	f00d fea8 	bl	3010e <pinctrl_lookup_state>
	if (ret < 0) {
   223be:	1e04      	subs	r4, r0, #0
   223c0:	db25      	blt.n	2240e <uarte_instance_init.constprop.0+0x76>
	return pinctrl_apply_state_direct(config, state);
   223c2:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   223c4:	f8d8 2000 	ldr.w	r2, [r8]
   223c8:	7919      	ldrb	r1, [r3, #4]
   223ca:	6818      	ldr	r0, [r3, #0]
   223cc:	f000 fed0 	bl	23170 <pinctrl_configure_pins>
	if (err < 0) {
   223d0:	1e04      	subs	r4, r0, #0
   223d2:	db1c      	blt.n	2240e <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   223d4:	4638      	mov	r0, r7
   223d6:	1d31      	adds	r1, r6, #4
   223d8:	f7ff ff20 	bl	2221c <uarte_nrfx_configure>
	if (err) {
   223dc:	4604      	mov	r4, r0
   223de:	b9b0      	cbnz	r0, 2240e <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   223e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   223e4:	0799      	lsls	r1, r3, #30
   223e6:	d523      	bpl.n	22430 <uarte_instance_init.constprop.0+0x98>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   223e8:	f106 001c 	add.w	r0, r6, #28
   223ec:	f001 fb0a 	bl	23a04 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   223f0:	4b47      	ldr	r3, [pc, #284]	; (22510 <uarte_instance_init.constprop.0+0x178>)
   223f2:	4298      	cmp	r0, r3
   223f4:	d00f      	beq.n	22416 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
   223f6:	4b47      	ldr	r3, [pc, #284]	; (22514 <uarte_instance_init.constprop.0+0x17c>)
   223f8:	4620      	mov	r0, r4
   223fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
   223fe:	9400      	str	r4, [sp, #0]
   22400:	4623      	mov	r3, r4
   22402:	2201      	movs	r2, #1
   22404:	4944      	ldr	r1, [pc, #272]	; (22518 <uarte_instance_init.constprop.0+0x180>)
   22406:	f7ff fe9d 	bl	22144 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   2240a:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2240e:	4620      	mov	r0, r4
   22410:	b007      	add	sp, #28
   22412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22416:	7f33      	ldrb	r3, [r6, #28]
   22418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2241c:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   22420:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   22424:	2301      	movs	r3, #1
   22426:	7f32      	ldrb	r2, [r6, #28]
   22428:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   2242a:	4a3c      	ldr	r2, [pc, #240]	; (2251c <uarte_instance_init.constprop.0+0x184>)
   2242c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   22430:	68f3      	ldr	r3, [r6, #12]
   22432:	2b00      	cmp	r3, #0
   22434:	d059      	beq.n	224ea <uarte_instance_init.constprop.0+0x152>
    p_reg->INTENSET = mask;
   22436:	2204      	movs	r2, #4
	return config->uarte_regs;
   22438:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   2243a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   2243e:	681b      	ldr	r3, [r3, #0]
   22440:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   22444:	2201      	movs	r2, #1
   22446:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2244a:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   2244e:	4934      	ldr	r1, [pc, #208]	; (22520 <uarte_instance_init.constprop.0+0x188>)
   22450:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22454:	2108      	movs	r1, #8
   22456:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2245a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2245e:	b1a1      	cbz	r1, 2248a <uarte_instance_init.constprop.0+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22460:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22462:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   22466:	b91a      	cbnz	r2, 22470 <uarte_instance_init.constprop.0+0xd8>
   22468:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   2246c:	2a00      	cmp	r2, #0
   2246e:	d0f8      	beq.n	22462 <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22470:	2200      	movs	r2, #0
   22472:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   22476:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   2247a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2247e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   22482:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   22486:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2248a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2248e:	2200      	movs	r2, #0
   22490:	4924      	ldr	r1, [pc, #144]	; (22524 <uarte_instance_init.constprop.0+0x18c>)
   22492:	3080      	adds	r0, #128	; 0x80
   22494:	f00f f913 	bl	316be <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   22498:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   2249c:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   224a0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   224a4:	2200      	movs	r2, #0
   224a6:	4920      	ldr	r1, [pc, #128]	; (22528 <uarte_instance_init.constprop.0+0x190>)
   224a8:	3020      	adds	r0, #32
   224aa:	f00f f908 	bl	316be <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   224ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
   224b2:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   224b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   224ba:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   224bc:	bf5c      	itt	pl
   224be:	f44f 7380 	movpl.w	r3, #256	; 0x100
   224c2:	f8c5 3304 	strpl.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   224c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   224ca:	06db      	lsls	r3, r3, #27
   224cc:	bf44      	itt	mi
   224ce:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   224d2:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   224d6:	6973      	ldr	r3, [r6, #20]
   224d8:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   224dc:	2300      	movs	r3, #0
   224de:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224e2:	2301      	movs	r3, #1
   224e4:	60ab      	str	r3, [r5, #8]
   224e6:	60eb      	str	r3, [r5, #12]
	return 0;
   224e8:	e791      	b.n	2240e <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   224ea:	2308      	movs	r3, #8
   224ec:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   224f0:	f899 3008 	ldrb.w	r3, [r9, #8]
   224f4:	2b00      	cmp	r3, #0
   224f6:	d1de      	bne.n	224b6 <uarte_instance_init.constprop.0+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224f8:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   224fc:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22500:	69b3      	ldr	r3, [r6, #24]
   22502:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22506:	2301      	movs	r3, #1
   22508:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2250c:	602b      	str	r3, [r5, #0]
}
   2250e:	e7d2      	b.n	224b6 <uarte_instance_init.constprop.0+0x11e>
   22510:	0bad0000 	.word	0x0bad0000
   22514:	00038470 	.word	0x00038470
   22518:	0003333c 	.word	0x0003333c
   2251c:	40017000 	.word	0x40017000
   22520:	000a0210 	.word	0x000a0210
   22524:	0002ff9b 	.word	0x0002ff9b
   22528:	0003006b 	.word	0x0003006b

0002252c <uarte_nrfx_poll_out>:
{
   2252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22530:	4604      	mov	r4, r0
   22532:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   22534:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22536:	f00e fd71 	bl	3101c <k_is_in_isr>
   2253a:	b9b0      	cbnz	r0, 2256a <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   2253c:	4b2a      	ldr	r3, [pc, #168]	; (225e8 <uarte_nrfx_poll_out+0xbc>)
   2253e:	781b      	ldrb	r3, [r3, #0]
   22540:	b19b      	cbz	r3, 2256a <uarte_nrfx_poll_out+0x3e>
{
   22542:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22544:	6860      	ldr	r0, [r4, #4]
   22546:	f00d fc55 	bl	2fdf4 <is_tx_ready.isra.0>
   2254a:	2800      	cmp	r0, #0
   2254c:	d138      	bne.n	225c0 <uarte_nrfx_poll_out+0x94>
   2254e:	2001      	movs	r0, #1
   22550:	f00d fe78 	bl	30244 <nrfx_busy_wait>
   22554:	3f01      	subs	r7, #1
   22556:	d1f5      	bne.n	22544 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   22558:	2100      	movs	r1, #0
   2255a:	2021      	movs	r0, #33	; 0x21
   2255c:	f004 f8de 	bl	2671c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   22560:	e7ef      	b.n	22542 <uarte_nrfx_poll_out+0x16>
   22562:	f381 8811 	msr	BASEPRI, r1
   22566:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2256a:	f04f 0320 	mov.w	r3, #32
   2256e:	f3ef 8111 	mrs	r1, BASEPRI
   22572:	f383 8812 	msr	BASEPRI_MAX, r3
   22576:	f3bf 8f6f 	isb	sy
   2257a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   2257e:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   22580:	4640      	mov	r0, r8
   22582:	f00d fc37 	bl	2fdf4 <is_tx_ready.isra.0>
   22586:	2800      	cmp	r0, #0
   22588:	d0eb      	beq.n	22562 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   2258a:	68eb      	ldr	r3, [r5, #12]
   2258c:	b15b      	cbz	r3, 225a6 <uarte_nrfx_poll_out+0x7a>
   2258e:	68da      	ldr	r2, [r3, #12]
   22590:	b14a      	cbz	r2, 225a6 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   22592:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   22596:	2a00      	cmp	r2, #0
   22598:	da05      	bge.n	225a6 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   2259a:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   2259e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   225a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   225a6:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   225a8:	2201      	movs	r2, #1
	*data->char_out = c;
   225aa:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   225ac:	4620      	mov	r0, r4
   225ae:	6969      	ldr	r1, [r5, #20]
   225b0:	f00d fac9 	bl	2fb46 <tx_start>
	__asm__ volatile(
   225b4:	f387 8811 	msr	BASEPRI, r7
   225b8:	f3bf 8f6f 	isb	sy
}
   225bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   225c0:	f04f 0320 	mov.w	r3, #32
   225c4:	f3ef 8111 	mrs	r1, BASEPRI
   225c8:	f383 8812 	msr	BASEPRI_MAX, r3
   225cc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   225d0:	6860      	ldr	r0, [r4, #4]
   225d2:	460f      	mov	r7, r1
   225d4:	f00d fc0e 	bl	2fdf4 <is_tx_ready.isra.0>
   225d8:	2800      	cmp	r0, #0
   225da:	d1e4      	bne.n	225a6 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   225dc:	f381 8811 	msr	BASEPRI, r1
   225e0:	f3bf 8f6f 	isb	sy
}
   225e4:	e7b8      	b.n	22558 <uarte_nrfx_poll_out+0x2c>
   225e6:	bf00      	nop
   225e8:	20031fbf 	.word	0x20031fbf

000225ec <uarte_nrfx_isr_async>:
{
   225ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   225f0:	6843      	ldr	r3, [r0, #4]
{
   225f2:	4604      	mov	r4, r0
	return config->uarte_regs;
   225f4:	681d      	ldr	r5, [r3, #0]
{
   225f6:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   225f8:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   225fc:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   225fe:	b169      	cbz	r1, 2261c <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22600:	2200      	movs	r2, #0
   22602:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   22606:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   2260a:	68da      	ldr	r2, [r3, #12]
   2260c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   22610:	3301      	adds	r3, #1
   22612:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   22616:	b008      	add	sp, #32
   22618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2261c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   22620:	b323      	cbz	r3, 2266c <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22622:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   22626:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   2262a:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   2262c:	2214      	movs	r2, #20
	return config->uarte_regs;
   2262e:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   22630:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22632:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   22636:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   2263a:	f00f fa2c 	bl	31a96 <memset>
   2263e:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22640:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   22642:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22646:	f100 8103 	bmi.w	22850 <uarte_nrfx_isr_async+0x264>
   2264a:	07b3      	lsls	r3, r6, #30
   2264c:	f100 8102 	bmi.w	22854 <uarte_nrfx_isr_async+0x268>
   22650:	0777      	lsls	r7, r6, #29
   22652:	f100 8101 	bmi.w	22858 <uarte_nrfx_isr_async+0x26c>
   22656:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   2265a:	4620      	mov	r0, r4
   2265c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2265e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   22662:	f00d fa98 	bl	2fb96 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   22666:	4620      	mov	r0, r4
   22668:	f00d fb2b 	bl	2fcc2 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2266c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   22670:	b38b      	cbz	r3, 226d6 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   22672:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   22676:	06d8      	lsls	r0, r3, #27
   22678:	d52d      	bpl.n	226d6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2267a:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   2267e:	2201      	movs	r2, #1
   22680:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   22684:	6926      	ldr	r6, [r4, #16]
   22686:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   2268a:	6863      	ldr	r3, [r4, #4]
   2268c:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   2268e:	68f3      	ldr	r3, [r6, #12]
   22690:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   22694:	68f0      	ldr	r0, [r6, #12]
   22696:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   22698:	f00f f81d 	bl	316d6 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   2269c:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2269e:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   226a2:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   226a6:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   226aa:	68f2      	ldr	r2, [r6, #12]
   226ac:	6e10      	ldr	r0, [r2, #96]	; 0x60
   226ae:	1a1b      	subs	r3, r3, r0
   226b0:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   226b2:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   226b4:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   226b8:	4408      	add	r0, r1
	if (rx_len > 0) {
   226ba:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   226bc:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   226be:	dd02      	ble.n	226c6 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   226c0:	4620      	mov	r0, r4
   226c2:	f00d fa6f 	bl	2fba4 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   226c6:	68f1      	ldr	r1, [r6, #12]
   226c8:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   226cc:	2b00      	cmp	r3, #0
   226ce:	f040 80c5 	bne.w	2285c <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   226d2:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   226d6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   226da:	b383      	cbz	r3, 2273e <uarte_nrfx_isr_async+0x152>
   226dc:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   226e0:	bb6e      	cbnz	r6, 2273e <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   226e2:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   226e4:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   226e8:	4631      	mov	r1, r6
   226ea:	a803      	add	r0, sp, #12
   226ec:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   226f0:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   226f2:	f00f f9d0 	bl	31a96 <memset>
   226f6:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   226f8:	a903      	add	r1, sp, #12
   226fa:	4620      	mov	r0, r4
	struct uart_event evt = {
   226fc:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   22700:	f00d fa49 	bl	2fb96 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   22704:	68fb      	ldr	r3, [r7, #12]
   22706:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   22708:	1c51      	adds	r1, r2, #1
   2270a:	d018      	beq.n	2273e <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   2270c:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   2270e:	68ff      	ldr	r7, [r7, #12]
   22710:	498e      	ldr	r1, [pc, #568]	; (2294c <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   22712:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   22714:	468e      	mov	lr, r1
   22716:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   2271a:	4631      	mov	r1, r6
   2271c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22720:	fbcc e100 	smlal	lr, r1, ip, r0
   22724:	2300      	movs	r3, #0
   22726:	4670      	mov	r0, lr
   22728:	4a89      	ldr	r2, [pc, #548]	; (22950 <uarte_nrfx_isr_async+0x364>)
   2272a:	f7e6 fc09 	bl	8f40 <__aeabi_uldivmod>
   2272e:	4602      	mov	r2, r0
   22730:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   22732:	e9cd 0100 	strd	r0, r1, [sp]
   22736:	f107 0080 	add.w	r0, r7, #128	; 0x80
   2273a:	f004 fa47 	bl	26bcc <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2273e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   22742:	b333      	cbz	r3, 22792 <uarte_nrfx_isr_async+0x1a6>
   22744:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   22748:	bb1e      	cbnz	r6, 22792 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2274a:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   2274e:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   22750:	4620      	mov	r0, r4
   22752:	68f9      	ldr	r1, [r7, #12]
   22754:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   22758:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   2275a:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   2275e:	f00d fa3a 	bl	2fbd6 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   22762:	68f9      	ldr	r1, [r7, #12]
   22764:	4620      	mov	r0, r4
   22766:	3164      	adds	r1, #100	; 0x64
   22768:	f00d fa35 	bl	2fbd6 <rx_buf_release>
	if (data->async->rx_enabled) {
   2276c:	68fb      	ldr	r3, [r7, #12]
   2276e:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   22772:	2a00      	cmp	r2, #0
   22774:	f000 80a3 	beq.w	228be <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   22778:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2277c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22780:	06d8      	lsls	r0, r3, #27
   22782:	d503      	bpl.n	2278c <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   22784:	2102      	movs	r1, #2
   22786:	4620      	mov	r0, r4
   22788:	f00d fb0a 	bl	2fda0 <async_uart_release>
	notify_rx_disable(dev);
   2278c:	4620      	mov	r0, r4
   2278e:	f00d fa3a 	bl	2fc06 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22792:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   22796:	b1db      	cbz	r3, 227d0 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   22798:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   2279c:	05d9      	lsls	r1, r3, #23
   2279e:	d517      	bpl.n	227d0 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   227a0:	6863      	ldr	r3, [r4, #4]
   227a2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   227a4:	f04f 0120 	mov.w	r1, #32
   227a8:	f3ef 8211 	mrs	r2, BASEPRI
   227ac:	f381 8812 	msr	BASEPRI_MAX, r1
   227b0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227b4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   227b8:	b131      	cbz	r1, 227c8 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   227ba:	2100      	movs	r1, #0
   227bc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   227c0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   227c4:	2101      	movs	r1, #1
   227c6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   227c8:	f382 8811 	msr	BASEPRI, r2
   227cc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227d0:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   227d4:	2b00      	cmp	r3, #0
   227d6:	f43f af1e 	beq.w	22616 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   227da:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   227de:	025a      	lsls	r2, r3, #9
   227e0:	f57f af19 	bpl.w	22616 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   227e4:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   227e6:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   227e8:	e9d3 7300 	ldrd	r7, r3, [r3]
   227ec:	06db      	lsls	r3, r3, #27
   227ee:	d46b      	bmi.n	228c8 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   227f0:	68eb      	ldr	r3, [r5, #12]
   227f2:	689b      	ldr	r3, [r3, #8]
   227f4:	2b00      	cmp	r3, #0
   227f6:	f43f af0e 	beq.w	22616 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   227fa:	f04f 0320 	mov.w	r3, #32
   227fe:	f3ef 8211 	mrs	r2, BASEPRI
   22802:	f383 8812 	msr	BASEPRI_MAX, r3
   22806:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   2280a:	68eb      	ldr	r3, [r5, #12]
   2280c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   22810:	2900      	cmp	r1, #0
   22812:	bfac      	ite	ge
   22814:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   22818:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   2281c:	f382 8811 	msr	BASEPRI, r2
   22820:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   22824:	68eb      	ldr	r3, [r5, #12]
   22826:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   2282a:	2a00      	cmp	r2, #0
   2282c:	d059      	beq.n	228e2 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   2282e:	f04f 0320 	mov.w	r3, #32
   22832:	f3ef 8611 	mrs	r6, BASEPRI
   22836:	f383 8812 	msr	BASEPRI_MAX, r3
   2283a:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   2283e:	4629      	mov	r1, r5
   22840:	4620      	mov	r0, r4
   22842:	f00d fae7 	bl	2fe14 <start_tx_locked>
	__asm__ volatile(
   22846:	f386 8811 	msr	BASEPRI, r6
   2284a:	f3bf 8f6f 	isb	sy
				return;
   2284e:	e6e2      	b.n	22616 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   22850:	2601      	movs	r6, #1
   22852:	e702      	b.n	2265a <uarte_nrfx_isr_async+0x6e>
   22854:	2602      	movs	r6, #2
   22856:	e700      	b.n	2265a <uarte_nrfx_isr_async+0x6e>
   22858:	2604      	movs	r6, #4
   2285a:	e6fe      	b.n	2265a <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   2285c:	4620      	mov	r0, r4
   2285e:	3158      	adds	r1, #88	; 0x58
   22860:	f00d f9b9 	bl	2fbd6 <rx_buf_release>
	__asm__ volatile(
   22864:	f04f 0320 	mov.w	r3, #32
   22868:	f3ef 8111 	mrs	r1, BASEPRI
   2286c:	f383 8812 	msr	BASEPRI_MAX, r3
   22870:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   22874:	68f3      	ldr	r3, [r6, #12]
   22876:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   22878:	b1f2      	cbz	r2, 228b8 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   2287a:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   2287c:	68f3      	ldr	r3, [r6, #12]
   2287e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   22880:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   22882:	2300      	movs	r3, #0
   22884:	68f2      	ldr	r2, [r6, #12]
   22886:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   22888:	68f2      	ldr	r2, [r6, #12]
   2288a:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   2288c:	68f2      	ldr	r2, [r6, #12]
   2288e:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22890:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   22894:	b90b      	cbnz	r3, 2289a <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22896:	2301      	movs	r3, #1
   22898:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   2289a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   2289e:	f023 0320 	bic.w	r3, r3, #32
   228a2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   228a6:	f381 8811 	msr	BASEPRI, r1
   228aa:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   228ae:	2200      	movs	r2, #0
   228b0:	68f3      	ldr	r3, [r6, #12]
   228b2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   228b6:	e70e      	b.n	226d6 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   228b8:	2301      	movs	r3, #1
   228ba:	607b      	str	r3, [r7, #4]
}
   228bc:	e7f3      	b.n	228a6 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   228be:	4611      	mov	r1, r2
   228c0:	6860      	ldr	r0, [r4, #4]
   228c2:	f00d fa38 	bl	2fd36 <rx_flush.isra.0>
   228c6:	e759      	b.n	2277c <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   228c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   228cc:	2101      	movs	r1, #1
   228ce:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   228d2:	4620      	mov	r0, r4
   228d4:	f00d fa64 	bl	2fda0 <async_uart_release>
		if (!data->async->tx_size) {
   228d8:	68eb      	ldr	r3, [r5, #12]
   228da:	68db      	ldr	r3, [r3, #12]
   228dc:	2b00      	cmp	r3, #0
   228de:	d187      	bne.n	227f0 <uarte_nrfx_isr_async+0x204>
   228e0:	e699      	b.n	22616 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   228e2:	6899      	ldr	r1, [r3, #8]
   228e4:	691a      	ldr	r2, [r3, #16]
   228e6:	4291      	cmp	r1, r2
   228e8:	d00c      	beq.n	22904 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   228ea:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   228ec:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   228ee:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   228f0:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   228f2:	d128      	bne.n	22946 <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   228f4:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   228f6:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   228f8:	f00d fa05 	bl	2fd06 <setup_tx_cache>
   228fc:	2800      	cmp	r0, #0
   228fe:	d196      	bne.n	2282e <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   22900:	68eb      	ldr	r3, [r5, #12]
   22902:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   22904:	68e8      	ldr	r0, [r5, #12]
   22906:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   22908:	f00e fee5 	bl	316d6 <z_impl_k_timer_stop>
	struct uart_event evt = {
   2290c:	2214      	movs	r2, #20
   2290e:	2100      	movs	r1, #0
   22910:	a803      	add	r0, sp, #12
   22912:	f00f f8c0 	bl	31a96 <memset>
		.data.tx.buf = data->async->tx_buf,
   22916:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   22918:	4620      	mov	r0, r4
	struct uart_event evt = {
   2291a:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   2291c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2291e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   22922:	68db      	ldr	r3, [r3, #12]
   22924:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   22926:	bf1c      	itt	ne
   22928:	2301      	movne	r3, #1
   2292a:	f88d 300c 	strbne.w	r3, [sp, #12]
   2292e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   22932:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   22936:	2300      	movs	r3, #0
   22938:	68ea      	ldr	r2, [r5, #12]
   2293a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   2293c:	68ea      	ldr	r2, [r5, #12]
   2293e:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   22940:	f00d f929 	bl	2fb96 <user_callback>
   22944:	e667      	b.n	22616 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   22946:	4616      	mov	r6, r2
   22948:	e7dc      	b.n	22904 <uarte_nrfx_isr_async+0x318>
   2294a:	bf00      	nop
   2294c:	000f423f 	.word	0x000f423f
   22950:	000f4240 	.word	0x000f4240

00022954 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   22954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   22956:	7e01      	ldrb	r1, [r0, #24]
   22958:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   2295a:	2902      	cmp	r1, #2
   2295c:	d014      	beq.n	22988 <bt_rpmsg_send+0x34>
   2295e:	2904      	cmp	r1, #4
   22960:	d011      	beq.n	22986 <bt_rpmsg_send+0x32>
   22962:	b1f9      	cbz	r1, 229a4 <bt_rpmsg_send+0x50>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   22964:	4b10      	ldr	r3, [pc, #64]	; (229a8 <bt_rpmsg_send+0x54>)
	switch (bt_buf_get_type(buf)) {
   22966:	9103      	str	r1, [sp, #12]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   22968:	9302      	str	r3, [sp, #8]
   2296a:	2300      	movs	r3, #0
   2296c:	2201      	movs	r2, #1
   2296e:	4618      	mov	r0, r3
   22970:	e9cd 3300 	strd	r3, r3, [sp]
   22974:	490d      	ldr	r1, [pc, #52]	; (229ac <bt_rpmsg_send+0x58>)
   22976:	f00d fb7c 	bl	30072 <z_log_msg_runtime_create.constprop.0>
	}

done:
	net_buf_unref(buf);
   2297a:	4620      	mov	r0, r4
   2297c:	f7fd ff08 	bl	20790 <net_buf_unref>
	return 0;
}
   22980:	2000      	movs	r0, #0
   22982:	b004      	add	sp, #16
   22984:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
   22986:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   22988:	f104 000c 	add.w	r0, r4, #12
   2298c:	f00c fe6a 	bl	2f664 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   22990:	8a22      	ldrh	r2, [r4, #16]
   22992:	68e1      	ldr	r1, [r4, #12]
   22994:	4806      	ldr	r0, [pc, #24]	; (229b0 <bt_rpmsg_send+0x5c>)
   22996:	f7ed fe33 	bl	10600 <ipc_service_send>
	if (err < 0) {
   2299a:	2800      	cmp	r0, #0
   2299c:	daed      	bge.n	2297a <bt_rpmsg_send+0x26>
		LOG_ERR("Failed to send (err %d)", err);
   2299e:	4b05      	ldr	r3, [pc, #20]	; (229b4 <bt_rpmsg_send+0x60>)
   229a0:	9003      	str	r0, [sp, #12]
   229a2:	e7e1      	b.n	22968 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
   229a4:	2101      	movs	r1, #1
   229a6:	e7ef      	b.n	22988 <bt_rpmsg_send+0x34>
   229a8:	000384b2 	.word	0x000384b2
   229ac:	0003323c 	.word	0x0003323c
   229b0:	20030cd0 	.word	0x20030cd0
   229b4:	000384c2 	.word	0x000384c2

000229b8 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   229b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   229ba:	4809      	ldr	r0, [pc, #36]	; (229e0 <bt_rpmsg_init+0x28>)
   229bc:	f7f8 f898 	bl	1aaf0 <bt_hci_driver_register>
	if (err < 0) {
   229c0:	1e04      	subs	r4, r0, #0
   229c2:	da0a      	bge.n	229da <bt_rpmsg_init+0x22>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   229c4:	4b07      	ldr	r3, [pc, #28]	; (229e4 <bt_rpmsg_init+0x2c>)
   229c6:	2201      	movs	r2, #1
   229c8:	9302      	str	r3, [sp, #8]
   229ca:	2300      	movs	r3, #0
   229cc:	4906      	ldr	r1, [pc, #24]	; (229e8 <bt_rpmsg_init+0x30>)
   229ce:	4618      	mov	r0, r3
   229d0:	e9cd 3300 	strd	r3, r3, [sp]
   229d4:	9403      	str	r4, [sp, #12]
   229d6:	f00d fb4c 	bl	30072 <z_log_msg_runtime_create.constprop.0>
	}

	return err;
}
   229da:	4620      	mov	r0, r4
   229dc:	b004      	add	sp, #16
   229de:	bd10      	pop	{r4, pc}
   229e0:	00034390 	.word	0x00034390
   229e4:	000384da 	.word	0x000384da
   229e8:	0003323c 	.word	0x0003323c

000229ec <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   229ec:	4801      	ldr	r0, [pc, #4]	; (229f4 <hci_ept_bound+0x8>)
   229ee:	f003 b971 	b.w	25cd4 <z_impl_k_sem_give>
   229f2:	bf00      	nop
   229f4:	20008d80 	.word	0x20008d80

000229f8 <bt_rpmsg_open>:
{
   229f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   229fa:	4816      	ldr	r0, [pc, #88]	; (22a54 <bt_rpmsg_open+0x5c>)
   229fc:	f7ed fda2 	bl	10544 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   22a00:	4604      	mov	r4, r0
   22a02:	b180      	cbz	r0, 22a26 <bt_rpmsg_open+0x2e>
   22a04:	f110 0f78 	cmn.w	r0, #120	; 0x78
   22a08:	d00d      	beq.n	22a26 <bt_rpmsg_open+0x2e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   22a0a:	4b13      	ldr	r3, [pc, #76]	; (22a58 <bt_rpmsg_open+0x60>)
   22a0c:	9003      	str	r0, [sp, #12]
		LOG_ERR("Endpoint binding failed with %d", err);
   22a0e:	9302      	str	r3, [sp, #8]
   22a10:	2300      	movs	r3, #0
   22a12:	2201      	movs	r2, #1
   22a14:	4618      	mov	r0, r3
   22a16:	e9cd 3300 	strd	r3, r3, [sp]
   22a1a:	4910      	ldr	r1, [pc, #64]	; (22a5c <bt_rpmsg_open+0x64>)
   22a1c:	f00d fb29 	bl	30072 <z_log_msg_runtime_create.constprop.0>
}
   22a20:	4620      	mov	r0, r4
   22a22:	b004      	add	sp, #16
   22a24:	bd10      	pop	{r4, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   22a26:	4a0e      	ldr	r2, [pc, #56]	; (22a60 <bt_rpmsg_open+0x68>)
   22a28:	490e      	ldr	r1, [pc, #56]	; (22a64 <bt_rpmsg_open+0x6c>)
   22a2a:	480a      	ldr	r0, [pc, #40]	; (22a54 <bt_rpmsg_open+0x5c>)
   22a2c:	f7ed fdb6 	bl	1059c <ipc_service_register_endpoint>
	if (err) {
   22a30:	4604      	mov	r4, r0
   22a32:	b110      	cbz	r0, 22a3a <bt_rpmsg_open+0x42>
		LOG_ERR("Registering endpoint failed with %d", err);
   22a34:	4b0c      	ldr	r3, [pc, #48]	; (22a68 <bt_rpmsg_open+0x70>)
   22a36:	9003      	str	r0, [sp, #12]
   22a38:	e7e9      	b.n	22a0e <bt_rpmsg_open+0x16>
	return z_impl_k_sem_take(sem, timeout);
   22a3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   22a3e:	2300      	movs	r3, #0
   22a40:	480a      	ldr	r0, [pc, #40]	; (22a6c <bt_rpmsg_open+0x74>)
   22a42:	f003 f96d 	bl	25d20 <z_impl_k_sem_take>
	if (err) {
   22a46:	4604      	mov	r4, r0
   22a48:	2800      	cmp	r0, #0
   22a4a:	d0e9      	beq.n	22a20 <bt_rpmsg_open+0x28>
		LOG_ERR("Endpoint binding failed with %d", err);
   22a4c:	4b08      	ldr	r3, [pc, #32]	; (22a70 <bt_rpmsg_open+0x78>)
   22a4e:	9003      	str	r0, [sp, #12]
   22a50:	e7dd      	b.n	22a0e <bt_rpmsg_open+0x16>
   22a52:	bf00      	nop
   22a54:	00032ba4 	.word	0x00032ba4
   22a58:	00038504 	.word	0x00038504
   22a5c:	0003323c 	.word	0x0003323c
   22a60:	20008768 	.word	0x20008768
   22a64:	20030cd0 	.word	0x20030cd0
   22a68:	00038534 	.word	0x00038534
   22a6c:	20008d80 	.word	0x20008d80
   22a70:	00038558 	.word	0x00038558

00022a74 <hci_ept_recv>:
{
   22a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a78:	4606      	mov	r6, r0
	pkt_indicator = *data++;
   22a7a:	7800      	ldrb	r0, [r0, #0]
{
   22a7c:	460d      	mov	r5, r1
	switch (pkt_indicator) {
   22a7e:	2804      	cmp	r0, #4
{
   22a80:	b089      	sub	sp, #36	; 0x24
	remaining -= sizeof(pkt_indicator);
   22a82:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   22a86:	d009      	beq.n	22a9c <hci_ept_recv+0x28>
   22a88:	2805      	cmp	r0, #5
   22a8a:	f000 8099 	beq.w	22bc0 <hci_ept_recv+0x14c>
   22a8e:	2802      	cmp	r0, #2
   22a90:	f040 80bd 	bne.w	22c0e <hci_ept_recv+0x19a>
	if (remaining < sizeof(hdr)) {
   22a94:	2b03      	cmp	r3, #3
   22a96:	d867      	bhi.n	22b68 <hci_ept_recv+0xf4>
		LOG_ERR("Not enough data for ACL header");
   22a98:	4b63      	ldr	r3, [pc, #396]	; (22c28 <hci_ept_recv+0x1b4>)
   22a9a:	e002      	b.n	22aa2 <hci_ept_recv+0x2e>
	if (remaining < sizeof(hdr)) {
   22a9c:	2b01      	cmp	r3, #1
   22a9e:	d80c      	bhi.n	22aba <hci_ept_recv+0x46>
		LOG_ERR("Not enough data for event header");
   22aa0:	4b62      	ldr	r3, [pc, #392]	; (22c2c <hci_ept_recv+0x1b8>)
		LOG_ERR("Event payload length is not correct");
   22aa2:	9302      	str	r3, [sp, #8]
   22aa4:	2300      	movs	r3, #0
   22aa6:	2201      	movs	r2, #1
   22aa8:	4618      	mov	r0, r3
   22aaa:	e9cd 3300 	strd	r3, r3, [sp]
   22aae:	4960      	ldr	r1, [pc, #384]	; (22c30 <hci_ept_recv+0x1bc>)
   22ab0:	f00d fadf 	bl	30072 <z_log_msg_runtime_create.constprop.0>
}
   22ab4:	b009      	add	sp, #36	; 0x24
   22ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   22aba:	7873      	ldrb	r3, [r6, #1]
   22abc:	2b3e      	cmp	r3, #62	; 0x3e
   22abe:	d136      	bne.n	22b2e <hci_ept_recv+0xba>
		switch (subevt_type) {
   22ac0:	78f7      	ldrb	r7, [r6, #3]
   22ac2:	1ebb      	subs	r3, r7, #2
   22ac4:	425f      	negs	r7, r3
   22ac6:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   22ac8:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   22acc:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
   22ace:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   22ad2:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (remaining != hdr.len) {
   22ad6:	d12f      	bne.n	22b38 <hci_ept_recv+0xc4>
   22ad8:	b35f      	cbz	r7, 22b32 <hci_ept_recv+0xbe>
   22ada:	f04f 0800 	mov.w	r8, #0
   22ade:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   22ae2:	f8df b150 	ldr.w	fp, [pc, #336]	; 22c34 <hci_ept_recv+0x1c0>
   22ae6:	f8df a148 	ldr.w	sl, [pc, #328]	; 22c30 <hci_ept_recv+0x1bc>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   22aea:	4642      	mov	r2, r8
   22aec:	464b      	mov	r3, r9
   22aee:	4639      	mov	r1, r7
   22af0:	f89d 001c 	ldrb.w	r0, [sp, #28]
   22af4:	f7f6 fdd6 	bl	196a4 <bt_buf_get_evt>
		if (!buf) {
   22af8:	4604      	mov	r4, r0
   22afa:	b1f8      	cbz	r0, 22b3c <hci_ept_recv+0xc8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22afc:	f100 070c 	add.w	r7, r0, #12
   22b00:	2202      	movs	r2, #2
   22b02:	a907      	add	r1, sp, #28
   22b04:	4638      	mov	r0, r7
   22b06:	f00c fd94 	bl	2f632 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   22b0a:	4638      	mov	r0, r7
   22b0c:	f00c fdcf 	bl	2f6ae <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   22b10:	4285      	cmp	r5, r0
   22b12:	d91e      	bls.n	22b52 <hci_ept_recv+0xde>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   22b14:	4b48      	ldr	r3, [pc, #288]	; (22c38 <hci_ept_recv+0x1c4>)
   22b16:	e9cd 5003 	strd	r5, r0, [sp, #12]
   22b1a:	9302      	str	r3, [sp, #8]
   22b1c:	2300      	movs	r3, #0
   22b1e:	2201      	movs	r2, #1
   22b20:	4618      	mov	r0, r3
   22b22:	e9cd 3300 	strd	r3, r3, [sp]
   22b26:	4942      	ldr	r1, [pc, #264]	; (22c30 <hci_ept_recv+0x1bc>)
   22b28:	f00d faa3 	bl	30072 <z_log_msg_runtime_create.constprop.0>
   22b2c:	e03c      	b.n	22ba8 <hci_ept_recv+0x134>
			return false;
   22b2e:	2700      	movs	r7, #0
   22b30:	e7ca      	b.n	22ac8 <hci_ept_recv+0x54>
   22b32:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   22b36:	e7d2      	b.n	22ade <hci_ept_recv+0x6a>
		LOG_ERR("Event payload length is not correct");
   22b38:	4b40      	ldr	r3, [pc, #256]	; (22c3c <hci_ept_recv+0x1c8>)
   22b3a:	e7b2      	b.n	22aa2 <hci_ept_recv+0x2e>
			if (discardable) {
   22b3c:	2f00      	cmp	r7, #0
   22b3e:	d1b9      	bne.n	22ab4 <hci_ept_recv+0x40>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   22b40:	463b      	mov	r3, r7
   22b42:	2202      	movs	r2, #2
   22b44:	4651      	mov	r1, sl
   22b46:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   22b4a:	9700      	str	r7, [sp, #0]
   22b4c:	f00d fa91 	bl	30072 <z_log_msg_runtime_create.constprop.0>
	} while (!buf);
   22b50:	e7cb      	b.n	22aea <hci_ept_recv+0x76>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22b52:	462a      	mov	r2, r5
   22b54:	1cf1      	adds	r1, r6, #3
   22b56:	4638      	mov	r0, r7
   22b58:	f00c fd6b 	bl	2f632 <net_buf_simple_add_mem>
		bt_recv(buf);
   22b5c:	4620      	mov	r0, r4
}
   22b5e:	b009      	add	sp, #36	; 0x24
   22b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		bt_recv(buf);
   22b64:	f7f7 bf94 	b.w	1aa90 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   22b68:	2200      	movs	r2, #0
   22b6a:	2300      	movs	r3, #0
   22b6c:	2003      	movs	r0, #3
   22b6e:	f7f6 fd69 	bl	19644 <bt_buf_get_rx>
	if (buf) {
   22b72:	4604      	mov	r4, r0
   22b74:	b1e0      	cbz	r0, 22bb0 <hci_ept_recv+0x13c>
		memcpy((void *)&hdr, data, sizeof(hdr));
   22b76:	f8d6 3001 	ldr.w	r3, [r6, #1]
   22b7a:	f100 070c 	add.w	r7, r0, #12
   22b7e:	2204      	movs	r2, #4
   22b80:	4638      	mov	r0, r7
   22b82:	a907      	add	r1, sp, #28
   22b84:	9307      	str	r3, [sp, #28]
   22b86:	f00c fd54 	bl	2f632 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   22b8a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   22b8e:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   22b90:	429d      	cmp	r5, r3
   22b92:	d034      	beq.n	22bfe <hci_ept_recv+0x18a>
		LOG_ERR("ACL payload length is not correct");
   22b94:	4b2a      	ldr	r3, [pc, #168]	; (22c40 <hci_ept_recv+0x1cc>)
		LOG_ERR("ISO payload length is not correct");
   22b96:	9302      	str	r3, [sp, #8]
   22b98:	2300      	movs	r3, #0
   22b9a:	2201      	movs	r2, #1
   22b9c:	4618      	mov	r0, r3
   22b9e:	e9cd 3300 	strd	r3, r3, [sp]
   22ba2:	4923      	ldr	r1, [pc, #140]	; (22c30 <hci_ept_recv+0x1bc>)
   22ba4:	f00d fa65 	bl	30072 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   22ba8:	4620      	mov	r0, r4
   22baa:	f7fd fdf1 	bl	20790 <net_buf_unref>
	if (buf) {
   22bae:	e781      	b.n	22ab4 <hci_ept_recv+0x40>
		LOG_ERR("No available ACL buffers!");
   22bb0:	4b24      	ldr	r3, [pc, #144]	; (22c44 <hci_ept_recv+0x1d0>)
		LOG_ERR("No available ISO buffers!");
   22bb2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   22bb6:	2201      	movs	r2, #1
   22bb8:	4623      	mov	r3, r4
   22bba:	491d      	ldr	r1, [pc, #116]	; (22c30 <hci_ept_recv+0x1bc>)
   22bbc:	9400      	str	r4, [sp, #0]
   22bbe:	e777      	b.n	22ab0 <hci_ept_recv+0x3c>
	if (remaining < sizeof(hdr)) {
   22bc0:	2b03      	cmp	r3, #3
   22bc2:	d801      	bhi.n	22bc8 <hci_ept_recv+0x154>
		LOG_ERR("Not enough data for ISO header");
   22bc4:	4b20      	ldr	r3, [pc, #128]	; (22c48 <hci_ept_recv+0x1d4>)
   22bc6:	e76c      	b.n	22aa2 <hci_ept_recv+0x2e>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   22bc8:	2200      	movs	r2, #0
   22bca:	2300      	movs	r3, #0
   22bcc:	f7f6 fd3a 	bl	19644 <bt_buf_get_rx>
	if (buf) {
   22bd0:	4604      	mov	r4, r0
   22bd2:	b190      	cbz	r0, 22bfa <hci_ept_recv+0x186>
		memcpy((void *)&hdr, data, sizeof(hdr));
   22bd4:	f8d6 3001 	ldr.w	r3, [r6, #1]
   22bd8:	f100 070c 	add.w	r7, r0, #12
   22bdc:	2204      	movs	r2, #4
   22bde:	4638      	mov	r0, r7
   22be0:	a907      	add	r1, sp, #28
   22be2:	9307      	str	r3, [sp, #28]
   22be4:	f00c fd25 	bl	2f632 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   22be8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
		remaining -= sizeof(hdr);
   22bec:	3d05      	subs	r5, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   22bee:	f3c3 030d 	ubfx	r3, r3, #0, #14
   22bf2:	429d      	cmp	r5, r3
   22bf4:	d003      	beq.n	22bfe <hci_ept_recv+0x18a>
		LOG_ERR("ISO payload length is not correct");
   22bf6:	4b15      	ldr	r3, [pc, #84]	; (22c4c <hci_ept_recv+0x1d8>)
   22bf8:	e7cd      	b.n	22b96 <hci_ept_recv+0x122>
		LOG_ERR("No available ISO buffers!");
   22bfa:	4b15      	ldr	r3, [pc, #84]	; (22c50 <hci_ept_recv+0x1dc>)
   22bfc:	e7d9      	b.n	22bb2 <hci_ept_recv+0x13e>
	return net_buf_simple_tailroom(&buf->b);
   22bfe:	4638      	mov	r0, r7
   22c00:	f00c fd55 	bl	2f6ae <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   22c04:	4285      	cmp	r5, r0
   22c06:	d885      	bhi.n	22b14 <hci_ept_recv+0xa0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22c08:	462a      	mov	r2, r5
   22c0a:	1d71      	adds	r1, r6, #5
   22c0c:	e7a3      	b.n	22b56 <hci_ept_recv+0xe2>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   22c0e:	4b11      	ldr	r3, [pc, #68]	; (22c54 <hci_ept_recv+0x1e0>)
	switch (pkt_indicator) {
   22c10:	9003      	str	r0, [sp, #12]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   22c12:	9302      	str	r3, [sp, #8]
   22c14:	2300      	movs	r3, #0
   22c16:	2201      	movs	r2, #1
   22c18:	4618      	mov	r0, r3
   22c1a:	e9cd 3300 	strd	r3, r3, [sp]
   22c1e:	4904      	ldr	r1, [pc, #16]	; (22c30 <hci_ept_recv+0x1bc>)
   22c20:	f00d fa27 	bl	30072 <z_log_msg_runtime_create.constprop.0>
   22c24:	e746      	b.n	22ab4 <hci_ept_recv+0x40>
   22c26:	bf00      	nop
   22c28:	00038615 	.word	0x00038615
   22c2c:	00038578 	.word	0x00038578
   22c30:	0003323c 	.word	0x0003323c
   22c34:	000385bd 	.word	0x000385bd
   22c38:	000385f2 	.word	0x000385f2
   22c3c:	00038599 	.word	0x00038599
   22c40:	0003864e 	.word	0x0003864e
   22c44:	00038634 	.word	0x00038634
   22c48:	00038670 	.word	0x00038670
   22c4c:	000386a9 	.word	0x000386a9
   22c50:	0003868f 	.word	0x0003868f
   22c54:	000386cb 	.word	0x000386cb

00022c58 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22c58:	2301      	movs	r3, #1
   22c5a:	4083      	lsls	r3, r0
{
   22c5c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22c5e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22c60:	4a0b      	ldr	r2, [pc, #44]	; (22c90 <compare_int_lock+0x38>)
   22c62:	e8d2 1fef 	ldaex	r1, [r2]
   22c66:	ea01 0504 	and.w	r5, r1, r4
   22c6a:	e8c2 5fe6 	stlex	r6, r5, [r2]
   22c6e:	2e00      	cmp	r6, #0
   22c70:	d1f7      	bne.n	22c62 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22c76:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   22c78:	4806      	ldr	r0, [pc, #24]	; (22c94 <compare_int_lock+0x3c>)
   22c7a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   22c7e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c82:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   22c86:	420b      	tst	r3, r1
}
   22c88:	bf14      	ite	ne
   22c8a:	2001      	movne	r0, #1
   22c8c:	2000      	moveq	r0, #0
   22c8e:	bd70      	pop	{r4, r5, r6, pc}
   22c90:	20030ce0 	.word	0x20030ce0
   22c94:	40015000 	.word	0x40015000

00022c98 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   22c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22c9a:	491b      	ldr	r1, [pc, #108]	; (22d08 <sys_clock_timeout_handler+0x70>)
{
   22c9c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   22c9e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22ca2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   22ca4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22ca8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22cac:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   22cae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22cb2:	d30f      	bcc.n	22cd4 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22cb4:	f003 feaa 	bl	26a0c <sys_clock_announce>
    return p_reg->CC[ch];
   22cb8:	00a3      	lsls	r3, r4, #2
   22cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22cbe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   22cc2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   22cc6:	4295      	cmp	r5, r2
   22cc8:	d11d      	bne.n	22d06 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   22cca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22cce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   22cd2:	e012      	b.n	22cfa <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22cd4:	4b0d      	ldr	r3, [pc, #52]	; (22d0c <sys_clock_timeout_handler+0x74>)
   22cd6:	681b      	ldr	r3, [r3, #0]
   22cd8:	0a1a      	lsrs	r2, r3, #8
   22cda:	061b      	lsls	r3, r3, #24
   22cdc:	195e      	adds	r6, r3, r5
   22cde:	4b0c      	ldr	r3, [pc, #48]	; (22d10 <sys_clock_timeout_handler+0x78>)
   22ce0:	f142 0700 	adc.w	r7, r2, #0
   22ce4:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22ce8:	f003 fe90 	bl	26a0c <sys_clock_announce>
    return p_reg->CC[ch];
   22cec:	4a09      	ldr	r2, [pc, #36]	; (22d14 <sys_clock_timeout_handler+0x7c>)
   22cee:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   22cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   22cf6:	429d      	cmp	r5, r3
   22cf8:	d105      	bne.n	22d06 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22cfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   22cfe:	4a05      	ldr	r2, [pc, #20]	; (22d14 <sys_clock_timeout_handler+0x7c>)
   22d00:	40a3      	lsls	r3, r4
   22d02:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   22d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d08:	2000a420 	.word	0x2000a420
   22d0c:	20030ce4 	.word	0x20030ce4
   22d10:	2000a428 	.word	0x2000a428
   22d14:	40015000 	.word	0x40015000

00022d18 <compare_int_unlock>:
	if (key) {
   22d18:	b1d9      	cbz	r1, 22d52 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   22d1a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22d1c:	4a0d      	ldr	r2, [pc, #52]	; (22d54 <compare_int_unlock+0x3c>)
   22d1e:	4083      	lsls	r3, r0
   22d20:	e8d2 cfef 	ldaex	ip, [r2]
   22d24:	ea4c 0c03 	orr.w	ip, ip, r3
   22d28:	e8c2 cfe1 	stlex	r1, ip, [r2]
   22d2c:	2900      	cmp	r1, #0
   22d2e:	d1f7      	bne.n	22d20 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   22d34:	4a08      	ldr	r2, [pc, #32]	; (22d58 <compare_int_unlock+0x40>)
   22d36:	4083      	lsls	r3, r0
   22d38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22d3c:	4b07      	ldr	r3, [pc, #28]	; (22d5c <compare_int_unlock+0x44>)
   22d3e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22d42:	40c3      	lsrs	r3, r0
   22d44:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22d46:	bf42      	ittt	mi
   22d48:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   22d4c:	4b04      	ldrmi	r3, [pc, #16]	; (22d60 <compare_int_unlock+0x48>)
   22d4e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22d52:	4770      	bx	lr
   22d54:	20030ce0 	.word	0x20030ce0
   22d58:	40015000 	.word	0x40015000
   22d5c:	20030cd8 	.word	0x20030cd8
   22d60:	e000e100 	.word	0xe000e100

00022d64 <z_nrf_rtc_timer_compare_evt_address_get>:
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   22d64:	b2c3      	uxtb	r3, r0
}
   22d66:	4802      	ldr	r0, [pc, #8]	; (22d70 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
   22d68:	009b      	lsls	r3, r3, #2
   22d6a:	4418      	add	r0, r3
   22d6c:	4770      	bx	lr
   22d6e:	bf00      	nop
   22d70:	40015140 	.word	0x40015140

00022d74 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
   22d74:	4b02      	ldr	r3, [pc, #8]	; (22d80 <z_nrf_rtc_timer_compare_read+0xc>)
   22d76:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   22d7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   22d7e:	4770      	bx	lr
   22d80:	40015000 	.word	0x40015000

00022d84 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22d84:	4b0d      	ldr	r3, [pc, #52]	; (22dbc <z_nrf_rtc_timer_read+0x38>)
   22d86:	6818      	ldr	r0, [r3, #0]
   22d88:	0a01      	lsrs	r1, r0, #8
   22d8a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22d8c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   22d90:	4b0b      	ldr	r3, [pc, #44]	; (22dc0 <z_nrf_rtc_timer_read+0x3c>)
   22d92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22d96:	1818      	adds	r0, r3, r0
   22d98:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22da0:	d20a      	bcs.n	22db8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22da2:	4b08      	ldr	r3, [pc, #32]	; (22dc4 <z_nrf_rtc_timer_read+0x40>)
   22da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   22da8:	4290      	cmp	r0, r2
   22daa:	eb71 0303 	sbcs.w	r3, r1, r3
   22dae:	d203      	bcs.n	22db8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22db0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22db4:	f141 0100 	adc.w	r1, r1, #0
}
   22db8:	4770      	bx	lr
   22dba:	bf00      	nop
   22dbc:	20030ce4 	.word	0x20030ce4
   22dc0:	40015000 	.word	0x40015000
   22dc4:	2000a428 	.word	0x2000a428

00022dc8 <compare_set>:
{
   22dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dcc:	b085      	sub	sp, #20
   22dce:	4614      	mov	r4, r2
   22dd0:	461d      	mov	r5, r3
   22dd2:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   22dd4:	f7ff ff40 	bl	22c58 <compare_int_lock>
   22dd8:	9002      	str	r0, [sp, #8]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22dda:	f7ff ffd3 	bl	22d84 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22dde:	42a0      	cmp	r0, r4
   22de0:	eb71 0305 	sbcs.w	r3, r1, r5
   22de4:	d278      	bcs.n	22ed8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   22de6:	4b43      	ldr	r3, [pc, #268]	; (22ef4 <compare_set+0x12c>)
   22de8:	1a20      	subs	r0, r4, r0
   22dea:	eb65 0101 	sbc.w	r1, r5, r1
   22dee:	4298      	cmp	r0, r3
   22df0:	f171 0100 	sbcs.w	r1, r1, #0
   22df4:	d27b      	bcs.n	22eee <compare_set+0x126>
		if (target_time != cc_data[chan].target_time) {
   22df6:	4b40      	ldr	r3, [pc, #256]	; (22ef8 <compare_set+0x130>)
   22df8:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   22dfc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   22e00:	429d      	cmp	r5, r3
   22e02:	bf08      	it	eq
   22e04:	4294      	cmpeq	r4, r2
   22e06:	d052      	beq.n	22eae <compare_set+0xe6>
	return absolute_time & COUNTER_MAX;
   22e08:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
   22e0c:	9301      	str	r3, [sp, #4]
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	uint32_t tick_inc = 2;
   22e12:	f04f 0902 	mov.w	r9, #2
   22e16:	ea4f 0887 	mov.w	r8, r7, lsl #2
   22e1a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   22e1e:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22e22:	40bb      	lsls	r3, r7
    return p_reg->CC[ch];
   22e24:	f8d8 0540 	ldr.w	r0, [r8, #1344]	; 0x540
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22e28:	9e01      	ldr	r6, [sp, #4]
     return p_reg->COUNTER;
   22e2a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 22efc <compare_set+0x134>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22e2e:	9303      	str	r3, [sp, #12]
   22e30:	f8da b504 	ldr.w	fp, [sl, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22e34:	eba0 000b 	sub.w	r0, r0, fp
   22e38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22e3c:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22e40:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   22e42:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
   22e46:	d102      	bne.n	22e4e <compare_set+0x86>
	z_impl_k_busy_wait(usec_to_wait);
   22e48:	2013      	movs	r0, #19
   22e4a:	f00e fc12 	bl	31672 <z_impl_k_busy_wait>
	return (a - b) & COUNTER_MAX;
   22e4e:	f06f 0001 	mvn.w	r0, #1
   22e52:	eba0 000b 	sub.w	r0, r0, fp
   22e56:	4430      	add	r0, r6
   22e58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22e5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
		event_clear(chan);
   22e60:	4638      	mov	r0, r7
			cc_val = now + tick_inc;
   22e62:	bf84      	itt	hi
   22e64:	eb0b 0609 	addhi.w	r6, fp, r9
			tick_inc++;
   22e68:	f109 0901 	addhi.w	r9, r9, #1
		event_clear(chan);
   22e6c:	f00d f934 	bl	300d8 <event_clear>
    p_reg->EVTENSET = mask;
   22e70:	9b03      	ldr	r3, [sp, #12]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22e72:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   22e76:	f8ca 3344 	str.w	r3, [sl, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   22e7a:	f8c8 0540 	str.w	r0, [r8, #1344]	; 0x540
     return p_reg->COUNTER;
   22e7e:	f8da 0504 	ldr.w	r0, [sl, #1284]	; 0x504
	} while ((now2 != now) &&
   22e82:	4583      	cmp	fp, r0
   22e84:	d00a      	beq.n	22e9c <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   22e86:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   22e8a:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   22e8e:	30fe      	adds	r0, #254	; 0xfe
   22e90:	4430      	add	r0, r6
   22e92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22e96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22e9a:	d81b      	bhi.n	22ed4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   22e9c:	9b01      	ldr	r3, [sp, #4]
   22e9e:	1af6      	subs	r6, r6, r3
   22ea0:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   22ea4:	1936      	adds	r6, r6, r4
   22ea6:	f145 0300 	adc.w	r3, r5, #0
   22eaa:	4634      	mov	r4, r6
   22eac:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   22eae:	4912      	ldr	r1, [pc, #72]	; (22ef8 <compare_set+0x130>)
	cc_data[chan].callback = handler;
   22eb0:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   22eb2:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   22eb6:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   22eba:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   22ebc:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   22ebe:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22ec2:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   22ec4:	4638      	mov	r0, r7
   22ec6:	9902      	ldr	r1, [sp, #8]
   22ec8:	f7ff ff26 	bl	22d18 <compare_int_unlock>
}
   22ecc:	4620      	mov	r0, r4
   22ece:	b005      	add	sp, #20
   22ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ed4:	4630      	mov	r0, r6
   22ed6:	e7ab      	b.n	22e30 <compare_set+0x68>
		atomic_or(&force_isr_mask, BIT(chan));
   22ed8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22eda:	4a09      	ldr	r2, [pc, #36]	; (22f00 <compare_set+0x138>)
   22edc:	40bb      	lsls	r3, r7
   22ede:	e8d2 0fef 	ldaex	r0, [r2]
   22ee2:	4318      	orrs	r0, r3
   22ee4:	e8c2 0fe1 	stlex	r1, r0, [r2]
   22ee8:	2900      	cmp	r1, #0
   22eea:	d0e0      	beq.n	22eae <compare_set+0xe6>
   22eec:	e7f7      	b.n	22ede <compare_set+0x116>
			return -EINVAL;
   22eee:	f06f 0415 	mvn.w	r4, #21
   22ef2:	e7e7      	b.n	22ec4 <compare_set+0xfc>
   22ef4:	01000001 	.word	0x01000001
   22ef8:	2000a400 	.word	0x2000a400
   22efc:	40015000 	.word	0x40015000
   22f00:	20030cd8 	.word	0x20030cd8

00022f04 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   22f06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   22f0a:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22f0c:	f04f 30ff 	mov.w	r0, #4294967295
   22f10:	f04f 31ff 	mov.w	r1, #4294967295
   22f14:	4c19      	ldr	r4, [pc, #100]	; (22f7c <sys_clock_driver_init+0x78>)
   22f16:	4b1a      	ldr	r3, [pc, #104]	; (22f80 <sys_clock_driver_init+0x7c>)
   22f18:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   22f1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22f20:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   22f24:	e9c3 0106 	strd	r0, r1, [r3, #24]
   22f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   22f2c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22f2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22f32:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   22f36:	4b13      	ldr	r3, [pc, #76]	; (22f84 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22f38:	2101      	movs	r1, #1
   22f3a:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   22f3e:	2015      	movs	r0, #21
   22f40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22f44:	462a      	mov	r2, r5
   22f46:	f7ee fa63 	bl	11410 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22f4a:	2015      	movs	r0, #21
   22f4c:	f7ee fa30 	bl	113b0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22f50:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22f52:	2203      	movs	r2, #3
   22f54:	60a3      	str	r3, [r4, #8]
   22f56:	6023      	str	r3, [r4, #0]
   22f58:	4b0b      	ldr	r3, [pc, #44]	; (22f88 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22f5a:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   22f5c:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   22f5e:	4b0b      	ldr	r3, [pc, #44]	; (22f8c <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22f60:	4a0b      	ldr	r2, [pc, #44]	; (22f90 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   22f62:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22f64:	4b0b      	ldr	r3, [pc, #44]	; (22f94 <sys_clock_driver_init+0x90>)
   22f66:	9501      	str	r5, [sp, #4]
   22f68:	9300      	str	r3, [sp, #0]
   22f6a:	2300      	movs	r3, #0
   22f6c:	f7ff ff2c 	bl	22dc8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22f70:	4630      	mov	r0, r6
   22f72:	f7fd ffd3 	bl	20f1c <z_nrf_clock_control_lf_on>

	return 0;
}
   22f76:	4628      	mov	r0, r5
   22f78:	b002      	add	sp, #8
   22f7a:	bd70      	pop	{r4, r5, r6, pc}
   22f7c:	40015000 	.word	0x40015000
   22f80:	2000a400 	.word	0x2000a400
   22f84:	e000e100 	.word	0xe000e100
   22f88:	20030ce0 	.word	0x20030ce0
   22f8c:	20030cdc 	.word	0x20030cdc
   22f90:	007fffff 	.word	0x007fffff
   22f94:	00022c99 	.word	0x00022c99

00022f98 <rtc_nrf_isr>:
{
   22f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   22f9c:	4b3c      	ldr	r3, [pc, #240]	; (23090 <rtc_nrf_isr+0xf8>)
   22f9e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22fa2:	0792      	lsls	r2, r2, #30
   22fa4:	d50b      	bpl.n	22fbe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22fa6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   22faa:	b142      	cbz	r2, 22fbe <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22fac:	2200      	movs	r2, #0
   22fae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   22fb2:	4a38      	ldr	r2, [pc, #224]	; (23094 <rtc_nrf_isr+0xfc>)
   22fb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   22fb8:	6813      	ldr	r3, [r2, #0]
   22fba:	3301      	adds	r3, #1
   22fbc:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22fbe:	4d36      	ldr	r5, [pc, #216]	; (23098 <rtc_nrf_isr+0x100>)
   22fc0:	2400      	movs	r4, #0
   22fc2:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22fc4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   22fc8:	4e31      	ldr	r6, [pc, #196]	; (23090 <rtc_nrf_isr+0xf8>)
	__asm__ volatile(
   22fca:	f04f 0320 	mov.w	r3, #32
   22fce:	f3ef 8111 	mrs	r1, BASEPRI
   22fd2:	f383 8812 	msr	BASEPRI_MAX, r3
   22fd6:	f3bf 8f6f 	isb	sy
   22fda:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   22fde:	fa0a f904 	lsl.w	r9, sl, r4
   22fe2:	ea19 0f03 	tst.w	r9, r3
   22fe6:	d10a      	bne.n	22ffe <rtc_nrf_isr+0x66>
	__asm__ volatile(
   22fe8:	f381 8811 	msr	BASEPRI, r1
   22fec:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22ff0:	3510      	adds	r5, #16
   22ff2:	b114      	cbz	r4, 22ffa <rtc_nrf_isr+0x62>
}
   22ff4:	b003      	add	sp, #12
   22ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22ffa:	2401      	movs	r4, #1
   22ffc:	e7e5      	b.n	22fca <rtc_nrf_isr+0x32>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22ffe:	2301      	movs	r3, #1
   23000:	40a3      	lsls	r3, r4
   23002:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23004:	4a25      	ldr	r2, [pc, #148]	; (2309c <rtc_nrf_isr+0x104>)
   23006:	e8d2 0fef 	ldaex	r0, [r2]
   2300a:	ea00 0c03 	and.w	ip, r0, r3
   2300e:	e8c2 cfee 	stlex	lr, ip, [r2]
   23012:	f1be 0f00 	cmp.w	lr, #0
   23016:	d1f6      	bne.n	23006 <rtc_nrf_isr+0x6e>
   23018:	b920      	cbnz	r0, 23024 <rtc_nrf_isr+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2301a:	4b21      	ldr	r3, [pc, #132]	; (230a0 <rtc_nrf_isr+0x108>)
   2301c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   23020:	2b00      	cmp	r3, #0
   23022:	d0e1      	beq.n	22fe8 <rtc_nrf_isr+0x50>
			event_clear(chan);
   23024:	4620      	mov	r0, r4
   23026:	f00d f857 	bl	300d8 <event_clear>
   2302a:	f381 8811 	msr	BASEPRI, r1
   2302e:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   23032:	f7ff fea7 	bl	22d84 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   23036:	f04f 0320 	mov.w	r3, #32
   2303a:	f3ef 8c11 	mrs	ip, BASEPRI
   2303e:	f383 8812 	msr	BASEPRI_MAX, r3
   23042:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   23046:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   2304a:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   2304e:	4290      	cmp	r0, r2
   23050:	4199      	sbcs	r1, r3
   23052:	d204      	bcs.n	2305e <rtc_nrf_isr+0xc6>
	__asm__ volatile(
   23054:	f38c 8811 	msr	BASEPRI, ip
   23058:	f3bf 8f6f 	isb	sy
		if (handler) {
   2305c:	e7c8      	b.n	22ff0 <rtc_nrf_isr+0x58>
			cc_data[chan].callback = NULL;
   2305e:	2100      	movs	r1, #0
			user_context = cc_data[chan].user_context;
   23060:	e9d5 8b00 	ldrd	r8, fp, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   23064:	f04f 30ff 	mov.w	r0, #4294967295
			cc_data[chan].callback = NULL;
   23068:	6029      	str	r1, [r5, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2306a:	f04f 31ff 	mov.w	r1, #4294967295
   2306e:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   23072:	4907      	ldr	r1, [pc, #28]	; (23090 <rtc_nrf_isr+0xf8>)
   23074:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   23078:	f38c 8811 	msr	BASEPRI, ip
   2307c:	f3bf 8f6f 	isb	sy
		if (handler) {
   23080:	f1b8 0f00 	cmp.w	r8, #0
   23084:	d0b4      	beq.n	22ff0 <rtc_nrf_isr+0x58>
			handler(chan, expire_time, user_context);
   23086:	4620      	mov	r0, r4
   23088:	f8cd b000 	str.w	fp, [sp]
   2308c:	47c0      	blx	r8
   2308e:	e7af      	b.n	22ff0 <rtc_nrf_isr+0x58>
   23090:	40015000 	.word	0x40015000
   23094:	20030ce4 	.word	0x20030ce4
   23098:	2000a400 	.word	0x2000a400
   2309c:	20030cd8 	.word	0x20030cd8
   230a0:	40015140 	.word	0x40015140

000230a4 <z_nrf_rtc_timer_chan_alloc>:
{
   230a4:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   230a6:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   230a8:	4b0c      	ldr	r3, [pc, #48]	; (230dc <z_nrf_rtc_timer_chan_alloc+0x38>)
   230aa:	6818      	ldr	r0, [r3, #0]
   230ac:	b190      	cbz	r0, 230d4 <z_nrf_rtc_timer_chan_alloc+0x30>
   230ae:	fab0 f080 	clz	r0, r0
   230b2:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   230b6:	fa04 f100 	lsl.w	r1, r4, r0
   230ba:	43c9      	mvns	r1, r1
   230bc:	e8d3 2fef 	ldaex	r2, [r3]
   230c0:	ea02 0501 	and.w	r5, r2, r1
   230c4:	e8c3 5fe6 	stlex	r6, r5, [r3]
   230c8:	2e00      	cmp	r6, #0
   230ca:	d1f7      	bne.n	230bc <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   230cc:	40c2      	lsrs	r2, r0
   230ce:	07d2      	lsls	r2, r2, #31
   230d0:	d5eb      	bpl.n	230aa <z_nrf_rtc_timer_chan_alloc+0x6>
}
   230d2:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   230d4:	f06f 000b 	mvn.w	r0, #11
   230d8:	e7fb      	b.n	230d2 <z_nrf_rtc_timer_chan_alloc+0x2e>
   230da:	bf00      	nop
   230dc:	20030cdc 	.word	0x20030cdc

000230e0 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
   230e0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   230e2:	4a05      	ldr	r2, [pc, #20]	; (230f8 <z_nrf_rtc_timer_chan_free+0x18>)
   230e4:	4083      	lsls	r3, r0
   230e6:	e8d2 0fef 	ldaex	r0, [r2]
   230ea:	4318      	orrs	r0, r3
   230ec:	e8c2 0fe1 	stlex	r1, r0, [r2]
   230f0:	2900      	cmp	r1, #0
   230f2:	d1f8      	bne.n	230e6 <z_nrf_rtc_timer_chan_free+0x6>
}
   230f4:	4770      	bx	lr
   230f6:	bf00      	nop
   230f8:	20030cdc 	.word	0x20030cdc

000230fc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   230fc:	1c43      	adds	r3, r0, #1
{
   230fe:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   23100:	d020      	beq.n	23144 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   23102:	2801      	cmp	r0, #1
   23104:	dd20      	ble.n	23148 <sys_clock_set_timeout+0x4c>
   23106:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2310a:	da1f      	bge.n	2314c <sys_clock_set_timeout+0x50>
   2310c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2310e:	f7ff fe39 	bl	22d84 <z_nrf_rtc_timer_read>
   23112:	4b0f      	ldr	r3, [pc, #60]	; (23150 <sys_clock_set_timeout+0x54>)
   23114:	e9d3 1300 	ldrd	r1, r3, [r3]
   23118:	1a42      	subs	r2, r0, r1
		ticks = 0;
   2311a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   2311e:	bf28      	it	cs
   23120:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   23122:	480c      	ldr	r0, [pc, #48]	; (23154 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   23124:	3201      	adds	r2, #1
   23126:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   23128:	4282      	cmp	r2, r0
   2312a:	bf28      	it	cs
   2312c:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   2312e:	2000      	movs	r0, #0
   23130:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   23132:	4909      	ldr	r1, [pc, #36]	; (23158 <sys_clock_set_timeout+0x5c>)
   23134:	9001      	str	r0, [sp, #4]
   23136:	9100      	str	r1, [sp, #0]
   23138:	f143 0300 	adc.w	r3, r3, #0
   2313c:	f7ff fe44 	bl	22dc8 <compare_set>
}
   23140:	b002      	add	sp, #8
   23142:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   23144:	4803      	ldr	r0, [pc, #12]	; (23154 <sys_clock_set_timeout+0x58>)
   23146:	e7e1      	b.n	2310c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   23148:	2400      	movs	r4, #0
   2314a:	e7e0      	b.n	2310e <sys_clock_set_timeout+0x12>
   2314c:	4c01      	ldr	r4, [pc, #4]	; (23154 <sys_clock_set_timeout+0x58>)
   2314e:	e7de      	b.n	2310e <sys_clock_set_timeout+0x12>
   23150:	2000a420 	.word	0x2000a420
   23154:	007fffff 	.word	0x007fffff
   23158:	00022c99 	.word	0x00022c99

0002315c <sys_clock_elapsed>:
{
   2315c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2315e:	f7ff fe11 	bl	22d84 <z_nrf_rtc_timer_read>
   23162:	4b02      	ldr	r3, [pc, #8]	; (2316c <sys_clock_elapsed+0x10>)
   23164:	681b      	ldr	r3, [r3, #0]
}
   23166:	1ac0      	subs	r0, r0, r3
   23168:	bd08      	pop	{r3, pc}
   2316a:	bf00      	nop
   2316c:	2000a420 	.word	0x2000a420

00023170 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   23170:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   23174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
   23178:	4e52      	ldr	r6, [pc, #328]	; (232c4 <pinctrl_configure_pins+0x154>)
   2317a:	4f53      	ldr	r7, [pc, #332]	; (232c8 <pinctrl_configure_pins+0x158>)
   2317c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   23180:	4281      	cmp	r1, r0
   23182:	d102      	bne.n	2318a <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   23184:	2000      	movs	r0, #0
}
   23186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2318a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2318c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   23190:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   23194:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   23196:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   2319a:	bf08      	it	eq
   2319c:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   231a0:	2c22      	cmp	r4, #34	; 0x22
   231a2:	f200 808c 	bhi.w	232be <pinctrl_configure_pins+0x14e>
   231a6:	e8df f004 	tbb	[pc, r4]
   231aa:	2312      	.short	0x2312
   231ac:	3e2b4228 	.word	0x3e2b4228
   231b0:	8a8a8a42 	.word	0x8a8a8a42
   231b4:	8a72458a 	.word	0x8a72458a
   231b8:	8a8a8a8a 	.word	0x8a8a8a8a
   231bc:	8a8a8a8a 	.word	0x8a8a8a8a
   231c0:	8a8a8a8a 	.word	0x8a8a8a8a
   231c4:	758a8a8a 	.word	0x758a8a8a
   231c8:	84817e7b 	.word	0x84817e7b
   231cc:	87          	.byte	0x87
   231cd:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   231ce:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   231d2:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
   231d6:	f1b8 0f01 	cmp.w	r8, #1
   231da:	bf14      	ite	ne
   231dc:	46b6      	movne	lr, r6
   231de:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
   231e0:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   231e4:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
   231e8:	f8ce 4008 	str.w	r4, [lr, #8]
   231ec:	2401      	movs	r4, #1
   231ee:	e002      	b.n	231f6 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
   231f0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   231f4:	2400      	movs	r4, #0
   231f6:	46a6      	mov	lr, r4
   231f8:	e023      	b.n	23242 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   231fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   231fe:	e7e8      	b.n	231d2 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   23200:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   23202:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
   23206:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
   2320a:	f1b9 0f01 	cmp.w	r9, #1
   2320e:	bf14      	ite	ne
   23210:	46b0      	movne	r8, r6
   23212:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
   23214:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23218:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
   2321c:	f8c8 e00c 	str.w	lr, [r8, #12]
   23220:	f04f 0e01 	mov.w	lr, #1
   23224:	e00d      	b.n	23242 <pinctrl_configure_pins+0xd2>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   23226:	2401      	movs	r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   23228:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (write != NO_WRITE) {
   2322c:	e7eb      	b.n	23206 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2322e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   23232:	e7df      	b.n	231f4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   23234:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   23238:	2d00      	cmp	r5, #0
   2323a:	d1db      	bne.n	231f4 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2323c:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
   2323e:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   23240:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   23242:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
   23246:	f003 091f 	and.w	r9, r3, #31
   2324a:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2324e:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
   23252:	ea4f 1353 	mov.w	r3, r3, lsr #5
   23256:	bf1c      	itt	ne
   23258:	2401      	movne	r4, #1
   2325a:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
   2325e:	2b01      	cmp	r3, #1
   23260:	bf0c      	ite	eq
   23262:	46b8      	moveq	r8, r7
   23264:	46b0      	movne	r8, r6
   23266:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2326a:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2326e:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
   23272:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   23276:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   23278:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
   2327c:	ea43 030e 	orr.w	r3, r3, lr
   23280:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23284:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
   23288:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2328c:	e778      	b.n	23180 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2328e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   23292:	e7d1      	b.n	23238 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   23294:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   23298:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2329a:	f04f 0e00 	mov.w	lr, #0
   2329e:	e7d0      	b.n	23242 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   232a0:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
			if (write != NO_WRITE) {
   232a4:	e795      	b.n	231d2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   232a6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   232aa:	e7f5      	b.n	23298 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   232ac:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   232b0:	e7f2      	b.n	23298 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   232b2:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   232b6:	e7ef      	b.n	23298 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   232b8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   232bc:	e7ec      	b.n	23298 <pinctrl_configure_pins+0x128>
		switch (NRF_GET_FUN(pins[i])) {
   232be:	f06f 0085 	mvn.w	r0, #133	; 0x85
   232c2:	e760      	b.n	23186 <pinctrl_configure_pins+0x16>
   232c4:	40842500 	.word	0x40842500
   232c8:	40842800 	.word	0x40842800

000232cc <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   232cc:	b510      	push	{r4, lr}
   232ce:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   232d0:	6902      	ldr	r2, [r0, #16]
{
   232d2:	b0a6      	sub	sp, #152	; 0x98

	data->dev = dev;
   232d4:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   232d8:	4924      	ldr	r1, [pc, #144]	; (2336c <mbox_nrf_init+0xa0>)
   232da:	2000      	movs	r0, #0
   232dc:	f000 ff10 	bl	24100 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   232e0:	2200      	movs	r2, #0
   232e2:	2101      	movs	r1, #1
   232e4:	202a      	movs	r0, #42	; 0x2a
   232e6:	f7ee f893 	bl	11410 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   232ea:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   232ec:	2284      	movs	r2, #132	; 0x84
   232ee:	2100      	movs	r1, #0
   232f0:	a805      	add	r0, sp, #20
   232f2:	f00e fbd0 	bl	31a96 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   232f6:	6863      	ldr	r3, [r4, #4]
   232f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   232fc:	d309      	bcc.n	23312 <mbox_nrf_init+0x46>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   232fe:	4b1c      	ldr	r3, [pc, #112]	; (23370 <mbox_nrf_init+0xa4>)
   23300:	2202      	movs	r2, #2
   23302:	9302      	str	r3, [sp, #8]
   23304:	2300      	movs	r3, #0
   23306:	491b      	ldr	r1, [pc, #108]	; (23374 <mbox_nrf_init+0xa8>)
   23308:	4618      	mov	r0, r3
   2330a:	e9cd 3300 	strd	r3, r3, [sp]
   2330e:	f00c ff23 	bl	30158 <z_log_msg_runtime_create.constprop.0>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   23312:	6823      	ldr	r3, [r4, #0]
   23314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   23318:	d309      	bcc.n	2332e <mbox_nrf_init+0x62>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   2331a:	4b17      	ldr	r3, [pc, #92]	; (23378 <mbox_nrf_init+0xac>)
   2331c:	2202      	movs	r2, #2
   2331e:	9302      	str	r3, [sp, #8]
   23320:	2300      	movs	r3, #0
   23322:	4914      	ldr	r1, [pc, #80]	; (23374 <mbox_nrf_init+0xa8>)
   23324:	4618      	mov	r0, r3
   23326:	e9cd 3300 	strd	r3, r3, [sp]
   2332a:	f00c ff15 	bl	30158 <z_log_msg_runtime_create.constprop.0>
	ch_config.receive_events_enabled = 0;
   2332e:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   23330:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   23332:	9325      	str	r3, [sp, #148]	; 0x94
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23334:	aa05      	add	r2, sp, #20
		if (conf->tx_mask & BIT(ch)) {
   23336:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23338:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   2333a:	40d9      	lsrs	r1, r3
   2333c:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   2333e:	bf44      	itt	mi
   23340:	fa00 f103 	lslmi.w	r1, r0, r3
   23344:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   23348:	6821      	ldr	r1, [r4, #0]
   2334a:	40d9      	lsrs	r1, r3
   2334c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   2334e:	bf48      	it	mi
   23350:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   23354:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   23358:	bf48      	it	mi
   2335a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   2335c:	2b10      	cmp	r3, #16
   2335e:	d1ea      	bne.n	23336 <mbox_nrf_init+0x6a>
	nrfx_ipc_config_load(&ch_config);
   23360:	a805      	add	r0, sp, #20
   23362:	f000 fee5 	bl	24130 <nrfx_ipc_config_load>

	return 0;
}
   23366:	2000      	movs	r0, #0
   23368:	b026      	add	sp, #152	; 0x98
   2336a:	bd10      	pop	{r4, pc}
   2336c:	000233cd 	.word	0x000233cd
   23370:	00038715 	.word	0x00038715
   23374:	000332d4 	.word	0x000332d4
   23378:	00038741 	.word	0x00038741

0002337c <mbox_nrf_send>:
{
   2337c:	b530      	push	{r4, r5, lr}
   2337e:	4605      	mov	r5, r0
   23380:	460c      	mov	r4, r1
   23382:	b085      	sub	sp, #20
	if (msg) {
   23384:	b14a      	cbz	r2, 2339a <mbox_nrf_send+0x1e>
		LOG_WRN("Sending data not supported");
   23386:	4b0f      	ldr	r3, [pc, #60]	; (233c4 <mbox_nrf_send+0x48>)
   23388:	2202      	movs	r2, #2
   2338a:	9302      	str	r3, [sp, #8]
   2338c:	2300      	movs	r3, #0
   2338e:	490e      	ldr	r1, [pc, #56]	; (233c8 <mbox_nrf_send+0x4c>)
   23390:	4618      	mov	r0, r3
   23392:	e9cd 3300 	strd	r3, r3, [sp]
   23396:	f00c fedf 	bl	30158 <z_log_msg_runtime_create.constprop.0>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   2339a:	2c0f      	cmp	r4, #15
   2339c:	d80f      	bhi.n	233be <mbox_nrf_send+0x42>
   2339e:	686b      	ldr	r3, [r5, #4]
   233a0:	685b      	ldr	r3, [r3, #4]
   233a2:	40e3      	lsrs	r3, r4
   233a4:	07db      	lsls	r3, r3, #31
   233a6:	d50a      	bpl.n	233be <mbox_nrf_send+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233a8:	2301      	movs	r3, #1
	return 0;
   233aa:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   233ac:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233ae:	b2e4      	uxtb	r4, r4
   233b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   233b4:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   233b8:	6023      	str	r3, [r4, #0]
}
   233ba:	b005      	add	sp, #20
   233bc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   233be:	f06f 0015 	mvn.w	r0, #21
   233c2:	e7fa      	b.n	233ba <mbox_nrf_send+0x3e>
   233c4:	0003876d 	.word	0x0003876d
   233c8:	000332d4 	.word	0x000332d4

000233cc <mbox_dispatcher>:
{
   233cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct device *dev = data->dev;
   233ce:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   233d2:	280f      	cmp	r0, #15
{
   233d4:	4604      	mov	r4, r0
   233d6:	460d      	mov	r5, r1
   233d8:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   233da:	d803      	bhi.n	233e4 <mbox_dispatcher+0x18>
   233dc:	681b      	ldr	r3, [r3, #0]
   233de:	40c3      	lsrs	r3, r0
   233e0:	07db      	lsls	r3, r3, #31
   233e2:	d409      	bmi.n	233f8 <mbox_dispatcher+0x2c>
		LOG_WRN("RX event on illegal channel");
   233e4:	4b14      	ldr	r3, [pc, #80]	; (23438 <mbox_dispatcher+0x6c>)
   233e6:	2202      	movs	r2, #2
   233e8:	9302      	str	r3, [sp, #8]
   233ea:	2300      	movs	r3, #0
   233ec:	4913      	ldr	r1, [pc, #76]	; (2343c <mbox_dispatcher+0x70>)
   233ee:	4618      	mov	r0, r3
   233f0:	e9cd 3300 	strd	r3, r3, [sp]
   233f4:	f00c feb0 	bl	30158 <z_log_msg_runtime_create.constprop.0>
	if (!(data->enabled_mask & BIT(channel))) {
   233f8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   233fc:	40e3      	lsrs	r3, r4
   233fe:	f013 0301 	ands.w	r3, r3, #1
   23402:	d108      	bne.n	23416 <mbox_dispatcher+0x4a>
		LOG_WRN("RX event on disabled channel");
   23404:	4a0e      	ldr	r2, [pc, #56]	; (23440 <mbox_dispatcher+0x74>)
   23406:	4618      	mov	r0, r3
   23408:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2340c:	490b      	ldr	r1, [pc, #44]	; (2343c <mbox_dispatcher+0x70>)
   2340e:	2202      	movs	r2, #2
   23410:	9300      	str	r3, [sp, #0]
   23412:	f00c fea1 	bl	30158 <z_log_msg_runtime_create.constprop.0>
	if (data->cb[channel] != NULL) {
   23416:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2341a:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   2341e:	b145      	cbz	r5, 23432 <mbox_dispatcher+0x66>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   23420:	2300      	movs	r3, #0
   23422:	4621      	mov	r1, r4
   23424:	4630      	mov	r0, r6
   23426:	46ac      	mov	ip, r5
   23428:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   2342a:	b004      	add	sp, #16
   2342c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   23430:	4760      	bx	ip
}
   23432:	b004      	add	sp, #16
   23434:	bd70      	pop	{r4, r5, r6, pc}
   23436:	bf00      	nop
   23438:	00038788 	.word	0x00038788
   2343c:	000332d4 	.word	0x000332d4
   23440:	000387a4 	.word	0x000387a4

00023444 <mbox_nrf_set_enabled>:
{
   23444:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   23446:	290f      	cmp	r1, #15
{
   23448:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   2344a:	6905      	ldr	r5, [r0, #16]
{
   2344c:	b085      	sub	sp, #20
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2344e:	d841      	bhi.n	234d4 <mbox_nrf_set_enabled+0x90>
   23450:	6843      	ldr	r3, [r0, #4]
   23452:	681b      	ldr	r3, [r3, #0]
   23454:	40cb      	lsrs	r3, r1
   23456:	07db      	lsls	r3, r3, #31
   23458:	d53c      	bpl.n	234d4 <mbox_nrf_set_enabled+0x90>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   2345a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2345e:	40cb      	lsrs	r3, r1
   23460:	f003 0301 	and.w	r3, r3, #1
   23464:	b91a      	cbnz	r2, 2346e <mbox_nrf_set_enabled+0x2a>
   23466:	bb0b      	cbnz	r3, 234ac <mbox_nrf_set_enabled+0x68>
		return -EALREADY;
   23468:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2346c:	e030      	b.n	234d0 <mbox_nrf_set_enabled+0x8c>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   2346e:	2b00      	cmp	r3, #0
   23470:	d1fa      	bne.n	23468 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   23472:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   23476:	b943      	cbnz	r3, 2348a <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   23478:	4a18      	ldr	r2, [pc, #96]	; (234dc <mbox_nrf_set_enabled+0x98>)
   2347a:	4618      	mov	r0, r3
   2347c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   23480:	4917      	ldr	r1, [pc, #92]	; (234e0 <mbox_nrf_set_enabled+0x9c>)
   23482:	2202      	movs	r2, #2
   23484:	9300      	str	r3, [sp, #0]
   23486:	f00c fe67 	bl	30158 <z_log_msg_runtime_create.constprop.0>
	if (enable && data->enabled_mask == 0) {
   2348a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2348e:	b913      	cbnz	r3, 23496 <mbox_nrf_set_enabled+0x52>
		irq_enable(DT_INST_IRQN(0));
   23490:	202a      	movs	r0, #42	; 0x2a
   23492:	f7ed ff8d 	bl	113b0 <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   23496:	2201      	movs	r2, #1
   23498:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2349c:	40a2      	lsls	r2, r4
   2349e:	4313      	orrs	r3, r2
   234a0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   234a4:	b2e0      	uxtb	r0, r4
   234a6:	f000 fe63 	bl	24170 <nrfx_ipc_receive_event_enable>
   234aa:	e00a      	b.n	234c2 <mbox_nrf_set_enabled+0x7e>
		nrfx_ipc_receive_event_disable(channel);
   234ac:	b2c8      	uxtb	r0, r1
   234ae:	f000 fe67 	bl	24180 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   234b2:	2201      	movs	r2, #1
   234b4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   234b8:	40a2      	lsls	r2, r4
   234ba:	ea23 0302 	bic.w	r3, r3, r2
   234be:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   234c2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   234c6:	b913      	cbnz	r3, 234ce <mbox_nrf_set_enabled+0x8a>
		irq_disable(DT_INST_IRQN(0));
   234c8:	202a      	movs	r0, #42	; 0x2a
   234ca:	f7ed ff7f 	bl	113cc <arch_irq_disable>
	return 0;
   234ce:	2000      	movs	r0, #0
}
   234d0:	b005      	add	sp, #20
   234d2:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   234d4:	f06f 0015 	mvn.w	r0, #21
   234d8:	e7fa      	b.n	234d0 <mbox_nrf_set_enabled+0x8c>
   234da:	bf00      	nop
   234dc:	000387c1 	.word	0x000387c1
   234e0:	000332d4 	.word	0x000332d4

000234e4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   234e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   234e6:	ab0b      	add	r3, sp, #44	; 0x2c
   234e8:	9305      	str	r3, [sp, #20]
   234ea:	9303      	str	r3, [sp, #12]
   234ec:	4b05      	ldr	r3, [pc, #20]	; (23504 <z_log_msg_runtime_create.constprop.0+0x20>)
   234ee:	2201      	movs	r2, #1
   234f0:	9302      	str	r3, [sp, #8]
   234f2:	2300      	movs	r3, #0
   234f4:	4618      	mov	r0, r3
   234f6:	e9cd 3300 	strd	r3, r3, [sp]
   234fa:	f7ec f90f 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   234fe:	b007      	add	sp, #28
   23500:	f85d fb04 	ldr.w	pc, [sp], #4
   23504:	0003881e 	.word	0x0003881e

00023508 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   23508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2350a:	2400      	movs	r4, #0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2350c:	f7ec f896 	bl	f63c <z_impl_log_panic>
   23510:	4b06      	ldr	r3, [pc, #24]	; (2352c <k_sys_fatal_error_handler+0x24>)
   23512:	4620      	mov	r0, r4
   23514:	9302      	str	r3, [sp, #8]
   23516:	2201      	movs	r2, #1
   23518:	4623      	mov	r3, r4
   2351a:	e9cd 4400 	strd	r4, r4, [sp]
   2351e:	4904      	ldr	r1, [pc, #16]	; (23530 <k_sys_fatal_error_handler+0x28>)
   23520:	f7ff ffe0 	bl	234e4 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   23524:	4620      	mov	r0, r4
   23526:	f7ee fb75 	bl	11c14 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2352a:	bf00      	nop
   2352c:	0003881e 	.word	0x0003881e
   23530:	00033294 	.word	0x00033294

00023534 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   23534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23538:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   2353a:	4b15      	ldr	r3, [pc, #84]	; (23590 <tfm_ns_interface_dispatch+0x5c>)
   2353c:	4604      	mov	r4, r0
   2353e:	f893 8000 	ldrb.w	r8, [r3]
   23542:	460d      	mov	r5, r1
   23544:	4616      	mov	r6, r2
   23546:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   23548:	f1b8 0f00 	cmp.w	r8, #0
   2354c:	d115      	bne.n	2357a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   2354e:	4668      	mov	r0, sp
   23550:	f008 fad5 	bl	2bafe <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   23554:	463a      	mov	r2, r7
   23556:	4631      	mov	r1, r6
   23558:	4628      	mov	r0, r5
   2355a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2355c:	47a0      	blx	r4
   2355e:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   23560:	4668      	mov	r0, sp
   23562:	f008 facd 	bl	2bb00 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   23566:	f1b8 0f00 	cmp.w	r8, #0
   2356a:	d002      	beq.n	23572 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   2356c:	4809      	ldr	r0, [pc, #36]	; (23594 <tfm_ns_interface_dispatch+0x60>)
   2356e:	f002 fb3f 	bl	25bf0 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   23572:	4620      	mov	r0, r4
   23574:	b022      	add	sp, #136	; 0x88
   23576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   2357a:	f04f 32ff 	mov.w	r2, #4294967295
   2357e:	f04f 33ff 	mov.w	r3, #4294967295
   23582:	4804      	ldr	r0, [pc, #16]	; (23594 <tfm_ns_interface_dispatch+0x60>)
   23584:	f002 faba 	bl	25afc <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   23588:	2800      	cmp	r0, #0
   2358a:	d0e0      	beq.n	2354e <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   2358c:	241f      	movs	r4, #31
   2358e:	e7f0      	b.n	23572 <tfm_ns_interface_dispatch+0x3e>
   23590:	20031fbf 	.word	0x20031fbf
   23594:	20008c7c 	.word	0x20008c7c

00023598 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   23598:	b530      	push	{r4, r5, lr}
   2359a:	b095      	sub	sp, #84	; 0x54
   2359c:	4605      	mov	r5, r0
   2359e:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   235a0:	2230      	movs	r2, #48	; 0x30
   235a2:	2100      	movs	r1, #0
   235a4:	a808      	add	r0, sp, #32
   235a6:	f00e fa76 	bl	31a96 <memset>
   235aa:	233f      	movs	r3, #63	; 0x3f
   235ac:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   235ae:	ab07      	add	r3, sp, #28
   235b0:	9303      	str	r3, [sp, #12]
   235b2:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   235b4:	9406      	str	r4, [sp, #24]
   235b6:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   235ba:	b154      	cbz	r4, 235d2 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   235bc:	2301      	movs	r3, #1
   235be:	aa05      	add	r2, sp, #20
   235c0:	9200      	str	r2, [sp, #0]
   235c2:	2100      	movs	r1, #0
   235c4:	4804      	ldr	r0, [pc, #16]	; (235d8 <psa_generate_random+0x40>)
   235c6:	9301      	str	r3, [sp, #4]
   235c8:	aa03      	add	r2, sp, #12
   235ca:	f000 f807 	bl	235dc <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   235ce:	b015      	add	sp, #84	; 0x54
   235d0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   235d2:	4620      	mov	r0, r4
   235d4:	e7fb      	b.n	235ce <psa_generate_random+0x36>
   235d6:	bf00      	nop
   235d8:	40000100 	.word	0x40000100

000235dc <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   235dc:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   235de:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   235e2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   235e6:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   235e8:	d20d      	bcs.n	23606 <psa_call+0x2a>
        (type < INT16_MIN) ||
   235ea:	ea43 0504 	orr.w	r5, r3, r4
   235ee:	2dff      	cmp	r5, #255	; 0xff
   235f0:	d809      	bhi.n	23606 <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   235f2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   235f6:	4613      	mov	r3, r2
   235f8:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   235fc:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   235fe:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   23600:	4803      	ldr	r0, [pc, #12]	; (23610 <psa_call+0x34>)
   23602:	f7ff bf97 	b.w	23534 <tfm_ns_interface_dispatch>
}
   23606:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2360a:	bc30      	pop	{r4, r5}
   2360c:	4770      	bx	lr
   2360e:	bf00      	nop
   23610:	00007c21 	.word	0x00007c21

00023614 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   23614:	2300      	movs	r3, #0
{
   23616:	b507      	push	{r0, r1, r2, lr}
   23618:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   2361a:	9300      	str	r3, [sp, #0]
   2361c:	4601      	mov	r1, r0
   2361e:	4803      	ldr	r0, [pc, #12]	; (2362c <psa_connect+0x18>)
   23620:	f7ff ff88 	bl	23534 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   23624:	b003      	add	sp, #12
   23626:	f85d fb04 	ldr.w	pc, [sp], #4
   2362a:	bf00      	nop
   2362c:	00007c19 	.word	0x00007c19

00023630 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   23630:	2300      	movs	r3, #0
{
   23632:	b507      	push	{r0, r1, r2, lr}
   23634:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   23636:	461a      	mov	r2, r3
   23638:	9300      	str	r3, [sp, #0]
   2363a:	4803      	ldr	r0, [pc, #12]	; (23648 <psa_close+0x18>)
   2363c:	f7ff ff7a 	bl	23534 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   23640:	b003      	add	sp, #12
   23642:	f85d fb04 	ldr.w	pc, [sp], #4
   23646:	bf00      	nop
   23648:	00007c11 	.word	0x00007c11

0002364c <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   2364c:	4b04      	ldr	r3, [pc, #16]	; (23660 <SystemCoreClockUpdate+0x14>)
   2364e:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   23652:	4b04      	ldr	r3, [pc, #16]	; (23664 <SystemCoreClockUpdate+0x18>)
   23654:	f002 0203 	and.w	r2, r2, #3
   23658:	40d3      	lsrs	r3, r2
   2365a:	4a03      	ldr	r2, [pc, #12]	; (23668 <SystemCoreClockUpdate+0x1c>)
   2365c:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   2365e:	4770      	bx	lr
   23660:	40005000 	.word	0x40005000
   23664:	07a12000 	.word	0x07a12000
   23668:	20008788 	.word	0x20008788

0002366c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2366c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2366e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   23670:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   23672:	fab2 f382 	clz	r3, r2
   23676:	f1c3 031f 	rsb	r3, r3, #31
   2367a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2367c:	fa05 f403 	lsl.w	r4, r5, r3
   23680:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23684:	e8d0 6fef 	ldaex	r6, [r0]
   23688:	4296      	cmp	r6, r2
   2368a:	d104      	bne.n	23696 <nrfx_flag32_alloc+0x2a>
   2368c:	e8c0 4fec 	stlex	ip, r4, [r0]
   23690:	f1bc 0f00 	cmp.w	ip, #0
   23694:	d1f6      	bne.n	23684 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23696:	d1eb      	bne.n	23670 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   23698:	4801      	ldr	r0, [pc, #4]	; (236a0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   2369a:	700b      	strb	r3, [r1, #0]
}
   2369c:	bd70      	pop	{r4, r5, r6, pc}
   2369e:	bf00      	nop
   236a0:	0bad0000 	.word	0x0bad0000

000236a4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   236a4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   236a6:	6803      	ldr	r3, [r0, #0]
   236a8:	40cb      	lsrs	r3, r1
   236aa:	07db      	lsls	r3, r3, #31
   236ac:	d410      	bmi.n	236d0 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   236ae:	2301      	movs	r3, #1
   236b0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   236b2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   236b4:	ea43 0102 	orr.w	r1, r3, r2
   236b8:	e8d0 4fef 	ldaex	r4, [r0]
   236bc:	4294      	cmp	r4, r2
   236be:	d104      	bne.n	236ca <nrfx_flag32_free+0x26>
   236c0:	e8c0 1fec 	stlex	ip, r1, [r0]
   236c4:	f1bc 0f00 	cmp.w	ip, #0
   236c8:	d1f6      	bne.n	236b8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   236ca:	d1f2      	bne.n	236b2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   236cc:	4801      	ldr	r0, [pc, #4]	; (236d4 <nrfx_flag32_free+0x30>)
}
   236ce:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   236d0:	4801      	ldr	r0, [pc, #4]	; (236d8 <nrfx_flag32_free+0x34>)
   236d2:	e7fc      	b.n	236ce <nrfx_flag32_free+0x2a>
   236d4:	0bad0000 	.word	0x0bad0000
   236d8:	0bad0004 	.word	0x0bad0004

000236dc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   236dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
   236de:	2803      	cmp	r0, #3
   236e0:	f200 80a0 	bhi.w	23824 <clock_stop+0x148>
   236e4:	e8df f000 	tbb	[pc, r0]
   236e8:	32251802 	.word	0x32251802
    p_reg->INTENCLR = mask;
   236ec:	2202      	movs	r2, #2
   236ee:	4b59      	ldr	r3, [pc, #356]	; (23854 <clock_stop+0x178>)
   236f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   236f4:	2200      	movs	r2, #0
   236f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   236fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   236fe:	2201      	movs	r2, #1
   23700:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   23702:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   23704:	2301      	movs	r3, #1
   23706:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   2370a:	2803      	cmp	r0, #3
   2370c:	f200 808a 	bhi.w	23824 <clock_stop+0x148>
   23710:	e8df f000 	tbb	[pc, r0]
   23714:	94736529 	.word	0x94736529
    p_reg->INTENCLR = mask;
   23718:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2371a:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   2371c:	4b4d      	ldr	r3, [pc, #308]	; (23854 <clock_stop+0x178>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2371e:	f10d 0407 	add.w	r4, sp, #7
   23722:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23726:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2372a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2372e:	605a      	str	r2, [r3, #4]
   23730:	e7e8      	b.n	23704 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   23732:	f44f 7200 	mov.w	r2, #512	; 0x200
   23736:	4b47      	ldr	r3, [pc, #284]	; (23854 <clock_stop+0x178>)
   23738:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2373c:	2200      	movs	r2, #0
   2373e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23742:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23746:	2201      	movs	r2, #1
   23748:	625a      	str	r2, [r3, #36]	; 0x24
   2374a:	e7da      	b.n	23702 <clock_stop+0x26>
    p_reg->INTENCLR = mask;
   2374c:	f44f 7280 	mov.w	r2, #256	; 0x100
   23750:	4b40      	ldr	r3, [pc, #256]	; (23854 <clock_stop+0x178>)
   23752:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23756:	2200      	movs	r2, #0
   23758:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2375c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23760:	2201      	movs	r2, #1
   23762:	61da      	str	r2, [r3, #28]
   23764:	e7cd      	b.n	23702 <clock_stop+0x26>
    switch (domain)
   23766:	f242 7510 	movw	r5, #10000	; 0x2710
   2376a:	4e3a      	ldr	r6, [pc, #232]	; (23854 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   2376c:	b36c      	cbz	r4, 237ca <clock_stop+0xee>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2376e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   23772:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   23776:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23778:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2377c:	03d9      	lsls	r1, r3, #15
   2377e:	d551      	bpl.n	23824 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23780:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23784:	2801      	cmp	r0, #1
   23786:	d14d      	bne.n	23824 <clock_stop+0x148>
   23788:	f00c fd5c 	bl	30244 <nrfx_busy_wait>
   2378c:	3d01      	subs	r5, #1
   2378e:	d1ed      	bne.n	2376c <clock_stop+0x90>
   23790:	e048      	b.n	23824 <clock_stop+0x148>
   23792:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23796:	2801      	cmp	r0, #1
   23798:	d144      	bne.n	23824 <clock_stop+0x148>
   2379a:	f00c fd53 	bl	30244 <nrfx_busy_wait>
   2379e:	3d01      	subs	r5, #1
   237a0:	d14f      	bne.n	23842 <clock_stop+0x166>
   237a2:	e03f      	b.n	23824 <clock_stop+0x148>
   237a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   237a8:	2801      	cmp	r0, #1
   237aa:	d13b      	bne.n	23824 <clock_stop+0x148>
   237ac:	f00c fd4a 	bl	30244 <nrfx_busy_wait>
   237b0:	3d01      	subs	r5, #1
   237b2:	d037      	beq.n	23824 <clock_stop+0x148>
            if (p_clk_src != NULL)
   237b4:	b1bc      	cbz	r4, 237e6 <clock_stop+0x10a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   237b6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   237ba:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   237be:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   237c0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   237c4:	03db      	lsls	r3, r3, #15
   237c6:	d52d      	bpl.n	23824 <clock_stop+0x148>
   237c8:	e7ec      	b.n	237a4 <clock_stop+0xc8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   237ca:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   237ce:	03da      	lsls	r2, r3, #15
   237d0:	d528      	bpl.n	23824 <clock_stop+0x148>
   237d2:	2001      	movs	r0, #1
   237d4:	f00c fd36 	bl	30244 <nrfx_busy_wait>
   237d8:	3d01      	subs	r5, #1
   237da:	d1f6      	bne.n	237ca <clock_stop+0xee>
   237dc:	e022      	b.n	23824 <clock_stop+0x148>
    switch (domain)
   237de:	f242 7510 	movw	r5, #10000	; 0x2710
   237e2:	4e1c      	ldr	r6, [pc, #112]	; (23854 <clock_stop+0x178>)
   237e4:	e7e6      	b.n	237b4 <clock_stop+0xd8>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   237e6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   237ea:	03d8      	lsls	r0, r3, #15
   237ec:	d51a      	bpl.n	23824 <clock_stop+0x148>
   237ee:	2001      	movs	r0, #1
   237f0:	f00c fd28 	bl	30244 <nrfx_busy_wait>
   237f4:	3d01      	subs	r5, #1
   237f6:	d1f6      	bne.n	237e6 <clock_stop+0x10a>
   237f8:	e014      	b.n	23824 <clock_stop+0x148>
    switch (domain)
   237fa:	f242 7510 	movw	r5, #10000	; 0x2710
   237fe:	4e15      	ldr	r6, [pc, #84]	; (23854 <clock_stop+0x178>)
            if (p_clk_src != NULL)
   23800:	b194      	cbz	r4, 23828 <clock_stop+0x14c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   23802:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23806:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2380a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   2380c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   23810:	03d9      	lsls	r1, r3, #15
   23812:	d507      	bpl.n	23824 <clock_stop+0x148>
   23814:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23818:	2801      	cmp	r0, #1
   2381a:	d103      	bne.n	23824 <clock_stop+0x148>
   2381c:	f00c fd12 	bl	30244 <nrfx_busy_wait>
   23820:	3d01      	subs	r5, #1
   23822:	d1ed      	bne.n	23800 <clock_stop+0x124>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23824:	b002      	add	sp, #8
   23826:	bd70      	pop	{r4, r5, r6, pc}
   23828:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   2382c:	03da      	lsls	r2, r3, #15
   2382e:	d5f9      	bpl.n	23824 <clock_stop+0x148>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   23830:	2001      	movs	r0, #1
   23832:	f00c fd07 	bl	30244 <nrfx_busy_wait>
   23836:	3d01      	subs	r5, #1
   23838:	d1f6      	bne.n	23828 <clock_stop+0x14c>
   2383a:	e7f3      	b.n	23824 <clock_stop+0x148>
    switch (domain)
   2383c:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   23840:	4e04      	ldr	r6, [pc, #16]	; (23854 <clock_stop+0x178>)
   23842:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   23846:	03db      	lsls	r3, r3, #15
   23848:	d5ec      	bpl.n	23824 <clock_stop+0x148>
   2384a:	2c00      	cmp	r4, #0
   2384c:	d1a1      	bne.n	23792 <clock_stop+0xb6>
   2384e:	2001      	movs	r0, #1
   23850:	e7a3      	b.n	2379a <clock_stop+0xbe>
   23852:	bf00      	nop
   23854:	40005000 	.word	0x40005000

00023858 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   23858:	4b04      	ldr	r3, [pc, #16]	; (2386c <nrfx_clock_init+0x14>)
   2385a:	791a      	ldrb	r2, [r3, #4]
   2385c:	b922      	cbnz	r2, 23868 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2385e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   23860:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   23862:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   23864:	4802      	ldr	r0, [pc, #8]	; (23870 <nrfx_clock_init+0x18>)
   23866:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   23868:	4802      	ldr	r0, [pc, #8]	; (23874 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2386a:	4770      	bx	lr
   2386c:	20030d70 	.word	0x20030d70
   23870:	0bad0000 	.word	0x0bad0000
   23874:	0bad000c 	.word	0x0bad000c

00023878 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   23878:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2387a:	2005      	movs	r0, #5
   2387c:	f7ed fdba 	bl	113f4 <arch_irq_is_enabled>
   23880:	b910      	cbnz	r0, 23888 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   23882:	2005      	movs	r0, #5
   23884:	f7ed fd94 	bl	113b0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   23888:	2201      	movs	r2, #1
   2388a:	4b04      	ldr	r3, [pc, #16]	; (2389c <nrfx_clock_enable+0x24>)
   2388c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   23890:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   23894:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   23898:	bd08      	pop	{r3, pc}
   2389a:	bf00      	nop
   2389c:	40005000 	.word	0x40005000

000238a0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   238a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   238a2:	2803      	cmp	r0, #3
   238a4:	d818      	bhi.n	238d8 <nrfx_clock_start+0x38>
   238a6:	e8df f000 	tbb	[pc, r0]
   238aa:	3002      	.short	0x3002
   238ac:	483b      	.short	0x483b
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   238ae:	4a29      	ldr	r2, [pc, #164]	; (23954 <nrfx_clock_start+0xb4>)
   238b0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   238b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   238b8:	03c9      	lsls	r1, r1, #15
   238ba:	d40e      	bmi.n	238da <nrfx_clock_start+0x3a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   238bc:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   238c0:	07db      	lsls	r3, r3, #31
   238c2:	d513      	bpl.n	238ec <nrfx_clock_start+0x4c>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   238c4:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   238c8:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   238cc:	3b01      	subs	r3, #1
   238ce:	2b01      	cmp	r3, #1
   238d0:	d809      	bhi.n	238e6 <nrfx_clock_start+0x46>
    p_reg->INTENSET = mask;
   238d2:	2302      	movs	r3, #2
   238d4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   238d8:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   238da:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   238de:	2b02      	cmp	r3, #2
   238e0:	d005      	beq.n	238ee <nrfx_clock_start+0x4e>
   238e2:	2b01      	cmp	r3, #1
   238e4:	d002      	beq.n	238ec <nrfx_clock_start+0x4c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   238e6:	2000      	movs	r0, #0
   238e8:	f7ff fef8 	bl	236dc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   238ec:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   238ee:	4a19      	ldr	r2, [pc, #100]	; (23954 <nrfx_clock_start+0xb4>)
   238f0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   238f4:	2300      	movs	r3, #0
   238f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   238fa:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   238fe:	2302      	movs	r3, #2
   23900:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23904:	2301      	movs	r3, #1
   23906:	6093      	str	r3, [r2, #8]
}
   23908:	e7e6      	b.n	238d8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2390a:	2200      	movs	r2, #0
   2390c:	4b11      	ldr	r3, [pc, #68]	; (23954 <nrfx_clock_start+0xb4>)
   2390e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23912:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   23916:	2201      	movs	r2, #1
   23918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2391c:	601a      	str	r2, [r3, #0]
}
   2391e:	e7db      	b.n	238d8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23920:	2200      	movs	r2, #0
   23922:	4b0c      	ldr	r3, [pc, #48]	; (23954 <nrfx_clock_start+0xb4>)
   23924:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   23928:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   2392c:	f44f 7200 	mov.w	r2, #512	; 0x200
   23930:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23934:	2201      	movs	r2, #1
   23936:	621a      	str	r2, [r3, #32]
}
   23938:	e7ce      	b.n	238d8 <nrfx_clock_start+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2393a:	2200      	movs	r2, #0
   2393c:	4b05      	ldr	r3, [pc, #20]	; (23954 <nrfx_clock_start+0xb4>)
   2393e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   23942:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   23946:	f44f 7280 	mov.w	r2, #256	; 0x100
   2394a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2394e:	2201      	movs	r2, #1
   23950:	619a      	str	r2, [r3, #24]
}
   23952:	e7c1      	b.n	238d8 <nrfx_clock_start+0x38>
   23954:	40005000 	.word	0x40005000

00023958 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   23958:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2395a:	4b28      	ldr	r3, [pc, #160]	; (239fc <nrfx_power_clock_irq_handler+0xa4>)
   2395c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   23960:	b152      	cbz	r2, 23978 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23962:	2000      	movs	r0, #0
   23964:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   23968:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2396c:	2201      	movs	r2, #1
   2396e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23972:	4b23      	ldr	r3, [pc, #140]	; (23a00 <nrfx_power_clock_irq_handler+0xa8>)
   23974:	681b      	ldr	r3, [r3, #0]
   23976:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23978:	4b20      	ldr	r3, [pc, #128]	; (239fc <nrfx_power_clock_irq_handler+0xa4>)
   2397a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2397e:	b18a      	cbz	r2, 239a4 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23980:	2200      	movs	r2, #0
   23982:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   23986:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2398a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2398e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   23992:	f002 0203 	and.w	r2, r2, #3
   23996:	2a01      	cmp	r2, #1
   23998:	f04f 0102 	mov.w	r1, #2
   2399c:	d126      	bne.n	239ec <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2399e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239a2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   239a4:	4b15      	ldr	r3, [pc, #84]	; (239fc <nrfx_power_clock_irq_handler+0xa4>)
   239a6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   239aa:	b162      	cbz	r2, 239c6 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239ac:	2200      	movs	r2, #0
   239ae:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   239b2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   239b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   239ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   239be:	4b10      	ldr	r3, [pc, #64]	; (23a00 <nrfx_power_clock_irq_handler+0xa8>)
   239c0:	2004      	movs	r0, #4
   239c2:	681b      	ldr	r3, [r3, #0]
   239c4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   239c6:	4b0d      	ldr	r3, [pc, #52]	; (239fc <nrfx_power_clock_irq_handler+0xa4>)
   239c8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   239cc:	b1aa      	cbz	r2, 239fa <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239ce:	2200      	movs	r2, #0
   239d0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   239d4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   239d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   239dc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   239e0:	4b07      	ldr	r3, [pc, #28]	; (23a00 <nrfx_power_clock_irq_handler+0xa8>)
   239e2:	2005      	movs	r0, #5
    }
#endif
}
   239e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   239e8:	681b      	ldr	r3, [r3, #0]
   239ea:	4718      	bx	r3
   239ec:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   239f0:	4b03      	ldr	r3, [pc, #12]	; (23a00 <nrfx_power_clock_irq_handler+0xa8>)
   239f2:	2001      	movs	r0, #1
   239f4:	681b      	ldr	r3, [r3, #0]
   239f6:	4798      	blx	r3
   239f8:	e7d4      	b.n	239a4 <nrfx_power_clock_irq_handler+0x4c>
}
   239fa:	bd10      	pop	{r4, pc}
   239fc:	40005000 	.word	0x40005000
   23a00:	20030d70 	.word	0x20030d70

00023a04 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   23a04:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   23a06:	4801      	ldr	r0, [pc, #4]	; (23a0c <nrfx_dppi_channel_alloc+0x8>)
   23a08:	f7ff be30 	b.w	2366c <nrfx_flag32_alloc>
   23a0c:	2000878c 	.word	0x2000878c

00023a10 <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   23a10:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   23a12:	4a04      	ldr	r2, [pc, #16]	; (23a24 <nrfx_dppi_channel_free+0x14>)
   23a14:	4083      	lsls	r3, r0
{
   23a16:	4601      	mov	r1, r0
   23a18:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   23a1c:	4802      	ldr	r0, [pc, #8]	; (23a28 <nrfx_dppi_channel_free+0x18>)
   23a1e:	f7ff be41 	b.w	236a4 <nrfx_flag32_free>
   23a22:	bf00      	nop
   23a24:	40017000 	.word	0x40017000
   23a28:	2000878c 	.word	0x2000878c

00023a2c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   23a2c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   23a2e:	f003 021f 	and.w	r2, r3, #31
   23a32:	6002      	str	r2, [r0, #0]
}
   23a34:	4a03      	ldr	r2, [pc, #12]	; (23a44 <nrf_gpio_pin_port_decode+0x18>)
   23a36:	4804      	ldr	r0, [pc, #16]	; (23a48 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
   23a38:	095b      	lsrs	r3, r3, #5
}
   23a3a:	2b01      	cmp	r3, #1
   23a3c:	bf18      	it	ne
   23a3e:	4610      	movne	r0, r2
   23a40:	4770      	bx	lr
   23a42:	bf00      	nop
   23a44:	40842500 	.word	0x40842500
   23a48:	40842800 	.word	0x40842800

00023a4c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23a4c:	4b03      	ldr	r3, [pc, #12]	; (23a5c <pin_in_use_by_te+0x10>)
   23a4e:	3008      	adds	r0, #8
   23a50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   23a54:	f3c0 1040 	ubfx	r0, r0, #5, #1
   23a58:	4770      	bx	lr
   23a5a:	bf00      	nop
   23a5c:	20008790 	.word	0x20008790

00023a60 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23a60:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23a62:	4c0d      	ldr	r4, [pc, #52]	; (23a98 <call_handler+0x38>)
   23a64:	f100 0308 	add.w	r3, r0, #8
   23a68:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   23a6c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23a6e:	05da      	lsls	r2, r3, #23
{
   23a70:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23a72:	d507      	bpl.n	23a84 <call_handler+0x24>
   23a74:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   23a78:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   23a7c:	6852      	ldr	r2, [r2, #4]
   23a7e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   23a82:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   23a84:	68a3      	ldr	r3, [r4, #8]
   23a86:	b12b      	cbz	r3, 23a94 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23a88:	4631      	mov	r1, r6
   23a8a:	4628      	mov	r0, r5
   23a8c:	68e2      	ldr	r2, [r4, #12]
    }
}
   23a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23a92:	4718      	bx	r3
}
   23a94:	bd70      	pop	{r4, r5, r6, pc}
   23a96:	bf00      	nop
   23a98:	20008790 	.word	0x20008790

00023a9c <release_handler>:
{
   23a9c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23a9e:	4a12      	ldr	r2, [pc, #72]	; (23ae8 <release_handler+0x4c>)
   23aa0:	3008      	adds	r0, #8
   23aa2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   23aa6:	05d9      	lsls	r1, r3, #23
   23aa8:	d51b      	bpl.n	23ae2 <release_handler+0x46>
   23aaa:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   23aae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23ab2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23ab6:	2000      	movs	r0, #0
   23ab8:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23abc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   23ac0:	f413 7f80 	tst.w	r3, #256	; 0x100
   23ac4:	d003      	beq.n	23ace <release_handler+0x32>
   23ac6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   23aca:	4299      	cmp	r1, r3
   23acc:	d009      	beq.n	23ae2 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23ace:	3001      	adds	r0, #1
   23ad0:	2830      	cmp	r0, #48	; 0x30
   23ad2:	d1f3      	bne.n	23abc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   23ad4:	2300      	movs	r3, #0
   23ad6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23ada:	4804      	ldr	r0, [pc, #16]	; (23aec <release_handler+0x50>)
}
   23adc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23ade:	f7ff bde1 	b.w	236a4 <nrfx_flag32_free>
}
   23ae2:	bc10      	pop	{r4}
   23ae4:	4770      	bx	lr
   23ae6:	bf00      	nop
   23ae8:	20008790 	.word	0x20008790
   23aec:	20008804 	.word	0x20008804

00023af0 <pin_handler_trigger_uninit>:
{
   23af0:	b538      	push	{r3, r4, r5, lr}
   23af2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23af4:	f7ff ffaa 	bl	23a4c <pin_in_use_by_te>
   23af8:	4c0b      	ldr	r4, [pc, #44]	; (23b28 <pin_handler_trigger_uninit+0x38>)
   23afa:	f102 0508 	add.w	r5, r2, #8
   23afe:	b160      	cbz	r0, 23b1a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23b00:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23b02:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23b06:	0b5b      	lsrs	r3, r3, #13
   23b08:	009b      	lsls	r3, r3, #2
   23b0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23b0e:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23b12:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   23b16:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   23b1a:	4610      	mov	r0, r2
   23b1c:	f7ff ffbe 	bl	23a9c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23b20:	2300      	movs	r3, #0
   23b22:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23b26:	bd38      	pop	{r3, r4, r5, pc}
   23b28:	20008790 	.word	0x20008790

00023b2c <nrfx_gpiote_input_configure>:
{
   23b2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   23b30:	4604      	mov	r4, r0
   23b32:	4690      	mov	r8, r2
   23b34:	461d      	mov	r5, r3
    if (p_input_config)
   23b36:	b301      	cbz	r1, 23b7a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23b38:	4e4f      	ldr	r6, [pc, #316]	; (23c78 <nrfx_gpiote_input_configure+0x14c>)
   23b3a:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23b3e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   23b42:	079b      	lsls	r3, r3, #30
   23b44:	d502      	bpl.n	23b4c <nrfx_gpiote_input_configure+0x20>
   23b46:	f7ff ff81 	bl	23a4c <pin_in_use_by_te>
   23b4a:	bb28      	cbnz	r0, 23b98 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23b4c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23b4e:	4620      	mov	r0, r4
   23b50:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23b54:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23b58:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23b5c:	f10d 020f 	add.w	r2, sp, #15
   23b60:	460b      	mov	r3, r1
   23b62:	f10d 010e 	add.w	r1, sp, #14
   23b66:	f00c fb71 	bl	3024c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23b6a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   23b6e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23b72:	f043 0301 	orr.w	r3, r3, #1
   23b76:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
   23b7a:	f1b8 0f00 	cmp.w	r8, #0
   23b7e:	d02d      	beq.n	23bdc <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23b80:	4e3d      	ldr	r6, [pc, #244]	; (23c78 <nrfx_gpiote_input_configure+0x14c>)
   23b82:	f104 0708 	add.w	r7, r4, #8
   23b86:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   23b8a:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
   23b8e:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   23b90:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
   23b94:	d502      	bpl.n	23b9c <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
   23b96:	b1cb      	cbz	r3, 23bcc <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
   23b98:	4838      	ldr	r0, [pc, #224]	; (23c7c <nrfx_gpiote_input_configure+0x150>)
   23b9a:	e021      	b.n	23be0 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   23b9c:	f021 0120 	bic.w	r1, r1, #32
   23ba0:	04c9      	lsls	r1, r1, #19
   23ba2:	0cc9      	lsrs	r1, r1, #19
   23ba4:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
   23ba8:	b183      	cbz	r3, 23bcc <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
   23baa:	2803      	cmp	r0, #3
   23bac:	d8f4      	bhi.n	23b98 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
   23bae:	f8d8 3004 	ldr.w	r3, [r8, #4]
   23bb2:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   23bb6:	4662      	mov	r2, ip
   23bb8:	0092      	lsls	r2, r2, #2
   23bba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23bbe:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   23bc2:	b980      	cbnz	r0, 23be6 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
   23bc4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   23bc8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   23bcc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   23bd0:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23bd4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   23bd8:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
   23bdc:	bb1d      	cbnz	r5, 23c26 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
   23bde:	4828      	ldr	r0, [pc, #160]	; (23c80 <nrfx_gpiote_input_configure+0x154>)
}
   23be0:	b004      	add	sp, #16
   23be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23be6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23bea:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   23bee:	f023 0303 	bic.w	r3, r3, #3
   23bf2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23bf6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   23bfa:	f041 0120 	orr.w	r1, r1, #32
   23bfe:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   23c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   23c06:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23c0a:	0223      	lsls	r3, r4, #8
   23c0c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23c10:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   23c14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   23c18:	ea43 030e 	orr.w	r3, r3, lr
   23c1c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   23c20:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
   23c24:	e7d2      	b.n	23bcc <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
   23c26:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   23c28:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   23c2c:	f7ff ff36 	bl	23a9c <release_handler>
    if (!handler)
   23c30:	2e00      	cmp	r6, #0
   23c32:	d0d4      	beq.n	23bde <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23c34:	4d10      	ldr	r5, [pc, #64]	; (23c78 <nrfx_gpiote_input_configure+0x14c>)
   23c36:	e9d5 2300 	ldrd	r2, r3, [r5]
   23c3a:	4296      	cmp	r6, r2
   23c3c:	d101      	bne.n	23c42 <nrfx_gpiote_input_configure+0x116>
   23c3e:	429f      	cmp	r7, r3
   23c40:	d018      	beq.n	23c74 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23c42:	4810      	ldr	r0, [pc, #64]	; (23c84 <nrfx_gpiote_input_configure+0x158>)
   23c44:	f10d 010f 	add.w	r1, sp, #15
   23c48:	f7ff fd10 	bl	2366c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23c4c:	4b0c      	ldr	r3, [pc, #48]	; (23c80 <nrfx_gpiote_input_configure+0x154>)
   23c4e:	4298      	cmp	r0, r3
   23c50:	d1c6      	bne.n	23be0 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
   23c52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   23c56:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23c5a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   23c5c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23c5e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   23c62:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23c66:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   23c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23c6e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   23c72:	e7b4      	b.n	23bde <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   23c74:	2200      	movs	r2, #0
   23c76:	e7ee      	b.n	23c56 <nrfx_gpiote_input_configure+0x12a>
   23c78:	20008790 	.word	0x20008790
   23c7c:	0bad0004 	.word	0x0bad0004
   23c80:	0bad0000 	.word	0x0bad0000
   23c84:	20008804 	.word	0x20008804

00023c88 <nrfx_gpiote_output_configure>:
{
   23c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c8a:	4604      	mov	r4, r0
   23c8c:	4615      	mov	r5, r2
   23c8e:	b085      	sub	sp, #20
    if (p_config)
   23c90:	b319      	cbz	r1, 23cda <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23c92:	4e34      	ldr	r6, [pc, #208]	; (23d64 <nrfx_gpiote_output_configure+0xdc>)
   23c94:	f100 0708 	add.w	r7, r0, #8
   23c98:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   23c9c:	0793      	lsls	r3, r2, #30
   23c9e:	d403      	bmi.n	23ca8 <nrfx_gpiote_output_configure+0x20>
   23ca0:	f7ff fed4 	bl	23a4c <pin_in_use_by_te>
   23ca4:	2800      	cmp	r0, #0
   23ca6:	d15a      	bne.n	23d5e <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   23ca8:	f012 0f1c 	tst.w	r2, #28
   23cac:	d002      	beq.n	23cb4 <nrfx_gpiote_output_configure+0x2c>
   23cae:	784b      	ldrb	r3, [r1, #1]
   23cb0:	2b01      	cmp	r3, #1
   23cb2:	d054      	beq.n	23d5e <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   23cb4:	2301      	movs	r3, #1
   23cb6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   23cba:	2300      	movs	r3, #0
   23cbc:	1c4a      	adds	r2, r1, #1
   23cbe:	e9cd 1300 	strd	r1, r3, [sp]
   23cc2:	4620      	mov	r0, r4
   23cc4:	1c8b      	adds	r3, r1, #2
   23cc6:	f10d 010f 	add.w	r1, sp, #15
   23cca:	f00c fabf 	bl	3024c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   23cce:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   23cd2:	f043 0303 	orr.w	r3, r3, #3
   23cd6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   23cda:	b915      	cbnz	r5, 23ce2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   23cdc:	4822      	ldr	r0, [pc, #136]	; (23d68 <nrfx_gpiote_output_configure+0xe0>)
}
   23cde:	b005      	add	sp, #20
   23ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23ce2:	4e20      	ldr	r6, [pc, #128]	; (23d64 <nrfx_gpiote_output_configure+0xdc>)
   23ce4:	f104 0708 	add.w	r7, r4, #8
   23ce8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   23cec:	0783      	lsls	r3, r0, #30
   23cee:	d536      	bpl.n	23d5e <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
   23cf0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   23cf4:	2300      	movs	r3, #0
   23cf6:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   23cf8:	f020 0020 	bic.w	r0, r0, #32
   23cfc:	0089      	lsls	r1, r1, #2
   23cfe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   23d02:	04c0      	lsls	r0, r0, #19
   23d04:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   23d08:	0cc0      	lsrs	r0, r0, #19
   23d0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23d0e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   23d12:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23d16:	786a      	ldrb	r2, [r5, #1]
   23d18:	2a00      	cmp	r2, #0
   23d1a:	d0df      	beq.n	23cdc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   23d1c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   23d20:	78ad      	ldrb	r5, [r5, #2]
   23d22:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   23d26:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23d2a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23d2e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   23d32:	0223      	lsls	r3, r4, #8
   23d34:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23d38:	0412      	lsls	r2, r2, #16
   23d3a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23d3e:	ea43 030e 	orr.w	r3, r3, lr
   23d42:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23d44:	052a      	lsls	r2, r5, #20
   23d46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23d4a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23d4e:	4313      	orrs	r3, r2
   23d50:	f040 0020 	orr.w	r0, r0, #32
   23d54:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   23d58:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23d5c:	e7be      	b.n	23cdc <nrfx_gpiote_output_configure+0x54>
{
   23d5e:	4803      	ldr	r0, [pc, #12]	; (23d6c <nrfx_gpiote_output_configure+0xe4>)
   23d60:	e7bd      	b.n	23cde <nrfx_gpiote_output_configure+0x56>
   23d62:	bf00      	nop
   23d64:	20008790 	.word	0x20008790
   23d68:	0bad0000 	.word	0x0bad0000
   23d6c:	0bad0004 	.word	0x0bad0004

00023d70 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   23d70:	4b01      	ldr	r3, [pc, #4]	; (23d78 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   23d72:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   23d76:	4770      	bx	lr
   23d78:	20008790 	.word	0x20008790

00023d7c <nrfx_gpiote_channel_get>:
{
   23d7c:	b508      	push	{r3, lr}
   23d7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23d80:	f7ff fe64 	bl	23a4c <pin_in_use_by_te>
   23d84:	b138      	cbz	r0, 23d96 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23d86:	4b05      	ldr	r3, [pc, #20]	; (23d9c <nrfx_gpiote_channel_get+0x20>)
   23d88:	3208      	adds	r2, #8
   23d8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   23d8e:	4804      	ldr	r0, [pc, #16]	; (23da0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23d90:	0b5b      	lsrs	r3, r3, #13
   23d92:	700b      	strb	r3, [r1, #0]
}
   23d94:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23d96:	4803      	ldr	r0, [pc, #12]	; (23da4 <nrfx_gpiote_channel_get+0x28>)
   23d98:	e7fc      	b.n	23d94 <nrfx_gpiote_channel_get+0x18>
   23d9a:	bf00      	nop
   23d9c:	20008790 	.word	0x20008790
   23da0:	0bad0000 	.word	0x0bad0000
   23da4:	0bad0004 	.word	0x0bad0004

00023da8 <nrfx_gpiote_init>:
{
   23da8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23daa:	4c0f      	ldr	r4, [pc, #60]	; (23de8 <nrfx_gpiote_init+0x40>)
   23dac:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   23db0:	b9bd      	cbnz	r5, 23de2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   23db2:	2260      	movs	r2, #96	; 0x60
   23db4:	4629      	mov	r1, r5
   23db6:	f104 0010 	add.w	r0, r4, #16
   23dba:	f00d fe6c 	bl	31a96 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   23dbe:	202f      	movs	r0, #47	; 0x2f
   23dc0:	f7ed faf6 	bl	113b0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23dc4:	4b09      	ldr	r3, [pc, #36]	; (23dec <nrfx_gpiote_init+0x44>)
    return err_code;
   23dc6:	480a      	ldr	r0, [pc, #40]	; (23df0 <nrfx_gpiote_init+0x48>)
   23dc8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   23dcc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   23dd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23dd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23dd8:	2301      	movs	r3, #1
   23dda:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   23dde:	6763      	str	r3, [r4, #116]	; 0x74
}
   23de0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   23de2:	4804      	ldr	r0, [pc, #16]	; (23df4 <nrfx_gpiote_init+0x4c>)
   23de4:	e7fc      	b.n	23de0 <nrfx_gpiote_init+0x38>
   23de6:	bf00      	nop
   23de8:	20008790 	.word	0x20008790
   23dec:	4002f000 	.word	0x4002f000
   23df0:	0bad0000 	.word	0x0bad0000
   23df4:	0bad0005 	.word	0x0bad0005

00023df8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23df8:	4b03      	ldr	r3, [pc, #12]	; (23e08 <nrfx_gpiote_is_init+0x10>)
   23dfa:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   23dfe:	3800      	subs	r0, #0
   23e00:	bf18      	it	ne
   23e02:	2001      	movne	r0, #1
   23e04:	4770      	bx	lr
   23e06:	bf00      	nop
   23e08:	20008790 	.word	0x20008790

00023e0c <nrfx_gpiote_channel_free>:
{
   23e0c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   23e0e:	4801      	ldr	r0, [pc, #4]	; (23e14 <nrfx_gpiote_channel_free+0x8>)
   23e10:	f7ff bc48 	b.w	236a4 <nrfx_flag32_free>
   23e14:	20008800 	.word	0x20008800

00023e18 <nrfx_gpiote_channel_alloc>:
{
   23e18:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   23e1a:	4801      	ldr	r0, [pc, #4]	; (23e20 <nrfx_gpiote_channel_alloc+0x8>)
   23e1c:	f7ff bc26 	b.w	2366c <nrfx_flag32_alloc>
   23e20:	20008800 	.word	0x20008800

00023e24 <nrfx_gpiote_trigger_enable>:
{
   23e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23e26:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23e28:	f7ff fe10 	bl	23a4c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23e2c:	4b1d      	ldr	r3, [pc, #116]	; (23ea4 <nrfx_gpiote_trigger_enable+0x80>)
   23e2e:	f104 0208 	add.w	r2, r4, #8
   23e32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23e36:	b1d0      	cbz	r0, 23e6e <nrfx_gpiote_trigger_enable+0x4a>
   23e38:	f013 0502 	ands.w	r5, r3, #2
   23e3c:	d117      	bne.n	23e6e <nrfx_gpiote_trigger_enable+0x4a>
    return ((uint32_t)p_reg + event);
   23e3e:	481a      	ldr	r0, [pc, #104]	; (23ea8 <nrfx_gpiote_trigger_enable+0x84>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23e40:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   23e42:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23e44:	5085      	str	r5, [r0, r2]
   23e46:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   23e48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23e4c:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   23e50:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23e54:	f040 0001 	orr.w	r0, r0, #1
   23e58:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   23e5c:	b129      	cbz	r1, 23e6a <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   23e5e:	2201      	movs	r2, #1
   23e60:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   23e64:	4a11      	ldr	r2, [pc, #68]	; (23eac <nrfx_gpiote_trigger_enable+0x88>)
   23e66:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   23e6a:	b003      	add	sp, #12
   23e6c:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23e6e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23e72:	2b04      	cmp	r3, #4
   23e74:	d011      	beq.n	23e9a <nrfx_gpiote_trigger_enable+0x76>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23e76:	2b05      	cmp	r3, #5
   23e78:	d011      	beq.n	23e9e <nrfx_gpiote_trigger_enable+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23e7a:	a801      	add	r0, sp, #4
   23e7c:	9401      	str	r4, [sp, #4]
   23e7e:	f7ff fdd5 	bl	23a2c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23e82:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   23e84:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23e86:	40d9      	lsrs	r1, r3
   23e88:	f001 0101 	and.w	r1, r1, #1
   23e8c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23e8e:	4620      	mov	r0, r4
}
   23e90:	b003      	add	sp, #12
   23e92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23e96:	f00c ba22 	b.w	302de <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23e9a:	2103      	movs	r1, #3
   23e9c:	e7f7      	b.n	23e8e <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   23e9e:	2102      	movs	r1, #2
   23ea0:	e7f5      	b.n	23e8e <nrfx_gpiote_trigger_enable+0x6a>
   23ea2:	bf00      	nop
   23ea4:	20008790 	.word	0x20008790
   23ea8:	4002f100 	.word	0x4002f100
   23eac:	4002f000 	.word	0x4002f000

00023eb0 <nrfx_gpiote_trigger_disable>:
{
   23eb0:	b508      	push	{r3, lr}
   23eb2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23eb4:	f7ff fdca 	bl	23a4c <pin_in_use_by_te>
   23eb8:	b1c0      	cbz	r0, 23eec <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23eba:	4b0f      	ldr	r3, [pc, #60]	; (23ef8 <nrfx_gpiote_trigger_disable+0x48>)
   23ebc:	f102 0108 	add.w	r1, r2, #8
   23ec0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23ec4:	0799      	lsls	r1, r3, #30
   23ec6:	d411      	bmi.n	23eec <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23ec8:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23eca:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23ecc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   23ece:	490b      	ldr	r1, [pc, #44]	; (23efc <nrfx_gpiote_trigger_disable+0x4c>)
   23ed0:	009b      	lsls	r3, r3, #2
   23ed2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23ed6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23eda:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   23ede:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23ee2:	f022 0203 	bic.w	r2, r2, #3
   23ee6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   23eea:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23eec:	2100      	movs	r1, #0
}
   23eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23ef2:	4610      	mov	r0, r2
   23ef4:	f00c b9f3 	b.w	302de <nrf_gpio_cfg_sense_set>
   23ef8:	20008790 	.word	0x20008790
   23efc:	4002f000 	.word	0x4002f000

00023f00 <nrfx_gpiote_pin_uninit>:
{
   23f00:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23f02:	4b10      	ldr	r3, [pc, #64]	; (23f44 <nrfx_gpiote_pin_uninit+0x44>)
   23f04:	f100 0208 	add.w	r2, r0, #8
   23f08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   23f0c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23f0e:	07db      	lsls	r3, r3, #31
   23f10:	d516      	bpl.n	23f40 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   23f12:	f7ff ffcd 	bl	23eb0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   23f16:	4620      	mov	r0, r4
   23f18:	f7ff fdea 	bl	23af0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23f1c:	a801      	add	r0, sp, #4
   23f1e:	9401      	str	r4, [sp, #4]
   23f20:	f7ff fd84 	bl	23a2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   23f24:	9b01      	ldr	r3, [sp, #4]
   23f26:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   23f2a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23f2e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23f32:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   23f36:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   23f3a:	4803      	ldr	r0, [pc, #12]	; (23f48 <nrfx_gpiote_pin_uninit+0x48>)
}
   23f3c:	b002      	add	sp, #8
   23f3e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23f40:	4802      	ldr	r0, [pc, #8]	; (23f4c <nrfx_gpiote_pin_uninit+0x4c>)
   23f42:	e7fb      	b.n	23f3c <nrfx_gpiote_pin_uninit+0x3c>
   23f44:	20008790 	.word	0x20008790
   23f48:	0bad0000 	.word	0x0bad0000
   23f4c:	0bad0004 	.word	0x0bad0004

00023f50 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   23f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   23f54:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   23f56:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23f58:	4634      	mov	r4, r6
{
   23f5a:	4b63      	ldr	r3, [pc, #396]	; (240e8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   23f5c:	4863      	ldr	r0, [pc, #396]	; (240ec <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23f5e:	4964      	ldr	r1, [pc, #400]	; (240f0 <nrfx_gpiote_irq_handler+0x1a0>)
{
   23f60:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23f62:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   23f64:	b135      	cbz	r5, 23f74 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   23f66:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   23f6a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23f6c:	bf1e      	ittt	ne
   23f6e:	601c      	strne	r4, [r3, #0]
   23f70:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   23f72:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23f74:	3304      	adds	r3, #4
   23f76:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   23f78:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23f7c:	d1f1      	bne.n	23f62 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23f7e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 240ec <nrfx_gpiote_irq_handler+0x19c>
   23f82:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   23f86:	2b00      	cmp	r3, #0
   23f88:	f000 8091 	beq.w	240ae <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   23f8c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 240f4 <nrfx_gpiote_irq_handler+0x1a4>
   23f90:	f8d8 3020 	ldr.w	r3, [r8, #32]
   23f94:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23f96:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   23f9a:	4b57      	ldr	r3, [pc, #348]	; (240f8 <nrfx_gpiote_irq_handler+0x1a8>)
   23f9c:	6a1a      	ldr	r2, [r3, #32]
   23f9e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23fa0:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23fa2:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   23fa6:	f10d 0b10 	add.w	fp, sp, #16
   23faa:	ea4f 1349 	mov.w	r3, r9, lsl #5
   23fae:	9300      	str	r3, [sp, #0]
   23fb0:	e048      	b.n	24044 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
   23fb2:	fa94 f4a4 	rbit	r4, r4
   23fb6:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   23fba:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23fbc:	4a4f      	ldr	r2, [pc, #316]	; (240fc <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
   23fbe:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23fc0:	f104 0308 	add.w	r3, r4, #8
   23fc4:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   23fc8:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   23fca:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   23fcc:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   23fd0:	fa03 f202 	lsl.w	r2, r3, r2
   23fd4:	f81b 3000 	ldrb.w	r3, [fp, r0]
   23fd8:	9403      	str	r4, [sp, #12]
   23fda:	ea23 0302 	bic.w	r3, r3, r2
   23fde:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23fe2:	a803      	add	r0, sp, #12
   23fe4:	f7ff fd22 	bl	23a2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23fe8:	9b03      	ldr	r3, [sp, #12]
   23fea:	08b9      	lsrs	r1, r7, #2
   23fec:	3380      	adds	r3, #128	; 0x80
   23fee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   23ff2:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   23ff6:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23ff8:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   23ffa:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   23ffe:	d52b      	bpl.n	24058 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
   24000:	4620      	mov	r0, r4
   24002:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24004:	b2dd      	uxtb	r5, r3
   24006:	f7ff fd2b 	bl	23a60 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2400a:	a803      	add	r0, sp, #12
   2400c:	9403      	str	r4, [sp, #12]
   2400e:	f7ff fd0d 	bl	23a2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24012:	9b03      	ldr	r3, [sp, #12]
   24014:	3380      	adds	r3, #128	; 0x80
   24016:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   2401a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2401e:	429d      	cmp	r5, r3
   24020:	d107      	bne.n	24032 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   24022:	2100      	movs	r1, #0
   24024:	4620      	mov	r0, r4
   24026:	f00c f95a 	bl	302de <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   2402a:	4629      	mov	r1, r5
   2402c:	4620      	mov	r0, r4
   2402e:	f00c f956 	bl	302de <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24032:	a803      	add	r0, sp, #12
   24034:	9403      	str	r4, [sp, #12]
   24036:	f7ff fcf9 	bl	23a2c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   2403a:	2201      	movs	r2, #1
   2403c:	9b03      	ldr	r3, [sp, #12]
   2403e:	fa02 f303 	lsl.w	r3, r2, r3
   24042:	6203      	str	r3, [r0, #32]
            while (latch[i])
   24044:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   24048:	2c00      	cmp	r4, #0
   2404a:	d1b2      	bne.n	23fb2 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2404c:	f1b9 0f00 	cmp.w	r9, #0
   24050:	d11d      	bne.n	2408e <nrfx_gpiote_irq_handler+0x13e>
   24052:	f04f 0901 	mov.w	r9, #1
   24056:	e7a8      	b.n	23faa <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24058:	2b02      	cmp	r3, #2
   2405a:	d10c      	bne.n	24076 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2405c:	2103      	movs	r1, #3
   2405e:	4620      	mov	r0, r4
   24060:	f00c f93d 	bl	302de <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   24064:	f005 0305 	and.w	r3, r5, #5
   24068:	2b01      	cmp	r3, #1
   2406a:	d1e2      	bne.n	24032 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
   2406c:	4639      	mov	r1, r7
   2406e:	4620      	mov	r0, r4
   24070:	f7ff fcf6 	bl	23a60 <call_handler>
   24074:	e7dd      	b.n	24032 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   24076:	2102      	movs	r1, #2
   24078:	4620      	mov	r0, r4
   2407a:	9301      	str	r3, [sp, #4]
   2407c:	f00c f92f 	bl	302de <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   24080:	2d03      	cmp	r5, #3
   24082:	d0f3      	beq.n	2406c <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   24084:	9b01      	ldr	r3, [sp, #4]
   24086:	2b03      	cmp	r3, #3
   24088:	d1d3      	bne.n	24032 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2408a:	2d02      	cmp	r5, #2
   2408c:	e7ed      	b.n	2406a <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2408e:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   24092:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   24096:	f8d8 3020 	ldr.w	r3, [r8, #32]
   2409a:	4917      	ldr	r1, [pc, #92]	; (240f8 <nrfx_gpiote_irq_handler+0x1a8>)
   2409c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2409e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   240a2:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   240a4:	4313      	orrs	r3, r2
   240a6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   240a8:	620a      	str	r2, [r1, #32]
   240aa:	f47f af7a 	bne.w	23fa2 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   240ae:	2401      	movs	r4, #1
    while (mask)
   240b0:	b916      	cbnz	r6, 240b8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   240b2:	b007      	add	sp, #28
   240b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   240b8:	fa96 f3a6 	rbit	r3, r6
   240bc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   240c0:	fa04 f203 	lsl.w	r2, r4, r3
   240c4:	009b      	lsls	r3, r3, #2
   240c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   240ca:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   240ce:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   240d2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   240d6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   240da:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   240de:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   240e2:	f7ff fcbd 	bl	23a60 <call_handler>
   240e6:	e7e3      	b.n	240b0 <nrfx_gpiote_irq_handler+0x160>
   240e8:	4002f100 	.word	0x4002f100
   240ec:	4002f000 	.word	0x4002f000
   240f0:	4002f120 	.word	0x4002f120
   240f4:	40842500 	.word	0x40842500
   240f8:	40842800 	.word	0x40842800
   240fc:	20008790 	.word	0x20008790

00024100 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   24100:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   24102:	4c08      	ldr	r4, [pc, #32]	; (24124 <nrfx_ipc_init+0x24>)
{
   24104:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   24106:	7923      	ldrb	r3, [r4, #4]
{
   24108:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2410a:	b943      	cbnz	r3, 2411e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   2410c:	202a      	movs	r0, #42	; 0x2a
   2410e:	f7ed f94f 	bl	113b0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24112:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   24114:	4804      	ldr	r0, [pc, #16]	; (24128 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   24116:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   24118:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   2411a:	60a5      	str	r5, [r4, #8]
}
   2411c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2411e:	4803      	ldr	r0, [pc, #12]	; (2412c <nrfx_ipc_init+0x2c>)
   24120:	e7fc      	b.n	2411c <nrfx_ipc_init+0x1c>
   24122:	bf00      	nop
   24124:	20030d78 	.word	0x20030d78
   24128:	0bad0000 	.word	0x0bad0000
   2412c:	0bad000c 	.word	0x0bad000c

00024130 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   24130:	2300      	movs	r3, #0
{
   24132:	b530      	push	{r4, r5, lr}
    p_reg->SEND_CNF[index] = channels_mask;
   24134:	4a0d      	ldr	r2, [pc, #52]	; (2416c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   24136:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2413a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2413e:	3301      	adds	r3, #1
   24140:	2b10      	cmp	r3, #16
   24142:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   24146:	d1f6      	bne.n	24136 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   24148:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2414a:	4a08      	ldr	r2, [pc, #32]	; (2416c <nrfx_ipc_config_load+0x3c>)
   2414c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   24150:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   24154:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   24158:	3301      	adds	r3, #1
   2415a:	2b10      	cmp	r3, #16
   2415c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   24160:	d1f6      	bne.n	24150 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   24162:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   24166:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2416a:	bd30      	pop	{r4, r5, pc}
   2416c:	4002a000 	.word	0x4002a000

00024170 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   24170:	2301      	movs	r3, #1
   24172:	4a02      	ldr	r2, [pc, #8]	; (2417c <nrfx_ipc_receive_event_enable+0xc>)
   24174:	4083      	lsls	r3, r0
   24176:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2417a:	4770      	bx	lr
   2417c:	4002a000 	.word	0x4002a000

00024180 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   24180:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
   24182:	4a02      	ldr	r2, [pc, #8]	; (2418c <nrfx_ipc_receive_event_disable+0xc>)
   24184:	4083      	lsls	r3, r0
   24186:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   2418a:	4770      	bx	lr
   2418c:	4002a000 	.word	0x4002a000

00024190 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   24190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   24192:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24194:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   24196:	4b0b      	ldr	r3, [pc, #44]	; (241c4 <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   24198:	4d0b      	ldr	r5, [pc, #44]	; (241c8 <nrfx_ipc_irq_handler+0x38>)
   2419a:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   2419e:	b904      	cbnz	r4, 241a2 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   241a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   241a2:	fa94 f0a4 	rbit	r0, r4
   241a6:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   241aa:	fa06 f300 	lsl.w	r3, r6, r0
   241ae:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   241b2:	4b06      	ldr	r3, [pc, #24]	; (241cc <nrfx_ipc_irq_handler+0x3c>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   241b4:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   241b6:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   241b8:	682b      	ldr	r3, [r5, #0]
   241ba:	2b00      	cmp	r3, #0
   241bc:	d0ef      	beq.n	2419e <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   241be:	68a9      	ldr	r1, [r5, #8]
   241c0:	4798      	blx	r3
   241c2:	e7ec      	b.n	2419e <nrfx_ipc_irq_handler+0xe>
   241c4:	4002a000 	.word	0x4002a000
   241c8:	20030d78 	.word	0x20030d78
   241cc:	4002a100 	.word	0x4002a100

000241d0 <nvmc_word_write>:
   241d0:	4a04      	ldr	r2, [pc, #16]	; (241e4 <nvmc_word_write+0x14>)
   241d2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   241d6:	07db      	lsls	r3, r3, #31
   241d8:	d5fb      	bpl.n	241d2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   241da:	6001      	str	r1, [r0, #0]
   241dc:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   241e0:	4770      	bx	lr
   241e2:	bf00      	nop
   241e4:	40039000 	.word	0x40039000

000241e8 <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
   241e8:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   241ec:	b97b      	cbnz	r3, 2420e <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   241ee:	2202      	movs	r2, #2
   241f0:	4b08      	ldr	r3, [pc, #32]	; (24214 <nrfx_nvmc_page_erase+0x2c>)
   241f2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   241f6:	f04f 32ff 	mov.w	r2, #4294967295
   241fa:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   241fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   24200:	07d2      	lsls	r2, r2, #31
   24202:	d5fb      	bpl.n	241fc <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   24204:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   24206:	4804      	ldr	r0, [pc, #16]	; (24218 <nrfx_nvmc_page_erase+0x30>)
   24208:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   2420c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   2420e:	4803      	ldr	r0, [pc, #12]	; (2421c <nrfx_nvmc_page_erase+0x34>)
}
   24210:	4770      	bx	lr
   24212:	bf00      	nop
   24214:	40039000 	.word	0x40039000
   24218:	0bad0000 	.word	0x0bad0000
   2421c:	0bad000a 	.word	0x0bad000a

00024220 <nrfx_nvmc_word_write>:
   24220:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   24222:	b510      	push	{r4, lr}
   24224:	4c04      	ldr	r4, [pc, #16]	; (24238 <nrfx_nvmc_word_write+0x18>)
   24226:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   2422a:	f7ff ffd1 	bl	241d0 <nvmc_word_write>
   2422e:	2300      	movs	r3, #0
   24230:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   24234:	bd10      	pop	{r4, pc}
   24236:	bf00      	nop
   24238:	40039000 	.word	0x40039000

0002423c <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   2423c:	b570      	push	{r4, r5, r6, lr}
   2423e:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   24242:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
   24246:	d168      	bne.n	2431a <qspi_xfer+0xde>
   24248:	0784      	lsls	r4, r0, #30
   2424a:	d166      	bne.n	2431a <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   2424c:	4d35      	ldr	r5, [pc, #212]	; (24324 <qspi_xfer+0xe8>)
   2424e:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   24252:	2c01      	cmp	r4, #1
   24254:	d001      	beq.n	2425a <qspi_xfer+0x1e>
   24256:	429c      	cmp	r4, r3
   24258:	d161      	bne.n	2431e <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   2425a:	682c      	ldr	r4, [r5, #0]
   2425c:	bb04      	cbnz	r4, 242a0 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2425e:	2b02      	cmp	r3, #2
   24260:	4b31      	ldr	r3, [pc, #196]	; (24328 <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   24262:	bf0b      	itete	eq
   24264:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   24268:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   2426c:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   24270:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   24274:	bf0b      	itete	eq
   24276:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   2427a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   2427e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   24280:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24282:	2100      	movs	r1, #0
   24284:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24288:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   2428c:	2201      	movs	r2, #1
   2428e:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   24292:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24294:	4a24      	ldr	r2, [pc, #144]	; (24328 <qspi_xfer+0xec>)
   24296:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2429a:	2b00      	cmp	r3, #0
   2429c:	d0fb      	beq.n	24296 <qspi_xfer+0x5a>
   2429e:	e00d      	b.n	242bc <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
   242a0:	68ae      	ldr	r6, [r5, #8]
   242a2:	4c21      	ldr	r4, [pc, #132]	; (24328 <qspi_xfer+0xec>)
   242a4:	b166      	cbz	r6, 242c0 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   242a6:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   242a8:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   242aa:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   242ac:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   242ae:	d12d      	bne.n	2430c <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
   242b0:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   242b4:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   242b8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   242bc:	481b      	ldr	r0, [pc, #108]	; (2432c <qspi_xfer+0xf0>)
}
   242be:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   242c0:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   242c2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   242c6:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   242c8:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   242ca:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   242cc:	bf0c      	ite	eq
   242ce:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   242d2:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   242d6:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   242da:	bf0b      	itete	eq
   242dc:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   242e0:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   242e4:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   242e8:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   242ec:	bf08      	it	eq
   242ee:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   242f0:	490d      	ldr	r1, [pc, #52]	; (24328 <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
   242f2:	bf18      	it	ne
   242f4:	2304      	movne	r3, #4
   242f6:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   242fa:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   242fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24300:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   24304:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24308:	601a      	str	r2, [r3, #0]
}
   2430a:	e7d7      	b.n	242bc <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
   2430c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   24310:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   24314:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   24318:	e7d0      	b.n	242bc <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
   2431a:	4805      	ldr	r0, [pc, #20]	; (24330 <qspi_xfer+0xf4>)
   2431c:	e7cf      	b.n	242be <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
   2431e:	4805      	ldr	r0, [pc, #20]	; (24334 <qspi_xfer+0xf8>)
   24320:	e7cd      	b.n	242be <qspi_xfer+0x82>
   24322:	bf00      	nop
   24324:	20030d84 	.word	0x20030d84
   24328:	4002b000 	.word	0x4002b000
   2432c:	0bad0000 	.word	0x0bad0000
   24330:	0bad000a 	.word	0x0bad000a
   24334:	0bad000b 	.word	0x0bad000b

00024338 <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   24338:	b538      	push	{r3, r4, r5, lr}
   2433a:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2433c:	4d06      	ldr	r5, [pc, #24]	; (24358 <qspi_ready_wait+0x20>)
   2433e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   24342:	b933      	cbnz	r3, 24352 <qspi_ready_wait+0x1a>
   24344:	200a      	movs	r0, #10
   24346:	f00b ff7d 	bl	30244 <nrfx_busy_wait>
   2434a:	3c01      	subs	r4, #1
   2434c:	d1f7      	bne.n	2433e <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   2434e:	4803      	ldr	r0, [pc, #12]	; (2435c <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   24350:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   24352:	4803      	ldr	r0, [pc, #12]	; (24360 <qspi_ready_wait+0x28>)
   24354:	e7fc      	b.n	24350 <qspi_ready_wait+0x18>
   24356:	bf00      	nop
   24358:	4002b000 	.word	0x4002b000
   2435c:	0bad0007 	.word	0x0bad0007
   24360:	0bad0000 	.word	0x0bad0000

00024364 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   24364:	4b08      	ldr	r3, [pc, #32]	; (24388 <qspi_event_xfer_handle.constprop.0+0x24>)
   24366:	689a      	ldr	r2, [r3, #8]
   24368:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2436a:	691a      	ldr	r2, [r3, #16]
   2436c:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   2436e:	699a      	ldr	r2, [r3, #24]
   24370:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   24372:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   24374:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   24376:	b132      	cbz	r2, 24386 <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   24378:	695a      	ldr	r2, [r3, #20]
   2437a:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   2437c:	69da      	ldr	r2, [r3, #28]
   2437e:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   24380:	2200      	movs	r2, #0
   24382:	60da      	str	r2, [r3, #12]
   24384:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   24386:	4770      	bx	lr
   24388:	20030d84 	.word	0x20030d84

0002438c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2438c:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
   2438e:	4a0a      	ldr	r2, [pc, #40]	; (243b8 <nrf_gpio_cfg.constprop.0+0x2c>)
   24390:	4c0a      	ldr	r4, [pc, #40]	; (243bc <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
   24392:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   24396:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   24398:	2801      	cmp	r0, #1
   2439a:	bf18      	it	ne
   2439c:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2439e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   243a2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   243a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   243aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   243ae:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   243b2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
   243b6:	bd10      	pop	{r4, pc}
   243b8:	40842800 	.word	0x40842800
   243bc:	40842500 	.word	0x40842500

000243c0 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   243c0:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   243c2:	4b0e      	ldr	r3, [pc, #56]	; (243fc <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   243c4:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   243c6:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   243ca:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   243ce:	2807      	cmp	r0, #7
   243d0:	d813      	bhi.n	243fa <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   243d2:	e8df f000 	tbb	[pc, r0]
   243d6:	0f11      	.short	0x0f11
   243d8:	080a0b0d 	.word	0x080a0b0d
   243dc:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   243de:	0e10      	lsrs	r0, r2, #24
   243e0:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   243e2:	0c10      	lsrs	r0, r2, #16
   243e4:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   243e6:	0a10      	lsrs	r0, r2, #8
   243e8:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   243ea:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   243ec:	0e1a      	lsrs	r2, r3, #24
   243ee:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   243f0:	0c1a      	lsrs	r2, r3, #16
   243f2:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   243f4:	0a1a      	lsrs	r2, r3, #8
   243f6:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   243f8:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   243fa:	bd10      	pop	{r4, pc}
   243fc:	4002b000 	.word	0x4002b000

00024400 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   24400:	3802      	subs	r0, #2
   24402:	2807      	cmp	r0, #7
   24404:	d81f      	bhi.n	24446 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   24406:	e8df f000 	tbb	[pc, r0]
   2440a:	2729      	.short	0x2729
   2440c:	21231125 	.word	0x21231125
   24410:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   24412:	79cb      	ldrb	r3, [r1, #7]
   24414:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   24416:	798a      	ldrb	r2, [r1, #6]
   24418:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   2441c:	794a      	ldrb	r2, [r1, #5]
   2441e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   24422:	790a      	ldrb	r2, [r1, #4]
   24424:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   24426:	4a0e      	ldr	r2, [pc, #56]	; (24460 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   24428:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   2442c:	78cb      	ldrb	r3, [r1, #3]
   2442e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   24430:	788a      	ldrb	r2, [r1, #2]
   24432:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   24436:	784a      	ldrb	r2, [r1, #1]
   24438:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   2443c:	780a      	ldrb	r2, [r1, #0]
   2443e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   24440:	4a07      	ldr	r2, [pc, #28]	; (24460 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   24442:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   24446:	4770      	bx	lr
    switch (length)
   24448:	2300      	movs	r3, #0
   2444a:	e7e4      	b.n	24416 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   2444c:	2300      	movs	r3, #0
   2444e:	e7e5      	b.n	2441c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   24450:	2300      	movs	r3, #0
   24452:	e7e6      	b.n	24422 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   24454:	2300      	movs	r3, #0
   24456:	e7eb      	b.n	24430 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   24458:	2300      	movs	r3, #0
   2445a:	e7ec      	b.n	24436 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   2445c:	2300      	movs	r3, #0
   2445e:	e7ed      	b.n	2443c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   24460:	4002b000 	.word	0x4002b000

00024464 <nrfx_qspi_init>:
{
   24464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24466:	4f67      	ldr	r7, [pc, #412]	; (24604 <nrfx_qspi_init+0x1a0>)
{
   24468:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   2446a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
{
   2446e:	460d      	mov	r5, r1
   24470:	4616      	mov	r6, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   24472:	2b00      	cmp	r3, #0
   24474:	f040 80c2 	bne.w	245fc <nrfx_qspi_init+0x198>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   24478:	7cc2      	ldrb	r2, [r0, #19]
   2447a:	b112      	cbz	r2, 24482 <nrfx_qspi_init+0x1e>
   2447c:	7d03      	ldrb	r3, [r0, #20]
   2447e:	2b00      	cmp	r3, #0
   24480:	d16c      	bne.n	2455c <nrfx_qspi_init+0xf8>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   24482:	7920      	ldrb	r0, [r4, #4]
   24484:	28ff      	cmp	r0, #255	; 0xff
   24486:	f000 80bb 	beq.w	24600 <nrfx_qspi_init+0x19c>
   2448a:	7963      	ldrb	r3, [r4, #5]
   2448c:	2bff      	cmp	r3, #255	; 0xff
   2448e:	f000 80b7 	beq.w	24600 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   24492:	79a3      	ldrb	r3, [r4, #6]
   24494:	2bff      	cmp	r3, #255	; 0xff
   24496:	f000 80b3 	beq.w	24600 <nrfx_qspi_init+0x19c>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   2449a:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2449c:	29ff      	cmp	r1, #255	; 0xff
   2449e:	f000 80af 	beq.w	24600 <nrfx_qspi_init+0x19c>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   244a2:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   244a4:	f8df c160 	ldr.w	ip, [pc, #352]	; 24608 <nrfx_qspi_init+0x1a4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   244a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   244ac:	4563      	cmp	r3, ip
   244ae:	f040 80a7 	bne.w	24600 <nrfx_qspi_init+0x19c>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   244b2:	290e      	cmp	r1, #14
   244b4:	f040 80a4 	bne.w	24600 <nrfx_qspi_init+0x19c>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   244b8:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   244ba:	2bff      	cmp	r3, #255	; 0xff
   244bc:	d002      	beq.n	244c4 <nrfx_qspi_init+0x60>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   244be:	2b0f      	cmp	r3, #15
   244c0:	f040 809e 	bne.w	24600 <nrfx_qspi_init+0x19c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   244c4:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   244c6:	2bff      	cmp	r3, #255	; 0xff
   244c8:	d002      	beq.n	244d0 <nrfx_qspi_init+0x6c>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   244ca:	2b10      	cmp	r3, #16
   244cc:	f040 8098 	bne.w	24600 <nrfx_qspi_init+0x19c>
    if (!p_config->skip_gpio_cfg)
   244d0:	b9b2      	cbnz	r2, 24500 <nrfx_qspi_init+0x9c>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   244d2:	2103      	movs	r1, #3
   244d4:	f7ff ff5a 	bl	2438c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   244d8:	7960      	ldrb	r0, [r4, #5]
   244da:	f7ff ff57 	bl	2438c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   244de:	79a0      	ldrb	r0, [r4, #6]
   244e0:	f7ff ff54 	bl	2438c <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   244e4:	79e0      	ldrb	r0, [r4, #7]
   244e6:	f7ff ff51 	bl	2438c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   244ea:	7a20      	ldrb	r0, [r4, #8]
   244ec:	28ff      	cmp	r0, #255	; 0xff
   244ee:	d001      	beq.n	244f4 <nrfx_qspi_init+0x90>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   244f0:	f7ff ff4c 	bl	2438c <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   244f4:	7a60      	ldrb	r0, [r4, #9]
   244f6:	28ff      	cmp	r0, #255	; 0xff
   244f8:	d002      	beq.n	24500 <nrfx_qspi_init+0x9c>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   244fa:	2103      	movs	r1, #3
   244fc:	f7ff ff46 	bl	2438c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   24500:	7d23      	ldrb	r3, [r4, #20]
   24502:	bb5b      	cbnz	r3, 2455c <nrfx_qspi_init+0xf8>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   24504:	7923      	ldrb	r3, [r4, #4]
   24506:	2bff      	cmp	r3, #255	; 0xff
   24508:	bf14      	ite	ne
   2450a:	461a      	movne	r2, r3
   2450c:	f04f 32ff 	moveq.w	r2, #4294967295
   24510:	4b3e      	ldr	r3, [pc, #248]	; (2460c <nrfx_qspi_init+0x1a8>)
   24512:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   24516:	7962      	ldrb	r2, [r4, #5]
   24518:	2aff      	cmp	r2, #255	; 0xff
   2451a:	bf08      	it	eq
   2451c:	f04f 32ff 	moveq.w	r2, #4294967295
   24520:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   24524:	79a2      	ldrb	r2, [r4, #6]
   24526:	2aff      	cmp	r2, #255	; 0xff
   24528:	bf08      	it	eq
   2452a:	f04f 32ff 	moveq.w	r2, #4294967295
   2452e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   24532:	79e2      	ldrb	r2, [r4, #7]
   24534:	2aff      	cmp	r2, #255	; 0xff
   24536:	bf08      	it	eq
   24538:	f04f 32ff 	moveq.w	r2, #4294967295
   2453c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   24540:	7a22      	ldrb	r2, [r4, #8]
   24542:	2aff      	cmp	r2, #255	; 0xff
   24544:	bf08      	it	eq
   24546:	f04f 32ff 	moveq.w	r2, #4294967295
   2454a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   2454e:	7a62      	ldrb	r2, [r4, #9]
   24550:	2aff      	cmp	r2, #255	; 0xff
   24552:	bf08      	it	eq
   24554:	f04f 32ff 	moveq.w	r2, #4294967295
   24558:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   2455c:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   2455e:	4a2b      	ldr	r2, [pc, #172]	; (2460c <nrfx_qspi_init+0x1a8>)
   24560:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   24564:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   24566:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   24568:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   2456a:	019b      	lsls	r3, r3, #6
   2456c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   24570:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   24572:	7b61      	ldrb	r1, [r4, #13]
   24574:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   24578:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   2457c:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   2457e:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   24582:	bbb1      	cbnz	r1, 245f2 <nrfx_qspi_init+0x18e>
        regval |= ((1 << 16) | (1 << 17));
   24584:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   24588:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   2458c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   24590:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   24594:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   24598:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   2459a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   2459e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   245a2:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   245a4:	7be1      	ldrb	r1, [r4, #15]
   245a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   245aa:	7c21      	ldrb	r1, [r4, #16]
   245ac:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   245b0:	7c61      	ldrb	r1, [r4, #17]
   245b2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   245b6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   245ba:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   245bc:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   245c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   245c4:	2301      	movs	r3, #1
   245c6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   245ca:	b115      	cbz	r5, 245d2 <nrfx_qspi_init+0x16e>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   245cc:	202b      	movs	r0, #43	; 0x2b
   245ce:	f7ec feef 	bl	113b0 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   245d2:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   245d4:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   245d6:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   245da:	4b0c      	ldr	r3, [pc, #48]	; (2460c <nrfx_qspi_init+0x1a8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   245dc:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   245e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245e4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245e8:	601a      	str	r2, [r3, #0]
}
   245ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   245ee:	f7ff bea3 	b.w	24338 <qspi_ready_wait>
        regval &= ~(1 << 17);
   245f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   245f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   245fa:	e7c5      	b.n	24588 <nrfx_qspi_init+0x124>
        return NRFX_ERROR_INVALID_STATE;
   245fc:	4804      	ldr	r0, [pc, #16]	; (24610 <nrfx_qspi_init+0x1ac>)
}
   245fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   24600:	4804      	ldr	r0, [pc, #16]	; (24614 <nrfx_qspi_init+0x1b0>)
   24602:	e7fc      	b.n	245fe <nrfx_qspi_init+0x19a>
   24604:	20030d84 	.word	0x20030d84
   24608:	000d1211 	.word	0x000d1211
   2460c:	4002b000 	.word	0x4002b000
   24610:	0bad0005 	.word	0x0bad0005
   24614:	0bad0004 	.word	0x0bad0004

00024618 <nrfx_qspi_cinstr_xfer>:
{
   24618:	b570      	push	{r4, r5, r6, lr}
   2461a:	4614      	mov	r4, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   2461c:	4a19      	ldr	r2, [pc, #100]	; (24684 <nrfx_qspi_cinstr_xfer+0x6c>)
{
   2461e:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   24620:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   24624:	2a01      	cmp	r2, #1
   24626:	d12b      	bne.n	24680 <nrfx_qspi_cinstr_xfer+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24628:	2200      	movs	r2, #0
   2462a:	4e17      	ldr	r6, [pc, #92]	; (24688 <nrfx_qspi_cinstr_xfer+0x70>)
   2462c:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   24630:	b111      	cbz	r1, 24638 <nrfx_qspi_cinstr_xfer+0x20>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   24632:	7840      	ldrb	r0, [r0, #1]
   24634:	f7ff fee4 	bl	24400 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   24638:	2301      	movs	r3, #1
   2463a:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2463e:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24640:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   24642:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   24644:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   24648:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2464a:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   2464c:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2464e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   24652:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   24654:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   24658:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2465a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2465e:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   24662:	f7ff fe69 	bl	24338 <qspi_ready_wait>
   24666:	4b09      	ldr	r3, [pc, #36]	; (2468c <nrfx_qspi_cinstr_xfer+0x74>)
   24668:	4298      	cmp	r0, r3
   2466a:	d008      	beq.n	2467e <nrfx_qspi_cinstr_xfer+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2466c:	2300      	movs	r3, #0
   2466e:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   24672:	b11c      	cbz	r4, 2467c <nrfx_qspi_cinstr_xfer+0x64>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   24674:	4621      	mov	r1, r4
   24676:	7868      	ldrb	r0, [r5, #1]
   24678:	f7ff fea2 	bl	243c0 <nrf_qspi_cinstrdata_get.constprop.0>
        return NRFX_ERROR_BUSY;
   2467c:	4804      	ldr	r0, [pc, #16]	; (24690 <nrfx_qspi_cinstr_xfer+0x78>)
}
   2467e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   24680:	4804      	ldr	r0, [pc, #16]	; (24694 <nrfx_qspi_cinstr_xfer+0x7c>)
   24682:	e7fc      	b.n	2467e <nrfx_qspi_cinstr_xfer+0x66>
   24684:	20030d84 	.word	0x20030d84
   24688:	4002b000 	.word	0x4002b000
   2468c:	0bad0007 	.word	0x0bad0007
   24690:	0bad0000 	.word	0x0bad0000
   24694:	0bad000b 	.word	0x0bad000b

00024698 <nrfx_qspi_mem_busy_check>:
{
   24698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   2469a:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   2469c:	4a0c      	ldr	r2, [pc, #48]	; (246d0 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2469e:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   246a0:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   246a2:	f10d 0207 	add.w	r2, sp, #7
   246a6:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   246a8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   246ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   246b0:	f7ff ffb2 	bl	24618 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   246b4:	4b07      	ldr	r3, [pc, #28]	; (246d4 <nrfx_qspi_mem_busy_check+0x3c>)
   246b6:	4298      	cmp	r0, r3
   246b8:	d106      	bne.n	246c8 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   246ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   246be:	f013 0f01 	tst.w	r3, #1
   246c2:	4b05      	ldr	r3, [pc, #20]	; (246d8 <nrfx_qspi_mem_busy_check+0x40>)
   246c4:	bf18      	it	ne
   246c6:	4618      	movne	r0, r3
}
   246c8:	b005      	add	sp, #20
   246ca:	f85d fb04 	ldr.w	pc, [sp], #4
   246ce:	bf00      	nop
   246d0:	01000205 	.word	0x01000205
   246d4:	0bad0000 	.word	0x0bad0000
   246d8:	0bad000b 	.word	0x0bad000b

000246dc <nrfx_qspi_uninit>:
{
   246dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   246e0:	202b      	movs	r0, #43	; 0x2b
   246e2:	f7ec fe73 	bl	113cc <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   246e6:	4b21      	ldr	r3, [pc, #132]	; (2476c <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
   246e8:	4e21      	ldr	r6, [pc, #132]	; (24770 <nrfx_qspi_uninit+0x94>)
   246ea:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   246ee:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   246f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   246f6:	bf04      	itt	eq
   246f8:	4a1e      	ldreq	r2, [pc, #120]	; (24774 <nrfx_qspi_uninit+0x98>)
   246fa:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   246fe:	2201      	movs	r2, #1
   24700:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24704:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   24706:	2200      	movs	r2, #0
   24708:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2470c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   24710:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   24714:	bb22      	cbnz	r2, 24760 <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   24716:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   2471a:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   2471e:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   24720:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   24724:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   24728:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   2472c:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   24730:	f00b fded 	bl	3030e <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   24734:	fa5f f089 	uxtb.w	r0, r9
   24738:	f00b fde9 	bl	3030e <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   2473c:	fa5f f088 	uxtb.w	r0, r8
   24740:	f00b fde5 	bl	3030e <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   24744:	b2f8      	uxtb	r0, r7
   24746:	f00b fde2 	bl	3030e <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2474a:	b2e8      	uxtb	r0, r5
   2474c:	28ff      	cmp	r0, #255	; 0xff
   2474e:	b2e4      	uxtb	r4, r4
   24750:	d001      	beq.n	24756 <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
   24752:	f00b fddc 	bl	3030e <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   24756:	2cff      	cmp	r4, #255	; 0xff
   24758:	d002      	beq.n	24760 <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
   2475a:	4620      	mov	r0, r4
   2475c:	f00b fdd7 	bl	3030e <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   24760:	2300      	movs	r3, #0
   24762:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   24766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2476a:	bf00      	nop
   2476c:	4002b000 	.word	0x4002b000
   24770:	20030d84 	.word	0x20030d84
   24774:	00030100 	.word	0x00030100

00024778 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
   24778:	078b      	lsls	r3, r1, #30
   2477a:	d121      	bne.n	247c0 <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   2477c:	4a12      	ldr	r2, [pc, #72]	; (247c8 <nrfx_qspi_erase+0x50>)
   2477e:	6813      	ldr	r3, [r2, #0]
   24780:	b11b      	cbz	r3, 2478a <nrfx_qspi_erase+0x12>
   24782:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   24786:	2b01      	cmp	r3, #1
   24788:	d11c      	bne.n	247c4 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   2478a:	2304      	movs	r3, #4
   2478c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   24790:	4b0e      	ldr	r3, [pc, #56]	; (247cc <nrfx_qspi_erase+0x54>)
   24792:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24796:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   24798:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2479c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   247a0:	2101      	movs	r1, #1
   247a2:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   247a4:	6810      	ldr	r0, [r2, #0]
   247a6:	b940      	cbnz	r0, 247ba <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   247a8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   247ac:	2900      	cmp	r1, #0
   247ae:	d0fb      	beq.n	247a8 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   247b0:	2301      	movs	r3, #1
   247b2:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   247b6:	4806      	ldr	r0, [pc, #24]	; (247d0 <nrfx_qspi_erase+0x58>)
   247b8:	4770      	bx	lr
    p_reg->INTENSET = mask;
   247ba:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   247be:	e7fa      	b.n	247b6 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
   247c0:	4804      	ldr	r0, [pc, #16]	; (247d4 <nrfx_qspi_erase+0x5c>)
   247c2:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   247c4:	4804      	ldr	r0, [pc, #16]	; (247d8 <nrfx_qspi_erase+0x60>)
}
   247c6:	4770      	bx	lr
   247c8:	20030d84 	.word	0x20030d84
   247cc:	4002b000 	.word	0x4002b000
   247d0:	0bad0000 	.word	0x0bad0000
   247d4:	0bad000a 	.word	0x0bad000a
   247d8:	0bad000b 	.word	0x0bad000b

000247dc <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   247dc:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   247de:	4b17      	ldr	r3, [pc, #92]	; (2483c <nrfx_qspi_irq_handler+0x60>)
   247e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   247e4:	b1e2      	cbz	r2, 24820 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   247e6:	2200      	movs	r2, #0
    switch (m_cb.state)
   247e8:	4c15      	ldr	r4, [pc, #84]	; (24840 <nrfx_qspi_irq_handler+0x64>)
   247ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   247ee:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   247f2:	2a03      	cmp	r2, #3
   247f4:	d015      	beq.n	24822 <nrfx_qspi_irq_handler+0x46>
   247f6:	2a04      	cmp	r2, #4
   247f8:	d015      	beq.n	24826 <nrfx_qspi_irq_handler+0x4a>
   247fa:	2a02      	cmp	r2, #2
   247fc:	d104      	bne.n	24808 <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   247fe:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   24800:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   24804:	f7ff fdae 	bl	24364 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   24808:	68a3      	ldr	r3, [r4, #8]
   2480a:	b913      	cbnz	r3, 24812 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   2480c:	2301      	movs	r3, #1
   2480e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   24812:	e9d4 3100 	ldrd	r3, r1, [r4]
   24816:	2000      	movs	r0, #0
   24818:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2481a:	2300      	movs	r3, #0
   2481c:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   24820:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   24822:	2302      	movs	r3, #2
   24824:	e7ec      	b.n	24800 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   24826:	2203      	movs	r2, #3
   24828:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   2482c:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   24830:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   24832:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   24836:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2483a:	e7e5      	b.n	24808 <nrfx_qspi_irq_handler+0x2c>
   2483c:	4002b000 	.word	0x4002b000
   24840:	20030d84 	.word	0x20030d84

00024844 <nrf_gpio_pin_clear>:
        case 0: return NRF_P0;
   24844:	4a05      	ldr	r2, [pc, #20]	; (2485c <nrf_gpio_pin_clear+0x18>)
   24846:	4b06      	ldr	r3, [pc, #24]	; (24860 <nrf_gpio_pin_clear+0x1c>)
    *p_pin = pin_number & 0x1F;
   24848:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   2484c:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   2484e:	2801      	cmp	r0, #1
   24850:	bf18      	it	ne
   24852:	4613      	movne	r3, r2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   24854:	2201      	movs	r2, #1
   24856:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   24858:	60da      	str	r2, [r3, #12]
}
   2485a:	4770      	bx	lr
   2485c:	40842500 	.word	0x40842500
   24860:	40842800 	.word	0x40842800

00024864 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   24864:	b570      	push	{r4, r5, r6, lr}
        case 0: return NRF_P0;
   24866:	4c0d      	ldr	r4, [pc, #52]	; (2489c <nrf_gpio_cfg.constprop.0+0x38>)
   24868:	4e0d      	ldr	r6, [pc, #52]	; (248a0 <nrf_gpio_cfg.constprop.0+0x3c>)
    *p_pin = pin_number & 0x1F;
   2486a:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   2486e:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   24870:	2801      	cmp	r0, #1
   24872:	bf18      	it	ne
   24874:	4634      	movne	r4, r6
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   24876:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2487a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   2487e:	0200      	lsls	r0, r0, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   24880:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24884:	ea40 0083 	orr.w	r0, r0, r3, lsl #2
   24888:	4308      	orrs	r0, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2488a:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2488e:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   24892:	4328      	orrs	r0, r5
    reg->PIN_CNF[pin_number] = cnf;
   24894:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
   24898:	bd70      	pop	{r4, r5, r6, pc}
   2489a:	bf00      	nop
   2489c:	40842800 	.word	0x40842800
   248a0:	40842500 	.word	0x40842500

000248a4 <nrf_gpio_pin_set>:
        case 0: return NRF_P0;
   248a4:	4a05      	ldr	r2, [pc, #20]	; (248bc <nrf_gpio_pin_set+0x18>)
   248a6:	4b06      	ldr	r3, [pc, #24]	; (248c0 <nrf_gpio_pin_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   248a8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   248ac:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
   248ae:	2801      	cmp	r0, #1
   248b0:	bf18      	it	ne
   248b2:	4613      	movne	r3, r2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   248b4:	2201      	movs	r2, #1
   248b6:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   248b8:	609a      	str	r2, [r3, #8]
}
   248ba:	4770      	bx	lr
   248bc:	40842500 	.word	0x40842500
   248c0:	40842800 	.word	0x40842800

000248c4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   248c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   248c8:	4d87      	ldr	r5, [pc, #540]	; (24ae8 <nrfx_spim_init+0x224>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   248ca:	7907      	ldrb	r7, [r0, #4]
{
   248cc:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   248ce:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   248d2:	7f09      	ldrb	r1, [r1, #28]
{
   248d4:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   248d6:	2900      	cmp	r1, #0
   248d8:	f040 8100 	bne.w	24adc <nrfx_spim_init+0x218>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   248dc:	2f00      	cmp	r7, #0
   248de:	f040 80ff 	bne.w	24ae0 <nrfx_spim_init+0x21c>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   248e2:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   248e6:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   248e8:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   248ea:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   248ee:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   248f0:	d027      	beq.n	24942 <nrfx_spim_init+0x7e>
   248f2:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   248f6:	d124      	bne.n	24942 <nrfx_spim_init+0x7e>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   248f8:	b119      	cbz	r1, 24902 <nrfx_spim_init+0x3e>
   248fa:	7d20      	ldrb	r0, [r4, #20]
   248fc:	2800      	cmp	r0, #0
   248fe:	f040 80d5 	bne.w	24aac <nrfx_spim_init+0x1e8>
   24902:	487a      	ldr	r0, [pc, #488]	; (24aec <nrfx_spim_init+0x228>)
   24904:	4581      	cmp	r9, r0
   24906:	d11c      	bne.n	24942 <nrfx_spim_init+0x7e>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   24908:	7820      	ldrb	r0, [r4, #0]
   2490a:	28ff      	cmp	r0, #255	; 0xff
   2490c:	d002      	beq.n	24914 <nrfx_spim_init+0x50>
   2490e:	2808      	cmp	r0, #8
   24910:	f040 80e8 	bne.w	24ae4 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   24914:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   24916:	28ff      	cmp	r0, #255	; 0xff
   24918:	d002      	beq.n	24920 <nrfx_spim_init+0x5c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   2491a:	280b      	cmp	r0, #11
   2491c:	f040 80e2 	bne.w	24ae4 <nrfx_spim_init+0x220>
   24920:	2eff      	cmp	r6, #255	; 0xff
   24922:	d002      	beq.n	2492a <nrfx_spim_init+0x66>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   24924:	2e0c      	cmp	r6, #12
   24926:	f040 80dd 	bne.w	24ae4 <nrfx_spim_init+0x220>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2492a:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   2492c:	28ff      	cmp	r0, #255	; 0xff
   2492e:	d002      	beq.n	24936 <nrfx_spim_init+0x72>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   24930:	2809      	cmp	r0, #9
   24932:	f040 80d7 	bne.w	24ae4 <nrfx_spim_init+0x220>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   24936:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   24938:	28ff      	cmp	r0, #255	; 0xff
   2493a:	d002      	beq.n	24942 <nrfx_spim_init+0x7e>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   2493c:	280a      	cmp	r0, #10
   2493e:	f040 80d1 	bne.w	24ae4 <nrfx_spim_init+0x220>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   24942:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   24946:	7fab      	ldrb	r3, [r5, #30]
   24948:	f361 0300 	bfi	r3, r1, #0, #1
   2494c:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   2494e:	7922      	ldrb	r2, [r4, #4]
   24950:	b2db      	uxtb	r3, r3
   24952:	f362 0341 	bfi	r3, r2, #1, #1
   24956:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   24958:	7c62      	ldrb	r2, [r4, #17]
   2495a:	b2db      	uxtb	r3, r3
   2495c:	f362 0382 	bfi	r3, r2, #2, #1
   24960:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   24962:	78e3      	ldrb	r3, [r4, #3]
   24964:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   24966:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   24968:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   2496c:	2b00      	cmp	r3, #0
   2496e:	d142      	bne.n	249f6 <nrfx_spim_init+0x132>
                    : NRF_GPIO_PIN_S0S1;
   24970:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   24972:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   24974:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   24978:	7b23      	ldrb	r3, [r4, #12]
   2497a:	bf08      	it	eq
   2497c:	2703      	moveq	r7, #3
   2497e:	2b01      	cmp	r3, #1
   24980:	f200 8096 	bhi.w	24ab0 <nrfx_spim_init+0x1ec>
        nrf_gpio_pin_clear(pin_number);
   24984:	f7ff ff5e 	bl	24844 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   24988:	2300      	movs	r3, #0
   2498a:	9700      	str	r7, [sp, #0]
   2498c:	7820      	ldrb	r0, [r4, #0]
   2498e:	461a      	mov	r2, r3
   24990:	2101      	movs	r1, #1
   24992:	f7ff ff67 	bl	24864 <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   24996:	7860      	ldrb	r0, [r4, #1]
   24998:	28ff      	cmp	r0, #255	; 0xff
   2499a:	d008      	beq.n	249ae <nrfx_spim_init+0xea>
   2499c:	f7ff ff52 	bl	24844 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   249a0:	2201      	movs	r2, #1
   249a2:	9700      	str	r7, [sp, #0]
   249a4:	2300      	movs	r3, #0
   249a6:	4611      	mov	r1, r2
   249a8:	7860      	ldrb	r0, [r4, #1]
   249aa:	f7ff ff5b 	bl	24864 <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   249ae:	78a0      	ldrb	r0, [r4, #2]
   249b0:	28ff      	cmp	r0, #255	; 0xff
   249b2:	d005      	beq.n	249c0 <nrfx_spim_init+0xfc>
            nrf_gpio_cfg(p_config->miso_pin,
   249b4:	2200      	movs	r2, #0
   249b6:	9700      	str	r7, [sp, #0]
   249b8:	4611      	mov	r1, r2
   249ba:	7ba3      	ldrb	r3, [r4, #14]
   249bc:	f7ff ff52 	bl	24864 <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   249c0:	78e0      	ldrb	r0, [r4, #3]
   249c2:	28ff      	cmp	r0, #255	; 0xff
   249c4:	d00b      	beq.n	249de <nrfx_spim_init+0x11a>
    if (value == 0)
   249c6:	7923      	ldrb	r3, [r4, #4]
   249c8:	2b00      	cmp	r3, #0
   249ca:	d074      	beq.n	24ab6 <nrfx_spim_init+0x1f2>
        nrf_gpio_pin_clear(pin_number);
   249cc:	f7ff ff3a 	bl	24844 <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   249d0:	2201      	movs	r2, #1
   249d2:	9700      	str	r7, [sp, #0]
   249d4:	2300      	movs	r3, #0
   249d6:	4611      	mov	r1, r2
   249d8:	78e0      	ldrb	r0, [r4, #3]
   249da:	f7ff ff43 	bl	24864 <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   249de:	7be0      	ldrb	r0, [r4, #15]
   249e0:	28ff      	cmp	r0, #255	; 0xff
   249e2:	d008      	beq.n	249f6 <nrfx_spim_init+0x132>
        nrf_gpio_pin_set(pin_number);
   249e4:	f7ff ff5e 	bl	248a4 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   249e8:	2201      	movs	r2, #1
   249ea:	9700      	str	r7, [sp, #0]
   249ec:	2300      	movs	r3, #0
   249ee:	4611      	mov	r1, r2
   249f0:	7be0      	ldrb	r0, [r4, #15]
   249f2:	f7ff ff37 	bl	24864 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   249f6:	7d23      	ldrb	r3, [r4, #20]
   249f8:	bb6b      	cbnz	r3, 24a56 <nrfx_spim_init+0x192>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   249fa:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   249fc:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   249fe:	2bff      	cmp	r3, #255	; 0xff
   24a00:	bf18      	it	ne
   24a02:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   24a04:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   24a06:	bf08      	it	eq
   24a08:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   24a0c:	2bff      	cmp	r3, #255	; 0xff
   24a0e:	bf08      	it	eq
   24a10:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   24a14:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   24a18:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   24a1c:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   24a20:	f898 3004 	ldrb.w	r3, [r8, #4]
   24a24:	b9bb      	cbnz	r3, 24a56 <nrfx_spim_init+0x192>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   24a26:	78e3      	ldrb	r3, [r4, #3]
   24a28:	2bff      	cmp	r3, #255	; 0xff
   24a2a:	d047      	beq.n	24abc <nrfx_spim_init+0x1f8>
   24a2c:	7c62      	ldrb	r2, [r4, #17]
   24a2e:	2a00      	cmp	r2, #0
   24a30:	d044      	beq.n	24abc <nrfx_spim_init+0x1f8>
                                    (p_config->ss_active_high == true
   24a32:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   24a34:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   24a36:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   24a3a:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   24a3e:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   24a42:	f898 3004 	ldrb.w	r3, [r8, #4]
   24a46:	b933      	cbnz	r3, 24a56 <nrfx_spim_init+0x192>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   24a48:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   24a4a:	2bff      	cmp	r3, #255	; 0xff
   24a4c:	bf08      	it	eq
   24a4e:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   24a52:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   24a56:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   24a58:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   24a5c:	68a3      	ldr	r3, [r4, #8]
   24a5e:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   24a62:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   24a64:	7b22      	ldrb	r2, [r4, #12]
   24a66:	3b00      	subs	r3, #0
   24a68:	bf18      	it	ne
   24a6a:	2301      	movne	r3, #1
    switch (spi_mode)
   24a6c:	2a02      	cmp	r2, #2
   24a6e:	d02f      	beq.n	24ad0 <nrfx_spim_init+0x20c>
   24a70:	2a03      	cmp	r2, #3
   24a72:	d030      	beq.n	24ad6 <nrfx_spim_init+0x212>
   24a74:	2a01      	cmp	r2, #1
   24a76:	d101      	bne.n	24a7c <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   24a78:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   24a7c:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   24a80:	79a3      	ldrb	r3, [r4, #6]
   24a82:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   24a86:	2307      	movs	r3, #7
   24a88:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   24a8c:	682b      	ldr	r3, [r5, #0]
   24a8e:	b12b      	cbz	r3, 24a9c <nrfx_spim_init+0x1d8>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   24a90:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   24a94:	f340 3007 	sbfx	r0, r0, #12, #8
   24a98:	f7ec fc8a 	bl	113b0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   24a9c:	2300      	movs	r3, #0
   24a9e:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   24aa0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   24aa2:	4813      	ldr	r0, [pc, #76]	; (24af0 <nrfx_spim_init+0x22c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   24aa4:	772b      	strb	r3, [r5, #28]
}
   24aa6:	b003      	add	sp, #12
   24aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   24aac:	4601      	mov	r1, r0
   24aae:	e748      	b.n	24942 <nrfx_spim_init+0x7e>
   24ab0:	f7ff fef8 	bl	248a4 <nrf_gpio_pin_set>
   24ab4:	e768      	b.n	24988 <nrfx_spim_init+0xc4>
   24ab6:	f7ff fef5 	bl	248a4 <nrf_gpio_pin_set>
   24aba:	e789      	b.n	249d0 <nrfx_spim_init+0x10c>
    p_reg->PSEL.CSN = pin;
   24abc:	f04f 33ff 	mov.w	r3, #4294967295
   24ac0:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   24ac4:	2300      	movs	r3, #0
   24ac6:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   24aca:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   24ace:	e7b8      	b.n	24a42 <nrfx_spim_init+0x17e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   24ad0:	f043 0304 	orr.w	r3, r3, #4
        break;
   24ad4:	e7d2      	b.n	24a7c <nrfx_spim_init+0x1b8>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   24ad6:	f043 0306 	orr.w	r3, r3, #6
        break;
   24ada:	e7cf      	b.n	24a7c <nrfx_spim_init+0x1b8>
        return err_code;
   24adc:	4805      	ldr	r0, [pc, #20]	; (24af4 <nrfx_spim_init+0x230>)
   24ade:	e7e2      	b.n	24aa6 <nrfx_spim_init+0x1e2>
        return err_code;
   24ae0:	4805      	ldr	r0, [pc, #20]	; (24af8 <nrfx_spim_init+0x234>)
   24ae2:	e7e0      	b.n	24aa6 <nrfx_spim_init+0x1e2>
            return err_code;
   24ae4:	4805      	ldr	r0, [pc, #20]	; (24afc <nrfx_spim_init+0x238>)
   24ae6:	e7de      	b.n	24aa6 <nrfx_spim_init+0x1e2>
   24ae8:	20030db8 	.word	0x20030db8
   24aec:	4000a000 	.word	0x4000a000
   24af0:	0bad0000 	.word	0x0bad0000
   24af4:	0bad0005 	.word	0x0bad0005
   24af8:	0bad0003 	.word	0x0bad0003
   24afc:	0bad0004 	.word	0x0bad0004

00024b00 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   24b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24b04:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   24b06:	4d25      	ldr	r5, [pc, #148]	; (24b9c <nrfx_spim_uninit+0x9c>)
   24b08:	015e      	lsls	r6, r3, #5
   24b0a:	eb05 1843 	add.w	r8, r5, r3, lsl #5
   24b0e:	59ab      	ldr	r3, [r5, r6]
{
   24b10:	4607      	mov	r7, r0
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   24b12:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   24b14:	b1cb      	cbz	r3, 24b4a <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   24b16:	f344 3007 	sbfx	r0, r4, #12, #8
   24b1a:	f7ec fc57 	bl	113cc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   24b1e:	4b20      	ldr	r3, [pc, #128]	; (24ba0 <nrfx_spim_uninit+0xa0>)
   24b20:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   24b24:	f898 301d 	ldrb.w	r3, [r8, #29]
   24b28:	b17b      	cbz	r3, 24b4a <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24b2a:	2301      	movs	r3, #1
   24b2c:	f04f 0864 	mov.w	r8, #100	; 0x64
   24b30:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24b32:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   24b36:	b92b      	cbnz	r3, 24b44 <nrfx_spim_uninit+0x44>
   24b38:	2001      	movs	r0, #1
   24b3a:	f00b fb83 	bl	30244 <nrfx_busy_wait>
   24b3e:	f1b8 0801 	subs.w	r8, r8, #1
   24b42:	d1f6      	bne.n	24b32 <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
   24b44:	2200      	movs	r2, #0
   24b46:	19ab      	adds	r3, r5, r6
   24b48:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   24b4a:	2300      	movs	r3, #0
   24b4c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   24b50:	19ab      	adds	r3, r5, r6
   24b52:	7f9b      	ldrb	r3, [r3, #30]
   24b54:	07db      	lsls	r3, r3, #31
   24b56:	d41b      	bmi.n	24b90 <nrfx_spim_uninit+0x90>
    return p_reg->PSEL.SCK;
   24b58:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   24b5c:	f00b fbe4 	bl	30328 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   24b60:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   24b64:	f00b fbe0 	bl	30328 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   24b68:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   24b6c:	f00b fbdc 	bl	30328 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   24b70:	793b      	ldrb	r3, [r7, #4]
   24b72:	b91b      	cbnz	r3, 24b7c <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
   24b74:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   24b78:	f00b fbd6 	bl	30328 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   24b7c:	19ab      	adds	r3, r5, r6
   24b7e:	7fd8      	ldrb	r0, [r3, #31]
   24b80:	28ff      	cmp	r0, #255	; 0xff
   24b82:	d005      	beq.n	24b90 <nrfx_spim_uninit+0x90>
    nrf_gpio_cfg(
   24b84:	2300      	movs	r3, #0
   24b86:	2201      	movs	r2, #1
   24b88:	4619      	mov	r1, r3
   24b8a:	9300      	str	r3, [sp, #0]
   24b8c:	f7ff fe6a 	bl	24864 <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   24b90:	2300      	movs	r3, #0
   24b92:	4435      	add	r5, r6
   24b94:	772b      	strb	r3, [r5, #28]
}
   24b96:	b002      	add	sp, #8
   24b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24b9c:	20030db8 	.word	0x20030db8
   24ba0:	00080152 	.word	0x00080152

00024ba4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   24ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24ba8:	4f38      	ldr	r7, [pc, #224]	; (24c8c <nrfx_spim_xfer+0xe8>)
   24baa:	7903      	ldrb	r3, [r0, #4]
{
   24bac:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   24bae:	eb07 1843 	add.w	r8, r7, r3, lsl #5
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   24bb2:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   24bb6:	4681      	mov	r9, r0
   24bb8:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   24bba:	015e      	lsls	r6, r3, #5
   24bbc:	2a00      	cmp	r2, #0
   24bbe:	d163      	bne.n	24c88 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   24bc0:	59ba      	ldr	r2, [r7, r6]
   24bc2:	b12a      	cbz	r2, 24bd0 <nrfx_spim_xfer+0x2c>
   24bc4:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   24bc8:	bf04      	itt	eq
   24bca:	2201      	moveq	r2, #1
   24bcc:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   24bd0:	eb07 0c06 	add.w	ip, r7, r6
   24bd4:	f10c 0c0c 	add.w	ip, ip, #12
   24bd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   24bdc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   24be0:	2101      	movs	r1, #1
   24be2:	4640      	mov	r0, r8
   24be4:	f00b fbac 	bl	30340 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   24be8:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   24bea:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   24bee:	b121      	cbz	r1, 24bfa <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   24bf0:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   24bf4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24bf8:	d106      	bne.n	24c08 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   24bfa:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   24bfc:	b152      	cbz	r2, 24c14 <nrfx_spim_xfer+0x70>
   24bfe:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   24c02:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   24c06:	d005      	beq.n	24c14 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
   24c08:	2300      	movs	r3, #0
   24c0a:	443e      	add	r6, r7
        return err_code;
   24c0c:	4820      	ldr	r0, [pc, #128]	; (24c90 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
   24c0e:	7773      	strb	r3, [r6, #29]
}
   24c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   24c14:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24c16:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24c1a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24c1e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   24c22:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24c26:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24c2a:	2200      	movs	r2, #0
   24c2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   24c30:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   24c34:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   24c38:	bf18      	it	ne
   24c3a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   24c3c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   24c40:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   24c44:	bf18      	it	ne
   24c46:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   24c48:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   24c4c:	072a      	lsls	r2, r5, #28
   24c4e:	d507      	bpl.n	24c60 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
   24c50:	59ba      	ldr	r2, [r7, r6]
   24c52:	b972      	cbnz	r2, 24c72 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
   24c54:	2100      	movs	r1, #0
   24c56:	4640      	mov	r0, r8
   24c58:	f00b fb72 	bl	30340 <set_ss_pin_state>
    return err_code;
   24c5c:	480d      	ldr	r0, [pc, #52]	; (24c94 <nrfx_spim_xfer+0xf0>)
   24c5e:	e7d7      	b.n	24c10 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24c60:	2201      	movs	r2, #1
   24c62:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   24c64:	59ba      	ldr	r2, [r7, r6]
   24c66:	b922      	cbnz	r2, 24c72 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24c68:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   24c6c:	2a00      	cmp	r2, #0
   24c6e:	d0fb      	beq.n	24c68 <nrfx_spim_xfer+0xc4>
   24c70:	e7f0      	b.n	24c54 <nrfx_spim_xfer+0xb0>
    if (!enable)
   24c72:	f015 0f04 	tst.w	r5, #4
   24c76:	f04f 0240 	mov.w	r2, #64	; 0x40
   24c7a:	d002      	beq.n	24c82 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
   24c7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24c80:	e7ec      	b.n	24c5c <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
   24c82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24c86:	e7e9      	b.n	24c5c <nrfx_spim_xfer+0xb8>
        return err_code;
   24c88:	4803      	ldr	r0, [pc, #12]	; (24c98 <nrfx_spim_xfer+0xf4>)
   24c8a:	e7c1      	b.n	24c10 <nrfx_spim_xfer+0x6c>
   24c8c:	20030db8 	.word	0x20030db8
   24c90:	0bad000a 	.word	0x0bad000a
   24c94:	0bad0000 	.word	0x0bad0000
   24c98:	0bad000b 	.word	0x0bad000b

00024c9c <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   24c9c:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24c9e:	4b0c      	ldr	r3, [pc, #48]	; (24cd0 <nrfx_spim_4_irq_handler+0x34>)
   24ca0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   24ca4:	b192      	cbz	r2, 24ccc <nrfx_spim_4_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24ca6:	2500      	movs	r5, #0
    set_ss_pin_state(p_cb, false);
   24ca8:	4c0a      	ldr	r4, [pc, #40]	; (24cd4 <nrfx_spim_4_irq_handler+0x38>)
   24caa:	4629      	mov	r1, r5
   24cac:	4620      	mov	r0, r4
   24cae:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   24cb2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   24cb6:	f00b fb43 	bl	30340 <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24cba:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   24cbe:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   24cc0:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24cc2:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   24cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   24cca:	4718      	bx	r3
}
   24ccc:	bd70      	pop	{r4, r5, r6, pc}
   24cce:	bf00      	nop
   24cd0:	4000a000 	.word	0x4000a000
   24cd4:	20030db8 	.word	0x20030db8

00024cd8 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   24cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24cdc:	460e      	mov	r6, r1
   24cde:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   24ce0:	4d0c      	ldr	r5, [pc, #48]	; (24d14 <metal_generic_dev_open+0x3c>)
   24ce2:	f855 4f18 	ldr.w	r4, [r5, #24]!
   24ce6:	42ac      	cmp	r4, r5
   24ce8:	d103      	bne.n	24cf2 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   24cea:	f06f 0012 	mvn.w	r0, #18
   24cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   24cf2:	4631      	mov	r1, r6
   24cf4:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   24cf8:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   24cfc:	f7e4 fb7b 	bl	93f6 <strcmp>
   24d00:	b930      	cbnz	r0, 24d10 <metal_generic_dev_open+0x38>
			*device = dev;
   24d02:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   24d06:	4640      	mov	r0, r8
}
   24d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   24d0c:	f00b bc27 	b.w	3055e <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   24d10:	6824      	ldr	r4, [r4, #0]
   24d12:	e7e8      	b.n	24ce6 <metal_generic_dev_open+0xe>
   24d14:	20030dd8 	.word	0x20030dd8

00024d18 <metal_bus_unregister>:
{
   24d18:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   24d1a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   24d1e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   24d20:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   24d22:	f100 0324 	add.w	r3, r0, #36	; 0x24
   24d26:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   24d28:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   24d2c:	6843      	ldr	r3, [r0, #4]
{
   24d2e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   24d30:	b103      	cbz	r3, 24d34 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   24d32:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   24d34:	4b05      	ldr	r3, [pc, #20]	; (24d4c <metal_bus_unregister+0x34>)
   24d36:	781a      	ldrb	r2, [r3, #0]
   24d38:	2a06      	cmp	r2, #6
   24d3a:	d905      	bls.n	24d48 <metal_bus_unregister+0x30>
   24d3c:	685b      	ldr	r3, [r3, #4]
   24d3e:	b11b      	cbz	r3, 24d48 <metal_bus_unregister+0x30>
   24d40:	2007      	movs	r0, #7
   24d42:	6822      	ldr	r2, [r4, #0]
   24d44:	4902      	ldr	r1, [pc, #8]	; (24d50 <metal_bus_unregister+0x38>)
   24d46:	4798      	blx	r3
}
   24d48:	2000      	movs	r0, #0
   24d4a:	bd10      	pop	{r4, pc}
   24d4c:	20030dd8 	.word	0x20030dd8
   24d50:	00038871 	.word	0x00038871

00024d54 <metal_bus_find>:
{
   24d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d58:	4607      	mov	r7, r0
   24d5a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   24d5c:	4e0b      	ldr	r6, [pc, #44]	; (24d8c <metal_bus_find+0x38>)
   24d5e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   24d62:	42b4      	cmp	r4, r6
   24d64:	d102      	bne.n	24d6c <metal_bus_find+0x18>
	return -ENOENT;
   24d66:	f06f 0001 	mvn.w	r0, #1
   24d6a:	e00a      	b.n	24d82 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   24d6c:	4639      	mov	r1, r7
   24d6e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   24d72:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   24d76:	f7e4 fb3e 	bl	93f6 <strcmp>
   24d7a:	b920      	cbnz	r0, 24d86 <metal_bus_find+0x32>
   24d7c:	b11d      	cbz	r5, 24d86 <metal_bus_find+0x32>
			*result = bus;
   24d7e:	f8c5 8000 	str.w	r8, [r5]
}
   24d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   24d86:	6824      	ldr	r4, [r4, #0]
   24d88:	e7eb      	b.n	24d62 <metal_bus_find+0xe>
   24d8a:	bf00      	nop
   24d8c:	20030dd8 	.word	0x20030dd8

00024d90 <metal_bus_register>:
{
   24d90:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   24d92:	4604      	mov	r4, r0
   24d94:	b910      	cbnz	r0, 24d9c <metal_bus_register+0xc>
		return -EINVAL;
   24d96:	f06f 0015 	mvn.w	r0, #21
}
   24d9a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   24d9c:	6800      	ldr	r0, [r0, #0]
   24d9e:	2800      	cmp	r0, #0
   24da0:	d0f9      	beq.n	24d96 <metal_bus_register+0x6>
   24da2:	f7e4 fb32 	bl	940a <strlen>
   24da6:	2800      	cmp	r0, #0
   24da8:	d0f5      	beq.n	24d96 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   24daa:	2100      	movs	r1, #0
   24dac:	6820      	ldr	r0, [r4, #0]
   24dae:	f7ff ffd1 	bl	24d54 <metal_bus_find>
   24db2:	b1c8      	cbz	r0, 24de8 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   24db4:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   24db8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   24dbc:	4b0c      	ldr	r3, [pc, #48]	; (24df0 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   24dbe:	f104 0224 	add.w	r2, r4, #36	; 0x24
   24dc2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   24dc4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   24dc8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   24dca:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   24dcc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   24dce:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   24dd0:	781a      	ldrb	r2, [r3, #0]
   24dd2:	2a06      	cmp	r2, #6
   24dd4:	d901      	bls.n	24dda <metal_bus_register+0x4a>
   24dd6:	685b      	ldr	r3, [r3, #4]
   24dd8:	b90b      	cbnz	r3, 24dde <metal_bus_register+0x4e>
	return 0;
   24dda:	2000      	movs	r0, #0
   24ddc:	e7dd      	b.n	24d9a <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   24dde:	2007      	movs	r0, #7
   24de0:	6822      	ldr	r2, [r4, #0]
   24de2:	4904      	ldr	r1, [pc, #16]	; (24df4 <metal_bus_register+0x64>)
   24de4:	4798      	blx	r3
   24de6:	e7f8      	b.n	24dda <metal_bus_register+0x4a>
		return -EEXIST;
   24de8:	f06f 0010 	mvn.w	r0, #16
   24dec:	e7d5      	b.n	24d9a <metal_bus_register+0xa>
   24dee:	bf00      	nop
   24df0:	20030dd8 	.word	0x20030dd8
   24df4:	00038873 	.word	0x00038873

00024df8 <metal_register_generic_device>:
{
   24df8:	b510      	push	{r4, lr}
   24dfa:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   24dfc:	6800      	ldr	r0, [r0, #0]
   24dfe:	b910      	cbnz	r0, 24e06 <metal_register_generic_device+0xe>
		return -EINVAL;
   24e00:	f06f 0015 	mvn.w	r0, #21
}
   24e04:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   24e06:	f7e4 fb00 	bl	940a <strlen>
   24e0a:	2800      	cmp	r0, #0
   24e0c:	d0f8      	beq.n	24e00 <metal_register_generic_device+0x8>
   24e0e:	68a3      	ldr	r3, [r4, #8]
   24e10:	2b01      	cmp	r3, #1
   24e12:	d8f5      	bhi.n	24e00 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   24e14:	4b06      	ldr	r3, [pc, #24]	; (24e30 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   24e16:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   24e1a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   24e1c:	4b05      	ldr	r3, [pc, #20]	; (24e34 <metal_register_generic_device+0x3c>)
   24e1e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   24e20:	f103 0018 	add.w	r0, r3, #24
   24e24:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   24e26:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   24e28:	61d9      	str	r1, [r3, #28]
	return 0;
   24e2a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   24e2c:	6011      	str	r1, [r2, #0]
}
   24e2e:	e7e9      	b.n	24e04 <metal_register_generic_device+0xc>
   24e30:	2000880c 	.word	0x2000880c
   24e34:	20030dd8 	.word	0x20030dd8

00024e38 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   24e38:	4b0e      	ldr	r3, [pc, #56]	; (24e74 <metal_init+0x3c>)
{
   24e3a:	b510      	push	{r4, lr}
   24e3c:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   24e3e:	2220      	movs	r2, #32
   24e40:	2100      	movs	r1, #0
   24e42:	4618      	mov	r0, r3
   24e44:	f00c fe27 	bl	31a96 <memset>

	_metal.common.log_handler   = params->log_handler;
   24e48:	6822      	ldr	r2, [r4, #0]
   24e4a:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   24e4c:	4602      	mov	r2, r0
   24e4e:	7921      	ldrb	r1, [r4, #4]
   24e50:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   24e54:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   24e58:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   24e5c:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   24e60:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   24e64:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   24e68:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   24e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   24e6e:	f000 b80f 	b.w	24e90 <metal_sys_init>
   24e72:	bf00      	nop
   24e74:	20030dd8 	.word	0x20030dd8

00024e78 <metal_finish>:

void metal_finish(void)
{
   24e78:	b508      	push	{r3, lr}
	metal_sys_finish();
   24e7a:	f000 f811 	bl	24ea0 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   24e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   24e82:	2220      	movs	r2, #32
   24e84:	2100      	movs	r1, #0
   24e86:	4801      	ldr	r0, [pc, #4]	; (24e8c <metal_finish+0x14>)
   24e88:	f00c be05 	b.w	31a96 <memset>
   24e8c:	20030dd8 	.word	0x20030dd8

00024e90 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   24e90:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   24e92:	4802      	ldr	r0, [pc, #8]	; (24e9c <metal_sys_init+0xc>)
   24e94:	f7ff ff7c 	bl	24d90 <metal_bus_register>
	return 0;
}
   24e98:	2000      	movs	r0, #0
   24e9a:	bd08      	pop	{r3, pc}
   24e9c:	2000880c 	.word	0x2000880c

00024ea0 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   24ea0:	4801      	ldr	r0, [pc, #4]	; (24ea8 <metal_sys_finish+0x8>)
   24ea2:	f7ff bf39 	b.w	24d18 <metal_bus_unregister>
   24ea6:	bf00      	nop
   24ea8:	2000880c 	.word	0x2000880c

00024eac <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   24eac:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   24eae:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   24eb0:	2b06      	cmp	r3, #6
{
   24eb2:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   24eb4:	bf88      	it	hi
   24eb6:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   24eb8:	4b09      	ldr	r3, [pc, #36]	; (24ee0 <metal_zephyr_log_handler+0x34>)
{
   24eba:	ac05      	add	r4, sp, #20
   24ebc:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   24ec0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   24ec4:	4807      	ldr	r0, [pc, #28]	; (24ee4 <metal_zephyr_log_handler+0x38>)
   24ec6:	f005 fac9 	bl	2a45c <printk>

	va_start(args, format);
	vprintk(format, args);
   24eca:	4621      	mov	r1, r4
   24ecc:	4628      	mov	r0, r5
	va_start(args, format);
   24ece:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   24ed0:	f7e9 fcf4 	bl	e8bc <vprintk>
	va_end(args);
}
   24ed4:	b002      	add	sp, #8
   24ed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   24eda:	b003      	add	sp, #12
   24edc:	4770      	bx	lr
   24ede:	bf00      	nop
   24ee0:	000343cc 	.word	0x000343cc
   24ee4:	00035e6d 	.word	0x00035e6d

00024ee8 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   24ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24eec:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   24eee:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   24ef0:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   24ef2:	4293      	cmp	r3, r2
{
   24ef4:	4617      	mov	r7, r2
   24ef6:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   24ef8:	d341      	bcc.n	24f7e <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   24efa:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   24efc:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   24f00:	42bd      	cmp	r5, r7
   24f02:	d103      	bne.n	24f0c <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   24f04:	2000      	movs	r0, #0
}
   24f06:	b007      	add	sp, #28
   24f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   24f0c:	fb0b f805 	mul.w	r8, fp, r5
   24f10:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24f14:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   24f16:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   24f1a:	1d23      	adds	r3, r4, #4
   24f1c:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   24f1e:	b9ca      	cbnz	r2, 24f54 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   24f20:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24f22:	6861      	ldr	r1, [r4, #4]
   24f24:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   24f26:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   24f2a:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   24f2c:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   24f2e:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   24f32:	1e5c      	subs	r4, r3, #1
   24f34:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   24f38:	425b      	negs	r3, r3
   24f3a:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   24f3e:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   24f40:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   24f44:	6884      	ldr	r4, [r0, #8]
   24f46:	3306      	adds	r3, #6
   24f48:	42a1      	cmp	r1, r4
   24f4a:	bf28      	it	cs
   24f4c:	f04f 31ff 	movcs.w	r1, #4294967295
   24f50:	f00b fad1 	bl	304f6 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24f54:	f859 3008 	ldr.w	r3, [r9, r8]
   24f58:	4630      	mov	r0, r6
   24f5a:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   24f5c:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   24f5e:	b2a9      	uxth	r1, r5
   24f60:	6a1b      	ldr	r3, [r3, #32]
   24f62:	9301      	str	r3, [sp, #4]
   24f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24f66:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   24f6a:	9300      	str	r3, [sp, #0]
   24f6c:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   24f70:	9b05      	ldr	r3, [sp, #20]
   24f72:	f00b fb39 	bl	305e8 <virtqueue_create>
		if (ret)
   24f76:	2800      	cmp	r0, #0
   24f78:	d1c5      	bne.n	24f06 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   24f7a:	3501      	adds	r5, #1
   24f7c:	e7c0      	b.n	24f00 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   24f7e:	4801      	ldr	r0, [pc, #4]	; (24f84 <virtio_create_virtqueues+0x9c>)
   24f80:	e7c1      	b.n	24f06 <virtio_create_virtqueues+0x1e>
   24f82:	bf00      	nop
   24f84:	fffff440 	.word	0xfffff440

00024f88 <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   24f88:	b510      	push	{r4, lr}
	if (vq) {
   24f8a:	4604      	mov	r4, r0
   24f8c:	b190      	cbz	r0, 24fb4 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   24f8e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   24f90:	8943      	ldrh	r3, [r0, #10]
   24f92:	429a      	cmp	r2, r3
   24f94:	d009      	beq.n	24faa <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   24f96:	4b08      	ldr	r3, [pc, #32]	; (24fb8 <virtqueue_free+0x30>)
   24f98:	781a      	ldrb	r2, [r3, #0]
   24f9a:	2a03      	cmp	r2, #3
   24f9c:	d905      	bls.n	24faa <virtqueue_free+0x22>
   24f9e:	685b      	ldr	r3, [r3, #4]
   24fa0:	b11b      	cbz	r3, 24faa <virtqueue_free+0x22>
   24fa2:	6842      	ldr	r2, [r0, #4]
   24fa4:	4905      	ldr	r1, [pc, #20]	; (24fbc <virtqueue_free+0x34>)
   24fa6:	2004      	movs	r0, #4
   24fa8:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   24faa:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   24fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24fb0:	f00c bd14 	b.w	319dc <k_free>
   24fb4:	bd10      	pop	{r4, pc}
   24fb6:	bf00      	nop
   24fb8:	20030dd8 	.word	0x20030dd8
   24fbc:	0003891e 	.word	0x0003891e

00024fc0 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   24fc0:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   24fc2:	8944      	ldrh	r4, [r0, #10]
   24fc4:	428c      	cmp	r4, r1
   24fc6:	d912      	bls.n	24fee <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   24fc8:	6a03      	ldr	r3, [r0, #32]
   24fca:	3c01      	subs	r4, #1
   24fcc:	885d      	ldrh	r5, [r3, #2]
   24fce:	402c      	ands	r4, r5
   24fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   24fd4:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   24fd6:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   24fd8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   24fdc:	6a02      	ldr	r2, [r0, #32]
   24fde:	8853      	ldrh	r3, [r2, #2]
   24fe0:	3301      	adds	r3, #1
   24fe2:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   24fe4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   24fe6:	3301      	adds	r3, #1
   24fe8:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   24fea:	2000      	movs	r0, #0
}
   24fec:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   24fee:	4801      	ldr	r0, [pc, #4]	; (24ff4 <virtqueue_add_consumed_buffer+0x34>)
   24ff0:	e7fc      	b.n	24fec <virtqueue_add_consumed_buffer+0x2c>
   24ff2:	bf00      	nop
   24ff4:	fffff441 	.word	0xfffff441

00024ff8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   24ff8:	b470      	push	{r4, r5, r6}
   24ffa:	9e03      	ldr	r6, [sp, #12]
   24ffc:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   24ffe:	b158      	cbz	r0, 25018 <rpmsg_send_offchannel_raw+0x20>
   25000:	6a00      	ldr	r0, [r0, #32]
   25002:	b148      	cbz	r0, 25018 <rpmsg_send_offchannel_raw+0x20>
   25004:	b143      	cbz	r3, 25018 <rpmsg_send_offchannel_raw+0x20>
   25006:	3401      	adds	r4, #1
   25008:	d006      	beq.n	25018 <rpmsg_send_offchannel_raw+0x20>
   2500a:	2e00      	cmp	r6, #0
   2500c:	db04      	blt.n	25018 <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   2500e:	6f84      	ldr	r4, [r0, #120]	; 0x78
   25010:	b114      	cbz	r4, 25018 <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   25012:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   25014:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   25016:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   25018:	4801      	ldr	r0, [pc, #4]	; (25020 <rpmsg_send_offchannel_raw+0x28>)
}
   2501a:	bc70      	pop	{r4, r5, r6}
   2501c:	4770      	bx	lr
   2501e:	bf00      	nop
   25020:	fffff82d 	.word	0xfffff82d

00025024 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   25024:	b470      	push	{r4, r5, r6}
   25026:	9e03      	ldr	r6, [sp, #12]
   25028:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   2502a:	b160      	cbz	r0, 25046 <rpmsg_send_offchannel_nocopy+0x22>
   2502c:	6a00      	ldr	r0, [r0, #32]
   2502e:	b150      	cbz	r0, 25046 <rpmsg_send_offchannel_nocopy+0x22>
   25030:	b14b      	cbz	r3, 25046 <rpmsg_send_offchannel_nocopy+0x22>
   25032:	3401      	adds	r4, #1
   25034:	d007      	beq.n	25046 <rpmsg_send_offchannel_nocopy+0x22>
   25036:	2e00      	cmp	r6, #0
   25038:	db05      	blt.n	25046 <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   2503a:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   2503e:	b114      	cbz	r4, 25046 <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   25040:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   25042:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   25044:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   25046:	4801      	ldr	r0, [pc, #4]	; (2504c <rpmsg_send_offchannel_nocopy+0x28>)
}
   25048:	bc70      	pop	{r4, r5, r6}
   2504a:	4770      	bx	lr
   2504c:	fffff82d 	.word	0xfffff82d

00025050 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   25050:	b570      	push	{r4, r5, r6, lr}
   25052:	460c      	mov	r4, r1
   25054:	4611      	mov	r1, r2
   25056:	4605      	mov	r5, r0
   25058:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2505a:	4b0c      	ldr	r3, [pc, #48]	; (2508c <rpmsg_register_endpoint+0x3c>)
   2505c:	2220      	movs	r2, #32
   2505e:	2900      	cmp	r1, #0
   25060:	bf08      	it	eq
   25062:	4619      	moveq	r1, r3
   25064:	4620      	mov	r0, r4
   25066:	f00c fe7f 	bl	31d68 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   2506a:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   2506c:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   2506e:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   25070:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   25072:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   25074:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   25076:	9b06      	ldr	r3, [sp, #24]
   25078:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   2507a:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   2507c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   25080:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   25084:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   25086:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   25088:	6013      	str	r3, [r2, #0]
}
   2508a:	bd70      	pop	{r4, r5, r6, pc}
   2508c:	000368f4 	.word	0x000368f4

00025090 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   25090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   25094:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   25098:	460d      	mov	r5, r1
   2509a:	4692      	mov	sl, r2
   2509c:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   2509e:	4606      	mov	r6, r0
   250a0:	2800      	cmp	r0, #0
   250a2:	d06c      	beq.n	2517e <rpmsg_create_ept+0xee>
   250a4:	2900      	cmp	r1, #0
   250a6:	d06a      	beq.n	2517e <rpmsg_create_ept+0xee>
   250a8:	f1b9 0f00 	cmp.w	r9, #0
   250ac:	d067      	beq.n	2517e <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   250ae:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   250b2:	4640      	mov	r0, r8
   250b4:	f00b fc01 	bl	308ba <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   250b8:	1c78      	adds	r0, r7, #1
   250ba:	d140      	bne.n	2513e <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   250bc:	6cac      	ldr	r4, [r5, #72]	; 0x48
   250be:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   250c2:	f014 0401 	ands.w	r4, r4, #1
   250c6:	d00b      	beq.n	250e0 <rpmsg_create_ept+0x50>
	for (bit = start;
   250c8:	2400      	movs	r4, #0
	     bit++)
   250ca:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   250cc:	2c80      	cmp	r4, #128	; 0x80
   250ce:	d054      	beq.n	2517a <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   250d0:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   250d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   250d6:	f004 011f 	and.w	r1, r4, #31
   250da:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   250dc:	07d1      	lsls	r1, r2, #31
   250de:	d4f4      	bmi.n	250ca <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   250e0:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   250e2:	0960      	lsrs	r0, r4, #5
   250e4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   250e8:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   250ec:	f004 041f 	and.w	r4, r4, #31
   250f0:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   250f2:	430a      	orrs	r2, r1
   250f4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   250f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   250fa:	4652      	mov	r2, sl
   250fc:	e9cd 9301 	strd	r9, r3, [sp, #4]
   25100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25102:	4631      	mov	r1, r6
   25104:	9300      	str	r3, [sp, #0]
   25106:	4628      	mov	r0, r5
   25108:	463b      	mov	r3, r7
   2510a:	f7ff ffa1 	bl	25050 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   2510e:	4640      	mov	r0, r8
   25110:	f000 fde0 	bl	25cd4 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   25114:	7834      	ldrb	r4, [r6, #0]
   25116:	b174      	cbz	r4, 25136 <rpmsg_create_ept+0xa6>
   25118:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   2511c:	b15c      	cbz	r4, 25136 <rpmsg_create_ept+0xa6>
   2511e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   25120:	3301      	adds	r3, #1
   25122:	d12e      	bne.n	25182 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   25124:	2100      	movs	r1, #0
   25126:	4630      	mov	r0, r6
   25128:	f00b fbf6 	bl	30918 <rpmsg_send_ns_message>

	if (status)
   2512c:	4604      	mov	r4, r0
   2512e:	b110      	cbz	r0, 25136 <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   25130:	4630      	mov	r0, r6
   25132:	f00b fbc8 	bl	308c6 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   25136:	4620      	mov	r0, r4
   25138:	b004      	add	sp, #16
   2513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   2513e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   25142:	d3d9      	bcc.n	250f8 <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   25144:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   25148:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   2514a:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   2514e:	d80f      	bhi.n	25170 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   25150:	0958      	lsrs	r0, r3, #5
   25152:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   25156:	f003 031f 	and.w	r3, r3, #31
   2515a:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   2515e:	07d2      	lsls	r2, r2, #31
   25160:	d40b      	bmi.n	2517a <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   25162:	2201      	movs	r2, #1
   25164:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   25168:	4323      	orrs	r3, r4
   2516a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   2516e:	e7c3      	b.n	250f8 <rpmsg_create_ept+0x68>
   25170:	4c05      	ldr	r4, [pc, #20]	; (25188 <rpmsg_create_ept+0xf8>)
   25172:	4640      	mov	r0, r8
   25174:	f000 fdae 	bl	25cd4 <z_impl_k_sem_give>
}
   25178:	e7dd      	b.n	25136 <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   2517a:	4c04      	ldr	r4, [pc, #16]	; (2518c <rpmsg_create_ept+0xfc>)
   2517c:	e7f9      	b.n	25172 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   2517e:	4c02      	ldr	r4, [pc, #8]	; (25188 <rpmsg_create_ept+0xf8>)
   25180:	e7d9      	b.n	25136 <rpmsg_create_ept+0xa6>
   25182:	2400      	movs	r4, #0
   25184:	e7d7      	b.n	25136 <rpmsg_create_ept+0xa6>
   25186:	bf00      	nop
   25188:	fffff82d 	.word	0xfffff82d
   2518c:	fffff829 	.word	0xfffff829

00025190 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int len, int wait)
{
   25190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25194:	b085      	sub	sp, #20
   25196:	460f      	mov	r7, r1
   25198:	4690      	mov	r8, r2

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	/* Get the payload buffer. */
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   2519a:	a903      	add	r1, sp, #12
   2519c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   2519e:	4605      	mov	r5, r0
   251a0:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   251a2:	f00b fdc9 	bl	30d38 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   251a6:	4604      	mov	r4, r0
   251a8:	b1e0      	cbz	r0, 251e4 <rpmsg_virtio_send_offchannel_raw+0x54>
		return RPMSG_ERR_NO_BUFF;

	/* Copy data to rpmsg buffer. */
	if (len > (int)buff_len)
   251aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   251ac:	9b03      	ldr	r3, [sp, #12]
		len = buff_len;
	io = rvdev->shbuf_io;
   251ae:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
   251b2:	429e      	cmp	r6, r3
   251b4:	bfa8      	it	ge
   251b6:	461e      	movge	r6, r3
   251b8:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   251ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
   251be:	1a61      	subs	r1, r4, r1
   251c0:	4633      	mov	r3, r6
   251c2:	464a      	mov	r2, r9
   251c4:	4561      	cmp	r1, ip
   251c6:	bf28      	it	cs
   251c8:	f04f 31ff 	movcs.w	r1, #4294967295
   251cc:	f00b f959 	bl	30482 <metal_io_block_write>
				      data, len);
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");

	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   251d0:	4623      	mov	r3, r4
   251d2:	4642      	mov	r2, r8
   251d4:	4639      	mov	r1, r7
   251d6:	4628      	mov	r0, r5
   251d8:	9600      	str	r6, [sp, #0]
   251da:	f00b fd4d 	bl	30c78 <rpmsg_virtio_send_offchannel_nocopy>
}
   251de:	b005      	add	sp, #20
   251e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   251e4:	4800      	ldr	r0, [pc, #0]	; (251e8 <rpmsg_virtio_send_offchannel_raw+0x58>)
   251e6:	e7fa      	b.n	251de <rpmsg_virtio_send_offchannel_raw+0x4e>
   251e8:	fffff82e 	.word	0xfffff82e

000251ec <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   251ec:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   251ee:	4604      	mov	r4, r0
   251f0:	b1e0      	cbz	r0, 2522c <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   251f2:	f100 0558 	add.w	r5, r0, #88	; 0x58
   251f6:	4628      	mov	r0, r5
   251f8:	f00b fc1e 	bl	30a38 <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   251fc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   25200:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   25202:	b953      	cbnz	r3, 2521a <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   25204:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   25208:	3c10      	subs	r4, #16
	if (length <= 0) {
   2520a:	2c00      	cmp	r4, #0
   2520c:	dc00      	bgt.n	25210 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   2520e:	4c08      	ldr	r4, [pc, #32]	; (25230 <rpmsg_virtio_get_buffer_size+0x44>)
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   25210:	4628      	mov	r0, r5
   25212:	f00b fc0f 	bl	30a34 <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   25216:	4620      	mov	r0, r4
   25218:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   2521a:	2b01      	cmp	r3, #1
   2521c:	d1f7      	bne.n	2520e <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   2521e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   25222:	f00b fb32 	bl	3088a <virtqueue_get_desc_size>
   25226:	f1a0 0410 	sub.w	r4, r0, #16
   2522a:	e7ee      	b.n	2520a <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   2522c:	4c01      	ldr	r4, [pc, #4]	; (25234 <rpmsg_virtio_get_buffer_size+0x48>)
   2522e:	e7f2      	b.n	25216 <rpmsg_virtio_get_buffer_size+0x2a>
   25230:	fffff82e 	.word	0xfffff82e
   25234:	fffff82d 	.word	0xfffff82d

00025238 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   25238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2523c:	b08a      	sub	sp, #40	; 0x28
   2523e:	460d      	mov	r5, r1
   25240:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   25244:	4690      	mov	r8, r2
   25246:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   25248:	4604      	mov	r4, r0
   2524a:	b920      	cbnz	r0, 25256 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   2524c:	4f81      	ldr	r7, [pc, #516]	; (25454 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   2524e:	4638      	mov	r0, r7
   25250:	b00a      	add	sp, #40	; 0x28
   25252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   25256:	2900      	cmp	r1, #0
   25258:	d0f8      	beq.n	2524c <rpmsg_init_vdev_with_config+0x14>
   2525a:	2b00      	cmp	r3, #0
   2525c:	d0f6      	beq.n	2524c <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2525e:	2294      	movs	r2, #148	; 0x94
   25260:	2100      	movs	r1, #0
   25262:	f00c fc18 	bl	31a96 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25266:	2201      	movs	r2, #1
   25268:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2526c:	4611      	mov	r1, r2
   2526e:	f00b ff89 	bl	31184 <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   25272:	4b79      	ldr	r3, [pc, #484]	; (25458 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   25274:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   25278:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   2527c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   2527e:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   25280:	4b76      	ldr	r3, [pc, #472]	; (2545c <rpmsg_init_vdev_with_config+0x224>)
   25282:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   25284:	4b76      	ldr	r3, [pc, #472]	; (25460 <rpmsg_init_vdev_with_config+0x228>)
   25286:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   2528a:	4b76      	ldr	r3, [pc, #472]	; (25464 <rpmsg_init_vdev_with_config+0x22c>)
   2528c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   25290:	4b75      	ldr	r3, [pc, #468]	; (25468 <rpmsg_init_vdev_with_config+0x230>)
   25292:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   25296:	4b75      	ldr	r3, [pc, #468]	; (2546c <rpmsg_init_vdev_with_config+0x234>)
   25298:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   2529c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   252a0:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   252a4:	f1b8 0f00 	cmp.w	r8, #0
   252a8:	d16e      	bne.n	25388 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   252aa:	2f00      	cmp	r7, #0
   252ac:	d0ce      	beq.n	2524c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   252ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   252b2:	f104 0394 	add.w	r3, r4, #148	; 0x94
   252b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   252ba:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   252be:	6a03      	ldr	r3, [r0, #32]
   252c0:	689b      	ldr	r3, [r3, #8]
   252c2:	4798      	blx	r3
   252c4:	2300      	movs	r3, #0
   252c6:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   252c8:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   252cc:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   252ce:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   252d2:	f1b8 0f00 	cmp.w	r8, #0
   252d6:	d16d      	bne.n	253b4 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   252d8:	7a3b      	ldrb	r3, [r7, #8]
   252da:	2b00      	cmp	r3, #0
   252dc:	d068      	beq.n	253b0 <rpmsg_init_vdev_with_config+0x178>
   252de:	f109 030c 	add.w	r3, r9, #12
   252e2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   252e6:	f1b9 0f00 	cmp.w	r9, #0
   252ea:	d0af      	beq.n	2524c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   252ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
   252f0:	2a00      	cmp	r2, #0
   252f2:	f000 80ad 	beq.w	25450 <rpmsg_init_vdev_with_config+0x218>
   252f6:	689b      	ldr	r3, [r3, #8]
   252f8:	2b00      	cmp	r3, #0
   252fa:	f000 80a9 	beq.w	25450 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   252fe:	4b5c      	ldr	r3, [pc, #368]	; (25470 <rpmsg_init_vdev_with_config+0x238>)
   25300:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   25302:	4b5c      	ldr	r3, [pc, #368]	; (25474 <rpmsg_init_vdev_with_config+0x23c>)
   25304:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   25306:	4b5c      	ldr	r3, [pc, #368]	; (25478 <rpmsg_init_vdev_with_config+0x240>)
   25308:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   2530a:	4b5c      	ldr	r3, [pc, #368]	; (2547c <rpmsg_init_vdev_with_config+0x244>)
   2530c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   2530e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25310:	681b      	ldr	r3, [r3, #0]
   25312:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   25316:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25318:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   2531a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   2531e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   25322:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   25326:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   25328:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   2532c:	9300      	str	r3, [sp, #0]
   2532e:	2202      	movs	r2, #2
   25330:	2100      	movs	r1, #0
   25332:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   25336:	ab04      	add	r3, sp, #16
   25338:	f7ff fdd6 	bl	24ee8 <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   2533c:	4607      	mov	r7, r0
   2533e:	2800      	cmp	r0, #0
   25340:	d185      	bne.n	2524e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   25342:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   25346:	f00b fa3b 	bl	307c0 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   2534a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2534c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   2534e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   25350:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   25352:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   25354:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   25356:	f1b8 0f00 	cmp.w	r8, #0
   2535a:	d161      	bne.n	25420 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2535c:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   2535e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   25362:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25364:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   25368:	895b      	ldrh	r3, [r3, #10]
   2536a:	4553      	cmp	r3, sl
   2536c:	d834      	bhi.n	253d8 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   2536e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   25372:	e9c4 4400 	strd	r4, r4, [r4]
   25376:	2b00      	cmp	r3, #0
   25378:	d159      	bne.n	2542e <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   2537a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   2537e:	2104      	movs	r1, #4
   25380:	6a03      	ldr	r3, [r0, #32]
   25382:	685b      	ldr	r3, [r3, #4]
   25384:	4798      	blx	r3
}
   25386:	e762      	b.n	2524e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   25388:	f1b8 0f01 	cmp.w	r8, #1
   2538c:	d195      	bne.n	252ba <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   2538e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   25392:	6a03      	ldr	r3, [r0, #32]
   25394:	681b      	ldr	r3, [r3, #0]
   25396:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   25398:	0642      	lsls	r2, r0, #25
   2539a:	d506      	bpl.n	253aa <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   2539c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   253a0:	2100      	movs	r1, #0
   253a2:	6a03      	ldr	r3, [r0, #32]
   253a4:	685b      	ldr	r3, [r3, #4]
   253a6:	4798      	blx	r3
}
   253a8:	e7f1      	b.n	2538e <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   253aa:	0743      	lsls	r3, r0, #29
   253ac:	d5ef      	bpl.n	2538e <rpmsg_init_vdev_with_config+0x156>
   253ae:	e784      	b.n	252ba <rpmsg_init_vdev_with_config+0x82>
   253b0:	464b      	mov	r3, r9
   253b2:	e796      	b.n	252e2 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   253b4:	f1b8 0f01 	cmp.w	r8, #1
   253b8:	d1b1      	bne.n	2531e <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   253ba:	4b2e      	ldr	r3, [pc, #184]	; (25474 <rpmsg_init_vdev_with_config+0x23c>)
   253bc:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   253be:	4b2c      	ldr	r3, [pc, #176]	; (25470 <rpmsg_init_vdev_with_config+0x238>)
   253c0:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   253c2:	4b2e      	ldr	r3, [pc, #184]	; (2547c <rpmsg_init_vdev_with_config+0x244>)
   253c4:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   253c6:	4b2c      	ldr	r3, [pc, #176]	; (25478 <rpmsg_init_vdev_with_config+0x240>)
   253c8:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   253ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   253cc:	699b      	ldr	r3, [r3, #24]
   253ce:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   253d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   253d4:	681b      	ldr	r3, [r3, #0]
   253d6:	e7a0      	b.n	2531a <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   253d8:	4648      	mov	r0, r9
   253da:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   253de:	f00b fc9c 	bl	30d1a <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   253e2:	4605      	mov	r5, r0
   253e4:	b1c8      	cbz	r0, 2541a <rpmsg_init_vdev_with_config+0x1e2>
   253e6:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   253e8:	9008      	str	r0, [sp, #32]
   253ea:	1a41      	subs	r1, r0, r1

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   253ec:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   253ee:	2200      	movs	r2, #0
   253f0:	4281      	cmp	r1, r0
   253f2:	bf28      	it	cs
   253f4:	f04f 31ff 	movcs.w	r1, #4294967295
   253f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   253fc:	4630      	mov	r0, r6
   253fe:	f00b f87a 	bl	304f6 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   25402:	9500      	str	r5, [sp, #0]
   25404:	2301      	movs	r3, #1
   25406:	2200      	movs	r2, #0
   25408:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2540c:	a908      	add	r1, sp, #32
   2540e:	f00b f918 	bl	30642 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   25412:	b918      	cbnz	r0, 2541c <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   25414:	f10a 0a01 	add.w	sl, sl, #1
   25418:	e7a4      	b.n	25364 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   2541a:	4819      	ldr	r0, [pc, #100]	; (25480 <rpmsg_init_vdev_with_config+0x248>)
   2541c:	4607      	mov	r7, r0
   2541e:	e716      	b.n	2524e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   25420:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   25424:	e9c4 4400 	strd	r4, r4, [r4]
   25428:	2b00      	cmp	r3, #0
   2542a:	f43f af10 	beq.w	2524e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   2542e:	2300      	movs	r3, #0
   25430:	9302      	str	r3, [sp, #8]
   25432:	4b14      	ldr	r3, [pc, #80]	; (25484 <rpmsg_init_vdev_with_config+0x24c>)
   25434:	4620      	mov	r0, r4
   25436:	9301      	str	r3, [sp, #4]
   25438:	2335      	movs	r3, #53	; 0x35
   2543a:	4a13      	ldr	r2, [pc, #76]	; (25488 <rpmsg_init_vdev_with_config+0x250>)
   2543c:	9300      	str	r3, [sp, #0]
   2543e:	f104 0108 	add.w	r1, r4, #8
   25442:	f7ff fe05 	bl	25050 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   25446:	f1b8 0f00 	cmp.w	r8, #0
   2544a:	f47f af00 	bne.w	2524e <rpmsg_init_vdev_with_config+0x16>
   2544e:	e794      	b.n	2537a <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   25450:	4f0b      	ldr	r7, [pc, #44]	; (25480 <rpmsg_init_vdev_with_config+0x248>)
   25452:	e6fc      	b.n	2524e <rpmsg_init_vdev_with_config+0x16>
   25454:	fffff82d 	.word	0xfffff82d
   25458:	00025191 	.word	0x00025191
   2545c:	00030a25 	.word	0x00030a25
   25460:	00030c39 	.word	0x00030c39
   25464:	00030d39 	.word	0x00030d39
   25468:	00030c79 	.word	0x00030c79
   2546c:	00030a45 	.word	0x00030a45
   25470:	00038940 	.word	0x00038940
   25474:	00038946 	.word	0x00038946
   25478:	00030b85 	.word	0x00030b85
   2547c:	00030a33 	.word	0x00030a33
   25480:	fffff82e 	.word	0xfffff82e
   25484:	00030a87 	.word	0x00030a87
   25488:	0003894c 	.word	0x0003894c

0002548c <rpmsg_init_vdev>:
{
   2548c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2548e:	4605      	mov	r5, r0
   25490:	460e      	mov	r6, r1
   25492:	4617      	mov	r7, r2
   25494:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   25496:	4a07      	ldr	r2, [pc, #28]	; (254b4 <rpmsg_init_vdev+0x28>)
   25498:	ac03      	add	r4, sp, #12
   2549a:	ca07      	ldmia	r2, {r0, r1, r2}
   2549c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   254a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   254a2:	4631      	mov	r1, r6
   254a4:	9200      	str	r2, [sp, #0]
   254a6:	4628      	mov	r0, r5
   254a8:	463a      	mov	r2, r7
   254aa:	9401      	str	r4, [sp, #4]
   254ac:	f7ff fec4 	bl	25238 <rpmsg_init_vdev_with_config>
}
   254b0:	b007      	add	sp, #28
   254b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   254b4:	000333d8 	.word	0x000333d8

000254b8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   254b8:	2203      	movs	r2, #3
   254ba:	4b11      	ldr	r3, [pc, #68]	; (25500 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   254bc:	4911      	ldr	r1, [pc, #68]	; (25504 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   254be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   254c0:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   254c2:	4a11      	ldr	r2, [pc, #68]	; (25508 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   254c4:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   254c6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   254c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   254cc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   254ce:	2200      	movs	r2, #0
   254d0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   254d2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   254d4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   254d6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   254d8:	490c      	ldr	r1, [pc, #48]	; (2550c <_DoInit+0x54>)
   254da:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   254dc:	2110      	movs	r1, #16
   254de:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   254e0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   254e2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   254e4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   254e6:	4a0a      	ldr	r2, [pc, #40]	; (25510 <_DoInit+0x58>)
   254e8:	6812      	ldr	r2, [r2, #0]
   254ea:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   254ee:	4a09      	ldr	r2, [pc, #36]	; (25514 <_DoInit+0x5c>)
   254f0:	6810      	ldr	r0, [r2, #0]
   254f2:	8892      	ldrh	r2, [r2, #4]
   254f4:	6018      	str	r0, [r3, #0]
   254f6:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   254f8:	2220      	movs	r2, #32
   254fa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   254fc:	4770      	bx	lr
   254fe:	bf00      	nop
   25500:	20030df8 	.word	0x20030df8
   25504:	00034649 	.word	0x00034649
   25508:	20031bbf 	.word	0x20031bbf
   2550c:	20031baf 	.word	0x20031baf
   25510:	0003894f 	.word	0x0003894f
   25514:	00038953 	.word	0x00038953

00025518 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2551c:	f04f 0b18 	mov.w	fp, #24
   25520:	4f20      	ldr	r7, [pc, #128]	; (255a4 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25522:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   25524:	fb0b 7200 	mla	r2, fp, r0, r7
   25528:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2552a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2552c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2552e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   25530:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   25532:	d831      	bhi.n	25598 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   25534:	f8d2 a020 	ldr.w	sl, [r2, #32]
   25538:	ebaa 0905 	sub.w	r9, sl, r5
   2553c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   25540:	4294      	cmp	r4, r2
   25542:	d811      	bhi.n	25568 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   25544:	2318      	movs	r3, #24
   25546:	fb06 3303 	mla	r3, r6, r3, r3
   2554a:	443b      	add	r3, r7
   2554c:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2554e:	4622      	mov	r2, r4
   25550:	4641      	mov	r1, r8
   25552:	4428      	add	r0, r5
   25554:	f00c fa65 	bl	31a22 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   25558:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2555a:	2318      	movs	r3, #24
      return 1;
   2555c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2555e:	fb03 7306 	mla	r3, r3, r6, r7
   25562:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   25564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   25568:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2556a:	429c      	cmp	r4, r3
   2556c:	d818      	bhi.n	255a0 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2556e:	fb00 bb0b 	mla	fp, r0, fp, fp
   25572:	44bb      	add	fp, r7
   25574:	f8db 0004 	ldr.w	r0, [fp, #4]
   25578:	464a      	mov	r2, r9
   2557a:	4428      	add	r0, r5
   2557c:	442c      	add	r4, r5
   2557e:	f00c fa50 	bl	31a22 <memcpy>
      if (NumBytes) {
   25582:	ebb4 040a 	subs.w	r4, r4, sl
   25586:	d0e8      	beq.n	2555a <SEGGER_RTT_WriteSkipNoLock+0x42>
   25588:	4622      	mov	r2, r4
   2558a:	f8db 0004 	ldr.w	r0, [fp, #4]
   2558e:	eb08 0109 	add.w	r1, r8, r9
   25592:	f00c fa46 	bl	31a22 <memcpy>
      return 1;
   25596:	e7e0      	b.n	2555a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   25598:	3b01      	subs	r3, #1
   2559a:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2559c:	42a3      	cmp	r3, r4
   2559e:	d2d1      	bcs.n	25544 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   255a0:	2000      	movs	r0, #0
   255a2:	e7df      	b.n	25564 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   255a4:	20030df8 	.word	0x20030df8

000255a8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   255a8:	2218      	movs	r2, #24
   255aa:	4b03      	ldr	r3, [pc, #12]	; (255b8 <SEGGER_RTT_HasDataUp+0x10>)
   255ac:	fb02 3300 	mla	r3, r2, r0, r3
   255b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   255b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   255b4:	1a80      	subs	r0, r0, r2
   255b6:	4770      	bx	lr
   255b8:	20030df8 	.word	0x20030df8

000255bc <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   255bc:	4b01      	ldr	r3, [pc, #4]	; (255c4 <z_impl_z_errno+0x8>)
   255be:	6898      	ldr	r0, [r3, #8]
}
   255c0:	3084      	adds	r0, #132	; 0x84
   255c2:	4770      	bx	lr
   255c4:	20030ea0 	.word	0x20030ea0

000255c8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   255c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   255cc:	4606      	mov	r6, r0
   255ce:	b086      	sub	sp, #24
   255d0:	460f      	mov	r7, r1
	__asm__ volatile(
   255d2:	f04f 0320 	mov.w	r3, #32
   255d6:	f3ef 8811 	mrs	r8, BASEPRI
   255da:	f383 8812 	msr	BASEPRI_MAX, r3
   255de:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   255e2:	f001 f8b5 	bl	26750 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   255e6:	2400      	movs	r4, #0
   255e8:	2e04      	cmp	r6, #4
   255ea:	bf96      	itet	ls
   255ec:	4b21      	ldrls	r3, [pc, #132]	; (25674 <z_fatal_error+0xac>)
   255ee:	4b22      	ldrhi	r3, [pc, #136]	; (25678 <z_fatal_error+0xb0>)
   255f0:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   255f4:	4605      	mov	r5, r0
   255f6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   255fa:	4b20      	ldr	r3, [pc, #128]	; (2567c <z_fatal_error+0xb4>)
   255fc:	2201      	movs	r2, #1
   255fe:	e9cd 4301 	strd	r4, r3, [sp, #4]
   25602:	4620      	mov	r0, r4
   25604:	4623      	mov	r3, r4
   25606:	491e      	ldr	r1, [pc, #120]	; (25680 <z_fatal_error+0xb8>)
   25608:	9603      	str	r6, [sp, #12]
   2560a:	9400      	str	r4, [sp, #0]
   2560c:	f00b fc40 	bl	30e90 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   25610:	b16f      	cbz	r7, 2562e <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   25612:	69fb      	ldr	r3, [r7, #28]
   25614:	f3c3 0308 	ubfx	r3, r3, #0, #9
   25618:	b14b      	cbz	r3, 2562e <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   2561a:	4b1a      	ldr	r3, [pc, #104]	; (25684 <z_fatal_error+0xbc>)
   2561c:	2201      	movs	r2, #1
   2561e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   25622:	4620      	mov	r0, r4
   25624:	4623      	mov	r3, r4
   25626:	4916      	ldr	r1, [pc, #88]	; (25680 <z_fatal_error+0xb8>)
   25628:	9400      	str	r4, [sp, #0]
   2562a:	f00b fc31 	bl	30e90 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2562e:	b12d      	cbz	r5, 2563c <z_fatal_error+0x74>
   25630:	4628      	mov	r0, r5
   25632:	f00b fcf9 	bl	31028 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   25636:	b108      	cbz	r0, 2563c <z_fatal_error+0x74>
   25638:	7803      	ldrb	r3, [r0, #0]
   2563a:	b903      	cbnz	r3, 2563e <z_fatal_error+0x76>
		thread_name = "unknown";
   2563c:	4812      	ldr	r0, [pc, #72]	; (25688 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2563e:	4b13      	ldr	r3, [pc, #76]	; (2568c <z_fatal_error+0xc4>)
   25640:	2201      	movs	r2, #1
   25642:	9302      	str	r3, [sp, #8]
   25644:	2300      	movs	r3, #0
   25646:	e9cd 5003 	strd	r5, r0, [sp, #12]
   2564a:	e9cd 3300 	strd	r3, r3, [sp]
   2564e:	4618      	mov	r0, r3
   25650:	490b      	ldr	r1, [pc, #44]	; (25680 <z_fatal_error+0xb8>)
   25652:	f00b fc1d 	bl	30e90 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   25656:	4639      	mov	r1, r7
   25658:	4630      	mov	r0, r6
   2565a:	f7fd ff55 	bl	23508 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2565e:	f388 8811 	msr	BASEPRI, r8
   25662:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   25666:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   25668:	b006      	add	sp, #24
   2566a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2566e:	f7ec bb1b 	b.w	11ca8 <z_impl_k_thread_abort>
   25672:	bf00      	nop
   25674:	000343f0 	.word	0x000343f0
   25678:	000363b3 	.word	0x000363b3
   2567c:	0003895a 	.word	0x0003895a
   25680:	000332f4 	.word	0x000332f4
   25684:	00038982 	.word	0x00038982
   25688:	0003621e 	.word	0x0003621e
   2568c:	000389a3 	.word	0x000389a3

00025690 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25690:	4b0f      	ldr	r3, [pc, #60]	; (256d0 <z_sys_init_run_level+0x40>)
{
   25692:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   25694:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   25698:	3001      	adds	r0, #1
   2569a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2569e:	42a6      	cmp	r6, r4
   256a0:	d800      	bhi.n	256a4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   256a2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   256a4:	e9d4 3500 	ldrd	r3, r5, [r4]
   256a8:	4628      	mov	r0, r5
   256aa:	4798      	blx	r3
		if (dev != NULL) {
   256ac:	b16d      	cbz	r5, 256ca <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   256ae:	b138      	cbz	r0, 256c0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   256b0:	2800      	cmp	r0, #0
   256b2:	bfb8      	it	lt
   256b4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   256b6:	28ff      	cmp	r0, #255	; 0xff
   256b8:	bfa8      	it	ge
   256ba:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   256bc:	68eb      	ldr	r3, [r5, #12]
   256be:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   256c0:	68ea      	ldr	r2, [r5, #12]
   256c2:	7853      	ldrb	r3, [r2, #1]
   256c4:	f043 0301 	orr.w	r3, r3, #1
   256c8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   256ca:	3408      	adds	r4, #8
   256cc:	e7e7      	b.n	2569e <z_sys_init_run_level+0xe>
   256ce:	bf00      	nop
   256d0:	00034404 	.word	0x00034404

000256d4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   256d4:	2201      	movs	r2, #1
{
   256d6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   256d8:	4b09      	ldr	r3, [pc, #36]	; (25700 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   256da:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   256dc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   256de:	f7ff ffd7 	bl	25690 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   256e2:	f001 fb69 	bl	26db8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   256e6:	2004      	movs	r0, #4
   256e8:	f7ff ffd2 	bl	25690 <z_sys_init_run_level>

	z_init_static_threads();
   256ec:	f000 f98e 	bl	25a0c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   256f0:	f7e7 face 	bl	cc90 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   256f4:	4a03      	ldr	r2, [pc, #12]	; (25704 <bg_thread_main+0x30>)
   256f6:	7b13      	ldrb	r3, [r2, #12]
   256f8:	f023 0301 	bic.w	r3, r3, #1
   256fc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   256fe:	bd08      	pop	{r3, pc}
   25700:	20031fbf 	.word	0x20031fbf
   25704:	2000a4d8 	.word	0x2000a4d8

00025708 <z_bss_zero>:
{
   25708:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2570a:	4803      	ldr	r0, [pc, #12]	; (25718 <z_bss_zero+0x10>)
   2570c:	4a03      	ldr	r2, [pc, #12]	; (2571c <z_bss_zero+0x14>)
   2570e:	2100      	movs	r1, #0
   25710:	1a12      	subs	r2, r2, r0
   25712:	f00b fbcd 	bl	30eb0 <z_early_memset>
}
   25716:	bd08      	pop	{r3, pc}
   25718:	20009038 	.word	0x20009038
   2571c:	20031fd8 	.word	0x20031fd8

00025720 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   25720:	23a8      	movs	r3, #168	; 0xa8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   25722:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   25724:	4e14      	ldr	r6, [pc, #80]	; (25778 <z_init_cpu+0x58>)
{
   25726:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   25728:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   2572c:	4b13      	ldr	r3, [pc, #76]	; (2577c <z_init_cpu+0x5c>)
   2572e:	2201      	movs	r2, #1
   25730:	9305      	str	r3, [sp, #20]
   25732:	230f      	movs	r3, #15
   25734:	e9cd 3203 	strd	r3, r2, [sp, #12]
   25738:	2300      	movs	r3, #0
   2573a:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2573e:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   25740:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25744:	4d0e      	ldr	r5, [pc, #56]	; (25780 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   25746:	490f      	ldr	r1, [pc, #60]	; (25784 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   25748:	fb03 5500 	mla	r5, r3, r0, r5
{
   2574c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2574e:	fb02 1100 	mla	r1, r2, r0, r1
   25752:	4b0d      	ldr	r3, [pc, #52]	; (25788 <z_init_cpu+0x68>)
   25754:	4630      	mov	r0, r6
   25756:	9500      	str	r5, [sp, #0]
   25758:	f000 f8ee 	bl	25938 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2575c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   2575e:	752c      	strb	r4, [r5, #20]
   25760:	f023 0304 	bic.w	r3, r3, #4
   25764:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   25766:	4b09      	ldr	r3, [pc, #36]	; (2578c <z_init_cpu+0x6c>)
   25768:	3401      	adds	r4, #1
   2576a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2576e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   25770:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   25772:	b006      	add	sp, #24
   25774:	bd70      	pop	{r4, r5, r6, pc}
   25776:	bf00      	nop
   25778:	2000a430 	.word	0x2000a430
   2577c:	00038a05 	.word	0x00038a05
   25780:	20030ea0 	.word	0x20030ea0
   25784:	20054718 	.word	0x20054718
   25788:	00025ac5 	.word	0x00025ac5
   2578c:	20053f18 	.word	0x20053f18

00025790 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   25790:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25792:	2000      	movs	r0, #0
{
   25794:	b0b0      	sub	sp, #192	; 0xc0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   25796:	f7ff ff7b 	bl	25690 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2579a:	4b2f      	ldr	r3, [pc, #188]	; (25858 <z_cstart+0xc8>)
	uint32_t msp =
   2579c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   257a0:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   257a4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   257a8:	2400      	movs	r4, #0
   257aa:	23e0      	movs	r3, #224	; 0xe0
   257ac:	4d2b      	ldr	r5, [pc, #172]	; (2585c <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   257ae:	4e2c      	ldr	r6, [pc, #176]	; (25860 <z_cstart+0xd0>)
   257b0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   257b4:	77ec      	strb	r4, [r5, #31]
   257b6:	762c      	strb	r4, [r5, #24]
   257b8:	766c      	strb	r4, [r5, #25]
   257ba:	76ac      	strb	r4, [r5, #26]
   257bc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   257c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   257c2:	4f28      	ldr	r7, [pc, #160]	; (25864 <z_cstart+0xd4>)
   257c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   257c8:	626b      	str	r3, [r5, #36]	; 0x24
   257ca:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   257ce:	f7ec f9cf 	bl	11b70 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   257d2:	f7eb fd7f 	bl	112d4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   257d6:	f04f 33ff 	mov.w	r3, #4294967295
   257da:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   257dc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   257de:	f7ec fbff 	bl	11fe0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   257e2:	f7ec fa77 	bl	11cd4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   257e6:	f7e9 ff19 	bl	f61c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   257ea:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   257ee:	ad06      	add	r5, sp, #24
   257f0:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   257f2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   257f6:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	k_thread_system_pool_assign(dummy_thread);
   257fa:	f001 fabf 	bl	26d7c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   257fe:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   25800:	f00b fb3a 	bl	30e78 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   25804:	2001      	movs	r0, #1
   25806:	f7ff ff43 	bl	25690 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2580a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2580c:	4d16      	ldr	r5, [pc, #88]	; (25868 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2580e:	f7ff ff3f 	bl	25690 <z_sys_init_run_level>
	z_sched_init();
   25812:	f000 fef5 	bl	26600 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   25816:	4b15      	ldr	r3, [pc, #84]	; (2586c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   25818:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2581a:	9305      	str	r3, [sp, #20]
   2581c:	2301      	movs	r3, #1
   2581e:	4914      	ldr	r1, [pc, #80]	; (25870 <z_cstart+0xe0>)
   25820:	f44f 6280 	mov.w	r2, #1024	; 0x400
   25824:	e9cd 4303 	strd	r4, r3, [sp, #12]
   25828:	4628      	mov	r0, r5
   2582a:	463b      	mov	r3, r7
   2582c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   25830:	9400      	str	r4, [sp, #0]
   25832:	f000 f881 	bl	25938 <z_setup_new_thread>
   25836:	4606      	mov	r6, r0
   25838:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   2583a:	4628      	mov	r0, r5
   2583c:	f022 0204 	bic.w	r2, r2, #4
   25840:	736a      	strb	r2, [r5, #13]
   25842:	f00b fe1d 	bl	31480 <z_ready_thread>
	z_init_cpu(0);
   25846:	4620      	mov	r0, r4
   25848:	f7ff ff6a 	bl	25720 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2584c:	463a      	mov	r2, r7
   2584e:	4631      	mov	r1, r6
   25850:	4628      	mov	r0, r5
   25852:	f7eb fe91 	bl	11578 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   25856:	bf00      	nop
   25858:	20053f18 	.word	0x20053f18
   2585c:	e000ed00 	.word	0xe000ed00
   25860:	20030ea0 	.word	0x20030ea0
   25864:	000256d5 	.word	0x000256d5
   25868:	2000a4d8 	.word	0x2000a4d8
   2586c:	00038a0a 	.word	0x00038a0a
   25870:	20054858 	.word	0x20054858

00025874 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   25874:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   25876:	4c06      	ldr	r4, [pc, #24]	; (25890 <statics_init+0x1c>)
   25878:	4d06      	ldr	r5, [pc, #24]	; (25894 <statics_init+0x20>)
   2587a:	42ac      	cmp	r4, r5
   2587c:	d301      	bcc.n	25882 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2587e:	2000      	movs	r0, #0
   25880:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   25882:	4620      	mov	r0, r4
   25884:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   25888:	f00b fb16 	bl	30eb8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2588c:	3414      	adds	r4, #20
   2588e:	e7f4      	b.n	2587a <statics_init+0x6>
   25890:	20008bdc 	.word	0x20008bdc
   25894:	20008bf0 	.word	0x20008bf0

00025898 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   25898:	2000      	movs	r0, #0
{
   2589a:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2589c:	4c05      	ldr	r4, [pc, #20]	; (258b4 <init_mem_slab_module+0x1c>)
   2589e:	4d06      	ldr	r5, [pc, #24]	; (258b8 <init_mem_slab_module+0x20>)
   258a0:	42ac      	cmp	r4, r5
   258a2:	d300      	bcc.n	258a6 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   258a4:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   258a6:	4620      	mov	r0, r4
   258a8:	f00b fb78 	bl	30f9c <create_free_list>
		if (rc < 0) {
   258ac:	2800      	cmp	r0, #0
   258ae:	dbf9      	blt.n	258a4 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   258b0:	341c      	adds	r4, #28
   258b2:	e7f5      	b.n	258a0 <init_mem_slab_module+0x8>
   258b4:	20008b88 	.word	0x20008b88
   258b8:	20008bdc 	.word	0x20008bdc

000258bc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   258bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   258be:	460c      	mov	r4, r1
	__asm__ volatile(
   258c0:	f04f 0520 	mov.w	r5, #32
   258c4:	f3ef 8111 	mrs	r1, BASEPRI
   258c8:	f385 8812 	msr	BASEPRI_MAX, r5
   258cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   258d0:	6945      	ldr	r5, [r0, #20]
   258d2:	b15d      	cbz	r5, 258ec <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   258d4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   258d6:	682b      	ldr	r3, [r5, #0]
   258d8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   258da:	6983      	ldr	r3, [r0, #24]
   258dc:	3301      	adds	r3, #1
   258de:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   258e0:	2000      	movs	r0, #0
	__asm__ volatile(
   258e2:	f381 8811 	msr	BASEPRI, r1
   258e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   258ea:	e011      	b.n	25910 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   258ec:	ea52 0603 	orrs.w	r6, r2, r3
   258f0:	d103      	bne.n	258fa <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
   258f2:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   258f6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   258f8:	e7f3      	b.n	258e2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   258fa:	e9cd 2300 	strd	r2, r3, [sp]
   258fe:	4602      	mov	r2, r0
   25900:	3008      	adds	r0, #8
   25902:	f000 fd87 	bl	26414 <z_pend_curr>
		if (result == 0) {
   25906:	b918      	cbnz	r0, 25910 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   25908:	4b02      	ldr	r3, [pc, #8]	; (25914 <k_mem_slab_alloc+0x58>)
   2590a:	689b      	ldr	r3, [r3, #8]
   2590c:	695b      	ldr	r3, [r3, #20]
   2590e:	6023      	str	r3, [r4, #0]
}
   25910:	b002      	add	sp, #8
   25912:	bd70      	pop	{r4, r5, r6, pc}
   25914:	20030ea0 	.word	0x20030ea0

00025918 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   25918:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   2591a:	4604      	mov	r4, r0
   2591c:	b908      	cbnz	r0, 25922 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   2591e:	4b05      	ldr	r3, [pc, #20]	; (25934 <z_impl_k_thread_name_set+0x1c>)
   25920:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   25922:	221f      	movs	r2, #31
   25924:	f104 0062 	add.w	r0, r4, #98	; 0x62
   25928:	f00c fa1e 	bl	31d68 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2592c:	2000      	movs	r0, #0
   2592e:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   25932:	bd10      	pop	{r4, pc}
   25934:	20030ea0 	.word	0x20030ea0

00025938 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   25938:	b5f0      	push	{r4, r5, r6, r7, lr}
   2593a:	b085      	sub	sp, #20
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2593c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2593e:	f100 0558 	add.w	r5, r0, #88	; 0x58
   25942:	7307      	strb	r7, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   25944:	2704      	movs	r7, #4
   25946:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   2594a:	2500      	movs	r5, #0
{
   2594c:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
   2594e:	7347      	strb	r7, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25950:	3207      	adds	r2, #7

	thread_base->prio = priority;
   25952:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   25954:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   25958:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
	thread_base->prio = priority;
   2595c:	7387      	strb	r7, [r0, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   2595e:	188f      	adds	r7, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   25962:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   25966:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   25968:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2596a:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2596e:	9202      	str	r2, [sp, #8]
   25970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
{
   25972:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   25974:	9201      	str	r2, [sp, #4]
   25976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   25978:	9200      	str	r2, [sp, #0]
   2597a:	463a      	mov	r2, r7
   2597c:	f7eb fddc 	bl	11538 <arch_new_thread>
	new_thread->init_data = NULL;
   25980:	6565      	str	r5, [r4, #84]	; 0x54
	if (name != NULL) {
   25982:	b18e      	cbz	r6, 259a8 <z_setup_new_thread+0x70>
   25984:	221f      	movs	r2, #31
   25986:	4631      	mov	r1, r6
   25988:	f104 0062 	add.w	r0, r4, #98	; 0x62
   2598c:	f00c f9ec 	bl	31d68 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   25990:	f884 5081 	strb.w	r5, [r4, #129]	; 0x81
	if (!_current) {
   25994:	4b06      	ldr	r3, [pc, #24]	; (259b0 <z_setup_new_thread+0x78>)
   25996:	689b      	ldr	r3, [r3, #8]
   25998:	b10b      	cbz	r3, 2599e <z_setup_new_thread+0x66>
	new_thread->resource_pool = _current->resource_pool;
   2599a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
   2599e:	4638      	mov	r0, r7
   259a0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   259a4:	b005      	add	sp, #20
   259a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		new_thread->name[0] = '\0';
   259a8:	f884 6062 	strb.w	r6, [r4, #98]	; 0x62
   259ac:	e7f2      	b.n	25994 <z_setup_new_thread+0x5c>
   259ae:	bf00      	nop
   259b0:	20030ea0 	.word	0x20030ea0

000259b4 <z_impl_k_thread_create>:
{
   259b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   259b6:	2500      	movs	r5, #0
{
   259b8:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   259ba:	9505      	str	r5, [sp, #20]
   259bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   259be:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   259c2:	9504      	str	r5, [sp, #16]
   259c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   259c6:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   259c8:	9503      	str	r5, [sp, #12]
   259ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   259cc:	9502      	str	r5, [sp, #8]
   259ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   259d0:	9501      	str	r5, [sp, #4]
   259d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   259d4:	9500      	str	r5, [sp, #0]
   259d6:	f7ff ffaf 	bl	25938 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   259da:	f1b6 3fff 	cmp.w	r6, #4294967295
   259de:	bf08      	it	eq
   259e0:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   259e4:	d005      	beq.n	259f2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   259e6:	ea56 0307 	orrs.w	r3, r6, r7
   259ea:	d105      	bne.n	259f8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   259ec:	4620      	mov	r0, r4
   259ee:	f000 fd87 	bl	26500 <z_sched_start>
}
   259f2:	4620      	mov	r0, r4
   259f4:	b007      	add	sp, #28
   259f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   259f8:	463a      	mov	r2, r7
   259fa:	4633      	mov	r3, r6
   259fc:	4902      	ldr	r1, [pc, #8]	; (25a08 <z_impl_k_thread_create+0x54>)
   259fe:	f104 0018 	add.w	r0, r4, #24
   25a02:	f000 ff85 	bl	26910 <z_add_timeout>
   25a06:	e7f4      	b.n	259f2 <z_impl_k_thread_create+0x3e>
   25a08:	000313ed 	.word	0x000313ed

00025a0c <z_init_static_threads>:
{
   25a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a10:	4c29      	ldr	r4, [pc, #164]	; (25ab8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   25a12:	4d2a      	ldr	r5, [pc, #168]	; (25abc <z_init_static_threads+0xb0>)
{
   25a14:	b087      	sub	sp, #28
   25a16:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   25a18:	42ae      	cmp	r6, r5
   25a1a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   25a1e:	d30f      	bcc.n	25a40 <z_init_static_threads+0x34>
	k_sched_lock();
   25a20:	f000 fdbe 	bl	265a0 <k_sched_lock>
   25a24:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25a28:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   25a2c:	4c22      	ldr	r4, [pc, #136]	; (25ab8 <z_init_static_threads+0xac>)
   25a2e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 25ac0 <z_init_static_threads+0xb4>
   25a32:	42ac      	cmp	r4, r5
   25a34:	d320      	bcc.n	25a78 <z_init_static_threads+0x6c>
}
   25a36:	b007      	add	sp, #28
   25a38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25a3c:	f000 bdc4 	b.w	265c8 <k_sched_unlock>
		z_setup_new_thread(
   25a40:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25a44:	9305      	str	r3, [sp, #20]
   25a46:	f854 3c10 	ldr.w	r3, [r4, #-16]
   25a4a:	9304      	str	r3, [sp, #16]
   25a4c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25a50:	9303      	str	r3, [sp, #12]
   25a52:	f854 3c18 	ldr.w	r3, [r4, #-24]
   25a56:	9302      	str	r3, [sp, #8]
   25a58:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   25a5c:	9301      	str	r3, [sp, #4]
   25a5e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25a62:	9300      	str	r3, [sp, #0]
   25a64:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   25a68:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   25a6c:	f7ff ff64 	bl	25938 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25a70:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25a74:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   25a76:	e7ce      	b.n	25a16 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   25a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25a7a:	1c5a      	adds	r2, r3, #1
   25a7c:	d00d      	beq.n	25a9a <z_init_static_threads+0x8e>
   25a7e:	2100      	movs	r1, #0
   25a80:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   25a82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25a86:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25a8a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   25a8e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25a92:	d104      	bne.n	25a9e <z_init_static_threads+0x92>
	z_sched_start(thread);
   25a94:	4640      	mov	r0, r8
   25a96:	f000 fd33 	bl	26500 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   25a9a:	3430      	adds	r4, #48	; 0x30
   25a9c:	e7c9      	b.n	25a32 <z_init_static_threads+0x26>
   25a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25aa2:	2300      	movs	r3, #0
   25aa4:	f7e3 fa4c 	bl	8f40 <__aeabi_uldivmod>
   25aa8:	4602      	mov	r2, r0
   25aaa:	460b      	mov	r3, r1
   25aac:	f108 0018 	add.w	r0, r8, #24
   25ab0:	4649      	mov	r1, r9
   25ab2:	f000 ff2d 	bl	26910 <z_add_timeout>
   25ab6:	e7f0      	b.n	25a9a <z_init_static_threads+0x8e>
   25ab8:	00032e74 	.word	0x00032e74
   25abc:	00033114 	.word	0x00033114
   25ac0:	000313ed 	.word	0x000313ed

00025ac4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   25ac4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   25ac6:	4c0b      	ldr	r4, [pc, #44]	; (25af4 <idle+0x30>)
   25ac8:	4d0b      	ldr	r5, [pc, #44]	; (25af8 <idle+0x34>)
	__asm__ volatile(
   25aca:	f04f 0220 	mov.w	r2, #32
   25ace:	f3ef 8311 	mrs	r3, BASEPRI
   25ad2:	f382 8812 	msr	BASEPRI_MAX, r2
   25ad6:	f3bf 8f6f 	isb	sy
   25ada:	f00b fd98 	bl	3160e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25ade:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   25ae0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25ae2:	b913      	cbnz	r3, 25aea <idle+0x26>
	arch_cpu_idle();
   25ae4:	f7eb fbfc 	bl	112e0 <arch_cpu_idle>
}
   25ae8:	e7ef      	b.n	25aca <idle+0x6>
   25aea:	f7eb f965 	bl	10db8 <pm_system_suspend>
   25aee:	2800      	cmp	r0, #0
   25af0:	d1eb      	bne.n	25aca <idle+0x6>
   25af2:	e7f7      	b.n	25ae4 <idle+0x20>
   25af4:	20030ea0 	.word	0x20030ea0
   25af8:	20031fbf 	.word	0x20031fbf

00025afc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25b00:	4604      	mov	r4, r0
   25b02:	4617      	mov	r7, r2
   25b04:	461e      	mov	r6, r3
   25b06:	f04f 0320 	mov.w	r3, #32
   25b0a:	f3ef 8811 	mrs	r8, BASEPRI
   25b0e:	f383 8812 	msr	BASEPRI_MAX, r3
   25b12:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25b16:	68c3      	ldr	r3, [r0, #12]
   25b18:	4a33      	ldr	r2, [pc, #204]	; (25be8 <z_impl_k_mutex_lock+0xec>)
   25b1a:	b17b      	cbz	r3, 25b3c <z_impl_k_mutex_lock+0x40>
   25b1c:	6880      	ldr	r0, [r0, #8]
   25b1e:	6891      	ldr	r1, [r2, #8]
   25b20:	4288      	cmp	r0, r1
   25b22:	d019      	beq.n	25b58 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25b24:	ea57 0306 	orrs.w	r3, r7, r6
   25b28:	d118      	bne.n	25b5c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   25b2a:	f388 8811 	msr	BASEPRI, r8
   25b2e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25b32:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25b36:	b002      	add	sp, #8
   25b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   25b3c:	6891      	ldr	r1, [r2, #8]
   25b3e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   25b42:	3301      	adds	r3, #1
   25b44:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25b46:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   25b48:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   25b4a:	60a3      	str	r3, [r4, #8]
   25b4c:	f388 8811 	msr	BASEPRI, r8
   25b50:	f3bf 8f6f 	isb	sy
		return 0;
   25b54:	2000      	movs	r0, #0
   25b56:	e7ee      	b.n	25b36 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   25b58:	6921      	ldr	r1, [r4, #16]
   25b5a:	e7f2      	b.n	25b42 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   25b5c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25b60:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   25b64:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25b68:	4299      	cmp	r1, r3
   25b6a:	bfa8      	it	ge
   25b6c:	4619      	movge	r1, r3
   25b6e:	4291      	cmp	r1, r2
   25b70:	bfb8      	it	lt
   25b72:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   25b74:	428b      	cmp	r3, r1
   25b76:	dd2e      	ble.n	25bd6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   25b78:	f00b fa61 	bl	3103e <adjust_owner_prio.isra.0>
   25b7c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25b7e:	4622      	mov	r2, r4
   25b80:	4641      	mov	r1, r8
   25b82:	e9cd 7600 	strd	r7, r6, [sp]
   25b86:	4819      	ldr	r0, [pc, #100]	; (25bec <z_impl_k_mutex_lock+0xf0>)
   25b88:	f000 fc44 	bl	26414 <z_pend_curr>
	if (got_mutex == 0) {
   25b8c:	2800      	cmp	r0, #0
   25b8e:	d0e1      	beq.n	25b54 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   25b90:	f04f 0320 	mov.w	r3, #32
   25b94:	f3ef 8611 	mrs	r6, BASEPRI
   25b98:	f383 8812 	msr	BASEPRI_MAX, r3
   25b9c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   25ba0:	68a0      	ldr	r0, [r4, #8]
   25ba2:	b1d0      	cbz	r0, 25bda <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   25ba4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   25ba6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ba8:	429c      	cmp	r4, r3
   25baa:	d00a      	beq.n	25bc2 <z_impl_k_mutex_lock+0xc6>
   25bac:	b14b      	cbz	r3, 25bc2 <z_impl_k_mutex_lock+0xc6>
   25bae:	f993 300e 	ldrsb.w	r3, [r3, #14]
   25bb2:	4299      	cmp	r1, r3
   25bb4:	bfa8      	it	ge
   25bb6:	4619      	movge	r1, r3
   25bb8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25bbc:	4299      	cmp	r1, r3
   25bbe:	bfb8      	it	lt
   25bc0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   25bc2:	f00b fa3c 	bl	3103e <adjust_owner_prio.isra.0>
   25bc6:	b140      	cbz	r0, 25bda <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   25bc8:	4631      	mov	r1, r6
   25bca:	4808      	ldr	r0, [pc, #32]	; (25bec <z_impl_k_mutex_lock+0xf0>)
   25bcc:	f000 fc86 	bl	264dc <z_reschedule>
	return -EAGAIN;
   25bd0:	f06f 000a 	mvn.w	r0, #10
   25bd4:	e7af      	b.n	25b36 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   25bd6:	2500      	movs	r5, #0
   25bd8:	e7d1      	b.n	25b7e <z_impl_k_mutex_lock+0x82>
	if (resched) {
   25bda:	2d00      	cmp	r5, #0
   25bdc:	d1f4      	bne.n	25bc8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   25bde:	f386 8811 	msr	BASEPRI, r6
   25be2:	f3bf 8f6f 	isb	sy
   25be6:	e7f3      	b.n	25bd0 <z_impl_k_mutex_lock+0xd4>
   25be8:	20030ea0 	.word	0x20030ea0
   25bec:	20031fc0 	.word	0x20031fc0

00025bf0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   25bf0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   25bf2:	6883      	ldr	r3, [r0, #8]
{
   25bf4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   25bf6:	b373      	cbz	r3, 25c56 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   25bf8:	4a1a      	ldr	r2, [pc, #104]	; (25c64 <z_impl_k_mutex_unlock+0x74>)
   25bfa:	6892      	ldr	r2, [r2, #8]
   25bfc:	4293      	cmp	r3, r2
   25bfe:	d12d      	bne.n	25c5c <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25c00:	68c3      	ldr	r3, [r0, #12]
   25c02:	2b01      	cmp	r3, #1
   25c04:	d903      	bls.n	25c0e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   25c06:	3b01      	subs	r3, #1
   25c08:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   25c0a:	2000      	movs	r0, #0
}
   25c0c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   25c0e:	f04f 0320 	mov.w	r3, #32
   25c12:	f3ef 8511 	mrs	r5, BASEPRI
   25c16:	f383 8812 	msr	BASEPRI_MAX, r3
   25c1a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25c1e:	6901      	ldr	r1, [r0, #16]
   25c20:	6880      	ldr	r0, [r0, #8]
   25c22:	f00b fa0c 	bl	3103e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25c26:	4620      	mov	r0, r4
   25c28:	f00b fc61 	bl	314ee <z_unpend_first_thread>
	mutex->owner = new_owner;
   25c2c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25c2e:	b160      	cbz	r0, 25c4a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
   25c30:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25c34:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   25c36:	2200      	movs	r2, #0
   25c38:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		z_ready_thread(new_owner);
   25c3c:	f00b fc20 	bl	31480 <z_ready_thread>
		z_reschedule(&lock, key);
   25c40:	4629      	mov	r1, r5
   25c42:	4809      	ldr	r0, [pc, #36]	; (25c68 <z_impl_k_mutex_unlock+0x78>)
   25c44:	f000 fc4a 	bl	264dc <z_reschedule>
   25c48:	e7df      	b.n	25c0a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   25c4a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25c4c:	f385 8811 	msr	BASEPRI, r5
   25c50:	f3bf 8f6f 	isb	sy
   25c54:	e7d9      	b.n	25c0a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   25c56:	f06f 0015 	mvn.w	r0, #21
   25c5a:	e7d7      	b.n	25c0c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   25c5c:	f04f 30ff 	mov.w	r0, #4294967295
   25c60:	e7d4      	b.n	25c0c <z_impl_k_mutex_unlock+0x1c>
   25c62:	bf00      	nop
   25c64:	20030ea0 	.word	0x20030ea0
   25c68:	20031fc0 	.word	0x20031fc0

00025c6c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25c6e:	4611      	mov	r1, r2
	__asm__ volatile(
   25c70:	f04f 0220 	mov.w	r2, #32
   25c74:	f3ef 8511 	mrs	r5, BASEPRI
   25c78:	f382 8812 	msr	BASEPRI_MAX, r2
   25c7c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   25c80:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25c82:	b19c      	cbz	r4, 25cac <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c84:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25c86:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c88:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25c8c:	4294      	cmp	r4, r2
	list->head = node;
   25c8e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   25c90:	bf08      	it	eq
   25c92:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25c94:	2101      	movs	r1, #1
   25c96:	4620      	mov	r0, r4
   25c98:	f00b fa47 	bl	3112a <z_queue_node_peek>
   25c9c:	4604      	mov	r4, r0
	__asm__ volatile(
   25c9e:	f385 8811 	msr	BASEPRI, r5
   25ca2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25ca6:	4620      	mov	r0, r4
   25ca8:	b003      	add	sp, #12
   25caa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25cac:	ea51 0203 	orrs.w	r2, r1, r3
   25cb0:	d0f5      	beq.n	25c9e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25cb2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25cb6:	e9cd 1300 	strd	r1, r3, [sp]
   25cba:	4610      	mov	r0, r2
   25cbc:	4629      	mov	r1, r5
   25cbe:	f000 fba9 	bl	26414 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   25cc2:	2800      	cmp	r0, #0
   25cc4:	d1ef      	bne.n	25ca6 <z_impl_k_queue_get+0x3a>
   25cc6:	4b02      	ldr	r3, [pc, #8]	; (25cd0 <z_impl_k_queue_get+0x64>)
   25cc8:	689b      	ldr	r3, [r3, #8]
   25cca:	695c      	ldr	r4, [r3, #20]
   25ccc:	e7eb      	b.n	25ca6 <z_impl_k_queue_get+0x3a>
   25cce:	bf00      	nop
   25cd0:	20030ea0 	.word	0x20030ea0

00025cd4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25cd4:	b538      	push	{r3, r4, r5, lr}
   25cd6:	4604      	mov	r4, r0
	__asm__ volatile(
   25cd8:	f04f 0320 	mov.w	r3, #32
   25cdc:	f3ef 8511 	mrs	r5, BASEPRI
   25ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   25ce4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25ce8:	f00b fc01 	bl	314ee <z_unpend_first_thread>

	if (thread != NULL) {
   25cec:	b150      	cbz	r0, 25d04 <z_impl_k_sem_give+0x30>
   25cee:	2200      	movs	r2, #0
   25cf0:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25cf4:	f00b fbc4 	bl	31480 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25cf8:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25cfe:	4807      	ldr	r0, [pc, #28]	; (25d1c <z_impl_k_sem_give+0x48>)
   25d00:	f000 bbec 	b.w	264dc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25d04:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25d08:	429a      	cmp	r2, r3
   25d0a:	bf18      	it	ne
   25d0c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25d0e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25d10:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25d12:	f104 0010 	add.w	r0, r4, #16
   25d16:	f00b fe3b 	bl	31990 <z_handle_obj_poll_events>
}
   25d1a:	e7ed      	b.n	25cf8 <z_impl_k_sem_give+0x24>
   25d1c:	20031fc0 	.word	0x20031fc0

00025d20 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25d20:	b513      	push	{r0, r1, r4, lr}
   25d22:	f04f 0420 	mov.w	r4, #32
   25d26:	f3ef 8111 	mrs	r1, BASEPRI
   25d2a:	f384 8812 	msr	BASEPRI_MAX, r4
   25d2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25d32:	6884      	ldr	r4, [r0, #8]
   25d34:	b144      	cbz	r4, 25d48 <z_impl_k_sem_take+0x28>
		sem->count--;
   25d36:	3c01      	subs	r4, #1
   25d38:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   25d3a:	f381 8811 	msr	BASEPRI, r1
   25d3e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25d42:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25d44:	b002      	add	sp, #8
   25d46:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25d48:	ea52 0403 	orrs.w	r4, r2, r3
   25d4c:	d106      	bne.n	25d5c <z_impl_k_sem_take+0x3c>
   25d4e:	f381 8811 	msr	BASEPRI, r1
   25d52:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25d56:	f06f 000f 	mvn.w	r0, #15
   25d5a:	e7f3      	b.n	25d44 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25d5c:	e9cd 2300 	strd	r2, r3, [sp]
   25d60:	4602      	mov	r2, r0
   25d62:	4802      	ldr	r0, [pc, #8]	; (25d6c <z_impl_k_sem_take+0x4c>)
   25d64:	f000 fb56 	bl	26414 <z_pend_curr>
	return ret;
   25d68:	e7ec      	b.n	25d44 <z_impl_k_sem_take+0x24>
   25d6a:	bf00      	nop
   25d6c:	20031fc0 	.word	0x20031fc0

00025d70 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25d72:	2400      	movs	r4, #0
   25d74:	4b08      	ldr	r3, [pc, #32]	; (25d98 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	struct k_work_queue_config cfg = {
   25d7a:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25d7c:	ab02      	add	r3, sp, #8
   25d7e:	9300      	str	r3, [sp, #0]
   25d80:	4906      	ldr	r1, [pc, #24]	; (25d9c <k_sys_work_q_init+0x2c>)
   25d82:	f04f 33ff 	mov.w	r3, #4294967295
   25d86:	4806      	ldr	r0, [pc, #24]	; (25da0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25d88:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25d8c:	f000 f924 	bl	25fd8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25d90:	4620      	mov	r0, r4
   25d92:	b004      	add	sp, #16
   25d94:	bd10      	pop	{r4, pc}
   25d96:	bf00      	nop
   25d98:	00038a12 	.word	0x00038a12
   25d9c:	20054c58 	.word	0x20054c58
   25da0:	2000a580 	.word	0x2000a580

00025da4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25da8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   25daa:	f04f 38ff 	mov.w	r8, #4294967295
   25dae:	f04f 39ff 	mov.w	r9, #4294967295
	return list->head;
   25db2:	4e48      	ldr	r6, [pc, #288]	; (25ed4 <work_queue_main+0x130>)
{
   25db4:	b085      	sub	sp, #20
	__asm__ volatile(
   25db6:	f04f 0320 	mov.w	r3, #32
   25dba:	f3ef 8711 	mrs	r7, BASEPRI
   25dbe:	f383 8812 	msr	BASEPRI_MAX, r3
   25dc2:	f3bf 8f6f 	isb	sy
   25dc6:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
Z_GENLIST_GET(slist, snode)
   25dca:	b98d      	cbnz	r5, 25df0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   25dcc:	2102      	movs	r1, #2
   25dce:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   25dd2:	f00b f9e7 	bl	311a4 <flag_test_and_clear>
   25dd6:	2800      	cmp	r0, #0
   25dd8:	d143      	bne.n	25e62 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   25dda:	2300      	movs	r3, #0
   25ddc:	4639      	mov	r1, r7
   25dde:	e9cd 8900 	strd	r8, r9, [sp]
   25de2:	9302      	str	r3, [sp, #8]
   25de4:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
   25de8:	483b      	ldr	r0, [pc, #236]	; (25ed8 <work_queue_main+0x134>)
   25dea:	f000 fd17 	bl	2681c <z_sched_wait>
			continue;
   25dee:	e7e2      	b.n	25db6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25df0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
	return node->next;
   25df4:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25df6:	4295      	cmp	r5, r2
	list->head = node;
   25df8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	list->tail = node;
   25dfc:	bf08      	it	eq
   25dfe:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
	*flagp |= BIT(bit);
   25e02:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   25e06:	f043 0302 	orr.w	r3, r3, #2
   25e0a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	*flagp &= ~BIT(bit);
   25e0e:	68eb      	ldr	r3, [r5, #12]
   25e10:	f023 0304 	bic.w	r3, r3, #4
   25e14:	f043 0301 	orr.w	r3, r3, #1
   25e18:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   25e1a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   25e1c:	f387 8811 	msr	BASEPRI, r7
   25e20:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   25e24:	4628      	mov	r0, r5
   25e26:	4798      	blx	r3
	__asm__ volatile(
   25e28:	f04f 0320 	mov.w	r3, #32
   25e2c:	f3ef 8b11 	mrs	fp, BASEPRI
   25e30:	f383 8812 	msr	BASEPRI_MAX, r3
   25e34:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   25e38:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25e3a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   25e3c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25e40:	d419      	bmi.n	25e76 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   25e42:	60ea      	str	r2, [r5, #12]
   25e44:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   25e48:	f023 0302 	bic.w	r3, r3, #2
   25e4c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	__asm__ volatile(
   25e50:	f38b 8811 	msr	BASEPRI, fp
   25e54:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25e58:	05db      	lsls	r3, r3, #23
   25e5a:	d4ac      	bmi.n	25db6 <work_queue_main+0x12>
	z_impl_k_yield();
   25e5c:	f000 fbdc 	bl	26618 <z_impl_k_yield>
}
   25e60:	e7a9      	b.n	25db6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25e62:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25e66:	2200      	movs	r2, #0
   25e68:	2101      	movs	r1, #1
   25e6a:	4628      	mov	r0, r5
   25e6c:	f00b fb95 	bl	3159a <z_sched_wake>
   25e70:	2800      	cmp	r0, #0
   25e72:	d1f8      	bne.n	25e66 <work_queue_main+0xc2>
   25e74:	e7b1      	b.n	25dda <work_queue_main+0x36>
	return list->head;
   25e76:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   25e78:	f023 0303 	bic.w	r3, r3, #3
   25e7c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25e7e:	2800      	cmp	r0, #0
   25e80:	d0e0      	beq.n	25e44 <work_queue_main+0xa0>
	return node->next;
   25e82:	2700      	movs	r7, #0
	parent->next = child;
   25e84:	463b      	mov	r3, r7
	return node->next;
   25e86:	f8d0 a000 	ldr.w	sl, [r0]
   25e8a:	2800      	cmp	r0, #0
   25e8c:	d0da      	beq.n	25e44 <work_queue_main+0xa0>
		if (wc->work == work) {
   25e8e:	6842      	ldr	r2, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25e90:	4601      	mov	r1, r0
		if (wc->work == work) {
   25e92:	4295      	cmp	r5, r2
   25e94:	d10c      	bne.n	25eb0 <work_queue_main+0x10c>
   25e96:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   25e98:	b99f      	cbnz	r7, 25ec2 <work_queue_main+0x11e>
   25e9a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   25e9c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   25e9e:	4282      	cmp	r2, r0
   25ea0:	d100      	bne.n	25ea4 <work_queue_main+0x100>
	list->tail = node;
   25ea2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   25ea4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   25ea8:	f7ff ff14 	bl	25cd4 <z_impl_k_sem_give>
}
   25eac:	4639      	mov	r1, r7
   25eae:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25eb0:	f1ba 0f00 	cmp.w	sl, #0
   25eb4:	d00b      	beq.n	25ece <work_queue_main+0x12a>
	return node->next;
   25eb6:	f8da 2000 	ldr.w	r2, [sl]
   25eba:	4650      	mov	r0, sl
   25ebc:	460f      	mov	r7, r1
   25ebe:	4692      	mov	sl, r2
   25ec0:	e7e3      	b.n	25e8a <work_queue_main+0xe6>
	parent->next = child;
   25ec2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25ec4:	6872      	ldr	r2, [r6, #4]
   25ec6:	4282      	cmp	r2, r0
	list->tail = node;
   25ec8:	bf08      	it	eq
   25eca:	6077      	streq	r7, [r6, #4]
}
   25ecc:	e7ea      	b.n	25ea4 <work_queue_main+0x100>
   25ece:	4652      	mov	r2, sl
   25ed0:	e7f3      	b.n	25eba <work_queue_main+0x116>
   25ed2:	bf00      	nop
   25ed4:	20030ec8 	.word	0x20030ec8
   25ed8:	20031fc0 	.word	0x20031fc0

00025edc <cancel_sync_locked>:
{
   25edc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25ede:	68c3      	ldr	r3, [r0, #12]
{
   25ee0:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   25ee2:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   25ee6:	079b      	lsls	r3, r3, #30
{
   25ee8:	460c      	mov	r4, r1
	if (ret) {
   25eea:	d50d      	bpl.n	25f08 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25eec:	2201      	movs	r2, #1
   25eee:	2100      	movs	r1, #0
   25ef0:	f104 0008 	add.w	r0, r4, #8
   25ef4:	f00b f946 	bl	31184 <z_impl_k_sem_init>
	parent->next = child;
   25ef8:	2300      	movs	r3, #0
   25efa:	6023      	str	r3, [r4, #0]
	return list->tail;
   25efc:	4b05      	ldr	r3, [pc, #20]	; (25f14 <cancel_sync_locked+0x38>)
	canceler->work = work;
   25efe:	6065      	str	r5, [r4, #4]
   25f00:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25f02:	b91a      	cbnz	r2, 25f0c <cancel_sync_locked+0x30>
	list->head = node;
   25f04:	e9c3 4400 	strd	r4, r4, [r3]
}
   25f08:	4630      	mov	r0, r6
   25f0a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   25f0c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25f0e:	605c      	str	r4, [r3, #4]
}
   25f10:	e7fa      	b.n	25f08 <cancel_sync_locked+0x2c>
   25f12:	bf00      	nop
   25f14:	20030ec8 	.word	0x20030ec8

00025f18 <submit_to_queue_locked>:
{
   25f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   25f1a:	68c3      	ldr	r3, [r0, #12]
{
   25f1c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25f1e:	079a      	lsls	r2, r3, #30
{
   25f20:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25f22:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25f26:	d42c      	bmi.n	25f82 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25f28:	075b      	lsls	r3, r3, #29
   25f2a:	d41a      	bmi.n	25f62 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   25f2c:	680b      	ldr	r3, [r1, #0]
   25f2e:	b90b      	cbnz	r3, 25f34 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25f30:	6883      	ldr	r3, [r0, #8]
   25f32:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   25f34:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25f36:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   25f38:	bf42      	ittt	mi
   25f3a:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   25f3c:	2602      	movmi	r6, #2
			*queuep = work->queue;
   25f3e:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   25f40:	683d      	ldr	r5, [r7, #0]
		ret = 1;
   25f42:	bf58      	it	pl
   25f44:	2601      	movpl	r6, #1
	if (queue == NULL) {
   25f46:	2d00      	cmp	r5, #0
   25f48:	d03a      	beq.n	25fc0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25f4a:	4b1f      	ldr	r3, [pc, #124]	; (25fc8 <submit_to_queue_locked+0xb0>)
   25f4c:	689b      	ldr	r3, [r3, #8]
   25f4e:	42ab      	cmp	r3, r5
   25f50:	d00a      	beq.n	25f68 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   25f52:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25f56:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25f58:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25f5c:	d414      	bmi.n	25f88 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   25f5e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   25f62:	2300      	movs	r3, #0
   25f64:	603b      	str	r3, [r7, #0]
	return ret;
   25f66:	e025      	b.n	25fb4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25f68:	f00b f858 	bl	3101c <k_is_in_isr>
   25f6c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   25f70:	2800      	cmp	r0, #0
   25f72:	d1f0      	bne.n	25f56 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25f74:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25f76:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25f7a:	d5f0      	bpl.n	25f5e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   25f7c:	b152      	cbz	r2, 25f94 <submit_to_queue_locked+0x7c>
   25f7e:	075b      	lsls	r3, r3, #29
   25f80:	d408      	bmi.n	25f94 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   25f82:	f06f 060f 	mvn.w	r6, #15
   25f86:	e7ec      	b.n	25f62 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   25f88:	2a00      	cmp	r2, #0
   25f8a:	d1fa      	bne.n	25f82 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   25f8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25f90:	2b00      	cmp	r3, #0
   25f92:	d1f6      	bne.n	25f82 <submit_to_queue_locked+0x6a>
	parent->next = child;
   25f94:	2300      	movs	r3, #0
   25f96:	6023      	str	r3, [r4, #0]
	return list->tail;
   25f98:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
Z_GENLIST_APPEND(slist, snode)
   25f9c:	b963      	cbnz	r3, 25fb8 <submit_to_queue_locked+0xa0>
	list->head = node;
   25f9e:	e9c5 442a 	strd	r4, r4, [r5, #168]	; 0xa8
		(void)notify_queue_locked(queue);
   25fa2:	4628      	mov	r0, r5
   25fa4:	f00b f917 	bl	311d6 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25fa8:	68e3      	ldr	r3, [r4, #12]
   25faa:	f043 0304 	orr.w	r3, r3, #4
   25fae:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25fb0:	683b      	ldr	r3, [r7, #0]
   25fb2:	60a3      	str	r3, [r4, #8]
}
   25fb4:	4630      	mov	r0, r6
   25fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25fb8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25fba:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
}
   25fbe:	e7f0      	b.n	25fa2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   25fc0:	f06f 0615 	mvn.w	r6, #21
   25fc4:	e7cd      	b.n	25f62 <submit_to_queue_locked+0x4a>
   25fc6:	bf00      	nop
   25fc8:	20030ea0 	.word	0x20030ea0

00025fcc <k_work_submit>:
{
   25fcc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   25fce:	4801      	ldr	r0, [pc, #4]	; (25fd4 <k_work_submit+0x8>)
   25fd0:	f00b b987 	b.w	312e2 <k_work_submit_to_queue>
   25fd4:	2000a580 	.word	0x2000a580

00025fd8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   25fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   25fda:	4604      	mov	r4, r0
	list->head = NULL;
   25fdc:	2000      	movs	r0, #0
   25fde:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   25fe0:	e9c4 002a 	strd	r0, r0, [r4, #168]	; 0xa8
   25fe4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   25fe6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	list->tail = (sys_dnode_t *)list;
   25fea:	e9c4 002c 	strd	r0, r0, [r4, #176]	; 0xb0
   25fee:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   25ff2:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   25ff6:	b31d      	cbz	r5, 26040 <k_work_queue_start+0x68>
   25ff8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   25ffa:	2800      	cmp	r0, #0
   25ffc:	f240 1001 	movw	r0, #257	; 0x101
   26000:	bf08      	it	eq
   26002:	2001      	moveq	r0, #1
	*flagp = flags;
   26004:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26008:	2000      	movs	r0, #0
   2600a:	f04f 36ff 	mov.w	r6, #4294967295
   2600e:	f04f 37ff 	mov.w	r7, #4294967295
   26012:	e9cd 3003 	strd	r3, r0, [sp, #12]
   26016:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2601a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2601e:	4620      	mov	r0, r4
   26020:	4b08      	ldr	r3, [pc, #32]	; (26044 <k_work_queue_start+0x6c>)
   26022:	9400      	str	r4, [sp, #0]
   26024:	f7ff fcc6 	bl	259b4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   26028:	b125      	cbz	r5, 26034 <k_work_queue_start+0x5c>
   2602a:	6829      	ldr	r1, [r5, #0]
   2602c:	b111      	cbz	r1, 26034 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2602e:	4620      	mov	r0, r4
   26030:	f7ff fc72 	bl	25918 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   26034:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   26036:	b009      	add	sp, #36	; 0x24
   26038:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2603c:	f00a bff6 	b.w	3102c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26040:	2001      	movs	r0, #1
   26042:	e7df      	b.n	26004 <k_work_queue_start+0x2c>
   26044:	00025da5 	.word	0x00025da5

00026048 <k_work_queue_drain>:

int k_work_queue_drain(struct k_work_q *queue,
		       bool plug)
{
   26048:	b530      	push	{r4, r5, lr}
   2604a:	460a      	mov	r2, r1
   2604c:	4604      	mov	r4, r0
   2604e:	b085      	sub	sp, #20
	__asm__ volatile(
   26050:	f04f 0320 	mov.w	r3, #32
   26054:	f3ef 8511 	mrs	r5, BASEPRI
   26058:	f383 8812 	msr	BASEPRI_MAX, r3
   2605c:	f3bf 8f6f 	isb	sy
	return *flagp;
   26060:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work_queue, drain, queue);

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (((flags_get(&queue->flags)
   26064:	f013 0f06 	tst.w	r3, #6
   26068:	d11d      	bne.n	260a6 <k_work_queue_drain+0x5e>
	      & (K_WORK_QUEUE_BUSY | K_WORK_QUEUE_DRAIN)) != 0U)
	    || plug
   2606a:	b1b1      	cbz	r1, 2609a <k_work_queue_drain+0x52>
	*flagp |= BIT(bit);
   2606c:	f043 030c 	orr.w	r3, r3, #12
   26070:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		flag_set(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
		if (plug) {
			flag_set(&queue->flags, K_WORK_QUEUE_PLUGGED_BIT);
		}

		notify_queue_locked(queue);
   26074:	4620      	mov	r0, r4
   26076:	f00b f8ae 	bl	311d6 <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   2607a:	2300      	movs	r3, #0
   2607c:	f04f 32ff 	mov.w	r2, #4294967295
   26080:	9302      	str	r3, [sp, #8]
   26082:	f04f 33ff 	mov.w	r3, #4294967295
   26086:	4629      	mov	r1, r5
   26088:	e9cd 2300 	strd	r2, r3, [sp]
   2608c:	480c      	ldr	r0, [pc, #48]	; (260c0 <k_work_queue_drain+0x78>)
   2608e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   26092:	f000 fbc3 	bl	2681c <z_sched_wait>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, drain, queue, ret);

	return ret;
}
   26096:	b005      	add	sp, #20
   26098:	bd30      	pop	{r4, r5, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   2609a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
   2609e:	b148      	cbz	r0, 260b4 <k_work_queue_drain+0x6c>
	*flagp |= BIT(bit);
   260a0:	f043 0304 	orr.w	r3, r3, #4
   260a4:	e7e4      	b.n	26070 <k_work_queue_drain+0x28>
   260a6:	f043 0104 	orr.w	r1, r3, #4
   260aa:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
		if (plug) {
   260ae:	2a00      	cmp	r2, #0
   260b0:	d0e0      	beq.n	26074 <k_work_queue_drain+0x2c>
   260b2:	e7db      	b.n	2606c <k_work_queue_drain+0x24>
	__asm__ volatile(
   260b4:	f385 8811 	msr	BASEPRI, r5
   260b8:	f3bf 8f6f 	isb	sy
	return ret;
   260bc:	e7eb      	b.n	26096 <k_work_queue_drain+0x4e>
   260be:	bf00      	nop
   260c0:	20031fc0 	.word	0x20031fc0

000260c4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   260c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   260c6:	9001      	str	r0, [sp, #4]
   260c8:	4608      	mov	r0, r1
	__asm__ volatile(
   260ca:	f04f 0120 	mov.w	r1, #32
   260ce:	f3ef 8411 	mrs	r4, BASEPRI
   260d2:	f381 8812 	msr	BASEPRI_MAX, r1
   260d6:	f3bf 8f6f 	isb	sy
	return *flagp;
   260da:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   260dc:	f011 0f0e 	tst.w	r1, #14
   260e0:	d116      	bne.n	26110 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   260e2:	ea53 0502 	orrs.w	r5, r3, r2
   260e6:	d108      	bne.n	260fa <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   260e8:	a901      	add	r1, sp, #4
   260ea:	f7ff ff15 	bl	25f18 <submit_to_queue_locked>
	__asm__ volatile(
   260ee:	f384 8811 	msr	BASEPRI, r4
   260f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   260f6:	b003      	add	sp, #12
   260f8:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   260fa:	f041 0108 	orr.w	r1, r1, #8
   260fe:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   26100:	9901      	ldr	r1, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26102:	3010      	adds	r0, #16
	dwork->queue = *queuep;
   26104:	6181      	str	r1, [r0, #24]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26106:	4903      	ldr	r1, [pc, #12]	; (26114 <k_work_schedule_for_queue+0x50>)
   26108:	f000 fc02 	bl	26910 <z_add_timeout>
	return ret;
   2610c:	2001      	movs	r0, #1
   2610e:	e7ee      	b.n	260ee <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   26110:	2000      	movs	r0, #0
   26112:	e7ec      	b.n	260ee <k_work_schedule_for_queue+0x2a>
   26114:	0003124b 	.word	0x0003124b

00026118 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26118:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2611a:	4801      	ldr	r0, [pc, #4]	; (26120 <k_work_schedule+0x8>)
   2611c:	f7ff bfd2 	b.w	260c4 <k_work_schedule_for_queue>
   26120:	2000a580 	.word	0x2000a580

00026124 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   26124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26126:	460c      	mov	r4, r1
   26128:	4616      	mov	r6, r2
   2612a:	461d      	mov	r5, r3
   2612c:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2612e:	f04f 0320 	mov.w	r3, #32
   26132:	f3ef 8711 	mrs	r7, BASEPRI
   26136:	f383 8812 	msr	BASEPRI_MAX, r3
   2613a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2613e:	4608      	mov	r0, r1
   26140:	f00b f83b 	bl	311ba <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26144:	ea55 0306 	orrs.w	r3, r5, r6
   26148:	d109      	bne.n	2615e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2614a:	4620      	mov	r0, r4
   2614c:	a901      	add	r1, sp, #4
   2614e:	f7ff fee3 	bl	25f18 <submit_to_queue_locked>
	__asm__ volatile(
   26152:	f387 8811 	msr	BASEPRI, r7
   26156:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2615a:	b003      	add	sp, #12
   2615c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2615e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26160:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   26164:	f043 0308 	orr.w	r3, r3, #8
   26168:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2616a:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2616c:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2616e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26170:	4902      	ldr	r1, [pc, #8]	; (2617c <k_work_reschedule_for_queue+0x58>)
   26172:	462b      	mov	r3, r5
   26174:	f000 fbcc 	bl	26910 <z_add_timeout>
	return ret;
   26178:	2001      	movs	r0, #1
   2617a:	e7ea      	b.n	26152 <k_work_reschedule_for_queue+0x2e>
   2617c:	0003124b 	.word	0x0003124b

00026180 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26180:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   26182:	4801      	ldr	r0, [pc, #4]	; (26188 <k_work_reschedule+0x8>)
   26184:	f7ff bfce 	b.w	26124 <k_work_reschedule_for_queue>
   26188:	2000a580 	.word	0x2000a580

0002618c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   2618c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2618e:	4d07      	ldr	r5, [pc, #28]	; (261ac <z_reset_time_slice+0x20>)
   26190:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   26192:	b154      	cbz	r4, 261aa <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   26194:	f7fc ffe2 	bl	2315c <sys_clock_elapsed>
   26198:	4b05      	ldr	r3, [pc, #20]	; (261b0 <z_reset_time_slice+0x24>)
   2619a:	4404      	add	r4, r0
   2619c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2619e:	6828      	ldr	r0, [r5, #0]
   261a0:	2100      	movs	r1, #0
	}
}
   261a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   261a6:	f00b ba42 	b.w	3162e <z_set_timeout_expiry>
}
   261aa:	bd38      	pop	{r3, r4, r5, pc}
   261ac:	20030ed8 	.word	0x20030ed8
   261b0:	20030ea0 	.word	0x20030ea0

000261b4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   261b4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   261b6:	4d0d      	ldr	r5, [pc, #52]	; (261ec <update_cache+0x38>)
   261b8:	462b      	mov	r3, r5
   261ba:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   261be:	429c      	cmp	r4, r3
   261c0:	d000      	beq.n	261c4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   261c2:	b904      	cbnz	r4, 261c6 <update_cache+0x12>
   261c4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   261c6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   261c8:	b938      	cbnz	r0, 261da <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   261ca:	7b5a      	ldrb	r2, [r3, #13]
   261cc:	06d2      	lsls	r2, r2, #27
   261ce:	d104      	bne.n	261da <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   261d0:	69a2      	ldr	r2, [r4, #24]
   261d2:	b912      	cbnz	r2, 261da <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   261d4:	89da      	ldrh	r2, [r3, #14]
   261d6:	2a7f      	cmp	r2, #127	; 0x7f
   261d8:	d805      	bhi.n	261e6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   261da:	429c      	cmp	r4, r3
   261dc:	d002      	beq.n	261e4 <update_cache+0x30>
			z_reset_time_slice(thread);
   261de:	4620      	mov	r0, r4
   261e0:	f7ff ffd4 	bl	2618c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   261e4:	4623      	mov	r3, r4
   261e6:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   261e8:	bd38      	pop	{r3, r4, r5, pc}
   261ea:	bf00      	nop
   261ec:	20030ea0 	.word	0x20030ea0

000261f0 <move_thread_to_end_of_prio_q>:
{
   261f0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   261f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   261f6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   261f8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   261fa:	7b43      	ldrb	r3, [r0, #13]
   261fc:	da04      	bge.n	26208 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   261fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26202:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   26204:	f00b f8d7 	bl	313b6 <sys_dlist_remove>
	return list->head == list;
   26208:	4a15      	ldr	r2, [pc, #84]	; (26260 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2620a:	7b4b      	ldrb	r3, [r1, #13]
   2620c:	4610      	mov	r0, r2
   2620e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26212:	734b      	strb	r3, [r1, #13]
   26214:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   26218:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2621a:	4283      	cmp	r3, r0
   2621c:	bf08      	it	eq
   2621e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26220:	b923      	cbnz	r3, 2622c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   26222:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   26226:	6021      	str	r1, [r4, #0]
	list->tail = node;
   26228:	6251      	str	r1, [r2, #36]	; 0x24
}
   2622a:	e00c      	b.n	26246 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   2622c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   26230:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26234:	42b5      	cmp	r5, r6
   26236:	d00e      	beq.n	26256 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26238:	42ae      	cmp	r6, r5
   2623a:	dd0c      	ble.n	26256 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2623c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2623e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   26242:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   26244:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   26246:	6890      	ldr	r0, [r2, #8]
}
   26248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2624c:	1a43      	subs	r3, r0, r1
   2624e:	4258      	negs	r0, r3
   26250:	4158      	adcs	r0, r3
   26252:	f7ff bfaf 	b.w	261b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26256:	429c      	cmp	r4, r3
   26258:	d0e3      	beq.n	26222 <move_thread_to_end_of_prio_q+0x32>
   2625a:	681b      	ldr	r3, [r3, #0]
   2625c:	e7e0      	b.n	26220 <move_thread_to_end_of_prio_q+0x30>
   2625e:	bf00      	nop
   26260:	20030ea0 	.word	0x20030ea0

00026264 <ready_thread>:
{
   26264:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   26266:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2626a:	7b42      	ldrb	r2, [r0, #13]
   2626c:	2b00      	cmp	r3, #0
   2626e:	db29      	blt.n	262c4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26270:	06d3      	lsls	r3, r2, #27
   26272:	d127      	bne.n	262c4 <ready_thread+0x60>
	return node->next != NULL;
   26274:	6983      	ldr	r3, [r0, #24]
   26276:	bb2b      	cbnz	r3, 262c4 <ready_thread+0x60>
	return list->head == list;
   26278:	4913      	ldr	r1, [pc, #76]	; (262c8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2627a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2627e:	7342      	strb	r2, [r0, #13]
   26280:	460a      	mov	r2, r1
   26282:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26286:	4294      	cmp	r4, r2
   26288:	bf18      	it	ne
   2628a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   2628c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2628e:	b923      	cbnz	r3, 2629a <ready_thread+0x36>
	node->prev = tail;
   26290:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   26294:	6020      	str	r0, [r4, #0]
	list->tail = node;
   26296:	6248      	str	r0, [r1, #36]	; 0x24
}
   26298:	e00c      	b.n	262b4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   2629a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2629e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   262a2:	42b5      	cmp	r5, r6
   262a4:	d00a      	beq.n	262bc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   262a6:	42ae      	cmp	r6, r5
   262a8:	dd08      	ble.n	262bc <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   262aa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   262ac:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   262b0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   262b2:	6058      	str	r0, [r3, #4]
		update_cache(0);
   262b4:	2000      	movs	r0, #0
}
   262b6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   262b8:	f7ff bf7c 	b.w	261b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   262bc:	42a3      	cmp	r3, r4
   262be:	d0e7      	beq.n	26290 <ready_thread+0x2c>
   262c0:	681b      	ldr	r3, [r3, #0]
   262c2:	e7e4      	b.n	2628e <ready_thread+0x2a>
}
   262c4:	bc70      	pop	{r4, r5, r6}
   262c6:	4770      	bx	lr
   262c8:	20030ea0 	.word	0x20030ea0

000262cc <unready_thread>:
{
   262cc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   262ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   262d2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   262d4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   262d6:	7b43      	ldrb	r3, [r0, #13]
   262d8:	da04      	bge.n	262e4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   262da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   262de:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   262e0:	f00b f869 	bl	313b6 <sys_dlist_remove>
	update_cache(thread == _current);
   262e4:	4b04      	ldr	r3, [pc, #16]	; (262f8 <unready_thread+0x2c>)
   262e6:	6898      	ldr	r0, [r3, #8]
   262e8:	1a43      	subs	r3, r0, r1
   262ea:	4258      	negs	r0, r3
   262ec:	4158      	adcs	r0, r3
}
   262ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   262f2:	f7ff bf5f 	b.w	261b4 <update_cache>
   262f6:	bf00      	nop
   262f8:	20030ea0 	.word	0x20030ea0

000262fc <pend_locked>:
{
   262fc:	b570      	push	{r4, r5, r6, lr}
   262fe:	4615      	mov	r5, r2
   26300:	461c      	mov	r4, r3
   26302:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26304:	f00b f894 	bl	31430 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26308:	f1b4 3fff 	cmp.w	r4, #4294967295
   2630c:	bf08      	it	eq
   2630e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26312:	d008      	beq.n	26326 <pend_locked+0x2a>
   26314:	462a      	mov	r2, r5
   26316:	4623      	mov	r3, r4
   26318:	f106 0018 	add.w	r0, r6, #24
   2631c:	4902      	ldr	r1, [pc, #8]	; (26328 <pend_locked+0x2c>)
}
   2631e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26322:	f000 baf5 	b.w	26910 <z_add_timeout>
   26326:	bd70      	pop	{r4, r5, r6, pc}
   26328:	000313ed 	.word	0x000313ed

0002632c <k_sched_time_slice_set>:
{
   2632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2632e:	4604      	mov	r4, r0
   26330:	460d      	mov	r5, r1
	__asm__ volatile(
   26332:	f04f 0320 	mov.w	r3, #32
   26336:	f3ef 8711 	mrs	r7, BASEPRI
   2633a:	f383 8812 	msr	BASEPRI_MAX, r3
   2633e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   26342:	2600      	movs	r6, #0
   26344:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26348:	f240 30e7 	movw	r0, #999	; 0x3e7
   2634c:	4631      	mov	r1, r6
   2634e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26352:	2300      	movs	r3, #0
   26354:	fbe4 010c 	umlal	r0, r1, r4, ip
   26358:	f7e2 fdf2 	bl	8f40 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2635c:	42b4      	cmp	r4, r6
   2635e:	dd02      	ble.n	26366 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   26360:	2802      	cmp	r0, #2
   26362:	bfb8      	it	lt
   26364:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26366:	4a07      	ldr	r2, [pc, #28]	; (26384 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   26368:	4b07      	ldr	r3, [pc, #28]	; (26388 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2636a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   2636c:	4a07      	ldr	r2, [pc, #28]	; (2638c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   2636e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   26370:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   26372:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   26374:	f7ff ff0a 	bl	2618c <z_reset_time_slice>
	__asm__ volatile(
   26378:	f387 8811 	msr	BASEPRI, r7
   2637c:	f3bf 8f6f 	isb	sy
}
   26380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26382:	bf00      	nop
   26384:	20030ed8 	.word	0x20030ed8
   26388:	20030ea0 	.word	0x20030ea0
   2638c:	20030ed4 	.word	0x20030ed4

00026390 <z_time_slice>:
{
   26390:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26392:	f04f 0320 	mov.w	r3, #32
   26396:	f3ef 8511 	mrs	r5, BASEPRI
   2639a:	f383 8812 	msr	BASEPRI_MAX, r3
   2639e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   263a2:	4b17      	ldr	r3, [pc, #92]	; (26400 <z_time_slice+0x70>)
   263a4:	4a17      	ldr	r2, [pc, #92]	; (26404 <z_time_slice+0x74>)
   263a6:	689c      	ldr	r4, [r3, #8]
   263a8:	6811      	ldr	r1, [r2, #0]
   263aa:	428c      	cmp	r4, r1
   263ac:	d107      	bne.n	263be <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   263ae:	4620      	mov	r0, r4
   263b0:	f7ff feec 	bl	2618c <z_reset_time_slice>
	__asm__ volatile(
   263b4:	f385 8811 	msr	BASEPRI, r5
   263b8:	f3bf 8f6f 	isb	sy
}
   263bc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   263be:	2100      	movs	r1, #0
   263c0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   263c2:	4a11      	ldr	r2, [pc, #68]	; (26408 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   263c4:	6812      	ldr	r2, [r2, #0]
   263c6:	b1c2      	cbz	r2, 263fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   263c8:	89e2      	ldrh	r2, [r4, #14]
   263ca:	2a7f      	cmp	r2, #127	; 0x7f
   263cc:	d815      	bhi.n	263fa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   263ce:	7b62      	ldrb	r2, [r4, #13]
   263d0:	06d2      	lsls	r2, r2, #27
   263d2:	d112      	bne.n	263fa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   263d4:	4a0d      	ldr	r2, [pc, #52]	; (2640c <z_time_slice+0x7c>)
   263d6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   263da:	6812      	ldr	r2, [r2, #0]
   263dc:	4291      	cmp	r1, r2
   263de:	db0c      	blt.n	263fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   263e0:	4a0b      	ldr	r2, [pc, #44]	; (26410 <z_time_slice+0x80>)
   263e2:	4294      	cmp	r4, r2
   263e4:	d009      	beq.n	263fa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   263e6:	691a      	ldr	r2, [r3, #16]
   263e8:	4282      	cmp	r2, r0
   263ea:	dc03      	bgt.n	263f4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   263ec:	4620      	mov	r0, r4
   263ee:	f7ff feff 	bl	261f0 <move_thread_to_end_of_prio_q>
   263f2:	e7dc      	b.n	263ae <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   263f4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   263f6:	611a      	str	r2, [r3, #16]
   263f8:	e7dc      	b.n	263b4 <z_time_slice+0x24>
   263fa:	2200      	movs	r2, #0
   263fc:	e7fb      	b.n	263f6 <z_time_slice+0x66>
   263fe:	bf00      	nop
   26400:	20030ea0 	.word	0x20030ea0
   26404:	20030ed0 	.word	0x20030ed0
   26408:	20030ed8 	.word	0x20030ed8
   2640c:	20030ed4 	.word	0x20030ed4
   26410:	2000a430 	.word	0x2000a430

00026414 <z_pend_curr>:
{
   26414:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   26416:	480c      	ldr	r0, [pc, #48]	; (26448 <z_pend_curr+0x34>)
   26418:	4d0c      	ldr	r5, [pc, #48]	; (2644c <z_pend_curr+0x38>)
   2641a:	6886      	ldr	r6, [r0, #8]
{
   2641c:	460c      	mov	r4, r1
	pending_current = _current;
   2641e:	602e      	str	r6, [r5, #0]
{
   26420:	4611      	mov	r1, r2
   26422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   26426:	f04f 0620 	mov.w	r6, #32
   2642a:	f3ef 8511 	mrs	r5, BASEPRI
   2642e:	f386 8812 	msr	BASEPRI_MAX, r6
   26432:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   26436:	6880      	ldr	r0, [r0, #8]
   26438:	f7ff ff60 	bl	262fc <pend_locked>
	ret = arch_swap(key);
   2643c:	4620      	mov	r0, r4
}
   2643e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26442:	f7eb b81b 	b.w	1147c <arch_swap>
   26446:	bf00      	nop
   26448:	20030ea0 	.word	0x20030ea0
   2644c:	20030ed0 	.word	0x20030ed0

00026450 <z_set_prio>:
{
   26450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26452:	4604      	mov	r4, r0
   26454:	f04f 0320 	mov.w	r3, #32
   26458:	f3ef 8611 	mrs	r6, BASEPRI
   2645c:	f383 8812 	msr	BASEPRI_MAX, r3
   26460:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   26464:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   26466:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26468:	06da      	lsls	r2, r3, #27
   2646a:	d119      	bne.n	264a0 <z_set_prio+0x50>
	return node->next != NULL;
   2646c:	6985      	ldr	r5, [r0, #24]
   2646e:	b9bd      	cbnz	r5, 264a0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26474:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26476:	f00a ff9e 	bl	313b6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2647a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2647c:	4a16      	ldr	r2, [pc, #88]	; (264d8 <z_set_prio+0x88>)
   2647e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26482:	7343      	strb	r3, [r0, #13]
   26484:	4613      	mov	r3, r2
				thread->base.prio = prio;
   26486:	7381      	strb	r1, [r0, #14]
   26488:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2648c:	4298      	cmp	r0, r3
   2648e:	bf18      	it	ne
   26490:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   26492:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26494:	b95d      	cbnz	r5, 264ae <z_set_prio+0x5e>
	node->prev = tail;
   26496:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   2649a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2649c:	6254      	str	r4, [r2, #36]	; 0x24
}
   2649e:	e011      	b.n	264c4 <z_set_prio+0x74>
   264a0:	2000      	movs	r0, #0
			thread->base.prio = prio;
   264a2:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
   264a4:	f386 8811 	msr	BASEPRI, r6
   264a8:	f3bf 8f6f 	isb	sy
}
   264ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   264ae:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   264b2:	42b9      	cmp	r1, r7
   264b4:	d00b      	beq.n	264ce <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   264b6:	428f      	cmp	r7, r1
   264b8:	dd09      	ble.n	264ce <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   264ba:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   264bc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   264c0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   264c2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   264c4:	2001      	movs	r0, #1
   264c6:	f7ff fe75 	bl	261b4 <update_cache>
   264ca:	2001      	movs	r0, #1
   264cc:	e7ea      	b.n	264a4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   264ce:	42a8      	cmp	r0, r5
   264d0:	d0e1      	beq.n	26496 <z_set_prio+0x46>
   264d2:	682d      	ldr	r5, [r5, #0]
   264d4:	e7de      	b.n	26494 <z_set_prio+0x44>
   264d6:	bf00      	nop
   264d8:	20030ea0 	.word	0x20030ea0

000264dc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   264dc:	b949      	cbnz	r1, 264f2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   264de:	f3ef 8005 	mrs	r0, IPSR
   264e2:	b930      	cbnz	r0, 264f2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   264e4:	4b05      	ldr	r3, [pc, #20]	; (264fc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   264e6:	69da      	ldr	r2, [r3, #28]
   264e8:	689b      	ldr	r3, [r3, #8]
   264ea:	429a      	cmp	r2, r3
   264ec:	d001      	beq.n	264f2 <z_reschedule+0x16>
   264ee:	f7ea bfc5 	b.w	1147c <arch_swap>
   264f2:	f381 8811 	msr	BASEPRI, r1
   264f6:	f3bf 8f6f 	isb	sy
}
   264fa:	4770      	bx	lr
   264fc:	20030ea0 	.word	0x20030ea0

00026500 <z_sched_start>:
{
   26500:	b510      	push	{r4, lr}
	__asm__ volatile(
   26502:	f04f 0220 	mov.w	r2, #32
   26506:	f3ef 8411 	mrs	r4, BASEPRI
   2650a:	f382 8812 	msr	BASEPRI_MAX, r2
   2650e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   26512:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   26514:	0751      	lsls	r1, r2, #29
   26516:	d404      	bmi.n	26522 <z_sched_start+0x22>
	__asm__ volatile(
   26518:	f384 8811 	msr	BASEPRI, r4
   2651c:	f3bf 8f6f 	isb	sy
}
   26520:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26522:	f022 0204 	bic.w	r2, r2, #4
   26526:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   26528:	f7ff fe9c 	bl	26264 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2652c:	4621      	mov	r1, r4
}
   2652e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   26532:	4801      	ldr	r0, [pc, #4]	; (26538 <z_sched_start+0x38>)
   26534:	f7ff bfd2 	b.w	264dc <z_reschedule>
   26538:	20031fc0 	.word	0x20031fc0

0002653c <z_impl_k_thread_suspend>:
{
   2653c:	b570      	push	{r4, r5, r6, lr}
   2653e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26540:	3018      	adds	r0, #24
   26542:	f00b f84e 	bl	315e2 <z_abort_timeout>
	__asm__ volatile(
   26546:	f04f 0320 	mov.w	r3, #32
   2654a:	f3ef 8611 	mrs	r6, BASEPRI
   2654e:	f383 8812 	msr	BASEPRI_MAX, r3
   26552:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   26556:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2655a:	7b63      	ldrb	r3, [r4, #13]
   2655c:	2a00      	cmp	r2, #0
   2655e:	da05      	bge.n	2656c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   26564:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26566:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26568:	f00a ff25 	bl	313b6 <sys_dlist_remove>
		update_cache(thread == _current);
   2656c:	4d0b      	ldr	r5, [pc, #44]	; (2659c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2656e:	7b63      	ldrb	r3, [r4, #13]
   26570:	68a8      	ldr	r0, [r5, #8]
   26572:	f043 0310 	orr.w	r3, r3, #16
   26576:	7363      	strb	r3, [r4, #13]
   26578:	1b03      	subs	r3, r0, r4
   2657a:	4258      	negs	r0, r3
   2657c:	4158      	adcs	r0, r3
   2657e:	f7ff fe19 	bl	261b4 <update_cache>
	__asm__ volatile(
   26582:	f386 8811 	msr	BASEPRI, r6
   26586:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2658a:	68ab      	ldr	r3, [r5, #8]
   2658c:	42a3      	cmp	r3, r4
   2658e:	d103      	bne.n	26598 <z_impl_k_thread_suspend+0x5c>
}
   26590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   26594:	f00a bfe7 	b.w	31566 <z_reschedule_unlocked>
}
   26598:	bd70      	pop	{r4, r5, r6, pc}
   2659a:	bf00      	nop
   2659c:	20030ea0 	.word	0x20030ea0

000265a0 <k_sched_lock>:
	__asm__ volatile(
   265a0:	f04f 0320 	mov.w	r3, #32
   265a4:	f3ef 8111 	mrs	r1, BASEPRI
   265a8:	f383 8812 	msr	BASEPRI_MAX, r3
   265ac:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   265b0:	4b04      	ldr	r3, [pc, #16]	; (265c4 <k_sched_lock+0x24>)
   265b2:	689a      	ldr	r2, [r3, #8]
   265b4:	7bd3      	ldrb	r3, [r2, #15]
   265b6:	3b01      	subs	r3, #1
   265b8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   265ba:	f381 8811 	msr	BASEPRI, r1
   265be:	f3bf 8f6f 	isb	sy
}
   265c2:	4770      	bx	lr
   265c4:	20030ea0 	.word	0x20030ea0

000265c8 <k_sched_unlock>:
{
   265c8:	b510      	push	{r4, lr}
	__asm__ volatile(
   265ca:	f04f 0320 	mov.w	r3, #32
   265ce:	f3ef 8411 	mrs	r4, BASEPRI
   265d2:	f383 8812 	msr	BASEPRI_MAX, r3
   265d6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   265da:	4b08      	ldr	r3, [pc, #32]	; (265fc <k_sched_unlock+0x34>)
		update_cache(0);
   265dc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   265de:	689a      	ldr	r2, [r3, #8]
   265e0:	7bd3      	ldrb	r3, [r2, #15]
   265e2:	3301      	adds	r3, #1
   265e4:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   265e6:	f7ff fde5 	bl	261b4 <update_cache>
	__asm__ volatile(
   265ea:	f384 8811 	msr	BASEPRI, r4
   265ee:	f3bf 8f6f 	isb	sy
}
   265f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   265f6:	f00a bfb6 	b.w	31566 <z_reschedule_unlocked>
   265fa:	bf00      	nop
   265fc:	20030ea0 	.word	0x20030ea0

00026600 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   26600:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   26602:	4b04      	ldr	r3, [pc, #16]	; (26614 <z_sched_init+0x14>)
   26604:	4608      	mov	r0, r1
   26606:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2660a:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2660e:	f7ff be8d 	b.w	2632c <k_sched_time_slice_set>
   26612:	bf00      	nop
   26614:	20030ea0 	.word	0x20030ea0

00026618 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   26618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2661a:	f04f 0320 	mov.w	r3, #32
   2661e:	f3ef 8511 	mrs	r5, BASEPRI
   26622:	f383 8812 	msr	BASEPRI_MAX, r3
   26626:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2662a:	4919      	ldr	r1, [pc, #100]	; (26690 <z_impl_k_yield+0x78>)
   2662c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2662e:	7b43      	ldrb	r3, [r0, #13]
   26630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26634:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   26636:	f00a febe 	bl	313b6 <sys_dlist_remove>
	return list->head == list;
   2663a:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   2663c:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2663e:	7b5a      	ldrb	r2, [r3, #13]
   26640:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26644:	735a      	strb	r2, [r3, #13]
   26646:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   2664a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2664c:	4282      	cmp	r2, r0
   2664e:	bf08      	it	eq
   26650:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26652:	b922      	cbnz	r2, 2665e <z_impl_k_yield+0x46>
	node->prev = tail;
   26654:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   26658:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2665a:	624b      	str	r3, [r1, #36]	; 0x24
}
   2665c:	e00c      	b.n	26678 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2665e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   26662:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   26666:	42be      	cmp	r6, r7
   26668:	d00e      	beq.n	26688 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2666a:	42b7      	cmp	r7, r6
   2666c:	dd0c      	ble.n	26688 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2666e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   26670:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26674:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26676:	6053      	str	r3, [r2, #4]
	update_cache(1);
   26678:	2001      	movs	r0, #1
   2667a:	f7ff fd9b 	bl	261b4 <update_cache>
   2667e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   26680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26684:	f7ea befa 	b.w	1147c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   26688:	42a2      	cmp	r2, r4
   2668a:	d0e3      	beq.n	26654 <z_impl_k_yield+0x3c>
   2668c:	6812      	ldr	r2, [r2, #0]
   2668e:	e7e0      	b.n	26652 <z_impl_k_yield+0x3a>
   26690:	20030ea0 	.word	0x20030ea0

00026694 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   26694:	ea50 0301 	orrs.w	r3, r0, r1
{
   26698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2669c:	4605      	mov	r5, r0
   2669e:	460e      	mov	r6, r1
	if (ticks == 0) {
   266a0:	d103      	bne.n	266aa <z_tick_sleep+0x16>
	z_impl_k_yield();
   266a2:	f7ff ffb9 	bl	26618 <z_impl_k_yield>
		k_yield();
		return 0;
   266a6:	2000      	movs	r0, #0
   266a8:	e02c      	b.n	26704 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   266aa:	1c83      	adds	r3, r0, #2
   266ac:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   266b0:	db2a      	blt.n	26708 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   266b2:	f00a ffd8 	bl	31666 <sys_clock_tick_get_32>
   266b6:	182c      	adds	r4, r5, r0
   266b8:	f04f 0320 	mov.w	r3, #32
   266bc:	f3ef 8811 	mrs	r8, BASEPRI
   266c0:	f383 8812 	msr	BASEPRI_MAX, r3
   266c4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   266c8:	4f11      	ldr	r7, [pc, #68]	; (26710 <z_tick_sleep+0x7c>)
   266ca:	4b12      	ldr	r3, [pc, #72]	; (26714 <z_tick_sleep+0x80>)
   266cc:	68b8      	ldr	r0, [r7, #8]
   266ce:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   266d0:	f7ff fdfc 	bl	262cc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   266d4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   266d6:	4910      	ldr	r1, [pc, #64]	; (26718 <z_tick_sleep+0x84>)
   266d8:	462a      	mov	r2, r5
   266da:	4633      	mov	r3, r6
   266dc:	3018      	adds	r0, #24
   266de:	f000 f917 	bl	26910 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   266e2:	68ba      	ldr	r2, [r7, #8]
   266e4:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   266e6:	7b53      	ldrb	r3, [r2, #13]
   266e8:	f043 0310 	orr.w	r3, r3, #16
   266ec:	7353      	strb	r3, [r2, #13]
   266ee:	f7ea fec5 	bl	1147c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   266f2:	f00a ffb8 	bl	31666 <sys_clock_tick_get_32>
   266f6:	1a20      	subs	r0, r4, r0
   266f8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   266fc:	2801      	cmp	r0, #1
   266fe:	f173 0300 	sbcs.w	r3, r3, #0
   26702:	dbd0      	blt.n	266a6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   26704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26708:	f06f 0401 	mvn.w	r4, #1
   2670c:	1a24      	subs	r4, r4, r0
   2670e:	e7d3      	b.n	266b8 <z_tick_sleep+0x24>
   26710:	20030ea0 	.word	0x20030ea0
   26714:	20030ed0 	.word	0x20030ed0
   26718:	000313ed 	.word	0x000313ed

0002671c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2671c:	f1b1 3fff 	cmp.w	r1, #4294967295
   26720:	bf08      	it	eq
   26722:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26726:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26728:	d106      	bne.n	26738 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2672a:	4b08      	ldr	r3, [pc, #32]	; (2674c <z_impl_k_sleep+0x30>)
   2672c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2672e:	f7ff ff05 	bl	2653c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   26732:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   26736:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   26738:	f7ff ffac 	bl	26694 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2673c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26740:	fb80 0303 	smull	r0, r3, r0, r3
   26744:	0bc0      	lsrs	r0, r0, #15
   26746:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2674a:	e7f4      	b.n	26736 <z_impl_k_sleep+0x1a>
   2674c:	20030ea0 	.word	0x20030ea0

00026750 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   26750:	4b01      	ldr	r3, [pc, #4]	; (26758 <z_impl_z_current_get+0x8>)
   26752:	6898      	ldr	r0, [r3, #8]
   26754:	4770      	bx	lr
   26756:	bf00      	nop
   26758:	20030ea0 	.word	0x20030ea0

0002675c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26760:	4604      	mov	r4, r0
   26762:	f04f 0320 	mov.w	r3, #32
   26766:	f3ef 8611 	mrs	r6, BASEPRI
   2676a:	f383 8812 	msr	BASEPRI_MAX, r3
   2676e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   26772:	7b03      	ldrb	r3, [r0, #12]
   26774:	07d9      	lsls	r1, r3, #31
   26776:	d50b      	bpl.n	26790 <z_thread_abort+0x34>
	__asm__ volatile(
   26778:	f386 8811 	msr	BASEPRI, r6
   2677c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   26780:	4040      	eors	r0, r0
   26782:	f380 8811 	msr	BASEPRI, r0
   26786:	f04f 0004 	mov.w	r0, #4
   2678a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2678c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   26790:	7b43      	ldrb	r3, [r0, #13]
   26792:	071a      	lsls	r2, r3, #28
   26794:	d504      	bpl.n	267a0 <z_thread_abort+0x44>
   26796:	f386 8811 	msr	BASEPRI, r6
   2679a:	f3bf 8f6f 	isb	sy
   2679e:	e7f5      	b.n	2678c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   267a0:	f023 0220 	bic.w	r2, r3, #32
   267a4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   267a8:	09d2      	lsrs	r2, r2, #7
   267aa:	d120      	bne.n	267ee <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   267ac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   267ae:	68a3      	ldr	r3, [r4, #8]
   267b0:	b113      	cbz	r3, 267b8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   267b2:	4620      	mov	r0, r4
   267b4:	f00a fe07 	bl	313c6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   267b8:	f104 0018 	add.w	r0, r4, #24
   267bc:	f00a ff11 	bl	315e2 <z_abort_timeout>
   267c0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   267c4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   267c8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   267ca:	42bd      	cmp	r5, r7
   267cc:	d000      	beq.n	267d0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   267ce:	b9b5      	cbnz	r5, 267fe <z_thread_abort+0xa2>
		update_cache(1);
   267d0:	2001      	movs	r0, #1
   267d2:	f7ff fcef 	bl	261b4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   267d6:	4b10      	ldr	r3, [pc, #64]	; (26818 <z_thread_abort+0xbc>)
   267d8:	689b      	ldr	r3, [r3, #8]
   267da:	42a3      	cmp	r3, r4
   267dc:	d1db      	bne.n	26796 <z_thread_abort+0x3a>
   267de:	f3ef 8305 	mrs	r3, IPSR
   267e2:	2b00      	cmp	r3, #0
   267e4:	d1d7      	bne.n	26796 <z_thread_abort+0x3a>
   267e6:	4630      	mov	r0, r6
   267e8:	f7ea fe48 	bl	1147c <arch_swap>
	return ret;
   267ec:	e7d3      	b.n	26796 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   267ee:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   267f2:	f043 0308 	orr.w	r3, r3, #8
   267f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   267f8:	f00a fddd 	bl	313b6 <sys_dlist_remove>
}
   267fc:	e7d7      	b.n	267ae <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   267fe:	4628      	mov	r0, r5
   26800:	f00a fde1 	bl	313c6 <unpend_thread_no_timeout>
   26804:	f105 0018 	add.w	r0, r5, #24
   26808:	f00a feeb 	bl	315e2 <z_abort_timeout>
		ready_thread(thread);
   2680c:	4628      	mov	r0, r5
   2680e:	f8c5 809c 	str.w	r8, [r5, #156]	; 0x9c
   26812:	f7ff fd27 	bl	26264 <ready_thread>
   26816:	e7d7      	b.n	267c8 <z_thread_abort+0x6c>
   26818:	20030ea0 	.word	0x20030ea0

0002681c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2681c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2681e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   26822:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26824:	e9cd 6700 	strd	r6, r7, [sp]
   26828:	f7ff fdf4 	bl	26414 <z_pend_curr>

	if (data != NULL) {
   2682c:	b11c      	cbz	r4, 26836 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2682e:	4b03      	ldr	r3, [pc, #12]	; (2683c <z_sched_wait+0x20>)
   26830:	689b      	ldr	r3, [r3, #8]
   26832:	695b      	ldr	r3, [r3, #20]
   26834:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26836:	b002      	add	sp, #8
   26838:	bdd0      	pop	{r4, r6, r7, pc}
   2683a:	bf00      	nop
   2683c:	20030ea0 	.word	0x20030ea0

00026840 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   26840:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   26842:	4806      	ldr	r0, [pc, #24]	; (2685c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   26844:	4a06      	ldr	r2, [pc, #24]	; (26860 <z_data_copy+0x20>)
   26846:	4907      	ldr	r1, [pc, #28]	; (26864 <z_data_copy+0x24>)
   26848:	1a12      	subs	r2, r2, r0
   2684a:	f00a fb33 	bl	30eb4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2684e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   26852:	4a05      	ldr	r2, [pc, #20]	; (26868 <z_data_copy+0x28>)
   26854:	4905      	ldr	r1, [pc, #20]	; (2686c <z_data_copy+0x2c>)
   26856:	4806      	ldr	r0, [pc, #24]	; (26870 <z_data_copy+0x30>)
   26858:	f00a bb2c 	b.w	30eb4 <z_early_memcpy>
   2685c:	20008000 	.word	0x20008000
   26860:	20009034 	.word	0x20009034
   26864:	00038e34 	.word	0x00038e34
   26868:	00000000 	.word	0x00000000
   2686c:	00038e34 	.word	0x00038e34
   26870:	20008000 	.word	0x20008000

00026874 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26874:	4b03      	ldr	r3, [pc, #12]	; (26884 <elapsed+0x10>)
   26876:	681b      	ldr	r3, [r3, #0]
   26878:	b90b      	cbnz	r3, 2687e <elapsed+0xa>
   2687a:	f7fc bc6f 	b.w	2315c <sys_clock_elapsed>
}
   2687e:	2000      	movs	r0, #0
   26880:	4770      	bx	lr
   26882:	bf00      	nop
   26884:	20030edc 	.word	0x20030edc

00026888 <next_timeout>:

static int32_t next_timeout(void)
{
   26888:	b510      	push	{r4, lr}
	return list->head == list;
   2688a:	4b11      	ldr	r3, [pc, #68]	; (268d0 <next_timeout+0x48>)
   2688c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2688e:	429c      	cmp	r4, r3
   26890:	d10a      	bne.n	268a8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   26892:	f7ff ffef 	bl	26874 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   26896:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2689a:	4b0e      	ldr	r3, [pc, #56]	; (268d4 <next_timeout+0x4c>)
   2689c:	691b      	ldr	r3, [r3, #16]
   2689e:	b113      	cbz	r3, 268a6 <next_timeout+0x1e>
   268a0:	4298      	cmp	r0, r3
   268a2:	bfa8      	it	ge
   268a4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   268a6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   268a8:	f7ff ffe4 	bl	26874 <elapsed>
	if ((to == NULL) ||
   268ac:	2c00      	cmp	r4, #0
   268ae:	d0f2      	beq.n	26896 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   268b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   268b4:	1a1b      	subs	r3, r3, r0
   268b6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   268ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   268be:	f172 0100 	sbcs.w	r1, r2, #0
   268c2:	dae8      	bge.n	26896 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   268c4:	2a00      	cmp	r2, #0
   268c6:	bfac      	ite	ge
   268c8:	4618      	movge	r0, r3
   268ca:	2000      	movlt	r0, #0
   268cc:	e7e5      	b.n	2689a <next_timeout+0x12>
   268ce:	bf00      	nop
   268d0:	20008838 	.word	0x20008838
   268d4:	20030ea0 	.word	0x20030ea0

000268d8 <remove_timeout>:
{
   268d8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   268da:	b170      	cbz	r0, 268fa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   268dc:	4b0b      	ldr	r3, [pc, #44]	; (2690c <remove_timeout+0x34>)
   268de:	685b      	ldr	r3, [r3, #4]
   268e0:	4298      	cmp	r0, r3
   268e2:	d00a      	beq.n	268fa <remove_timeout+0x22>
   268e4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   268e6:	b143      	cbz	r3, 268fa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   268e8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   268ec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   268f0:	1912      	adds	r2, r2, r4
   268f2:	eb41 0105 	adc.w	r1, r1, r5
   268f6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   268fa:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   268fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26900:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26902:	2300      	movs	r3, #0
	node->prev = NULL;
   26904:	e9c0 3300 	strd	r3, r3, [r0]
}
   26908:	bd30      	pop	{r4, r5, pc}
   2690a:	bf00      	nop
   2690c:	20008838 	.word	0x20008838

00026910 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26910:	f1b3 3fff 	cmp.w	r3, #4294967295
   26914:	bf08      	it	eq
   26916:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2691a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2691c:	4604      	mov	r4, r0
   2691e:	461d      	mov	r5, r3
   26920:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26922:	d061      	beq.n	269e8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   26924:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   26926:	f04f 0320 	mov.w	r3, #32
   2692a:	f3ef 8711 	mrs	r7, BASEPRI
   2692e:	f383 8812 	msr	BASEPRI_MAX, r3
   26932:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   26936:	3201      	adds	r2, #1
   26938:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   2693c:	da24      	bge.n	26988 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2693e:	f06f 0301 	mvn.w	r3, #1
   26942:	492f      	ldr	r1, [pc, #188]	; (26a00 <z_add_timeout+0xf0>)
   26944:	e9d1 2000 	ldrd	r2, r0, [r1]
   26948:	1a9b      	subs	r3, r3, r2
   2694a:	f04f 32ff 	mov.w	r2, #4294967295
   2694e:	eb62 0000 	sbc.w	r0, r2, r0
   26952:	1b9e      	subs	r6, r3, r6
   26954:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   26958:	2e01      	cmp	r6, #1
   2695a:	f170 0300 	sbcs.w	r3, r0, #0
   2695e:	da01      	bge.n	26964 <z_add_timeout+0x54>
   26960:	2601      	movs	r6, #1
   26962:	2000      	movs	r0, #0
   26964:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   26968:	4e26      	ldr	r6, [pc, #152]	; (26a04 <z_add_timeout+0xf4>)
   2696a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2696e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26970:	45b4      	cmp	ip, r6
   26972:	bf08      	it	eq
   26974:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   26978:	f1bc 0f00 	cmp.w	ip, #0
   2697c:	d10d      	bne.n	2699a <z_add_timeout+0x8a>
	node->prev = tail;
   2697e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   26982:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26984:	6074      	str	r4, [r6, #4]
}
   26986:	e01c      	b.n	269c2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   26988:	f7ff ff74 	bl	26874 <elapsed>
   2698c:	3601      	adds	r6, #1
   2698e:	f145 0500 	adc.w	r5, r5, #0
   26992:	1836      	adds	r6, r6, r0
   26994:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   26998:	e7e4      	b.n	26964 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2699a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2699e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   269a2:	4293      	cmp	r3, r2
   269a4:	eb71 0e00 	sbcs.w	lr, r1, r0
   269a8:	da1f      	bge.n	269ea <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   269aa:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   269ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
   269b0:	eb60 0001 	sbc.w	r0, r0, r1
   269b4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   269b8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   269bc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   269be:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   269c2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   269c4:	42b3      	cmp	r3, r6
   269c6:	d00b      	beq.n	269e0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   269c8:	429c      	cmp	r4, r3
   269ca:	d109      	bne.n	269e0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   269cc:	f7ff ff5c 	bl	26888 <next_timeout>

			if (next_time == 0 ||
   269d0:	b118      	cbz	r0, 269da <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   269d2:	4b0d      	ldr	r3, [pc, #52]	; (26a08 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   269d4:	691b      	ldr	r3, [r3, #16]
   269d6:	4283      	cmp	r3, r0
   269d8:	d002      	beq.n	269e0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   269da:	2100      	movs	r1, #0
   269dc:	f7fc fb8e 	bl	230fc <sys_clock_set_timeout>
	__asm__ volatile(
   269e0:	f387 8811 	msr	BASEPRI, r7
   269e4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   269e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   269ea:	1a9b      	subs	r3, r3, r2
   269ec:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   269f0:	45ac      	cmp	ip, r5
   269f2:	e9c4 3104 	strd	r3, r1, [r4, #16]
   269f6:	d0c2      	beq.n	2697e <z_add_timeout+0x6e>
   269f8:	f8dc c000 	ldr.w	ip, [ip]
   269fc:	e7bc      	b.n	26978 <z_add_timeout+0x68>
   269fe:	bf00      	nop
   26a00:	2000a648 	.word	0x2000a648
   26a04:	20008838 	.word	0x20008838
   26a08:	20030ea0 	.word	0x20030ea0

00026a0c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   26a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a10:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   26a12:	f7ff fcbd 	bl	26390 <z_time_slice>
	__asm__ volatile(
   26a16:	f04f 0320 	mov.w	r3, #32
   26a1a:	f3ef 8611 	mrs	r6, BASEPRI
   26a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   26a22:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   26a26:	4f24      	ldr	r7, [pc, #144]	; (26ab8 <sys_clock_announce+0xac>)
	return list->head == list;
   26a28:	f8df 8090 	ldr.w	r8, [pc, #144]	; 26abc <sys_clock_announce+0xb0>
   26a2c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26a30:	4a23      	ldr	r2, [pc, #140]	; (26ac0 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26a32:	4540      	cmp	r0, r8
	announce_remaining = ticks;
   26a34:	603c      	str	r4, [r7, #0]
	return list->head == list;
   26a36:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   26a3a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26a3e:	d00b      	beq.n	26a58 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26a40:	b150      	cbz	r0, 26a58 <sys_clock_announce+0x4c>
   26a42:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   26a46:	42ac      	cmp	r4, r5
   26a48:	eb71 090c 	sbcs.w	r9, r1, ip
   26a4c:	da17      	bge.n	26a7e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   26a4e:	1b2d      	subs	r5, r5, r4
   26a50:	eb6c 0c01 	sbc.w	ip, ip, r1
   26a54:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   26a58:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   26a5a:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   26a5e:	eb4e 0101 	adc.w	r1, lr, r1
   26a62:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   26a66:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   26a68:	f7ff ff0e 	bl	26888 <next_timeout>
   26a6c:	4621      	mov	r1, r4
   26a6e:	f7fc fb45 	bl	230fc <sys_clock_set_timeout>
	__asm__ volatile(
   26a72:	f386 8811 	msr	BASEPRI, r6
   26a76:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   26a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   26a7e:	18eb      	adds	r3, r5, r3
   26a80:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   26a84:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   26a88:	2200      	movs	r2, #0
   26a8a:	2300      	movs	r3, #0
   26a8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   26a90:	f7ff ff22 	bl	268d8 <remove_timeout>
   26a94:	f386 8811 	msr	BASEPRI, r6
   26a98:	f3bf 8f6f 	isb	sy
		t->fn(t);
   26a9c:	6883      	ldr	r3, [r0, #8]
   26a9e:	4798      	blx	r3
	__asm__ volatile(
   26aa0:	f04f 0320 	mov.w	r3, #32
   26aa4:	f3ef 8611 	mrs	r6, BASEPRI
   26aa8:	f383 8812 	msr	BASEPRI_MAX, r3
   26aac:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   26ab0:	683c      	ldr	r4, [r7, #0]
   26ab2:	1b64      	subs	r4, r4, r5
   26ab4:	e7ba      	b.n	26a2c <sys_clock_announce+0x20>
   26ab6:	bf00      	nop
   26ab8:	20030edc 	.word	0x20030edc
   26abc:	20008838 	.word	0x20008838
   26ac0:	2000a648 	.word	0x2000a648

00026ac4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   26ac4:	b510      	push	{r4, lr}
   26ac6:	f04f 0320 	mov.w	r3, #32
   26aca:	f3ef 8411 	mrs	r4, BASEPRI
   26ace:	f383 8812 	msr	BASEPRI_MAX, r3
   26ad2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   26ad6:	f7ff fecd 	bl	26874 <elapsed>
   26ada:	4603      	mov	r3, r0
   26adc:	4a05      	ldr	r2, [pc, #20]	; (26af4 <sys_clock_tick_get+0x30>)
   26ade:	e9d2 0100 	ldrd	r0, r1, [r2]
   26ae2:	1818      	adds	r0, r3, r0
   26ae4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   26ae8:	f384 8811 	msr	BASEPRI, r4
   26aec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   26af0:	bd10      	pop	{r4, pc}
   26af2:	bf00      	nop
   26af4:	2000a648 	.word	0x2000a648

00026af8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   26af8:	b570      	push	{r4, r5, r6, lr}
   26afa:	4604      	mov	r4, r0
	__asm__ volatile(
   26afc:	f04f 0320 	mov.w	r3, #32
   26b00:	f3ef 8511 	mrs	r5, BASEPRI
   26b04:	f383 8812 	msr	BASEPRI_MAX, r3
   26b08:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   26b0c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   26b10:	3301      	adds	r3, #1
   26b12:	f142 0200 	adc.w	r2, r2, #0
   26b16:	2b02      	cmp	r3, #2
   26b18:	f172 0200 	sbcs.w	r2, r2, #0
   26b1c:	d322      	bcc.n	26b64 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   26b1e:	f00a fda6 	bl	3166e <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26b22:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   26b26:	3001      	adds	r0, #1
   26b28:	f141 0100 	adc.w	r1, r1, #0
   26b2c:	18c0      	adds	r0, r0, r3
   26b2e:	eb41 0102 	adc.w	r1, r1, r2
   26b32:	2801      	cmp	r0, #1
   26b34:	f171 0100 	sbcs.w	r1, r1, #0
   26b38:	db32      	blt.n	26ba0 <z_timer_expiration_handler+0xa8>
   26b3a:	f00a fd98 	bl	3166e <z_impl_k_uptime_ticks>
   26b3e:	3001      	adds	r0, #1
   26b40:	f141 0300 	adc.w	r3, r1, #0
   26b44:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   26b48:	1880      	adds	r0, r0, r2
   26b4a:	f06f 0201 	mvn.w	r2, #1
   26b4e:	eb43 0301 	adc.w	r3, r3, r1
   26b52:	f04f 31ff 	mov.w	r1, #4294967295
   26b56:	1a12      	subs	r2, r2, r0
   26b58:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26b5c:	4620      	mov	r0, r4
   26b5e:	491a      	ldr	r1, [pc, #104]	; (26bc8 <z_timer_expiration_handler+0xd0>)
   26b60:	f7ff fed6 	bl	26910 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   26b64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26b66:	3301      	adds	r3, #1
   26b68:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   26b6a:	6a23      	ldr	r3, [r4, #32]
   26b6c:	b173      	cbz	r3, 26b8c <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   26b6e:	f385 8811 	msr	BASEPRI, r5
   26b72:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   26b76:	4620      	mov	r0, r4
   26b78:	6a23      	ldr	r3, [r4, #32]
   26b7a:	4798      	blx	r3
	__asm__ volatile(
   26b7c:	f04f 0320 	mov.w	r3, #32
   26b80:	f3ef 8511 	mrs	r5, BASEPRI
   26b84:	f383 8812 	msr	BASEPRI_MAX, r3
   26b88:	f3bf 8f6f 	isb	sy
	return list->head == list;
   26b8c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b90:	42a6      	cmp	r6, r4
   26b92:	d000      	beq.n	26b96 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   26b94:	b94e      	cbnz	r6, 26baa <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   26b96:	f385 8811 	msr	BASEPRI, r5
   26b9a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   26b9e:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26ba0:	f06f 0201 	mvn.w	r2, #1
   26ba4:	f04f 33ff 	mov.w	r3, #4294967295
   26ba8:	e7d8      	b.n	26b5c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   26baa:	4630      	mov	r0, r6
   26bac:	f00a fc78 	bl	314a0 <z_unpend_thread_no_timeout>
   26bb0:	2300      	movs	r3, #0
   26bb2:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
   26bb6:	f385 8811 	msr	BASEPRI, r5
   26bba:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   26bbe:	4630      	mov	r0, r6
}
   26bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   26bc4:	f00a bc5c 	b.w	31480 <z_ready_thread>
   26bc8:	00026af9 	.word	0x00026af9

00026bcc <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
   26bd0:	bf08      	it	eq
   26bd2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   26bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26bda:	4619      	mov	r1, r3
   26bdc:	4605      	mov	r5, r0
   26bde:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   26be2:	4614      	mov	r4, r2
   26be4:	4691      	mov	r9, r2
   26be6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26be8:	d037      	beq.n	26c5a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   26bea:	f1b0 3fff 	cmp.w	r0, #4294967295
   26bee:	bf08      	it	eq
   26bf0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   26bf4:	4637      	mov	r7, r6
   26bf6:	4682      	mov	sl, r0
   26bf8:	d011      	beq.n	26c1e <z_impl_k_timer_start+0x52>
   26bfa:	ea50 0306 	orrs.w	r3, r0, r6
   26bfe:	d00e      	beq.n	26c1e <z_impl_k_timer_start+0x52>
   26c00:	1c72      	adds	r2, r6, #1
   26c02:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   26c06:	db0a      	blt.n	26c1e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   26c08:	2e02      	cmp	r6, #2
   26c0a:	4684      	mov	ip, r0
   26c0c:	f170 0000 	sbcs.w	r0, r0, #0
   26c10:	bfbc      	itt	lt
   26c12:	2702      	movlt	r7, #2
   26c14:	f04f 0c00 	movlt.w	ip, #0
   26c18:	3f01      	subs	r7, #1
   26c1a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   26c1e:	1c63      	adds	r3, r4, #1
   26c20:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26c24:	db0a      	blt.n	26c3c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   26c26:	2c01      	cmp	r4, #1
   26c28:	f171 0300 	sbcs.w	r3, r1, #0
   26c2c:	4622      	mov	r2, r4
   26c2e:	bfbc      	itt	lt
   26c30:	2201      	movlt	r2, #1
   26c32:	2100      	movlt	r1, #0
   26c34:	f112 39ff 	adds.w	r9, r2, #4294967295
   26c38:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   26c3c:	4628      	mov	r0, r5
   26c3e:	f00a fcd0 	bl	315e2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   26c42:	2300      	movs	r3, #0
	timer->period = period;
   26c44:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   26c48:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26c4a:	464a      	mov	r2, r9
   26c4c:	4643      	mov	r3, r8
   26c4e:	4628      	mov	r0, r5
		     duration);
}
   26c50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26c54:	4902      	ldr	r1, [pc, #8]	; (26c60 <z_impl_k_timer_start+0x94>)
   26c56:	f7ff be5b 	b.w	26910 <z_add_timeout>
}
   26c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26c5e:	bf00      	nop
   26c60:	00026af9 	.word	0x00026af9

00026c64 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26c64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   26c68:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   26c6a:	4b29      	ldr	r3, [pc, #164]	; (26d10 <z_impl_k_poll+0xac>)
{
   26c6c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   26c6e:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   26c70:	2301      	movs	r3, #1
   26c72:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   26c76:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   26c7a:	ea52 0305 	orrs.w	r3, r2, r5
   26c7e:	bf0c      	ite	eq
   26c80:	2301      	moveq	r3, #1
   26c82:	2300      	movne	r3, #0
   26c84:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   26c88:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   26c8a:	f00a fd72 	bl	31772 <register_events>
   26c8e:	4681      	mov	r9, r0
	__asm__ volatile(
   26c90:	f04f 0320 	mov.w	r3, #32
   26c94:	f3ef 8a11 	mrs	sl, BASEPRI
   26c98:	f383 8812 	msr	BASEPRI_MAX, r3
   26c9c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   26ca0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   26ca4:	b964      	cbnz	r4, 26cc0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   26ca6:	4601      	mov	r1, r0
   26ca8:	4652      	mov	r2, sl
   26caa:	4640      	mov	r0, r8
   26cac:	f00a fe32 	bl	31914 <clear_event_registrations>
	__asm__ volatile(
   26cb0:	f38a 8811 	msr	BASEPRI, sl
   26cb4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   26cb8:	4620      	mov	r0, r4
   26cba:	b002      	add	sp, #8
   26cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   26cc0:	2300      	movs	r3, #0
   26cc2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26cc6:	ea56 0305 	orrs.w	r3, r6, r5
   26cca:	d106      	bne.n	26cda <z_impl_k_poll+0x76>
   26ccc:	f38a 8811 	msr	BASEPRI, sl
   26cd0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   26cd4:	f06f 040a 	mvn.w	r4, #10
   26cd8:	e7ee      	b.n	26cb8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   26cda:	4651      	mov	r1, sl
   26cdc:	e9cd 6500 	strd	r6, r5, [sp]
   26ce0:	4a0c      	ldr	r2, [pc, #48]	; (26d14 <z_impl_k_poll+0xb0>)
   26ce2:	480d      	ldr	r0, [pc, #52]	; (26d18 <z_impl_k_poll+0xb4>)
   26ce4:	f7ff fb96 	bl	26414 <z_pend_curr>
   26ce8:	4604      	mov	r4, r0
	__asm__ volatile(
   26cea:	f04f 0320 	mov.w	r3, #32
   26cee:	f3ef 8511 	mrs	r5, BASEPRI
   26cf2:	f383 8812 	msr	BASEPRI_MAX, r3
   26cf6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   26cfa:	462a      	mov	r2, r5
   26cfc:	4649      	mov	r1, r9
   26cfe:	4640      	mov	r0, r8
   26d00:	f00a fe08 	bl	31914 <clear_event_registrations>
	__asm__ volatile(
   26d04:	f385 8811 	msr	BASEPRI, r5
   26d08:	f3bf 8f6f 	isb	sy
	return swap_rc;
   26d0c:	e7d4      	b.n	26cb8 <z_impl_k_poll+0x54>
   26d0e:	bf00      	nop
   26d10:	20030ea0 	.word	0x20030ea0
   26d14:	20008840 	.word	0x20008840
   26d18:	20031fc0 	.word	0x20031fc0

00026d1c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   26d1c:	b538      	push	{r3, r4, r5, lr}
   26d1e:	4603      	mov	r3, r0
	__asm__ volatile(
   26d20:	f04f 0220 	mov.w	r2, #32
   26d24:	f3ef 8511 	mrs	r5, BASEPRI
   26d28:	f382 8812 	msr	BASEPRI_MAX, r2
   26d2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   26d30:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   26d32:	2101      	movs	r1, #1
   26d34:	6081      	str	r1, [r0, #8]
	return list->head == list;
   26d36:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   26d38:	4283      	cmp	r3, r0
   26d3a:	d106      	bne.n	26d4a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   26d3c:	f385 8811 	msr	BASEPRI, r5
   26d40:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   26d44:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   26d46:	4620      	mov	r0, r4
   26d48:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   26d4a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26d4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26d50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26d52:	2300      	movs	r3, #0
	node->prev = NULL;
   26d54:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26d58:	f00a fd82 	bl	31860 <signal_poll_event>
	z_reschedule(&lock, key);
   26d5c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26d5e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26d60:	4801      	ldr	r0, [pc, #4]	; (26d68 <z_impl_k_poll_signal_raise+0x4c>)
   26d62:	f7ff fbbb 	bl	264dc <z_reschedule>
	return rc;
   26d66:	e7ee      	b.n	26d46 <z_impl_k_poll_signal_raise+0x2a>
   26d68:	20031fc0 	.word	0x20031fc0

00026d6c <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   26d6c:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   26d6e:	4601      	mov	r1, r0
   26d70:	4801      	ldr	r0, [pc, #4]	; (26d78 <k_aligned_alloc+0xc>)
   26d72:	f00a be20 	b.w	319b6 <z_heap_aligned_alloc>
   26d76:	bf00      	nop
   26d78:	20008bdc 	.word	0x20008bdc

00026d7c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   26d7c:	4b01      	ldr	r3, [pc, #4]	; (26d84 <k_thread_system_pool_assign+0x8>)
   26d7e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
}
   26d82:	4770      	bx	lr
   26d84:	20008bdc 	.word	0x20008bdc

00026d88 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26d88:	b538      	push	{r3, r4, r5, lr}
   26d8a:	4604      	mov	r4, r0
   26d8c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   26d8e:	f00a f945 	bl	3101c <k_is_in_isr>
   26d92:	b928      	cbnz	r0, 26da0 <z_thread_aligned_alloc+0x18>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26d94:	4b06      	ldr	r3, [pc, #24]	; (26db0 <z_thread_aligned_alloc+0x28>)
   26d96:	689b      	ldr	r3, [r3, #8]
   26d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	}

	if (heap != NULL) {
   26d9c:	b90b      	cbnz	r3, 26da2 <z_thread_aligned_alloc+0x1a>
	} else {
		ret = NULL;
	}

	return ret;
}
   26d9e:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   26da0:	4b04      	ldr	r3, [pc, #16]	; (26db4 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   26da2:	462a      	mov	r2, r5
   26da4:	4621      	mov	r1, r4
   26da6:	4618      	mov	r0, r3
}
   26da8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   26dac:	f00a be03 	b.w	319b6 <z_heap_aligned_alloc>
   26db0:	20030ea0 	.word	0x20030ea0
   26db4:	20008bdc 	.word	0x20008bdc

00026db8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   26db8:	4801      	ldr	r0, [pc, #4]	; (26dc0 <boot_banner+0x8>)
   26dba:	f003 bb4f 	b.w	2a45c <printk>
   26dbe:	bf00      	nop
   26dc0:	00038a1b 	.word	0x00038a1b

00026dc4 <log>:
   26dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26dc6:	4604      	mov	r4, r0
   26dc8:	460d      	mov	r5, r1
   26dca:	f7e2 fe7d 	bl	9ac8 <__ieee754_log>
   26dce:	4b17      	ldr	r3, [pc, #92]	; (26e2c <log+0x68>)
   26dd0:	4606      	mov	r6, r0
   26dd2:	460f      	mov	r7, r1
   26dd4:	f993 3000 	ldrsb.w	r3, [r3]
   26dd8:	3301      	adds	r3, #1
   26dda:	d01a      	beq.n	26e12 <log+0x4e>
   26ddc:	4622      	mov	r2, r4
   26dde:	462b      	mov	r3, r5
   26de0:	4620      	mov	r0, r4
   26de2:	4629      	mov	r1, r5
   26de4:	f7e2 f98c 	bl	9100 <__aeabi_dcmpun>
   26de8:	b998      	cbnz	r0, 26e12 <log+0x4e>
   26dea:	2200      	movs	r2, #0
   26dec:	2300      	movs	r3, #0
   26dee:	4620      	mov	r0, r4
   26df0:	4629      	mov	r1, r5
   26df2:	f7e2 f95b 	bl	90ac <__aeabi_dcmpgt>
   26df6:	b960      	cbnz	r0, 26e12 <log+0x4e>
   26df8:	2200      	movs	r2, #0
   26dfa:	2300      	movs	r3, #0
   26dfc:	4620      	mov	r0, r4
   26dfe:	4629      	mov	r1, r5
   26e00:	f7e2 f92c 	bl	905c <__aeabi_dcmpeq>
   26e04:	b140      	cbz	r0, 26e18 <log+0x54>
   26e06:	f004 feea 	bl	2bbde <__errno>
   26e0a:	2600      	movs	r6, #0
   26e0c:	2322      	movs	r3, #34	; 0x22
   26e0e:	4f08      	ldr	r7, [pc, #32]	; (26e30 <log+0x6c>)
   26e10:	6003      	str	r3, [r0, #0]
   26e12:	4630      	mov	r0, r6
   26e14:	4639      	mov	r1, r7
   26e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26e18:	f004 fee1 	bl	2bbde <__errno>
   26e1c:	2321      	movs	r3, #33	; 0x21
   26e1e:	6003      	str	r3, [r0, #0]
   26e20:	4804      	ldr	r0, [pc, #16]	; (26e34 <log+0x70>)
   26e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26e26:	f000 b807 	b.w	26e38 <nan>
   26e2a:	bf00      	nop
   26e2c:	20008b2c 	.word	0x20008b2c
   26e30:	fff00000 	.word	0xfff00000
   26e34:	000368f4 	.word	0x000368f4

00026e38 <nan>:
   26e38:	2000      	movs	r0, #0
   26e3a:	4901      	ldr	r1, [pc, #4]	; (26e40 <nan+0x8>)
   26e3c:	4770      	bx	lr
   26e3e:	bf00      	nop
   26e40:	7ff80000 	.word	0x7ff80000

00026e44 <malloc>:
   26e44:	4b02      	ldr	r3, [pc, #8]	; (26e50 <malloc+0xc>)
   26e46:	4601      	mov	r1, r0
   26e48:	6818      	ldr	r0, [r3, #0]
   26e4a:	f000 bac5 	b.w	273d8 <_malloc_r>
   26e4e:	bf00      	nop
   26e50:	20008848 	.word	0x20008848

00026e54 <free>:
   26e54:	4b02      	ldr	r3, [pc, #8]	; (26e60 <free+0xc>)
   26e56:	4601      	mov	r1, r0
   26e58:	6818      	ldr	r0, [r3, #0]
   26e5a:	f000 ba73 	b.w	27344 <_free_r>
   26e5e:	bf00      	nop
   26e60:	20008848 	.word	0x20008848

00026e64 <validate_structure>:
   26e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26e66:	6801      	ldr	r1, [r0, #0]
   26e68:	4604      	mov	r4, r0
   26e6a:	293b      	cmp	r1, #59	; 0x3b
   26e6c:	d911      	bls.n	26e92 <validate_structure+0x2e>
   26e6e:	223c      	movs	r2, #60	; 0x3c
   26e70:	4668      	mov	r0, sp
   26e72:	f00b f826 	bl	31ec2 <div>
   26e76:	9a01      	ldr	r2, [sp, #4]
   26e78:	6863      	ldr	r3, [r4, #4]
   26e7a:	9900      	ldr	r1, [sp, #0]
   26e7c:	2a00      	cmp	r2, #0
   26e7e:	440b      	add	r3, r1
   26e80:	bfb4      	ite	lt
   26e82:	323c      	addlt	r2, #60	; 0x3c
   26e84:	6022      	strge	r2, [r4, #0]
   26e86:	6063      	str	r3, [r4, #4]
   26e88:	bfbe      	ittt	lt
   26e8a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26e8e:	6022      	strlt	r2, [r4, #0]
   26e90:	6063      	strlt	r3, [r4, #4]
   26e92:	6861      	ldr	r1, [r4, #4]
   26e94:	293b      	cmp	r1, #59	; 0x3b
   26e96:	d911      	bls.n	26ebc <validate_structure+0x58>
   26e98:	223c      	movs	r2, #60	; 0x3c
   26e9a:	4668      	mov	r0, sp
   26e9c:	f00b f811 	bl	31ec2 <div>
   26ea0:	9a01      	ldr	r2, [sp, #4]
   26ea2:	68a3      	ldr	r3, [r4, #8]
   26ea4:	9900      	ldr	r1, [sp, #0]
   26ea6:	2a00      	cmp	r2, #0
   26ea8:	440b      	add	r3, r1
   26eaa:	bfb4      	ite	lt
   26eac:	323c      	addlt	r2, #60	; 0x3c
   26eae:	6062      	strge	r2, [r4, #4]
   26eb0:	60a3      	str	r3, [r4, #8]
   26eb2:	bfbe      	ittt	lt
   26eb4:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26eb8:	6062      	strlt	r2, [r4, #4]
   26eba:	60a3      	strlt	r3, [r4, #8]
   26ebc:	68a1      	ldr	r1, [r4, #8]
   26ebe:	2917      	cmp	r1, #23
   26ec0:	d911      	bls.n	26ee6 <validate_structure+0x82>
   26ec2:	2218      	movs	r2, #24
   26ec4:	4668      	mov	r0, sp
   26ec6:	f00a fffc 	bl	31ec2 <div>
   26eca:	9a01      	ldr	r2, [sp, #4]
   26ecc:	68e3      	ldr	r3, [r4, #12]
   26ece:	9900      	ldr	r1, [sp, #0]
   26ed0:	2a00      	cmp	r2, #0
   26ed2:	440b      	add	r3, r1
   26ed4:	bfb4      	ite	lt
   26ed6:	3218      	addlt	r2, #24
   26ed8:	60a2      	strge	r2, [r4, #8]
   26eda:	60e3      	str	r3, [r4, #12]
   26edc:	bfbe      	ittt	lt
   26ede:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26ee2:	60a2      	strlt	r2, [r4, #8]
   26ee4:	60e3      	strlt	r3, [r4, #12]
   26ee6:	6921      	ldr	r1, [r4, #16]
   26ee8:	290b      	cmp	r1, #11
   26eea:	d911      	bls.n	26f10 <validate_structure+0xac>
   26eec:	220c      	movs	r2, #12
   26eee:	4668      	mov	r0, sp
   26ef0:	f00a ffe7 	bl	31ec2 <div>
   26ef4:	9a01      	ldr	r2, [sp, #4]
   26ef6:	6963      	ldr	r3, [r4, #20]
   26ef8:	9900      	ldr	r1, [sp, #0]
   26efa:	2a00      	cmp	r2, #0
   26efc:	440b      	add	r3, r1
   26efe:	bfb4      	ite	lt
   26f00:	320c      	addlt	r2, #12
   26f02:	6122      	strge	r2, [r4, #16]
   26f04:	6163      	str	r3, [r4, #20]
   26f06:	bfbe      	ittt	lt
   26f08:	f103 33ff 	addlt.w	r3, r3, #4294967295
   26f0c:	6122      	strlt	r2, [r4, #16]
   26f0e:	6163      	strlt	r3, [r4, #20]
   26f10:	6963      	ldr	r3, [r4, #20]
   26f12:	079a      	lsls	r2, r3, #30
   26f14:	d11c      	bne.n	26f50 <validate_structure+0xec>
   26f16:	2164      	movs	r1, #100	; 0x64
   26f18:	fb93 f2f1 	sdiv	r2, r3, r1
   26f1c:	fb01 3212 	mls	r2, r1, r2, r3
   26f20:	b9c2      	cbnz	r2, 26f54 <validate_structure+0xf0>
   26f22:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   26f26:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26f2a:	fb93 f1f2 	sdiv	r1, r3, r2
   26f2e:	fb02 3311 	mls	r3, r2, r1, r3
   26f32:	2b00      	cmp	r3, #0
   26f34:	bf14      	ite	ne
   26f36:	231c      	movne	r3, #28
   26f38:	231d      	moveq	r3, #29
   26f3a:	68e2      	ldr	r2, [r4, #12]
   26f3c:	2a00      	cmp	r2, #0
   26f3e:	dc0b      	bgt.n	26f58 <validate_structure+0xf4>
   26f40:	200b      	movs	r0, #11
   26f42:	2164      	movs	r1, #100	; 0x64
   26f44:	4d33      	ldr	r5, [pc, #204]	; (27014 <validate_structure+0x1b0>)
   26f46:	68e6      	ldr	r6, [r4, #12]
   26f48:	2e00      	cmp	r6, #0
   26f4a:	dd11      	ble.n	26f70 <validate_structure+0x10c>
   26f4c:	b003      	add	sp, #12
   26f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f50:	231c      	movs	r3, #28
   26f52:	e7f2      	b.n	26f3a <validate_structure+0xd6>
   26f54:	231d      	movs	r3, #29
   26f56:	e7f0      	b.n	26f3a <validate_structure+0xd6>
   26f58:	482e      	ldr	r0, [pc, #184]	; (27014 <validate_structure+0x1b0>)
   26f5a:	2502      	movs	r5, #2
   26f5c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   26f60:	2901      	cmp	r1, #1
   26f62:	d132      	bne.n	26fca <validate_structure+0x166>
   26f64:	4293      	cmp	r3, r2
   26f66:	daf1      	bge.n	26f4c <validate_structure+0xe8>
   26f68:	1ad2      	subs	r2, r2, r3
   26f6a:	e9c4 2503 	strd	r2, r5, [r4, #12]
   26f6e:	e7f5      	b.n	26f5c <validate_structure+0xf8>
   26f70:	6922      	ldr	r2, [r4, #16]
   26f72:	3a01      	subs	r2, #1
   26f74:	6122      	str	r2, [r4, #16]
   26f76:	3201      	adds	r2, #1
   26f78:	d116      	bne.n	26fa8 <validate_structure+0x144>
   26f7a:	6963      	ldr	r3, [r4, #20]
   26f7c:	1e5a      	subs	r2, r3, #1
   26f7e:	0797      	lsls	r7, r2, #30
   26f80:	e9c4 0204 	strd	r0, r2, [r4, #16]
   26f84:	d119      	bne.n	26fba <validate_structure+0x156>
   26f86:	fb92 f7f1 	sdiv	r7, r2, r1
   26f8a:	fb01 2217 	mls	r2, r1, r7, r2
   26f8e:	b9b2      	cbnz	r2, 26fbe <validate_structure+0x15a>
   26f90:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   26f94:	f44f 72c8 	mov.w	r2, #400	; 0x190
   26f98:	fb93 f7f2 	sdiv	r7, r3, r2
   26f9c:	fb02 3317 	mls	r3, r2, r7, r3
   26fa0:	2b00      	cmp	r3, #0
   26fa2:	bf14      	ite	ne
   26fa4:	231c      	movne	r3, #28
   26fa6:	231d      	moveq	r3, #29
   26fa8:	6922      	ldr	r2, [r4, #16]
   26faa:	2a01      	cmp	r2, #1
   26fac:	bf14      	ite	ne
   26fae:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
   26fb2:	461a      	moveq	r2, r3
   26fb4:	4432      	add	r2, r6
   26fb6:	60e2      	str	r2, [r4, #12]
   26fb8:	e7c5      	b.n	26f46 <validate_structure+0xe2>
   26fba:	231c      	movs	r3, #28
   26fbc:	e7f4      	b.n	26fa8 <validate_structure+0x144>
   26fbe:	231d      	movs	r3, #29
   26fc0:	e7f2      	b.n	26fa8 <validate_structure+0x144>
   26fc2:	231c      	movs	r3, #28
   26fc4:	e7ca      	b.n	26f5c <validate_structure+0xf8>
   26fc6:	231d      	movs	r3, #29
   26fc8:	e7c8      	b.n	26f5c <validate_structure+0xf8>
   26fca:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   26fce:	42b2      	cmp	r2, r6
   26fd0:	ddbc      	ble.n	26f4c <validate_structure+0xe8>
   26fd2:	3101      	adds	r1, #1
   26fd4:	1b92      	subs	r2, r2, r6
   26fd6:	290c      	cmp	r1, #12
   26fd8:	60e2      	str	r2, [r4, #12]
   26fda:	6121      	str	r1, [r4, #16]
   26fdc:	d1be      	bne.n	26f5c <validate_structure+0xf8>
   26fde:	6963      	ldr	r3, [r4, #20]
   26fe0:	2100      	movs	r1, #0
   26fe2:	1c5a      	adds	r2, r3, #1
   26fe4:	6121      	str	r1, [r4, #16]
   26fe6:	0791      	lsls	r1, r2, #30
   26fe8:	6162      	str	r2, [r4, #20]
   26fea:	d1ea      	bne.n	26fc2 <validate_structure+0x15e>
   26fec:	2164      	movs	r1, #100	; 0x64
   26fee:	fb92 f6f1 	sdiv	r6, r2, r1
   26ff2:	fb01 2216 	mls	r2, r1, r6, r2
   26ff6:	2a00      	cmp	r2, #0
   26ff8:	d1e5      	bne.n	26fc6 <validate_structure+0x162>
   26ffa:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   26ffe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   27002:	fb93 f1f2 	sdiv	r1, r3, r2
   27006:	fb02 3311 	mls	r3, r2, r1, r3
   2700a:	2b00      	cmp	r3, #0
   2700c:	bf14      	ite	ne
   2700e:	231c      	movne	r3, #28
   27010:	231d      	moveq	r3, #29
   27012:	e7a3      	b.n	26f5c <validate_structure+0xf8>
   27014:	00034450 	.word	0x00034450

00027018 <mktime>:
   27018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2701c:	4607      	mov	r7, r0
   2701e:	f001 fcd7 	bl	289d0 <__gettzinfo>
   27022:	4682      	mov	sl, r0
   27024:	4638      	mov	r0, r7
   27026:	f7ff ff1d 	bl	26e64 <validate_structure>
   2702a:	223c      	movs	r2, #60	; 0x3c
   2702c:	697d      	ldr	r5, [r7, #20]
   2702e:	e9d7 4300 	ldrd	r4, r3, [r7]
   27032:	fb02 4403 	mla	r4, r2, r3, r4
   27036:	68bb      	ldr	r3, [r7, #8]
   27038:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   2703c:	fb02 4403 	mla	r4, r2, r3, r4
   27040:	4abd      	ldr	r2, [pc, #756]	; (27338 <mktime+0x320>)
   27042:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
   27046:	3e01      	subs	r6, #1
   27048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2704c:	2b01      	cmp	r3, #1
   2704e:	4416      	add	r6, r2
   27050:	dd11      	ble.n	27076 <mktime+0x5e>
   27052:	07a9      	lsls	r1, r5, #30
   27054:	d10f      	bne.n	27076 <mktime+0x5e>
   27056:	2264      	movs	r2, #100	; 0x64
   27058:	fb95 f3f2 	sdiv	r3, r5, r2
   2705c:	fb02 5313 	mls	r3, r2, r3, r5
   27060:	b943      	cbnz	r3, 27074 <mktime+0x5c>
   27062:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   27066:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2706a:	fb93 f1f2 	sdiv	r1, r3, r2
   2706e:	fb02 3311 	mls	r3, r2, r1, r3
   27072:	b903      	cbnz	r3, 27076 <mktime+0x5e>
   27074:	3601      	adds	r6, #1
   27076:	f505 531c 	add.w	r3, r5, #9984	; 0x2700
   2707a:	f644 6220 	movw	r2, #20000	; 0x4e20
   2707e:	61fe      	str	r6, [r7, #28]
   27080:	3310      	adds	r3, #16
   27082:	4293      	cmp	r3, r2
   27084:	f200 8154 	bhi.w	27330 <mktime+0x318>
   27088:	2d46      	cmp	r5, #70	; 0x46
   2708a:	f340 809f 	ble.w	271cc <mktime+0x1b4>
   2708e:	2346      	movs	r3, #70	; 0x46
   27090:	f240 1c6d 	movw	ip, #365	; 0x16d
   27094:	2164      	movs	r1, #100	; 0x64
   27096:	f44f 70c8 	mov.w	r0, #400	; 0x190
   2709a:	079a      	lsls	r2, r3, #30
   2709c:	f040 8090 	bne.w	271c0 <mktime+0x1a8>
   270a0:	fb93 f2f1 	sdiv	r2, r3, r1
   270a4:	fb01 3212 	mls	r2, r1, r2, r3
   270a8:	2a00      	cmp	r2, #0
   270aa:	f040 808c 	bne.w	271c6 <mktime+0x1ae>
   270ae:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   270b2:	fb92 fef0 	sdiv	lr, r2, r0
   270b6:	fb00 221e 	mls	r2, r0, lr, r2
   270ba:	2a00      	cmp	r2, #0
   270bc:	bf14      	ite	ne
   270be:	4662      	movne	r2, ip
   270c0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   270c4:	3301      	adds	r3, #1
   270c6:	4416      	add	r6, r2
   270c8:	429d      	cmp	r5, r3
   270ca:	d1e6      	bne.n	2709a <mktime+0x82>
   270cc:	4b9b      	ldr	r3, [pc, #620]	; (2733c <mktime+0x324>)
   270ce:	ea4f 78e4 	mov.w	r8, r4, asr #31
   270d2:	fbc6 4803 	smlal	r4, r8, r6, r3
   270d6:	f000 ff51 	bl	27f7c <__tz_lock>
   270da:	f000 ff5b 	bl	27f94 <_tzset_unlocked>
   270de:	4b98      	ldr	r3, [pc, #608]	; (27340 <mktime+0x328>)
   270e0:	681b      	ldr	r3, [r3, #0]
   270e2:	2b00      	cmp	r3, #0
   270e4:	f000 811a 	beq.w	2731c <mktime+0x304>
   270e8:	6978      	ldr	r0, [r7, #20]
   270ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   270ee:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   270f2:	f8d7 9020 	ldr.w	r9, [r7, #32]
   270f6:	4283      	cmp	r3, r0
   270f8:	f040 80ab 	bne.w	27252 <mktime+0x23a>
   270fc:	f8da 0050 	ldr.w	r0, [sl, #80]	; 0x50
   27100:	f8da c028 	ldr.w	ip, [sl, #40]	; 0x28
   27104:	e9da 2308 	ldrd	r2, r3, [sl, #32]
   27108:	e9da 1b12 	ldrd	r1, fp, [sl, #72]	; 0x48
   2710c:	1a12      	subs	r2, r2, r0
   2710e:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
   27112:	ebb1 0e0c 	subs.w	lr, r1, ip
   27116:	f8cd e000 	str.w	lr, [sp]
   2711a:	eb6b 7eec 	sbc.w	lr, fp, ip, asr #31
   2711e:	f8cd e004 	str.w	lr, [sp, #4]
   27122:	f8dd e000 	ldr.w	lr, [sp]
   27126:	4574      	cmp	r4, lr
   27128:	f8dd e004 	ldr.w	lr, [sp, #4]
   2712c:	eb78 0e0e 	sbcs.w	lr, r8, lr
   27130:	f280 80b5 	bge.w	2729e <mktime+0x286>
   27134:	f8da 1000 	ldr.w	r1, [sl]
   27138:	b121      	cbz	r1, 27144 <mktime+0x12c>
   2713a:	4294      	cmp	r4, r2
   2713c:	eb78 0303 	sbcs.w	r3, r8, r3
   27140:	f2c0 80bb 	blt.w	272ba <mktime+0x2a2>
   27144:	f1b9 0f00 	cmp.w	r9, #0
   27148:	f040 8090 	bne.w	2726c <mktime+0x254>
   2714c:	ebac 0000 	sub.w	r0, ip, r0
   27150:	f04f 0901 	mov.w	r9, #1
   27154:	683b      	ldr	r3, [r7, #0]
   27156:	1904      	adds	r4, r0, r4
   27158:	f8d7 b00c 	ldr.w	fp, [r7, #12]
   2715c:	4403      	add	r3, r0
   2715e:	eb48 78e0 	adc.w	r8, r8, r0, asr #31
   27162:	4638      	mov	r0, r7
   27164:	603b      	str	r3, [r7, #0]
   27166:	f7ff fe7d 	bl	26e64 <validate_structure>
   2716a:	68fa      	ldr	r2, [r7, #12]
   2716c:	ebb2 020b 	subs.w	r2, r2, fp
   27170:	d079      	beq.n	27266 <mktime+0x24e>
   27172:	2a01      	cmp	r2, #1
   27174:	f300 80a9 	bgt.w	272ca <mktime+0x2b2>
   27178:	1c93      	adds	r3, r2, #2
   2717a:	bfd8      	it	le
   2717c:	2201      	movle	r2, #1
   2717e:	69fb      	ldr	r3, [r7, #28]
   27180:	18d3      	adds	r3, r2, r3
   27182:	f140 80ab 	bpl.w	272dc <mktime+0x2c4>
   27186:	1e6b      	subs	r3, r5, #1
   27188:	0798      	lsls	r0, r3, #30
   2718a:	f040 80a1 	bne.w	272d0 <mktime+0x2b8>
   2718e:	2164      	movs	r1, #100	; 0x64
   27190:	fb93 f0f1 	sdiv	r0, r3, r1
   27194:	fb01 3310 	mls	r3, r1, r0, r3
   27198:	2b00      	cmp	r3, #0
   2719a:	f040 809c 	bne.w	272d6 <mktime+0x2be>
   2719e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   271a2:	f205 756b 	addw	r5, r5, #1899	; 0x76b
   271a6:	fb95 f1f3 	sdiv	r1, r5, r3
   271aa:	fb03 5511 	mls	r5, r3, r1, r5
   271ae:	f240 136d 	movw	r3, #365	; 0x16d
   271b2:	2d00      	cmp	r5, #0
   271b4:	bf18      	it	ne
   271b6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   271ba:	4416      	add	r6, r2
   271bc:	61fb      	str	r3, [r7, #28]
   271be:	e052      	b.n	27266 <mktime+0x24e>
   271c0:	f240 126d 	movw	r2, #365	; 0x16d
   271c4:	e77e      	b.n	270c4 <mktime+0xac>
   271c6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   271ca:	e77b      	b.n	270c4 <mktime+0xac>
   271cc:	f43f af7e 	beq.w	270cc <mktime+0xb4>
   271d0:	2345      	movs	r3, #69	; 0x45
   271d2:	f240 1c6d 	movw	ip, #365	; 0x16d
   271d6:	2164      	movs	r1, #100	; 0x64
   271d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   271dc:	e012      	b.n	27204 <mktime+0x1ec>
   271de:	bb62      	cbnz	r2, 2723a <mktime+0x222>
   271e0:	fb93 f2f1 	sdiv	r2, r3, r1
   271e4:	fb01 3212 	mls	r2, r1, r2, r3
   271e8:	bb52      	cbnz	r2, 27240 <mktime+0x228>
   271ea:	f203 726c 	addw	r2, r3, #1900	; 0x76c
   271ee:	fb92 fef0 	sdiv	lr, r2, r0
   271f2:	fb00 221e 	mls	r2, r0, lr, r2
   271f6:	2a00      	cmp	r2, #0
   271f8:	bf14      	ite	ne
   271fa:	4662      	movne	r2, ip
   271fc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   27200:	1ab6      	subs	r6, r6, r2
   27202:	3b01      	subs	r3, #1
   27204:	429d      	cmp	r5, r3
   27206:	f003 0203 	and.w	r2, r3, #3
   2720a:	dbe8      	blt.n	271de <mktime+0x1c6>
   2720c:	b9da      	cbnz	r2, 27246 <mktime+0x22e>
   2720e:	2264      	movs	r2, #100	; 0x64
   27210:	fb95 f3f2 	sdiv	r3, r5, r2
   27214:	fb02 5313 	mls	r3, r2, r3, r5
   27218:	b9c3      	cbnz	r3, 2724c <mktime+0x234>
   2721a:	f205 736c 	addw	r3, r5, #1900	; 0x76c
   2721e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   27222:	fb93 f1f2 	sdiv	r1, r3, r2
   27226:	fb02 3311 	mls	r3, r2, r1, r3
   2722a:	2b00      	cmp	r3, #0
   2722c:	f240 136d 	movw	r3, #365	; 0x16d
   27230:	bf08      	it	eq
   27232:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   27236:	1af6      	subs	r6, r6, r3
   27238:	e748      	b.n	270cc <mktime+0xb4>
   2723a:	f240 126d 	movw	r2, #365	; 0x16d
   2723e:	e7df      	b.n	27200 <mktime+0x1e8>
   27240:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   27244:	e7dc      	b.n	27200 <mktime+0x1e8>
   27246:	f240 136d 	movw	r3, #365	; 0x16d
   2724a:	e7f4      	b.n	27236 <mktime+0x21e>
   2724c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   27250:	e7f1      	b.n	27236 <mktime+0x21e>
   27252:	f000 fdeb 	bl	27e2c <__tzcalc_limits>
   27256:	2800      	cmp	r0, #0
   27258:	f47f af50 	bne.w	270fc <mktime+0xe4>
   2725c:	f1b9 0f01 	cmp.w	r9, #1
   27260:	bfa8      	it	ge
   27262:	f04f 0901 	movge.w	r9, #1
   27266:	f1b9 0f01 	cmp.w	r9, #1
   2726a:	d159      	bne.n	27320 <mktime+0x308>
   2726c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
   27270:	f04f 0901 	mov.w	r9, #1
   27274:	191c      	adds	r4, r3, r4
   27276:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   2727a:	f000 fe85 	bl	27f88 <__tz_unlock>
   2727e:	3604      	adds	r6, #4
   27280:	2307      	movs	r3, #7
   27282:	fb96 f3f3 	sdiv	r3, r6, r3
   27286:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2728a:	1af6      	subs	r6, r6, r3
   2728c:	d44e      	bmi.n	2732c <mktime+0x314>
   2728e:	f8c7 9020 	str.w	r9, [r7, #32]
   27292:	61be      	str	r6, [r7, #24]
   27294:	4620      	mov	r0, r4
   27296:	4641      	mov	r1, r8
   27298:	b003      	add	sp, #12
   2729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2729e:	1a09      	subs	r1, r1, r0
   272a0:	ea4f 7ee0 	mov.w	lr, r0, asr #31
   272a4:	eb6b 0e0e 	sbc.w	lr, fp, lr
   272a8:	428c      	cmp	r4, r1
   272aa:	eb78 0e0e 	sbcs.w	lr, r8, lr
   272ae:	dbd5      	blt.n	2725c <mktime+0x244>
   272b0:	f8da 1000 	ldr.w	r1, [sl]
   272b4:	2900      	cmp	r1, #0
   272b6:	f43f af40 	beq.w	2713a <mktime+0x122>
   272ba:	f1b9 0f00 	cmp.w	r9, #0
   272be:	dd2d      	ble.n	2731c <mktime+0x304>
   272c0:	eba0 000c 	sub.w	r0, r0, ip
   272c4:	f04f 0900 	mov.w	r9, #0
   272c8:	e744      	b.n	27154 <mktime+0x13c>
   272ca:	f04f 32ff 	mov.w	r2, #4294967295
   272ce:	e756      	b.n	2717e <mktime+0x166>
   272d0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   272d4:	e771      	b.n	271ba <mktime+0x1a2>
   272d6:	f240 136d 	movw	r3, #365	; 0x16d
   272da:	e76e      	b.n	271ba <mktime+0x1a2>
   272dc:	07a9      	lsls	r1, r5, #30
   272de:	d117      	bne.n	27310 <mktime+0x2f8>
   272e0:	2064      	movs	r0, #100	; 0x64
   272e2:	fb95 f1f0 	sdiv	r1, r5, r0
   272e6:	fb00 5111 	mls	r1, r0, r1, r5
   272ea:	b9a1      	cbnz	r1, 27316 <mktime+0x2fe>
   272ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
   272f0:	f205 756c 	addw	r5, r5, #1900	; 0x76c
   272f4:	fb95 f0f1 	sdiv	r0, r5, r1
   272f8:	fb01 5510 	mls	r5, r1, r0, r5
   272fc:	f240 116d 	movw	r1, #365	; 0x16d
   27300:	2d00      	cmp	r5, #0
   27302:	bf08      	it	eq
   27304:	f44f 71b7 	moveq.w	r1, #366	; 0x16e
   27308:	428b      	cmp	r3, r1
   2730a:	bfa8      	it	ge
   2730c:	1a5b      	subge	r3, r3, r1
   2730e:	e754      	b.n	271ba <mktime+0x1a2>
   27310:	f240 116d 	movw	r1, #365	; 0x16d
   27314:	e7f8      	b.n	27308 <mktime+0x2f0>
   27316:	f44f 71b7 	mov.w	r1, #366	; 0x16e
   2731a:	e7f5      	b.n	27308 <mktime+0x2f0>
   2731c:	f04f 0900 	mov.w	r9, #0
   27320:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   27324:	191c      	adds	r4, r3, r4
   27326:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
   2732a:	e7a6      	b.n	2727a <mktime+0x262>
   2732c:	3607      	adds	r6, #7
   2732e:	e7ae      	b.n	2728e <mktime+0x276>
   27330:	f04f 34ff 	mov.w	r4, #4294967295
   27334:	46a0      	mov	r8, r4
   27336:	e7ad      	b.n	27294 <mktime+0x27c>
   27338:	00034420 	.word	0x00034420
   2733c:	00015180 	.word	0x00015180
   27340:	20030ef0 	.word	0x20030ef0

00027344 <_free_r>:
   27344:	b538      	push	{r3, r4, r5, lr}
   27346:	4605      	mov	r5, r0
   27348:	2900      	cmp	r1, #0
   2734a:	d041      	beq.n	273d0 <_free_r+0x8c>
   2734c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   27350:	1f0c      	subs	r4, r1, #4
   27352:	2b00      	cmp	r3, #0
   27354:	bfb8      	it	lt
   27356:	18e4      	addlt	r4, r4, r3
   27358:	f001 fb42 	bl	289e0 <__malloc_lock>
   2735c:	4a1d      	ldr	r2, [pc, #116]	; (273d4 <_free_r+0x90>)
   2735e:	6813      	ldr	r3, [r2, #0]
   27360:	b933      	cbnz	r3, 27370 <_free_r+0x2c>
   27362:	6063      	str	r3, [r4, #4]
   27364:	6014      	str	r4, [r2, #0]
   27366:	4628      	mov	r0, r5
   27368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2736c:	f001 bb3e 	b.w	289ec <__malloc_unlock>
   27370:	42a3      	cmp	r3, r4
   27372:	d908      	bls.n	27386 <_free_r+0x42>
   27374:	6820      	ldr	r0, [r4, #0]
   27376:	1821      	adds	r1, r4, r0
   27378:	428b      	cmp	r3, r1
   2737a:	bf01      	itttt	eq
   2737c:	6819      	ldreq	r1, [r3, #0]
   2737e:	685b      	ldreq	r3, [r3, #4]
   27380:	1809      	addeq	r1, r1, r0
   27382:	6021      	streq	r1, [r4, #0]
   27384:	e7ed      	b.n	27362 <_free_r+0x1e>
   27386:	461a      	mov	r2, r3
   27388:	685b      	ldr	r3, [r3, #4]
   2738a:	b10b      	cbz	r3, 27390 <_free_r+0x4c>
   2738c:	42a3      	cmp	r3, r4
   2738e:	d9fa      	bls.n	27386 <_free_r+0x42>
   27390:	6811      	ldr	r1, [r2, #0]
   27392:	1850      	adds	r0, r2, r1
   27394:	42a0      	cmp	r0, r4
   27396:	d10b      	bne.n	273b0 <_free_r+0x6c>
   27398:	6820      	ldr	r0, [r4, #0]
   2739a:	4401      	add	r1, r0
   2739c:	1850      	adds	r0, r2, r1
   2739e:	6011      	str	r1, [r2, #0]
   273a0:	4283      	cmp	r3, r0
   273a2:	d1e0      	bne.n	27366 <_free_r+0x22>
   273a4:	6818      	ldr	r0, [r3, #0]
   273a6:	685b      	ldr	r3, [r3, #4]
   273a8:	4408      	add	r0, r1
   273aa:	6053      	str	r3, [r2, #4]
   273ac:	6010      	str	r0, [r2, #0]
   273ae:	e7da      	b.n	27366 <_free_r+0x22>
   273b0:	d902      	bls.n	273b8 <_free_r+0x74>
   273b2:	230c      	movs	r3, #12
   273b4:	602b      	str	r3, [r5, #0]
   273b6:	e7d6      	b.n	27366 <_free_r+0x22>
   273b8:	6820      	ldr	r0, [r4, #0]
   273ba:	1821      	adds	r1, r4, r0
   273bc:	428b      	cmp	r3, r1
   273be:	bf02      	ittt	eq
   273c0:	6819      	ldreq	r1, [r3, #0]
   273c2:	685b      	ldreq	r3, [r3, #4]
   273c4:	1809      	addeq	r1, r1, r0
   273c6:	6063      	str	r3, [r4, #4]
   273c8:	bf08      	it	eq
   273ca:	6021      	streq	r1, [r4, #0]
   273cc:	6054      	str	r4, [r2, #4]
   273ce:	e7ca      	b.n	27366 <_free_r+0x22>
   273d0:	bd38      	pop	{r3, r4, r5, pc}
   273d2:	bf00      	nop
   273d4:	20030ee4 	.word	0x20030ee4

000273d8 <_malloc_r>:
   273d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273da:	1ccd      	adds	r5, r1, #3
   273dc:	4606      	mov	r6, r0
   273de:	f025 0503 	bic.w	r5, r5, #3
   273e2:	3508      	adds	r5, #8
   273e4:	2d0c      	cmp	r5, #12
   273e6:	bf38      	it	cc
   273e8:	250c      	movcc	r5, #12
   273ea:	2d00      	cmp	r5, #0
   273ec:	db01      	blt.n	273f2 <_malloc_r+0x1a>
   273ee:	42a9      	cmp	r1, r5
   273f0:	d903      	bls.n	273fa <_malloc_r+0x22>
   273f2:	230c      	movs	r3, #12
   273f4:	6033      	str	r3, [r6, #0]
   273f6:	2000      	movs	r0, #0
   273f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   273fa:	f001 faf1 	bl	289e0 <__malloc_lock>
   273fe:	4921      	ldr	r1, [pc, #132]	; (27484 <_malloc_r+0xac>)
   27400:	680a      	ldr	r2, [r1, #0]
   27402:	4614      	mov	r4, r2
   27404:	b99c      	cbnz	r4, 2742e <_malloc_r+0x56>
   27406:	4f20      	ldr	r7, [pc, #128]	; (27488 <_malloc_r+0xb0>)
   27408:	683b      	ldr	r3, [r7, #0]
   2740a:	b923      	cbnz	r3, 27416 <_malloc_r+0x3e>
   2740c:	4621      	mov	r1, r4
   2740e:	4630      	mov	r0, r6
   27410:	f000 fbb8 	bl	27b84 <_sbrk_r>
   27414:	6038      	str	r0, [r7, #0]
   27416:	4629      	mov	r1, r5
   27418:	4630      	mov	r0, r6
   2741a:	f000 fbb3 	bl	27b84 <_sbrk_r>
   2741e:	1c43      	adds	r3, r0, #1
   27420:	d123      	bne.n	2746a <_malloc_r+0x92>
   27422:	230c      	movs	r3, #12
   27424:	4630      	mov	r0, r6
   27426:	6033      	str	r3, [r6, #0]
   27428:	f001 fae0 	bl	289ec <__malloc_unlock>
   2742c:	e7e3      	b.n	273f6 <_malloc_r+0x1e>
   2742e:	6823      	ldr	r3, [r4, #0]
   27430:	1b5b      	subs	r3, r3, r5
   27432:	d417      	bmi.n	27464 <_malloc_r+0x8c>
   27434:	2b0b      	cmp	r3, #11
   27436:	d903      	bls.n	27440 <_malloc_r+0x68>
   27438:	6023      	str	r3, [r4, #0]
   2743a:	441c      	add	r4, r3
   2743c:	6025      	str	r5, [r4, #0]
   2743e:	e004      	b.n	2744a <_malloc_r+0x72>
   27440:	6863      	ldr	r3, [r4, #4]
   27442:	42a2      	cmp	r2, r4
   27444:	bf0c      	ite	eq
   27446:	600b      	streq	r3, [r1, #0]
   27448:	6053      	strne	r3, [r2, #4]
   2744a:	4630      	mov	r0, r6
   2744c:	f001 face 	bl	289ec <__malloc_unlock>
   27450:	f104 000b 	add.w	r0, r4, #11
   27454:	1d23      	adds	r3, r4, #4
   27456:	f020 0007 	bic.w	r0, r0, #7
   2745a:	1ac2      	subs	r2, r0, r3
   2745c:	bf1c      	itt	ne
   2745e:	1a1b      	subne	r3, r3, r0
   27460:	50a3      	strne	r3, [r4, r2]
   27462:	e7c9      	b.n	273f8 <_malloc_r+0x20>
   27464:	4622      	mov	r2, r4
   27466:	6864      	ldr	r4, [r4, #4]
   27468:	e7cc      	b.n	27404 <_malloc_r+0x2c>
   2746a:	1cc4      	adds	r4, r0, #3
   2746c:	f024 0403 	bic.w	r4, r4, #3
   27470:	42a0      	cmp	r0, r4
   27472:	d0e3      	beq.n	2743c <_malloc_r+0x64>
   27474:	1a21      	subs	r1, r4, r0
   27476:	4630      	mov	r0, r6
   27478:	f000 fb84 	bl	27b84 <_sbrk_r>
   2747c:	3001      	adds	r0, #1
   2747e:	d1dd      	bne.n	2743c <_malloc_r+0x64>
   27480:	e7cf      	b.n	27422 <_malloc_r+0x4a>
   27482:	bf00      	nop
   27484:	20030ee4 	.word	0x20030ee4
   27488:	20030ee0 	.word	0x20030ee0

0002748c <_printf_float>:
   2748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27490:	b091      	sub	sp, #68	; 0x44
   27492:	460c      	mov	r4, r1
   27494:	4616      	mov	r6, r2
   27496:	461f      	mov	r7, r3
   27498:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2749c:	4605      	mov	r5, r0
   2749e:	f001 fa9b 	bl	289d8 <_localeconv_r>
   274a2:	6803      	ldr	r3, [r0, #0]
   274a4:	4618      	mov	r0, r3
   274a6:	9308      	str	r3, [sp, #32]
   274a8:	f7e1 ffaf 	bl	940a <strlen>
   274ac:	2300      	movs	r3, #0
   274ae:	9009      	str	r0, [sp, #36]	; 0x24
   274b0:	930e      	str	r3, [sp, #56]	; 0x38
   274b2:	f8d8 3000 	ldr.w	r3, [r8]
   274b6:	f894 a018 	ldrb.w	sl, [r4, #24]
   274ba:	3307      	adds	r3, #7
   274bc:	f8d4 b000 	ldr.w	fp, [r4]
   274c0:	f023 0307 	bic.w	r3, r3, #7
   274c4:	f103 0208 	add.w	r2, r3, #8
   274c8:	f8c8 2000 	str.w	r2, [r8]
   274cc:	f04f 32ff 	mov.w	r2, #4294967295
   274d0:	e9d3 8900 	ldrd	r8, r9, [r3]
   274d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   274d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   274dc:	930b      	str	r3, [sp, #44]	; 0x2c
   274de:	4b9d      	ldr	r3, [pc, #628]	; (27754 <_printf_float+0x2c8>)
   274e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   274e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   274e8:	f7e1 fe0a 	bl	9100 <__aeabi_dcmpun>
   274ec:	bb70      	cbnz	r0, 2754c <_printf_float+0xc0>
   274ee:	f04f 32ff 	mov.w	r2, #4294967295
   274f2:	4b98      	ldr	r3, [pc, #608]	; (27754 <_printf_float+0x2c8>)
   274f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   274f8:	f7e1 fdc4 	bl	9084 <__aeabi_dcmple>
   274fc:	bb30      	cbnz	r0, 2754c <_printf_float+0xc0>
   274fe:	2200      	movs	r2, #0
   27500:	2300      	movs	r3, #0
   27502:	4640      	mov	r0, r8
   27504:	4649      	mov	r1, r9
   27506:	f7e1 fdb3 	bl	9070 <__aeabi_dcmplt>
   2750a:	b110      	cbz	r0, 27512 <_printf_float+0x86>
   2750c:	232d      	movs	r3, #45	; 0x2d
   2750e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27512:	4a91      	ldr	r2, [pc, #580]	; (27758 <_printf_float+0x2cc>)
   27514:	4b91      	ldr	r3, [pc, #580]	; (2775c <_printf_float+0x2d0>)
   27516:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2751a:	bf94      	ite	ls
   2751c:	4690      	movls	r8, r2
   2751e:	4698      	movhi	r8, r3
   27520:	2303      	movs	r3, #3
   27522:	f04f 0900 	mov.w	r9, #0
   27526:	6123      	str	r3, [r4, #16]
   27528:	f02b 0304 	bic.w	r3, fp, #4
   2752c:	6023      	str	r3, [r4, #0]
   2752e:	4633      	mov	r3, r6
   27530:	aa0f      	add	r2, sp, #60	; 0x3c
   27532:	4621      	mov	r1, r4
   27534:	4628      	mov	r0, r5
   27536:	9700      	str	r7, [sp, #0]
   27538:	f00a fb63 	bl	31c02 <_printf_common>
   2753c:	3001      	adds	r0, #1
   2753e:	f040 8099 	bne.w	27674 <_printf_float+0x1e8>
   27542:	f04f 30ff 	mov.w	r0, #4294967295
   27546:	b011      	add	sp, #68	; 0x44
   27548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2754c:	4642      	mov	r2, r8
   2754e:	464b      	mov	r3, r9
   27550:	4640      	mov	r0, r8
   27552:	4649      	mov	r1, r9
   27554:	f7e1 fdd4 	bl	9100 <__aeabi_dcmpun>
   27558:	b140      	cbz	r0, 2756c <_printf_float+0xe0>
   2755a:	464b      	mov	r3, r9
   2755c:	4a80      	ldr	r2, [pc, #512]	; (27760 <_printf_float+0x2d4>)
   2755e:	2b00      	cmp	r3, #0
   27560:	bfbc      	itt	lt
   27562:	232d      	movlt	r3, #45	; 0x2d
   27564:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   27568:	4b7e      	ldr	r3, [pc, #504]	; (27764 <_printf_float+0x2d8>)
   2756a:	e7d4      	b.n	27516 <_printf_float+0x8a>
   2756c:	6863      	ldr	r3, [r4, #4]
   2756e:	1c5a      	adds	r2, r3, #1
   27570:	d129      	bne.n	275c6 <_printf_float+0x13a>
   27572:	2306      	movs	r3, #6
   27574:	6063      	str	r3, [r4, #4]
   27576:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2757a:	2200      	movs	r2, #0
   2757c:	4628      	mov	r0, r5
   2757e:	6023      	str	r3, [r4, #0]
   27580:	9206      	str	r2, [sp, #24]
   27582:	aa0e      	add	r2, sp, #56	; 0x38
   27584:	e9cd a204 	strd	sl, r2, [sp, #16]
   27588:	aa0d      	add	r2, sp, #52	; 0x34
   2758a:	9203      	str	r2, [sp, #12]
   2758c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   27590:	e9cd 3201 	strd	r3, r2, [sp, #4]
   27594:	6863      	ldr	r3, [r4, #4]
   27596:	4642      	mov	r2, r8
   27598:	9300      	str	r3, [sp, #0]
   2759a:	464b      	mov	r3, r9
   2759c:	f00a fa91 	bl	31ac2 <__cvt>
   275a0:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   275a4:	4680      	mov	r8, r0
   275a6:	990d      	ldr	r1, [sp, #52]	; 0x34
   275a8:	d115      	bne.n	275d6 <_printf_float+0x14a>
   275aa:	1ccb      	adds	r3, r1, #3
   275ac:	db3b      	blt.n	27626 <_printf_float+0x19a>
   275ae:	6863      	ldr	r3, [r4, #4]
   275b0:	4299      	cmp	r1, r3
   275b2:	dc38      	bgt.n	27626 <_printf_float+0x19a>
   275b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   275b6:	4299      	cmp	r1, r3
   275b8:	db55      	blt.n	27666 <_printf_float+0x1da>
   275ba:	6823      	ldr	r3, [r4, #0]
   275bc:	6121      	str	r1, [r4, #16]
   275be:	07d8      	lsls	r0, r3, #31
   275c0:	d545      	bpl.n	2764e <_printf_float+0x1c2>
   275c2:	1c4b      	adds	r3, r1, #1
   275c4:	e042      	b.n	2764c <_printf_float+0x1c0>
   275c6:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   275ca:	2a47      	cmp	r2, #71	; 0x47
   275cc:	d1d3      	bne.n	27576 <_printf_float+0xea>
   275ce:	2b00      	cmp	r3, #0
   275d0:	d1d1      	bne.n	27576 <_printf_float+0xea>
   275d2:	2301      	movs	r3, #1
   275d4:	e7ce      	b.n	27574 <_printf_float+0xe8>
   275d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   275da:	d107      	bne.n	275ec <_printf_float+0x160>
   275dc:	1cc8      	adds	r0, r1, #3
   275de:	db25      	blt.n	2762c <_printf_float+0x1a0>
   275e0:	6863      	ldr	r3, [r4, #4]
   275e2:	428b      	cmp	r3, r1
   275e4:	db22      	blt.n	2762c <_printf_float+0x1a0>
   275e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
   275ea:	e7e3      	b.n	275b4 <_printf_float+0x128>
   275ec:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   275f0:	d81f      	bhi.n	27632 <_printf_float+0x1a6>
   275f2:	3901      	subs	r1, #1
   275f4:	4652      	mov	r2, sl
   275f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   275fa:	910d      	str	r1, [sp, #52]	; 0x34
   275fc:	f00a fac8 	bl	31b90 <__exponent>
   27600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27602:	4681      	mov	r9, r0
   27604:	1813      	adds	r3, r2, r0
   27606:	2a01      	cmp	r2, #1
   27608:	6123      	str	r3, [r4, #16]
   2760a:	dc02      	bgt.n	27612 <_printf_float+0x186>
   2760c:	6822      	ldr	r2, [r4, #0]
   2760e:	07d2      	lsls	r2, r2, #31
   27610:	d501      	bpl.n	27616 <_printf_float+0x18a>
   27612:	3301      	adds	r3, #1
   27614:	6123      	str	r3, [r4, #16]
   27616:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   2761a:	2b00      	cmp	r3, #0
   2761c:	d087      	beq.n	2752e <_printf_float+0xa2>
   2761e:	232d      	movs	r3, #45	; 0x2d
   27620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27624:	e783      	b.n	2752e <_printf_float+0xa2>
   27626:	f04f 0a65 	mov.w	sl, #101	; 0x65
   2762a:	e7e2      	b.n	275f2 <_printf_float+0x166>
   2762c:	f04f 0a45 	mov.w	sl, #69	; 0x45
   27630:	e7df      	b.n	275f2 <_printf_float+0x166>
   27632:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   27636:	d1bd      	bne.n	275b4 <_printf_float+0x128>
   27638:	2900      	cmp	r1, #0
   2763a:	6863      	ldr	r3, [r4, #4]
   2763c:	dd0b      	ble.n	27656 <_printf_float+0x1ca>
   2763e:	6121      	str	r1, [r4, #16]
   27640:	b913      	cbnz	r3, 27648 <_printf_float+0x1bc>
   27642:	6822      	ldr	r2, [r4, #0]
   27644:	07d0      	lsls	r0, r2, #31
   27646:	d502      	bpl.n	2764e <_printf_float+0x1c2>
   27648:	3301      	adds	r3, #1
   2764a:	440b      	add	r3, r1
   2764c:	6123      	str	r3, [r4, #16]
   2764e:	f04f 0900 	mov.w	r9, #0
   27652:	65a1      	str	r1, [r4, #88]	; 0x58
   27654:	e7df      	b.n	27616 <_printf_float+0x18a>
   27656:	b913      	cbnz	r3, 2765e <_printf_float+0x1d2>
   27658:	6822      	ldr	r2, [r4, #0]
   2765a:	07d2      	lsls	r2, r2, #31
   2765c:	d501      	bpl.n	27662 <_printf_float+0x1d6>
   2765e:	3302      	adds	r3, #2
   27660:	e7f4      	b.n	2764c <_printf_float+0x1c0>
   27662:	2301      	movs	r3, #1
   27664:	e7f2      	b.n	2764c <_printf_float+0x1c0>
   27666:	2900      	cmp	r1, #0
   27668:	bfd4      	ite	le
   2766a:	f1c1 0202 	rsble	r2, r1, #2
   2766e:	2201      	movgt	r2, #1
   27670:	4413      	add	r3, r2
   27672:	e7eb      	b.n	2764c <_printf_float+0x1c0>
   27674:	6823      	ldr	r3, [r4, #0]
   27676:	055a      	lsls	r2, r3, #21
   27678:	d407      	bmi.n	2768a <_printf_float+0x1fe>
   2767a:	6923      	ldr	r3, [r4, #16]
   2767c:	4642      	mov	r2, r8
   2767e:	4631      	mov	r1, r6
   27680:	4628      	mov	r0, r5
   27682:	47b8      	blx	r7
   27684:	3001      	adds	r0, #1
   27686:	d12b      	bne.n	276e0 <_printf_float+0x254>
   27688:	e75b      	b.n	27542 <_printf_float+0xb6>
   2768a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   2768e:	f240 80dc 	bls.w	2784a <_printf_float+0x3be>
   27692:	2200      	movs	r2, #0
   27694:	2300      	movs	r3, #0
   27696:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2769a:	f7e1 fcdf 	bl	905c <__aeabi_dcmpeq>
   2769e:	2800      	cmp	r0, #0
   276a0:	d033      	beq.n	2770a <_printf_float+0x27e>
   276a2:	2301      	movs	r3, #1
   276a4:	4a30      	ldr	r2, [pc, #192]	; (27768 <_printf_float+0x2dc>)
   276a6:	4631      	mov	r1, r6
   276a8:	4628      	mov	r0, r5
   276aa:	47b8      	blx	r7
   276ac:	3001      	adds	r0, #1
   276ae:	f43f af48 	beq.w	27542 <_printf_float+0xb6>
   276b2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   276b6:	4543      	cmp	r3, r8
   276b8:	db02      	blt.n	276c0 <_printf_float+0x234>
   276ba:	6823      	ldr	r3, [r4, #0]
   276bc:	07d8      	lsls	r0, r3, #31
   276be:	d50f      	bpl.n	276e0 <_printf_float+0x254>
   276c0:	4631      	mov	r1, r6
   276c2:	4628      	mov	r0, r5
   276c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   276c8:	47b8      	blx	r7
   276ca:	3001      	adds	r0, #1
   276cc:	f43f af39 	beq.w	27542 <_printf_float+0xb6>
   276d0:	f04f 0900 	mov.w	r9, #0
   276d4:	f108 38ff 	add.w	r8, r8, #4294967295
   276d8:	f104 0a1a 	add.w	sl, r4, #26
   276dc:	45c8      	cmp	r8, r9
   276de:	dc09      	bgt.n	276f4 <_printf_float+0x268>
   276e0:	6823      	ldr	r3, [r4, #0]
   276e2:	079b      	lsls	r3, r3, #30
   276e4:	f100 8102 	bmi.w	278ec <_printf_float+0x460>
   276e8:	68e0      	ldr	r0, [r4, #12]
   276ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   276ec:	4298      	cmp	r0, r3
   276ee:	bfb8      	it	lt
   276f0:	4618      	movlt	r0, r3
   276f2:	e728      	b.n	27546 <_printf_float+0xba>
   276f4:	2301      	movs	r3, #1
   276f6:	4652      	mov	r2, sl
   276f8:	4631      	mov	r1, r6
   276fa:	4628      	mov	r0, r5
   276fc:	47b8      	blx	r7
   276fe:	3001      	adds	r0, #1
   27700:	f43f af1f 	beq.w	27542 <_printf_float+0xb6>
   27704:	f109 0901 	add.w	r9, r9, #1
   27708:	e7e8      	b.n	276dc <_printf_float+0x250>
   2770a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2770c:	2b00      	cmp	r3, #0
   2770e:	dc38      	bgt.n	27782 <_printf_float+0x2f6>
   27710:	2301      	movs	r3, #1
   27712:	4a15      	ldr	r2, [pc, #84]	; (27768 <_printf_float+0x2dc>)
   27714:	4631      	mov	r1, r6
   27716:	4628      	mov	r0, r5
   27718:	47b8      	blx	r7
   2771a:	3001      	adds	r0, #1
   2771c:	f43f af11 	beq.w	27542 <_printf_float+0xb6>
   27720:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   27724:	ea59 0303 	orrs.w	r3, r9, r3
   27728:	d102      	bne.n	27730 <_printf_float+0x2a4>
   2772a:	6823      	ldr	r3, [r4, #0]
   2772c:	07d9      	lsls	r1, r3, #31
   2772e:	d5d7      	bpl.n	276e0 <_printf_float+0x254>
   27730:	4631      	mov	r1, r6
   27732:	4628      	mov	r0, r5
   27734:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   27738:	47b8      	blx	r7
   2773a:	3001      	adds	r0, #1
   2773c:	f43f af01 	beq.w	27542 <_printf_float+0xb6>
   27740:	f04f 0a00 	mov.w	sl, #0
   27744:	f104 0b1a 	add.w	fp, r4, #26
   27748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2774a:	425b      	negs	r3, r3
   2774c:	4553      	cmp	r3, sl
   2774e:	dc0d      	bgt.n	2776c <_printf_float+0x2e0>
   27750:	464b      	mov	r3, r9
   27752:	e793      	b.n	2767c <_printf_float+0x1f0>
   27754:	7fefffff 	.word	0x7fefffff
   27758:	00038b4e 	.word	0x00038b4e
   2775c:	000355c8 	.word	0x000355c8
   27760:	00038b52 	.word	0x00038b52
   27764:	00038b56 	.word	0x00038b56
   27768:	00036c50 	.word	0x00036c50
   2776c:	2301      	movs	r3, #1
   2776e:	465a      	mov	r2, fp
   27770:	4631      	mov	r1, r6
   27772:	4628      	mov	r0, r5
   27774:	47b8      	blx	r7
   27776:	3001      	adds	r0, #1
   27778:	f43f aee3 	beq.w	27542 <_printf_float+0xb6>
   2777c:	f10a 0a01 	add.w	sl, sl, #1
   27780:	e7e2      	b.n	27748 <_printf_float+0x2bc>
   27782:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27784:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   27788:	4553      	cmp	r3, sl
   2778a:	bfa8      	it	ge
   2778c:	4653      	movge	r3, sl
   2778e:	2b00      	cmp	r3, #0
   27790:	4699      	mov	r9, r3
   27792:	dc36      	bgt.n	27802 <_printf_float+0x376>
   27794:	f04f 0b00 	mov.w	fp, #0
   27798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2779c:	f104 021a 	add.w	r2, r4, #26
   277a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   277a2:	930a      	str	r3, [sp, #40]	; 0x28
   277a4:	eba3 0309 	sub.w	r3, r3, r9
   277a8:	455b      	cmp	r3, fp
   277aa:	dc31      	bgt.n	27810 <_printf_float+0x384>
   277ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   277ae:	459a      	cmp	sl, r3
   277b0:	dc3a      	bgt.n	27828 <_printf_float+0x39c>
   277b2:	6823      	ldr	r3, [r4, #0]
   277b4:	07da      	lsls	r2, r3, #31
   277b6:	d437      	bmi.n	27828 <_printf_float+0x39c>
   277b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   277ba:	ebaa 0903 	sub.w	r9, sl, r3
   277be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   277c0:	ebaa 0303 	sub.w	r3, sl, r3
   277c4:	4599      	cmp	r9, r3
   277c6:	bfa8      	it	ge
   277c8:	4699      	movge	r9, r3
   277ca:	f1b9 0f00 	cmp.w	r9, #0
   277ce:	dc33      	bgt.n	27838 <_printf_float+0x3ac>
   277d0:	f04f 0800 	mov.w	r8, #0
   277d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   277d8:	f104 0b1a 	add.w	fp, r4, #26
   277dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   277de:	ebaa 0303 	sub.w	r3, sl, r3
   277e2:	eba3 0309 	sub.w	r3, r3, r9
   277e6:	4543      	cmp	r3, r8
   277e8:	f77f af7a 	ble.w	276e0 <_printf_float+0x254>
   277ec:	2301      	movs	r3, #1
   277ee:	465a      	mov	r2, fp
   277f0:	4631      	mov	r1, r6
   277f2:	4628      	mov	r0, r5
   277f4:	47b8      	blx	r7
   277f6:	3001      	adds	r0, #1
   277f8:	f43f aea3 	beq.w	27542 <_printf_float+0xb6>
   277fc:	f108 0801 	add.w	r8, r8, #1
   27800:	e7ec      	b.n	277dc <_printf_float+0x350>
   27802:	4642      	mov	r2, r8
   27804:	4631      	mov	r1, r6
   27806:	4628      	mov	r0, r5
   27808:	47b8      	blx	r7
   2780a:	3001      	adds	r0, #1
   2780c:	d1c2      	bne.n	27794 <_printf_float+0x308>
   2780e:	e698      	b.n	27542 <_printf_float+0xb6>
   27810:	2301      	movs	r3, #1
   27812:	4631      	mov	r1, r6
   27814:	4628      	mov	r0, r5
   27816:	920a      	str	r2, [sp, #40]	; 0x28
   27818:	47b8      	blx	r7
   2781a:	3001      	adds	r0, #1
   2781c:	f43f ae91 	beq.w	27542 <_printf_float+0xb6>
   27820:	f10b 0b01 	add.w	fp, fp, #1
   27824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27826:	e7bb      	b.n	277a0 <_printf_float+0x314>
   27828:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2782c:	4631      	mov	r1, r6
   2782e:	4628      	mov	r0, r5
   27830:	47b8      	blx	r7
   27832:	3001      	adds	r0, #1
   27834:	d1c0      	bne.n	277b8 <_printf_float+0x32c>
   27836:	e684      	b.n	27542 <_printf_float+0xb6>
   27838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2783a:	464b      	mov	r3, r9
   2783c:	4631      	mov	r1, r6
   2783e:	4628      	mov	r0, r5
   27840:	4442      	add	r2, r8
   27842:	47b8      	blx	r7
   27844:	3001      	adds	r0, #1
   27846:	d1c3      	bne.n	277d0 <_printf_float+0x344>
   27848:	e67b      	b.n	27542 <_printf_float+0xb6>
   2784a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   2784e:	f1ba 0f01 	cmp.w	sl, #1
   27852:	dc01      	bgt.n	27858 <_printf_float+0x3cc>
   27854:	07db      	lsls	r3, r3, #31
   27856:	d536      	bpl.n	278c6 <_printf_float+0x43a>
   27858:	2301      	movs	r3, #1
   2785a:	4642      	mov	r2, r8
   2785c:	4631      	mov	r1, r6
   2785e:	4628      	mov	r0, r5
   27860:	47b8      	blx	r7
   27862:	3001      	adds	r0, #1
   27864:	f43f ae6d 	beq.w	27542 <_printf_float+0xb6>
   27868:	4631      	mov	r1, r6
   2786a:	4628      	mov	r0, r5
   2786c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   27870:	47b8      	blx	r7
   27872:	3001      	adds	r0, #1
   27874:	f43f ae65 	beq.w	27542 <_printf_float+0xb6>
   27878:	2200      	movs	r2, #0
   2787a:	2300      	movs	r3, #0
   2787c:	f10a 3aff 	add.w	sl, sl, #4294967295
   27880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   27884:	f7e1 fbea 	bl	905c <__aeabi_dcmpeq>
   27888:	b9c0      	cbnz	r0, 278bc <_printf_float+0x430>
   2788a:	4653      	mov	r3, sl
   2788c:	f108 0201 	add.w	r2, r8, #1
   27890:	4631      	mov	r1, r6
   27892:	4628      	mov	r0, r5
   27894:	47b8      	blx	r7
   27896:	3001      	adds	r0, #1
   27898:	d10c      	bne.n	278b4 <_printf_float+0x428>
   2789a:	e652      	b.n	27542 <_printf_float+0xb6>
   2789c:	2301      	movs	r3, #1
   2789e:	465a      	mov	r2, fp
   278a0:	4631      	mov	r1, r6
   278a2:	4628      	mov	r0, r5
   278a4:	47b8      	blx	r7
   278a6:	3001      	adds	r0, #1
   278a8:	f43f ae4b 	beq.w	27542 <_printf_float+0xb6>
   278ac:	f108 0801 	add.w	r8, r8, #1
   278b0:	45d0      	cmp	r8, sl
   278b2:	dbf3      	blt.n	2789c <_printf_float+0x410>
   278b4:	464b      	mov	r3, r9
   278b6:	f104 0250 	add.w	r2, r4, #80	; 0x50
   278ba:	e6e0      	b.n	2767e <_printf_float+0x1f2>
   278bc:	f04f 0800 	mov.w	r8, #0
   278c0:	f104 0b1a 	add.w	fp, r4, #26
   278c4:	e7f4      	b.n	278b0 <_printf_float+0x424>
   278c6:	2301      	movs	r3, #1
   278c8:	4642      	mov	r2, r8
   278ca:	e7e1      	b.n	27890 <_printf_float+0x404>
   278cc:	2301      	movs	r3, #1
   278ce:	464a      	mov	r2, r9
   278d0:	4631      	mov	r1, r6
   278d2:	4628      	mov	r0, r5
   278d4:	47b8      	blx	r7
   278d6:	3001      	adds	r0, #1
   278d8:	f43f ae33 	beq.w	27542 <_printf_float+0xb6>
   278dc:	f108 0801 	add.w	r8, r8, #1
   278e0:	68e3      	ldr	r3, [r4, #12]
   278e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   278e4:	1a5b      	subs	r3, r3, r1
   278e6:	4543      	cmp	r3, r8
   278e8:	dcf0      	bgt.n	278cc <_printf_float+0x440>
   278ea:	e6fd      	b.n	276e8 <_printf_float+0x25c>
   278ec:	f04f 0800 	mov.w	r8, #0
   278f0:	f104 0919 	add.w	r9, r4, #25
   278f4:	e7f4      	b.n	278e0 <_printf_float+0x454>
   278f6:	bf00      	nop

000278f8 <_printf_i>:
   278f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   278fc:	7e0f      	ldrb	r7, [r1, #24]
   278fe:	4691      	mov	r9, r2
   27900:	4680      	mov	r8, r0
   27902:	460c      	mov	r4, r1
   27904:	2f78      	cmp	r7, #120	; 0x78
   27906:	469a      	mov	sl, r3
   27908:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2790a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2790e:	d807      	bhi.n	27920 <_printf_i+0x28>
   27910:	2f62      	cmp	r7, #98	; 0x62
   27912:	d80a      	bhi.n	2792a <_printf_i+0x32>
   27914:	2f00      	cmp	r7, #0
   27916:	f000 80e0 	beq.w	27ada <_printf_i+0x1e2>
   2791a:	2f58      	cmp	r7, #88	; 0x58
   2791c:	f000 80bb 	beq.w	27a96 <_printf_i+0x19e>
   27920:	f104 0642 	add.w	r6, r4, #66	; 0x42
   27924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   27928:	e03a      	b.n	279a0 <_printf_i+0xa8>
   2792a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2792e:	2b15      	cmp	r3, #21
   27930:	d8f6      	bhi.n	27920 <_printf_i+0x28>
   27932:	a101      	add	r1, pc, #4	; (adr r1, 27938 <_printf_i+0x40>)
   27934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   27938:	00027991 	.word	0x00027991
   2793c:	000279a5 	.word	0x000279a5
   27940:	00027921 	.word	0x00027921
   27944:	00027921 	.word	0x00027921
   27948:	00027921 	.word	0x00027921
   2794c:	00027921 	.word	0x00027921
   27950:	000279a5 	.word	0x000279a5
   27954:	00027921 	.word	0x00027921
   27958:	00027921 	.word	0x00027921
   2795c:	00027921 	.word	0x00027921
   27960:	00027921 	.word	0x00027921
   27964:	00027ac1 	.word	0x00027ac1
   27968:	00027a35 	.word	0x00027a35
   2796c:	00027a77 	.word	0x00027a77
   27970:	00027921 	.word	0x00027921
   27974:	00027921 	.word	0x00027921
   27978:	00027ae3 	.word	0x00027ae3
   2797c:	00027921 	.word	0x00027921
   27980:	00027a35 	.word	0x00027a35
   27984:	00027921 	.word	0x00027921
   27988:	00027921 	.word	0x00027921
   2798c:	00027a7f 	.word	0x00027a7f
   27990:	682b      	ldr	r3, [r5, #0]
   27992:	f104 0642 	add.w	r6, r4, #66	; 0x42
   27996:	1d1a      	adds	r2, r3, #4
   27998:	681b      	ldr	r3, [r3, #0]
   2799a:	602a      	str	r2, [r5, #0]
   2799c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   279a0:	2301      	movs	r3, #1
   279a2:	e0ab      	b.n	27afc <_printf_i+0x204>
   279a4:	6823      	ldr	r3, [r4, #0]
   279a6:	6829      	ldr	r1, [r5, #0]
   279a8:	061f      	lsls	r7, r3, #24
   279aa:	f101 0004 	add.w	r0, r1, #4
   279ae:	6028      	str	r0, [r5, #0]
   279b0:	d501      	bpl.n	279b6 <_printf_i+0xbe>
   279b2:	680d      	ldr	r5, [r1, #0]
   279b4:	e003      	b.n	279be <_printf_i+0xc6>
   279b6:	065e      	lsls	r6, r3, #25
   279b8:	d5fb      	bpl.n	279b2 <_printf_i+0xba>
   279ba:	f9b1 5000 	ldrsh.w	r5, [r1]
   279be:	2d00      	cmp	r5, #0
   279c0:	6861      	ldr	r1, [r4, #4]
   279c2:	da7a      	bge.n	27aba <_printf_i+0x1c2>
   279c4:	202d      	movs	r0, #45	; 0x2d
   279c6:	2900      	cmp	r1, #0
   279c8:	60a1      	str	r1, [r4, #8]
   279ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   279ce:	da2d      	bge.n	27a2c <_printf_i+0x134>
   279d0:	426d      	negs	r5, r5
   279d2:	485e      	ldr	r0, [pc, #376]	; (27b4c <_printf_i+0x254>)
   279d4:	230a      	movs	r3, #10
   279d6:	4616      	mov	r6, r2
   279d8:	fbb5 f1f3 	udiv	r1, r5, r3
   279dc:	fb03 5711 	mls	r7, r3, r1, r5
   279e0:	5dc7      	ldrb	r7, [r0, r7]
   279e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
   279e6:	462f      	mov	r7, r5
   279e8:	460d      	mov	r5, r1
   279ea:	42bb      	cmp	r3, r7
   279ec:	d9f4      	bls.n	279d8 <_printf_i+0xe0>
   279ee:	2b08      	cmp	r3, #8
   279f0:	d10b      	bne.n	27a0a <_printf_i+0x112>
   279f2:	6823      	ldr	r3, [r4, #0]
   279f4:	07df      	lsls	r7, r3, #31
   279f6:	d508      	bpl.n	27a0a <_printf_i+0x112>
   279f8:	6923      	ldr	r3, [r4, #16]
   279fa:	6861      	ldr	r1, [r4, #4]
   279fc:	4299      	cmp	r1, r3
   279fe:	bfde      	ittt	le
   27a00:	2330      	movle	r3, #48	; 0x30
   27a02:	f806 3c01 	strble.w	r3, [r6, #-1]
   27a06:	f106 36ff 	addle.w	r6, r6, #4294967295
   27a0a:	1b92      	subs	r2, r2, r6
   27a0c:	6122      	str	r2, [r4, #16]
   27a0e:	464b      	mov	r3, r9
   27a10:	aa03      	add	r2, sp, #12
   27a12:	4621      	mov	r1, r4
   27a14:	4640      	mov	r0, r8
   27a16:	f8cd a000 	str.w	sl, [sp]
   27a1a:	f00a f8f2 	bl	31c02 <_printf_common>
   27a1e:	3001      	adds	r0, #1
   27a20:	d171      	bne.n	27b06 <_printf_i+0x20e>
   27a22:	f04f 30ff 	mov.w	r0, #4294967295
   27a26:	b004      	add	sp, #16
   27a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27a2c:	f023 0304 	bic.w	r3, r3, #4
   27a30:	6023      	str	r3, [r4, #0]
   27a32:	e7cd      	b.n	279d0 <_printf_i+0xd8>
   27a34:	682b      	ldr	r3, [r5, #0]
   27a36:	6820      	ldr	r0, [r4, #0]
   27a38:	1d19      	adds	r1, r3, #4
   27a3a:	6029      	str	r1, [r5, #0]
   27a3c:	0605      	lsls	r5, r0, #24
   27a3e:	d501      	bpl.n	27a44 <_printf_i+0x14c>
   27a40:	681d      	ldr	r5, [r3, #0]
   27a42:	e002      	b.n	27a4a <_printf_i+0x152>
   27a44:	0641      	lsls	r1, r0, #25
   27a46:	d5fb      	bpl.n	27a40 <_printf_i+0x148>
   27a48:	881d      	ldrh	r5, [r3, #0]
   27a4a:	2f6f      	cmp	r7, #111	; 0x6f
   27a4c:	483f      	ldr	r0, [pc, #252]	; (27b4c <_printf_i+0x254>)
   27a4e:	bf14      	ite	ne
   27a50:	230a      	movne	r3, #10
   27a52:	2308      	moveq	r3, #8
   27a54:	2100      	movs	r1, #0
   27a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   27a5a:	6866      	ldr	r6, [r4, #4]
   27a5c:	2e00      	cmp	r6, #0
   27a5e:	60a6      	str	r6, [r4, #8]
   27a60:	dbb9      	blt.n	279d6 <_printf_i+0xde>
   27a62:	6821      	ldr	r1, [r4, #0]
   27a64:	f021 0104 	bic.w	r1, r1, #4
   27a68:	6021      	str	r1, [r4, #0]
   27a6a:	2d00      	cmp	r5, #0
   27a6c:	d1b3      	bne.n	279d6 <_printf_i+0xde>
   27a6e:	2e00      	cmp	r6, #0
   27a70:	d1b1      	bne.n	279d6 <_printf_i+0xde>
   27a72:	4616      	mov	r6, r2
   27a74:	e7bb      	b.n	279ee <_printf_i+0xf6>
   27a76:	6823      	ldr	r3, [r4, #0]
   27a78:	f043 0320 	orr.w	r3, r3, #32
   27a7c:	6023      	str	r3, [r4, #0]
   27a7e:	2778      	movs	r7, #120	; 0x78
   27a80:	4833      	ldr	r0, [pc, #204]	; (27b50 <_printf_i+0x258>)
   27a82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   27a86:	6829      	ldr	r1, [r5, #0]
   27a88:	6823      	ldr	r3, [r4, #0]
   27a8a:	1d0e      	adds	r6, r1, #4
   27a8c:	602e      	str	r6, [r5, #0]
   27a8e:	061e      	lsls	r6, r3, #24
   27a90:	d503      	bpl.n	27a9a <_printf_i+0x1a2>
   27a92:	680d      	ldr	r5, [r1, #0]
   27a94:	e004      	b.n	27aa0 <_printf_i+0x1a8>
   27a96:	482d      	ldr	r0, [pc, #180]	; (27b4c <_printf_i+0x254>)
   27a98:	e7f3      	b.n	27a82 <_printf_i+0x18a>
   27a9a:	065d      	lsls	r5, r3, #25
   27a9c:	d5f9      	bpl.n	27a92 <_printf_i+0x19a>
   27a9e:	880d      	ldrh	r5, [r1, #0]
   27aa0:	07d9      	lsls	r1, r3, #31
   27aa2:	bf44      	itt	mi
   27aa4:	f043 0320 	orrmi.w	r3, r3, #32
   27aa8:	6023      	strmi	r3, [r4, #0]
   27aaa:	b10d      	cbz	r5, 27ab0 <_printf_i+0x1b8>
   27aac:	2310      	movs	r3, #16
   27aae:	e7d1      	b.n	27a54 <_printf_i+0x15c>
   27ab0:	6823      	ldr	r3, [r4, #0]
   27ab2:	f023 0320 	bic.w	r3, r3, #32
   27ab6:	6023      	str	r3, [r4, #0]
   27ab8:	e7f8      	b.n	27aac <_printf_i+0x1b4>
   27aba:	4824      	ldr	r0, [pc, #144]	; (27b4c <_printf_i+0x254>)
   27abc:	230a      	movs	r3, #10
   27abe:	e7cc      	b.n	27a5a <_printf_i+0x162>
   27ac0:	682b      	ldr	r3, [r5, #0]
   27ac2:	6826      	ldr	r6, [r4, #0]
   27ac4:	1d18      	adds	r0, r3, #4
   27ac6:	6961      	ldr	r1, [r4, #20]
   27ac8:	6028      	str	r0, [r5, #0]
   27aca:	0635      	lsls	r5, r6, #24
   27acc:	681b      	ldr	r3, [r3, #0]
   27ace:	d501      	bpl.n	27ad4 <_printf_i+0x1dc>
   27ad0:	6019      	str	r1, [r3, #0]
   27ad2:	e002      	b.n	27ada <_printf_i+0x1e2>
   27ad4:	0670      	lsls	r0, r6, #25
   27ad6:	d5fb      	bpl.n	27ad0 <_printf_i+0x1d8>
   27ad8:	8019      	strh	r1, [r3, #0]
   27ada:	2300      	movs	r3, #0
   27adc:	4616      	mov	r6, r2
   27ade:	6123      	str	r3, [r4, #16]
   27ae0:	e795      	b.n	27a0e <_printf_i+0x116>
   27ae2:	682b      	ldr	r3, [r5, #0]
   27ae4:	2100      	movs	r1, #0
   27ae6:	1d1a      	adds	r2, r3, #4
   27ae8:	602a      	str	r2, [r5, #0]
   27aea:	681e      	ldr	r6, [r3, #0]
   27aec:	6862      	ldr	r2, [r4, #4]
   27aee:	4630      	mov	r0, r6
   27af0:	f00a fbf1 	bl	322d6 <memchr>
   27af4:	b108      	cbz	r0, 27afa <_printf_i+0x202>
   27af6:	1b80      	subs	r0, r0, r6
   27af8:	6060      	str	r0, [r4, #4]
   27afa:	6863      	ldr	r3, [r4, #4]
   27afc:	6123      	str	r3, [r4, #16]
   27afe:	2300      	movs	r3, #0
   27b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   27b04:	e783      	b.n	27a0e <_printf_i+0x116>
   27b06:	6923      	ldr	r3, [r4, #16]
   27b08:	4632      	mov	r2, r6
   27b0a:	4649      	mov	r1, r9
   27b0c:	4640      	mov	r0, r8
   27b0e:	47d0      	blx	sl
   27b10:	3001      	adds	r0, #1
   27b12:	d086      	beq.n	27a22 <_printf_i+0x12a>
   27b14:	6823      	ldr	r3, [r4, #0]
   27b16:	079b      	lsls	r3, r3, #30
   27b18:	d414      	bmi.n	27b44 <_printf_i+0x24c>
   27b1a:	68e0      	ldr	r0, [r4, #12]
   27b1c:	9b03      	ldr	r3, [sp, #12]
   27b1e:	4298      	cmp	r0, r3
   27b20:	bfb8      	it	lt
   27b22:	4618      	movlt	r0, r3
   27b24:	e77f      	b.n	27a26 <_printf_i+0x12e>
   27b26:	2301      	movs	r3, #1
   27b28:	4632      	mov	r2, r6
   27b2a:	4649      	mov	r1, r9
   27b2c:	4640      	mov	r0, r8
   27b2e:	47d0      	blx	sl
   27b30:	3001      	adds	r0, #1
   27b32:	f43f af76 	beq.w	27a22 <_printf_i+0x12a>
   27b36:	3501      	adds	r5, #1
   27b38:	68e3      	ldr	r3, [r4, #12]
   27b3a:	9903      	ldr	r1, [sp, #12]
   27b3c:	1a5b      	subs	r3, r3, r1
   27b3e:	42ab      	cmp	r3, r5
   27b40:	dcf1      	bgt.n	27b26 <_printf_i+0x22e>
   27b42:	e7ea      	b.n	27b1a <_printf_i+0x222>
   27b44:	2500      	movs	r5, #0
   27b46:	f104 0619 	add.w	r6, r4, #25
   27b4a:	e7f5      	b.n	27b38 <_printf_i+0x240>
   27b4c:	00038b5a 	.word	0x00038b5a
   27b50:	00038b6b 	.word	0x00038b6b

00027b54 <iprintf>:
   27b54:	b40f      	push	{r0, r1, r2, r3}
   27b56:	4b0a      	ldr	r3, [pc, #40]	; (27b80 <iprintf+0x2c>)
   27b58:	b513      	push	{r0, r1, r4, lr}
   27b5a:	681c      	ldr	r4, [r3, #0]
   27b5c:	b124      	cbz	r4, 27b68 <iprintf+0x14>
   27b5e:	69a3      	ldr	r3, [r4, #24]
   27b60:	b913      	cbnz	r3, 27b68 <iprintf+0x14>
   27b62:	4620      	mov	r0, r4
   27b64:	f000 fc38 	bl	283d8 <__sinit>
   27b68:	ab05      	add	r3, sp, #20
   27b6a:	9a04      	ldr	r2, [sp, #16]
   27b6c:	68a1      	ldr	r1, [r4, #8]
   27b6e:	4620      	mov	r0, r4
   27b70:	9301      	str	r3, [sp, #4]
   27b72:	f001 fc0f 	bl	29394 <_vfiprintf_r>
   27b76:	b002      	add	sp, #8
   27b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27b7c:	b004      	add	sp, #16
   27b7e:	4770      	bx	lr
   27b80:	20008848 	.word	0x20008848

00027b84 <_sbrk_r>:
   27b84:	b538      	push	{r3, r4, r5, lr}
   27b86:	2300      	movs	r3, #0
   27b88:	4d05      	ldr	r5, [pc, #20]	; (27ba0 <_sbrk_r+0x1c>)
   27b8a:	4604      	mov	r4, r0
   27b8c:	4608      	mov	r0, r1
   27b8e:	602b      	str	r3, [r5, #0]
   27b90:	f7ea fa86 	bl	120a0 <_sbrk>
   27b94:	1c43      	adds	r3, r0, #1
   27b96:	d102      	bne.n	27b9e <_sbrk_r+0x1a>
   27b98:	682b      	ldr	r3, [r5, #0]
   27b9a:	b103      	cbz	r3, 27b9e <_sbrk_r+0x1a>
   27b9c:	6023      	str	r3, [r4, #0]
   27b9e:	bd38      	pop	{r3, r4, r5, pc}
   27ba0:	20030ef4 	.word	0x20030ef4

00027ba4 <strtod>:
   27ba4:	460a      	mov	r2, r1
   27ba6:	4601      	mov	r1, r0
   27ba8:	4802      	ldr	r0, [pc, #8]	; (27bb4 <strtod+0x10>)
   27baa:	4b03      	ldr	r3, [pc, #12]	; (27bb8 <strtod+0x14>)
   27bac:	6800      	ldr	r0, [r0, #0]
   27bae:	f7e2 b93b 	b.w	9e28 <_strtod_l>
   27bb2:	bf00      	nop
   27bb4:	20008848 	.word	0x20008848
   27bb8:	200088b4 	.word	0x200088b4

00027bbc <strtok>:
   27bbc:	4b16      	ldr	r3, [pc, #88]	; (27c18 <strtok+0x5c>)
   27bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bc2:	681f      	ldr	r7, [r3, #0]
   27bc4:	4605      	mov	r5, r0
   27bc6:	460e      	mov	r6, r1
   27bc8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
   27bca:	b9ec      	cbnz	r4, 27c08 <strtok+0x4c>
   27bcc:	2050      	movs	r0, #80	; 0x50
   27bce:	f7ff f939 	bl	26e44 <malloc>
   27bd2:	4602      	mov	r2, r0
   27bd4:	65b8      	str	r0, [r7, #88]	; 0x58
   27bd6:	b920      	cbnz	r0, 27be2 <strtok+0x26>
   27bd8:	4b10      	ldr	r3, [pc, #64]	; (27c1c <strtok+0x60>)
   27bda:	2157      	movs	r1, #87	; 0x57
   27bdc:	4810      	ldr	r0, [pc, #64]	; (27c20 <strtok+0x64>)
   27bde:	f000 fb9b 	bl	28318 <__assert_func>
   27be2:	e9c0 4400 	strd	r4, r4, [r0]
   27be6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   27bea:	e9c0 4404 	strd	r4, r4, [r0, #16]
   27bee:	6184      	str	r4, [r0, #24]
   27bf0:	7704      	strb	r4, [r0, #28]
   27bf2:	6244      	str	r4, [r0, #36]	; 0x24
   27bf4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   27bf8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   27bfc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   27c00:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   27c04:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   27c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
   27c0a:	4631      	mov	r1, r6
   27c0c:	4628      	mov	r0, r5
   27c0e:	2301      	movs	r3, #1
   27c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27c14:	f00a b8fe 	b.w	31e14 <__strtok_r>
   27c18:	20008848 	.word	0x20008848
   27c1c:	00038b7c 	.word	0x00038b7c
   27c20:	00038b93 	.word	0x00038b93

00027c24 <_strtol_l.constprop.0>:
   27c24:	2b24      	cmp	r3, #36	; 0x24
   27c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27c2a:	4686      	mov	lr, r0
   27c2c:	4690      	mov	r8, r2
   27c2e:	d801      	bhi.n	27c34 <_strtol_l.constprop.0+0x10>
   27c30:	2b01      	cmp	r3, #1
   27c32:	d106      	bne.n	27c42 <_strtol_l.constprop.0+0x1e>
   27c34:	f003 ffd3 	bl	2bbde <__errno>
   27c38:	2316      	movs	r3, #22
   27c3a:	6003      	str	r3, [r0, #0]
   27c3c:	2000      	movs	r0, #0
   27c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27c42:	460d      	mov	r5, r1
   27c44:	4835      	ldr	r0, [pc, #212]	; (27d1c <_strtol_l.constprop.0+0xf8>)
   27c46:	462a      	mov	r2, r5
   27c48:	f815 4b01 	ldrb.w	r4, [r5], #1
   27c4c:	5d06      	ldrb	r6, [r0, r4]
   27c4e:	f016 0608 	ands.w	r6, r6, #8
   27c52:	d1f8      	bne.n	27c46 <_strtol_l.constprop.0+0x22>
   27c54:	2c2d      	cmp	r4, #45	; 0x2d
   27c56:	d124      	bne.n	27ca2 <_strtol_l.constprop.0+0x7e>
   27c58:	782c      	ldrb	r4, [r5, #0]
   27c5a:	2601      	movs	r6, #1
   27c5c:	1c95      	adds	r5, r2, #2
   27c5e:	bb2b      	cbnz	r3, 27cac <_strtol_l.constprop.0+0x88>
   27c60:	2c30      	cmp	r4, #48	; 0x30
   27c62:	d030      	beq.n	27cc6 <_strtol_l.constprop.0+0xa2>
   27c64:	230a      	movs	r3, #10
   27c66:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
   27c6a:	2200      	movs	r2, #0
   27c6c:	f10c 3cff 	add.w	ip, ip, #4294967295
   27c70:	4610      	mov	r0, r2
   27c72:	fbbc f9f3 	udiv	r9, ip, r3
   27c76:	fb03 ca19 	mls	sl, r3, r9, ip
   27c7a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   27c7e:	2f09      	cmp	r7, #9
   27c80:	d828      	bhi.n	27cd4 <_strtol_l.constprop.0+0xb0>
   27c82:	463c      	mov	r4, r7
   27c84:	42a3      	cmp	r3, r4
   27c86:	dd34      	ble.n	27cf2 <_strtol_l.constprop.0+0xce>
   27c88:	1c57      	adds	r7, r2, #1
   27c8a:	d007      	beq.n	27c9c <_strtol_l.constprop.0+0x78>
   27c8c:	4581      	cmp	r9, r0
   27c8e:	d32d      	bcc.n	27cec <_strtol_l.constprop.0+0xc8>
   27c90:	d101      	bne.n	27c96 <_strtol_l.constprop.0+0x72>
   27c92:	45a2      	cmp	sl, r4
   27c94:	db2a      	blt.n	27cec <_strtol_l.constprop.0+0xc8>
   27c96:	fb00 4003 	mla	r0, r0, r3, r4
   27c9a:	2201      	movs	r2, #1
   27c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   27ca0:	e7eb      	b.n	27c7a <_strtol_l.constprop.0+0x56>
   27ca2:	2c2b      	cmp	r4, #43	; 0x2b
   27ca4:	bf04      	itt	eq
   27ca6:	782c      	ldrbeq	r4, [r5, #0]
   27ca8:	1c95      	addeq	r5, r2, #2
   27caa:	e7d8      	b.n	27c5e <_strtol_l.constprop.0+0x3a>
   27cac:	2b10      	cmp	r3, #16
   27cae:	d1da      	bne.n	27c66 <_strtol_l.constprop.0+0x42>
   27cb0:	2c30      	cmp	r4, #48	; 0x30
   27cb2:	d1d8      	bne.n	27c66 <_strtol_l.constprop.0+0x42>
   27cb4:	782a      	ldrb	r2, [r5, #0]
   27cb6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   27cba:	2a58      	cmp	r2, #88	; 0x58
   27cbc:	d1d3      	bne.n	27c66 <_strtol_l.constprop.0+0x42>
   27cbe:	786c      	ldrb	r4, [r5, #1]
   27cc0:	2310      	movs	r3, #16
   27cc2:	3502      	adds	r5, #2
   27cc4:	e7cf      	b.n	27c66 <_strtol_l.constprop.0+0x42>
   27cc6:	782b      	ldrb	r3, [r5, #0]
   27cc8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27ccc:	2b58      	cmp	r3, #88	; 0x58
   27cce:	d0f6      	beq.n	27cbe <_strtol_l.constprop.0+0x9a>
   27cd0:	2308      	movs	r3, #8
   27cd2:	e7c8      	b.n	27c66 <_strtol_l.constprop.0+0x42>
   27cd4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   27cd8:	2f19      	cmp	r7, #25
   27cda:	d801      	bhi.n	27ce0 <_strtol_l.constprop.0+0xbc>
   27cdc:	3c37      	subs	r4, #55	; 0x37
   27cde:	e7d1      	b.n	27c84 <_strtol_l.constprop.0+0x60>
   27ce0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   27ce4:	2f19      	cmp	r7, #25
   27ce6:	d804      	bhi.n	27cf2 <_strtol_l.constprop.0+0xce>
   27ce8:	3c57      	subs	r4, #87	; 0x57
   27cea:	e7cb      	b.n	27c84 <_strtol_l.constprop.0+0x60>
   27cec:	f04f 32ff 	mov.w	r2, #4294967295
   27cf0:	e7d4      	b.n	27c9c <_strtol_l.constprop.0+0x78>
   27cf2:	1c53      	adds	r3, r2, #1
   27cf4:	d108      	bne.n	27d08 <_strtol_l.constprop.0+0xe4>
   27cf6:	2322      	movs	r3, #34	; 0x22
   27cf8:	4660      	mov	r0, ip
   27cfa:	f8ce 3000 	str.w	r3, [lr]
   27cfe:	f1b8 0f00 	cmp.w	r8, #0
   27d02:	d09c      	beq.n	27c3e <_strtol_l.constprop.0+0x1a>
   27d04:	1e69      	subs	r1, r5, #1
   27d06:	e006      	b.n	27d16 <_strtol_l.constprop.0+0xf2>
   27d08:	b106      	cbz	r6, 27d0c <_strtol_l.constprop.0+0xe8>
   27d0a:	4240      	negs	r0, r0
   27d0c:	f1b8 0f00 	cmp.w	r8, #0
   27d10:	d095      	beq.n	27c3e <_strtol_l.constprop.0+0x1a>
   27d12:	2a00      	cmp	r2, #0
   27d14:	d1f6      	bne.n	27d04 <_strtol_l.constprop.0+0xe0>
   27d16:	f8c8 1000 	str.w	r1, [r8]
   27d1a:	e790      	b.n	27c3e <_strtol_l.constprop.0+0x1a>
   27d1c:	00038a4e 	.word	0x00038a4e

00027d20 <strtol>:
   27d20:	4613      	mov	r3, r2
   27d22:	460a      	mov	r2, r1
   27d24:	4601      	mov	r1, r0
   27d26:	4802      	ldr	r0, [pc, #8]	; (27d30 <strtol+0x10>)
   27d28:	6800      	ldr	r0, [r0, #0]
   27d2a:	f7ff bf7b 	b.w	27c24 <_strtol_l.constprop.0>
   27d2e:	bf00      	nop
   27d30:	20008848 	.word	0x20008848

00027d34 <_strtoul_l.constprop.0>:
   27d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27d38:	4686      	mov	lr, r0
   27d3a:	460d      	mov	r5, r1
   27d3c:	4e35      	ldr	r6, [pc, #212]	; (27e14 <_strtoul_l.constprop.0+0xe0>)
   27d3e:	4628      	mov	r0, r5
   27d40:	f815 4b01 	ldrb.w	r4, [r5], #1
   27d44:	5d37      	ldrb	r7, [r6, r4]
   27d46:	f017 0708 	ands.w	r7, r7, #8
   27d4a:	d1f8      	bne.n	27d3e <_strtoul_l.constprop.0+0xa>
   27d4c:	2c2d      	cmp	r4, #45	; 0x2d
   27d4e:	d126      	bne.n	27d9e <_strtoul_l.constprop.0+0x6a>
   27d50:	782c      	ldrb	r4, [r5, #0]
   27d52:	2701      	movs	r7, #1
   27d54:	1c85      	adds	r5, r0, #2
   27d56:	bb3b      	cbnz	r3, 27da8 <_strtoul_l.constprop.0+0x74>
   27d58:	2c30      	cmp	r4, #48	; 0x30
   27d5a:	d032      	beq.n	27dc2 <_strtoul_l.constprop.0+0x8e>
   27d5c:	230a      	movs	r3, #10
   27d5e:	f04f 38ff 	mov.w	r8, #4294967295
   27d62:	2600      	movs	r6, #0
   27d64:	fbb8 f8f3 	udiv	r8, r8, r3
   27d68:	fb03 f908 	mul.w	r9, r3, r8
   27d6c:	4630      	mov	r0, r6
   27d6e:	ea6f 0909 	mvn.w	r9, r9
   27d72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   27d76:	f1bc 0f09 	cmp.w	ip, #9
   27d7a:	d829      	bhi.n	27dd0 <_strtoul_l.constprop.0+0x9c>
   27d7c:	4664      	mov	r4, ip
   27d7e:	42a3      	cmp	r3, r4
   27d80:	dd37      	ble.n	27df2 <_strtoul_l.constprop.0+0xbe>
   27d82:	f1b6 3fff 	cmp.w	r6, #4294967295
   27d86:	d007      	beq.n	27d98 <_strtoul_l.constprop.0+0x64>
   27d88:	4580      	cmp	r8, r0
   27d8a:	d32f      	bcc.n	27dec <_strtoul_l.constprop.0+0xb8>
   27d8c:	d101      	bne.n	27d92 <_strtoul_l.constprop.0+0x5e>
   27d8e:	45a1      	cmp	r9, r4
   27d90:	db2c      	blt.n	27dec <_strtoul_l.constprop.0+0xb8>
   27d92:	fb00 4003 	mla	r0, r0, r3, r4
   27d96:	2601      	movs	r6, #1
   27d98:	f815 4b01 	ldrb.w	r4, [r5], #1
   27d9c:	e7e9      	b.n	27d72 <_strtoul_l.constprop.0+0x3e>
   27d9e:	2c2b      	cmp	r4, #43	; 0x2b
   27da0:	bf04      	itt	eq
   27da2:	782c      	ldrbeq	r4, [r5, #0]
   27da4:	1c85      	addeq	r5, r0, #2
   27da6:	e7d6      	b.n	27d56 <_strtoul_l.constprop.0+0x22>
   27da8:	2b10      	cmp	r3, #16
   27daa:	d1d8      	bne.n	27d5e <_strtoul_l.constprop.0+0x2a>
   27dac:	2c30      	cmp	r4, #48	; 0x30
   27dae:	d1d6      	bne.n	27d5e <_strtoul_l.constprop.0+0x2a>
   27db0:	7828      	ldrb	r0, [r5, #0]
   27db2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   27db6:	2858      	cmp	r0, #88	; 0x58
   27db8:	d1d1      	bne.n	27d5e <_strtoul_l.constprop.0+0x2a>
   27dba:	786c      	ldrb	r4, [r5, #1]
   27dbc:	2310      	movs	r3, #16
   27dbe:	3502      	adds	r5, #2
   27dc0:	e7cd      	b.n	27d5e <_strtoul_l.constprop.0+0x2a>
   27dc2:	782b      	ldrb	r3, [r5, #0]
   27dc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27dc8:	2b58      	cmp	r3, #88	; 0x58
   27dca:	d0f6      	beq.n	27dba <_strtoul_l.constprop.0+0x86>
   27dcc:	2308      	movs	r3, #8
   27dce:	e7c6      	b.n	27d5e <_strtoul_l.constprop.0+0x2a>
   27dd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   27dd4:	f1bc 0f19 	cmp.w	ip, #25
   27dd8:	d801      	bhi.n	27dde <_strtoul_l.constprop.0+0xaa>
   27dda:	3c37      	subs	r4, #55	; 0x37
   27ddc:	e7cf      	b.n	27d7e <_strtoul_l.constprop.0+0x4a>
   27dde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   27de2:	f1bc 0f19 	cmp.w	ip, #25
   27de6:	d804      	bhi.n	27df2 <_strtoul_l.constprop.0+0xbe>
   27de8:	3c57      	subs	r4, #87	; 0x57
   27dea:	e7c8      	b.n	27d7e <_strtoul_l.constprop.0+0x4a>
   27dec:	f04f 36ff 	mov.w	r6, #4294967295
   27df0:	e7d2      	b.n	27d98 <_strtoul_l.constprop.0+0x64>
   27df2:	1c73      	adds	r3, r6, #1
   27df4:	d106      	bne.n	27e04 <_strtoul_l.constprop.0+0xd0>
   27df6:	2322      	movs	r3, #34	; 0x22
   27df8:	4630      	mov	r0, r6
   27dfa:	f8ce 3000 	str.w	r3, [lr]
   27dfe:	b932      	cbnz	r2, 27e0e <_strtoul_l.constprop.0+0xda>
   27e00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27e04:	b107      	cbz	r7, 27e08 <_strtoul_l.constprop.0+0xd4>
   27e06:	4240      	negs	r0, r0
   27e08:	2a00      	cmp	r2, #0
   27e0a:	d0f9      	beq.n	27e00 <_strtoul_l.constprop.0+0xcc>
   27e0c:	b106      	cbz	r6, 27e10 <_strtoul_l.constprop.0+0xdc>
   27e0e:	1e69      	subs	r1, r5, #1
   27e10:	6011      	str	r1, [r2, #0]
   27e12:	e7f5      	b.n	27e00 <_strtoul_l.constprop.0+0xcc>
   27e14:	00038a4e 	.word	0x00038a4e

00027e18 <strtoul>:
   27e18:	4613      	mov	r3, r2
   27e1a:	460a      	mov	r2, r1
   27e1c:	4601      	mov	r1, r0
   27e1e:	4802      	ldr	r0, [pc, #8]	; (27e28 <strtoul+0x10>)
   27e20:	6800      	ldr	r0, [r0, #0]
   27e22:	f7ff bf87 	b.w	27d34 <_strtoul_l.constprop.0>
   27e26:	bf00      	nop
   27e28:	20008848 	.word	0x20008848

00027e2c <__tzcalc_limits>:
   27e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27e30:	4604      	mov	r4, r0
   27e32:	f000 fdcd 	bl	289d0 <__gettzinfo>
   27e36:	f240 73b1 	movw	r3, #1969	; 0x7b1
   27e3a:	429c      	cmp	r4, r3
   27e3c:	f340 8098 	ble.w	27f70 <__tzcalc_limits+0x144>
   27e40:	f46f 67f6 	mvn.w	r7, #1968	; 0x7b0
   27e44:	f2a4 73b2 	subw	r3, r4, #1970	; 0x7b2
   27e48:	f240 126d 	movw	r2, #365	; 0x16d
   27e4c:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
   27e50:	19e5      	adds	r5, r4, r7
   27e52:	4601      	mov	r1, r0
   27e54:	f100 0750 	add.w	r7, r0, #80	; 0x50
   27e58:	6044      	str	r4, [r0, #4]
   27e5a:	10ad      	asrs	r5, r5, #2
   27e5c:	fb02 5503 	mla	r5, r2, r3, r5
   27e60:	f06f 0263 	mvn.w	r2, #99	; 0x63
   27e64:	f2a4 736d 	subw	r3, r4, #1901	; 0x76d
   27e68:	fb93 f3f2 	sdiv	r3, r3, r2
   27e6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   27e70:	441d      	add	r5, r3
   27e72:	eb04 030c 	add.w	r3, r4, ip
   27e76:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 27f74 <__tzcalc_limits+0x148>
   27e7a:	fbb3 f3f2 	udiv	r3, r3, r2
   27e7e:	441d      	add	r5, r3
   27e80:	7a0b      	ldrb	r3, [r1, #8]
   27e82:	694a      	ldr	r2, [r1, #20]
   27e84:	2b4a      	cmp	r3, #74	; 0x4a
   27e86:	d131      	bne.n	27eec <__tzcalc_limits+0xc0>
   27e88:	07a6      	lsls	r6, r4, #30
   27e8a:	eb05 0302 	add.w	r3, r5, r2
   27e8e:	d106      	bne.n	27e9e <__tzcalc_limits+0x72>
   27e90:	f04f 0e64 	mov.w	lr, #100	; 0x64
   27e94:	fb94 f6fe 	sdiv	r6, r4, lr
   27e98:	fb0e 4616 	mls	r6, lr, r6, r4
   27e9c:	b936      	cbnz	r6, 27eac <__tzcalc_limits+0x80>
   27e9e:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   27ea2:	fb94 f6fe 	sdiv	r6, r4, lr
   27ea6:	fb0e 4616 	mls	r6, lr, r6, r4
   27eaa:	b9ee      	cbnz	r6, 27ee8 <__tzcalc_limits+0xbc>
   27eac:	2a3b      	cmp	r2, #59	; 0x3b
   27eae:	bfd4      	ite	le
   27eb0:	2200      	movle	r2, #0
   27eb2:	2201      	movgt	r2, #1
   27eb4:	4413      	add	r3, r2
   27eb6:	3b01      	subs	r3, #1
   27eb8:	698a      	ldr	r2, [r1, #24]
   27eba:	fb0c 2303 	mla	r3, ip, r3, r2
   27ebe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   27ec0:	4413      	add	r3, r2
   27ec2:	17da      	asrs	r2, r3, #31
   27ec4:	e9c1 3208 	strd	r3, r2, [r1, #32]
   27ec8:	3128      	adds	r1, #40	; 0x28
   27eca:	428f      	cmp	r7, r1
   27ecc:	d1d8      	bne.n	27e80 <__tzcalc_limits+0x54>
   27ece:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
   27ed2:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
   27ed6:	428c      	cmp	r4, r1
   27ed8:	4193      	sbcs	r3, r2
   27eda:	bfb4      	ite	lt
   27edc:	2301      	movlt	r3, #1
   27ede:	2300      	movge	r3, #0
   27ee0:	6003      	str	r3, [r0, #0]
   27ee2:	2001      	movs	r0, #1
   27ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27ee8:	2200      	movs	r2, #0
   27eea:	e7e3      	b.n	27eb4 <__tzcalc_limits+0x88>
   27eec:	2b44      	cmp	r3, #68	; 0x44
   27eee:	d101      	bne.n	27ef4 <__tzcalc_limits+0xc8>
   27ef0:	18ab      	adds	r3, r5, r2
   27ef2:	e7e1      	b.n	27eb8 <__tzcalc_limits+0x8c>
   27ef4:	07a3      	lsls	r3, r4, #30
   27ef6:	d105      	bne.n	27f04 <__tzcalc_limits+0xd8>
   27ef8:	2664      	movs	r6, #100	; 0x64
   27efa:	fb94 f3f6 	sdiv	r3, r4, r6
   27efe:	fb06 4313 	mls	r3, r6, r3, r4
   27f02:	bb7b      	cbnz	r3, 27f64 <__tzcalc_limits+0x138>
   27f04:	f44f 73c8 	mov.w	r3, #400	; 0x190
   27f08:	fb94 f6f3 	sdiv	r6, r4, r3
   27f0c:	fb03 4616 	mls	r6, r3, r6, r4
   27f10:	fab6 f686 	clz	r6, r6
   27f14:	0976      	lsrs	r6, r6, #5
   27f16:	f04f 0a30 	mov.w	sl, #48	; 0x30
   27f1a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 27f78 <__tzcalc_limits+0x14c>
   27f1e:	f8d1 900c 	ldr.w	r9, [r1, #12]
   27f22:	462b      	mov	r3, r5
   27f24:	f04f 0800 	mov.w	r8, #0
   27f28:	fb0a e606 	mla	r6, sl, r6, lr
   27f2c:	f108 0801 	add.w	r8, r8, #1
   27f30:	45c1      	cmp	r9, r8
   27f32:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
   27f36:	dc17      	bgt.n	27f68 <__tzcalc_limits+0x13c>
   27f38:	f103 0804 	add.w	r8, r3, #4
   27f3c:	2607      	movs	r6, #7
   27f3e:	fb98 f6f6 	sdiv	r6, r8, r6
   27f42:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   27f46:	eba8 0606 	sub.w	r6, r8, r6
   27f4a:	1b92      	subs	r2, r2, r6
   27f4c:	690e      	ldr	r6, [r1, #16]
   27f4e:	f106 36ff 	add.w	r6, r6, #4294967295
   27f52:	bf48      	it	mi
   27f54:	3207      	addmi	r2, #7
   27f56:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   27f5a:	4432      	add	r2, r6
   27f5c:	4572      	cmp	r2, lr
   27f5e:	da05      	bge.n	27f6c <__tzcalc_limits+0x140>
   27f60:	4413      	add	r3, r2
   27f62:	e7a9      	b.n	27eb8 <__tzcalc_limits+0x8c>
   27f64:	2601      	movs	r6, #1
   27f66:	e7d6      	b.n	27f16 <__tzcalc_limits+0xea>
   27f68:	4473      	add	r3, lr
   27f6a:	e7df      	b.n	27f2c <__tzcalc_limits+0x100>
   27f6c:	3a07      	subs	r2, #7
   27f6e:	e7f5      	b.n	27f5c <__tzcalc_limits+0x130>
   27f70:	2000      	movs	r0, #0
   27f72:	e7b7      	b.n	27ee4 <__tzcalc_limits+0xb8>
   27f74:	00015180 	.word	0x00015180
   27f78:	00034510 	.word	0x00034510

00027f7c <__tz_lock>:
   27f7c:	4801      	ldr	r0, [pc, #4]	; (27f84 <__tz_lock+0x8>)
   27f7e:	f003 be1e 	b.w	2bbbe <__retarget_lock_acquire>
   27f82:	bf00      	nop
   27f84:	20008c90 	.word	0x20008c90

00027f88 <__tz_unlock>:
   27f88:	4801      	ldr	r0, [pc, #4]	; (27f90 <__tz_unlock+0x8>)
   27f8a:	f003 be24 	b.w	2bbd6 <__retarget_lock_release>
   27f8e:	bf00      	nop
   27f90:	20008c90 	.word	0x20008c90

00027f94 <_tzset_unlocked>:
   27f94:	4b01      	ldr	r3, [pc, #4]	; (27f9c <_tzset_unlocked+0x8>)
   27f96:	6818      	ldr	r0, [r3, #0]
   27f98:	f000 b802 	b.w	27fa0 <_tzset_unlocked_r>
   27f9c:	20008848 	.word	0x20008848

00027fa0 <_tzset_unlocked_r>:
   27fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fa4:	4607      	mov	r7, r0
   27fa6:	b08d      	sub	sp, #52	; 0x34
   27fa8:	f000 fd12 	bl	289d0 <__gettzinfo>
   27fac:	49b7      	ldr	r1, [pc, #732]	; (2828c <_tzset_unlocked_r+0x2ec>)
   27fae:	4604      	mov	r4, r0
   27fb0:	4638      	mov	r0, r7
   27fb2:	f00a f977 	bl	322a4 <_getenv_r>
   27fb6:	4eb6      	ldr	r6, [pc, #728]	; (28290 <_tzset_unlocked_r+0x2f0>)
   27fb8:	4605      	mov	r5, r0
   27fba:	b970      	cbnz	r0, 27fda <_tzset_unlocked_r+0x3a>
   27fbc:	4bb5      	ldr	r3, [pc, #724]	; (28294 <_tzset_unlocked_r+0x2f4>)
   27fbe:	4ab6      	ldr	r2, [pc, #728]	; (28298 <_tzset_unlocked_r+0x2f8>)
   27fc0:	6018      	str	r0, [r3, #0]
   27fc2:	4bb6      	ldr	r3, [pc, #728]	; (2829c <_tzset_unlocked_r+0x2fc>)
   27fc4:	6018      	str	r0, [r3, #0]
   27fc6:	4bb6      	ldr	r3, [pc, #728]	; (282a0 <_tzset_unlocked_r+0x300>)
   27fc8:	6830      	ldr	r0, [r6, #0]
   27fca:	e9c3 2200 	strd	r2, r2, [r3]
   27fce:	f7fe ff41 	bl	26e54 <free>
   27fd2:	6035      	str	r5, [r6, #0]
   27fd4:	b00d      	add	sp, #52	; 0x34
   27fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27fda:	6831      	ldr	r1, [r6, #0]
   27fdc:	2900      	cmp	r1, #0
   27fde:	d164      	bne.n	280aa <_tzset_unlocked_r+0x10a>
   27fe0:	6830      	ldr	r0, [r6, #0]
   27fe2:	f7fe ff37 	bl	26e54 <free>
   27fe6:	4628      	mov	r0, r5
   27fe8:	f7e1 fa0f 	bl	940a <strlen>
   27fec:	1c41      	adds	r1, r0, #1
   27fee:	4638      	mov	r0, r7
   27ff0:	f7ff f9f2 	bl	273d8 <_malloc_r>
   27ff4:	6030      	str	r0, [r6, #0]
   27ff6:	2800      	cmp	r0, #0
   27ff8:	d15c      	bne.n	280b4 <_tzset_unlocked_r+0x114>
   27ffa:	782b      	ldrb	r3, [r5, #0]
   27ffc:	ae0a      	add	r6, sp, #40	; 0x28
   27ffe:	4aa9      	ldr	r2, [pc, #676]	; (282a4 <_tzset_unlocked_r+0x304>)
   28000:	2b3a      	cmp	r3, #58	; 0x3a
   28002:	49a9      	ldr	r1, [pc, #676]	; (282a8 <_tzset_unlocked_r+0x308>)
   28004:	4633      	mov	r3, r6
   28006:	bf08      	it	eq
   28008:	3501      	addeq	r5, #1
   2800a:	4628      	mov	r0, r5
   2800c:	f001 faee 	bl	295ec <siscanf>
   28010:	2800      	cmp	r0, #0
   28012:	dddf      	ble.n	27fd4 <_tzset_unlocked_r+0x34>
   28014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28016:	eb05 0903 	add.w	r9, r5, r3
   2801a:	5ceb      	ldrb	r3, [r5, r3]
   2801c:	2b2d      	cmp	r3, #45	; 0x2d
   2801e:	d14d      	bne.n	280bc <_tzset_unlocked_r+0x11c>
   28020:	f109 0901 	add.w	r9, r9, #1
   28024:	f04f 3aff 	mov.w	sl, #4294967295
   28028:	af08      	add	r7, sp, #32
   2802a:	f10d 081e 	add.w	r8, sp, #30
   2802e:	2500      	movs	r5, #0
   28030:	4633      	mov	r3, r6
   28032:	aa07      	add	r2, sp, #28
   28034:	499d      	ldr	r1, [pc, #628]	; (282ac <_tzset_unlocked_r+0x30c>)
   28036:	4648      	mov	r0, r9
   28038:	9603      	str	r6, [sp, #12]
   2803a:	f8cd 8000 	str.w	r8, [sp]
   2803e:	f8ad 501e 	strh.w	r5, [sp, #30]
   28042:	f8ad 5020 	strh.w	r5, [sp, #32]
   28046:	e9cd 6701 	strd	r6, r7, [sp, #4]
   2804a:	f001 facf 	bl	295ec <siscanf>
   2804e:	42a8      	cmp	r0, r5
   28050:	ddc0      	ble.n	27fd4 <_tzset_unlocked_r+0x34>
   28052:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   28056:	213c      	movs	r1, #60	; 0x3c
   28058:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2805c:	f8df b240 	ldr.w	fp, [pc, #576]	; 282a0 <_tzset_unlocked_r+0x300>
   28060:	fb01 3302 	mla	r3, r1, r2, r3
   28064:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   28068:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2806c:	fb01 3302 	mla	r3, r1, r2, r3
   28070:	498d      	ldr	r1, [pc, #564]	; (282a8 <_tzset_unlocked_r+0x308>)
   28072:	fb0a f303 	mul.w	r3, sl, r3
   28076:	62a3      	str	r3, [r4, #40]	; 0x28
   28078:	4b8a      	ldr	r3, [pc, #552]	; (282a4 <_tzset_unlocked_r+0x304>)
   2807a:	f8cb 3000 	str.w	r3, [fp]
   2807e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28080:	eb09 0a03 	add.w	sl, r9, r3
   28084:	f8df 9228 	ldr.w	r9, [pc, #552]	; 282b0 <_tzset_unlocked_r+0x310>
   28088:	4633      	mov	r3, r6
   2808a:	464a      	mov	r2, r9
   2808c:	4650      	mov	r0, sl
   2808e:	f001 faad 	bl	295ec <siscanf>
   28092:	42a8      	cmp	r0, r5
   28094:	dc19      	bgt.n	280ca <_tzset_unlocked_r+0x12a>
   28096:	f8db 3000 	ldr.w	r3, [fp]
   2809a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2809c:	f8cb 3004 	str.w	r3, [fp, #4]
   280a0:	4b7c      	ldr	r3, [pc, #496]	; (28294 <_tzset_unlocked_r+0x2f4>)
   280a2:	601a      	str	r2, [r3, #0]
   280a4:	4b7d      	ldr	r3, [pc, #500]	; (2829c <_tzset_unlocked_r+0x2fc>)
   280a6:	601d      	str	r5, [r3, #0]
   280a8:	e794      	b.n	27fd4 <_tzset_unlocked_r+0x34>
   280aa:	f7e1 f9a4 	bl	93f6 <strcmp>
   280ae:	2800      	cmp	r0, #0
   280b0:	d196      	bne.n	27fe0 <_tzset_unlocked_r+0x40>
   280b2:	e78f      	b.n	27fd4 <_tzset_unlocked_r+0x34>
   280b4:	4629      	mov	r1, r5
   280b6:	f009 fe3d 	bl	31d34 <strcpy>
   280ba:	e79e      	b.n	27ffa <_tzset_unlocked_r+0x5a>
   280bc:	2b2b      	cmp	r3, #43	; 0x2b
   280be:	f04f 0a01 	mov.w	sl, #1
   280c2:	bf08      	it	eq
   280c4:	f109 0901 	addeq.w	r9, r9, #1
   280c8:	e7ae      	b.n	28028 <_tzset_unlocked_r+0x88>
   280ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   280cc:	f8cb 9004 	str.w	r9, [fp, #4]
   280d0:	eb0a 0903 	add.w	r9, sl, r3
   280d4:	f81a 3003 	ldrb.w	r3, [sl, r3]
   280d8:	2b2d      	cmp	r3, #45	; 0x2d
   280da:	f040 808f 	bne.w	281fc <_tzset_unlocked_r+0x25c>
   280de:	f109 0901 	add.w	r9, r9, #1
   280e2:	f04f 35ff 	mov.w	r5, #4294967295
   280e6:	2300      	movs	r3, #0
   280e8:	aa07      	add	r2, sp, #28
   280ea:	4970      	ldr	r1, [pc, #448]	; (282ac <_tzset_unlocked_r+0x30c>)
   280ec:	4648      	mov	r0, r9
   280ee:	f8ad 301c 	strh.w	r3, [sp, #28]
   280f2:	f8ad 301e 	strh.w	r3, [sp, #30]
   280f6:	f8ad 3020 	strh.w	r3, [sp, #32]
   280fa:	930a      	str	r3, [sp, #40]	; 0x28
   280fc:	4633      	mov	r3, r6
   280fe:	e9cd 7602 	strd	r7, r6, [sp, #8]
   28102:	e9cd 8600 	strd	r8, r6, [sp]
   28106:	f001 fa71 	bl	295ec <siscanf>
   2810a:	2800      	cmp	r0, #0
   2810c:	dc7d      	bgt.n	2820a <_tzset_unlocked_r+0x26a>
   2810e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28110:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   28114:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   28116:	f04f 0b00 	mov.w	fp, #0
   2811a:	6523      	str	r3, [r4, #80]	; 0x50
   2811c:	444d      	add	r5, r9
   2811e:	46a1      	mov	r9, r4
   28120:	782b      	ldrb	r3, [r5, #0]
   28122:	2b2c      	cmp	r3, #44	; 0x2c
   28124:	bf08      	it	eq
   28126:	3501      	addeq	r5, #1
   28128:	f895 a000 	ldrb.w	sl, [r5]
   2812c:	f1ba 0f4d 	cmp.w	sl, #77	; 0x4d
   28130:	d17d      	bne.n	2822e <_tzset_unlocked_r+0x28e>
   28132:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   28136:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   2813a:	495e      	ldr	r1, [pc, #376]	; (282b4 <_tzset_unlocked_r+0x314>)
   2813c:	4628      	mov	r0, r5
   2813e:	9603      	str	r6, [sp, #12]
   28140:	e9cd 6301 	strd	r6, r3, [sp, #4]
   28144:	ab09      	add	r3, sp, #36	; 0x24
   28146:	9300      	str	r3, [sp, #0]
   28148:	4633      	mov	r3, r6
   2814a:	f001 fa4f 	bl	295ec <siscanf>
   2814e:	2803      	cmp	r0, #3
   28150:	f47f af40 	bne.w	27fd4 <_tzset_unlocked_r+0x34>
   28154:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   28158:	1e4b      	subs	r3, r1, #1
   2815a:	2b0b      	cmp	r3, #11
   2815c:	f63f af3a 	bhi.w	27fd4 <_tzset_unlocked_r+0x34>
   28160:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   28164:	1e53      	subs	r3, r2, #1
   28166:	2b04      	cmp	r3, #4
   28168:	f63f af34 	bhi.w	27fd4 <_tzset_unlocked_r+0x34>
   2816c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   28170:	2b06      	cmp	r3, #6
   28172:	f63f af2f 	bhi.w	27fd4 <_tzset_unlocked_r+0x34>
   28176:	f889 a008 	strb.w	sl, [r9, #8]
   2817a:	f8c9 3014 	str.w	r3, [r9, #20]
   2817e:	e9c9 1203 	strd	r1, r2, [r9, #12]
   28182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28184:	eb05 0a03 	add.w	sl, r5, r3
   28188:	2302      	movs	r3, #2
   2818a:	f8ad 301c 	strh.w	r3, [sp, #28]
   2818e:	2300      	movs	r3, #0
   28190:	f8ad 301e 	strh.w	r3, [sp, #30]
   28194:	f8ad 3020 	strh.w	r3, [sp, #32]
   28198:	930a      	str	r3, [sp, #40]	; 0x28
   2819a:	f89a 3000 	ldrb.w	r3, [sl]
   2819e:	2b2f      	cmp	r3, #47	; 0x2f
   281a0:	d109      	bne.n	281b6 <_tzset_unlocked_r+0x216>
   281a2:	4633      	mov	r3, r6
   281a4:	aa07      	add	r2, sp, #28
   281a6:	4944      	ldr	r1, [pc, #272]	; (282b8 <_tzset_unlocked_r+0x318>)
   281a8:	4650      	mov	r0, sl
   281aa:	e9cd 7602 	strd	r7, r6, [sp, #8]
   281ae:	e9cd 8600 	strd	r8, r6, [sp]
   281b2:	f001 fa1b 	bl	295ec <siscanf>
   281b6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   281ba:	213c      	movs	r1, #60	; 0x3c
   281bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   281c0:	f109 0928 	add.w	r9, r9, #40	; 0x28
   281c4:	fb01 3302 	mla	r3, r1, r2, r3
   281c8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   281cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   281d0:	fb01 3302 	mla	r3, r1, r2, r3
   281d4:	f849 3c10 	str.w	r3, [r9, #-16]
   281d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   281da:	4455      	add	r5, sl
   281dc:	f1bb 0f00 	cmp.w	fp, #0
   281e0:	d022      	beq.n	28228 <_tzset_unlocked_r+0x288>
   281e2:	6860      	ldr	r0, [r4, #4]
   281e4:	f7ff fe22 	bl	27e2c <__tzcalc_limits>
   281e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   281ea:	4b2a      	ldr	r3, [pc, #168]	; (28294 <_tzset_unlocked_r+0x2f4>)
   281ec:	601a      	str	r2, [r3, #0]
   281ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
   281f0:	1a9b      	subs	r3, r3, r2
   281f2:	4a2a      	ldr	r2, [pc, #168]	; (2829c <_tzset_unlocked_r+0x2fc>)
   281f4:	bf18      	it	ne
   281f6:	2301      	movne	r3, #1
   281f8:	6013      	str	r3, [r2, #0]
   281fa:	e6eb      	b.n	27fd4 <_tzset_unlocked_r+0x34>
   281fc:	2b2b      	cmp	r3, #43	; 0x2b
   281fe:	f04f 0501 	mov.w	r5, #1
   28202:	bf08      	it	eq
   28204:	f109 0901 	addeq.w	r9, r9, #1
   28208:	e76d      	b.n	280e6 <_tzset_unlocked_r+0x146>
   2820a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   2820e:	213c      	movs	r1, #60	; 0x3c
   28210:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   28214:	fb01 3302 	mla	r3, r1, r2, r3
   28218:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2821c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   28220:	fb01 3302 	mla	r3, r1, r2, r3
   28224:	436b      	muls	r3, r5
   28226:	e775      	b.n	28114 <_tzset_unlocked_r+0x174>
   28228:	f04f 0b01 	mov.w	fp, #1
   2822c:	e778      	b.n	28120 <_tzset_unlocked_r+0x180>
   2822e:	f1ba 0f4a 	cmp.w	sl, #74	; 0x4a
   28232:	f04f 020a 	mov.w	r2, #10
   28236:	a90b      	add	r1, sp, #44	; 0x2c
   28238:	bf06      	itte	eq
   2823a:	3501      	addeq	r5, #1
   2823c:	4653      	moveq	r3, sl
   2823e:	2344      	movne	r3, #68	; 0x44
   28240:	4628      	mov	r0, r5
   28242:	9305      	str	r3, [sp, #20]
   28244:	f7ff fde8 	bl	27e18 <strtoul>
   28248:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   2824c:	9b05      	ldr	r3, [sp, #20]
   2824e:	45aa      	cmp	sl, r5
   28250:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   28254:	d114      	bne.n	28280 <_tzset_unlocked_r+0x2e0>
   28256:	234d      	movs	r3, #77	; 0x4d
   28258:	f1bb 0f00 	cmp.w	fp, #0
   2825c:	d107      	bne.n	2826e <_tzset_unlocked_r+0x2ce>
   2825e:	2103      	movs	r1, #3
   28260:	7223      	strb	r3, [r4, #8]
   28262:	2302      	movs	r3, #2
   28264:	f8c4 b014 	str.w	fp, [r4, #20]
   28268:	e9c4 1303 	strd	r1, r3, [r4, #12]
   2826c:	e78c      	b.n	28188 <_tzset_unlocked_r+0x1e8>
   2826e:	220b      	movs	r2, #11
   28270:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   28274:	2301      	movs	r3, #1
   28276:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   2827a:	2300      	movs	r3, #0
   2827c:	63e3      	str	r3, [r4, #60]	; 0x3c
   2827e:	e783      	b.n	28188 <_tzset_unlocked_r+0x1e8>
   28280:	b280      	uxth	r0, r0
   28282:	f889 3008 	strb.w	r3, [r9, #8]
   28286:	f8c9 0014 	str.w	r0, [r9, #20]
   2828a:	e77d      	b.n	28188 <_tzset_unlocked_r+0x1e8>
   2828c:	00038c09 	.word	0x00038c09
   28290:	20030ee8 	.word	0x20030ee8
   28294:	20030eec 	.word	0x20030eec
   28298:	00038c0c 	.word	0x00038c0c
   2829c:	20030ef0 	.word	0x20030ef0
   282a0:	200088ac 	.word	0x200088ac
   282a4:	20031fcb 	.word	0x20031fcb
   282a8:	00038c10 	.word	0x00038c10
   282ac:	00038c33 	.word	0x00038c33
   282b0:	20031fc0 	.word	0x20031fc0
   282b4:	00038c1f 	.word	0x00038c1f
   282b8:	00038c32 	.word	0x00038c32

000282bc <vsniprintf>:
   282bc:	b507      	push	{r0, r1, r2, lr}
   282be:	9300      	str	r3, [sp, #0]
   282c0:	4613      	mov	r3, r2
   282c2:	460a      	mov	r2, r1
   282c4:	4601      	mov	r1, r0
   282c6:	4803      	ldr	r0, [pc, #12]	; (282d4 <vsniprintf+0x18>)
   282c8:	6800      	ldr	r0, [r0, #0]
   282ca:	f009 fdcf 	bl	31e6c <_vsniprintf_r>
   282ce:	b003      	add	sp, #12
   282d0:	f85d fb04 	ldr.w	pc, [sp], #4
   282d4:	20008848 	.word	0x20008848

000282d8 <_vsiprintf_r>:
   282d8:	b500      	push	{lr}
   282da:	b09b      	sub	sp, #108	; 0x6c
   282dc:	9100      	str	r1, [sp, #0]
   282de:	9104      	str	r1, [sp, #16]
   282e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   282e4:	9105      	str	r1, [sp, #20]
   282e6:	9102      	str	r1, [sp, #8]
   282e8:	4905      	ldr	r1, [pc, #20]	; (28300 <_vsiprintf_r+0x28>)
   282ea:	9103      	str	r1, [sp, #12]
   282ec:	4669      	mov	r1, sp
   282ee:	f000 ff55 	bl	2919c <_svfiprintf_r>
   282f2:	9b00      	ldr	r3, [sp, #0]
   282f4:	2200      	movs	r2, #0
   282f6:	701a      	strb	r2, [r3, #0]
   282f8:	b01b      	add	sp, #108	; 0x6c
   282fa:	f85d fb04 	ldr.w	pc, [sp], #4
   282fe:	bf00      	nop
   28300:	ffff0208 	.word	0xffff0208

00028304 <vsiprintf>:
   28304:	4613      	mov	r3, r2
   28306:	460a      	mov	r2, r1
   28308:	4601      	mov	r1, r0
   2830a:	4802      	ldr	r0, [pc, #8]	; (28314 <vsiprintf+0x10>)
   2830c:	6800      	ldr	r0, [r0, #0]
   2830e:	f7ff bfe3 	b.w	282d8 <_vsiprintf_r>
   28312:	bf00      	nop
   28314:	20008848 	.word	0x20008848

00028318 <__assert_func>:
   28318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2831a:	4614      	mov	r4, r2
   2831c:	461a      	mov	r2, r3
   2831e:	4b09      	ldr	r3, [pc, #36]	; (28344 <__assert_func+0x2c>)
   28320:	4605      	mov	r5, r0
   28322:	681b      	ldr	r3, [r3, #0]
   28324:	68d8      	ldr	r0, [r3, #12]
   28326:	b954      	cbnz	r4, 2833e <__assert_func+0x26>
   28328:	4b07      	ldr	r3, [pc, #28]	; (28348 <__assert_func+0x30>)
   2832a:	461c      	mov	r4, r3
   2832c:	9100      	str	r1, [sp, #0]
   2832e:	4907      	ldr	r1, [pc, #28]	; (2834c <__assert_func+0x34>)
   28330:	e9cd 3401 	strd	r3, r4, [sp, #4]
   28334:	462b      	mov	r3, r5
   28336:	f000 f8cd 	bl	284d4 <fiprintf>
   2833a:	f00a f98c 	bl	32656 <abort>
   2833e:	4b04      	ldr	r3, [pc, #16]	; (28350 <__assert_func+0x38>)
   28340:	e7f4      	b.n	2832c <__assert_func+0x14>
   28342:	bf00      	nop
   28344:	20008848 	.word	0x20008848
   28348:	000368f4 	.word	0x000368f4
   2834c:	00038c52 	.word	0x00038c52
   28350:	00038c45 	.word	0x00038c45

00028354 <std>:
   28354:	2300      	movs	r3, #0
   28356:	b510      	push	{r4, lr}
   28358:	4604      	mov	r4, r0
   2835a:	6083      	str	r3, [r0, #8]
   2835c:	8181      	strh	r1, [r0, #12]
   2835e:	4619      	mov	r1, r3
   28360:	6643      	str	r3, [r0, #100]	; 0x64
   28362:	81c2      	strh	r2, [r0, #14]
   28364:	2208      	movs	r2, #8
   28366:	6183      	str	r3, [r0, #24]
   28368:	e9c0 3300 	strd	r3, r3, [r0]
   2836c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   28370:	305c      	adds	r0, #92	; 0x5c
   28372:	f009 fb90 	bl	31a96 <memset>
   28376:	4b05      	ldr	r3, [pc, #20]	; (2838c <std+0x38>)
   28378:	6224      	str	r4, [r4, #32]
   2837a:	6263      	str	r3, [r4, #36]	; 0x24
   2837c:	4b04      	ldr	r3, [pc, #16]	; (28390 <std+0x3c>)
   2837e:	62a3      	str	r3, [r4, #40]	; 0x28
   28380:	4b04      	ldr	r3, [pc, #16]	; (28394 <std+0x40>)
   28382:	62e3      	str	r3, [r4, #44]	; 0x2c
   28384:	4b04      	ldr	r3, [pc, #16]	; (28398 <std+0x44>)
   28386:	6323      	str	r3, [r4, #48]	; 0x30
   28388:	bd10      	pop	{r4, pc}
   2838a:	bf00      	nop
   2838c:	000325b3 	.word	0x000325b3
   28390:	000325d9 	.word	0x000325d9
   28394:	00032611 	.word	0x00032611
   28398:	00032635 	.word	0x00032635

0002839c <_cleanup_r>:
   2839c:	4901      	ldr	r1, [pc, #4]	; (283a4 <_cleanup_r+0x8>)
   2839e:	f009 be3b 	b.w	32018 <_fwalk_reent>
   283a2:	bf00      	nop
   283a4:	00029819 	.word	0x00029819

000283a8 <__sfp_lock_acquire>:
   283a8:	4801      	ldr	r0, [pc, #4]	; (283b0 <__sfp_lock_acquire+0x8>)
   283aa:	f003 bc0e 	b.w	2bbca <__retarget_lock_acquire_recursive>
   283ae:	bf00      	nop
   283b0:	20008c18 	.word	0x20008c18

000283b4 <__sfp_lock_release>:
   283b4:	4801      	ldr	r0, [pc, #4]	; (283bc <__sfp_lock_release+0x8>)
   283b6:	f003 bc10 	b.w	2bbda <__retarget_lock_release_recursive>
   283ba:	bf00      	nop
   283bc:	20008c18 	.word	0x20008c18

000283c0 <__sinit_lock_acquire>:
   283c0:	4801      	ldr	r0, [pc, #4]	; (283c8 <__sinit_lock_acquire+0x8>)
   283c2:	f003 bc02 	b.w	2bbca <__retarget_lock_acquire_recursive>
   283c6:	bf00      	nop
   283c8:	20008c2c 	.word	0x20008c2c

000283cc <__sinit_lock_release>:
   283cc:	4801      	ldr	r0, [pc, #4]	; (283d4 <__sinit_lock_release+0x8>)
   283ce:	f003 bc04 	b.w	2bbda <__retarget_lock_release_recursive>
   283d2:	bf00      	nop
   283d4:	20008c2c 	.word	0x20008c2c

000283d8 <__sinit>:
   283d8:	b510      	push	{r4, lr}
   283da:	4604      	mov	r4, r0
   283dc:	f7ff fff0 	bl	283c0 <__sinit_lock_acquire>
   283e0:	69a3      	ldr	r3, [r4, #24]
   283e2:	b11b      	cbz	r3, 283ec <__sinit+0x14>
   283e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   283e8:	f7ff bff0 	b.w	283cc <__sinit_lock_release>
   283ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   283f0:	6523      	str	r3, [r4, #80]	; 0x50
   283f2:	4620      	mov	r0, r4
   283f4:	4b12      	ldr	r3, [pc, #72]	; (28440 <__sinit+0x68>)
   283f6:	4a13      	ldr	r2, [pc, #76]	; (28444 <__sinit+0x6c>)
   283f8:	681b      	ldr	r3, [r3, #0]
   283fa:	62a2      	str	r2, [r4, #40]	; 0x28
   283fc:	42a3      	cmp	r3, r4
   283fe:	bf04      	itt	eq
   28400:	2301      	moveq	r3, #1
   28402:	61a3      	streq	r3, [r4, #24]
   28404:	f000 f820 	bl	28448 <__sfp>
   28408:	6060      	str	r0, [r4, #4]
   2840a:	4620      	mov	r0, r4
   2840c:	f000 f81c 	bl	28448 <__sfp>
   28410:	60a0      	str	r0, [r4, #8]
   28412:	4620      	mov	r0, r4
   28414:	f000 f818 	bl	28448 <__sfp>
   28418:	2200      	movs	r2, #0
   2841a:	2104      	movs	r1, #4
   2841c:	60e0      	str	r0, [r4, #12]
   2841e:	6860      	ldr	r0, [r4, #4]
   28420:	f7ff ff98 	bl	28354 <std>
   28424:	2201      	movs	r2, #1
   28426:	2109      	movs	r1, #9
   28428:	68a0      	ldr	r0, [r4, #8]
   2842a:	f7ff ff93 	bl	28354 <std>
   2842e:	2202      	movs	r2, #2
   28430:	2112      	movs	r1, #18
   28432:	68e0      	ldr	r0, [r4, #12]
   28434:	f7ff ff8e 	bl	28354 <std>
   28438:	2301      	movs	r3, #1
   2843a:	61a3      	str	r3, [r4, #24]
   2843c:	e7d2      	b.n	283e4 <__sinit+0xc>
   2843e:	bf00      	nop
   28440:	0003441c 	.word	0x0003441c
   28444:	0002839d 	.word	0x0002839d

00028448 <__sfp>:
   28448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2844a:	4607      	mov	r7, r0
   2844c:	f7ff ffac 	bl	283a8 <__sfp_lock_acquire>
   28450:	4b1e      	ldr	r3, [pc, #120]	; (284cc <__sfp+0x84>)
   28452:	681e      	ldr	r6, [r3, #0]
   28454:	69b3      	ldr	r3, [r6, #24]
   28456:	b913      	cbnz	r3, 2845e <__sfp+0x16>
   28458:	4630      	mov	r0, r6
   2845a:	f7ff ffbd 	bl	283d8 <__sinit>
   2845e:	3648      	adds	r6, #72	; 0x48
   28460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   28464:	3b01      	subs	r3, #1
   28466:	d503      	bpl.n	28470 <__sfp+0x28>
   28468:	6833      	ldr	r3, [r6, #0]
   2846a:	b30b      	cbz	r3, 284b0 <__sfp+0x68>
   2846c:	6836      	ldr	r6, [r6, #0]
   2846e:	e7f7      	b.n	28460 <__sfp+0x18>
   28470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   28474:	b9d5      	cbnz	r5, 284ac <__sfp+0x64>
   28476:	4b16      	ldr	r3, [pc, #88]	; (284d0 <__sfp+0x88>)
   28478:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2847c:	6665      	str	r5, [r4, #100]	; 0x64
   2847e:	60e3      	str	r3, [r4, #12]
   28480:	f003 fb93 	bl	2bbaa <__retarget_lock_init_recursive>
   28484:	f7ff ff96 	bl	283b4 <__sfp_lock_release>
   28488:	2208      	movs	r2, #8
   2848a:	4629      	mov	r1, r5
   2848c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   28490:	6025      	str	r5, [r4, #0]
   28492:	61a5      	str	r5, [r4, #24]
   28494:	e9c4 5501 	strd	r5, r5, [r4, #4]
   28498:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2849c:	f009 fafb 	bl	31a96 <memset>
   284a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   284a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   284a8:	4620      	mov	r0, r4
   284aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   284ac:	3468      	adds	r4, #104	; 0x68
   284ae:	e7d9      	b.n	28464 <__sfp+0x1c>
   284b0:	2104      	movs	r1, #4
   284b2:	4638      	mov	r0, r7
   284b4:	f009 fd9a 	bl	31fec <__sfmoreglue>
   284b8:	4604      	mov	r4, r0
   284ba:	6030      	str	r0, [r6, #0]
   284bc:	2800      	cmp	r0, #0
   284be:	d1d5      	bne.n	2846c <__sfp+0x24>
   284c0:	f7ff ff78 	bl	283b4 <__sfp_lock_release>
   284c4:	230c      	movs	r3, #12
   284c6:	603b      	str	r3, [r7, #0]
   284c8:	e7ee      	b.n	284a8 <__sfp+0x60>
   284ca:	bf00      	nop
   284cc:	0003441c 	.word	0x0003441c
   284d0:	ffff0001 	.word	0xffff0001

000284d4 <fiprintf>:
   284d4:	b40e      	push	{r1, r2, r3}
   284d6:	b503      	push	{r0, r1, lr}
   284d8:	ab03      	add	r3, sp, #12
   284da:	4601      	mov	r1, r0
   284dc:	4805      	ldr	r0, [pc, #20]	; (284f4 <fiprintf+0x20>)
   284de:	f853 2b04 	ldr.w	r2, [r3], #4
   284e2:	6800      	ldr	r0, [r0, #0]
   284e4:	9301      	str	r3, [sp, #4]
   284e6:	f000 ff55 	bl	29394 <_vfiprintf_r>
   284ea:	b002      	add	sp, #8
   284ec:	f85d eb04 	ldr.w	lr, [sp], #4
   284f0:	b003      	add	sp, #12
   284f2:	4770      	bx	lr
   284f4:	20008848 	.word	0x20008848

000284f8 <__gethex>:
   284f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284fc:	b08b      	sub	sp, #44	; 0x2c
   284fe:	468b      	mov	fp, r1
   28500:	4690      	mov	r8, r2
   28502:	9305      	str	r3, [sp, #20]
   28504:	4bac      	ldr	r3, [pc, #688]	; (287b8 <__gethex+0x2c0>)
   28506:	9002      	str	r0, [sp, #8]
   28508:	681b      	ldr	r3, [r3, #0]
   2850a:	4618      	mov	r0, r3
   2850c:	9303      	str	r3, [sp, #12]
   2850e:	f7e0 ff7c 	bl	940a <strlen>
   28512:	9b03      	ldr	r3, [sp, #12]
   28514:	9001      	str	r0, [sp, #4]
   28516:	4403      	add	r3, r0
   28518:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2851c:	9306      	str	r3, [sp, #24]
   2851e:	f8db 3000 	ldr.w	r3, [fp]
   28522:	1c9a      	adds	r2, r3, #2
   28524:	4617      	mov	r7, r2
   28526:	f812 0b01 	ldrb.w	r0, [r2], #1
   2852a:	2830      	cmp	r0, #48	; 0x30
   2852c:	d0fa      	beq.n	28524 <__gethex+0x2c>
   2852e:	1afb      	subs	r3, r7, r3
   28530:	f1a3 0a02 	sub.w	sl, r3, #2
   28534:	f009 fde0 	bl	320f8 <__hexdig_fun>
   28538:	4604      	mov	r4, r0
   2853a:	2800      	cmp	r0, #0
   2853c:	d138      	bne.n	285b0 <__gethex+0xb8>
   2853e:	9a01      	ldr	r2, [sp, #4]
   28540:	4638      	mov	r0, r7
   28542:	9903      	ldr	r1, [sp, #12]
   28544:	f009 fbfe 	bl	31d44 <strncmp>
   28548:	4605      	mov	r5, r0
   2854a:	2800      	cmp	r0, #0
   2854c:	d164      	bne.n	28618 <__gethex+0x120>
   2854e:	9b01      	ldr	r3, [sp, #4]
   28550:	5cf8      	ldrb	r0, [r7, r3]
   28552:	18fe      	adds	r6, r7, r3
   28554:	f009 fdd0 	bl	320f8 <__hexdig_fun>
   28558:	2800      	cmp	r0, #0
   2855a:	d05f      	beq.n	2861c <__gethex+0x124>
   2855c:	4633      	mov	r3, r6
   2855e:	7818      	ldrb	r0, [r3, #0]
   28560:	461f      	mov	r7, r3
   28562:	3301      	adds	r3, #1
   28564:	2830      	cmp	r0, #48	; 0x30
   28566:	d0fa      	beq.n	2855e <__gethex+0x66>
   28568:	f009 fdc6 	bl	320f8 <__hexdig_fun>
   2856c:	fab0 f480 	clz	r4, r0
   28570:	4635      	mov	r5, r6
   28572:	f04f 0a01 	mov.w	sl, #1
   28576:	0964      	lsrs	r4, r4, #5
   28578:	463a      	mov	r2, r7
   2857a:	4616      	mov	r6, r2
   2857c:	3201      	adds	r2, #1
   2857e:	7830      	ldrb	r0, [r6, #0]
   28580:	f009 fdba 	bl	320f8 <__hexdig_fun>
   28584:	2800      	cmp	r0, #0
   28586:	d1f8      	bne.n	2857a <__gethex+0x82>
   28588:	9a01      	ldr	r2, [sp, #4]
   2858a:	4630      	mov	r0, r6
   2858c:	9903      	ldr	r1, [sp, #12]
   2858e:	f009 fbd9 	bl	31d44 <strncmp>
   28592:	b980      	cbnz	r0, 285b6 <__gethex+0xbe>
   28594:	b94d      	cbnz	r5, 285aa <__gethex+0xb2>
   28596:	9b01      	ldr	r3, [sp, #4]
   28598:	18f5      	adds	r5, r6, r3
   2859a:	462a      	mov	r2, r5
   2859c:	4616      	mov	r6, r2
   2859e:	3201      	adds	r2, #1
   285a0:	7830      	ldrb	r0, [r6, #0]
   285a2:	f009 fda9 	bl	320f8 <__hexdig_fun>
   285a6:	2800      	cmp	r0, #0
   285a8:	d1f8      	bne.n	2859c <__gethex+0xa4>
   285aa:	1bad      	subs	r5, r5, r6
   285ac:	00ad      	lsls	r5, r5, #2
   285ae:	e004      	b.n	285ba <__gethex+0xc2>
   285b0:	2400      	movs	r4, #0
   285b2:	4625      	mov	r5, r4
   285b4:	e7e0      	b.n	28578 <__gethex+0x80>
   285b6:	2d00      	cmp	r5, #0
   285b8:	d1f7      	bne.n	285aa <__gethex+0xb2>
   285ba:	7833      	ldrb	r3, [r6, #0]
   285bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   285c0:	2b50      	cmp	r3, #80	; 0x50
   285c2:	d138      	bne.n	28636 <__gethex+0x13e>
   285c4:	7873      	ldrb	r3, [r6, #1]
   285c6:	2b2b      	cmp	r3, #43	; 0x2b
   285c8:	d02a      	beq.n	28620 <__gethex+0x128>
   285ca:	2b2d      	cmp	r3, #45	; 0x2d
   285cc:	d02c      	beq.n	28628 <__gethex+0x130>
   285ce:	1c71      	adds	r1, r6, #1
   285d0:	f04f 0900 	mov.w	r9, #0
   285d4:	7808      	ldrb	r0, [r1, #0]
   285d6:	f009 fd8f 	bl	320f8 <__hexdig_fun>
   285da:	1e43      	subs	r3, r0, #1
   285dc:	b2db      	uxtb	r3, r3
   285de:	2b18      	cmp	r3, #24
   285e0:	d829      	bhi.n	28636 <__gethex+0x13e>
   285e2:	f1a0 0210 	sub.w	r2, r0, #16
   285e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   285ea:	f009 fd85 	bl	320f8 <__hexdig_fun>
   285ee:	1e43      	subs	r3, r0, #1
   285f0:	b2db      	uxtb	r3, r3
   285f2:	2b18      	cmp	r3, #24
   285f4:	d91b      	bls.n	2862e <__gethex+0x136>
   285f6:	f1b9 0f00 	cmp.w	r9, #0
   285fa:	d000      	beq.n	285fe <__gethex+0x106>
   285fc:	4252      	negs	r2, r2
   285fe:	4415      	add	r5, r2
   28600:	f8cb 1000 	str.w	r1, [fp]
   28604:	b1cc      	cbz	r4, 2863a <__gethex+0x142>
   28606:	f1ba 0f00 	cmp.w	sl, #0
   2860a:	bf0c      	ite	eq
   2860c:	2606      	moveq	r6, #6
   2860e:	2600      	movne	r6, #0
   28610:	4630      	mov	r0, r6
   28612:	b00b      	add	sp, #44	; 0x2c
   28614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28618:	463e      	mov	r6, r7
   2861a:	4625      	mov	r5, r4
   2861c:	2401      	movs	r4, #1
   2861e:	e7cc      	b.n	285ba <__gethex+0xc2>
   28620:	f04f 0900 	mov.w	r9, #0
   28624:	1cb1      	adds	r1, r6, #2
   28626:	e7d5      	b.n	285d4 <__gethex+0xdc>
   28628:	f04f 0901 	mov.w	r9, #1
   2862c:	e7fa      	b.n	28624 <__gethex+0x12c>
   2862e:	230a      	movs	r3, #10
   28630:	fb03 0002 	mla	r0, r3, r2, r0
   28634:	e7d5      	b.n	285e2 <__gethex+0xea>
   28636:	4631      	mov	r1, r6
   28638:	e7e2      	b.n	28600 <__gethex+0x108>
   2863a:	1bf3      	subs	r3, r6, r7
   2863c:	4621      	mov	r1, r4
   2863e:	3b01      	subs	r3, #1
   28640:	2b07      	cmp	r3, #7
   28642:	dc0a      	bgt.n	2865a <__gethex+0x162>
   28644:	9802      	ldr	r0, [sp, #8]
   28646:	f000 f9d7 	bl	289f8 <_Balloc>
   2864a:	4604      	mov	r4, r0
   2864c:	b940      	cbnz	r0, 28660 <__gethex+0x168>
   2864e:	4b5b      	ldr	r3, [pc, #364]	; (287bc <__gethex+0x2c4>)
   28650:	4602      	mov	r2, r0
   28652:	21de      	movs	r1, #222	; 0xde
   28654:	485a      	ldr	r0, [pc, #360]	; (287c0 <__gethex+0x2c8>)
   28656:	f7ff fe5f 	bl	28318 <__assert_func>
   2865a:	3101      	adds	r1, #1
   2865c:	105b      	asrs	r3, r3, #1
   2865e:	e7ef      	b.n	28640 <__gethex+0x148>
   28660:	f04f 0b00 	mov.w	fp, #0
   28664:	9b01      	ldr	r3, [sp, #4]
   28666:	f100 0914 	add.w	r9, r0, #20
   2866a:	f1c3 0301 	rsb	r3, r3, #1
   2866e:	46da      	mov	sl, fp
   28670:	f8cd 9010 	str.w	r9, [sp, #16]
   28674:	9308      	str	r3, [sp, #32]
   28676:	42b7      	cmp	r7, r6
   28678:	d338      	bcc.n	286ec <__gethex+0x1f4>
   2867a:	9e04      	ldr	r6, [sp, #16]
   2867c:	4650      	mov	r0, sl
   2867e:	f846 ab04 	str.w	sl, [r6], #4
   28682:	eba6 0609 	sub.w	r6, r6, r9
   28686:	10b6      	asrs	r6, r6, #2
   28688:	6126      	str	r6, [r4, #16]
   2868a:	0176      	lsls	r6, r6, #5
   2868c:	f009 fe31 	bl	322f2 <__hi0bits>
   28690:	f8d8 7000 	ldr.w	r7, [r8]
   28694:	1a36      	subs	r6, r6, r0
   28696:	42be      	cmp	r6, r7
   28698:	dd60      	ble.n	2875c <__gethex+0x264>
   2869a:	1bf6      	subs	r6, r6, r7
   2869c:	4620      	mov	r0, r4
   2869e:	4631      	mov	r1, r6
   286a0:	f009 fee4 	bl	3246c <__any_on>
   286a4:	4682      	mov	sl, r0
   286a6:	b178      	cbz	r0, 286c8 <__gethex+0x1d0>
   286a8:	1e73      	subs	r3, r6, #1
   286aa:	f04f 0a01 	mov.w	sl, #1
   286ae:	1159      	asrs	r1, r3, #5
   286b0:	f003 021f 	and.w	r2, r3, #31
   286b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   286b8:	fa0a f202 	lsl.w	r2, sl, r2
   286bc:	420a      	tst	r2, r1
   286be:	d003      	beq.n	286c8 <__gethex+0x1d0>
   286c0:	4553      	cmp	r3, sl
   286c2:	dc42      	bgt.n	2874a <__gethex+0x252>
   286c4:	f04f 0a02 	mov.w	sl, #2
   286c8:	4435      	add	r5, r6
   286ca:	4631      	mov	r1, r6
   286cc:	4620      	mov	r0, r4
   286ce:	f009 fcc2 	bl	32056 <rshift>
   286d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   286d6:	42ab      	cmp	r3, r5
   286d8:	da4e      	bge.n	28778 <__gethex+0x280>
   286da:	4621      	mov	r1, r4
   286dc:	9802      	ldr	r0, [sp, #8]
   286de:	f000 f9cb 	bl	28a78 <_Bfree>
   286e2:	2300      	movs	r3, #0
   286e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   286e6:	26a3      	movs	r6, #163	; 0xa3
   286e8:	6013      	str	r3, [r2, #0]
   286ea:	e791      	b.n	28610 <__gethex+0x118>
   286ec:	1e73      	subs	r3, r6, #1
   286ee:	9a06      	ldr	r2, [sp, #24]
   286f0:	9307      	str	r3, [sp, #28]
   286f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   286f6:	4293      	cmp	r3, r2
   286f8:	d017      	beq.n	2872a <__gethex+0x232>
   286fa:	f1bb 0f20 	cmp.w	fp, #32
   286fe:	d106      	bne.n	2870e <__gethex+0x216>
   28700:	9b04      	ldr	r3, [sp, #16]
   28702:	f843 ab04 	str.w	sl, [r3], #4
   28706:	f04f 0a00 	mov.w	sl, #0
   2870a:	9304      	str	r3, [sp, #16]
   2870c:	46d3      	mov	fp, sl
   2870e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   28712:	f009 fcf1 	bl	320f8 <__hexdig_fun>
   28716:	f000 000f 	and.w	r0, r0, #15
   2871a:	9b07      	ldr	r3, [sp, #28]
   2871c:	fa00 f00b 	lsl.w	r0, r0, fp
   28720:	f10b 0b04 	add.w	fp, fp, #4
   28724:	ea4a 0a00 	orr.w	sl, sl, r0
   28728:	e00d      	b.n	28746 <__gethex+0x24e>
   2872a:	1e73      	subs	r3, r6, #1
   2872c:	9a08      	ldr	r2, [sp, #32]
   2872e:	4413      	add	r3, r2
   28730:	42bb      	cmp	r3, r7
   28732:	d3e2      	bcc.n	286fa <__gethex+0x202>
   28734:	4618      	mov	r0, r3
   28736:	9a01      	ldr	r2, [sp, #4]
   28738:	9903      	ldr	r1, [sp, #12]
   2873a:	9309      	str	r3, [sp, #36]	; 0x24
   2873c:	f009 fb02 	bl	31d44 <strncmp>
   28740:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28742:	2800      	cmp	r0, #0
   28744:	d1d9      	bne.n	286fa <__gethex+0x202>
   28746:	461e      	mov	r6, r3
   28748:	e795      	b.n	28676 <__gethex+0x17e>
   2874a:	1eb1      	subs	r1, r6, #2
   2874c:	4620      	mov	r0, r4
   2874e:	f009 fe8d 	bl	3246c <__any_on>
   28752:	2800      	cmp	r0, #0
   28754:	d0b6      	beq.n	286c4 <__gethex+0x1cc>
   28756:	f04f 0a03 	mov.w	sl, #3
   2875a:	e7b5      	b.n	286c8 <__gethex+0x1d0>
   2875c:	da09      	bge.n	28772 <__gethex+0x27a>
   2875e:	1bbe      	subs	r6, r7, r6
   28760:	4621      	mov	r1, r4
   28762:	9802      	ldr	r0, [sp, #8]
   28764:	4632      	mov	r2, r6
   28766:	1bad      	subs	r5, r5, r6
   28768:	f000 fb54 	bl	28e14 <__lshift>
   2876c:	4604      	mov	r4, r0
   2876e:	f100 0914 	add.w	r9, r0, #20
   28772:	f04f 0a00 	mov.w	sl, #0
   28776:	e7ac      	b.n	286d2 <__gethex+0x1da>
   28778:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2877c:	42ab      	cmp	r3, r5
   2877e:	dd70      	ble.n	28862 <__gethex+0x36a>
   28780:	1b5d      	subs	r5, r3, r5
   28782:	42af      	cmp	r7, r5
   28784:	dc35      	bgt.n	287f2 <__gethex+0x2fa>
   28786:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2878a:	2b02      	cmp	r3, #2
   2878c:	d029      	beq.n	287e2 <__gethex+0x2ea>
   2878e:	2b03      	cmp	r3, #3
   28790:	d02b      	beq.n	287ea <__gethex+0x2f2>
   28792:	2b01      	cmp	r3, #1
   28794:	d11c      	bne.n	287d0 <__gethex+0x2d8>
   28796:	42af      	cmp	r7, r5
   28798:	d11a      	bne.n	287d0 <__gethex+0x2d8>
   2879a:	2f01      	cmp	r7, #1
   2879c:	d112      	bne.n	287c4 <__gethex+0x2cc>
   2879e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   287a2:	2662      	movs	r6, #98	; 0x62
   287a4:	9a05      	ldr	r2, [sp, #20]
   287a6:	6013      	str	r3, [r2, #0]
   287a8:	2301      	movs	r3, #1
   287aa:	6123      	str	r3, [r4, #16]
   287ac:	f8c9 3000 	str.w	r3, [r9]
   287b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   287b2:	601c      	str	r4, [r3, #0]
   287b4:	e72c      	b.n	28610 <__gethex+0x118>
   287b6:	bf00      	nop
   287b8:	00034508 	.word	0x00034508
   287bc:	00038d02 	.word	0x00038d02
   287c0:	00038d13 	.word	0x00038d13
   287c4:	1e79      	subs	r1, r7, #1
   287c6:	4620      	mov	r0, r4
   287c8:	f009 fe50 	bl	3246c <__any_on>
   287cc:	2800      	cmp	r0, #0
   287ce:	d1e6      	bne.n	2879e <__gethex+0x2a6>
   287d0:	4621      	mov	r1, r4
   287d2:	9802      	ldr	r0, [sp, #8]
   287d4:	f000 f950 	bl	28a78 <_Bfree>
   287d8:	2300      	movs	r3, #0
   287da:	9a14      	ldr	r2, [sp, #80]	; 0x50
   287dc:	2650      	movs	r6, #80	; 0x50
   287de:	6013      	str	r3, [r2, #0]
   287e0:	e716      	b.n	28610 <__gethex+0x118>
   287e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   287e4:	2b00      	cmp	r3, #0
   287e6:	d1f3      	bne.n	287d0 <__gethex+0x2d8>
   287e8:	e7d9      	b.n	2879e <__gethex+0x2a6>
   287ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
   287ec:	2b00      	cmp	r3, #0
   287ee:	d1d6      	bne.n	2879e <__gethex+0x2a6>
   287f0:	e7ee      	b.n	287d0 <__gethex+0x2d8>
   287f2:	1e6e      	subs	r6, r5, #1
   287f4:	f1ba 0f00 	cmp.w	sl, #0
   287f8:	d130      	bne.n	2885c <__gethex+0x364>
   287fa:	b126      	cbz	r6, 28806 <__gethex+0x30e>
   287fc:	4631      	mov	r1, r6
   287fe:	4620      	mov	r0, r4
   28800:	f009 fe34 	bl	3246c <__any_on>
   28804:	4682      	mov	sl, r0
   28806:	1172      	asrs	r2, r6, #5
   28808:	2301      	movs	r3, #1
   2880a:	f006 061f 	and.w	r6, r6, #31
   2880e:	4629      	mov	r1, r5
   28810:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
   28814:	4620      	mov	r0, r4
   28816:	40b3      	lsls	r3, r6
   28818:	1b7f      	subs	r7, r7, r5
   2881a:	2602      	movs	r6, #2
   2881c:	4213      	tst	r3, r2
   2881e:	bf18      	it	ne
   28820:	f04a 0a02 	orrne.w	sl, sl, #2
   28824:	f009 fc17 	bl	32056 <rshift>
   28828:	f8d8 5004 	ldr.w	r5, [r8, #4]
   2882c:	f1ba 0f00 	cmp.w	sl, #0
   28830:	d047      	beq.n	288c2 <__gethex+0x3ca>
   28832:	f8d8 300c 	ldr.w	r3, [r8, #12]
   28836:	2b02      	cmp	r3, #2
   28838:	d015      	beq.n	28866 <__gethex+0x36e>
   2883a:	2b03      	cmp	r3, #3
   2883c:	d017      	beq.n	2886e <__gethex+0x376>
   2883e:	2b01      	cmp	r3, #1
   28840:	d109      	bne.n	28856 <__gethex+0x35e>
   28842:	f01a 0f02 	tst.w	sl, #2
   28846:	d006      	beq.n	28856 <__gethex+0x35e>
   28848:	f8d9 3000 	ldr.w	r3, [r9]
   2884c:	ea4a 0a03 	orr.w	sl, sl, r3
   28850:	f01a 0f01 	tst.w	sl, #1
   28854:	d10e      	bne.n	28874 <__gethex+0x37c>
   28856:	f046 0610 	orr.w	r6, r6, #16
   2885a:	e032      	b.n	288c2 <__gethex+0x3ca>
   2885c:	f04f 0a01 	mov.w	sl, #1
   28860:	e7d1      	b.n	28806 <__gethex+0x30e>
   28862:	2601      	movs	r6, #1
   28864:	e7e2      	b.n	2882c <__gethex+0x334>
   28866:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28868:	f1c3 0301 	rsb	r3, r3, #1
   2886c:	9315      	str	r3, [sp, #84]	; 0x54
   2886e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28870:	2b00      	cmp	r3, #0
   28872:	d0f0      	beq.n	28856 <__gethex+0x35e>
   28874:	f8d4 b010 	ldr.w	fp, [r4, #16]
   28878:	f104 0314 	add.w	r3, r4, #20
   2887c:	f04f 0c00 	mov.w	ip, #0
   28880:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   28884:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   28888:	4618      	mov	r0, r3
   2888a:	f853 2b04 	ldr.w	r2, [r3], #4
   2888e:	f1b2 3fff 	cmp.w	r2, #4294967295
   28892:	d01b      	beq.n	288cc <__gethex+0x3d4>
   28894:	3201      	adds	r2, #1
   28896:	6002      	str	r2, [r0, #0]
   28898:	2e02      	cmp	r6, #2
   2889a:	f104 0314 	add.w	r3, r4, #20
   2889e:	d13c      	bne.n	2891a <__gethex+0x422>
   288a0:	f8d8 2000 	ldr.w	r2, [r8]
   288a4:	3a01      	subs	r2, #1
   288a6:	42ba      	cmp	r2, r7
   288a8:	d109      	bne.n	288be <__gethex+0x3c6>
   288aa:	1179      	asrs	r1, r7, #5
   288ac:	2201      	movs	r2, #1
   288ae:	f007 071f 	and.w	r7, r7, #31
   288b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   288b6:	fa02 f707 	lsl.w	r7, r2, r7
   288ba:	421f      	tst	r7, r3
   288bc:	d13a      	bne.n	28934 <__gethex+0x43c>
   288be:	f046 0620 	orr.w	r6, r6, #32
   288c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   288c4:	601c      	str	r4, [r3, #0]
   288c6:	9b05      	ldr	r3, [sp, #20]
   288c8:	601d      	str	r5, [r3, #0]
   288ca:	e6a1      	b.n	28610 <__gethex+0x118>
   288cc:	4299      	cmp	r1, r3
   288ce:	f843 cc04 	str.w	ip, [r3, #-4]
   288d2:	d8d9      	bhi.n	28888 <__gethex+0x390>
   288d4:	68a3      	ldr	r3, [r4, #8]
   288d6:	459b      	cmp	fp, r3
   288d8:	db17      	blt.n	2890a <__gethex+0x412>
   288da:	6861      	ldr	r1, [r4, #4]
   288dc:	9802      	ldr	r0, [sp, #8]
   288de:	3101      	adds	r1, #1
   288e0:	f000 f88a 	bl	289f8 <_Balloc>
   288e4:	4681      	mov	r9, r0
   288e6:	b918      	cbnz	r0, 288f0 <__gethex+0x3f8>
   288e8:	4b1a      	ldr	r3, [pc, #104]	; (28954 <__gethex+0x45c>)
   288ea:	4602      	mov	r2, r0
   288ec:	2184      	movs	r1, #132	; 0x84
   288ee:	e6b1      	b.n	28654 <__gethex+0x15c>
   288f0:	6922      	ldr	r2, [r4, #16]
   288f2:	f104 010c 	add.w	r1, r4, #12
   288f6:	300c      	adds	r0, #12
   288f8:	3202      	adds	r2, #2
   288fa:	0092      	lsls	r2, r2, #2
   288fc:	f009 f891 	bl	31a22 <memcpy>
   28900:	4621      	mov	r1, r4
   28902:	464c      	mov	r4, r9
   28904:	9802      	ldr	r0, [sp, #8]
   28906:	f000 f8b7 	bl	28a78 <_Bfree>
   2890a:	6923      	ldr	r3, [r4, #16]
   2890c:	1c5a      	adds	r2, r3, #1
   2890e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   28912:	6122      	str	r2, [r4, #16]
   28914:	2201      	movs	r2, #1
   28916:	615a      	str	r2, [r3, #20]
   28918:	e7be      	b.n	28898 <__gethex+0x3a0>
   2891a:	6922      	ldr	r2, [r4, #16]
   2891c:	455a      	cmp	r2, fp
   2891e:	dd0b      	ble.n	28938 <__gethex+0x440>
   28920:	2101      	movs	r1, #1
   28922:	4620      	mov	r0, r4
   28924:	f009 fb97 	bl	32056 <rshift>
   28928:	3501      	adds	r5, #1
   2892a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2892e:	42ab      	cmp	r3, r5
   28930:	f6ff aed3 	blt.w	286da <__gethex+0x1e2>
   28934:	2601      	movs	r6, #1
   28936:	e7c2      	b.n	288be <__gethex+0x3c6>
   28938:	f017 071f 	ands.w	r7, r7, #31
   2893c:	d0fa      	beq.n	28934 <__gethex+0x43c>
   2893e:	4453      	add	r3, sl
   28940:	f1c7 0720 	rsb	r7, r7, #32
   28944:	f853 0c04 	ldr.w	r0, [r3, #-4]
   28948:	f009 fcd3 	bl	322f2 <__hi0bits>
   2894c:	42b8      	cmp	r0, r7
   2894e:	dbe7      	blt.n	28920 <__gethex+0x428>
   28950:	e7f0      	b.n	28934 <__gethex+0x43c>
   28952:	bf00      	nop
   28954:	00038d02 	.word	0x00038d02

00028958 <_findenv_r>:
   28958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2895c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 289cc <_findenv_r+0x74>
   28960:	4606      	mov	r6, r0
   28962:	4689      	mov	r9, r1
   28964:	4617      	mov	r7, r2
   28966:	f000 ff4b 	bl	29800 <__env_lock>
   2896a:	f8da 4000 	ldr.w	r4, [sl]
   2896e:	b134      	cbz	r4, 2897e <_findenv_r+0x26>
   28970:	464b      	mov	r3, r9
   28972:	4698      	mov	r8, r3
   28974:	f813 2b01 	ldrb.w	r2, [r3], #1
   28978:	b13a      	cbz	r2, 2898a <_findenv_r+0x32>
   2897a:	2a3d      	cmp	r2, #61	; 0x3d
   2897c:	d1f9      	bne.n	28972 <_findenv_r+0x1a>
   2897e:	4630      	mov	r0, r6
   28980:	f000 ff44 	bl	2980c <__env_unlock>
   28984:	2000      	movs	r0, #0
   28986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2898a:	eba8 0809 	sub.w	r8, r8, r9
   2898e:	46a3      	mov	fp, r4
   28990:	f854 0b04 	ldr.w	r0, [r4], #4
   28994:	2800      	cmp	r0, #0
   28996:	d0f2      	beq.n	2897e <_findenv_r+0x26>
   28998:	4642      	mov	r2, r8
   2899a:	4649      	mov	r1, r9
   2899c:	f009 f9d2 	bl	31d44 <strncmp>
   289a0:	2800      	cmp	r0, #0
   289a2:	d1f4      	bne.n	2898e <_findenv_r+0x36>
   289a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   289a8:	eb03 0508 	add.w	r5, r3, r8
   289ac:	f813 3008 	ldrb.w	r3, [r3, r8]
   289b0:	2b3d      	cmp	r3, #61	; 0x3d
   289b2:	d1ec      	bne.n	2898e <_findenv_r+0x36>
   289b4:	f8da 3000 	ldr.w	r3, [sl]
   289b8:	4630      	mov	r0, r6
   289ba:	ebab 0303 	sub.w	r3, fp, r3
   289be:	109b      	asrs	r3, r3, #2
   289c0:	603b      	str	r3, [r7, #0]
   289c2:	f000 ff23 	bl	2980c <__env_unlock>
   289c6:	1c68      	adds	r0, r5, #1
   289c8:	e7dd      	b.n	28986 <_findenv_r+0x2e>
   289ca:	bf00      	nop
   289cc:	20008a20 	.word	0x20008a20

000289d0 <__gettzinfo>:
   289d0:	4800      	ldr	r0, [pc, #0]	; (289d4 <__gettzinfo+0x4>)
   289d2:	4770      	bx	lr
   289d4:	200083a8 	.word	0x200083a8

000289d8 <_localeconv_r>:
   289d8:	4800      	ldr	r0, [pc, #0]	; (289dc <_localeconv_r+0x4>)
   289da:	4770      	bx	lr
   289dc:	200089a4 	.word	0x200089a4

000289e0 <__malloc_lock>:
   289e0:	4801      	ldr	r0, [pc, #4]	; (289e8 <__malloc_lock+0x8>)
   289e2:	f003 b8f2 	b.w	2bbca <__retarget_lock_acquire_recursive>
   289e6:	bf00      	nop
   289e8:	20008c04 	.word	0x20008c04

000289ec <__malloc_unlock>:
   289ec:	4801      	ldr	r0, [pc, #4]	; (289f4 <__malloc_unlock+0x8>)
   289ee:	f003 b8f4 	b.w	2bbda <__retarget_lock_release_recursive>
   289f2:	bf00      	nop
   289f4:	20008c04 	.word	0x20008c04

000289f8 <_Balloc>:
   289f8:	b570      	push	{r4, r5, r6, lr}
   289fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
   289fc:	4604      	mov	r4, r0
   289fe:	460d      	mov	r5, r1
   28a00:	b976      	cbnz	r6, 28a20 <_Balloc+0x28>
   28a02:	2010      	movs	r0, #16
   28a04:	f7fe fa1e 	bl	26e44 <malloc>
   28a08:	4602      	mov	r2, r0
   28a0a:	6260      	str	r0, [r4, #36]	; 0x24
   28a0c:	b920      	cbnz	r0, 28a18 <_Balloc+0x20>
   28a0e:	4b18      	ldr	r3, [pc, #96]	; (28a70 <_Balloc+0x78>)
   28a10:	2166      	movs	r1, #102	; 0x66
   28a12:	4818      	ldr	r0, [pc, #96]	; (28a74 <_Balloc+0x7c>)
   28a14:	f7ff fc80 	bl	28318 <__assert_func>
   28a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
   28a1c:	6006      	str	r6, [r0, #0]
   28a1e:	60c6      	str	r6, [r0, #12]
   28a20:	6a66      	ldr	r6, [r4, #36]	; 0x24
   28a22:	68f3      	ldr	r3, [r6, #12]
   28a24:	b183      	cbz	r3, 28a48 <_Balloc+0x50>
   28a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28a28:	68db      	ldr	r3, [r3, #12]
   28a2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   28a2e:	b9b8      	cbnz	r0, 28a60 <_Balloc+0x68>
   28a30:	2101      	movs	r1, #1
   28a32:	4620      	mov	r0, r4
   28a34:	fa01 f605 	lsl.w	r6, r1, r5
   28a38:	1d72      	adds	r2, r6, #5
   28a3a:	0092      	lsls	r2, r2, #2
   28a3c:	f009 f833 	bl	31aa6 <_calloc_r>
   28a40:	b160      	cbz	r0, 28a5c <_Balloc+0x64>
   28a42:	e9c0 5601 	strd	r5, r6, [r0, #4]
   28a46:	e00e      	b.n	28a66 <_Balloc+0x6e>
   28a48:	2221      	movs	r2, #33	; 0x21
   28a4a:	2104      	movs	r1, #4
   28a4c:	4620      	mov	r0, r4
   28a4e:	f009 f82a 	bl	31aa6 <_calloc_r>
   28a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28a54:	60f0      	str	r0, [r6, #12]
   28a56:	68db      	ldr	r3, [r3, #12]
   28a58:	2b00      	cmp	r3, #0
   28a5a:	d1e4      	bne.n	28a26 <_Balloc+0x2e>
   28a5c:	2000      	movs	r0, #0
   28a5e:	bd70      	pop	{r4, r5, r6, pc}
   28a60:	6802      	ldr	r2, [r0, #0]
   28a62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   28a66:	2300      	movs	r3, #0
   28a68:	e9c0 3303 	strd	r3, r3, [r0, #12]
   28a6c:	e7f7      	b.n	28a5e <_Balloc+0x66>
   28a6e:	bf00      	nop
   28a70:	00038b7c 	.word	0x00038b7c
   28a74:	00038d95 	.word	0x00038d95

00028a78 <_Bfree>:
   28a78:	b570      	push	{r4, r5, r6, lr}
   28a7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   28a7c:	4605      	mov	r5, r0
   28a7e:	460c      	mov	r4, r1
   28a80:	b976      	cbnz	r6, 28aa0 <_Bfree+0x28>
   28a82:	2010      	movs	r0, #16
   28a84:	f7fe f9de 	bl	26e44 <malloc>
   28a88:	4602      	mov	r2, r0
   28a8a:	6268      	str	r0, [r5, #36]	; 0x24
   28a8c:	b920      	cbnz	r0, 28a98 <_Bfree+0x20>
   28a8e:	4b09      	ldr	r3, [pc, #36]	; (28ab4 <_Bfree+0x3c>)
   28a90:	218a      	movs	r1, #138	; 0x8a
   28a92:	4809      	ldr	r0, [pc, #36]	; (28ab8 <_Bfree+0x40>)
   28a94:	f7ff fc40 	bl	28318 <__assert_func>
   28a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
   28a9c:	6006      	str	r6, [r0, #0]
   28a9e:	60c6      	str	r6, [r0, #12]
   28aa0:	b13c      	cbz	r4, 28ab2 <_Bfree+0x3a>
   28aa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   28aa4:	6862      	ldr	r2, [r4, #4]
   28aa6:	68db      	ldr	r3, [r3, #12]
   28aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   28aac:	6021      	str	r1, [r4, #0]
   28aae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   28ab2:	bd70      	pop	{r4, r5, r6, pc}
   28ab4:	00038b7c 	.word	0x00038b7c
   28ab8:	00038d95 	.word	0x00038d95

00028abc <__multadd>:
   28abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ac0:	f101 0c14 	add.w	ip, r1, #20
   28ac4:	4607      	mov	r7, r0
   28ac6:	460c      	mov	r4, r1
   28ac8:	461e      	mov	r6, r3
   28aca:	690d      	ldr	r5, [r1, #16]
   28acc:	2000      	movs	r0, #0
   28ace:	f8dc 3000 	ldr.w	r3, [ip]
   28ad2:	3001      	adds	r0, #1
   28ad4:	b299      	uxth	r1, r3
   28ad6:	4285      	cmp	r5, r0
   28ad8:	fb02 6101 	mla	r1, r2, r1, r6
   28adc:	ea4f 4613 	mov.w	r6, r3, lsr #16
   28ae0:	ea4f 4311 	mov.w	r3, r1, lsr #16
   28ae4:	b289      	uxth	r1, r1
   28ae6:	fb02 3306 	mla	r3, r2, r6, r3
   28aea:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   28aee:	ea4f 4613 	mov.w	r6, r3, lsr #16
   28af2:	f84c 1b04 	str.w	r1, [ip], #4
   28af6:	dcea      	bgt.n	28ace <__multadd+0x12>
   28af8:	b30e      	cbz	r6, 28b3e <__multadd+0x82>
   28afa:	68a3      	ldr	r3, [r4, #8]
   28afc:	42ab      	cmp	r3, r5
   28afe:	dc19      	bgt.n	28b34 <__multadd+0x78>
   28b00:	6861      	ldr	r1, [r4, #4]
   28b02:	4638      	mov	r0, r7
   28b04:	3101      	adds	r1, #1
   28b06:	f7ff ff77 	bl	289f8 <_Balloc>
   28b0a:	4680      	mov	r8, r0
   28b0c:	b928      	cbnz	r0, 28b1a <__multadd+0x5e>
   28b0e:	4602      	mov	r2, r0
   28b10:	4b0c      	ldr	r3, [pc, #48]	; (28b44 <__multadd+0x88>)
   28b12:	21b5      	movs	r1, #181	; 0xb5
   28b14:	480c      	ldr	r0, [pc, #48]	; (28b48 <__multadd+0x8c>)
   28b16:	f7ff fbff 	bl	28318 <__assert_func>
   28b1a:	6922      	ldr	r2, [r4, #16]
   28b1c:	f104 010c 	add.w	r1, r4, #12
   28b20:	300c      	adds	r0, #12
   28b22:	3202      	adds	r2, #2
   28b24:	0092      	lsls	r2, r2, #2
   28b26:	f008 ff7c 	bl	31a22 <memcpy>
   28b2a:	4621      	mov	r1, r4
   28b2c:	4644      	mov	r4, r8
   28b2e:	4638      	mov	r0, r7
   28b30:	f7ff ffa2 	bl	28a78 <_Bfree>
   28b34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   28b38:	3501      	adds	r5, #1
   28b3a:	615e      	str	r6, [r3, #20]
   28b3c:	6125      	str	r5, [r4, #16]
   28b3e:	4620      	mov	r0, r4
   28b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28b44:	00038d02 	.word	0x00038d02
   28b48:	00038d95 	.word	0x00038d95

00028b4c <__s2b>:
   28b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28b50:	4615      	mov	r5, r2
   28b52:	461f      	mov	r7, r3
   28b54:	2209      	movs	r2, #9
   28b56:	3308      	adds	r3, #8
   28b58:	460c      	mov	r4, r1
   28b5a:	4606      	mov	r6, r0
   28b5c:	2100      	movs	r1, #0
   28b5e:	fb93 f3f2 	sdiv	r3, r3, r2
   28b62:	2201      	movs	r2, #1
   28b64:	429a      	cmp	r2, r3
   28b66:	db09      	blt.n	28b7c <__s2b+0x30>
   28b68:	4630      	mov	r0, r6
   28b6a:	f7ff ff45 	bl	289f8 <_Balloc>
   28b6e:	b940      	cbnz	r0, 28b82 <__s2b+0x36>
   28b70:	4602      	mov	r2, r0
   28b72:	4b19      	ldr	r3, [pc, #100]	; (28bd8 <__s2b+0x8c>)
   28b74:	21ce      	movs	r1, #206	; 0xce
   28b76:	4819      	ldr	r0, [pc, #100]	; (28bdc <__s2b+0x90>)
   28b78:	f7ff fbce 	bl	28318 <__assert_func>
   28b7c:	0052      	lsls	r2, r2, #1
   28b7e:	3101      	adds	r1, #1
   28b80:	e7f0      	b.n	28b64 <__s2b+0x18>
   28b82:	9b08      	ldr	r3, [sp, #32]
   28b84:	2d09      	cmp	r5, #9
   28b86:	6143      	str	r3, [r0, #20]
   28b88:	f04f 0301 	mov.w	r3, #1
   28b8c:	6103      	str	r3, [r0, #16]
   28b8e:	dd16      	ble.n	28bbe <__s2b+0x72>
   28b90:	f104 0909 	add.w	r9, r4, #9
   28b94:	442c      	add	r4, r5
   28b96:	46c8      	mov	r8, r9
   28b98:	f818 3b01 	ldrb.w	r3, [r8], #1
   28b9c:	4601      	mov	r1, r0
   28b9e:	220a      	movs	r2, #10
   28ba0:	4630      	mov	r0, r6
   28ba2:	3b30      	subs	r3, #48	; 0x30
   28ba4:	f7ff ff8a 	bl	28abc <__multadd>
   28ba8:	45a0      	cmp	r8, r4
   28baa:	d1f5      	bne.n	28b98 <__s2b+0x4c>
   28bac:	f1a5 0408 	sub.w	r4, r5, #8
   28bb0:	444c      	add	r4, r9
   28bb2:	1b2d      	subs	r5, r5, r4
   28bb4:	1963      	adds	r3, r4, r5
   28bb6:	42bb      	cmp	r3, r7
   28bb8:	db04      	blt.n	28bc4 <__s2b+0x78>
   28bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28bbe:	340a      	adds	r4, #10
   28bc0:	2509      	movs	r5, #9
   28bc2:	e7f6      	b.n	28bb2 <__s2b+0x66>
   28bc4:	f814 3b01 	ldrb.w	r3, [r4], #1
   28bc8:	4601      	mov	r1, r0
   28bca:	220a      	movs	r2, #10
   28bcc:	4630      	mov	r0, r6
   28bce:	3b30      	subs	r3, #48	; 0x30
   28bd0:	f7ff ff74 	bl	28abc <__multadd>
   28bd4:	e7ee      	b.n	28bb4 <__s2b+0x68>
   28bd6:	bf00      	nop
   28bd8:	00038d02 	.word	0x00038d02
   28bdc:	00038d95 	.word	0x00038d95

00028be0 <__i2b>:
   28be0:	b510      	push	{r4, lr}
   28be2:	460c      	mov	r4, r1
   28be4:	2101      	movs	r1, #1
   28be6:	f7ff ff07 	bl	289f8 <_Balloc>
   28bea:	4602      	mov	r2, r0
   28bec:	b928      	cbnz	r0, 28bfa <__i2b+0x1a>
   28bee:	4b05      	ldr	r3, [pc, #20]	; (28c04 <__i2b+0x24>)
   28bf0:	f44f 71a0 	mov.w	r1, #320	; 0x140
   28bf4:	4804      	ldr	r0, [pc, #16]	; (28c08 <__i2b+0x28>)
   28bf6:	f7ff fb8f 	bl	28318 <__assert_func>
   28bfa:	2301      	movs	r3, #1
   28bfc:	6144      	str	r4, [r0, #20]
   28bfe:	6103      	str	r3, [r0, #16]
   28c00:	bd10      	pop	{r4, pc}
   28c02:	bf00      	nop
   28c04:	00038d02 	.word	0x00038d02
   28c08:	00038d95 	.word	0x00038d95

00028c0c <__multiply>:
   28c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c10:	4614      	mov	r4, r2
   28c12:	690a      	ldr	r2, [r1, #16]
   28c14:	460f      	mov	r7, r1
   28c16:	b085      	sub	sp, #20
   28c18:	6923      	ldr	r3, [r4, #16]
   28c1a:	429a      	cmp	r2, r3
   28c1c:	bfa2      	ittt	ge
   28c1e:	4623      	movge	r3, r4
   28c20:	460c      	movge	r4, r1
   28c22:	461f      	movge	r7, r3
   28c24:	f8d4 a010 	ldr.w	sl, [r4, #16]
   28c28:	68a3      	ldr	r3, [r4, #8]
   28c2a:	f8d7 9010 	ldr.w	r9, [r7, #16]
   28c2e:	6861      	ldr	r1, [r4, #4]
   28c30:	eb0a 0609 	add.w	r6, sl, r9
   28c34:	42b3      	cmp	r3, r6
   28c36:	bfb8      	it	lt
   28c38:	3101      	addlt	r1, #1
   28c3a:	f7ff fedd 	bl	289f8 <_Balloc>
   28c3e:	b930      	cbnz	r0, 28c4e <__multiply+0x42>
   28c40:	4602      	mov	r2, r0
   28c42:	4b45      	ldr	r3, [pc, #276]	; (28d58 <__multiply+0x14c>)
   28c44:	f240 115d 	movw	r1, #349	; 0x15d
   28c48:	4844      	ldr	r0, [pc, #272]	; (28d5c <__multiply+0x150>)
   28c4a:	f7ff fb65 	bl	28318 <__assert_func>
   28c4e:	f100 0514 	add.w	r5, r0, #20
   28c52:	2200      	movs	r2, #0
   28c54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   28c58:	462b      	mov	r3, r5
   28c5a:	4543      	cmp	r3, r8
   28c5c:	d321      	bcc.n	28ca2 <__multiply+0x96>
   28c5e:	f107 0114 	add.w	r1, r7, #20
   28c62:	f104 0214 	add.w	r2, r4, #20
   28c66:	f104 0715 	add.w	r7, r4, #21
   28c6a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   28c6e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   28c72:	9302      	str	r3, [sp, #8]
   28c74:	1b13      	subs	r3, r2, r4
   28c76:	3b15      	subs	r3, #21
   28c78:	f023 0303 	bic.w	r3, r3, #3
   28c7c:	3304      	adds	r3, #4
   28c7e:	42ba      	cmp	r2, r7
   28c80:	bf38      	it	cc
   28c82:	2304      	movcc	r3, #4
   28c84:	9301      	str	r3, [sp, #4]
   28c86:	9b02      	ldr	r3, [sp, #8]
   28c88:	9103      	str	r1, [sp, #12]
   28c8a:	428b      	cmp	r3, r1
   28c8c:	d80c      	bhi.n	28ca8 <__multiply+0x9c>
   28c8e:	2e00      	cmp	r6, #0
   28c90:	dd03      	ble.n	28c9a <__multiply+0x8e>
   28c92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   28c96:	2b00      	cmp	r3, #0
   28c98:	d05b      	beq.n	28d52 <__multiply+0x146>
   28c9a:	6106      	str	r6, [r0, #16]
   28c9c:	b005      	add	sp, #20
   28c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ca2:	f843 2b04 	str.w	r2, [r3], #4
   28ca6:	e7d8      	b.n	28c5a <__multiply+0x4e>
   28ca8:	f8b1 a000 	ldrh.w	sl, [r1]
   28cac:	f1ba 0f00 	cmp.w	sl, #0
   28cb0:	d024      	beq.n	28cfc <__multiply+0xf0>
   28cb2:	f104 0e14 	add.w	lr, r4, #20
   28cb6:	46a9      	mov	r9, r5
   28cb8:	f04f 0c00 	mov.w	ip, #0
   28cbc:	f85e 7b04 	ldr.w	r7, [lr], #4
   28cc0:	f8d9 3000 	ldr.w	r3, [r9]
   28cc4:	fa1f fb87 	uxth.w	fp, r7
   28cc8:	4572      	cmp	r2, lr
   28cca:	b29b      	uxth	r3, r3
   28ccc:	ea4f 4717 	mov.w	r7, r7, lsr #16
   28cd0:	fb0a 330b 	mla	r3, sl, fp, r3
   28cd4:	4463      	add	r3, ip
   28cd6:	f8d9 c000 	ldr.w	ip, [r9]
   28cda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   28cde:	fb0a c707 	mla	r7, sl, r7, ip
   28ce2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   28ce6:	b29b      	uxth	r3, r3
   28ce8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   28cec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   28cf0:	f849 3b04 	str.w	r3, [r9], #4
   28cf4:	d8e2      	bhi.n	28cbc <__multiply+0xb0>
   28cf6:	9b01      	ldr	r3, [sp, #4]
   28cf8:	f845 c003 	str.w	ip, [r5, r3]
   28cfc:	9b03      	ldr	r3, [sp, #12]
   28cfe:	3104      	adds	r1, #4
   28d00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   28d04:	f1b9 0f00 	cmp.w	r9, #0
   28d08:	d021      	beq.n	28d4e <__multiply+0x142>
   28d0a:	682b      	ldr	r3, [r5, #0]
   28d0c:	f104 0c14 	add.w	ip, r4, #20
   28d10:	46ae      	mov	lr, r5
   28d12:	f04f 0a00 	mov.w	sl, #0
   28d16:	f8bc b000 	ldrh.w	fp, [ip]
   28d1a:	b29b      	uxth	r3, r3
   28d1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
   28d20:	fb09 770b 	mla	r7, r9, fp, r7
   28d24:	4457      	add	r7, sl
   28d26:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   28d2a:	f84e 3b04 	str.w	r3, [lr], #4
   28d2e:	f85c 3b04 	ldr.w	r3, [ip], #4
   28d32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28d36:	f8be 3000 	ldrh.w	r3, [lr]
   28d3a:	4562      	cmp	r2, ip
   28d3c:	fb09 330a 	mla	r3, r9, sl, r3
   28d40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   28d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   28d48:	d8e5      	bhi.n	28d16 <__multiply+0x10a>
   28d4a:	9f01      	ldr	r7, [sp, #4]
   28d4c:	51eb      	str	r3, [r5, r7]
   28d4e:	3504      	adds	r5, #4
   28d50:	e799      	b.n	28c86 <__multiply+0x7a>
   28d52:	3e01      	subs	r6, #1
   28d54:	e79b      	b.n	28c8e <__multiply+0x82>
   28d56:	bf00      	nop
   28d58:	00038d02 	.word	0x00038d02
   28d5c:	00038d95 	.word	0x00038d95

00028d60 <__pow5mult>:
   28d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28d64:	4615      	mov	r5, r2
   28d66:	f012 0203 	ands.w	r2, r2, #3
   28d6a:	4607      	mov	r7, r0
   28d6c:	460e      	mov	r6, r1
   28d6e:	d007      	beq.n	28d80 <__pow5mult+0x20>
   28d70:	3a01      	subs	r2, #1
   28d72:	4c25      	ldr	r4, [pc, #148]	; (28e08 <__pow5mult+0xa8>)
   28d74:	2300      	movs	r3, #0
   28d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   28d7a:	f7ff fe9f 	bl	28abc <__multadd>
   28d7e:	4606      	mov	r6, r0
   28d80:	10ad      	asrs	r5, r5, #2
   28d82:	d03d      	beq.n	28e00 <__pow5mult+0xa0>
   28d84:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   28d86:	b97c      	cbnz	r4, 28da8 <__pow5mult+0x48>
   28d88:	2010      	movs	r0, #16
   28d8a:	f7fe f85b 	bl	26e44 <malloc>
   28d8e:	4602      	mov	r2, r0
   28d90:	6278      	str	r0, [r7, #36]	; 0x24
   28d92:	b928      	cbnz	r0, 28da0 <__pow5mult+0x40>
   28d94:	4b1d      	ldr	r3, [pc, #116]	; (28e0c <__pow5mult+0xac>)
   28d96:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   28d9a:	481d      	ldr	r0, [pc, #116]	; (28e10 <__pow5mult+0xb0>)
   28d9c:	f7ff fabc 	bl	28318 <__assert_func>
   28da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   28da4:	6004      	str	r4, [r0, #0]
   28da6:	60c4      	str	r4, [r0, #12]
   28da8:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   28dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
   28db0:	b94c      	cbnz	r4, 28dc6 <__pow5mult+0x66>
   28db2:	f240 2171 	movw	r1, #625	; 0x271
   28db6:	4638      	mov	r0, r7
   28db8:	f7ff ff12 	bl	28be0 <__i2b>
   28dbc:	2300      	movs	r3, #0
   28dbe:	4604      	mov	r4, r0
   28dc0:	f8c8 0008 	str.w	r0, [r8, #8]
   28dc4:	6003      	str	r3, [r0, #0]
   28dc6:	f04f 0900 	mov.w	r9, #0
   28dca:	07eb      	lsls	r3, r5, #31
   28dcc:	d50a      	bpl.n	28de4 <__pow5mult+0x84>
   28dce:	4631      	mov	r1, r6
   28dd0:	4622      	mov	r2, r4
   28dd2:	4638      	mov	r0, r7
   28dd4:	f7ff ff1a 	bl	28c0c <__multiply>
   28dd8:	4680      	mov	r8, r0
   28dda:	4631      	mov	r1, r6
   28ddc:	4638      	mov	r0, r7
   28dde:	4646      	mov	r6, r8
   28de0:	f7ff fe4a 	bl	28a78 <_Bfree>
   28de4:	106d      	asrs	r5, r5, #1
   28de6:	d00b      	beq.n	28e00 <__pow5mult+0xa0>
   28de8:	6820      	ldr	r0, [r4, #0]
   28dea:	b938      	cbnz	r0, 28dfc <__pow5mult+0x9c>
   28dec:	4622      	mov	r2, r4
   28dee:	4621      	mov	r1, r4
   28df0:	4638      	mov	r0, r7
   28df2:	f7ff ff0b 	bl	28c0c <__multiply>
   28df6:	6020      	str	r0, [r4, #0]
   28df8:	f8c0 9000 	str.w	r9, [r0]
   28dfc:	4604      	mov	r4, r0
   28dfe:	e7e4      	b.n	28dca <__pow5mult+0x6a>
   28e00:	4630      	mov	r0, r6
   28e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28e06:	bf00      	nop
   28e08:	00034574 	.word	0x00034574
   28e0c:	00038b7c 	.word	0x00038b7c
   28e10:	00038d95 	.word	0x00038d95

00028e14 <__lshift>:
   28e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28e18:	460c      	mov	r4, r1
   28e1a:	4607      	mov	r7, r0
   28e1c:	4691      	mov	r9, r2
   28e1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   28e22:	6923      	ldr	r3, [r4, #16]
   28e24:	6849      	ldr	r1, [r1, #4]
   28e26:	eb03 1862 	add.w	r8, r3, r2, asr #5
   28e2a:	68a3      	ldr	r3, [r4, #8]
   28e2c:	f108 0601 	add.w	r6, r8, #1
   28e30:	42b3      	cmp	r3, r6
   28e32:	db0b      	blt.n	28e4c <__lshift+0x38>
   28e34:	4638      	mov	r0, r7
   28e36:	f7ff fddf 	bl	289f8 <_Balloc>
   28e3a:	4605      	mov	r5, r0
   28e3c:	b948      	cbnz	r0, 28e52 <__lshift+0x3e>
   28e3e:	4602      	mov	r2, r0
   28e40:	4b28      	ldr	r3, [pc, #160]	; (28ee4 <__lshift+0xd0>)
   28e42:	f240 11d9 	movw	r1, #473	; 0x1d9
   28e46:	4828      	ldr	r0, [pc, #160]	; (28ee8 <__lshift+0xd4>)
   28e48:	f7ff fa66 	bl	28318 <__assert_func>
   28e4c:	3101      	adds	r1, #1
   28e4e:	005b      	lsls	r3, r3, #1
   28e50:	e7ee      	b.n	28e30 <__lshift+0x1c>
   28e52:	2300      	movs	r3, #0
   28e54:	f100 0114 	add.w	r1, r0, #20
   28e58:	f100 0210 	add.w	r2, r0, #16
   28e5c:	4618      	mov	r0, r3
   28e5e:	4553      	cmp	r3, sl
   28e60:	db33      	blt.n	28eca <__lshift+0xb6>
   28e62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   28e66:	f104 0314 	add.w	r3, r4, #20
   28e6a:	6920      	ldr	r0, [r4, #16]
   28e6c:	f019 091f 	ands.w	r9, r9, #31
   28e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   28e74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   28e78:	d02b      	beq.n	28ed2 <__lshift+0xbe>
   28e7a:	f1c9 0e20 	rsb	lr, r9, #32
   28e7e:	468a      	mov	sl, r1
   28e80:	2200      	movs	r2, #0
   28e82:	6818      	ldr	r0, [r3, #0]
   28e84:	fa00 f009 	lsl.w	r0, r0, r9
   28e88:	4310      	orrs	r0, r2
   28e8a:	f84a 0b04 	str.w	r0, [sl], #4
   28e8e:	f853 2b04 	ldr.w	r2, [r3], #4
   28e92:	459c      	cmp	ip, r3
   28e94:	fa22 f20e 	lsr.w	r2, r2, lr
   28e98:	d8f3      	bhi.n	28e82 <__lshift+0x6e>
   28e9a:	ebac 0304 	sub.w	r3, ip, r4
   28e9e:	f104 0015 	add.w	r0, r4, #21
   28ea2:	3b15      	subs	r3, #21
   28ea4:	f023 0303 	bic.w	r3, r3, #3
   28ea8:	3304      	adds	r3, #4
   28eaa:	4584      	cmp	ip, r0
   28eac:	bf38      	it	cc
   28eae:	2304      	movcc	r3, #4
   28eb0:	50ca      	str	r2, [r1, r3]
   28eb2:	b10a      	cbz	r2, 28eb8 <__lshift+0xa4>
   28eb4:	f108 0602 	add.w	r6, r8, #2
   28eb8:	3e01      	subs	r6, #1
   28eba:	4638      	mov	r0, r7
   28ebc:	4621      	mov	r1, r4
   28ebe:	612e      	str	r6, [r5, #16]
   28ec0:	f7ff fdda 	bl	28a78 <_Bfree>
   28ec4:	4628      	mov	r0, r5
   28ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28eca:	3301      	adds	r3, #1
   28ecc:	f842 0f04 	str.w	r0, [r2, #4]!
   28ed0:	e7c5      	b.n	28e5e <__lshift+0x4a>
   28ed2:	3904      	subs	r1, #4
   28ed4:	f853 2b04 	ldr.w	r2, [r3], #4
   28ed8:	459c      	cmp	ip, r3
   28eda:	f841 2f04 	str.w	r2, [r1, #4]!
   28ede:	d8f9      	bhi.n	28ed4 <__lshift+0xc0>
   28ee0:	e7ea      	b.n	28eb8 <__lshift+0xa4>
   28ee2:	bf00      	nop
   28ee4:	00038d02 	.word	0x00038d02
   28ee8:	00038d95 	.word	0x00038d95

00028eec <__mdiff>:
   28eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ef0:	4689      	mov	r9, r1
   28ef2:	4606      	mov	r6, r0
   28ef4:	4611      	mov	r1, r2
   28ef6:	4614      	mov	r4, r2
   28ef8:	4648      	mov	r0, r9
   28efa:	f009 fa49 	bl	32390 <__mcmp>
   28efe:	1e05      	subs	r5, r0, #0
   28f00:	d112      	bne.n	28f28 <__mdiff+0x3c>
   28f02:	4629      	mov	r1, r5
   28f04:	4630      	mov	r0, r6
   28f06:	f7ff fd77 	bl	289f8 <_Balloc>
   28f0a:	4602      	mov	r2, r0
   28f0c:	b928      	cbnz	r0, 28f1a <__mdiff+0x2e>
   28f0e:	4b40      	ldr	r3, [pc, #256]	; (29010 <__mdiff+0x124>)
   28f10:	f240 2132 	movw	r1, #562	; 0x232
   28f14:	483f      	ldr	r0, [pc, #252]	; (29014 <__mdiff+0x128>)
   28f16:	f7ff f9ff 	bl	28318 <__assert_func>
   28f1a:	2301      	movs	r3, #1
   28f1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   28f20:	4610      	mov	r0, r2
   28f22:	b003      	add	sp, #12
   28f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f28:	bfbc      	itt	lt
   28f2a:	464b      	movlt	r3, r9
   28f2c:	46a1      	movlt	r9, r4
   28f2e:	4630      	mov	r0, r6
   28f30:	bfb8      	it	lt
   28f32:	2501      	movlt	r5, #1
   28f34:	f8d9 1004 	ldr.w	r1, [r9, #4]
   28f38:	bfb4      	ite	lt
   28f3a:	461c      	movlt	r4, r3
   28f3c:	2500      	movge	r5, #0
   28f3e:	f7ff fd5b 	bl	289f8 <_Balloc>
   28f42:	4602      	mov	r2, r0
   28f44:	b918      	cbnz	r0, 28f4e <__mdiff+0x62>
   28f46:	4b32      	ldr	r3, [pc, #200]	; (29010 <__mdiff+0x124>)
   28f48:	f44f 7110 	mov.w	r1, #576	; 0x240
   28f4c:	e7e2      	b.n	28f14 <__mdiff+0x28>
   28f4e:	f8d9 7010 	ldr.w	r7, [r9, #16]
   28f52:	f104 0e14 	add.w	lr, r4, #20
   28f56:	6926      	ldr	r6, [r4, #16]
   28f58:	f100 0b14 	add.w	fp, r0, #20
   28f5c:	60c5      	str	r5, [r0, #12]
   28f5e:	f109 0514 	add.w	r5, r9, #20
   28f62:	f109 0310 	add.w	r3, r9, #16
   28f66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   28f6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   28f6e:	46d9      	mov	r9, fp
   28f70:	f04f 0c00 	mov.w	ip, #0
   28f74:	9301      	str	r3, [sp, #4]
   28f76:	9b01      	ldr	r3, [sp, #4]
   28f78:	f85e 0b04 	ldr.w	r0, [lr], #4
   28f7c:	f853 af04 	ldr.w	sl, [r3, #4]!
   28f80:	b281      	uxth	r1, r0
   28f82:	4576      	cmp	r6, lr
   28f84:	9301      	str	r3, [sp, #4]
   28f86:	fa1f f38a 	uxth.w	r3, sl
   28f8a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   28f8e:	eba3 0301 	sub.w	r3, r3, r1
   28f92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   28f96:	4463      	add	r3, ip
   28f98:	eb00 4023 	add.w	r0, r0, r3, asr #16
   28f9c:	b29b      	uxth	r3, r3
   28f9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   28fa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   28fa6:	f849 3b04 	str.w	r3, [r9], #4
   28faa:	d8e4      	bhi.n	28f76 <__mdiff+0x8a>
   28fac:	1b33      	subs	r3, r6, r4
   28fae:	3415      	adds	r4, #21
   28fb0:	3b15      	subs	r3, #21
   28fb2:	f023 0303 	bic.w	r3, r3, #3
   28fb6:	3304      	adds	r3, #4
   28fb8:	42a6      	cmp	r6, r4
   28fba:	bf38      	it	cc
   28fbc:	2304      	movcc	r3, #4
   28fbe:	441d      	add	r5, r3
   28fc0:	445b      	add	r3, fp
   28fc2:	462c      	mov	r4, r5
   28fc4:	461e      	mov	r6, r3
   28fc6:	4544      	cmp	r4, r8
   28fc8:	d30e      	bcc.n	28fe8 <__mdiff+0xfc>
   28fca:	f108 0103 	add.w	r1, r8, #3
   28fce:	1b49      	subs	r1, r1, r5
   28fd0:	3d03      	subs	r5, #3
   28fd2:	f021 0103 	bic.w	r1, r1, #3
   28fd6:	45a8      	cmp	r8, r5
   28fd8:	bf38      	it	cc
   28fda:	2100      	movcc	r1, #0
   28fdc:	440b      	add	r3, r1
   28fde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   28fe2:	b199      	cbz	r1, 2900c <__mdiff+0x120>
   28fe4:	6117      	str	r7, [r2, #16]
   28fe6:	e79b      	b.n	28f20 <__mdiff+0x34>
   28fe8:	f854 1b04 	ldr.w	r1, [r4], #4
   28fec:	46e6      	mov	lr, ip
   28fee:	fa1f fc81 	uxth.w	ip, r1
   28ff2:	0c08      	lsrs	r0, r1, #16
   28ff4:	4471      	add	r1, lr
   28ff6:	44f4      	add	ip, lr
   28ff8:	b289      	uxth	r1, r1
   28ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
   28ffe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   29002:	ea4f 4c20 	mov.w	ip, r0, asr #16
   29006:	f846 1b04 	str.w	r1, [r6], #4
   2900a:	e7dc      	b.n	28fc6 <__mdiff+0xda>
   2900c:	3f01      	subs	r7, #1
   2900e:	e7e6      	b.n	28fde <__mdiff+0xf2>
   29010:	00038d02 	.word	0x00038d02
   29014:	00038d95 	.word	0x00038d95

00029018 <__ulp>:
   29018:	4b0e      	ldr	r3, [pc, #56]	; (29054 <__ulp+0x3c>)
   2901a:	400b      	ands	r3, r1
   2901c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   29020:	2b00      	cmp	r3, #0
   29022:	dc08      	bgt.n	29036 <__ulp+0x1e>
   29024:	425b      	negs	r3, r3
   29026:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   2902a:	ea4f 5223 	mov.w	r2, r3, asr #20
   2902e:	da04      	bge.n	2903a <__ulp+0x22>
   29030:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   29034:	4113      	asrs	r3, r2
   29036:	2200      	movs	r2, #0
   29038:	e008      	b.n	2904c <__ulp+0x34>
   2903a:	f1a2 0314 	sub.w	r3, r2, #20
   2903e:	2b1e      	cmp	r3, #30
   29040:	bfd6      	itet	le
   29042:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   29046:	2201      	movgt	r2, #1
   29048:	40da      	lsrle	r2, r3
   2904a:	2300      	movs	r3, #0
   2904c:	4619      	mov	r1, r3
   2904e:	4610      	mov	r0, r2
   29050:	4770      	bx	lr
   29052:	bf00      	nop
   29054:	7ff00000 	.word	0x7ff00000

00029058 <__b2d>:
   29058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2905a:	6902      	ldr	r2, [r0, #16]
   2905c:	f100 0614 	add.w	r6, r0, #20
   29060:	4f21      	ldr	r7, [pc, #132]	; (290e8 <__b2d+0x90>)
   29062:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   29066:	f852 4c04 	ldr.w	r4, [r2, #-4]
   2906a:	1f15      	subs	r5, r2, #4
   2906c:	4620      	mov	r0, r4
   2906e:	f009 f940 	bl	322f2 <__hi0bits>
   29072:	4603      	mov	r3, r0
   29074:	f1c0 0020 	rsb	r0, r0, #32
   29078:	2b0a      	cmp	r3, #10
   2907a:	6008      	str	r0, [r1, #0]
   2907c:	dc13      	bgt.n	290a6 <__b2d+0x4e>
   2907e:	42ae      	cmp	r6, r5
   29080:	f1c3 0c0b 	rsb	ip, r3, #11
   29084:	f103 0315 	add.w	r3, r3, #21
   29088:	bf34      	ite	cc
   2908a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   2908e:	2200      	movcs	r2, #0
   29090:	fa24 fe0c 	lsr.w	lr, r4, ip
   29094:	fa04 f303 	lsl.w	r3, r4, r3
   29098:	fa22 f20c 	lsr.w	r2, r2, ip
   2909c:	ea4e 0107 	orr.w	r1, lr, r7
   290a0:	431a      	orrs	r2, r3
   290a2:	4610      	mov	r0, r2
   290a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   290a6:	42ae      	cmp	r6, r5
   290a8:	bf36      	itet	cc
   290aa:	f1a2 0508 	subcc.w	r5, r2, #8
   290ae:	2200      	movcs	r2, #0
   290b0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
   290b4:	3b0b      	subs	r3, #11
   290b6:	d014      	beq.n	290e2 <__b2d+0x8a>
   290b8:	f1c3 0720 	rsb	r7, r3, #32
   290bc:	409c      	lsls	r4, r3
   290be:	42b5      	cmp	r5, r6
   290c0:	fa22 f107 	lsr.w	r1, r2, r7
   290c4:	fa02 f203 	lsl.w	r2, r2, r3
   290c8:	ea44 0401 	orr.w	r4, r4, r1
   290cc:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
   290d0:	bf8c      	ite	hi
   290d2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
   290d6:	2400      	movls	r4, #0
   290d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   290dc:	40fc      	lsrs	r4, r7
   290de:	4322      	orrs	r2, r4
   290e0:	e7df      	b.n	290a2 <__b2d+0x4a>
   290e2:	ea44 0107 	orr.w	r1, r4, r7
   290e6:	e7dc      	b.n	290a2 <__b2d+0x4a>
   290e8:	3ff00000 	.word	0x3ff00000

000290ec <__d2b>:
   290ec:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   290f0:	2101      	movs	r1, #1
   290f2:	4690      	mov	r8, r2
   290f4:	4699      	mov	r9, r3
   290f6:	9e08      	ldr	r6, [sp, #32]
   290f8:	f7ff fc7e 	bl	289f8 <_Balloc>
   290fc:	4604      	mov	r4, r0
   290fe:	b930      	cbnz	r0, 2910e <__d2b+0x22>
   29100:	4602      	mov	r2, r0
   29102:	4b24      	ldr	r3, [pc, #144]	; (29194 <__d2b+0xa8>)
   29104:	f240 310a 	movw	r1, #778	; 0x30a
   29108:	4823      	ldr	r0, [pc, #140]	; (29198 <__d2b+0xac>)
   2910a:	f7ff f905 	bl	28318 <__assert_func>
   2910e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   29112:	f3c9 0313 	ubfx	r3, r9, #0, #20
   29116:	b10d      	cbz	r5, 2911c <__d2b+0x30>
   29118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2911c:	9301      	str	r3, [sp, #4]
   2911e:	f1b8 0300 	subs.w	r3, r8, #0
   29122:	d024      	beq.n	2916e <__d2b+0x82>
   29124:	4668      	mov	r0, sp
   29126:	9300      	str	r3, [sp, #0]
   29128:	f009 f905 	bl	32336 <__lo0bits>
   2912c:	e9dd 1200 	ldrd	r1, r2, [sp]
   29130:	b1d8      	cbz	r0, 2916a <__d2b+0x7e>
   29132:	f1c0 0320 	rsb	r3, r0, #32
   29136:	fa02 f303 	lsl.w	r3, r2, r3
   2913a:	40c2      	lsrs	r2, r0
   2913c:	430b      	orrs	r3, r1
   2913e:	9201      	str	r2, [sp, #4]
   29140:	6163      	str	r3, [r4, #20]
   29142:	9b01      	ldr	r3, [sp, #4]
   29144:	2b00      	cmp	r3, #0
   29146:	61a3      	str	r3, [r4, #24]
   29148:	bf0c      	ite	eq
   2914a:	2201      	moveq	r2, #1
   2914c:	2202      	movne	r2, #2
   2914e:	6122      	str	r2, [r4, #16]
   29150:	b1ad      	cbz	r5, 2917e <__d2b+0x92>
   29152:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   29156:	4405      	add	r5, r0
   29158:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2915c:	6035      	str	r5, [r6, #0]
   2915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29160:	6018      	str	r0, [r3, #0]
   29162:	4620      	mov	r0, r4
   29164:	b002      	add	sp, #8
   29166:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2916a:	6161      	str	r1, [r4, #20]
   2916c:	e7e9      	b.n	29142 <__d2b+0x56>
   2916e:	a801      	add	r0, sp, #4
   29170:	f009 f8e1 	bl	32336 <__lo0bits>
   29174:	9b01      	ldr	r3, [sp, #4]
   29176:	3020      	adds	r0, #32
   29178:	2201      	movs	r2, #1
   2917a:	6163      	str	r3, [r4, #20]
   2917c:	e7e7      	b.n	2914e <__d2b+0x62>
   2917e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   29182:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   29186:	6030      	str	r0, [r6, #0]
   29188:	6918      	ldr	r0, [r3, #16]
   2918a:	f009 f8b2 	bl	322f2 <__hi0bits>
   2918e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   29192:	e7e4      	b.n	2915e <__d2b+0x72>
   29194:	00038d02 	.word	0x00038d02
   29198:	00038d95 	.word	0x00038d95

0002919c <_svfiprintf_r>:
   2919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   291a0:	4698      	mov	r8, r3
   291a2:	898b      	ldrh	r3, [r1, #12]
   291a4:	b09d      	sub	sp, #116	; 0x74
   291a6:	4607      	mov	r7, r0
   291a8:	061b      	lsls	r3, r3, #24
   291aa:	460d      	mov	r5, r1
   291ac:	4614      	mov	r4, r2
   291ae:	d510      	bpl.n	291d2 <_svfiprintf_r+0x36>
   291b0:	690b      	ldr	r3, [r1, #16]
   291b2:	b973      	cbnz	r3, 291d2 <_svfiprintf_r+0x36>
   291b4:	2140      	movs	r1, #64	; 0x40
   291b6:	f7fe f90f 	bl	273d8 <_malloc_r>
   291ba:	6028      	str	r0, [r5, #0]
   291bc:	6128      	str	r0, [r5, #16]
   291be:	b930      	cbnz	r0, 291ce <_svfiprintf_r+0x32>
   291c0:	230c      	movs	r3, #12
   291c2:	603b      	str	r3, [r7, #0]
   291c4:	f04f 30ff 	mov.w	r0, #4294967295
   291c8:	b01d      	add	sp, #116	; 0x74
   291ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   291ce:	2340      	movs	r3, #64	; 0x40
   291d0:	616b      	str	r3, [r5, #20]
   291d2:	2300      	movs	r3, #0
   291d4:	f8cd 800c 	str.w	r8, [sp, #12]
   291d8:	f04f 0901 	mov.w	r9, #1
   291dc:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 29380 <_svfiprintf_r+0x1e4>
   291e0:	9309      	str	r3, [sp, #36]	; 0x24
   291e2:	2320      	movs	r3, #32
   291e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   291e8:	2330      	movs	r3, #48	; 0x30
   291ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   291ee:	4623      	mov	r3, r4
   291f0:	469a      	mov	sl, r3
   291f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   291f6:	b10a      	cbz	r2, 291fc <_svfiprintf_r+0x60>
   291f8:	2a25      	cmp	r2, #37	; 0x25
   291fa:	d1f9      	bne.n	291f0 <_svfiprintf_r+0x54>
   291fc:	ebba 0b04 	subs.w	fp, sl, r4
   29200:	d00b      	beq.n	2921a <_svfiprintf_r+0x7e>
   29202:	465b      	mov	r3, fp
   29204:	4622      	mov	r2, r4
   29206:	4629      	mov	r1, r5
   29208:	4638      	mov	r0, r7
   2920a:	f009 f950 	bl	324ae <__ssputs_r>
   2920e:	3001      	adds	r0, #1
   29210:	f000 80a7 	beq.w	29362 <_svfiprintf_r+0x1c6>
   29214:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29216:	445a      	add	r2, fp
   29218:	9209      	str	r2, [sp, #36]	; 0x24
   2921a:	f89a 3000 	ldrb.w	r3, [sl]
   2921e:	2b00      	cmp	r3, #0
   29220:	f000 809f 	beq.w	29362 <_svfiprintf_r+0x1c6>
   29224:	2300      	movs	r3, #0
   29226:	f04f 32ff 	mov.w	r2, #4294967295
   2922a:	f10a 0a01 	add.w	sl, sl, #1
   2922e:	9304      	str	r3, [sp, #16]
   29230:	9307      	str	r3, [sp, #28]
   29232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29236:	931a      	str	r3, [sp, #104]	; 0x68
   29238:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2923c:	4654      	mov	r4, sl
   2923e:	2205      	movs	r2, #5
   29240:	484f      	ldr	r0, [pc, #316]	; (29380 <_svfiprintf_r+0x1e4>)
   29242:	f814 1b01 	ldrb.w	r1, [r4], #1
   29246:	f009 f846 	bl	322d6 <memchr>
   2924a:	9a04      	ldr	r2, [sp, #16]
   2924c:	b9d8      	cbnz	r0, 29286 <_svfiprintf_r+0xea>
   2924e:	06d0      	lsls	r0, r2, #27
   29250:	bf44      	itt	mi
   29252:	2320      	movmi	r3, #32
   29254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   29258:	0711      	lsls	r1, r2, #28
   2925a:	bf44      	itt	mi
   2925c:	232b      	movmi	r3, #43	; 0x2b
   2925e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   29262:	f89a 3000 	ldrb.w	r3, [sl]
   29266:	2b2a      	cmp	r3, #42	; 0x2a
   29268:	d015      	beq.n	29296 <_svfiprintf_r+0xfa>
   2926a:	9a07      	ldr	r2, [sp, #28]
   2926c:	4654      	mov	r4, sl
   2926e:	2000      	movs	r0, #0
   29270:	f04f 0c0a 	mov.w	ip, #10
   29274:	4621      	mov	r1, r4
   29276:	f811 3b01 	ldrb.w	r3, [r1], #1
   2927a:	3b30      	subs	r3, #48	; 0x30
   2927c:	2b09      	cmp	r3, #9
   2927e:	d94b      	bls.n	29318 <_svfiprintf_r+0x17c>
   29280:	b1b0      	cbz	r0, 292b0 <_svfiprintf_r+0x114>
   29282:	9207      	str	r2, [sp, #28]
   29284:	e014      	b.n	292b0 <_svfiprintf_r+0x114>
   29286:	eba0 0308 	sub.w	r3, r0, r8
   2928a:	46a2      	mov	sl, r4
   2928c:	fa09 f303 	lsl.w	r3, r9, r3
   29290:	4313      	orrs	r3, r2
   29292:	9304      	str	r3, [sp, #16]
   29294:	e7d2      	b.n	2923c <_svfiprintf_r+0xa0>
   29296:	9b03      	ldr	r3, [sp, #12]
   29298:	1d19      	adds	r1, r3, #4
   2929a:	681b      	ldr	r3, [r3, #0]
   2929c:	2b00      	cmp	r3, #0
   2929e:	9103      	str	r1, [sp, #12]
   292a0:	bfbb      	ittet	lt
   292a2:	425b      	neglt	r3, r3
   292a4:	f042 0202 	orrlt.w	r2, r2, #2
   292a8:	9307      	strge	r3, [sp, #28]
   292aa:	9307      	strlt	r3, [sp, #28]
   292ac:	bfb8      	it	lt
   292ae:	9204      	strlt	r2, [sp, #16]
   292b0:	7823      	ldrb	r3, [r4, #0]
   292b2:	2b2e      	cmp	r3, #46	; 0x2e
   292b4:	d10a      	bne.n	292cc <_svfiprintf_r+0x130>
   292b6:	7863      	ldrb	r3, [r4, #1]
   292b8:	2b2a      	cmp	r3, #42	; 0x2a
   292ba:	d132      	bne.n	29322 <_svfiprintf_r+0x186>
   292bc:	9b03      	ldr	r3, [sp, #12]
   292be:	3402      	adds	r4, #2
   292c0:	1d1a      	adds	r2, r3, #4
   292c2:	681b      	ldr	r3, [r3, #0]
   292c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   292c8:	9203      	str	r2, [sp, #12]
   292ca:	9305      	str	r3, [sp, #20]
   292cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 29384 <_svfiprintf_r+0x1e8>
   292d0:	2203      	movs	r2, #3
   292d2:	7821      	ldrb	r1, [r4, #0]
   292d4:	4650      	mov	r0, sl
   292d6:	f008 fffe 	bl	322d6 <memchr>
   292da:	b138      	cbz	r0, 292ec <_svfiprintf_r+0x150>
   292dc:	eba0 000a 	sub.w	r0, r0, sl
   292e0:	2240      	movs	r2, #64	; 0x40
   292e2:	9b04      	ldr	r3, [sp, #16]
   292e4:	3401      	adds	r4, #1
   292e6:	4082      	lsls	r2, r0
   292e8:	4313      	orrs	r3, r2
   292ea:	9304      	str	r3, [sp, #16]
   292ec:	f814 1b01 	ldrb.w	r1, [r4], #1
   292f0:	2206      	movs	r2, #6
   292f2:	4825      	ldr	r0, [pc, #148]	; (29388 <_svfiprintf_r+0x1ec>)
   292f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   292f8:	f008 ffed 	bl	322d6 <memchr>
   292fc:	2800      	cmp	r0, #0
   292fe:	d036      	beq.n	2936e <_svfiprintf_r+0x1d2>
   29300:	4b22      	ldr	r3, [pc, #136]	; (2938c <_svfiprintf_r+0x1f0>)
   29302:	bb1b      	cbnz	r3, 2934c <_svfiprintf_r+0x1b0>
   29304:	9b03      	ldr	r3, [sp, #12]
   29306:	3307      	adds	r3, #7
   29308:	f023 0307 	bic.w	r3, r3, #7
   2930c:	3308      	adds	r3, #8
   2930e:	9303      	str	r3, [sp, #12]
   29310:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29312:	4433      	add	r3, r6
   29314:	9309      	str	r3, [sp, #36]	; 0x24
   29316:	e76a      	b.n	291ee <_svfiprintf_r+0x52>
   29318:	fb0c 3202 	mla	r2, ip, r2, r3
   2931c:	460c      	mov	r4, r1
   2931e:	2001      	movs	r0, #1
   29320:	e7a8      	b.n	29274 <_svfiprintf_r+0xd8>
   29322:	2300      	movs	r3, #0
   29324:	3401      	adds	r4, #1
   29326:	f04f 0c0a 	mov.w	ip, #10
   2932a:	4619      	mov	r1, r3
   2932c:	9305      	str	r3, [sp, #20]
   2932e:	4620      	mov	r0, r4
   29330:	f810 2b01 	ldrb.w	r2, [r0], #1
   29334:	3a30      	subs	r2, #48	; 0x30
   29336:	2a09      	cmp	r2, #9
   29338:	d903      	bls.n	29342 <_svfiprintf_r+0x1a6>
   2933a:	2b00      	cmp	r3, #0
   2933c:	d0c6      	beq.n	292cc <_svfiprintf_r+0x130>
   2933e:	9105      	str	r1, [sp, #20]
   29340:	e7c4      	b.n	292cc <_svfiprintf_r+0x130>
   29342:	fb0c 2101 	mla	r1, ip, r1, r2
   29346:	4604      	mov	r4, r0
   29348:	2301      	movs	r3, #1
   2934a:	e7f0      	b.n	2932e <_svfiprintf_r+0x192>
   2934c:	ab03      	add	r3, sp, #12
   2934e:	462a      	mov	r2, r5
   29350:	a904      	add	r1, sp, #16
   29352:	4638      	mov	r0, r7
   29354:	9300      	str	r3, [sp, #0]
   29356:	4b0e      	ldr	r3, [pc, #56]	; (29390 <_svfiprintf_r+0x1f4>)
   29358:	f7fe f898 	bl	2748c <_printf_float>
   2935c:	1c42      	adds	r2, r0, #1
   2935e:	4606      	mov	r6, r0
   29360:	d1d6      	bne.n	29310 <_svfiprintf_r+0x174>
   29362:	89ab      	ldrh	r3, [r5, #12]
   29364:	065b      	lsls	r3, r3, #25
   29366:	f53f af2d 	bmi.w	291c4 <_svfiprintf_r+0x28>
   2936a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2936c:	e72c      	b.n	291c8 <_svfiprintf_r+0x2c>
   2936e:	ab03      	add	r3, sp, #12
   29370:	462a      	mov	r2, r5
   29372:	a904      	add	r1, sp, #16
   29374:	4638      	mov	r0, r7
   29376:	9300      	str	r3, [sp, #0]
   29378:	4b05      	ldr	r3, [pc, #20]	; (29390 <_svfiprintf_r+0x1f4>)
   2937a:	f7fe fabd 	bl	278f8 <_printf_i>
   2937e:	e7ed      	b.n	2935c <_svfiprintf_r+0x1c0>
   29380:	00038e0a 	.word	0x00038e0a
   29384:	00038e10 	.word	0x00038e10
   29388:	00038e14 	.word	0x00038e14
   2938c:	0002748d 	.word	0x0002748d
   29390:	000324af 	.word	0x000324af

00029394 <_vfiprintf_r>:
   29394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29398:	460d      	mov	r5, r1
   2939a:	b09d      	sub	sp, #116	; 0x74
   2939c:	4614      	mov	r4, r2
   2939e:	4698      	mov	r8, r3
   293a0:	4606      	mov	r6, r0
   293a2:	b118      	cbz	r0, 293ac <_vfiprintf_r+0x18>
   293a4:	6983      	ldr	r3, [r0, #24]
   293a6:	b90b      	cbnz	r3, 293ac <_vfiprintf_r+0x18>
   293a8:	f7ff f816 	bl	283d8 <__sinit>
   293ac:	4b87      	ldr	r3, [pc, #540]	; (295cc <_vfiprintf_r+0x238>)
   293ae:	429d      	cmp	r5, r3
   293b0:	d11b      	bne.n	293ea <_vfiprintf_r+0x56>
   293b2:	6875      	ldr	r5, [r6, #4]
   293b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   293b6:	07d9      	lsls	r1, r3, #31
   293b8:	d405      	bmi.n	293c6 <_vfiprintf_r+0x32>
   293ba:	89ab      	ldrh	r3, [r5, #12]
   293bc:	059a      	lsls	r2, r3, #22
   293be:	d402      	bmi.n	293c6 <_vfiprintf_r+0x32>
   293c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   293c2:	f002 fc02 	bl	2bbca <__retarget_lock_acquire_recursive>
   293c6:	89ab      	ldrh	r3, [r5, #12]
   293c8:	071b      	lsls	r3, r3, #28
   293ca:	d501      	bpl.n	293d0 <_vfiprintf_r+0x3c>
   293cc:	692b      	ldr	r3, [r5, #16]
   293ce:	b9eb      	cbnz	r3, 2940c <_vfiprintf_r+0x78>
   293d0:	4629      	mov	r1, r5
   293d2:	4630      	mov	r0, r6
   293d4:	f000 f998 	bl	29708 <__swsetup_r>
   293d8:	b1c0      	cbz	r0, 2940c <_vfiprintf_r+0x78>
   293da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   293dc:	07dc      	lsls	r4, r3, #31
   293de:	d50e      	bpl.n	293fe <_vfiprintf_r+0x6a>
   293e0:	f04f 30ff 	mov.w	r0, #4294967295
   293e4:	b01d      	add	sp, #116	; 0x74
   293e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293ea:	4b79      	ldr	r3, [pc, #484]	; (295d0 <_vfiprintf_r+0x23c>)
   293ec:	429d      	cmp	r5, r3
   293ee:	d101      	bne.n	293f4 <_vfiprintf_r+0x60>
   293f0:	68b5      	ldr	r5, [r6, #8]
   293f2:	e7df      	b.n	293b4 <_vfiprintf_r+0x20>
   293f4:	4b77      	ldr	r3, [pc, #476]	; (295d4 <_vfiprintf_r+0x240>)
   293f6:	429d      	cmp	r5, r3
   293f8:	bf08      	it	eq
   293fa:	68f5      	ldreq	r5, [r6, #12]
   293fc:	e7da      	b.n	293b4 <_vfiprintf_r+0x20>
   293fe:	89ab      	ldrh	r3, [r5, #12]
   29400:	0598      	lsls	r0, r3, #22
   29402:	d4ed      	bmi.n	293e0 <_vfiprintf_r+0x4c>
   29404:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29406:	f002 fbe8 	bl	2bbda <__retarget_lock_release_recursive>
   2940a:	e7e9      	b.n	293e0 <_vfiprintf_r+0x4c>
   2940c:	2300      	movs	r3, #0
   2940e:	f8cd 800c 	str.w	r8, [sp, #12]
   29412:	f04f 0901 	mov.w	r9, #1
   29416:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 295d8 <_vfiprintf_r+0x244>
   2941a:	9309      	str	r3, [sp, #36]	; 0x24
   2941c:	2320      	movs	r3, #32
   2941e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   29422:	2330      	movs	r3, #48	; 0x30
   29424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   29428:	4623      	mov	r3, r4
   2942a:	469a      	mov	sl, r3
   2942c:	f813 2b01 	ldrb.w	r2, [r3], #1
   29430:	b10a      	cbz	r2, 29436 <_vfiprintf_r+0xa2>
   29432:	2a25      	cmp	r2, #37	; 0x25
   29434:	d1f9      	bne.n	2942a <_vfiprintf_r+0x96>
   29436:	ebba 0b04 	subs.w	fp, sl, r4
   2943a:	d00b      	beq.n	29454 <_vfiprintf_r+0xc0>
   2943c:	465b      	mov	r3, fp
   2943e:	4622      	mov	r2, r4
   29440:	4629      	mov	r1, r5
   29442:	4630      	mov	r0, r6
   29444:	f009 f8a3 	bl	3258e <__sfputs_r>
   29448:	3001      	adds	r0, #1
   2944a:	f000 80a6 	beq.w	2959a <_vfiprintf_r+0x206>
   2944e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29450:	445a      	add	r2, fp
   29452:	9209      	str	r2, [sp, #36]	; 0x24
   29454:	f89a 3000 	ldrb.w	r3, [sl]
   29458:	2b00      	cmp	r3, #0
   2945a:	f000 809e 	beq.w	2959a <_vfiprintf_r+0x206>
   2945e:	2300      	movs	r3, #0
   29460:	f04f 32ff 	mov.w	r2, #4294967295
   29464:	f10a 0a01 	add.w	sl, sl, #1
   29468:	9304      	str	r3, [sp, #16]
   2946a:	9307      	str	r3, [sp, #28]
   2946c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29470:	931a      	str	r3, [sp, #104]	; 0x68
   29472:	e9cd 2305 	strd	r2, r3, [sp, #20]
   29476:	4654      	mov	r4, sl
   29478:	2205      	movs	r2, #5
   2947a:	4857      	ldr	r0, [pc, #348]	; (295d8 <_vfiprintf_r+0x244>)
   2947c:	f814 1b01 	ldrb.w	r1, [r4], #1
   29480:	f008 ff29 	bl	322d6 <memchr>
   29484:	9b04      	ldr	r3, [sp, #16]
   29486:	b9d0      	cbnz	r0, 294be <_vfiprintf_r+0x12a>
   29488:	06d9      	lsls	r1, r3, #27
   2948a:	bf44      	itt	mi
   2948c:	2220      	movmi	r2, #32
   2948e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   29492:	071a      	lsls	r2, r3, #28
   29494:	bf44      	itt	mi
   29496:	222b      	movmi	r2, #43	; 0x2b
   29498:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   2949c:	f89a 2000 	ldrb.w	r2, [sl]
   294a0:	2a2a      	cmp	r2, #42	; 0x2a
   294a2:	d014      	beq.n	294ce <_vfiprintf_r+0x13a>
   294a4:	9a07      	ldr	r2, [sp, #28]
   294a6:	4654      	mov	r4, sl
   294a8:	2000      	movs	r0, #0
   294aa:	f04f 0c0a 	mov.w	ip, #10
   294ae:	4621      	mov	r1, r4
   294b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   294b4:	3b30      	subs	r3, #48	; 0x30
   294b6:	2b09      	cmp	r3, #9
   294b8:	d94a      	bls.n	29550 <_vfiprintf_r+0x1bc>
   294ba:	b970      	cbnz	r0, 294da <_vfiprintf_r+0x146>
   294bc:	e014      	b.n	294e8 <_vfiprintf_r+0x154>
   294be:	eba0 0008 	sub.w	r0, r0, r8
   294c2:	46a2      	mov	sl, r4
   294c4:	fa09 f000 	lsl.w	r0, r9, r0
   294c8:	4318      	orrs	r0, r3
   294ca:	9004      	str	r0, [sp, #16]
   294cc:	e7d3      	b.n	29476 <_vfiprintf_r+0xe2>
   294ce:	9a03      	ldr	r2, [sp, #12]
   294d0:	1d11      	adds	r1, r2, #4
   294d2:	6812      	ldr	r2, [r2, #0]
   294d4:	2a00      	cmp	r2, #0
   294d6:	9103      	str	r1, [sp, #12]
   294d8:	db01      	blt.n	294de <_vfiprintf_r+0x14a>
   294da:	9207      	str	r2, [sp, #28]
   294dc:	e004      	b.n	294e8 <_vfiprintf_r+0x154>
   294de:	4252      	negs	r2, r2
   294e0:	f043 0302 	orr.w	r3, r3, #2
   294e4:	9207      	str	r2, [sp, #28]
   294e6:	9304      	str	r3, [sp, #16]
   294e8:	7823      	ldrb	r3, [r4, #0]
   294ea:	2b2e      	cmp	r3, #46	; 0x2e
   294ec:	d10a      	bne.n	29504 <_vfiprintf_r+0x170>
   294ee:	7863      	ldrb	r3, [r4, #1]
   294f0:	2b2a      	cmp	r3, #42	; 0x2a
   294f2:	d132      	bne.n	2955a <_vfiprintf_r+0x1c6>
   294f4:	9b03      	ldr	r3, [sp, #12]
   294f6:	3402      	adds	r4, #2
   294f8:	1d1a      	adds	r2, r3, #4
   294fa:	681b      	ldr	r3, [r3, #0]
   294fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   29500:	9203      	str	r2, [sp, #12]
   29502:	9305      	str	r3, [sp, #20]
   29504:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 295dc <_vfiprintf_r+0x248>
   29508:	2203      	movs	r2, #3
   2950a:	7821      	ldrb	r1, [r4, #0]
   2950c:	4650      	mov	r0, sl
   2950e:	f008 fee2 	bl	322d6 <memchr>
   29512:	b138      	cbz	r0, 29524 <_vfiprintf_r+0x190>
   29514:	eba0 000a 	sub.w	r0, r0, sl
   29518:	2240      	movs	r2, #64	; 0x40
   2951a:	9b04      	ldr	r3, [sp, #16]
   2951c:	3401      	adds	r4, #1
   2951e:	4082      	lsls	r2, r0
   29520:	4313      	orrs	r3, r2
   29522:	9304      	str	r3, [sp, #16]
   29524:	f814 1b01 	ldrb.w	r1, [r4], #1
   29528:	2206      	movs	r2, #6
   2952a:	482d      	ldr	r0, [pc, #180]	; (295e0 <_vfiprintf_r+0x24c>)
   2952c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29530:	f008 fed1 	bl	322d6 <memchr>
   29534:	2800      	cmp	r0, #0
   29536:	d03f      	beq.n	295b8 <_vfiprintf_r+0x224>
   29538:	4b2a      	ldr	r3, [pc, #168]	; (295e4 <_vfiprintf_r+0x250>)
   2953a:	bb1b      	cbnz	r3, 29584 <_vfiprintf_r+0x1f0>
   2953c:	9b03      	ldr	r3, [sp, #12]
   2953e:	3307      	adds	r3, #7
   29540:	f023 0307 	bic.w	r3, r3, #7
   29544:	3308      	adds	r3, #8
   29546:	9303      	str	r3, [sp, #12]
   29548:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2954a:	443b      	add	r3, r7
   2954c:	9309      	str	r3, [sp, #36]	; 0x24
   2954e:	e76b      	b.n	29428 <_vfiprintf_r+0x94>
   29550:	fb0c 3202 	mla	r2, ip, r2, r3
   29554:	460c      	mov	r4, r1
   29556:	2001      	movs	r0, #1
   29558:	e7a9      	b.n	294ae <_vfiprintf_r+0x11a>
   2955a:	2300      	movs	r3, #0
   2955c:	3401      	adds	r4, #1
   2955e:	f04f 0c0a 	mov.w	ip, #10
   29562:	4619      	mov	r1, r3
   29564:	9305      	str	r3, [sp, #20]
   29566:	4620      	mov	r0, r4
   29568:	f810 2b01 	ldrb.w	r2, [r0], #1
   2956c:	3a30      	subs	r2, #48	; 0x30
   2956e:	2a09      	cmp	r2, #9
   29570:	d903      	bls.n	2957a <_vfiprintf_r+0x1e6>
   29572:	2b00      	cmp	r3, #0
   29574:	d0c6      	beq.n	29504 <_vfiprintf_r+0x170>
   29576:	9105      	str	r1, [sp, #20]
   29578:	e7c4      	b.n	29504 <_vfiprintf_r+0x170>
   2957a:	fb0c 2101 	mla	r1, ip, r1, r2
   2957e:	4604      	mov	r4, r0
   29580:	2301      	movs	r3, #1
   29582:	e7f0      	b.n	29566 <_vfiprintf_r+0x1d2>
   29584:	ab03      	add	r3, sp, #12
   29586:	462a      	mov	r2, r5
   29588:	a904      	add	r1, sp, #16
   2958a:	4630      	mov	r0, r6
   2958c:	9300      	str	r3, [sp, #0]
   2958e:	4b16      	ldr	r3, [pc, #88]	; (295e8 <_vfiprintf_r+0x254>)
   29590:	f7fd ff7c 	bl	2748c <_printf_float>
   29594:	4607      	mov	r7, r0
   29596:	1c78      	adds	r0, r7, #1
   29598:	d1d6      	bne.n	29548 <_vfiprintf_r+0x1b4>
   2959a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2959c:	07d9      	lsls	r1, r3, #31
   2959e:	d405      	bmi.n	295ac <_vfiprintf_r+0x218>
   295a0:	89ab      	ldrh	r3, [r5, #12]
   295a2:	059a      	lsls	r2, r3, #22
   295a4:	d402      	bmi.n	295ac <_vfiprintf_r+0x218>
   295a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   295a8:	f002 fb17 	bl	2bbda <__retarget_lock_release_recursive>
   295ac:	89ab      	ldrh	r3, [r5, #12]
   295ae:	065b      	lsls	r3, r3, #25
   295b0:	f53f af16 	bmi.w	293e0 <_vfiprintf_r+0x4c>
   295b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   295b6:	e715      	b.n	293e4 <_vfiprintf_r+0x50>
   295b8:	ab03      	add	r3, sp, #12
   295ba:	462a      	mov	r2, r5
   295bc:	a904      	add	r1, sp, #16
   295be:	4630      	mov	r0, r6
   295c0:	9300      	str	r3, [sp, #0]
   295c2:	4b09      	ldr	r3, [pc, #36]	; (295e8 <_vfiprintf_r+0x254>)
   295c4:	f7fe f998 	bl	278f8 <_printf_i>
   295c8:	e7e4      	b.n	29594 <_vfiprintf_r+0x200>
   295ca:	bf00      	nop
   295cc:	000344e8 	.word	0x000344e8
   295d0:	000344c8 	.word	0x000344c8
   295d4:	000344a8 	.word	0x000344a8
   295d8:	00038e0a 	.word	0x00038e0a
   295dc:	00038e10 	.word	0x00038e10
   295e0:	00038e14 	.word	0x00038e14
   295e4:	0002748d 	.word	0x0002748d
   295e8:	0003258f 	.word	0x0003258f

000295ec <siscanf>:
   295ec:	b40e      	push	{r1, r2, r3}
   295ee:	b530      	push	{r4, r5, lr}
   295f0:	b09c      	sub	sp, #112	; 0x70
   295f2:	f44f 7201 	mov.w	r2, #516	; 0x204
   295f6:	ac1f      	add	r4, sp, #124	; 0x7c
   295f8:	f8ad 2014 	strh.w	r2, [sp, #20]
   295fc:	9002      	str	r0, [sp, #8]
   295fe:	f854 5b04 	ldr.w	r5, [r4], #4
   29602:	9006      	str	r0, [sp, #24]
   29604:	f7df ff01 	bl	940a <strlen>
   29608:	4b0b      	ldr	r3, [pc, #44]	; (29638 <siscanf+0x4c>)
   2960a:	462a      	mov	r2, r5
   2960c:	9003      	str	r0, [sp, #12]
   2960e:	a902      	add	r1, sp, #8
   29610:	930b      	str	r3, [sp, #44]	; 0x2c
   29612:	2300      	movs	r3, #0
   29614:	9007      	str	r0, [sp, #28]
   29616:	930f      	str	r3, [sp, #60]	; 0x3c
   29618:	9314      	str	r3, [sp, #80]	; 0x50
   2961a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2961e:	4807      	ldr	r0, [pc, #28]	; (2963c <siscanf+0x50>)
   29620:	f8ad 3016 	strh.w	r3, [sp, #22]
   29624:	4623      	mov	r3, r4
   29626:	6800      	ldr	r0, [r0, #0]
   29628:	9401      	str	r4, [sp, #4]
   2962a:	f000 f983 	bl	29934 <__ssvfiscanf_r>
   2962e:	b01c      	add	sp, #112	; 0x70
   29630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   29634:	b003      	add	sp, #12
   29636:	4770      	bx	lr
   29638:	000325d5 	.word	0x000325d5
   2963c:	20008848 	.word	0x20008848

00029640 <__swbuf_r>:
   29640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29642:	460e      	mov	r6, r1
   29644:	4614      	mov	r4, r2
   29646:	4605      	mov	r5, r0
   29648:	b118      	cbz	r0, 29652 <__swbuf_r+0x12>
   2964a:	6983      	ldr	r3, [r0, #24]
   2964c:	b90b      	cbnz	r3, 29652 <__swbuf_r+0x12>
   2964e:	f7fe fec3 	bl	283d8 <__sinit>
   29652:	4b21      	ldr	r3, [pc, #132]	; (296d8 <__swbuf_r+0x98>)
   29654:	429c      	cmp	r4, r3
   29656:	d110      	bne.n	2967a <__swbuf_r+0x3a>
   29658:	686c      	ldr	r4, [r5, #4]
   2965a:	69a3      	ldr	r3, [r4, #24]
   2965c:	60a3      	str	r3, [r4, #8]
   2965e:	89a3      	ldrh	r3, [r4, #12]
   29660:	071a      	lsls	r2, r3, #28
   29662:	d501      	bpl.n	29668 <__swbuf_r+0x28>
   29664:	6923      	ldr	r3, [r4, #16]
   29666:	b993      	cbnz	r3, 2968e <__swbuf_r+0x4e>
   29668:	4621      	mov	r1, r4
   2966a:	4628      	mov	r0, r5
   2966c:	f000 f84c 	bl	29708 <__swsetup_r>
   29670:	b168      	cbz	r0, 2968e <__swbuf_r+0x4e>
   29672:	f04f 37ff 	mov.w	r7, #4294967295
   29676:	4638      	mov	r0, r7
   29678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2967a:	4b18      	ldr	r3, [pc, #96]	; (296dc <__swbuf_r+0x9c>)
   2967c:	429c      	cmp	r4, r3
   2967e:	d101      	bne.n	29684 <__swbuf_r+0x44>
   29680:	68ac      	ldr	r4, [r5, #8]
   29682:	e7ea      	b.n	2965a <__swbuf_r+0x1a>
   29684:	4b16      	ldr	r3, [pc, #88]	; (296e0 <__swbuf_r+0xa0>)
   29686:	429c      	cmp	r4, r3
   29688:	bf08      	it	eq
   2968a:	68ec      	ldreq	r4, [r5, #12]
   2968c:	e7e5      	b.n	2965a <__swbuf_r+0x1a>
   2968e:	6923      	ldr	r3, [r4, #16]
   29690:	b2f6      	uxtb	r6, r6
   29692:	6820      	ldr	r0, [r4, #0]
   29694:	4637      	mov	r7, r6
   29696:	1ac0      	subs	r0, r0, r3
   29698:	6963      	ldr	r3, [r4, #20]
   2969a:	4283      	cmp	r3, r0
   2969c:	dc05      	bgt.n	296aa <__swbuf_r+0x6a>
   2969e:	4621      	mov	r1, r4
   296a0:	4628      	mov	r0, r5
   296a2:	f000 f8b9 	bl	29818 <_fflush_r>
   296a6:	2800      	cmp	r0, #0
   296a8:	d1e3      	bne.n	29672 <__swbuf_r+0x32>
   296aa:	68a3      	ldr	r3, [r4, #8]
   296ac:	3001      	adds	r0, #1
   296ae:	3b01      	subs	r3, #1
   296b0:	60a3      	str	r3, [r4, #8]
   296b2:	6823      	ldr	r3, [r4, #0]
   296b4:	1c5a      	adds	r2, r3, #1
   296b6:	6022      	str	r2, [r4, #0]
   296b8:	701e      	strb	r6, [r3, #0]
   296ba:	6963      	ldr	r3, [r4, #20]
   296bc:	4283      	cmp	r3, r0
   296be:	d004      	beq.n	296ca <__swbuf_r+0x8a>
   296c0:	89a3      	ldrh	r3, [r4, #12]
   296c2:	07db      	lsls	r3, r3, #31
   296c4:	d5d7      	bpl.n	29676 <__swbuf_r+0x36>
   296c6:	2e0a      	cmp	r6, #10
   296c8:	d1d5      	bne.n	29676 <__swbuf_r+0x36>
   296ca:	4621      	mov	r1, r4
   296cc:	4628      	mov	r0, r5
   296ce:	f000 f8a3 	bl	29818 <_fflush_r>
   296d2:	2800      	cmp	r0, #0
   296d4:	d0cf      	beq.n	29676 <__swbuf_r+0x36>
   296d6:	e7cc      	b.n	29672 <__swbuf_r+0x32>
   296d8:	000344e8 	.word	0x000344e8
   296dc:	000344c8 	.word	0x000344c8
   296e0:	000344a8 	.word	0x000344a8

000296e4 <_write_r>:
   296e4:	b538      	push	{r3, r4, r5, lr}
   296e6:	4604      	mov	r4, r0
   296e8:	4d06      	ldr	r5, [pc, #24]	; (29704 <_write_r+0x20>)
   296ea:	4608      	mov	r0, r1
   296ec:	4611      	mov	r1, r2
   296ee:	2200      	movs	r2, #0
   296f0:	602a      	str	r2, [r5, #0]
   296f2:	461a      	mov	r2, r3
   296f4:	f002 fa42 	bl	2bb7c <_write>
   296f8:	1c43      	adds	r3, r0, #1
   296fa:	d102      	bne.n	29702 <_write_r+0x1e>
   296fc:	682b      	ldr	r3, [r5, #0]
   296fe:	b103      	cbz	r3, 29702 <_write_r+0x1e>
   29700:	6023      	str	r3, [r4, #0]
   29702:	bd38      	pop	{r3, r4, r5, pc}
   29704:	20030ef4 	.word	0x20030ef4

00029708 <__swsetup_r>:
   29708:	4b31      	ldr	r3, [pc, #196]	; (297d0 <__swsetup_r+0xc8>)
   2970a:	b570      	push	{r4, r5, r6, lr}
   2970c:	681d      	ldr	r5, [r3, #0]
   2970e:	4606      	mov	r6, r0
   29710:	460c      	mov	r4, r1
   29712:	b125      	cbz	r5, 2971e <__swsetup_r+0x16>
   29714:	69ab      	ldr	r3, [r5, #24]
   29716:	b913      	cbnz	r3, 2971e <__swsetup_r+0x16>
   29718:	4628      	mov	r0, r5
   2971a:	f7fe fe5d 	bl	283d8 <__sinit>
   2971e:	4b2d      	ldr	r3, [pc, #180]	; (297d4 <__swsetup_r+0xcc>)
   29720:	429c      	cmp	r4, r3
   29722:	d10e      	bne.n	29742 <__swsetup_r+0x3a>
   29724:	686c      	ldr	r4, [r5, #4]
   29726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2972a:	071a      	lsls	r2, r3, #28
   2972c:	d42c      	bmi.n	29788 <__swsetup_r+0x80>
   2972e:	06dd      	lsls	r5, r3, #27
   29730:	d411      	bmi.n	29756 <__swsetup_r+0x4e>
   29732:	2209      	movs	r2, #9
   29734:	6032      	str	r2, [r6, #0]
   29736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2973a:	f04f 30ff 	mov.w	r0, #4294967295
   2973e:	81a3      	strh	r3, [r4, #12]
   29740:	e03d      	b.n	297be <__swsetup_r+0xb6>
   29742:	4b25      	ldr	r3, [pc, #148]	; (297d8 <__swsetup_r+0xd0>)
   29744:	429c      	cmp	r4, r3
   29746:	d101      	bne.n	2974c <__swsetup_r+0x44>
   29748:	68ac      	ldr	r4, [r5, #8]
   2974a:	e7ec      	b.n	29726 <__swsetup_r+0x1e>
   2974c:	4b23      	ldr	r3, [pc, #140]	; (297dc <__swsetup_r+0xd4>)
   2974e:	429c      	cmp	r4, r3
   29750:	bf08      	it	eq
   29752:	68ec      	ldreq	r4, [r5, #12]
   29754:	e7e7      	b.n	29726 <__swsetup_r+0x1e>
   29756:	0758      	lsls	r0, r3, #29
   29758:	d512      	bpl.n	29780 <__swsetup_r+0x78>
   2975a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2975c:	b141      	cbz	r1, 29770 <__swsetup_r+0x68>
   2975e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29762:	4299      	cmp	r1, r3
   29764:	d002      	beq.n	2976c <__swsetup_r+0x64>
   29766:	4630      	mov	r0, r6
   29768:	f7fd fdec 	bl	27344 <_free_r>
   2976c:	2300      	movs	r3, #0
   2976e:	6363      	str	r3, [r4, #52]	; 0x34
   29770:	89a3      	ldrh	r3, [r4, #12]
   29772:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29776:	81a3      	strh	r3, [r4, #12]
   29778:	2300      	movs	r3, #0
   2977a:	6063      	str	r3, [r4, #4]
   2977c:	6923      	ldr	r3, [r4, #16]
   2977e:	6023      	str	r3, [r4, #0]
   29780:	89a3      	ldrh	r3, [r4, #12]
   29782:	f043 0308 	orr.w	r3, r3, #8
   29786:	81a3      	strh	r3, [r4, #12]
   29788:	6923      	ldr	r3, [r4, #16]
   2978a:	b94b      	cbnz	r3, 297a0 <__swsetup_r+0x98>
   2978c:	89a3      	ldrh	r3, [r4, #12]
   2978e:	f403 7320 	and.w	r3, r3, #640	; 0x280
   29792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   29796:	d003      	beq.n	297a0 <__swsetup_r+0x98>
   29798:	4621      	mov	r1, r4
   2979a:	4630      	mov	r0, r6
   2979c:	f000 f88a 	bl	298b4 <__smakebuf_r>
   297a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   297a4:	f013 0201 	ands.w	r2, r3, #1
   297a8:	d00a      	beq.n	297c0 <__swsetup_r+0xb8>
   297aa:	2200      	movs	r2, #0
   297ac:	60a2      	str	r2, [r4, #8]
   297ae:	6962      	ldr	r2, [r4, #20]
   297b0:	4252      	negs	r2, r2
   297b2:	61a2      	str	r2, [r4, #24]
   297b4:	6922      	ldr	r2, [r4, #16]
   297b6:	b942      	cbnz	r2, 297ca <__swsetup_r+0xc2>
   297b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   297bc:	d1bb      	bne.n	29736 <__swsetup_r+0x2e>
   297be:	bd70      	pop	{r4, r5, r6, pc}
   297c0:	0799      	lsls	r1, r3, #30
   297c2:	bf58      	it	pl
   297c4:	6962      	ldrpl	r2, [r4, #20]
   297c6:	60a2      	str	r2, [r4, #8]
   297c8:	e7f4      	b.n	297b4 <__swsetup_r+0xac>
   297ca:	2000      	movs	r0, #0
   297cc:	e7f7      	b.n	297be <__swsetup_r+0xb6>
   297ce:	bf00      	nop
   297d0:	20008848 	.word	0x20008848
   297d4:	000344e8 	.word	0x000344e8
   297d8:	000344c8 	.word	0x000344c8
   297dc:	000344a8 	.word	0x000344a8

000297e0 <_close_r>:
   297e0:	b538      	push	{r3, r4, r5, lr}
   297e2:	2300      	movs	r3, #0
   297e4:	4d05      	ldr	r5, [pc, #20]	; (297fc <_close_r+0x1c>)
   297e6:	4604      	mov	r4, r0
   297e8:	4608      	mov	r0, r1
   297ea:	602b      	str	r3, [r5, #0]
   297ec:	f002 f9ca 	bl	2bb84 <_close>
   297f0:	1c43      	adds	r3, r0, #1
   297f2:	d102      	bne.n	297fa <_close_r+0x1a>
   297f4:	682b      	ldr	r3, [r5, #0]
   297f6:	b103      	cbz	r3, 297fa <_close_r+0x1a>
   297f8:	6023      	str	r3, [r4, #0]
   297fa:	bd38      	pop	{r3, r4, r5, pc}
   297fc:	20030ef4 	.word	0x20030ef4

00029800 <__env_lock>:
   29800:	4801      	ldr	r0, [pc, #4]	; (29808 <__env_lock+0x8>)
   29802:	f002 b9e2 	b.w	2bbca <__retarget_lock_acquire_recursive>
   29806:	bf00      	nop
   29808:	20008bf0 	.word	0x20008bf0

0002980c <__env_unlock>:
   2980c:	4801      	ldr	r0, [pc, #4]	; (29814 <__env_unlock+0x8>)
   2980e:	f002 b9e4 	b.w	2bbda <__retarget_lock_release_recursive>
   29812:	bf00      	nop
   29814:	20008bf0 	.word	0x20008bf0

00029818 <_fflush_r>:
   29818:	b538      	push	{r3, r4, r5, lr}
   2981a:	690b      	ldr	r3, [r1, #16]
   2981c:	4605      	mov	r5, r0
   2981e:	460c      	mov	r4, r1
   29820:	b913      	cbnz	r3, 29828 <_fflush_r+0x10>
   29822:	2500      	movs	r5, #0
   29824:	4628      	mov	r0, r5
   29826:	bd38      	pop	{r3, r4, r5, pc}
   29828:	b118      	cbz	r0, 29832 <_fflush_r+0x1a>
   2982a:	6983      	ldr	r3, [r0, #24]
   2982c:	b90b      	cbnz	r3, 29832 <_fflush_r+0x1a>
   2982e:	f7fe fdd3 	bl	283d8 <__sinit>
   29832:	4b14      	ldr	r3, [pc, #80]	; (29884 <_fflush_r+0x6c>)
   29834:	429c      	cmp	r4, r3
   29836:	d11b      	bne.n	29870 <_fflush_r+0x58>
   29838:	686c      	ldr	r4, [r5, #4]
   2983a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2983e:	2b00      	cmp	r3, #0
   29840:	d0ef      	beq.n	29822 <_fflush_r+0xa>
   29842:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29844:	07d0      	lsls	r0, r2, #31
   29846:	d404      	bmi.n	29852 <_fflush_r+0x3a>
   29848:	0599      	lsls	r1, r3, #22
   2984a:	d402      	bmi.n	29852 <_fflush_r+0x3a>
   2984c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2984e:	f002 f9bc 	bl	2bbca <__retarget_lock_acquire_recursive>
   29852:	4628      	mov	r0, r5
   29854:	4621      	mov	r1, r4
   29856:	f008 ff05 	bl	32664 <__sflush_r>
   2985a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2985c:	4605      	mov	r5, r0
   2985e:	07da      	lsls	r2, r3, #31
   29860:	d4e0      	bmi.n	29824 <_fflush_r+0xc>
   29862:	89a3      	ldrh	r3, [r4, #12]
   29864:	059b      	lsls	r3, r3, #22
   29866:	d4dd      	bmi.n	29824 <_fflush_r+0xc>
   29868:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2986a:	f002 f9b6 	bl	2bbda <__retarget_lock_release_recursive>
   2986e:	e7d9      	b.n	29824 <_fflush_r+0xc>
   29870:	4b05      	ldr	r3, [pc, #20]	; (29888 <_fflush_r+0x70>)
   29872:	429c      	cmp	r4, r3
   29874:	d101      	bne.n	2987a <_fflush_r+0x62>
   29876:	68ac      	ldr	r4, [r5, #8]
   29878:	e7df      	b.n	2983a <_fflush_r+0x22>
   2987a:	4b04      	ldr	r3, [pc, #16]	; (2988c <_fflush_r+0x74>)
   2987c:	429c      	cmp	r4, r3
   2987e:	bf08      	it	eq
   29880:	68ec      	ldreq	r4, [r5, #12]
   29882:	e7da      	b.n	2983a <_fflush_r+0x22>
   29884:	000344e8 	.word	0x000344e8
   29888:	000344c8 	.word	0x000344c8
   2988c:	000344a8 	.word	0x000344a8

00029890 <_lseek_r>:
   29890:	b538      	push	{r3, r4, r5, lr}
   29892:	4604      	mov	r4, r0
   29894:	4d06      	ldr	r5, [pc, #24]	; (298b0 <_lseek_r+0x20>)
   29896:	4608      	mov	r0, r1
   29898:	4611      	mov	r1, r2
   2989a:	2200      	movs	r2, #0
   2989c:	602a      	str	r2, [r5, #0]
   2989e:	461a      	mov	r2, r3
   298a0:	f002 f973 	bl	2bb8a <_lseek>
   298a4:	1c43      	adds	r3, r0, #1
   298a6:	d102      	bne.n	298ae <_lseek_r+0x1e>
   298a8:	682b      	ldr	r3, [r5, #0]
   298aa:	b103      	cbz	r3, 298ae <_lseek_r+0x1e>
   298ac:	6023      	str	r3, [r4, #0]
   298ae:	bd38      	pop	{r3, r4, r5, pc}
   298b0:	20030ef4 	.word	0x20030ef4

000298b4 <__smakebuf_r>:
   298b4:	898b      	ldrh	r3, [r1, #12]
   298b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   298b8:	079d      	lsls	r5, r3, #30
   298ba:	4606      	mov	r6, r0
   298bc:	460c      	mov	r4, r1
   298be:	d507      	bpl.n	298d0 <__smakebuf_r+0x1c>
   298c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   298c4:	6023      	str	r3, [r4, #0]
   298c6:	6123      	str	r3, [r4, #16]
   298c8:	2301      	movs	r3, #1
   298ca:	6163      	str	r3, [r4, #20]
   298cc:	b003      	add	sp, #12
   298ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   298d0:	ab01      	add	r3, sp, #4
   298d2:	466a      	mov	r2, sp
   298d4:	f008 ff45 	bl	32762 <__swhatbuf_r>
   298d8:	9f00      	ldr	r7, [sp, #0]
   298da:	4605      	mov	r5, r0
   298dc:	4630      	mov	r0, r6
   298de:	4639      	mov	r1, r7
   298e0:	f7fd fd7a 	bl	273d8 <_malloc_r>
   298e4:	b948      	cbnz	r0, 298fa <__smakebuf_r+0x46>
   298e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   298ea:	059a      	lsls	r2, r3, #22
   298ec:	d4ee      	bmi.n	298cc <__smakebuf_r+0x18>
   298ee:	f023 0303 	bic.w	r3, r3, #3
   298f2:	f043 0302 	orr.w	r3, r3, #2
   298f6:	81a3      	strh	r3, [r4, #12]
   298f8:	e7e2      	b.n	298c0 <__smakebuf_r+0xc>
   298fa:	4b0d      	ldr	r3, [pc, #52]	; (29930 <__smakebuf_r+0x7c>)
   298fc:	62b3      	str	r3, [r6, #40]	; 0x28
   298fe:	89a3      	ldrh	r3, [r4, #12]
   29900:	6020      	str	r0, [r4, #0]
   29902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29906:	81a3      	strh	r3, [r4, #12]
   29908:	9b01      	ldr	r3, [sp, #4]
   2990a:	e9c4 0704 	strd	r0, r7, [r4, #16]
   2990e:	b15b      	cbz	r3, 29928 <__smakebuf_r+0x74>
   29910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29914:	4630      	mov	r0, r6
   29916:	f000 fb1b 	bl	29f50 <_isatty_r>
   2991a:	b128      	cbz	r0, 29928 <__smakebuf_r+0x74>
   2991c:	89a3      	ldrh	r3, [r4, #12]
   2991e:	f023 0303 	bic.w	r3, r3, #3
   29922:	f043 0301 	orr.w	r3, r3, #1
   29926:	81a3      	strh	r3, [r4, #12]
   29928:	89a3      	ldrh	r3, [r4, #12]
   2992a:	431d      	orrs	r5, r3
   2992c:	81a5      	strh	r5, [r4, #12]
   2992e:	e7cd      	b.n	298cc <__smakebuf_r+0x18>
   29930:	0002839d 	.word	0x0002839d

00029934 <__ssvfiscanf_r>:
   29934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29938:	460c      	mov	r4, r1
   2993a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2993e:	2100      	movs	r1, #0
   29940:	4606      	mov	r6, r0
   29942:	f10d 0804 	add.w	r8, sp, #4
   29946:	4fa7      	ldr	r7, [pc, #668]	; (29be4 <__ssvfiscanf_r+0x2b0>)
   29948:	9300      	str	r3, [sp, #0]
   2994a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2994e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   29952:	49a5      	ldr	r1, [pc, #660]	; (29be8 <__ssvfiscanf_r+0x2b4>)
   29954:	91a0      	str	r1, [sp, #640]	; 0x280
   29956:	49a5      	ldr	r1, [pc, #660]	; (29bec <__ssvfiscanf_r+0x2b8>)
   29958:	91a1      	str	r1, [sp, #644]	; 0x284
   2995a:	7813      	ldrb	r3, [r2, #0]
   2995c:	2b00      	cmp	r3, #0
   2995e:	f000 815c 	beq.w	29c1a <__ssvfiscanf_r+0x2e6>
   29962:	5cf9      	ldrb	r1, [r7, r3]
   29964:	1c55      	adds	r5, r2, #1
   29966:	f011 0108 	ands.w	r1, r1, #8
   2996a:	d019      	beq.n	299a0 <__ssvfiscanf_r+0x6c>
   2996c:	6863      	ldr	r3, [r4, #4]
   2996e:	2b00      	cmp	r3, #0
   29970:	dd0f      	ble.n	29992 <__ssvfiscanf_r+0x5e>
   29972:	6823      	ldr	r3, [r4, #0]
   29974:	781a      	ldrb	r2, [r3, #0]
   29976:	5cba      	ldrb	r2, [r7, r2]
   29978:	0712      	lsls	r2, r2, #28
   2997a:	d401      	bmi.n	29980 <__ssvfiscanf_r+0x4c>
   2997c:	462a      	mov	r2, r5
   2997e:	e7ec      	b.n	2995a <__ssvfiscanf_r+0x26>
   29980:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29982:	3301      	adds	r3, #1
   29984:	3201      	adds	r2, #1
   29986:	6023      	str	r3, [r4, #0]
   29988:	9245      	str	r2, [sp, #276]	; 0x114
   2998a:	6862      	ldr	r2, [r4, #4]
   2998c:	3a01      	subs	r2, #1
   2998e:	6062      	str	r2, [r4, #4]
   29990:	e7ec      	b.n	2996c <__ssvfiscanf_r+0x38>
   29992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29994:	4621      	mov	r1, r4
   29996:	4630      	mov	r0, r6
   29998:	4798      	blx	r3
   2999a:	2800      	cmp	r0, #0
   2999c:	d0e9      	beq.n	29972 <__ssvfiscanf_r+0x3e>
   2999e:	e7ed      	b.n	2997c <__ssvfiscanf_r+0x48>
   299a0:	2b25      	cmp	r3, #37	; 0x25
   299a2:	d012      	beq.n	299ca <__ssvfiscanf_r+0x96>
   299a4:	4699      	mov	r9, r3
   299a6:	6863      	ldr	r3, [r4, #4]
   299a8:	2b00      	cmp	r3, #0
   299aa:	f340 8094 	ble.w	29ad6 <__ssvfiscanf_r+0x1a2>
   299ae:	6822      	ldr	r2, [r4, #0]
   299b0:	7813      	ldrb	r3, [r2, #0]
   299b2:	454b      	cmp	r3, r9
   299b4:	f040 8131 	bne.w	29c1a <__ssvfiscanf_r+0x2e6>
   299b8:	6863      	ldr	r3, [r4, #4]
   299ba:	3201      	adds	r2, #1
   299bc:	3b01      	subs	r3, #1
   299be:	6022      	str	r2, [r4, #0]
   299c0:	6063      	str	r3, [r4, #4]
   299c2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   299c4:	3301      	adds	r3, #1
   299c6:	9345      	str	r3, [sp, #276]	; 0x114
   299c8:	e7d8      	b.n	2997c <__ssvfiscanf_r+0x48>
   299ca:	9141      	str	r1, [sp, #260]	; 0x104
   299cc:	9143      	str	r1, [sp, #268]	; 0x10c
   299ce:	7853      	ldrb	r3, [r2, #1]
   299d0:	2b2a      	cmp	r3, #42	; 0x2a
   299d2:	bf04      	itt	eq
   299d4:	2310      	moveq	r3, #16
   299d6:	1c95      	addeq	r5, r2, #2
   299d8:	f04f 020a 	mov.w	r2, #10
   299dc:	bf08      	it	eq
   299de:	9341      	streq	r3, [sp, #260]	; 0x104
   299e0:	46a9      	mov	r9, r5
   299e2:	f819 1b01 	ldrb.w	r1, [r9], #1
   299e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   299ea:	2b09      	cmp	r3, #9
   299ec:	d91e      	bls.n	29a2c <__ssvfiscanf_r+0xf8>
   299ee:	f8df a200 	ldr.w	sl, [pc, #512]	; 29bf0 <__ssvfiscanf_r+0x2bc>
   299f2:	2203      	movs	r2, #3
   299f4:	4650      	mov	r0, sl
   299f6:	f008 fc6e 	bl	322d6 <memchr>
   299fa:	b138      	cbz	r0, 29a0c <__ssvfiscanf_r+0xd8>
   299fc:	eba0 000a 	sub.w	r0, r0, sl
   29a00:	2301      	movs	r3, #1
   29a02:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29a04:	464d      	mov	r5, r9
   29a06:	4083      	lsls	r3, r0
   29a08:	4313      	orrs	r3, r2
   29a0a:	9341      	str	r3, [sp, #260]	; 0x104
   29a0c:	f815 3b01 	ldrb.w	r3, [r5], #1
   29a10:	2b78      	cmp	r3, #120	; 0x78
   29a12:	d806      	bhi.n	29a22 <__ssvfiscanf_r+0xee>
   29a14:	2b57      	cmp	r3, #87	; 0x57
   29a16:	d810      	bhi.n	29a3a <__ssvfiscanf_r+0x106>
   29a18:	2b25      	cmp	r3, #37	; 0x25
   29a1a:	d0c3      	beq.n	299a4 <__ssvfiscanf_r+0x70>
   29a1c:	d856      	bhi.n	29acc <__ssvfiscanf_r+0x198>
   29a1e:	2b00      	cmp	r3, #0
   29a20:	d064      	beq.n	29aec <__ssvfiscanf_r+0x1b8>
   29a22:	2303      	movs	r3, #3
   29a24:	9347      	str	r3, [sp, #284]	; 0x11c
   29a26:	230a      	movs	r3, #10
   29a28:	9342      	str	r3, [sp, #264]	; 0x108
   29a2a:	e06a      	b.n	29b02 <__ssvfiscanf_r+0x1ce>
   29a2c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   29a2e:	464d      	mov	r5, r9
   29a30:	fb02 1103 	mla	r1, r2, r3, r1
   29a34:	3930      	subs	r1, #48	; 0x30
   29a36:	9143      	str	r1, [sp, #268]	; 0x10c
   29a38:	e7d2      	b.n	299e0 <__ssvfiscanf_r+0xac>
   29a3a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   29a3e:	2a20      	cmp	r2, #32
   29a40:	d8ef      	bhi.n	29a22 <__ssvfiscanf_r+0xee>
   29a42:	a101      	add	r1, pc, #4	; (adr r1, 29a48 <__ssvfiscanf_r+0x114>)
   29a44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   29a48:	00029b37 	.word	0x00029b37
   29a4c:	00029a23 	.word	0x00029a23
   29a50:	00029a23 	.word	0x00029a23
   29a54:	00029b59 	.word	0x00029b59
   29a58:	00029a23 	.word	0x00029a23
   29a5c:	00029a23 	.word	0x00029a23
   29a60:	00029a23 	.word	0x00029a23
   29a64:	00029a23 	.word	0x00029a23
   29a68:	00029a23 	.word	0x00029a23
   29a6c:	00029a23 	.word	0x00029a23
   29a70:	00029a23 	.word	0x00029a23
   29a74:	00029b6f 	.word	0x00029b6f
   29a78:	00029b55 	.word	0x00029b55
   29a7c:	00029ad3 	.word	0x00029ad3
   29a80:	00029ad3 	.word	0x00029ad3
   29a84:	00029ad3 	.word	0x00029ad3
   29a88:	00029a23 	.word	0x00029a23
   29a8c:	00029b49 	.word	0x00029b49
   29a90:	00029a23 	.word	0x00029a23
   29a94:	00029a23 	.word	0x00029a23
   29a98:	00029a23 	.word	0x00029a23
   29a9c:	00029a23 	.word	0x00029a23
   29aa0:	00029b7f 	.word	0x00029b7f
   29aa4:	00029b51 	.word	0x00029b51
   29aa8:	00029af3 	.word	0x00029af3
   29aac:	00029a23 	.word	0x00029a23
   29ab0:	00029a23 	.word	0x00029a23
   29ab4:	00029b7b 	.word	0x00029b7b
   29ab8:	00029a23 	.word	0x00029a23
   29abc:	00029b55 	.word	0x00029b55
   29ac0:	00029a23 	.word	0x00029a23
   29ac4:	00029a23 	.word	0x00029a23
   29ac8:	00029b37 	.word	0x00029b37
   29acc:	3b45      	subs	r3, #69	; 0x45
   29ace:	2b02      	cmp	r3, #2
   29ad0:	d8a7      	bhi.n	29a22 <__ssvfiscanf_r+0xee>
   29ad2:	2305      	movs	r3, #5
   29ad4:	e014      	b.n	29b00 <__ssvfiscanf_r+0x1cc>
   29ad6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29ad8:	4621      	mov	r1, r4
   29ada:	4630      	mov	r0, r6
   29adc:	4798      	blx	r3
   29ade:	2800      	cmp	r0, #0
   29ae0:	f43f af65 	beq.w	299ae <__ssvfiscanf_r+0x7a>
   29ae4:	9844      	ldr	r0, [sp, #272]	; 0x110
   29ae6:	2800      	cmp	r0, #0
   29ae8:	f040 808f 	bne.w	29c0a <__ssvfiscanf_r+0x2d6>
   29aec:	f04f 30ff 	mov.w	r0, #4294967295
   29af0:	e08f      	b.n	29c12 <__ssvfiscanf_r+0x2de>
   29af2:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29af4:	f443 7308 	orr.w	r3, r3, #544	; 0x220
   29af8:	9341      	str	r3, [sp, #260]	; 0x104
   29afa:	2310      	movs	r3, #16
   29afc:	9342      	str	r3, [sp, #264]	; 0x108
   29afe:	2304      	movs	r3, #4
   29b00:	9347      	str	r3, [sp, #284]	; 0x11c
   29b02:	6863      	ldr	r3, [r4, #4]
   29b04:	2b00      	cmp	r3, #0
   29b06:	dd4a      	ble.n	29b9e <__ssvfiscanf_r+0x26a>
   29b08:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29b0a:	0659      	lsls	r1, r3, #25
   29b0c:	d404      	bmi.n	29b18 <__ssvfiscanf_r+0x1e4>
   29b0e:	6823      	ldr	r3, [r4, #0]
   29b10:	781a      	ldrb	r2, [r3, #0]
   29b12:	5cba      	ldrb	r2, [r7, r2]
   29b14:	0712      	lsls	r2, r2, #28
   29b16:	d449      	bmi.n	29bac <__ssvfiscanf_r+0x278>
   29b18:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   29b1a:	2b02      	cmp	r3, #2
   29b1c:	dc58      	bgt.n	29bd0 <__ssvfiscanf_r+0x29c>
   29b1e:	466b      	mov	r3, sp
   29b20:	4622      	mov	r2, r4
   29b22:	a941      	add	r1, sp, #260	; 0x104
   29b24:	4630      	mov	r0, r6
   29b26:	f000 f87d 	bl	29c24 <_scanf_chars>
   29b2a:	2801      	cmp	r0, #1
   29b2c:	d075      	beq.n	29c1a <__ssvfiscanf_r+0x2e6>
   29b2e:	2802      	cmp	r0, #2
   29b30:	f47f af24 	bne.w	2997c <__ssvfiscanf_r+0x48>
   29b34:	e7d6      	b.n	29ae4 <__ssvfiscanf_r+0x1b0>
   29b36:	9a41      	ldr	r2, [sp, #260]	; 0x104
   29b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29b3c:	9241      	str	r2, [sp, #260]	; 0x104
   29b3e:	2210      	movs	r2, #16
   29b40:	2b6e      	cmp	r3, #110	; 0x6e
   29b42:	9242      	str	r2, [sp, #264]	; 0x108
   29b44:	d902      	bls.n	29b4c <__ssvfiscanf_r+0x218>
   29b46:	e7da      	b.n	29afe <__ssvfiscanf_r+0x1ca>
   29b48:	2300      	movs	r3, #0
   29b4a:	9342      	str	r3, [sp, #264]	; 0x108
   29b4c:	2303      	movs	r3, #3
   29b4e:	e7d7      	b.n	29b00 <__ssvfiscanf_r+0x1cc>
   29b50:	2308      	movs	r3, #8
   29b52:	e7d3      	b.n	29afc <__ssvfiscanf_r+0x1c8>
   29b54:	220a      	movs	r2, #10
   29b56:	e7f3      	b.n	29b40 <__ssvfiscanf_r+0x20c>
   29b58:	4629      	mov	r1, r5
   29b5a:	4640      	mov	r0, r8
   29b5c:	f008 fea3 	bl	328a6 <__sccl>
   29b60:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29b62:	4605      	mov	r5, r0
   29b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29b68:	9341      	str	r3, [sp, #260]	; 0x104
   29b6a:	2301      	movs	r3, #1
   29b6c:	e7c8      	b.n	29b00 <__ssvfiscanf_r+0x1cc>
   29b6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   29b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29b74:	9341      	str	r3, [sp, #260]	; 0x104
   29b76:	2300      	movs	r3, #0
   29b78:	e7c2      	b.n	29b00 <__ssvfiscanf_r+0x1cc>
   29b7a:	2302      	movs	r3, #2
   29b7c:	e7c0      	b.n	29b00 <__ssvfiscanf_r+0x1cc>
   29b7e:	9841      	ldr	r0, [sp, #260]	; 0x104
   29b80:	06c3      	lsls	r3, r0, #27
   29b82:	f53f aefb 	bmi.w	2997c <__ssvfiscanf_r+0x48>
   29b86:	9b00      	ldr	r3, [sp, #0]
   29b88:	f010 0f01 	tst.w	r0, #1
   29b8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29b8e:	f103 0104 	add.w	r1, r3, #4
   29b92:	9100      	str	r1, [sp, #0]
   29b94:	681b      	ldr	r3, [r3, #0]
   29b96:	bf14      	ite	ne
   29b98:	801a      	strhne	r2, [r3, #0]
   29b9a:	601a      	streq	r2, [r3, #0]
   29b9c:	e6ee      	b.n	2997c <__ssvfiscanf_r+0x48>
   29b9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29ba0:	4621      	mov	r1, r4
   29ba2:	4630      	mov	r0, r6
   29ba4:	4798      	blx	r3
   29ba6:	2800      	cmp	r0, #0
   29ba8:	d0ae      	beq.n	29b08 <__ssvfiscanf_r+0x1d4>
   29baa:	e79b      	b.n	29ae4 <__ssvfiscanf_r+0x1b0>
   29bac:	9a45      	ldr	r2, [sp, #276]	; 0x114
   29bae:	3201      	adds	r2, #1
   29bb0:	9245      	str	r2, [sp, #276]	; 0x114
   29bb2:	6862      	ldr	r2, [r4, #4]
   29bb4:	3a01      	subs	r2, #1
   29bb6:	2a00      	cmp	r2, #0
   29bb8:	6062      	str	r2, [r4, #4]
   29bba:	dd02      	ble.n	29bc2 <__ssvfiscanf_r+0x28e>
   29bbc:	3301      	adds	r3, #1
   29bbe:	6023      	str	r3, [r4, #0]
   29bc0:	e7a5      	b.n	29b0e <__ssvfiscanf_r+0x1da>
   29bc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   29bc4:	4621      	mov	r1, r4
   29bc6:	4630      	mov	r0, r6
   29bc8:	4798      	blx	r3
   29bca:	2800      	cmp	r0, #0
   29bcc:	d09f      	beq.n	29b0e <__ssvfiscanf_r+0x1da>
   29bce:	e789      	b.n	29ae4 <__ssvfiscanf_r+0x1b0>
   29bd0:	2b04      	cmp	r3, #4
   29bd2:	dc0f      	bgt.n	29bf4 <__ssvfiscanf_r+0x2c0>
   29bd4:	466b      	mov	r3, sp
   29bd6:	4622      	mov	r2, r4
   29bd8:	a941      	add	r1, sp, #260	; 0x104
   29bda:	4630      	mov	r0, r6
   29bdc:	f000 f87c 	bl	29cd8 <_scanf_i>
   29be0:	e7a3      	b.n	29b2a <__ssvfiscanf_r+0x1f6>
   29be2:	bf00      	nop
   29be4:	00038a4e 	.word	0x00038a4e
   29be8:	000327f7 	.word	0x000327f7
   29bec:	0003286d 	.word	0x0003286d
   29bf0:	00038e10 	.word	0x00038e10
   29bf4:	4b0a      	ldr	r3, [pc, #40]	; (29c20 <__ssvfiscanf_r+0x2ec>)
   29bf6:	2b00      	cmp	r3, #0
   29bf8:	f43f aec0 	beq.w	2997c <__ssvfiscanf_r+0x48>
   29bfc:	466b      	mov	r3, sp
   29bfe:	4622      	mov	r2, r4
   29c00:	a941      	add	r1, sp, #260	; 0x104
   29c02:	4630      	mov	r0, r6
   29c04:	f3af 8000 	nop.w
   29c08:	e78f      	b.n	29b2a <__ssvfiscanf_r+0x1f6>
   29c0a:	89a3      	ldrh	r3, [r4, #12]
   29c0c:	065b      	lsls	r3, r3, #25
   29c0e:	f53f af6d 	bmi.w	29aec <__ssvfiscanf_r+0x1b8>
   29c12:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   29c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29c1a:	9844      	ldr	r0, [sp, #272]	; 0x110
   29c1c:	e7f9      	b.n	29c12 <__ssvfiscanf_r+0x2de>
   29c1e:	bf00      	nop
   29c20:	00000000 	.word	0x00000000

00029c24 <_scanf_chars>:
   29c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29c28:	4615      	mov	r5, r2
   29c2a:	688a      	ldr	r2, [r1, #8]
   29c2c:	4680      	mov	r8, r0
   29c2e:	460c      	mov	r4, r1
   29c30:	b932      	cbnz	r2, 29c40 <_scanf_chars+0x1c>
   29c32:	698a      	ldr	r2, [r1, #24]
   29c34:	2a00      	cmp	r2, #0
   29c36:	bf14      	ite	ne
   29c38:	f04f 32ff 	movne.w	r2, #4294967295
   29c3c:	2201      	moveq	r2, #1
   29c3e:	608a      	str	r2, [r1, #8]
   29c40:	6822      	ldr	r2, [r4, #0]
   29c42:	2700      	movs	r7, #0
   29c44:	f8df 908c 	ldr.w	r9, [pc, #140]	; 29cd4 <_scanf_chars+0xb0>
   29c48:	06d1      	lsls	r1, r2, #27
   29c4a:	bf5f      	itttt	pl
   29c4c:	681a      	ldrpl	r2, [r3, #0]
   29c4e:	1d11      	addpl	r1, r2, #4
   29c50:	6019      	strpl	r1, [r3, #0]
   29c52:	6816      	ldrpl	r6, [r2, #0]
   29c54:	69a0      	ldr	r0, [r4, #24]
   29c56:	b188      	cbz	r0, 29c7c <_scanf_chars+0x58>
   29c58:	2801      	cmp	r0, #1
   29c5a:	d107      	bne.n	29c6c <_scanf_chars+0x48>
   29c5c:	682b      	ldr	r3, [r5, #0]
   29c5e:	781a      	ldrb	r2, [r3, #0]
   29c60:	6963      	ldr	r3, [r4, #20]
   29c62:	5c9b      	ldrb	r3, [r3, r2]
   29c64:	b953      	cbnz	r3, 29c7c <_scanf_chars+0x58>
   29c66:	2f00      	cmp	r7, #0
   29c68:	d031      	beq.n	29cce <_scanf_chars+0xaa>
   29c6a:	e022      	b.n	29cb2 <_scanf_chars+0x8e>
   29c6c:	2802      	cmp	r0, #2
   29c6e:	d120      	bne.n	29cb2 <_scanf_chars+0x8e>
   29c70:	682b      	ldr	r3, [r5, #0]
   29c72:	781b      	ldrb	r3, [r3, #0]
   29c74:	f819 3003 	ldrb.w	r3, [r9, r3]
   29c78:	071b      	lsls	r3, r3, #28
   29c7a:	d41a      	bmi.n	29cb2 <_scanf_chars+0x8e>
   29c7c:	6823      	ldr	r3, [r4, #0]
   29c7e:	3701      	adds	r7, #1
   29c80:	06da      	lsls	r2, r3, #27
   29c82:	bf5e      	ittt	pl
   29c84:	682b      	ldrpl	r3, [r5, #0]
   29c86:	781b      	ldrbpl	r3, [r3, #0]
   29c88:	f806 3b01 	strbpl.w	r3, [r6], #1
   29c8c:	682a      	ldr	r2, [r5, #0]
   29c8e:	686b      	ldr	r3, [r5, #4]
   29c90:	3201      	adds	r2, #1
   29c92:	3b01      	subs	r3, #1
   29c94:	602a      	str	r2, [r5, #0]
   29c96:	68a2      	ldr	r2, [r4, #8]
   29c98:	606b      	str	r3, [r5, #4]
   29c9a:	3a01      	subs	r2, #1
   29c9c:	60a2      	str	r2, [r4, #8]
   29c9e:	b142      	cbz	r2, 29cb2 <_scanf_chars+0x8e>
   29ca0:	2b00      	cmp	r3, #0
   29ca2:	dcd7      	bgt.n	29c54 <_scanf_chars+0x30>
   29ca4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   29ca8:	4629      	mov	r1, r5
   29caa:	4640      	mov	r0, r8
   29cac:	4798      	blx	r3
   29cae:	2800      	cmp	r0, #0
   29cb0:	d0d0      	beq.n	29c54 <_scanf_chars+0x30>
   29cb2:	6823      	ldr	r3, [r4, #0]
   29cb4:	f013 0310 	ands.w	r3, r3, #16
   29cb8:	d105      	bne.n	29cc6 <_scanf_chars+0xa2>
   29cba:	68e2      	ldr	r2, [r4, #12]
   29cbc:	3201      	adds	r2, #1
   29cbe:	60e2      	str	r2, [r4, #12]
   29cc0:	69a2      	ldr	r2, [r4, #24]
   29cc2:	b102      	cbz	r2, 29cc6 <_scanf_chars+0xa2>
   29cc4:	7033      	strb	r3, [r6, #0]
   29cc6:	6923      	ldr	r3, [r4, #16]
   29cc8:	2000      	movs	r0, #0
   29cca:	443b      	add	r3, r7
   29ccc:	6123      	str	r3, [r4, #16]
   29cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29cd2:	bf00      	nop
   29cd4:	00038a4e 	.word	0x00038a4e

00029cd8 <_scanf_i>:
   29cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cdc:	4698      	mov	r8, r3
   29cde:	b087      	sub	sp, #28
   29ce0:	4b78      	ldr	r3, [pc, #480]	; (29ec4 <_scanf_i+0x1ec>)
   29ce2:	460c      	mov	r4, r1
   29ce4:	4682      	mov	sl, r0
   29ce6:	4616      	mov	r6, r2
   29ce8:	4627      	mov	r7, r4
   29cea:	f04f 0b00 	mov.w	fp, #0
   29cee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29cf2:	ab03      	add	r3, sp, #12
   29cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   29cf8:	4b73      	ldr	r3, [pc, #460]	; (29ec8 <_scanf_i+0x1f0>)
   29cfa:	69a1      	ldr	r1, [r4, #24]
   29cfc:	4a73      	ldr	r2, [pc, #460]	; (29ecc <_scanf_i+0x1f4>)
   29cfe:	2903      	cmp	r1, #3
   29d00:	bf08      	it	eq
   29d02:	461a      	moveq	r2, r3
   29d04:	68a3      	ldr	r3, [r4, #8]
   29d06:	9201      	str	r2, [sp, #4]
   29d08:	1e5a      	subs	r2, r3, #1
   29d0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   29d0e:	bf89      	itett	hi
   29d10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   29d14:	f04f 0900 	movls.w	r9, #0
   29d18:	eb03 0905 	addhi.w	r9, r3, r5
   29d1c:	f240 135d 	movwhi	r3, #349	; 0x15d
   29d20:	bf88      	it	hi
   29d22:	60a3      	strhi	r3, [r4, #8]
   29d24:	f857 3b1c 	ldr.w	r3, [r7], #28
   29d28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   29d2c:	463d      	mov	r5, r7
   29d2e:	6023      	str	r3, [r4, #0]
   29d30:	6831      	ldr	r1, [r6, #0]
   29d32:	ab03      	add	r3, sp, #12
   29d34:	2202      	movs	r2, #2
   29d36:	7809      	ldrb	r1, [r1, #0]
   29d38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   29d3c:	f008 facb 	bl	322d6 <memchr>
   29d40:	2800      	cmp	r0, #0
   29d42:	d040      	beq.n	29dc6 <_scanf_i+0xee>
   29d44:	f1bb 0f01 	cmp.w	fp, #1
   29d48:	d112      	bne.n	29d70 <_scanf_i+0x98>
   29d4a:	6862      	ldr	r2, [r4, #4]
   29d4c:	b92a      	cbnz	r2, 29d5a <_scanf_i+0x82>
   29d4e:	6822      	ldr	r2, [r4, #0]
   29d50:	2108      	movs	r1, #8
   29d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   29d56:	6061      	str	r1, [r4, #4]
   29d58:	6022      	str	r2, [r4, #0]
   29d5a:	6822      	ldr	r2, [r4, #0]
   29d5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   29d60:	6022      	str	r2, [r4, #0]
   29d62:	68a2      	ldr	r2, [r4, #8]
   29d64:	1e51      	subs	r1, r2, #1
   29d66:	60a1      	str	r1, [r4, #8]
   29d68:	b9da      	cbnz	r2, 29da2 <_scanf_i+0xca>
   29d6a:	f04f 0b02 	mov.w	fp, #2
   29d6e:	e7df      	b.n	29d30 <_scanf_i+0x58>
   29d70:	f1bb 0f02 	cmp.w	fp, #2
   29d74:	d006      	beq.n	29d84 <_scanf_i+0xac>
   29d76:	68a2      	ldr	r2, [r4, #8]
   29d78:	1e51      	subs	r1, r2, #1
   29d7a:	60a1      	str	r1, [r4, #8]
   29d7c:	b98a      	cbnz	r2, 29da2 <_scanf_i+0xca>
   29d7e:	f04f 0b01 	mov.w	fp, #1
   29d82:	e7d5      	b.n	29d30 <_scanf_i+0x58>
   29d84:	6822      	ldr	r2, [r4, #0]
   29d86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   29d8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   29d8e:	d11f      	bne.n	29dd0 <_scanf_i+0xf8>
   29d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   29d94:	2110      	movs	r1, #16
   29d96:	6022      	str	r2, [r4, #0]
   29d98:	68a2      	ldr	r2, [r4, #8]
   29d9a:	6061      	str	r1, [r4, #4]
   29d9c:	1e51      	subs	r1, r2, #1
   29d9e:	60a1      	str	r1, [r4, #8]
   29da0:	b1b2      	cbz	r2, 29dd0 <_scanf_i+0xf8>
   29da2:	6832      	ldr	r2, [r6, #0]
   29da4:	1c51      	adds	r1, r2, #1
   29da6:	6031      	str	r1, [r6, #0]
   29da8:	7812      	ldrb	r2, [r2, #0]
   29daa:	f805 2b01 	strb.w	r2, [r5], #1
   29dae:	6872      	ldr	r2, [r6, #4]
   29db0:	3a01      	subs	r2, #1
   29db2:	2a00      	cmp	r2, #0
   29db4:	6072      	str	r2, [r6, #4]
   29db6:	dc06      	bgt.n	29dc6 <_scanf_i+0xee>
   29db8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   29dbc:	4631      	mov	r1, r6
   29dbe:	4650      	mov	r0, sl
   29dc0:	4790      	blx	r2
   29dc2:	2800      	cmp	r0, #0
   29dc4:	d174      	bne.n	29eb0 <_scanf_i+0x1d8>
   29dc6:	f10b 0b01 	add.w	fp, fp, #1
   29dca:	f1bb 0f03 	cmp.w	fp, #3
   29dce:	d1af      	bne.n	29d30 <_scanf_i+0x58>
   29dd0:	6863      	ldr	r3, [r4, #4]
   29dd2:	b90b      	cbnz	r3, 29dd8 <_scanf_i+0x100>
   29dd4:	230a      	movs	r3, #10
   29dd6:	6063      	str	r3, [r4, #4]
   29dd8:	6863      	ldr	r3, [r4, #4]
   29dda:	f04f 0b00 	mov.w	fp, #0
   29dde:	493c      	ldr	r1, [pc, #240]	; (29ed0 <_scanf_i+0x1f8>)
   29de0:	6960      	ldr	r0, [r4, #20]
   29de2:	1ac9      	subs	r1, r1, r3
   29de4:	f008 fd5f 	bl	328a6 <__sccl>
   29de8:	68a3      	ldr	r3, [r4, #8]
   29dea:	6822      	ldr	r2, [r4, #0]
   29dec:	b373      	cbz	r3, 29e4c <_scanf_i+0x174>
   29dee:	6831      	ldr	r1, [r6, #0]
   29df0:	6960      	ldr	r0, [r4, #20]
   29df2:	f891 c000 	ldrb.w	ip, [r1]
   29df6:	f810 000c 	ldrb.w	r0, [r0, ip]
   29dfa:	b338      	cbz	r0, 29e4c <_scanf_i+0x174>
   29dfc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   29e00:	d116      	bne.n	29e30 <_scanf_i+0x158>
   29e02:	0510      	lsls	r0, r2, #20
   29e04:	d514      	bpl.n	29e30 <_scanf_i+0x158>
   29e06:	f10b 0b01 	add.w	fp, fp, #1
   29e0a:	f1b9 0f00 	cmp.w	r9, #0
   29e0e:	d003      	beq.n	29e18 <_scanf_i+0x140>
   29e10:	3301      	adds	r3, #1
   29e12:	f109 39ff 	add.w	r9, r9, #4294967295
   29e16:	60a3      	str	r3, [r4, #8]
   29e18:	6873      	ldr	r3, [r6, #4]
   29e1a:	3b01      	subs	r3, #1
   29e1c:	2b00      	cmp	r3, #0
   29e1e:	6073      	str	r3, [r6, #4]
   29e20:	dd0d      	ble.n	29e3e <_scanf_i+0x166>
   29e22:	6833      	ldr	r3, [r6, #0]
   29e24:	3301      	adds	r3, #1
   29e26:	6033      	str	r3, [r6, #0]
   29e28:	68a3      	ldr	r3, [r4, #8]
   29e2a:	3b01      	subs	r3, #1
   29e2c:	60a3      	str	r3, [r4, #8]
   29e2e:	e7db      	b.n	29de8 <_scanf_i+0x110>
   29e30:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   29e34:	6022      	str	r2, [r4, #0]
   29e36:	780b      	ldrb	r3, [r1, #0]
   29e38:	f805 3b01 	strb.w	r3, [r5], #1
   29e3c:	e7ec      	b.n	29e18 <_scanf_i+0x140>
   29e3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   29e42:	4631      	mov	r1, r6
   29e44:	4650      	mov	r0, sl
   29e46:	4798      	blx	r3
   29e48:	2800      	cmp	r0, #0
   29e4a:	d0ed      	beq.n	29e28 <_scanf_i+0x150>
   29e4c:	6823      	ldr	r3, [r4, #0]
   29e4e:	05d9      	lsls	r1, r3, #23
   29e50:	d50d      	bpl.n	29e6e <_scanf_i+0x196>
   29e52:	42bd      	cmp	r5, r7
   29e54:	d909      	bls.n	29e6a <_scanf_i+0x192>
   29e56:	f105 39ff 	add.w	r9, r5, #4294967295
   29e5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   29e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   29e62:	4632      	mov	r2, r6
   29e64:	464d      	mov	r5, r9
   29e66:	4650      	mov	r0, sl
   29e68:	4798      	blx	r3
   29e6a:	42bd      	cmp	r5, r7
   29e6c:	d028      	beq.n	29ec0 <_scanf_i+0x1e8>
   29e6e:	6822      	ldr	r2, [r4, #0]
   29e70:	f012 0210 	ands.w	r2, r2, #16
   29e74:	d113      	bne.n	29e9e <_scanf_i+0x1c6>
   29e76:	702a      	strb	r2, [r5, #0]
   29e78:	4639      	mov	r1, r7
   29e7a:	6863      	ldr	r3, [r4, #4]
   29e7c:	4650      	mov	r0, sl
   29e7e:	9e01      	ldr	r6, [sp, #4]
   29e80:	47b0      	blx	r6
   29e82:	f8d8 3000 	ldr.w	r3, [r8]
   29e86:	6821      	ldr	r1, [r4, #0]
   29e88:	1d1a      	adds	r2, r3, #4
   29e8a:	f011 0f20 	tst.w	r1, #32
   29e8e:	f8c8 2000 	str.w	r2, [r8]
   29e92:	681b      	ldr	r3, [r3, #0]
   29e94:	d00f      	beq.n	29eb6 <_scanf_i+0x1de>
   29e96:	6018      	str	r0, [r3, #0]
   29e98:	68e3      	ldr	r3, [r4, #12]
   29e9a:	3301      	adds	r3, #1
   29e9c:	60e3      	str	r3, [r4, #12]
   29e9e:	1bed      	subs	r5, r5, r7
   29ea0:	6923      	ldr	r3, [r4, #16]
   29ea2:	2000      	movs	r0, #0
   29ea4:	445d      	add	r5, fp
   29ea6:	442b      	add	r3, r5
   29ea8:	6123      	str	r3, [r4, #16]
   29eaa:	b007      	add	sp, #28
   29eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29eb0:	f04f 0b00 	mov.w	fp, #0
   29eb4:	e7ca      	b.n	29e4c <_scanf_i+0x174>
   29eb6:	07ca      	lsls	r2, r1, #31
   29eb8:	bf4c      	ite	mi
   29eba:	8018      	strhmi	r0, [r3, #0]
   29ebc:	6018      	strpl	r0, [r3, #0]
   29ebe:	e7eb      	b.n	29e98 <_scanf_i+0x1c0>
   29ec0:	2001      	movs	r0, #1
   29ec2:	e7f2      	b.n	29eaa <_scanf_i+0x1d2>
   29ec4:	000333e4 	.word	0x000333e4
   29ec8:	00031e65 	.word	0x00031e65
   29ecc:	00031e69 	.word	0x00031e69
   29ed0:	00038e2b 	.word	0x00038e2b

00029ed4 <_read_r>:
   29ed4:	b538      	push	{r3, r4, r5, lr}
   29ed6:	4604      	mov	r4, r0
   29ed8:	4d06      	ldr	r5, [pc, #24]	; (29ef4 <_read_r+0x20>)
   29eda:	4608      	mov	r0, r1
   29edc:	4611      	mov	r1, r2
   29ede:	2200      	movs	r2, #0
   29ee0:	602a      	str	r2, [r5, #0]
   29ee2:	461a      	mov	r2, r3
   29ee4:	f001 fe46 	bl	2bb74 <_read>
   29ee8:	1c43      	adds	r3, r0, #1
   29eea:	d102      	bne.n	29ef2 <_read_r+0x1e>
   29eec:	682b      	ldr	r3, [r5, #0]
   29eee:	b103      	cbz	r3, 29ef2 <_read_r+0x1e>
   29ef0:	6023      	str	r3, [r4, #0]
   29ef2:	bd38      	pop	{r3, r4, r5, pc}
   29ef4:	20030ef4 	.word	0x20030ef4

00029ef8 <raise>:
   29ef8:	4b02      	ldr	r3, [pc, #8]	; (29f04 <raise+0xc>)
   29efa:	4601      	mov	r1, r0
   29efc:	6818      	ldr	r0, [r3, #0]
   29efe:	f008 bd0b 	b.w	32918 <_raise_r>
   29f02:	bf00      	nop
   29f04:	20008848 	.word	0x20008848

00029f08 <_kill_r>:
   29f08:	b538      	push	{r3, r4, r5, lr}
   29f0a:	2300      	movs	r3, #0
   29f0c:	4d06      	ldr	r5, [pc, #24]	; (29f28 <_kill_r+0x20>)
   29f0e:	4604      	mov	r4, r0
   29f10:	4608      	mov	r0, r1
   29f12:	4611      	mov	r1, r2
   29f14:	602b      	str	r3, [r5, #0]
   29f16:	f001 fe3f 	bl	2bb98 <_kill>
   29f1a:	1c43      	adds	r3, r0, #1
   29f1c:	d102      	bne.n	29f24 <_kill_r+0x1c>
   29f1e:	682b      	ldr	r3, [r5, #0]
   29f20:	b103      	cbz	r3, 29f24 <_kill_r+0x1c>
   29f22:	6023      	str	r3, [r4, #0]
   29f24:	bd38      	pop	{r3, r4, r5, pc}
   29f26:	bf00      	nop
   29f28:	20030ef4 	.word	0x20030ef4

00029f2c <_fstat_r>:
   29f2c:	b538      	push	{r3, r4, r5, lr}
   29f2e:	2300      	movs	r3, #0
   29f30:	4d06      	ldr	r5, [pc, #24]	; (29f4c <_fstat_r+0x20>)
   29f32:	4604      	mov	r4, r0
   29f34:	4608      	mov	r0, r1
   29f36:	4611      	mov	r1, r2
   29f38:	602b      	str	r3, [r5, #0]
   29f3a:	f001 fe31 	bl	2bba0 <_fstat>
   29f3e:	1c43      	adds	r3, r0, #1
   29f40:	d102      	bne.n	29f48 <_fstat_r+0x1c>
   29f42:	682b      	ldr	r3, [r5, #0]
   29f44:	b103      	cbz	r3, 29f48 <_fstat_r+0x1c>
   29f46:	6023      	str	r3, [r4, #0]
   29f48:	bd38      	pop	{r3, r4, r5, pc}
   29f4a:	bf00      	nop
   29f4c:	20030ef4 	.word	0x20030ef4

00029f50 <_isatty_r>:
   29f50:	b538      	push	{r3, r4, r5, lr}
   29f52:	2300      	movs	r3, #0
   29f54:	4d05      	ldr	r5, [pc, #20]	; (29f6c <_isatty_r+0x1c>)
   29f56:	4604      	mov	r4, r0
   29f58:	4608      	mov	r0, r1
   29f5a:	602b      	str	r3, [r5, #0]
   29f5c:	f001 fe17 	bl	2bb8e <_isatty>
   29f60:	1c43      	adds	r3, r0, #1
   29f62:	d102      	bne.n	29f6a <_isatty_r+0x1a>
   29f64:	682b      	ldr	r3, [r5, #0]
   29f66:	b103      	cbz	r3, 29f6a <_isatty_r+0x1a>
   29f68:	6023      	str	r3, [r4, #0]
   29f6a:	bd38      	pop	{r3, r4, r5, pc}
   29f6c:	20030ef4 	.word	0x20030ef4

00029f70 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   29f70:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   29f72:	f7fc fbed 	bl	26750 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   29f76:	f7fc ff01 	bl	26d7c <k_thread_system_pool_assign>
    return 0;
}
   29f7a:	2000      	movs	r0, #0
   29f7c:	bd08      	pop	{r3, pc}

00029f7e <gpio_pin_get_dt>:
{
   29f7e:	4603      	mov	r3, r0
   29f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return gpio_pin_get(spec->port, spec->pin);
   29f82:	6800      	ldr	r0, [r0, #0]
   29f84:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
   29f86:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
   29f88:	6883      	ldr	r3, [r0, #8]
   29f8a:	a901      	add	r1, sp, #4
   29f8c:	685b      	ldr	r3, [r3, #4]
   29f8e:	4798      	blx	r3
	if (ret == 0) {
   29f90:	b940      	cbnz	r0, 29fa4 <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
   29f92:	9b01      	ldr	r3, [sp, #4]
   29f94:	682a      	ldr	r2, [r5, #0]
   29f96:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   29f98:	2301      	movs	r3, #1
   29f9a:	40a3      	lsls	r3, r4
   29f9c:	421a      	tst	r2, r3
   29f9e:	bf14      	ite	ne
   29fa0:	2001      	movne	r0, #1
   29fa2:	2000      	moveq	r0, #0
}
   29fa4:	b003      	add	sp, #12
   29fa6:	bd30      	pop	{r4, r5, pc}

00029fa8 <k_sem_give>:
	z_impl_k_sem_give(sem);
   29fa8:	f7fb be94 	b.w	25cd4 <z_impl_k_sem_give>

00029fac <k_uptime_get>:
{
   29fac:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   29fae:	f007 fb5e 	bl	3166e <z_impl_k_uptime_ticks>
   29fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29fb6:	fba0 0302 	umull	r0, r3, r0, r2
   29fba:	fb02 3101 	mla	r1, r2, r1, r3
   29fbe:	0bc0      	lsrs	r0, r0, #15
}
   29fc0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   29fc4:	0bc9      	lsrs	r1, r1, #15
   29fc6:	bd08      	pop	{r3, pc}

00029fc8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   29fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29fca:	ab0b      	add	r3, sp, #44	; 0x2c
   29fcc:	9305      	str	r3, [sp, #20]
   29fce:	9303      	str	r3, [sp, #12]
   29fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29fd2:	9302      	str	r3, [sp, #8]
   29fd4:	2300      	movs	r3, #0
   29fd6:	4618      	mov	r0, r3
   29fd8:	e9cd 3300 	strd	r3, r3, [sp]
   29fdc:	f7e5 fb9e 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   29fe0:	b007      	add	sp, #28
   29fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00029fe6 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   29fe6:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   29fe8:	6883      	ldr	r3, [r0, #8]
   29fea:	2264      	movs	r2, #100	; 0x64
   29fec:	68dc      	ldr	r4, [r3, #12]
   29fee:	2332      	movs	r3, #50	; 0x32
   29ff0:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   29ff2:	bc10      	pop	{r4}
   29ff4:	4760      	bx	ip

00029ff6 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   29ff6:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   29ff8:	6883      	ldr	r3, [r0, #8]
   29ffa:	685c      	ldr	r4, [r3, #4]
   29ffc:	f04f 33ff 	mov.w	r3, #4294967295
   2a000:	46a4      	mov	ip, r4
}
   2a002:	bc10      	pop	{r4}
   2a004:	4760      	bx	ip

0002a006 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2a006:	f7fb be8b 	b.w	25d20 <z_impl_k_sem_take>

0002a00a <gpio_add_callback.isra.0>:
	if (api->manage_callback == NULL) {
   2a00a:	6883      	ldr	r3, [r0, #8]
   2a00c:	69db      	ldr	r3, [r3, #28]
   2a00e:	b10b      	cbz	r3, 2a014 <gpio_add_callback.isra.0+0xa>
	return api->manage_callback(port, callback, true);
   2a010:	2201      	movs	r2, #1
   2a012:	4718      	bx	r3
}
   2a014:	4770      	bx	lr

0002a016 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2a016:	4603      	mov	r3, r0
   2a018:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2a01a:	7919      	ldrb	r1, [r3, #4]
   2a01c:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   2a01e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2a020:	fa03 f101 	lsl.w	r1, r3, r1
   2a024:	6903      	ldr	r3, [r0, #16]
   2a026:	681b      	ldr	r3, [r3, #0]
   2a028:	4219      	tst	r1, r3
   2a02a:	d003      	beq.n	2a034 <gpio_pin_set_dt.isra.0+0x1e>
	if (value != 0)	{
   2a02c:	b122      	cbz	r2, 2a038 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_clear_bits_raw(port, pins);
   2a02e:	6883      	ldr	r3, [r0, #8]
   2a030:	691b      	ldr	r3, [r3, #16]
   2a032:	e003      	b.n	2a03c <gpio_pin_set_dt.isra.0+0x26>
	if (value != 0)	{
   2a034:	2a00      	cmp	r2, #0
   2a036:	d0fa      	beq.n	2a02e <gpio_pin_set_dt.isra.0+0x18>
	return api->port_set_bits_raw(port, pins);
   2a038:	6883      	ldr	r3, [r0, #8]
   2a03a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2a03c:	4718      	bx	r3

0002a03e <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
   2a03e:	4603      	mov	r3, r0
   2a040:	b470      	push	{r4, r5, r6}
   2a042:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   2a044:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   2a046:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   2a048:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   2a04a:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a04c:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
   2a04e:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a050:	408c      	lsls	r4, r1
   2a052:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2a054:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
   2a058:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a05a:	bf14      	ite	ne
   2a05c:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a05e:	43a3      	biceq	r3, r4
   2a060:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   2a062:	6833      	ldr	r3, [r6, #0]
}
   2a064:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   2a066:	4718      	bx	r3

0002a068 <gpio_pin_interrupt_configure_dt.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
   2a068:	4603      	mov	r3, r0
   2a06a:	b430      	push	{r4, r5}
   2a06c:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   2a06e:	6800      	ldr	r0, [r0, #0]
   2a070:	7919      	ldrb	r1, [r3, #4]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2a072:	2301      	movs	r3, #1
   2a074:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   2a076:	6884      	ldr	r4, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2a078:	682d      	ldr	r5, [r5, #0]
   2a07a:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2a07c:	422b      	tst	r3, r5
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a07e:	69a4      	ldr	r4, [r4, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2a080:	bf18      	it	ne
   2a082:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a086:	46a4      	mov	ip, r4
}
   2a088:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2a08a:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   2a08e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   2a092:	4760      	bx	ip

0002a094 <k_sleep.isra.0>:
	return z_impl_k_sleep(timeout);
   2a094:	f7fc bb42 	b.w	2671c <z_impl_k_sleep>

0002a098 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   2a098:	4601      	mov	r1, r0
   2a09a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a09e:	b508      	push	{r3, lr}
   2a0a0:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2a0a4:	2300      	movs	r3, #0
   2a0a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a0aa:	1449      	asrs	r1, r1, #17
   2a0ac:	f7de ff48 	bl	8f40 <__aeabi_uldivmod>
}
   2a0b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   2a0b4:	f7ff bfee 	b.w	2a094 <k_sleep.isra.0>

0002a0b8 <send_protobuf>:
{
   2a0b8:	b510      	push	{r4, lr}
   2a0ba:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
	buf_proto = send_array_dd_v0();
   2a0be:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   2a0c2:	4620      	mov	r0, r4
   2a0c4:	f7e3 f9ba 	bl	d43c <send_array_dd_v0>
	send_bluetooth(buf_proto);
   2a0c8:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   2a0cc:	f240 72cc 	movw	r2, #1996	; 0x7cc
   2a0d0:	4668      	mov	r0, sp
   2a0d2:	f007 fca6 	bl	31a22 <memcpy>
   2a0d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a0da:	f7e2 fbe3 	bl	c8a4 <send_bluetooth>
}
   2a0de:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   2a0e2:	bd10      	pop	{r4, pc}

0002a0e4 <error>:
{
   2a0e4:	b508      	push	{r3, lr}
	turn_off_all_leds();
   2a0e6:	f7e2 fd89 	bl	cbfc <turn_off_all_leds>
		k_sleep(K_MSEC(1000));
   2a0ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2a0ee:	2100      	movs	r1, #0
   2a0f0:	f7ff ffd0 	bl	2a094 <k_sleep.isra.0>
	while (true)
   2a0f4:	e7f9      	b.n	2a0ea <error+0x6>

0002a0f6 <parse_comma_delimited_str>:
{
   2a0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a0f8:	460d      	mov	r5, r1
   2a0fa:	4616      	mov	r6, r2
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   2a0fc:	2401      	movs	r4, #1
		*string = '\0';
   2a0fe:	2700      	movs	r7, #0
	fields[i++] = string;
   2a100:	6008      	str	r0, [r1, #0]
	while ((i < max_fields) && NULL != (string = strchr(string, ','))) {
   2a102:	42b4      	cmp	r4, r6
   2a104:	da03      	bge.n	2a10e <parse_comma_delimited_str+0x18>
   2a106:	212c      	movs	r1, #44	; 0x2c
   2a108:	f007 fe07 	bl	31d1a <strchr>
   2a10c:	b908      	cbnz	r0, 2a112 <parse_comma_delimited_str+0x1c>
	return --i;
   2a10e:	1e60      	subs	r0, r4, #1
}
   2a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*string = '\0';
   2a112:	f800 7b01 	strb.w	r7, [r0], #1
		fields[i++] = ++string;
   2a116:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
   2a11a:	3401      	adds	r4, #1
   2a11c:	e7f1      	b.n	2a102 <parse_comma_delimited_str+0xc>

0002a11e <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   2a11e:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   2a120:	6806      	ldr	r6, [r0, #0]
   2a122:	8902      	ldrh	r2, [r0, #8]
   2a124:	8a33      	ldrh	r3, [r6, #16]
   2a126:	429a      	cmp	r2, r3
   2a128:	d271      	bcs.n	2a20e <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   2a12a:	6831      	ldr	r1, [r6, #0]
   2a12c:	8942      	ldrh	r2, [r0, #10]
   2a12e:	0093      	lsls	r3, r2, #2
   2a130:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   2a134:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2a138:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   2a13c:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   2a13e:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   2a140:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   2a144:	d01f      	beq.n	2a186 <load_descriptor_values+0x68>
   2a146:	2902      	cmp	r1, #2
   2a148:	d02a      	beq.n	2a1a0 <load_descriptor_values+0x82>
   2a14a:	2900      	cmp	r1, #0
   2a14c:	d135      	bne.n	2a1ba <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   2a14e:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   2a152:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   2a156:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   2a15a:	0f12      	lsrs	r2, r2, #28
   2a15c:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   2a15e:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   2a160:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   2a164:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   2a166:	2a00      	cmp	r2, #0
   2a168:	d134      	bne.n	2a1d4 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   2a16a:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   2a16c:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   2a16e:	f004 040e 	and.w	r4, r4, #14
   2a172:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   2a174:	bf11      	iteee	ne
   2a176:	2300      	movne	r3, #0
   2a178:	89c2      	ldrheq	r2, [r0, #14]
   2a17a:	6873      	ldreq	r3, [r6, #4]
   2a17c:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   2a180:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   2a182:	2001      	movs	r0, #1
}
   2a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2a186:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   2a188:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2a18c:	4419      	add	r1, r3
   2a18e:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   2a190:	0f0b      	lsrs	r3, r1, #28
   2a192:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   2a196:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   2a198:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   2a19a:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   2a19e:	e7dd      	b.n	2a15c <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2a1a0:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   2a1a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2a1a6:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   2a1a8:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   2a1ac:	0a1a      	lsrs	r2, r3, #8
   2a1ae:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   2a1b2:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   2a1b4:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   2a1b6:	898a      	ldrh	r2, [r1, #12]
            break;
   2a1b8:	e7d0      	b.n	2a15c <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   2a1ba:	6832      	ldr	r2, [r6, #0]
   2a1bc:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   2a1be:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   2a1c2:	0a19      	lsrs	r1, r3, #8
   2a1c4:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   2a1c8:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   2a1cc:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   2a1ce:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   2a1d0:	b25b      	sxtb	r3, r3
            break;
   2a1d2:	e7c3      	b.n	2a15c <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   2a1d4:	443a      	add	r2, r7
   2a1d6:	6182      	str	r2, [r0, #24]
        if (size_offset)
   2a1d8:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   2a1dc:	b123      	cbz	r3, 2a1e8 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   2a1de:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   2a1e0:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   2a1e2:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   2a1e4:	d109      	bne.n	2a1fa <load_descriptor_values+0xdc>
   2a1e6:	e00f      	b.n	2a208 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   2a1e8:	f004 0530 	and.w	r5, r4, #48	; 0x30
   2a1ec:	2d20      	cmp	r5, #32
   2a1ee:	d1f7      	bne.n	2a1e0 <load_descriptor_values+0xc2>
   2a1f0:	2c3f      	cmp	r4, #63	; 0x3f
   2a1f2:	d804      	bhi.n	2a1fe <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   2a1f4:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   2a1f8:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   2a1fa:	61c2      	str	r2, [r0, #28]
   2a1fc:	e7b7      	b.n	2a16e <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   2a1fe:	2980      	cmp	r1, #128	; 0x80
   2a200:	d1fa      	bne.n	2a1f8 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   2a202:	f100 0314 	add.w	r3, r0, #20
   2a206:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   2a208:	6813      	ldr	r3, [r2, #0]
   2a20a:	61c3      	str	r3, [r0, #28]
   2a20c:	e7af      	b.n	2a16e <load_descriptor_values+0x50>
        return false;
   2a20e:	2000      	movs	r0, #0
   2a210:	e7b8      	b.n	2a184 <load_descriptor_values+0x66>

0002a212 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   2a212:	8903      	ldrh	r3, [r0, #8]
{
   2a214:	b510      	push	{r4, lr}
    iter->index++;
   2a216:	3301      	adds	r3, #1
   2a218:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   2a21a:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   2a21c:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   2a21e:	8a0a      	ldrh	r2, [r1, #16]
   2a220:	429a      	cmp	r2, r3
   2a222:	d803      	bhi.n	2a22c <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   2a224:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   2a226:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   2a22a:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2a22c:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   2a22e:	680b      	ldr	r3, [r1, #0]
   2a230:	8942      	ldrh	r2, [r0, #10]
   2a232:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   2a236:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   2a238:	f001 0103 	and.w	r1, r1, #3
   2a23c:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   2a240:	440a      	add	r2, r1
   2a242:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2a244:	8982      	ldrh	r2, [r0, #12]
   2a246:	f003 0130 	and.w	r1, r3, #48	; 0x30
   2a24a:	2900      	cmp	r1, #0
   2a24c:	bf08      	it	eq
   2a24e:	3201      	addeq	r2, #1
   2a250:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   2a252:	89c2      	ldrh	r2, [r0, #14]
   2a254:	f003 030e 	and.w	r3, r3, #14
   2a258:	2b08      	cmp	r3, #8
   2a25a:	bf08      	it	eq
   2a25c:	3201      	addeq	r2, #1
   2a25e:	81c2      	strh	r2, [r0, #14]
}
   2a260:	e7e3      	b.n	2a22a <advance_iterator+0x18>

0002a262 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   2a262:	b570      	push	{r4, r5, r6, lr}
   2a264:	4604      	mov	r4, r0
   2a266:	460e      	mov	r6, r1
   2a268:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   2a26a:	2100      	movs	r1, #0
   2a26c:	2220      	movs	r2, #32
   2a26e:	3008      	adds	r0, #8
   2a270:	f007 fc11 	bl	31a96 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2a274:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2a278:	4620      	mov	r0, r4
}
   2a27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   2a27e:	f7ff bf4e 	b.w	2a11e <load_descriptor_values>

0002a282 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   2a282:	b538      	push	{r3, r4, r5, lr}
   2a284:	460c      	mov	r4, r1
   2a286:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2a288:	680b      	ldr	r3, [r1, #0]
   2a28a:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   2a28c:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   2a28e:	681b      	ldr	r3, [r3, #0]
   2a290:	0a1b      	lsrs	r3, r3, #8
   2a292:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a296:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a298:	bf14      	ite	ne
   2a29a:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   2a29c:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   2a29e:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a2a0:	f7ff ffdf 	bl	2a262 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2a2a4:	622c      	str	r4, [r5, #32]
    return status;
}
   2a2a6:	bd38      	pop	{r3, r4, r5, pc}

0002a2a8 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2a2a8:	b510      	push	{r4, lr}
   2a2aa:	4604      	mov	r4, r0
    advance_iterator(iter);
   2a2ac:	f7ff ffb1 	bl	2a212 <advance_iterator>
    (void)load_descriptor_values(iter);
   2a2b0:	f7ff ff35 	bl	2a11e <load_descriptor_values>
    return iter->index != 0;
   2a2b4:	8920      	ldrh	r0, [r4, #8]
}
   2a2b6:	3800      	subs	r0, #0
   2a2b8:	bf18      	it	ne
   2a2ba:	2001      	movne	r0, #1
   2a2bc:	bd10      	pop	{r4, pc}

0002a2be <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   2a2be:	f7ff bfd0 	b.w	2a262 <pb_field_iter_begin>

0002a2c2 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   2a2c2:	f7ff bfde 	b.w	2a282 <pb_field_iter_begin_extension>

0002a2c6 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2a2c6:	b410      	push	{r4}
   2a2c8:	460b      	mov	r3, r1
   2a2ca:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   2a2cc:	8a52      	ldrh	r2, [r2, #18]
   2a2ce:	2a08      	cmp	r2, #8
   2a2d0:	d10e      	bne.n	2a2f0 <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   2a2d2:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2a2d4:	b162      	cbz	r2, 2a2f0 <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2a2d6:	b128      	cbz	r0, 2a2e4 <pb_default_field_callback+0x1e>
   2a2d8:	6814      	ldr	r4, [r2, #0]
   2a2da:	b11c      	cbz	r4, 2a2e4 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   2a2dc:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a2de:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   2a2e0:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a2e2:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   2a2e4:	b123      	cbz	r3, 2a2f0 <pb_default_field_callback+0x2a>
   2a2e6:	6814      	ldr	r4, [r2, #0]
   2a2e8:	b114      	cbz	r4, 2a2f0 <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a2ea:	4618      	mov	r0, r3
   2a2ec:	3204      	adds	r2, #4
   2a2ee:	e7f6      	b.n	2a2de <pb_default_field_callback+0x18>
}
   2a2f0:	2001      	movs	r0, #1
   2a2f2:	bc10      	pop	{r4}
   2a2f4:	4770      	bx	lr

0002a2f6 <buf_write>:
{
   2a2f6:	4603      	mov	r3, r0
   2a2f8:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2a2fa:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2a2fc:	1884      	adds	r4, r0, r2
   2a2fe:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a300:	f007 fb8f 	bl	31a22 <memcpy>
}
   2a304:	2001      	movs	r0, #1
   2a306:	bd10      	pop	{r4, pc}

0002a308 <pb_encode_varint>:
{
   2a308:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2a30a:	2a80      	cmp	r2, #128	; 0x80
{
   2a30c:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2a30e:	f173 0100 	sbcs.w	r1, r3, #0
{
   2a312:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2a314:	b2d4      	uxtb	r4, r2
   2a316:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2a318:	d206      	bcs.n	2a328 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2a31a:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2a31c:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2a320:	f7e3 fe3e 	bl	dfa0 <pb_write>
}
   2a324:	b005      	add	sp, #20
   2a326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2a328:	09d5      	lsrs	r5, r2, #7
   2a32a:	4608      	mov	r0, r1
    size_t i = 0;
   2a32c:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2a32e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a332:	ea53 0c05 	orrs.w	ip, r3, r5
   2a336:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2a338:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2a33c:	d108      	bne.n	2a350 <pb_encode_varint+0x48>
   2a33e:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2a340:	f102 0310 	add.w	r3, r2, #16
   2a344:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2a346:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2a348:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2a34c:	3201      	adds	r2, #1
   2a34e:	e7e7      	b.n	2a320 <pb_encode_varint+0x18>
        byte |= 0x80;
   2a350:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a354:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2a356:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2a35a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2a35e:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   2a362:	d1e6      	bne.n	2a332 <pb_encode_varint+0x2a>
    if (high)
   2a364:	2b00      	cmp	r3, #0
   2a366:	d0eb      	beq.n	2a340 <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2a368:	0118      	lsls	r0, r3, #4
   2a36a:	f000 0070 	and.w	r0, r0, #112	; 0x70
   2a36e:	4304      	orrs	r4, r0
        high >>= 3;
   2a370:	08db      	lsrs	r3, r3, #3
        while (high)
   2a372:	2b00      	cmp	r3, #0
   2a374:	d0e4      	beq.n	2a340 <pb_encode_varint+0x38>
            byte |= 0x80;
   2a376:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2a37a:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2a37c:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   2a380:	3201      	adds	r2, #1
   2a382:	09db      	lsrs	r3, r3, #7
   2a384:	e7f5      	b.n	2a372 <pb_encode_varint+0x6a>

0002a386 <pb_encode_svarint>:
    if (value < 0)
   2a386:	1892      	adds	r2, r2, r2
   2a388:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2a38c:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2a390:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2a394:	f7ff bfb8 	b.w	2a308 <pb_encode_varint>

0002a398 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2a398:	2204      	movs	r2, #4
   2a39a:	f7e3 be01 	b.w	dfa0 <pb_write>

0002a39e <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   2a39e:	2208      	movs	r2, #8
   2a3a0:	f7e3 bdfe 	b.w	dfa0 <pb_write>

0002a3a4 <pb_encode_tag>:
{
   2a3a4:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2a3a6:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   2a3aa:	0f5b      	lsrs	r3, r3, #29
   2a3ac:	f7ff bfac 	b.w	2a308 <pb_encode_varint>

0002a3b0 <pb_encode_string>:
{
   2a3b0:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a3b2:	2300      	movs	r3, #0
{
   2a3b4:	4604      	mov	r4, r0
   2a3b6:	460d      	mov	r5, r1
   2a3b8:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a3ba:	f7ff ffa5 	bl	2a308 <pb_encode_varint>
   2a3be:	b130      	cbz	r0, 2a3ce <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   2a3c0:	4632      	mov	r2, r6
   2a3c2:	4629      	mov	r1, r5
   2a3c4:	4620      	mov	r0, r4
}
   2a3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   2a3ca:	f7e3 bde9 	b.w	dfa0 <pb_write>
}
   2a3ce:	bd70      	pop	{r4, r5, r6, pc}

0002a3d0 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   2a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a3d4:	4606      	mov	r6, r0
   2a3d6:	460d      	mov	r5, r1
   2a3d8:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   2a3da:	4698      	mov	r8, r3
   2a3dc:	b32b      	cbz	r3, 2a42a <cbpprintf_external+0x5a>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   2a3de:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a3e2:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a3e6:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a3ea:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a3ec:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a3ee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a3f2:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a3f6:	441c      	add	r4, r3
   2a3f8:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a3fa:	45ca      	cmp	sl, r9
   2a3fc:	d309      	bcc.n	2a412 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a3fe:	4639      	mov	r1, r7
   2a400:	4630      	mov	r0, r6
   2a402:	46ac      	mov	ip, r5
   2a404:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a408:	f108 0308 	add.w	r3, r8, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   2a40c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a410:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a412:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a416:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a41a:	4620      	mov	r0, r4
		*ps = s;
   2a41c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a420:	f7de fff3 	bl	940a <strlen>
   2a424:	3001      	adds	r0, #1
   2a426:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a428:	e7e7      	b.n	2a3fa <cbpprintf_external+0x2a>
}
   2a42a:	f06f 0015 	mvn.w	r0, #21
   2a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a432 <arch_printk_char_out>:
}
   2a432:	2000      	movs	r0, #0
   2a434:	4770      	bx	lr

0002a436 <str_out>:
{
   2a436:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a438:	688a      	ldr	r2, [r1, #8]
   2a43a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a43c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a43e:	b114      	cbz	r4, 2a446 <str_out+0x10>
   2a440:	684b      	ldr	r3, [r1, #4]
   2a442:	4293      	cmp	r3, r2
   2a444:	dc01      	bgt.n	2a44a <str_out+0x14>
		ctx->count++;
   2a446:	608d      	str	r5, [r1, #8]
}
   2a448:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a44a:	3b01      	subs	r3, #1
   2a44c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a44e:	bf08      	it	eq
   2a450:	2200      	moveq	r2, #0
   2a452:	608d      	str	r5, [r1, #8]
   2a454:	bf0c      	ite	eq
   2a456:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a458:	54a0      	strbne	r0, [r4, r2]
   2a45a:	e7f5      	b.n	2a448 <str_out+0x12>

0002a45c <printk>:
{
   2a45c:	b40f      	push	{r0, r1, r2, r3}
   2a45e:	b507      	push	{r0, r1, r2, lr}
   2a460:	a904      	add	r1, sp, #16
   2a462:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a466:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a468:	f7e4 fa28 	bl	e8bc <vprintk>
}
   2a46c:	b003      	add	sp, #12
   2a46e:	f85d eb04 	ldr.w	lr, [sp], #4
   2a472:	b004      	add	sp, #16
   2a474:	4770      	bx	lr

0002a476 <snprintk>:
{
   2a476:	b40c      	push	{r2, r3}
   2a478:	b507      	push	{r0, r1, r2, lr}
   2a47a:	ab04      	add	r3, sp, #16
   2a47c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a480:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a482:	f7e4 fa29 	bl	e8d8 <vsnprintk>
}
   2a486:	b003      	add	sp, #12
   2a488:	f85d eb04 	ldr.w	lr, [sp], #4
   2a48c:	b002      	add	sp, #8
   2a48e:	4770      	bx	lr

0002a490 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a490:	4604      	mov	r4, r0
   2a492:	b508      	push	{r3, lr}
   2a494:	4608      	mov	r0, r1
   2a496:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a498:	461a      	mov	r2, r3
   2a49a:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a49c:	f7fc f958 	bl	26750 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a4a0:	f7e7 fc02 	bl	11ca8 <z_impl_k_thread_abort>

0002a4a4 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2a4a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a4a8:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2a4aa:	0840      	lsrs	r0, r0, #1
   2a4ac:	4770      	bx	lr

0002a4ae <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2a4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a4b0:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a4b2:	f7ff fff7 	bl	2a4a4 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2a4b6:	fab0 f080 	clz	r0, r0
   2a4ba:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a4be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a4c2:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2a4c6:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a4c8:	1d17      	adds	r7, r2, #4
{
   2a4ca:	460c      	mov	r4, r1
   2a4cc:	3206      	adds	r2, #6
   2a4ce:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a4d0:	b956      	cbnz	r6, 2a4e8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a4d2:	2101      	movs	r1, #1
   2a4d4:	fa01 f000 	lsl.w	r0, r1, r0
   2a4d8:	68d9      	ldr	r1, [r3, #12]
   2a4da:	4301      	orrs	r1, r0
   2a4dc:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a4de:	f8cc 4010 	str.w	r4, [ip, #16]
   2a4e2:	53dd      	strh	r5, [r3, r7]
   2a4e4:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2a4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a4e8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a4ea:	3104      	adds	r1, #4
   2a4ec:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a4ee:	53d8      	strh	r0, [r3, r7]
   2a4f0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a4f4:	529e      	strh	r6, [r3, r2]
   2a4f6:	80c5      	strh	r5, [r0, #6]
   2a4f8:	525d      	strh	r5, [r3, r1]
   2a4fa:	e7f4      	b.n	2a4e6 <free_list_add+0x38>

0002a4fc <free_list_remove_bidx>:
{
   2a4fc:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a4fe:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a502:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a504:	4299      	cmp	r1, r3
   2a506:	f102 0104 	add.w	r1, r2, #4
   2a50a:	d10a      	bne.n	2a522 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a50c:	2301      	movs	r3, #1
   2a50e:	fa03 f202 	lsl.w	r2, r3, r2
   2a512:	68c3      	ldr	r3, [r0, #12]
   2a514:	ea23 0302 	bic.w	r3, r3, r2
   2a518:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a51a:	2300      	movs	r3, #0
   2a51c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a520:	bd10      	pop	{r4, pc}
   2a522:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a524:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a528:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a52c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a530:	80cb      	strh	r3, [r1, #6]
   2a532:	8082      	strh	r2, [r0, #4]
}
   2a534:	e7f4      	b.n	2a520 <free_list_remove_bidx+0x24>

0002a536 <free_list_remove>:
{
   2a536:	b508      	push	{r3, lr}
   2a538:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a53a:	f7ff ffb3 	bl	2a4a4 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a53e:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a542:	4618      	mov	r0, r3
}
   2a544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a548:	f1c2 021f 	rsb	r2, r2, #31
   2a54c:	f7ff bfd6 	b.w	2a4fc <free_list_remove_bidx>

0002a550 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a554:	fab1 f581 	clz	r5, r1
   2a558:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2a55c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2a560:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a564:	4603      	mov	r3, r0
   2a566:	460e      	mov	r6, r1
	if (b->next) {
   2a568:	b1c2      	cbz	r2, 2a59c <alloc_chunk+0x4c>
   2a56a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2a56c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a570:	4618      	mov	r0, r3
   2a572:	4621      	mov	r1, r4
   2a574:	f7ff ff96 	bl	2a4a4 <chunk_size>
   2a578:	42b0      	cmp	r0, r6
   2a57a:	d306      	bcc.n	2a58a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a57c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2a57e:	4618      	mov	r0, r3
   2a580:	f7ff ffbc 	bl	2a4fc <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2a584:	4620      	mov	r0, r4
   2a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a58a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2a58e:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2a590:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2a592:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a596:	d001      	beq.n	2a59c <alloc_chunk+0x4c>
   2a598:	4282      	cmp	r2, r0
   2a59a:	d1e7      	bne.n	2a56c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a59c:	f04f 34ff 	mov.w	r4, #4294967295
   2a5a0:	f1c5 0220 	rsb	r2, r5, #32
   2a5a4:	4094      	lsls	r4, r2
   2a5a6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a5a8:	4014      	ands	r4, r2
   2a5aa:	d0eb      	beq.n	2a584 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a5ac:	fa94 f2a4 	rbit	r2, r4
   2a5b0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a5b4:	1d11      	adds	r1, r2, #4
   2a5b6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a5ba:	4621      	mov	r1, r4
   2a5bc:	e7df      	b.n	2a57e <alloc_chunk+0x2e>

0002a5be <merge_chunks>:
{
   2a5be:	b538      	push	{r3, r4, r5, lr}
   2a5c0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a5c2:	f7ff ff6f 	bl	2a4a4 <chunk_size>
{
   2a5c6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a5c8:	4604      	mov	r4, r0
   2a5ca:	4611      	mov	r1, r2
   2a5cc:	4618      	mov	r0, r3
   2a5ce:	f7ff ff69 	bl	2a4a4 <chunk_size>
   2a5d2:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a5d4:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a5d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a5da:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a5dc:	4618      	mov	r0, r3
   2a5de:	f7ff ff61 	bl	2a4a4 <chunk_size>
	void *cmem = &buf[c];
   2a5e2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a5e4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a5e8:	bd38      	pop	{r3, r4, r5, pc}

0002a5ea <split_chunks>:
{
   2a5ea:	b538      	push	{r3, r4, r5, lr}
   2a5ec:	460c      	mov	r4, r1
   2a5ee:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a5f0:	f7ff ff58 	bl	2a4a4 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2a5f4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a5f6:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a5f8:	4405      	add	r5, r0
   2a5fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a5fe:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a600:	8060      	strh	r0, [r4, #2]
   2a602:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a606:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a608:	8044      	strh	r4, [r0, #2]
   2a60a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a60e:	4618      	mov	r0, r3
   2a610:	4611      	mov	r1, r2
   2a612:	f7ff ff47 	bl	2a4a4 <chunk_size>
	void *cmem = &buf[c];
   2a616:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a618:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a61c:	bd38      	pop	{r3, r4, r5, pc}

0002a61e <free_chunk>:
{
   2a61e:	b538      	push	{r3, r4, r5, lr}
   2a620:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a622:	f7ff ff3f 	bl	2a4a4 <chunk_size>
   2a626:	460c      	mov	r4, r1
   2a628:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a62a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a62e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a630:	07da      	lsls	r2, r3, #31
   2a632:	d40a      	bmi.n	2a64a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a634:	4628      	mov	r0, r5
   2a636:	f7ff ff7e 	bl	2a536 <free_list_remove>
	return c + chunk_size(h, c);
   2a63a:	4621      	mov	r1, r4
   2a63c:	4628      	mov	r0, r5
   2a63e:	f7ff ff31 	bl	2a4a4 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a642:	1822      	adds	r2, r4, r0
   2a644:	4628      	mov	r0, r5
   2a646:	f7ff ffba 	bl	2a5be <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a64a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a64e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a650:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a654:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a656:	07db      	lsls	r3, r3, #31
   2a658:	d40c      	bmi.n	2a674 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a65a:	4628      	mov	r0, r5
   2a65c:	f7ff ff6b 	bl	2a536 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a660:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a664:	4622      	mov	r2, r4
   2a666:	1a61      	subs	r1, r4, r1
   2a668:	4628      	mov	r0, r5
   2a66a:	f7ff ffa8 	bl	2a5be <merge_chunks>
   2a66e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a672:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a674:	4621      	mov	r1, r4
   2a676:	4628      	mov	r0, r5
}
   2a678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a67c:	f7ff bf17 	b.w	2a4ae <free_list_add>

0002a680 <sys_heap_free>:
	if (mem == NULL) {
   2a680:	b161      	cbz	r1, 2a69c <sys_heap_free+0x1c>
   2a682:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a684:	3904      	subs	r1, #4
   2a686:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2a688:	f021 0307 	bic.w	r3, r1, #7
   2a68c:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2a68e:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   2a690:	08c9      	lsrs	r1, r1, #3
   2a692:	f022 0201 	bic.w	r2, r2, #1
   2a696:	805a      	strh	r2, [r3, #2]
   2a698:	f7ff bfc1 	b.w	2a61e <free_chunk>
}
   2a69c:	4770      	bx	lr

0002a69e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2a69e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a6a0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2a6a2:	b909      	cbnz	r1, 2a6a8 <sys_heap_alloc+0xa>
		return NULL;
   2a6a4:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a6a6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a6a8:	68ab      	ldr	r3, [r5, #8]
   2a6aa:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a6ae:	d9f9      	bls.n	2a6a4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a6b0:	310b      	adds	r1, #11
   2a6b2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a6b4:	4621      	mov	r1, r4
   2a6b6:	4628      	mov	r0, r5
   2a6b8:	f7ff ff4a 	bl	2a550 <alloc_chunk>
	if (c == 0U) {
   2a6bc:	4606      	mov	r6, r0
   2a6be:	2800      	cmp	r0, #0
   2a6c0:	d0f0      	beq.n	2a6a4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a6c2:	4601      	mov	r1, r0
   2a6c4:	4628      	mov	r0, r5
   2a6c6:	f7ff feed 	bl	2a4a4 <chunk_size>
   2a6ca:	42a0      	cmp	r0, r4
   2a6cc:	d907      	bls.n	2a6de <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a6ce:	4628      	mov	r0, r5
   2a6d0:	1932      	adds	r2, r6, r4
   2a6d2:	f7ff ff8a 	bl	2a5ea <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a6d6:	4611      	mov	r1, r2
   2a6d8:	4628      	mov	r0, r5
   2a6da:	f7ff fee8 	bl	2a4ae <free_list_add>
	void *cmem = &buf[c];
   2a6de:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a6e2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a6e4:	8853      	ldrh	r3, [r2, #2]
   2a6e6:	3004      	adds	r0, #4
   2a6e8:	f043 0301 	orr.w	r3, r3, #1
   2a6ec:	8053      	strh	r3, [r2, #2]
	return mem;
   2a6ee:	e7da      	b.n	2a6a6 <sys_heap_alloc+0x8>

0002a6f0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a6f4:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   2a6f8:	ea19 0901 	ands.w	r9, r9, r1
{
   2a6fc:	460f      	mov	r7, r1
   2a6fe:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   2a700:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   2a702:	d00c      	beq.n	2a71e <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   2a704:	424b      	negs	r3, r1
   2a706:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   2a708:	2b04      	cmp	r3, #4
   2a70a:	461a      	mov	r2, r3
   2a70c:	464f      	mov	r7, r9
   2a70e:	bf28      	it	cs
   2a710:	2204      	movcs	r2, #4
	rew = align & -align;
   2a712:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2a714:	b964      	cbnz	r4, 2a730 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2a716:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2a718:	4628      	mov	r0, r5
   2a71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2a71e:	2904      	cmp	r1, #4
   2a720:	d804      	bhi.n	2a72c <sys_heap_aligned_alloc+0x3c>
}
   2a722:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2a726:	4611      	mov	r1, r2
   2a728:	f7ff bfb9 	b.w	2a69e <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   2a72c:	2204      	movs	r2, #4
   2a72e:	e7f1      	b.n	2a714 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2a730:	68b3      	ldr	r3, [r6, #8]
   2a732:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2a736:	d9ee      	bls.n	2a716 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a738:	f104 010b 	add.w	r1, r4, #11
   2a73c:	4439      	add	r1, r7
   2a73e:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2a740:	4630      	mov	r0, r6
   2a742:	08c9      	lsrs	r1, r1, #3
   2a744:	f7ff ff04 	bl	2a550 <alloc_chunk>
	if (c0 == 0) {
   2a748:	4680      	mov	r8, r0
   2a74a:	2800      	cmp	r0, #0
   2a74c:	d0e3      	beq.n	2a716 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2a74e:	f109 0504 	add.w	r5, r9, #4
   2a752:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2a756:	1e7b      	subs	r3, r7, #1
   2a758:	4435      	add	r5, r6
   2a75a:	441d      	add	r5, r3
   2a75c:	427f      	negs	r7, r7
   2a75e:	403d      	ands	r5, r7
   2a760:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a764:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a766:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a768:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a76a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2a76c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2a770:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2a772:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2a776:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2a77a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2a77e:	d208      	bcs.n	2a792 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   2a780:	4601      	mov	r1, r0
   2a782:	463a      	mov	r2, r7
   2a784:	4630      	mov	r0, r6
   2a786:	f7ff ff30 	bl	2a5ea <split_chunks>
		free_list_add(h, c0);
   2a78a:	4641      	mov	r1, r8
   2a78c:	4630      	mov	r0, r6
   2a78e:	f7ff fe8e 	bl	2a4ae <free_list_add>
	return c + chunk_size(h, c);
   2a792:	4639      	mov	r1, r7
   2a794:	4630      	mov	r0, r6
   2a796:	f7ff fe85 	bl	2a4a4 <chunk_size>
   2a79a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2a79c:	4284      	cmp	r4, r0
   2a79e:	d207      	bcs.n	2a7b0 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   2a7a0:	4630      	mov	r0, r6
   2a7a2:	4622      	mov	r2, r4
   2a7a4:	f7ff ff21 	bl	2a5ea <split_chunks>
		free_list_add(h, c_end);
   2a7a8:	4621      	mov	r1, r4
   2a7aa:	4630      	mov	r0, r6
   2a7ac:	f7ff fe7f 	bl	2a4ae <free_list_add>
	void *cmem = &buf[c];
   2a7b0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a7b4:	8873      	ldrh	r3, [r6, #2]
   2a7b6:	f043 0301 	orr.w	r3, r3, #1
   2a7ba:	8073      	strh	r3, [r6, #2]
   2a7bc:	e7ac      	b.n	2a718 <sys_heap_aligned_alloc+0x28>

0002a7be <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2a7be:	b4f0      	push	{r4, r5, r6, r7}
   2a7c0:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2a7c2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a7c4:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a7c6:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2a7c8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2a7cc:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2a7d0:	1a0e      	subs	r6, r1, r0
   2a7d2:	08f3      	lsrs	r3, r6, #3
	return 31 - __builtin_clz(usable_sz);
   2a7d4:	fab3 f283 	clz	r2, r3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2a7d8:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2a7da:	2700      	movs	r7, #0
   2a7dc:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2a7de:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
   2a7e2:	00ad      	lsls	r5, r5, #2
	h->end_chunk = heap_sz;
   2a7e4:	6083      	str	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a7e6:	3507      	adds	r5, #7
	h->avail_buckets = 0;
   2a7e8:	f844 7f0c 	str.w	r7, [r4, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2a7ec:	f1c2 0220 	rsb	r2, r2, #32
   2a7f0:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2a7f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   2a7f6:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   2a7fa:	4294      	cmp	r4, r2
   2a7fc:	d1fb      	bne.n	2a7f6 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a7fe:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a800:	f042 0201 	orr.w	r2, r2, #1
   2a804:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2a806:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a808:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2a80a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a80e:	8007      	strh	r7, [r0, #0]
   2a810:	8065      	strh	r5, [r4, #2]
   2a812:	1984      	adds	r4, r0, r6
   2a814:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   2a818:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   2a81c:	8067      	strh	r7, [r4, #2]
   2a81e:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a820:	885a      	ldrh	r2, [r3, #2]
   2a822:	f042 0201 	orr.w	r2, r2, #1
   2a826:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2a828:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2a82a:	f7ff be40 	b.w	2a4ae <free_list_add>

0002a82e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a82e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2a830:	f013 0307 	ands.w	r3, r3, #7
   2a834:	d105      	bne.n	2a842 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a836:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a838:	2b00      	cmp	r3, #0
   2a83a:	bf0c      	ite	eq
   2a83c:	2000      	moveq	r0, #0
   2a83e:	2003      	movne	r0, #3
   2a840:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a842:	2b02      	cmp	r3, #2
   2a844:	d105      	bne.n	2a852 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a846:	8b40      	ldrh	r0, [r0, #26]
   2a848:	fab0 f080 	clz	r0, r0
   2a84c:	0940      	lsrs	r0, r0, #5
   2a84e:	0080      	lsls	r0, r0, #2
   2a850:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a852:	2b01      	cmp	r3, #1
   2a854:	d105      	bne.n	2a862 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a856:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a858:	2b00      	cmp	r3, #0
   2a85a:	bf0c      	ite	eq
   2a85c:	2000      	moveq	r0, #0
   2a85e:	2005      	movne	r0, #5
   2a860:	4770      	bx	lr
	int evt = EVT_NOP;
   2a862:	2000      	movs	r0, #0
}
   2a864:	4770      	bx	lr

0002a866 <validate_args>:
{
   2a866:	b510      	push	{r4, lr}
   2a868:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a86a:	b100      	cbz	r0, 2a86e <validate_args+0x8>
   2a86c:	b911      	cbnz	r1, 2a874 <validate_args+0xe>
		return -EINVAL;
   2a86e:	f06f 0015 	mvn.w	r0, #21
}
   2a872:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a874:	1d08      	adds	r0, r1, #4
   2a876:	f000 f895 	bl	2a9a4 <sys_notify_validate>
	if ((rv == 0)
   2a87a:	2800      	cmp	r0, #0
   2a87c:	d1f9      	bne.n	2a872 <validate_args+0xc>
	    && ((cli->notify.flags
   2a87e:	68a3      	ldr	r3, [r4, #8]
   2a880:	2b03      	cmp	r3, #3
   2a882:	d9f6      	bls.n	2a872 <validate_args+0xc>
   2a884:	e7f3      	b.n	2a86e <validate_args+0x8>

0002a886 <notify_one>:
{
   2a886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a88a:	460d      	mov	r5, r1
   2a88c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a88e:	4619      	mov	r1, r3
   2a890:	1d28      	adds	r0, r5, #4
{
   2a892:	4690      	mov	r8, r2
   2a894:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a896:	f000 f899 	bl	2a9cc <sys_notify_finalize>
	if (cb) {
   2a89a:	4604      	mov	r4, r0
   2a89c:	b138      	cbz	r0, 2a8ae <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a89e:	4633      	mov	r3, r6
   2a8a0:	4642      	mov	r2, r8
   2a8a2:	4629      	mov	r1, r5
   2a8a4:	4638      	mov	r0, r7
   2a8a6:	46a4      	mov	ip, r4
}
   2a8a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a8ac:	4760      	bx	ip
}
   2a8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a8b2 <transition_complete>:
{
   2a8b2:	b410      	push	{r4}
	__asm__ volatile(
   2a8b4:	f04f 0420 	mov.w	r4, #32
   2a8b8:	f3ef 8211 	mrs	r2, BASEPRI
   2a8bc:	f384 8812 	msr	BASEPRI_MAX, r4
   2a8c0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2a8c4:	6141      	str	r1, [r0, #20]
}
   2a8c6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   2a8c8:	2101      	movs	r1, #1
   2a8ca:	f7e4 b81b 	b.w	e904 <process_event>

0002a8ce <onoff_manager_init>:
{
   2a8ce:	b538      	push	{r3, r4, r5, lr}
   2a8d0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a8d2:	4605      	mov	r5, r0
   2a8d4:	b158      	cbz	r0, 2a8ee <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a8d6:	b151      	cbz	r1, 2a8ee <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a8d8:	680b      	ldr	r3, [r1, #0]
   2a8da:	b143      	cbz	r3, 2a8ee <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a8dc:	684b      	ldr	r3, [r1, #4]
   2a8de:	b133      	cbz	r3, 2a8ee <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a8e0:	221c      	movs	r2, #28
   2a8e2:	2100      	movs	r1, #0
   2a8e4:	f007 f8d7 	bl	31a96 <memset>
	return 0;
   2a8e8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a8ea:	612c      	str	r4, [r5, #16]
}
   2a8ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a8ee:	f06f 0015 	mvn.w	r0, #21
   2a8f2:	e7fb      	b.n	2a8ec <onoff_manager_init+0x1e>

0002a8f4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2a8f4:	b570      	push	{r4, r5, r6, lr}
   2a8f6:	4605      	mov	r5, r0
   2a8f8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2a8fa:	f7ff ffb4 	bl	2a866 <validate_args>

	if (rv < 0) {
   2a8fe:	1e04      	subs	r4, r0, #0
   2a900:	db15      	blt.n	2a92e <onoff_request+0x3a>
   2a902:	f04f 0320 	mov.w	r3, #32
   2a906:	f3ef 8211 	mrs	r2, BASEPRI
   2a90a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a90e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2a912:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2a916:	8b6b      	ldrh	r3, [r5, #26]
   2a918:	8b2c      	ldrh	r4, [r5, #24]
   2a91a:	428b      	cmp	r3, r1
   2a91c:	f004 0407 	and.w	r4, r4, #7
   2a920:	d107      	bne.n	2a932 <onoff_request+0x3e>
	__asm__ volatile(
   2a922:	f382 8811 	msr	BASEPRI, r2
   2a926:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   2a92a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2a92e:	4620      	mov	r0, r4
   2a930:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2a932:	2c02      	cmp	r4, #2
   2a934:	d10c      	bne.n	2a950 <onoff_request+0x5c>
		mgr->refs += 1U;
   2a936:	3301      	adds	r3, #1
   2a938:	836b      	strh	r3, [r5, #26]
   2a93a:	f382 8811 	msr	BASEPRI, r2
   2a93e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2a942:	2300      	movs	r3, #0
   2a944:	4622      	mov	r2, r4
   2a946:	4631      	mov	r1, r6
   2a948:	4628      	mov	r0, r5
   2a94a:	f7ff ff9c 	bl	2a886 <notify_one>
   2a94e:	e7ee      	b.n	2a92e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2a950:	2c06      	cmp	r4, #6
   2a952:	d814      	bhi.n	2a97e <onoff_request+0x8a>
   2a954:	e8df f004 	tbb	[pc, r4]
   2a958:	13131304 	.word	0x13131304
   2a95c:	1a04      	.short	0x1a04
   2a95e:	04          	.byte	0x04
   2a95f:	00          	.byte	0x00
	parent->next = child;
   2a960:	2300      	movs	r3, #0
   2a962:	6033      	str	r3, [r6, #0]
	return list->tail;
   2a964:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2a966:	b93b      	cbnz	r3, 2a978 <onoff_request+0x84>
	list->head = node;
   2a968:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   2a96c:	b9ac      	cbnz	r4, 2a99a <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2a96e:	2102      	movs	r1, #2
   2a970:	4628      	mov	r0, r5
   2a972:	f7e3 ffc7 	bl	e904 <process_event>
   2a976:	e7da      	b.n	2a92e <onoff_request+0x3a>
	parent->next = child;
   2a978:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2a97a:	606e      	str	r6, [r5, #4]
}
   2a97c:	e7f6      	b.n	2a96c <onoff_request+0x78>
   2a97e:	f382 8811 	msr	BASEPRI, r2
   2a982:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2a986:	f06f 0404 	mvn.w	r4, #4
   2a98a:	e7d0      	b.n	2a92e <onoff_request+0x3a>
   2a98c:	f382 8811 	msr	BASEPRI, r2
   2a990:	f3bf 8f6f 	isb	sy
   2a994:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a998:	e7c9      	b.n	2a92e <onoff_request+0x3a>
   2a99a:	f382 8811 	msr	BASEPRI, r2
   2a99e:	f3bf 8f6f 	isb	sy
		if (notify) {
   2a9a2:	e7c4      	b.n	2a92e <onoff_request+0x3a>

0002a9a4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2a9a4:	4603      	mov	r3, r0
   2a9a6:	b140      	cbz	r0, 2a9ba <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a9a8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a9aa:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2a9ae:	2a02      	cmp	r2, #2
   2a9b0:	d006      	beq.n	2a9c0 <sys_notify_validate+0x1c>
   2a9b2:	2a03      	cmp	r2, #3
   2a9b4:	d004      	beq.n	2a9c0 <sys_notify_validate+0x1c>
   2a9b6:	2a01      	cmp	r2, #1
   2a9b8:	d005      	beq.n	2a9c6 <sys_notify_validate+0x22>
   2a9ba:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2a9be:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a9c0:	681a      	ldr	r2, [r3, #0]
   2a9c2:	2a00      	cmp	r2, #0
   2a9c4:	d0f9      	beq.n	2a9ba <sys_notify_validate+0x16>
		notify->result = 0;
   2a9c6:	2000      	movs	r0, #0
   2a9c8:	6098      	str	r0, [r3, #8]
   2a9ca:	4770      	bx	lr

0002a9cc <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2a9cc:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a9ce:	6842      	ldr	r2, [r0, #4]
   2a9d0:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
   2a9d2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2a9d6:	2a02      	cmp	r2, #2
   2a9d8:	f04f 0400 	mov.w	r4, #0
	notify->result = res;
   2a9dc:	6081      	str	r1, [r0, #8]
	switch (method) {
   2a9de:	d007      	beq.n	2a9f0 <sys_notify_finalize+0x24>
   2a9e0:	2a03      	cmp	r2, #3
   2a9e2:	d002      	beq.n	2a9ea <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a9e4:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   2a9e6:	2000      	movs	r0, #0
   2a9e8:	e001      	b.n	2a9ee <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   2a9ea:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a9ec:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2a9ee:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2a9f0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2a9f2:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2a9f4:	2800      	cmp	r0, #0
   2a9f6:	d0f6      	beq.n	2a9e6 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   2a9f8:	f7fc f990 	bl	26d1c <z_impl_k_poll_signal_raise>
   2a9fc:	e7f3      	b.n	2a9e6 <sys_notify_finalize+0x1a>

0002a9fe <outs>:
{
   2a9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa02:	4607      	mov	r7, r0
   2aa04:	4688      	mov	r8, r1
   2aa06:	4615      	mov	r5, r2
   2aa08:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2aa0a:	4614      	mov	r4, r2
   2aa0c:	42b4      	cmp	r4, r6
   2aa0e:	d305      	bcc.n	2aa1c <outs+0x1e>
   2aa10:	b10e      	cbz	r6, 2aa16 <outs+0x18>
	return (int)count;
   2aa12:	1b60      	subs	r0, r4, r5
   2aa14:	e008      	b.n	2aa28 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2aa16:	7823      	ldrb	r3, [r4, #0]
   2aa18:	2b00      	cmp	r3, #0
   2aa1a:	d0fa      	beq.n	2aa12 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2aa1c:	4641      	mov	r1, r8
   2aa1e:	f814 0b01 	ldrb.w	r0, [r4], #1
   2aa22:	47b8      	blx	r7
		if (rc < 0) {
   2aa24:	2800      	cmp	r0, #0
   2aa26:	daf1      	bge.n	2aa0c <outs+0xe>
}
   2aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aa2c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   2aa2c:	b40f      	push	{r0, r1, r2, r3}
   2aa2e:	b507      	push	{r0, r1, r2, lr}
   2aa30:	a904      	add	r1, sp, #16
   2aa32:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2aa36:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2aa38:	f7e3 ff40 	bl	e8bc <vprintk>

	va_end(ap);
}
   2aa3c:	b003      	add	sp, #12
   2aa3e:	f85d eb04 	ldr.w	lr, [sp], #4
   2aa42:	b004      	add	sp, #16
   2aa44:	4770      	bx	lr

0002aa46 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 100);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2aa46:	4770      	bx	lr

0002aa48 <nordicsemi_nrf53_init>:
{
   2aa48:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2aa4a:	f04f 0320 	mov.w	r3, #32
   2aa4e:	f3ef 8511 	mrs	r5, BASEPRI
   2aa52:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa56:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2aa5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   2aa5e:	2401      	movs	r4, #1
   2aa60:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   2aa62:	4621      	mov	r1, r4
   2aa64:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2aa68:	2021      	movs	r0, #33	; 0x21
   2aa6a:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   2aa6e:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   2aa72:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2aa76:	f000 f824 	bl	2aac2 <soc_secure_gpio_pin_mcu_select>
   2aa7a:	4621      	mov	r1, r4
   2aa7c:	2020      	movs	r0, #32
   2aa7e:	f000 f820 	bl	2aac2 <soc_secure_gpio_pin_mcu_select>
   2aa82:	4621      	mov	r1, r4
   2aa84:	200b      	movs	r0, #11
   2aa86:	f000 f81c 	bl	2aac2 <soc_secure_gpio_pin_mcu_select>
   2aa8a:	4621      	mov	r1, r4
   2aa8c:	200a      	movs	r0, #10
   2aa8e:	f000 f818 	bl	2aac2 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   2aa92:	f385 8811 	msr	BASEPRI, r5
   2aa96:	f3bf 8f6f 	isb	sy
}
   2aa9a:	2000      	movs	r0, #0
   2aa9c:	bd38      	pop	{r3, r4, r5, pc}

0002aa9e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2aa9e:	2806      	cmp	r0, #6
   2aaa0:	d108      	bne.n	2aab4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2aaa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2aaa6:	2201      	movs	r2, #1
   2aaa8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2aaac:	f3bf 8f4f 	dsb	sy
        __WFE();
   2aab0:	bf20      	wfe
    while (true)
   2aab2:	e7fd      	b.n	2aab0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2aab4:	4770      	bx	lr

0002aab6 <pm_state_exit_post_ops>:
   2aab6:	2300      	movs	r3, #0
   2aab8:	f383 8811 	msr	BASEPRI, r3
   2aabc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2aac0:	4770      	bx	lr

0002aac2 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   2aac2:	b507      	push	{r0, r1, r2, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   2aac4:	aa01      	add	r2, sp, #4
   2aac6:	f005 fba1 	bl	3020c <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
   2aaca:	b003      	add	sp, #12
   2aacc:	f85d fb04 	ldr.w	pc, [sp], #4

0002aad0 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2aad0:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2aad2:	ab01      	add	r3, sp, #4
   2aad4:	f005 fb82 	bl	301dc <tfm_platform_mem_read>

	switch (status) {
   2aad8:	2802      	cmp	r0, #2
   2aada:	d00a      	beq.n	2aaf2 <soc_secure_mem_read+0x22>
   2aadc:	2803      	cmp	r0, #3
   2aade:	d00b      	beq.n	2aaf8 <soc_secure_mem_read+0x28>
   2aae0:	b968      	cbnz	r0, 2aafe <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2aae2:	9801      	ldr	r0, [sp, #4]
   2aae4:	3800      	subs	r0, #0
   2aae6:	bf18      	it	ne
   2aae8:	2001      	movne	r0, #1
   2aaea:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2aaec:	b003      	add	sp, #12
   2aaee:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2aaf2:	f06f 0015 	mvn.w	r0, #21
   2aaf6:	e7f9      	b.n	2aaec <soc_secure_mem_read+0x1c>
	switch (status) {
   2aaf8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aafc:	e7f6      	b.n	2aaec <soc_secure_mem_read+0x1c>
		return -EPERM;
   2aafe:	f04f 30ff 	mov.w	r0, #4294967295
   2ab02:	e7f3      	b.n	2aaec <soc_secure_mem_read+0x1c>

0002ab04 <dummy_timestamp>:
}
   2ab04:	2000      	movs	r0, #0
   2ab06:	4770      	bx	lr

0002ab08 <default_get_timestamp>:
   2ab08:	f005 bafd 	b.w	30106 <sys_clock_cycle_get_32>

0002ab0c <atomic_inc>:
{
   2ab0c:	4603      	mov	r3, r0
}
   2ab0e:	e8d3 0fef 	ldaex	r0, [r3]
   2ab12:	1c42      	adds	r2, r0, #1
   2ab14:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2ab18:	2900      	cmp	r1, #0
   2ab1a:	d1f8      	bne.n	2ab0e <atomic_inc+0x2>
   2ab1c:	4770      	bx	lr

0002ab1e <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   2ab1e:	2100      	movs	r1, #0
{
   2ab20:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   2ab22:	4608      	mov	r0, r1
   2ab24:	f7e4 fcfc 	bl	f520 <z_log_init.isra.0>
	}

	return 0;
}
   2ab28:	2000      	movs	r0, #0
   2ab2a:	bd08      	pop	{r3, pc}

0002ab2c <z_log_notify_backend_enabled>:
}
   2ab2c:	4770      	bx	lr

0002ab2e <z_log_get_tag>:
}
   2ab2e:	2000      	movs	r0, #0
   2ab30:	4770      	bx	lr

0002ab32 <z_log_msg_finalize>:
{
   2ab32:	b570      	push	{r4, r5, r6, lr}
   2ab34:	460e      	mov	r6, r1
   2ab36:	4615      	mov	r5, r2
   2ab38:	4619      	mov	r1, r3
	if (!msg) {
   2ab3a:	4604      	mov	r4, r0
   2ab3c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2ab40:	b918      	cbnz	r0, 2ab4a <z_log_msg_finalize+0x18>
}
   2ab42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2ab46:	f7e4 bd97 	b.w	f678 <z_log_dropped>
	if (data) {
   2ab4a:	b12b      	cbz	r3, 2ab58 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2ab4c:	3010      	adds	r0, #16
   2ab4e:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2ab52:	4418      	add	r0, r3
   2ab54:	f006 ff65 	bl	31a22 <memcpy>
	msg->hdr.source = source;
   2ab58:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2ab5c:	4620      	mov	r0, r4
}
   2ab5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2ab62:	f7e4 bd9d 	b.w	f6a0 <z_log_msg_commit>

0002ab66 <out_func>:
{
   2ab66:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2ab68:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   2ab6c:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2ab70:	2101      	movs	r1, #1
   2ab72:	6852      	ldr	r2, [r2, #4]
   2ab74:	f10d 0007 	add.w	r0, sp, #7
   2ab78:	4798      	blx	r3
}
   2ab7a:	2000      	movs	r0, #0
   2ab7c:	b003      	add	sp, #12
   2ab7e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ab82 <cr_out_func>:
	if (c == '\n') {
   2ab82:	280a      	cmp	r0, #10
{
   2ab84:	b538      	push	{r3, r4, r5, lr}
   2ab86:	4604      	mov	r4, r0
   2ab88:	460d      	mov	r5, r1
	if (c == '\n') {
   2ab8a:	d102      	bne.n	2ab92 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2ab8c:	200d      	movs	r0, #13
   2ab8e:	f7ff ffea 	bl	2ab66 <out_func>
	out_func(c, ctx);
   2ab92:	4629      	mov	r1, r5
   2ab94:	4620      	mov	r0, r4
   2ab96:	f7ff ffe6 	bl	2ab66 <out_func>
}
   2ab9a:	2000      	movs	r0, #0
   2ab9c:	bd38      	pop	{r3, r4, r5, pc}

0002ab9e <buffer_write>:
{
   2ab9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aba0:	4606      	mov	r6, r0
   2aba2:	460d      	mov	r5, r1
   2aba4:	4614      	mov	r4, r2
   2aba6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2aba8:	4621      	mov	r1, r4
   2abaa:	4628      	mov	r0, r5
   2abac:	463a      	mov	r2, r7
   2abae:	47b0      	blx	r6
	} while (len != 0);
   2abb0:	1a24      	subs	r4, r4, r0
		buf += processed;
   2abb2:	4405      	add	r5, r0
	} while (len != 0);
   2abb4:	d1f8      	bne.n	2aba8 <buffer_write+0xa>
}
   2abb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002abb8 <cbvprintf>:
{
   2abb8:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2abba:	2400      	movs	r4, #0
   2abbc:	9400      	str	r4, [sp, #0]
   2abbe:	f7e4 f827 	bl	ec10 <z_cbvprintf_impl>
}
   2abc2:	b002      	add	sp, #8
   2abc4:	bd10      	pop	{r4, pc}

0002abc6 <log_output_flush>:
{
   2abc6:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2abc8:	6842      	ldr	r2, [r0, #4]
{
   2abca:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2abcc:	e9d2 2300 	ldrd	r2, r3, [r2]
   2abd0:	6881      	ldr	r1, [r0, #8]
   2abd2:	6800      	ldr	r0, [r0, #0]
   2abd4:	f7ff ffe3 	bl	2ab9e <buffer_write>
	output->control_block->offset = 0;
   2abd8:	2200      	movs	r2, #0
   2abda:	6863      	ldr	r3, [r4, #4]
   2abdc:	601a      	str	r2, [r3, #0]
}
   2abde:	bd10      	pop	{r4, pc}

0002abe0 <nvs_flash_rd>:
{
   2abe0:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2abe2:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2abe4:	8984      	ldrh	r4, [r0, #12]
   2abe6:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2abe8:	fa16 f181 	uxtah	r1, r6, r1
   2abec:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2abf0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2abf2:	6884      	ldr	r4, [r0, #8]
   2abf4:	6824      	ldr	r4, [r4, #0]
   2abf6:	46a4      	mov	ip, r4
}
   2abf8:	bc70      	pop	{r4, r5, r6}
   2abfa:	4760      	bx	ip

0002abfc <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2abfc:	680b      	ldr	r3, [r1, #0]
   2abfe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2ac02:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2ac04:	89c0      	ldrh	r0, [r0, #14]
   2ac06:	0c1a      	lsrs	r2, r3, #16
   2ac08:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2ac0c:	bf04      	itt	eq
   2ac0e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2ac12:	600b      	streq	r3, [r1, #0]
}
   2ac14:	4770      	bx	lr

0002ac16 <nvs_flash_block_cmp>:
{
   2ac16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac1a:	4681      	mov	r9, r0
   2ac1c:	460e      	mov	r6, r1
   2ac1e:	4617      	mov	r7, r2
   2ac20:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ac22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2ac24:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ac26:	681d      	ldr	r5, [r3, #0]
   2ac28:	426d      	negs	r5, r5
	block_size =
   2ac2a:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2ac2e:	b91c      	cbnz	r4, 2ac38 <nvs_flash_block_cmp+0x22>
	return 0;
   2ac30:	4620      	mov	r0, r4
}
   2ac32:	b009      	add	sp, #36	; 0x24
   2ac34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2ac38:	42ac      	cmp	r4, r5
   2ac3a:	46a0      	mov	r8, r4
   2ac3c:	bf28      	it	cs
   2ac3e:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2ac40:	466a      	mov	r2, sp
   2ac42:	4643      	mov	r3, r8
   2ac44:	4631      	mov	r1, r6
   2ac46:	4648      	mov	r0, r9
   2ac48:	f7ff ffca 	bl	2abe0 <nvs_flash_rd>
		if (rc) {
   2ac4c:	2800      	cmp	r0, #0
   2ac4e:	d1f0      	bne.n	2ac32 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2ac50:	4642      	mov	r2, r8
   2ac52:	4669      	mov	r1, sp
   2ac54:	4638      	mov	r0, r7
   2ac56:	f006 fed4 	bl	31a02 <memcmp>
		if (rc) {
   2ac5a:	b920      	cbnz	r0, 2ac66 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2ac5c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2ac60:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2ac62:	4447      	add	r7, r8
   2ac64:	e7e3      	b.n	2ac2e <nvs_flash_block_cmp+0x18>
			return 1;
   2ac66:	2001      	movs	r0, #1
   2ac68:	e7e3      	b.n	2ac32 <nvs_flash_block_cmp+0x1c>

0002ac6a <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ac6a:	4601      	mov	r1, r0
{
   2ac6c:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ac6e:	2207      	movs	r2, #7
{
   2ac70:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ac72:	20ff      	movs	r0, #255	; 0xff
   2ac74:	f7e3 ff54 	bl	eb20 <crc8_ccitt>
	entry->crc8 = crc8;
   2ac78:	71e0      	strb	r0, [r4, #7]
}
   2ac7a:	bd10      	pop	{r4, pc}

0002ac7c <nvs_flash_cmp_const>:
{
   2ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac80:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ac82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2ac84:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ac86:	681d      	ldr	r5, [r3, #0]
{
   2ac88:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ac8a:	426d      	negs	r5, r5
	block_size =
   2ac8c:	f005 0520 	and.w	r5, r5, #32
{
   2ac90:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2ac92:	4668      	mov	r0, sp
{
   2ac94:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2ac96:	462a      	mov	r2, r5
   2ac98:	f006 fefd 	bl	31a96 <memset>
	while (len) {
   2ac9c:	b91c      	cbnz	r4, 2aca6 <nvs_flash_cmp_const+0x2a>
	return 0;
   2ac9e:	4620      	mov	r0, r4
}
   2aca0:	b008      	add	sp, #32
   2aca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aca6:	42ac      	cmp	r4, r5
   2aca8:	46a0      	mov	r8, r4
   2acaa:	bf28      	it	cs
   2acac:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2acae:	466a      	mov	r2, sp
   2acb0:	4643      	mov	r3, r8
   2acb2:	4631      	mov	r1, r6
   2acb4:	4638      	mov	r0, r7
   2acb6:	f7ff ffae 	bl	2ac16 <nvs_flash_block_cmp>
		if (rc) {
   2acba:	2800      	cmp	r0, #0
   2acbc:	d1f0      	bne.n	2aca0 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2acbe:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2acc2:	4446      	add	r6, r8
   2acc4:	e7ea      	b.n	2ac9c <nvs_flash_cmp_const+0x20>

0002acc6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2acc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2acc8:	ab0b      	add	r3, sp, #44	; 0x2c
   2acca:	9305      	str	r3, [sp, #20]
   2accc:	9303      	str	r3, [sp, #12]
   2acce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2acd0:	9302      	str	r3, [sp, #8]
   2acd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2acd4:	9301      	str	r3, [sp, #4]
   2acd6:	2300      	movs	r3, #0
   2acd8:	4618      	mov	r0, r3
   2acda:	9300      	str	r3, [sp, #0]
   2acdc:	f7e4 fd1e 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2ace0:	b007      	add	sp, #28
   2ace2:	f85d fb04 	ldr.w	pc, [sp], #4

0002ace6 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2ace6:	7803      	ldrb	r3, [r0, #0]
   2ace8:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2acea:	bf81      	itttt	hi
   2acec:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2acf0:	18c9      	addhi	r1, r1, r3
   2acf2:	425b      	neghi	r3, r3
   2acf4:	4019      	andhi	r1, r3
}
   2acf6:	4608      	mov	r0, r1
   2acf8:	4770      	bx	lr

0002acfa <nvs_ate_valid>:
{
   2acfa:	b570      	push	{r4, r5, r6, lr}
   2acfc:	460c      	mov	r4, r1
   2acfe:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad00:	2108      	movs	r1, #8
   2ad02:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ad04:	f7ff ffef 	bl	2ace6 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ad08:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad0a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ad0c:	4621      	mov	r1, r4
   2ad0e:	20ff      	movs	r0, #255	; 0xff
   2ad10:	f7e3 ff06 	bl	eb20 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2ad14:	79e3      	ldrb	r3, [r4, #7]
   2ad16:	4283      	cmp	r3, r0
   2ad18:	d107      	bne.n	2ad2a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2ad1a:	89aa      	ldrh	r2, [r5, #12]
   2ad1c:	8863      	ldrh	r3, [r4, #2]
   2ad1e:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2ad20:	4283      	cmp	r3, r0
   2ad22:	bf2c      	ite	cs
   2ad24:	2000      	movcs	r0, #0
   2ad26:	2001      	movcc	r0, #1
}
   2ad28:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2ad2a:	2000      	movs	r0, #0
   2ad2c:	e7fc      	b.n	2ad28 <nvs_ate_valid+0x2e>

0002ad2e <nvs_close_ate_valid>:
{
   2ad2e:	b538      	push	{r3, r4, r5, lr}
   2ad30:	4605      	mov	r5, r0
   2ad32:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2ad34:	f7ff ffe1 	bl	2acfa <nvs_ate_valid>
   2ad38:	b1a0      	cbz	r0, 2ad64 <nvs_close_ate_valid+0x36>
   2ad3a:	88a0      	ldrh	r0, [r4, #4]
   2ad3c:	b998      	cbnz	r0, 2ad66 <nvs_close_ate_valid+0x38>
   2ad3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ad42:	8822      	ldrh	r2, [r4, #0]
   2ad44:	429a      	cmp	r2, r3
   2ad46:	d10d      	bne.n	2ad64 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad48:	2108      	movs	r1, #8
   2ad4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2ad4c:	f7ff ffcb 	bl	2ace6 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2ad50:	8862      	ldrh	r2, [r4, #2]
   2ad52:	89ab      	ldrh	r3, [r5, #12]
   2ad54:	1a9b      	subs	r3, r3, r2
   2ad56:	fbb3 f2f0 	udiv	r2, r3, r0
   2ad5a:	fb02 3010 	mls	r0, r2, r0, r3
   2ad5e:	fab0 f080 	clz	r0, r0
   2ad62:	0940      	lsrs	r0, r0, #5
}
   2ad64:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2ad66:	2000      	movs	r0, #0
   2ad68:	e7fc      	b.n	2ad64 <nvs_close_ate_valid+0x36>

0002ad6a <nvs_prev_ate>:
{
   2ad6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ad6c:	4604      	mov	r4, r0
   2ad6e:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad70:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ad72:	2108      	movs	r1, #8
   2ad74:	f7ff ffb7 	bl	2ace6 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad78:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad7a:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad7c:	6829      	ldr	r1, [r5, #0]
   2ad7e:	4620      	mov	r0, r4
   2ad80:	f7ff ff2e 	bl	2abe0 <nvs_flash_rd>
	if (rc) {
   2ad84:	4606      	mov	r6, r0
   2ad86:	2800      	cmp	r0, #0
   2ad88:	d136      	bne.n	2adf8 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2ad8a:	682b      	ldr	r3, [r5, #0]
   2ad8c:	443b      	add	r3, r7
   2ad8e:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2ad90:	89a2      	ldrh	r2, [r4, #12]
   2ad92:	b299      	uxth	r1, r3
   2ad94:	1bd2      	subs	r2, r2, r7
   2ad96:	4291      	cmp	r1, r2
   2ad98:	d12e      	bne.n	2adf8 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2ad9a:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2ad9c:	bf09      	itett	eq
   2ad9e:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2ada0:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2ada4:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2ada8:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2adac:	4620      	mov	r0, r4
   2adae:	2308      	movs	r3, #8
   2adb0:	466a      	mov	r2, sp
   2adb2:	6029      	str	r1, [r5, #0]
   2adb4:	f7ff ff14 	bl	2abe0 <nvs_flash_rd>
	if (rc) {
   2adb8:	b9e8      	cbnz	r0, 2adf6 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2adba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2adbc:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2adbe:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2adc0:	f813 1b01 	ldrb.w	r1, [r3], #1
   2adc4:	428a      	cmp	r2, r1
   2adc6:	d10c      	bne.n	2ade2 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2adc8:	3001      	adds	r0, #1
   2adca:	2808      	cmp	r0, #8
   2adcc:	d1f8      	bne.n	2adc0 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2adce:	6863      	ldr	r3, [r4, #4]
   2add0:	e005      	b.n	2adde <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2add2:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2add4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2add8:	0c1b      	lsrs	r3, r3, #16
   2adda:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2addc:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2adde:	602b      	str	r3, [r5, #0]
		return 0;
   2ade0:	e00a      	b.n	2adf8 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ade2:	4669      	mov	r1, sp
   2ade4:	4620      	mov	r0, r4
   2ade6:	f7ff ffa2 	bl	2ad2e <nvs_close_ate_valid>
   2adea:	2800      	cmp	r0, #0
   2adec:	d1f1      	bne.n	2add2 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2adee:	4629      	mov	r1, r5
   2adf0:	4620      	mov	r0, r4
   2adf2:	f7e4 ff31 	bl	fc58 <nvs_recover_last_ate>
   2adf6:	4606      	mov	r6, r0
}
   2adf8:	4630      	mov	r0, r6
   2adfa:	b003      	add	sp, #12
   2adfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002adfe <nvs_flash_al_wrt>:
{
   2adfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ae02:	4607      	mov	r7, r0
   2ae04:	4690      	mov	r8, r2
	if (!len) {
   2ae06:	461e      	mov	r6, r3
{
   2ae08:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2ae0a:	b91b      	cbnz	r3, 2ae14 <nvs_flash_al_wrt+0x16>
		return 0;
   2ae0c:	2000      	movs	r0, #0
}
   2ae0e:	b009      	add	sp, #36	; 0x24
   2ae10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2ae14:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ae16:	8983      	ldrh	r3, [r0, #12]
   2ae18:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ae1a:	fa14 f181 	uxtah	r1, r4, r1
   2ae1e:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ae24:	681d      	ldr	r5, [r3, #0]
   2ae26:	426d      	negs	r5, r5
	if (blen > 0) {
   2ae28:	4035      	ands	r5, r6
   2ae2a:	d00c      	beq.n	2ae46 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ae2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ae2e:	6883      	ldr	r3, [r0, #8]
   2ae30:	4621      	mov	r1, r4
   2ae32:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2ae36:	462b      	mov	r3, r5
   2ae38:	47c8      	blx	r9
		if (rc) {
   2ae3a:	2800      	cmp	r0, #0
   2ae3c:	d1e7      	bne.n	2ae0e <nvs_flash_al_wrt+0x10>
	if (len) {
   2ae3e:	1b76      	subs	r6, r6, r5
   2ae40:	d0e4      	beq.n	2ae0c <nvs_flash_al_wrt+0xe>
		offset += blen;
   2ae42:	442c      	add	r4, r5
		data8 += blen;
   2ae44:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2ae46:	2320      	movs	r3, #32
   2ae48:	4632      	mov	r2, r6
   2ae4a:	4641      	mov	r1, r8
   2ae4c:	4668      	mov	r0, sp
   2ae4e:	f006 fdf5 	bl	31a3c <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2ae52:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2ae54:	eb0d 0006 	add.w	r0, sp, r6
   2ae58:	682a      	ldr	r2, [r5, #0]
   2ae5a:	7929      	ldrb	r1, [r5, #4]
   2ae5c:	1b92      	subs	r2, r2, r6
   2ae5e:	f006 fe1a 	bl	31a96 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2ae62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2ae64:	682b      	ldr	r3, [r5, #0]
   2ae66:	6882      	ldr	r2, [r0, #8]
   2ae68:	4621      	mov	r1, r4
   2ae6a:	6855      	ldr	r5, [r2, #4]
   2ae6c:	466a      	mov	r2, sp
   2ae6e:	47a8      	blx	r5
	return rc;
   2ae70:	e7cd      	b.n	2ae0e <nvs_flash_al_wrt+0x10>

0002ae72 <nvs_flash_ate_wrt>:
{
   2ae72:	b510      	push	{r4, lr}
   2ae74:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ae76:	2308      	movs	r3, #8
   2ae78:	6841      	ldr	r1, [r0, #4]
{
   2ae7a:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ae7c:	f7ff ffbf 	bl	2adfe <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae80:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ae82:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae84:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae86:	f7ff ff2e 	bl	2ace6 <nvs_al_size.isra.0>
   2ae8a:	6863      	ldr	r3, [r4, #4]
   2ae8c:	1a1b      	subs	r3, r3, r0
   2ae8e:	6063      	str	r3, [r4, #4]
}
   2ae90:	4610      	mov	r0, r2
   2ae92:	bd10      	pop	{r4, pc}

0002ae94 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2ae94:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2ae96:	2400      	movs	r4, #0
   2ae98:	9400      	str	r4, [sp, #0]
   2ae9a:	f7e5 fae5 	bl	10468 <nvs_read_hist>
	return rc;
}
   2ae9e:	b002      	add	sp, #8
   2aea0:	bd10      	pop	{r4, pc}

0002aea2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2aea2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2aea4:	ab0b      	add	r3, sp, #44	; 0x2c
   2aea6:	9305      	str	r3, [sp, #20]
   2aea8:	9303      	str	r3, [sp, #12]
   2aeaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2aeac:	2201      	movs	r2, #1
   2aeae:	9302      	str	r3, [sp, #8]
   2aeb0:	2300      	movs	r3, #0
   2aeb2:	4618      	mov	r0, r3
   2aeb4:	e9cd 3300 	strd	r3, r3, [sp]
   2aeb8:	f7e4 fc30 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2aebc:	b007      	add	sp, #28
   2aebe:	f85d fb04 	ldr.w	pc, [sp], #4

0002aec2 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2aec2:	6903      	ldr	r3, [r0, #16]
}
   2aec4:	f8d3 0390 	ldr.w	r0, [r3, #912]	; 0x390
   2aec8:	4770      	bx	lr

0002aeca <drop_tx_buffer>:
}
   2aeca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aece:	4770      	bx	lr

0002aed0 <release_rx_buffer>:
{
   2aed0:	4608      	mov	r0, r1
   2aed2:	b508      	push	{r3, lr}
   2aed4:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aed6:	b118      	cbz	r0, 2aee0 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   2aed8:	f005 fd3f 	bl	3095a <rpmsg_release_rx_buffer>
	return 0;
   2aedc:	2000      	movs	r0, #0
}
   2aede:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aee0:	f06f 0001 	mvn.w	r0, #1
   2aee4:	e7fb      	b.n	2aede <release_rx_buffer+0xe>

0002aee6 <hold_rx_buffer>:
{
   2aee6:	4608      	mov	r0, r1
   2aee8:	b508      	push	{r3, lr}
   2aeea:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aeec:	b118      	cbz	r0, 2aef6 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2aeee:	f005 fd2c 	bl	3094a <rpmsg_hold_rx_buffer>
	return 0;
   2aef2:	2000      	movs	r0, #0
}
   2aef4:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aef6:	f06f 0001 	mvn.w	r0, #1
   2aefa:	e7fb      	b.n	2aef4 <hold_rx_buffer+0xe>

0002aefc <send_nocopy>:
{
   2aefc:	b513      	push	{r0, r1, r4, lr}
   2aefe:	4604      	mov	r4, r0
   2af00:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2af02:	6921      	ldr	r1, [r4, #16]
   2af04:	f501 7163 	add.w	r1, r1, #908	; 0x38c
   2af08:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   2af0c:	2902      	cmp	r1, #2
   2af0e:	d109      	bne.n	2af24 <send_nocopy+0x28>
	if (len == 0) {
   2af10:	b15b      	cbz	r3, 2af2a <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2af12:	b168      	cbz	r0, 2af30 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2af14:	9300      	str	r3, [sp, #0]
   2af16:	4613      	mov	r3, r2
   2af18:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2af1c:	f7fa f882 	bl	25024 <rpmsg_send_offchannel_nocopy>
}
   2af20:	b002      	add	sp, #8
   2af22:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2af24:	f06f 000f 	mvn.w	r0, #15
   2af28:	e7fa      	b.n	2af20 <send_nocopy+0x24>
		return -EBADMSG;
   2af2a:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2af2e:	e7f7      	b.n	2af20 <send_nocopy+0x24>
		return -ENOENT;
   2af30:	f06f 0001 	mvn.w	r0, #1
   2af34:	e7f4      	b.n	2af20 <send_nocopy+0x24>

0002af36 <get_tx_buffer>:
{
   2af36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2af3a:	461c      	mov	r4, r3
   2af3c:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2af40:	4616      	mov	r6, r2
   2af42:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2af44:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2af46:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2af48:	b339      	cbz	r1, 2af9a <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2af4a:	b34a      	cbz	r2, 2afa0 <get_tx_buffer+0x6a>
   2af4c:	b344      	cbz	r4, 2afa0 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2af4e:	1c6a      	adds	r2, r5, #1
   2af50:	f143 0300 	adc.w	r3, r3, #0
   2af54:	2a02      	cmp	r2, #2
   2af56:	f173 0300 	sbcs.w	r3, r3, #0
   2af5a:	d224      	bcs.n	2afa6 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2af5c:	6822      	ldr	r2, [r4, #0]
   2af5e:	b142      	cbz	r2, 2af72 <get_tx_buffer+0x3c>
   2af60:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
   2af64:	429a      	cmp	r2, r3
   2af66:	d904      	bls.n	2af72 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2af68:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   2af6c:	6023      	str	r3, [r4, #0]
}
   2af6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2af72:	ea05 0908 	and.w	r9, r5, r8
   2af76:	f109 0301 	add.w	r3, r9, #1
   2af7a:	425a      	negs	r2, r3
   2af7c:	415a      	adcs	r2, r3
   2af7e:	4621      	mov	r1, r4
   2af80:	4638      	mov	r0, r7
   2af82:	f005 fcf3 	bl	3096c <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2af86:	b988      	cbnz	r0, 2afac <get_tx_buffer+0x76>
   2af88:	f1b8 3fff 	cmp.w	r8, #4294967295
   2af8c:	bf08      	it	eq
   2af8e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2af92:	d0f0      	beq.n	2af76 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2af94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af98:	e7e9      	b.n	2af6e <get_tx_buffer+0x38>
		return -ENOENT;
   2af9a:	f06f 0001 	mvn.w	r0, #1
   2af9e:	e7e6      	b.n	2af6e <get_tx_buffer+0x38>
		return -EINVAL;
   2afa0:	f06f 0015 	mvn.w	r0, #21
   2afa4:	e7e3      	b.n	2af6e <get_tx_buffer+0x38>
		return -ENOTSUP;
   2afa6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2afaa:	e7e0      	b.n	2af6e <get_tx_buffer+0x38>
	(*r_data) = payload;
   2afac:	6030      	str	r0, [r6, #0]
	return 0;
   2afae:	2000      	movs	r0, #0
   2afb0:	e7dd      	b.n	2af6e <get_tx_buffer+0x38>

0002afb2 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2afb2:	f005 bd20 	b.w	309f6 <rpmsg_destroy_ept>

0002afb6 <get_ept_slot_with_name>:
{
   2afb6:	b538      	push	{r3, r4, r5, lr}
   2afb8:	460d      	mov	r5, r1
   2afba:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2afbc:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2afc0:	4628      	mov	r0, r5
   2afc2:	f7de fa18 	bl	93f6 <strcmp>
   2afc6:	b130      	cbz	r0, 2afd6 <get_ept_slot_with_name+0x20>
   2afc8:	4628      	mov	r0, r5
   2afca:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2afce:	f7de fa12 	bl	93f6 <strcmp>
   2afd2:	b920      	cbnz	r0, 2afde <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2afd4:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   2afd6:	2370      	movs	r3, #112	; 0x70
   2afd8:	fb03 4000 	mla	r0, r3, r0, r4
}
   2afdc:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2afde:	2000      	movs	r0, #0
   2afe0:	e7fc      	b.n	2afdc <get_ept_slot_with_name+0x26>

0002afe2 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2afe2:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2afe6:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2afea:	f006 b97a 	b.w	312e2 <k_work_submit_to_queue>

0002afee <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2afee:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
	virtqueue_notification(data->vr.vq[vq_id]);
   2aff2:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2aff6:	3b00      	subs	r3, #0
   2aff8:	bf18      	it	ne
   2affa:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2affc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b000:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2b004:	f005 bc53 	b.w	308ae <virtqueue_notification>

0002b008 <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2b008:	68cb      	ldr	r3, [r1, #12]
   2b00a:	b133      	cbz	r3, 2b01a <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   2b00c:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   2b00e:	6883      	ldr	r3, [r0, #8]
   2b010:	681b      	ldr	r3, [r3, #0]
   2b012:	b113      	cbz	r3, 2b01a <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2b014:	2200      	movs	r2, #0
   2b016:	6909      	ldr	r1, [r1, #16]
   2b018:	4718      	bx	r3
}
   2b01a:	4770      	bx	lr

0002b01c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2b01c:	f7fa bde8 	b.w	25bf0 <z_impl_k_mutex_unlock>

0002b020 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b020:	e8d0 3fef 	ldaex	r3, [r0]
   2b024:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2b028:	2a00      	cmp	r2, #0
   2b02a:	d1f9      	bne.n	2b020 <atomic_set.isra.0>
}
   2b02c:	4770      	bx	lr

0002b02e <backend_init>:
{
   2b02e:	b510      	push	{r4, lr}
	data->role = conf->role;
   2b030:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2b032:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2b034:	681b      	ldr	r3, [r3, #0]
   2b036:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
	return z_impl_k_mutex_init(mutex);
   2b03a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2b03e:	f006 f806 	bl	3104e <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2b042:	2100      	movs	r1, #0
   2b044:	f504 7063 	add.w	r0, r4, #908	; 0x38c
   2b048:	f7ff ffea 	bl	2b020 <atomic_set.isra.0>
}
   2b04c:	4608      	mov	r0, r1
   2b04e:	bd10      	pop	{r4, pc}

0002b050 <ns_bind_cb>:
{
   2b050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b054:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2b056:	460d      	mov	r5, r1
   2b058:	b379      	cbz	r1, 2b0ba <ns_bind_cb+0x6a>
   2b05a:	780b      	ldrb	r3, [r1, #0]
   2b05c:	b36b      	cbz	r3, 2b0ba <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2b05e:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2b062:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2b066:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2b068:	f04f 32ff 	mov.w	r2, #4294967295
   2b06c:	f04f 33ff 	mov.w	r3, #4294967295
   2b070:	4620      	mov	r0, r4
   2b072:	f7fa fd43 	bl	25afc <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2b076:	462a      	mov	r2, r5
   2b078:	4640      	mov	r0, r8
   2b07a:	a901      	add	r1, sp, #4
   2b07c:	f7e5 fb28 	bl	106d0 <get_ept>
	if (rpmsg_ept == NULL) {
   2b080:	9e01      	ldr	r6, [sp, #4]
   2b082:	b92e      	cbnz	r6, 2b090 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b084:	4620      	mov	r0, r4
}
   2b086:	b002      	add	sp, #8
   2b088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b08c:	f7ff bfc6 	b.w	2b01c <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2b090:	b158      	cbz	r0, 2b0aa <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b092:	4620      	mov	r0, r4
   2b094:	f7ff ffc2 	bl	2b01c <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b098:	463b      	mov	r3, r7
   2b09a:	462a      	mov	r2, r5
   2b09c:	4631      	mov	r1, r6
   2b09e:	4640      	mov	r0, r8
}
   2b0a0:	b002      	add	sp, #8
   2b0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b0a6:	f7e5 baf1 	b.w	1068c <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b0aa:	2220      	movs	r2, #32
   2b0ac:	4629      	mov	r1, r5
   2b0ae:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2b0b2:	f006 fe59 	bl	31d68 <strncpy>
		rpmsg_ept->dest = dest;
   2b0b6:	6637      	str	r7, [r6, #96]	; 0x60
   2b0b8:	e7e4      	b.n	2b084 <ns_bind_cb+0x34>
}
   2b0ba:	b002      	add	sp, #8
   2b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b0c0 <ept_cb>:
{
   2b0c0:	b510      	push	{r4, lr}
   2b0c2:	4608      	mov	r0, r1
   2b0c4:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2b0c6:	4611      	mov	r1, r2
   2b0c8:	b952      	cbnz	r2, 2b0e0 <ept_cb+0x20>
		if (!ept->bound) {
   2b0ca:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2b0ce:	b92a      	cbnz	r2, 2b0dc <ept_cb+0x1c>
			ept->bound = true;
   2b0d0:	2201      	movs	r2, #1
			bound_cb(ept);
   2b0d2:	4618      	mov	r0, r3
			ept->bound = true;
   2b0d4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2b0d8:	f7e5 fc4c 	bl	10974 <bound_cb>
}
   2b0dc:	2000      	movs	r0, #0
   2b0de:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2b0e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2b0e2:	6854      	ldr	r4, [r2, #4]
   2b0e4:	2c00      	cmp	r4, #0
   2b0e6:	d0f9      	beq.n	2b0dc <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2b0e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2b0ea:	47a0      	blx	r4
   2b0ec:	e7f6      	b.n	2b0dc <ept_cb+0x1c>

0002b0ee <deregister_ept>:
{
   2b0ee:	b510      	push	{r4, lr}
   2b0f0:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b0f2:	6903      	ldr	r3, [r0, #16]
   2b0f4:	f503 7363 	add.w	r3, r3, #908	; 0x38c
   2b0f8:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   2b0fc:	2b02      	cmp	r3, #2
   2b0fe:	d10a      	bne.n	2b116 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2b100:	b161      	cbz	r1, 2b11c <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2b102:	4608      	mov	r0, r1
   2b104:	f005 fc77 	bl	309f6 <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2b108:	2270      	movs	r2, #112	; 0x70
   2b10a:	2100      	movs	r1, #0
   2b10c:	4620      	mov	r0, r4
   2b10e:	f006 fcc2 	bl	31a96 <memset>
	return 0;
   2b112:	2000      	movs	r0, #0
}
   2b114:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2b116:	f06f 000f 	mvn.w	r0, #15
   2b11a:	e7fb      	b.n	2b114 <deregister_ept+0x26>
		return -ENOENT;
   2b11c:	f06f 0001 	mvn.w	r0, #1
   2b120:	e7f8      	b.n	2b114 <deregister_ept+0x26>

0002b122 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2b122:	f005 bc68 	b.w	309f6 <rpmsg_destroy_ept>

0002b126 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2b126:	b538      	push	{r3, r4, r5, lr}
   2b128:	460d      	mov	r5, r1
	if (!instance) {
   2b12a:	4604      	mov	r4, r0
   2b12c:	b160      	cbz	r0, 2b148 <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2b12e:	30e0      	adds	r0, #224	; 0xe0
   2b130:	f005 fe8d 	bl	30e4e <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2b134:	b10d      	cbz	r5, 2b13a <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2b136:	2000      	movs	r0, #0
}
   2b138:	bd38      	pop	{r3, r4, r5, pc}
   2b13a:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   2b13e:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2b142:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2b146:	e7f6      	b.n	2b136 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2b148:	f06f 0015 	mvn.w	r0, #21
   2b14c:	e7f4      	b.n	2b138 <ipc_rpmsg_deinit+0x12>

0002b14e <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2b14e:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2b150:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2b154:	b113      	cbz	r3, 2b15c <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2b156:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2b15a:	4718      	bx	r3
}
   2b15c:	4770      	bx	lr

0002b15e <virtio_set_features>:
}
   2b15e:	4770      	bx	lr

0002b160 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2b160:	6983      	ldr	r3, [r0, #24]
   2b162:	b913      	cbnz	r3, 2b16a <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2b164:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b168:	7019      	strb	r1, [r3, #0]
}
   2b16a:	4770      	bx	lr

0002b16c <virtio_get_features>:
}
   2b16c:	2001      	movs	r0, #1
   2b16e:	4770      	bx	lr

0002b170 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2b170:	6983      	ldr	r3, [r0, #24]
   2b172:	2b01      	cmp	r3, #1
   2b174:	d104      	bne.n	2b180 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2b176:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b17a:	7818      	ldrb	r0, [r3, #0]
   2b17c:	b2c0      	uxtb	r0, r0
   2b17e:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2b180:	2004      	movs	r0, #4
}
   2b182:	4770      	bx	lr

0002b184 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2b184:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2b186:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2b188:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2b18a:	4620      	mov	r0, r4
   2b18c:	f006 fc2d 	bl	319ea <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2b190:	4605      	mov	r5, r0
   2b192:	b118      	cbz	r0, 2b19c <virtqueue_allocate+0x18>
   2b194:	4622      	mov	r2, r4
   2b196:	2100      	movs	r1, #0
   2b198:	f006 fc7d 	bl	31a96 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   2b19c:	4628      	mov	r0, r5
   2b19e:	bd38      	pop	{r3, r4, r5, pc}

0002b1a0 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2b1a0:	b538      	push	{r3, r4, r5, lr}
   2b1a2:	4604      	mov	r4, r0
   2b1a4:	2230      	movs	r2, #48	; 0x30
   2b1a6:	2100      	movs	r1, #0
   2b1a8:	f006 fc75 	bl	31a96 <memset>
   2b1ac:	2218      	movs	r2, #24
   2b1ae:	2100      	movs	r1, #0
   2b1b0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2b1b4:	f006 fc6f 	bl	31a96 <memset>
   2b1b8:	2218      	movs	r2, #24
   2b1ba:	2100      	movs	r1, #0
   2b1bc:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2b1c0:	f006 fc69 	bl	31a96 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2b1c4:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2b1c8:	f7f9 fede 	bl	24f88 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2b1cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2b1d0:	f7f9 feda 	bl	24f88 <virtqueue_free>
	vr->shm_io = 0;
   2b1d4:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   2b1d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   2b1da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2b1de:	f005 f8e7 	bl	303b0 <metal_device_close>
	metal_finish();
   2b1e2:	f7f9 fe49 	bl	24e78 <metal_finish>
	if (io->ops.close)
   2b1e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2b1e8:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2b1ec:	b10b      	cbz	r3, 2b1f2 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2b1ee:	4628      	mov	r0, r5
   2b1f0:	4798      	blx	r3
   2b1f2:	2238      	movs	r2, #56	; 0x38
   2b1f4:	2100      	movs	r1, #0
   2b1f6:	4628      	mov	r0, r5
   2b1f8:	f006 fc4d 	bl	31a96 <memset>

	return 0;
}
   2b1fc:	2000      	movs	r0, #0
   2b1fe:	bd38      	pop	{r3, r4, r5, pc}

0002b200 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b200:	b538      	push	{r3, r4, r5, lr}
   2b202:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b204:	42ab      	cmp	r3, r5
{
   2b206:	4611      	mov	r1, r2
   2b208:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b20a:	d804      	bhi.n	2b216 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b20c:	461a      	mov	r2, r3
   2b20e:	f006 fc08 	bl	31a22 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b212:	4620      	mov	r0, r4
   2b214:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b216:	2400      	movs	r4, #0
   2b218:	e7fb      	b.n	2b212 <_copy+0x12>

0002b21a <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2b21a:	f006 bc3c 	b.w	31a96 <memset>

0002b21e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b21e:	09c3      	lsrs	r3, r0, #7
   2b220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b224:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b228:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b22c:	b2c0      	uxtb	r0, r0
   2b22e:	4770      	bx	lr

0002b230 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b230:	78cb      	ldrb	r3, [r1, #3]
   2b232:	7802      	ldrb	r2, [r0, #0]
   2b234:	4053      	eors	r3, r2
   2b236:	7003      	strb	r3, [r0, #0]
   2b238:	884b      	ldrh	r3, [r1, #2]
   2b23a:	7842      	ldrb	r2, [r0, #1]
   2b23c:	4053      	eors	r3, r2
   2b23e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b240:	680a      	ldr	r2, [r1, #0]
   2b242:	7883      	ldrb	r3, [r0, #2]
   2b244:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b248:	7083      	strb	r3, [r0, #2]
   2b24a:	680a      	ldr	r2, [r1, #0]
   2b24c:	78c3      	ldrb	r3, [r0, #3]
   2b24e:	4053      	eors	r3, r2
   2b250:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b252:	79cb      	ldrb	r3, [r1, #7]
   2b254:	7902      	ldrb	r2, [r0, #4]
   2b256:	4053      	eors	r3, r2
   2b258:	7103      	strb	r3, [r0, #4]
   2b25a:	88cb      	ldrh	r3, [r1, #6]
   2b25c:	7942      	ldrb	r2, [r0, #5]
   2b25e:	4053      	eors	r3, r2
   2b260:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b262:	684a      	ldr	r2, [r1, #4]
   2b264:	7983      	ldrb	r3, [r0, #6]
   2b266:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b26a:	7183      	strb	r3, [r0, #6]
   2b26c:	684a      	ldr	r2, [r1, #4]
   2b26e:	79c3      	ldrb	r3, [r0, #7]
   2b270:	4053      	eors	r3, r2
   2b272:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b274:	7acb      	ldrb	r3, [r1, #11]
   2b276:	7a02      	ldrb	r2, [r0, #8]
   2b278:	4053      	eors	r3, r2
   2b27a:	7203      	strb	r3, [r0, #8]
   2b27c:	7a42      	ldrb	r2, [r0, #9]
   2b27e:	894b      	ldrh	r3, [r1, #10]
   2b280:	4053      	eors	r3, r2
   2b282:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b284:	688a      	ldr	r2, [r1, #8]
   2b286:	7a83      	ldrb	r3, [r0, #10]
   2b288:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b28c:	7283      	strb	r3, [r0, #10]
   2b28e:	688a      	ldr	r2, [r1, #8]
   2b290:	7ac3      	ldrb	r3, [r0, #11]
   2b292:	4053      	eors	r3, r2
   2b294:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b296:	7bcb      	ldrb	r3, [r1, #15]
   2b298:	7b02      	ldrb	r2, [r0, #12]
   2b29a:	4053      	eors	r3, r2
   2b29c:	7303      	strb	r3, [r0, #12]
   2b29e:	89cb      	ldrh	r3, [r1, #14]
   2b2a0:	7b42      	ldrb	r2, [r0, #13]
   2b2a2:	4053      	eors	r3, r2
   2b2a4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b2a6:	68ca      	ldr	r2, [r1, #12]
   2b2a8:	7b83      	ldrb	r3, [r0, #14]
   2b2aa:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b2ae:	7383      	strb	r3, [r0, #14]
   2b2b0:	68ca      	ldr	r2, [r1, #12]
   2b2b2:	7bc3      	ldrb	r3, [r0, #15]
   2b2b4:	4053      	eors	r3, r2
   2b2b6:	73c3      	strb	r3, [r0, #15]
}
   2b2b8:	4770      	bx	lr

0002b2ba <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b2ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b2bc:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b2be:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b2c0:	f88d 2000 	strb.w	r2, [sp]
   2b2c4:	7942      	ldrb	r2, [r0, #5]
   2b2c6:	f88d 2001 	strb.w	r2, [sp, #1]
   2b2ca:	7a82      	ldrb	r2, [r0, #10]
   2b2cc:	f88d 2002 	strb.w	r2, [sp, #2]
   2b2d0:	7bc2      	ldrb	r2, [r0, #15]
   2b2d2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b2d6:	7902      	ldrb	r2, [r0, #4]
   2b2d8:	f88d 2004 	strb.w	r2, [sp, #4]
   2b2dc:	7a42      	ldrb	r2, [r0, #9]
   2b2de:	f88d 2005 	strb.w	r2, [sp, #5]
   2b2e2:	7b82      	ldrb	r2, [r0, #14]
   2b2e4:	f88d 2006 	strb.w	r2, [sp, #6]
   2b2e8:	78c2      	ldrb	r2, [r0, #3]
   2b2ea:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b2ee:	7a02      	ldrb	r2, [r0, #8]
   2b2f0:	f88d 2008 	strb.w	r2, [sp, #8]
   2b2f4:	7b42      	ldrb	r2, [r0, #13]
   2b2f6:	f88d 2009 	strb.w	r2, [sp, #9]
   2b2fa:	7882      	ldrb	r2, [r0, #2]
   2b2fc:	f88d 200a 	strb.w	r2, [sp, #10]
   2b300:	79c2      	ldrb	r2, [r0, #7]
   2b302:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b306:	7b02      	ldrb	r2, [r0, #12]
   2b308:	f88d 200c 	strb.w	r2, [sp, #12]
   2b30c:	7842      	ldrb	r2, [r0, #1]
   2b30e:	f88d 200d 	strb.w	r2, [sp, #13]
   2b312:	7982      	ldrb	r2, [r0, #6]
   2b314:	f88d 200e 	strb.w	r2, [sp, #14]
   2b318:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b31c:	2310      	movs	r3, #16
   2b31e:	466a      	mov	r2, sp
   2b320:	4619      	mov	r1, r3
   2b322:	f7ff ff6d 	bl	2b200 <_copy>
}
   2b326:	b005      	add	sp, #20
   2b328:	f85d fb04 	ldr.w	pc, [sp], #4

0002b32c <mult_row_column>:
{
   2b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b32e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b330:	7808      	ldrb	r0, [r1, #0]
{
   2b332:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b334:	f7ff ff73 	bl	2b21e <_double_byte>
   2b338:	4605      	mov	r5, r0
   2b33a:	7860      	ldrb	r0, [r4, #1]
   2b33c:	f7ff ff6f 	bl	2b21e <_double_byte>
   2b340:	78a2      	ldrb	r2, [r4, #2]
   2b342:	7863      	ldrb	r3, [r4, #1]
   2b344:	4053      	eors	r3, r2
   2b346:	78e2      	ldrb	r2, [r4, #3]
   2b348:	4053      	eors	r3, r2
   2b34a:	405d      	eors	r5, r3
   2b34c:	4068      	eors	r0, r5
   2b34e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b350:	7860      	ldrb	r0, [r4, #1]
   2b352:	7827      	ldrb	r7, [r4, #0]
   2b354:	f7ff ff63 	bl	2b21e <_double_byte>
   2b358:	4605      	mov	r5, r0
   2b35a:	78a0      	ldrb	r0, [r4, #2]
   2b35c:	f7ff ff5f 	bl	2b21e <_double_byte>
   2b360:	78a3      	ldrb	r3, [r4, #2]
   2b362:	405f      	eors	r7, r3
   2b364:	78e3      	ldrb	r3, [r4, #3]
   2b366:	405f      	eors	r7, r3
   2b368:	407d      	eors	r5, r7
   2b36a:	4068      	eors	r0, r5
   2b36c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b36e:	7863      	ldrb	r3, [r4, #1]
   2b370:	7827      	ldrb	r7, [r4, #0]
   2b372:	78a0      	ldrb	r0, [r4, #2]
   2b374:	405f      	eors	r7, r3
   2b376:	f7ff ff52 	bl	2b21e <_double_byte>
   2b37a:	4605      	mov	r5, r0
   2b37c:	78e0      	ldrb	r0, [r4, #3]
   2b37e:	f7ff ff4e 	bl	2b21e <_double_byte>
   2b382:	78e3      	ldrb	r3, [r4, #3]
   2b384:	405f      	eors	r7, r3
   2b386:	407d      	eors	r5, r7
   2b388:	4068      	eors	r0, r5
   2b38a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b38c:	7820      	ldrb	r0, [r4, #0]
   2b38e:	f7ff ff46 	bl	2b21e <_double_byte>
   2b392:	7862      	ldrb	r2, [r4, #1]
   2b394:	7823      	ldrb	r3, [r4, #0]
   2b396:	4053      	eors	r3, r2
   2b398:	78a2      	ldrb	r2, [r4, #2]
   2b39a:	4053      	eors	r3, r2
   2b39c:	ea80 0503 	eor.w	r5, r0, r3
   2b3a0:	78e0      	ldrb	r0, [r4, #3]
   2b3a2:	f7ff ff3c 	bl	2b21e <_double_byte>
   2b3a6:	b2ed      	uxtb	r5, r5
   2b3a8:	4045      	eors	r5, r0
   2b3aa:	70f5      	strb	r5, [r6, #3]
}
   2b3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b3ae <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b3ae:	b570      	push	{r4, r5, r6, lr}
   2b3b0:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b3b2:	4605      	mov	r5, r0
{
   2b3b4:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b3b6:	2800      	cmp	r0, #0
   2b3b8:	d049      	beq.n	2b44e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b3ba:	2900      	cmp	r1, #0
   2b3bc:	d049      	beq.n	2b452 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b3be:	2a00      	cmp	r2, #0
   2b3c0:	d049      	beq.n	2b456 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b3c2:	2310      	movs	r3, #16
   2b3c4:	460a      	mov	r2, r1
   2b3c6:	4668      	mov	r0, sp
   2b3c8:	4619      	mov	r1, r3
   2b3ca:	f7ff ff19 	bl	2b200 <_copy>
	add_round_key(state, s->words);
   2b3ce:	4621      	mov	r1, r4
   2b3d0:	4668      	mov	r0, sp
   2b3d2:	f7ff ff2d 	bl	2b230 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b3d6:	3410      	adds	r4, #16
   2b3d8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b3dc:	4668      	mov	r0, sp
   2b3de:	f7e5 fe03 	bl	10fe8 <sub_bytes>
		shift_rows(state);
   2b3e2:	4668      	mov	r0, sp
   2b3e4:	f7ff ff69 	bl	2b2ba <shift_rows>
	mult_row_column(t, s);
   2b3e8:	4669      	mov	r1, sp
   2b3ea:	a804      	add	r0, sp, #16
   2b3ec:	f7ff ff9e 	bl	2b32c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b3f0:	a901      	add	r1, sp, #4
   2b3f2:	a805      	add	r0, sp, #20
   2b3f4:	f7ff ff9a 	bl	2b32c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b3f8:	a902      	add	r1, sp, #8
   2b3fa:	a806      	add	r0, sp, #24
   2b3fc:	f7ff ff96 	bl	2b32c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b400:	a903      	add	r1, sp, #12
   2b402:	a807      	add	r0, sp, #28
   2b404:	f7ff ff92 	bl	2b32c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b408:	2310      	movs	r3, #16
   2b40a:	4668      	mov	r0, sp
   2b40c:	4619      	mov	r1, r3
   2b40e:	eb0d 0203 	add.w	r2, sp, r3
   2b412:	f7ff fef5 	bl	2b200 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b416:	4621      	mov	r1, r4
   2b418:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b41a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b41c:	f7ff ff08 	bl	2b230 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b420:	42b4      	cmp	r4, r6
   2b422:	d1db      	bne.n	2b3dc <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b424:	f7e5 fde0 	bl	10fe8 <sub_bytes>
	shift_rows(state);
   2b428:	4668      	mov	r0, sp
   2b42a:	f7ff ff46 	bl	2b2ba <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b42e:	4621      	mov	r1, r4
   2b430:	4668      	mov	r0, sp
   2b432:	f7ff fefd 	bl	2b230 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b436:	2310      	movs	r3, #16
   2b438:	466a      	mov	r2, sp
   2b43a:	4619      	mov	r1, r3
   2b43c:	4628      	mov	r0, r5
   2b43e:	f7ff fedf 	bl	2b200 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b442:	4668      	mov	r0, sp
   2b444:	2210      	movs	r2, #16
   2b446:	2100      	movs	r1, #0
   2b448:	f7ff fee7 	bl	2b21a <_set>

	return TC_CRYPTO_SUCCESS;
   2b44c:	2001      	movs	r0, #1
}
   2b44e:	b008      	add	sp, #32
   2b450:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b452:	4608      	mov	r0, r1
   2b454:	e7fb      	b.n	2b44e <tc_aes_encrypt+0xa0>
   2b456:	4610      	mov	r0, r2
   2b458:	e7f9      	b.n	2b44e <tc_aes_encrypt+0xa0>

0002b45a <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b45a:	460a      	mov	r2, r1
{
   2b45c:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b45e:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b462:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b464:	2b00      	cmp	r3, #0
   2b466:	bfac      	ite	ge
   2b468:	2300      	movge	r3, #0
   2b46a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b46c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b470:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b474:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b476:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b47a:	d002      	beq.n	2b482 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b47c:	7813      	ldrb	r3, [r2, #0]
   2b47e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b480:	e7f4      	b.n	2b46c <gf_double+0x12>
	}
}
   2b482:	bd10      	pop	{r4, pc}

0002b484 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b484:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b486:	b120      	cbz	r0, 2b492 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b488:	2258      	movs	r2, #88	; 0x58
   2b48a:	2100      	movs	r1, #0
   2b48c:	f7ff fec5 	bl	2b21a <_set>
   2b490:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b492:	bd08      	pop	{r3, pc}

0002b494 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b494:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b496:	4604      	mov	r4, r0
   2b498:	b188      	cbz	r0, 2b4be <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b49a:	2210      	movs	r2, #16
   2b49c:	2100      	movs	r1, #0
   2b49e:	f7ff febc 	bl	2b21a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b4a2:	2210      	movs	r2, #16
   2b4a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b4a8:	2100      	movs	r1, #0
   2b4aa:	f7ff feb6 	bl	2b21a <_set>
	s->leftover_offset = 0;
   2b4ae:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b4b0:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b4b2:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b4b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b4b8:	2001      	movs	r0, #1
   2b4ba:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b4be:	bd10      	pop	{r4, pc}

0002b4c0 <tc_cmac_setup>:
{
   2b4c0:	b570      	push	{r4, r5, r6, lr}
   2b4c2:	4604      	mov	r4, r0
   2b4c4:	460d      	mov	r5, r1
   2b4c6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b4c8:	b310      	cbz	r0, 2b510 <tc_cmac_setup+0x50>
   2b4ca:	b311      	cbz	r1, 2b512 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b4cc:	2258      	movs	r2, #88	; 0x58
   2b4ce:	2100      	movs	r1, #0
   2b4d0:	f7ff fea3 	bl	2b21a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b4d4:	4629      	mov	r1, r5
   2b4d6:	4630      	mov	r0, r6
	s->sched = sched;
   2b4d8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b4da:	f7e5 fd91 	bl	11000 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b4de:	2210      	movs	r2, #16
   2b4e0:	2100      	movs	r1, #0
   2b4e2:	4620      	mov	r0, r4
   2b4e4:	f7ff fe99 	bl	2b21a <_set>
	gf_double (s->K1, s->iv);
   2b4e8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b4ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b4ee:	4621      	mov	r1, r4
   2b4f0:	4620      	mov	r0, r4
   2b4f2:	f7ff ff5c 	bl	2b3ae <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b4f6:	4621      	mov	r1, r4
   2b4f8:	4628      	mov	r0, r5
   2b4fa:	f7ff ffae 	bl	2b45a <gf_double>
	gf_double (s->K2, s->K1);
   2b4fe:	4629      	mov	r1, r5
   2b500:	f104 0020 	add.w	r0, r4, #32
   2b504:	f7ff ffa9 	bl	2b45a <gf_double>
	tc_cmac_init(s);
   2b508:	4620      	mov	r0, r4
   2b50a:	f7ff ffc3 	bl	2b494 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b50e:	2001      	movs	r0, #1
}
   2b510:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b512:	4608      	mov	r0, r1
   2b514:	e7fc      	b.n	2b510 <tc_cmac_setup+0x50>

0002b516 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b51a:	460e      	mov	r6, r1
   2b51c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b51e:	4604      	mov	r4, r0
   2b520:	2800      	cmp	r0, #0
   2b522:	d060      	beq.n	2b5e6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b524:	b1fa      	cbz	r2, 2b566 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b526:	2900      	cmp	r1, #0
   2b528:	d05d      	beq.n	2b5e6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b52a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b52e:	ea53 0102 	orrs.w	r1, r3, r2
   2b532:	d058      	beq.n	2b5e6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b534:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b536:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b53a:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b53e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b542:	f1b8 0f00 	cmp.w	r8, #0
   2b546:	d02c      	beq.n	2b5a2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b548:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b54c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b550:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b552:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b554:	d20a      	bcs.n	2b56c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b556:	462b      	mov	r3, r5
   2b558:	4632      	mov	r2, r6
   2b55a:	4629      	mov	r1, r5
   2b55c:	f7ff fe50 	bl	2b200 <_copy>
			s->leftover_offset += data_length;
   2b560:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b562:	442b      	add	r3, r5
   2b564:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b566:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b56c:	463b      	mov	r3, r7
   2b56e:	4632      	mov	r2, r6
   2b570:	4639      	mov	r1, r7
   2b572:	f7ff fe45 	bl	2b200 <_copy>
		s->leftover_offset = 0;
   2b576:	2300      	movs	r3, #0
   2b578:	3d10      	subs	r5, #16
   2b57a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b57c:	4445      	add	r5, r8
		data += remaining_space;
   2b57e:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b580:	1e63      	subs	r3, r4, #1
   2b582:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b586:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b58a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b58e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b590:	ea82 0200 	eor.w	r2, r2, r0
   2b594:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b596:	d1f6      	bne.n	2b586 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b598:	4621      	mov	r1, r4
   2b59a:	4620      	mov	r0, r4
   2b59c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b59e:	f7ff ff06 	bl	2b3ae <tc_aes_encrypt>
   2b5a2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b5a6:	2d10      	cmp	r5, #16
   2b5a8:	d80a      	bhi.n	2b5c0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b5aa:	2d00      	cmp	r5, #0
   2b5ac:	d0db      	beq.n	2b566 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b5ae:	462b      	mov	r3, r5
   2b5b0:	4632      	mov	r2, r6
   2b5b2:	4629      	mov	r1, r5
   2b5b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b5b8:	f7ff fe22 	bl	2b200 <_copy>
		s->leftover_offset = data_length;
   2b5bc:	6465      	str	r5, [r4, #68]	; 0x44
   2b5be:	e7d2      	b.n	2b566 <tc_cmac_update+0x50>
   2b5c0:	1e63      	subs	r3, r4, #1
   2b5c2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b5c4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b5c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b5cc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b5ce:	ea82 0200 	eor.w	r2, r2, r0
   2b5d2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b5d4:	d1f6      	bne.n	2b5c4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b5d6:	4621      	mov	r1, r4
   2b5d8:	4620      	mov	r0, r4
   2b5da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b5dc:	f7ff fee7 	bl	2b3ae <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b5e0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b5e2:	3d10      	subs	r5, #16
   2b5e4:	e7df      	b.n	2b5a6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b5e6:	2000      	movs	r0, #0
   2b5e8:	e7be      	b.n	2b568 <tc_cmac_update+0x52>

0002b5ea <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b5ea:	b570      	push	{r4, r5, r6, lr}
   2b5ec:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b5ee:	4605      	mov	r5, r0
   2b5f0:	b1f0      	cbz	r0, 2b630 <tc_cmac_final+0x46>
   2b5f2:	b371      	cbz	r1, 2b652 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b5f4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b5f6:	2a10      	cmp	r2, #16
   2b5f8:	d11b      	bne.n	2b632 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b5fa:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b5fc:	1e63      	subs	r3, r4, #1
   2b5fe:	3901      	subs	r1, #1
   2b600:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b604:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b608:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b60c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b60e:	ea82 0206 	eor.w	r2, r2, r6
   2b612:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2b616:	ea82 0206 	eor.w	r2, r2, r6
   2b61a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b61c:	d1f2      	bne.n	2b604 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b61e:	4621      	mov	r1, r4
   2b620:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b622:	4628      	mov	r0, r5
   2b624:	f7ff fec3 	bl	2b3ae <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b628:	4620      	mov	r0, r4
   2b62a:	f7ff ff2b 	bl	2b484 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b62e:	2001      	movs	r0, #1
}
   2b630:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b632:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b636:	2100      	movs	r1, #0
   2b638:	f1c2 0210 	rsb	r2, r2, #16
   2b63c:	4420      	add	r0, r4
   2b63e:	f7ff fdec 	bl	2b21a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b642:	2280      	movs	r2, #128	; 0x80
   2b644:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2b646:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b64a:	4423      	add	r3, r4
   2b64c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b650:	e7d4      	b.n	2b5fc <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b652:	4608      	mov	r0, r1
   2b654:	e7ec      	b.n	2b630 <tc_cmac_final+0x46>

0002b656 <tc_sha256_update>:
{
   2b656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b658:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2b65a:	b110      	cbz	r0, 2b662 <tc_sha256_update+0xc>
   2b65c:	b1f9      	cbz	r1, 2b69e <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2b65e:	b90a      	cbnz	r2, 2b664 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2b660:	2001      	movs	r0, #1
}
   2b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2b664:	2700      	movs	r7, #0
   2b666:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2b668:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2b66c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2b66e:	1c5a      	adds	r2, r3, #1
   2b670:	6682      	str	r2, [r0, #104]	; 0x68
   2b672:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b676:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b678:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2b67a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b67e:	d90b      	bls.n	2b698 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2b680:	4631      	mov	r1, r6
   2b682:	f7e5 fd11 	bl	110a8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2b686:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2b68a:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2b68e:	f142 0200 	adc.w	r2, r2, #0
   2b692:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2b696:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2b698:	42a5      	cmp	r5, r4
   2b69a:	d1e7      	bne.n	2b66c <tc_sha256_update+0x16>
   2b69c:	e7e0      	b.n	2b660 <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2b69e:	4608      	mov	r0, r1
   2b6a0:	e7df      	b.n	2b662 <tc_sha256_update+0xc>

0002b6a2 <tc_sha256_final>:
{
   2b6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b6a4:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2b6a6:	4605      	mov	r5, r0
   2b6a8:	2800      	cmp	r0, #0
   2b6aa:	d054      	beq.n	2b756 <tc_sha256_final+0xb4>
   2b6ac:	2900      	cmp	r1, #0
   2b6ae:	d053      	beq.n	2b758 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2b6b0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2b6b2:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2b6b6:	00d8      	lsls	r0, r3, #3
   2b6b8:	1812      	adds	r2, r2, r0
   2b6ba:	f141 0100 	adc.w	r1, r1, #0
   2b6be:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b6c2:	2280      	movs	r2, #128	; 0x80
   2b6c4:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b6c6:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b6c8:	4423      	add	r3, r4
   2b6ca:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2b6cc:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b6d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2b6d4:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b6d8:	d90a      	bls.n	2b6f0 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2b6da:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2b6de:	4639      	mov	r1, r7
   2b6e0:	4430      	add	r0, r6
   2b6e2:	f7ff fd9a 	bl	2b21a <_set>
		compress(s->iv, s->leftover);
   2b6e6:	4631      	mov	r1, r6
   2b6e8:	4620      	mov	r0, r4
   2b6ea:	f7e5 fcdd 	bl	110a8 <compress>
		s->leftover_offset = 0;
   2b6ee:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2b6f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2b6f2:	2100      	movs	r1, #0
   2b6f4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2b6f8:	4430      	add	r0, r6
   2b6fa:	f7ff fd8e 	bl	2b21a <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b6fe:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2b700:	4631      	mov	r1, r6
   2b702:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b704:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2b706:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b708:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2b70a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b70e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b712:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2b714:	0e1b      	lsrs	r3, r3, #24
   2b716:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2b71a:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b71c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2b720:	f7e5 fcc2 	bl	110a8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b724:	1d2b      	adds	r3, r5, #4
   2b726:	1f21      	subs	r1, r4, #4
   2b728:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2b72a:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b72e:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2b730:	0e10      	lsrs	r0, r2, #24
   2b732:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2b736:	0c10      	lsrs	r0, r2, #16
   2b738:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2b73c:	0a10      	lsrs	r0, r2, #8
   2b73e:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2b742:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b746:	42ab      	cmp	r3, r5
   2b748:	d1ef      	bne.n	2b72a <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2b74a:	4620      	mov	r0, r4
   2b74c:	2270      	movs	r2, #112	; 0x70
   2b74e:	2100      	movs	r1, #0
   2b750:	f7ff fd63 	bl	2b21a <_set>
	return TC_CRYPTO_SUCCESS;
   2b754:	2001      	movs	r0, #1
}
   2b756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b758:	4608      	mov	r0, r1
   2b75a:	e7fc      	b.n	2b756 <tc_sha256_final+0xb4>

0002b75c <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2b75c:	b530      	push	{r4, r5, lr}
   2b75e:	1e43      	subs	r3, r0, #1
   2b760:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2b762:	42a9      	cmp	r1, r5
   2b764:	d106      	bne.n	2b774 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b766:	2136      	movs	r1, #54	; 0x36
   2b768:	245c      	movs	r4, #92	; 0x5c
   2b76a:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b76c:	1a13      	subs	r3, r2, r0
   2b76e:	2b3f      	cmp	r3, #63	; 0x3f
   2b770:	d90c      	bls.n	2b78c <rekey+0x30>
	}
}
   2b772:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2b774:	780c      	ldrb	r4, [r1, #0]
   2b776:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2b77a:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2b77e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b782:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2b786:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2b78a:	e7ea      	b.n	2b762 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2b78c:	f802 1b01 	strb.w	r1, [r2], #1
   2b790:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2b794:	e7ea      	b.n	2b76c <rekey+0x10>

0002b796 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2b796:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b798:	460e      	mov	r6, r1
   2b79a:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2b79c:	4605      	mov	r5, r0
{
   2b79e:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2b7a0:	b1b8      	cbz	r0, 2b7d2 <tc_hmac_set_key+0x3c>
   2b7a2:	b341      	cbz	r1, 2b7f6 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2b7a4:	b34a      	cbz	r2, 2b7fa <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2b7a6:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2b7a8:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2b7ac:	d813      	bhi.n	2b7d6 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2b7ae:	a810      	add	r0, sp, #64	; 0x40
   2b7b0:	f7e5 fd64 	bl	1127c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2b7b4:	4622      	mov	r2, r4
   2b7b6:	4669      	mov	r1, sp
   2b7b8:	a810      	add	r0, sp, #64	; 0x40
   2b7ba:	f7ff ff4c 	bl	2b656 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2b7be:	a910      	add	r1, sp, #64	; 0x40
   2b7c0:	a834      	add	r0, sp, #208	; 0xd0
   2b7c2:	f7ff ff6e 	bl	2b6a2 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2b7c6:	4622      	mov	r2, r4
   2b7c8:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2b7ca:	4638      	mov	r0, r7
   2b7cc:	f7ff ffc6 	bl	2b75c <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2b7d0:	2001      	movs	r0, #1
}
   2b7d2:	b04d      	add	sp, #308	; 0x134
   2b7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2b7d6:	f7e5 fd51 	bl	1127c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2b7da:	4622      	mov	r2, r4
   2b7dc:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2b7de:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2b7e2:	4628      	mov	r0, r5
   2b7e4:	f7ff ff37 	bl	2b656 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2b7e8:	4629      	mov	r1, r5
   2b7ea:	4620      	mov	r0, r4
   2b7ec:	f7ff ff59 	bl	2b6a2 <tc_sha256_final>
		rekey(ctx->key,
   2b7f0:	2220      	movs	r2, #32
   2b7f2:	4621      	mov	r1, r4
   2b7f4:	e7e9      	b.n	2b7ca <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2b7f6:	4608      	mov	r0, r1
   2b7f8:	e7eb      	b.n	2b7d2 <tc_hmac_set_key+0x3c>
   2b7fa:	4610      	mov	r0, r2
   2b7fc:	e7e9      	b.n	2b7d2 <tc_hmac_set_key+0x3c>

0002b7fe <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2b7fe:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2b800:	4604      	mov	r4, r0
   2b802:	b140      	cbz	r0, 2b816 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2b804:	f7e5 fd3a 	bl	1127c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2b808:	2240      	movs	r2, #64	; 0x40
   2b80a:	4620      	mov	r0, r4
   2b80c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2b810:	f7ff ff21 	bl	2b656 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2b814:	2001      	movs	r0, #1
}
   2b816:	bd10      	pop	{r4, pc}

0002b818 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2b818:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2b81a:	b110      	cbz	r0, 2b822 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2b81c:	f7ff ff1b 	bl	2b656 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2b820:	2001      	movs	r0, #1
}
   2b822:	bd08      	pop	{r3, pc}

0002b824 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2b824:	b570      	push	{r4, r5, r6, lr}
   2b826:	460e      	mov	r6, r1
   2b828:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b82a:	4605      	mov	r5, r0
   2b82c:	b1f0      	cbz	r0, 2b86c <tc_hmac_final+0x48>
   2b82e:	2920      	cmp	r1, #32
   2b830:	d11c      	bne.n	2b86c <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2b832:	b1ea      	cbz	r2, 2b870 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2b834:	4611      	mov	r1, r2
   2b836:	f7ff ff34 	bl	2b6a2 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2b83a:	4620      	mov	r0, r4
   2b83c:	f7e5 fd1e 	bl	1127c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2b840:	2240      	movs	r2, #64	; 0x40
   2b842:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2b846:	4620      	mov	r0, r4
   2b848:	f7ff ff05 	bl	2b656 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2b84c:	4632      	mov	r2, r6
   2b84e:	4629      	mov	r1, r5
   2b850:	4620      	mov	r0, r4
   2b852:	f7ff ff00 	bl	2b656 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2b856:	4621      	mov	r1, r4
   2b858:	4628      	mov	r0, r5
   2b85a:	f7ff ff22 	bl	2b6a2 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2b85e:	4620      	mov	r0, r4
   2b860:	22f0      	movs	r2, #240	; 0xf0
   2b862:	2100      	movs	r1, #0
   2b864:	f7ff fcd9 	bl	2b21a <_set>

	return TC_CRYPTO_SUCCESS;
   2b868:	2001      	movs	r0, #1
}
   2b86a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b86c:	2000      	movs	r0, #0
   2b86e:	e7fc      	b.n	2b86a <tc_hmac_final+0x46>
   2b870:	4610      	mov	r0, r2
   2b872:	e7fa      	b.n	2b86a <tc_hmac_final+0x46>

0002b874 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2b874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b878:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2b87a:	f04f 0b01 	mov.w	fp, #1
{
   2b87e:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2b880:	2300      	movs	r3, #0
{
   2b882:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b884:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2b888:	4631      	mov	r1, r6
{
   2b88a:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b88c:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2b88e:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2b892:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2b896:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b89a:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b89e:	f7ff ff7a 	bl	2b796 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2b8a2:	4620      	mov	r0, r4
   2b8a4:	f7ff ffab 	bl	2b7fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b8a8:	2220      	movs	r2, #32
   2b8aa:	4629      	mov	r1, r5
   2b8ac:	4620      	mov	r0, r4
   2b8ae:	f7ff ffb3 	bl	2b818 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2b8b2:	465a      	mov	r2, fp
   2b8b4:	4620      	mov	r0, r4
   2b8b6:	f10d 0106 	add.w	r1, sp, #6
   2b8ba:	f7ff ffad 	bl	2b818 <tc_hmac_update>

	if (data && datalen)
   2b8be:	f1b8 0f00 	cmp.w	r8, #0
   2b8c2:	d007      	beq.n	2b8d4 <update+0x60>
   2b8c4:	f1b9 0f00 	cmp.w	r9, #0
   2b8c8:	d004      	beq.n	2b8d4 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2b8ca:	464a      	mov	r2, r9
   2b8cc:	4641      	mov	r1, r8
   2b8ce:	4620      	mov	r0, r4
   2b8d0:	f7ff ffa2 	bl	2b818 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2b8d4:	b13f      	cbz	r7, 2b8e6 <update+0x72>
   2b8d6:	f1ba 0f00 	cmp.w	sl, #0
   2b8da:	d004      	beq.n	2b8e6 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2b8dc:	4652      	mov	r2, sl
   2b8de:	4639      	mov	r1, r7
   2b8e0:	4620      	mov	r0, r4
   2b8e2:	f7ff ff99 	bl	2b818 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2b8e6:	4622      	mov	r2, r4
   2b8e8:	2120      	movs	r1, #32
   2b8ea:	4630      	mov	r0, r6
   2b8ec:	f7ff ff9a 	bl	2b824 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b8f0:	2220      	movs	r2, #32
   2b8f2:	4631      	mov	r1, r6
   2b8f4:	4620      	mov	r0, r4
   2b8f6:	f7ff ff4e 	bl	2b796 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2b8fa:	4620      	mov	r0, r4
   2b8fc:	f7ff ff7f 	bl	2b7fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b900:	2220      	movs	r2, #32
   2b902:	4629      	mov	r1, r5
   2b904:	4620      	mov	r0, r4
   2b906:	f7ff ff87 	bl	2b818 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b90a:	4622      	mov	r2, r4
   2b90c:	2120      	movs	r1, #32
   2b90e:	4628      	mov	r0, r5
   2b910:	f7ff ff88 	bl	2b824 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2b914:	f1b8 0f00 	cmp.w	r8, #0
   2b918:	d03a      	beq.n	2b990 <update+0x11c>
   2b91a:	f1b9 0f00 	cmp.w	r9, #0
   2b91e:	d037      	beq.n	2b990 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b920:	2220      	movs	r2, #32
   2b922:	4631      	mov	r1, r6
   2b924:	4620      	mov	r0, r4
   2b926:	f7ff ff36 	bl	2b796 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2b92a:	4620      	mov	r0, r4
   2b92c:	f7ff ff67 	bl	2b7fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b930:	2220      	movs	r2, #32
   2b932:	4629      	mov	r1, r5
   2b934:	4620      	mov	r0, r4
   2b936:	f7ff ff6f 	bl	2b818 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2b93a:	2201      	movs	r2, #1
   2b93c:	f10d 0107 	add.w	r1, sp, #7
   2b940:	4620      	mov	r0, r4
   2b942:	f7ff ff69 	bl	2b818 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2b946:	464a      	mov	r2, r9
   2b948:	4641      	mov	r1, r8
   2b94a:	4620      	mov	r0, r4
   2b94c:	f7ff ff64 	bl	2b818 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2b950:	b13f      	cbz	r7, 2b962 <update+0xee>
   2b952:	f1ba 0f00 	cmp.w	sl, #0
   2b956:	d004      	beq.n	2b962 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2b958:	4652      	mov	r2, sl
   2b95a:	4639      	mov	r1, r7
   2b95c:	4620      	mov	r0, r4
   2b95e:	f7ff ff5b 	bl	2b818 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2b962:	4622      	mov	r2, r4
   2b964:	2120      	movs	r1, #32
   2b966:	4630      	mov	r0, r6
   2b968:	f7ff ff5c 	bl	2b824 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2b96c:	2220      	movs	r2, #32
   2b96e:	4631      	mov	r1, r6
   2b970:	4620      	mov	r0, r4
   2b972:	f7ff ff10 	bl	2b796 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2b976:	4620      	mov	r0, r4
   2b978:	f7ff ff41 	bl	2b7fe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2b97c:	2220      	movs	r2, #32
   2b97e:	4629      	mov	r1, r5
   2b980:	4620      	mov	r0, r4
   2b982:	f7ff ff49 	bl	2b818 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2b986:	4622      	mov	r2, r4
   2b988:	2120      	movs	r1, #32
   2b98a:	4628      	mov	r0, r5
   2b98c:	f7ff ff4a 	bl	2b824 <tc_hmac_final>
}
   2b990:	b003      	add	sp, #12
   2b992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b996 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2b996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b998:	460c      	mov	r4, r1
   2b99a:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2b99c:	4605      	mov	r5, r0
   2b99e:	b1b0      	cbz	r0, 2b9ce <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2b9a0:	b1b9      	cbz	r1, 2b9d2 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2b9a2:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2b9a4:	2220      	movs	r2, #32
   2b9a6:	2100      	movs	r1, #0
   2b9a8:	30f0      	adds	r0, #240	; 0xf0
   2b9aa:	f7ff fc36 	bl	2b21a <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2b9ae:	2220      	movs	r2, #32
   2b9b0:	2101      	movs	r1, #1
   2b9b2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2b9b6:	f7ff fc30 	bl	2b21a <_set>
	update(prng, personalization, plen, 0, 0);
   2b9ba:	4628      	mov	r0, r5
   2b9bc:	4633      	mov	r3, r6
   2b9be:	463a      	mov	r2, r7
   2b9c0:	4621      	mov	r1, r4
   2b9c2:	9600      	str	r6, [sp, #0]
   2b9c4:	f7ff ff56 	bl	2b874 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2b9c8:	2001      	movs	r0, #1
	prng->countdown = 0;
   2b9ca:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2b9ce:	b003      	add	sp, #12
   2b9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b9d2:	4608      	mov	r0, r1
   2b9d4:	e7fb      	b.n	2b9ce <tc_hmac_prng_init+0x38>

0002b9d6 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2b9d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b9d8:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2b9da:	4605      	mov	r5, r0
   2b9dc:	b180      	cbz	r0, 2ba00 <tc_hmac_prng_reseed+0x2a>
   2b9de:	b179      	cbz	r1, 2ba00 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2b9e0:	2a1f      	cmp	r2, #31
   2b9e2:	d90d      	bls.n	2ba00 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2b9e4:	b153      	cbz	r3, 2b9fc <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2b9e6:	b16c      	cbz	r4, 2ba04 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2b9e8:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2b9ea:	f7ff ff43 	bl	2b874 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2b9ee:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2b9f2:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2b9f4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2b9f8:	b003      	add	sp, #12
   2b9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2b9fc:	9300      	str	r3, [sp, #0]
   2b9fe:	e7f4      	b.n	2b9ea <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2ba00:	2000      	movs	r0, #0
   2ba02:	e7f9      	b.n	2b9f8 <tc_hmac_prng_reseed+0x22>
   2ba04:	4620      	mov	r0, r4
   2ba06:	e7f7      	b.n	2b9f8 <tc_hmac_prng_reseed+0x22>

0002ba08 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2ba08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2ba0c:	460d      	mov	r5, r1
   2ba0e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2ba10:	4680      	mov	r8, r0
   2ba12:	b3d8      	cbz	r0, 2ba8c <tc_hmac_prng_generate+0x84>
   2ba14:	b3d2      	cbz	r2, 2ba8c <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2ba16:	1e4b      	subs	r3, r1, #1
   2ba18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2ba1c:	d236      	bcs.n	2ba8c <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2ba1e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2ba22:	b3ab      	cbz	r3, 2ba90 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2ba24:	3b01      	subs	r3, #1
   2ba26:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2ba2a:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2ba2e:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2ba32:	2220      	movs	r2, #32
   2ba34:	4649      	mov	r1, r9
   2ba36:	4620      	mov	r0, r4
   2ba38:	f7ff fead 	bl	2b796 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2ba3c:	4620      	mov	r0, r4
   2ba3e:	f7ff fede 	bl	2b7fe <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2ba42:	2220      	movs	r2, #32
   2ba44:	4639      	mov	r1, r7
   2ba46:	4620      	mov	r0, r4
   2ba48:	f7ff fee6 	bl	2b818 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2ba4c:	4622      	mov	r2, r4
   2ba4e:	2120      	movs	r1, #32
   2ba50:	4638      	mov	r0, r7
   2ba52:	f7ff fee7 	bl	2b824 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2ba56:	2d20      	cmp	r5, #32
   2ba58:	462e      	mov	r6, r5
   2ba5a:	bf28      	it	cs
   2ba5c:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2ba5e:	4640      	mov	r0, r8
   2ba60:	4633      	mov	r3, r6
   2ba62:	463a      	mov	r2, r7
   2ba64:	4631      	mov	r1, r6
   2ba66:	f7ff fbcb 	bl	2b200 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2ba6a:	2d20      	cmp	r5, #32
   2ba6c:	bf38      	it	cc
   2ba6e:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2ba70:	3d20      	subs	r5, #32
		out += bufferlen;
   2ba72:	44b0      	add	r8, r6
	while (outlen != 0) {
   2ba74:	d1dd      	bne.n	2ba32 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2ba76:	4620      	mov	r0, r4
   2ba78:	462b      	mov	r3, r5
   2ba7a:	462a      	mov	r2, r5
   2ba7c:	4629      	mov	r1, r5
   2ba7e:	9500      	str	r5, [sp, #0]
   2ba80:	f7ff fef8 	bl	2b874 <update>

	return TC_CRYPTO_SUCCESS;
   2ba84:	2001      	movs	r0, #1
}
   2ba86:	b003      	add	sp, #12
   2ba88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2ba8c:	2000      	movs	r0, #0
   2ba8e:	e7fa      	b.n	2ba86 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2ba90:	f04f 30ff 	mov.w	r0, #4294967295
   2ba94:	e7f7      	b.n	2ba86 <tc_hmac_prng_generate+0x7e>

0002ba96 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2ba96:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2ba98:	ab0b      	add	r3, sp, #44	; 0x2c
   2ba9a:	9305      	str	r3, [sp, #20]
   2ba9c:	9303      	str	r3, [sp, #12]
   2ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2baa0:	2201      	movs	r2, #1
   2baa2:	9302      	str	r3, [sp, #8]
   2baa4:	2300      	movs	r3, #0
   2baa6:	4618      	mov	r0, r3
   2baa8:	e9cd 3300 	strd	r3, r3, [sp]
   2baac:	f7e3 fe36 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2bab0:	b007      	add	sp, #28
   2bab2:	f85d fb04 	ldr.w	pc, [sp], #4

0002bab6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2bab6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bab8:	6800      	ldr	r0, [r0, #0]
   2baba:	f7e5 bc29 	b.w	11310 <z_arm_fatal_error>

0002babe <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2babe:	2100      	movs	r1, #0
   2bac0:	2001      	movs	r0, #1
   2bac2:	f7e5 bc25 	b.w	11310 <z_arm_fatal_error>

0002bac6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2bac6:	b508      	push	{r3, lr}
	handler();
   2bac8:	f7e5 fcb8 	bl	1143c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2bacc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2bad0:	f7e5 bd88 	b.w	115e4 <z_arm_exc_exit>

0002bad4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2bad4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2bad8:	f383 880b 	msr	PSPLIM, r3
}
   2badc:	4770      	bx	lr

0002bade <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bade:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bae0:	ab0b      	add	r3, sp, #44	; 0x2c
   2bae2:	9305      	str	r3, [sp, #20]
   2bae4:	9303      	str	r3, [sp, #12]
   2bae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bae8:	2201      	movs	r2, #1
   2baea:	9302      	str	r3, [sp, #8]
   2baec:	2300      	movs	r3, #0
   2baee:	4618      	mov	r0, r3
   2baf0:	e9cd 3300 	strd	r3, r3, [sp]
   2baf4:	f7e3 fe12 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2baf8:	b007      	add	sp, #28
   2bafa:	f85d fb04 	ldr.w	pc, [sp], #4

0002bafe <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2bafe:	4770      	bx	lr

0002bb00 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2bb00:	4770      	bx	lr

0002bb02 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2bb02:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2bb06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2bb0a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2bb0c:	bf08      	it	eq
   2bb0e:	f06f 0015 	mvneq.w	r0, #21
   2bb12:	4770      	bx	lr

0002bb14 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bb14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bb16:	ab0b      	add	r3, sp, #44	; 0x2c
   2bb18:	9305      	str	r3, [sp, #20]
   2bb1a:	9303      	str	r3, [sp, #12]
   2bb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bb1e:	2201      	movs	r2, #1
   2bb20:	9302      	str	r3, [sp, #8]
   2bb22:	2300      	movs	r3, #0
   2bb24:	4618      	mov	r0, r3
   2bb26:	e9cd 3300 	strd	r3, r3, [sp]
   2bb2a:	f7e3 fdf7 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2bb2e:	b007      	add	sp, #28
   2bb30:	f85d fb04 	ldr.w	pc, [sp], #4

0002bb34 <mpu_configure_region>:
{
   2bb34:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
   2bb36:	680c      	ldr	r4, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2bb38:	684b      	ldr	r3, [r1, #4]
{
   2bb3a:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   2bb3c:	890a      	ldrh	r2, [r1, #8]
   2bb3e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2bb40:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2bb42:	3b01      	subs	r3, #1
   2bb44:	f024 041f 	bic.w	r4, r4, #31
   2bb48:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2bb4a:	f002 021f 	and.w	r2, r2, #31
   2bb4e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2bb52:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   2bb56:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   2bb58:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2bb5c:	9303      	str	r3, [sp, #12]
   2bb5e:	f7e6 f8ef 	bl	11d40 <region_allocate_and_init>
}
   2bb62:	b005      	add	sp, #20
   2bb64:	bd30      	pop	{r4, r5, pc}

0002bb66 <malloc_prepare>:
}
   2bb66:	2000      	movs	r0, #0
   2bb68:	4770      	bx	lr

0002bb6a <_stdout_hook_default>:
}
   2bb6a:	f04f 30ff 	mov.w	r0, #4294967295
   2bb6e:	4770      	bx	lr

0002bb70 <_stdin_hook_default>:
}
   2bb70:	2000      	movs	r0, #0
   2bb72:	4770      	bx	lr

0002bb74 <_read>:
{
   2bb74:	4608      	mov	r0, r1
   2bb76:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2bb78:	f7e6 ba5e 	b.w	12038 <z_impl_zephyr_read_stdin>

0002bb7c <_write>:
{
   2bb7c:	4608      	mov	r0, r1
   2bb7e:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bb80:	f7e6 ba6e 	b.w	12060 <z_impl_zephyr_write_stdout>

0002bb84 <_close>:
int _close(int file)
   2bb84:	f04f 30ff 	mov.w	r0, #4294967295
   2bb88:	4770      	bx	lr

0002bb8a <_lseek>:
}
   2bb8a:	2000      	movs	r0, #0
   2bb8c:	4770      	bx	lr

0002bb8e <_isatty>:
}
   2bb8e:	2802      	cmp	r0, #2
   2bb90:	bfcc      	ite	gt
   2bb92:	2000      	movgt	r0, #0
   2bb94:	2001      	movle	r0, #1
   2bb96:	4770      	bx	lr

0002bb98 <_kill>:
}
   2bb98:	2000      	movs	r0, #0
   2bb9a:	4770      	bx	lr

0002bb9c <_getpid>:
}
   2bb9c:	2000      	movs	r0, #0
   2bb9e:	4770      	bx	lr

0002bba0 <_fstat>:
	st->st_mode = S_IFCHR;
   2bba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2bba4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2bba6:	604b      	str	r3, [r1, #4]
}
   2bba8:	4770      	bx	lr

0002bbaa <__retarget_lock_init_recursive>:
{
   2bbaa:	b510      	push	{r4, lr}
   2bbac:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   2bbae:	2014      	movs	r0, #20
   2bbb0:	f7fb f948 	bl	26e44 <malloc>
   2bbb4:	6020      	str	r0, [r4, #0]
}
   2bbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   2bbba:	f005 ba48 	b.w	3104e <z_impl_k_mutex_init>

0002bbbe <__retarget_lock_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2bbbe:	f04f 32ff 	mov.w	r2, #4294967295
   2bbc2:	f04f 33ff 	mov.w	r3, #4294967295
   2bbc6:	f7fa b8ab 	b.w	25d20 <z_impl_k_sem_take>

0002bbca <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2bbca:	f04f 32ff 	mov.w	r2, #4294967295
   2bbce:	f04f 33ff 	mov.w	r3, #4294967295
   2bbd2:	f7f9 bf93 	b.w	25afc <z_impl_k_mutex_lock>

0002bbd6 <__retarget_lock_release>:
	z_impl_k_sem_give(sem);
   2bbd6:	f7fa b87d 	b.w	25cd4 <z_impl_k_sem_give>

0002bbda <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   2bbda:	f7fa b809 	b.w	25bf0 <z_impl_k_mutex_unlock>

0002bbde <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2bbde:	f7f9 bced 	b.w	255bc <z_impl_z_errno>

0002bbe2 <mac_process_notify>:
	LoRaMacProcess();
   2bbe2:	f7ea bb8b 	b.w	162fc <LoRaMacProcess>

0002bbe6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bbe6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bbe8:	ab0b      	add	r3, sp, #44	; 0x2c
   2bbea:	9305      	str	r3, [sp, #20]
   2bbec:	9303      	str	r3, [sp, #12]
   2bbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bbf0:	9302      	str	r3, [sp, #8]
   2bbf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bbf4:	9301      	str	r3, [sp, #4]
   2bbf6:	2300      	movs	r3, #0
   2bbf8:	4618      	mov	r0, r3
   2bbfa:	9300      	str	r3, [sp, #0]
   2bbfc:	f7e3 fd8e 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2bc00:	b007      	add	sp, #28
   2bc02:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc06 <BoardGetUniqueId>:
}
   2bc06:	4770      	bx	lr

0002bc08 <lorawan_get_payload_sizes>:
{
   2bc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bc0a:	4605      	mov	r5, r0
   2bc0c:	460c      	mov	r4, r1
	(void) LoRaMacQueryTxPossible(0, &tx_info);
   2bc0e:	2000      	movs	r0, #0
   2bc10:	a901      	add	r1, sp, #4
   2bc12:	f7eb fa93 	bl	1713c <LoRaMacQueryTxPossible>
	*max_next_payload_size = tx_info.MaxPossibleApplicationDataSize;
   2bc16:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2bc1a:	702b      	strb	r3, [r5, #0]
	*max_payload_size = tx_info.CurrentPossiblePayloadSize;
   2bc1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2bc20:	7023      	strb	r3, [r4, #0]
}
   2bc22:	b003      	add	sp, #12
   2bc24:	bd30      	pop	{r4, r5, pc}

0002bc26 <lorawan_set_conf_msg_tries>:
	mib_req.Type = MIB_CHANNELS_NB_TRANS;
   2bc26:	2325      	movs	r3, #37	; 0x25
{
   2bc28:	b500      	push	{lr}
   2bc2a:	b08b      	sub	sp, #44	; 0x2c
	mib_req.Param.ChannelsNbTrans = tries;
   2bc2c:	f88d 0004 	strb.w	r0, [sp, #4]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
   2bc30:	4668      	mov	r0, sp
	mib_req.Type = MIB_CHANNELS_NB_TRANS;
   2bc32:	f88d 3000 	strb.w	r3, [sp]
	if (LoRaMacMibSetRequestConfirm(&mib_req) != LORAMAC_STATUS_OK) {
   2bc36:	f7eb fbc3 	bl	173c0 <LoRaMacMibSetRequestConfirm>
	return 0;
   2bc3a:	2800      	cmp	r0, #0
}
   2bc3c:	bf14      	ite	ne
   2bc3e:	f06f 0015 	mvnne.w	r0, #21
   2bc42:	2000      	moveq	r0, #0
   2bc44:	b00b      	add	sp, #44	; 0x2c
   2bc46:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc4a <timer_work_handler>:
	TimerIrqHandler();
   2bc4a:	f7e7 bb8b 	b.w	13364 <TimerIrqHandler>

0002bc4e <k_uptime_get_32>:
{
   2bc4e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   2bc50:	f005 fd0d 	bl	3166e <z_impl_k_uptime_ticks>
   2bc54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bc58:	fba0 0302 	umull	r0, r3, r0, r2
   2bc5c:	fb02 3301 	mla	r3, r2, r1, r3
   2bc60:	0bc0      	lsrs	r0, r0, #15
}
   2bc62:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2bc66:	bd08      	pop	{r3, pc}

0002bc68 <RtcGetCalendarTime>:
{
   2bc68:	b538      	push	{r3, r4, r5, lr}
   2bc6a:	4605      	mov	r5, r0
   2bc6c:	f005 fcff 	bl	3166e <z_impl_k_uptime_ticks>
   2bc70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bc74:	fba0 4302 	umull	r4, r3, r0, r2
   2bc78:	fb02 3101 	mla	r1, r2, r1, r3
   2bc7c:	0be4      	lsrs	r4, r4, #15
   2bc7e:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
   2bc82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bc86:	2300      	movs	r3, #0
   2bc88:	0bc9      	lsrs	r1, r1, #15
   2bc8a:	f7dd f909 	bl	8ea0 <__aeabi_ldivmod>
	*milliseconds = now % MSEC_PER_SEC;
   2bc8e:	802a      	strh	r2, [r5, #0]
}
   2bc90:	bd38      	pop	{r3, r4, r5, pc}

0002bc92 <RtcGetTimerValue>:
	return k_uptime_get_32();
   2bc92:	f7ff bfdc 	b.w	2bc4e <k_uptime_get_32>

0002bc96 <RtcGetMinimumTimeout>:
}
   2bc96:	2001      	movs	r0, #1
   2bc98:	4770      	bx	lr

0002bc9a <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   2bc9a:	4601      	mov	r1, r0
   2bc9c:	f240 30e7 	movw	r0, #999	; 0x3e7
   2bca0:	b508      	push	{r3, lr}
   2bca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2bca6:	2300      	movs	r3, #0
   2bca8:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2bcac:	0c49      	lsrs	r1, r1, #17
   2bcae:	f7dd f947 	bl	8f40 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   2bcb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   2bcb6:	f7fa bd31 	b.w	2671c <z_impl_k_sleep>

0002bcba <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   2bcba:	4770      	bx	lr

0002bcbc <RtcTick2Ms>:

uint32_t RtcTick2Ms(uint32_t tick)
   2bcbc:	4770      	bx	lr

0002bcbe <BoardCriticalSectionBegin>:
	__asm__ volatile(
   2bcbe:	f04f 0220 	mov.w	r2, #32
   2bcc2:	f3ef 8311 	mrs	r3, BASEPRI
   2bcc6:	f382 8812 	msr	BASEPRI_MAX, r2
   2bcca:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   2bcce:	6003      	str	r3, [r0, #0]
}
   2bcd0:	4770      	bx	lr

0002bcd2 <BoardCriticalSectionEnd>:
	__asm__ volatile(
   2bcd2:	6803      	ldr	r3, [r0, #0]
   2bcd4:	f383 8811 	msr	BASEPRI, r3
   2bcd8:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   2bcdc:	4770      	bx	lr

0002bcde <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bcde:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bce0:	ab0b      	add	r3, sp, #44	; 0x2c
   2bce2:	9305      	str	r3, [sp, #20]
   2bce4:	9303      	str	r3, [sp, #12]
   2bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bce8:	9302      	str	r3, [sp, #8]
   2bcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2bcec:	9301      	str	r3, [sp, #4]
   2bcee:	2300      	movs	r3, #0
   2bcf0:	4618      	mov	r0, r3
   2bcf2:	9300      	str	r3, [sp, #0]
   2bcf4:	f7e3 fd12 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2bcf8:	b007      	add	sp, #28
   2bcfa:	f85d fb04 	ldr.w	pc, [sp], #4

0002bcfe <SX1276CheckRfFrequency>:
}
   2bcfe:	2001      	movs	r0, #1
   2bd00:	4770      	bx	lr

0002bd02 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2bd02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2bd04:	ab0b      	add	r3, sp, #44	; 0x2c
   2bd06:	9305      	str	r3, [sp, #20]
   2bd08:	9303      	str	r3, [sp, #12]
   2bd0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bd0c:	9302      	str	r3, [sp, #8]
   2bd0e:	2300      	movs	r3, #0
   2bd10:	4618      	mov	r0, r3
   2bd12:	e9cd 3300 	strd	r3, r3, [sp]
   2bd16:	f7e3 fd01 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2bd1a:	b007      	add	sp, #28
   2bd1c:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd20 <SX1276GetBoardTcxoWakeupTime>:
}
   2bd20:	2000      	movs	r0, #0
   2bd22:	4770      	bx	lr

0002bd24 <SX1276SetAntSwLowPower>:
}
   2bd24:	4770      	bx	lr

0002bd26 <SX1276SetBoardTcxo>:
}
   2bd26:	4770      	bx	lr

0002bd28 <SX1276SetAntSw>:
void SX127xSetAntSw(uint8_t opMode)
   2bd28:	4770      	bx	lr

0002bd2a <SX1276Reset>:
{
   2bd2a:	b508      	push	{r3, lr}
	gpio_pin_set_dt(&dev_config.reset, 1);
   2bd2c:	2001      	movs	r0, #1
   2bd2e:	f7e7 f8bb 	bl	12ea8 <gpio_pin_set_dt.constprop.0.isra.0>
   2bd32:	2100      	movs	r1, #0
   2bd34:	2021      	movs	r0, #33	; 0x21
   2bd36:	f7fa fcf1 	bl	2671c <z_impl_k_sleep>
	gpio_pin_set_dt(&dev_config.reset, 0);
   2bd3a:	2000      	movs	r0, #0
   2bd3c:	f7e7 f8b4 	bl	12ea8 <gpio_pin_set_dt.constprop.0.isra.0>
}
   2bd40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2bd44:	20c5      	movs	r0, #197	; 0xc5
   2bd46:	2100      	movs	r1, #0
   2bd48:	f7fa bce8 	b.w	2671c <z_impl_k_sleep>

0002bd4c <randr>:
{
   2bd4c:	b538      	push	{r3, r4, r5, lr}
   2bd4e:	4605      	mov	r5, r0
   2bd50:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
   2bd52:	f7e7 fa8f 	bl	13274 <rand1>
   2bd56:	1b61      	subs	r1, r4, r5
   2bd58:	3101      	adds	r1, #1
   2bd5a:	fb90 f3f1 	sdiv	r3, r0, r1
   2bd5e:	fb03 0011 	mls	r0, r3, r1, r0
}
   2bd62:	4428      	add	r0, r5
   2bd64:	bd38      	pop	{r3, r4, r5, pc}

0002bd66 <memcpy1>:
    while( size-- )
   2bd66:	3801      	subs	r0, #1
   2bd68:	440a      	add	r2, r1
   2bd6a:	4291      	cmp	r1, r2
   2bd6c:	d100      	bne.n	2bd70 <memcpy1+0xa>
}
   2bd6e:	4770      	bx	lr
        *dst++ = *src++;
   2bd70:	f811 3b01 	ldrb.w	r3, [r1], #1
   2bd74:	f800 3f01 	strb.w	r3, [r0, #1]!
   2bd78:	e7f7      	b.n	2bd6a <memcpy1+0x4>

0002bd7a <memcpyr>:
    while( size-- )
   2bd7a:	4410      	add	r0, r2
   2bd7c:	440a      	add	r2, r1
   2bd7e:	4291      	cmp	r1, r2
   2bd80:	d100      	bne.n	2bd84 <memcpyr+0xa>
}
   2bd82:	4770      	bx	lr
        *dst-- = *src++;
   2bd84:	f811 3b01 	ldrb.w	r3, [r1], #1
   2bd88:	f800 3d01 	strb.w	r3, [r0, #-1]!
   2bd8c:	e7f7      	b.n	2bd7e <memcpyr+0x4>

0002bd8e <memset1>:
    while( size-- )
   2bd8e:	4402      	add	r2, r0
   2bd90:	4290      	cmp	r0, r2
   2bd92:	d100      	bne.n	2bd96 <memset1+0x8>
}
   2bd94:	4770      	bx	lr
        *dst++ = value;
   2bd96:	f800 1b01 	strb.w	r1, [r0], #1
   2bd9a:	e7f9      	b.n	2bd90 <memset1+0x2>

0002bd9c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
   2bd9c:	b082      	sub	sp, #8
   2bd9e:	b082      	sub	sp, #8
   2bda0:	f10d 0c08 	add.w	ip, sp, #8
   2bda4:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bda8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
   2bdac:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
   2bdae:	440b      	add	r3, r1
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bdb0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bdb4:	440a      	add	r2, r1
   2bdb6:	b291      	uxth	r1, r2
   2bdb8:	b212      	sxth	r2, r2
    if( c.SubSeconds >= 1000 )
   2bdba:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
   2bdbe:	bfa2      	ittt	ge
   2bdc0:	f5a1 727a 	subge.w	r2, r1, #1000	; 0x3e8
        c.Seconds++;
   2bdc4:	3301      	addge	r3, #1
        c.SubSeconds -= 1000;
   2bdc6:	b212      	sxthge	r2, r2
    }
    return c;
   2bdc8:	6003      	str	r3, [r0, #0]
   2bdca:	8082      	strh	r2, [r0, #4]
}
   2bdcc:	b002      	add	sp, #8
   2bdce:	b002      	add	sp, #8
   2bdd0:	4770      	bx	lr

0002bdd2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
   2bdd2:	b082      	sub	sp, #8
   2bdd4:	b082      	sub	sp, #8
   2bdd6:	f10d 0c08 	add.w	ip, sp, #8
   2bdda:	e90c 0006 	stmdb	ip, {r1, r2}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bdde:	f8bd 2004 	ldrh.w	r2, [sp, #4]
{
   2bde2:	9303      	str	r3, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
   2bde4:	1acb      	subs	r3, r1, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bde6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bdea:	1a52      	subs	r2, r2, r1
   2bdec:	b291      	uxth	r1, r2
   2bdee:	b212      	sxth	r2, r2
    if( c.SubSeconds < 0 )
   2bdf0:	2a00      	cmp	r2, #0
    {
        c.Seconds--;
        c.SubSeconds += 1000;
   2bdf2:	bfbe      	ittt	lt
   2bdf4:	f501 727a 	addlt.w	r2, r1, #1000	; 0x3e8
        c.Seconds--;
   2bdf8:	f103 33ff 	addlt.w	r3, r3, #4294967295
        c.SubSeconds += 1000;
   2bdfc:	b212      	sxthlt	r2, r2
    }
    return c;
   2bdfe:	6003      	str	r3, [r0, #0]
   2be00:	8082      	strh	r2, [r0, #4]
}
   2be02:	b002      	add	sp, #8
   2be04:	b002      	add	sp, #8
   2be06:	4770      	bx	lr

0002be08 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
   2be08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2be0a:	466b      	mov	r3, sp
   2be0c:	e883 0003 	stmia.w	r3, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2be10:	2300      	movs	r3, #0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be12:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2be14:	9302      	str	r3, [sp, #8]
   2be16:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be1a:	f7ff ff25 	bl	2bc68 <RtcGetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
   2be1e:	9b00      	ldr	r3, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2be20:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be24:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
   2be26:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2be28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2be2c:	1ac9      	subs	r1, r1, r3
   2be2e:	b28b      	uxth	r3, r1
   2be30:	b209      	sxth	r1, r1
    if( c.SubSeconds < 0 )
   2be32:	2900      	cmp	r1, #0
        c.SubSeconds += 1000;
   2be34:	bfbe      	ittt	lt
   2be36:	f503 737a 	addlt.w	r3, r3, #1000	; 0x3e8
        c.Seconds--;
   2be3a:	f100 30ff 	addlt.w	r0, r0, #4294967295
        c.SubSeconds += 1000;
   2be3e:	b219      	sxthlt	r1, r3

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
   2be40:	f7e6 fd3a 	bl	128b8 <RtcBkupWrite>
}
   2be44:	b005      	add	sp, #20
   2be46:	f85d fb04 	ldr.w	pc, [sp], #4

0002be4a <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
   2be4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2be4c:	2300      	movs	r3, #0
{
   2be4e:	4604      	mov	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be50:	a803      	add	r0, sp, #12
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2be52:	9302      	str	r3, [sp, #8]
   2be54:	f8ad 300c 	strh.w	r3, [sp, #12]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be58:	f7ff ff06 	bl	2bc68 <RtcGetCalendarTime>

    RtcBkupRead( &seconds, &subSeconds );
   2be5c:	a901      	add	r1, sp, #4
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be5e:	9002      	str	r0, [sp, #8]
    RtcBkupRead( &seconds, &subSeconds );
   2be60:	4668      	mov	r0, sp
   2be62:	f7e6 fd2f 	bl	128c4 <RtcBkupRead>
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    sysTime = SysTimeAdd( deltaTime, calendarTime );

    return sysTime;
}
   2be66:	4620      	mov	r0, r4
    c.Seconds = a.Seconds + b.Seconds;
   2be68:	9b02      	ldr	r3, [sp, #8]
   2be6a:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2be6c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c.Seconds = a.Seconds + b.Seconds;
   2be70:	441a      	add	r2, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2be72:	9b01      	ldr	r3, [sp, #4]
   2be74:	440b      	add	r3, r1
   2be76:	b299      	uxth	r1, r3
   2be78:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
   2be7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
   2be7e:	bfa2      	ittt	ge
   2be80:	f5a1 737a 	subge.w	r3, r1, #1000	; 0x3e8
        c.Seconds++;
   2be84:	3201      	addge	r2, #1
        c.SubSeconds -= 1000;
   2be86:	b21b      	sxthge	r3, r3
    return sysTime;
   2be88:	6022      	str	r2, [r4, #0]
   2be8a:	80a3      	strh	r3, [r4, #4]
}
   2be8c:	b004      	add	sp, #16
   2be8e:	bd10      	pop	{r4, pc}

0002be90 <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2be90:	2300      	movs	r3, #0
{
   2be92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2be94:	4604      	mov	r4, r0

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be96:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
   2be98:	9300      	str	r3, [sp, #0]
   2be9a:	f8ad 3004 	strh.w	r3, [sp, #4]
    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
   2be9e:	f7ff fee3 	bl	2bc68 <RtcGetCalendarTime>
   2bea2:	466d      	mov	r5, sp
   2bea4:	9000      	str	r0, [sp, #0]

    return calendarTime;
   2bea6:	e895 0003 	ldmia.w	r5, {r0, r1}
   2beaa:	e884 0003 	stmia.w	r4, {r0, r1}
}
   2beae:	4620      	mov	r0, r4
   2beb0:	b003      	add	sp, #12
   2beb2:	bd30      	pop	{r4, r5, pc}

0002beb4 <SysTimeToMs>:

TimerTime_t SysTimeToMs( SysTime_t sysTime )
{
   2beb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2beb6:	466b      	mov	r3, sp
   2beb8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
   2bebc:	a903      	add	r1, sp, #12
   2bebe:	a802      	add	r0, sp, #8
   2bec0:	f7e6 fd00 	bl	128c4 <RtcBkupRead>
    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );

    return ( TimerTime_t )( calendarTime.Seconds * 1000 + calendarTime.SubSeconds );
}
   2bec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c.Seconds = a.Seconds - b.Seconds;
   2bec8:	9b02      	ldr	r3, [sp, #8]
   2beca:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2becc:	9903      	ldr	r1, [sp, #12]
    c.Seconds = a.Seconds - b.Seconds;
   2bece:	1ad2      	subs	r2, r2, r3
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
   2bed0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2bed4:	1a5b      	subs	r3, r3, r1
   2bed6:	b299      	uxth	r1, r3
   2bed8:	b21b      	sxth	r3, r3
    if( c.SubSeconds < 0 )
   2beda:	2b00      	cmp	r3, #0
        c.SubSeconds += 1000;
   2bedc:	bfbe      	ittt	lt
   2bede:	f501 717a 	addlt.w	r1, r1, #1000	; 0x3e8
        c.Seconds--;
   2bee2:	f102 32ff 	addlt.w	r2, r2, #4294967295
        c.SubSeconds += 1000;
   2bee6:	b20b      	sxthlt	r3, r1
}
   2bee8:	fb00 3002 	mla	r0, r0, r2, r3
   2beec:	b005      	add	sp, #20
   2beee:	f85d fb04 	ldr.w	pc, [sp], #4

0002bef2 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( TimerTime_t timeMs )
{
    uint32_t seconds = timeMs / 1000;
   2bef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
   2bef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t seconds = timeMs / 1000;
   2bef8:	fbb1 f4f3 	udiv	r4, r1, r3
{
   2befc:	4606      	mov	r6, r0
   2befe:	fb03 1514 	mls	r5, r3, r4, r1
    uint32_t subSeconds = timeMs - seconds * 1000;
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    RtcBkupRead( &seconds, &subSeconds );
   2bf02:	4668      	mov	r0, sp
   2bf04:	a901      	add	r1, sp, #4
    uint32_t seconds = timeMs / 1000;
   2bf06:	9400      	str	r4, [sp, #0]
    uint32_t subSeconds = timeMs - seconds * 1000;
   2bf08:	9501      	str	r5, [sp, #4]
    RtcBkupRead( &seconds, &subSeconds );
   2bf0a:	f7e6 fcdb 	bl	128c4 <RtcBkupRead>

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };

    return SysTimeAdd( sysTime, deltaTime );
}
   2bf0e:	4630      	mov	r0, r6
    c.Seconds = a.Seconds + b.Seconds;
   2bf10:	9b00      	ldr	r3, [sp, #0]
   2bf12:	441c      	add	r4, r3
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
   2bf14:	9b01      	ldr	r3, [sp, #4]
   2bf16:	442b      	add	r3, r5
   2bf18:	b29a      	uxth	r2, r3
   2bf1a:	b21b      	sxth	r3, r3
    if( c.SubSeconds >= 1000 )
   2bf1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        c.SubSeconds -= 1000;
   2bf20:	bfa2      	ittt	ge
   2bf22:	f5a2 737a 	subge.w	r3, r2, #1000	; 0x3e8
        c.Seconds++;
   2bf26:	3401      	addge	r4, #1
        c.SubSeconds -= 1000;
   2bf28:	b21b      	sxthge	r3, r3
    return c;
   2bf2a:	6034      	str	r4, [r6, #0]
   2bf2c:	80b3      	strh	r3, [r6, #4]
}
   2bf2e:	b002      	add	sp, #8
   2bf30:	bd70      	pop	{r4, r5, r6, pc}

0002bf32 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   2bf32:	b570      	push	{r4, r5, r6, lr}
   2bf34:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   2bf36:	f7ff feae 	bl	2bc96 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   2bf3a:	2301      	movs	r3, #1
   2bf3c:	7263      	strb	r3, [r4, #9]
    int32_t minTicks= RtcGetMinimumTimeout( );
   2bf3e:	4605      	mov	r5, r0

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   2bf40:	6826      	ldr	r6, [r4, #0]
   2bf42:	f7e6 fcc7 	bl	128d4 <RtcGetTimerElapsedTime>
   2bf46:	4428      	add	r0, r5
   2bf48:	4286      	cmp	r6, r0
   2bf4a:	d203      	bcs.n	2bf54 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   2bf4c:	f7e6 fcc2 	bl	128d4 <RtcGetTimerElapsedTime>
   2bf50:	4405      	add	r5, r0
   2bf52:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   2bf54:	6820      	ldr	r0, [r4, #0]
}
   2bf56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   2bf5a:	f7e6 bccb 	b.w	128f4 <RtcSetAlarm>

0002bf5e <TimerInit>:
    obj->Timestamp = 0;
   2bf5e:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   2bf60:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   2bf64:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   2bf68:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   2bf6a:	6143      	str	r3, [r0, #20]
}
   2bf6c:	4770      	bx	lr

0002bf6e <TimerSetValue>:
{
   2bf6e:	b538      	push	{r3, r4, r5, lr}
   2bf70:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   2bf72:	4608      	mov	r0, r1
   2bf74:	f7ff fea1 	bl	2bcba <RtcMs2Tick>
   2bf78:	4604      	mov	r4, r0
    TimerStop( obj );
   2bf7a:	4628      	mov	r0, r5
   2bf7c:	f7e7 fa30 	bl	133e0 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   2bf80:	f7ff fe89 	bl	2bc96 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   2bf84:	42a0      	cmp	r0, r4
   2bf86:	bf38      	it	cc
   2bf88:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   2bf8a:	e9c5 0000 	strd	r0, r0, [r5]
}
   2bf8e:	bd38      	pop	{r3, r4, r5, pc}

0002bf90 <TimerGetCurrentTime>:
{
   2bf90:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   2bf92:	f7ff fe7e 	bl	2bc92 <RtcGetTimerValue>
}
   2bf96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   2bf9a:	f7ff be8f 	b.w	2bcbc <RtcTick2Ms>

0002bf9e <TimerGetElapsedTime>:
{
   2bf9e:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   2bfa0:	4604      	mov	r4, r0
   2bfa2:	b150      	cbz	r0, 2bfba <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   2bfa4:	f7ff fe75 	bl	2bc92 <RtcGetTimerValue>
   2bfa8:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   2bfaa:	4620      	mov	r0, r4
   2bfac:	f7ff fe85 	bl	2bcba <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2bfb0:	1a28      	subs	r0, r5, r0
}
   2bfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   2bfb6:	f7ff be81 	b.w	2bcbc <RtcTick2Ms>
}
   2bfba:	bd38      	pop	{r3, r4, r5, pc}

0002bfbc <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   2bfbc:	f7ff be6d 	b.w	2bc9a <DelayMsMcu>

0002bfc0 <SX1276Write>:
{
   2bfc0:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   2bfc2:	2201      	movs	r2, #1
{
   2bfc4:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   2bfc8:	f10d 0107 	add.w	r1, sp, #7
   2bfcc:	f7e7 f8c8 	bl	13160 <SX1276WriteBuffer>
}
   2bfd0:	b003      	add	sp, #12
   2bfd2:	f85d fb04 	ldr.w	pc, [sp], #4

0002bfd6 <SX1276Read>:
{
   2bfd6:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   2bfd8:	2201      	movs	r2, #1
   2bfda:	f10d 0107 	add.w	r1, sp, #7
   2bfde:	f7e7 f817 	bl	13010 <SX1276ReadBuffer>
}
   2bfe2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2bfe6:	b003      	add	sp, #12
   2bfe8:	f85d fb04 	ldr.w	pc, [sp], #4

0002bfec <SX1276SetOpMode>:
{
   2bfec:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   2bfee:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   2bff0:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   2bff2:	b964      	cbnz	r4, 2c00e <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   2bff4:	f7ff fe96 	bl	2bd24 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2bff8:	2001      	movs	r0, #1
   2bffa:	f7ff ffec 	bl	2bfd6 <SX1276Read>
   2bffe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   2c002:	4321      	orrs	r1, r4
   2c004:	2001      	movs	r0, #1
}
   2c006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   2c00a:	f7ff bfd9 	b.w	2bfc0 <SX1276Write>
        SX1276SetBoardTcxo( true );
   2c00e:	f7ff fe8a 	bl	2bd26 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   2c012:	2000      	movs	r0, #0
   2c014:	f7ff fe86 	bl	2bd24 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   2c018:	4620      	mov	r0, r4
   2c01a:	f7ff fe85 	bl	2bd28 <SX1276SetAntSw>
   2c01e:	e7eb      	b.n	2bff8 <SX1276SetOpMode+0xc>

0002c020 <SX1276IsChannelFree>:
{
   2c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c022:	4607      	mov	r7, r0
   2c024:	460c      	mov	r4, r1
   2c026:	4616      	mov	r6, r2
   2c028:	461d      	mov	r5, r3
    SX1276SetSleep( );
   2c02a:	f7e7 fd59 	bl	13ae0 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
   2c02e:	2000      	movs	r0, #0
   2c030:	f7e7 ff88 	bl	13f44 <SX1276SetModem>
    SX1276SetChannel( freq );
   2c034:	4638      	mov	r0, r7
   2c036:	f7e7 fa97 	bl	13568 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
   2c03a:	4620      	mov	r0, r4
   2c03c:	f7e7 f9fa 	bl	13434 <GetFskBandwidthRegValue>
   2c040:	4604      	mov	r4, r0
   2c042:	4601      	mov	r1, r0
   2c044:	2012      	movs	r0, #18
   2c046:	f7ff ffbb 	bl	2bfc0 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
   2c04a:	4621      	mov	r1, r4
   2c04c:	2013      	movs	r0, #19
   2c04e:	f7ff ffb7 	bl	2bfc0 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2c052:	2005      	movs	r0, #5
   2c054:	f7ff ffca 	bl	2bfec <SX1276SetOpMode>
    DelayMs( 1 );
   2c058:	2001      	movs	r0, #1
   2c05a:	f7ff ffaf 	bl	2bfbc <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   2c05e:	f7ff ff97 	bl	2bf90 <TimerGetCurrentTime>
   2c062:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   2c064:	4620      	mov	r0, r4
   2c066:	f7ff ff9a 	bl	2bf9e <TimerGetElapsedTime>
   2c06a:	42a8      	cmp	r0, r5
   2c06c:	d304      	bcc.n	2c078 <SX1276IsChannelFree+0x58>
    bool status = true;
   2c06e:	2401      	movs	r4, #1
    SX1276SetSleep( );
   2c070:	f7e7 fd36 	bl	13ae0 <SX1276SetSleep>
}
   2c074:	4620      	mov	r0, r4
   2c076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
   2c078:	2000      	movs	r0, #0
   2c07a:	f7e7 ff41 	bl	13f00 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   2c07e:	42b0      	cmp	r0, r6
   2c080:	ddf0      	ble.n	2c064 <SX1276IsChannelFree+0x44>
            status = false;
   2c082:	2400      	movs	r4, #0
   2c084:	e7f4      	b.n	2c070 <SX1276IsChannelFree+0x50>

0002c086 <SX1276Random>:
{
   2c086:	b538      	push	{r3, r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2c088:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
   2c08a:	2001      	movs	r0, #1
   2c08c:	f7e7 ff5a 	bl	13f44 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   2c090:	21ff      	movs	r1, #255	; 0xff
   2c092:	2011      	movs	r0, #17
   2c094:	f7ff ff94 	bl	2bfc0 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   2c098:	2005      	movs	r0, #5
   2c09a:	f7ff ffa7 	bl	2bfec <SX1276SetOpMode>
    uint32_t rnd = 0;
   2c09e:	4625      	mov	r5, r4
        DelayMs( 1 );
   2c0a0:	2001      	movs	r0, #1
   2c0a2:	f7ff ff8b 	bl	2bfbc <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   2c0a6:	202c      	movs	r0, #44	; 0x2c
   2c0a8:	f7ff ff95 	bl	2bfd6 <SX1276Read>
   2c0ac:	f000 0001 	and.w	r0, r0, #1
   2c0b0:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
   2c0b2:	3401      	adds	r4, #1
   2c0b4:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   2c0b6:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   2c0ba:	d1f1      	bne.n	2c0a0 <SX1276Random+0x1a>
    SX1276SetSleep( );
   2c0bc:	f7e7 fd10 	bl	13ae0 <SX1276SetSleep>
}
   2c0c0:	4628      	mov	r0, r5
   2c0c2:	bd38      	pop	{r3, r4, r5, pc}

0002c0c4 <SX1276GetWakeupTime>:
{
   2c0c4:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   2c0c6:	f7ff fe2b 	bl	2bd20 <SX1276GetBoardTcxoWakeupTime>
}
   2c0ca:	3001      	adds	r0, #1
   2c0cc:	bd08      	pop	{r3, pc}

0002c0ce <xor_block>:
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
   2c0ce:	780a      	ldrb	r2, [r1, #0]
   2c0d0:	7803      	ldrb	r3, [r0, #0]
   2c0d2:	4053      	eors	r3, r2
   2c0d4:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
   2c0d6:	784a      	ldrb	r2, [r1, #1]
   2c0d8:	7843      	ldrb	r3, [r0, #1]
   2c0da:	4053      	eors	r3, r2
   2c0dc:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
   2c0de:	788a      	ldrb	r2, [r1, #2]
   2c0e0:	7883      	ldrb	r3, [r0, #2]
   2c0e2:	4053      	eors	r3, r2
   2c0e4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
   2c0e6:	78ca      	ldrb	r2, [r1, #3]
   2c0e8:	78c3      	ldrb	r3, [r0, #3]
   2c0ea:	4053      	eors	r3, r2
   2c0ec:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
   2c0ee:	790a      	ldrb	r2, [r1, #4]
   2c0f0:	7903      	ldrb	r3, [r0, #4]
   2c0f2:	4053      	eors	r3, r2
   2c0f4:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
   2c0f6:	794a      	ldrb	r2, [r1, #5]
   2c0f8:	7943      	ldrb	r3, [r0, #5]
   2c0fa:	4053      	eors	r3, r2
   2c0fc:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
   2c0fe:	798a      	ldrb	r2, [r1, #6]
   2c100:	7983      	ldrb	r3, [r0, #6]
   2c102:	4053      	eors	r3, r2
   2c104:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
   2c106:	79ca      	ldrb	r2, [r1, #7]
   2c108:	79c3      	ldrb	r3, [r0, #7]
   2c10a:	4053      	eors	r3, r2
   2c10c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
   2c10e:	7a0a      	ldrb	r2, [r1, #8]
   2c110:	7a03      	ldrb	r3, [r0, #8]
   2c112:	4053      	eors	r3, r2
   2c114:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
   2c116:	7a4a      	ldrb	r2, [r1, #9]
   2c118:	7a43      	ldrb	r3, [r0, #9]
   2c11a:	4053      	eors	r3, r2
   2c11c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
   2c11e:	7a8a      	ldrb	r2, [r1, #10]
   2c120:	7a83      	ldrb	r3, [r0, #10]
   2c122:	4053      	eors	r3, r2
   2c124:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
   2c126:	7aca      	ldrb	r2, [r1, #11]
   2c128:	7ac3      	ldrb	r3, [r0, #11]
   2c12a:	4053      	eors	r3, r2
   2c12c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
   2c12e:	7b0a      	ldrb	r2, [r1, #12]
   2c130:	7b03      	ldrb	r3, [r0, #12]
   2c132:	4053      	eors	r3, r2
   2c134:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
   2c136:	7b4a      	ldrb	r2, [r1, #13]
   2c138:	7b43      	ldrb	r3, [r0, #13]
   2c13a:	4053      	eors	r3, r2
   2c13c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
   2c13e:	7b8a      	ldrb	r2, [r1, #14]
   2c140:	7b83      	ldrb	r3, [r0, #14]
   2c142:	4053      	eors	r3, r2
   2c144:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
   2c146:	7bca      	ldrb	r2, [r1, #15]
   2c148:	7bc3      	ldrb	r3, [r0, #15]
   2c14a:	4053      	eors	r3, r2
   2c14c:	73c3      	strb	r3, [r0, #15]
}
   2c14e:	4770      	bx	lr

0002c150 <copy_and_key>:
{
   2c150:	b510      	push	{r4, lr}
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
   2c152:	780b      	ldrb	r3, [r1, #0]
   2c154:	7814      	ldrb	r4, [r2, #0]
   2c156:	4063      	eors	r3, r4
   2c158:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
   2c15a:	7854      	ldrb	r4, [r2, #1]
   2c15c:	784b      	ldrb	r3, [r1, #1]
   2c15e:	4063      	eors	r3, r4
   2c160:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
   2c162:	7894      	ldrb	r4, [r2, #2]
   2c164:	788b      	ldrb	r3, [r1, #2]
   2c166:	4063      	eors	r3, r4
   2c168:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
   2c16a:	78d4      	ldrb	r4, [r2, #3]
   2c16c:	78cb      	ldrb	r3, [r1, #3]
   2c16e:	4063      	eors	r3, r4
   2c170:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
   2c172:	7914      	ldrb	r4, [r2, #4]
   2c174:	790b      	ldrb	r3, [r1, #4]
   2c176:	4063      	eors	r3, r4
   2c178:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
   2c17a:	7954      	ldrb	r4, [r2, #5]
   2c17c:	794b      	ldrb	r3, [r1, #5]
   2c17e:	4063      	eors	r3, r4
   2c180:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
   2c182:	7994      	ldrb	r4, [r2, #6]
   2c184:	798b      	ldrb	r3, [r1, #6]
   2c186:	4063      	eors	r3, r4
   2c188:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
   2c18a:	79d4      	ldrb	r4, [r2, #7]
   2c18c:	79cb      	ldrb	r3, [r1, #7]
   2c18e:	4063      	eors	r3, r4
   2c190:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
   2c192:	7a14      	ldrb	r4, [r2, #8]
   2c194:	7a0b      	ldrb	r3, [r1, #8]
   2c196:	4063      	eors	r3, r4
   2c198:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
   2c19a:	7a54      	ldrb	r4, [r2, #9]
   2c19c:	7a4b      	ldrb	r3, [r1, #9]
   2c19e:	4063      	eors	r3, r4
   2c1a0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
   2c1a2:	7a8b      	ldrb	r3, [r1, #10]
   2c1a4:	7a94      	ldrb	r4, [r2, #10]
   2c1a6:	4063      	eors	r3, r4
   2c1a8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
   2c1aa:	7ad4      	ldrb	r4, [r2, #11]
   2c1ac:	7acb      	ldrb	r3, [r1, #11]
   2c1ae:	4063      	eors	r3, r4
   2c1b0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
   2c1b2:	7b14      	ldrb	r4, [r2, #12]
   2c1b4:	7b0b      	ldrb	r3, [r1, #12]
   2c1b6:	4063      	eors	r3, r4
   2c1b8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
   2c1ba:	7b54      	ldrb	r4, [r2, #13]
   2c1bc:	7b4b      	ldrb	r3, [r1, #13]
   2c1be:	4063      	eors	r3, r4
   2c1c0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
   2c1c2:	7b94      	ldrb	r4, [r2, #14]
   2c1c4:	7b8b      	ldrb	r3, [r1, #14]
   2c1c6:	4063      	eors	r3, r4
   2c1c8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
   2c1ca:	7bcb      	ldrb	r3, [r1, #15]
   2c1cc:	7bd2      	ldrb	r2, [r2, #15]
   2c1ce:	4053      	eors	r3, r2
   2c1d0:	73c3      	strb	r3, [r0, #15]
}
   2c1d2:	bd10      	pop	{r4, pc}

0002c1d4 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
   2c1d4:	b510      	push	{r4, lr}
    memset1( ctx->X, 0, sizeof ctx->X );
   2c1d6:	2210      	movs	r2, #16
{
   2c1d8:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
   2c1da:	2100      	movs	r1, #0
   2c1dc:	30f1      	adds	r0, #241	; 0xf1
   2c1de:	f7ff fdd6 	bl	2bd8e <memset1>
    ctx->M_n = 0;
   2c1e2:	2100      	movs	r1, #0
   2c1e4:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
   2c1e8:	4620      	mov	r0, r4
}
   2c1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memset1( ctx->rijndael.ksch, '\0', 240 );
   2c1ee:	22f0      	movs	r2, #240	; 0xf0
   2c1f0:	f7ff bdcd 	b.w	2bd8e <memset1>

0002c1f4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
   2c1f4:	4602      	mov	r2, r0
   2c1f6:	4608      	mov	r0, r1
    aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
   2c1f8:	2110      	movs	r1, #16
   2c1fa:	f7e8 ba61 	b.w	146c0 <aes_set_key>

0002c1fe <AES_CMAC_Update>:
}

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
   2c1fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c202:	4604      	mov	r4, r0
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
   2c204:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
{
   2c208:	460e      	mov	r6, r1
   2c20a:	4615      	mov	r5, r2
   2c20c:	b085      	sub	sp, #20
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
   2c20e:	f204 1901 	addw	r9, r4, #257	; 0x101
    if( ctx->M_n > 0 )
   2c212:	b388      	cbz	r0, 2c278 <AES_CMAC_Update+0x7a>
        mlen = MIN( 16 - ctx->M_n, len );
   2c214:	f1c0 0810 	rsb	r8, r0, #16
   2c218:	4590      	cmp	r8, r2
   2c21a:	4647      	mov	r7, r8
   2c21c:	bf28      	it	cs
   2c21e:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
   2c220:	4448      	add	r0, r9
   2c222:	b2ba      	uxth	r2, r7
   2c224:	f7ff fd9f 	bl	2bd66 <memcpy1>
        ctx->M_n += mlen;
   2c228:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2c22c:	443b      	add	r3, r7
        if( ctx->M_n < 16 || len == mlen )
   2c22e:	2b0f      	cmp	r3, #15
        ctx->M_n += mlen;
   2c230:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
   2c234:	d92d      	bls.n	2c292 <AES_CMAC_Update+0x94>
   2c236:	45a8      	cmp	r8, r5
   2c238:	d22b      	bcs.n	2c292 <AES_CMAC_Update+0x94>
   2c23a:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c23e:	f504 7180 	add.w	r1, r4, #256	; 0x100
            return;
        XOR( ctx->M_last, ctx->X );
   2c242:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c246:	7c18      	ldrb	r0, [r3, #16]
   2c248:	428b      	cmp	r3, r1
   2c24a:	ea82 0200 	eor.w	r2, r2, r0
   2c24e:	701a      	strb	r2, [r3, #0]
   2c250:	d1f7      	bne.n	2c242 <AES_CMAC_Update+0x44>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c252:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
   2c256:	2210      	movs	r2, #16
   2c258:	4641      	mov	r1, r8
   2c25a:	4668      	mov	r0, sp
   2c25c:	f7ff fd83 	bl	2bd66 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
   2c260:	4622      	mov	r2, r4
   2c262:	4669      	mov	r1, sp
   2c264:	4668      	mov	r0, sp
   2c266:	f7e8 fab1 	bl	147cc <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
   2c26a:	2210      	movs	r2, #16
   2c26c:	4669      	mov	r1, sp
   2c26e:	4640      	mov	r0, r8
   2c270:	f7ff fd79 	bl	2bd66 <memcpy1>

        data += mlen;
   2c274:	443e      	add	r6, r7
        len -= mlen;
   2c276:	1bed      	subs	r5, r5, r7
   2c278:	f504 7880 	add.w	r8, r4, #256	; 0x100
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c27c:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
    while( len > 16 )
   2c280:	2d10      	cmp	r5, #16
   2c282:	d809      	bhi.n	2c298 <AES_CMAC_Update+0x9a>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
   2c284:	4631      	mov	r1, r6
   2c286:	4648      	mov	r0, r9
   2c288:	b2aa      	uxth	r2, r5
   2c28a:	f7ff fd6c 	bl	2bd66 <memcpy1>
    ctx->M_n = len;
   2c28e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
}
   2c292:	b005      	add	sp, #20
   2c294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2c298:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c29c:	1e71      	subs	r1, r6, #1
        XOR( data, ctx->X );
   2c29e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c2a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2c2a6:	4543      	cmp	r3, r8
   2c2a8:	ea82 0200 	eor.w	r2, r2, r0
   2c2ac:	701a      	strb	r2, [r3, #0]
   2c2ae:	d1f6      	bne.n	2c29e <AES_CMAC_Update+0xa0>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c2b0:	2210      	movs	r2, #16
   2c2b2:	4639      	mov	r1, r7
   2c2b4:	4668      	mov	r0, sp
   2c2b6:	f7ff fd56 	bl	2bd66 <memcpy1>
        aes_encrypt( in, in, &ctx->rijndael );
   2c2ba:	4622      	mov	r2, r4
   2c2bc:	4669      	mov	r1, sp
   2c2be:	4668      	mov	r0, sp
   2c2c0:	f7e8 fa84 	bl	147cc <aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
   2c2c4:	2210      	movs	r2, #16
   2c2c6:	4669      	mov	r1, sp
   2c2c8:	4638      	mov	r0, r7
   2c2ca:	f7ff fd4c 	bl	2bd66 <memcpy1>
        data += 16;
   2c2ce:	3610      	adds	r6, #16
        len -= 16;
   2c2d0:	3d10      	subs	r5, #16
   2c2d2:	e7d5      	b.n	2c280 <AES_CMAC_Update+0x82>

0002c2d4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
   2c2d4:	b570      	push	{r4, r5, r6, lr}
   2c2d6:	460c      	mov	r4, r1
   2c2d8:	b088      	sub	sp, #32
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
   2c2da:	2210      	movs	r2, #16
   2c2dc:	2100      	movs	r1, #0
{
   2c2de:	4605      	mov	r5, r0
    memset1( K, '\0', 16 );
   2c2e0:	4668      	mov	r0, sp
   2c2e2:	f7ff fd54 	bl	2bd8e <memset1>

    aes_encrypt( K, K, &ctx->rijndael );
   2c2e6:	4622      	mov	r2, r4
   2c2e8:	4669      	mov	r1, sp
   2c2ea:	4668      	mov	r0, sp
   2c2ec:	f7e8 fa6e 	bl	147cc <aes_encrypt>

    if( K[0] & 0x80 )
   2c2f0:	f99d 3000 	ldrsb.w	r3, [sp]
   2c2f4:	466a      	mov	r2, sp
   2c2f6:	2b00      	cmp	r3, #0
    {
        LSHIFT( K, K );
   2c2f8:	f04f 0100 	mov.w	r1, #0
    if( K[0] & 0x80 )
   2c2fc:	da43      	bge.n	2c386 <AES_CMAC_Final+0xb2>
        LSHIFT( K, K );
   2c2fe:	7813      	ldrb	r3, [r2, #0]
   2c300:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c304:	3101      	adds	r1, #1
   2c306:	005b      	lsls	r3, r3, #1
   2c308:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
   2c30c:	290f      	cmp	r1, #15
   2c30e:	f802 3c01 	strb.w	r3, [r2, #-1]
   2c312:	d1f4      	bne.n	2c2fe <AES_CMAC_Final+0x2a>
   2c314:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c318:	005b      	lsls	r3, r3, #1
        K[15] ^= 0x87;
   2c31a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
   2c31e:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        LSHIFT( K, K );
   2c322:	b2db      	uxtb	r3, r3
    if( ctx->M_n == 16 )
   2c324:	2a10      	cmp	r2, #16
        K[15] ^= 0x87;
   2c326:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ctx->M_n == 16 )
   2c32a:	d13b      	bne.n	2c3a4 <AES_CMAC_Final+0xd0>
   2c32c:	4669      	mov	r1, sp
   2c32e:	f504 7380 	add.w	r3, r4, #256	; 0x100
   2c332:	f504 7088 	add.w	r0, r4, #272	; 0x110
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
   2c336:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   2c33a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c33e:	4298      	cmp	r0, r3
   2c340:	ea82 0206 	eor.w	r2, r2, r6
   2c344:	701a      	strb	r2, [r3, #0]
   2c346:	d1f6      	bne.n	2c336 <AES_CMAC_Final+0x62>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
   2c348:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
   2c34c:	f504 7180 	add.w	r1, r4, #256	; 0x100
   2c350:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c354:	7c18      	ldrb	r0, [r3, #16]
   2c356:	4299      	cmp	r1, r3
   2c358:	ea82 0200 	eor.w	r2, r2, r0
   2c35c:	701a      	strb	r2, [r3, #0]
   2c35e:	d1f7      	bne.n	2c350 <AES_CMAC_Final+0x7c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
   2c360:	2210      	movs	r2, #16
   2c362:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
   2c366:	eb0d 0002 	add.w	r0, sp, r2
   2c36a:	f7ff fcfc 	bl	2bd66 <memcpy1>
    aes_encrypt( in, digest, &ctx->rijndael );
   2c36e:	4622      	mov	r2, r4
   2c370:	4629      	mov	r1, r5
   2c372:	a804      	add	r0, sp, #16
   2c374:	f7e8 fa2a 	bl	147cc <aes_encrypt>
    memset1( K, 0, sizeof K );
   2c378:	2210      	movs	r2, #16
   2c37a:	2100      	movs	r1, #0
   2c37c:	4668      	mov	r0, sp
   2c37e:	f7ff fd06 	bl	2bd8e <memset1>
}
   2c382:	b008      	add	sp, #32
   2c384:	bd70      	pop	{r4, r5, r6, pc}
        LSHIFT( K, K );
   2c386:	7813      	ldrb	r3, [r2, #0]
   2c388:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2c38c:	3101      	adds	r1, #1
   2c38e:	005b      	lsls	r3, r3, #1
   2c390:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
   2c394:	290f      	cmp	r1, #15
   2c396:	f802 3c01 	strb.w	r3, [r2, #-1]
   2c39a:	d1f4      	bne.n	2c386 <AES_CMAC_Final+0xb2>
   2c39c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c3a0:	005b      	lsls	r3, r3, #1
   2c3a2:	e7bc      	b.n	2c31e <AES_CMAC_Final+0x4a>
        if( K[0] & 0x80 )
   2c3a4:	f99d 3000 	ldrsb.w	r3, [sp]
   2c3a8:	4669      	mov	r1, sp
   2c3aa:	2b00      	cmp	r3, #0
            LSHIFT( K, K );
   2c3ac:	f04f 0000 	mov.w	r0, #0
        if( K[0] & 0x80 )
   2c3b0:	da39      	bge.n	2c426 <AES_CMAC_Final+0x152>
            LSHIFT( K, K );
   2c3b2:	780b      	ldrb	r3, [r1, #0]
   2c3b4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2c3b8:	3001      	adds	r0, #1
   2c3ba:	005b      	lsls	r3, r3, #1
   2c3bc:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   2c3c0:	280f      	cmp	r0, #15
   2c3c2:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c3c6:	d1f4      	bne.n	2c3b2 <AES_CMAC_Final+0xde>
   2c3c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c3cc:	005b      	lsls	r3, r3, #1
            K[15] ^= 0x87;
   2c3ce:	f083 0387 	eor.w	r3, r3, #135	; 0x87
        ctx->M_last[ctx->M_n] = 0x80;
   2c3d2:	2180      	movs	r1, #128	; 0x80
            ctx->M_last[ctx->M_n] = 0;
   2c3d4:	2600      	movs	r6, #0
            LSHIFT( K, K );
   2c3d6:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
   2c3d8:	f88d 300f 	strb.w	r3, [sp, #15]
        ctx->M_last[ctx->M_n] = 0x80;
   2c3dc:	18a3      	adds	r3, r4, r2
   2c3de:	f883 1101 	strb.w	r1, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
   2c3e2:	f202 1301 	addw	r3, r2, #257	; 0x101
   2c3e6:	f1c4 21ff 	rsb	r1, r4, #4278255360	; 0xff00ff00
   2c3ea:	4423      	add	r3, r4
   2c3ec:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
   2c3f0:	18c8      	adds	r0, r1, r3
   2c3f2:	280f      	cmp	r0, #15
   2c3f4:	d926      	bls.n	2c444 <AES_CMAC_Final+0x170>
   2c3f6:	1c53      	adds	r3, r2, #1
   2c3f8:	2b10      	cmp	r3, #16
   2c3fa:	f1c2 020f 	rsb	r2, r2, #15
   2c3fe:	bf88      	it	hi
   2c400:	2200      	movhi	r2, #0
   2c402:	4669      	mov	r1, sp
   2c404:	441a      	add	r2, r3
   2c406:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   2c40a:	f504 7380 	add.w	r3, r4, #256	; 0x100
   2c40e:	f504 7088 	add.w	r0, r4, #272	; 0x110
        XOR( K, ctx->M_last );
   2c412:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   2c416:	f811 2b01 	ldrb.w	r2, [r1], #1
   2c41a:	4298      	cmp	r0, r3
   2c41c:	ea82 0206 	eor.w	r2, r2, r6
   2c420:	701a      	strb	r2, [r3, #0]
   2c422:	d1f6      	bne.n	2c412 <AES_CMAC_Final+0x13e>
   2c424:	e790      	b.n	2c348 <AES_CMAC_Final+0x74>
            LSHIFT( K, K );
   2c426:	780b      	ldrb	r3, [r1, #0]
   2c428:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2c42c:	3001      	adds	r0, #1
   2c42e:	005b      	lsls	r3, r3, #1
   2c430:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
   2c434:	280f      	cmp	r0, #15
   2c436:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c43a:	d1f4      	bne.n	2c426 <AES_CMAC_Final+0x152>
   2c43c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2c440:	005b      	lsls	r3, r3, #1
   2c442:	e7c6      	b.n	2c3d2 <AES_CMAC_Final+0xfe>
            ctx->M_last[ctx->M_n] = 0;
   2c444:	f803 6f01 	strb.w	r6, [r3, #1]!
   2c448:	e7d2      	b.n	2c3f0 <AES_CMAC_Final+0x11c>

0002c44a <SecureElementComputeAesCmac>:
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
   2c44a:	2b7e      	cmp	r3, #126	; 0x7e
   2c44c:	d801      	bhi.n	2c452 <SecureElementComputeAesCmac+0x8>
    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
   2c44e:	f7e8 bb23 	b.w	14a98 <ComputeCmac>
}
   2c452:	2003      	movs	r0, #3
   2c454:	4770      	bx	lr

0002c456 <SecureElementVerifyAesCmac>:
{
   2c456:	b530      	push	{r4, r5, lr}
   2c458:	460d      	mov	r5, r1
   2c45a:	4614      	mov	r4, r2
    if( buffer == NULL )
   2c45c:	4601      	mov	r1, r0
{
   2c45e:	b085      	sub	sp, #20
    if( buffer == NULL )
   2c460:	b168      	cbz	r0, 2c47e <SecureElementVerifyAesCmac+0x28>
    uint32_t              compCmac = 0;
   2c462:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
   2c464:	aa03      	add	r2, sp, #12
   2c466:	9200      	str	r2, [sp, #0]
   2c468:	462a      	mov	r2, r5
    uint32_t              compCmac = 0;
   2c46a:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
   2c46c:	f7e8 fb14 	bl	14a98 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
   2c470:	b918      	cbnz	r0, 2c47a <SecureElementVerifyAesCmac+0x24>
    if( expectedCmac != compCmac )
   2c472:	9803      	ldr	r0, [sp, #12]
   2c474:	1b00      	subs	r0, r0, r4
   2c476:	bf18      	it	ne
   2c478:	2001      	movne	r0, #1
}
   2c47a:	b005      	add	sp, #20
   2c47c:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   2c47e:	2002      	movs	r0, #2
   2c480:	e7fb      	b.n	2c47a <SecureElementVerifyAesCmac+0x24>

0002c482 <SecureElementSetKey>:
    if( key == NULL )
   2c482:	b109      	cbz	r1, 2c488 <SecureElementSetKey+0x6>
   2c484:	f7e8 bbe6 	b.w	14c54 <SecureElementSetKey.part.0>
}
   2c488:	2002      	movs	r0, #2
   2c48a:	4770      	bx	lr

0002c48c <SecureElementDeriveAndStoreKey>:
{
   2c48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2c48e:	4614      	mov	r4, r2
    if( input == NULL )
   2c490:	b1a0      	cbz	r0, 2c4bc <SecureElementDeriveAndStoreKey+0x30>
    uint8_t               key[16] = { 0 };
   2c492:	2300      	movs	r3, #0
    if( targetKeyID == MC_KE_KEY )
   2c494:	2a7f      	cmp	r2, #127	; 0x7f
    uint8_t               key[16] = { 0 };
   2c496:	e9cd 3300 	strd	r3, r3, [sp]
   2c49a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( targetKeyID == MC_KE_KEY )
   2c49e:	d101      	bne.n	2c4a4 <SecureElementDeriveAndStoreKey+0x18>
        if( rootKeyID != MC_ROOT_KEY )
   2c4a0:	2908      	cmp	r1, #8
   2c4a2:	d10d      	bne.n	2c4c0 <SecureElementDeriveAndStoreKey+0x34>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
   2c4a4:	460a      	mov	r2, r1
   2c4a6:	466b      	mov	r3, sp
   2c4a8:	2110      	movs	r1, #16
   2c4aa:	f7e8 fb95 	bl	14bd8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
   2c4ae:	b918      	cbnz	r0, 2c4b8 <SecureElementDeriveAndStoreKey+0x2c>
    if( key == NULL )
   2c4b0:	4669      	mov	r1, sp
   2c4b2:	4620      	mov	r0, r4
   2c4b4:	f7e8 fbce 	bl	14c54 <SecureElementSetKey.part.0>
}
   2c4b8:	b004      	add	sp, #16
   2c4ba:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
   2c4bc:	2002      	movs	r0, #2
   2c4be:	e7fb      	b.n	2c4b8 <SecureElementDeriveAndStoreKey+0x2c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
   2c4c0:	2003      	movs	r0, #3
   2c4c2:	e7f9      	b.n	2c4b8 <SecureElementDeriveAndStoreKey+0x2c>

0002c4c4 <SecureElementProcessJoinAccept>:
{
   2c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c4c8:	b091      	sub	sp, #68	; 0x44
   2c4ca:	4681      	mov	r9, r0
   2c4cc:	e9dd 641b 	ldrd	r6, r4, [sp, #108]	; 0x6c
   2c4d0:	468a      	mov	sl, r1
   2c4d2:	4617      	mov	r7, r2
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
   2c4d4:	4698      	mov	r8, r3
{
   2c4d6:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
   2c4da:	2b00      	cmp	r3, #0
   2c4dc:	d06c      	beq.n	2c5b8 <SecureElementProcessJoinAccept+0xf4>
   2c4de:	2e00      	cmp	r6, #0
   2c4e0:	d06a      	beq.n	2c5b8 <SecureElementProcessJoinAccept+0xf4>
   2c4e2:	2c00      	cmp	r4, #0
   2c4e4:	d068      	beq.n	2c5b8 <SecureElementProcessJoinAccept+0xf4>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
   2c4e6:	2d21      	cmp	r5, #33	; 0x21
   2c4e8:	d868      	bhi.n	2c5bc <SecureElementProcessJoinAccept+0xf8>
        encKeyID = J_S_ENC_KEY;
   2c4ea:	28ff      	cmp	r0, #255	; 0xff
   2c4ec:	bf0c      	ite	eq
   2c4ee:	f04f 0b01 	moveq.w	fp, #1
   2c4f2:	f04f 0b03 	movne.w	fp, #3
    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
   2c4f6:	4619      	mov	r1, r3
   2c4f8:	462a      	mov	r2, r5
   2c4fa:	4630      	mov	r0, r6
   2c4fc:	f7ff fc33 	bl	2bd66 <memcpy1>
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
   2c500:	1e69      	subs	r1, r5, #1
   2c502:	465a      	mov	r2, fp
   2c504:	1c73      	adds	r3, r6, #1
   2c506:	b289      	uxth	r1, r1
   2c508:	f108 0001 	add.w	r0, r8, #1
   2c50c:	f7e8 fb64 	bl	14bd8 <SecureElementAesEncrypt>
   2c510:	4683      	mov	fp, r0
   2c512:	2800      	cmp	r0, #0
   2c514:	d154      	bne.n	2c5c0 <SecureElementProcessJoinAccept+0xfc>
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
   2c516:	f896 800b 	ldrb.w	r8, [r6, #11]
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
   2c51a:	1973      	adds	r3, r6, r5
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
   2c51c:	ea4f 18d8 	mov.w	r8, r8, lsr #7
   2c520:	f884 8000 	strb.w	r8, [r4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c524:	f813 4c02 	ldrb.w	r4, [r3, #-2]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
   2c528:	f813 1c03 	ldrb.w	r1, [r3, #-3]
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
   2c52c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c530:	0424      	lsls	r4, r4, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
   2c532:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
   2c536:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
   2c53a:	4314      	orrs	r4, r2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
   2c53c:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    if( *versionMinor == 0 )
   2c540:	f1b8 0f00 	cmp.w	r8, #0
   2c544:	d10c      	bne.n	2c560 <SecureElementProcessJoinAccept+0x9c>
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
   2c546:	1f29      	subs	r1, r5, #4
   2c548:	2301      	movs	r3, #1
   2c54a:	4622      	mov	r2, r4
   2c54c:	4630      	mov	r0, r6
   2c54e:	b289      	uxth	r1, r1
   2c550:	f7ff ff81 	bl	2c456 <SecureElementVerifyAesCmac>
   2c554:	3800      	subs	r0, #0
   2c556:	bf18      	it	ne
   2c558:	2001      	movne	r0, #1
}
   2c55a:	b011      	add	sp, #68	; 0x44
   2c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c560:	e9cd 0001 	strd	r0, r0, [sp, #4]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c564:	2208      	movs	r2, #8
   2c566:	4651      	mov	r1, sl
        uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c568:	9003      	str	r0, [sp, #12]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c56a:	f10d 0005 	add.w	r0, sp, #5
        micHeader11[bufItr++] = ( uint8_t ) joinReqType;
   2c56e:	f88d 9004 	strb.w	r9, [sp, #4]
        memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2c572:	f7ff fc02 	bl	2bd7a <memcpyr>
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c576:	2229      	movs	r2, #41	; 0x29
   2c578:	4659      	mov	r1, fp
        micHeader11[bufItr++] = devNonce & 0xFF;
   2c57a:	f88d 700d 	strb.w	r7, [sp, #13]
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c57e:	a805      	add	r0, sp, #20
        micHeader11[bufItr++] = ( devNonce >> 8 ) & 0xFF;
   2c580:	0a3f      	lsrs	r7, r7, #8
   2c582:	f88d 700e 	strb.w	r7, [sp, #14]
        uint8_t localBuffer[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
   2c586:	f8cd b010 	str.w	fp, [sp, #16]
   2c58a:	f005 fa84 	bl	31a96 <memset>
        memcpy1( localBuffer, micHeader11, JOIN_ACCEPT_MIC_COMPUTATION_OFFSET );
   2c58e:	220c      	movs	r2, #12
   2c590:	a901      	add	r1, sp, #4
   2c592:	a804      	add	r0, sp, #16
   2c594:	f7ff fbe7 	bl	2bd66 <memcpy1>
        memcpy1( localBuffer + JOIN_ACCEPT_MIC_COMPUTATION_OFFSET - 1, decJoinAccept, encJoinAcceptSize );
   2c598:	462a      	mov	r2, r5
   2c59a:	4631      	mov	r1, r6
   2c59c:	f10d 001b 	add.w	r0, sp, #27
   2c5a0:	f7ff fbe1 	bl	2bd66 <memcpy1>
        if( SecureElementVerifyAesCmac( localBuffer,
   2c5a4:	2302      	movs	r3, #2
   2c5a6:	4622      	mov	r2, r4
   2c5a8:	1de9      	adds	r1, r5, #7
   2c5aa:	a804      	add	r0, sp, #16
   2c5ac:	f7ff ff53 	bl	2c456 <SecureElementVerifyAesCmac>
            return SECURE_ELEMENT_FAIL_CMAC;
   2c5b0:	2800      	cmp	r0, #0
   2c5b2:	bf18      	it	ne
   2c5b4:	4640      	movne	r0, r8
   2c5b6:	e7d0      	b.n	2c55a <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_ERROR_NPE;
   2c5b8:	2002      	movs	r0, #2
   2c5ba:	e7ce      	b.n	2c55a <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
   2c5bc:	2005      	movs	r0, #5
   2c5be:	e7cc      	b.n	2c55a <SecureElementProcessJoinAccept+0x96>
        return SECURE_ELEMENT_FAIL_ENCRYPT;
   2c5c0:	2007      	movs	r0, #7
   2c5c2:	e7ca      	b.n	2c55a <SecureElementProcessJoinAccept+0x96>

0002c5c4 <SoftSeHalGetUniqueId>:

#include "soft-se-hal.h"

void SoftSeHalGetUniqueId( uint8_t *id )
{
    BoardGetUniqueId( id );
   2c5c4:	f7ff bb1f 	b.w	2bc06 <BoardGetUniqueId>

0002c5c8 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
   2c5c8:	b1d8      	cbz	r0, 2c602 <DetermineFrameType+0x3a>
   2c5ca:	b1d1      	cbz	r1, 2c602 <DetermineFrameType+0x3a>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
   2c5cc:	7b03      	ldrb	r3, [r0, #12]
   2c5ce:	071b      	lsls	r3, r3, #28
   2c5d0:	d007      	beq.n	2c5e2 <DetermineFrameType+0x1a>
   2c5d2:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c5d6:	b983      	cbnz	r3, 2c5fa <DetermineFrameType+0x32>
    else if( macMsg->FRMPayloadSize == 0 )
   2c5d8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2c5dc:	b17b      	cbz	r3, 2c5fe <DetermineFrameType+0x36>
        return LORAMAC_STATUS_ERROR;
   2c5de:	2017      	movs	r0, #23
   2c5e0:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
   2c5e2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2c5e6:	b153      	cbz	r3, 2c5fe <DetermineFrameType+0x36>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
   2c5e8:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c5ec:	2b00      	cmp	r3, #0
   2c5ee:	bf14      	ite	ne
   2c5f0:	2303      	movne	r3, #3
   2c5f2:	2302      	moveq	r3, #2
    return LORAMAC_STATUS_OK;
   2c5f4:	2000      	movs	r0, #0
        *fType = FRAME_TYPE_C;
   2c5f6:	700b      	strb	r3, [r1, #0]
   2c5f8:	4770      	bx	lr
   2c5fa:	2300      	movs	r3, #0
   2c5fc:	e7fa      	b.n	2c5f4 <DetermineFrameType+0x2c>
    else if( macMsg->FRMPayloadSize == 0 )
   2c5fe:	2301      	movs	r3, #1
   2c600:	e7f8      	b.n	2c5f4 <DetermineFrameType+0x2c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
   2c602:	2003      	movs	r0, #3
}
   2c604:	4770      	bx	lr

0002c606 <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
   2c606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c60a:	b08b      	sub	sp, #44	; 0x2c
   2c60c:	468a      	mov	sl, r1
   2c60e:	9300      	str	r3, [sp, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
   2c610:	6841      	ldr	r1, [r0, #4]
   2c612:	9b14      	ldr	r3, [sp, #80]	; 0x50
    int8_t datarate = adrNext->Datarate;
   2c614:	f990 800c 	ldrsb.w	r8, [r0, #12]
    int8_t txPower = adrNext->TxPower;
   2c618:	f990 600d 	ldrsb.w	r6, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
   2c61c:	f890 b00e 	ldrb.w	fp, [r0, #14]
    *adrAckCounter = adrNext->AdrAckCounter;
   2c620:	6019      	str	r1, [r3, #0]

    if( adrNext->AdrEnabled == true )
   2c622:	7847      	ldrb	r7, [r0, #1]
{
   2c624:	4604      	mov	r4, r0
   2c626:	4691      	mov	r9, r2
    if( adrNext->AdrEnabled == true )
   2c628:	2f00      	cmp	r7, #0
   2c62a:	d058      	beq.n	2c6de <LoRaMacAdrCalcNext+0xd8>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
   2c62c:	2302      	movs	r3, #2
   2c62e:	f88d 3010 	strb.w	r3, [sp, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c632:	7bc3      	ldrb	r3, [r0, #15]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c634:	a904      	add	r1, sp, #16
   2c636:	7c00      	ldrb	r0, [r0, #16]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c638:	f88d 3012 	strb.w	r3, [sp, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c63c:	f000 fb77 	bl	2cd2e <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
        datarate = MAX( datarate, minTxDatarate );

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c640:	f8b4 c008 	ldrh.w	ip, [r4, #8]
        minTxDatarate = phyParam.Value;
   2c644:	b243      	sxtb	r3, r0
        {
            adrAckReq = true;
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c646:	8961      	ldrh	r1, [r4, #10]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c648:	6860      	ldr	r0, [r4, #4]
        datarate = MAX( datarate, minTxDatarate );
   2c64a:	4598      	cmp	r8, r3
   2c64c:	4645      	mov	r5, r8
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c64e:	4461      	add	r1, ip
        datarate = MAX( datarate, minTxDatarate );
   2c650:	bfb8      	it	lt
   2c652:	461d      	movlt	r5, r3
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
   2c654:	4560      	cmp	r0, ip
   2c656:	bf34      	ite	cc
   2c658:	2700      	movcc	r7, #0
   2c65a:	2701      	movcs	r7, #1
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
   2c65c:	4288      	cmp	r0, r1
   2c65e:	d309      	bcc.n	2c674 <LoRaMacAdrCalcNext+0x6e>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
   2c660:	210a      	movs	r1, #10
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c662:	7c20      	ldrb	r0, [r4, #16]
            getPhy.Attribute = PHY_DEF_TX_POWER;
   2c664:	f88d 1010 	strb.w	r1, [sp, #16]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c668:	a904      	add	r1, sp, #16
   2c66a:	9301      	str	r3, [sp, #4]
   2c66c:	f000 fb5f 	bl	2cd2e <RegionGetPhyParam>
            txPower = phyParam.Value;
   2c670:	9b01      	ldr	r3, [sp, #4]
   2c672:	b246      	sxtb	r6, r0
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
   2c674:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   2c678:	8960      	ldrh	r0, [r4, #10]
   2c67a:	6861      	ldr	r1, [r4, #4]
   2c67c:	eb0c 0e40 	add.w	lr, ip, r0, lsl #1
   2c680:	4571      	cmp	r1, lr
   2c682:	d319      	bcc.n	2c6b8 <LoRaMacAdrCalcNext+0xb2>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
   2c684:	eba1 010c 	sub.w	r1, r1, ip
   2c688:	fbb1 fcf0 	udiv	ip, r1, r0
   2c68c:	fb00 111c 	mls	r1, r0, ip, r1
   2c690:	b991      	cbnz	r1, 2c6b8 <LoRaMacAdrCalcNext+0xb2>
            {
                if( datarate == minTxDatarate )
   2c692:	4598      	cmp	r8, r3
   2c694:	dc03      	bgt.n	2c69e <LoRaMacAdrCalcNext+0x98>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
   2c696:	7823      	ldrb	r3, [r4, #0]
   2c698:	b9cb      	cbnz	r3, 2c6ce <LoRaMacAdrCalcNext+0xc8>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
                        RegionInitDefaults( adrNext->Region, &params );
                    }

                    // Restore NbTrans
                    nbTrans = 1;
   2c69a:	f04f 0b01 	mov.w	fp, #1
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
   2c69e:	2320      	movs	r3, #32
   2c6a0:	f88d 3010 	strb.w	r3, [sp, #16]
                getPhy.Datarate = datarate;
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c6a4:	7be3      	ldrb	r3, [r4, #15]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c6a6:	7c20      	ldrb	r0, [r4, #16]
   2c6a8:	a904      	add	r1, sp, #16
                getPhy.Datarate = datarate;
   2c6aa:	f88d 5011 	strb.w	r5, [sp, #17]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
   2c6ae:	f88d 3012 	strb.w	r3, [sp, #18]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
   2c6b2:	f000 fb3c 	bl	2cd2e <RegionGetPhyParam>
                datarate = phyParam.Value;
   2c6b6:	b245      	sxtb	r5, r0

    *drOut = datarate;
    *txPowOut = txPower;
    *nbTransOut = nbTrans;
    return adrAckReq;
}
   2c6b8:	4638      	mov	r0, r7
    *nbTransOut = nbTrans;
   2c6ba:	9b00      	ldr	r3, [sp, #0]
    *drOut = datarate;
   2c6bc:	f88a 5000 	strb.w	r5, [sl]
    *txPowOut = txPower;
   2c6c0:	f889 6000 	strb.w	r6, [r9]
    *nbTransOut = nbTrans;
   2c6c4:	f883 b000 	strb.w	fp, [r3]
}
   2c6c8:	b00b      	add	sp, #44	; 0x2c
   2c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   2c6ce:	2302      	movs	r3, #2
                        RegionInitDefaults( adrNext->Region, &params );
   2c6d0:	7c20      	ldrb	r0, [r4, #16]
   2c6d2:	a906      	add	r1, sp, #24
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
   2c6d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        RegionInitDefaults( adrNext->Region, &params );
   2c6d8:	f000 fb39 	bl	2cd4e <RegionInitDefaults>
   2c6dc:	e7dd      	b.n	2c69a <LoRaMacAdrCalcNext+0x94>
    int8_t datarate = adrNext->Datarate;
   2c6de:	4645      	mov	r5, r8
   2c6e0:	e7ea      	b.n	2c6b8 <LoRaMacAdrCalcNext+0xb2>

0002c6e2 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
   2c6e2:	4770      	bx	lr

0002c6e4 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c6e4:	4770      	bx	lr

0002c6e6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
   2c6e6:	4770      	bx	lr

0002c6e8 <LoRaMacClassBSetMulticastSlotState>:
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
   2c6e8:	4770      	bx	lr

0002c6ea <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c6ea:	2000      	movs	r0, #0
   2c6ec:	4770      	bx	lr

0002c6ee <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c6ee:	4770      	bx	lr

0002c6f0 <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
   2c6f0:	4770      	bx	lr

0002c6f2 <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
   2c6f2:	4770      	bx	lr

0002c6f4 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c6f4:	2000      	movs	r0, #0
   2c6f6:	4770      	bx	lr

0002c6f8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
   2c6f8:	2000      	movs	r0, #0
   2c6fa:	4770      	bx	lr

0002c6fc <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsPingExpected( void )
   2c6fc:	2000      	movs	r0, #0
   2c6fe:	4770      	bx	lr

0002c700 <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsMulticastExpected( void )
   2c700:	2000      	movs	r0, #0
   2c702:	4770      	bx	lr

0002c704 <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
   2c704:	2000      	movs	r0, #0
   2c706:	4770      	bx	lr

0002c708 <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
   2c708:	4770      	bx	lr

0002c70a <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c70a:	4770      	bx	lr

0002c70c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
   2c70c:	4770      	bx	lr

0002c70e <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c70e:	2002      	movs	r0, #2
   2c710:	4770      	bx	lr

0002c712 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c712:	2002      	movs	r0, #2
   2c714:	4770      	bx	lr

0002c716 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
   2c716:	2002      	movs	r0, #2
   2c718:	4770      	bx	lr

0002c71a <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBPingSlotInfoAns( void )
   2c71a:	4770      	bx	lr

0002c71c <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c71c:	2000      	movs	r0, #0
   2c71e:	4770      	bx	lr

0002c720 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
   2c720:	4770      	bx	lr

0002c722 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
   2c722:	4770      	bx	lr

0002c724 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c724:	2000      	movs	r0, #0
   2c726:	4770      	bx	lr

0002c728 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
   2c728:	2000      	movs	r0, #0
   2c72a:	4770      	bx	lr

0002c72c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
   2c72c:	4770      	bx	lr

0002c72e <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
   2c72e:	4770      	bx	lr

0002c730 <LoRaMacClassBProcess>:

void LoRaMacClassBProcess( void )
   2c730:	4770      	bx	lr

0002c732 <DeriveSessionKey11x>:
{
   2c732:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c734:	460c      	mov	r4, r1
   2c736:	4605      	mov	r5, r0
   2c738:	461f      	mov	r7, r3
    if( joinEUI == 0 )
   2c73a:	4611      	mov	r1, r2
{
   2c73c:	b085      	sub	sp, #20
    if( joinEUI == 0 )
   2c73e:	b362      	cbz	r2, 2c79a <DeriveSessionKey11x+0x68>
    switch( keyID )
   2c740:	2806      	cmp	r0, #6
   2c742:	d006      	beq.n	2c752 <DeriveSessionKey11x+0x20>
   2c744:	2807      	cmp	r0, #7
   2c746:	d006      	beq.n	2c756 <DeriveSessionKey11x+0x24>
   2c748:	2805      	cmp	r0, #5
   2c74a:	d024      	beq.n	2c796 <DeriveSessionKey11x+0x64>
   2c74c:	2001      	movs	r0, #1
    KeyIdentifier_t rootKeyId = NWK_KEY;
   2c74e:	2601      	movs	r6, #1
   2c750:	e003      	b.n	2c75a <DeriveSessionKey11x+0x28>
    switch( keyID )
   2c752:	2004      	movs	r0, #4
   2c754:	e7fb      	b.n	2c74e <DeriveSessionKey11x+0x1c>
   2c756:	2002      	movs	r0, #2
            rootKeyId = APP_KEY;
   2c758:	2600      	movs	r6, #0
    uint8_t compBase[16] = { 0 };
   2c75a:	2300      	movs	r3, #0
    memcpyr( compBase + 4, joinEUI, 8 );
   2c75c:	2208      	movs	r2, #8
    uint8_t compBase[16] = { 0 };
   2c75e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2c762:	9303      	str	r3, [sp, #12]
            compBase[0] = 0x03;
   2c764:	f88d 0000 	strb.w	r0, [sp]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c768:	0a23      	lsrs	r3, r4, #8
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
   2c76a:	f88d 4001 	strb.w	r4, [sp, #1]
    memcpyr( compBase + 4, joinEUI, 8 );
   2c76e:	a801      	add	r0, sp, #4
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c770:	0c24      	lsrs	r4, r4, #16
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c772:	f88d 3002 	strb.w	r3, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c776:	f88d 4003 	strb.w	r4, [sp, #3]
    memcpyr( compBase + 4, joinEUI, 8 );
   2c77a:	f7ff fafe 	bl	2bd7a <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c77e:	462a      	mov	r2, r5
   2c780:	4631      	mov	r1, r6
   2c782:	4668      	mov	r0, sp
    compBase[12] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
   2c784:	f8ad 700c 	strh.w	r7, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c788:	f7ff fe80 	bl	2c48c <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c78c:	2800      	cmp	r0, #0
   2c78e:	bf18      	it	ne
   2c790:	200e      	movne	r0, #14
}
   2c792:	b005      	add	sp, #20
   2c794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( keyID )
   2c796:	2003      	movs	r0, #3
   2c798:	e7d9      	b.n	2c74e <DeriveSessionKey11x+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c79a:	2009      	movs	r0, #9
   2c79c:	e7f9      	b.n	2c792 <DeriveSessionKey11x+0x60>

0002c79e <DeriveSessionKey10x>:
{
   2c79e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t compBase[16] = { 0 };
   2c7a0:	2400      	movs	r4, #0
            compBase[0] = 0x01;
   2c7a2:	2807      	cmp	r0, #7
    uint8_t compBase[16] = { 0 };
   2c7a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
            compBase[0] = 0x01;
   2c7a8:	bf0c      	ite	eq
   2c7aa:	2402      	moveq	r4, #2
   2c7ac:	2401      	movne	r4, #1
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
   2c7ae:	f88d 1001 	strb.w	r1, [sp, #1]
   2c7b2:	f88d 4000 	strb.w	r4, [sp]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
   2c7b6:	f8ad 2004 	strh.w	r2, [sp, #4]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c7ba:	0a0c      	lsrs	r4, r1, #8
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
   2c7bc:	0c12      	lsrs	r2, r2, #16
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
   2c7be:	0c09      	lsrs	r1, r1, #16
   2c7c0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
   2c7c4:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
   2c7c8:	f88d 3007 	strb.w	r3, [sp, #7]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c7cc:	4602      	mov	r2, r0
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
   2c7ce:	0a1b      	lsrs	r3, r3, #8
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c7d0:	2101      	movs	r1, #1
   2c7d2:	4668      	mov	r0, sp
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
   2c7d4:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
   2c7d8:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
   2c7dc:	f7ff fe56 	bl	2c48c <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c7e0:	2800      	cmp	r0, #0
}
   2c7e2:	bf18      	it	ne
   2c7e4:	200e      	movne	r0, #14
   2c7e6:	b004      	add	sp, #16
   2c7e8:	bd10      	pop	{r4, pc}

0002c7ea <PayloadEncrypt>:
{
   2c7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c7ee:	b088      	sub	sp, #32
   2c7f0:	4690      	mov	r8, r2
   2c7f2:	460d      	mov	r5, r1
    if( buffer == 0 )
   2c7f4:	4607      	mov	r7, r0
{
   2c7f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
   2c7f8:	2800      	cmp	r0, #0
   2c7fa:	d047      	beq.n	2c88c <PayloadEncrypt+0xa2>
    uint8_t sBlock[16] = { 0 };
   2c7fc:	2400      	movs	r4, #0
    aBlock[0] = 0x01;
   2c7fe:	2101      	movs	r1, #1
    uint8_t aBlock[16] = { 0 };
   2c800:	e9cd 4404 	strd	r4, r4, [sp, #16]
    aBlock[0] = 0x01;
   2c804:	f88d 1010 	strb.w	r1, [sp, #16]
    aBlock[5] = dir;
   2c808:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    aBlock[6] = address & 0xFF;
   2c80c:	f8ad 3016 	strh.w	r3, [sp, #22]
    aBlock[5] = dir;
   2c810:	f88d 1015 	strb.w	r1, [sp, #21]
    uint8_t sBlock[16] = { 0 };
   2c814:	e9cd 4400 	strd	r4, r4, [sp]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   2c818:	0c19      	lsrs	r1, r3, #16
    uint8_t sBlock[16] = { 0 };
   2c81a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
   2c81e:	0e1b      	lsrs	r3, r3, #24
   2c820:	f88d 3019 	strb.w	r3, [sp, #25]
    aBlock[10] = frameCounter & 0xFF;
   2c824:	f8ad 201a 	strh.w	r2, [sp, #26]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   2c828:	0c13      	lsrs	r3, r2, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   2c82a:	0e12      	lsrs	r2, r2, #24
    uint8_t aBlock[16] = { 0 };
   2c82c:	9407      	str	r4, [sp, #28]
    aBlock[8] = ( address >> 16 ) & 0xFF;
   2c82e:	f88d 1018 	strb.w	r1, [sp, #24]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
   2c832:	f88d 301c 	strb.w	r3, [sp, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
   2c836:	f88d 201d 	strb.w	r2, [sp, #29]
    while( size > 0 )
   2c83a:	b2e3      	uxtb	r3, r4
   2c83c:	011e      	lsls	r6, r3, #4
   2c83e:	2d00      	cmp	r5, #0
   2c840:	b2f6      	uxtb	r6, r6
   2c842:	dc03      	bgt.n	2c84c <PayloadEncrypt+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
   2c844:	2000      	movs	r0, #0
}
   2c846:	b008      	add	sp, #32
   2c848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
   2c84c:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
   2c84e:	3301      	adds	r3, #1
   2c850:	f88d 301f 	strb.w	r3, [sp, #31]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
   2c854:	4642      	mov	r2, r8
   2c856:	466b      	mov	r3, sp
   2c858:	eb0d 0001 	add.w	r0, sp, r1
   2c85c:	f7e8 f9bc 	bl	14bd8 <SecureElementAesEncrypt>
   2c860:	4603      	mov	r3, r0
   2c862:	b9a8      	cbnz	r0, 2c890 <PayloadEncrypt+0xa6>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c864:	2d10      	cmp	r5, #16
   2c866:	4628      	mov	r0, r5
   2c868:	4669      	mov	r1, sp
   2c86a:	bfa8      	it	ge
   2c86c:	2010      	movge	r0, #16
   2c86e:	443e      	add	r6, r7
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c870:	7832      	ldrb	r2, [r6, #0]
   2c872:	f811 cb01 	ldrb.w	ip, [r1], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c876:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c878:	ea82 020c 	eor.w	r2, r2, ip
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c87c:	4298      	cmp	r0, r3
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
   2c87e:	f806 2b01 	strb.w	r2, [r6], #1
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
   2c882:	dcf5      	bgt.n	2c870 <PayloadEncrypt+0x86>
        size -= 16;
   2c884:	3d10      	subs	r5, #16
   2c886:	b22d      	sxth	r5, r5
        bufferIndex += 16;
   2c888:	3401      	adds	r4, #1
   2c88a:	e7d6      	b.n	2c83a <PayloadEncrypt+0x50>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c88c:	2009      	movs	r0, #9
   2c88e:	e7da      	b.n	2c846 <PayloadEncrypt+0x5c>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c890:	200e      	movs	r0, #14
   2c892:	e7d8      	b.n	2c846 <PayloadEncrypt+0x5c>

0002c894 <LoRaMacCryptoDeriveMcKEKey.part.0>:
LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
   2c894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
   2c896:	2300      	movs	r3, #0

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c898:	227f      	movs	r2, #127	; 0x7f
   2c89a:	2108      	movs	r1, #8
   2c89c:	4668      	mov	r0, sp
    uint8_t compBase[16] = { 0 };
   2c89e:	e9cd 3300 	strd	r3, r3, [sp]
   2c8a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c8a6:	f7ff fdf1 	bl	2c48c <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c8aa:	2800      	cmp	r0, #0
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
   2c8ac:	bf18      	it	ne
   2c8ae:	200e      	movne	r0, #14
   2c8b0:	b005      	add	sp, #20
   2c8b2:	f85d fb04 	ldr.w	pc, [sp], #4

0002c8b6 <ComputeCmacB0.constprop.0>:
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
   2c8b6:	b570      	push	{r4, r5, r6, lr}
   2c8b8:	b086      	sub	sp, #24
   2c8ba:	460c      	mov	r4, r1
   2c8bc:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
   2c8c0:	4613      	mov	r3, r2
    if( ( msg == 0 ) || ( cmac == 0 ) )
   2c8c2:	4601      	mov	r1, r0
   2c8c4:	b330      	cbz	r0, 2c914 <ComputeCmacB0.constprop.0+0x5e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
   2c8c6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   2c8ca:	d825      	bhi.n	2c918 <ComputeCmacB0.constprop.0+0x62>
    b0[0] = 0x49;
   2c8cc:	2249      	movs	r2, #73	; 0x49
   2c8ce:	9202      	str	r2, [sp, #8]
    b0[4] = 0x00;
   2c8d0:	2200      	movs	r2, #0
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   2c8d2:	0c30      	lsrs	r0, r6, #16
    b0[4] = 0x00;
   2c8d4:	f8ad 200c 	strh.w	r2, [sp, #12]
    b0[14] = 0x00;
   2c8d8:	f88d 2016 	strb.w	r2, [sp, #22]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c8dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b0[8] = ( devAddr >> 16 ) & 0xFF;
   2c8de:	f88d 0010 	strb.w	r0, [sp, #16]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   2c8e2:	0c28      	lsrs	r0, r5, #16
    b0[6] = devAddr & 0xFF;
   2c8e4:	f8ad 600e 	strh.w	r6, [sp, #14]
    b0[10] = fCnt & 0xFF;
   2c8e8:	f8ad 5012 	strh.w	r5, [sp, #18]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
   2c8ec:	f88d 0014 	strb.w	r0, [sp, #20]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c8f0:	9200      	str	r2, [sp, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   2c8f2:	0e36      	lsrs	r6, r6, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c8f4:	4622      	mov	r2, r4
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   2c8f6:	0e2d      	lsrs	r5, r5, #24
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c8f8:	a802      	add	r0, sp, #8
    b0[9] = ( devAddr >> 24 ) & 0xFF;
   2c8fa:	f88d 6011 	strb.w	r6, [sp, #17]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
   2c8fe:	f88d 5015 	strb.w	r5, [sp, #21]
    b0[15] = msgLen & 0xFF;
   2c902:	f88d 4017 	strb.w	r4, [sp, #23]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
   2c906:	f7ff fda0 	bl	2c44a <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c90a:	2800      	cmp	r0, #0
   2c90c:	bf18      	it	ne
   2c90e:	200e      	movne	r0, #14
}
   2c910:	b006      	add	sp, #24
   2c912:	bd70      	pop	{r4, r5, r6, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c914:	2009      	movs	r0, #9
   2c916:	e7fb      	b.n	2c910 <ComputeCmacB0.constprop.0+0x5a>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
   2c918:	200d      	movs	r0, #13
   2c91a:	e7f9      	b.n	2c910 <ComputeCmacB0.constprop.0+0x5a>

0002c91c <LoRaMacCryptoGetFCntDown>:
    uint32_t lastDown = 0;
   2c91c:	2300      	movs	r3, #0
{
   2c91e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c920:	460c      	mov	r4, r1
    if( currentDown == NULL )
   2c922:	4615      	mov	r5, r2
    uint32_t lastDown = 0;
   2c924:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
   2c926:	b1ca      	cbz	r2, 2c95c <LoRaMacCryptoGetFCntDown+0x40>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
   2c928:	a901      	add	r1, sp, #4
   2c92a:	f7eb fc37 	bl	1819c <GetLastFcntDown.constprop.0>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
   2c92e:	b918      	cbnz	r0, 2c938 <LoRaMacCryptoGetFCntDown+0x1c>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
   2c930:	9b01      	ldr	r3, [sp, #4]
   2c932:	1c5a      	adds	r2, r3, #1
   2c934:	d102      	bne.n	2c93c <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
   2c936:	602c      	str	r4, [r5, #0]
}
   2c938:	b003      	add	sp, #12
   2c93a:	bd30      	pop	{r4, r5, pc}
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
   2c93c:	b29a      	uxth	r2, r3
   2c93e:	1aa2      	subs	r2, r4, r2
        if( fCntDiff > 0 )
   2c940:	2a00      	cmp	r2, #0
   2c942:	dd01      	ble.n	2c948 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown + fCntDiff;
   2c944:	189c      	adds	r4, r3, r2
   2c946:	e7f6      	b.n	2c936 <LoRaMacCryptoGetFCntDown+0x1a>
        else if( fCntDiff == 0 )
   2c948:	d102      	bne.n	2c950 <LoRaMacCryptoGetFCntDown+0x34>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
   2c94a:	2007      	movs	r0, #7
            *currentDown = lastDown;
   2c94c:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
   2c94e:	e7f3      	b.n	2c938 <LoRaMacCryptoGetFCntDown+0x1c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
   2c950:	0c1b      	lsrs	r3, r3, #16
   2c952:	041b      	lsls	r3, r3, #16
   2c954:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2c958:	441c      	add	r4, r3
   2c95a:	e7ec      	b.n	2c936 <LoRaMacCryptoGetFCntDown+0x1a>
        return LORAMAC_CRYPTO_ERROR_NPE;
   2c95c:	2009      	movs	r0, #9
   2c95e:	e7eb      	b.n	2c938 <LoRaMacCryptoGetFCntDown+0x1c>

0002c960 <LoRaMacCryptoDeriveMcRootKey>:
{
   2c960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( keyID != APP_KEY )
   2c962:	b9b1      	cbnz	r1, 2c992 <LoRaMacCryptoDeriveMcRootKey+0x32>
    if( versionMinor == 1 )
   2c964:	2801      	cmp	r0, #1
        compBase[0] = 0x20;
   2c966:	bf08      	it	eq
   2c968:	2320      	moveq	r3, #32
    uint8_t compBase[16] = { 0 };
   2c96a:	e9cd 1100 	strd	r1, r1, [sp]
   2c96e:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c972:	f04f 0208 	mov.w	r2, #8
   2c976:	f04f 0100 	mov.w	r1, #0
   2c97a:	4668      	mov	r0, sp
        compBase[0] = 0x20;
   2c97c:	bf08      	it	eq
   2c97e:	f88d 3000 	strbeq.w	r3, [sp]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
   2c982:	f7ff fd83 	bl	2c48c <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
   2c986:	2800      	cmp	r0, #0
   2c988:	bf18      	it	ne
   2c98a:	200e      	movne	r0, #14
}
   2c98c:	b005      	add	sp, #20
   2c98e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
   2c992:	200a      	movs	r0, #10
   2c994:	e7fa      	b.n	2c98c <LoRaMacCryptoDeriveMcRootKey+0x2c>

0002c996 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
   2c996:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2c998:	4604      	mov	r4, r0
   2c99a:	2800      	cmp	r0, #0
   2c99c:	d045      	beq.n	2ca2a <LoRaMacParserJoinAccept+0x94>
   2c99e:	6801      	ldr	r1, [r0, #0]
   2c9a0:	2900      	cmp	r1, #0
   2c9a2:	d042      	beq.n	2ca2a <LoRaMacParserJoinAccept+0x94>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c9a4:	f811 3b01 	ldrb.w	r3, [r1], #1

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
   2c9a8:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2c9aa:	7143      	strb	r3, [r0, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
   2c9ac:	3006      	adds	r0, #6
   2c9ae:	f7ff f9da 	bl	2bd66 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
   2c9b2:	4620      	mov	r0, r4
   2c9b4:	f850 1b09 	ldr.w	r1, [r0], #9
   2c9b8:	2203      	movs	r2, #3
   2c9ba:	3104      	adds	r1, #4
   2c9bc:	f7ff f9d3 	bl	2bd66 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c9c0:	6821      	ldr	r1, [r4, #0]
   2c9c2:	79cb      	ldrb	r3, [r1, #7]
   2c9c4:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c9c6:	7a0a      	ldrb	r2, [r1, #8]
   2c9c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2c9cc:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2c9ce:	7a4a      	ldrb	r2, [r1, #9]
   2c9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2c9d4:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2c9d6:	7a8a      	ldrb	r2, [r1, #10]
   2c9d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2c9dc:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
   2c9de:	7acb      	ldrb	r3, [r1, #11]
   2c9e0:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
   2c9e2:	7b0b      	ldrb	r3, [r1, #12]
   2c9e4:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
   2c9e6:	7923      	ldrb	r3, [r4, #4]
   2c9e8:	2b21      	cmp	r3, #33	; 0x21
   2c9ea:	d11a      	bne.n	2ca22 <LoRaMacParserJoinAccept+0x8c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
   2c9ec:	2210      	movs	r2, #16
   2c9ee:	310d      	adds	r1, #13
   2c9f0:	f104 0012 	add.w	r0, r4, #18
   2c9f4:	f7ff f9b7 	bl	2bd66 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
   2c9f8:	221d      	movs	r2, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c9fa:	6821      	ldr	r1, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2c9fc:	1c50      	adds	r0, r2, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
   2c9fe:	5c8b      	ldrb	r3, [r1, r2]
   2ca00:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2ca02:	5c08      	ldrb	r0, [r1, r0]
   2ca04:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2ca08:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2ca0a:	1c90      	adds	r0, r2, #2
   2ca0c:	5c08      	ldrb	r0, [r1, r0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2ca0e:	3203      	adds	r2, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2ca10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

    return LORAMAC_PARSER_SUCCESS;
   2ca14:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2ca16:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2ca18:	5c8a      	ldrb	r2, [r1, r2]
   2ca1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2ca1e:	6263      	str	r3, [r4, #36]	; 0x24
}
   2ca20:	bd10      	pop	{r4, pc}
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
   2ca22:	2b11      	cmp	r3, #17
   2ca24:	dc03      	bgt.n	2ca2e <LoRaMacParserJoinAccept+0x98>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
   2ca26:	220d      	movs	r2, #13
   2ca28:	e7e7      	b.n	2c9fa <LoRaMacParserJoinAccept+0x64>
        return LORAMAC_PARSER_ERROR_NPE;
   2ca2a:	2002      	movs	r0, #2
   2ca2c:	e7f8      	b.n	2ca20 <LoRaMacParserJoinAccept+0x8a>
        return LORAMAC_PARSER_FAIL;
   2ca2e:	2001      	movs	r0, #1
   2ca30:	e7f6      	b.n	2ca20 <LoRaMacParserJoinAccept+0x8a>

0002ca32 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
   2ca32:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2ca34:	4604      	mov	r4, r0
   2ca36:	2800      	cmp	r0, #0
   2ca38:	d063      	beq.n	2cb02 <LoRaMacParserData+0xd0>
   2ca3a:	6801      	ldr	r1, [r0, #0]
   2ca3c:	2900      	cmp	r1, #0
   2ca3e:	d060      	beq.n	2cb02 <LoRaMacParserData+0xd0>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2ca40:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2ca42:	3010      	adds	r0, #16
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
   2ca44:	f800 3c0b 	strb.w	r3, [r0, #-11]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
   2ca48:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2ca4a:	3108      	adds	r1, #8
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
   2ca4c:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
   2ca50:	f811 2c06 	ldrb.w	r2, [r1, #-6]
   2ca54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ca58:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
   2ca5c:	f811 2c05 	ldrb.w	r2, [r1, #-5]
   2ca60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2ca64:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
   2ca68:	f811 2c04 	ldrb.w	r2, [r1, #-4]
   2ca6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2ca70:	f840 3c08 	str.w	r3, [r0, #-8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
   2ca74:	f811 3c03 	ldrb.w	r3, [r1, #-3]
   2ca78:	f800 3c04 	strb.w	r3, [r0, #-4]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
   2ca7c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   2ca80:	f820 3c02 	strh.w	r3, [r0, #-2]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
   2ca84:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   2ca88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2ca8c:	f810 2c04 	ldrb.w	r2, [r0, #-4]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
   2ca90:	f820 3c02 	strh.w	r3, [r0, #-2]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2ca94:	f002 020f 	and.w	r2, r2, #15
   2ca98:	f7ff f965 	bl	2bd66 <memcpy1>
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
   2ca9c:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2ca9e:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FPort = 0;
   2caa0:	f884 2020 	strb.w	r2, [r4, #32]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2caa4:	f003 030f 	and.w	r3, r3, #15
    macMsg->FRMPayloadSize = 0;
   2caa8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
   2caac:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2caae:	f103 0008 	add.w	r0, r3, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
   2cab2:	1a11      	subs	r1, r2, r0
   2cab4:	2904      	cmp	r1, #4
   2cab6:	dd0d      	ble.n	2cad4 <LoRaMacParserData+0xa2>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2cab8:	6821      	ldr	r1, [r4, #0]
   2caba:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2cabc:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2cabe:	5c08      	ldrb	r0, [r1, r0]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2cac0:	1ad2      	subs	r2, r2, r3
   2cac2:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
   2cac4:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
   2cac8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
   2cacc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2cace:	4419      	add	r1, r3
   2cad0:	f7ff f949 	bl	2bd66 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
   2cad4:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
   2cad6:	7923      	ldrb	r3, [r4, #4]
   2cad8:	6822      	ldr	r2, [r4, #0]
   2cada:	441a      	add	r2, r3
   2cadc:	f812 3c04 	ldrb.w	r3, [r2, #-4]
   2cae0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
   2cae2:	f812 1c03 	ldrb.w	r1, [r2, #-3]
   2cae6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2caea:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
   2caec:	f812 1c02 	ldrb.w	r1, [r2, #-2]
   2caf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2caf4:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
   2caf6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2cafa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2cafe:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   2cb00:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_ERROR_NPE;
   2cb02:	2002      	movs	r0, #2
   2cb04:	e7fc      	b.n	2cb00 <LoRaMacParserData+0xce>

0002cb06 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
   2cb06:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2cb08:	4604      	mov	r4, r0
   2cb0a:	b360      	cbz	r0, 2cb66 <LoRaMacSerializerJoinRequest+0x60>
   2cb0c:	6803      	ldr	r3, [r0, #0]
   2cb0e:	b353      	cbz	r3, 2cb66 <LoRaMacSerializerJoinRequest+0x60>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
   2cb10:	7902      	ldrb	r2, [r0, #4]
   2cb12:	2a16      	cmp	r2, #22
   2cb14:	d929      	bls.n	2cb6a <LoRaMacSerializerJoinRequest+0x64>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2cb16:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2cb18:	7942      	ldrb	r2, [r0, #5]
   2cb1a:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2cb1c:	f851 0b06 	ldr.w	r0, [r1], #6
   2cb20:	2208      	movs	r2, #8
   2cb22:	3001      	adds	r0, #1
   2cb24:	f7ff f929 	bl	2bd7a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2cb28:	4621      	mov	r1, r4
   2cb2a:	f851 0b0e 	ldr.w	r0, [r1], #14
   2cb2e:	2208      	movs	r2, #8
   2cb30:	3009      	adds	r0, #9
   2cb32:	f7ff f922 	bl	2bd7a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
   2cb36:	6823      	ldr	r3, [r4, #0]
   2cb38:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2cb3a:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
   2cb3c:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
   2cb3e:	8ae3      	ldrh	r3, [r4, #22]
   2cb40:	6822      	ldr	r2, [r4, #0]
   2cb42:	0a1b      	lsrs	r3, r3, #8
   2cb44:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2cb46:	6823      	ldr	r3, [r4, #0]
   2cb48:	69a2      	ldr	r2, [r4, #24]
   2cb4a:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cb4c:	69a3      	ldr	r3, [r4, #24]
   2cb4e:	6822      	ldr	r2, [r4, #0]
   2cb50:	0a1b      	lsrs	r3, r3, #8
   2cb52:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cb54:	6823      	ldr	r3, [r4, #0]
   2cb56:	8b62      	ldrh	r2, [r4, #26]
   2cb58:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cb5a:	6823      	ldr	r3, [r4, #0]
   2cb5c:	7ee2      	ldrb	r2, [r4, #27]
   2cb5e:	759a      	strb	r2, [r3, #22]
    macMsg->BufSize = bufItr;
   2cb60:	2317      	movs	r3, #23
   2cb62:	7123      	strb	r3, [r4, #4]
}
   2cb64:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2cb66:	2001      	movs	r0, #1
   2cb68:	e7fc      	b.n	2cb64 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2cb6a:	2002      	movs	r0, #2
   2cb6c:	e7fa      	b.n	2cb64 <LoRaMacSerializerJoinRequest+0x5e>

0002cb6e <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
   2cb6e:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2cb70:	4604      	mov	r4, r0
   2cb72:	2800      	cmp	r0, #0
   2cb74:	d02f      	beq.n	2cbd6 <LoRaMacSerializerReJoinType1+0x68>
   2cb76:	6803      	ldr	r3, [r0, #0]
   2cb78:	b36b      	cbz	r3, 2cbd6 <LoRaMacSerializerReJoinType1+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
   2cb7a:	7902      	ldrb	r2, [r0, #4]
   2cb7c:	2a17      	cmp	r2, #23
   2cb7e:	d92c      	bls.n	2cbda <LoRaMacSerializerReJoinType1+0x6c>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2cb80:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2cb82:	7942      	ldrb	r2, [r0, #5]
   2cb84:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
   2cb86:	6803      	ldr	r3, [r0, #0]
   2cb88:	7982      	ldrb	r2, [r0, #6]
   2cb8a:	705a      	strb	r2, [r3, #1]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
   2cb8c:	f851 0b07 	ldr.w	r0, [r1], #7
   2cb90:	2208      	movs	r2, #8
   2cb92:	3002      	adds	r0, #2
   2cb94:	f7ff f8f1 	bl	2bd7a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2cb98:	4621      	mov	r1, r4
   2cb9a:	f851 0b0f 	ldr.w	r0, [r1], #15
   2cb9e:	2208      	movs	r2, #8
   2cba0:	300a      	adds	r0, #10
   2cba2:	f7ff f8ea 	bl	2bd7a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
   2cba6:	6823      	ldr	r3, [r4, #0]
   2cba8:	8b22      	ldrh	r2, [r4, #24]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2cbaa:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
   2cbac:	749a      	strb	r2, [r3, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
   2cbae:	8b23      	ldrh	r3, [r4, #24]
   2cbb0:	6822      	ldr	r2, [r4, #0]
   2cbb2:	0a1b      	lsrs	r3, r3, #8
   2cbb4:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2cbb6:	6823      	ldr	r3, [r4, #0]
   2cbb8:	69e2      	ldr	r2, [r4, #28]
   2cbba:	751a      	strb	r2, [r3, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cbbc:	69e3      	ldr	r3, [r4, #28]
   2cbbe:	6822      	ldr	r2, [r4, #0]
   2cbc0:	0a1b      	lsrs	r3, r3, #8
   2cbc2:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cbc4:	6823      	ldr	r3, [r4, #0]
   2cbc6:	8be2      	ldrh	r2, [r4, #30]
   2cbc8:	759a      	strb	r2, [r3, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cbca:	6823      	ldr	r3, [r4, #0]
   2cbcc:	7fe2      	ldrb	r2, [r4, #31]
   2cbce:	75da      	strb	r2, [r3, #23]
    macMsg->BufSize = bufItr;
   2cbd0:	2318      	movs	r3, #24
   2cbd2:	7123      	strb	r3, [r4, #4]
}
   2cbd4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2cbd6:	2001      	movs	r0, #1
   2cbd8:	e7fc      	b.n	2cbd4 <LoRaMacSerializerReJoinType1+0x66>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2cbda:	2002      	movs	r0, #2
   2cbdc:	e7fa      	b.n	2cbd4 <LoRaMacSerializerReJoinType1+0x66>

0002cbde <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
   2cbde:	b510      	push	{r4, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2cbe0:	4604      	mov	r4, r0
   2cbe2:	2800      	cmp	r0, #0
   2cbe4:	d02f      	beq.n	2cc46 <LoRaMacSerializerReJoinType0or2+0x68>
   2cbe6:	6803      	ldr	r3, [r0, #0]
   2cbe8:	b36b      	cbz	r3, 2cc46 <LoRaMacSerializerReJoinType0or2+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
   2cbea:	7902      	ldrb	r2, [r0, #4]
   2cbec:	2a12      	cmp	r2, #18
   2cbee:	d92c      	bls.n	2cc4a <LoRaMacSerializerReJoinType0or2+0x6c>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
   2cbf0:	4601      	mov	r1, r0
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2cbf2:	7942      	ldrb	r2, [r0, #5]
   2cbf4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
   2cbf6:	6803      	ldr	r3, [r0, #0]
   2cbf8:	7982      	ldrb	r2, [r0, #6]
   2cbfa:	705a      	strb	r2, [r3, #1]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
   2cbfc:	f851 0b07 	ldr.w	r0, [r1], #7
   2cc00:	2203      	movs	r2, #3
   2cc02:	3002      	adds	r0, #2
   2cc04:	f7ff f8af 	bl	2bd66 <memcpy1>
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
   2cc08:	4621      	mov	r1, r4
   2cc0a:	f851 0b0a 	ldr.w	r0, [r1], #10
   2cc0e:	2208      	movs	r2, #8
   2cc10:	3005      	adds	r0, #5
   2cc12:	f7ff f8b2 	bl	2bd7a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
   2cc16:	6823      	ldr	r3, [r4, #0]
   2cc18:	8a62      	ldrh	r2, [r4, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2cc1a:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
   2cc1c:	735a      	strb	r2, [r3, #13]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
   2cc1e:	8a63      	ldrh	r3, [r4, #18]
   2cc20:	6822      	ldr	r2, [r4, #0]
   2cc22:	0a1b      	lsrs	r3, r3, #8
   2cc24:	7393      	strb	r3, [r2, #14]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2cc26:	6823      	ldr	r3, [r4, #0]
   2cc28:	6962      	ldr	r2, [r4, #20]
   2cc2a:	73da      	strb	r2, [r3, #15]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cc2c:	6963      	ldr	r3, [r4, #20]
   2cc2e:	6822      	ldr	r2, [r4, #0]
   2cc30:	0a1b      	lsrs	r3, r3, #8
   2cc32:	7413      	strb	r3, [r2, #16]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cc34:	6823      	ldr	r3, [r4, #0]
   2cc36:	8ae2      	ldrh	r2, [r4, #22]
   2cc38:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cc3a:	6823      	ldr	r3, [r4, #0]
   2cc3c:	7de2      	ldrb	r2, [r4, #23]
   2cc3e:	749a      	strb	r2, [r3, #18]
    macMsg->BufSize = bufItr;
   2cc40:	2313      	movs	r3, #19
   2cc42:	7123      	strb	r3, [r4, #4]
}
   2cc44:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2cc46:	2001      	movs	r0, #1
   2cc48:	e7fc      	b.n	2cc44 <LoRaMacSerializerReJoinType0or2+0x66>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2cc4a:	2002      	movs	r0, #2
   2cc4c:	e7fa      	b.n	2cc44 <LoRaMacSerializerReJoinType0or2+0x66>

0002cc4e <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
   2cc4e:	b538      	push	{r3, r4, r5, lr}
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
   2cc50:	4604      	mov	r4, r0
   2cc52:	2800      	cmp	r0, #0
   2cc54:	d063      	beq.n	2cd1e <LoRaMacSerializerData+0xd0>
   2cc56:	6801      	ldr	r1, [r0, #0]
   2cc58:	2900      	cmp	r1, #0
   2cc5a:	d060      	beq.n	2cd1e <LoRaMacSerializerData+0xd0>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2cc5c:	7b03      	ldrb	r3, [r0, #12]

    if( macMsg->FRMPayloadSize > 0 )
   2cc5e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2cc62:	f003 030f 	and.w	r3, r3, #15
    if( macMsg->FRMPayloadSize > 0 )
   2cc66:	2a00      	cmp	r2, #0
   2cc68:	d157      	bne.n	2cd1a <LoRaMacSerializerData+0xcc>
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2cc6a:	3308      	adds	r3, #8
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;

    if( macMsg->BufSize < computedBufSize )
   2cc6c:	7920      	ldrb	r0, [r4, #4]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
   2cc6e:	3204      	adds	r2, #4
    if( macMsg->BufSize < computedBufSize )
   2cc70:	4413      	add	r3, r2
   2cc72:	4298      	cmp	r0, r3
   2cc74:	d355      	bcc.n	2cd22 <LoRaMacSerializerData+0xd4>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
   2cc76:	7963      	ldrb	r3, [r4, #5]
   2cc78:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2cc7a:	4621      	mov	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
   2cc7c:	6823      	ldr	r3, [r4, #0]
   2cc7e:	68a2      	ldr	r2, [r4, #8]
   2cc80:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
   2cc82:	68a3      	ldr	r3, [r4, #8]
   2cc84:	6822      	ldr	r2, [r4, #0]
   2cc86:	0a1b      	lsrs	r3, r3, #8
   2cc88:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
   2cc8a:	6823      	ldr	r3, [r4, #0]
   2cc8c:	8962      	ldrh	r2, [r4, #10]
   2cc8e:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
   2cc90:	6823      	ldr	r3, [r4, #0]
   2cc92:	7ae2      	ldrb	r2, [r4, #11]
   2cc94:	711a      	strb	r2, [r3, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
   2cc96:	6823      	ldr	r3, [r4, #0]
   2cc98:	7b22      	ldrb	r2, [r4, #12]
   2cc9a:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
   2cc9c:	6823      	ldr	r3, [r4, #0]
   2cc9e:	89e2      	ldrh	r2, [r4, #14]
   2cca0:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
   2cca2:	89e3      	ldrh	r3, [r4, #14]
   2cca4:	6822      	ldr	r2, [r4, #0]
   2cca6:	0a1b      	lsrs	r3, r3, #8
   2cca8:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
   2ccaa:	7b22      	ldrb	r2, [r4, #12]
   2ccac:	f851 0b10 	ldr.w	r0, [r1], #16
   2ccb0:	f002 020f 	and.w	r2, r2, #15
   2ccb4:	3008      	adds	r0, #8
   2ccb6:	f7ff f856 	bl	2bd66 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2ccba:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
   2ccbc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
   2ccc0:	f003 030f 	and.w	r3, r3, #15
   2ccc4:	f103 0508 	add.w	r5, r3, #8
    if( macMsg->FRMPayloadSize > 0 )
   2ccc8:	b12a      	cbz	r2, 2ccd6 <LoRaMacSerializerData+0x88>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
   2ccca:	f894 1020 	ldrb.w	r1, [r4, #32]
   2ccce:	6822      	ldr	r2, [r4, #0]
   2ccd0:	5551      	strb	r1, [r2, r5]
   2ccd2:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
   2ccd6:	6820      	ldr	r0, [r4, #0]
   2ccd8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   2ccdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2ccde:	4428      	add	r0, r5
   2cce0:	f7ff f841 	bl	2bd66 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
   2cce4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2cce8:	6822      	ldr	r2, [r4, #0]
   2ccea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
   2ccec:	442b      	add	r3, r5
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2ccee:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2ccf0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   2ccf2:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
   2ccf4:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2ccf6:	b292      	uxth	r2, r2
   2ccf8:	0a09      	lsrs	r1, r1, #8
   2ccfa:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2ccfc:	6821      	ldr	r1, [r4, #0]
   2ccfe:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
   2cd00:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cd02:	b292      	uxth	r2, r2
   2cd04:	5488      	strb	r0, [r1, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cd06:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
   2cd0a:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cd0c:	6821      	ldr	r1, [r4, #0]
   2cd0e:	b292      	uxth	r2, r2
   2cd10:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
   2cd12:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
   2cd14:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
   2cd16:	7123      	strb	r3, [r4, #4]
}
   2cd18:	bd38      	pop	{r3, r4, r5, pc}
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
   2cd1a:	3309      	adds	r3, #9
   2cd1c:	e7a6      	b.n	2cc6c <LoRaMacSerializerData+0x1e>
        return LORAMAC_SERIALIZER_ERROR_NPE;
   2cd1e:	2001      	movs	r0, #1
   2cd20:	e7fa      	b.n	2cd18 <LoRaMacSerializerData+0xca>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
   2cd22:	2002      	movs	r0, #2
   2cd24:	e7f8      	b.n	2cd18 <LoRaMacSerializerData+0xca>

0002cd26 <RegionIsActive>:
}
   2cd26:	1f43      	subs	r3, r0, #5
   2cd28:	4258      	negs	r0, r3
   2cd2a:	4158      	adcs	r0, r3
   2cd2c:	4770      	bx	lr

0002cd2e <RegionGetPhyParam>:
    switch( region )
   2cd2e:	2805      	cmp	r0, #5
{
   2cd30:	b082      	sub	sp, #8
    switch( region )
   2cd32:	d103      	bne.n	2cd3c <RegionGetPhyParam+0xe>
        EU868_GET_PHY_PARAM( );
   2cd34:	4608      	mov	r0, r1
}
   2cd36:	b002      	add	sp, #8
        EU868_GET_PHY_PARAM( );
   2cd38:	f7eb bfac 	b.w	18c94 <RegionEU868GetPhyParam>
}
   2cd3c:	2000      	movs	r0, #0
   2cd3e:	b002      	add	sp, #8
   2cd40:	4770      	bx	lr

0002cd42 <RegionSetBandTxDone>:
    switch( region )
   2cd42:	2805      	cmp	r0, #5
   2cd44:	d102      	bne.n	2cd4c <RegionSetBandTxDone+0xa>
        EU868_SET_BAND_TX_DONE( );
   2cd46:	4608      	mov	r0, r1
   2cd48:	f7ec b834 	b.w	18db4 <RegionEU868SetBandTxDone>
}
   2cd4c:	4770      	bx	lr

0002cd4e <RegionInitDefaults>:
    switch( region )
   2cd4e:	2805      	cmp	r0, #5
   2cd50:	d102      	bne.n	2cd58 <RegionInitDefaults+0xa>
        EU868_INIT_DEFAULTS( );
   2cd52:	4608      	mov	r0, r1
   2cd54:	f7ec b84a 	b.w	18dec <RegionEU868InitDefaults>
}
   2cd58:	4770      	bx	lr

0002cd5a <RegionVerify>:
{
   2cd5a:	4603      	mov	r3, r0
    switch( region )
   2cd5c:	2b05      	cmp	r3, #5
{
   2cd5e:	4608      	mov	r0, r1
   2cd60:	4611      	mov	r1, r2
    switch( region )
   2cd62:	d101      	bne.n	2cd68 <RegionVerify+0xe>
        EU868_VERIFY( );
   2cd64:	f000 ba86 	b.w	2d274 <RegionEU868Verify>
}
   2cd68:	2000      	movs	r0, #0
   2cd6a:	4770      	bx	lr

0002cd6c <RegionApplyCFList>:
    switch( region )
   2cd6c:	2805      	cmp	r0, #5
   2cd6e:	d102      	bne.n	2cd76 <RegionApplyCFList+0xa>
        EU868_APPLY_CF_LIST( );
   2cd70:	4608      	mov	r0, r1
   2cd72:	f000 bac6 	b.w	2d302 <RegionEU868ApplyCFList>
}
   2cd76:	4770      	bx	lr

0002cd78 <RegionChanMaskSet>:
    switch( region )
   2cd78:	2805      	cmp	r0, #5
   2cd7a:	d102      	bne.n	2cd82 <RegionChanMaskSet+0xa>
        EU868_CHAN_MASK_SET( );
   2cd7c:	4608      	mov	r0, r1
   2cd7e:	f7ec b89b 	b.w	18eb8 <RegionEU868ChanMaskSet>
}
   2cd82:	2000      	movs	r0, #0
   2cd84:	4770      	bx	lr

0002cd86 <RegionComputeRxWindowParameters>:
{
   2cd86:	b410      	push	{r4}
   2cd88:	4604      	mov	r4, r0
    switch( region )
   2cd8a:	2c05      	cmp	r4, #5
{
   2cd8c:	4608      	mov	r0, r1
   2cd8e:	4611      	mov	r1, r2
   2cd90:	461a      	mov	r2, r3
   2cd92:	9b01      	ldr	r3, [sp, #4]
    switch( region )
   2cd94:	d102      	bne.n	2cd9c <RegionComputeRxWindowParameters+0x16>
}
   2cd96:	bc10      	pop	{r4}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
   2cd98:	f7ec b8a8 	b.w	18eec <RegionEU868ComputeRxWindowParameters>
}
   2cd9c:	bc10      	pop	{r4}
   2cd9e:	4770      	bx	lr

0002cda0 <RegionRxConfig>:
{
   2cda0:	4603      	mov	r3, r0
    switch( region )
   2cda2:	2b05      	cmp	r3, #5
{
   2cda4:	4608      	mov	r0, r1
   2cda6:	4611      	mov	r1, r2
    switch( region )
   2cda8:	d101      	bne.n	2cdae <RegionRxConfig+0xe>
        EU868_RX_CONFIG( );
   2cdaa:	f7ec b8d1 	b.w	18f50 <RegionEU868RxConfig>
}
   2cdae:	2000      	movs	r0, #0
   2cdb0:	4770      	bx	lr

0002cdb2 <RegionTxConfig>:
{
   2cdb2:	b410      	push	{r4}
   2cdb4:	4604      	mov	r4, r0
    switch( region )
   2cdb6:	2c05      	cmp	r4, #5
{
   2cdb8:	4608      	mov	r0, r1
   2cdba:	4611      	mov	r1, r2
   2cdbc:	461a      	mov	r2, r3
    switch( region )
   2cdbe:	d102      	bne.n	2cdc6 <RegionTxConfig+0x14>
}
   2cdc0:	bc10      	pop	{r4}
        EU868_TX_CONFIG( );
   2cdc2:	f7ec b931 	b.w	19028 <RegionEU868TxConfig>
}
   2cdc6:	2000      	movs	r0, #0
   2cdc8:	bc10      	pop	{r4}
   2cdca:	4770      	bx	lr

0002cdcc <RegionLinkAdrReq>:
{
   2cdcc:	b430      	push	{r4, r5}
   2cdce:	4605      	mov	r5, r0
    switch( region )
   2cdd0:	2d05      	cmp	r5, #5
{
   2cdd2:	4608      	mov	r0, r1
   2cdd4:	4611      	mov	r1, r2
   2cdd6:	461a      	mov	r2, r3
   2cdd8:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    switch( region )
   2cddc:	d103      	bne.n	2cde6 <RegionLinkAdrReq+0x1a>
        EU868_LINK_ADR_REQ( );
   2cdde:	9402      	str	r4, [sp, #8]
}
   2cde0:	bc30      	pop	{r4, r5}
        EU868_LINK_ADR_REQ( );
   2cde2:	f7ec b9a5 	b.w	19130 <RegionEU868LinkAdrReq>
}
   2cde6:	2000      	movs	r0, #0
   2cde8:	bc30      	pop	{r4, r5}
   2cdea:	4770      	bx	lr

0002cdec <RegionRxParamSetupReq>:
    switch( region )
   2cdec:	2805      	cmp	r0, #5
   2cdee:	d102      	bne.n	2cdf6 <RegionRxParamSetupReq+0xa>
        EU868_RX_PARAM_SETUP_REQ( );
   2cdf0:	4608      	mov	r0, r1
   2cdf2:	f000 ba64 	b.w	2d2be <RegionEU868RxParamSetupReq>
}
   2cdf6:	2000      	movs	r0, #0
   2cdf8:	4770      	bx	lr

0002cdfa <RegionNewChannelReq>:
    switch( region )
   2cdfa:	2805      	cmp	r0, #5
   2cdfc:	d102      	bne.n	2ce04 <RegionNewChannelReq+0xa>
        EU868_NEW_CHANNEL_REQ( );
   2cdfe:	4608      	mov	r0, r1
   2ce00:	f000 bac5 	b.w	2d38e <RegionEU868NewChannelReq>
}
   2ce04:	2000      	movs	r0, #0
   2ce06:	4770      	bx	lr

0002ce08 <RegionTxParamSetupReq>:
    switch( region )
   2ce08:	2805      	cmp	r0, #5
   2ce0a:	d102      	bne.n	2ce12 <RegionTxParamSetupReq+0xa>
        EU868_TX_PARAM_SETUP_REQ( );
   2ce0c:	4608      	mov	r0, r1
   2ce0e:	f000 ba74 	b.w	2d2fa <RegionEU868TxParamSetupReq>
}
   2ce12:	2000      	movs	r0, #0
   2ce14:	4770      	bx	lr

0002ce16 <RegionDlChannelReq>:
    switch( region )
   2ce16:	2805      	cmp	r0, #5
   2ce18:	d102      	bne.n	2ce20 <RegionDlChannelReq+0xa>
        EU868_DL_CHANNEL_REQ( );
   2ce1a:	4608      	mov	r0, r1
   2ce1c:	f7ec ba36 	b.w	1928c <RegionEU868DlChannelReq>
}
   2ce20:	2000      	movs	r0, #0
   2ce22:	4770      	bx	lr

0002ce24 <RegionAlternateDr>:
{
   2ce24:	4603      	mov	r3, r0
    switch( region )
   2ce26:	2b05      	cmp	r3, #5
{
   2ce28:	4608      	mov	r0, r1
   2ce2a:	4611      	mov	r1, r2
    switch( region )
   2ce2c:	d101      	bne.n	2ce32 <RegionAlternateDr+0xe>
        EU868_ALTERNATE_DR( );
   2ce2e:	f000 ba67 	b.w	2d300 <RegionEU868AlternateDr>
}
   2ce32:	2000      	movs	r0, #0
   2ce34:	4770      	bx	lr

0002ce36 <RegionNextChannel>:
{
   2ce36:	b410      	push	{r4}
   2ce38:	4604      	mov	r4, r0
    switch( region )
   2ce3a:	2c05      	cmp	r4, #5
{
   2ce3c:	4608      	mov	r0, r1
   2ce3e:	4611      	mov	r1, r2
   2ce40:	461a      	mov	r2, r3
   2ce42:	9b01      	ldr	r3, [sp, #4]
    switch( region )
   2ce44:	d102      	bne.n	2ce4c <RegionNextChannel+0x16>
}
   2ce46:	bc10      	pop	{r4}
        EU868_NEXT_CHANNEL( );
   2ce48:	f7ec ba4c 	b.w	192e4 <RegionEU868NextChannel>
}
   2ce4c:	2009      	movs	r0, #9
   2ce4e:	bc10      	pop	{r4}
   2ce50:	4770      	bx	lr

0002ce52 <RegionApplyDrOffset>:
{
   2ce52:	b410      	push	{r4}
   2ce54:	4604      	mov	r4, r0
    switch( region )
   2ce56:	2c05      	cmp	r4, #5
{
   2ce58:	4608      	mov	r0, r1
   2ce5a:	4611      	mov	r1, r2
   2ce5c:	461a      	mov	r2, r3
    switch( region )
   2ce5e:	d102      	bne.n	2ce66 <RegionApplyDrOffset+0x14>
}
   2ce60:	bc10      	pop	{r4}
        EU868_APPLY_DR_OFFSET( );
   2ce62:	f000 bab5 	b.w	2d3d0 <RegionEU868ApplyDrOffset>
}
   2ce66:	b2c8      	uxtb	r0, r1
   2ce68:	bc10      	pop	{r4}
   2ce6a:	4770      	bx	lr

0002ce6c <RegionCommonChanVerifyDr>:
{
   2ce6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ( value >= min ) && ( value <= max ) )
   2ce6e:	429a      	cmp	r2, r3
{
   2ce70:	9d06      	ldr	r5, [sp, #24]
    if( ( value >= min ) && ( value <= max ) )
   2ce72:	db03      	blt.n	2ce7c <RegionCommonChanVerifyDr+0x10>
   2ce74:	f99d 3014 	ldrsb.w	r3, [sp, #20]
   2ce78:	429a      	cmp	r2, r3
   2ce7a:	dd20      	ble.n	2cebe <RegionCommonChanVerifyDr+0x52>
        return false;
   2ce7c:	2000      	movs	r0, #0
}
   2ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
   2ce80:	2600      	movs	r6, #0
   2ce82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ce86:	f831 c014 	ldrh.w	ip, [r1, r4, lsl #1]
   2ce8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2ce8e:	fa4c f706 	asr.w	r7, ip, r6
   2ce92:	07ff      	lsls	r7, r7, #31
   2ce94:	d507      	bpl.n	2cea6 <RegionCommonChanVerifyDr+0x3a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
   2ce96:	7a1f      	ldrb	r7, [r3, #8]
    if( ( value >= min ) && ( value <= max ) )
   2ce98:	f007 0e0f 	and.w	lr, r7, #15
   2ce9c:	4596      	cmp	lr, r2
   2ce9e:	dc02      	bgt.n	2cea6 <RegionCommonChanVerifyDr+0x3a>
   2cea0:	ebb2 1f17 	cmp.w	r2, r7, lsr #4
   2cea4:	dd0d      	ble.n	2cec2 <RegionCommonChanVerifyDr+0x56>
        for( uint8_t j = 0; j < 16; j++ )
   2cea6:	3601      	adds	r6, #1
   2cea8:	2e10      	cmp	r6, #16
   2ceaa:	f103 030c 	add.w	r3, r3, #12
   2ceae:	d1ee      	bne.n	2ce8e <RegionCommonChanVerifyDr+0x22>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
   2ceb0:	3401      	adds	r4, #1
   2ceb2:	b2e4      	uxtb	r4, r4
   2ceb4:	0123      	lsls	r3, r4, #4
   2ceb6:	b2db      	uxtb	r3, r3
   2ceb8:	4298      	cmp	r0, r3
   2ceba:	d8e1      	bhi.n	2ce80 <RegionCommonChanVerifyDr+0x14>
   2cebc:	e7de      	b.n	2ce7c <RegionCommonChanVerifyDr+0x10>
   2cebe:	2400      	movs	r4, #0
   2cec0:	e7f8      	b.n	2ceb4 <RegionCommonChanVerifyDr+0x48>
                    return true;
   2cec2:	2001      	movs	r0, #1
   2cec4:	e7db      	b.n	2ce7e <RegionCommonChanVerifyDr+0x12>

0002cec6 <RegionCommonValueInRange>:
    if( ( value >= min ) && ( value <= max ) )
   2cec6:	4288      	cmp	r0, r1
   2cec8:	db04      	blt.n	2ced4 <RegionCommonValueInRange+0xe>
   2ceca:	4290      	cmp	r0, r2
   2cecc:	bfcc      	ite	gt
   2cece:	2000      	movgt	r0, #0
   2ced0:	2001      	movle	r0, #1
   2ced2:	4770      	bx	lr
    return 0;
   2ced4:	2000      	movs	r0, #0
}
   2ced6:	4770      	bx	lr

0002ced8 <RegionCommonChanDisable>:
{
   2ced8:	b510      	push	{r4, lr}
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   2ceda:	0914      	lsrs	r4, r2, #4
   2cedc:	ebb4 1f11 	cmp.w	r4, r1, lsr #4
{
   2cee0:	4603      	mov	r3, r0
    uint8_t index = id / 16;
   2cee2:	ea4f 1011 	mov.w	r0, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
   2cee6:	d30e      	bcc.n	2cf06 <RegionCommonChanDisable+0x2e>
   2cee8:	4291      	cmp	r1, r2
   2ceea:	d20c      	bcs.n	2cf06 <RegionCommonChanDisable+0x2e>
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
   2ceec:	b202      	sxth	r2, r0
   2ceee:	2001      	movs	r0, #1
   2cef0:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
   2cef4:	f001 010f 	and.w	r1, r1, #15
   2cef8:	fa00 f101 	lsl.w	r1, r0, r1
   2cefc:	ea24 0101 	bic.w	r1, r4, r1
   2cf00:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
   2cf04:	bd10      	pop	{r4, pc}
        return false;
   2cf06:	2000      	movs	r0, #0
   2cf08:	e7fc      	b.n	2cf04 <RegionCommonChanDisable+0x2c>

0002cf0a <RegionCommonCountChannels>:
{
   2cf0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( channelsMask == NULL )
   2cf0c:	b128      	cbz	r0, 2cf1a <RegionCommonCountChannels+0x10>
   2cf0e:	eb00 0541 	add.w	r5, r0, r1, lsl #1
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   2cf12:	2701      	movs	r7, #1
    uint8_t nbChannels = 0;
   2cf14:	2000      	movs	r0, #0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cf16:	4291      	cmp	r1, r2
   2cf18:	d300      	bcc.n	2cf1c <RegionCommonCountChannels+0x12>
}
   2cf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cf1c:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
   2cf1e:	4623      	mov	r3, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cf20:	f835 cb02 	ldrh.w	ip, [r5], #2
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
   2cf24:	fa07 f604 	lsl.w	r6, r7, r4
   2cf28:	ea36 060c 	bics.w	r6, r6, ip
            nbActiveBits++;
   2cf2c:	bf08      	it	eq
   2cf2e:	3301      	addeq	r3, #1
    for( uint8_t j = 0; j < nbBits; j++ )
   2cf30:	f104 0401 	add.w	r4, r4, #1
            nbActiveBits++;
   2cf34:	bf08      	it	eq
   2cf36:	b2db      	uxtbeq	r3, r3
    for( uint8_t j = 0; j < nbBits; j++ )
   2cf38:	2c10      	cmp	r4, #16
   2cf3a:	d1f3      	bne.n	2cf24 <RegionCommonCountChannels+0x1a>
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cf3c:	4418      	add	r0, r3
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cf3e:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
   2cf40:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
   2cf42:	b2c9      	uxtb	r1, r1
   2cf44:	e7e7      	b.n	2cf16 <RegionCommonCountChannels+0xc>

0002cf46 <RegionCommonChanMaskCopy>:
{
   2cf46:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
   2cf48:	b100      	cbz	r0, 2cf4c <RegionCommonChanMaskCopy+0x6>
   2cf4a:	b949      	cbnz	r1, 2cf60 <RegionCommonChanMaskCopy+0x1a>
}
   2cf4c:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
   2cf4e:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
   2cf52:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
   2cf56:	3301      	adds	r3, #1
   2cf58:	b2dc      	uxtb	r4, r3
   2cf5a:	42a2      	cmp	r2, r4
   2cf5c:	d8f7      	bhi.n	2cf4e <RegionCommonChanMaskCopy+0x8>
   2cf5e:	e7f5      	b.n	2cf4c <RegionCommonChanMaskCopy+0x6>
   2cf60:	2300      	movs	r3, #0
   2cf62:	e7f9      	b.n	2cf58 <RegionCommonChanMaskCopy+0x12>

0002cf64 <RegionCommonSetBandTxDone>:
{
   2cf64:	b082      	sub	sp, #8
   2cf66:	b530      	push	{r4, r5, lr}
   2cf68:	8804      	ldrh	r4, [r0, #0]
   2cf6a:	9304      	str	r3, [sp, #16]
    if( joined == false )
   2cf6c:	b9d2      	cbnz	r2, 2cfa4 <RegionCommonSetBandTxDone+0x40>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
   2cf6e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
   2cf72:	d315      	bcc.n	2cfa0 <RegionCommonSetBandTxDone+0x3c>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
   2cf74:	f649 25af 	movw	r5, #39599	; 0x9aaf
   2cf78:	f242 7210 	movw	r2, #10000	; 0x2710
   2cf7c:	42ab      	cmp	r3, r5
   2cf7e:	bf98      	it	ls
   2cf80:	f44f 727a 	movls.w	r2, #1000	; 0x3e8
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
   2cf84:	4294      	cmp	r4, r2
   2cf86:	bf38      	it	cc
   2cf88:	4614      	movcc	r4, r2
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cf8a:	4361      	muls	r1, r4
}
   2cf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cf90:	68c3      	ldr	r3, [r0, #12]
}
   2cf92:	b002      	add	sp, #8
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
   2cf94:	428b      	cmp	r3, r1
        band->TimeCredits = 0;
   2cf96:	bf94      	ite	ls
   2cf98:	2300      	movls	r3, #0
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
   2cf9a:	1a5b      	subhi	r3, r3, r1
   2cf9c:	60c3      	str	r3, [r0, #12]
}
   2cf9e:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_1_HOUR;
   2cfa0:	2264      	movs	r2, #100	; 0x64
   2cfa2:	e7ef      	b.n	2cf84 <RegionCommonSetBandTxDone+0x20>
    if( dutyCycle == 0 )
   2cfa4:	2c01      	cmp	r4, #1
   2cfa6:	bf38      	it	cc
   2cfa8:	2401      	movcc	r4, #1
   2cfaa:	e7ee      	b.n	2cf8a <RegionCommonSetBandTxDone+0x26>

0002cfac <RegionCommonParseLinkAdrReq>:
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
   2cfac:	7803      	ldrb	r3, [r0, #0]
   2cfae:	2b03      	cmp	r3, #3
   2cfb0:	d114      	bne.n	2cfdc <RegionCommonParseLinkAdrReq+0x30>
        linkAdrParams->Datarate = payload[1];
   2cfb2:	7843      	ldrb	r3, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   2cfb4:	f003 020f 	and.w	r2, r3, #15
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   2cfb8:	091b      	lsrs	r3, r3, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
   2cfba:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
   2cfbc:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
   2cfbe:	7883      	ldrb	r3, [r0, #2]
   2cfc0:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
   2cfc2:	78c2      	ldrb	r2, [r0, #3]
   2cfc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cfc8:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
   2cfca:	7903      	ldrb	r3, [r0, #4]
        retIndex = 5;
   2cfcc:	2005      	movs	r0, #5
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   2cfce:	f3c3 1202 	ubfx	r2, r3, #4, #3
        linkAdrParams->NbRep &= 0x0F;
   2cfd2:	f003 030f 	and.w	r3, r3, #15
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
   2cfd6:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
   2cfd8:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
   2cfda:	4770      	bx	lr
    uint8_t retIndex = 0;
   2cfdc:	2000      	movs	r0, #0
}
   2cfde:	4770      	bx	lr

0002cfe0 <RegionCommonLinkAdrReqVerifyParams>:
{
   2cfe0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2cfe4:	4698      	mov	r8, r3
    if( verifyParams->AdrEnabled == false )
   2cfe6:	7943      	ldrb	r3, [r0, #5]
{
   2cfe8:	4691      	mov	r9, r2
   2cfea:	4604      	mov	r4, r0
   2cfec:	468a      	mov	sl, r1
    uint8_t status = verifyParams->Status;
   2cfee:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
   2cff0:	f990 2006 	ldrsb.w	r2, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
   2cff4:	f990 6007 	ldrsb.w	r6, [r0, #7]
    if( verifyParams->AdrEnabled == false )
   2cff8:	b183      	cbz	r3, 2d01c <RegionCommonLinkAdrReqVerifyParams+0x3c>
    int8_t nbRepetitions = verifyParams->NbRep;
   2cffa:	f990 7008 	ldrsb.w	r7, [r0, #8]
    if( status != 0 )
   2cffe:	b375      	cbz	r5, 2d05e <RegionCommonLinkAdrReqVerifyParams+0x7e>
        if( datarate == 0x0F )
   2d000:	2a0f      	cmp	r2, #15
   2d002:	d112      	bne.n	2d02a <RegionCommonLinkAdrReqVerifyParams+0x4a>
            datarate =  verifyParams->CurrentDatarate;
   2d004:	f994 2009 	ldrsb.w	r2, [r4, #9]
        if( txPower == 0x0F )
   2d008:	2e0f      	cmp	r6, #15
   2d00a:	d11e      	bne.n	2d04a <RegionCommonLinkAdrReqVerifyParams+0x6a>
            txPower =  verifyParams->CurrentTxPower;
   2d00c:	f994 600a 	ldrsb.w	r6, [r4, #10]
    if( status == 0x07 )
   2d010:	2d07      	cmp	r5, #7
   2d012:	d124      	bne.n	2d05e <RegionCommonLinkAdrReqVerifyParams+0x7e>
            nbRepetitions = 1;
   2d014:	2f00      	cmp	r7, #0
   2d016:	bf08      	it	eq
   2d018:	2701      	moveq	r7, #1
   2d01a:	e020      	b.n	2d05e <RegionCommonLinkAdrReqVerifyParams+0x7e>
        nbRepetitions = verifyParams->CurrentNbRep;
   2d01c:	f990 700b 	ldrsb.w	r7, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
   2d020:	f990 2009 	ldrsb.w	r2, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
   2d024:	f990 600a 	ldrsb.w	r6, [r0, #10]
   2d028:	e7e9      	b.n	2cffe <RegionCommonLinkAdrReqVerifyParams+0x1e>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
   2d02a:	69a3      	ldr	r3, [r4, #24]
   2d02c:	9301      	str	r3, [sp, #4]
   2d02e:	f994 3015 	ldrsb.w	r3, [r4, #21]
   2d032:	9300      	str	r3, [sp, #0]
   2d034:	f994 3014 	ldrsb.w	r3, [r4, #20]
   2d038:	6921      	ldr	r1, [r4, #16]
   2d03a:	7b20      	ldrb	r0, [r4, #12]
   2d03c:	f7ff ff16 	bl	2ce6c <RegionCommonChanVerifyDr>
   2d040:	2800      	cmp	r0, #0
   2d042:	d1e1      	bne.n	2d008 <RegionCommonLinkAdrReqVerifyParams+0x28>
            status &= 0xFD; // Datarate KO
   2d044:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
   2d048:	e7de      	b.n	2d008 <RegionCommonLinkAdrReqVerifyParams+0x28>
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
   2d04a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    if( ( value >= min ) && ( value <= max ) )
   2d04e:	42b3      	cmp	r3, r6
   2d050:	dc0f      	bgt.n	2d072 <RegionCommonLinkAdrReqVerifyParams+0x92>
   2d052:	f994 301c 	ldrsb.w	r3, [r4, #28]
   2d056:	42b3      	cmp	r3, r6
   2d058:	dada      	bge.n	2d010 <RegionCommonLinkAdrReqVerifyParams+0x30>
                status &= 0xFB; // TxPower KO
   2d05a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
}
   2d05e:	4628      	mov	r0, r5
    *dr = datarate;
   2d060:	f88a 2000 	strb.w	r2, [sl]
    *txPow = txPower;
   2d064:	f889 6000 	strb.w	r6, [r9]
    *nbRep = nbRepetitions;
   2d068:	f888 7000 	strb.w	r7, [r8]
}
   2d06c:	b002      	add	sp, #8
   2d06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d072:	461e      	mov	r6, r3
   2d074:	e7cc      	b.n	2d010 <RegionCommonLinkAdrReqVerifyParams+0x30>

0002d076 <RegionCommonComputeSymbolTimeFsk>:
}
   2d076:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   2d07a:	fbb3 f0f0 	udiv	r0, r3, r0
   2d07e:	4770      	bx	lr

0002d080 <RegionCommonComputeRxWindowParameters>:
{
   2d080:	b530      	push	{r4, r5, lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
   2d082:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2d086:	436a      	muls	r2, r5
   2d088:	1f0c      	subs	r4, r1, #4
   2d08a:	fb00 2204 	mla	r2, r0, r4, r2
   2d08e:	0052      	lsls	r2, r2, #1
   2d090:	bf1e      	ittt	ne
   2d092:	f100 34ff 	addne.w	r4, r0, #4294967295
   2d096:	1912      	addne	r2, r2, r4
   2d098:	fbb2 f2f0 	udivne	r2, r2, r0
   2d09c:	4291      	cmp	r1, r2
   2d09e:	bf38      	it	cc
   2d0a0:	4611      	movcc	r1, r2
   2d0a2:	9a03      	ldr	r2, [sp, #12]
   2d0a4:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
   2d0a6:	0082      	lsls	r2, r0, #2
   2d0a8:	4348      	muls	r0, r1
   2d0aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2d0ae:	bf1c      	itt	ne
   2d0b0:	3001      	addne	r0, #1
   2d0b2:	0840      	lsrne	r0, r0, #1
   2d0b4:	1a12      	subs	r2, r2, r0
   2d0b6:	fb01 2313 	mls	r3, r1, r3, r2
   2d0ba:	2b00      	cmp	r3, #0
   2d0bc:	bfc6      	itte	gt
   2d0be:	f203 33e7 	addwgt	r3, r3, #999	; 0x3e7
   2d0c2:	fbb3 f1f1 	udivgt	r1, r3, r1
   2d0c6:	fb93 f1f1 	sdivle	r1, r3, r1
   2d0ca:	9b04      	ldr	r3, [sp, #16]
   2d0cc:	6019      	str	r1, [r3, #0]
}
   2d0ce:	bd30      	pop	{r4, r5, pc}

0002d0d0 <RegionCommonComputeTxPower>:
{
   2d0d0:	b538      	push	{r3, r4, r5, lr}
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   2d0d2:	0040      	lsls	r0, r0, #1
{
   2d0d4:	4614      	mov	r4, r2
   2d0d6:	460d      	mov	r5, r1
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
   2d0d8:	f7db fd3a 	bl	8b50 <__aeabi_ui2f>
   2d0dc:	4601      	mov	r1, r0
   2d0de:	4628      	mov	r0, r5
   2d0e0:	f7db fc84 	bl	89ec <__aeabi_fsub>
   2d0e4:	4621      	mov	r1, r4
   2d0e6:	f7db fc81 	bl	89ec <__aeabi_fsub>
   2d0ea:	f7db f999 	bl	8420 <__aeabi_f2d>
   2d0ee:	f7dc fc6b 	bl	99c8 <floor>
   2d0f2:	f7db fbff 	bl	88f4 <__aeabi_d2iz>
}
   2d0f6:	b240      	sxtb	r0, r0
   2d0f8:	bd38      	pop	{r3, r4, r5, pc}

0002d0fa <RegionCommonCountNbOfEnabledChannels>:
{
   2d0fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0fe:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2d100:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
   2d102:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
   2d104:	469e      	mov	lr, r3
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2d106:	8a04      	ldrh	r4, [r0, #16]
   2d108:	011e      	lsls	r6, r3, #4
   2d10a:	b2f6      	uxtb	r6, r6
   2d10c:	42b4      	cmp	r4, r6
   2d10e:	d946      	bls.n	2d19e <RegionCommonCountNbOfEnabledChannels+0xa4>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
   2d110:	2400      	movs	r4, #0
   2d112:	eb06 0546 	add.w	r5, r6, r6, lsl #1
   2d116:	ea4f 0943 	mov.w	r9, r3, lsl #1
   2d11a:	00ad      	lsls	r5, r5, #2
   2d11c:	6847      	ldr	r7, [r0, #4]
   2d11e:	f837 7009 	ldrh.w	r7, [r7, r9]
   2d122:	4127      	asrs	r7, r4
   2d124:	07ff      	lsls	r7, r7, #31
   2d126:	d529      	bpl.n	2d17c <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
   2d128:	6887      	ldr	r7, [r0, #8]
   2d12a:	eb07 0a05 	add.w	sl, r7, r5
   2d12e:	597f      	ldr	r7, [r7, r5]
   2d130:	b327      	cbz	r7, 2d17c <RegionCommonCountNbOfEnabledChannels+0x82>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
   2d132:	7807      	ldrb	r7, [r0, #0]
   2d134:	b937      	cbnz	r7, 2d144 <RegionCommonCountNbOfEnabledChannels+0x4a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
   2d136:	6947      	ldr	r7, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
   2d138:	b127      	cbz	r7, 2d144 <RegionCommonCountNbOfEnabledChannels+0x4a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
   2d13a:	f837 7009 	ldrh.w	r7, [r7, r9]
   2d13e:	4127      	asrs	r7, r4
   2d140:	07ff      	lsls	r7, r7, #31
   2d142:	d51b      	bpl.n	2d17c <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
   2d144:	f89a 7008 	ldrb.w	r7, [sl, #8]
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
   2d148:	f990 b001 	ldrsb.w	fp, [r0, #1]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
   2d14c:	f347 0803 	sbfx	r8, r7, #0, #4
    if( ( value >= min ) && ( value <= max ) )
   2d150:	fa4f f888 	sxtb.w	r8, r8
   2d154:	45d8      	cmp	r8, fp
   2d156:	dc11      	bgt.n	2d17c <RegionCommonCountNbOfEnabledChannels+0x82>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
   2d158:	f347 1703 	sbfx	r7, r7, #4, #4
    if( ( value >= min ) && ( value <= max ) )
   2d15c:	b27f      	sxtb	r7, r7
   2d15e:	455f      	cmp	r7, fp
   2d160:	db0c      	blt.n	2d17c <RegionCommonCountNbOfEnabledChannels+0x82>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
   2d162:	f89a 7009 	ldrb.w	r7, [sl, #9]
   2d166:	eb07 0847 	add.w	r8, r7, r7, lsl #1
   2d16a:	68c7      	ldr	r7, [r0, #12]
   2d16c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   2d170:	7d3f      	ldrb	r7, [r7, #20]
   2d172:	b95f      	cbnz	r7, 2d18c <RegionCommonCountNbOfEnabledChannels+0x92>
                    nbRestrictedChannelsCount++;
   2d174:	f10c 0c01 	add.w	ip, ip, #1
   2d178:	fa5f fc8c 	uxtb.w	ip, ip
        for( uint8_t j = 0; j < 16; j++ )
   2d17c:	3401      	adds	r4, #1
   2d17e:	2c10      	cmp	r4, #16
   2d180:	f105 050c 	add.w	r5, r5, #12
   2d184:	d1ca      	bne.n	2d11c <RegionCommonCountNbOfEnabledChannels+0x22>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
   2d186:	3301      	adds	r3, #1
   2d188:	b2db      	uxtb	r3, r3
   2d18a:	e7bc      	b.n	2d106 <RegionCommonCountNbOfEnabledChannels+0xc>
                enabledChannels[nbChannelCount++] = i + j;
   2d18c:	f10e 0701 	add.w	r7, lr, #1
   2d190:	eb06 0804 	add.w	r8, r6, r4
   2d194:	f801 800e 	strb.w	r8, [r1, lr]
   2d198:	fa5f fe87 	uxtb.w	lr, r7
   2d19c:	e7ee      	b.n	2d17c <RegionCommonCountNbOfEnabledChannels+0x82>
    *nbRestrictedChannels = nbRestrictedChannelsCount;
   2d19e:	9b01      	ldr	r3, [sp, #4]
    *nbEnabledChannels = nbChannelCount;
   2d1a0:	f882 e000 	strb.w	lr, [r2]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
   2d1a4:	f883 c000 	strb.w	ip, [r3]
}
   2d1a8:	b003      	add	sp, #12
   2d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d1ae <RegionCommonIdentifyChannels>:
{
   2d1ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2d1b2:	4604      	mov	r4, r0
   2d1b4:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
   2d1b8:	6840      	ldr	r0, [r0, #4]
{
   2d1ba:	461d      	mov	r5, r3
   2d1bc:	468a      	mov	sl, r1
   2d1be:	4691      	mov	r9, r2
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
   2d1c0:	f7fe feed 	bl	2bf9e <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
   2d1c4:	6823      	ldr	r3, [r4, #0]
    *nbEnabledChannels = 0;
   2d1c6:	f04f 0800 	mov.w	r8, #0
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
   2d1ca:	1a1b      	subs	r3, r3, r0
   2d1cc:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
   2d1ce:	2301      	movs	r3, #1
   2d1d0:	7033      	strb	r3, [r6, #0]
    *nbEnabledChannels = 0;
   2d1d2:	f885 8000 	strb.w	r8, [r5]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
   2d1d6:	6863      	ldr	r3, [r4, #4]
   2d1d8:	b113      	cbz	r3, 2d1e0 <RegionCommonIdentifyChannels+0x32>
   2d1da:	6823      	ldr	r3, [r4, #0]
   2d1dc:	4283      	cmp	r3, r0
   2d1de:	d824      	bhi.n	2d22a <RegionCommonIdentifyChannels+0x7c>
        *aggregatedTimeOff = 0;
   2d1e0:	f8ca 8000 	str.w	r8, [sl]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
   2d1e4:	f8d4 c01c 	ldr.w	ip, [r4, #28]
   2d1e8:	69a3      	ldr	r3, [r4, #24]
   2d1ea:	f89c e000 	ldrb.w	lr, [ip]
   2d1ee:	9303      	str	r3, [sp, #12]
   2d1f0:	ab01      	add	r3, sp, #4
   2d1f2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
   2d1f6:	e883 0003 	stmia.w	r3, {r0, r1}
   2d1fa:	7d23      	ldrb	r3, [r4, #20]
   2d1fc:	4670      	mov	r0, lr
   2d1fe:	9300      	str	r3, [sp, #0]
   2d200:	f8dc 100c 	ldr.w	r1, [ip, #12]
   2d204:	7a23      	ldrb	r3, [r4, #8]
   2d206:	7a62      	ldrb	r2, [r4, #9]
   2d208:	f7eb fbac 	bl	18964 <RegionCommonUpdateBandTimeOff>
   2d20c:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
   2d20e:	4633      	mov	r3, r6
   2d210:	462a      	mov	r2, r5
   2d212:	4649      	mov	r1, r9
   2d214:	69e0      	ldr	r0, [r4, #28]
   2d216:	f7ff ff70 	bl	2d0fa <RegionCommonCountNbOfEnabledChannels>
    if( *nbEnabledChannels > 0 )
   2d21a:	782b      	ldrb	r3, [r5, #0]
   2d21c:	b12b      	cbz	r3, 2d22a <RegionCommonIdentifyChannels+0x7c>
        return LORAMAC_STATUS_OK;
   2d21e:	2000      	movs	r0, #0
        *nextTxDelay = 0;
   2d220:	f8c7 8000 	str.w	r8, [r7]
}
   2d224:	b004      	add	sp, #16
   2d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if( *nbRestrictedChannels > 0 )
   2d22a:	7833      	ldrb	r3, [r6, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
   2d22c:	2b00      	cmp	r3, #0
   2d22e:	bf0c      	ite	eq
   2d230:	200c      	moveq	r0, #12
   2d232:	200b      	movne	r0, #11
   2d234:	e7f6      	b.n	2d224 <RegionCommonIdentifyChannels+0x76>

0002d236 <RegionCommonGetNextLowerTxDr>:
{
   2d236:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t drLocal = params->CurrentDr;
   2d238:	f990 2000 	ldrsb.w	r2, [r0]
    if( params->CurrentDr == params->MinDr )
   2d23c:	f990 5002 	ldrsb.w	r5, [r0, #2]
{
   2d240:	4604      	mov	r4, r0
    if( params->CurrentDr == params->MinDr )
   2d242:	4295      	cmp	r5, r2
   2d244:	d00f      	beq.n	2d266 <RegionCommonGetNextLowerTxDr+0x30>
            drLocal = ( drLocal - 1 );
   2d246:	3a01      	subs	r2, #1
   2d248:	b252      	sxtb	r2, r2
        } while( ( drLocal != params->MinDr ) &&
   2d24a:	4295      	cmp	r5, r2
   2d24c:	d00b      	beq.n	2d266 <RegionCommonGetNextLowerTxDr+0x30>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
   2d24e:	68a3      	ldr	r3, [r4, #8]
   2d250:	9301      	str	r3, [sp, #4]
   2d252:	f994 3001 	ldrsb.w	r3, [r4, #1]
   2d256:	9300      	str	r3, [sp, #0]
   2d258:	6861      	ldr	r1, [r4, #4]
   2d25a:	462b      	mov	r3, r5
   2d25c:	78e0      	ldrb	r0, [r4, #3]
   2d25e:	f7ff fe05 	bl	2ce6c <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
   2d262:	2800      	cmp	r0, #0
   2d264:	d0ef      	beq.n	2d246 <RegionCommonGetNextLowerTxDr+0x10>
}
   2d266:	4610      	mov	r0, r2
   2d268:	b003      	add	sp, #12
   2d26a:	bd30      	pop	{r4, r5, pc}

0002d26c <RegionCommonLimitTxPower>:
}
   2d26c:	4288      	cmp	r0, r1
   2d26e:	bfb8      	it	lt
   2d270:	4608      	movlt	r0, r1
   2d272:	4770      	bx	lr

0002d274 <RegionEU868Verify>:
{
   2d274:	b507      	push	{r0, r1, r2, lr}
    switch( phyAttribute )
   2d276:	290e      	cmp	r1, #14
   2d278:	d81f      	bhi.n	2d2ba <RegionEU868Verify+0x46>
   2d27a:	e8df f001 	tbb	[pc, r1]
   2d27e:	1e0c      	.short	0x1e0c
   2d280:	1c1e1e1e 	.word	0x1c1e1e1e
   2d284:	1c1e1c12 	.word	0x1c1e1c12
   2d288:	1e1e1e1c 	.word	0x1e1e1e1c
   2d28c:	08          	.byte	0x08
   2d28d:	00          	.byte	0x00
            return EU868_DUTY_CYCLE_ENABLED;
   2d28e:	2001      	movs	r0, #1
}
   2d290:	b003      	add	sp, #12
   2d292:	f85d fb04 	ldr.w	pc, [sp], #4
            return VerifyRfFreq( verify->Frequency, &band );
   2d296:	f10d 0107 	add.w	r1, sp, #7
   2d29a:	6800      	ldr	r0, [r0, #0]
   2d29c:	f7eb fcac 	bl	18bf8 <VerifyRfFreq>
   2d2a0:	e7f6      	b.n	2d290 <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
   2d2a2:	2205      	movs	r2, #5
   2d2a4:	2100      	movs	r1, #0
   2d2a6:	f990 0000 	ldrsb.w	r0, [r0]
   2d2aa:	f7ff fe0c 	bl	2cec6 <RegionCommonValueInRange>
   2d2ae:	3800      	subs	r0, #0
   2d2b0:	bf18      	it	ne
   2d2b2:	2001      	movne	r0, #1
   2d2b4:	e7ec      	b.n	2d290 <RegionEU868Verify+0x1c>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
   2d2b6:	2207      	movs	r2, #7
   2d2b8:	e7f4      	b.n	2d2a4 <RegionEU868Verify+0x30>
    switch( phyAttribute )
   2d2ba:	2000      	movs	r0, #0
   2d2bc:	e7e8      	b.n	2d290 <RegionEU868Verify+0x1c>

0002d2be <RegionEU868RxParamSetupReq>:
{
   2d2be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d2c0:	4605      	mov	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
   2d2c2:	f10d 0107 	add.w	r1, sp, #7
   2d2c6:	6840      	ldr	r0, [r0, #4]
   2d2c8:	f7eb fc96 	bl	18bf8 <VerifyRfFreq>
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
   2d2cc:	2207      	movs	r2, #7
   2d2ce:	1d84      	adds	r4, r0, #6
   2d2d0:	2100      	movs	r1, #0
   2d2d2:	f995 0000 	ldrsb.w	r0, [r5]
   2d2d6:	b2e4      	uxtb	r4, r4
   2d2d8:	f7ff fdf5 	bl	2cec6 <RegionCommonValueInRange>
   2d2dc:	b908      	cbnz	r0, 2d2e2 <RegionEU868RxParamSetupReq+0x24>
        status &= 0xFD; // Datarate KO
   2d2de:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
   2d2e2:	2205      	movs	r2, #5
   2d2e4:	2100      	movs	r1, #0
   2d2e6:	f995 0001 	ldrsb.w	r0, [r5, #1]
   2d2ea:	f7ff fdec 	bl	2cec6 <RegionCommonValueInRange>
   2d2ee:	b908      	cbnz	r0, 2d2f4 <RegionEU868RxParamSetupReq+0x36>
        status &= 0xFB; // Rx1DrOffset range KO
   2d2f0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
}
   2d2f4:	4620      	mov	r0, r4
   2d2f6:	b003      	add	sp, #12
   2d2f8:	bd30      	pop	{r4, r5, pc}

0002d2fa <RegionEU868TxParamSetupReq>:
}
   2d2fa:	f04f 30ff 	mov.w	r0, #4294967295
   2d2fe:	4770      	bx	lr

0002d300 <RegionEU868AlternateDr>:
}
   2d300:	4770      	bx	lr

0002d302 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   2d302:	2350      	movs	r3, #80	; 0x50
{
   2d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d308:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
   2d30a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
   2d30e:	7a03      	ldrb	r3, [r0, #8]
{
   2d310:	4680      	mov	r8, r0
    if( applyCFList->Size != 16 )
   2d312:	2b10      	cmp	r3, #16
   2d314:	d12e      	bne.n	2d374 <RegionEU868ApplyCFList+0x72>
    if( applyCFList->Payload[15] != 0 )
   2d316:	6843      	ldr	r3, [r0, #4]
   2d318:	7bdb      	ldrb	r3, [r3, #15]
   2d31a:	bb5b      	cbnz	r3, 2d374 <RegionEU868ApplyCFList+0x72>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d31c:	2103      	movs	r1, #3
            newChannel.Frequency = 0;
   2d31e:	461c      	mov	r4, r3
            newChannel.Frequency *= 100;
   2d320:	2764      	movs	r7, #100	; 0x64
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
   2d322:	2907      	cmp	r1, #7
   2d324:	f101 0601 	add.w	r6, r1, #1
   2d328:	f103 0503 	add.w	r5, r3, #3
   2d32c:	d815      	bhi.n	2d35a <RegionEU868ApplyCFList+0x58>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   2d32e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2d332:	5cc2      	ldrb	r2, [r0, r3]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   2d334:	4418      	add	r0, r3
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
   2d336:	9203      	str	r2, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
   2d338:	7843      	ldrb	r3, [r0, #1]
   2d33a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2d33e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
   2d340:	7882      	ldrb	r2, [r0, #2]
   2d342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
   2d346:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
   2d348:	e9cd 3403 	strd	r3, r4, [sp, #12]
        if( newChannel.Frequency != 0 )
   2d34c:	b9ab      	cbnz	r3, 2d37a <RegionEU868ApplyCFList+0x78>
            RegionEU868ChannelsRemove( &channelRemove );
   2d34e:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
   2d350:	f88d 1000 	strb.w	r1, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
   2d354:	f7ec f8a0 	bl	19498 <RegionEU868ChannelsRemove>
   2d358:	e016      	b.n	2d388 <RegionEU868ApplyCFList+0x86>
   2d35a:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
   2d35c:	f88d 1000 	strb.w	r1, [sp]
            newChannel.Frequency = 0;
   2d360:	9403      	str	r4, [sp, #12]
            newChannel.DrRange.Value = 0;
   2d362:	f88d 4014 	strb.w	r4, [sp, #20]
            newChannel.Rx1Frequency = 0;
   2d366:	9404      	str	r4, [sp, #16]
            RegionEU868ChannelsRemove( &channelRemove );
   2d368:	f7ec f896 	bl	19498 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d36c:	b2f1      	uxtb	r1, r6
   2d36e:	2910      	cmp	r1, #16
   2d370:	462b      	mov	r3, r5
   2d372:	d1d6      	bne.n	2d322 <RegionEU868ApplyCFList+0x20>
}
   2d374:	b006      	add	sp, #24
   2d376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            channelAdd.NewChannel = &newChannel;
   2d37a:	ab03      	add	r3, sp, #12
            RegionEU868ChannelAdd( &channelAdd );
   2d37c:	a801      	add	r0, sp, #4
            channelAdd.NewChannel = &newChannel;
   2d37e:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
   2d380:	f88d 1008 	strb.w	r1, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
   2d384:	f7ec f828 	bl	193d8 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
   2d388:	462b      	mov	r3, r5
   2d38a:	b2f1      	uxtb	r1, r6
   2d38c:	e7c9      	b.n	2d322 <RegionEU868ApplyCFList+0x20>

0002d38e <RegionEU868NewChannelReq>:
{
   2d38e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
   2d390:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
   2d392:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
   2d394:	6811      	ldr	r1, [r2, #0]
   2d396:	b949      	cbnz	r1, 2d3ac <RegionEU868NewChannelReq+0x1e>
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   2d398:	a801      	add	r0, sp, #4
        channelRemove.ChannelId = newChannelReq->ChannelId;
   2d39a:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
   2d39e:	f7ec f87b 	bl	19498 <RegionEU868ChannelsRemove>
   2d3a2:	b178      	cbz	r0, 2d3c4 <RegionEU868NewChannelReq+0x36>
    uint8_t status = 0x03;
   2d3a4:	2003      	movs	r0, #3
}
   2d3a6:	b005      	add	sp, #20
   2d3a8:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( RegionEU868ChannelAdd( &channelAdd ) )
   2d3ac:	a802      	add	r0, sp, #8
        channelAdd.NewChannel = newChannelReq->NewChannel;
   2d3ae:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
   2d3b0:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
   2d3b4:	f7ec f810 	bl	193d8 <RegionEU868ChannelAdd>
   2d3b8:	2804      	cmp	r0, #4
   2d3ba:	d005      	beq.n	2d3c8 <RegionEU868NewChannelReq+0x3a>
   2d3bc:	2805      	cmp	r0, #5
   2d3be:	d005      	beq.n	2d3cc <RegionEU868NewChannelReq+0x3e>
   2d3c0:	2800      	cmp	r0, #0
   2d3c2:	d0ef      	beq.n	2d3a4 <RegionEU868NewChannelReq+0x16>
{
   2d3c4:	2000      	movs	r0, #0
   2d3c6:	e7ee      	b.n	2d3a6 <RegionEU868NewChannelReq+0x18>
                status &= 0xFE;
   2d3c8:	2002      	movs	r0, #2
   2d3ca:	e7ec      	b.n	2d3a6 <RegionEU868NewChannelReq+0x18>
                status &= 0xFD;
   2d3cc:	2001      	movs	r0, #1
   2d3ce:	e7ea      	b.n	2d3a6 <RegionEU868NewChannelReq+0x18>

0002d3d0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
   2d3d0:	1a88      	subs	r0, r1, r2

    if( datarate < 0 )
   2d3d2:	b240      	sxtb	r0, r0
   2d3d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    {
        datarate = DR_0;
    }
    return datarate;
}
   2d3d8:	b2c0      	uxtb	r0, r0
   2d3da:	4770      	bx	lr

0002d3dc <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2d3dc:	b530      	push	{r4, r5, lr}
   2d3de:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2d3e0:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2d3e4:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2d3e6:	794b      	ldrb	r3, [r1, #5]
   2d3e8:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   2d3ec:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2d3ee:	220d      	movs	r2, #13
   2d3f0:	2100      	movs	r1, #0
   2d3f2:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2d3f6:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2d3fa:	f004 fb4c 	bl	31a96 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2d3fe:	aa02      	add	r2, sp, #8
   2d400:	4611      	mov	r1, r2
   2d402:	4628      	mov	r0, r5
   2d404:	f000 fb73 	bl	2daee <bt_encrypt_le>
	if (err) {
   2d408:	b110      	cbz	r0, 2d410 <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2d40a:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2d40c:	b007      	add	sp, #28
   2d40e:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2d410:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2d412:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2d414:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2d418:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2d41a:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2d41c:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2d41e:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2d422:	f004 faee 	bl	31a02 <memcmp>
   2d426:	fab0 f080 	clz	r0, r0
   2d42a:	0940      	lsrs	r0, r0, #5
   2d42c:	e7ee      	b.n	2d40c <bt_rpa_irk_matches+0x30>

0002d42e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2d42e:	b510      	push	{r4, lr}
   2d430:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2d432:	7801      	ldrb	r1, [r0, #0]
   2d434:	7822      	ldrb	r2, [r4, #0]
{
   2d436:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2d438:	428a      	cmp	r2, r1
   2d43a:	d00f      	beq.n	2d45c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2d43c:	4669      	mov	r1, sp
   2d43e:	f7ec f8c5 	bl	195cc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2d442:	4620      	mov	r0, r4
   2d444:	a905      	add	r1, sp, #20
   2d446:	f7ec f8c1 	bl	195cc <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2d44a:	2210      	movs	r2, #16
   2d44c:	f10d 0115 	add.w	r1, sp, #21
   2d450:	f10d 0001 	add.w	r0, sp, #1
   2d454:	f004 fad5 	bl	31a02 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2d458:	b00a      	add	sp, #40	; 0x28
   2d45a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2d45c:	2a01      	cmp	r2, #1
   2d45e:	d006      	beq.n	2d46e <bt_uuid_cmp+0x40>
   2d460:	2a02      	cmp	r2, #2
   2d462:	d007      	beq.n	2d474 <bt_uuid_cmp+0x46>
   2d464:	b972      	cbnz	r2, 2d484 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2d466:	8840      	ldrh	r0, [r0, #2]
   2d468:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2d46a:	1ac0      	subs	r0, r0, r3
   2d46c:	e7f4      	b.n	2d458 <bt_uuid_cmp+0x2a>
   2d46e:	6840      	ldr	r0, [r0, #4]
   2d470:	6863      	ldr	r3, [r4, #4]
   2d472:	e7fa      	b.n	2d46a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d474:	2210      	movs	r2, #16
   2d476:	1c61      	adds	r1, r4, #1
   2d478:	3001      	adds	r0, #1
}
   2d47a:	b00a      	add	sp, #40	; 0x28
   2d47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2d480:	f004 babf 	b.w	31a02 <memcmp>
	switch (u1->type) {
   2d484:	f06f 0015 	mvn.w	r0, #21
   2d488:	e7e6      	b.n	2d458 <bt_uuid_cmp+0x2a>

0002d48a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2d48a:	2a04      	cmp	r2, #4
   2d48c:	d00a      	beq.n	2d4a4 <bt_uuid_create+0x1a>
   2d48e:	2a10      	cmp	r2, #16
   2d490:	d00d      	beq.n	2d4ae <bt_uuid_create+0x24>
   2d492:	2a02      	cmp	r2, #2
   2d494:	f04f 0300 	mov.w	r3, #0
   2d498:	d115      	bne.n	2d4c6 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2d49a:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2d49c:	880b      	ldrh	r3, [r1, #0]
   2d49e:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2d4a0:	2001      	movs	r0, #1
   2d4a2:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2d4a4:	2301      	movs	r3, #1
   2d4a6:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2d4a8:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2d4aa:	6043      	str	r3, [r0, #4]
		break;
   2d4ac:	e7f8      	b.n	2d4a0 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2d4ae:	2302      	movs	r3, #2
   2d4b0:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d4b4:	f101 0310 	add.w	r3, r1, #16
   2d4b8:	f851 2b04 	ldr.w	r2, [r1], #4
   2d4bc:	4299      	cmp	r1, r3
   2d4be:	f840 2b04 	str.w	r2, [r0], #4
   2d4c2:	d1f9      	bne.n	2d4b8 <bt_uuid_create+0x2e>
   2d4c4:	e7ec      	b.n	2d4a0 <bt_uuid_create+0x16>
	switch (data_len) {
   2d4c6:	4618      	mov	r0, r3
}
   2d4c8:	4770      	bx	lr

0002d4ca <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2d4ca:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2d4cc:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2d4ce:	2106      	movs	r1, #6
{
   2d4d0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2d4d2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2d4d6:	f7ee facd 	bl	1ba74 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2d4da:	b918      	cbnz	r0, 2d4e4 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2d4dc:	79a3      	ldrb	r3, [r4, #6]
   2d4de:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2d4e2:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2d4e4:	bd10      	pop	{r4, pc}

0002d4e6 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2d4e6:	280f      	cmp	r0, #15
   2d4e8:	d807      	bhi.n	2d4fa <bt_hci_evt_get_flags+0x14>
   2d4ea:	280d      	cmp	r0, #13
   2d4ec:	d80b      	bhi.n	2d506 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2d4ee:	2805      	cmp	r0, #5
   2d4f0:	bf08      	it	eq
   2d4f2:	2003      	moveq	r0, #3
   2d4f4:	bf18      	it	ne
   2d4f6:	2002      	movne	r0, #2
   2d4f8:	4770      	bx	lr
	switch (evt) {
   2d4fa:	2813      	cmp	r0, #19
   2d4fc:	d003      	beq.n	2d506 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2d4fe:	281a      	cmp	r0, #26
   2d500:	bf08      	it	eq
   2d502:	2001      	moveq	r0, #1
   2d504:	e7f6      	b.n	2d4f4 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2d506:	2001      	movs	r0, #1
	}
}
   2d508:	4770      	bx	lr

0002d50a <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2d50a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2d50e:	b183      	cbz	r3, 2d532 <update_sec_level+0x28>
   2d510:	7b5a      	ldrb	r2, [r3, #13]
   2d512:	07d1      	lsls	r1, r2, #31
   2d514:	d50d      	bpl.n	2d532 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2d516:	06d2      	lsls	r2, r2, #27
   2d518:	d50d      	bpl.n	2d536 <update_sec_level+0x2c>
   2d51a:	7b1b      	ldrb	r3, [r3, #12]
   2d51c:	2b10      	cmp	r3, #16
   2d51e:	bf14      	ite	ne
   2d520:	2303      	movne	r3, #3
   2d522:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2d524:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2d526:	7a80      	ldrb	r0, [r0, #10]
}
   2d528:	4298      	cmp	r0, r3
   2d52a:	bf8c      	ite	hi
   2d52c:	2000      	movhi	r0, #0
   2d52e:	2001      	movls	r0, #1
   2d530:	4770      	bx	lr
   2d532:	2302      	movs	r3, #2
   2d534:	e7f6      	b.n	2d524 <update_sec_level+0x1a>
   2d536:	2303      	movs	r3, #3
   2d538:	e7f4      	b.n	2d524 <update_sec_level+0x1a>

0002d53a <hci_vendor_event>:
}
   2d53a:	4770      	bx	lr

0002d53c <atomic_or>:
{
   2d53c:	4603      	mov	r3, r0
   2d53e:	b510      	push	{r4, lr}
}
   2d540:	e8d3 0fef 	ldaex	r0, [r3]
   2d544:	ea40 0201 	orr.w	r2, r0, r1
   2d548:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d54c:	2c00      	cmp	r4, #0
   2d54e:	d1f7      	bne.n	2d540 <atomic_or+0x4>
   2d550:	bd10      	pop	{r4, pc}

0002d552 <bt_addr_copy>:
   2d552:	680b      	ldr	r3, [r1, #0]
   2d554:	6003      	str	r3, [r0, #0]
   2d556:	888b      	ldrh	r3, [r1, #4]
   2d558:	8083      	strh	r3, [r0, #4]
}
   2d55a:	4770      	bx	lr

0002d55c <bt_addr_le_copy>:
   2d55c:	680b      	ldr	r3, [r1, #0]
   2d55e:	6003      	str	r3, [r0, #0]
   2d560:	888b      	ldrh	r3, [r1, #4]
   2d562:	8083      	strh	r3, [r0, #4]
   2d564:	798b      	ldrb	r3, [r1, #6]
   2d566:	7183      	strb	r3, [r0, #6]
}
   2d568:	4770      	bx	lr

0002d56a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d56a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d56c:	ab0b      	add	r3, sp, #44	; 0x2c
   2d56e:	9305      	str	r3, [sp, #20]
   2d570:	9303      	str	r3, [sp, #12]
   2d572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d574:	9302      	str	r3, [sp, #8]
   2d576:	2300      	movs	r3, #0
   2d578:	4618      	mov	r0, r3
   2d57a:	e9cd 3300 	strd	r3, r3, [sp]
   2d57e:	f7e2 f8cd 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2d582:	b007      	add	sp, #28
   2d584:	f85d fb04 	ldr.w	pc, [sp], #4

0002d588 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d588:	e8d0 3fef 	ldaex	r3, [r0]
   2d58c:	400b      	ands	r3, r1
   2d58e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2d592:	2a00      	cmp	r2, #0
   2d594:	d1f8      	bne.n	2d588 <atomic_and.isra.0>
}
   2d596:	4770      	bx	lr

0002d598 <sys_put_le64>:
	dst[1] = val >> 8;
   2d598:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2d59c:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2d59e:	2300      	movs	r3, #0
   2d5a0:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2d5a2:	0e00      	lsrs	r0, r0, #24
   2d5a4:	70d0      	strb	r0, [r2, #3]
   2d5a6:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2d5aa:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2d5ac:	7093      	strb	r3, [r2, #2]
   2d5ae:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2d5b0:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2d5b2:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2d5b4:	71d1      	strb	r1, [r2, #7]
}
   2d5b6:	4770      	bx	lr

0002d5b8 <bt_hci_disconnect>:
{
   2d5b8:	b570      	push	{r4, r5, r6, lr}
   2d5ba:	4606      	mov	r6, r0
   2d5bc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2d5be:	f240 4006 	movw	r0, #1030	; 0x406
   2d5c2:	2103      	movs	r1, #3
   2d5c4:	f7ec fc7a 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2d5c8:	4604      	mov	r4, r0
   2d5ca:	b168      	cbz	r0, 2d5e8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2d5cc:	2103      	movs	r1, #3
   2d5ce:	300c      	adds	r0, #12
   2d5d0:	f002 f829 	bl	2f626 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2d5d4:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2d5d6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d5d8:	4621      	mov	r1, r4
}
   2d5da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2d5de:	2200      	movs	r2, #0
   2d5e0:	f240 4006 	movw	r0, #1030	; 0x406
   2d5e4:	f7ec bca4 	b.w	19f30 <bt_hci_cmd_send_sync>
}
   2d5e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d5ec:	bd70      	pop	{r4, r5, r6, pc}

0002d5ee <bt_le_set_data_len>:
{
   2d5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d5f0:	4607      	mov	r7, r0
   2d5f2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d5f4:	f242 0022 	movw	r0, #8226	; 0x2022
   2d5f8:	2106      	movs	r1, #6
{
   2d5fa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2d5fc:	f7ec fc5e 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2d600:	4604      	mov	r4, r0
   2d602:	b178      	cbz	r0, 2d624 <bt_le_set_data_len+0x36>
   2d604:	2106      	movs	r1, #6
   2d606:	300c      	adds	r0, #12
   2d608:	f002 f80d 	bl	2f626 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d60c:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2d60e:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d610:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2d612:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2d614:	4621      	mov	r1, r4
}
   2d616:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2d61a:	2200      	movs	r2, #0
   2d61c:	f242 0022 	movw	r0, #8226	; 0x2022
   2d620:	f7ec bc86 	b.w	19f30 <bt_hci_cmd_send_sync>
}
   2d624:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d62a <bt_le_set_phy>:
{
   2d62a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d62e:	4681      	mov	r9, r0
   2d630:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d632:	f242 0032 	movw	r0, #8242	; 0x2032
   2d636:	2107      	movs	r1, #7
{
   2d638:	4617      	mov	r7, r2
   2d63a:	461e      	mov	r6, r3
   2d63c:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2d640:	f7ec fc3c 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2d644:	4605      	mov	r5, r0
   2d646:	b1a0      	cbz	r0, 2d672 <bt_le_set_phy+0x48>
   2d648:	2107      	movs	r1, #7
   2d64a:	300c      	adds	r0, #12
   2d64c:	f001 ffeb 	bl	2f626 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d650:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2d654:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d658:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2d65a:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2d65c:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2d65e:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2d662:	4629      	mov	r1, r5
}
   2d664:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2d668:	2200      	movs	r2, #0
   2d66a:	f242 0032 	movw	r0, #8242	; 0x2032
   2d66e:	f7ec bc5f 	b.w	19f30 <bt_hci_cmd_send_sync>
}
   2d672:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d67a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2d67a:	68c0      	ldr	r0, [r0, #12]
   2d67c:	f7ec bd22 	b.w	1a0c4 <bt_hci_le_enh_conn_complete>

0002d680 <bt_le_conn_params_valid>:
{
   2d680:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2d682:	8803      	ldrh	r3, [r0, #0]
   2d684:	8842      	ldrh	r2, [r0, #2]
   2d686:	4293      	cmp	r3, r2
   2d688:	d819      	bhi.n	2d6be <bt_le_conn_params_valid+0x3e>
   2d68a:	2b05      	cmp	r3, #5
   2d68c:	d917      	bls.n	2d6be <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2d68e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2d692:	d814      	bhi.n	2d6be <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2d694:	8883      	ldrh	r3, [r0, #4]
   2d696:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2d69a:	d210      	bcs.n	2d6be <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d69c:	f640 4476 	movw	r4, #3190	; 0xc76
   2d6a0:	88c0      	ldrh	r0, [r0, #6]
   2d6a2:	f1a0 010a 	sub.w	r1, r0, #10
   2d6a6:	b289      	uxth	r1, r1
   2d6a8:	42a1      	cmp	r1, r4
   2d6aa:	d808      	bhi.n	2d6be <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2d6ac:	3301      	adds	r3, #1
   2d6ae:	b29b      	uxth	r3, r3
   2d6b0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2d6b2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2d6b6:	bf34      	ite	cc
   2d6b8:	2001      	movcc	r0, #1
   2d6ba:	2000      	movcs	r0, #0
}
   2d6bc:	bd10      	pop	{r4, pc}
		return false;
   2d6be:	2000      	movs	r0, #0
   2d6c0:	e7fc      	b.n	2d6bc <bt_le_conn_params_valid+0x3c>

0002d6c2 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2d6c2:	f240 3041 	movw	r0, #833	; 0x341
   2d6c6:	4770      	bx	lr

0002d6c8 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2d6c8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2d6ca:	f7f2 feeb 	bl	204a4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2d6ce:	b118      	cbz	r0, 2d6d8 <bt_addr_le_is_bonded+0x10>
   2d6d0:	89c0      	ldrh	r0, [r0, #14]
   2d6d2:	3800      	subs	r0, #0
   2d6d4:	bf18      	it	ne
   2d6d6:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2d6d8:	bd08      	pop	{r3, pc}

0002d6da <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2d6da:	2207      	movs	r2, #7
{
   2d6dc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d6de:	f004 f990 	bl	31a02 <memcmp>
}
   2d6e2:	fab0 f080 	clz	r0, r0
   2d6e6:	0940      	lsrs	r0, r0, #5
   2d6e8:	bd08      	pop	{r3, pc}

0002d6ea <bt_addr_copy>:
   2d6ea:	680b      	ldr	r3, [r1, #0]
   2d6ec:	6003      	str	r3, [r0, #0]
   2d6ee:	888b      	ldrh	r3, [r1, #4]
   2d6f0:	8083      	strh	r3, [r0, #4]
}
   2d6f2:	4770      	bx	lr

0002d6f4 <bt_addr_le_copy>:
   2d6f4:	680b      	ldr	r3, [r1, #0]
   2d6f6:	6003      	str	r3, [r0, #0]
   2d6f8:	888b      	ldrh	r3, [r1, #4]
   2d6fa:	8083      	strh	r3, [r0, #4]
   2d6fc:	798b      	ldrb	r3, [r1, #6]
   2d6fe:	7183      	strb	r3, [r0, #6]
}
   2d700:	4770      	bx	lr

0002d702 <hci_id_add>:
{
   2d702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d704:	460f      	mov	r7, r1
   2d706:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2d708:	bb30      	cbnz	r0, 2d758 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2d70a:	2127      	movs	r1, #39	; 0x27
   2d70c:	f242 0027 	movw	r0, #8231	; 0x2027
   2d710:	f7ec fbd4 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2d714:	4605      	mov	r5, r0
   2d716:	b310      	cbz	r0, 2d75e <hci_id_add+0x5c>
   2d718:	2127      	movs	r1, #39	; 0x27
   2d71a:	300c      	adds	r0, #12
   2d71c:	f001 ff83 	bl	2f626 <net_buf_simple_add>
   2d720:	4622      	mov	r2, r4
   2d722:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2d724:	4639      	mov	r1, r7
   2d726:	f7ff ffe5 	bl	2d6f4 <bt_addr_le_copy>
   2d72a:	1dc3      	adds	r3, r0, #7
   2d72c:	f104 0110 	add.w	r1, r4, #16
   2d730:	f852 0b04 	ldr.w	r0, [r2], #4
   2d734:	428a      	cmp	r2, r1
   2d736:	f843 0b04 	str.w	r0, [r3], #4
   2d73a:	d1f9      	bne.n	2d730 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2d73c:	2210      	movs	r2, #16
   2d73e:	2100      	movs	r1, #0
   2d740:	f106 0017 	add.w	r0, r6, #23
   2d744:	f004 f9a7 	bl	31a96 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2d748:	4629      	mov	r1, r5
}
   2d74a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2d74e:	2200      	movs	r2, #0
   2d750:	f242 0027 	movw	r0, #8231	; 0x2027
   2d754:	f7ec bbec 	b.w	19f30 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2d758:	f06f 0015 	mvn.w	r0, #21
}
   2d75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2d75e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d762:	e7fb      	b.n	2d75c <hci_id_add+0x5a>

0002d764 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2d764:	7a03      	ldrb	r3, [r0, #8]
{
   2d766:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2d768:	075b      	lsls	r3, r3, #29
   2d76a:	d505      	bpl.n	2d778 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2d76c:	4601      	mov	r1, r0
   2d76e:	322a      	adds	r2, #42	; 0x2a
   2d770:	f811 0b01 	ldrb.w	r0, [r1], #1
   2d774:	f7ff bfc5 	b.w	2d702 <hci_id_add>
}
   2d778:	4770      	bx	lr

0002d77a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d77a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d77c:	ab0b      	add	r3, sp, #44	; 0x2c
   2d77e:	9305      	str	r3, [sp, #20]
   2d780:	9303      	str	r3, [sp, #12]
   2d782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d784:	9302      	str	r3, [sp, #8]
   2d786:	2300      	movs	r3, #0
   2d788:	4618      	mov	r0, r3
   2d78a:	e9cd 3300 	strd	r3, r3, [sp]
   2d78e:	f7e1 ffc5 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2d792:	b007      	add	sp, #28
   2d794:	f85d fb04 	ldr.w	pc, [sp], #4

0002d798 <addr_res_enable>:
{
   2d798:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2d79a:	2101      	movs	r1, #1
{
   2d79c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2d79e:	f242 002d 	movw	r0, #8237	; 0x202d
   2d7a2:	f7ec fb8b 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2d7a6:	4604      	mov	r4, r0
   2d7a8:	b158      	cbz	r0, 2d7c2 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2d7aa:	4629      	mov	r1, r5
   2d7ac:	300c      	adds	r0, #12
   2d7ae:	f001 ff49 	bl	2f644 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2d7b2:	4621      	mov	r1, r4
}
   2d7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2d7b8:	2200      	movs	r2, #0
   2d7ba:	f242 002d 	movw	r0, #8237	; 0x202d
   2d7be:	f7ec bbb7 	b.w	19f30 <bt_hci_cmd_send_sync>
}
   2d7c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d7c6:	bd38      	pop	{r3, r4, r5, pc}

0002d7c8 <adv_unpause_enabled>:
{
   2d7c8:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d7ca:	f100 0310 	add.w	r3, r0, #16
   2d7ce:	e8d3 2fef 	ldaex	r2, [r3]
   2d7d2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2d7d6:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2d7da:	2c00      	cmp	r4, #0
   2d7dc:	d1f7      	bne.n	2d7ce <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2d7de:	0413      	lsls	r3, r2, #16
   2d7e0:	d503      	bpl.n	2d7ea <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2d7e2:	2101      	movs	r1, #1
}
   2d7e4:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2d7e6:	f000 b96d 	b.w	2dac4 <bt_le_adv_set_enable>
}
   2d7ea:	bc10      	pop	{r4}
   2d7ec:	4770      	bx	lr

0002d7ee <find_rl_conflict>:
{
   2d7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   2d7f2:	684f      	ldr	r7, [r1, #4]
{
   2d7f4:	4605      	mov	r5, r0
   2d7f6:	460c      	mov	r4, r1
   2d7f8:	b086      	sub	sp, #24
	if (conflict->found) {
   2d7fa:	b9c7      	cbnz	r7, 2d82e <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   2d7fc:	7a03      	ldrb	r3, [r0, #8]
   2d7fe:	075b      	lsls	r3, r3, #29
   2d800:	d515      	bpl.n	2d82e <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2d802:	6808      	ldr	r0, [r1, #0]
   2d804:	1c69      	adds	r1, r5, #1
   2d806:	3001      	adds	r0, #1
   2d808:	f7ff ff67 	bl	2d6da <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d80c:	f8d4 8000 	ldr.w	r8, [r4]
   2d810:	2216      	movs	r2, #22
   2d812:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   2d814:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d816:	4668      	mov	r0, sp
   2d818:	f004 f93d 	bl	31a96 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   2d81c:	2210      	movs	r2, #16
   2d81e:	4669      	mov	r1, sp
   2d820:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   2d824:	f004 f8ed 	bl	31a02 <memcmp>
   2d828:	b920      	cbnz	r0, 2d834 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   2d82a:	b106      	cbz	r6, 2d82e <find_rl_conflict+0x40>
		conflict->found = resident;
   2d82c:	6065      	str	r5, [r4, #4]
}
   2d82e:	b006      	add	sp, #24
   2d830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d834:	6820      	ldr	r0, [r4, #0]
   2d836:	2210      	movs	r2, #16
   2d838:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   2d83c:	302a      	adds	r0, #42	; 0x2a
   2d83e:	f004 f8e0 	bl	31a02 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2d842:	2800      	cmp	r0, #0
   2d844:	d0f2      	beq.n	2d82c <find_rl_conflict+0x3e>
   2d846:	e7f0      	b.n	2d82a <find_rl_conflict+0x3c>

0002d848 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2d848:	f100 0310 	add.w	r3, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d84c:	e8d3 2faf 	lda	r2, [r3]
   2d850:	0612      	lsls	r2, r2, #24
   2d852:	d50a      	bpl.n	2d86a <adv_pause_enabled+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d854:	e8d3 1fef 	ldaex	r1, [r3]
   2d858:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   2d85c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2d860:	2a00      	cmp	r2, #0
   2d862:	d1f7      	bne.n	2d854 <adv_pause_enabled+0xc>
		bt_le_adv_set_enable(adv, false);
   2d864:	2100      	movs	r1, #0
   2d866:	f000 b92d 	b.w	2dac4 <bt_le_adv_set_enable>
}
   2d86a:	4770      	bx	lr

0002d86c <bt_lookup_id_addr>:
{
   2d86c:	b510      	push	{r4, lr}
   2d86e:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2d870:	b930      	cbnz	r0, 2d880 <bt_lookup_id_addr+0x14>
   2d872:	b119      	cbz	r1, 2d87c <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2d874:	f7f2 fdd0 	bl	20418 <bt_keys_find_irk>
		if (keys) {
   2d878:	b100      	cbz	r0, 2d87c <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2d87a:	1c44      	adds	r4, r0, #1
}
   2d87c:	4620      	mov	r0, r4
   2d87e:	bd10      	pop	{r4, pc}
		return NULL;
   2d880:	2400      	movs	r4, #0
   2d882:	e7fb      	b.n	2d87c <bt_lookup_id_addr+0x10>

0002d884 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2d884:	b118      	cbz	r0, 2d88e <bt_id_set_adv_random_addr+0xa>
   2d886:	b111      	cbz	r1, 2d88e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2d888:	4608      	mov	r0, r1
   2d88a:	f7ed ba33 	b.w	1acf4 <set_random_address>
}
   2d88e:	f06f 0015 	mvn.w	r0, #21
   2d892:	4770      	bx	lr

0002d894 <bt_id_set_adv_private_addr>:
{
   2d894:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2d896:	4604      	mov	r4, r0
   2d898:	b180      	cbz	r0, 2d8bc <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2d89a:	2106      	movs	r1, #6
   2d89c:	4668      	mov	r0, sp
   2d89e:	f7ee f8e9 	bl	1ba74 <bt_rand>
	if (err) {
   2d8a2:	b948      	cbnz	r0, 2d8b8 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2d8a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d8a8:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2d8aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d8ae:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2d8b0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2d8b4:	f7ff ffe6 	bl	2d884 <bt_id_set_adv_random_addr>
}
   2d8b8:	b002      	add	sp, #8
   2d8ba:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2d8bc:	f06f 0015 	mvn.w	r0, #21
   2d8c0:	e7fa      	b.n	2d8b8 <bt_id_set_adv_private_addr+0x24>

0002d8c2 <bt_id_adv_random_addr_check>:
}
   2d8c2:	3800      	subs	r0, #0
   2d8c4:	bf18      	it	ne
   2d8c6:	2001      	movne	r0, #1
   2d8c8:	4770      	bx	lr

0002d8ca <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2d8ca:	7a03      	ldrb	r3, [r0, #8]
   2d8cc:	07d9      	lsls	r1, r3, #31
   2d8ce:	d504      	bpl.n	2d8da <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2d8d0:	f023 0301 	bic.w	r3, r3, #1
   2d8d4:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2d8d6:	f7ed ba5b 	b.w	1ad90 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2d8da:	0799      	lsls	r1, r3, #30
   2d8dc:	d504      	bpl.n	2d8e8 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2d8de:	f023 0302 	bic.w	r3, r3, #2
   2d8e2:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2d8e4:	f7ed bb20 	b.w	1af28 <bt_id_del>
}
   2d8e8:	4770      	bx	lr

0002d8ea <get_adv_channel_map>:
{
   2d8ea:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2d8ec:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2d8f0:	bf0c      	ite	eq
   2d8f2:	2007      	moveq	r0, #7
   2d8f4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2d8f6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2d8f8:	bf48      	it	mi
   2d8fa:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2d8fe:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2d900:	bf48      	it	mi
   2d902:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2d906:	4770      	bx	lr

0002d908 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d908:	e8d0 0faf 	lda	r0, [r0]
}
   2d90c:	4770      	bx	lr

0002d90e <atomic_and>:
{
   2d90e:	4603      	mov	r3, r0
   2d910:	b510      	push	{r4, lr}
}
   2d912:	e8d3 0fef 	ldaex	r0, [r3]
   2d916:	ea00 0201 	and.w	r2, r0, r1
   2d91a:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d91e:	2c00      	cmp	r4, #0
   2d920:	d1f7      	bne.n	2d912 <atomic_and+0x4>
   2d922:	bd10      	pop	{r4, pc}

0002d924 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d924:	680b      	ldr	r3, [r1, #0]
   2d926:	6003      	str	r3, [r0, #0]
   2d928:	888b      	ldrh	r3, [r1, #4]
   2d92a:	8083      	strh	r3, [r0, #4]
   2d92c:	798b      	ldrb	r3, [r1, #6]
   2d92e:	7183      	strb	r3, [r0, #6]
   2d930:	4770      	bx	lr

0002d932 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2d932:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d934:	ab0b      	add	r3, sp, #44	; 0x2c
   2d936:	9305      	str	r3, [sp, #20]
   2d938:	9303      	str	r3, [sp, #12]
   2d93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d93c:	9302      	str	r3, [sp, #8]
   2d93e:	2300      	movs	r3, #0
   2d940:	4618      	mov	r0, r3
   2d942:	e9cd 3300 	strd	r3, r3, [sp]
   2d946:	f7e1 fee9 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2d94a:	b007      	add	sp, #28
   2d94c:	f85d fb04 	ldr.w	pc, [sp], #4

0002d950 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d950:	2301      	movs	r3, #1
{
   2d952:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d954:	fa03 f101 	lsl.w	r1, r3, r1
{
   2d958:	4604      	mov	r4, r0
	if (val) {
   2d95a:	b142      	cbz	r2, 2d96e <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d95c:	e8d4 3fef 	ldaex	r3, [r4]
   2d960:	430b      	orrs	r3, r1
   2d962:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2d966:	2a00      	cmp	r2, #0
   2d968:	d1f8      	bne.n	2d95c <atomic_set_bit_to+0xc>
	}
}
   2d96a:	bc10      	pop	{r4}
   2d96c:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d96e:	43c9      	mvns	r1, r1
}
   2d970:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d972:	f7ff bfcc 	b.w	2d90e <atomic_and>

0002d976 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d97a:	b087      	sub	sp, #28
   2d97c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2d980:	4605      	mov	r5, r0
   2d982:	460c      	mov	r4, r1
   2d984:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2d986:	2100      	movs	r1, #0
   2d988:	2210      	movs	r2, #16
   2d98a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2d98c:	461f      	mov	r7, r3
   2d98e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2d992:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2d996:	f004 f87e 	bl	31a96 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2d99a:	b9ce      	cbnz	r6, 2d9d0 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2d99c:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2d9a0:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2d9a2:	f242 0008 	movw	r0, #8200	; 0x2008
   2d9a6:	a902      	add	r1, sp, #8
   2d9a8:	f7ed fd1a 	bl	1b3e0 <hci_set_ad>
		if (err) {
   2d9ac:	4604      	mov	r4, r0
   2d9ae:	b958      	cbnz	r0, 2d9c8 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2d9b0:	f1ba 0f00 	cmp.w	sl, #0
   2d9b4:	d13a      	bne.n	2da2c <le_adv_update.constprop.0+0xb6>
   2d9b6:	3510      	adds	r5, #16
   2d9b8:	e8d5 3fef 	ldaex	r3, [r5]
   2d9bc:	f043 0304 	orr.w	r3, r3, #4
   2d9c0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2d9c4:	2a00      	cmp	r2, #0
   2d9c6:	d1f7      	bne.n	2d9b8 <le_adv_update.constprop.0+0x42>
}
   2d9c8:	4620      	mov	r0, r4
   2d9ca:	b007      	add	sp, #28
   2d9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2d9d0:	f7ed f946 	bl	1ac60 <bt_get_name>
   2d9d4:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2d9d6:	b9e4      	cbnz	r4, 2da12 <le_adv_update.constprop.0+0x9c>
   2d9d8:	bb37      	cbnz	r7, 2da28 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   2d9da:	4658      	mov	r0, fp
   2d9dc:	f7db fd15 	bl	940a <strlen>
   2d9e0:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2d9e2:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2d9e4:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2d9e8:	f88d 3000 	strb.w	r3, [sp]
   2d9ec:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2d9f0:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2d9f4:	d1d4      	bne.n	2d9a0 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2d9f6:	2202      	movs	r2, #2
			d[1].data = &data;
   2d9f8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2d9fc:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2d9fe:	e7d0      	b.n	2d9a2 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2da00:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2da04:	3a08      	subs	r2, #8
   2da06:	2a01      	cmp	r2, #1
   2da08:	d924      	bls.n	2da54 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2da0a:	3301      	adds	r3, #1
   2da0c:	4598      	cmp	r8, r3
   2da0e:	d1f7      	bne.n	2da00 <le_adv_update.constprop.0+0x8a>
   2da10:	e7e2      	b.n	2d9d8 <le_adv_update.constprop.0+0x62>
   2da12:	2300      	movs	r3, #0
   2da14:	e7fa      	b.n	2da0c <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2da16:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2da1a:	3a08      	subs	r2, #8
   2da1c:	2a01      	cmp	r2, #1
   2da1e:	d919      	bls.n	2da54 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2da20:	3301      	adds	r3, #1
   2da22:	4599      	cmp	r9, r3
   2da24:	d1f7      	bne.n	2da16 <le_adv_update.constprop.0+0xa0>
   2da26:	e7d8      	b.n	2d9da <le_adv_update.constprop.0+0x64>
   2da28:	2300      	movs	r3, #0
   2da2a:	e7fa      	b.n	2da22 <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2da2c:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2da2e:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2da30:	bf08      	it	eq
   2da32:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2da34:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2da38:	bf08      	it	eq
   2da3a:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2da3c:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2da3e:	bf08      	it	eq
   2da40:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2da44:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2da48:	f7ed fcca 	bl	1b3e0 <hci_set_ad>
		if (err) {
   2da4c:	2800      	cmp	r0, #0
   2da4e:	d0b2      	beq.n	2d9b6 <le_adv_update.constprop.0+0x40>
   2da50:	4604      	mov	r4, r0
   2da52:	e7b9      	b.n	2d9c8 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   2da54:	f06f 0415 	mvn.w	r4, #21
   2da58:	e7b6      	b.n	2d9c8 <le_adv_update.constprop.0+0x52>

0002da5a <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2da5a:	6843      	ldr	r3, [r0, #4]
   2da5c:	f013 0008 	ands.w	r0, r3, #8
   2da60:	d00a      	beq.n	2da78 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2da62:	035a      	lsls	r2, r3, #13
   2da64:	d407      	bmi.n	2da76 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2da66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2da6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2da6e:	bf14      	ite	ne
   2da70:	2002      	movne	r0, #2
   2da72:	2001      	moveq	r0, #1
   2da74:	4770      	bx	lr
   2da76:	2001      	movs	r0, #1
}
   2da78:	4770      	bx	lr

0002da7a <bt_le_adv_set_enable_legacy>:
{
   2da7a:	b570      	push	{r4, r5, r6, lr}
   2da7c:	4606      	mov	r6, r0
   2da7e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2da80:	f242 000a 	movw	r0, #8202	; 0x200a
   2da84:	2101      	movs	r1, #1
{
   2da86:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2da88:	f7ec fa18 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2da8c:	4604      	mov	r4, r0
   2da8e:	b1b0      	cbz	r0, 2dabe <bt_le_adv_set_enable_legacy+0x44>
   2da90:	300c      	adds	r0, #12
	if (enable) {
   2da92:	b195      	cbz	r5, 2daba <bt_le_adv_set_enable_legacy+0x40>
   2da94:	2101      	movs	r1, #1
   2da96:	f001 fdd5 	bl	2f644 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2da9a:	4620      	mov	r0, r4
   2da9c:	f106 0210 	add.w	r2, r6, #16
   2daa0:	a903      	add	r1, sp, #12
   2daa2:	2307      	movs	r3, #7
   2daa4:	9500      	str	r5, [sp, #0]
   2daa6:	f7ec f9f7 	bl	19e98 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2daaa:	2200      	movs	r2, #0
   2daac:	4621      	mov	r1, r4
   2daae:	f242 000a 	movw	r0, #8202	; 0x200a
   2dab2:	f7ec fa3d 	bl	19f30 <bt_hci_cmd_send_sync>
}
   2dab6:	b006      	add	sp, #24
   2dab8:	bd70      	pop	{r4, r5, r6, pc}
   2daba:	4629      	mov	r1, r5
   2dabc:	e7eb      	b.n	2da96 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2dabe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2dac2:	e7f8      	b.n	2dab6 <bt_le_adv_set_enable_legacy+0x3c>

0002dac4 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2dac4:	f7ff bfd9 	b.w	2da7a <bt_le_adv_set_enable_legacy>

0002dac8 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2dac8:	3018      	adds	r0, #24
   2daca:	f003 bc2f 	b.w	3132c <k_work_cancel_delayable>

0002dace <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2dace:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2dad0:	ab0b      	add	r3, sp, #44	; 0x2c
   2dad2:	9305      	str	r3, [sp, #20]
   2dad4:	9303      	str	r3, [sp, #12]
   2dad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dad8:	2201      	movs	r2, #1
   2dada:	9302      	str	r3, [sp, #8]
   2dadc:	2300      	movs	r3, #0
   2dade:	4618      	mov	r0, r3
   2dae0:	e9cd 3300 	strd	r3, r3, [sp]
   2dae4:	f7e1 fe1a 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2dae8:	b007      	add	sp, #28
   2daea:	f85d fb04 	ldr.w	pc, [sp], #4

0002daee <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2daee:	b5f0      	push	{r4, r5, r6, r7, lr}
   2daf0:	460d      	mov	r5, r1
   2daf2:	4614      	mov	r4, r2
   2daf4:	b0b1      	sub	sp, #196	; 0xc4
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2daf6:	b370      	cbz	r0, 2db56 <bt_encrypt_le+0x68>
   2daf8:	b369      	cbz	r1, 2db56 <bt_encrypt_le+0x68>
   2dafa:	b362      	cbz	r2, 2db56 <bt_encrypt_le+0x68>
	for (; length > 0; length--) {
   2dafc:	466e      	mov	r6, sp
   2dafe:	4632      	mov	r2, r6
   2db00:	4637      	mov	r7, r6
   2db02:	f100 0310 	add.w	r3, r0, #16
		*pdst++ = *psrc--;
   2db06:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
	for (; length > 0; length--) {
   2db0a:	4283      	cmp	r3, r0
		*pdst++ = *psrc--;
   2db0c:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   2db10:	d1f9      	bne.n	2db06 <bt_encrypt_le+0x18>
	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2db12:	4631      	mov	r1, r6
   2db14:	a804      	add	r0, sp, #16
   2db16:	f7e3 fa73 	bl	11000 <tc_aes128_set_encrypt_key>
   2db1a:	b1e0      	cbz	r0, 2db56 <bt_encrypt_le+0x68>
   2db1c:	f105 0310 	add.w	r3, r5, #16
		*pdst++ = *psrc--;
   2db20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   2db24:	42ab      	cmp	r3, r5
		*pdst++ = *psrc--;
   2db26:	f806 2b01 	strb.w	r2, [r6], #1
	for (; length > 0; length--) {
   2db2a:	d1f9      	bne.n	2db20 <bt_encrypt_le+0x32>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2db2c:	4639      	mov	r1, r7
   2db2e:	4620      	mov	r0, r4
   2db30:	aa04      	add	r2, sp, #16
   2db32:	f7fd fc3c 	bl	2b3ae <tc_aes_encrypt>
   2db36:	b170      	cbz	r0, 2db56 <bt_encrypt_le+0x68>
   2db38:	1e63      	subs	r3, r4, #1
   2db3a:	f104 0210 	add.w	r2, r4, #16
   2db3e:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2db40:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2db44:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2db48:	429c      	cmp	r4, r3
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2db4a:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2db4c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2db4e:	d1f7      	bne.n	2db40 <bt_encrypt_le+0x52>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   2db50:	2000      	movs	r0, #0
}
   2db52:	b031      	add	sp, #196	; 0xc4
   2db54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   2db56:	f06f 0015 	mvn.w	r0, #21
   2db5a:	e7fa      	b.n	2db52 <bt_encrypt_le+0x64>

0002db5c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2db5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2db5e:	ab0b      	add	r3, sp, #44	; 0x2c
   2db60:	9305      	str	r3, [sp, #20]
   2db62:	9303      	str	r3, [sp, #12]
   2db64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db66:	9302      	str	r3, [sp, #8]
   2db68:	2300      	movs	r3, #0
   2db6a:	4618      	mov	r0, r3
   2db6c:	e9cd 3300 	strd	r3, r3, [sp]
   2db70:	f7e1 fdd4 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2db74:	b007      	add	sp, #28
   2db76:	f85d fb04 	ldr.w	pc, [sp], #4

0002db7a <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2db7a:	2200      	movs	r2, #0
	return list->head;
   2db7c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2db7e:	b90b      	cbnz	r3, 2db84 <sys_slist_find_and_remove+0xa>
   2db80:	4618      	mov	r0, r3
   2db82:	4770      	bx	lr
   2db84:	428b      	cmp	r3, r1
   2db86:	d110      	bne.n	2dbaa <sys_slist_find_and_remove+0x30>
	return node->next;
   2db88:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2db8a:	b942      	cbnz	r2, 2db9e <sys_slist_find_and_remove+0x24>
   2db8c:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2db8e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2db90:	4291      	cmp	r1, r2
   2db92:	d100      	bne.n	2db96 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2db94:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2db96:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2db98:	2001      	movs	r0, #1
	parent->next = child;
   2db9a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2db9c:	4770      	bx	lr
	parent->next = child;
   2db9e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2dba0:	6843      	ldr	r3, [r0, #4]
   2dba2:	4299      	cmp	r1, r3
	list->tail = node;
   2dba4:	bf08      	it	eq
   2dba6:	6042      	streq	r2, [r0, #4]
}
   2dba8:	e7f5      	b.n	2db96 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2dbaa:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dbac:	681b      	ldr	r3, [r3, #0]
   2dbae:	e7e6      	b.n	2db7e <sys_slist_find_and_remove+0x4>

0002dbb0 <atomic_and>:
{
   2dbb0:	4603      	mov	r3, r0
   2dbb2:	b510      	push	{r4, lr}
}
   2dbb4:	e8d3 0fef 	ldaex	r0, [r3]
   2dbb8:	ea00 0201 	and.w	r2, r0, r1
   2dbbc:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2dbc0:	2c00      	cmp	r4, #0
   2dbc2:	d1f7      	bne.n	2dbb4 <atomic_and+0x4>
   2dbc4:	bd10      	pop	{r4, pc}

0002dbc6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2dbc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2dbc8:	ab0b      	add	r3, sp, #44	; 0x2c
   2dbca:	9305      	str	r3, [sp, #20]
   2dbcc:	9303      	str	r3, [sp, #12]
   2dbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dbd0:	9302      	str	r3, [sp, #8]
   2dbd2:	2300      	movs	r3, #0
   2dbd4:	4618      	mov	r0, r3
   2dbd6:	e9cd 3300 	strd	r3, r3, [sp]
   2dbda:	f7e1 fd9f 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2dbde:	b007      	add	sp, #28
   2dbe0:	f85d fb04 	ldr.w	pc, [sp], #4

0002dbe4 <tx_complete_work>:
	tx_notify(conn);
   2dbe4:	3828      	subs	r0, #40	; 0x28
   2dbe6:	f7ee b8bd 	b.w	1bd64 <tx_notify>

0002dbea <bt_conn_reset_rx_state>:
{
   2dbea:	b510      	push	{r4, lr}
   2dbec:	4604      	mov	r4, r0
	if (!conn->rx) {
   2dbee:	6900      	ldr	r0, [r0, #16]
   2dbf0:	b118      	cbz	r0, 2dbfa <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2dbf2:	f7f2 fdcd 	bl	20790 <net_buf_unref>
	conn->rx = NULL;
   2dbf6:	2300      	movs	r3, #0
   2dbf8:	6123      	str	r3, [r4, #16]
}
   2dbfa:	bd10      	pop	{r4, pc}

0002dbfc <conn_cleanup>:
{
   2dbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dc00:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2dc02:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2dc04:	f104 0638 	add.w	r6, r4, #56	; 0x38
   2dc08:	2300      	movs	r3, #0
   2dc0a:	2200      	movs	r2, #0
   2dc0c:	4630      	mov	r0, r6
   2dc0e:	f001 fcaf 	bl	2f570 <net_buf_get>
   2dc12:	4603      	mov	r3, r0
   2dc14:	b950      	cbnz	r0, 2dc2c <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2dc16:	4620      	mov	r0, r4
   2dc18:	f7ff ffe7 	bl	2dbea <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2dc1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2dc20:	2200      	movs	r2, #0
}
   2dc22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2dc26:	2300      	movs	r3, #0
   2dc28:	f7f8 baaa 	b.w	26180 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   2dc2c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   2dc2e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   2dc30:	f7f2 fdae 	bl	20790 <net_buf_unref>
		if (tx) {
   2dc34:	2d00      	cmp	r5, #0
   2dc36:	d0e7      	beq.n	2dc08 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   2dc38:	4629      	mov	r1, r5
   2dc3a:	4620      	mov	r0, r4
   2dc3c:	f7ee f8c2 	bl	1bdc4 <conn_tx_destroy>
   2dc40:	e7e0      	b.n	2dc04 <conn_cleanup+0x8>

0002dc42 <bt_conn_ref>:
{
   2dc42:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2dc44:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dc48:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   2dc4c:	b15b      	cbz	r3, 2dc66 <bt_conn_ref+0x24>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2dc4e:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2dc50:	e8d2 4fef 	ldaex	r4, [r2]
   2dc54:	429c      	cmp	r4, r3
   2dc56:	d104      	bne.n	2dc62 <bt_conn_ref+0x20>
   2dc58:	e8c2 1fec 	stlex	ip, r1, [r2]
   2dc5c:	f1bc 0f00 	cmp.w	ip, #0
   2dc60:	d1f6      	bne.n	2dc50 <bt_conn_ref+0xe>
   2dc62:	d1f1      	bne.n	2dc48 <bt_conn_ref+0x6>
}
   2dc64:	bd10      	pop	{r4, pc}
			return NULL;
   2dc66:	4618      	mov	r0, r3
   2dc68:	e7fc      	b.n	2dc64 <bt_conn_ref+0x22>

0002dc6a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2dc6a:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2dc6e:	e8d3 2fef 	ldaex	r2, [r3]
   2dc72:	3a01      	subs	r2, #1
   2dc74:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2dc78:	2900      	cmp	r1, #0
   2dc7a:	d1f8      	bne.n	2dc6e <bt_conn_unref+0x4>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2dc7c:	f240 1201 	movw	r2, #257	; 0x101
   2dc80:	8841      	ldrh	r1, [r0, #2]
   2dc82:	4291      	cmp	r1, r2
   2dc84:	d104      	bne.n	2dc90 <bt_conn_unref+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dc86:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2dc8a:	b90b      	cbnz	r3, 2dc90 <bt_conn_unref+0x26>
		bt_le_adv_resume();
   2dc8c:	f7ed be58 	b.w	1b940 <bt_le_adv_resume>
}
   2dc90:	4770      	bx	lr

0002dc92 <conn_lookup_handle>:
{
   2dc92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dc96:	4607      	mov	r7, r0
   2dc98:	460e      	mov	r6, r1
   2dc9a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2dc9c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2dc9e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2dca2:	42b4      	cmp	r4, r6
   2dca4:	d103      	bne.n	2dcae <conn_lookup_handle+0x1c>
	return NULL;
   2dca6:	2300      	movs	r3, #0
}
   2dca8:	4618      	mov	r0, r3
   2dcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2dcae:	fb09 7004 	mla	r0, r9, r4, r7
   2dcb2:	f7ff ffc6 	bl	2dc42 <bt_conn_ref>
   2dcb6:	4603      	mov	r3, r0
		if (!conn) {
   2dcb8:	b158      	cbz	r0, 2dcd2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2dcba:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2dcbc:	2d01      	cmp	r5, #1
   2dcbe:	d002      	beq.n	2dcc6 <conn_lookup_handle+0x34>
   2dcc0:	3d07      	subs	r5, #7
   2dcc2:	2d01      	cmp	r5, #1
   2dcc4:	d803      	bhi.n	2dcce <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2dcc6:	881a      	ldrh	r2, [r3, #0]
   2dcc8:	4542      	cmp	r2, r8
   2dcca:	d0ed      	beq.n	2dca8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2dccc:	4618      	mov	r0, r3
   2dcce:	f7ff ffcc 	bl	2dc6a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2dcd2:	3401      	adds	r4, #1
   2dcd4:	e7e5      	b.n	2dca2 <conn_lookup_handle+0x10>

0002dcd6 <bt_conn_connected>:
{
   2dcd6:	b510      	push	{r4, lr}
   2dcd8:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2dcda:	f7ee fee3 	bl	1caa4 <bt_l2cap_connected>
	notify_connected(conn);
   2dcde:	4620      	mov	r0, r4
}
   2dce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2dce4:	f7ee b820 	b.w	1bd28 <notify_connected>

0002dce8 <bt_conn_disconnect>:
{
   2dce8:	b510      	push	{r4, lr}
	switch (conn->state) {
   2dcea:	7b43      	ldrb	r3, [r0, #13]
{
   2dcec:	4604      	mov	r4, r0
	switch (conn->state) {
   2dcee:	3b02      	subs	r3, #2
   2dcf0:	2b06      	cmp	r3, #6
   2dcf2:	d816      	bhi.n	2dd22 <bt_conn_disconnect+0x3a>
   2dcf4:	e8df f003 	tbb	[pc, r3]
   2dcf8:	15151504 	.word	0x15151504
   2dcfc:	0b09      	.short	0x0b09
   2dcfe:	09          	.byte	0x09
   2dcff:	00          	.byte	0x00
		conn->err = reason;
   2dd00:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2dd02:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2dd04:	4620      	mov	r0, r4
   2dd06:	f7ee fa79 	bl	1c1fc <bt_conn_set_state>
{
   2dd0a:	2000      	movs	r0, #0
}
   2dd0c:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2dd0e:	8800      	ldrh	r0, [r0, #0]
   2dd10:	f7ff fc52 	bl	2d5b8 <bt_hci_disconnect>
	if (err) {
   2dd14:	2800      	cmp	r0, #0
   2dd16:	d1f9      	bne.n	2dd0c <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2dd18:	7b63      	ldrb	r3, [r4, #13]
   2dd1a:	2b07      	cmp	r3, #7
   2dd1c:	d1f5      	bne.n	2dd0a <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2dd1e:	2108      	movs	r1, #8
   2dd20:	e7f0      	b.n	2dd04 <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2dd22:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2dd26:	e7f1      	b.n	2dd0c <bt_conn_disconnect+0x24>

0002dd28 <bt_conn_set_security>:
{
   2dd28:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2dd2a:	7b43      	ldrb	r3, [r0, #13]
{
   2dd2c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2dd2e:	2b07      	cmp	r3, #7
{
   2dd30:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2dd32:	d122      	bne.n	2dd7a <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2dd34:	7a43      	ldrb	r3, [r0, #9]
   2dd36:	428b      	cmp	r3, r1
   2dd38:	d215      	bcs.n	2dd66 <bt_conn_set_security+0x3e>
   2dd3a:	7a83      	ldrb	r3, [r0, #10]
   2dd3c:	428b      	cmp	r3, r1
   2dd3e:	d212      	bcs.n	2dd66 <bt_conn_set_security+0x3e>
	if (val) {
   2dd40:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2dd42:	f100 0004 	add.w	r0, r0, #4
   2dd46:	d510      	bpl.n	2dd6a <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dd48:	e8d0 3fef 	ldaex	r3, [r0]
   2dd4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2dd50:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2dd54:	2a00      	cmp	r2, #0
   2dd56:	d1f7      	bne.n	2dd48 <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2dd58:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2dd5c:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2dd5e:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2dd60:	f7f1 fd82 	bl	1f868 <bt_smp_start_security>
	if (err) {
   2dd64:	b930      	cbnz	r0, 2dd74 <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   2dd66:	2000      	movs	r0, #0
}
   2dd68:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2dd6a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2dd6e:	f7ff ff1f 	bl	2dbb0 <atomic_and>
   2dd72:	e7f1      	b.n	2dd58 <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2dd74:	7a63      	ldrb	r3, [r4, #9]
   2dd76:	72a3      	strb	r3, [r4, #10]
   2dd78:	e7f6      	b.n	2dd68 <bt_conn_set_security+0x40>
		return -ENOTCONN;
   2dd7a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2dd7e:	e7f3      	b.n	2dd68 <bt_conn_set_security+0x40>

0002dd80 <bt_conn_get_security>:
}
   2dd80:	7a40      	ldrb	r0, [r0, #9]
   2dd82:	4770      	bx	lr

0002dd84 <bt_conn_is_peer_addr_le>:
{
   2dd84:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2dd86:	7a03      	ldrb	r3, [r0, #8]
{
   2dd88:	4604      	mov	r4, r0
	if (id != conn->id) {
   2dd8a:	428b      	cmp	r3, r1
{
   2dd8c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2dd8e:	d115      	bne.n	2ddbc <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2dd90:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2dd94:	2207      	movs	r2, #7
   2dd96:	4628      	mov	r0, r5
   2dd98:	f003 fe33 	bl	31a02 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2dd9c:	b180      	cbz	r0, 2ddc0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2dd9e:	78e3      	ldrb	r3, [r4, #3]
   2dda0:	2207      	movs	r2, #7
   2dda2:	b943      	cbnz	r3, 2ddb6 <bt_conn_is_peer_addr_le+0x32>
   2dda4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2dda8:	4628      	mov	r0, r5
   2ddaa:	f003 fe2a 	bl	31a02 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2ddae:	fab0 f080 	clz	r0, r0
   2ddb2:	0940      	lsrs	r0, r0, #5
}
   2ddb4:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2ddb6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2ddba:	e7f5      	b.n	2dda8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2ddbc:	2000      	movs	r0, #0
   2ddbe:	e7f9      	b.n	2ddb4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2ddc0:	2001      	movs	r0, #1
   2ddc2:	e7f7      	b.n	2ddb4 <bt_conn_is_peer_addr_le+0x30>

0002ddc4 <bt_conn_get_dst>:
}
   2ddc4:	3088      	adds	r0, #136	; 0x88
   2ddc6:	4770      	bx	lr

0002ddc8 <bt_conn_le_conn_update>:
{
   2ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ddca:	4607      	mov	r7, r0
   2ddcc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2ddce:	f242 0013 	movw	r0, #8211	; 0x2013
   2ddd2:	210e      	movs	r1, #14
   2ddd4:	f7ec f872 	bl	19ebc <bt_hci_cmd_create>
	if (!buf) {
   2ddd8:	4606      	mov	r6, r0
   2ddda:	b1d0      	cbz	r0, 2de12 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2dddc:	210e      	movs	r1, #14
   2ddde:	300c      	adds	r0, #12
   2dde0:	f001 fc21 	bl	2f626 <net_buf_simple_add>
   2dde4:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2dde6:	220e      	movs	r2, #14
   2dde8:	2100      	movs	r1, #0
   2ddea:	f003 fe54 	bl	31a96 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ddee:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ddf0:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ddf2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ddf4:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ddf6:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ddf8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2ddfa:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ddfc:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2de00:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2de02:	88ab      	ldrh	r3, [r5, #4]
   2de04:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2de06:	88eb      	ldrh	r3, [r5, #6]
   2de08:	8123      	strh	r3, [r4, #8]
}
   2de0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2de0e:	f7ec b88f 	b.w	19f30 <bt_hci_cmd_send_sync>
}
   2de12:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2de16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002de18 <l2cap_connected>:
}
   2de18:	4770      	bx	lr

0002de1a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2de1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2de1c:	ab0b      	add	r3, sp, #44	; 0x2c
   2de1e:	9305      	str	r3, [sp, #20]
   2de20:	9303      	str	r3, [sp, #12]
   2de22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2de24:	9302      	str	r3, [sp, #8]
   2de26:	2300      	movs	r3, #0
   2de28:	4618      	mov	r0, r3
   2de2a:	e9cd 3300 	strd	r3, r3, [sp]
   2de2e:	f7e1 fc75 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2de32:	b007      	add	sp, #28
   2de34:	f85d fb04 	ldr.w	pc, [sp], #4

0002de38 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2de38:	4770      	bx	lr

0002de3a <bt_l2cap_chan_del>:
{
   2de3a:	b570      	push	{r4, r5, r6, lr}
   2de3c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2de3e:	e9d0 3500 	ldrd	r3, r5, [r0]
   2de42:	b123      	cbz	r3, 2de4e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2de44:	686b      	ldr	r3, [r5, #4]
   2de46:	b103      	cbz	r3, 2de4a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2de48:	4798      	blx	r3
	chan->conn = NULL;
   2de4a:	2300      	movs	r3, #0
   2de4c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2de4e:	68e3      	ldr	r3, [r4, #12]
   2de50:	b10b      	cbz	r3, 2de56 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2de52:	4620      	mov	r0, r4
   2de54:	4798      	blx	r3
	if (ops->released) {
   2de56:	6a2b      	ldr	r3, [r5, #32]
   2de58:	b11b      	cbz	r3, 2de62 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2de5a:	4620      	mov	r0, r4
}
   2de5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2de60:	4718      	bx	r3
}
   2de62:	bd70      	pop	{r4, r5, r6, pc}

0002de64 <bt_l2cap_disconnected>:
{
   2de64:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2de66:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2de68:	b130      	cbz	r0, 2de78 <bt_l2cap_disconnected+0x14>
	return node->next;
   2de6a:	f850 4908 	ldr.w	r4, [r0], #-8
   2de6e:	b104      	cbz	r4, 2de72 <bt_l2cap_disconnected+0xe>
   2de70:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2de72:	f7ff ffe2 	bl	2de3a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2de76:	b904      	cbnz	r4, 2de7a <bt_l2cap_disconnected+0x16>
}
   2de78:	bd38      	pop	{r3, r4, r5, pc}
   2de7a:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2de7c:	b12d      	cbz	r5, 2de8a <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2de7e:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2de80:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2de82:	f7ff ffda 	bl	2de3a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2de86:	462c      	mov	r4, r5
   2de88:	e7f7      	b.n	2de7a <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2de8a:	4620      	mov	r0, r4
}
   2de8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2de90:	f7ff bfd3 	b.w	2de3a <bt_l2cap_chan_del>

0002de94 <bt_l2cap_security_changed>:
{
   2de94:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2de96:	6d03      	ldr	r3, [r0, #80]	; 0x50
   2de98:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2de9a:	b1bb      	cbz	r3, 2decc <bt_l2cap_security_changed+0x38>
   2de9c:	4618      	mov	r0, r3
	return node->next;
   2de9e:	f850 4908 	ldr.w	r4, [r0], #-8
   2dea2:	b104      	cbz	r4, 2dea6 <bt_l2cap_security_changed+0x12>
   2dea4:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2dea6:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2deaa:	689b      	ldr	r3, [r3, #8]
   2deac:	b10b      	cbz	r3, 2deb2 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2deae:	4629      	mov	r1, r5
   2deb0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2deb2:	b15c      	cbz	r4, 2decc <bt_l2cap_security_changed+0x38>
   2deb4:	4620      	mov	r0, r4
   2deb6:	68a4      	ldr	r4, [r4, #8]
   2deb8:	6843      	ldr	r3, [r0, #4]
   2deba:	b124      	cbz	r4, 2dec6 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2debc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2debe:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2dec0:	2b00      	cmp	r3, #0
   2dec2:	d1f4      	bne.n	2deae <bt_l2cap_security_changed+0x1a>
   2dec4:	e7f6      	b.n	2deb4 <bt_l2cap_security_changed+0x20>
   2dec6:	689b      	ldr	r3, [r3, #8]
   2dec8:	2b00      	cmp	r3, #0
   2deca:	d1f0      	bne.n	2deae <bt_l2cap_security_changed+0x1a>
}
   2decc:	bd38      	pop	{r3, r4, r5, pc}

0002dece <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2dece:	3104      	adds	r1, #4
   2ded0:	f7ee ba84 	b.w	1c3dc <bt_conn_create_pdu_timeout>

0002ded4 <bt_l2cap_send_cb>:
{
   2ded4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ded8:	4614      	mov	r4, r2
   2deda:	4605      	mov	r5, r0
   2dedc:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2dede:	f102 000c 	add.w	r0, r2, #12
   2dee2:	2104      	movs	r1, #4
   2dee4:	461e      	mov	r6, r3
   2dee6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2deea:	f001 fbb3 	bl	2f654 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2deee:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2def0:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2def2:	3a04      	subs	r2, #4
   2def4:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2def6:	4643      	mov	r3, r8
   2def8:	4632      	mov	r2, r6
   2defa:	4621      	mov	r1, r4
   2defc:	4628      	mov	r0, r5
}
   2defe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2df02:	f7ee b8d3 	b.w	1c0ac <bt_conn_send_cb>

0002df06 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2df06:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2df08:	b128      	cbz	r0, 2df16 <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2df0a:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2df0c:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2df0e:	428b      	cmp	r3, r1
   2df10:	d001      	beq.n	2df16 <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   2df12:	6880      	ldr	r0, [r0, #8]
   2df14:	e7f8      	b.n	2df08 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2df16:	4770      	bx	lr

0002df18 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2df18:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2df1a:	b128      	cbz	r0, 2df28 <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2df1c:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2df1e:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2df20:	428b      	cmp	r3, r1
   2df22:	d001      	beq.n	2df28 <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2df24:	6880      	ldr	r0, [r0, #8]
   2df26:	e7f8      	b.n	2df1a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2df28:	4770      	bx	lr

0002df2a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2df2a:	4770      	bx	lr

0002df2c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2df2c:	4603      	mov	r3, r0
	return list->head;
   2df2e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2df30:	b128      	cbz	r0, 2df3e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2df32:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2df34:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2df36:	4288      	cmp	r0, r1
	list->head = node;
   2df38:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2df3a:	bf08      	it	eq
   2df3c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2df3e:	4770      	bx	lr

0002df40 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2df40:	4603      	mov	r3, r0
	size_t bytes = 0;
   2df42:	2000      	movs	r0, #0

	while (buf) {
   2df44:	b903      	cbnz	r3, 2df48 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2df46:	4770      	bx	lr
		bytes += buf->len;
   2df48:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2df4a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2df4c:	4410      	add	r0, r2
		buf = buf->frags;
   2df4e:	e7f9      	b.n	2df44 <net_buf_frags_len+0x4>

0002df50 <attr_read_type_cb>:
{
   2df50:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2df52:	68d4      	ldr	r4, [r2, #12]
   2df54:	3102      	adds	r1, #2
   2df56:	7823      	ldrb	r3, [r4, #0]
   2df58:	b913      	cbnz	r3, 2df60 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2df5a:	7021      	strb	r1, [r4, #0]
	return true;
   2df5c:	2001      	movs	r0, #1
}
   2df5e:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2df60:	428b      	cmp	r3, r1
   2df62:	d0fb      	beq.n	2df5c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2df64:	8a03      	ldrh	r3, [r0, #16]
   2df66:	3b02      	subs	r3, #2
   2df68:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2df6a:	2000      	movs	r0, #0
   2df6c:	6110      	str	r0, [r2, #16]
		return false;
   2df6e:	e7f6      	b.n	2df5e <attr_read_type_cb+0xe>

0002df70 <att_prepare_write_req>:
}
   2df70:	2006      	movs	r0, #6
   2df72:	4770      	bx	lr

0002df74 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2df74:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2df78:	4108      	asrs	r0, r1
}
   2df7a:	f000 0001 	and.w	r0, r0, #1
   2df7e:	4770      	bx	lr

0002df80 <write_cb>:
{
   2df80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2df82:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2df84:	4601      	mov	r1, r0
{
   2df86:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2df88:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2df8c:	6820      	ldr	r0, [r4, #0]
   2df8e:	f000 fe39 	bl	2ec04 <bt_gatt_check_perm>
   2df92:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2df94:	bb00      	cbnz	r0, 2dfd8 <write_cb+0x58>
	if (!data->req) {
   2df96:	7a23      	ldrb	r3, [r4, #8]
   2df98:	b1b3      	cbz	r3, 2dfc8 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2df9a:	f1a3 0218 	sub.w	r2, r3, #24
   2df9e:	4253      	negs	r3, r2
   2dfa0:	4153      	adcs	r3, r2
   2dfa2:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2dfa4:	9301      	str	r3, [sp, #4]
   2dfa6:	8a63      	ldrh	r3, [r4, #18]
   2dfa8:	4629      	mov	r1, r5
   2dfaa:	9300      	str	r3, [sp, #0]
   2dfac:	68ae      	ldr	r6, [r5, #8]
   2dfae:	8a23      	ldrh	r3, [r4, #16]
   2dfb0:	68e2      	ldr	r2, [r4, #12]
   2dfb2:	6820      	ldr	r0, [r4, #0]
   2dfb4:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2dfb6:	2800      	cmp	r0, #0
   2dfb8:	db08      	blt.n	2dfcc <write_cb+0x4c>
   2dfba:	8a23      	ldrh	r3, [r4, #16]
   2dfbc:	4283      	cmp	r3, r0
   2dfbe:	d10e      	bne.n	2dfde <write_cb+0x5e>
	data->err = 0U;
   2dfc0:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2dfc2:	2001      	movs	r0, #1
	data->err = 0U;
   2dfc4:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2dfc6:	e008      	b.n	2dfda <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2dfc8:	2302      	movs	r3, #2
   2dfca:	e7eb      	b.n	2dfa4 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2dfcc:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2dfd0:	d305      	bcc.n	2dfde <write_cb+0x5e>
		return -err;
   2dfd2:	4240      	negs	r0, r0
   2dfd4:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2dfd6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2dfd8:	2000      	movs	r0, #0
}
   2dfda:	b002      	add	sp, #8
   2dfdc:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2dfde:	200e      	movs	r0, #14
   2dfe0:	e7f9      	b.n	2dfd6 <write_cb+0x56>

0002dfe2 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2dfe2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2dfe4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2dfe8:	2300      	movs	r3, #0
   2dfea:	461a      	mov	r2, r3
   2dfec:	9300      	str	r3, [sp, #0]
   2dfee:	f7f0 f8e5 	bl	1e1bc <bt_gatt_foreach_attr_type>
				  user_data);
}
   2dff2:	b005      	add	sp, #20
   2dff4:	f85d fb04 	ldr.w	pc, [sp], #4

0002dff8 <att_chan_mtu_updated>:
{
   2dff8:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2dffa:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2dffc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2dffe:	b352      	cbz	r2, 2e056 <att_chan_mtu_updated+0x5e>
	return node->next;
   2e000:	6813      	ldr	r3, [r2, #0]
   2e002:	b103      	cbz	r3, 2e006 <att_chan_mtu_updated+0xe>
   2e004:	3be0      	subs	r3, #224	; 0xe0
   2e006:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   2e00a:	2200      	movs	r2, #0
   2e00c:	4611      	mov	r1, r2
   2e00e:	e000      	b.n	2e012 <att_chan_mtu_updated+0x1a>
   2e010:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   2e012:	4284      	cmp	r4, r0
   2e014:	d007      	beq.n	2e026 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2e016:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2e018:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2e01a:	42b1      	cmp	r1, r6
   2e01c:	bf38      	it	cc
   2e01e:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2e020:	42a2      	cmp	r2, r4
   2e022:	bf38      	it	cc
   2e024:	4622      	movcc	r2, r4
   2e026:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e028:	b12b      	cbz	r3, 2e036 <att_chan_mtu_updated+0x3e>
   2e02a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2e02e:	2b00      	cmp	r3, #0
   2e030:	d1ee      	bne.n	2e010 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2e032:	4284      	cmp	r4, r0
   2e034:	d1ef      	bne.n	2e016 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2e036:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2e038:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2e03a:	428b      	cmp	r3, r1
   2e03c:	d801      	bhi.n	2e042 <att_chan_mtu_updated+0x4a>
   2e03e:	4290      	cmp	r0, r2
   2e040:	d90b      	bls.n	2e05a <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2e042:	4282      	cmp	r2, r0
   2e044:	bf38      	it	cc
   2e046:	4602      	movcc	r2, r0
   2e048:	4299      	cmp	r1, r3
   2e04a:	6828      	ldr	r0, [r5, #0]
   2e04c:	bf38      	it	cc
   2e04e:	4619      	movcc	r1, r3
}
   2e050:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2e052:	f7f0 bcf7 	b.w	1ea44 <bt_gatt_att_max_mtu_changed>
   2e056:	4611      	mov	r1, r2
   2e058:	e7ed      	b.n	2e036 <att_chan_mtu_updated+0x3e>
}
   2e05a:	bc70      	pop	{r4, r5, r6}
   2e05c:	4770      	bx	lr

0002e05e <attr_read_group_cb>:
	if (!data->rsp->len) {
   2e05e:	68d0      	ldr	r0, [r2, #12]
   2e060:	3104      	adds	r1, #4
   2e062:	7803      	ldrb	r3, [r0, #0]
   2e064:	b913      	cbnz	r3, 2e06c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2e066:	7001      	strb	r1, [r0, #0]
	return true;
   2e068:	2001      	movs	r0, #1
   2e06a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2e06c:	428b      	cmp	r3, r1
   2e06e:	d0fb      	beq.n	2e068 <attr_read_group_cb+0xa>
		data->group = NULL;
   2e070:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2e072:	6891      	ldr	r1, [r2, #8]
   2e074:	8a0b      	ldrh	r3, [r1, #16]
   2e076:	3b04      	subs	r3, #4
   2e078:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2e07a:	6110      	str	r0, [r2, #16]
}
   2e07c:	4770      	bx	lr

0002e07e <find_info_cb>:
{
   2e07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2e080:	6893      	ldr	r3, [r2, #8]
{
   2e082:	4605      	mov	r5, r0
   2e084:	460f      	mov	r7, r1
   2e086:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2e088:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2e08a:	b963      	cbnz	r3, 2e0a6 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2e08c:	6850      	ldr	r0, [r2, #4]
   2e08e:	2101      	movs	r1, #1
   2e090:	300c      	adds	r0, #12
   2e092:	f001 fac8 	bl	2f626 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2e096:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2e098:	682b      	ldr	r3, [r5, #0]
   2e09a:	781b      	ldrb	r3, [r3, #0]
   2e09c:	2b00      	cmp	r3, #0
   2e09e:	bf14      	ite	ne
   2e0a0:	2302      	movne	r3, #2
   2e0a2:	2301      	moveq	r3, #1
   2e0a4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2e0a6:	68a3      	ldr	r3, [r4, #8]
   2e0a8:	781b      	ldrb	r3, [r3, #0]
   2e0aa:	2b01      	cmp	r3, #1
   2e0ac:	d003      	beq.n	2e0b6 <find_info_cb+0x38>
   2e0ae:	2b02      	cmp	r3, #2
   2e0b0:	d019      	beq.n	2e0e6 <find_info_cb+0x68>
   2e0b2:	2000      	movs	r0, #0
   2e0b4:	e016      	b.n	2e0e4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2e0b6:	682b      	ldr	r3, [r5, #0]
   2e0b8:	781b      	ldrb	r3, [r3, #0]
   2e0ba:	2b00      	cmp	r3, #0
   2e0bc:	d1f9      	bne.n	2e0b2 <find_info_cb+0x34>
   2e0be:	6860      	ldr	r0, [r4, #4]
   2e0c0:	2104      	movs	r1, #4
   2e0c2:	300c      	adds	r0, #12
   2e0c4:	f001 faaf 	bl	2f626 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2e0c8:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2e0ca:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2e0cc:	682a      	ldr	r2, [r5, #0]
   2e0ce:	68e3      	ldr	r3, [r4, #12]
   2e0d0:	8852      	ldrh	r2, [r2, #2]
   2e0d2:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2e0d4:	6863      	ldr	r3, [r4, #4]
   2e0d6:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2e0d8:	8a1b      	ldrh	r3, [r3, #16]
   2e0da:	1ac0      	subs	r0, r0, r3
   2e0dc:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2e0de:	bf94      	ite	ls
   2e0e0:	2000      	movls	r0, #0
   2e0e2:	2001      	movhi	r0, #1
}
   2e0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2e0e6:	682b      	ldr	r3, [r5, #0]
   2e0e8:	781b      	ldrb	r3, [r3, #0]
   2e0ea:	2b02      	cmp	r3, #2
   2e0ec:	d1e1      	bne.n	2e0b2 <find_info_cb+0x34>
   2e0ee:	6860      	ldr	r0, [r4, #4]
   2e0f0:	2112      	movs	r1, #18
   2e0f2:	300c      	adds	r0, #12
   2e0f4:	f001 fa97 	bl	2f626 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2e0f8:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2e0fa:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e0fc:	682b      	ldr	r3, [r5, #0]
   2e0fe:	68e2      	ldr	r2, [r4, #12]
   2e100:	1c59      	adds	r1, r3, #1
   2e102:	3202      	adds	r2, #2
   2e104:	3311      	adds	r3, #17
   2e106:	f851 0b04 	ldr.w	r0, [r1], #4
   2e10a:	4299      	cmp	r1, r3
   2e10c:	f842 0b04 	str.w	r0, [r2], #4
   2e110:	d1f9      	bne.n	2e106 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2e112:	6863      	ldr	r3, [r4, #4]
   2e114:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2e116:	8a1b      	ldrh	r3, [r3, #16]
   2e118:	1ac0      	subs	r0, r0, r3
   2e11a:	2812      	cmp	r0, #18
   2e11c:	e7df      	b.n	2e0de <find_info_cb+0x60>

0002e11e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2e11e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2e120:	ab0b      	add	r3, sp, #44	; 0x2c
   2e122:	9305      	str	r3, [sp, #20]
   2e124:	9303      	str	r3, [sp, #12]
   2e126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e128:	9302      	str	r3, [sp, #8]
   2e12a:	2300      	movs	r3, #0
   2e12c:	4618      	mov	r0, r3
   2e12e:	e9cd 3300 	strd	r3, r3, [sp]
   2e132:	f7e1 faf3 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2e136:	b007      	add	sp, #28
   2e138:	f85d fb04 	ldr.w	pc, [sp], #4

0002e13c <chan_req_send>:
{
   2e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e13e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2e140:	6888      	ldr	r0, [r1, #8]
   2e142:	f7ff fefd 	bl	2df40 <net_buf_frags_len>
   2e146:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2e148:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2e14a:	4283      	cmp	r3, r0
   2e14c:	d30d      	bcc.n	2e16a <chan_req_send+0x2e>
	req->buf = NULL;
   2e14e:	2600      	movs	r6, #0
	chan->req = req;
   2e150:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   2e154:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2e156:	4628      	mov	r0, r5
	req->buf = NULL;
   2e158:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2e15a:	4639      	mov	r1, r7
   2e15c:	f7ee fec0 	bl	1cee0 <chan_send>
	if (err) {
   2e160:	b110      	cbz	r0, 2e168 <chan_req_send+0x2c>
		req->buf = buf;
   2e162:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2e164:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   2e168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2e16a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2e16e:	e7fb      	b.n	2e168 <chan_req_send+0x2c>

0002e170 <process_queue>:
{
   2e170:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2e172:	2200      	movs	r2, #0
{
   2e174:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2e176:	2300      	movs	r3, #0
   2e178:	4608      	mov	r0, r1
{
   2e17a:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2e17c:	f001 f9f8 	bl	2f570 <net_buf_get>
	if (buf) {
   2e180:	4605      	mov	r5, r0
   2e182:	b158      	cbz	r0, 2e19c <process_queue+0x2c>
	return chan_send(chan, buf);
   2e184:	4601      	mov	r1, r0
   2e186:	4620      	mov	r0, r4
   2e188:	f7ee feaa 	bl	1cee0 <chan_send>
		if (err) {
   2e18c:	4604      	mov	r4, r0
   2e18e:	b118      	cbz	r0, 2e198 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2e190:	4629      	mov	r1, r5
   2e192:	4630      	mov	r0, r6
   2e194:	f002 ffec 	bl	31170 <k_queue_prepend>
}
   2e198:	4620      	mov	r0, r4
   2e19a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2e19c:	f06f 0401 	mvn.w	r4, #1
   2e1a0:	e7fa      	b.n	2e198 <process_queue+0x28>

0002e1a2 <bt_att_chan_send_rsp>:
{
   2e1a2:	b538      	push	{r3, r4, r5, lr}
   2e1a4:	4604      	mov	r4, r0
   2e1a6:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2e1a8:	f7ee fe9a 	bl	1cee0 <chan_send>
	if (err) {
   2e1ac:	b130      	cbz	r0, 2e1bc <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2e1ae:	4629      	mov	r1, r5
   2e1b0:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   2e1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2e1b8:	f001 ba0d 	b.w	2f5d6 <net_buf_put>
}
   2e1bc:	bd38      	pop	{r3, r4, r5, pc}

0002e1be <att_chan_read>:
{
   2e1be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1c2:	4680      	mov	r8, r0
   2e1c4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2e1c6:	4610      	mov	r0, r2
{
   2e1c8:	4699      	mov	r9, r3
   2e1ca:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2e1cc:	f7ff feb8 	bl	2df40 <net_buf_frags_len>
   2e1d0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2e1d4:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2e1d6:	4283      	cmp	r3, r0
   2e1d8:	d97a      	bls.n	2e2d0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2e1da:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2e1de:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2e1e0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2e1e2:	f001 f9fe 	bl	2f5e2 <net_buf_frag_last>
	size_t len, total = 0;
   2e1e6:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2e1ea:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e1ec:	4630      	mov	r0, r6
   2e1ee:	f7ff fea7 	bl	2df40 <net_buf_frags_len>
   2e1f2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2e1f6:	f105 070c 	add.w	r7, r5, #12
   2e1fa:	1a24      	subs	r4, r4, r0
   2e1fc:	4638      	mov	r0, r7
   2e1fe:	f001 fa56 	bl	2f6ae <net_buf_simple_tailroom>
   2e202:	4284      	cmp	r4, r0
   2e204:	d211      	bcs.n	2e22a <att_chan_read+0x6c>
   2e206:	4630      	mov	r0, r6
   2e208:	f7ff fe9a 	bl	2df40 <net_buf_frags_len>
   2e20c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2e210:	1a24      	subs	r4, r4, r0
		if (!len) {
   2e212:	bb34      	cbnz	r4, 2e262 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2e214:	7ab0      	ldrb	r0, [r6, #10]
   2e216:	f7f2 f9f9 	bl	2060c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2e21a:	2200      	movs	r2, #0
   2e21c:	2300      	movs	r3, #0
   2e21e:	f001 f9a2 	bl	2f566 <net_buf_alloc_fixed>
			if (!frag) {
   2e222:	4605      	mov	r5, r0
   2e224:	b930      	cbnz	r0, 2e234 <att_chan_read+0x76>
	return total;
   2e226:	4657      	mov	r7, sl
   2e228:	e02c      	b.n	2e284 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2e22a:	4638      	mov	r0, r7
   2e22c:	f001 fa3f 	bl	2f6ae <net_buf_simple_tailroom>
   2e230:	4604      	mov	r4, r0
   2e232:	e7ee      	b.n	2e212 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2e234:	4601      	mov	r1, r0
   2e236:	4630      	mov	r0, r6
   2e238:	f001 f9e4 	bl	2f604 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2e23c:	4630      	mov	r0, r6
   2e23e:	f7ff fe7f 	bl	2df40 <net_buf_frags_len>
   2e242:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2e246:	f105 070c 	add.w	r7, r5, #12
   2e24a:	1a24      	subs	r4, r4, r0
   2e24c:	4638      	mov	r0, r7
   2e24e:	f001 fa2e 	bl	2f6ae <net_buf_simple_tailroom>
   2e252:	4284      	cmp	r4, r0
   2e254:	d21a      	bcs.n	2e28c <att_chan_read+0xce>
   2e256:	4630      	mov	r0, r6
   2e258:	f7ff fe72 	bl	2df40 <net_buf_frags_len>
   2e25c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2e260:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2e262:	68e9      	ldr	r1, [r5, #12]
   2e264:	8a2a      	ldrh	r2, [r5, #16]
   2e266:	f8cd 9000 	str.w	r9, [sp]
   2e26a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2e26e:	440a      	add	r2, r1
   2e270:	9803      	ldr	r0, [sp, #12]
   2e272:	4659      	mov	r1, fp
   2e274:	b2a3      	uxth	r3, r4
   2e276:	47b8      	blx	r7
		if (read < 0) {
   2e278:	1e07      	subs	r7, r0, #0
   2e27a:	da0c      	bge.n	2e296 <att_chan_read+0xd8>
				return total;
   2e27c:	f1ba 0f00 	cmp.w	sl, #0
   2e280:	bf18      	it	ne
   2e282:	4657      	movne	r7, sl
}
   2e284:	4638      	mov	r0, r7
   2e286:	b005      	add	sp, #20
   2e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e28c:	4638      	mov	r0, r7
   2e28e:	f001 fa0e 	bl	2f6ae <net_buf_simple_tailroom>
   2e292:	4604      	mov	r4, r0
   2e294:	e7e5      	b.n	2e262 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2e296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e298:	b993      	cbnz	r3, 2e2c0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2e29a:	4639      	mov	r1, r7
   2e29c:	f105 000c 	add.w	r0, r5, #12
   2e2a0:	f001 f9c1 	bl	2f626 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e2a4:	4630      	mov	r0, r6
   2e2a6:	f7ff fe4b 	bl	2df40 <net_buf_frags_len>
   2e2aa:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2e2ae:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e2b0:	4283      	cmp	r3, r0
		total += read;
   2e2b2:	44ba      	add	sl, r7
		offset += read;
   2e2b4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2e2b8:	d9b5      	bls.n	2e226 <att_chan_read+0x68>
   2e2ba:	42a7      	cmp	r7, r4
   2e2bc:	d096      	beq.n	2e1ec <att_chan_read+0x2e>
   2e2be:	e7b2      	b.n	2e226 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2e2c0:	4639      	mov	r1, r7
   2e2c2:	4628      	mov	r0, r5
   2e2c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2e2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2e2c8:	4798      	blx	r3
   2e2ca:	2800      	cmp	r0, #0
   2e2cc:	d1e5      	bne.n	2e29a <att_chan_read+0xdc>
   2e2ce:	e7aa      	b.n	2e226 <att_chan_read+0x68>
		return 0;
   2e2d0:	2700      	movs	r7, #0
   2e2d2:	e7d7      	b.n	2e284 <att_chan_read+0xc6>

0002e2d4 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e2d4:	2200      	movs	r2, #0
	return list->head;
   2e2d6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e2d8:	b903      	cbnz	r3, 2e2dc <sys_slist_find_and_remove.isra.0+0x8>
   2e2da:	4770      	bx	lr
   2e2dc:	428b      	cmp	r3, r1
   2e2de:	d10f      	bne.n	2e300 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2e2e0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e2e2:	b93a      	cbnz	r2, 2e2f4 <sys_slist_find_and_remove.isra.0+0x20>
   2e2e4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2e2e6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e2e8:	4291      	cmp	r1, r2
   2e2ea:	d100      	bne.n	2e2ee <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2e2ec:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2e2ee:	2300      	movs	r3, #0
   2e2f0:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e2f2:	4770      	bx	lr
	parent->next = child;
   2e2f4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e2f6:	6843      	ldr	r3, [r0, #4]
   2e2f8:	4299      	cmp	r1, r3
	list->tail = node;
   2e2fa:	bf08      	it	eq
   2e2fc:	6042      	streq	r2, [r0, #4]
}
   2e2fe:	e7f6      	b.n	2e2ee <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2e300:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e302:	681b      	ldr	r3, [r3, #0]
   2e304:	e7e8      	b.n	2e2d8 <sys_slist_find_and_remove.isra.0+0x4>

0002e306 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2e306:	2006      	movs	r0, #6
   2e308:	4770      	bx	lr

0002e30a <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e30a:	2301      	movs	r3, #1
{
   2e30c:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2e30e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e312:	e8d0 3fef 	ldaex	r3, [r0]
   2e316:	ea43 0201 	orr.w	r2, r3, r1
   2e31a:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2e31e:	2c00      	cmp	r4, #0
   2e320:	d1f7      	bne.n	2e312 <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2e322:	4219      	tst	r1, r3
}
   2e324:	bf14      	ite	ne
   2e326:	2001      	movne	r0, #1
   2e328:	2000      	moveq	r0, #0
   2e32a:	bd10      	pop	{r4, pc}

0002e32c <read_cb>:
{
   2e32c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2e32e:	2300      	movs	r3, #0
{
   2e330:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2e332:	6816      	ldr	r6, [r2, #0]
{
   2e334:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2e336:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e338:	4629      	mov	r1, r5
	data->err = 0x00;
   2e33a:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e33c:	2295      	movs	r2, #149	; 0x95
   2e33e:	f000 fc61 	bl	2ec04 <bt_gatt_check_perm>
   2e342:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e344:	b980      	cbnz	r0, 2e368 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e346:	e9cd 0000 	strd	r0, r0, [sp]
   2e34a:	4629      	mov	r1, r5
   2e34c:	4630      	mov	r0, r6
   2e34e:	88a3      	ldrh	r3, [r4, #4]
   2e350:	68a2      	ldr	r2, [r4, #8]
   2e352:	f7ff ff34 	bl	2e1be <att_chan_read>
	if (ret < 0) {
   2e356:	2800      	cmp	r0, #0
   2e358:	da09      	bge.n	2e36e <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2e35a:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2e35e:	bf32      	itee	cc
   2e360:	200e      	movcc	r0, #14
		return -err;
   2e362:	4240      	negcs	r0, r0
   2e364:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2e366:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e368:	2000      	movs	r0, #0
}
   2e36a:	b002      	add	sp, #8
   2e36c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2e36e:	2001      	movs	r0, #1
   2e370:	e7fb      	b.n	2e36a <read_cb+0x3e>

0002e372 <read_vl_cb>:
{
   2e372:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2e376:	2300      	movs	r3, #0
{
   2e378:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2e37a:	f8d2 8000 	ldr.w	r8, [r2]
{
   2e37e:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2e380:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e384:	4631      	mov	r1, r6
	data->err = 0x00;
   2e386:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2e388:	2295      	movs	r2, #149	; 0x95
   2e38a:	f000 fc3b 	bl	2ec04 <bt_gatt_check_perm>
   2e38e:	4605      	mov	r5, r0
   2e390:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2e392:	b9e0      	cbnz	r0, 2e3ce <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2e394:	68a0      	ldr	r0, [r4, #8]
   2e396:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2e39a:	8a02      	ldrh	r2, [r0, #16]
   2e39c:	1a9b      	subs	r3, r3, r2
   2e39e:	2b01      	cmp	r3, #1
   2e3a0:	dd15      	ble.n	2e3ce <read_vl_cb+0x5c>
   2e3a2:	2102      	movs	r1, #2
   2e3a4:	300c      	adds	r0, #12
   2e3a6:	f001 f93e 	bl	2f626 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2e3aa:	e9cd 5500 	strd	r5, r5, [sp]
   2e3ae:	4607      	mov	r7, r0
   2e3b0:	88a3      	ldrh	r3, [r4, #4]
   2e3b2:	4631      	mov	r1, r6
   2e3b4:	4640      	mov	r0, r8
   2e3b6:	68a2      	ldr	r2, [r4, #8]
   2e3b8:	f7ff ff01 	bl	2e1be <att_chan_read>
	if (read < 0) {
   2e3bc:	1e03      	subs	r3, r0, #0
   2e3be:	da0a      	bge.n	2e3d6 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2e3c0:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2e3c4:	bf32      	itee	cc
   2e3c6:	230e      	movcc	r3, #14
		return -err;
   2e3c8:	425b      	negcs	r3, r3
   2e3ca:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2e3cc:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2e3ce:	2000      	movs	r0, #0
}
   2e3d0:	b002      	add	sp, #8
   2e3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2e3d6:	2001      	movs	r0, #1
	rsp->len = read;
   2e3d8:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2e3da:	e7f9      	b.n	2e3d0 <read_vl_cb+0x5e>

0002e3dc <bt_att_sent>:
{
   2e3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e3de:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2e3e0:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2e3e4:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e3e6:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2e3ea:	e8d3 1fef 	ldaex	r1, [r3]
   2e3ee:	f021 0110 	bic.w	r1, r1, #16
   2e3f2:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e3f6:	2a00      	cmp	r2, #0
   2e3f8:	d1f7      	bne.n	2e3ea <bt_att_sent+0xe>
	if (!att) {
   2e3fa:	b30c      	cbz	r4, 2e440 <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2e3fc:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2e400:	b98b      	cbnz	r3, 2e426 <bt_att_sent+0x4a>
   2e402:	6863      	ldr	r3, [r4, #4]
   2e404:	b17b      	cbz	r3, 2e426 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e406:	1d20      	adds	r0, r4, #4
   2e408:	f7ff fd90 	bl	2df2c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e40c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2e40e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e410:	4638      	mov	r0, r7
   2e412:	f7ff fe93 	bl	2e13c <chan_req_send>
   2e416:	2800      	cmp	r0, #0
   2e418:	da12      	bge.n	2e440 <bt_att_sent+0x64>
	return list->head;
   2e41a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2e41c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e41e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2e420:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e422:	b903      	cbnz	r3, 2e426 <bt_att_sent+0x4a>
	list->tail = node;
   2e424:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2e426:	4638      	mov	r0, r7
   2e428:	f105 0194 	add.w	r1, r5, #148	; 0x94
   2e42c:	f7ff fea0 	bl	2e170 <process_queue>
	if (!err) {
   2e430:	b130      	cbz	r0, 2e440 <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2e432:	4638      	mov	r0, r7
   2e434:	f104 010c 	add.w	r1, r4, #12
}
   2e438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2e43c:	f7ff be98 	b.w	2e170 <process_queue>
}
   2e440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e442 <att_req_send_process>:
{
   2e442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2e446:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2e448:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e44a:	2c00      	cmp	r4, #0
   2e44c:	d03b      	beq.n	2e4c6 <att_req_send_process+0x84>
	return node->next;
   2e44e:	f854 69e0 	ldr.w	r6, [r4], #-224
   2e452:	b106      	cbz	r6, 2e456 <att_req_send_process+0x14>
   2e454:	3ee0      	subs	r6, #224	; 0xe0
{
   2e456:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2e458:	f108 0704 	add.w	r7, r8, #4
{
   2e45c:	461d      	mov	r5, r3
   2e45e:	e013      	b.n	2e488 <att_req_send_process+0x46>
		if (!req && prev &&
   2e460:	b1c3      	cbz	r3, 2e494 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2e462:	2103      	movs	r1, #3
   2e464:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e468:	f7ff fd84 	bl	2df74 <atomic_test_bit>
   2e46c:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2e46e:	f103 0090 	add.w	r0, r3, #144	; 0x90
   2e472:	f7ff fd7f 	bl	2df74 <atomic_test_bit>
		if (!req && prev &&
   2e476:	4282      	cmp	r2, r0
   2e478:	d10c      	bne.n	2e494 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e47a:	b326      	cbz	r6, 2e4c6 <att_req_send_process+0x84>
   2e47c:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   2e480:	b102      	cbz	r2, 2e484 <att_req_send_process+0x42>
   2e482:	3ae0      	subs	r2, #224	; 0xe0
{
   2e484:	4634      	mov	r4, r6
   2e486:	4616      	mov	r6, r2
		if (chan->req) {
   2e488:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2e48c:	2a00      	cmp	r2, #0
   2e48e:	d1f4      	bne.n	2e47a <att_req_send_process+0x38>
		if (!req && prev &&
   2e490:	2d00      	cmp	r5, #0
   2e492:	d0e5      	beq.n	2e460 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2e494:	4638      	mov	r0, r7
   2e496:	f7ff fd49 	bl	2df2c <sys_slist_get>
	if (node) {
   2e49a:	4605      	mov	r5, r0
   2e49c:	b908      	cbnz	r0, 2e4a2 <att_req_send_process+0x60>
   2e49e:	4623      	mov	r3, r4
   2e4a0:	e7eb      	b.n	2e47a <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   2e4a2:	4601      	mov	r1, r0
   2e4a4:	4620      	mov	r0, r4
   2e4a6:	f7ff fe49 	bl	2e13c <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2e4aa:	2800      	cmp	r0, #0
   2e4ac:	da0b      	bge.n	2e4c6 <att_req_send_process+0x84>
	return list->head;
   2e4ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2e4b2:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e4b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2e4b8:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e4bc:	2b00      	cmp	r3, #0
   2e4be:	d1ee      	bne.n	2e49e <att_req_send_process+0x5c>
	list->tail = node;
   2e4c0:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2e4c4:	e7eb      	b.n	2e49e <att_req_send_process+0x5c>
}
   2e4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e4ca <bt_att_status>:
{
   2e4ca:	b538      	push	{r3, r4, r5, lr}
   2e4cc:	4605      	mov	r5, r0
   2e4ce:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2e4d0:	2100      	movs	r1, #0
   2e4d2:	f7ff fd4f 	bl	2df74 <atomic_test_bit>
   2e4d6:	b1c0      	cbz	r0, 2e50a <bt_att_status+0x40>
	if (!chan->att) {
   2e4d8:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2e4dc:	b1a8      	cbz	r0, 2e50a <bt_att_status+0x40>
	if (chan->req) {
   2e4de:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2e4e2:	b993      	cbnz	r3, 2e50a <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2e4e4:	3004      	adds	r0, #4
   2e4e6:	f7ff fd21 	bl	2df2c <sys_slist_get>
	if (!node) {
   2e4ea:	4604      	mov	r4, r0
   2e4ec:	b168      	cbz	r0, 2e50a <bt_att_status+0x40>
	return chan_req_send(chan, req);
   2e4ee:	4601      	mov	r1, r0
   2e4f0:	1f28      	subs	r0, r5, #4
   2e4f2:	f7ff fe23 	bl	2e13c <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2e4f6:	2800      	cmp	r0, #0
   2e4f8:	da07      	bge.n	2e50a <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2e4fa:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2e4fe:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2e500:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2e502:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2e504:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2e506:	b902      	cbnz	r2, 2e50a <bt_att_status+0x40>
	list->tail = node;
   2e508:	609c      	str	r4, [r3, #8]
}
   2e50a:	bd38      	pop	{r3, r4, r5, pc}

0002e50c <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2e50c:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2e50e:	6883      	ldr	r3, [r0, #8]
   2e510:	699b      	ldr	r3, [r3, #24]
   2e512:	b10b      	cbz	r3, 2e518 <att_sent+0xc>
		chan->ops->sent(chan);
   2e514:	3004      	adds	r0, #4
   2e516:	4718      	bx	r3
}
   2e518:	4770      	bx	lr

0002e51a <att_unknown>:
{
   2e51a:	b510      	push	{r4, lr}
   2e51c:	460c      	mov	r4, r1
	if (!err) {
   2e51e:	b90a      	cbnz	r2, 2e524 <att_unknown+0xa>
		att_sent(conn, user_data);
   2e520:	f7ff fff4 	bl	2e50c <att_sent>
	tx_meta_data_free(user_data);
   2e524:	4620      	mov	r0, r4
}
   2e526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2e52a:	f7ee bc1f 	b.w	1cd6c <tx_meta_data_free>

0002e52e <att_tx_complete>:
{
   2e52e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e532:	4606      	mov	r6, r0
   2e534:	460d      	mov	r5, r1
	if (!err) {
   2e536:	4614      	mov	r4, r2
   2e538:	b122      	cbz	r2, 2e544 <att_tx_complete+0x16>
}
   2e53a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2e53e:	4608      	mov	r0, r1
   2e540:	f7ee bc14 	b.w	1cd6c <tx_meta_data_free>
		att_sent(conn, user_data);
   2e544:	f7ff ffe2 	bl	2e50c <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2e548:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2e54a:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2e54c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2e550:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2e554:	f7ee fc0a 	bl	1cd6c <tx_meta_data_free>
	if (!err && func) {
   2e558:	b92f      	cbnz	r7, 2e566 <att_tx_complete+0x38>
}
   2e55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2e55e:	4649      	mov	r1, r9
   2e560:	4630      	mov	r0, r6
   2e562:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2e564:	3401      	adds	r4, #1
   2e566:	b2a3      	uxth	r3, r4
   2e568:	4543      	cmp	r3, r8
   2e56a:	d3f8      	bcc.n	2e55e <att_tx_complete+0x30>
   2e56c:	e7f5      	b.n	2e55a <att_tx_complete+0x2c>

0002e56e <att_req_sent>:
{
   2e56e:	b510      	push	{r4, lr}
   2e570:	460c      	mov	r4, r1
	if (!err) {
   2e572:	b90a      	cbnz	r2, 2e578 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2e574:	f7ff ffca 	bl	2e50c <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2e578:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2e57a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   2e57e:	b12b      	cbz	r3, 2e58c <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2e580:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2e584:	2300      	movs	r3, #0
   2e586:	30b0      	adds	r0, #176	; 0xb0
   2e588:	f7f7 fdfa 	bl	26180 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2e58c:	4620      	mov	r0, r4
}
   2e58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2e592:	f7ee bbeb 	b.w	1cd6c <tx_meta_data_free>

0002e596 <att_cfm_sent>:
{
   2e596:	b510      	push	{r4, lr}
   2e598:	460c      	mov	r4, r1
	if (!err) {
   2e59a:	b90a      	cbnz	r2, 2e5a0 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2e59c:	f7ff ffb6 	bl	2e50c <att_sent>
   2e5a0:	6823      	ldr	r3, [r4, #0]
   2e5a2:	3390      	adds	r3, #144	; 0x90
   2e5a4:	e8d3 1fef 	ldaex	r1, [r3]
   2e5a8:	f021 0102 	bic.w	r1, r1, #2
   2e5ac:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e5b0:	2a00      	cmp	r2, #0
   2e5b2:	d1f7      	bne.n	2e5a4 <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2e5b4:	4620      	mov	r0, r4
}
   2e5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2e5ba:	f7ee bbd7 	b.w	1cd6c <tx_meta_data_free>

0002e5be <att_rsp_sent>:
{
   2e5be:	b510      	push	{r4, lr}
   2e5c0:	460c      	mov	r4, r1
	if (!err) {
   2e5c2:	b90a      	cbnz	r2, 2e5c8 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2e5c4:	f7ff ffa2 	bl	2e50c <att_sent>
   2e5c8:	6823      	ldr	r3, [r4, #0]
   2e5ca:	3390      	adds	r3, #144	; 0x90
   2e5cc:	e8d3 1fef 	ldaex	r1, [r3]
   2e5d0:	f021 0101 	bic.w	r1, r1, #1
   2e5d4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2e5d8:	2a00      	cmp	r2, #0
   2e5da:	d1f7      	bne.n	2e5cc <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2e5dc:	4620      	mov	r0, r4
}
   2e5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2e5e2:	f7ee bbc3 	b.w	1cd6c <tx_meta_data_free>

0002e5e6 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e5ea:	4688      	mov	r8, r1
   2e5ec:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e5ee:	2101      	movs	r1, #1
   2e5f0:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2e5f2:	4605      	mov	r5, r0
   2e5f4:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2e5f6:	f7ee fe35 	bl	1d264 <bt_att_chan_create_pdu>
	if (!buf) {
   2e5fa:	4604      	mov	r4, r0
   2e5fc:	b170      	cbz	r0, 2e61c <send_err_rsp.part.0+0x36>
   2e5fe:	2104      	movs	r1, #4
   2e600:	300c      	adds	r0, #12
   2e602:	f001 f810 	bl	2f626 <net_buf_simple_add>
	rsp->request = req;
   2e606:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2e60a:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2e60e:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2e610:	4621      	mov	r1, r4
   2e612:	4628      	mov	r0, r5
}
   2e614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2e618:	f7ff bdc3 	b.w	2e1a2 <bt_att_chan_send_rsp>
}
   2e61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002e620 <att_write_req>:
{
   2e620:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e622:	460c      	mov	r4, r1
   2e624:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2e626:	f101 000c 	add.w	r0, r1, #12
   2e62a:	f001 f834 	bl	2f696 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2e62e:	8a22      	ldrh	r2, [r4, #16]
   2e630:	4603      	mov	r3, r0
   2e632:	9201      	str	r2, [sp, #4]
   2e634:	68e2      	ldr	r2, [r4, #12]
   2e636:	2112      	movs	r1, #18
   2e638:	9200      	str	r2, [sp, #0]
   2e63a:	4628      	mov	r0, r5
   2e63c:	2213      	movs	r2, #19
   2e63e:	f7ee ff09 	bl	1d454 <att_write_rsp.constprop.0>
}
   2e642:	b003      	add	sp, #12
   2e644:	bd30      	pop	{r4, r5, pc}

0002e646 <att_write_cmd>:
{
   2e646:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e648:	460c      	mov	r4, r1
   2e64a:	4605      	mov	r5, r0
   2e64c:	f101 000c 	add.w	r0, r1, #12
   2e650:	f001 f821 	bl	2f696 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2e654:	8a22      	ldrh	r2, [r4, #16]
   2e656:	4603      	mov	r3, r0
   2e658:	9201      	str	r2, [sp, #4]
   2e65a:	68e2      	ldr	r2, [r4, #12]
   2e65c:	4628      	mov	r0, r5
   2e65e:	9200      	str	r2, [sp, #0]
   2e660:	2200      	movs	r2, #0
   2e662:	4611      	mov	r1, r2
   2e664:	f7ee fef6 	bl	1d454 <att_write_rsp.constprop.0>
}
   2e668:	b003      	add	sp, #12
   2e66a:	bd30      	pop	{r4, r5, pc}

0002e66c <att_read_blob_req>:
{
   2e66c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2e66e:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2e670:	210c      	movs	r1, #12
   2e672:	8813      	ldrh	r3, [r2, #0]
   2e674:	8852      	ldrh	r2, [r2, #2]
   2e676:	9200      	str	r2, [sp, #0]
   2e678:	220d      	movs	r2, #13
   2e67a:	f7ef f8ad 	bl	1d7d8 <att_read_rsp>
}
   2e67e:	b003      	add	sp, #12
   2e680:	f85d fb04 	ldr.w	pc, [sp], #4

0002e684 <att_read_req>:
{
   2e684:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e686:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2e688:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2e68a:	210a      	movs	r1, #10
   2e68c:	881b      	ldrh	r3, [r3, #0]
   2e68e:	9200      	str	r2, [sp, #0]
   2e690:	220b      	movs	r2, #11
   2e692:	f7ef f8a1 	bl	1d7d8 <att_read_rsp>
}
   2e696:	b003      	add	sp, #12
   2e698:	f85d fb04 	ldr.w	pc, [sp], #4

0002e69c <att_mtu_req>:
{
   2e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e69e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2e6a0:	f850 2b90 	ldr.w	r2, [r0], #144
{
   2e6a4:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e6a6:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2e6a8:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2e6aa:	f7ff fc63 	bl	2df74 <atomic_test_bit>
   2e6ae:	4604      	mov	r4, r0
   2e6b0:	b9f0      	cbnz	r0, 2e6f0 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2e6b2:	68db      	ldr	r3, [r3, #12]
   2e6b4:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2e6b6:	2e16      	cmp	r6, #22
   2e6b8:	d91c      	bls.n	2e6f4 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2e6ba:	4638      	mov	r0, r7
   2e6bc:	2202      	movs	r2, #2
   2e6be:	f7ee ff2d 	bl	1d51c <bt_att_create_pdu>
	if (!pdu) {
   2e6c2:	4607      	mov	r7, r0
   2e6c4:	b1c0      	cbz	r0, 2e6f8 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2e6c6:	2102      	movs	r1, #2
   2e6c8:	300c      	adds	r0, #12
   2e6ca:	f000 ffac 	bl	2f626 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e6ce:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2e6d0:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2e6d2:	7003      	strb	r3, [r0, #0]
   2e6d4:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2e6d6:	4628      	mov	r0, r5
   2e6d8:	f7ff fd63 	bl	2e1a2 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e6dc:	2e41      	cmp	r6, #65	; 0x41
   2e6de:	bf28      	it	cs
   2e6e0:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2e6e2:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2e6e4:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2e6e6:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2e6e8:	f7ff fc86 	bl	2dff8 <att_chan_mtu_updated>
	return 0;
   2e6ec:	4620      	mov	r0, r4
}
   2e6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2e6f0:	2006      	movs	r0, #6
   2e6f2:	e7fc      	b.n	2e6ee <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2e6f4:	2004      	movs	r0, #4
   2e6f6:	e7fa      	b.n	2e6ee <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2e6f8:	200e      	movs	r0, #14
   2e6fa:	e7f8      	b.n	2e6ee <att_mtu_req+0x52>

0002e6fc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2e6fc:	8a0a      	ldrh	r2, [r1, #16]
   2e6fe:	2300      	movs	r3, #0
   2e700:	68c9      	ldr	r1, [r1, #12]
   2e702:	f7ef ba13 	b.w	1db2c <att_handle_rsp>

0002e706 <bt_att_encrypt_change>:
{
   2e706:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2e708:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2e70a:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2e70e:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2e710:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2e714:	2b00      	cmp	r3, #0
   2e716:	d038      	beq.n	2e78a <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2e718:	b141      	cbz	r1, 2e72c <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2e71a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   2e71e:	2b00      	cmp	r3, #0
   2e720:	d033      	beq.n	2e78a <bt_att_encrypt_change+0x84>
   2e722:	7c1b      	ldrb	r3, [r3, #16]
   2e724:	07da      	lsls	r2, r3, #31
   2e726:	d530      	bpl.n	2e78a <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2e728:	2305      	movs	r3, #5
   2e72a:	e021      	b.n	2e770 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2e72c:	4628      	mov	r0, r5
   2e72e:	f7f0 f99d 	bl	1ea6c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2e732:	7a6b      	ldrb	r3, [r5, #9]
   2e734:	2b01      	cmp	r3, #1
   2e736:	d028      	beq.n	2e78a <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2e738:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
   2e73c:	b32d      	cbz	r5, 2e78a <bt_att_encrypt_change+0x84>
   2e73e:	7c2b      	ldrb	r3, [r5, #16]
   2e740:	07db      	lsls	r3, r3, #31
   2e742:	d522      	bpl.n	2e78a <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2e744:	68eb      	ldr	r3, [r5, #12]
   2e746:	2b00      	cmp	r3, #0
   2e748:	d0ee      	beq.n	2e728 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2e74a:	4630      	mov	r0, r6
   2e74c:	696a      	ldr	r2, [r5, #20]
   2e74e:	7c69      	ldrb	r1, [r5, #17]
   2e750:	f7ee fd88 	bl	1d264 <bt_att_chan_create_pdu>
	if (!buf) {
   2e754:	4604      	mov	r4, r0
   2e756:	b150      	cbz	r0, 2e76e <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2e758:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2e75c:	68eb      	ldr	r3, [r5, #12]
   2e75e:	4798      	blx	r3
   2e760:	b168      	cbz	r0, 2e77e <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e762:	69a0      	ldr	r0, [r4, #24]
   2e764:	f7ee fb02 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(buf);
   2e768:	4620      	mov	r0, r4
   2e76a:	f7f2 f811 	bl	20790 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2e76e:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2e770:	2200      	movs	r2, #0
   2e772:	4630      	mov	r0, r6
}
   2e774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2e778:	4611      	mov	r1, r2
   2e77a:	f7ef b9d7 	b.w	1db2c <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2e77e:	4621      	mov	r1, r4
   2e780:	4630      	mov	r0, r6
   2e782:	f7ee fbad 	bl	1cee0 <chan_send>
   2e786:	2800      	cmp	r0, #0
   2e788:	d1eb      	bne.n	2e762 <bt_att_encrypt_change+0x5c>
}
   2e78a:	bd70      	pop	{r4, r5, r6, pc}

0002e78c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e78e:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2e790:	f7ee fc04 	bl	1cf9c <att_get>
	if (!att) {
   2e794:	4604      	mov	r4, r0
   2e796:	b940      	cbnz	r0, 2e7aa <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2e798:	69a8      	ldr	r0, [r5, #24]
   2e79a:	f7ee fae7 	bl	1cd6c <tx_meta_data_free>
		net_buf_unref(buf);
   2e79e:	4628      	mov	r0, r5
   2e7a0:	f7f1 fff6 	bl	20790 <net_buf_unref>
		return -ENOTCONN;
   2e7a4:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2e7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2e7aa:	f100 060c 	add.w	r6, r0, #12
   2e7ae:	4629      	mov	r1, r5
   2e7b0:	4630      	mov	r0, r6
   2e7b2:	f000 ff10 	bl	2f5d6 <net_buf_put>
	return list->head;
   2e7b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e7b8:	b14d      	cbz	r5, 2e7ce <bt_att_send+0x42>
	return node->next;
   2e7ba:	f855 49e0 	ldr.w	r4, [r5], #-224
   2e7be:	b104      	cbz	r4, 2e7c2 <bt_att_send+0x36>
   2e7c0:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   2e7c2:	4631      	mov	r1, r6
   2e7c4:	4628      	mov	r0, r5
   2e7c6:	f7ff fcd3 	bl	2e170 <process_queue>
		if (!err) {
   2e7ca:	4603      	mov	r3, r0
   2e7cc:	b980      	cbnz	r0, 2e7f0 <bt_att_send+0x64>
	return 0;
   2e7ce:	2000      	movs	r0, #0
   2e7d0:	e7ea      	b.n	2e7a8 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2e7d2:	2103      	movs	r1, #3
   2e7d4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2e7d8:	f7ff fbcc 	bl	2df74 <atomic_test_bit>
   2e7dc:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2e7de:	f105 0090 	add.w	r0, r5, #144	; 0x90
   2e7e2:	f7ff fbc7 	bl	2df74 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   2e7e6:	4287      	cmp	r7, r0
   2e7e8:	f06f 0301 	mvn.w	r3, #1
   2e7ec:	d107      	bne.n	2e7fe <bt_att_send+0x72>
   2e7ee:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e7f0:	2c00      	cmp	r4, #0
   2e7f2:	d0ec      	beq.n	2e7ce <bt_att_send+0x42>
   2e7f4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   2e7f8:	b922      	cbnz	r2, 2e804 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   2e7fa:	3302      	adds	r3, #2
   2e7fc:	d0e9      	beq.n	2e7d2 <bt_att_send+0x46>
{
   2e7fe:	4625      	mov	r5, r4
   2e800:	4614      	mov	r4, r2
   2e802:	e7de      	b.n	2e7c2 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2e804:	3ae0      	subs	r2, #224	; 0xe0
   2e806:	e7f8      	b.n	2e7fa <bt_att_send+0x6e>

0002e808 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2e808:	b510      	push	{r4, lr}
   2e80a:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2e80c:	f7ee fbc6 	bl	1cf9c <att_get>
	if (!att) {
   2e810:	b160      	cbz	r0, 2e82c <bt_att_req_send+0x24>
	parent->next = child;
   2e812:	2300      	movs	r3, #0
   2e814:	6023      	str	r3, [r4, #0]
	return list->tail;
   2e816:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2e818:	b92b      	cbnz	r3, 2e826 <bt_att_req_send+0x1e>
	list->head = node;
   2e81a:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   2e81e:	f7ff fe10 	bl	2e442 <att_req_send_process>

	return 0;
   2e822:	2000      	movs	r0, #0
}
   2e824:	bd10      	pop	{r4, pc}
	parent->next = child;
   2e826:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e828:	6084      	str	r4, [r0, #8]
}
   2e82a:	e7f8      	b.n	2e81e <bt_att_req_send+0x16>
		return -ENOTCONN;
   2e82c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e830:	e7f8      	b.n	2e824 <bt_att_req_send+0x1c>

0002e832 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2e832:	2001      	movs	r0, #1
   2e834:	4770      	bx	lr

0002e836 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2e836:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2e838:	f7ee fbb0 	bl	1cf9c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2e83c:	b178      	cbz	r0, 2e85e <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2e83e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2e840:	b16b      	cbz	r3, 2e85e <bt_att_clear_out_of_sync_sent+0x28>
   2e842:	3be0      	subs	r3, #224	; 0xe0
   2e844:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2e848:	e8d2 0fef 	ldaex	r0, [r2]
   2e84c:	f020 0020 	bic.w	r0, r0, #32
   2e850:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2e854:	2900      	cmp	r1, #0
   2e856:	d1f7      	bne.n	2e848 <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2e858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2e85c:	e7f0      	b.n	2e840 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2e85e:	bd08      	pop	{r3, pc}

0002e860 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2e860:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2e862:	2104      	movs	r1, #4
   2e864:	f7ff fb58 	bl	2df18 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2e868:	b128      	cbz	r0, 2e876 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2e86a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2e86e:	2105      	movs	r1, #5
   2e870:	308c      	adds	r0, #140	; 0x8c
   2e872:	f7ff bb7f 	b.w	2df74 <atomic_test_bit>
}
   2e876:	bd08      	pop	{r3, pc}

0002e878 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2e878:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2e87a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2e87e:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2e880:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2e882:	8082      	strh	r2, [r0, #4]
}
   2e884:	4770      	bx	lr

0002e886 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2e886:	6010      	str	r0, [r2, #0]
}
   2e888:	2000      	movs	r0, #0
   2e88a:	4770      	bx	lr

0002e88c <gatt_ccc_changed>:
{
   2e88c:	460b      	mov	r3, r1
   2e88e:	8909      	ldrh	r1, [r1, #8]
   2e890:	8a5a      	ldrh	r2, [r3, #18]
   2e892:	4291      	cmp	r1, r2
   2e894:	bf38      	it	cc
   2e896:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2e898:	8a9a      	ldrh	r2, [r3, #20]
   2e89a:	428a      	cmp	r2, r1
   2e89c:	d003      	beq.n	2e8a6 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2e89e:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   2e8a0:	699b      	ldr	r3, [r3, #24]
   2e8a2:	b103      	cbz	r3, 2e8a6 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2e8a4:	4718      	bx	r3
}
   2e8a6:	4770      	bx	lr

0002e8a8 <gatt_indicate_rsp>:
{
   2e8a8:	b510      	push	{r4, lr}
   2e8aa:	9c02      	ldr	r4, [sp, #8]
   2e8ac:	460a      	mov	r2, r1
	if (params->func) {
   2e8ae:	68a3      	ldr	r3, [r4, #8]
   2e8b0:	b10b      	cbz	r3, 2e8b6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2e8b2:	4621      	mov	r1, r4
   2e8b4:	4798      	blx	r3
	params->_ref--;
   2e8b6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e8b8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2e8ba:	3b01      	subs	r3, #1
   2e8bc:	b2db      	uxtb	r3, r3
   2e8be:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2e8c0:	b122      	cbz	r2, 2e8cc <gatt_indicate_rsp+0x24>
   2e8c2:	b91b      	cbnz	r3, 2e8cc <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2e8c4:	4620      	mov	r0, r4
}
   2e8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2e8ca:	4710      	bx	r2
}
   2e8cc:	bd10      	pop	{r4, pc}

0002e8ce <match_uuid>:
	data->attr = attr;
   2e8ce:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2e8d0:	8091      	strh	r1, [r2, #4]
}
   2e8d2:	2000      	movs	r0, #0
   2e8d4:	4770      	bx	lr

0002e8d6 <gen_hash_m>:
{
   2e8d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e8d8:	6807      	ldr	r7, [r0, #0]
{
   2e8da:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e8dc:	783d      	ldrb	r5, [r7, #0]
{
   2e8de:	4614      	mov	r4, r2
   2e8e0:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2e8e2:	b9dd      	cbnz	r5, 2e91c <gen_hash_m+0x46>
	switch (u16->val) {
   2e8e4:	887b      	ldrh	r3, [r7, #2]
   2e8e6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2e8ea:	d004      	beq.n	2e8f6 <gen_hash_m+0x20>
   2e8ec:	d810      	bhi.n	2e910 <gen_hash_m+0x3a>
   2e8ee:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2e8f2:	2b03      	cmp	r3, #3
   2e8f4:	d812      	bhi.n	2e91c <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2e8f6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e8fa:	2202      	movs	r2, #2
   2e8fc:	4620      	mov	r0, r4
   2e8fe:	f10d 010a 	add.w	r1, sp, #10
   2e902:	f7fc fe08 	bl	2b516 <tc_cmac_update>
   2e906:	b968      	cbnz	r0, 2e924 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2e908:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2e90c:	65a2      	str	r2, [r4, #88]	; 0x58
   2e90e:	e006      	b.n	2e91e <gen_hash_m+0x48>
	switch (u16->val) {
   2e910:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2e914:	33ff      	adds	r3, #255	; 0xff
   2e916:	b29b      	uxth	r3, r3
   2e918:	2b04      	cmp	r3, #4
   2e91a:	d91e      	bls.n	2e95a <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2e91c:	2501      	movs	r5, #1
}
   2e91e:	4628      	mov	r0, r5
   2e920:	b009      	add	sp, #36	; 0x24
   2e922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2e924:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e926:	2202      	movs	r2, #2
   2e928:	4620      	mov	r0, r4
   2e92a:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2e92e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e932:	f7fc fdf0 	bl	2b516 <tc_cmac_update>
   2e936:	2800      	cmp	r0, #0
   2e938:	d0e6      	beq.n	2e908 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2e93a:	2000      	movs	r0, #0
   2e93c:	9000      	str	r0, [sp, #0]
   2e93e:	aa03      	add	r2, sp, #12
   2e940:	2313      	movs	r3, #19
   2e942:	4631      	mov	r1, r6
   2e944:	6877      	ldr	r7, [r6, #4]
   2e946:	47b8      	blx	r7
		if (len < 0) {
   2e948:	1e02      	subs	r2, r0, #0
   2e94a:	dbdf      	blt.n	2e90c <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2e94c:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e94e:	4620      	mov	r0, r4
   2e950:	f7fc fde1 	bl	2b516 <tc_cmac_update>
   2e954:	2800      	cmp	r0, #0
   2e956:	d1e1      	bne.n	2e91c <gen_hash_m+0x46>
   2e958:	e7d6      	b.n	2e908 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2e95a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e95e:	2202      	movs	r2, #2
   2e960:	4620      	mov	r0, r4
   2e962:	f10d 010a 	add.w	r1, sp, #10
   2e966:	f7fc fdd6 	bl	2b516 <tc_cmac_update>
   2e96a:	2800      	cmp	r0, #0
   2e96c:	d0cc      	beq.n	2e908 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2e96e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e970:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2e972:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2e976:	f10d 010a 	add.w	r1, sp, #10
   2e97a:	e7e8      	b.n	2e94e <gen_hash_m+0x78>

0002e97c <bt_addr_le_eq>:
   2e97c:	2207      	movs	r2, #7
{
   2e97e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2e980:	f003 f83f 	bl	31a02 <memcmp>
}
   2e984:	fab0 f080 	clz	r0, r0
   2e988:	0940      	lsrs	r0, r0, #5
   2e98a:	bd08      	pop	{r3, pc}

0002e98c <bt_addr_le_copy>:
   2e98c:	680b      	ldr	r3, [r1, #0]
   2e98e:	6003      	str	r3, [r0, #0]
   2e990:	888b      	ldrh	r3, [r1, #4]
   2e992:	8083      	strh	r3, [r0, #4]
   2e994:	798b      	ldrb	r3, [r1, #6]
   2e996:	7183      	strb	r3, [r0, #6]
}
   2e998:	4770      	bx	lr

0002e99a <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2e99a:	2300      	movs	r3, #0
   2e99c:	6003      	str	r3, [r0, #0]
   2e99e:	6043      	str	r3, [r0, #4]
   2e9a0:	6083      	str	r3, [r0, #8]
}
   2e9a2:	4770      	bx	lr

0002e9a4 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2e9a4:	b538      	push	{r3, r4, r5, lr}
   2e9a6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2e9aa:	4615      	mov	r5, r2
	if (offset > value_len) {
   2e9ac:	4294      	cmp	r4, r2
   2e9ae:	d30a      	bcc.n	2e9c6 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2e9b0:	1aa4      	subs	r4, r4, r2
   2e9b2:	428c      	cmp	r4, r1
   2e9b4:	bfa8      	it	ge
   2e9b6:	460c      	movge	r4, r1
   2e9b8:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e9ba:	4622      	mov	r2, r4
   2e9bc:	1959      	adds	r1, r3, r5
   2e9be:	f003 f830 	bl	31a22 <memcpy>
}
   2e9c2:	4620      	mov	r0, r4
   2e9c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e9c6:	f06f 0406 	mvn.w	r4, #6
   2e9ca:	e7fa      	b.n	2e9c2 <bt_gatt_attr_read.constprop.0+0x1e>

0002e9cc <bt_gatt_attr_read_ccc>:
{
   2e9cc:	b530      	push	{r4, r5, lr}
   2e9ce:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2e9d0:	68c9      	ldr	r1, [r1, #12]
{
   2e9d2:	4614      	mov	r4, r2
   2e9d4:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2e9d6:	f7ef f9bb 	bl	1dd50 <find_ccc_cfg>
	if (cfg) {
   2e9da:	b100      	cbz	r0, 2e9de <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2e9dc:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2e9de:	2302      	movs	r3, #2
   2e9e0:	f8ad 000e 	strh.w	r0, [sp, #14]
   2e9e4:	9300      	str	r3, [sp, #0]
   2e9e6:	4629      	mov	r1, r5
   2e9e8:	4620      	mov	r0, r4
   2e9ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2e9ee:	f10d 030e 	add.w	r3, sp, #14
   2e9f2:	f7ff ffd7 	bl	2e9a4 <bt_gatt_attr_read.constprop.0>
}
   2e9f6:	b005      	add	sp, #20
   2e9f8:	bd30      	pop	{r4, r5, pc}

0002e9fa <bt_gatt_attr_read_service>:
{
   2e9fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2e9fc:	460c      	mov	r4, r1
   2e9fe:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2ea00:	68e3      	ldr	r3, [r4, #12]
{
   2ea02:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2ea04:	781c      	ldrb	r4, [r3, #0]
{
   2ea06:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2ea0a:	b13c      	cbz	r4, 2ea1c <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ea0c:	2410      	movs	r4, #16
   2ea0e:	3301      	adds	r3, #1
   2ea10:	9406      	str	r4, [sp, #24]
}
   2ea12:	b004      	add	sp, #16
   2ea14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ea18:	f7ff bfc4 	b.w	2e9a4 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2ea1c:	885b      	ldrh	r3, [r3, #2]
   2ea1e:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ea22:	2302      	movs	r3, #2
   2ea24:	9300      	str	r3, [sp, #0]
   2ea26:	f10d 030e 	add.w	r3, sp, #14
   2ea2a:	f7ff ffbb 	bl	2e9a4 <bt_gatt_attr_read.constprop.0>
}
   2ea2e:	b004      	add	sp, #16
   2ea30:	bd10      	pop	{r4, pc}

0002ea32 <cf_read>:
{
   2ea32:	b530      	push	{r4, r5, lr}
   2ea34:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2ea36:	2300      	movs	r3, #0
{
   2ea38:	b085      	sub	sp, #20
   2ea3a:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2ea3c:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2ea40:	f7ef f936 	bl	1dcb0 <find_cf_cfg>
	if (cfg) {
   2ea44:	b110      	cbz	r0, 2ea4c <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2ea46:	7a03      	ldrb	r3, [r0, #8]
   2ea48:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2ea4c:	2301      	movs	r3, #1
   2ea4e:	4629      	mov	r1, r5
   2ea50:	9300      	str	r3, [sp, #0]
   2ea52:	4620      	mov	r0, r4
   2ea54:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ea58:	ab03      	add	r3, sp, #12
   2ea5a:	f7ff ffa3 	bl	2e9a4 <bt_gatt_attr_read.constprop.0>
}
   2ea5e:	b005      	add	sp, #20
   2ea60:	bd30      	pop	{r4, r5, pc}

0002ea62 <read_name>:
{
   2ea62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ea66:	4614      	mov	r4, r2
   2ea68:	461d      	mov	r5, r3
   2ea6a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2ea6e:	f7ec f8f7 	bl	1ac60 <bt_get_name>
   2ea72:	4606      	mov	r6, r0
				 strlen(name));
   2ea74:	f7da fcc9 	bl	940a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2ea78:	b280      	uxth	r0, r0
   2ea7a:	9006      	str	r0, [sp, #24]
   2ea7c:	4633      	mov	r3, r6
   2ea7e:	463a      	mov	r2, r7
   2ea80:	4629      	mov	r1, r5
   2ea82:	4620      	mov	r0, r4
}
   2ea84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2ea88:	f7ff bf8c 	b.w	2e9a4 <bt_gatt_attr_read.constprop.0>

0002ea8c <read_appearance>:
{
   2ea8c:	b530      	push	{r4, r5, lr}
   2ea8e:	b085      	sub	sp, #20
   2ea90:	4614      	mov	r4, r2
   2ea92:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2ea94:	f7fe fe15 	bl	2d6c2 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ea98:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2ea9a:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ea9e:	9300      	str	r3, [sp, #0]
   2eaa0:	4629      	mov	r1, r5
   2eaa2:	4620      	mov	r0, r4
   2eaa4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2eaa8:	f10d 030e 	add.w	r3, sp, #14
   2eaac:	f7ff ff7a 	bl	2e9a4 <bt_gatt_attr_read.constprop.0>
}
   2eab0:	b005      	add	sp, #20
   2eab2:	bd30      	pop	{r4, r5, pc}

0002eab4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2eab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2eab6:	ab0b      	add	r3, sp, #44	; 0x2c
   2eab8:	9305      	str	r3, [sp, #20]
   2eaba:	9303      	str	r3, [sp, #12]
   2eabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eabe:	9302      	str	r3, [sp, #8]
   2eac0:	2300      	movs	r3, #0
   2eac2:	4618      	mov	r0, r3
   2eac4:	e9cd 3300 	strd	r3, r3, [sp]
   2eac8:	f7e0 fe28 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2eacc:	b007      	add	sp, #28
   2eace:	f85d fb04 	ldr.w	pc, [sp], #4

0002ead2 <sc_clear>:
{
   2ead2:	b538      	push	{r3, r4, r5, lr}
   2ead4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2ead6:	f100 0588 	add.w	r5, r0, #136	; 0x88
   2eada:	4629      	mov	r1, r5
   2eadc:	7a00      	ldrb	r0, [r0, #8]
   2eade:	f7fe fdf3 	bl	2d6c8 <bt_addr_le_is_bonded>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2eae2:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2eae4:	7a20      	ldrb	r0, [r4, #8]
   2eae6:	f7ef f911 	bl	1dd0c <find_sc_cfg>
		if (cfg) {
   2eaea:	b118      	cbz	r0, 2eaf4 <sc_clear+0x22>
}
   2eaec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2eaf0:	f7ff bf53 	b.w	2e99a <clear_sc_cfg>
}
   2eaf4:	bd38      	pop	{r3, r4, r5, pc}

0002eaf6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2eaf6:	2a02      	cmp	r2, #2
{
   2eaf8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2eafa:	d108      	bne.n	2eb0e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2eafc:	2300      	movs	r3, #0
   2eafe:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2eb02:	461a      	mov	r2, r3
   2eb04:	7a00      	ldrb	r0, [r0, #8]
   2eb06:	f7ef f9d3 	bl	1deb0 <sc_save>
}
   2eb0a:	2002      	movs	r0, #2
   2eb0c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2eb0e:	f7ff ffe0 	bl	2ead2 <sc_clear>
   2eb12:	e7fa      	b.n	2eb0a <sc_ccc_cfg_write+0x14>

0002eb14 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2eb14:	2301      	movs	r3, #1
   2eb16:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2eb18:	e8d0 2fef 	ldaex	r2, [r0]
   2eb1c:	431a      	orrs	r2, r3
   2eb1e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2eb22:	2900      	cmp	r1, #0
   2eb24:	d1f8      	bne.n	2eb18 <atomic_set_bit+0x4>
}
   2eb26:	4770      	bx	lr

0002eb28 <sc_restore_rsp>:
{
   2eb28:	b538      	push	{r3, r4, r5, lr}
   2eb2a:	4604      	mov	r4, r0
   2eb2c:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2eb2e:	f7ff fe80 	bl	2e832 <bt_att_fixed_chan_only>
   2eb32:	b150      	cbz	r0, 2eb4a <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2eb34:	4620      	mov	r0, r4
   2eb36:	f7ef f8bb 	bl	1dcb0 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2eb3a:	b130      	cbz	r0, 2eb4a <sc_restore_rsp+0x22>
   2eb3c:	7a03      	ldrb	r3, [r0, #8]
   2eb3e:	07db      	lsls	r3, r3, #31
   2eb40:	d503      	bpl.n	2eb4a <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2eb42:	2100      	movs	r1, #0
   2eb44:	300c      	adds	r0, #12
   2eb46:	f7ff ffe5 	bl	2eb14 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2eb4a:	b935      	cbnz	r5, 2eb5a <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2eb4c:	7a20      	ldrb	r0, [r4, #8]
   2eb4e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2eb52:	f7ef f8db 	bl	1dd0c <find_sc_cfg>
		if (sc_cfg) {
   2eb56:	b100      	cbz	r0, 2eb5a <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   2eb58:	6085      	str	r5, [r0, #8]
}
   2eb5a:	bd38      	pop	{r3, r4, r5, pc}

0002eb5c <bt_gatt_attr_value_handle>:
{
   2eb5c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2eb5e:	4604      	mov	r4, r0
   2eb60:	b910      	cbnz	r0, 2eb68 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2eb62:	2000      	movs	r0, #0
}
   2eb64:	b002      	add	sp, #8
   2eb66:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2eb68:	2300      	movs	r3, #0
   2eb6a:	f88d 3004 	strb.w	r3, [sp, #4]
   2eb6e:	f642 0303 	movw	r3, #10243	; 0x2803
   2eb72:	6800      	ldr	r0, [r0, #0]
   2eb74:	a901      	add	r1, sp, #4
   2eb76:	f8ad 3006 	strh.w	r3, [sp, #6]
   2eb7a:	f7fe fc58 	bl	2d42e <bt_uuid_cmp>
   2eb7e:	2800      	cmp	r0, #0
   2eb80:	d1ef      	bne.n	2eb62 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2eb82:	68e3      	ldr	r3, [r4, #12]
   2eb84:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2eb86:	2800      	cmp	r0, #0
   2eb88:	d1ec      	bne.n	2eb64 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2eb8a:	4620      	mov	r0, r4
   2eb8c:	f7ef fae6 	bl	1e15c <bt_gatt_attr_get_handle>
   2eb90:	3001      	adds	r0, #1
   2eb92:	b280      	uxth	r0, r0
	return handle;
   2eb94:	e7e6      	b.n	2eb64 <bt_gatt_attr_value_handle+0x8>

0002eb96 <bt_gatt_attr_read_chrc>:
{
   2eb96:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2eb98:	68cc      	ldr	r4, [r1, #12]
{
   2eb9a:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2eb9c:	79a3      	ldrb	r3, [r4, #6]
{
   2eb9e:	b088      	sub	sp, #32
   2eba0:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2eba2:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2eba6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2eba8:	f7ff ffd8 	bl	2eb5c <bt_gatt_attr_value_handle>
   2ebac:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2ebb0:	6824      	ldr	r4, [r4, #0]
   2ebb2:	7823      	ldrb	r3, [r4, #0]
   2ebb4:	b96b      	cbnz	r3, 2ebd2 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2ebb6:	8863      	ldrh	r3, [r4, #2]
   2ebb8:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2ebbc:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2ebbe:	9300      	str	r3, [sp, #0]
   2ebc0:	4631      	mov	r1, r6
   2ebc2:	4628      	mov	r0, r5
   2ebc4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2ebc8:	ab03      	add	r3, sp, #12
   2ebca:	f7ff feeb 	bl	2e9a4 <bt_gatt_attr_read.constprop.0>
}
   2ebce:	b008      	add	sp, #32
   2ebd0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2ebd2:	1c63      	adds	r3, r4, #1
   2ebd4:	f10d 020f 	add.w	r2, sp, #15
   2ebd8:	3411      	adds	r4, #17
   2ebda:	f853 1b04 	ldr.w	r1, [r3], #4
   2ebde:	42a3      	cmp	r3, r4
   2ebe0:	f842 1b04 	str.w	r1, [r2], #4
   2ebe4:	d1f9      	bne.n	2ebda <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2ebe6:	2313      	movs	r3, #19
   2ebe8:	e7e9      	b.n	2ebbe <bt_gatt_attr_read_chrc+0x28>

0002ebea <bt_gatt_foreach_attr>:
{
   2ebea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2ebec:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2ebf0:	2300      	movs	r3, #0
   2ebf2:	461a      	mov	r2, r3
   2ebf4:	9300      	str	r3, [sp, #0]
   2ebf6:	f7ef fae1 	bl	1e1bc <bt_gatt_foreach_attr_type>
}
   2ebfa:	b005      	add	sp, #20
   2ebfc:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec00 <db_hash_process>:
	db_hash_gen(true);
   2ec00:	f7ef bb36 	b.w	1e270 <db_hash_gen.constprop.0>

0002ec04 <bt_gatt_check_perm>:
{
   2ec04:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2ec06:	07d4      	lsls	r4, r2, #31
{
   2ec08:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ec0a:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2ec0c:	d504      	bpl.n	2ec18 <bt_gatt_check_perm+0x14>
   2ec0e:	f013 0f95 	tst.w	r3, #149	; 0x95
   2ec12:	d027      	beq.n	2ec64 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2ec14:	6848      	ldr	r0, [r1, #4]
   2ec16:	b328      	cbz	r0, 2ec64 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2ec18:	0790      	lsls	r0, r2, #30
   2ec1a:	d504      	bpl.n	2ec26 <bt_gatt_check_perm+0x22>
   2ec1c:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2ec20:	d022      	beq.n	2ec68 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2ec22:	6889      	ldr	r1, [r1, #8]
   2ec24:	b301      	cbz	r1, 2ec68 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2ec26:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2ec2a:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2ec2e:	d007      	beq.n	2ec40 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2ec30:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   2ec34:	b90b      	cbnz	r3, 2ec3a <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2ec36:	2005      	movs	r0, #5
}
   2ec38:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2ec3a:	7b5b      	ldrb	r3, [r3, #13]
   2ec3c:	06db      	lsls	r3, r3, #27
   2ec3e:	d5fa      	bpl.n	2ec36 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ec40:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ec44:	d108      	bne.n	2ec58 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2ec46:	f014 000c 	ands.w	r0, r4, #12
   2ec4a:	d0f5      	beq.n	2ec38 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2ec4c:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ec4e:	2b00      	cmp	r3, #0
   2ec50:	bf14      	ite	ne
   2ec52:	2000      	movne	r0, #0
   2ec54:	200f      	moveq	r0, #15
   2ec56:	e7ef      	b.n	2ec38 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ec58:	4628      	mov	r0, r5
   2ec5a:	f7ff f891 	bl	2dd80 <bt_conn_get_security>
   2ec5e:	2802      	cmp	r0, #2
   2ec60:	d8f1      	bhi.n	2ec46 <bt_gatt_check_perm+0x42>
   2ec62:	e7e8      	b.n	2ec36 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ec64:	2002      	movs	r0, #2
   2ec66:	e7e7      	b.n	2ec38 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ec68:	2003      	movs	r0, #3
   2ec6a:	e7e5      	b.n	2ec38 <bt_gatt_check_perm+0x34>

0002ec6c <bt_gatt_is_subscribed>:
{
   2ec6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2ec70:	7b43      	ldrb	r3, [r0, #13]
{
   2ec72:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2ec74:	2b07      	cmp	r3, #7
{
   2ec76:	460c      	mov	r4, r1
   2ec78:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2ec7a:	d110      	bne.n	2ec9e <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2ec7c:	2300      	movs	r3, #0
   2ec7e:	f88d 300c 	strb.w	r3, [sp, #12]
   2ec82:	f642 0303 	movw	r3, #10243	; 0x2803
   2ec86:	6820      	ldr	r0, [r4, #0]
   2ec88:	a903      	add	r1, sp, #12
   2ec8a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ec8e:	f7fe fbce 	bl	2d42e <bt_uuid_cmp>
   2ec92:	b960      	cbnz	r0, 2ecae <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2ec94:	68e3      	ldr	r3, [r4, #12]
   2ec96:	799b      	ldrb	r3, [r3, #6]
   2ec98:	f013 0f30 	tst.w	r3, #48	; 0x30
   2ec9c:	d103      	bne.n	2eca6 <bt_gatt_is_subscribed+0x3a>
		return false;
   2ec9e:	2000      	movs	r0, #0
}
   2eca0:	b004      	add	sp, #16
   2eca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   2eca6:	4620      	mov	r0, r4
   2eca8:	f7ef fb5e 	bl	1e368 <bt_gatt_attr_next>
   2ecac:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2ecae:	2300      	movs	r3, #0
   2ecb0:	6820      	ldr	r0, [r4, #0]
   2ecb2:	f88d 300c 	strb.w	r3, [sp, #12]
   2ecb6:	f642 1302 	movw	r3, #10498	; 0x2902
   2ecba:	a903      	add	r1, sp, #12
   2ecbc:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ecc0:	f7fe fbb5 	bl	2d42e <bt_uuid_cmp>
   2ecc4:	b118      	cbz	r0, 2ecce <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   2ecc6:	4620      	mov	r0, r4
   2ecc8:	f7ef fb4e 	bl	1e368 <bt_gatt_attr_next>
   2eccc:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2ecce:	2700      	movs	r7, #0
   2ecd0:	f642 1802 	movw	r8, #10498	; 0x2902
   2ecd4:	6820      	ldr	r0, [r4, #0]
   2ecd6:	4669      	mov	r1, sp
   2ecd8:	f88d 7000 	strb.w	r7, [sp]
   2ecdc:	f8ad 8002 	strh.w	r8, [sp, #2]
   2ece0:	f7fe fba5 	bl	2d42e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2ece4:	bb20      	cbnz	r0, 2ed30 <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   2ece6:	2300      	movs	r3, #0
   2ece8:	6820      	ldr	r0, [r4, #0]
   2ecea:	f88d 300c 	strb.w	r3, [sp, #12]
   2ecee:	f642 1302 	movw	r3, #10498	; 0x2902
   2ecf2:	a903      	add	r1, sp, #12
   2ecf4:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ecf8:	f7fe fb99 	bl	2d42e <bt_uuid_cmp>
   2ecfc:	2800      	cmp	r0, #0
   2ecfe:	d1ce      	bne.n	2ec9e <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2ed00:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   2ed02:	4628      	mov	r0, r5
   2ed04:	4622      	mov	r2, r4
   2ed06:	f812 1b01 	ldrb.w	r1, [r2], #1
   2ed0a:	f7ff f83b 	bl	2dd84 <bt_conn_is_peer_addr_le>
   2ed0e:	b110      	cbz	r0, 2ed16 <bt_gatt_is_subscribed+0xaa>
   2ed10:	8923      	ldrh	r3, [r4, #8]
   2ed12:	421e      	tst	r6, r3
   2ed14:	d10a      	bne.n	2ed2c <bt_gatt_is_subscribed+0xc0>
   2ed16:	4628      	mov	r0, r5
   2ed18:	7aa1      	ldrb	r1, [r4, #10]
   2ed1a:	f104 020b 	add.w	r2, r4, #11
   2ed1e:	f7ff f831 	bl	2dd84 <bt_conn_is_peer_addr_le>
   2ed22:	2800      	cmp	r0, #0
   2ed24:	d0bb      	beq.n	2ec9e <bt_gatt_is_subscribed+0x32>
   2ed26:	8a63      	ldrh	r3, [r4, #18]
   2ed28:	421e      	tst	r6, r3
   2ed2a:	d0b8      	beq.n	2ec9e <bt_gatt_is_subscribed+0x32>
			return true;
   2ed2c:	2001      	movs	r0, #1
   2ed2e:	e7b7      	b.n	2eca0 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2ed30:	f642 0303 	movw	r3, #10243	; 0x2803
   2ed34:	6820      	ldr	r0, [r4, #0]
   2ed36:	a901      	add	r1, sp, #4
   2ed38:	f88d 7004 	strb.w	r7, [sp, #4]
   2ed3c:	f8ad 3006 	strh.w	r3, [sp, #6]
   2ed40:	f7fe fb75 	bl	2d42e <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2ed44:	2800      	cmp	r0, #0
   2ed46:	d0ce      	beq.n	2ece6 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2ed48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2ed4c:	6820      	ldr	r0, [r4, #0]
   2ed4e:	a902      	add	r1, sp, #8
   2ed50:	f88d 7008 	strb.w	r7, [sp, #8]
   2ed54:	f8ad 300a 	strh.w	r3, [sp, #10]
   2ed58:	f7fe fb69 	bl	2d42e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2ed5c:	2800      	cmp	r0, #0
   2ed5e:	d0c2      	beq.n	2ece6 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2ed60:	f642 0301 	movw	r3, #10241	; 0x2801
   2ed64:	6820      	ldr	r0, [r4, #0]
   2ed66:	a903      	add	r1, sp, #12
   2ed68:	f88d 700c 	strb.w	r7, [sp, #12]
   2ed6c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ed70:	f7fe fb5d 	bl	2d42e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2ed74:	2800      	cmp	r0, #0
   2ed76:	d0b6      	beq.n	2ece6 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   2ed78:	4620      	mov	r0, r4
   2ed7a:	f7ef faf5 	bl	1e368 <bt_gatt_attr_next>
		if (!attr) {
   2ed7e:	4604      	mov	r4, r0
   2ed80:	2800      	cmp	r0, #0
   2ed82:	d1a7      	bne.n	2ecd4 <bt_gatt_is_subscribed+0x68>
   2ed84:	e78b      	b.n	2ec9e <bt_gatt_is_subscribed+0x32>

0002ed86 <bt_gatt_change_aware>:
{
   2ed86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ed88:	4606      	mov	r6, r0
   2ed8a:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2ed8c:	f7ee ff90 	bl	1dcb0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2ed90:	b1e0      	cbz	r0, 2edcc <bt_gatt_change_aware+0x46>
   2ed92:	7a03      	ldrb	r3, [r0, #8]
   2ed94:	07db      	lsls	r3, r3, #31
   2ed96:	d519      	bpl.n	2edcc <bt_gatt_change_aware+0x46>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2ed98:	f100 040c 	add.w	r4, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ed9c:	e8d4 5faf 	lda	r5, [r4]
   2eda0:	f015 0501 	ands.w	r5, r5, #1
   2eda4:	d112      	bne.n	2edcc <bt_gatt_change_aware+0x46>
	if (!req) {
   2eda6:	b197      	cbz	r7, 2edce <bt_gatt_change_aware+0x48>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2eda8:	e8d4 1fef 	ldaex	r1, [r4]
   2edac:	f021 0302 	bic.w	r3, r1, #2
   2edb0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2edb4:	2a00      	cmp	r2, #0
   2edb6:	d1f7      	bne.n	2eda8 <bt_gatt_change_aware+0x22>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2edb8:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   2edbc:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2edbe:	d008      	beq.n	2edd2 <bt_gatt_change_aware+0x4c>
		bt_att_clear_out_of_sync_sent(conn);
   2edc0:	f7ff fd39 	bl	2e836 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2edc4:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2edc6:	4620      	mov	r0, r4
   2edc8:	f7ff fea4 	bl	2eb14 <atomic_set_bit>
		return true;
   2edcc:	2501      	movs	r5, #1
}
   2edce:	4628      	mov	r0, r5
   2edd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2edd2:	f7ff fd2e 	bl	2e832 <bt_att_fixed_chan_only>
   2edd6:	2800      	cmp	r0, #0
   2edd8:	d0f9      	beq.n	2edce <bt_gatt_change_aware+0x48>
   2edda:	4630      	mov	r0, r6
   2eddc:	f7ff fd40 	bl	2e860 <bt_att_out_of_sync_sent_on_fixed>
   2ede0:	2800      	cmp	r0, #0
   2ede2:	d0f4      	beq.n	2edce <bt_gatt_change_aware+0x48>
   2ede4:	e8d4 3fef 	ldaex	r3, [r4]
   2ede8:	f023 0302 	bic.w	r3, r3, #2
   2edec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2edf0:	2a00      	cmp	r2, #0
   2edf2:	d1f7      	bne.n	2ede4 <bt_gatt_change_aware+0x5e>
		bt_att_clear_out_of_sync_sent(conn);
   2edf4:	4630      	mov	r0, r6
   2edf6:	f7ff fd1e 	bl	2e836 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2edfa:	4639      	mov	r1, r7
   2edfc:	e7e3      	b.n	2edc6 <bt_gatt_change_aware+0x40>

0002edfe <smp_pairing_rsp>:
}
   2edfe:	2007      	movs	r0, #7
   2ee00:	4770      	bx	lr

0002ee02 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ee02:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2ee06:	4108      	asrs	r0, r1
}
   2ee08:	f000 0001 	and.w	r0, r0, #1
   2ee0c:	4770      	bx	lr

0002ee0e <update_keys_check>:
{
   2ee0e:	4603      	mov	r3, r0
   2ee10:	b510      	push	{r4, lr}
	if (!keys ||
   2ee12:	b1d9      	cbz	r1, 2ee4c <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2ee14:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2ee16:	f010 0f24 	tst.w	r0, #36	; 0x24
   2ee1a:	d017      	beq.n	2ee4c <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2ee1c:	7d1a      	ldrb	r2, [r3, #20]
   2ee1e:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2ee20:	7b09      	ldrb	r1, [r1, #12]
   2ee22:	42a2      	cmp	r2, r4
   2ee24:	bf28      	it	cs
   2ee26:	4622      	movcs	r2, r4
   2ee28:	4291      	cmp	r1, r2
   2ee2a:	d901      	bls.n	2ee30 <update_keys_check+0x22>
			return false;
   2ee2c:	2000      	movs	r0, #0
}
   2ee2e:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ee30:	0682      	lsls	r2, r0, #26
   2ee32:	d404      	bmi.n	2ee3e <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2ee34:	7a18      	ldrb	r0, [r3, #8]
   2ee36:	3800      	subs	r0, #0
   2ee38:	bf18      	it	ne
   2ee3a:	2001      	movne	r0, #1
   2ee3c:	e7f7      	b.n	2ee2e <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2ee3e:	2105      	movs	r1, #5
   2ee40:	1d18      	adds	r0, r3, #4
   2ee42:	f7ff ffde 	bl	2ee02 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2ee46:	2800      	cmp	r0, #0
   2ee48:	d1f4      	bne.n	2ee34 <update_keys_check+0x26>
   2ee4a:	e7ef      	b.n	2ee2c <update_keys_check+0x1e>
	return true;
   2ee4c:	2001      	movs	r0, #1
   2ee4e:	e7ee      	b.n	2ee2e <update_keys_check+0x20>

0002ee50 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ee50:	2301      	movs	r3, #1
   2ee52:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ee54:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ee56:	e8d0 2fef 	ldaex	r2, [r0]
   2ee5a:	401a      	ands	r2, r3
   2ee5c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2ee60:	2900      	cmp	r1, #0
   2ee62:	d1f8      	bne.n	2ee56 <atomic_clear_bit+0x6>
}
   2ee64:	4770      	bx	lr

0002ee66 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ee66:	680b      	ldr	r3, [r1, #0]
   2ee68:	6003      	str	r3, [r0, #0]
   2ee6a:	888b      	ldrh	r3, [r1, #4]
   2ee6c:	8083      	strh	r3, [r0, #4]
   2ee6e:	798b      	ldrb	r3, [r1, #6]
   2ee70:	7183      	strb	r3, [r0, #6]
   2ee72:	4770      	bx	lr

0002ee74 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2ee74:	2007      	movs	r0, #7
   2ee76:	4770      	bx	lr

0002ee78 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ee78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ee7a:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ee7c:	2200      	movs	r2, #0
   2ee7e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ee80:	4604      	mov	r4, r0
   2ee82:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ee84:	460a      	mov	r2, r1
   2ee86:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2ee8a:	2106      	movs	r1, #6
   2ee8c:	f7ff f822 	bl	2ded4 <bt_l2cap_send_cb>
   2ee90:	b128      	cbz	r0, 2ee9e <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2ee92:	4628      	mov	r0, r5
}
   2ee94:	b003      	add	sp, #12
   2ee96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2ee9a:	f7f1 bc79 	b.w	20790 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2ee9e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2eea2:	2300      	movs	r3, #0
   2eea4:	f504 70bc 	add.w	r0, r4, #376	; 0x178
}
   2eea8:	b003      	add	sp, #12
   2eeaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2eeae:	f7f7 b967 	b.w	26180 <k_work_reschedule>

0002eeb2 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2eeb2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2eeb4:	ab0b      	add	r3, sp, #44	; 0x2c
   2eeb6:	9305      	str	r3, [sp, #20]
   2eeb8:	9303      	str	r3, [sp, #12]
   2eeba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2eebc:	9302      	str	r3, [sp, #8]
   2eebe:	2300      	movs	r3, #0
   2eec0:	4618      	mov	r0, r3
   2eec2:	e9cd 3300 	strd	r3, r3, [sp]
   2eec6:	f7e0 fc29 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2eeca:	b007      	add	sp, #28
   2eecc:	f85d fb04 	ldr.w	pc, [sp], #4

0002eed0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2eed0:	2301      	movs	r3, #1
   2eed2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2eed4:	e8d0 2fef 	ldaex	r2, [r0]
   2eed8:	431a      	orrs	r2, r3
   2eeda:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2eede:	2900      	cmp	r1, #0
   2eee0:	d1f8      	bne.n	2eed4 <atomic_set_bit+0x4>
}
   2eee2:	4770      	bx	lr

0002eee4 <smp_keypress_notif>:
{
   2eee4:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2eee6:	210e      	movs	r1, #14
   2eee8:	f7ff fff2 	bl	2eed0 <atomic_set_bit>
}
   2eeec:	2000      	movs	r0, #0
   2eeee:	bd08      	pop	{r3, pc}

0002eef0 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2eef0:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2eef2:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2eef4:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2eef6:	4628      	mov	r0, r5
   2eef8:	2104      	movs	r1, #4
   2eefa:	f7ff ff82 	bl	2ee02 <atomic_test_bit>
   2eefe:	b168      	cbz	r0, 2ef1c <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2ef00:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ef02:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2ef04:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2ef06:	4608      	mov	r0, r1
   2ef08:	f7fe ffe1 	bl	2dece <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2ef0c:	4604      	mov	r4, r0
   2ef0e:	b940      	cbnz	r0, 2ef22 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2ef10:	2104      	movs	r1, #4
   2ef12:	4628      	mov	r0, r5
   2ef14:	f7ff ffdc 	bl	2eed0 <atomic_set_bit>
}
   2ef18:	4620      	mov	r0, r4
   2ef1a:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2ef1c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ef20:	e7ef      	b.n	2ef02 <smp_create_pdu.constprop.0+0x12>
   2ef22:	2101      	movs	r1, #1
   2ef24:	300c      	adds	r0, #12
   2ef26:	f000 fb7e 	bl	2f626 <net_buf_simple_add>
	hdr->code = op;
   2ef2a:	7006      	strb	r6, [r0, #0]
	return buf;
   2ef2c:	e7f4      	b.n	2ef18 <smp_create_pdu.constprop.0+0x28>

0002ef2e <send_pairing_rsp>:
{
   2ef2e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ef30:	2102      	movs	r1, #2
{
   2ef32:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2ef34:	f7ff ffdc 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ef38:	4605      	mov	r5, r0
   2ef3a:	b180      	cbz	r0, 2ef5e <send_pairing_rsp+0x30>
   2ef3c:	2106      	movs	r1, #6
   2ef3e:	300c      	adds	r0, #12
   2ef40:	f000 fb71 	bl	2f626 <net_buf_simple_add>
   2ef44:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2ef48:	2200      	movs	r2, #0
   2ef4a:	6003      	str	r3, [r0, #0]
   2ef4c:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2ef50:	4629      	mov	r1, r5
   2ef52:	8083      	strh	r3, [r0, #4]
   2ef54:	4620      	mov	r0, r4
   2ef56:	f7ff ff8f 	bl	2ee78 <smp_send.constprop.0>
	return 0;
   2ef5a:	2000      	movs	r0, #0
}
   2ef5c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ef5e:	2008      	movs	r0, #8
   2ef60:	e7fc      	b.n	2ef5c <send_pairing_rsp+0x2e>

0002ef62 <smp_send_pairing_random>:
{
   2ef62:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ef64:	2104      	movs	r1, #4
{
   2ef66:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2ef68:	f7ff ffc2 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2ef6c:	4605      	mov	r5, r0
   2ef6e:	b1a0      	cbz	r0, 2ef9a <smp_send_pairing_random+0x38>
   2ef70:	2110      	movs	r1, #16
   2ef72:	300c      	adds	r0, #12
   2ef74:	f000 fb57 	bl	2f626 <net_buf_simple_add>
   2ef78:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2ef7c:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2ef80:	f853 1b04 	ldr.w	r1, [r3], #4
   2ef84:	4293      	cmp	r3, r2
   2ef86:	f840 1b04 	str.w	r1, [r0], #4
   2ef8a:	d1f9      	bne.n	2ef80 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2ef8c:	4620      	mov	r0, r4
   2ef8e:	2200      	movs	r2, #0
   2ef90:	4629      	mov	r1, r5
   2ef92:	f7ff ff71 	bl	2ee78 <smp_send.constprop.0>
	return 0;
   2ef96:	2000      	movs	r0, #0
}
   2ef98:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2ef9a:	2008      	movs	r0, #8
   2ef9c:	e7fc      	b.n	2ef98 <smp_send_pairing_random+0x36>

0002ef9e <smp_dhkey_check>:
{
   2ef9e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2efa0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2efa4:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2efa6:	78db      	ldrb	r3, [r3, #3]
   2efa8:	2b01      	cmp	r3, #1
   2efaa:	d119      	bne.n	2efe0 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2efac:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2efae:	1d06      	adds	r6, r0, #4
   2efb0:	2110      	movs	r1, #16
   2efb2:	4630      	mov	r0, r6
   2efb4:	f7ff ff4c 	bl	2ee50 <atomic_clear_bit>
   2efb8:	462b      	mov	r3, r5
   2efba:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2efbe:	f105 0110 	add.w	r1, r5, #16
   2efc2:	f853 0b04 	ldr.w	r0, [r3], #4
   2efc6:	428b      	cmp	r3, r1
   2efc8:	f842 0b04 	str.w	r0, [r2], #4
   2efcc:	d1f9      	bne.n	2efc2 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2efce:	2107      	movs	r1, #7
   2efd0:	4630      	mov	r0, r6
   2efd2:	f7ff ff16 	bl	2ee02 <atomic_test_bit>
   2efd6:	b128      	cbz	r0, 2efe4 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2efd8:	2109      	movs	r1, #9
   2efda:	4630      	mov	r0, r6
   2efdc:	f7ff ff78 	bl	2eed0 <atomic_set_bit>
}
   2efe0:	2000      	movs	r0, #0
   2efe2:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2efe4:	210a      	movs	r1, #10
   2efe6:	4630      	mov	r0, r6
   2efe8:	f7ff ff0b 	bl	2ee02 <atomic_test_bit>
   2efec:	2800      	cmp	r0, #0
   2efee:	d1f3      	bne.n	2efd8 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2eff0:	4620      	mov	r0, r4
}
   2eff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2eff6:	f7f0 b9e7 	b.w	1f3c8 <compute_and_check_and_send_periph_dhcheck>

0002effa <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2effa:	2007      	movs	r0, #7
   2effc:	4770      	bx	lr

0002effe <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2effe:	2301      	movs	r3, #1
   2f000:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f004:	43ca      	mvns	r2, r1
{
   2f006:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f008:	e8d0 3fef 	ldaex	r3, [r0]
   2f00c:	ea03 0402 	and.w	r4, r3, r2
   2f010:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2f014:	2d00      	cmp	r5, #0
   2f016:	d1f7      	bne.n	2f008 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2f018:	4219      	tst	r1, r3
}
   2f01a:	bf14      	ite	ne
   2f01c:	2001      	movne	r0, #1
   2f01e:	2000      	moveq	r0, #0
   2f020:	bd30      	pop	{r4, r5, pc}

0002f022 <smp_reset>:
{
   2f022:	b538      	push	{r3, r4, r5, lr}
   2f024:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f026:	2500      	movs	r5, #0
   2f028:	1d03      	adds	r3, r0, #4
   2f02a:	e8d3 2fef 	ldaex	r2, [r3]
   2f02e:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2f032:	2900      	cmp	r1, #0
   2f034:	d1f9      	bne.n	2f02a <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2f036:	f504 70bc 	add.w	r0, r4, #376	; 0x178
   2f03a:	f002 f977 	bl	3132c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2f03e:	7225      	strb	r5, [r4, #8]
   2f040:	e8d4 3fef 	ldaex	r3, [r4]
   2f044:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2f048:	2a00      	cmp	r2, #0
   2f04a:	d1f9      	bne.n	2f040 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2f04c:	4620      	mov	r0, r4
}
   2f04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2f052:	2101      	movs	r1, #1
   2f054:	f7ff bf3c 	b.w	2eed0 <atomic_set_bit>

0002f058 <smp_c1>:
{
   2f058:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f05a:	b089      	sub	sp, #36	; 0x24
   2f05c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2f060:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2f062:	7830      	ldrb	r0, [r6, #0]
{
   2f064:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2f066:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2f06a:	7838      	ldrb	r0, [r7, #0]
   2f06c:	f101 0c10 	add.w	ip, r1, #16
   2f070:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2f074:	6810      	ldr	r0, [r2, #0]
   2f076:	f8cd 0002 	str.w	r0, [sp, #2]
   2f07a:	8890      	ldrh	r0, [r2, #4]
   2f07c:	7992      	ldrb	r2, [r2, #6]
   2f07e:	f8ad 0006 	strh.w	r0, [sp, #6]
   2f082:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2f086:	681a      	ldr	r2, [r3, #0]
   2f088:	4668      	mov	r0, sp
   2f08a:	f8cd 2009 	str.w	r2, [sp, #9]
   2f08e:	889a      	ldrh	r2, [r3, #4]
   2f090:	799b      	ldrb	r3, [r3, #6]
   2f092:	f8ad 200d 	strh.w	r2, [sp, #13]
   2f096:	4622      	mov	r2, r4
   2f098:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2f09c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2f0a0:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2f0a4:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2f0a6:	ea83 030e 	eor.w	r3, r3, lr
   2f0aa:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2f0ae:	d1f5      	bne.n	2f09c <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2f0b0:	4622      	mov	r2, r4
   2f0b2:	4621      	mov	r1, r4
   2f0b4:	4628      	mov	r0, r5
   2f0b6:	f7fe fd1a 	bl	2daee <bt_encrypt_le>
	if (err) {
   2f0ba:	4603      	mov	r3, r0
   2f0bc:	bb28      	cbnz	r0, 2f10a <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2f0be:	9307      	str	r3, [sp, #28]
   2f0c0:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2f0c2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2f0c6:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2f0ca:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2f0ce:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2f0d2:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2f0d4:	f8cd 2016 	str.w	r2, [sp, #22]
   2f0d8:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2f0dc:	f104 0010 	add.w	r0, r4, #16
   2f0e0:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2f0e4:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2f0e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   2f0ea:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2f0ee:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2f0f0:	ea82 0206 	eor.w	r2, r2, r6
   2f0f4:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2f0f8:	d1f5      	bne.n	2f0e6 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2f0fa:	4622      	mov	r2, r4
   2f0fc:	4621      	mov	r1, r4
   2f0fe:	4628      	mov	r0, r5
}
   2f100:	b009      	add	sp, #36	; 0x24
   2f102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2f106:	f7fe bcf2 	b.w	2daee <bt_encrypt_le>
}
   2f10a:	b009      	add	sp, #36	; 0x24
   2f10c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f10e <legacy_pairing_confirm>:
{
   2f10e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2f110:	1d07      	adds	r7, r0, #4
{
   2f112:	4604      	mov	r4, r0
   2f114:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2f116:	210a      	movs	r1, #10
   2f118:	4638      	mov	r0, r7
   2f11a:	f7ff fe72 	bl	2ee02 <atomic_test_bit>
   2f11e:	bb88      	cbnz	r0, 2f184 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2f120:	2104      	movs	r1, #4
   2f122:	4620      	mov	r0, r4
   2f124:	f7ff fed4 	bl	2eed0 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2f128:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2f12a:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2f12e:	f7ff fedf 	bl	2eef0 <smp_create_pdu.constprop.0>
	if (!buf) {
   2f132:	4605      	mov	r5, r0
   2f134:	b1c0      	cbz	r0, 2f168 <legacy_pairing_confirm+0x5a>
   2f136:	2110      	movs	r1, #16
   2f138:	300c      	adds	r0, #12
   2f13a:	f000 fa74 	bl	2f626 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2f13e:	f106 0396 	add.w	r3, r6, #150	; 0x96
   2f142:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2f144:	9002      	str	r0, [sp, #8]
   2f146:	9301      	str	r3, [sp, #4]
   2f148:	9600      	str	r6, [sp, #0]
   2f14a:	f104 0310 	add.w	r3, r4, #16
   2f14e:	f104 0209 	add.w	r2, r4, #9
   2f152:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2f156:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2f15a:	f7ff ff7d 	bl	2f058 <smp_c1>
   2f15e:	4606      	mov	r6, r0
   2f160:	b128      	cbz	r0, 2f16e <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2f162:	4628      	mov	r0, r5
   2f164:	f7f1 fb14 	bl	20790 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2f168:	2008      	movs	r0, #8
}
   2f16a:	b005      	add	sp, #20
   2f16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2f16e:	4602      	mov	r2, r0
   2f170:	4629      	mov	r1, r5
   2f172:	4620      	mov	r0, r4
   2f174:	f7ff fe80 	bl	2ee78 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2f178:	4631      	mov	r1, r6
   2f17a:	4638      	mov	r0, r7
   2f17c:	f7ff fe68 	bl	2ee50 <atomic_clear_bit>
	return 0;
   2f180:	2000      	movs	r0, #0
   2f182:	e7f2      	b.n	2f16a <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2f184:	2100      	movs	r1, #0
   2f186:	4638      	mov	r0, r7
   2f188:	f7ff fea2 	bl	2eed0 <atomic_set_bit>
	return 0;
   2f18c:	e7f8      	b.n	2f180 <legacy_pairing_confirm+0x72>

0002f18e <bt_smp_request_ltk>:
{
   2f18e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f192:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2f194:	4604      	mov	r4, r0
   2f196:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2f19a:	f7ef fd03 	bl	1eba4 <smp_chan_get>
	if (!smp) {
   2f19e:	4605      	mov	r5, r0
   2f1a0:	2800      	cmp	r0, #0
   2f1a2:	d07c      	beq.n	2f29e <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2f1a4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2f1a8:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2f1aa:	f1b8 0f00 	cmp.w	r8, #0
   2f1ae:	d128      	bne.n	2f202 <bt_smp_request_ltk+0x74>
   2f1b0:	e9dd 3200 	ldrd	r3, r2, [sp]
   2f1b4:	4313      	orrs	r3, r2
   2f1b6:	d124      	bne.n	2f202 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2f1b8:	2103      	movs	r1, #3
   2f1ba:	4630      	mov	r0, r6
   2f1bc:	f7ff fe21 	bl	2ee02 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2f1c0:	b1f8      	cbz	r0, 2f202 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f1c2:	2101      	movs	r1, #1
   2f1c4:	4630      	mov	r0, r6
   2f1c6:	f7ff fe1c 	bl	2ee02 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2f1ca:	b1d0      	cbz	r0, 2f202 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2f1cc:	7d2c      	ldrb	r4, [r5, #20]
   2f1ce:	7b6b      	ldrb	r3, [r5, #13]
   2f1d0:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2f1d4:	429c      	cmp	r4, r3
   2f1d6:	bf28      	it	cs
   2f1d8:	461c      	movcs	r4, r3
   2f1da:	4622      	mov	r2, r4
   2f1dc:	4638      	mov	r0, r7
   2f1de:	f002 fc20 	bl	31a22 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2f1e2:	2c0f      	cmp	r4, #15
   2f1e4:	d805      	bhi.n	2f1f2 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2f1e6:	4641      	mov	r1, r8
   2f1e8:	f1c4 0210 	rsb	r2, r4, #16
   2f1ec:	1938      	adds	r0, r7, r4
   2f1ee:	f002 fc52 	bl	31a96 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2f1f2:	4630      	mov	r0, r6
   2f1f4:	2101      	movs	r1, #1
   2f1f6:	f7ff fe6b 	bl	2eed0 <atomic_set_bit>
		return true;
   2f1fa:	2001      	movs	r0, #1
}
   2f1fc:	b002      	add	sp, #8
   2f1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2f202:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   2f206:	b983      	cbnz	r3, 2f22a <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2f208:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2f20c:	4642      	mov	r2, r8
   2f20e:	2020      	movs	r0, #32
   2f210:	7a21      	ldrb	r1, [r4, #8]
   2f212:	f7f1 f8dd 	bl	203d0 <bt_keys_find>
   2f216:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   2f21a:	b930      	cbnz	r0, 2f22a <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2f21c:	4642      	mov	r2, r8
   2f21e:	2001      	movs	r0, #1
   2f220:	7a21      	ldrb	r1, [r4, #8]
   2f222:	f7f1 f8d5 	bl	203d0 <bt_keys_find>
   2f226:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2f22a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2f22e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   2f232:	f1b8 0f00 	cmp.w	r8, #0
   2f236:	d10c      	bne.n	2f252 <bt_smp_request_ltk+0xc4>
   2f238:	e9dd 3200 	ldrd	r3, r2, [sp]
   2f23c:	4313      	orrs	r3, r2
   2f23e:	d108      	bne.n	2f252 <bt_smp_request_ltk+0xc4>
   2f240:	b300      	cbz	r0, 2f284 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2f242:	89c3      	ldrh	r3, [r0, #14]
   2f244:	069a      	lsls	r2, r3, #26
   2f246:	d505      	bpl.n	2f254 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2f248:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f24a:	f100 011a 	add.w	r1, r0, #26
   2f24e:	4622      	mov	r2, r4
   2f250:	e7c4      	b.n	2f1dc <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2f252:	b1b8      	cbz	r0, 2f284 <bt_smp_request_ltk+0xf6>
   2f254:	89c3      	ldrh	r3, [r0, #14]
   2f256:	07db      	lsls	r3, r3, #31
   2f258:	d514      	bpl.n	2f284 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2f25a:	2208      	movs	r2, #8
   2f25c:	4669      	mov	r1, sp
   2f25e:	3040      	adds	r0, #64	; 0x40
   2f260:	f002 fbcf 	bl	31a02 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2f264:	b970      	cbnz	r0, 2f284 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2f266:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   2f26a:	2202      	movs	r2, #2
   2f26c:	a908      	add	r1, sp, #32
   2f26e:	3048      	adds	r0, #72	; 0x48
   2f270:	f002 fbc7 	bl	31a02 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2f274:	4680      	mov	r8, r0
   2f276:	b928      	cbnz	r0, 2f284 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2f278:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   2f27c:	7b0c      	ldrb	r4, [r1, #12]
   2f27e:	314a      	adds	r1, #74	; 0x4a
   2f280:	4622      	mov	r2, r4
   2f282:	e7ab      	b.n	2f1dc <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f284:	210f      	movs	r1, #15
   2f286:	4630      	mov	r0, r6
   2f288:	f7ff fdbb 	bl	2ee02 <atomic_test_bit>
   2f28c:	b120      	cbz	r0, 2f298 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2f28e:	2202      	movs	r2, #2
   2f290:	2106      	movs	r1, #6
   2f292:	4620      	mov	r0, r4
   2f294:	f7ed f96c 	bl	1c570 <bt_conn_security_changed>
	smp_reset(smp);
   2f298:	4628      	mov	r0, r5
   2f29a:	f7ff fec2 	bl	2f022 <smp_reset>
		return false;
   2f29e:	2000      	movs	r0, #0
   2f2a0:	e7ac      	b.n	2f1fc <bt_smp_request_ltk+0x6e>

0002f2a2 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2f2a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f2a6:	4770      	bx	lr

0002f2a8 <bt_smp_dhkey_ready>:
{
   2f2a8:	b570      	push	{r4, r5, r6, lr}
   2f2aa:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2f2ac:	2008      	movs	r0, #8
   2f2ae:	f7ef fc11 	bl	1ead4 <smp_find>
	if (smp) {
   2f2b2:	4605      	mov	r5, r0
   2f2b4:	b1e0      	cbz	r0, 2f2f0 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2f2b6:	1d06      	adds	r6, r0, #4
   2f2b8:	2108      	movs	r1, #8
   2f2ba:	4630      	mov	r0, r6
   2f2bc:	f7ff fdc8 	bl	2ee50 <atomic_clear_bit>
	if (!dhkey) {
   2f2c0:	b3bc      	cbz	r4, 2f332 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2f2c2:	2107      	movs	r1, #7
   2f2c4:	f7ff fdc4 	bl	2ee50 <atomic_clear_bit>
   2f2c8:	4623      	mov	r3, r4
   2f2ca:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2f2ce:	f104 0120 	add.w	r1, r4, #32
   2f2d2:	f853 0b04 	ldr.w	r0, [r3], #4
   2f2d6:	428b      	cmp	r3, r1
   2f2d8:	f842 0b04 	str.w	r0, [r2], #4
   2f2dc:	d1f9      	bne.n	2f2d2 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2f2de:	210a      	movs	r1, #10
   2f2e0:	4630      	mov	r0, r6
   2f2e2:	f7ff fd8e 	bl	2ee02 <atomic_test_bit>
   2f2e6:	b170      	cbz	r0, 2f306 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2f2e8:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2f2ea:	4630      	mov	r0, r6
   2f2ec:	f7ff fdf0 	bl	2eed0 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2f2f0:	2007      	movs	r0, #7
   2f2f2:	f7ef fbef 	bl	1ead4 <smp_find>
		if (smp) {
   2f2f6:	4604      	mov	r4, r0
   2f2f8:	b1e8      	cbz	r0, 2f336 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2f2fa:	f7ef fcad 	bl	1ec58 <smp_dhkey_generate>
			if (err) {
   2f2fe:	4601      	mov	r1, r0
   2f300:	b1c8      	cbz	r0, 2f336 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2f302:	4620      	mov	r0, r4
   2f304:	e012      	b.n	2f32c <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2f306:	2110      	movs	r1, #16
   2f308:	4630      	mov	r0, r6
   2f30a:	f7ff fd7a 	bl	2ee02 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2f30e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2f310:	2800      	cmp	r0, #0
   2f312:	d1ea      	bne.n	2f2ea <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2f314:	4630      	mov	r0, r6
   2f316:	f7ff fd74 	bl	2ee02 <atomic_test_bit>
   2f31a:	2800      	cmp	r0, #0
   2f31c:	d0e8      	beq.n	2f2f0 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2f31e:	4628      	mov	r0, r5
   2f320:	f7f0 f852 	bl	1f3c8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2f324:	4601      	mov	r1, r0
   2f326:	2800      	cmp	r0, #0
   2f328:	d0e2      	beq.n	2f2f0 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2f32a:	4628      	mov	r0, r5
   2f32c:	f7f0 fbe0 	bl	1faf0 <smp_error>
   2f330:	e7de      	b.n	2f2f0 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2f332:	210b      	movs	r1, #11
   2f334:	e7f9      	b.n	2f32a <bt_smp_dhkey_ready+0x82>
}
   2f336:	bd70      	pop	{r4, r5, r6, pc}

0002f338 <bt_smp_disconnected>:
{
   2f338:	b570      	push	{r4, r5, r6, lr}
   2f33a:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2f33c:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2f340:	f850 3b8c 	ldr.w	r3, [r0], #140
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f344:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2f346:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   2f34a:	f001 ffef 	bl	3132c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f34e:	2103      	movs	r1, #3
   2f350:	4620      	mov	r0, r4
   2f352:	f7ff fd56 	bl	2ee02 <atomic_test_bit>
   2f356:	b1a0      	cbz	r0, 2f382 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2f358:	2108      	movs	r1, #8
   2f35a:	4630      	mov	r0, r6
   2f35c:	f7f0 fb4a 	bl	1f9f4 <smp_pairing_complete>
	if (keys) {
   2f360:	b13d      	cbz	r5, 2f372 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2f362:	89eb      	ldrh	r3, [r5, #14]
   2f364:	b113      	cbz	r3, 2f36c <bt_smp_disconnected+0x34>
   2f366:	7b6b      	ldrb	r3, [r5, #13]
   2f368:	079b      	lsls	r3, r3, #30
   2f36a:	d502      	bpl.n	2f372 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2f36c:	4628      	mov	r0, r5
   2f36e:	f000 f840 	bl	2f3f2 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2f372:	4630      	mov	r0, r6
}
   2f374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f378:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
   2f37c:	2100      	movs	r1, #0
   2f37e:	f002 bb8a 	b.w	31a96 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f382:	2101      	movs	r1, #1
   2f384:	4620      	mov	r0, r4
   2f386:	f7ff fd3c 	bl	2ee02 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2f38a:	2800      	cmp	r0, #0
   2f38c:	d1e4      	bne.n	2f358 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f38e:	210f      	movs	r1, #15
   2f390:	4620      	mov	r0, r4
   2f392:	f7ff fd36 	bl	2ee02 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2f396:	2800      	cmp	r0, #0
   2f398:	d1de      	bne.n	2f358 <bt_smp_disconnected+0x20>
   2f39a:	e7e1      	b.n	2f360 <bt_smp_disconnected+0x28>

0002f39c <smp_ident_sent>:
{
   2f39c:	b508      	push	{r3, lr}
	if (!err) {
   2f39e:	b99a      	cbnz	r2, 2f3c8 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   2f3a0:	7883      	ldrb	r3, [r0, #2]
   2f3a2:	2b01      	cmp	r3, #1
   2f3a4:	d110      	bne.n	2f3c8 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2f3a6:	2106      	movs	r1, #6
   2f3a8:	f7fe fdad 	bl	2df06 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2f3ac:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2f3b0:	f023 0301 	bic.w	r3, r3, #1
   2f3b4:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2f3b8:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   2f3bc:	b921      	cbnz	r1, 2f3c8 <smp_ident_sent+0x2c>
}
   2f3be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2f3c2:	38ec      	subs	r0, #236	; 0xec
   2f3c4:	f7f0 bb16 	b.w	1f9f4 <smp_pairing_complete>
}
   2f3c8:	bd08      	pop	{r3, pc}

0002f3ca <bt_keys_get_type>:
{
   2f3ca:	b570      	push	{r4, r5, r6, lr}
   2f3cc:	4604      	mov	r4, r0
   2f3ce:	460d      	mov	r5, r1
   2f3d0:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2f3d2:	f7f0 fffd 	bl	203d0 <bt_keys_find>
	if (keys) {
   2f3d6:	b938      	cbnz	r0, 2f3e8 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2f3d8:	4631      	mov	r1, r6
   2f3da:	4628      	mov	r0, r5
   2f3dc:	f7f0 ffc2 	bl	20364 <bt_keys_get_addr>
	if (!keys) {
   2f3e0:	b110      	cbz	r0, 2f3e8 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   2f3e2:	89c3      	ldrh	r3, [r0, #14]
   2f3e4:	431c      	orrs	r4, r3
   2f3e6:	81c4      	strh	r4, [r0, #14]
}
   2f3e8:	bd70      	pop	{r4, r5, r6, pc}

0002f3ea <bt_keys_add_type>:
	keys->keys |= type;
   2f3ea:	89c3      	ldrh	r3, [r0, #14]
   2f3ec:	4319      	orrs	r1, r3
   2f3ee:	81c1      	strh	r1, [r0, #14]
}
   2f3f0:	4770      	bx	lr

0002f3f2 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2f3f2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2f3f4:	7a03      	ldrb	r3, [r0, #8]
{
   2f3f6:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f3f8:	075b      	lsls	r3, r3, #29
   2f3fa:	d501      	bpl.n	2f400 <bt_keys_clear+0xe>
		bt_id_del(keys);
   2f3fc:	f7eb fd94 	bl	1af28 <bt_id_del>
   2f400:	4620      	mov	r0, r4
		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   2f402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f406:	225c      	movs	r2, #92	; 0x5c
   2f408:	2100      	movs	r1, #0
   2f40a:	f002 bb44 	b.w	31a96 <memset>

0002f40e <sys_memcpy_swap>:
	psrc += length - 1;
   2f40e:	1e53      	subs	r3, r2, #1
   2f410:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2f412:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2f414:	f811 3901 	ldrb.w	r3, [r1], #-1
   2f418:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2f41c:	4290      	cmp	r0, r2
   2f41e:	d1f9      	bne.n	2f414 <sys_memcpy_swap+0x6>
}
   2f420:	4770      	bx	lr

0002f422 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2f422:	b510      	push	{r4, lr}
   2f424:	1e43      	subs	r3, r0, #1
   2f426:	f100 0210 	add.w	r2, r0, #16
   2f42a:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2f42c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2f430:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2f434:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2f436:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2f438:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2f43a:	d1f7      	bne.n	2f42c <sys_mem_swap.constprop.0+0xa>
	}
}
   2f43c:	bd10      	pop	{r4, pc}

0002f43e <bt_crypto_aes_cmac>:
{
   2f43e:	b570      	push	{r4, r5, r6, lr}
   2f440:	b0c2      	sub	sp, #264	; 0x108
   2f442:	460d      	mov	r5, r1
   2f444:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2f446:	4601      	mov	r1, r0
   2f448:	aa16      	add	r2, sp, #88	; 0x58
   2f44a:	4668      	mov	r0, sp
{
   2f44c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2f44e:	f7fc f837 	bl	2b4c0 <tc_cmac_setup>
   2f452:	b918      	cbnz	r0, 2f45c <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2f454:	f06f 0004 	mvn.w	r0, #4
}
   2f458:	b042      	add	sp, #264	; 0x108
   2f45a:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2f45c:	4632      	mov	r2, r6
   2f45e:	4629      	mov	r1, r5
   2f460:	4668      	mov	r0, sp
   2f462:	f7fc f858 	bl	2b516 <tc_cmac_update>
   2f466:	2800      	cmp	r0, #0
   2f468:	d0f4      	beq.n	2f454 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2f46a:	4669      	mov	r1, sp
   2f46c:	4620      	mov	r0, r4
   2f46e:	f7fc f8bc 	bl	2b5ea <tc_cmac_final>
   2f472:	2800      	cmp	r0, #0
   2f474:	d0ee      	beq.n	2f454 <bt_crypto_aes_cmac+0x16>
	return 0;
   2f476:	2000      	movs	r0, #0
   2f478:	e7ee      	b.n	2f458 <bt_crypto_aes_cmac+0x1a>

0002f47a <bt_crypto_f4>:
{
   2f47a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f47c:	460e      	mov	r6, r1
   2f47e:	4614      	mov	r4, r2
   2f480:	461d      	mov	r5, r3
   2f482:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2f484:	4601      	mov	r1, r0
   2f486:	2220      	movs	r2, #32
   2f488:	a805      	add	r0, sp, #20
{
   2f48a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2f48c:	f7ff ffbf 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2f490:	2220      	movs	r2, #32
   2f492:	4631      	mov	r1, r6
   2f494:	a80d      	add	r0, sp, #52	; 0x34
   2f496:	f7ff ffba 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2f49a:	4621      	mov	r1, r4
   2f49c:	2210      	movs	r2, #16
   2f49e:	a801      	add	r0, sp, #4
	m[64] = z;
   2f4a0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2f4a4:	f7ff ffb3 	bl	2f40e <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2f4a8:	463b      	mov	r3, r7
   2f4aa:	2241      	movs	r2, #65	; 0x41
   2f4ac:	a905      	add	r1, sp, #20
   2f4ae:	a801      	add	r0, sp, #4
   2f4b0:	f7ff ffc5 	bl	2f43e <bt_crypto_aes_cmac>
	if (err) {
   2f4b4:	4604      	mov	r4, r0
   2f4b6:	b910      	cbnz	r0, 2f4be <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2f4b8:	4638      	mov	r0, r7
   2f4ba:	f7ff ffb2 	bl	2f422 <sys_mem_swap.constprop.0>
}
   2f4be:	4620      	mov	r0, r4
   2f4c0:	b017      	add	sp, #92	; 0x5c
   2f4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f4c4 <bt_crypto_f6>:
{
   2f4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f4c8:	4616      	mov	r6, r2
   2f4ca:	461d      	mov	r5, r3
   2f4cc:	b097      	sub	sp, #92	; 0x5c
   2f4ce:	4604      	mov	r4, r0
   2f4d0:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2f4d4:	2210      	movs	r2, #16
   2f4d6:	a805      	add	r0, sp, #20
{
   2f4d8:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2f4da:	f7ff ff98 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2f4de:	2210      	movs	r2, #16
   2f4e0:	4631      	mov	r1, r6
   2f4e2:	a809      	add	r0, sp, #36	; 0x24
   2f4e4:	f7ff ff93 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2f4e8:	2210      	movs	r2, #16
   2f4ea:	4629      	mov	r1, r5
   2f4ec:	a80d      	add	r0, sp, #52	; 0x34
   2f4ee:	f7ff ff8e 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2f4f2:	2203      	movs	r2, #3
   2f4f4:	991e      	ldr	r1, [sp, #120]	; 0x78
   2f4f6:	a811      	add	r0, sp, #68	; 0x44
   2f4f8:	f7ff ff89 	bl	2f40e <sys_memcpy_swap>
	m[51] = a1->type;
   2f4fc:	4649      	mov	r1, r9
   2f4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2f502:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2f506:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2f50a:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f50c:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2f50e:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f510:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2f512:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2f516:	f7ff ff7a 	bl	2f40e <sys_memcpy_swap>
	m[58] = a2->type;
   2f51a:	4641      	mov	r1, r8
   2f51c:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f520:	2206      	movs	r2, #6
	m[58] = a2->type;
   2f522:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2f526:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f52a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2f52e:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2f532:	888b      	ldrh	r3, [r1, #4]
   2f534:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2f538:	f7ff ff69 	bl	2f40e <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2f53c:	4621      	mov	r1, r4
   2f53e:	2210      	movs	r2, #16
   2f540:	a801      	add	r0, sp, #4
   2f542:	f7ff ff64 	bl	2f40e <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2f546:	463b      	mov	r3, r7
   2f548:	2241      	movs	r2, #65	; 0x41
   2f54a:	a905      	add	r1, sp, #20
   2f54c:	a801      	add	r0, sp, #4
   2f54e:	f7ff ff76 	bl	2f43e <bt_crypto_aes_cmac>
	if (err) {
   2f552:	4604      	mov	r4, r0
   2f554:	b910      	cbnz	r0, 2f55c <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2f556:	4638      	mov	r0, r7
   2f558:	f7ff ff63 	bl	2f422 <sys_mem_swap.constprop.0>
}
   2f55c:	4620      	mov	r0, r4
   2f55e:	b017      	add	sp, #92	; 0x5c
   2f560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002f564 <fixed_data_unref>:
}
   2f564:	4770      	bx	lr

0002f566 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2f566:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2f568:	6849      	ldr	r1, [r1, #4]
   2f56a:	6809      	ldr	r1, [r1, #0]
   2f56c:	f7f1 b87e 	b.w	2066c <net_buf_alloc_len>

0002f570 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2f570:	f7f6 bb7c 	b.w	25c6c <z_impl_k_queue_get>

0002f574 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2f574:	6883      	ldr	r3, [r0, #8]
   2f576:	440b      	add	r3, r1
   2f578:	6003      	str	r3, [r0, #0]
}
   2f57a:	4770      	bx	lr

0002f57c <net_buf_slist_put>:
	__asm__ volatile(
   2f57c:	f04f 0320 	mov.w	r3, #32
   2f580:	f3ef 8211 	mrs	r2, BASEPRI
   2f584:	f383 8812 	msr	BASEPRI_MAX, r3
   2f588:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2f58c:	2300      	movs	r3, #0
   2f58e:	600b      	str	r3, [r1, #0]
	return list->tail;
   2f590:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   2f592:	b933      	cbnz	r3, 2f5a2 <net_buf_slist_put+0x26>
	list->head = node;
   2f594:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   2f598:	f382 8811 	msr	BASEPRI, r2
   2f59c:	f3bf 8f6f 	isb	sy
}
   2f5a0:	4770      	bx	lr
	parent->next = child;
   2f5a2:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2f5a4:	6041      	str	r1, [r0, #4]
}
   2f5a6:	e7f7      	b.n	2f598 <net_buf_slist_put+0x1c>

0002f5a8 <net_buf_slist_get>:
{
   2f5a8:	4603      	mov	r3, r0
   2f5aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   2f5ac:	f04f 0220 	mov.w	r2, #32
   2f5b0:	f3ef 8111 	mrs	r1, BASEPRI
   2f5b4:	f382 8812 	msr	BASEPRI_MAX, r2
   2f5b8:	f3bf 8f6f 	isb	sy
	return list->head;
   2f5bc:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2f5be:	b128      	cbz	r0, 2f5cc <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f5c0:	685c      	ldr	r4, [r3, #4]
	return node->next;
   2f5c2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f5c4:	42a0      	cmp	r0, r4
	list->head = node;
   2f5c6:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2f5c8:	bf08      	it	eq
   2f5ca:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2f5cc:	f381 8811 	msr	BASEPRI, r1
   2f5d0:	f3bf 8f6f 	isb	sy
}
   2f5d4:	bd10      	pop	{r4, pc}

0002f5d6 <net_buf_put>:
	k_fifo_put(fifo, buf);
   2f5d6:	f001 bdc0 	b.w	3115a <k_queue_append>

0002f5da <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2f5da:	7a02      	ldrb	r2, [r0, #8]
   2f5dc:	3201      	adds	r2, #1
   2f5de:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2f5e0:	4770      	bx	lr

0002f5e2 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2f5e2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2f5e4:	4618      	mov	r0, r3
   2f5e6:	685b      	ldr	r3, [r3, #4]
   2f5e8:	2b00      	cmp	r3, #0
   2f5ea:	d1fb      	bne.n	2f5e4 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2f5ec:	4770      	bx	lr

0002f5ee <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2f5ee:	6842      	ldr	r2, [r0, #4]
{
   2f5f0:	b510      	push	{r4, lr}
	if (parent->frags) {
   2f5f2:	b12a      	cbz	r2, 2f600 <net_buf_frag_insert+0x12>
   2f5f4:	460b      	mov	r3, r1
	while (buf->frags) {
   2f5f6:	461c      	mov	r4, r3
   2f5f8:	685b      	ldr	r3, [r3, #4]
   2f5fa:	2b00      	cmp	r3, #0
   2f5fc:	d1fb      	bne.n	2f5f6 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2f5fe:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2f600:	6041      	str	r1, [r0, #4]
}
   2f602:	bd10      	pop	{r4, pc}

0002f604 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2f604:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2f606:	4604      	mov	r4, r0
   2f608:	b920      	cbnz	r0, 2f614 <net_buf_frag_add+0x10>
		return net_buf_ref(frag);
   2f60a:	4608      	mov	r0, r1
	buf->ref++;
   2f60c:	7a0b      	ldrb	r3, [r1, #8]
   2f60e:	3301      	adds	r3, #1
   2f610:	720b      	strb	r3, [r1, #8]
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2f612:	bd10      	pop	{r4, pc}
   2f614:	4603      	mov	r3, r0
	while (buf->frags) {
   2f616:	4618      	mov	r0, r3
   2f618:	685b      	ldr	r3, [r3, #4]
   2f61a:	2b00      	cmp	r3, #0
   2f61c:	d1fb      	bne.n	2f616 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2f61e:	f7ff ffe6 	bl	2f5ee <net_buf_frag_insert>
   2f622:	4620      	mov	r0, r4
   2f624:	e7f5      	b.n	2f612 <net_buf_frag_add+0xe>

0002f626 <net_buf_simple_add>:
	return buf->data + buf->len;
   2f626:	8883      	ldrh	r3, [r0, #4]
   2f628:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2f62a:	4419      	add	r1, r3
   2f62c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2f62e:	18d0      	adds	r0, r2, r3
   2f630:	4770      	bx	lr

0002f632 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2f632:	b430      	push	{r4, r5}
   2f634:	8884      	ldrh	r4, [r0, #4]
   2f636:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2f638:	18a3      	adds	r3, r4, r2
   2f63a:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f63c:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2f63e:	bc30      	pop	{r4, r5}
   2f640:	f002 b9ef 	b.w	31a22 <memcpy>

0002f644 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2f644:	b510      	push	{r4, lr}
   2f646:	8883      	ldrh	r3, [r0, #4]
   2f648:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2f64a:	1c5c      	adds	r4, r3, #1
   2f64c:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2f64e:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2f650:	18d0      	adds	r0, r2, r3
   2f652:	bd10      	pop	{r4, pc}

0002f654 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2f654:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2f656:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2f658:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2f65a:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2f65c:	4411      	add	r1, r2
	buf->data -= len;
   2f65e:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2f660:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2f662:	4770      	bx	lr

0002f664 <net_buf_simple_push_u8>:
	buf->data -= len;
   2f664:	6802      	ldr	r2, [r0, #0]
   2f666:	1e53      	subs	r3, r2, #1
   2f668:	6003      	str	r3, [r0, #0]
	buf->len += len;
   2f66a:	8883      	ldrh	r3, [r0, #4]
   2f66c:	3301      	adds	r3, #1
   2f66e:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   2f670:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   2f674:	4770      	bx	lr

0002f676 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2f676:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2f678:	8882      	ldrh	r2, [r0, #4]
   2f67a:	1a52      	subs	r2, r2, r1
   2f67c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2f67e:	6800      	ldr	r0, [r0, #0]
   2f680:	4408      	add	r0, r1
   2f682:	6018      	str	r0, [r3, #0]
}
   2f684:	4770      	bx	lr

0002f686 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2f686:	4603      	mov	r3, r0
	void *data = buf->data;
   2f688:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2f68a:	889a      	ldrh	r2, [r3, #4]
   2f68c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2f68e:	4401      	add	r1, r0
	buf->len -= len;
   2f690:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2f692:	6019      	str	r1, [r3, #0]

	return data;
}
   2f694:	4770      	bx	lr

0002f696 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2f696:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f698:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f69a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2f69c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2f69e:	f7ff ffea 	bl	2f676 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2f6a2:	4620      	mov	r0, r4
   2f6a4:	bd10      	pop	{r4, pc}

0002f6a6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2f6a6:	6802      	ldr	r2, [r0, #0]
   2f6a8:	6880      	ldr	r0, [r0, #8]
}
   2f6aa:	1a10      	subs	r0, r2, r0
   2f6ac:	4770      	bx	lr

0002f6ae <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f6ae:	8883      	ldrh	r3, [r0, #4]
   2f6b0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2f6b2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2f6b4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2f6b6:	6803      	ldr	r3, [r0, #0]
   2f6b8:	1a5b      	subs	r3, r3, r1
}
   2f6ba:	1ad0      	subs	r0, r2, r3
   2f6bc:	4770      	bx	lr

0002f6be <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f6be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f6c0:	ab0b      	add	r3, sp, #44	; 0x2c
   2f6c2:	9305      	str	r3, [sp, #20]
   2f6c4:	9303      	str	r3, [sp, #12]
   2f6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f6c8:	2201      	movs	r2, #1
   2f6ca:	9302      	str	r3, [sp, #8]
   2f6cc:	2300      	movs	r3, #0
   2f6ce:	4618      	mov	r0, r3
   2f6d0:	e9cd 3300 	strd	r3, r3, [sp]
   2f6d4:	f7e0 f822 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2f6d8:	b007      	add	sp, #28
   2f6da:	f85d fb04 	ldr.w	pc, [sp], #4

0002f6de <adc_context_on_timer_expired>:
{
   2f6de:	b410      	push	{r4}
   2f6e0:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2f6e2:	3808      	subs	r0, #8
   2f6e4:	e8d0 2fef 	ldaex	r2, [r0]
   2f6e8:	1c51      	adds	r1, r2, #1
   2f6ea:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2f6ee:	2c00      	cmp	r4, #0
   2f6f0:	d1f8      	bne.n	2f6e4 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2f6f2:	b912      	cbnz	r2, 2f6fa <adc_context_on_timer_expired+0x1c>
}
   2f6f4:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2f6f6:	f7f1 b8f3 	b.w	208e0 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2f6fa:	f06f 020f 	mvn.w	r2, #15
}
   2f6fe:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2f700:	669a      	str	r2, [r3, #104]	; 0x68
}
   2f702:	4770      	bx	lr

0002f704 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2f704:	220c      	movs	r2, #12
   2f706:	6903      	ldr	r3, [r0, #16]
   2f708:	b2c9      	uxtb	r1, r1
   2f70a:	fb01 3302 	mla	r3, r1, r2, r3
   2f70e:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
   2f710:	f000 0007 	and.w	r0, r0, #7
   2f714:	4770      	bx	lr

0002f716 <set_on_state>:
	__asm__ volatile(
   2f716:	f04f 0320 	mov.w	r3, #32
   2f71a:	f3ef 8211 	mrs	r2, BASEPRI
   2f71e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f722:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2f726:	6803      	ldr	r3, [r0, #0]
   2f728:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f72c:	f043 0302 	orr.w	r3, r3, #2
   2f730:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2f732:	f382 8811 	msr	BASEPRI, r2
   2f736:	f3bf 8f6f 	isb	sy
}
   2f73a:	4770      	bx	lr

0002f73c <stop>:
{
   2f73c:	b570      	push	{r4, r5, r6, lr}
   2f73e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   2f740:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   2f742:	f04f 0420 	mov.w	r4, #32
   2f746:	f3ef 8511 	mrs	r5, BASEPRI
   2f74a:	f384 8812 	msr	BASEPRI_MAX, r4
   2f74e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f752:	260c      	movs	r6, #12
   2f754:	fb06 3401 	mla	r4, r6, r1, r3
   2f758:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2f75a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2f75e:	d008      	beq.n	2f772 <stop+0x36>
   2f760:	42a2      	cmp	r2, r4
   2f762:	d006      	beq.n	2f772 <stop+0x36>
	__asm__ volatile(
   2f764:	f385 8811 	msr	BASEPRI, r5
   2f768:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   2f76c:	f04f 30ff 	mov.w	r0, #4294967295
}
   2f770:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2f772:	2201      	movs	r2, #1
   2f774:	4371      	muls	r1, r6
   2f776:	440b      	add	r3, r1
   2f778:	679a      	str	r2, [r3, #120]	; 0x78
   2f77a:	f385 8811 	msr	BASEPRI, r5
   2f77e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2f782:	6843      	ldr	r3, [r0, #4]
   2f784:	440b      	add	r3, r1
   2f786:	685b      	ldr	r3, [r3, #4]
   2f788:	4798      	blx	r3
	return 0;
   2f78a:	2000      	movs	r0, #0
   2f78c:	e7f0      	b.n	2f770 <stop+0x34>

0002f78e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2f78e:	2280      	movs	r2, #128	; 0x80
   2f790:	f7ff bfd4 	b.w	2f73c <stop>

0002f794 <async_start>:
{
   2f794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f796:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2f798:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2f79a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2f79c:	f04f 0520 	mov.w	r5, #32
   2f7a0:	f3ef 8611 	mrs	r6, BASEPRI
   2f7a4:	f385 8812 	msr	BASEPRI_MAX, r5
   2f7a8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2f7ac:	250c      	movs	r5, #12
   2f7ae:	4369      	muls	r1, r5
   2f7b0:	440c      	add	r4, r1
   2f7b2:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2f7b4:	f005 0c07 	and.w	ip, r5, #7
   2f7b8:	f1bc 0f01 	cmp.w	ip, #1
   2f7bc:	d10b      	bne.n	2f7d6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2f7be:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
   2f7c0:	f386 8811 	msr	BASEPRI, r6
   2f7c4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2f7c8:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   2f7cc:	6843      	ldr	r3, [r0, #4]
   2f7ce:	585b      	ldr	r3, [r3, r1]
   2f7d0:	4798      	blx	r3
	return 0;
   2f7d2:	2000      	movs	r0, #0
}
   2f7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2f7d6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2f7da:	42af      	cmp	r7, r5
   2f7dc:	f386 8811 	msr	BASEPRI, r6
   2f7e0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2f7e4:	bf0c      	ite	eq
   2f7e6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2f7ea:	f04f 30ff 	movne.w	r0, #4294967295
   2f7ee:	e7f1      	b.n	2f7d4 <async_start+0x40>

0002f7f0 <api_start>:
{
   2f7f0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2f7f2:	2480      	movs	r4, #128	; 0x80
   2f7f4:	9400      	str	r4, [sp, #0]
   2f7f6:	f7ff ffcd 	bl	2f794 <async_start>
}
   2f7fa:	b002      	add	sp, #8
   2f7fc:	bd10      	pop	{r4, pc}

0002f7fe <onoff_started_callback>:
{
   2f7fe:	b410      	push	{r4}
	notify(mgr, 0);
   2f800:	241c      	movs	r4, #28
	return &data->mgr[type];
   2f802:	6900      	ldr	r0, [r0, #16]
   2f804:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2f806:	fb03 0004 	mla	r0, r3, r4, r0
   2f80a:	2100      	movs	r1, #0
}
   2f80c:	bc10      	pop	{r4}
	notify(mgr, 0);
   2f80e:	4710      	bx	r2

0002f810 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2f810:	2003      	movs	r0, #3
   2f812:	f7f4 b845 	b.w	238a0 <nrfx_clock_start>

0002f816 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2f816:	2002      	movs	r0, #2
   2f818:	f7f4 b842 	b.w	238a0 <nrfx_clock_start>

0002f81c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2f81c:	2000      	movs	r0, #0
   2f81e:	f7f4 b83f 	b.w	238a0 <nrfx_clock_start>

0002f822 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2f822:	2003      	movs	r0, #3
   2f824:	f000 bd10 	b.w	30248 <nrfx_clock_stop>

0002f828 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2f828:	2002      	movs	r0, #2
   2f82a:	f000 bd0d 	b.w	30248 <nrfx_clock_stop>

0002f82e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2f82e:	2000      	movs	r0, #0
   2f830:	f000 bd0a 	b.w	30248 <nrfx_clock_stop>

0002f834 <blocking_start_callback>:
{
   2f834:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2f836:	f7f6 ba4d 	b.w	25cd4 <z_impl_k_sem_give>

0002f83a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f83a:	6843      	ldr	r3, [r0, #4]
}
   2f83c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f83e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2f840:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2f842:	600b      	str	r3, [r1, #0]
}
   2f844:	4770      	bx	lr

0002f846 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f846:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2f848:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f84c:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2f84e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2f852:	6098      	str	r0, [r3, #8]
}
   2f854:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f856:	60d9      	str	r1, [r3, #12]
   2f858:	4770      	bx	lr

0002f85a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f85a:	6843      	ldr	r3, [r0, #4]
}
   2f85c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f85e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2f860:	6099      	str	r1, [r3, #8]
}
   2f862:	4770      	bx	lr

0002f864 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f864:	6843      	ldr	r3, [r0, #4]
}
   2f866:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f868:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2f86a:	60d9      	str	r1, [r3, #12]
}
   2f86c:	4770      	bx	lr

0002f86e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2f86e:	6843      	ldr	r3, [r0, #4]
   2f870:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2f872:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2f874:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2f878:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2f87a:	6090      	str	r0, [r2, #8]
}
   2f87c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2f87e:	60d3      	str	r3, [r2, #12]
   2f880:	4770      	bx	lr

0002f882 <gpio_nrfx_manage_callback>:
{
   2f882:	b510      	push	{r4, lr}
	return port->data;
   2f884:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2f886:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2f888:	b1f8      	cbz	r0, 2f8ca <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f88a:	4288      	cmp	r0, r1
   2f88c:	d119      	bne.n	2f8c2 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   2f88e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   2f890:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f892:	42a1      	cmp	r1, r4
	list->head = node;
   2f894:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2f896:	d100      	bne.n	2f89a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f898:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2f89a:	2000      	movs	r0, #0
   2f89c:	6008      	str	r0, [r1, #0]
	if (set) {
   2f89e:	b12a      	cbz	r2, 2f8ac <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   2f8a0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2f8a2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f8a4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2f8a6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f8a8:	b902      	cbnz	r2, 2f8ac <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2f8aa:	6099      	str	r1, [r3, #8]
	return 0;
   2f8ac:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2f8ae:	e010      	b.n	2f8d2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f8b0:	4281      	cmp	r1, r0
   2f8b2:	d106      	bne.n	2f8c2 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2f8b4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2f8b6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f8b8:	6898      	ldr	r0, [r3, #8]
   2f8ba:	4281      	cmp	r1, r0
   2f8bc:	d1ed      	bne.n	2f89a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2f8be:	609c      	str	r4, [r3, #8]
}
   2f8c0:	e7eb      	b.n	2f89a <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2f8c2:	4604      	mov	r4, r0
   2f8c4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f8c6:	2800      	cmp	r0, #0
   2f8c8:	d1f2      	bne.n	2f8b0 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2f8ca:	2a00      	cmp	r2, #0
   2f8cc:	d1e8      	bne.n	2f8a0 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   2f8ce:	f06f 0015 	mvn.w	r0, #21
}
   2f8d2:	bd10      	pop	{r4, pc}

0002f8d4 <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2f8d4:	2200      	movs	r2, #0
   2f8d6:	2101      	movs	r1, #1
   2f8d8:	200a      	movs	r0, #10
   2f8da:	f7e1 bd99 	b.w	11410 <z_arm_irq_priority_set>

0002f8de <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2f8de:	b510      	push	{r4, lr}
	while (*count) {
   2f8e0:	680b      	ldr	r3, [r1, #0]
   2f8e2:	b913      	cbnz	r3, 2f8ea <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2f8e4:	4618      	mov	r0, r3
	*buf_len = 0;
   2f8e6:	6013      	str	r3, [r2, #0]
	return NULL;
   2f8e8:	e005      	b.n	2f8f6 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2f8ea:	6803      	ldr	r3, [r0, #0]
   2f8ec:	685c      	ldr	r4, [r3, #4]
   2f8ee:	b11c      	cbz	r4, 2f8f8 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2f8f0:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2f8f2:	6803      	ldr	r3, [r0, #0]
   2f8f4:	6818      	ldr	r0, [r3, #0]
}
   2f8f6:	bd10      	pop	{r4, pc}
		++(*current);
   2f8f8:	3308      	adds	r3, #8
   2f8fa:	6003      	str	r3, [r0, #0]
		--(*count);
   2f8fc:	680b      	ldr	r3, [r1, #0]
   2f8fe:	3b01      	subs	r3, #1
   2f900:	600b      	str	r3, [r1, #0]
   2f902:	e7ed      	b.n	2f8e0 <spi_context_get_next_buf.constprop.0+0x2>

0002f904 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f904:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f906:	ab0b      	add	r3, sp, #44	; 0x2c
   2f908:	9305      	str	r3, [sp, #20]
   2f90a:	9303      	str	r3, [sp, #12]
   2f90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f90e:	2201      	movs	r2, #1
   2f910:	9302      	str	r3, [sp, #8]
   2f912:	2300      	movs	r3, #0
   2f914:	4618      	mov	r0, r3
   2f916:	e9cd 3300 	strd	r3, r3, [sp]
   2f91a:	f7df feff 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2f91e:	b007      	add	sp, #28
   2f920:	f85d fb04 	ldr.w	pc, [sp], #4

0002f924 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   2f924:	4603      	mov	r3, r0
   2f926:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f928:	7919      	ldrb	r1, [r3, #4]
   2f92a:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   2f92c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2f92e:	fa03 f101 	lsl.w	r1, r3, r1
   2f932:	6903      	ldr	r3, [r0, #16]
   2f934:	681b      	ldr	r3, [r3, #0]
   2f936:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2f938:	bf18      	it	ne
   2f93a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2f93e:	b112      	cbz	r2, 2f946 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   2f940:	6883      	ldr	r3, [r0, #8]
   2f942:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2f944:	4718      	bx	r3
   2f946:	6883      	ldr	r3, [r0, #8]
   2f948:	691b      	ldr	r3, [r3, #16]
   2f94a:	e7fb      	b.n	2f944 <gpio_pin_set_dt.isra.0+0x20>

0002f94c <_spi_context_cs_control>:
{
   2f94c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2f94e:	6803      	ldr	r3, [r0, #0]
{
   2f950:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2f952:	b1e3      	cbz	r3, 2f98e <_spi_context_cs_control+0x42>
   2f954:	6898      	ldr	r0, [r3, #8]
   2f956:	b1d0      	cbz	r0, 2f98e <_spi_context_cs_control+0x42>
   2f958:	6805      	ldr	r5, [r0, #0]
   2f95a:	b1c5      	cbz	r5, 2f98e <_spi_context_cs_control+0x42>
		if (on) {
   2f95c:	b149      	cbz	r1, 2f972 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2f95e:	2101      	movs	r1, #1
   2f960:	f7ff ffe0 	bl	2f924 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2f964:	6823      	ldr	r3, [r4, #0]
   2f966:	689b      	ldr	r3, [r3, #8]
   2f968:	6898      	ldr	r0, [r3, #8]
}
   2f96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2f96e:	f001 be80 	b.w	31672 <z_impl_k_busy_wait>
			if (!force_off &&
   2f972:	b912      	cbnz	r2, 2f97a <_spi_context_cs_control+0x2e>
   2f974:	889b      	ldrh	r3, [r3, #4]
   2f976:	04db      	lsls	r3, r3, #19
   2f978:	d409      	bmi.n	2f98e <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2f97a:	6880      	ldr	r0, [r0, #8]
   2f97c:	f001 fe79 	bl	31672 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2f980:	6823      	ldr	r3, [r4, #0]
   2f982:	2100      	movs	r1, #0
   2f984:	6898      	ldr	r0, [r3, #8]
}
   2f986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2f98a:	f7ff bfcb 	b.w	2f924 <gpio_pin_set_dt.isra.0>
}
   2f98e:	bd38      	pop	{r3, r4, r5, pc}

0002f990 <spi_context_unlock_unconditionally>:
{
   2f990:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2f992:	2201      	movs	r2, #1
   2f994:	2100      	movs	r1, #0
{
   2f996:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2f998:	f7ff ffd8 	bl	2f94c <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2f99c:	69a3      	ldr	r3, [r4, #24]
   2f99e:	b933      	cbnz	r3, 2f9ae <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2f9a0:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2f9a2:	f104 0010 	add.w	r0, r4, #16
}
   2f9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2f9aa:	f7f6 b993 	b.w	25cd4 <z_impl_k_sem_give>
   2f9ae:	bd10      	pop	{r4, pc}

0002f9b0 <spi_nrfx_release>:
{
   2f9b0:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2f9b2:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2f9b4:	6803      	ldr	r3, [r0, #0]
   2f9b6:	428b      	cmp	r3, r1
   2f9b8:	d106      	bne.n	2f9c8 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2f9ba:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2f9be:	b934      	cbnz	r4, 2f9ce <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2f9c0:	f7ff ffe6 	bl	2f990 <spi_context_unlock_unconditionally>
	return 0;
   2f9c4:	4620      	mov	r0, r4
}
   2f9c6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2f9c8:	f06f 0015 	mvn.w	r0, #21
   2f9cc:	e7fb      	b.n	2f9c6 <spi_nrfx_release+0x16>
		return -EBUSY;
   2f9ce:	f06f 000f 	mvn.w	r0, #15
   2f9d2:	e7f8      	b.n	2f9c6 <spi_nrfx_release+0x16>

0002f9d4 <k_sem_give>:
   2f9d4:	f7f6 b97e 	b.w	25cd4 <z_impl_k_sem_give>

0002f9d8 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2f9d8:	b918      	cbnz	r0, 2f9e2 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2f9da:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2f9de:	f7ff bff9 	b.w	2f9d4 <k_sem_give>
}
   2f9e2:	4770      	bx	lr

0002f9e4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f9e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f9e6:	ab0b      	add	r3, sp, #44	; 0x2c
   2f9e8:	9305      	str	r3, [sp, #20]
   2f9ea:	9303      	str	r3, [sp, #12]
   2f9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f9ee:	9302      	str	r3, [sp, #8]
   2f9f0:	2300      	movs	r3, #0
   2f9f2:	4618      	mov	r0, r3
   2f9f4:	e9cd 3300 	strd	r3, r3, [sp]
   2f9f8:	f7df fe90 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2f9fc:	b007      	add	sp, #28
   2f9fe:	f85d fb04 	ldr.w	pc, [sp], #4

0002fa02 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2fa02:	f04f 32ff 	mov.w	r2, #4294967295
   2fa06:	f04f 33ff 	mov.w	r3, #4294967295
   2fa0a:	3018      	adds	r0, #24
   2fa0c:	f7f6 b988 	b.w	25d20 <z_impl_k_sem_take>

0002fa10 <qspi_trans_lock.isra.0>:
   2fa10:	f04f 32ff 	mov.w	r2, #4294967295
   2fa14:	f04f 33ff 	mov.w	r3, #4294967295
   2fa18:	f7f6 b982 	b.w	25d20 <z_impl_k_sem_take>

0002fa1c <qspi_nor_write_protection_set>:
{
   2fa1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2fa1e:	2200      	movs	r2, #0
   2fa20:	4291      	cmp	r1, r2
   2fa22:	bf0c      	ite	eq
   2fa24:	2306      	moveq	r3, #6
   2fa26:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2fa28:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2fa2a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2fa2e:	9203      	str	r2, [sp, #12]
   2fa30:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2fa34:	f7f1 ff4c 	bl	218d0 <qspi_send_cmd>
		ret = -EIO;
   2fa38:	2800      	cmp	r0, #0
}
   2fa3a:	bf18      	it	ne
   2fa3c:	f06f 0004 	mvnne.w	r0, #4
   2fa40:	b005      	add	sp, #20
   2fa42:	f85d fb04 	ldr.w	pc, [sp], #4

0002fa46 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2fa46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2fa48:	23ff      	movs	r3, #255	; 0xff
   2fa4a:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2fa4e:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2fa52:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2fa54:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2fa56:	2301      	movs	r3, #1
   2fa58:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2fa5c:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2fa5e:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2fa60:	f88d 300c 	strb.w	r3, [sp, #12]
   2fa64:	ab01      	add	r3, sp, #4
   2fa66:	9204      	str	r2, [sp, #16]
   2fa68:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2fa6a:	f7f1 ff31 	bl	218d0 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2fa6e:	2800      	cmp	r0, #0
   2fa70:	bfa8      	it	ge
   2fa72:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2fa76:	b007      	add	sp, #28
   2fa78:	f85d fb04 	ldr.w	pc, [sp], #4

0002fa7c <is_regular_addr_valid>:
{
   2fa7c:	b538      	push	{r3, r4, r5, lr}
   2fa7e:	4605      	mov	r5, r0
   2fa80:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2fa82:	f000 fc3b 	bl	302fc <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2fa86:	2d00      	cmp	r5, #0
   2fa88:	db07      	blt.n	2fa9a <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2fa8a:	42a8      	cmp	r0, r5
   2fa8c:	d905      	bls.n	2fa9a <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2fa8e:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2fa90:	4284      	cmp	r4, r0
   2fa92:	bf8c      	ite	hi
   2fa94:	2000      	movhi	r0, #0
   2fa96:	2001      	movls	r0, #1
}
   2fa98:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2fa9a:	2000      	movs	r0, #0
   2fa9c:	e7fc      	b.n	2fa98 <is_regular_addr_valid+0x1c>

0002fa9e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2fa9e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2faa0:	ab0b      	add	r3, sp, #44	; 0x2c
   2faa2:	9305      	str	r3, [sp, #20]
   2faa4:	9303      	str	r3, [sp, #12]
   2faa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2faa8:	2201      	movs	r2, #1
   2faaa:	9302      	str	r3, [sp, #8]
   2faac:	2300      	movs	r3, #0
   2faae:	4618      	mov	r0, r3
   2fab0:	e9cd 3300 	strd	r3, r3, [sp]
   2fab4:	f7df fe32 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   2fab8:	b007      	add	sp, #28
   2faba:	f85d fb04 	ldr.w	pc, [sp], #4

0002fabe <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2fabe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2fac0:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2fac2:	2300      	movs	r3, #0
{
   2fac4:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2fac6:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2fac8:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2faca:	60a3      	str	r3, [r4, #8]
{
   2facc:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2face:	6913      	ldr	r3, [r2, #16]
   2fad0:	4669      	mov	r1, sp
   2fad2:	aa01      	add	r2, sp, #4
   2fad4:	4798      	blx	r3

	while (layout_size--) {
   2fad6:	9b01      	ldr	r3, [sp, #4]
   2fad8:	1e5a      	subs	r2, r3, #1
   2fada:	9201      	str	r2, [sp, #4]
   2fadc:	b91b      	cbnz	r3, 2fae6 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2fade:	f06f 0015 	mvn.w	r0, #21
}
   2fae2:	b003      	add	sp, #12
   2fae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2fae6:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2fae8:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2faea:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2faec:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2faee:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2faf0:	b985      	cbnz	r5, 2fb14 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2faf2:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2faf4:	f8d0 c000 	ldr.w	ip, [r0]
   2faf8:	4563      	cmp	r3, ip
   2fafa:	bf28      	it	cs
   2fafc:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2fafe:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2fb02:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2fb04:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2fb06:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2fb08:	6802      	ldr	r2, [r0, #0]
   2fb0a:	429a      	cmp	r2, r3
   2fb0c:	d806      	bhi.n	2fb1c <flash_get_page_info+0x5e>
		layout++;
   2fb0e:	3008      	adds	r0, #8
   2fb10:	9000      	str	r0, [sp, #0]
   2fb12:	e7e0      	b.n	2fad6 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2fb14:	1a6b      	subs	r3, r5, r1
   2fb16:	fbb3 f3f7 	udiv	r3, r3, r7
   2fb1a:	e7eb      	b.n	2faf4 <flash_get_page_info+0x36>
			return 0;
   2fb1c:	2000      	movs	r0, #0
   2fb1e:	e7e0      	b.n	2fae2 <flash_get_page_info+0x24>

0002fb20 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2fb20:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2fb22:	2200      	movs	r2, #0
   2fb24:	f7ff bfcb 	b.w	2fabe <flash_get_page_info>

0002fb28 <uarte_nrfx_config_get>:
{
   2fb28:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2fb2a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2fb2c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2fb30:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2fb34:	2000      	movs	r0, #0
   2fb36:	4770      	bx	lr

0002fb38 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2fb38:	6843      	ldr	r3, [r0, #4]
   2fb3a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2fb3c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2fb40:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2fb44:	4770      	bx	lr

0002fb46 <tx_start>:
{
   2fb46:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2fb48:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2fb4a:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2fb4c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2fb50:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fb54:	2200      	movs	r2, #0
   2fb56:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2fb5a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2fb5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2fb62:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fb66:	6862      	ldr	r2, [r4, #4]
   2fb68:	06d2      	lsls	r2, r2, #27
   2fb6a:	d511      	bpl.n	2fb90 <tx_start+0x4a>
	if (data->async) {
   2fb6c:	6902      	ldr	r2, [r0, #16]
   2fb6e:	68d2      	ldr	r2, [r2, #12]
   2fb70:	b12a      	cbz	r2, 2fb7e <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2fb72:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2fb76:	f041 0101 	orr.w	r1, r1, #1
   2fb7a:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2fb7e:	2108      	movs	r1, #8
	return config->uarte_regs;
   2fb80:	6842      	ldr	r2, [r0, #4]
   2fb82:	6812      	ldr	r2, [r2, #0]
   2fb84:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2fb88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2fb8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fb90:	2201      	movs	r2, #1
   2fb92:	609a      	str	r2, [r3, #8]
}
   2fb94:	bd10      	pop	{r4, pc}

0002fb96 <user_callback>:
	if (data->async->user_callback) {
   2fb96:	6903      	ldr	r3, [r0, #16]
   2fb98:	68da      	ldr	r2, [r3, #12]
   2fb9a:	6813      	ldr	r3, [r2, #0]
   2fb9c:	b10b      	cbz	r3, 2fba2 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2fb9e:	6852      	ldr	r2, [r2, #4]
   2fba0:	4718      	bx	r3
}
   2fba2:	4770      	bx	lr

0002fba4 <notify_uart_rx_rdy>:
{
   2fba4:	b570      	push	{r4, r5, r6, lr}
   2fba6:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2fba8:	6906      	ldr	r6, [r0, #16]
{
   2fbaa:	4604      	mov	r4, r0
   2fbac:	460d      	mov	r5, r1
	struct uart_event evt = {
   2fbae:	2214      	movs	r2, #20
   2fbb0:	2100      	movs	r1, #0
   2fbb2:	a801      	add	r0, sp, #4
   2fbb4:	f001 ff6f 	bl	31a96 <memset>
   2fbb8:	2302      	movs	r3, #2
   2fbba:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2fbbe:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2fbc0:	4620      	mov	r0, r4
	struct uart_event evt = {
   2fbc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2fbc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2fbc6:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2fbc8:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2fbcc:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2fbce:	f7ff ffe2 	bl	2fb96 <user_callback>
}
   2fbd2:	b006      	add	sp, #24
   2fbd4:	bd70      	pop	{r4, r5, r6, pc}

0002fbd6 <rx_buf_release>:
{
   2fbd6:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2fbd8:	680e      	ldr	r6, [r1, #0]
{
   2fbda:	4605      	mov	r5, r0
   2fbdc:	460c      	mov	r4, r1
   2fbde:	b086      	sub	sp, #24
	if (*buf) {
   2fbe0:	b17e      	cbz	r6, 2fc02 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2fbe2:	2214      	movs	r2, #20
   2fbe4:	2100      	movs	r1, #0
   2fbe6:	a801      	add	r0, sp, #4
   2fbe8:	f001 ff55 	bl	31a96 <memset>
   2fbec:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2fbee:	4628      	mov	r0, r5
   2fbf0:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2fbf4:	f88d 3004 	strb.w	r3, [sp, #4]
   2fbf8:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2fbfa:	f7ff ffcc 	bl	2fb96 <user_callback>
		*buf = NULL;
   2fbfe:	2300      	movs	r3, #0
   2fc00:	6023      	str	r3, [r4, #0]
}
   2fc02:	b006      	add	sp, #24
   2fc04:	bd70      	pop	{r4, r5, r6, pc}

0002fc06 <notify_rx_disable>:
{
   2fc06:	b510      	push	{r4, lr}
   2fc08:	b086      	sub	sp, #24
   2fc0a:	4604      	mov	r4, r0
	struct uart_event evt = {
   2fc0c:	2214      	movs	r2, #20
   2fc0e:	2100      	movs	r1, #0
   2fc10:	a801      	add	r0, sp, #4
   2fc12:	f001 ff40 	bl	31a96 <memset>
   2fc16:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2fc18:	4620      	mov	r0, r4
   2fc1a:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2fc1c:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2fc20:	f7ff ffb9 	bl	2fb96 <user_callback>
}
   2fc24:	b006      	add	sp, #24
   2fc26:	bd10      	pop	{r4, pc}

0002fc28 <uarte_nrfx_rx_buf_rsp>:
{
   2fc28:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2fc2a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2fc2c:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2fc2e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2fc30:	f04f 0020 	mov.w	r0, #32
   2fc34:	f3ef 8611 	mrs	r6, BASEPRI
   2fc38:	f380 8812 	msr	BASEPRI_MAX, r0
   2fc3c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2fc40:	68ec      	ldr	r4, [r5, #12]
   2fc42:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2fc44:	b198      	cbz	r0, 2fc6e <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2fc46:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2fc48:	b9a0      	cbnz	r0, 2fc74 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2fc4a:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2fc4c:	68ec      	ldr	r4, [r5, #12]
   2fc4e:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fc50:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fc54:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2fc58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2fc5c:	f042 0220 	orr.w	r2, r2, #32
   2fc60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2fc64:	f386 8811 	msr	BASEPRI, r6
   2fc68:	f3bf 8f6f 	isb	sy
}
   2fc6c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2fc6e:	f06f 000c 	mvn.w	r0, #12
   2fc72:	e7f7      	b.n	2fc64 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2fc74:	f06f 000f 	mvn.w	r0, #15
   2fc78:	e7f4      	b.n	2fc64 <uarte_nrfx_rx_buf_rsp+0x3c>

0002fc7a <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2fc7a:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2fc7c:	68d8      	ldr	r0, [r3, #12]
   2fc7e:	b120      	cbz	r0, 2fc8a <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2fc80:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2fc82:	68db      	ldr	r3, [r3, #12]
	return 0;
   2fc84:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2fc86:	605a      	str	r2, [r3, #4]
	return 0;
   2fc88:	4770      	bx	lr
		return -ENOTSUP;
   2fc8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2fc8e:	4770      	bx	lr

0002fc90 <uarte_nrfx_poll_in>:
{
   2fc90:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2fc92:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2fc94:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2fc96:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2fc98:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2fc9a:	b960      	cbnz	r0, 2fcb6 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc9c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fca0:	b164      	cbz	r4, 2fcbc <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2fca2:	6992      	ldr	r2, [r2, #24]
   2fca4:	7812      	ldrb	r2, [r2, #0]
   2fca6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fca8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2fcac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fcb0:	2201      	movs	r2, #1
   2fcb2:	601a      	str	r2, [r3, #0]
}
   2fcb4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2fcb6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fcba:	e7fb      	b.n	2fcb4 <uarte_nrfx_poll_in+0x24>
		return -1;
   2fcbc:	f04f 30ff 	mov.w	r0, #4294967295
   2fcc0:	e7f8      	b.n	2fcb4 <uarte_nrfx_poll_in+0x24>

0002fcc2 <uarte_nrfx_rx_disable>:
{
   2fcc2:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2fcc4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2fcc6:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2fcc8:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2fcca:	68eb      	ldr	r3, [r5, #12]
   2fccc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2fcce:	b1ba      	cbz	r2, 2fd00 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2fcd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2fcd2:	b153      	cbz	r3, 2fcea <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2fcd4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2fcd8:	f023 0320 	bic.w	r3, r3, #32
   2fcdc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fce0:	2300      	movs	r3, #0
   2fce2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2fce6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2fcea:	68e8      	ldr	r0, [r5, #12]
   2fcec:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2fcee:	f001 fcf2 	bl	316d6 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2fcf2:	2000      	movs	r0, #0
   2fcf4:	68eb      	ldr	r3, [r5, #12]
   2fcf6:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fcfa:	2301      	movs	r3, #1
   2fcfc:	6063      	str	r3, [r4, #4]
}
   2fcfe:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2fd00:	f06f 000d 	mvn.w	r0, #13
   2fd04:	e7fb      	b.n	2fcfe <uarte_nrfx_rx_disable+0x3c>

0002fd06 <setup_tx_cache>:
{
   2fd06:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2fd08:	68c3      	ldr	r3, [r0, #12]
   2fd0a:	68da      	ldr	r2, [r3, #12]
   2fd0c:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2fd0e:	1a52      	subs	r2, r2, r1
   2fd10:	d00f      	beq.n	2fd32 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2fd12:	2a08      	cmp	r2, #8
   2fd14:	bf28      	it	cs
   2fd16:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2fd18:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2fd1a:	68c3      	ldr	r3, [r0, #12]
   2fd1c:	6999      	ldr	r1, [r3, #24]
   2fd1e:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2fd20:	68c3      	ldr	r3, [r0, #12]
   2fd22:	6898      	ldr	r0, [r3, #8]
   2fd24:	69d9      	ldr	r1, [r3, #28]
   2fd26:	4401      	add	r1, r0
   2fd28:	6998      	ldr	r0, [r3, #24]
   2fd2a:	f001 fe7a 	bl	31a22 <memcpy>
	return true;
   2fd2e:	2001      	movs	r0, #1
}
   2fd30:	bd08      	pop	{r3, pc}
		return false;
   2fd32:	4610      	mov	r0, r2
   2fd34:	e7fc      	b.n	2fd30 <setup_tx_cache+0x2a>

0002fd36 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2fd36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2fd38:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2fd3a:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2fd3c:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2fd3e:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2fd42:	b1f1      	cbz	r1, 2fd82 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2fd44:	2100      	movs	r1, #0
   2fd46:	4618      	mov	r0, r3
   2fd48:	f001 fea5 	bl	31a96 <memset>
   2fd4c:	4603      	mov	r3, r0
   2fd4e:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fd50:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd54:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fd56:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2fd58:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd5c:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2fd60:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fd64:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fd66:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fd6a:	2800      	cmp	r0, #0
   2fd6c:	d0fb      	beq.n	2fd66 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd6e:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2fd72:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2fd76:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2fd7a:	b92b      	cbnz	r3, 2fd88 <rx_flush.isra.0+0x52>
			return rx_amount;
   2fd7c:	b2c0      	uxtb	r0, r0
}
   2fd7e:	b002      	add	sp, #8
   2fd80:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2fd82:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2fd84:	4669      	mov	r1, sp
   2fd86:	e7e3      	b.n	2fd50 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2fd88:	4285      	cmp	r5, r0
   2fd8a:	d1f7      	bne.n	2fd7c <rx_flush.isra.0+0x46>
   2fd8c:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2fd8e:	4293      	cmp	r3, r2
   2fd90:	d101      	bne.n	2fd96 <rx_flush.isra.0+0x60>
	return 0;
   2fd92:	2000      	movs	r0, #0
   2fd94:	e7f3      	b.n	2fd7e <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2fd96:	f813 1b01 	ldrb.w	r1, [r3], #1
   2fd9a:	2900      	cmp	r1, #0
   2fd9c:	d0f7      	beq.n	2fd8e <rx_flush.isra.0+0x58>
   2fd9e:	e7ed      	b.n	2fd7c <rx_flush.isra.0+0x46>

0002fda0 <async_uart_release>:
{
   2fda0:	b570      	push	{r4, r5, r6, lr}
   2fda2:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2fda4:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2fda6:	f04f 0320 	mov.w	r3, #32
   2fdaa:	f3ef 8611 	mrs	r6, BASEPRI
   2fdae:	f383 8812 	msr	BASEPRI_MAX, r3
   2fdb2:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2fdb6:	68d0      	ldr	r0, [r2, #12]
   2fdb8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2fdbc:	ea23 0301 	bic.w	r3, r3, r1
   2fdc0:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2fdc4:	68d5      	ldr	r5, [r2, #12]
   2fdc6:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2fdca:	b973      	cbnz	r3, 2fdea <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2fdcc:	2902      	cmp	r1, #2
   2fdce:	d107      	bne.n	2fde0 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2fdd0:	2205      	movs	r2, #5
   2fdd2:	6860      	ldr	r0, [r4, #4]
   2fdd4:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2fdd8:	f7ff ffad 	bl	2fd36 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2fddc:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2fde0:	2200      	movs	r2, #0
	return config->uarte_regs;
   2fde2:	6863      	ldr	r3, [r4, #4]
   2fde4:	681b      	ldr	r3, [r3, #0]
   2fde6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2fdea:	f386 8811 	msr	BASEPRI, r6
   2fdee:	f3bf 8f6f 	isb	sy
}
   2fdf2:	bd70      	pop	{r4, r5, r6, pc}

0002fdf4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2fdf4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2fdf6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fdf8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fdfc:	b940      	cbnz	r0, 2fe10 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2fdfe:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fe00:	079b      	lsls	r3, r3, #30
   2fe02:	d406      	bmi.n	2fe12 <is_tx_ready.isra.0+0x1e>
   2fe04:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2fe08:	3800      	subs	r0, #0
   2fe0a:	bf18      	it	ne
   2fe0c:	2001      	movne	r0, #1
   2fe0e:	4770      	bx	lr
   2fe10:	2001      	movs	r0, #1
}
   2fe12:	4770      	bx	lr

0002fe14 <start_tx_locked>:
{
   2fe14:	b510      	push	{r4, lr}
   2fe16:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2fe18:	6840      	ldr	r0, [r0, #4]
   2fe1a:	f7ff ffeb 	bl	2fdf4 <is_tx_ready.isra.0>
   2fe1e:	68cb      	ldr	r3, [r1, #12]
   2fe20:	b918      	cbnz	r0, 2fe2a <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2fe22:	2201      	movs	r2, #1
   2fe24:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2fe28:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2fe2a:	2200      	movs	r2, #0
   2fe2c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2fe30:	f04f 32ff 	mov.w	r2, #4294967295
   2fe34:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fe36:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2fe38:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fe3c:	68cb      	ldr	r3, [r1, #12]
}
   2fe3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2fe42:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2fe46:	f7ff be7e 	b.w	2fb46 <tx_start>

0002fe4a <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2fe4a:	b510      	push	{r4, lr}
   2fe4c:	4604      	mov	r4, r0
   2fe4e:	2200      	movs	r2, #0
   2fe50:	2101      	movs	r1, #1
   2fe52:	200b      	movs	r0, #11
   2fe54:	f7e1 fadc 	bl	11410 <z_arm_irq_priority_set>
   2fe58:	200b      	movs	r0, #11
   2fe5a:	f7e1 faa9 	bl	113b0 <arch_irq_enable>
   2fe5e:	4620      	mov	r0, r4
   2fe60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fe64:	f7f2 ba98 	b.w	22398 <uarte_instance_init.constprop.0>

0002fe68 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2fe68:	b510      	push	{r4, lr}
   2fe6a:	4604      	mov	r4, r0
   2fe6c:	2200      	movs	r2, #0
   2fe6e:	2101      	movs	r1, #1
   2fe70:	2008      	movs	r0, #8
   2fe72:	f7e1 facd 	bl	11410 <z_arm_irq_priority_set>
   2fe76:	2008      	movs	r0, #8
   2fe78:	f7e1 fa9a 	bl	113b0 <arch_irq_enable>
   2fe7c:	4620      	mov	r0, r4
   2fe7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2fe82:	f7f2 ba89 	b.w	22398 <uarte_instance_init.constprop.0>

0002fe86 <uarte_nrfx_rx_enable>:
{
   2fe86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   2fe8a:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   2fe8e:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   2fe90:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   2fe94:	4605      	mov	r5, r0
   2fe96:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   2fe98:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   2fe9a:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   2fe9e:	2a00      	cmp	r2, #0
   2fea0:	d175      	bne.n	2ff8e <uarte_nrfx_rx_enable+0x108>
	if (data->async->rx_enabled) {
   2fea2:	68e2      	ldr	r2, [r4, #12]
   2fea4:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   2fea8:	2900      	cmp	r1, #0
   2feaa:	d173      	bne.n	2ff94 <uarte_nrfx_rx_enable+0x10e>
		MAX(timeout / RX_TIMEOUT_DIV,
   2feac:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   2feb0:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   2feb2:	bfca      	itet	gt
   2feb4:	2205      	movgt	r2, #5
   2feb6:	235c      	movle	r3, #92	; 0x5c
   2feb8:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   2febc:	68e2      	ldr	r2, [r4, #12]
   2febe:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   2fec0:	68e3      	ldr	r3, [r4, #12]
   2fec2:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   2fec6:	68e3      	ldr	r3, [r4, #12]
   2fec8:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   2feca:	2300      	movs	r3, #0
   2fecc:	68e2      	ldr	r2, [r4, #12]
   2fece:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   2fed0:	68e2      	ldr	r2, [r4, #12]
   2fed2:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   2fed4:	68e2      	ldr	r2, [r4, #12]
   2fed6:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fed8:	f8da 3004 	ldr.w	r3, [sl, #4]
   2fedc:	06da      	lsls	r2, r3, #27
   2fede:	d523      	bpl.n	2ff28 <uarte_nrfx_rx_enable+0xa2>
		if (data->async->rx_flush_cnt) {
   2fee0:	68e1      	ldr	r1, [r4, #12]
   2fee2:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   2fee6:	b1fe      	cbz	r6, 2ff28 <uarte_nrfx_rx_enable+0xa2>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   2fee8:	42be      	cmp	r6, r7
   2feea:	bf28      	it	cs
   2feec:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2feee:	4640      	mov	r0, r8
   2fef0:	4632      	mov	r2, r6
   2fef2:	31c4      	adds	r1, #196	; 0xc4
   2fef4:	f001 fd95 	bl	31a22 <memcpy>
			if (!len) {
   2fef8:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   2fefa:	44b0      	add	r8, r6
			if (!len) {
   2fefc:	d114      	bne.n	2ff28 <uarte_nrfx_rx_enable+0xa2>
				data->async->rx_flush_cnt -= cpy_len;
   2fefe:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   2ff00:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   2ff02:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2ff06:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   2ff08:	1b9b      	subs	r3, r3, r6
   2ff0a:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2ff0e:	f7ff fe49 	bl	2fba4 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   2ff12:	68e1      	ldr	r1, [r4, #12]
   2ff14:	4628      	mov	r0, r5
   2ff16:	3158      	adds	r1, #88	; 0x58
   2ff18:	f7ff fe5d 	bl	2fbd6 <rx_buf_release>
				notify_rx_disable(dev);
   2ff1c:	4628      	mov	r0, r5
   2ff1e:	f7ff fe72 	bl	2fc06 <notify_rx_disable>
				return 0;
   2ff22:	2000      	movs	r0, #0
}
   2ff24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ff28:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2ff2a:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2ff2e:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ff32:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   2ff36:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   2ff3a:	2201      	movs	r2, #1
   2ff3c:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   2ff40:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   2ff44:	68e3      	ldr	r3, [r4, #12]
   2ff46:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2ff4a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2ff4e:	06db      	lsls	r3, r3, #27
   2ff50:	d519      	bpl.n	2ff86 <uarte_nrfx_rx_enable+0x100>
	__asm__ volatile(
   2ff52:	f04f 0320 	mov.w	r3, #32
   2ff56:	f3ef 8111 	mrs	r1, BASEPRI
   2ff5a:	f383 8812 	msr	BASEPRI_MAX, r3
   2ff5e:	f3bf 8f6f 	isb	sy
	if (data->async) {
   2ff62:	692b      	ldr	r3, [r5, #16]
   2ff64:	68db      	ldr	r3, [r3, #12]
   2ff66:	b12b      	cbz	r3, 2ff74 <uarte_nrfx_rx_enable+0xee>
		data->async->low_power_mask |= mask;
   2ff68:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2ff6c:	f042 0202 	orr.w	r2, r2, #2
   2ff70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2ff74:	2208      	movs	r2, #8
	return config->uarte_regs;
   2ff76:	686b      	ldr	r3, [r5, #4]
   2ff78:	681b      	ldr	r3, [r3, #0]
   2ff7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2ff7e:	f381 8811 	msr	BASEPRI, r1
   2ff82:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ff86:	2301      	movs	r3, #1
   2ff88:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   2ff8c:	e7c9      	b.n	2ff22 <uarte_nrfx_rx_enable+0x9c>
		return -ENOTSUP;
   2ff8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ff92:	e7c7      	b.n	2ff24 <uarte_nrfx_rx_enable+0x9e>
		return -EBUSY;
   2ff94:	f06f 000f 	mvn.w	r0, #15
   2ff98:	e7c4      	b.n	2ff24 <uarte_nrfx_rx_enable+0x9e>

0002ff9a <rx_timeout>:
{
   2ff9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2ff9c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2ff9e:	68e3      	ldr	r3, [r4, #12]
   2ffa0:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2ffa4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2ffa8:	bb13      	cbnz	r3, 2fff0 <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2ffaa:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2ffac:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2ffae:	6873      	ldr	r3, [r6, #4]
   2ffb0:	681b      	ldr	r3, [r3, #0]
   2ffb2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2ffb6:	68e3      	ldr	r3, [r4, #12]
   2ffb8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2ffbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2ffbe:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2ffc0:	bf1f      	itttt	ne
   2ffc2:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2ffc4:	68e3      	ldrne	r3, [r4, #12]
   2ffc6:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2ffc8:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2ffca:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2ffcc:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2ffd0:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2ffd2:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2ffd4:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2ffd6:	da0c      	bge.n	2fff2 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2ffd8:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2ffdc:	68e3      	ldr	r3, [r4, #12]
   2ffde:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2ffe2:	4281      	cmp	r1, r0
   2ffe4:	d80b      	bhi.n	2fffe <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2ffe6:	2210      	movs	r2, #16
	return config->uarte_regs;
   2ffe8:	6873      	ldr	r3, [r6, #4]
   2ffea:	681b      	ldr	r3, [r3, #0]
   2ffec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2fff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fff2:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2fff6:	eb02 0c01 	add.w	ip, r2, r1
   2fffa:	4584      	cmp	ip, r0
   2fffc:	d904      	bls.n	30008 <CONFIG_FLASH_LOAD_SIZE+0x8>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2fffe:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   30000:	2d00      	cmp	r5, #0
   30002:	ddf0      	ble.n	2ffe6 <rx_timeout+0x4c>
		clipped = true;
   30004:	2701      	movs	r7, #1
   30006:	e005      	b.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
	if (len > 0) {
   30008:	2a00      	cmp	r2, #0
   3000a:	d0ec      	beq.n	2ffe6 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   3000c:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   30010:	428a      	cmp	r2, r1
   30012:	da12      	bge.n	3003a <CONFIG_FLASH_LOAD_SIZE+0x3a>
			notify_uart_rx_rdy(dev, len);
   30014:	4629      	mov	r1, r5
   30016:	4630      	mov	r0, r6
   30018:	f7ff fdc4 	bl	2fba4 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   3001c:	68e2      	ldr	r2, [r4, #12]
   3001e:	6e13      	ldr	r3, [r2, #96]	; 0x60
   30020:	442b      	add	r3, r5
   30022:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   30024:	68e2      	ldr	r2, [r4, #12]
   30026:	6f13      	ldr	r3, [r2, #112]	; 0x70
   30028:	442b      	add	r3, r5
   3002a:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   3002c:	2f00      	cmp	r7, #0
   3002e:	d0da      	beq.n	2ffe6 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   30030:	68e0      	ldr	r0, [r4, #12]
   30032:	3080      	adds	r0, #128	; 0x80
   30034:	f001 fb4f 	bl	316d6 <z_impl_k_timer_stop>
}
   30038:	e7d5      	b.n	2ffe6 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   3003a:	1a52      	subs	r2, r2, r1
   3003c:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   3003e:	e7d2      	b.n	2ffe6 <rx_timeout+0x4c>

00030040 <uarte_nrfx_tx_abort>:
{
   30040:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   30042:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   30044:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   30046:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   30048:	68da      	ldr	r2, [r3, #12]
   3004a:	6891      	ldr	r1, [r2, #8]
   3004c:	b151      	cbz	r1, 30064 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   3004e:	2400      	movs	r4, #0
   30050:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   30054:	68d8      	ldr	r0, [r3, #12]
   30056:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   30058:	f001 fb3d 	bl	316d6 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3005c:	2301      	movs	r3, #1
	return 0;
   3005e:	4620      	mov	r0, r4
   30060:	60eb      	str	r3, [r5, #12]
}
   30062:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   30064:	f06f 000d 	mvn.w	r0, #13
   30068:	e7fb      	b.n	30062 <uarte_nrfx_tx_abort+0x22>

0003006a <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   3006a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   3006c:	6818      	ldr	r0, [r3, #0]
   3006e:	f7ff bfe7 	b.w	30040 <uarte_nrfx_tx_abort>

00030072 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30072:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30074:	ab0b      	add	r3, sp, #44	; 0x2c
   30076:	9305      	str	r3, [sp, #20]
   30078:	9303      	str	r3, [sp, #12]
   3007a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3007c:	9302      	str	r3, [sp, #8]
   3007e:	2300      	movs	r3, #0
   30080:	4618      	mov	r0, r3
   30082:	e9cd 3300 	strd	r3, r3, [sp]
   30086:	f7df fb49 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   3008a:	b007      	add	sp, #28
   3008c:	f85d fb04 	ldr.w	pc, [sp], #4

00030090 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   30090:	2000      	movs	r0, #0
   30092:	4770      	bx	lr

00030094 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   30094:	b538      	push	{r3, r4, r5, lr}
   30096:	460c      	mov	r4, r1
   30098:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   3009a:	f7ea fdd9 	bl	1ac50 <bt_is_ready>
   3009e:	b128      	cbz	r0, 300ac <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   300a0:	4629      	mov	r1, r5
   300a2:	4620      	mov	r0, r4
}
   300a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   300a8:	f7e9 bfe0 	b.w	1a06c <bt_hci_le_rand>
}
   300ac:	f06f 000a 	mvn.w	r0, #10
   300b0:	bd38      	pop	{r3, r4, r5, pc}

000300b2 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   300b2:	4608      	mov	r0, r1
   300b4:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   300b6:	4611      	mov	r1, r2
   300b8:	f7f3 fa6e 	bl	23598 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   300bc:	2800      	cmp	r0, #0
	}

	return 0;
}
   300be:	bf18      	it	ne
   300c0:	f06f 0004 	mvnne.w	r0, #4
   300c4:	bd08      	pop	{r3, pc}

000300c6 <entropy_psa_crypto_rng_init>:
{
   300c6:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   300c8:	f000 f886 	bl	301d8 <psa_crypto_init>
		return -EIO;
   300cc:	2800      	cmp	r0, #0
}
   300ce:	bf18      	it	ne
   300d0:	f06f 0004 	mvnne.w	r0, #4
   300d4:	bd08      	pop	{r3, pc}

000300d6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   300d6:	4770      	bx	lr

000300d8 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   300d8:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   300da:	f100 0350 	add.w	r3, r0, #80	; 0x50
   300de:	009b      	lsls	r3, r3, #2
   300e0:	b29b      	uxth	r3, r3
   300e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   300e6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   300ea:	601a      	str	r2, [r3, #0]
   300ec:	681b      	ldr	r3, [r3, #0]
}
   300ee:	4770      	bx	lr

000300f0 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
   300f0:	b130      	cbz	r0, 30100 <z_nrf_rtc_timer_capture_task_address_get+0x10>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   300f2:	3010      	adds	r0, #16
   300f4:	0080      	lsls	r0, r0, #2
    return (uint32_t)p_reg + task;
   300f6:	b2c0      	uxtb	r0, r0
   300f8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   300fc:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
}
   30100:	4770      	bx	lr

00030102 <z_nrf_rtc_timer_set>:
	return compare_set(chan, target_time, handler, user_data);
   30102:	f7f2 be61 	b.w	22dc8 <compare_set>

00030106 <sys_clock_cycle_get_32>:
{
   30106:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   30108:	f7f2 fe3c 	bl	22d84 <z_nrf_rtc_timer_read>
}
   3010c:	bd08      	pop	{r3, pc}

0003010e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3010e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   30110:	6843      	ldr	r3, [r0, #4]
   30112:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   30114:	7a05      	ldrb	r5, [r0, #8]
   30116:	6844      	ldr	r4, [r0, #4]
   30118:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   3011c:	42a3      	cmp	r3, r4
   3011e:	d302      	bcc.n	30126 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   30120:	f06f 0001 	mvn.w	r0, #1
}
   30124:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   30126:	795c      	ldrb	r4, [r3, #5]
   30128:	428c      	cmp	r4, r1
   3012a:	d001      	beq.n	30130 <pinctrl_lookup_state+0x22>
		(*state)++;
   3012c:	3308      	adds	r3, #8
   3012e:	e7f0      	b.n	30112 <pinctrl_lookup_state+0x4>
			return 0;
   30130:	2000      	movs	r0, #0
   30132:	e7f7      	b.n	30124 <pinctrl_lookup_state+0x16>

00030134 <mbox_nrf_register_callback>:
{
   30134:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   30136:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   30138:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   3013a:	bf9f      	itttt	ls
   3013c:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   30140:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   30144:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   30146:	2000      	movls	r0, #0
		return -EINVAL;
   30148:	bf88      	it	hi
   3014a:	f06f 0015 	mvnhi.w	r0, #21
}
   3014e:	bd10      	pop	{r4, pc}

00030150 <mbox_nrf_mtu_get>:
}
   30150:	2000      	movs	r0, #0
   30152:	4770      	bx	lr

00030154 <mbox_nrf_max_channels_get>:
}
   30154:	2010      	movs	r0, #16
   30156:	4770      	bx	lr

00030158 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   3015a:	ab0b      	add	r3, sp, #44	; 0x2c
   3015c:	9305      	str	r3, [sp, #20]
   3015e:	9303      	str	r3, [sp, #12]
   30160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30162:	2202      	movs	r2, #2
   30164:	9302      	str	r3, [sp, #8]
   30166:	2300      	movs	r3, #0
   30168:	4618      	mov	r0, r3
   3016a:	e9cd 3300 	strd	r3, r3, [sp]
   3016e:	f7df fad5 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   30172:	b007      	add	sp, #28
   30174:	f85d fb04 	ldr.w	pc, [sp], #4

00030178 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   30178:	2000      	movs	r0, #0
   3017a:	4770      	bx	lr

0003017c <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   3017c:	2300      	movs	r3, #0
{
   3017e:	b570      	push	{r4, r5, r6, lr}
   30180:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   30182:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   30186:	ab03      	add	r3, sp, #12
   30188:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   3018a:	2304      	movs	r3, #4
{
   3018c:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   3018e:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   30190:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   30192:	b169      	cbz	r1, 301b0 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   30194:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   30196:	680b      	ldr	r3, [r1, #0]
   30198:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   3019a:	684b      	ldr	r3, [r1, #4]
   3019c:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   3019e:	2101      	movs	r1, #1
   301a0:	2041      	movs	r0, #65	; 0x41
   301a2:	f7f3 fa37 	bl	23614 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   301a6:	1e05      	subs	r5, r0, #0
   301a8:	dc04      	bgt.n	301b4 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   301aa:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   301ac:	b008      	add	sp, #32
   301ae:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   301b0:	2601      	movs	r6, #1
   301b2:	e7f4      	b.n	3019e <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   301b4:	1e23      	subs	r3, r4, #0
   301b6:	bf18      	it	ne
   301b8:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   301ba:	2100      	movs	r1, #0
   301bc:	e9cd 4300 	strd	r4, r3, [sp]
   301c0:	aa04      	add	r2, sp, #16
   301c2:	4633      	mov	r3, r6
   301c4:	f7f3 fa0a 	bl	235dc <psa_call>
   301c8:	4604      	mov	r4, r0
    psa_close(handle);
   301ca:	4628      	mov	r0, r5
   301cc:	f7f3 fa30 	bl	23630 <psa_close>
    if (status < PSA_SUCCESS) {
   301d0:	2c00      	cmp	r4, #0
   301d2:	dbea      	blt.n	301aa <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   301d4:	4620      	mov	r0, r4
   301d6:	e7e9      	b.n	301ac <tfm_platform_ioctl+0x30>

000301d8 <psa_crypto_init>:
}
   301d8:	2000      	movs	r0, #0
   301da:	4770      	bx	lr

000301dc <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   301dc:	b510      	push	{r4, lr}
   301de:	b088      	sub	sp, #32
   301e0:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   301e2:	ab05      	add	r3, sp, #20
   301e4:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   301e6:	230c      	movs	r3, #12
   301e8:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   301ea:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   301ec:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   301f0:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   301f4:	eb0d 0103 	add.w	r1, sp, r3
   301f8:	aa03      	add	r2, sp, #12
   301fa:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   301fc:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   30200:	f7ff ffbc 	bl	3017c <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   30204:	9b00      	ldr	r3, [sp, #0]
   30206:	6023      	str	r3, [r4, #0]

	return ret;
}
   30208:	b008      	add	sp, #32
   3020a:	bd10      	pop	{r4, pc}

0003020c <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   3020c:	2300      	movs	r3, #0
{
   3020e:	b510      	push	{r4, lr}
   30210:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   30212:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   30216:	ab05      	add	r3, sp, #20
   30218:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   3021a:	230c      	movs	r3, #12
   3021c:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   3021e:	2304      	movs	r3, #4
{
   30220:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   30222:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   30224:	aa03      	add	r2, sp, #12
   30226:	eb0d 0103 	add.w	r1, sp, r3
   3022a:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   3022c:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   3022e:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   30232:	f7ff ffa3 	bl	3017c <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   30236:	9b00      	ldr	r3, [sp, #0]
   30238:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   3023a:	b008      	add	sp, #32
   3023c:	bd10      	pop	{r4, pc}

0003023e <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   3023e:	f7f3 ba05 	b.w	2364c <SystemCoreClockUpdate>

00030242 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   30242:	4700      	bx	r0

00030244 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   30244:	f001 ba15 	b.w	31672 <z_impl_k_busy_wait>

00030248 <nrfx_clock_stop>:
    clock_stop(domain);
   30248:	f7f3 ba48 	b.w	236dc <clock_stop>

0003024c <nrf_gpio_reconfigure>:
{
   3024c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3024e:	4616      	mov	r6, r2
   30250:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   30254:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30256:	a801      	add	r0, sp, #4
{
   30258:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3025a:	f7f3 fbe7 	bl	23a2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3025e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   30260:	f1b6 0c00 	subs.w	ip, r6, #0
   30264:	bf18      	it	ne
   30266:	f04f 0c01 	movne.w	ip, #1
   3026a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3026e:	1e0b      	subs	r3, r1, #0
   30270:	bf18      	it	ne
   30272:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30274:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   30276:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3027a:	bf14      	ite	ne
   3027c:	f04f 0c0c 	movne.w	ip, #12
   30280:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   30284:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   30286:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3028a:	bf14      	ite	ne
   3028c:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
   30290:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   30294:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30296:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3029a:	bf14      	ite	ne
   3029c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   302a0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   302a4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   302a8:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   302ac:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   302b0:	b101      	cbz	r1, 302b4 <nrf_gpio_reconfigure+0x68>
   302b2:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   302b4:	b10e      	cbz	r6, 302ba <nrf_gpio_reconfigure+0x6e>
   302b6:	7836      	ldrb	r6, [r6, #0]
   302b8:	0076      	lsls	r6, r6, #1
   302ba:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   302bc:	b10d      	cbz	r5, 302c2 <nrf_gpio_reconfigure+0x76>
   302be:	782d      	ldrb	r5, [r5, #0]
   302c0:	00ad      	lsls	r5, r5, #2
   302c2:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   302c4:	b10c      	cbz	r4, 302ca <nrf_gpio_reconfigure+0x7e>
   302c6:	7824      	ldrb	r4, [r4, #0]
   302c8:	0224      	lsls	r4, r4, #8
   302ca:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   302cc:	b10f      	cbz	r7, 302d2 <nrf_gpio_reconfigure+0x86>
   302ce:	783f      	ldrb	r7, [r7, #0]
   302d0:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   302d2:	430c      	orrs	r4, r1
   302d4:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   302d6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   302da:	b003      	add	sp, #12
   302dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000302de <nrf_gpio_cfg_sense_set>:
{
   302de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   302e0:	f10d 030f 	add.w	r3, sp, #15
   302e4:	9301      	str	r3, [sp, #4]
   302e6:	2300      	movs	r3, #0
{
   302e8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   302ec:	461a      	mov	r2, r3
   302ee:	4619      	mov	r1, r3
   302f0:	9300      	str	r3, [sp, #0]
   302f2:	f7ff ffab 	bl	3024c <nrf_gpio_reconfigure>
}
   302f6:	b005      	add	sp, #20
   302f8:	f85d fb04 	ldr.w	pc, [sp], #4

000302fc <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   302fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   30300:	4770      	bx	lr

00030302 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   30302:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   30306:	4770      	bx	lr

00030308 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   30308:	f44f 7080 	mov.w	r0, #256	; 0x100
   3030c:	4770      	bx	lr

0003030e <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   3030e:	2100      	movs	r1, #0
   30310:	f7f4 b83c 	b.w	2438c <nrf_gpio_cfg.constprop.0>

00030314 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   30314:	2302      	movs	r3, #2
   30316:	f7f3 bf91 	b.w	2423c <qspi_xfer>

0003031a <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   3031a:	2303      	movs	r3, #3
   3031c:	f7f3 bf8e 	b.w	2423c <qspi_xfer>

00030320 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   30320:	2100      	movs	r1, #0
   30322:	2002      	movs	r0, #2
   30324:	f7f4 ba28 	b.w	24778 <nrfx_qspi_erase>

00030328 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   30328:	1c43      	adds	r3, r0, #1
{
   3032a:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   3032c:	d005      	beq.n	3033a <spim_pin_uninit+0x12>
   3032e:	2300      	movs	r3, #0
   30330:	2201      	movs	r2, #1
   30332:	4619      	mov	r1, r3
   30334:	9300      	str	r3, [sp, #0]
   30336:	f7f4 fa95 	bl	24864 <nrf_gpio_cfg.constprop.0>
}
   3033a:	b003      	add	sp, #12
   3033c:	f85d fb04 	ldr.w	pc, [sp], #4

00030340 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   30340:	7f83      	ldrb	r3, [r0, #30]
   30342:	075a      	lsls	r2, r3, #29
   30344:	d40b      	bmi.n	3035e <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   30346:	7fc0      	ldrb	r0, [r0, #31]
   30348:	28ff      	cmp	r0, #255	; 0xff
   3034a:	d008      	beq.n	3035e <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   3034c:	079b      	lsls	r3, r3, #30
   3034e:	bf58      	it	pl
   30350:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   30354:	b909      	cbnz	r1, 3035a <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   30356:	f7f4 ba75 	b.w	24844 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   3035a:	f7f4 baa3 	b.w	248a4 <nrf_gpio_pin_set>
}
   3035e:	4770      	bx	lr

00030360 <metal_device_open>:
{
   30360:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30362:	460c      	mov	r4, r1
   30364:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   30366:	4606      	mov	r6, r0
   30368:	b918      	cbnz	r0, 30372 <metal_device_open+0x12>
		return -EINVAL;
   3036a:	f06f 0015 	mvn.w	r0, #21
}
   3036e:	b002      	add	sp, #8
   30370:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   30372:	f7d9 f84a 	bl	940a <strlen>
   30376:	2800      	cmp	r0, #0
   30378:	d0f7      	beq.n	3036a <metal_device_open+0xa>
   3037a:	2c00      	cmp	r4, #0
   3037c:	d0f5      	beq.n	3036a <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   3037e:	4620      	mov	r0, r4
   30380:	f7d9 f843 	bl	940a <strlen>
   30384:	2800      	cmp	r0, #0
   30386:	d0f0      	beq.n	3036a <metal_device_open+0xa>
   30388:	2d00      	cmp	r5, #0
   3038a:	d0ee      	beq.n	3036a <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   3038c:	4630      	mov	r0, r6
   3038e:	a901      	add	r1, sp, #4
   30390:	f7f4 fce0 	bl	24d54 <metal_bus_find>
	if (error)
   30394:	2800      	cmp	r0, #0
   30396:	d1ea      	bne.n	3036e <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   30398:	9801      	ldr	r0, [sp, #4]
   3039a:	6883      	ldr	r3, [r0, #8]
   3039c:	b12b      	cbz	r3, 303aa <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   3039e:	462a      	mov	r2, r5
   303a0:	4621      	mov	r1, r4
}
   303a2:	b002      	add	sp, #8
   303a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   303a8:	4718      	bx	r3
		return -ENODEV;
   303aa:	f06f 0012 	mvn.w	r0, #18
   303ae:	e7de      	b.n	3036e <metal_device_open+0xe>

000303b0 <metal_device_close>:
{
   303b0:	4601      	mov	r1, r0
	if (device->bus->ops.dev_close)
   303b2:	6840      	ldr	r0, [r0, #4]
   303b4:	68c3      	ldr	r3, [r0, #12]
   303b6:	b103      	cbz	r3, 303ba <metal_device_close+0xa>
		device->bus->ops.dev_close(device->bus, device);
   303b8:	4718      	bx	r3
}
   303ba:	4770      	bx	lr

000303bc <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   303bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   303c0:	b089      	sub	sp, #36	; 0x24
   303c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
   303c4:	4604      	mov	r4, r0
   303c6:	4689      	mov	r9, r1
   303c8:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   303ca:	2100      	movs	r1, #0
   303cc:	2220      	movs	r2, #32
   303ce:	4668      	mov	r0, sp
{
   303d0:	461f      	mov	r7, r3
   303d2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   303d4:	f001 fb5f 	bl	31a96 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   303d8:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   303da:	bf97      	itett	ls
   303dc:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   303de:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   303e2:	40b3      	lslls	r3, r6
   303e4:	f103 33ff 	addls.w	r3, r3, #4294967295
   303e8:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   303ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   303ec:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   303f0:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   303f4:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   303f6:	3418      	adds	r4, #24
   303f8:	b145      	cbz	r5, 3040c <metal_io_init+0x50>
   303fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   303fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   303fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   30402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   30406:	b009      	add	sp, #36	; 0x24
   30408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   3040c:	466d      	mov	r5, sp
   3040e:	e7f4      	b.n	303fa <metal_io_init+0x3e>

00030410 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   30410:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   30412:	6804      	ldr	r4, [r0, #0]
		: NULL);
   30414:	1c66      	adds	r6, r4, #1
   30416:	d031      	beq.n	3047c <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   30418:	6885      	ldr	r5, [r0, #8]
   3041a:	42a9      	cmp	r1, r5
   3041c:	d22e      	bcs.n	3047c <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   3041e:	1864      	adds	r4, r4, r1
   30420:	d02c      	beq.n	3047c <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   30422:	185e      	adds	r6, r3, r1
   30424:	42ae      	cmp	r6, r5
		len = io->size - offset;
   30426:	bf88      	it	hi
   30428:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   3042a:	6a05      	ldr	r5, [r0, #32]
   3042c:	b135      	cbz	r5, 3043c <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   3042e:	9300      	str	r3, [sp, #0]
   30430:	2305      	movs	r3, #5
   30432:	47a8      	blx	r5
   30434:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   30436:	4618      	mov	r0, r3
   30438:	b002      	add	sp, #8
   3043a:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   3043c:	f3bf 8f5b 	dmb	ish
		while ( len && (
   30440:	4619      	mov	r1, r3
   30442:	1aa4      	subs	r4, r4, r2
   30444:	1910      	adds	r0, r2, r4
   30446:	b119      	cbz	r1, 30450 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   30448:	ea40 0502 	orr.w	r5, r0, r2
   3044c:	07ad      	lsls	r5, r5, #30
   3044e:	d10a      	bne.n	30466 <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   30450:	2903      	cmp	r1, #3
   30452:	dc0d      	bgt.n	30470 <metal_io_block_read+0x60>
   30454:	3801      	subs	r0, #1
   30456:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   30458:	428a      	cmp	r2, r1
   3045a:	d0ec      	beq.n	30436 <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   3045c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   30460:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   30464:	e7f8      	b.n	30458 <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   30466:	7800      	ldrb	r0, [r0, #0]
			len--;
   30468:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   3046a:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   3046e:	e7e9      	b.n	30444 <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   30470:	f850 4b04 	ldr.w	r4, [r0], #4
   30474:	3904      	subs	r1, #4
   30476:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   3047a:	e7e9      	b.n	30450 <metal_io_block_read+0x40>
		return -ERANGE;
   3047c:	f06f 0321 	mvn.w	r3, #33	; 0x21
   30480:	e7d9      	b.n	30436 <metal_io_block_read+0x26>

00030482 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   30482:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30484:	6804      	ldr	r4, [r0, #0]
		: NULL);
   30486:	1c65      	adds	r5, r4, #1
   30488:	d032      	beq.n	304f0 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   3048a:	6885      	ldr	r5, [r0, #8]
   3048c:	42a9      	cmp	r1, r5
   3048e:	d22f      	bcs.n	304f0 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   30490:	1864      	adds	r4, r4, r1
   30492:	d02d      	beq.n	304f0 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   30494:	185e      	adds	r6, r3, r1
   30496:	42ae      	cmp	r6, r5
		len = io->size - offset;
   30498:	bf88      	it	hi
   3049a:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   3049c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   3049e:	b1cd      	cbz	r5, 304d4 <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   304a0:	9300      	str	r3, [sp, #0]
   304a2:	2305      	movs	r3, #5
   304a4:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   304a6:	b002      	add	sp, #8
   304a8:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   304aa:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   304ae:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   304b0:	7005      	strb	r5, [r0, #0]
			len--;
   304b2:	4615      	mov	r5, r2
   304b4:	18a0      	adds	r0, r4, r2
		while ( len && (
   304b6:	b119      	cbz	r1, 304c0 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   304b8:	ea40 0602 	orr.w	r6, r0, r2
   304bc:	07b6      	lsls	r6, r6, #30
   304be:	d1f4      	bne.n	304aa <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   304c0:	2903      	cmp	r1, #3
   304c2:	dc0a      	bgt.n	304da <metal_io_block_write+0x58>
   304c4:	3d01      	subs	r5, #1
   304c6:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   304c8:	4288      	cmp	r0, r1
   304ca:	d10c      	bne.n	304e6 <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   304cc:	f3bf 8f5b 	dmb	ish
	retlen = len;
   304d0:	4618      	mov	r0, r3
   304d2:	e7e8      	b.n	304a6 <metal_io_block_write+0x24>
   304d4:	4619      	mov	r1, r3
   304d6:	1aa4      	subs	r4, r4, r2
   304d8:	e7eb      	b.n	304b2 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   304da:	f855 2b04 	ldr.w	r2, [r5], #4
   304de:	3904      	subs	r1, #4
   304e0:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   304e4:	e7ec      	b.n	304c0 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   304e6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   304ea:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   304ee:	e7eb      	b.n	304c8 <metal_io_block_write+0x46>
		return -ERANGE;
   304f0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   304f4:	e7d7      	b.n	304a6 <metal_io_block_write+0x24>

000304f6 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   304f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   304f8:	6804      	ldr	r4, [r0, #0]
   304fa:	461d      	mov	r5, r3
		: NULL);
   304fc:	1c66      	adds	r6, r4, #1
   304fe:	d02b      	beq.n	30558 <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   30500:	6883      	ldr	r3, [r0, #8]
   30502:	4299      	cmp	r1, r3
   30504:	d228      	bcs.n	30558 <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   30506:	1864      	adds	r4, r4, r1
   30508:	d026      	beq.n	30558 <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   3050a:	186e      	adds	r6, r5, r1
   3050c:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   3050e:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   30510:	bf88      	it	hi
   30512:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   30514:	b12e      	cbz	r6, 30522 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   30516:	2305      	movs	r3, #5
   30518:	9500      	str	r5, [sp, #0]
   3051a:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   3051c:	4628      	mov	r0, r5
}
   3051e:	b002      	add	sp, #8
   30520:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   30522:	4621      	mov	r1, r4
   30524:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   30526:	b94b      	cbnz	r3, 3053c <metal_io_block_set+0x46>
   30528:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   3052a:	4299      	cmp	r1, r3
   3052c:	d111      	bne.n	30552 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   3052e:	f3bf 8f5b 	dmb	ish
   30532:	e7f3      	b.n	3051c <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   30534:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   30538:	3b01      	subs	r3, #1
   3053a:	e7f4      	b.n	30526 <metal_io_block_set+0x30>
   3053c:	0788      	lsls	r0, r1, #30
   3053e:	d1f9      	bne.n	30534 <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   30540:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   30544:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   30546:	2b03      	cmp	r3, #3
   30548:	ddee      	ble.n	30528 <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   3054a:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   3054e:	3b04      	subs	r3, #4
   30550:	e7f9      	b.n	30546 <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   30552:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   30556:	e7e8      	b.n	3052a <metal_io_block_set+0x34>
		return -ERANGE;
   30558:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3055c:	e7df      	b.n	3051e <metal_io_block_set+0x28>

0003055e <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   3055e:	2000      	movs	r0, #0
   30560:	4770      	bx	lr

00030562 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   30562:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   30564:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   30566:	4602      	mov	r2, r0
   30568:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   3056a:	b984      	cbnz	r4, 3058e <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   3056c:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   3056e:	291f      	cmp	r1, #31
   30570:	bf98      	it	ls
   30572:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   30576:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   30578:	b161      	cbz	r1, 30594 <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   3057a:	6880      	ldr	r0, [r0, #8]
   3057c:	4283      	cmp	r3, r0
   3057e:	d209      	bcs.n	30594 <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   30580:	6910      	ldr	r0, [r2, #16]
   30582:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   30584:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   30588:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   3058a:	bc10      	pop	{r4}
   3058c:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   3058e:	4623      	mov	r3, r4
}
   30590:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   30592:	4718      	bx	r3
			: METAL_BAD_PHYS);
   30594:	f04f 30ff 	mov.w	r0, #4294967295
   30598:	e7f7      	b.n	3058a <metal_io_phys+0x28>

0003059a <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   3059a:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   3059c:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   3059e:	4605      	mov	r5, r0
   305a0:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   305a2:	b9e3      	cbnz	r3, 305de <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   305a4:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   305a6:	1c62      	adds	r2, r4, #1
   305a8:	bf09      	itett	eq
   305aa:	6843      	ldreq	r3, [r0, #4]
   305ac:	400c      	andne	r4, r1
   305ae:	681c      	ldreq	r4, [r3, #0]
   305b0:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   305b2:	4621      	mov	r1, r4
   305b4:	4628      	mov	r0, r5
   305b6:	f7ff ffd4 	bl	30562 <metal_io_phys>
   305ba:	4286      	cmp	r6, r0
   305bc:	d007      	beq.n	305ce <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   305be:	692b      	ldr	r3, [r5, #16]
   305c0:	3301      	adds	r3, #1
   305c2:	441c      	add	r4, r3
		} while (offset < io->size);
   305c4:	68ab      	ldr	r3, [r5, #8]
   305c6:	429c      	cmp	r4, r3
   305c8:	d3f3      	bcc.n	305b2 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   305ca:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   305ce:	6828      	ldr	r0, [r5, #0]
		: NULL);
   305d0:	1c43      	adds	r3, r0, #1
   305d2:	d007      	beq.n	305e4 <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   305d4:	68ab      	ldr	r3, [r5, #8]
   305d6:	42a3      	cmp	r3, r4
   305d8:	d904      	bls.n	305e4 <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   305da:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   305dc:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   305de:	4798      	blx	r3
   305e0:	4604      	mov	r4, r0
   305e2:	e7f4      	b.n	305ce <metal_io_phys_to_virt+0x34>
		: NULL);
   305e4:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   305e6:	e7f9      	b.n	305dc <metal_io_phys_to_virt+0x42>

000305e8 <virtqueue_create>:
{
   305e8:	b530      	push	{r4, r5, lr}
   305ea:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   305ec:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   305f0:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   305f2:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   305f4:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   305f6:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   305f8:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   305fa:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   305fc:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   305fe:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   30600:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   30604:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   30608:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   3060c:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   3060e:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   30610:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   30614:	1c6a      	adds	r2, r5, #1
   30616:	4413      	add	r3, r2
   30618:	426d      	negs	r5, r5
   3061a:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   3061c:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3061e:	6983      	ldr	r3, [r0, #24]
   30620:	b953      	cbnz	r3, 30638 <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   30622:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   30624:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   30626:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   30628:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   3062c:	db06      	blt.n	3063c <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   3062e:	2300      	movs	r3, #0
   30630:	7393      	strb	r3, [r2, #14]
   30632:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   30636:	73d3      	strb	r3, [r2, #15]
}
   30638:	2000      	movs	r0, #0
   3063a:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   3063c:	3301      	adds	r3, #1
   3063e:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   30640:	e7f0      	b.n	30624 <virtqueue_create+0x3c>

00030642 <virtqueue_add_buffer>:
{
   30642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   30646:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   3064a:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3064c:	4655      	mov	r5, sl
   3064e:	2600      	movs	r6, #0
{
   30650:	b085      	sub	sp, #20
	needed = readable + writable;
   30652:	eb02 0803 	add.w	r8, r2, r3
{
   30656:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   30658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3065a:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   3065e:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   30662:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   30664:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   30668:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   3066c:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3066e:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   30670:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   30672:	45b0      	cmp	r8, r6
   30674:	dc1a      	bgt.n	306ac <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   30676:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   30678:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   3067a:	eba3 030b 	sub.w	r3, r3, fp
   3067e:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   30680:	69e3      	ldr	r3, [r4, #28]
   30682:	8961      	ldrh	r1, [r4, #10]
   30684:	885a      	ldrh	r2, [r3, #2]
   30686:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   30688:	400a      	ands	r2, r1
   3068a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   3068e:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   30692:	f3bf 8f5b 	dmb	ish
}
   30696:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   30698:	69e2      	ldr	r2, [r4, #28]
   3069a:	8853      	ldrh	r3, [r2, #2]
   3069c:	3301      	adds	r3, #1
   3069e:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   306a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   306a2:	3301      	adds	r3, #1
   306a4:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   306a6:	b005      	add	sp, #20
   306a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   306ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   306ae:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   306b0:	f857 1c04 	ldr.w	r1, [r7, #-4]
   306b4:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   306b8:	9302      	str	r3, [sp, #8]
   306ba:	6803      	ldr	r3, [r0, #0]
   306bc:	9203      	str	r2, [sp, #12]
   306be:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   306c0:	6883      	ldr	r3, [r0, #8]
   306c2:	3708      	adds	r7, #8
   306c4:	4299      	cmp	r1, r3
   306c6:	bf28      	it	cs
   306c8:	f04f 31ff 	movcs.w	r1, #4294967295
   306cc:	f7ff ff49 	bl	30562 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   306d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   306d4:	5098      	str	r0, [r3, r2]
   306d6:	2200      	movs	r2, #0
   306d8:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   306da:	f857 2c08 	ldr.w	r2, [r7, #-8]
   306de:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   306e0:	9a01      	ldr	r2, [sp, #4]
   306e2:	4296      	cmp	r6, r2
   306e4:	bfac      	ite	ge
   306e6:	2200      	movge	r2, #0
   306e8:	2201      	movlt	r2, #1
		if (i >= readable)
   306ea:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   306ec:	bfd8      	it	le
   306ee:	f042 0202 	orrle.w	r2, r2, #2
   306f2:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   306f4:	3601      	adds	r6, #1
   306f6:	89ed      	ldrh	r5, [r5, #14]
   306f8:	e7bb      	b.n	30672 <virtqueue_add_buffer+0x30>

000306fa <virtqueue_get_buffer>:
{
   306fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   306fc:	b350      	cbz	r0, 30754 <virtqueue_get_buffer+0x5a>
   306fe:	6a05      	ldr	r5, [r0, #32]
   30700:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   30702:	886b      	ldrh	r3, [r5, #2]
   30704:	42a3      	cmp	r3, r4
   30706:	d030      	beq.n	3076a <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   30708:	1c63      	adds	r3, r4, #1
   3070a:	85c3      	strh	r3, [r0, #46]	; 0x2e
   3070c:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   3070e:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   30712:	3b01      	subs	r3, #1
   30714:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   30716:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3071a:	686b      	ldr	r3, [r5, #4]
   3071c:	b29e      	uxth	r6, r3
	if (len)
   3071e:	b109      	cbz	r1, 30724 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   30720:	68ad      	ldr	r5, [r5, #8]
   30722:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   30724:	f8d0 c018 	ldr.w	ip, [r0, #24]
   30728:	b29b      	uxth	r3, r3
   3072a:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   3072e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   30732:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   30734:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   30736:	442f      	add	r7, r5
	dxp->ndescs--;
   30738:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   3073a:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   3073c:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   3073e:	898d      	ldrh	r5, [r1, #12]
   30740:	076f      	lsls	r7, r5, #29
   30742:	d50e      	bpl.n	30762 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   30744:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   30746:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   30748:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   3074a:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   3074c:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   3074e:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   30750:	b102      	cbz	r2, 30754 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   30752:	8014      	strh	r4, [r2, #0]
}
   30754:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   30756:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   30758:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   3075a:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   3075c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   30760:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   30762:	898d      	ldrh	r5, [r1, #12]
   30764:	07ed      	lsls	r5, r5, #31
   30766:	d4f6      	bmi.n	30756 <virtqueue_get_buffer+0x5c>
   30768:	e7ec      	b.n	30744 <virtqueue_get_buffer+0x4a>
		return NULL;
   3076a:	2000      	movs	r0, #0
   3076c:	e7f2      	b.n	30754 <virtqueue_get_buffer+0x5a>

0003076e <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   3076e:	6983      	ldr	r3, [r0, #24]
   30770:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   30774:	6898      	ldr	r0, [r3, #8]
   30776:	4770      	bx	lr

00030778 <virtqueue_get_available_buffer>:
{
   30778:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   3077a:	f3bf 8f5b 	dmb	ish
{
   3077e:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30780:	69c1      	ldr	r1, [r0, #28]
{
   30782:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   30784:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   30786:	884a      	ldrh	r2, [r1, #2]
{
   30788:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   3078a:	429a      	cmp	r2, r3
   3078c:	d016      	beq.n	307bc <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   3078e:	1c5a      	adds	r2, r3, #1
   30790:	8602      	strh	r2, [r0, #48]	; 0x30
   30792:	8942      	ldrh	r2, [r0, #10]
   30794:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   30796:	4013      	ands	r3, r2
   30798:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   3079c:	888a      	ldrh	r2, [r1, #4]
   3079e:	802a      	strh	r2, [r5, #0]
   307a0:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   307a2:	6982      	ldr	r2, [r0, #24]
   307a4:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   307a6:	58d1      	ldr	r1, [r2, r3]
   307a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   307aa:	f7ff fef6 	bl	3059a <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   307ae:	882a      	ldrh	r2, [r5, #0]
   307b0:	69a3      	ldr	r3, [r4, #24]
   307b2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   307b6:	689b      	ldr	r3, [r3, #8]
   307b8:	6033      	str	r3, [r6, #0]
}
   307ba:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   307bc:	2000      	movs	r0, #0
   307be:	e7fc      	b.n	307ba <virtqueue_get_available_buffer+0x42>

000307c0 <virtqueue_disable_cb>:
{
   307c0:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   307c2:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   307c4:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   307c6:	6912      	ldr	r2, [r2, #16]
   307c8:	0092      	lsls	r2, r2, #2
   307ca:	d517      	bpl.n	307fc <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   307cc:	b943      	cbnz	r3, 307e0 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   307ce:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   307d0:	69c2      	ldr	r2, [r0, #28]
   307d2:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   307d4:	8944      	ldrh	r4, [r0, #10]
   307d6:	3b01      	subs	r3, #1
   307d8:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   307da:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   307de:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   307e0:	6803      	ldr	r3, [r0, #0]
   307e2:	699b      	ldr	r3, [r3, #24]
   307e4:	2b01      	cmp	r3, #1
   307e6:	d108      	bne.n	307fa <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   307e8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   307ea:	6a02      	ldr	r2, [r0, #32]
   307ec:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   307ee:	8940      	ldrh	r0, [r0, #10]
   307f0:	3b01      	subs	r3, #1
   307f2:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   307f4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   307f8:	8093      	strh	r3, [r2, #4]
}
   307fa:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   307fc:	b923      	cbnz	r3, 30808 <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   307fe:	69c2      	ldr	r2, [r0, #28]
   30800:	8813      	ldrh	r3, [r2, #0]
   30802:	f043 0301 	orr.w	r3, r3, #1
   30806:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   30808:	6803      	ldr	r3, [r0, #0]
   3080a:	699b      	ldr	r3, [r3, #24]
   3080c:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   3080e:	bf01      	itttt	eq
   30810:	6a02      	ldreq	r2, [r0, #32]
   30812:	8813      	ldrheq	r3, [r2, #0]
   30814:	f043 0301 	orreq.w	r3, r3, #1
   30818:	8013      	strheq	r3, [r2, #0]
}
   3081a:	e7ee      	b.n	307fa <virtqueue_disable_cb+0x3a>

0003081c <virtqueue_kick>:
{
   3081c:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   3081e:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   30822:	6803      	ldr	r3, [r0, #0]
{
   30824:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   30826:	691a      	ldr	r2, [r3, #16]
   30828:	699b      	ldr	r3, [r3, #24]
   3082a:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   3082e:	d01a      	beq.n	30866 <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   30830:	b97b      	cbnz	r3, 30852 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   30832:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   30834:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   30836:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   30838:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   3083a:	3b01      	subs	r3, #1
   3083c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   30840:	8892      	ldrh	r2, [r2, #4]
   30842:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   30844:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   30846:	b29b      	uxth	r3, r3
   30848:	429a      	cmp	r2, r3
   3084a:	d814      	bhi.n	30876 <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   3084c:	2300      	movs	r3, #0
   3084e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   30850:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   30852:	2b01      	cmp	r3, #1
   30854:	d1fa      	bne.n	3084c <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   30856:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   30858:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   3085a:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   3085c:	6941      	ldr	r1, [r0, #20]
   3085e:	3b01      	subs	r3, #1
   30860:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   30864:	e7ec      	b.n	30840 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   30866:	b963      	cbnz	r3, 30882 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   30868:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   3086a:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   3086c:	43db      	mvns	r3, r3
   3086e:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   30872:	2b00      	cmp	r3, #0
   30874:	d0ea      	beq.n	3084c <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   30876:	6923      	ldr	r3, [r4, #16]
   30878:	2b00      	cmp	r3, #0
   3087a:	d0e7      	beq.n	3084c <virtqueue_kick+0x30>
		vq->notify(vq);
   3087c:	4620      	mov	r0, r4
   3087e:	4798      	blx	r3
   30880:	e7e4      	b.n	3084c <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   30882:	2b01      	cmp	r3, #1
   30884:	d1e2      	bne.n	3084c <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   30886:	69c3      	ldr	r3, [r0, #28]
   30888:	e7ef      	b.n	3086a <virtqueue_kick+0x4e>

0003088a <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   3088a:	69c3      	ldr	r3, [r0, #28]
   3088c:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   3088e:	8859      	ldrh	r1, [r3, #2]
   30890:	4291      	cmp	r1, r2
   30892:	d00a      	beq.n	308aa <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   30894:	8941      	ldrh	r1, [r0, #10]
   30896:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   30898:	400a      	ands	r2, r1
   3089a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   3089e:	889a      	ldrh	r2, [r3, #4]
   308a0:	6983      	ldr	r3, [r0, #24]
   308a2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   308a6:	6898      	ldr	r0, [r3, #8]
	return len;
   308a8:	4770      	bx	lr
		return 0;
   308aa:	2000      	movs	r0, #0
}
   308ac:	4770      	bx	lr

000308ae <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   308ae:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   308b2:	68c3      	ldr	r3, [r0, #12]
   308b4:	b103      	cbz	r3, 308b8 <virtqueue_notification+0xa>
		vq->callback(vq);
   308b6:	4718      	bx	r3
}
   308b8:	4770      	bx	lr

000308ba <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   308ba:	f04f 32ff 	mov.w	r2, #4294967295
   308be:	f04f 33ff 	mov.w	r3, #4294967295
   308c2:	f7f5 ba2d 	b.w	25d20 <z_impl_k_sem_take>

000308c6 <rpmsg_unregister_endpoint>:
{
   308c6:	b570      	push	{r4, r5, r6, lr}
   308c8:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   308ca:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   308cc:	f105 0658 	add.w	r6, r5, #88	; 0x58
   308d0:	4630      	mov	r0, r6
   308d2:	f7ff fff2 	bl	308ba <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   308d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   308d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   308dc:	2b7f      	cmp	r3, #127	; 0x7f
   308de:	d80b      	bhi.n	308f8 <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   308e0:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   308e2:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   308e4:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   308e6:	f003 031f 	and.w	r3, r3, #31
   308ea:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   308ec:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   308f0:	ea23 0302 	bic.w	r3, r3, r2
   308f4:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   308f8:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   308fc:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   308fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   30900:	f104 0334 	add.w	r3, r4, #52	; 0x34
   30904:	6011      	str	r1, [r2, #0]
	node->next = node;
   30906:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   3090a:	2300      	movs	r3, #0
   3090c:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   3090e:	4630      	mov	r0, r6
}
   30910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   30914:	f7f5 b9de 	b.w	25cd4 <z_impl_k_sem_give>

00030918 <rpmsg_send_ns_message>:
{
   30918:	b530      	push	{r4, r5, lr}
   3091a:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   3091c:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   3091e:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   30920:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   30922:	2220      	movs	r2, #32
   30924:	4601      	mov	r1, r0
   30926:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   30928:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   3092a:	f001 fa1d 	bl	31d68 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   3092e:	2328      	movs	r3, #40	; 0x28
   30930:	2201      	movs	r2, #1
   30932:	4629      	mov	r1, r5
   30934:	e9cd 3200 	strd	r3, r2, [sp]
   30938:	4620      	mov	r0, r4
   3093a:	2235      	movs	r2, #53	; 0x35
   3093c:	ab02      	add	r3, sp, #8
   3093e:	f7f4 fb5b 	bl	24ff8 <rpmsg_send_offchannel_raw>
}
   30942:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   30946:	b00d      	add	sp, #52	; 0x34
   30948:	bd30      	pop	{r4, r5, pc}

0003094a <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   3094a:	b128      	cbz	r0, 30958 <rpmsg_hold_rx_buffer+0xe>
   3094c:	6a00      	ldr	r0, [r0, #32]
   3094e:	b118      	cbz	r0, 30958 <rpmsg_hold_rx_buffer+0xe>
   30950:	b111      	cbz	r1, 30958 <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   30952:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   30954:	b103      	cbz	r3, 30958 <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   30956:	4718      	bx	r3
}
   30958:	4770      	bx	lr

0003095a <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   3095a:	b130      	cbz	r0, 3096a <rpmsg_release_rx_buffer+0x10>
   3095c:	6a00      	ldr	r0, [r0, #32]
   3095e:	b120      	cbz	r0, 3096a <rpmsg_release_rx_buffer+0x10>
   30960:	b119      	cbz	r1, 3096a <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   30962:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   30966:	b103      	cbz	r3, 3096a <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   30968:	4718      	bx	r3
}
   3096a:	4770      	bx	lr

0003096c <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   3096c:	b130      	cbz	r0, 3097c <rpmsg_get_tx_payload_buffer+0x10>
   3096e:	6a00      	ldr	r0, [r0, #32]
   30970:	b120      	cbz	r0, 3097c <rpmsg_get_tx_payload_buffer+0x10>
   30972:	b119      	cbz	r1, 3097c <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   30974:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   30978:	b103      	cbz	r3, 3097c <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   3097a:	4718      	bx	r3
}
   3097c:	2000      	movs	r0, #0
   3097e:	4770      	bx	lr

00030980 <rpmsg_get_endpoint>:
{
   30980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30984:	4606      	mov	r6, r0
   30986:	4688      	mov	r8, r1
   30988:	4617      	mov	r7, r2
   3098a:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   3098c:	6804      	ldr	r4, [r0, #0]
   3098e:	42a6      	cmp	r6, r4
   30990:	d101      	bne.n	30996 <rpmsg_get_endpoint+0x16>
	return NULL;
   30992:	2500      	movs	r5, #0
   30994:	e023      	b.n	309de <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   30996:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   30998:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   3099c:	d002      	beq.n	309a4 <rpmsg_get_endpoint+0x24>
   3099e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   309a0:	42bb      	cmp	r3, r7
   309a2:	d01c      	beq.n	309de <rpmsg_get_endpoint+0x5e>
		if (name)
   309a4:	f1b8 0f00 	cmp.w	r8, #0
   309a8:	d101      	bne.n	309ae <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   309aa:	6824      	ldr	r4, [r4, #0]
   309ac:	e7ef      	b.n	3098e <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   309ae:	2220      	movs	r2, #32
   309b0:	4641      	mov	r1, r8
   309b2:	4628      	mov	r0, r5
   309b4:	f001 f9c6 	bl	31d44 <strncmp>
		if (!name || !name_match)
   309b8:	2800      	cmp	r0, #0
   309ba:	d1f6      	bne.n	309aa <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   309bc:	f1b9 3fff 	cmp.w	r9, #4294967295
   309c0:	d002      	beq.n	309c8 <rpmsg_get_endpoint+0x48>
   309c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   309c4:	454b      	cmp	r3, r9
   309c6:	d00a      	beq.n	309de <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   309c8:	1c7b      	adds	r3, r7, #1
   309ca:	d00b      	beq.n	309e4 <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   309cc:	6824      	ldr	r4, [r4, #0]
   309ce:	42b4      	cmp	r4, r6
   309d0:	d0df      	beq.n	30992 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   309d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   309d6:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   309da:	429f      	cmp	r7, r3
   309dc:	d1e7      	bne.n	309ae <rpmsg_get_endpoint+0x2e>
}
   309de:	4628      	mov	r0, r5
   309e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   309e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   309e6:	3301      	adds	r3, #1
   309e8:	d0f9      	beq.n	309de <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   309ea:	6824      	ldr	r4, [r4, #0]
   309ec:	42b4      	cmp	r4, r6
   309ee:	d0d0      	beq.n	30992 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   309f0:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   309f4:	e7d6      	b.n	309a4 <rpmsg_get_endpoint+0x24>

000309f6 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   309f6:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   309f8:	4604      	mov	r4, r0
   309fa:	b190      	cbz	r0, 30a22 <rpmsg_destroy_ept+0x2c>
   309fc:	6a03      	ldr	r3, [r0, #32]
   309fe:	b183      	cbz	r3, 30a22 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   30a00:	7802      	ldrb	r2, [r0, #0]
   30a02:	b14a      	cbz	r2, 30a18 <rpmsg_destroy_ept+0x22>
   30a04:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   30a08:	b133      	cbz	r3, 30a18 <rpmsg_destroy_ept+0x22>
   30a0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   30a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   30a10:	d302      	bcc.n	30a18 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   30a12:	2101      	movs	r1, #1
   30a14:	f7ff ff80 	bl	30918 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   30a18:	4620      	mov	r0, r4
}
   30a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   30a1e:	f7ff bf52 	b.w	308c6 <rpmsg_unregister_endpoint>
}
   30a22:	bd10      	pop	{r4, pc}

00030a24 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   30a24:	f851 3c08 	ldr.w	r3, [r1, #-8]
   30a28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   30a2c:	f841 3c08 	str.w	r3, [r1, #-8]
}
   30a30:	4770      	bx	lr

00030a32 <rpmsg_virtio_tx_callback>:
}
   30a32:	4770      	bx	lr

00030a34 <k_sem_give>:
   30a34:	f7f5 b94e 	b.w	25cd4 <z_impl_k_sem_give>

00030a38 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   30a38:	f04f 32ff 	mov.w	r2, #4294967295
   30a3c:	f04f 33ff 	mov.w	r3, #4294967295
   30a40:	f7f5 b96e 	b.w	25d20 <z_impl_k_sem_take>

00030a44 <rpmsg_virtio_release_tx_buffer>:
{
   30a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30a46:	460c      	mov	r4, r1
   30a48:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   30a4a:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   30a4e:	f100 0758 	add.w	r7, r0, #88	; 0x58
   30a52:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   30a54:	b2b6      	uxth	r6, r6
   30a56:	f7ff ffef 	bl	30a38 <__metal_mutex_acquire>
	r_desc->idx = idx;
   30a5a:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   30a5e:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   30a62:	f1a4 0310 	sub.w	r3, r4, #16
   30a66:	f844 2c0c 	str.w	r2, [r4, #-12]
   30a6a:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   30a6e:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   30a72:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   30a76:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   30a7a:	4638      	mov	r0, r7
   30a7c:	6013      	str	r3, [r2, #0]
   30a7e:	f7ff ffd9 	bl	30a34 <k_sem_give>
}
   30a82:	2000      	movs	r0, #0
   30a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030a86 <rpmsg_virtio_ns_callback>:
{
   30a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   30a8a:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   30a8c:	2a28      	cmp	r2, #40	; 0x28
{
   30a8e:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   30a90:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   30a94:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   30a96:	d126      	bne.n	30ae6 <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   30a98:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   30a9a:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   30a9c:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   30a9e:	42a1      	cmp	r1, r4
   30aa0:	bf28      	it	cs
   30aa2:	f04f 31ff 	movcs.w	r1, #4294967295
   30aa6:	2320      	movs	r3, #32
   30aa8:	466a      	mov	r2, sp
   30aaa:	f7ff fcb1 	bl	30410 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   30aae:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   30ab2:	f8d7 8020 	ldr.w	r8, [r7, #32]
   30ab6:	4630      	mov	r0, r6
   30ab8:	f7ff ffbe 	bl	30a38 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   30abc:	4643      	mov	r3, r8
   30abe:	f04f 32ff 	mov.w	r2, #4294967295
   30ac2:	4669      	mov	r1, sp
   30ac4:	4628      	mov	r0, r5
   30ac6:	f7ff ff5b 	bl	30980 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   30aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   30acc:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   30ace:	07db      	lsls	r3, r3, #31
   30ad0:	d519      	bpl.n	30b06 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   30ad2:	b960      	cbnz	r0, 30aee <rpmsg_virtio_ns_callback+0x68>
   30ad4:	4630      	mov	r0, r6
   30ad6:	f7ff ffad 	bl	30a34 <k_sem_give>
		if (rdev->ns_unbind_cb)
   30ada:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   30adc:	b11b      	cbz	r3, 30ae6 <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   30ade:	4642      	mov	r2, r8
   30ae0:	4669      	mov	r1, sp
   30ae2:	4628      	mov	r0, r5
   30ae4:	4798      	blx	r3
}
   30ae6:	2000      	movs	r0, #0
   30ae8:	b008      	add	sp, #32
   30aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   30aee:	f04f 33ff 	mov.w	r3, #4294967295
   30af2:	6283      	str	r3, [r0, #40]	; 0x28
   30af4:	4630      	mov	r0, r6
   30af6:	f7ff ff9d 	bl	30a34 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   30afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   30afc:	2b00      	cmp	r3, #0
   30afe:	d0ec      	beq.n	30ada <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   30b00:	4620      	mov	r0, r4
   30b02:	4798      	blx	r3
   30b04:	e7e9      	b.n	30ada <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   30b06:	b920      	cbnz	r0, 30b12 <rpmsg_virtio_ns_callback+0x8c>
   30b08:	4630      	mov	r0, r6
   30b0a:	f7ff ff93 	bl	30a34 <k_sem_give>
			if (rdev->ns_bind_cb)
   30b0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   30b10:	e7e4      	b.n	30adc <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   30b12:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   30b16:	4630      	mov	r0, r6
   30b18:	f7ff ff8c 	bl	30a34 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   30b1c:	e7e3      	b.n	30ae6 <rpmsg_virtio_ns_callback+0x60>

00030b1e <rpmsg_virtio_get_rx_buffer>:
{
   30b1e:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   30b20:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   30b24:	4613      	mov	r3, r2
   30b26:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   30b28:	b925      	cbnz	r5, 30b34 <rpmsg_virtio_get_rx_buffer+0x16>
}
   30b2a:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   30b2c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   30b30:	f7ff bde3 	b.w	306fa <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   30b34:	2d01      	cmp	r5, #1
   30b36:	d106      	bne.n	30b46 <rpmsg_virtio_get_rx_buffer+0x28>
}
   30b38:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   30b3a:	460a      	mov	r2, r1
   30b3c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   30b40:	4619      	mov	r1, r3
   30b42:	f7ff be19 	b.w	30778 <virtqueue_get_available_buffer>
}
   30b46:	2000      	movs	r0, #0
   30b48:	bc30      	pop	{r4, r5}
   30b4a:	4770      	bx	lr

00030b4c <rpmsg_virtio_return_buffer>:
{
   30b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   30b4e:	460c      	mov	r4, r1
   30b50:	4619      	mov	r1, r3
   30b52:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   30b56:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   30b58:	b95d      	cbnz	r5, 30b72 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   30b5a:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   30b5c:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   30b60:	2301      	movs	r3, #1
   30b62:	462a      	mov	r2, r5
   30b64:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   30b68:	a902      	add	r1, sp, #8
   30b6a:	f7ff fd6a 	bl	30642 <virtqueue_add_buffer>
}
   30b6e:	b004      	add	sp, #16
   30b70:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   30b72:	2d01      	cmp	r5, #1
   30b74:	d1fb      	bne.n	30b6e <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   30b76:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   30b7a:	b004      	add	sp, #16
   30b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   30b80:	f7f4 ba1e 	b.w	24fc0 <virtqueue_add_consumed_buffer>

00030b84 <rpmsg_virtio_rx_callback>:
{
   30b84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   30b88:	6803      	ldr	r3, [r0, #0]
   30b8a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   30b8c:	f107 0658 	add.w	r6, r7, #88	; 0x58
	__metal_mutex_acquire(mutex);
   30b90:	4630      	mov	r0, r6
   30b92:	f7ff ff51 	bl	30a38 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   30b96:	4638      	mov	r0, r7
   30b98:	f10d 020a 	add.w	r2, sp, #10
   30b9c:	a903      	add	r1, sp, #12
   30b9e:	f7ff ffbe 	bl	30b1e <rpmsg_virtio_get_rx_buffer>
   30ba2:	4604      	mov	r4, r0
   30ba4:	4630      	mov	r0, r6
   30ba6:	f7ff ff45 	bl	30a34 <k_sem_give>
	while (rp_hdr) {
   30baa:	2c00      	cmp	r4, #0
   30bac:	d041      	beq.n	30c32 <rpmsg_virtio_rx_callback+0xae>
		rp_hdr->reserved = idx;
   30bae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   30bb2:	4630      	mov	r0, r6
   30bb4:	60a3      	str	r3, [r4, #8]
   30bb6:	f7ff ff3f 	bl	30a38 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   30bba:	f04f 33ff 	mov.w	r3, #4294967295
   30bbe:	2100      	movs	r1, #0
   30bc0:	4638      	mov	r0, r7
   30bc2:	6862      	ldr	r2, [r4, #4]
   30bc4:	f7ff fedc 	bl	30980 <rpmsg_get_endpoint>
   30bc8:	4605      	mov	r5, r0
   30bca:	4630      	mov	r0, r6
   30bcc:	f7ff ff32 	bl	30a34 <k_sem_give>
		if (ept) {
   30bd0:	b17d      	cbz	r5, 30bf2 <rpmsg_virtio_rx_callback+0x6e>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   30bd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   30bd4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   30bd6:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   30bd8:	bf08      	it	eq
   30bda:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   30bdc:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   30bde:	bf08      	it	eq
   30be0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   30be2:	6823      	ldr	r3, [r4, #0]
   30be4:	89a2      	ldrh	r2, [r4, #12]
   30be6:	9100      	str	r1, [sp, #0]
   30be8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   30bec:	f104 0110 	add.w	r1, r4, #16
   30bf0:	47c0      	blx	r8
   30bf2:	4630      	mov	r0, r6
   30bf4:	f7ff ff20 	bl	30a38 <__metal_mutex_acquire>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   30bf8:	68a3      	ldr	r3, [r4, #8]
   30bfa:	2b00      	cmp	r3, #0
   30bfc:	db06      	blt.n	30c0c <rpmsg_virtio_rx_callback+0x88>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30bfe:	4621      	mov	r1, r4
   30c00:	4638      	mov	r0, r7
   30c02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   30c06:	9a03      	ldr	r2, [sp, #12]
   30c08:	f7ff ffa0 	bl	30b4c <rpmsg_virtio_return_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   30c0c:	4638      	mov	r0, r7
   30c0e:	f10d 020a 	add.w	r2, sp, #10
   30c12:	a903      	add	r1, sp, #12
   30c14:	f7ff ff83 	bl	30b1e <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   30c18:	4604      	mov	r4, r0
   30c1a:	b118      	cbz	r0, 30c24 <rpmsg_virtio_rx_callback+0xa0>
   30c1c:	4630      	mov	r0, r6
   30c1e:	f7ff ff09 	bl	30a34 <k_sem_give>
	while (rp_hdr) {
   30c22:	e7c4      	b.n	30bae <rpmsg_virtio_rx_callback+0x2a>
			virtqueue_kick(rvdev->rvq);
   30c24:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   30c28:	f7ff fdf8 	bl	3081c <virtqueue_kick>
   30c2c:	4630      	mov	r0, r6
   30c2e:	f7ff ff01 	bl	30a34 <k_sem_give>
}
   30c32:	b004      	add	sp, #16
   30c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00030c38 <rpmsg_virtio_release_rx_buffer>:
{
   30c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30c3a:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   30c3c:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   30c40:	f100 0758 	add.w	r7, r0, #88	; 0x58
   30c44:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   30c46:	b2b6      	uxth	r6, r6
{
   30c48:	460d      	mov	r5, r1
   30c4a:	f7ff fef5 	bl	30a38 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   30c4e:	4631      	mov	r1, r6
   30c50:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   30c54:	f7ff fd8b 	bl	3076e <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30c58:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   30c5a:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30c5c:	f1a5 0110 	sub.w	r1, r5, #16
   30c60:	4620      	mov	r0, r4
   30c62:	f7ff ff73 	bl	30b4c <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   30c66:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   30c6a:	f7ff fdd7 	bl	3081c <virtqueue_kick>
   30c6e:	4638      	mov	r0, r7
}
   30c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30c74:	f7ff bede 	b.w	30a34 <k_sem_give>

00030c78 <rpmsg_virtio_send_offchannel_nocopy>:
{
   30c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	hdr = RPMSG_LOCATE_HDR(data);
   30c7c:	f1a3 0610 	sub.w	r6, r3, #16
	idx = hdr->reserved;
   30c80:	f853 5c08 	ldr.w	r5, [r3, #-8]
	rp_hdr.reserved = 0;
   30c84:	2300      	movs	r3, #0
{
   30c86:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   30c88:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   30c8a:	f8ad 301e 	strh.w	r3, [sp, #30]
{
   30c8e:	4604      	mov	r4, r0
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   30c90:	2310      	movs	r3, #16
	rp_hdr.src = src;
   30c92:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   30c96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	io = rvdev->shbuf_io;
   30c98:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   30c9c:	f8ad 701c 	strh.w	r7, [sp, #28]
   30ca0:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   30ca2:	f8d0 c008 	ldr.w	ip, [r0, #8]
   30ca6:	1a71      	subs	r1, r6, r1
   30ca8:	eb0d 0203 	add.w	r2, sp, r3
   30cac:	4561      	cmp	r1, ip
   30cae:	bf28      	it	cs
   30cb0:	f04f 31ff 	movcs.w	r1, #4294967295
	metal_mutex_acquire(&rdev->lock);
   30cb4:	f104 0858 	add.w	r8, r4, #88	; 0x58
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   30cb8:	f7ff fbe3 	bl	30482 <metal_io_block_write>
   30cbc:	4640      	mov	r0, r8
   30cbe:	f7ff febb 	bl	30a38 <__metal_mutex_acquire>
   30cc2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	idx = hdr->reserved;
   30cc6:	b2ad      	uxth	r5, r5
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   30cc8:	699b      	ldr	r3, [r3, #24]
   30cca:	b9cb      	cbnz	r3, 30d00 <rpmsg_virtio_send_offchannel_nocopy+0x88>
		buff_len = rvdev->config.h2r_buf_size;
   30ccc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   30cd0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   30cd4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30cd8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   30cda:	b9c3      	cbnz	r3, 30d0e <rpmsg_virtio_send_offchannel_nocopy+0x96>
		vqbuf.len = len;
   30cdc:	e9cd 6202 	strd	r6, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   30ce0:	9600      	str	r6, [sp, #0]
   30ce2:	2201      	movs	r2, #1
   30ce4:	a902      	add	r1, sp, #8
   30ce6:	f7ff fcac 	bl	30642 <virtqueue_add_buffer>
	virtqueue_kick(rvdev->svq);
   30cea:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30cee:	f7ff fd95 	bl	3081c <virtqueue_kick>
   30cf2:	4640      	mov	r0, r8
   30cf4:	f7ff fe9e 	bl	30a34 <k_sem_give>
}
   30cf8:	4638      	mov	r0, r7
   30cfa:	b008      	add	sp, #32
   30cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   30d00:	4629      	mov	r1, r5
   30d02:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30d06:	f7ff fd32 	bl	3076e <virtqueue_get_buffer_length>
   30d0a:	4602      	mov	r2, r0
   30d0c:	e7e0      	b.n	30cd0 <rpmsg_virtio_send_offchannel_nocopy+0x58>
	if (role == RPMSG_REMOTE) {
   30d0e:	2b01      	cmp	r3, #1
   30d10:	d1eb      	bne.n	30cea <rpmsg_virtio_send_offchannel_nocopy+0x72>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   30d12:	4629      	mov	r1, r5
   30d14:	f7f4 f954 	bl	24fc0 <virtqueue_add_consumed_buffer>
   30d18:	e7e7      	b.n	30cea <rpmsg_virtio_send_offchannel_nocopy+0x72>

00030d1a <rpmsg_virtio_shm_pool_get_buffer>:
{
   30d1a:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   30d1c:	b148      	cbz	r0, 30d32 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   30d1e:	b149      	cbz	r1, 30d34 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   30d20:	6843      	ldr	r3, [r0, #4]
   30d22:	428b      	cmp	r3, r1
   30d24:	d306      	bcc.n	30d34 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   30d26:	6882      	ldr	r2, [r0, #8]
   30d28:	6804      	ldr	r4, [r0, #0]
   30d2a:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   30d2c:	1a5b      	subs	r3, r3, r1
   30d2e:	6043      	str	r3, [r0, #4]
	return buffer;
   30d30:	18a0      	adds	r0, r4, r2
}
   30d32:	bd10      	pop	{r4, pc}
		return NULL;
   30d34:	2000      	movs	r0, #0
   30d36:	e7fc      	b.n	30d32 <rpmsg_virtio_shm_pool_get_buffer+0x18>

00030d38 <rpmsg_virtio_get_tx_payload_buffer>:
{
   30d38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   30d3c:	4605      	mov	r5, r0
   30d3e:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   30d42:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   30d44:	6a03      	ldr	r3, [r0, #32]
   30d46:	4617      	mov	r7, r2
   30d48:	681b      	ldr	r3, [r3, #0]
   30d4a:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   30d4c:	0743      	lsls	r3, r0, #29
   30d4e:	d403      	bmi.n	30d58 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   30d50:	2000      	movs	r0, #0
}
   30d52:	b002      	add	sp, #8
   30d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   30d58:	f643 2398 	movw	r3, #15000	; 0x3a98
   30d5c:	2f00      	cmp	r7, #0
   30d5e:	bf18      	it	ne
   30d60:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   30d62:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   30d66:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   30d6a:	4640      	mov	r0, r8
   30d6c:	f7ff fe64 	bl	30a38 <__metal_mutex_acquire>
	return list->next == list;
   30d70:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   30d74:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   30d78:	4554      	cmp	r4, sl
   30d7a:	f8d3 9018 	ldr.w	r9, [r3, #24]
   30d7e:	d025      	beq.n	30dcc <rpmsg_virtio_get_tx_payload_buffer+0x94>
	if (node) {
   30d80:	b324      	cbz	r4, 30dcc <rpmsg_virtio_get_tx_payload_buffer+0x94>
	node->next->prev = node->prev;
   30d82:	e9d4 2300 	ldrd	r2, r3, [r4]
   30d86:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   30d88:	6822      	ldr	r2, [r4, #0]
   30d8a:	601a      	str	r2, [r3, #0]
	node->next = node;
   30d8c:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   30d90:	f1b9 0f00 	cmp.w	r9, #0
   30d94:	d10e      	bne.n	30db4 <rpmsg_virtio_get_tx_payload_buffer+0x7c>
			*len = rvdev->config.h2r_buf_size;
   30d96:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   30d9a:	6033      	str	r3, [r6, #0]
   30d9c:	4640      	mov	r0, r8
   30d9e:	f7ff fe49 	bl	30a34 <k_sem_give>
	rp_hdr->reserved = idx;
   30da2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30da6:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   30daa:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   30dac:	6833      	ldr	r3, [r6, #0]
   30dae:	3b10      	subs	r3, #16
   30db0:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30db2:	e7ce      	b.n	30d52 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   30db4:	f1b9 0f01 	cmp.w	r9, #1
   30db8:	d1f0      	bne.n	30d9c <rpmsg_virtio_get_tx_payload_buffer+0x64>
			*idx = r_desc->idx;
   30dba:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30dbc:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   30dc0:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30dc4:	f7ff fcd3 	bl	3076e <virtqueue_get_buffer_length>
   30dc8:	6030      	str	r0, [r6, #0]
   30dca:	e7e7      	b.n	30d9c <rpmsg_virtio_get_tx_payload_buffer+0x64>
	} else if (role == RPMSG_HOST) {
   30dcc:	f1b9 0f00 	cmp.w	r9, #0
   30dd0:	d12a      	bne.n	30e28 <rpmsg_virtio_get_tx_payload_buffer+0xf0>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   30dd2:	4631      	mov	r1, r6
   30dd4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30dd8:	f10d 0206 	add.w	r2, sp, #6
   30ddc:	f7ff fc8d 	bl	306fa <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   30de0:	4604      	mov	r4, r0
   30de2:	2800      	cmp	r0, #0
   30de4:	d1da      	bne.n	30d9c <rpmsg_virtio_get_tx_payload_buffer+0x64>
   30de6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   30dea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   30dec:	b953      	cbnz	r3, 30e04 <rpmsg_virtio_get_tx_payload_buffer+0xcc>
   30dee:	4640      	mov	r0, r8
   30df0:	f7ff fe20 	bl	30a34 <k_sem_give>
		if (rp_hdr || !tick_count)
   30df4:	2f00      	cmp	r7, #0
   30df6:	d0ab      	beq.n	30d50 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   30df8:	2021      	movs	r0, #33	; 0x21
   30dfa:	2100      	movs	r1, #0
   30dfc:	f7f5 fc8e 	bl	2671c <z_impl_k_sleep>
		tick_count--;
   30e00:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   30e02:	e7b2      	b.n	30d6a <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   30e04:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   30e08:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   30e0c:	f7ff ff85 	bl	30d1a <rpmsg_virtio_shm_pool_get_buffer>
   30e10:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   30e12:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   30e16:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   30e1a:	6033      	str	r3, [r6, #0]
   30e1c:	4640      	mov	r0, r8
   30e1e:	f7ff fe09 	bl	30a34 <k_sem_give>
		if (rp_hdr || !tick_count)
   30e22:	2c00      	cmp	r4, #0
   30e24:	d0e6      	beq.n	30df4 <rpmsg_virtio_get_tx_payload_buffer+0xbc>
   30e26:	e7bc      	b.n	30da2 <rpmsg_virtio_get_tx_payload_buffer+0x6a>
	} else if (role == RPMSG_REMOTE) {
   30e28:	f1b9 0f01 	cmp.w	r9, #1
   30e2c:	d1df      	bne.n	30dee <rpmsg_virtio_get_tx_payload_buffer+0xb6>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   30e2e:	4632      	mov	r2, r6
   30e30:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30e34:	f10d 0106 	add.w	r1, sp, #6
   30e38:	f7ff fc9e 	bl	30778 <virtqueue_get_available_buffer>
   30e3c:	4604      	mov	r4, r0
   30e3e:	e7ed      	b.n	30e1c <rpmsg_virtio_get_tx_payload_buffer+0xe4>

00030e40 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   30e40:	b120      	cbz	r0, 30e4c <rpmsg_virtio_init_shm_pool+0xc>
   30e42:	b119      	cbz	r1, 30e4c <rpmsg_virtio_init_shm_pool+0xc>
   30e44:	b112      	cbz	r2, 30e4c <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   30e46:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   30e4a:	6001      	str	r1, [r0, #0]
}
   30e4c:	4770      	bx	lr

00030e4e <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   30e4e:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   30e50:	4604      	mov	r4, r0
   30e52:	b918      	cbnz	r0, 30e5c <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   30e54:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   30e56:	3834      	subs	r0, #52	; 0x34
   30e58:	f7ff fdcd 	bl	309f6 <rpmsg_destroy_ept>
	return list->next == list;
   30e5c:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   30e5e:	4284      	cmp	r4, r0
   30e60:	d1f9      	bne.n	30e56 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   30e62:	2300      	movs	r3, #0
		rvdev->svq = 0;
   30e64:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   30e68:	e7f4      	b.n	30e54 <rpmsg_deinit_vdev+0x6>

00030e6a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   30e6a:	f7f4 bb25 	b.w	254b8 <_DoInit>

00030e6e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   30e6e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   30e70:	f7ff fffb 	bl	30e6a <SEGGER_RTT_Init>

	return 0;
}
   30e74:	2000      	movs	r0, #0
   30e76:	bd08      	pop	{r3, pc}

00030e78 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   30e78:	4770      	bx	lr

00030e7a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   30e7a:	b140      	cbz	r0, 30e8e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   30e7c:	68c3      	ldr	r3, [r0, #12]
   30e7e:	7858      	ldrb	r0, [r3, #1]
   30e80:	f010 0001 	ands.w	r0, r0, #1
   30e84:	bf1e      	ittt	ne
   30e86:	7818      	ldrbne	r0, [r3, #0]
   30e88:	fab0 f080 	clzne	r0, r0
   30e8c:	0940      	lsrne	r0, r0, #5
}
   30e8e:	4770      	bx	lr

00030e90 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30e92:	ab0b      	add	r3, sp, #44	; 0x2c
   30e94:	9305      	str	r3, [sp, #20]
   30e96:	9303      	str	r3, [sp, #12]
   30e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30e9a:	2201      	movs	r2, #1
   30e9c:	9302      	str	r3, [sp, #8]
   30e9e:	2300      	movs	r3, #0
   30ea0:	4618      	mov	r0, r3
   30ea2:	e9cd 3300 	strd	r3, r3, [sp]
   30ea6:	f7de fc39 	bl	f71c <z_impl_z_log_msg_runtime_vcreate>
}
   30eaa:	b007      	add	sp, #28
   30eac:	f85d fb04 	ldr.w	pc, [sp], #4

00030eb0 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   30eb0:	f000 bdf1 	b.w	31a96 <memset>

00030eb4 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30eb4:	f000 bdb5 	b.w	31a22 <memcpy>

00030eb8 <k_heap_init>:
{
   30eb8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   30eba:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   30ebe:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30ec2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30ec4:	f7f9 bc7b 	b.w	2a7be <sys_heap_init>

00030ec8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   30ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ecc:	b085      	sub	sp, #20
   30ece:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   30ed2:	4607      	mov	r7, r0
   30ed4:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30ed6:	4650      	mov	r0, sl
   30ed8:	4621      	mov	r1, r4
{
   30eda:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30edc:	f000 fbcd 	bl	3167a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30ee0:	f1b4 3fff 	cmp.w	r4, #4294967295
   30ee4:	bf08      	it	eq
   30ee6:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30eea:	4605      	mov	r5, r0
   30eec:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30eee:	bf04      	itt	eq
   30ef0:	f04f 35ff 	moveq.w	r5, #4294967295
   30ef4:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30ef8:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   30efc:	f04f 0320 	mov.w	r3, #32
   30f00:	f3ef 8411 	mrs	r4, BASEPRI
   30f04:	f383 8812 	msr	BASEPRI_MAX, r3
   30f08:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30f0c:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   30f10:	464a      	mov	r2, r9
   30f12:	4641      	mov	r1, r8
   30f14:	4638      	mov	r0, r7
   30f16:	f7f9 fbeb 	bl	2a6f0 <sys_heap_aligned_alloc>
   30f1a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   30f1c:	f7f5 fdd2 	bl	26ac4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   30f20:	9b03      	ldr	r3, [sp, #12]
   30f22:	b13b      	cbz	r3, 30f34 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   30f24:	f384 8811 	msr	BASEPRI, r4
   30f28:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   30f2c:	4618      	mov	r0, r3
   30f2e:	b005      	add	sp, #20
   30f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   30f34:	1a28      	subs	r0, r5, r0
   30f36:	eb66 0101 	sbc.w	r1, r6, r1
   30f3a:	2801      	cmp	r0, #1
   30f3c:	f171 0200 	sbcs.w	r2, r1, #0
   30f40:	dbf0      	blt.n	30f24 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   30f42:	e9cd 0100 	strd	r0, r1, [sp]
   30f46:	465a      	mov	r2, fp
   30f48:	4621      	mov	r1, r4
   30f4a:	4650      	mov	r0, sl
   30f4c:	f7f5 fa62 	bl	26414 <z_pend_curr>
	__asm__ volatile(
   30f50:	f04f 0320 	mov.w	r3, #32
   30f54:	f3ef 8411 	mrs	r4, BASEPRI
   30f58:	f383 8812 	msr	BASEPRI_MAX, r3
   30f5c:	f3bf 8f6f 	isb	sy
	return k;
   30f60:	e7d6      	b.n	30f10 <k_heap_aligned_alloc+0x48>

00030f62 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   30f62:	b538      	push	{r3, r4, r5, lr}
   30f64:	4604      	mov	r4, r0
   30f66:	f04f 0320 	mov.w	r3, #32
   30f6a:	f3ef 8511 	mrs	r5, BASEPRI
   30f6e:	f383 8812 	msr	BASEPRI_MAX, r3
   30f72:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   30f76:	f7f9 fb83 	bl	2a680 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   30f7a:	f104 000c 	add.w	r0, r4, #12
   30f7e:	f000 fafc 	bl	3157a <z_unpend_all>
   30f82:	b130      	cbz	r0, 30f92 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   30f84:	4629      	mov	r1, r5
   30f86:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   30f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   30f8e:	f7f5 baa5 	b.w	264dc <z_reschedule>
	__asm__ volatile(
   30f92:	f385 8811 	msr	BASEPRI, r5
   30f96:	f3bf 8f6f 	isb	sy
}
   30f9a:	bd38      	pop	{r3, r4, r5, pc}

00030f9c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30f9c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   30fa0:	4313      	orrs	r3, r2
   30fa2:	f013 0303 	ands.w	r3, r3, #3
   30fa6:	d10c      	bne.n	30fc2 <create_free_list+0x26>
	slab->free_list = NULL;
   30fa8:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30faa:	6881      	ldr	r1, [r0, #8]
   30fac:	4299      	cmp	r1, r3
   30fae:	d801      	bhi.n	30fb4 <create_free_list+0x18>
	return 0;
   30fb0:	2000      	movs	r0, #0
   30fb2:	4770      	bx	lr
		*(char **)p = slab->free_list;
   30fb4:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   30fb6:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   30fb8:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   30fba:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   30fbc:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
   30fbe:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30fc0:	e7f3      	b.n	30faa <create_free_list+0xe>
		return -EINVAL;
   30fc2:	f06f 0015 	mvn.w	r0, #21
}
   30fc6:	4770      	bx	lr

00030fc8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   30fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30fca:	4604      	mov	r4, r0
   30fcc:	460d      	mov	r5, r1
	__asm__ volatile(
   30fce:	f04f 0320 	mov.w	r3, #32
   30fd2:	f3ef 8611 	mrs	r6, BASEPRI
   30fd6:	f383 8812 	msr	BASEPRI_MAX, r3
   30fda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   30fde:	6947      	ldr	r7, [r0, #20]
   30fe0:	b97f      	cbnz	r7, 31002 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   30fe2:	f000 fa84 	bl	314ee <z_unpend_first_thread>

		if (pending_thread != NULL) {
   30fe6:	b160      	cbz	r0, 31002 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   30fe8:	682a      	ldr	r2, [r5, #0]
   30fea:	f8c0 709c 	str.w	r7, [r0, #156]	; 0x9c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   30fee:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   30ff0:	f000 fa46 	bl	31480 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   30ff4:	4631      	mov	r1, r6
   30ff6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   30ffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   30ffe:	f7f5 ba6d 	b.w	264dc <z_reschedule>
	**(char ***) mem = slab->free_list;
   31002:	682b      	ldr	r3, [r5, #0]
   31004:	6962      	ldr	r2, [r4, #20]
   31006:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   31008:	682b      	ldr	r3, [r5, #0]
   3100a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   3100c:	69a3      	ldr	r3, [r4, #24]
   3100e:	3b01      	subs	r3, #1
   31010:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   31012:	f386 8811 	msr	BASEPRI, r6
   31016:	f3bf 8f6f 	isb	sy
}
   3101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003101c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3101c:	f3ef 8005 	mrs	r0, IPSR
}
   31020:	3800      	subs	r0, #0
   31022:	bf18      	it	ne
   31024:	2001      	movne	r0, #1
   31026:	4770      	bx	lr

00031028 <k_thread_name_get>:
}
   31028:	3062      	adds	r0, #98	; 0x62
   3102a:	4770      	bx	lr

0003102c <z_impl_k_thread_start>:
	z_sched_start(thread);
   3102c:	f7f5 ba68 	b.w	26500 <z_sched_start>

00031030 <z_pm_save_idle_exit>:
{
   31030:	b508      	push	{r3, lr}
	pm_system_resume();
   31032:	f7df fe89 	bl	10d48 <pm_system_resume>
}
   31036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3103a:	f7ff b84c 	b.w	300d6 <sys_clock_idle_exit>

0003103e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   3103e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   31042:	428b      	cmp	r3, r1
   31044:	d001      	beq.n	3104a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   31046:	f7f5 ba03 	b.w	26450 <z_set_prio>
}
   3104a:	2000      	movs	r0, #0
   3104c:	4770      	bx	lr

0003104e <z_impl_k_mutex_init>:
{
   3104e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   31050:	2000      	movs	r0, #0
   31052:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   31056:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   3105a:	4770      	bx	lr

0003105c <queue_insert>:
{
   3105c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31060:	4699      	mov	r9, r3
   31062:	4604      	mov	r4, r0
   31064:	460d      	mov	r5, r1
   31066:	4690      	mov	r8, r2
   31068:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3106c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   31070:	f04f 0220 	mov.w	r2, #32
   31074:	f3ef 8711 	mrs	r7, BASEPRI
   31078:	f382 8812 	msr	BASEPRI_MAX, r2
   3107c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   31080:	b103      	cbz	r3, 31084 <queue_insert+0x28>
	return list->tail;
   31082:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   31084:	4630      	mov	r0, r6
   31086:	f000 fa32 	bl	314ee <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   3108a:	b160      	cbz	r0, 310a6 <queue_insert+0x4a>
   3108c:	2300      	movs	r3, #0
   3108e:	f8c0 8014 	str.w	r8, [r0, #20]
   31092:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	z_ready_thread(thread);
   31096:	f000 f9f3 	bl	31480 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   3109a:	4630      	mov	r0, r6
   3109c:	4639      	mov	r1, r7
   3109e:	f7f5 fa1d 	bl	264dc <z_reschedule>
		return 0;
   310a2:	2000      	movs	r0, #0
   310a4:	e00c      	b.n	310c0 <queue_insert+0x64>
	if (alloc) {
   310a6:	f1b9 0f00 	cmp.w	r9, #0
   310aa:	d01b      	beq.n	310e4 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   310ac:	2108      	movs	r1, #8
   310ae:	f7f5 fe6b 	bl	26d88 <z_thread_aligned_alloc>
		if (anode == NULL) {
   310b2:	b938      	cbnz	r0, 310c4 <queue_insert+0x68>
	__asm__ volatile(
   310b4:	f387 8811 	msr	BASEPRI, r7
   310b8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   310bc:	f06f 000b 	mvn.w	r0, #11
}
   310c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   310c4:	2201      	movs	r2, #1
		anode->data = data;
   310c6:	f8c0 8004 	str.w	r8, [r0, #4]
   310ca:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   310cc:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   310ce:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   310d2:	b95d      	cbnz	r5, 310ec <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   310d4:	6822      	ldr	r2, [r4, #0]
   310d6:	430a      	orrs	r2, r1
   310d8:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   310da:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   310dc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   310de:	b96a      	cbnz	r2, 310fc <queue_insert+0xa0>
	list->tail = node;
   310e0:	6060      	str	r0, [r4, #4]
}
   310e2:	e00b      	b.n	310fc <queue_insert+0xa0>
}
   310e4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   310e6:	f8c8 9000 	str.w	r9, [r8]
}
   310ea:	e7ef      	b.n	310cc <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   310ec:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   310ee:	2a03      	cmp	r2, #3
   310f0:	d810      	bhi.n	31114 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   310f2:	6001      	str	r1, [r0, #0]
	return list->tail;
   310f4:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   310f6:	b939      	cbnz	r1, 31108 <queue_insert+0xac>
	list->head = node;
   310f8:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   310fc:	2104      	movs	r1, #4
   310fe:	f104 0010 	add.w	r0, r4, #16
   31102:	f000 fc45 	bl	31990 <z_handle_obj_poll_events>
   31106:	e7c8      	b.n	3109a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   31108:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3110a:	f002 0203 	and.w	r2, r2, #3
   3110e:	4302      	orrs	r2, r0
   31110:	600a      	str	r2, [r1, #0]
   31112:	e7e5      	b.n	310e0 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31114:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   31118:	430a      	orrs	r2, r1
   3111a:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3111c:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3111e:	f002 0203 	and.w	r2, r2, #3
   31122:	ea40 0302 	orr.w	r3, r0, r2
   31126:	602b      	str	r3, [r5, #0]
}
   31128:	e7e8      	b.n	310fc <queue_insert+0xa0>

0003112a <z_queue_node_peek>:
{
   3112a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3112c:	4604      	mov	r4, r0
   3112e:	b130      	cbz	r0, 3113e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   31130:	6802      	ldr	r2, [r0, #0]
   31132:	0793      	lsls	r3, r2, #30
   31134:	d003      	beq.n	3113e <z_queue_node_peek+0x14>
		ret = anode->data;
   31136:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   31138:	b109      	cbz	r1, 3113e <z_queue_node_peek+0x14>
			k_free(anode);
   3113a:	f000 fc4f 	bl	319dc <k_free>
}
   3113e:	4620      	mov	r0, r4
   31140:	bd10      	pop	{r4, pc}

00031142 <z_impl_k_queue_init>:
	list->head = NULL;
   31142:	2300      	movs	r3, #0
	list->tail = NULL;
   31144:	e9c0 3300 	strd	r3, r3, [r0]
   31148:	f100 0308 	add.w	r3, r0, #8
   3114c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   31150:	f100 0310 	add.w	r3, r0, #16
   31154:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   31158:	4770      	bx	lr

0003115a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   3115a:	2301      	movs	r3, #1
{
   3115c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3115e:	9300      	str	r3, [sp, #0]
   31160:	2300      	movs	r3, #0
{
   31162:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   31164:	4619      	mov	r1, r3
   31166:	f7ff ff79 	bl	3105c <queue_insert>
}
   3116a:	b003      	add	sp, #12
   3116c:	f85d fb04 	ldr.w	pc, [sp], #4

00031170 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   31170:	2300      	movs	r3, #0
{
   31172:	b507      	push	{r0, r1, r2, lr}
   31174:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   31176:	9300      	str	r3, [sp, #0]
   31178:	4619      	mov	r1, r3
   3117a:	f7ff ff6f 	bl	3105c <queue_insert>
}
   3117e:	b003      	add	sp, #12
   31180:	f85d fb04 	ldr.w	pc, [sp], #4

00031184 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   31184:	b15a      	cbz	r2, 3119e <z_impl_k_sem_init+0x1a>
   31186:	428a      	cmp	r2, r1
   31188:	d309      	bcc.n	3119e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   3118a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3118e:	e9c0 1202 	strd	r1, r2, [r0, #8]
   31192:	e9c0 0000 	strd	r0, r0, [r0]
   31196:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   3119a:	2000      	movs	r0, #0
   3119c:	4770      	bx	lr
		return -EINVAL;
   3119e:	f06f 0015 	mvn.w	r0, #21
}
   311a2:	4770      	bx	lr

000311a4 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   311a4:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   311a6:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   311a8:	408b      	lsls	r3, r1
   311aa:	ea22 0303 	bic.w	r3, r2, r3
   311ae:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   311b0:	fa22 f001 	lsr.w	r0, r2, r1
}
   311b4:	f000 0001 	and.w	r0, r0, #1
   311b8:	4770      	bx	lr

000311ba <unschedule_locked>:
{
   311ba:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   311bc:	2103      	movs	r1, #3
{
   311be:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   311c0:	300c      	adds	r0, #12
   311c2:	f7ff ffef 	bl	311a4 <flag_test_and_clear>
   311c6:	4604      	mov	r4, r0
   311c8:	b118      	cbz	r0, 311d2 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   311ca:	f105 0010 	add.w	r0, r5, #16
   311ce:	f000 fa08 	bl	315e2 <z_abort_timeout>
}
   311d2:	4620      	mov	r0, r4
   311d4:	bd38      	pop	{r3, r4, r5, pc}

000311d6 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   311d6:	b120      	cbz	r0, 311e2 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   311d8:	2200      	movs	r2, #0
   311da:	30b0      	adds	r0, #176	; 0xb0
   311dc:	4611      	mov	r1, r2
   311de:	f000 b9dc 	b.w	3159a <z_sched_wake>
}
   311e2:	4770      	bx	lr

000311e4 <cancel_async_locked>:
{
   311e4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   311e6:	68c3      	ldr	r3, [r0, #12]
{
   311e8:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   311ea:	f3c3 0640 	ubfx	r6, r3, #1, #1
   311ee:	079b      	lsls	r3, r3, #30
   311f0:	d416      	bmi.n	31220 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   311f2:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   311f4:	2102      	movs	r1, #2
   311f6:	300c      	adds	r0, #12
   311f8:	f7ff ffd4 	bl	311a4 <flag_test_and_clear>
   311fc:	b180      	cbz	r0, 31220 <cancel_async_locked+0x3c>
	return list->head;
   311fe:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31202:	b16a      	cbz	r2, 31220 <cancel_async_locked+0x3c>
   31204:	4294      	cmp	r4, r2
   31206:	d11d      	bne.n	31244 <cancel_async_locked+0x60>
	return node->next;
   31208:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3120a:	b99e      	cbnz	r6, 31234 <cancel_async_locked+0x50>
   3120c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
	list->head = node;
   31210:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
Z_GENLIST_REMOVE(slist, snode)
   31214:	429c      	cmp	r4, r3
   31216:	d101      	bne.n	3121c <cancel_async_locked+0x38>
	list->tail = node;
   31218:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
	parent->next = child;
   3121c:	2300      	movs	r3, #0
   3121e:	6023      	str	r3, [r4, #0]
	return *flagp;
   31220:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   31222:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   31226:	bf1e      	ittt	ne
   31228:	f043 0302 	orrne.w	r3, r3, #2
   3122c:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3122e:	f040 0002 	orrne.w	r0, r0, #2
}
   31232:	bd70      	pop	{r4, r5, r6, pc}
   31234:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   31236:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
   3123a:	4294      	cmp	r4, r2
	list->tail = node;
   3123c:	bf08      	it	eq
   3123e:	f8c5 60ac 	streq.w	r6, [r5, #172]	; 0xac
}
   31242:	e7eb      	b.n	3121c <cancel_async_locked+0x38>
	return node->next;
   31244:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31246:	6812      	ldr	r2, [r2, #0]
   31248:	e7db      	b.n	31202 <cancel_async_locked+0x1e>

0003124a <work_timeout>:
{
   3124a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3124c:	4604      	mov	r4, r0
	__asm__ volatile(
   3124e:	f04f 0320 	mov.w	r3, #32
   31252:	f3ef 8511 	mrs	r5, BASEPRI
   31256:	f383 8812 	msr	BASEPRI_MAX, r3
   3125a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   3125e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   31260:	f1a0 0610 	sub.w	r6, r0, #16
   31264:	2103      	movs	r1, #3
   31266:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   31268:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3126a:	f7ff ff9b 	bl	311a4 <flag_test_and_clear>
   3126e:	b128      	cbz	r0, 3127c <work_timeout+0x32>
		queue = dw->queue;
   31270:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   31272:	4630      	mov	r0, r6
   31274:	a901      	add	r1, sp, #4
		queue = dw->queue;
   31276:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   31278:	f7f4 fe4e 	bl	25f18 <submit_to_queue_locked>
	__asm__ volatile(
   3127c:	f385 8811 	msr	BASEPRI, r5
   31280:	f3bf 8f6f 	isb	sy
}
   31284:	b002      	add	sp, #8
   31286:	bd70      	pop	{r4, r5, r6, pc}

00031288 <k_work_init>:
{
   31288:	b538      	push	{r3, r4, r5, lr}
   3128a:	4604      	mov	r4, r0
   3128c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3128e:	2210      	movs	r2, #16
   31290:	2100      	movs	r1, #0
   31292:	f000 fc00 	bl	31a96 <memset>
   31296:	6065      	str	r5, [r4, #4]
}
   31298:	bd38      	pop	{r3, r4, r5, pc}

0003129a <k_work_busy_get>:
	__asm__ volatile(
   3129a:	f04f 0220 	mov.w	r2, #32
   3129e:	f3ef 8311 	mrs	r3, BASEPRI
   312a2:	f382 8812 	msr	BASEPRI_MAX, r2
   312a6:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   312aa:	68c0      	ldr	r0, [r0, #12]
   312ac:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   312b0:	f383 8811 	msr	BASEPRI, r3
   312b4:	f3bf 8f6f 	isb	sy
}
   312b8:	4770      	bx	lr

000312ba <z_work_submit_to_queue>:
{
   312ba:	b513      	push	{r0, r1, r4, lr}
   312bc:	9001      	str	r0, [sp, #4]
   312be:	4608      	mov	r0, r1
	__asm__ volatile(
   312c0:	f04f 0320 	mov.w	r3, #32
   312c4:	f3ef 8411 	mrs	r4, BASEPRI
   312c8:	f383 8812 	msr	BASEPRI_MAX, r3
   312cc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   312d0:	a901      	add	r1, sp, #4
   312d2:	f7f4 fe21 	bl	25f18 <submit_to_queue_locked>
	__asm__ volatile(
   312d6:	f384 8811 	msr	BASEPRI, r4
   312da:	f3bf 8f6f 	isb	sy
}
   312de:	b002      	add	sp, #8
   312e0:	bd10      	pop	{r4, pc}

000312e2 <k_work_submit_to_queue>:
{
   312e2:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   312e4:	f7ff ffe9 	bl	312ba <z_work_submit_to_queue>
	if (ret > 0) {
   312e8:	1e04      	subs	r4, r0, #0
   312ea:	dd09      	ble.n	31300 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   312ec:	f04f 0320 	mov.w	r3, #32
   312f0:	f3ef 8011 	mrs	r0, BASEPRI
   312f4:	f383 8812 	msr	BASEPRI_MAX, r3
   312f8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   312fc:	f000 f927 	bl	3154e <z_reschedule_irqlock>
}
   31300:	4620      	mov	r0, r4
   31302:	bd10      	pop	{r4, pc}

00031304 <k_work_queue_init>:
{
   31304:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   31306:	22c8      	movs	r2, #200	; 0xc8
   31308:	2100      	movs	r1, #0
   3130a:	f000 fbc4 	bl	31a96 <memset>
}
   3130e:	bd08      	pop	{r3, pc}

00031310 <k_work_init_delayable>:
{
   31310:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   31312:	2230      	movs	r2, #48	; 0x30
{
   31314:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   31316:	2100      	movs	r1, #0
{
   31318:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   3131a:	f000 fbbc 	bl	31a96 <memset>
   3131e:	f44f 7380 	mov.w	r3, #256	; 0x100
   31322:	6065      	str	r5, [r4, #4]
   31324:	60e3      	str	r3, [r4, #12]
}
   31326:	bd38      	pop	{r3, r4, r5, pc}

00031328 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   31328:	f7ff bfb7 	b.w	3129a <k_work_busy_get>

0003132c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   3132c:	b538      	push	{r3, r4, r5, lr}
   3132e:	4604      	mov	r4, r0
   31330:	f04f 0320 	mov.w	r3, #32
   31334:	f3ef 8511 	mrs	r5, BASEPRI
   31338:	f383 8812 	msr	BASEPRI_MAX, r3
   3133c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   31340:	f7ff ff3b 	bl	311ba <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   31344:	4620      	mov	r0, r4
   31346:	f7ff ff4d 	bl	311e4 <cancel_async_locked>
	__asm__ volatile(
   3134a:	f385 8811 	msr	BASEPRI, r5
   3134e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   31352:	bd38      	pop	{r3, r4, r5, pc}

00031354 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   31354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31356:	4604      	mov	r4, r0
   31358:	460d      	mov	r5, r1
	__asm__ volatile(
   3135a:	f04f 0320 	mov.w	r3, #32
   3135e:	f3ef 8611 	mrs	r6, BASEPRI
   31362:	f383 8812 	msr	BASEPRI_MAX, r3
   31366:	f3bf 8f6f 	isb	sy
	return *flagp;
   3136a:	68c3      	ldr	r3, [r0, #12]
   3136c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   31370:	2b00      	cmp	r3, #0
   31372:	bf14      	ite	ne
   31374:	2701      	movne	r7, #1
   31376:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   31378:	d105      	bne.n	31386 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   3137a:	f386 8811 	msr	BASEPRI, r6
   3137e:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   31382:	4638      	mov	r0, r7
   31384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   31386:	f7ff ff18 	bl	311ba <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3138a:	4620      	mov	r0, r4
   3138c:	f7ff ff2a 	bl	311e4 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   31390:	4629      	mov	r1, r5
   31392:	4620      	mov	r0, r4
   31394:	f7f4 fda2 	bl	25edc <cancel_sync_locked>
   31398:	f386 8811 	msr	BASEPRI, r6
   3139c:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   313a0:	2800      	cmp	r0, #0
   313a2:	d0ee      	beq.n	31382 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   313a4:	f04f 32ff 	mov.w	r2, #4294967295
   313a8:	f04f 33ff 	mov.w	r3, #4294967295
   313ac:	f105 0008 	add.w	r0, r5, #8
   313b0:	f7f4 fcb6 	bl	25d20 <z_impl_k_sem_take>
   313b4:	e7e5      	b.n	31382 <k_work_cancel_delayable_sync+0x2e>

000313b6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   313b6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   313ba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   313bc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   313be:	2300      	movs	r3, #0
	node->prev = NULL;
   313c0:	e9c0 3300 	strd	r3, r3, [r0]
}
   313c4:	4770      	bx	lr

000313c6 <unpend_thread_no_timeout>:
{
   313c6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   313c8:	f7ff fff5 	bl	313b6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   313cc:	7b43      	ldrb	r3, [r0, #13]
   313ce:	f023 0302 	bic.w	r3, r3, #2
   313d2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   313d4:	2300      	movs	r3, #0
   313d6:	6083      	str	r3, [r0, #8]
}
   313d8:	bd08      	pop	{r3, pc}

000313da <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   313da:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   313de:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   313e2:	4283      	cmp	r3, r0
		return b2 - b1;
   313e4:	bf14      	ite	ne
   313e6:	1ac0      	subne	r0, r0, r3
	return 0;
   313e8:	2000      	moveq	r0, #0
}
   313ea:	4770      	bx	lr

000313ec <z_thread_timeout>:
{
   313ec:	4601      	mov	r1, r0
   313ee:	b510      	push	{r4, lr}
	__asm__ volatile(
   313f0:	f04f 0320 	mov.w	r3, #32
   313f4:	f3ef 8411 	mrs	r4, BASEPRI
   313f8:	f383 8812 	msr	BASEPRI_MAX, r3
   313fc:	f3bf 8f6f 	isb	sy
		if (!killed) {
   31400:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   31404:	f013 0f28 	tst.w	r3, #40	; 0x28
   31408:	d10d      	bne.n	31426 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   3140a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   3140e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   31410:	b10b      	cbz	r3, 31416 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   31412:	f7ff ffd8 	bl	313c6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   31416:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   3141a:	f023 0314 	bic.w	r3, r3, #20
   3141e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   31422:	f7f4 ff1f 	bl	26264 <ready_thread>
	__asm__ volatile(
   31426:	f384 8811 	msr	BASEPRI, r4
   3142a:	f3bf 8f6f 	isb	sy
}
   3142e:	bd10      	pop	{r4, pc}

00031430 <add_to_waitq_locked>:
{
   31430:	b538      	push	{r3, r4, r5, lr}
   31432:	4604      	mov	r4, r0
   31434:	460d      	mov	r5, r1
	unready_thread(thread);
   31436:	f7f4 ff49 	bl	262cc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3143a:	7b63      	ldrb	r3, [r4, #13]
   3143c:	f043 0302 	orr.w	r3, r3, #2
   31440:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   31442:	b1e5      	cbz	r5, 3147e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   31444:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   31446:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31448:	429d      	cmp	r5, r3
   3144a:	d109      	bne.n	31460 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   3144c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   3144e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   31452:	601c      	str	r4, [r3, #0]
	list->tail = node;
   31454:	606c      	str	r4, [r5, #4]
}
   31456:	e012      	b.n	3147e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   31458:	686a      	ldr	r2, [r5, #4]
   3145a:	4293      	cmp	r3, r2
   3145c:	d0f6      	beq.n	3144c <add_to_waitq_locked+0x1c>
   3145e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   31460:	2b00      	cmp	r3, #0
   31462:	d0f3      	beq.n	3144c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   31464:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   31468:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   3146c:	428a      	cmp	r2, r1
   3146e:	d0f3      	beq.n	31458 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   31470:	4291      	cmp	r1, r2
   31472:	ddf1      	ble.n	31458 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   31474:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   31476:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3147a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3147c:	605c      	str	r4, [r3, #4]
}
   3147e:	bd38      	pop	{r3, r4, r5, pc}

00031480 <z_ready_thread>:
{
   31480:	b510      	push	{r4, lr}
	__asm__ volatile(
   31482:	f04f 0320 	mov.w	r3, #32
   31486:	f3ef 8411 	mrs	r4, BASEPRI
   3148a:	f383 8812 	msr	BASEPRI_MAX, r3
   3148e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   31492:	f7f4 fee7 	bl	26264 <ready_thread>
	__asm__ volatile(
   31496:	f384 8811 	msr	BASEPRI, r4
   3149a:	f3bf 8f6f 	isb	sy
}
   3149e:	bd10      	pop	{r4, pc}

000314a0 <z_unpend_thread_no_timeout>:
{
   314a0:	b508      	push	{r3, lr}
	__asm__ volatile(
   314a2:	f04f 0320 	mov.w	r3, #32
   314a6:	f3ef 8111 	mrs	r1, BASEPRI
   314aa:	f383 8812 	msr	BASEPRI_MAX, r3
   314ae:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   314b2:	f7ff ff88 	bl	313c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   314b6:	f381 8811 	msr	BASEPRI, r1
   314ba:	f3bf 8f6f 	isb	sy
}
   314be:	bd08      	pop	{r3, pc}

000314c0 <z_unpend1_no_timeout>:
{
   314c0:	b508      	push	{r3, lr}
   314c2:	4603      	mov	r3, r0
	__asm__ volatile(
   314c4:	f04f 0220 	mov.w	r2, #32
   314c8:	f3ef 8111 	mrs	r1, BASEPRI
   314cc:	f382 8812 	msr	BASEPRI_MAX, r2
   314d0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   314d4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   314d6:	4283      	cmp	r3, r0
   314d8:	d007      	beq.n	314ea <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   314da:	b108      	cbz	r0, 314e0 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   314dc:	f7ff ff73 	bl	313c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   314e0:	f381 8811 	msr	BASEPRI, r1
   314e4:	f3bf 8f6f 	isb	sy
}
   314e8:	bd08      	pop	{r3, pc}
   314ea:	2000      	movs	r0, #0
   314ec:	e7f8      	b.n	314e0 <z_unpend1_no_timeout+0x20>

000314ee <z_unpend_first_thread>:
{
   314ee:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   314f0:	f04f 0320 	mov.w	r3, #32
   314f4:	f3ef 8511 	mrs	r5, BASEPRI
   314f8:	f383 8812 	msr	BASEPRI_MAX, r3
   314fc:	f3bf 8f6f 	isb	sy
	return list->head == list;
   31500:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31502:	42a0      	cmp	r0, r4
   31504:	d00d      	beq.n	31522 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   31506:	b134      	cbz	r4, 31516 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   31508:	4620      	mov	r0, r4
   3150a:	f7ff ff5c 	bl	313c6 <unpend_thread_no_timeout>
   3150e:	f104 0018 	add.w	r0, r4, #24
   31512:	f000 f866 	bl	315e2 <z_abort_timeout>
	__asm__ volatile(
   31516:	f385 8811 	msr	BASEPRI, r5
   3151a:	f3bf 8f6f 	isb	sy
}
   3151e:	4620      	mov	r0, r4
   31520:	bd38      	pop	{r3, r4, r5, pc}
   31522:	2400      	movs	r4, #0
   31524:	e7f7      	b.n	31516 <z_unpend_first_thread+0x28>

00031526 <z_unpend_thread>:
{
   31526:	b510      	push	{r4, lr}
	__asm__ volatile(
   31528:	f04f 0320 	mov.w	r3, #32
   3152c:	f3ef 8411 	mrs	r4, BASEPRI
   31530:	f383 8812 	msr	BASEPRI_MAX, r3
   31534:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   31538:	f7ff ff45 	bl	313c6 <unpend_thread_no_timeout>
	__asm__ volatile(
   3153c:	f384 8811 	msr	BASEPRI, r4
   31540:	f3bf 8f6f 	isb	sy
}
   31544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31548:	3018      	adds	r0, #24
   3154a:	f000 b84a 	b.w	315e2 <z_abort_timeout>

0003154e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3154e:	4603      	mov	r3, r0
   31550:	b920      	cbnz	r0, 3155c <z_reschedule_irqlock+0xe>
   31552:	f3ef 8205 	mrs	r2, IPSR
   31556:	b90a      	cbnz	r2, 3155c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   31558:	f7df bf90 	b.w	1147c <arch_swap>
   3155c:	f383 8811 	msr	BASEPRI, r3
   31560:	f3bf 8f6f 	isb	sy
}
   31564:	4770      	bx	lr

00031566 <z_reschedule_unlocked>:
	__asm__ volatile(
   31566:	f04f 0320 	mov.w	r3, #32
   3156a:	f3ef 8011 	mrs	r0, BASEPRI
   3156e:	f383 8812 	msr	BASEPRI_MAX, r3
   31572:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   31576:	f7ff bfea 	b.w	3154e <z_reschedule_irqlock>

0003157a <z_unpend_all>:
{
   3157a:	b538      	push	{r3, r4, r5, lr}
   3157c:	4605      	mov	r5, r0
	int need_sched = 0;
   3157e:	2000      	movs	r0, #0
	return list->head == list;
   31580:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31582:	42a5      	cmp	r5, r4
   31584:	d000      	beq.n	31588 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   31586:	b904      	cbnz	r4, 3158a <z_unpend_all+0x10>
}
   31588:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   3158a:	4620      	mov	r0, r4
   3158c:	f7ff ffcb 	bl	31526 <z_unpend_thread>
		z_ready_thread(thread);
   31590:	4620      	mov	r0, r4
   31592:	f7ff ff75 	bl	31480 <z_ready_thread>
		need_sched = 1;
   31596:	2001      	movs	r0, #1
   31598:	e7f2      	b.n	31580 <z_unpend_all+0x6>

0003159a <z_sched_wake>:
{
   3159a:	b538      	push	{r3, r4, r5, lr}
   3159c:	f04f 0320 	mov.w	r3, #32
   315a0:	f3ef 8511 	mrs	r5, BASEPRI
   315a4:	f383 8812 	msr	BASEPRI_MAX, r3
   315a8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   315ac:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   315ae:	42a0      	cmp	r0, r4
   315b0:	d013      	beq.n	315da <z_sched_wake+0x40>
		if (thread != NULL) {
   315b2:	b1a4      	cbz	r4, 315de <z_sched_wake+0x44>
   315b4:	f8c4 109c 	str.w	r1, [r4, #156]	; 0x9c
	thread->base.swap_data = data;
   315b8:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   315ba:	4620      	mov	r0, r4
   315bc:	f7ff ff03 	bl	313c6 <unpend_thread_no_timeout>
   315c0:	f104 0018 	add.w	r0, r4, #24
   315c4:	f000 f80d 	bl	315e2 <z_abort_timeout>
			ready_thread(thread);
   315c8:	4620      	mov	r0, r4
   315ca:	f7f4 fe4b 	bl	26264 <ready_thread>
			ret = true;
   315ce:	2001      	movs	r0, #1
	__asm__ volatile(
   315d0:	f385 8811 	msr	BASEPRI, r5
   315d4:	f3bf 8f6f 	isb	sy
}
   315d8:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   315da:	2000      	movs	r0, #0
   315dc:	e7f8      	b.n	315d0 <z_sched_wake+0x36>
   315de:	4620      	mov	r0, r4
   315e0:	e7f6      	b.n	315d0 <z_sched_wake+0x36>

000315e2 <z_abort_timeout>:
{
   315e2:	b510      	push	{r4, lr}
	__asm__ volatile(
   315e4:	f04f 0220 	mov.w	r2, #32
   315e8:	f3ef 8411 	mrs	r4, BASEPRI
   315ec:	f382 8812 	msr	BASEPRI_MAX, r2
   315f0:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   315f4:	6803      	ldr	r3, [r0, #0]
   315f6:	b13b      	cbz	r3, 31608 <z_abort_timeout+0x26>
			remove_timeout(to);
   315f8:	f7f5 f96e 	bl	268d8 <remove_timeout>
			ret = 0;
   315fc:	2000      	movs	r0, #0
	__asm__ volatile(
   315fe:	f384 8811 	msr	BASEPRI, r4
   31602:	f3bf 8f6f 	isb	sy
}
   31606:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   31608:	f06f 0015 	mvn.w	r0, #21
   3160c:	e7f7      	b.n	315fe <z_abort_timeout+0x1c>

0003160e <z_get_next_timeout_expiry>:
{
   3160e:	b510      	push	{r4, lr}
	__asm__ volatile(
   31610:	f04f 0320 	mov.w	r3, #32
   31614:	f3ef 8411 	mrs	r4, BASEPRI
   31618:	f383 8812 	msr	BASEPRI_MAX, r3
   3161c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   31620:	f7f5 f932 	bl	26888 <next_timeout>
	__asm__ volatile(
   31624:	f384 8811 	msr	BASEPRI, r4
   31628:	f3bf 8f6f 	isb	sy
}
   3162c:	bd10      	pop	{r4, pc}

0003162e <z_set_timeout_expiry>:
{
   3162e:	b570      	push	{r4, r5, r6, lr}
   31630:	4604      	mov	r4, r0
   31632:	460d      	mov	r5, r1
	__asm__ volatile(
   31634:	f04f 0320 	mov.w	r3, #32
   31638:	f3ef 8611 	mrs	r6, BASEPRI
   3163c:	f383 8812 	msr	BASEPRI_MAX, r3
   31640:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   31644:	f7f5 f920 	bl	26888 <next_timeout>
			      || (ticks <= next_to);
   31648:	2801      	cmp	r0, #1
   3164a:	dd07      	ble.n	3165c <z_set_timeout_expiry+0x2e>
   3164c:	42a0      	cmp	r0, r4
   3164e:	db05      	blt.n	3165c <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   31650:	42a0      	cmp	r0, r4
   31652:	4629      	mov	r1, r5
   31654:	bfa8      	it	ge
   31656:	4620      	movge	r0, r4
   31658:	f7f1 fd50 	bl	230fc <sys_clock_set_timeout>
	__asm__ volatile(
   3165c:	f386 8811 	msr	BASEPRI, r6
   31660:	f3bf 8f6f 	isb	sy
}
   31664:	bd70      	pop	{r4, r5, r6, pc}

00031666 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   31666:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   31668:	f7f5 fa2c 	bl	26ac4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3166c:	bd08      	pop	{r3, pc}

0003166e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3166e:	f7f5 ba29 	b.w	26ac4 <sys_clock_tick_get>

00031672 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   31672:	b108      	cbz	r0, 31678 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   31674:	f7dd be70 	b.w	f358 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   31678:	4770      	bx	lr

0003167a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3167a:	f1b1 3fff 	cmp.w	r1, #4294967295
   3167e:	bf08      	it	eq
   31680:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   31684:	b538      	push	{r3, r4, r5, lr}
   31686:	460c      	mov	r4, r1
   31688:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3168a:	d014      	beq.n	316b6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3168c:	4308      	orrs	r0, r1
   3168e:	d103      	bne.n	31698 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   31690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   31694:	f7f5 ba16 	b.w	26ac4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   31698:	f06f 0001 	mvn.w	r0, #1
   3169c:	f04f 33ff 	mov.w	r3, #4294967295
   316a0:	1b40      	subs	r0, r0, r5
   316a2:	eb63 0101 	sbc.w	r1, r3, r1
   316a6:	2900      	cmp	r1, #0
   316a8:	da04      	bge.n	316b4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   316aa:	f7f5 fa0b 	bl	26ac4 <sys_clock_tick_get>
   316ae:	1940      	adds	r0, r0, r5
   316b0:	eb41 0104 	adc.w	r1, r1, r4
}
   316b4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   316b6:	f04f 30ff 	mov.w	r0, #4294967295
   316ba:	4601      	mov	r1, r0
   316bc:	e7fa      	b.n	316b4 <sys_clock_timeout_end_calc+0x3a>

000316be <k_timer_init>:
	timer->status = 0U;
   316be:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   316c0:	e9c0 1208 	strd	r1, r2, [r0, #32]
   316c4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   316c8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   316cc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   316d0:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   316d2:	6343      	str	r3, [r0, #52]	; 0x34
}
   316d4:	4770      	bx	lr

000316d6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   316d6:	b510      	push	{r4, lr}
   316d8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   316da:	f7ff ff82 	bl	315e2 <z_abort_timeout>

	if (inactive) {
   316de:	b9b0      	cbnz	r0, 3170e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   316e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   316e2:	b10b      	cbz	r3, 316e8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   316e4:	4620      	mov	r0, r4
   316e6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   316e8:	f104 0018 	add.w	r0, r4, #24
   316ec:	f7ff fee8 	bl	314c0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   316f0:	b168      	cbz	r0, 3170e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   316f2:	f7ff fec5 	bl	31480 <z_ready_thread>
	__asm__ volatile(
   316f6:	f04f 0320 	mov.w	r3, #32
   316fa:	f3ef 8011 	mrs	r0, BASEPRI
   316fe:	f383 8812 	msr	BASEPRI_MAX, r3
   31702:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   31706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3170a:	f7ff bf20 	b.w	3154e <z_reschedule_irqlock>
   3170e:	bd10      	pop	{r4, pc}

00031710 <add_event>:
{
   31710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31712:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   31714:	e9d0 1300 	ldrd	r1, r3, [r0]
   31718:	4288      	cmp	r0, r1
   3171a:	4604      	mov	r4, r0
   3171c:	d105      	bne.n	3172a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3171e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   31720:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   31724:	601d      	str	r5, [r3, #0]
	list->tail = node;
   31726:	6065      	str	r5, [r4, #4]
   31728:	e01d      	b.n	31766 <add_event+0x56>
	if ((pending == NULL) ||
   3172a:	2b00      	cmp	r3, #0
   3172c:	d0f7      	beq.n	3171e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3172e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   31730:	b100      	cbz	r0, 31734 <add_event+0x24>
   31732:	3860      	subs	r0, #96	; 0x60
   31734:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   31738:	4639      	mov	r1, r7
   3173a:	f7ff fe4e 	bl	313da <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3173e:	2800      	cmp	r0, #0
   31740:	dced      	bgt.n	3171e <add_event+0xe>
	return list->head == list;
   31742:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31744:	42b4      	cmp	r4, r6
   31746:	d0ea      	beq.n	3171e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   31748:	2e00      	cmp	r6, #0
   3174a:	d0e8      	beq.n	3171e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   3174c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3174e:	b101      	cbz	r1, 31752 <add_event+0x42>
   31750:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   31752:	4638      	mov	r0, r7
   31754:	f7ff fe41 	bl	313da <z_sched_prio_cmp>
   31758:	2800      	cmp	r0, #0
   3175a:	dd05      	ble.n	31768 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   3175c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3175e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   31762:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   31764:	6075      	str	r5, [r6, #4]
}
   31766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   31768:	6863      	ldr	r3, [r4, #4]
   3176a:	429e      	cmp	r6, r3
   3176c:	d0d7      	beq.n	3171e <add_event+0xe>
   3176e:	6836      	ldr	r6, [r6, #0]
   31770:	e7ea      	b.n	31748 <add_event+0x38>

00031772 <register_events>:
{
   31772:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   31776:	2500      	movs	r5, #0
{
   31778:	468b      	mov	fp, r1
   3177a:	4614      	mov	r4, r2
   3177c:	461f      	mov	r7, r3
   3177e:	4682      	mov	sl, r0
	int events_registered = 0;
   31780:	462e      	mov	r6, r5
	event->poller = NULL;
   31782:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   31784:	455d      	cmp	r5, fp
   31786:	db02      	blt.n	3178e <register_events+0x1c>
}
   31788:	4630      	mov	r0, r6
   3178a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3178e:	f04f 0320 	mov.w	r3, #32
   31792:	f3ef 8911 	mrs	r9, BASEPRI
   31796:	f383 8812 	msr	BASEPRI_MAX, r3
   3179a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   3179e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   317a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   317a6:	3b01      	subs	r3, #1
   317a8:	2b07      	cmp	r3, #7
   317aa:	d80f      	bhi.n	317cc <register_events+0x5a>
   317ac:	e8df f003 	tbb	[pc, r3]
   317b0:	0a0e041e 	.word	0x0a0e041e
   317b4:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   317b8:	f8da 3010 	ldr.w	r3, [sl, #16]
   317bc:	689b      	ldr	r3, [r3, #8]
   317be:	b12b      	cbz	r3, 317cc <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   317c0:	2302      	movs	r3, #2
   317c2:	e020      	b.n	31806 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   317c4:	f8da 3010 	ldr.w	r3, [sl, #16]
   317c8:	681b      	ldr	r3, [r3, #0]
   317ca:	bb8b      	cbnz	r3, 31830 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   317cc:	bb47      	cbnz	r7, 31820 <register_events+0xae>
   317ce:	7823      	ldrb	r3, [r4, #0]
   317d0:	b333      	cbz	r3, 31820 <register_events+0xae>
	switch (event->type) {
   317d2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   317d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   317da:	3b01      	subs	r3, #1
   317dc:	2b07      	cmp	r3, #7
   317de:	d830      	bhi.n	31842 <register_events+0xd0>
   317e0:	e8df f003 	tbb	[pc, r3]
   317e4:	282f2833 	.word	0x282f2833
   317e8:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   317ec:	f8da 3010 	ldr.w	r3, [sl, #16]
   317f0:	689b      	ldr	r3, [r3, #8]
   317f2:	2b00      	cmp	r3, #0
   317f4:	d0ea      	beq.n	317cc <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   317f6:	2301      	movs	r3, #1
   317f8:	e005      	b.n	31806 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   317fa:	f8da 3010 	ldr.w	r3, [sl, #16]
   317fe:	6a1b      	ldr	r3, [r3, #32]
   31800:	2b00      	cmp	r3, #0
   31802:	d0e3      	beq.n	317cc <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   31804:	2310      	movs	r3, #16
	event->state |= state;
   31806:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   3180a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   3180e:	f3c2 3186 	ubfx	r1, r2, #14, #7
   31812:	430b      	orrs	r3, r1
   31814:	f363 3294 	bfi	r2, r3, #14, #7
   31818:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   3181c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   31820:	f389 8811 	msr	BASEPRI, r9
   31824:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   31828:	3501      	adds	r5, #1
   3182a:	f10a 0a14 	add.w	sl, sl, #20
   3182e:	e7a9      	b.n	31784 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   31830:	2304      	movs	r3, #4
   31832:	e7e8      	b.n	31806 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   31834:	4622      	mov	r2, r4
   31836:	4651      	mov	r1, sl
   31838:	f8da 0010 	ldr.w	r0, [sl, #16]
   3183c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   3183e:	f7ff ff67 	bl	31710 <add_event>
	event->poller = poller;
   31842:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   31846:	3601      	adds	r6, #1
   31848:	e7ea      	b.n	31820 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   3184a:	4622      	mov	r2, r4
   3184c:	4651      	mov	r1, sl
   3184e:	f8da 0010 	ldr.w	r0, [sl, #16]
   31852:	e7f4      	b.n	3183e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   31854:	f8da 0010 	ldr.w	r0, [sl, #16]
   31858:	4622      	mov	r2, r4
   3185a:	4651      	mov	r1, sl
   3185c:	3024      	adds	r0, #36	; 0x24
   3185e:	e7ee      	b.n	3183e <register_events+0xcc>

00031860 <signal_poll_event>:
{
   31860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   31864:	6884      	ldr	r4, [r0, #8]
{
   31866:	4605      	mov	r5, r0
   31868:	460e      	mov	r6, r1
	if (poller != NULL) {
   3186a:	b144      	cbz	r4, 3187e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3186c:	7863      	ldrb	r3, [r4, #1]
   3186e:	2b01      	cmp	r3, #1
   31870:	d12e      	bne.n	318d0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   31872:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   31876:	f013 0302 	ands.w	r3, r3, #2
   3187a:	d10a      	bne.n	31892 <signal_poll_event+0x32>
		poller->is_polling = false;
   3187c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3187e:	2000      	movs	r0, #0
	event->state |= state;
   31880:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   31882:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   31884:	f3c3 3286 	ubfx	r2, r3, #14, #7
   31888:	4316      	orrs	r6, r2
   3188a:	f366 3394 	bfi	r3, r6, #14, #7
   3188e:	60eb      	str	r3, [r5, #12]
	return retcode;
   31890:	e03e      	b.n	31910 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   31892:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   31896:	f1b3 3fff 	cmp.w	r3, #4294967295
   3189a:	bf08      	it	eq
   3189c:	f112 0f02 	cmneq.w	r2, #2
   318a0:	d032      	beq.n	31908 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   318a2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   318a6:	4640      	mov	r0, r8
   318a8:	f7ff fe3d 	bl	31526 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   318ac:	2e08      	cmp	r6, #8
   318ae:	bf0c      	ite	eq
   318b0:	f06f 0303 	mvneq.w	r3, #3
   318b4:	2300      	movne	r3, #0
   318b6:	63e3      	str	r3, [r4, #60]	; 0x3c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   318b8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   318bc:	06db      	lsls	r3, r3, #27
   318be:	d109      	bne.n	318d4 <signal_poll_event+0x74>
   318c0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   318c4:	b937      	cbnz	r7, 318d4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   318c6:	4640      	mov	r0, r8
   318c8:	f7ff fdda 	bl	31480 <z_ready_thread>
		poller->is_polling = false;
   318cc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   318ce:	e7d6      	b.n	3187e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   318d0:	2b02      	cmp	r3, #2
   318d2:	d001      	beq.n	318d8 <signal_poll_event+0x78>
		poller->is_polling = false;
   318d4:	2300      	movs	r3, #0
   318d6:	e7d1      	b.n	3187c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   318d8:	7823      	ldrb	r3, [r4, #0]
   318da:	2b00      	cmp	r3, #0
   318dc:	d0cf      	beq.n	3187e <signal_poll_event+0x1e>
   318de:	f854 7c04 	ldr.w	r7, [r4, #-4]
   318e2:	2f00      	cmp	r7, #0
   318e4:	d0f2      	beq.n	318cc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   318e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   318ea:	f1a4 0914 	sub.w	r9, r4, #20
   318ee:	f104 0014 	add.w	r0, r4, #20
   318f2:	f7ff fe76 	bl	315e2 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   318f6:	4649      	mov	r1, r9
   318f8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   318fa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   318fe:	f7ff fcdc 	bl	312ba <z_work_submit_to_queue>
		poller->is_polling = false;
   31902:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   31906:	e7ba      	b.n	3187e <signal_poll_event+0x1e>
		poller->is_polling = false;
   31908:	2300      	movs	r3, #0
		return -EAGAIN;
   3190a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3190e:	7023      	strb	r3, [r4, #0]
}
   31910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00031914 <clear_event_registrations>:
	while (num_events--) {
   31914:	2314      	movs	r3, #20
{
   31916:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   31918:	2400      	movs	r4, #0
	switch (event->type) {
   3191a:	f44f 768b 	mov.w	r6, #278	; 0x116
   3191e:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   31922:	b901      	cbnz	r1, 31926 <clear_event_registrations+0x12>
}
   31924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   31926:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   3192a:	f1a0 0714 	sub.w	r7, r0, #20
   3192e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   31932:	2b08      	cmp	r3, #8
	event->poller = NULL;
   31934:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   31938:	d80c      	bhi.n	31954 <clear_event_registrations+0x40>
   3193a:	fa26 f303 	lsr.w	r3, r6, r3
   3193e:	07db      	lsls	r3, r3, #31
   31940:	d508      	bpl.n	31954 <clear_event_registrations+0x40>
	return node->next != NULL;
   31942:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   31946:	b12b      	cbz	r3, 31954 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   31948:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   3194c:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   3194e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   31950:	e940 4405 	strd	r4, r4, [r0, #-20]
   31954:	f382 8811 	msr	BASEPRI, r2
   31958:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3195c:	f04f 0320 	mov.w	r3, #32
   31960:	f3ef 8211 	mrs	r2, BASEPRI
   31964:	f383 8812 	msr	BASEPRI_MAX, r3
   31968:	f3bf 8f6f 	isb	sy
   3196c:	4638      	mov	r0, r7
   3196e:	3901      	subs	r1, #1
   31970:	e7d7      	b.n	31922 <clear_event_registrations+0xe>

00031972 <k_poll_event_init>:
{
   31972:	b510      	push	{r4, lr}
	event->poller = NULL;
   31974:	2400      	movs	r4, #0
	event->type = type;
   31976:	0552      	lsls	r2, r2, #21
   31978:	0209      	lsls	r1, r1, #8
   3197a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   3197e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   31982:	430a      	orrs	r2, r1
   31984:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   31986:	6084      	str	r4, [r0, #8]
	event->type = type;
   31988:	430a      	orrs	r2, r1
	event->obj = obj;
   3198a:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   3198e:	bd10      	pop	{r4, pc}

00031990 <z_handle_obj_poll_events>:
{
   31990:	4603      	mov	r3, r0
	return list->head == list;
   31992:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   31994:	4283      	cmp	r3, r0
   31996:	d008      	beq.n	319aa <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   31998:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3199c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3199e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   319a0:	2300      	movs	r3, #0
	node->prev = NULL;
   319a2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   319a6:	f7ff bf5b 	b.w	31860 <signal_poll_event>
}
   319aa:	4770      	bx	lr

000319ac <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   319ac:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   319ae:	e9c0 0000 	strd	r0, r0, [r0]
   319b2:	6083      	str	r3, [r0, #8]
}
   319b4:	4770      	bx	lr

000319b6 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   319b6:	3204      	adds	r2, #4
{
   319b8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   319ba:	4604      	mov	r4, r0
   319bc:	d208      	bcs.n	319d0 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   319be:	2600      	movs	r6, #0
   319c0:	2700      	movs	r7, #0
   319c2:	f041 0104 	orr.w	r1, r1, #4
   319c6:	e9cd 6700 	strd	r6, r7, [sp]
   319ca:	f7ff fa7d 	bl	30ec8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   319ce:	b910      	cbnz	r0, 319d6 <z_heap_aligned_alloc+0x20>
		return NULL;
   319d0:	2000      	movs	r0, #0
}
   319d2:	b002      	add	sp, #8
   319d4:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   319d6:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   319da:	e7fa      	b.n	319d2 <z_heap_aligned_alloc+0x1c>

000319dc <k_free>:
	if (ptr != NULL) {
   319dc:	b120      	cbz	r0, 319e8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   319de:	1f01      	subs	r1, r0, #4
   319e0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   319e4:	f7ff babd 	b.w	30f62 <k_heap_free>
}
   319e8:	4770      	bx	lr

000319ea <k_malloc>:
{
   319ea:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   319ec:	2004      	movs	r0, #4
   319ee:	f7f5 b9bd 	b.w	26d6c <k_aligned_alloc>

000319f2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   319f2:	4770      	bx	lr

000319f4 <atof>:
   319f4:	2100      	movs	r1, #0
   319f6:	f7f6 b8d5 	b.w	27ba4 <strtod>

000319fa <atoi>:
   319fa:	220a      	movs	r2, #10
   319fc:	2100      	movs	r1, #0
   319fe:	f7f6 b98f 	b.w	27d20 <strtol>

00031a02 <memcmp>:
   31a02:	3901      	subs	r1, #1
   31a04:	4402      	add	r2, r0
   31a06:	b510      	push	{r4, lr}
   31a08:	4290      	cmp	r0, r2
   31a0a:	d101      	bne.n	31a10 <memcmp+0xe>
   31a0c:	2000      	movs	r0, #0
   31a0e:	e005      	b.n	31a1c <memcmp+0x1a>
   31a10:	7803      	ldrb	r3, [r0, #0]
   31a12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31a16:	42a3      	cmp	r3, r4
   31a18:	d001      	beq.n	31a1e <memcmp+0x1c>
   31a1a:	1b18      	subs	r0, r3, r4
   31a1c:	bd10      	pop	{r4, pc}
   31a1e:	3001      	adds	r0, #1
   31a20:	e7f2      	b.n	31a08 <memcmp+0x6>

00031a22 <memcpy>:
   31a22:	440a      	add	r2, r1
   31a24:	1e43      	subs	r3, r0, #1
   31a26:	4291      	cmp	r1, r2
   31a28:	d100      	bne.n	31a2c <memcpy+0xa>
   31a2a:	4770      	bx	lr
   31a2c:	b510      	push	{r4, lr}
   31a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   31a32:	4291      	cmp	r1, r2
   31a34:	f803 4f01 	strb.w	r4, [r3, #1]!
   31a38:	d1f9      	bne.n	31a2e <memcpy+0xc>
   31a3a:	bd10      	pop	{r4, pc}

00031a3c <__memcpy_chk>:
   31a3c:	429a      	cmp	r2, r3
   31a3e:	b508      	push	{r3, lr}
   31a40:	d901      	bls.n	31a46 <__memcpy_chk+0xa>
   31a42:	f7e0 fb41 	bl	120c8 <__chk_fail>
   31a46:	4281      	cmp	r1, r0
   31a48:	d804      	bhi.n	31a54 <__memcpy_chk+0x18>
   31a4a:	188b      	adds	r3, r1, r2
   31a4c:	4298      	cmp	r0, r3
   31a4e:	d3f8      	bcc.n	31a42 <__memcpy_chk+0x6>
   31a50:	4281      	cmp	r1, r0
   31a52:	d102      	bne.n	31a5a <__memcpy_chk+0x1e>
   31a54:	1883      	adds	r3, r0, r2
   31a56:	4299      	cmp	r1, r3
   31a58:	d3f3      	bcc.n	31a42 <__memcpy_chk+0x6>
   31a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   31a5e:	f7ff bfe0 	b.w	31a22 <memcpy>

00031a62 <memmove>:
   31a62:	4288      	cmp	r0, r1
   31a64:	b510      	push	{r4, lr}
   31a66:	eb01 0402 	add.w	r4, r1, r2
   31a6a:	d902      	bls.n	31a72 <memmove+0x10>
   31a6c:	4284      	cmp	r4, r0
   31a6e:	4623      	mov	r3, r4
   31a70:	d807      	bhi.n	31a82 <memmove+0x20>
   31a72:	1e43      	subs	r3, r0, #1
   31a74:	42a1      	cmp	r1, r4
   31a76:	d008      	beq.n	31a8a <memmove+0x28>
   31a78:	f811 2b01 	ldrb.w	r2, [r1], #1
   31a7c:	f803 2f01 	strb.w	r2, [r3, #1]!
   31a80:	e7f8      	b.n	31a74 <memmove+0x12>
   31a82:	4402      	add	r2, r0
   31a84:	4601      	mov	r1, r0
   31a86:	428a      	cmp	r2, r1
   31a88:	d100      	bne.n	31a8c <memmove+0x2a>
   31a8a:	bd10      	pop	{r4, pc}
   31a8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   31a90:	f802 4d01 	strb.w	r4, [r2, #-1]!
   31a94:	e7f7      	b.n	31a86 <memmove+0x24>

00031a96 <memset>:
   31a96:	4402      	add	r2, r0
   31a98:	4603      	mov	r3, r0
   31a9a:	4293      	cmp	r3, r2
   31a9c:	d100      	bne.n	31aa0 <memset+0xa>
   31a9e:	4770      	bx	lr
   31aa0:	f803 1b01 	strb.w	r1, [r3], #1
   31aa4:	e7f9      	b.n	31a9a <memset+0x4>

00031aa6 <_calloc_r>:
   31aa6:	b538      	push	{r3, r4, r5, lr}
   31aa8:	fb02 f501 	mul.w	r5, r2, r1
   31aac:	4629      	mov	r1, r5
   31aae:	f7f5 fc93 	bl	273d8 <_malloc_r>
   31ab2:	4604      	mov	r4, r0
   31ab4:	b118      	cbz	r0, 31abe <_calloc_r+0x18>
   31ab6:	462a      	mov	r2, r5
   31ab8:	2100      	movs	r1, #0
   31aba:	f7ff ffec 	bl	31a96 <memset>
   31abe:	4620      	mov	r0, r4
   31ac0:	bd38      	pop	{r3, r4, r5, pc}

00031ac2 <__cvt>:
   31ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ac6:	b089      	sub	sp, #36	; 0x24
   31ac8:	2b00      	cmp	r3, #0
   31aca:	461d      	mov	r5, r3
   31acc:	4614      	mov	r4, r2
   31ace:	bfba      	itte	lt
   31ad0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   31ad4:	4614      	movlt	r4, r2
   31ad6:	2300      	movge	r3, #0
   31ad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   31ada:	bfbc      	itt	lt
   31adc:	461d      	movlt	r5, r3
   31ade:	232d      	movlt	r3, #45	; 0x2d
   31ae0:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   31ae4:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   31ae8:	f028 0a20 	bic.w	sl, r8, #32
   31aec:	7013      	strb	r3, [r2, #0]
   31aee:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   31af2:	d005      	beq.n	31b00 <__cvt+0x3e>
   31af4:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   31af8:	d100      	bne.n	31afc <__cvt+0x3a>
   31afa:	3601      	adds	r6, #1
   31afc:	2302      	movs	r3, #2
   31afe:	e000      	b.n	31b02 <__cvt+0x40>
   31b00:	2303      	movs	r3, #3
   31b02:	aa07      	add	r2, sp, #28
   31b04:	9204      	str	r2, [sp, #16]
   31b06:	aa06      	add	r2, sp, #24
   31b08:	e9cd 3600 	strd	r3, r6, [sp]
   31b0c:	e9cd 9202 	strd	r9, r2, [sp, #8]
   31b10:	462b      	mov	r3, r5
   31b12:	4622      	mov	r2, r4
   31b14:	f7d8 ff84 	bl	aa20 <_dtoa_r>
   31b18:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   31b1c:	4607      	mov	r7, r0
   31b1e:	d119      	bne.n	31b54 <__cvt+0x92>
   31b20:	f01b 0f01 	tst.w	fp, #1
   31b24:	d00e      	beq.n	31b44 <__cvt+0x82>
   31b26:	eb07 0806 	add.w	r8, r7, r6
   31b2a:	2200      	movs	r2, #0
   31b2c:	2300      	movs	r3, #0
   31b2e:	4620      	mov	r0, r4
   31b30:	4629      	mov	r1, r5
   31b32:	f7d7 fa93 	bl	905c <__aeabi_dcmpeq>
   31b36:	b108      	cbz	r0, 31b3c <__cvt+0x7a>
   31b38:	f8cd 801c 	str.w	r8, [sp, #28]
   31b3c:	2230      	movs	r2, #48	; 0x30
   31b3e:	9b07      	ldr	r3, [sp, #28]
   31b40:	4543      	cmp	r3, r8
   31b42:	d321      	bcc.n	31b88 <__cvt+0xc6>
   31b44:	9b07      	ldr	r3, [sp, #28]
   31b46:	4638      	mov	r0, r7
   31b48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   31b4a:	1bdb      	subs	r3, r3, r7
   31b4c:	6013      	str	r3, [r2, #0]
   31b4e:	b009      	add	sp, #36	; 0x24
   31b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   31b58:	d0e2      	beq.n	31b20 <__cvt+0x5e>
   31b5a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   31b5e:	eb00 0806 	add.w	r8, r0, r6
   31b62:	d1e2      	bne.n	31b2a <__cvt+0x68>
   31b64:	7803      	ldrb	r3, [r0, #0]
   31b66:	2b30      	cmp	r3, #48	; 0x30
   31b68:	d10a      	bne.n	31b80 <__cvt+0xbe>
   31b6a:	2200      	movs	r2, #0
   31b6c:	2300      	movs	r3, #0
   31b6e:	4620      	mov	r0, r4
   31b70:	4629      	mov	r1, r5
   31b72:	f7d7 fa73 	bl	905c <__aeabi_dcmpeq>
   31b76:	b918      	cbnz	r0, 31b80 <__cvt+0xbe>
   31b78:	f1c6 0601 	rsb	r6, r6, #1
   31b7c:	f8c9 6000 	str.w	r6, [r9]
   31b80:	f8d9 3000 	ldr.w	r3, [r9]
   31b84:	4498      	add	r8, r3
   31b86:	e7d0      	b.n	31b2a <__cvt+0x68>
   31b88:	1c59      	adds	r1, r3, #1
   31b8a:	9107      	str	r1, [sp, #28]
   31b8c:	701a      	strb	r2, [r3, #0]
   31b8e:	e7d6      	b.n	31b3e <__cvt+0x7c>

00031b90 <__exponent>:
   31b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31b92:	2900      	cmp	r1, #0
   31b94:	7002      	strb	r2, [r0, #0]
   31b96:	bfba      	itte	lt
   31b98:	4249      	neglt	r1, r1
   31b9a:	232d      	movlt	r3, #45	; 0x2d
   31b9c:	232b      	movge	r3, #43	; 0x2b
   31b9e:	2909      	cmp	r1, #9
   31ba0:	7043      	strb	r3, [r0, #1]
   31ba2:	dd28      	ble.n	31bf6 <__exponent+0x66>
   31ba4:	f10d 0307 	add.w	r3, sp, #7
   31ba8:	270a      	movs	r7, #10
   31baa:	461d      	mov	r5, r3
   31bac:	461a      	mov	r2, r3
   31bae:	3b01      	subs	r3, #1
   31bb0:	fbb1 f6f7 	udiv	r6, r1, r7
   31bb4:	fb07 1416 	mls	r4, r7, r6, r1
   31bb8:	3430      	adds	r4, #48	; 0x30
   31bba:	f802 4c01 	strb.w	r4, [r2, #-1]
   31bbe:	460c      	mov	r4, r1
   31bc0:	4631      	mov	r1, r6
   31bc2:	2c63      	cmp	r4, #99	; 0x63
   31bc4:	dcf2      	bgt.n	31bac <__exponent+0x1c>
   31bc6:	3130      	adds	r1, #48	; 0x30
   31bc8:	1e94      	subs	r4, r2, #2
   31bca:	f803 1c01 	strb.w	r1, [r3, #-1]
   31bce:	1c41      	adds	r1, r0, #1
   31bd0:	4623      	mov	r3, r4
   31bd2:	42ab      	cmp	r3, r5
   31bd4:	d30a      	bcc.n	31bec <__exponent+0x5c>
   31bd6:	f10d 0309 	add.w	r3, sp, #9
   31bda:	1a9b      	subs	r3, r3, r2
   31bdc:	42ac      	cmp	r4, r5
   31bde:	bf88      	it	hi
   31be0:	2300      	movhi	r3, #0
   31be2:	3302      	adds	r3, #2
   31be4:	4403      	add	r3, r0
   31be6:	1a18      	subs	r0, r3, r0
   31be8:	b003      	add	sp, #12
   31bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31bec:	f813 6b01 	ldrb.w	r6, [r3], #1
   31bf0:	f801 6f01 	strb.w	r6, [r1, #1]!
   31bf4:	e7ed      	b.n	31bd2 <__exponent+0x42>
   31bf6:	2330      	movs	r3, #48	; 0x30
   31bf8:	3130      	adds	r1, #48	; 0x30
   31bfa:	7083      	strb	r3, [r0, #2]
   31bfc:	1d03      	adds	r3, r0, #4
   31bfe:	70c1      	strb	r1, [r0, #3]
   31c00:	e7f1      	b.n	31be6 <__exponent+0x56>

00031c02 <_printf_common>:
   31c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31c06:	4616      	mov	r6, r2
   31c08:	4698      	mov	r8, r3
   31c0a:	688a      	ldr	r2, [r1, #8]
   31c0c:	4607      	mov	r7, r0
   31c0e:	690b      	ldr	r3, [r1, #16]
   31c10:	460c      	mov	r4, r1
   31c12:	f8dd 9020 	ldr.w	r9, [sp, #32]
   31c16:	4293      	cmp	r3, r2
   31c18:	bfb8      	it	lt
   31c1a:	4613      	movlt	r3, r2
   31c1c:	6033      	str	r3, [r6, #0]
   31c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   31c22:	b10a      	cbz	r2, 31c28 <_printf_common+0x26>
   31c24:	3301      	adds	r3, #1
   31c26:	6033      	str	r3, [r6, #0]
   31c28:	6823      	ldr	r3, [r4, #0]
   31c2a:	0699      	lsls	r1, r3, #26
   31c2c:	bf42      	ittt	mi
   31c2e:	6833      	ldrmi	r3, [r6, #0]
   31c30:	3302      	addmi	r3, #2
   31c32:	6033      	strmi	r3, [r6, #0]
   31c34:	6825      	ldr	r5, [r4, #0]
   31c36:	f015 0506 	ands.w	r5, r5, #6
   31c3a:	d106      	bne.n	31c4a <_printf_common+0x48>
   31c3c:	f104 0a19 	add.w	sl, r4, #25
   31c40:	68e3      	ldr	r3, [r4, #12]
   31c42:	6832      	ldr	r2, [r6, #0]
   31c44:	1a9b      	subs	r3, r3, r2
   31c46:	42ab      	cmp	r3, r5
   31c48:	dc2b      	bgt.n	31ca2 <_printf_common+0xa0>
   31c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   31c4e:	6822      	ldr	r2, [r4, #0]
   31c50:	3b00      	subs	r3, #0
   31c52:	bf18      	it	ne
   31c54:	2301      	movne	r3, #1
   31c56:	0692      	lsls	r2, r2, #26
   31c58:	d430      	bmi.n	31cbc <_printf_common+0xba>
   31c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   31c5e:	4641      	mov	r1, r8
   31c60:	4638      	mov	r0, r7
   31c62:	47c8      	blx	r9
   31c64:	3001      	adds	r0, #1
   31c66:	d023      	beq.n	31cb0 <_printf_common+0xae>
   31c68:	6823      	ldr	r3, [r4, #0]
   31c6a:	341a      	adds	r4, #26
   31c6c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   31c70:	f003 0306 	and.w	r3, r3, #6
   31c74:	2b04      	cmp	r3, #4
   31c76:	bf0a      	itet	eq
   31c78:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   31c7c:	2500      	movne	r5, #0
   31c7e:	6833      	ldreq	r3, [r6, #0]
   31c80:	f04f 0600 	mov.w	r6, #0
   31c84:	bf08      	it	eq
   31c86:	1aed      	subeq	r5, r5, r3
   31c88:	f854 3c12 	ldr.w	r3, [r4, #-18]
   31c8c:	bf08      	it	eq
   31c8e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   31c92:	4293      	cmp	r3, r2
   31c94:	bfc4      	itt	gt
   31c96:	1a9b      	subgt	r3, r3, r2
   31c98:	18ed      	addgt	r5, r5, r3
   31c9a:	42b5      	cmp	r5, r6
   31c9c:	d11a      	bne.n	31cd4 <_printf_common+0xd2>
   31c9e:	2000      	movs	r0, #0
   31ca0:	e008      	b.n	31cb4 <_printf_common+0xb2>
   31ca2:	2301      	movs	r3, #1
   31ca4:	4652      	mov	r2, sl
   31ca6:	4641      	mov	r1, r8
   31ca8:	4638      	mov	r0, r7
   31caa:	47c8      	blx	r9
   31cac:	3001      	adds	r0, #1
   31cae:	d103      	bne.n	31cb8 <_printf_common+0xb6>
   31cb0:	f04f 30ff 	mov.w	r0, #4294967295
   31cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31cb8:	3501      	adds	r5, #1
   31cba:	e7c1      	b.n	31c40 <_printf_common+0x3e>
   31cbc:	18e1      	adds	r1, r4, r3
   31cbe:	1c5a      	adds	r2, r3, #1
   31cc0:	2030      	movs	r0, #48	; 0x30
   31cc2:	3302      	adds	r3, #2
   31cc4:	4422      	add	r2, r4
   31cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   31cca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   31cce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   31cd2:	e7c2      	b.n	31c5a <_printf_common+0x58>
   31cd4:	2301      	movs	r3, #1
   31cd6:	4622      	mov	r2, r4
   31cd8:	4641      	mov	r1, r8
   31cda:	4638      	mov	r0, r7
   31cdc:	47c8      	blx	r9
   31cde:	3001      	adds	r0, #1
   31ce0:	d0e6      	beq.n	31cb0 <_printf_common+0xae>
   31ce2:	3601      	adds	r6, #1
   31ce4:	e7d9      	b.n	31c9a <_printf_common+0x98>

00031ce6 <__sprintf_chk>:
   31ce6:	b408      	push	{r3}
   31ce8:	b517      	push	{r0, r1, r2, r4, lr}
   31cea:	ab05      	add	r3, sp, #20
   31cec:	1e14      	subs	r4, r2, #0
   31cee:	f853 1b04 	ldr.w	r1, [r3], #4
   31cf2:	9301      	str	r3, [sp, #4]
   31cf4:	da07      	bge.n	31d06 <__sprintf_chk+0x20>
   31cf6:	461a      	mov	r2, r3
   31cf8:	f7f6 fb04 	bl	28304 <vsiprintf>
   31cfc:	b003      	add	sp, #12
   31cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31d02:	b001      	add	sp, #4
   31d04:	4770      	bx	lr
   31d06:	460a      	mov	r2, r1
   31d08:	4621      	mov	r1, r4
   31d0a:	f7f6 fad7 	bl	282bc <vsniprintf>
   31d0e:	2800      	cmp	r0, #0
   31d10:	dbf4      	blt.n	31cfc <__sprintf_chk+0x16>
   31d12:	42a0      	cmp	r0, r4
   31d14:	d3f2      	bcc.n	31cfc <__sprintf_chk+0x16>
   31d16:	f7e0 f9d7 	bl	120c8 <__chk_fail>

00031d1a <strchr>:
   31d1a:	b2c9      	uxtb	r1, r1
   31d1c:	4603      	mov	r3, r0
   31d1e:	4618      	mov	r0, r3
   31d20:	f813 2b01 	ldrb.w	r2, [r3], #1
   31d24:	b112      	cbz	r2, 31d2c <strchr+0x12>
   31d26:	428a      	cmp	r2, r1
   31d28:	d1f9      	bne.n	31d1e <strchr+0x4>
   31d2a:	4770      	bx	lr
   31d2c:	2900      	cmp	r1, #0
   31d2e:	bf18      	it	ne
   31d30:	2000      	movne	r0, #0
   31d32:	4770      	bx	lr

00031d34 <strcpy>:
   31d34:	4603      	mov	r3, r0
   31d36:	f811 2b01 	ldrb.w	r2, [r1], #1
   31d3a:	f803 2b01 	strb.w	r2, [r3], #1
   31d3e:	2a00      	cmp	r2, #0
   31d40:	d1f9      	bne.n	31d36 <strcpy+0x2>
   31d42:	4770      	bx	lr

00031d44 <strncmp>:
   31d44:	b510      	push	{r4, lr}
   31d46:	b16a      	cbz	r2, 31d64 <strncmp+0x20>
   31d48:	3901      	subs	r1, #1
   31d4a:	1884      	adds	r4, r0, r2
   31d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   31d50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   31d54:	429a      	cmp	r2, r3
   31d56:	d103      	bne.n	31d60 <strncmp+0x1c>
   31d58:	42a0      	cmp	r0, r4
   31d5a:	d001      	beq.n	31d60 <strncmp+0x1c>
   31d5c:	2a00      	cmp	r2, #0
   31d5e:	d1f5      	bne.n	31d4c <strncmp+0x8>
   31d60:	1ad0      	subs	r0, r2, r3
   31d62:	bd10      	pop	{r4, pc}
   31d64:	4610      	mov	r0, r2
   31d66:	e7fc      	b.n	31d62 <strncmp+0x1e>

00031d68 <strncpy>:
   31d68:	3901      	subs	r1, #1
   31d6a:	4603      	mov	r3, r0
   31d6c:	b510      	push	{r4, lr}
   31d6e:	b132      	cbz	r2, 31d7e <strncpy+0x16>
   31d70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   31d74:	3a01      	subs	r2, #1
   31d76:	f803 4b01 	strb.w	r4, [r3], #1
   31d7a:	2c00      	cmp	r4, #0
   31d7c:	d1f7      	bne.n	31d6e <strncpy+0x6>
   31d7e:	441a      	add	r2, r3
   31d80:	2100      	movs	r1, #0
   31d82:	4293      	cmp	r3, r2
   31d84:	d100      	bne.n	31d88 <strncpy+0x20>
   31d86:	bd10      	pop	{r4, pc}
   31d88:	f803 1b01 	strb.w	r1, [r3], #1
   31d8c:	e7f9      	b.n	31d82 <strncpy+0x1a>

00031d8e <strnlen>:
   31d8e:	4602      	mov	r2, r0
   31d90:	4401      	add	r1, r0
   31d92:	b510      	push	{r4, lr}
   31d94:	428a      	cmp	r2, r1
   31d96:	4613      	mov	r3, r2
   31d98:	d003      	beq.n	31da2 <strnlen+0x14>
   31d9a:	781c      	ldrb	r4, [r3, #0]
   31d9c:	3201      	adds	r2, #1
   31d9e:	2c00      	cmp	r4, #0
   31da0:	d1f8      	bne.n	31d94 <strnlen+0x6>
   31da2:	1a18      	subs	r0, r3, r0
   31da4:	bd10      	pop	{r4, pc}

00031da6 <strstr>:
   31da6:	780a      	ldrb	r2, [r1, #0]
   31da8:	b570      	push	{r4, r5, r6, lr}
   31daa:	b96a      	cbnz	r2, 31dc8 <strstr+0x22>
   31dac:	bd70      	pop	{r4, r5, r6, pc}
   31dae:	429a      	cmp	r2, r3
   31db0:	d109      	bne.n	31dc6 <strstr+0x20>
   31db2:	460c      	mov	r4, r1
   31db4:	4605      	mov	r5, r0
   31db6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   31dba:	2b00      	cmp	r3, #0
   31dbc:	d0f6      	beq.n	31dac <strstr+0x6>
   31dbe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   31dc2:	429e      	cmp	r6, r3
   31dc4:	d0f7      	beq.n	31db6 <strstr+0x10>
   31dc6:	3001      	adds	r0, #1
   31dc8:	7803      	ldrb	r3, [r0, #0]
   31dca:	2b00      	cmp	r3, #0
   31dcc:	d1ef      	bne.n	31dae <strstr+0x8>
   31dce:	4618      	mov	r0, r3
   31dd0:	e7ec      	b.n	31dac <strstr+0x6>

00031dd2 <sulp>:
   31dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31dd6:	4690      	mov	r8, r2
   31dd8:	460f      	mov	r7, r1
   31dda:	f7f7 f91d 	bl	29018 <__ulp>
   31dde:	4604      	mov	r4, r0
   31de0:	460d      	mov	r5, r1
   31de2:	f1b8 0f00 	cmp.w	r8, #0
   31de6:	d011      	beq.n	31e0c <sulp+0x3a>
   31de8:	f3c7 530a 	ubfx	r3, r7, #20, #11
   31dec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   31df0:	2b00      	cmp	r3, #0
   31df2:	dd0b      	ble.n	31e0c <sulp+0x3a>
   31df4:	051b      	lsls	r3, r3, #20
   31df6:	2400      	movs	r4, #0
   31df8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   31dfc:	4622      	mov	r2, r4
   31dfe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   31e02:	462b      	mov	r3, r5
   31e04:	f7d6 fb64 	bl	84d0 <__aeabi_dmul>
   31e08:	4604      	mov	r4, r0
   31e0a:	460d      	mov	r5, r1
   31e0c:	4620      	mov	r0, r4
   31e0e:	4629      	mov	r1, r5
   31e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00031e14 <__strtok_r>:
   31e14:	b5f0      	push	{r4, r5, r6, r7, lr}
   31e16:	4604      	mov	r4, r0
   31e18:	b908      	cbnz	r0, 31e1e <__strtok_r+0xa>
   31e1a:	6814      	ldr	r4, [r2, #0]
   31e1c:	b144      	cbz	r4, 31e30 <__strtok_r+0x1c>
   31e1e:	4620      	mov	r0, r4
   31e20:	460f      	mov	r7, r1
   31e22:	f814 5b01 	ldrb.w	r5, [r4], #1
   31e26:	f817 6b01 	ldrb.w	r6, [r7], #1
   31e2a:	b91e      	cbnz	r6, 31e34 <__strtok_r+0x20>
   31e2c:	b965      	cbnz	r5, 31e48 <__strtok_r+0x34>
   31e2e:	6015      	str	r5, [r2, #0]
   31e30:	2000      	movs	r0, #0
   31e32:	e005      	b.n	31e40 <__strtok_r+0x2c>
   31e34:	42b5      	cmp	r5, r6
   31e36:	d1f6      	bne.n	31e26 <__strtok_r+0x12>
   31e38:	2b00      	cmp	r3, #0
   31e3a:	d1f0      	bne.n	31e1e <__strtok_r+0xa>
   31e3c:	6014      	str	r4, [r2, #0]
   31e3e:	7003      	strb	r3, [r0, #0]
   31e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31e42:	461c      	mov	r4, r3
   31e44:	e00c      	b.n	31e60 <__strtok_r+0x4c>
   31e46:	b915      	cbnz	r5, 31e4e <__strtok_r+0x3a>
   31e48:	f814 3b01 	ldrb.w	r3, [r4], #1
   31e4c:	460e      	mov	r6, r1
   31e4e:	f816 5b01 	ldrb.w	r5, [r6], #1
   31e52:	42ab      	cmp	r3, r5
   31e54:	d1f7      	bne.n	31e46 <__strtok_r+0x32>
   31e56:	2b00      	cmp	r3, #0
   31e58:	d0f3      	beq.n	31e42 <__strtok_r+0x2e>
   31e5a:	2300      	movs	r3, #0
   31e5c:	f804 3c01 	strb.w	r3, [r4, #-1]
   31e60:	6014      	str	r4, [r2, #0]
   31e62:	e7ed      	b.n	31e40 <__strtok_r+0x2c>

00031e64 <_strtol_r>:
   31e64:	f7f5 bede 	b.w	27c24 <_strtol_l.constprop.0>

00031e68 <_strtoul_r>:
   31e68:	f7f5 bf64 	b.w	27d34 <_strtoul_l.constprop.0>

00031e6c <_vsniprintf_r>:
   31e6c:	b530      	push	{r4, r5, lr}
   31e6e:	4614      	mov	r4, r2
   31e70:	b09b      	sub	sp, #108	; 0x6c
   31e72:	4605      	mov	r5, r0
   31e74:	461a      	mov	r2, r3
   31e76:	2c00      	cmp	r4, #0
   31e78:	da05      	bge.n	31e86 <_vsniprintf_r+0x1a>
   31e7a:	238b      	movs	r3, #139	; 0x8b
   31e7c:	6003      	str	r3, [r0, #0]
   31e7e:	f04f 30ff 	mov.w	r0, #4294967295
   31e82:	b01b      	add	sp, #108	; 0x6c
   31e84:	bd30      	pop	{r4, r5, pc}
   31e86:	f44f 7302 	mov.w	r3, #520	; 0x208
   31e8a:	9100      	str	r1, [sp, #0]
   31e8c:	9104      	str	r1, [sp, #16]
   31e8e:	4669      	mov	r1, sp
   31e90:	f8ad 300c 	strh.w	r3, [sp, #12]
   31e94:	bf14      	ite	ne
   31e96:	f104 33ff 	addne.w	r3, r4, #4294967295
   31e9a:	4623      	moveq	r3, r4
   31e9c:	9302      	str	r3, [sp, #8]
   31e9e:	9305      	str	r3, [sp, #20]
   31ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31ea4:	f8ad 300e 	strh.w	r3, [sp, #14]
   31ea8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   31eaa:	f7f7 f977 	bl	2919c <_svfiprintf_r>
   31eae:	1c43      	adds	r3, r0, #1
   31eb0:	bfbc      	itt	lt
   31eb2:	238b      	movlt	r3, #139	; 0x8b
   31eb4:	602b      	strlt	r3, [r5, #0]
   31eb6:	2c00      	cmp	r4, #0
   31eb8:	d0e3      	beq.n	31e82 <_vsniprintf_r+0x16>
   31eba:	9b00      	ldr	r3, [sp, #0]
   31ebc:	2200      	movs	r2, #0
   31ebe:	701a      	strb	r2, [r3, #0]
   31ec0:	e7df      	b.n	31e82 <_vsniprintf_r+0x16>

00031ec2 <div>:
   31ec2:	b510      	push	{r4, lr}
   31ec4:	fb91 f4f2 	sdiv	r4, r1, r2
   31ec8:	fb02 1114 	mls	r1, r2, r4, r1
   31ecc:	6004      	str	r4, [r0, #0]
   31ece:	6041      	str	r1, [r0, #4]
   31ed0:	bd10      	pop	{r4, pc}

00031ed2 <quorem>:
   31ed2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ed6:	6903      	ldr	r3, [r0, #16]
   31ed8:	4607      	mov	r7, r0
   31eda:	690c      	ldr	r4, [r1, #16]
   31edc:	42a3      	cmp	r3, r4
   31ede:	f2c0 8083 	blt.w	31fe8 <quorem+0x116>
   31ee2:	3c01      	subs	r4, #1
   31ee4:	f100 0514 	add.w	r5, r0, #20
   31ee8:	f101 0814 	add.w	r8, r1, #20
   31eec:	00a3      	lsls	r3, r4, #2
   31eee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   31ef2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   31ef6:	9300      	str	r3, [sp, #0]
   31ef8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   31efc:	9301      	str	r3, [sp, #4]
   31efe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   31f02:	3301      	adds	r3, #1
   31f04:	429a      	cmp	r2, r3
   31f06:	fbb2 f6f3 	udiv	r6, r2, r3
   31f0a:	d331      	bcc.n	31f70 <quorem+0x9e>
   31f0c:	f04f 0a00 	mov.w	sl, #0
   31f10:	46c4      	mov	ip, r8
   31f12:	46ae      	mov	lr, r5
   31f14:	46d3      	mov	fp, sl
   31f16:	f85c 3b04 	ldr.w	r3, [ip], #4
   31f1a:	b298      	uxth	r0, r3
   31f1c:	45e1      	cmp	r9, ip
   31f1e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   31f22:	fb06 a000 	mla	r0, r6, r0, sl
   31f26:	ea4f 4210 	mov.w	r2, r0, lsr #16
   31f2a:	b280      	uxth	r0, r0
   31f2c:	fb06 2303 	mla	r3, r6, r3, r2
   31f30:	f8de 2000 	ldr.w	r2, [lr]
   31f34:	b292      	uxth	r2, r2
   31f36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   31f3a:	eba2 0200 	sub.w	r2, r2, r0
   31f3e:	b29b      	uxth	r3, r3
   31f40:	f8de 0000 	ldr.w	r0, [lr]
   31f44:	445a      	add	r2, fp
   31f46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   31f4a:	b292      	uxth	r2, r2
   31f4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   31f50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   31f54:	ea4f 4b23 	mov.w	fp, r3, asr #16
   31f58:	f84e 2b04 	str.w	r2, [lr], #4
   31f5c:	d2db      	bcs.n	31f16 <quorem+0x44>
   31f5e:	9b00      	ldr	r3, [sp, #0]
   31f60:	58eb      	ldr	r3, [r5, r3]
   31f62:	b92b      	cbnz	r3, 31f70 <quorem+0x9e>
   31f64:	9b01      	ldr	r3, [sp, #4]
   31f66:	3b04      	subs	r3, #4
   31f68:	429d      	cmp	r5, r3
   31f6a:	461a      	mov	r2, r3
   31f6c:	d330      	bcc.n	31fd0 <quorem+0xfe>
   31f6e:	613c      	str	r4, [r7, #16]
   31f70:	4638      	mov	r0, r7
   31f72:	f000 fa0d 	bl	32390 <__mcmp>
   31f76:	2800      	cmp	r0, #0
   31f78:	db26      	blt.n	31fc8 <quorem+0xf6>
   31f7a:	4629      	mov	r1, r5
   31f7c:	2000      	movs	r0, #0
   31f7e:	f858 2b04 	ldr.w	r2, [r8], #4
   31f82:	f8d1 c000 	ldr.w	ip, [r1]
   31f86:	fa1f fe82 	uxth.w	lr, r2
   31f8a:	45c1      	cmp	r9, r8
   31f8c:	fa1f f38c 	uxth.w	r3, ip
   31f90:	ea4f 4212 	mov.w	r2, r2, lsr #16
   31f94:	eba3 030e 	sub.w	r3, r3, lr
   31f98:	4403      	add	r3, r0
   31f9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   31f9e:	b29b      	uxth	r3, r3
   31fa0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   31fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   31fa8:	ea4f 4022 	mov.w	r0, r2, asr #16
   31fac:	f841 3b04 	str.w	r3, [r1], #4
   31fb0:	d2e5      	bcs.n	31f7e <quorem+0xac>
   31fb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   31fb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   31fba:	b922      	cbnz	r2, 31fc6 <quorem+0xf4>
   31fbc:	3b04      	subs	r3, #4
   31fbe:	429d      	cmp	r5, r3
   31fc0:	461a      	mov	r2, r3
   31fc2:	d30b      	bcc.n	31fdc <quorem+0x10a>
   31fc4:	613c      	str	r4, [r7, #16]
   31fc6:	3601      	adds	r6, #1
   31fc8:	4630      	mov	r0, r6
   31fca:	b003      	add	sp, #12
   31fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31fd0:	6812      	ldr	r2, [r2, #0]
   31fd2:	3b04      	subs	r3, #4
   31fd4:	2a00      	cmp	r2, #0
   31fd6:	d1ca      	bne.n	31f6e <quorem+0x9c>
   31fd8:	3c01      	subs	r4, #1
   31fda:	e7c5      	b.n	31f68 <quorem+0x96>
   31fdc:	6812      	ldr	r2, [r2, #0]
   31fde:	3b04      	subs	r3, #4
   31fe0:	2a00      	cmp	r2, #0
   31fe2:	d1ef      	bne.n	31fc4 <quorem+0xf2>
   31fe4:	3c01      	subs	r4, #1
   31fe6:	e7ea      	b.n	31fbe <quorem+0xec>
   31fe8:	2000      	movs	r0, #0
   31fea:	e7ee      	b.n	31fca <quorem+0xf8>

00031fec <__sfmoreglue>:
   31fec:	b570      	push	{r4, r5, r6, lr}
   31fee:	2368      	movs	r3, #104	; 0x68
   31ff0:	1e4d      	subs	r5, r1, #1
   31ff2:	460e      	mov	r6, r1
   31ff4:	435d      	muls	r5, r3
   31ff6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   31ffa:	f7f5 f9ed 	bl	273d8 <_malloc_r>
   31ffe:	4604      	mov	r4, r0
   32000:	b140      	cbz	r0, 32014 <__sfmoreglue+0x28>
   32002:	2100      	movs	r1, #0
   32004:	f105 0268 	add.w	r2, r5, #104	; 0x68
   32008:	e9c0 1600 	strd	r1, r6, [r0]
   3200c:	300c      	adds	r0, #12
   3200e:	60a0      	str	r0, [r4, #8]
   32010:	f7ff fd41 	bl	31a96 <memset>
   32014:	4620      	mov	r0, r4
   32016:	bd70      	pop	{r4, r5, r6, pc}

00032018 <_fwalk_reent>:
   32018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3201c:	4606      	mov	r6, r0
   3201e:	4688      	mov	r8, r1
   32020:	f100 0448 	add.w	r4, r0, #72	; 0x48
   32024:	2700      	movs	r7, #0
   32026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   3202a:	f1b9 0901 	subs.w	r9, r9, #1
   3202e:	d505      	bpl.n	3203c <_fwalk_reent+0x24>
   32030:	6824      	ldr	r4, [r4, #0]
   32032:	2c00      	cmp	r4, #0
   32034:	d1f7      	bne.n	32026 <_fwalk_reent+0xe>
   32036:	4638      	mov	r0, r7
   32038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3203c:	89ab      	ldrh	r3, [r5, #12]
   3203e:	2b01      	cmp	r3, #1
   32040:	d907      	bls.n	32052 <_fwalk_reent+0x3a>
   32042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   32046:	3301      	adds	r3, #1
   32048:	d003      	beq.n	32052 <_fwalk_reent+0x3a>
   3204a:	4629      	mov	r1, r5
   3204c:	4630      	mov	r0, r6
   3204e:	47c0      	blx	r8
   32050:	4307      	orrs	r7, r0
   32052:	3568      	adds	r5, #104	; 0x68
   32054:	e7e9      	b.n	3202a <_fwalk_reent+0x12>

00032056 <rshift>:
   32056:	6903      	ldr	r3, [r0, #16]
   32058:	114a      	asrs	r2, r1, #5
   3205a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   3205e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32062:	dc04      	bgt.n	3206e <rshift+0x18>
   32064:	2300      	movs	r3, #0
   32066:	6103      	str	r3, [r0, #16]
   32068:	2300      	movs	r3, #0
   3206a:	6143      	str	r3, [r0, #20]
   3206c:	e031      	b.n	320d2 <rshift+0x7c>
   3206e:	f100 0414 	add.w	r4, r0, #20
   32072:	f011 011f 	ands.w	r1, r1, #31
   32076:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   3207a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   3207e:	d10c      	bne.n	3209a <rshift+0x44>
   32080:	f100 0710 	add.w	r7, r0, #16
   32084:	4629      	mov	r1, r5
   32086:	42b1      	cmp	r1, r6
   32088:	d331      	bcc.n	320ee <rshift+0x98>
   3208a:	1a9b      	subs	r3, r3, r2
   3208c:	1eea      	subs	r2, r5, #3
   3208e:	009b      	lsls	r3, r3, #2
   32090:	4296      	cmp	r6, r2
   32092:	bf38      	it	cc
   32094:	2300      	movcc	r3, #0
   32096:	4423      	add	r3, r4
   32098:	e015      	b.n	320c6 <rshift+0x70>
   3209a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   3209e:	f1c1 0820 	rsb	r8, r1, #32
   320a2:	f105 0e04 	add.w	lr, r5, #4
   320a6:	46a1      	mov	r9, r4
   320a8:	40cf      	lsrs	r7, r1
   320aa:	4576      	cmp	r6, lr
   320ac:	46f4      	mov	ip, lr
   320ae:	d812      	bhi.n	320d6 <rshift+0x80>
   320b0:	1a9a      	subs	r2, r3, r2
   320b2:	3501      	adds	r5, #1
   320b4:	0092      	lsls	r2, r2, #2
   320b6:	3a04      	subs	r2, #4
   320b8:	42ae      	cmp	r6, r5
   320ba:	bf38      	it	cc
   320bc:	2200      	movcc	r2, #0
   320be:	18a3      	adds	r3, r4, r2
   320c0:	50a7      	str	r7, [r4, r2]
   320c2:	b107      	cbz	r7, 320c6 <rshift+0x70>
   320c4:	3304      	adds	r3, #4
   320c6:	1b1a      	subs	r2, r3, r4
   320c8:	42a3      	cmp	r3, r4
   320ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
   320ce:	6102      	str	r2, [r0, #16]
   320d0:	d0ca      	beq.n	32068 <rshift+0x12>
   320d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   320d6:	f8dc c000 	ldr.w	ip, [ip]
   320da:	fa0c fc08 	lsl.w	ip, ip, r8
   320de:	ea4c 0707 	orr.w	r7, ip, r7
   320e2:	f849 7b04 	str.w	r7, [r9], #4
   320e6:	f85e 7b04 	ldr.w	r7, [lr], #4
   320ea:	40cf      	lsrs	r7, r1
   320ec:	e7dd      	b.n	320aa <rshift+0x54>
   320ee:	f851 cb04 	ldr.w	ip, [r1], #4
   320f2:	f847 cf04 	str.w	ip, [r7, #4]!
   320f6:	e7c6      	b.n	32086 <rshift+0x30>

000320f8 <__hexdig_fun>:
   320f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   320fc:	2b09      	cmp	r3, #9
   320fe:	d802      	bhi.n	32106 <__hexdig_fun+0xe>
   32100:	3820      	subs	r0, #32
   32102:	b2c0      	uxtb	r0, r0
   32104:	4770      	bx	lr
   32106:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3210a:	2b05      	cmp	r3, #5
   3210c:	d801      	bhi.n	32112 <__hexdig_fun+0x1a>
   3210e:	3847      	subs	r0, #71	; 0x47
   32110:	e7f7      	b.n	32102 <__hexdig_fun+0xa>
   32112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   32116:	2b05      	cmp	r3, #5
   32118:	d801      	bhi.n	3211e <__hexdig_fun+0x26>
   3211a:	3827      	subs	r0, #39	; 0x27
   3211c:	e7f1      	b.n	32102 <__hexdig_fun+0xa>
   3211e:	2000      	movs	r0, #0
   32120:	4770      	bx	lr

00032122 <L_shift>:
   32122:	f1c2 0208 	rsb	r2, r2, #8
   32126:	0092      	lsls	r2, r2, #2
   32128:	b570      	push	{r4, r5, r6, lr}
   3212a:	f1c2 0620 	rsb	r6, r2, #32
   3212e:	6843      	ldr	r3, [r0, #4]
   32130:	6804      	ldr	r4, [r0, #0]
   32132:	fa03 f506 	lsl.w	r5, r3, r6
   32136:	40d3      	lsrs	r3, r2
   32138:	432c      	orrs	r4, r5
   3213a:	6004      	str	r4, [r0, #0]
   3213c:	f840 3f04 	str.w	r3, [r0, #4]!
   32140:	4288      	cmp	r0, r1
   32142:	d3f4      	bcc.n	3212e <L_shift+0xc>
   32144:	bd70      	pop	{r4, r5, r6, pc}

00032146 <__match>:
   32146:	6803      	ldr	r3, [r0, #0]
   32148:	3301      	adds	r3, #1
   3214a:	b530      	push	{r4, r5, lr}
   3214c:	f811 4b01 	ldrb.w	r4, [r1], #1
   32150:	b914      	cbnz	r4, 32158 <__match+0x12>
   32152:	6003      	str	r3, [r0, #0]
   32154:	2001      	movs	r0, #1
   32156:	bd30      	pop	{r4, r5, pc}
   32158:	f813 2b01 	ldrb.w	r2, [r3], #1
   3215c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   32160:	2d19      	cmp	r5, #25
   32162:	bf98      	it	ls
   32164:	3220      	addls	r2, #32
   32166:	42a2      	cmp	r2, r4
   32168:	d0f0      	beq.n	3214c <__match+0x6>
   3216a:	2000      	movs	r0, #0
   3216c:	e7f3      	b.n	32156 <__match+0x10>

0003216e <__hexnan>:
   3216e:	680b      	ldr	r3, [r1, #0]
   32170:	6801      	ldr	r1, [r0, #0]
   32172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32176:	115e      	asrs	r6, r3, #5
   32178:	f013 031f 	ands.w	r3, r3, #31
   3217c:	f04f 0500 	mov.w	r5, #0
   32180:	b087      	sub	sp, #28
   32182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   32186:	4682      	mov	sl, r0
   32188:	4690      	mov	r8, r2
   3218a:	46ab      	mov	fp, r5
   3218c:	bf18      	it	ne
   3218e:	3604      	addne	r6, #4
   32190:	9301      	str	r3, [sp, #4]
   32192:	9502      	str	r5, [sp, #8]
   32194:	1f37      	subs	r7, r6, #4
   32196:	f846 5c04 	str.w	r5, [r6, #-4]
   3219a:	46b9      	mov	r9, r7
   3219c:	463c      	mov	r4, r7
   3219e:	1c4b      	adds	r3, r1, #1
   321a0:	784a      	ldrb	r2, [r1, #1]
   321a2:	9303      	str	r3, [sp, #12]
   321a4:	b342      	cbz	r2, 321f8 <__hexnan+0x8a>
   321a6:	4610      	mov	r0, r2
   321a8:	9105      	str	r1, [sp, #20]
   321aa:	9204      	str	r2, [sp, #16]
   321ac:	f7ff ffa4 	bl	320f8 <__hexdig_fun>
   321b0:	2800      	cmp	r0, #0
   321b2:	d151      	bne.n	32258 <__hexnan+0xea>
   321b4:	9a04      	ldr	r2, [sp, #16]
   321b6:	9905      	ldr	r1, [sp, #20]
   321b8:	2a20      	cmp	r2, #32
   321ba:	d818      	bhi.n	321ee <__hexnan+0x80>
   321bc:	9b02      	ldr	r3, [sp, #8]
   321be:	459b      	cmp	fp, r3
   321c0:	dd13      	ble.n	321ea <__hexnan+0x7c>
   321c2:	454c      	cmp	r4, r9
   321c4:	d206      	bcs.n	321d4 <__hexnan+0x66>
   321c6:	2d07      	cmp	r5, #7
   321c8:	dc04      	bgt.n	321d4 <__hexnan+0x66>
   321ca:	462a      	mov	r2, r5
   321cc:	4649      	mov	r1, r9
   321ce:	4620      	mov	r0, r4
   321d0:	f7ff ffa7 	bl	32122 <L_shift>
   321d4:	4544      	cmp	r4, r8
   321d6:	d951      	bls.n	3227c <__hexnan+0x10e>
   321d8:	2300      	movs	r3, #0
   321da:	f1a4 0904 	sub.w	r9, r4, #4
   321de:	f8cd b008 	str.w	fp, [sp, #8]
   321e2:	f844 3c04 	str.w	r3, [r4, #-4]
   321e6:	461d      	mov	r5, r3
   321e8:	464c      	mov	r4, r9
   321ea:	9903      	ldr	r1, [sp, #12]
   321ec:	e7d7      	b.n	3219e <__hexnan+0x30>
   321ee:	2a29      	cmp	r2, #41	; 0x29
   321f0:	d156      	bne.n	322a0 <__hexnan+0x132>
   321f2:	3102      	adds	r1, #2
   321f4:	f8ca 1000 	str.w	r1, [sl]
   321f8:	f1bb 0f00 	cmp.w	fp, #0
   321fc:	d050      	beq.n	322a0 <__hexnan+0x132>
   321fe:	454c      	cmp	r4, r9
   32200:	d206      	bcs.n	32210 <__hexnan+0xa2>
   32202:	2d07      	cmp	r5, #7
   32204:	dc04      	bgt.n	32210 <__hexnan+0xa2>
   32206:	462a      	mov	r2, r5
   32208:	4649      	mov	r1, r9
   3220a:	4620      	mov	r0, r4
   3220c:	f7ff ff89 	bl	32122 <L_shift>
   32210:	4544      	cmp	r4, r8
   32212:	d935      	bls.n	32280 <__hexnan+0x112>
   32214:	f1a8 0204 	sub.w	r2, r8, #4
   32218:	4623      	mov	r3, r4
   3221a:	f853 1b04 	ldr.w	r1, [r3], #4
   3221e:	429f      	cmp	r7, r3
   32220:	f842 1f04 	str.w	r1, [r2, #4]!
   32224:	d2f9      	bcs.n	3221a <__hexnan+0xac>
   32226:	1b3b      	subs	r3, r7, r4
   32228:	3e03      	subs	r6, #3
   3222a:	3401      	adds	r4, #1
   3222c:	2200      	movs	r2, #0
   3222e:	f023 0303 	bic.w	r3, r3, #3
   32232:	3304      	adds	r3, #4
   32234:	42b4      	cmp	r4, r6
   32236:	bf88      	it	hi
   32238:	2304      	movhi	r3, #4
   3223a:	4443      	add	r3, r8
   3223c:	f843 2b04 	str.w	r2, [r3], #4
   32240:	429f      	cmp	r7, r3
   32242:	d2fb      	bcs.n	3223c <__hexnan+0xce>
   32244:	683b      	ldr	r3, [r7, #0]
   32246:	b91b      	cbnz	r3, 32250 <__hexnan+0xe2>
   32248:	4547      	cmp	r7, r8
   3224a:	d127      	bne.n	3229c <__hexnan+0x12e>
   3224c:	2301      	movs	r3, #1
   3224e:	603b      	str	r3, [r7, #0]
   32250:	2005      	movs	r0, #5
   32252:	b007      	add	sp, #28
   32254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32258:	3501      	adds	r5, #1
   3225a:	f10b 0b01 	add.w	fp, fp, #1
   3225e:	2d08      	cmp	r5, #8
   32260:	dd05      	ble.n	3226e <__hexnan+0x100>
   32262:	4544      	cmp	r4, r8
   32264:	d9c1      	bls.n	321ea <__hexnan+0x7c>
   32266:	2300      	movs	r3, #0
   32268:	3c04      	subs	r4, #4
   3226a:	2501      	movs	r5, #1
   3226c:	6023      	str	r3, [r4, #0]
   3226e:	6822      	ldr	r2, [r4, #0]
   32270:	f000 000f 	and.w	r0, r0, #15
   32274:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   32278:	6020      	str	r0, [r4, #0]
   3227a:	e7b6      	b.n	321ea <__hexnan+0x7c>
   3227c:	2508      	movs	r5, #8
   3227e:	e7b4      	b.n	321ea <__hexnan+0x7c>
   32280:	9b01      	ldr	r3, [sp, #4]
   32282:	2b00      	cmp	r3, #0
   32284:	d0de      	beq.n	32244 <__hexnan+0xd6>
   32286:	f1c3 0320 	rsb	r3, r3, #32
   3228a:	f04f 32ff 	mov.w	r2, #4294967295
   3228e:	40da      	lsrs	r2, r3
   32290:	f856 3c04 	ldr.w	r3, [r6, #-4]
   32294:	4013      	ands	r3, r2
   32296:	f846 3c04 	str.w	r3, [r6, #-4]
   3229a:	e7d3      	b.n	32244 <__hexnan+0xd6>
   3229c:	3f04      	subs	r7, #4
   3229e:	e7d1      	b.n	32244 <__hexnan+0xd6>
   322a0:	2004      	movs	r0, #4
   322a2:	e7d6      	b.n	32252 <__hexnan+0xe4>

000322a4 <_getenv_r>:
   322a4:	b507      	push	{r0, r1, r2, lr}
   322a6:	aa01      	add	r2, sp, #4
   322a8:	f7f6 fb56 	bl	28958 <_findenv_r>
   322ac:	b003      	add	sp, #12
   322ae:	f85d fb04 	ldr.w	pc, [sp], #4

000322b2 <__ascii_mbtowc>:
   322b2:	b082      	sub	sp, #8
   322b4:	b901      	cbnz	r1, 322b8 <__ascii_mbtowc+0x6>
   322b6:	a901      	add	r1, sp, #4
   322b8:	b142      	cbz	r2, 322cc <__ascii_mbtowc+0x1a>
   322ba:	b14b      	cbz	r3, 322d0 <__ascii_mbtowc+0x1e>
   322bc:	7813      	ldrb	r3, [r2, #0]
   322be:	600b      	str	r3, [r1, #0]
   322c0:	7812      	ldrb	r2, [r2, #0]
   322c2:	1e10      	subs	r0, r2, #0
   322c4:	bf18      	it	ne
   322c6:	2001      	movne	r0, #1
   322c8:	b002      	add	sp, #8
   322ca:	4770      	bx	lr
   322cc:	4610      	mov	r0, r2
   322ce:	e7fb      	b.n	322c8 <__ascii_mbtowc+0x16>
   322d0:	f06f 0001 	mvn.w	r0, #1
   322d4:	e7f8      	b.n	322c8 <__ascii_mbtowc+0x16>

000322d6 <memchr>:
   322d6:	b2c9      	uxtb	r1, r1
   322d8:	4603      	mov	r3, r0
   322da:	4402      	add	r2, r0
   322dc:	b510      	push	{r4, lr}
   322de:	4293      	cmp	r3, r2
   322e0:	4618      	mov	r0, r3
   322e2:	d101      	bne.n	322e8 <memchr+0x12>
   322e4:	2000      	movs	r0, #0
   322e6:	e003      	b.n	322f0 <memchr+0x1a>
   322e8:	7804      	ldrb	r4, [r0, #0]
   322ea:	3301      	adds	r3, #1
   322ec:	428c      	cmp	r4, r1
   322ee:	d1f6      	bne.n	322de <memchr+0x8>
   322f0:	bd10      	pop	{r4, pc}

000322f2 <__hi0bits>:
   322f2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   322f6:	4603      	mov	r3, r0
   322f8:	bf36      	itet	cc
   322fa:	0403      	lslcc	r3, r0, #16
   322fc:	2000      	movcs	r0, #0
   322fe:	2010      	movcc	r0, #16
   32300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   32304:	bf3c      	itt	cc
   32306:	021b      	lslcc	r3, r3, #8
   32308:	3008      	addcc	r0, #8
   3230a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3230e:	bf3c      	itt	cc
   32310:	011b      	lslcc	r3, r3, #4
   32312:	3004      	addcc	r0, #4
   32314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   32318:	d303      	bcc.n	32322 <__hi0bits+0x30>
   3231a:	2b00      	cmp	r3, #0
   3231c:	db0a      	blt.n	32334 <__hi0bits+0x42>
   3231e:	3001      	adds	r0, #1
   32320:	4770      	bx	lr
   32322:	009b      	lsls	r3, r3, #2
   32324:	d501      	bpl.n	3232a <__hi0bits+0x38>
   32326:	3002      	adds	r0, #2
   32328:	4770      	bx	lr
   3232a:	005b      	lsls	r3, r3, #1
   3232c:	d501      	bpl.n	32332 <__hi0bits+0x40>
   3232e:	3003      	adds	r0, #3
   32330:	4770      	bx	lr
   32332:	2020      	movs	r0, #32
   32334:	4770      	bx	lr

00032336 <__lo0bits>:
   32336:	6803      	ldr	r3, [r0, #0]
   32338:	4602      	mov	r2, r0
   3233a:	f013 0007 	ands.w	r0, r3, #7
   3233e:	d00b      	beq.n	32358 <__lo0bits+0x22>
   32340:	07d9      	lsls	r1, r3, #31
   32342:	d421      	bmi.n	32388 <__lo0bits+0x52>
   32344:	0798      	lsls	r0, r3, #30
   32346:	bf47      	ittee	mi
   32348:	085b      	lsrmi	r3, r3, #1
   3234a:	2001      	movmi	r0, #1
   3234c:	089b      	lsrpl	r3, r3, #2
   3234e:	2002      	movpl	r0, #2
   32350:	bf4c      	ite	mi
   32352:	6013      	strmi	r3, [r2, #0]
   32354:	6013      	strpl	r3, [r2, #0]
   32356:	4770      	bx	lr
   32358:	b299      	uxth	r1, r3
   3235a:	b909      	cbnz	r1, 32360 <__lo0bits+0x2a>
   3235c:	0c1b      	lsrs	r3, r3, #16
   3235e:	2010      	movs	r0, #16
   32360:	b2d9      	uxtb	r1, r3
   32362:	b909      	cbnz	r1, 32368 <__lo0bits+0x32>
   32364:	3008      	adds	r0, #8
   32366:	0a1b      	lsrs	r3, r3, #8
   32368:	0719      	lsls	r1, r3, #28
   3236a:	bf04      	itt	eq
   3236c:	091b      	lsreq	r3, r3, #4
   3236e:	3004      	addeq	r0, #4
   32370:	0799      	lsls	r1, r3, #30
   32372:	bf04      	itt	eq
   32374:	089b      	lsreq	r3, r3, #2
   32376:	3002      	addeq	r0, #2
   32378:	07d9      	lsls	r1, r3, #31
   3237a:	d403      	bmi.n	32384 <__lo0bits+0x4e>
   3237c:	085b      	lsrs	r3, r3, #1
   3237e:	f100 0001 	add.w	r0, r0, #1
   32382:	d003      	beq.n	3238c <__lo0bits+0x56>
   32384:	6013      	str	r3, [r2, #0]
   32386:	4770      	bx	lr
   32388:	2000      	movs	r0, #0
   3238a:	4770      	bx	lr
   3238c:	2020      	movs	r0, #32
   3238e:	4770      	bx	lr

00032390 <__mcmp>:
   32390:	4603      	mov	r3, r0
   32392:	690a      	ldr	r2, [r1, #16]
   32394:	6900      	ldr	r0, [r0, #16]
   32396:	1a80      	subs	r0, r0, r2
   32398:	b530      	push	{r4, r5, lr}
   3239a:	d10e      	bne.n	323ba <__mcmp+0x2a>
   3239c:	3314      	adds	r3, #20
   3239e:	3114      	adds	r1, #20
   323a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   323a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   323a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   323ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   323b0:	4295      	cmp	r5, r2
   323b2:	d003      	beq.n	323bc <__mcmp+0x2c>
   323b4:	d205      	bcs.n	323c2 <__mcmp+0x32>
   323b6:	f04f 30ff 	mov.w	r0, #4294967295
   323ba:	bd30      	pop	{r4, r5, pc}
   323bc:	42a3      	cmp	r3, r4
   323be:	d3f3      	bcc.n	323a8 <__mcmp+0x18>
   323c0:	e7fb      	b.n	323ba <__mcmp+0x2a>
   323c2:	2001      	movs	r0, #1
   323c4:	e7f9      	b.n	323ba <__mcmp+0x2a>

000323c6 <__ratio>:
   323c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323ca:	b085      	sub	sp, #20
   323cc:	e9cd 1000 	strd	r1, r0, [sp]
   323d0:	a902      	add	r1, sp, #8
   323d2:	f7f6 fe41 	bl	29058 <__b2d>
   323d6:	468b      	mov	fp, r1
   323d8:	4606      	mov	r6, r0
   323da:	460f      	mov	r7, r1
   323dc:	9800      	ldr	r0, [sp, #0]
   323de:	a903      	add	r1, sp, #12
   323e0:	f7f6 fe3a 	bl	29058 <__b2d>
   323e4:	9b01      	ldr	r3, [sp, #4]
   323e6:	4689      	mov	r9, r1
   323e8:	460d      	mov	r5, r1
   323ea:	6919      	ldr	r1, [r3, #16]
   323ec:	4604      	mov	r4, r0
   323ee:	9b00      	ldr	r3, [sp, #0]
   323f0:	4630      	mov	r0, r6
   323f2:	691b      	ldr	r3, [r3, #16]
   323f4:	1ac9      	subs	r1, r1, r3
   323f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   323fa:	1a9b      	subs	r3, r3, r2
   323fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   32400:	2b00      	cmp	r3, #0
   32402:	bfdb      	ittet	le
   32404:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   32408:	462a      	movle	r2, r5
   3240a:	463a      	movgt	r2, r7
   3240c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
   32410:	bfc8      	it	gt
   32412:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
   32416:	4622      	mov	r2, r4
   32418:	464b      	mov	r3, r9
   3241a:	4659      	mov	r1, fp
   3241c:	f7d6 f982 	bl	8724 <__aeabi_ddiv>
   32420:	b005      	add	sp, #20
   32422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032426 <__copybits>:
   32426:	3901      	subs	r1, #1
   32428:	f102 0314 	add.w	r3, r2, #20
   3242c:	1149      	asrs	r1, r1, #5
   3242e:	b570      	push	{r4, r5, r6, lr}
   32430:	3101      	adds	r1, #1
   32432:	6914      	ldr	r4, [r2, #16]
   32434:	1f05      	subs	r5, r0, #4
   32436:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   3243a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3243e:	42a3      	cmp	r3, r4
   32440:	d30c      	bcc.n	3245c <__copybits+0x36>
   32442:	1aa3      	subs	r3, r4, r2
   32444:	3211      	adds	r2, #17
   32446:	3b11      	subs	r3, #17
   32448:	f023 0303 	bic.w	r3, r3, #3
   3244c:	42a2      	cmp	r2, r4
   3244e:	bf88      	it	hi
   32450:	2300      	movhi	r3, #0
   32452:	4418      	add	r0, r3
   32454:	2300      	movs	r3, #0
   32456:	4288      	cmp	r0, r1
   32458:	d305      	bcc.n	32466 <__copybits+0x40>
   3245a:	bd70      	pop	{r4, r5, r6, pc}
   3245c:	f853 6b04 	ldr.w	r6, [r3], #4
   32460:	f845 6f04 	str.w	r6, [r5, #4]!
   32464:	e7eb      	b.n	3243e <__copybits+0x18>
   32466:	f840 3b04 	str.w	r3, [r0], #4
   3246a:	e7f4      	b.n	32456 <__copybits+0x30>

0003246c <__any_on>:
   3246c:	f100 0214 	add.w	r2, r0, #20
   32470:	114b      	asrs	r3, r1, #5
   32472:	6900      	ldr	r0, [r0, #16]
   32474:	4298      	cmp	r0, r3
   32476:	b510      	push	{r4, lr}
   32478:	db11      	blt.n	3249e <__any_on+0x32>
   3247a:	dd0a      	ble.n	32492 <__any_on+0x26>
   3247c:	f011 011f 	ands.w	r1, r1, #31
   32480:	d007      	beq.n	32492 <__any_on+0x26>
   32482:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   32486:	fa24 f001 	lsr.w	r0, r4, r1
   3248a:	fa00 f101 	lsl.w	r1, r0, r1
   3248e:	428c      	cmp	r4, r1
   32490:	d10b      	bne.n	324aa <__any_on+0x3e>
   32492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   32496:	4293      	cmp	r3, r2
   32498:	d803      	bhi.n	324a2 <__any_on+0x36>
   3249a:	2000      	movs	r0, #0
   3249c:	bd10      	pop	{r4, pc}
   3249e:	4603      	mov	r3, r0
   324a0:	e7f7      	b.n	32492 <__any_on+0x26>
   324a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   324a6:	2900      	cmp	r1, #0
   324a8:	d0f5      	beq.n	32496 <__any_on+0x2a>
   324aa:	2001      	movs	r0, #1
   324ac:	e7f6      	b.n	3249c <__any_on+0x30>

000324ae <__ssputs_r>:
   324ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   324b2:	461f      	mov	r7, r3
   324b4:	688e      	ldr	r6, [r1, #8]
   324b6:	4682      	mov	sl, r0
   324b8:	460c      	mov	r4, r1
   324ba:	42be      	cmp	r6, r7
   324bc:	4690      	mov	r8, r2
   324be:	680b      	ldr	r3, [r1, #0]
   324c0:	d82d      	bhi.n	3251e <__ssputs_r+0x70>
   324c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   324c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
   324ca:	d026      	beq.n	3251a <__ssputs_r+0x6c>
   324cc:	6965      	ldr	r5, [r4, #20]
   324ce:	6909      	ldr	r1, [r1, #16]
   324d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   324d4:	eba3 0901 	sub.w	r9, r3, r1
   324d8:	1c7b      	adds	r3, r7, #1
   324da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   324de:	444b      	add	r3, r9
   324e0:	106d      	asrs	r5, r5, #1
   324e2:	429d      	cmp	r5, r3
   324e4:	bf38      	it	cc
   324e6:	461d      	movcc	r5, r3
   324e8:	0553      	lsls	r3, r2, #21
   324ea:	d527      	bpl.n	3253c <__ssputs_r+0x8e>
   324ec:	4629      	mov	r1, r5
   324ee:	f7f4 ff73 	bl	273d8 <_malloc_r>
   324f2:	4606      	mov	r6, r0
   324f4:	b360      	cbz	r0, 32550 <__ssputs_r+0xa2>
   324f6:	464a      	mov	r2, r9
   324f8:	6921      	ldr	r1, [r4, #16]
   324fa:	f7ff fa92 	bl	31a22 <memcpy>
   324fe:	89a3      	ldrh	r3, [r4, #12]
   32500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   32504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   32508:	81a3      	strh	r3, [r4, #12]
   3250a:	6126      	str	r6, [r4, #16]
   3250c:	444e      	add	r6, r9
   3250e:	6165      	str	r5, [r4, #20]
   32510:	eba5 0509 	sub.w	r5, r5, r9
   32514:	6026      	str	r6, [r4, #0]
   32516:	463e      	mov	r6, r7
   32518:	60a5      	str	r5, [r4, #8]
   3251a:	42be      	cmp	r6, r7
   3251c:	d900      	bls.n	32520 <__ssputs_r+0x72>
   3251e:	463e      	mov	r6, r7
   32520:	4632      	mov	r2, r6
   32522:	4641      	mov	r1, r8
   32524:	6820      	ldr	r0, [r4, #0]
   32526:	f7ff fa9c 	bl	31a62 <memmove>
   3252a:	68a3      	ldr	r3, [r4, #8]
   3252c:	2000      	movs	r0, #0
   3252e:	1b9b      	subs	r3, r3, r6
   32530:	60a3      	str	r3, [r4, #8]
   32532:	6823      	ldr	r3, [r4, #0]
   32534:	4433      	add	r3, r6
   32536:	6023      	str	r3, [r4, #0]
   32538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3253c:	462a      	mov	r2, r5
   3253e:	f000 f935 	bl	327ac <_realloc_r>
   32542:	4606      	mov	r6, r0
   32544:	2800      	cmp	r0, #0
   32546:	d1e0      	bne.n	3250a <__ssputs_r+0x5c>
   32548:	6921      	ldr	r1, [r4, #16]
   3254a:	4650      	mov	r0, sl
   3254c:	f7f4 fefa 	bl	27344 <_free_r>
   32550:	230c      	movs	r3, #12
   32552:	f04f 30ff 	mov.w	r0, #4294967295
   32556:	f8ca 3000 	str.w	r3, [sl]
   3255a:	89a3      	ldrh	r3, [r4, #12]
   3255c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32560:	81a3      	strh	r3, [r4, #12]
   32562:	e7e9      	b.n	32538 <__ssputs_r+0x8a>

00032564 <__sfputc_r>:
   32564:	6893      	ldr	r3, [r2, #8]
   32566:	3b01      	subs	r3, #1
   32568:	2b00      	cmp	r3, #0
   3256a:	6093      	str	r3, [r2, #8]
   3256c:	b410      	push	{r4}
   3256e:	da07      	bge.n	32580 <__sfputc_r+0x1c>
   32570:	6994      	ldr	r4, [r2, #24]
   32572:	42a3      	cmp	r3, r4
   32574:	db01      	blt.n	3257a <__sfputc_r+0x16>
   32576:	290a      	cmp	r1, #10
   32578:	d102      	bne.n	32580 <__sfputc_r+0x1c>
   3257a:	bc10      	pop	{r4}
   3257c:	f7f7 b860 	b.w	29640 <__swbuf_r>
   32580:	6813      	ldr	r3, [r2, #0]
   32582:	1c58      	adds	r0, r3, #1
   32584:	6010      	str	r0, [r2, #0]
   32586:	4608      	mov	r0, r1
   32588:	7019      	strb	r1, [r3, #0]
   3258a:	bc10      	pop	{r4}
   3258c:	4770      	bx	lr

0003258e <__sfputs_r>:
   3258e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32590:	4606      	mov	r6, r0
   32592:	460f      	mov	r7, r1
   32594:	4614      	mov	r4, r2
   32596:	18d5      	adds	r5, r2, r3
   32598:	42ac      	cmp	r4, r5
   3259a:	d101      	bne.n	325a0 <__sfputs_r+0x12>
   3259c:	2000      	movs	r0, #0
   3259e:	e007      	b.n	325b0 <__sfputs_r+0x22>
   325a0:	463a      	mov	r2, r7
   325a2:	f814 1b01 	ldrb.w	r1, [r4], #1
   325a6:	4630      	mov	r0, r6
   325a8:	f7ff ffdc 	bl	32564 <__sfputc_r>
   325ac:	1c43      	adds	r3, r0, #1
   325ae:	d1f3      	bne.n	32598 <__sfputs_r+0xa>
   325b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000325b2 <__sread>:
   325b2:	b510      	push	{r4, lr}
   325b4:	460c      	mov	r4, r1
   325b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   325ba:	f7f7 fc8b 	bl	29ed4 <_read_r>
   325be:	2800      	cmp	r0, #0
   325c0:	bfab      	itete	ge
   325c2:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   325c4:	89a3      	ldrhlt	r3, [r4, #12]
   325c6:	181b      	addge	r3, r3, r0
   325c8:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   325cc:	bfac      	ite	ge
   325ce:	6563      	strge	r3, [r4, #84]	; 0x54
   325d0:	81a3      	strhlt	r3, [r4, #12]
   325d2:	bd10      	pop	{r4, pc}

000325d4 <__seofread>:
   325d4:	2000      	movs	r0, #0
   325d6:	4770      	bx	lr

000325d8 <__swrite>:
   325d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   325dc:	461f      	mov	r7, r3
   325de:	898b      	ldrh	r3, [r1, #12]
   325e0:	4605      	mov	r5, r0
   325e2:	460c      	mov	r4, r1
   325e4:	05db      	lsls	r3, r3, #23
   325e6:	4616      	mov	r6, r2
   325e8:	d505      	bpl.n	325f6 <__swrite+0x1e>
   325ea:	2302      	movs	r3, #2
   325ec:	2200      	movs	r2, #0
   325ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   325f2:	f7f7 f94d 	bl	29890 <_lseek_r>
   325f6:	89a3      	ldrh	r3, [r4, #12]
   325f8:	4632      	mov	r2, r6
   325fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   325fe:	4628      	mov	r0, r5
   32600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   32604:	81a3      	strh	r3, [r4, #12]
   32606:	463b      	mov	r3, r7
   32608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3260c:	f7f7 b86a 	b.w	296e4 <_write_r>

00032610 <__sseek>:
   32610:	b510      	push	{r4, lr}
   32612:	460c      	mov	r4, r1
   32614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32618:	f7f7 f93a 	bl	29890 <_lseek_r>
   3261c:	1c43      	adds	r3, r0, #1
   3261e:	89a3      	ldrh	r3, [r4, #12]
   32620:	bf15      	itete	ne
   32622:	6560      	strne	r0, [r4, #84]	; 0x54
   32624:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   32628:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   3262c:	81a3      	strheq	r3, [r4, #12]
   3262e:	bf18      	it	ne
   32630:	81a3      	strhne	r3, [r4, #12]
   32632:	bd10      	pop	{r4, pc}

00032634 <__sclose>:
   32634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   32638:	f7f7 b8d2 	b.w	297e0 <_close_r>

0003263c <__ascii_wctomb>:
   3263c:	4603      	mov	r3, r0
   3263e:	4608      	mov	r0, r1
   32640:	b141      	cbz	r1, 32654 <__ascii_wctomb+0x18>
   32642:	2aff      	cmp	r2, #255	; 0xff
   32644:	d904      	bls.n	32650 <__ascii_wctomb+0x14>
   32646:	228a      	movs	r2, #138	; 0x8a
   32648:	f04f 30ff 	mov.w	r0, #4294967295
   3264c:	601a      	str	r2, [r3, #0]
   3264e:	4770      	bx	lr
   32650:	2001      	movs	r0, #1
   32652:	700a      	strb	r2, [r1, #0]
   32654:	4770      	bx	lr

00032656 <abort>:
   32656:	2006      	movs	r0, #6
   32658:	b508      	push	{r3, lr}
   3265a:	f7f7 fc4d 	bl	29ef8 <raise>
   3265e:	2001      	movs	r0, #1
   32660:	f7df fd16 	bl	12090 <_exit>

00032664 <__sflush_r>:
   32664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   32668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3266a:	0717      	lsls	r7, r2, #28
   3266c:	4605      	mov	r5, r0
   3266e:	460c      	mov	r4, r1
   32670:	d456      	bmi.n	32720 <__sflush_r+0xbc>
   32672:	684b      	ldr	r3, [r1, #4]
   32674:	2b00      	cmp	r3, #0
   32676:	dc02      	bgt.n	3267e <__sflush_r+0x1a>
   32678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3267a:	2b00      	cmp	r3, #0
   3267c:	dd3d      	ble.n	326fa <__sflush_r+0x96>
   3267e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   32680:	2e00      	cmp	r6, #0
   32682:	d03a      	beq.n	326fa <__sflush_r+0x96>
   32684:	2300      	movs	r3, #0
   32686:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3268a:	682f      	ldr	r7, [r5, #0]
   3268c:	6a21      	ldr	r1, [r4, #32]
   3268e:	602b      	str	r3, [r5, #0]
   32690:	d025      	beq.n	326de <__sflush_r+0x7a>
   32692:	6d62      	ldr	r2, [r4, #84]	; 0x54
   32694:	89a3      	ldrh	r3, [r4, #12]
   32696:	0758      	lsls	r0, r3, #29
   32698:	d505      	bpl.n	326a6 <__sflush_r+0x42>
   3269a:	6863      	ldr	r3, [r4, #4]
   3269c:	1ad2      	subs	r2, r2, r3
   3269e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   326a0:	b10b      	cbz	r3, 326a6 <__sflush_r+0x42>
   326a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   326a4:	1ad2      	subs	r2, r2, r3
   326a6:	6a21      	ldr	r1, [r4, #32]
   326a8:	2300      	movs	r3, #0
   326aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   326ac:	4628      	mov	r0, r5
   326ae:	47b0      	blx	r6
   326b0:	1c41      	adds	r1, r0, #1
   326b2:	d024      	beq.n	326fe <__sflush_r+0x9a>
   326b4:	2300      	movs	r3, #0
   326b6:	6063      	str	r3, [r4, #4]
   326b8:	6923      	ldr	r3, [r4, #16]
   326ba:	6023      	str	r3, [r4, #0]
   326bc:	89a3      	ldrh	r3, [r4, #12]
   326be:	04da      	lsls	r2, r3, #19
   326c0:	d500      	bpl.n	326c4 <__sflush_r+0x60>
   326c2:	6560      	str	r0, [r4, #84]	; 0x54
   326c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   326c6:	602f      	str	r7, [r5, #0]
   326c8:	b1b9      	cbz	r1, 326fa <__sflush_r+0x96>
   326ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
   326ce:	4299      	cmp	r1, r3
   326d0:	d002      	beq.n	326d8 <__sflush_r+0x74>
   326d2:	4628      	mov	r0, r5
   326d4:	f7f4 fe36 	bl	27344 <_free_r>
   326d8:	2300      	movs	r3, #0
   326da:	6363      	str	r3, [r4, #52]	; 0x34
   326dc:	e00d      	b.n	326fa <__sflush_r+0x96>
   326de:	2301      	movs	r3, #1
   326e0:	4628      	mov	r0, r5
   326e2:	47b0      	blx	r6
   326e4:	1c46      	adds	r6, r0, #1
   326e6:	4602      	mov	r2, r0
   326e8:	d1d4      	bne.n	32694 <__sflush_r+0x30>
   326ea:	682b      	ldr	r3, [r5, #0]
   326ec:	2b00      	cmp	r3, #0
   326ee:	d0d1      	beq.n	32694 <__sflush_r+0x30>
   326f0:	2b1d      	cmp	r3, #29
   326f2:	d001      	beq.n	326f8 <__sflush_r+0x94>
   326f4:	2b16      	cmp	r3, #22
   326f6:	d129      	bne.n	3274c <__sflush_r+0xe8>
   326f8:	602f      	str	r7, [r5, #0]
   326fa:	2000      	movs	r0, #0
   326fc:	e02d      	b.n	3275a <__sflush_r+0xf6>
   326fe:	682a      	ldr	r2, [r5, #0]
   32700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   32704:	b142      	cbz	r2, 32718 <__sflush_r+0xb4>
   32706:	2a1d      	cmp	r2, #29
   32708:	d001      	beq.n	3270e <__sflush_r+0xaa>
   3270a:	2a16      	cmp	r2, #22
   3270c:	d120      	bne.n	32750 <__sflush_r+0xec>
   3270e:	2300      	movs	r3, #0
   32710:	6063      	str	r3, [r4, #4]
   32712:	6923      	ldr	r3, [r4, #16]
   32714:	6023      	str	r3, [r4, #0]
   32716:	e7d5      	b.n	326c4 <__sflush_r+0x60>
   32718:	6062      	str	r2, [r4, #4]
   3271a:	6922      	ldr	r2, [r4, #16]
   3271c:	6022      	str	r2, [r4, #0]
   3271e:	e7ce      	b.n	326be <__sflush_r+0x5a>
   32720:	690f      	ldr	r7, [r1, #16]
   32722:	2f00      	cmp	r7, #0
   32724:	d0e9      	beq.n	326fa <__sflush_r+0x96>
   32726:	0793      	lsls	r3, r2, #30
   32728:	680e      	ldr	r6, [r1, #0]
   3272a:	600f      	str	r7, [r1, #0]
   3272c:	bf0c      	ite	eq
   3272e:	694b      	ldreq	r3, [r1, #20]
   32730:	2300      	movne	r3, #0
   32732:	1bf6      	subs	r6, r6, r7
   32734:	608b      	str	r3, [r1, #8]
   32736:	2e00      	cmp	r6, #0
   32738:	dddf      	ble.n	326fa <__sflush_r+0x96>
   3273a:	4633      	mov	r3, r6
   3273c:	463a      	mov	r2, r7
   3273e:	6a21      	ldr	r1, [r4, #32]
   32740:	4628      	mov	r0, r5
   32742:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   32746:	47e0      	blx	ip
   32748:	2800      	cmp	r0, #0
   3274a:	dc07      	bgt.n	3275c <__sflush_r+0xf8>
   3274c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   32750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   32754:	f04f 30ff 	mov.w	r0, #4294967295
   32758:	81a3      	strh	r3, [r4, #12]
   3275a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3275c:	4407      	add	r7, r0
   3275e:	1a36      	subs	r6, r6, r0
   32760:	e7e9      	b.n	32736 <__sflush_r+0xd2>

00032762 <__swhatbuf_r>:
   32762:	b570      	push	{r4, r5, r6, lr}
   32764:	460c      	mov	r4, r1
   32766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   3276a:	b096      	sub	sp, #88	; 0x58
   3276c:	4615      	mov	r5, r2
   3276e:	2900      	cmp	r1, #0
   32770:	461e      	mov	r6, r3
   32772:	da0c      	bge.n	3278e <__swhatbuf_r+0x2c>
   32774:	89a3      	ldrh	r3, [r4, #12]
   32776:	2100      	movs	r1, #0
   32778:	f013 0f80 	tst.w	r3, #128	; 0x80
   3277c:	bf14      	ite	ne
   3277e:	2340      	movne	r3, #64	; 0x40
   32780:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   32784:	2000      	movs	r0, #0
   32786:	6031      	str	r1, [r6, #0]
   32788:	602b      	str	r3, [r5, #0]
   3278a:	b016      	add	sp, #88	; 0x58
   3278c:	bd70      	pop	{r4, r5, r6, pc}
   3278e:	466a      	mov	r2, sp
   32790:	f7f7 fbcc 	bl	29f2c <_fstat_r>
   32794:	2800      	cmp	r0, #0
   32796:	dbed      	blt.n	32774 <__swhatbuf_r+0x12>
   32798:	9901      	ldr	r1, [sp, #4]
   3279a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   3279e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   327a2:	4259      	negs	r1, r3
   327a4:	4159      	adcs	r1, r3
   327a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   327aa:	e7eb      	b.n	32784 <__swhatbuf_r+0x22>

000327ac <_realloc_r>:
   327ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   327ae:	4607      	mov	r7, r0
   327b0:	4615      	mov	r5, r2
   327b2:	460c      	mov	r4, r1
   327b4:	b921      	cbnz	r1, 327c0 <_realloc_r+0x14>
   327b6:	4611      	mov	r1, r2
   327b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   327bc:	f7f4 be0c 	b.w	273d8 <_malloc_r>
   327c0:	b922      	cbnz	r2, 327cc <_realloc_r+0x20>
   327c2:	f7f4 fdbf 	bl	27344 <_free_r>
   327c6:	2400      	movs	r4, #0
   327c8:	4620      	mov	r0, r4
   327ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   327cc:	f000 f905 	bl	329da <_malloc_usable_size_r>
   327d0:	42a8      	cmp	r0, r5
   327d2:	d2f9      	bcs.n	327c8 <_realloc_r+0x1c>
   327d4:	4629      	mov	r1, r5
   327d6:	4638      	mov	r0, r7
   327d8:	f7f4 fdfe 	bl	273d8 <_malloc_r>
   327dc:	4606      	mov	r6, r0
   327de:	2800      	cmp	r0, #0
   327e0:	d0f1      	beq.n	327c6 <_realloc_r+0x1a>
   327e2:	4621      	mov	r1, r4
   327e4:	462a      	mov	r2, r5
   327e6:	f7ff f91c 	bl	31a22 <memcpy>
   327ea:	4621      	mov	r1, r4
   327ec:	4638      	mov	r0, r7
   327ee:	4634      	mov	r4, r6
   327f0:	f7f4 fda8 	bl	27344 <_free_r>
   327f4:	e7e8      	b.n	327c8 <_realloc_r+0x1c>

000327f6 <_sungetc_r>:
   327f6:	b538      	push	{r3, r4, r5, lr}
   327f8:	1c4b      	adds	r3, r1, #1
   327fa:	4614      	mov	r4, r2
   327fc:	d103      	bne.n	32806 <_sungetc_r+0x10>
   327fe:	f04f 35ff 	mov.w	r5, #4294967295
   32802:	4628      	mov	r0, r5
   32804:	bd38      	pop	{r3, r4, r5, pc}
   32806:	8993      	ldrh	r3, [r2, #12]
   32808:	b2cd      	uxtb	r5, r1
   3280a:	f023 0320 	bic.w	r3, r3, #32
   3280e:	8193      	strh	r3, [r2, #12]
   32810:	6853      	ldr	r3, [r2, #4]
   32812:	6b52      	ldr	r2, [r2, #52]	; 0x34
   32814:	b18a      	cbz	r2, 3283a <_sungetc_r+0x44>
   32816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   32818:	429a      	cmp	r2, r3
   3281a:	dd08      	ble.n	3282e <_sungetc_r+0x38>
   3281c:	6823      	ldr	r3, [r4, #0]
   3281e:	1e5a      	subs	r2, r3, #1
   32820:	6022      	str	r2, [r4, #0]
   32822:	f803 5c01 	strb.w	r5, [r3, #-1]
   32826:	6863      	ldr	r3, [r4, #4]
   32828:	3301      	adds	r3, #1
   3282a:	6063      	str	r3, [r4, #4]
   3282c:	e7e9      	b.n	32802 <_sungetc_r+0xc>
   3282e:	4621      	mov	r1, r4
   32830:	f000 f89c 	bl	3296c <__submore>
   32834:	2800      	cmp	r0, #0
   32836:	d0f1      	beq.n	3281c <_sungetc_r+0x26>
   32838:	e7e1      	b.n	327fe <_sungetc_r+0x8>
   3283a:	6921      	ldr	r1, [r4, #16]
   3283c:	6822      	ldr	r2, [r4, #0]
   3283e:	b141      	cbz	r1, 32852 <_sungetc_r+0x5c>
   32840:	4291      	cmp	r1, r2
   32842:	d206      	bcs.n	32852 <_sungetc_r+0x5c>
   32844:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   32848:	42a9      	cmp	r1, r5
   3284a:	d102      	bne.n	32852 <_sungetc_r+0x5c>
   3284c:	3a01      	subs	r2, #1
   3284e:	6022      	str	r2, [r4, #0]
   32850:	e7ea      	b.n	32828 <_sungetc_r+0x32>
   32852:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
   32856:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3285a:	6363      	str	r3, [r4, #52]	; 0x34
   3285c:	2303      	movs	r3, #3
   3285e:	63a3      	str	r3, [r4, #56]	; 0x38
   32860:	4623      	mov	r3, r4
   32862:	f803 5f46 	strb.w	r5, [r3, #70]!
   32866:	6023      	str	r3, [r4, #0]
   32868:	2301      	movs	r3, #1
   3286a:	e7de      	b.n	3282a <_sungetc_r+0x34>

0003286c <__ssrefill_r>:
   3286c:	b510      	push	{r4, lr}
   3286e:	460c      	mov	r4, r1
   32870:	6b49      	ldr	r1, [r1, #52]	; 0x34
   32872:	b169      	cbz	r1, 32890 <__ssrefill_r+0x24>
   32874:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32878:	4299      	cmp	r1, r3
   3287a:	d001      	beq.n	32880 <__ssrefill_r+0x14>
   3287c:	f7f4 fd62 	bl	27344 <_free_r>
   32880:	2000      	movs	r0, #0
   32882:	6c23      	ldr	r3, [r4, #64]	; 0x40
   32884:	6360      	str	r0, [r4, #52]	; 0x34
   32886:	6063      	str	r3, [r4, #4]
   32888:	b113      	cbz	r3, 32890 <__ssrefill_r+0x24>
   3288a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3288c:	6023      	str	r3, [r4, #0]
   3288e:	bd10      	pop	{r4, pc}
   32890:	6923      	ldr	r3, [r4, #16]
   32892:	f04f 30ff 	mov.w	r0, #4294967295
   32896:	6023      	str	r3, [r4, #0]
   32898:	2300      	movs	r3, #0
   3289a:	6063      	str	r3, [r4, #4]
   3289c:	89a3      	ldrh	r3, [r4, #12]
   3289e:	f043 0320 	orr.w	r3, r3, #32
   328a2:	81a3      	strh	r3, [r4, #12]
   328a4:	e7f3      	b.n	3288e <__ssrefill_r+0x22>

000328a6 <__sccl>:
   328a6:	b570      	push	{r4, r5, r6, lr}
   328a8:	780b      	ldrb	r3, [r1, #0]
   328aa:	4604      	mov	r4, r0
   328ac:	3801      	subs	r0, #1
   328ae:	2b5e      	cmp	r3, #94	; 0x5e
   328b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   328b4:	bf13      	iteet	ne
   328b6:	1c4a      	addne	r2, r1, #1
   328b8:	1c8a      	addeq	r2, r1, #2
   328ba:	784b      	ldrbeq	r3, [r1, #1]
   328bc:	2100      	movne	r1, #0
   328be:	bf08      	it	eq
   328c0:	2101      	moveq	r1, #1
   328c2:	f800 1f01 	strb.w	r1, [r0, #1]!
   328c6:	42a8      	cmp	r0, r5
   328c8:	d1fb      	bne.n	328c2 <__sccl+0x1c>
   328ca:	b90b      	cbnz	r3, 328d0 <__sccl+0x2a>
   328cc:	1e50      	subs	r0, r2, #1
   328ce:	bd70      	pop	{r4, r5, r6, pc}
   328d0:	f081 0101 	eor.w	r1, r1, #1
   328d4:	4610      	mov	r0, r2
   328d6:	54e1      	strb	r1, [r4, r3]
   328d8:	4602      	mov	r2, r0
   328da:	f812 5b01 	ldrb.w	r5, [r2], #1
   328de:	2d2d      	cmp	r5, #45	; 0x2d
   328e0:	d005      	beq.n	328ee <__sccl+0x48>
   328e2:	2d5d      	cmp	r5, #93	; 0x5d
   328e4:	d016      	beq.n	32914 <__sccl+0x6e>
   328e6:	2d00      	cmp	r5, #0
   328e8:	d0f1      	beq.n	328ce <__sccl+0x28>
   328ea:	462b      	mov	r3, r5
   328ec:	e7f2      	b.n	328d4 <__sccl+0x2e>
   328ee:	7846      	ldrb	r6, [r0, #1]
   328f0:	2e5d      	cmp	r6, #93	; 0x5d
   328f2:	d0fa      	beq.n	328ea <__sccl+0x44>
   328f4:	42b3      	cmp	r3, r6
   328f6:	dcf8      	bgt.n	328ea <__sccl+0x44>
   328f8:	3002      	adds	r0, #2
   328fa:	461a      	mov	r2, r3
   328fc:	3201      	adds	r2, #1
   328fe:	4296      	cmp	r6, r2
   32900:	54a1      	strb	r1, [r4, r2]
   32902:	dcfb      	bgt.n	328fc <__sccl+0x56>
   32904:	1af2      	subs	r2, r6, r3
   32906:	1c5d      	adds	r5, r3, #1
   32908:	3a01      	subs	r2, #1
   3290a:	42b3      	cmp	r3, r6
   3290c:	bfa8      	it	ge
   3290e:	2200      	movge	r2, #0
   32910:	18ab      	adds	r3, r5, r2
   32912:	e7e1      	b.n	328d8 <__sccl+0x32>
   32914:	4610      	mov	r0, r2
   32916:	e7da      	b.n	328ce <__sccl+0x28>

00032918 <_raise_r>:
   32918:	291f      	cmp	r1, #31
   3291a:	b538      	push	{r3, r4, r5, lr}
   3291c:	4605      	mov	r5, r0
   3291e:	460c      	mov	r4, r1
   32920:	d904      	bls.n	3292c <_raise_r+0x14>
   32922:	2316      	movs	r3, #22
   32924:	6003      	str	r3, [r0, #0]
   32926:	f04f 30ff 	mov.w	r0, #4294967295
   3292a:	bd38      	pop	{r3, r4, r5, pc}
   3292c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3292e:	b112      	cbz	r2, 32936 <_raise_r+0x1e>
   32930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   32934:	b94b      	cbnz	r3, 3294a <_raise_r+0x32>
   32936:	4628      	mov	r0, r5
   32938:	f000 f816 	bl	32968 <_getpid_r>
   3293c:	4622      	mov	r2, r4
   3293e:	4601      	mov	r1, r0
   32940:	4628      	mov	r0, r5
   32942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   32946:	f7f7 badf 	b.w	29f08 <_kill_r>
   3294a:	2b01      	cmp	r3, #1
   3294c:	d00a      	beq.n	32964 <_raise_r+0x4c>
   3294e:	1c59      	adds	r1, r3, #1
   32950:	d103      	bne.n	3295a <_raise_r+0x42>
   32952:	2316      	movs	r3, #22
   32954:	6003      	str	r3, [r0, #0]
   32956:	2001      	movs	r0, #1
   32958:	e7e7      	b.n	3292a <_raise_r+0x12>
   3295a:	2100      	movs	r1, #0
   3295c:	4620      	mov	r0, r4
   3295e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   32962:	4798      	blx	r3
   32964:	2000      	movs	r0, #0
   32966:	e7e0      	b.n	3292a <_raise_r+0x12>

00032968 <_getpid_r>:
   32968:	f7f9 b918 	b.w	2bb9c <_getpid>

0003296c <__submore>:
   3296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32970:	460c      	mov	r4, r1
   32972:	6b49      	ldr	r1, [r1, #52]	; 0x34
   32974:	f104 0344 	add.w	r3, r4, #68	; 0x44
   32978:	4299      	cmp	r1, r3
   3297a:	d11a      	bne.n	329b2 <__submore+0x46>
   3297c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   32980:	f7f4 fd2a 	bl	273d8 <_malloc_r>
   32984:	b918      	cbnz	r0, 3298e <__submore+0x22>
   32986:	f04f 30ff 	mov.w	r0, #4294967295
   3298a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3298e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   32992:	6360      	str	r0, [r4, #52]	; 0x34
   32994:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   32998:	63a3      	str	r3, [r4, #56]	; 0x38
   3299a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   3299e:	7083      	strb	r3, [r0, #2]
   329a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   329a4:	7043      	strb	r3, [r0, #1]
   329a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   329aa:	7003      	strb	r3, [r0, #0]
   329ac:	6020      	str	r0, [r4, #0]
   329ae:	2000      	movs	r0, #0
   329b0:	e7eb      	b.n	3298a <__submore+0x1e>
   329b2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   329b4:	0077      	lsls	r7, r6, #1
   329b6:	463a      	mov	r2, r7
   329b8:	f7ff fef8 	bl	327ac <_realloc_r>
   329bc:	4605      	mov	r5, r0
   329be:	2800      	cmp	r0, #0
   329c0:	d0e1      	beq.n	32986 <__submore+0x1a>
   329c2:	eb00 0806 	add.w	r8, r0, r6
   329c6:	4601      	mov	r1, r0
   329c8:	4632      	mov	r2, r6
   329ca:	4640      	mov	r0, r8
   329cc:	f7ff f829 	bl	31a22 <memcpy>
   329d0:	f8c4 8000 	str.w	r8, [r4]
   329d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   329d8:	e7e9      	b.n	329ae <__submore+0x42>

000329da <_malloc_usable_size_r>:
   329da:	f851 3c04 	ldr.w	r3, [r1, #-4]
   329de:	1f18      	subs	r0, r3, #4
   329e0:	2b00      	cmp	r3, #0
   329e2:	bfbc      	itt	lt
   329e4:	580b      	ldrlt	r3, [r1, r0]
   329e6:	18c0      	addlt	r0, r0, r3
   329e8:	4770      	bx	lr
	...
