
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	f0 43 03 20 59 13 01 00 63 bd 02 00 2d 13 01 00     .C. Y...c...-...
    8010:	2d 13 01 00 2d 13 01 00 2d 13 01 00 2d 13 01 00     -...-...-...-...
	...
    802c:	d5 0b 01 00 2d 13 01 00 00 00 00 00 75 0b 01 00     ....-.......u...
    803c:	2d 13 01 00                                         -...

00008040 <_irq_vector_table>:
    8040:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8050:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8060:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8070:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8080:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8090:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    80a0:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    80b0:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    80c0:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    80d0:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    80e0:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    80f0:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8100:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8110:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8120:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8130:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8140:	5d 0c 01 00 5d 0c 01 00 5d 0c 01 00 5d 0c 01 00     ]...]...]...]...
    8150:	5d 0c 01 00                                         ]...

Disassembly of section text:

00008158 <__aeabi_drsub>:
    8158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    815c:	e002      	b.n	8164 <__adddf3>
    815e:	bf00      	nop

00008160 <__aeabi_dsub>:
    8160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00008164 <__adddf3>:
    8164:	b530      	push	{r4, r5, lr}
    8166:	ea4f 0441 	mov.w	r4, r1, lsl #1
    816a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    816e:	ea94 0f05 	teq	r4, r5
    8172:	bf08      	it	eq
    8174:	ea90 0f02 	teqeq	r0, r2
    8178:	bf1f      	itttt	ne
    817a:	ea54 0c00 	orrsne.w	ip, r4, r0
    817e:	ea55 0c02 	orrsne.w	ip, r5, r2
    8182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    818a:	f000 80e2 	beq.w	8352 <__adddf3+0x1ee>
    818e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8196:	bfb8      	it	lt
    8198:	426d      	neglt	r5, r5
    819a:	dd0c      	ble.n	81b6 <__adddf3+0x52>
    819c:	442c      	add	r4, r5
    819e:	ea80 0202 	eor.w	r2, r0, r2
    81a2:	ea81 0303 	eor.w	r3, r1, r3
    81a6:	ea82 0000 	eor.w	r0, r2, r0
    81aa:	ea83 0101 	eor.w	r1, r3, r1
    81ae:	ea80 0202 	eor.w	r2, r0, r2
    81b2:	ea81 0303 	eor.w	r3, r1, r3
    81b6:	2d36      	cmp	r5, #54	; 0x36
    81b8:	bf88      	it	hi
    81ba:	bd30      	pophi	{r4, r5, pc}
    81bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    81c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    81c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    81c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    81cc:	d002      	beq.n	81d4 <__adddf3+0x70>
    81ce:	4240      	negs	r0, r0
    81d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    81d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    81d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    81dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    81e0:	d002      	beq.n	81e8 <__adddf3+0x84>
    81e2:	4252      	negs	r2, r2
    81e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    81e8:	ea94 0f05 	teq	r4, r5
    81ec:	f000 80a7 	beq.w	833e <__adddf3+0x1da>
    81f0:	f1a4 0401 	sub.w	r4, r4, #1
    81f4:	f1d5 0e20 	rsbs	lr, r5, #32
    81f8:	db0d      	blt.n	8216 <__adddf3+0xb2>
    81fa:	fa02 fc0e 	lsl.w	ip, r2, lr
    81fe:	fa22 f205 	lsr.w	r2, r2, r5
    8202:	1880      	adds	r0, r0, r2
    8204:	f141 0100 	adc.w	r1, r1, #0
    8208:	fa03 f20e 	lsl.w	r2, r3, lr
    820c:	1880      	adds	r0, r0, r2
    820e:	fa43 f305 	asr.w	r3, r3, r5
    8212:	4159      	adcs	r1, r3
    8214:	e00e      	b.n	8234 <__adddf3+0xd0>
    8216:	f1a5 0520 	sub.w	r5, r5, #32
    821a:	f10e 0e20 	add.w	lr, lr, #32
    821e:	2a01      	cmp	r2, #1
    8220:	fa03 fc0e 	lsl.w	ip, r3, lr
    8224:	bf28      	it	cs
    8226:	f04c 0c02 	orrcs.w	ip, ip, #2
    822a:	fa43 f305 	asr.w	r3, r3, r5
    822e:	18c0      	adds	r0, r0, r3
    8230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    8234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8238:	d507      	bpl.n	824a <__adddf3+0xe6>
    823a:	f04f 0e00 	mov.w	lr, #0
    823e:	f1dc 0c00 	rsbs	ip, ip, #0
    8242:	eb7e 0000 	sbcs.w	r0, lr, r0
    8246:	eb6e 0101 	sbc.w	r1, lr, r1
    824a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    824e:	d31b      	bcc.n	8288 <__adddf3+0x124>
    8250:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    8254:	d30c      	bcc.n	8270 <__adddf3+0x10c>
    8256:	0849      	lsrs	r1, r1, #1
    8258:	ea5f 0030 	movs.w	r0, r0, rrx
    825c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8260:	f104 0401 	add.w	r4, r4, #1
    8264:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8268:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    826c:	f080 809a 	bcs.w	83a4 <__adddf3+0x240>
    8270:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8274:	bf08      	it	eq
    8276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    827a:	f150 0000 	adcs.w	r0, r0, #0
    827e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8282:	ea41 0105 	orr.w	r1, r1, r5
    8286:	bd30      	pop	{r4, r5, pc}
    8288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    828c:	4140      	adcs	r0, r0
    828e:	eb41 0101 	adc.w	r1, r1, r1
    8292:	3c01      	subs	r4, #1
    8294:	bf28      	it	cs
    8296:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    829a:	d2e9      	bcs.n	8270 <__adddf3+0x10c>
    829c:	f091 0f00 	teq	r1, #0
    82a0:	bf04      	itt	eq
    82a2:	4601      	moveq	r1, r0
    82a4:	2000      	moveq	r0, #0
    82a6:	fab1 f381 	clz	r3, r1
    82aa:	bf08      	it	eq
    82ac:	3320      	addeq	r3, #32
    82ae:	f1a3 030b 	sub.w	r3, r3, #11
    82b2:	f1b3 0220 	subs.w	r2, r3, #32
    82b6:	da0c      	bge.n	82d2 <__adddf3+0x16e>
    82b8:	320c      	adds	r2, #12
    82ba:	dd08      	ble.n	82ce <__adddf3+0x16a>
    82bc:	f102 0c14 	add.w	ip, r2, #20
    82c0:	f1c2 020c 	rsb	r2, r2, #12
    82c4:	fa01 f00c 	lsl.w	r0, r1, ip
    82c8:	fa21 f102 	lsr.w	r1, r1, r2
    82cc:	e00c      	b.n	82e8 <__adddf3+0x184>
    82ce:	f102 0214 	add.w	r2, r2, #20
    82d2:	bfd8      	it	le
    82d4:	f1c2 0c20 	rsble	ip, r2, #32
    82d8:	fa01 f102 	lsl.w	r1, r1, r2
    82dc:	fa20 fc0c 	lsr.w	ip, r0, ip
    82e0:	bfdc      	itt	le
    82e2:	ea41 010c 	orrle.w	r1, r1, ip
    82e6:	4090      	lslle	r0, r2
    82e8:	1ae4      	subs	r4, r4, r3
    82ea:	bfa2      	ittt	ge
    82ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    82f0:	4329      	orrge	r1, r5
    82f2:	bd30      	popge	{r4, r5, pc}
    82f4:	ea6f 0404 	mvn.w	r4, r4
    82f8:	3c1f      	subs	r4, #31
    82fa:	da1c      	bge.n	8336 <__adddf3+0x1d2>
    82fc:	340c      	adds	r4, #12
    82fe:	dc0e      	bgt.n	831e <__adddf3+0x1ba>
    8300:	f104 0414 	add.w	r4, r4, #20
    8304:	f1c4 0220 	rsb	r2, r4, #32
    8308:	fa20 f004 	lsr.w	r0, r0, r4
    830c:	fa01 f302 	lsl.w	r3, r1, r2
    8310:	ea40 0003 	orr.w	r0, r0, r3
    8314:	fa21 f304 	lsr.w	r3, r1, r4
    8318:	ea45 0103 	orr.w	r1, r5, r3
    831c:	bd30      	pop	{r4, r5, pc}
    831e:	f1c4 040c 	rsb	r4, r4, #12
    8322:	f1c4 0220 	rsb	r2, r4, #32
    8326:	fa20 f002 	lsr.w	r0, r0, r2
    832a:	fa01 f304 	lsl.w	r3, r1, r4
    832e:	ea40 0003 	orr.w	r0, r0, r3
    8332:	4629      	mov	r1, r5
    8334:	bd30      	pop	{r4, r5, pc}
    8336:	fa21 f004 	lsr.w	r0, r1, r4
    833a:	4629      	mov	r1, r5
    833c:	bd30      	pop	{r4, r5, pc}
    833e:	f094 0f00 	teq	r4, #0
    8342:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    8346:	bf06      	itte	eq
    8348:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    834c:	3401      	addeq	r4, #1
    834e:	3d01      	subne	r5, #1
    8350:	e74e      	b.n	81f0 <__adddf3+0x8c>
    8352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8356:	bf18      	it	ne
    8358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    835c:	d029      	beq.n	83b2 <__adddf3+0x24e>
    835e:	ea94 0f05 	teq	r4, r5
    8362:	bf08      	it	eq
    8364:	ea90 0f02 	teqeq	r0, r2
    8368:	d005      	beq.n	8376 <__adddf3+0x212>
    836a:	ea54 0c00 	orrs.w	ip, r4, r0
    836e:	bf04      	itt	eq
    8370:	4619      	moveq	r1, r3
    8372:	4610      	moveq	r0, r2
    8374:	bd30      	pop	{r4, r5, pc}
    8376:	ea91 0f03 	teq	r1, r3
    837a:	bf1e      	ittt	ne
    837c:	2100      	movne	r1, #0
    837e:	2000      	movne	r0, #0
    8380:	bd30      	popne	{r4, r5, pc}
    8382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8386:	d105      	bne.n	8394 <__adddf3+0x230>
    8388:	0040      	lsls	r0, r0, #1
    838a:	4149      	adcs	r1, r1
    838c:	bf28      	it	cs
    838e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8392:	bd30      	pop	{r4, r5, pc}
    8394:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8398:	bf3c      	itt	cc
    839a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    839e:	bd30      	popcc	{r4, r5, pc}
    83a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    83a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    83a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    83ac:	f04f 0000 	mov.w	r0, #0
    83b0:	bd30      	pop	{r4, r5, pc}
    83b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    83b6:	bf1a      	itte	ne
    83b8:	4619      	movne	r1, r3
    83ba:	4610      	movne	r0, r2
    83bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    83c0:	bf1c      	itt	ne
    83c2:	460b      	movne	r3, r1
    83c4:	4602      	movne	r2, r0
    83c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    83ca:	bf06      	itte	eq
    83cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    83d0:	ea91 0f03 	teqeq	r1, r3
    83d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    83d8:	bd30      	pop	{r4, r5, pc}
    83da:	bf00      	nop

000083dc <__aeabi_ui2d>:
    83dc:	f090 0f00 	teq	r0, #0
    83e0:	bf04      	itt	eq
    83e2:	2100      	moveq	r1, #0
    83e4:	4770      	bxeq	lr
    83e6:	b530      	push	{r4, r5, lr}
    83e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    83ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
    83f0:	f04f 0500 	mov.w	r5, #0
    83f4:	f04f 0100 	mov.w	r1, #0
    83f8:	e750      	b.n	829c <__adddf3+0x138>
    83fa:	bf00      	nop

000083fc <__aeabi_i2d>:
    83fc:	f090 0f00 	teq	r0, #0
    8400:	bf04      	itt	eq
    8402:	2100      	moveq	r1, #0
    8404:	4770      	bxeq	lr
    8406:	b530      	push	{r4, r5, lr}
    8408:	f44f 6480 	mov.w	r4, #1024	; 0x400
    840c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8410:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8414:	bf48      	it	mi
    8416:	4240      	negmi	r0, r0
    8418:	f04f 0100 	mov.w	r1, #0
    841c:	e73e      	b.n	829c <__adddf3+0x138>
    841e:	bf00      	nop

00008420 <__aeabi_f2d>:
    8420:	0042      	lsls	r2, r0, #1
    8422:	ea4f 01e2 	mov.w	r1, r2, asr #3
    8426:	ea4f 0131 	mov.w	r1, r1, rrx
    842a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    842e:	bf1f      	itttt	ne
    8430:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8438:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    843c:	4770      	bxne	lr
    843e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    8442:	bf08      	it	eq
    8444:	4770      	bxeq	lr
    8446:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    844a:	bf04      	itt	eq
    844c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8450:	4770      	bxeq	lr
    8452:	b530      	push	{r4, r5, lr}
    8454:	f44f 7460 	mov.w	r4, #896	; 0x380
    8458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    845c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8460:	e71c      	b.n	829c <__adddf3+0x138>
    8462:	bf00      	nop

00008464 <__aeabi_ul2d>:
    8464:	ea50 0201 	orrs.w	r2, r0, r1
    8468:	bf08      	it	eq
    846a:	4770      	bxeq	lr
    846c:	b530      	push	{r4, r5, lr}
    846e:	f04f 0500 	mov.w	r5, #0
    8472:	e00a      	b.n	848a <__aeabi_l2d+0x16>

00008474 <__aeabi_l2d>:
    8474:	ea50 0201 	orrs.w	r2, r0, r1
    8478:	bf08      	it	eq
    847a:	4770      	bxeq	lr
    847c:	b530      	push	{r4, r5, lr}
    847e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    8482:	d502      	bpl.n	848a <__aeabi_l2d+0x16>
    8484:	4240      	negs	r0, r0
    8486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    848a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    848e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8496:	f43f aed8 	beq.w	824a <__adddf3+0xe6>
    849a:	f04f 0203 	mov.w	r2, #3
    849e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84a2:	bf18      	it	ne
    84a4:	3203      	addne	r2, #3
    84a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    84aa:	bf18      	it	ne
    84ac:	3203      	addne	r2, #3
    84ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    84b2:	f1c2 0320 	rsb	r3, r2, #32
    84b6:	fa00 fc03 	lsl.w	ip, r0, r3
    84ba:	fa20 f002 	lsr.w	r0, r0, r2
    84be:	fa01 fe03 	lsl.w	lr, r1, r3
    84c2:	ea40 000e 	orr.w	r0, r0, lr
    84c6:	fa21 f102 	lsr.w	r1, r1, r2
    84ca:	4414      	add	r4, r2
    84cc:	e6bd      	b.n	824a <__adddf3+0xe6>
    84ce:	bf00      	nop

000084d0 <__aeabi_dmul>:
    84d0:	b570      	push	{r4, r5, r6, lr}
    84d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    84d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    84da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    84de:	bf1d      	ittte	ne
    84e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    84e4:	ea94 0f0c 	teqne	r4, ip
    84e8:	ea95 0f0c 	teqne	r5, ip
    84ec:	f000 f8de 	bleq	86ac <__aeabi_dmul+0x1dc>
    84f0:	442c      	add	r4, r5
    84f2:	ea81 0603 	eor.w	r6, r1, r3
    84f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    84fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    84fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8502:	bf18      	it	ne
    8504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8510:	d038      	beq.n	8584 <__aeabi_dmul+0xb4>
    8512:	fba0 ce02 	umull	ip, lr, r0, r2
    8516:	f04f 0500 	mov.w	r5, #0
    851a:	fbe1 e502 	umlal	lr, r5, r1, r2
    851e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8522:	fbe0 e503 	umlal	lr, r5, r0, r3
    8526:	f04f 0600 	mov.w	r6, #0
    852a:	fbe1 5603 	umlal	r5, r6, r1, r3
    852e:	f09c 0f00 	teq	ip, #0
    8532:	bf18      	it	ne
    8534:	f04e 0e01 	orrne.w	lr, lr, #1
    8538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    853c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8544:	d204      	bcs.n	8550 <__aeabi_dmul+0x80>
    8546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    854a:	416d      	adcs	r5, r5
    854c:	eb46 0606 	adc.w	r6, r6, r6
    8550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    855c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8568:	bf88      	it	hi
    856a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    856e:	d81e      	bhi.n	85ae <__aeabi_dmul+0xde>
    8570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8574:	bf08      	it	eq
    8576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    857a:	f150 0000 	adcs.w	r0, r0, #0
    857e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8582:	bd70      	pop	{r4, r5, r6, pc}
    8584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8588:	ea46 0101 	orr.w	r1, r6, r1
    858c:	ea40 0002 	orr.w	r0, r0, r2
    8590:	ea81 0103 	eor.w	r1, r1, r3
    8594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8598:	bfc2      	ittt	gt
    859a:	ebd4 050c 	rsbsgt	r5, r4, ip
    859e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    85a2:	bd70      	popgt	{r4, r5, r6, pc}
    85a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85a8:	f04f 0e00 	mov.w	lr, #0
    85ac:	3c01      	subs	r4, #1
    85ae:	f300 80ab 	bgt.w	8708 <__aeabi_dmul+0x238>
    85b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    85b6:	bfde      	ittt	le
    85b8:	2000      	movle	r0, #0
    85ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    85be:	bd70      	pople	{r4, r5, r6, pc}
    85c0:	f1c4 0400 	rsb	r4, r4, #0
    85c4:	3c20      	subs	r4, #32
    85c6:	da35      	bge.n	8634 <__aeabi_dmul+0x164>
    85c8:	340c      	adds	r4, #12
    85ca:	dc1b      	bgt.n	8604 <__aeabi_dmul+0x134>
    85cc:	f104 0414 	add.w	r4, r4, #20
    85d0:	f1c4 0520 	rsb	r5, r4, #32
    85d4:	fa00 f305 	lsl.w	r3, r0, r5
    85d8:	fa20 f004 	lsr.w	r0, r0, r4
    85dc:	fa01 f205 	lsl.w	r2, r1, r5
    85e0:	ea40 0002 	orr.w	r0, r0, r2
    85e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    85e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    85ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    85f0:	fa21 f604 	lsr.w	r6, r1, r4
    85f4:	eb42 0106 	adc.w	r1, r2, r6
    85f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    85fc:	bf08      	it	eq
    85fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8602:	bd70      	pop	{r4, r5, r6, pc}
    8604:	f1c4 040c 	rsb	r4, r4, #12
    8608:	f1c4 0520 	rsb	r5, r4, #32
    860c:	fa00 f304 	lsl.w	r3, r0, r4
    8610:	fa20 f005 	lsr.w	r0, r0, r5
    8614:	fa01 f204 	lsl.w	r2, r1, r4
    8618:	ea40 0002 	orr.w	r0, r0, r2
    861c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8624:	f141 0100 	adc.w	r1, r1, #0
    8628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    862c:	bf08      	it	eq
    862e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8632:	bd70      	pop	{r4, r5, r6, pc}
    8634:	f1c4 0520 	rsb	r5, r4, #32
    8638:	fa00 f205 	lsl.w	r2, r0, r5
    863c:	ea4e 0e02 	orr.w	lr, lr, r2
    8640:	fa20 f304 	lsr.w	r3, r0, r4
    8644:	fa01 f205 	lsl.w	r2, r1, r5
    8648:	ea43 0302 	orr.w	r3, r3, r2
    864c:	fa21 f004 	lsr.w	r0, r1, r4
    8650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8654:	fa21 f204 	lsr.w	r2, r1, r4
    8658:	ea20 0002 	bic.w	r0, r0, r2
    865c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8664:	bf08      	it	eq
    8666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f094 0f00 	teq	r4, #0
    8670:	d10f      	bne.n	8692 <__aeabi_dmul+0x1c2>
    8672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8676:	0040      	lsls	r0, r0, #1
    8678:	eb41 0101 	adc.w	r1, r1, r1
    867c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8680:	bf08      	it	eq
    8682:	3c01      	subeq	r4, #1
    8684:	d0f7      	beq.n	8676 <__aeabi_dmul+0x1a6>
    8686:	ea41 0106 	orr.w	r1, r1, r6
    868a:	f095 0f00 	teq	r5, #0
    868e:	bf18      	it	ne
    8690:	4770      	bxne	lr
    8692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8696:	0052      	lsls	r2, r2, #1
    8698:	eb43 0303 	adc.w	r3, r3, r3
    869c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    86a0:	bf08      	it	eq
    86a2:	3d01      	subeq	r5, #1
    86a4:	d0f7      	beq.n	8696 <__aeabi_dmul+0x1c6>
    86a6:	ea43 0306 	orr.w	r3, r3, r6
    86aa:	4770      	bx	lr
    86ac:	ea94 0f0c 	teq	r4, ip
    86b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    86b4:	bf18      	it	ne
    86b6:	ea95 0f0c 	teqne	r5, ip
    86ba:	d00c      	beq.n	86d6 <__aeabi_dmul+0x206>
    86bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86c0:	bf18      	it	ne
    86c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86c6:	d1d1      	bne.n	866c <__aeabi_dmul+0x19c>
    86c8:	ea81 0103 	eor.w	r1, r1, r3
    86cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    86d0:	f04f 0000 	mov.w	r0, #0
    86d4:	bd70      	pop	{r4, r5, r6, pc}
    86d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    86da:	bf06      	itte	eq
    86dc:	4610      	moveq	r0, r2
    86de:	4619      	moveq	r1, r3
    86e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    86e4:	d019      	beq.n	871a <__aeabi_dmul+0x24a>
    86e6:	ea94 0f0c 	teq	r4, ip
    86ea:	d102      	bne.n	86f2 <__aeabi_dmul+0x222>
    86ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    86f0:	d113      	bne.n	871a <__aeabi_dmul+0x24a>
    86f2:	ea95 0f0c 	teq	r5, ip
    86f6:	d105      	bne.n	8704 <__aeabi_dmul+0x234>
    86f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    86fc:	bf1c      	itt	ne
    86fe:	4610      	movne	r0, r2
    8700:	4619      	movne	r1, r3
    8702:	d10a      	bne.n	871a <__aeabi_dmul+0x24a>
    8704:	ea81 0103 	eor.w	r1, r1, r3
    8708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    870c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8714:	f04f 0000 	mov.w	r0, #0
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    871e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8722:	bd70      	pop	{r4, r5, r6, pc}

00008724 <__aeabi_ddiv>:
    8724:	b570      	push	{r4, r5, r6, lr}
    8726:	f04f 0cff 	mov.w	ip, #255	; 0xff
    872a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    872e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8732:	bf1d      	ittte	ne
    8734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8738:	ea94 0f0c 	teqne	r4, ip
    873c:	ea95 0f0c 	teqne	r5, ip
    8740:	f000 f8a7 	bleq	8892 <__aeabi_ddiv+0x16e>
    8744:	eba4 0405 	sub.w	r4, r4, r5
    8748:	ea81 0e03 	eor.w	lr, r1, r3
    874c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8750:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8754:	f000 8088 	beq.w	8868 <__aeabi_ddiv+0x144>
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8768:	ea4f 2202 	mov.w	r2, r2, lsl #8
    876c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8774:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    877c:	429d      	cmp	r5, r3
    877e:	bf08      	it	eq
    8780:	4296      	cmpeq	r6, r2
    8782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8786:	f504 7440 	add.w	r4, r4, #768	; 0x300
    878a:	d202      	bcs.n	8792 <__aeabi_ddiv+0x6e>
    878c:	085b      	lsrs	r3, r3, #1
    878e:	ea4f 0232 	mov.w	r2, r2, rrx
    8792:	1ab6      	subs	r6, r6, r2
    8794:	eb65 0503 	sbc.w	r5, r5, r3
    8798:	085b      	lsrs	r3, r3, #1
    879a:	ea4f 0232 	mov.w	r2, r2, rrx
    879e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    87a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    87a6:	ebb6 0e02 	subs.w	lr, r6, r2
    87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    87ae:	bf22      	ittt	cs
    87b0:	1ab6      	subcs	r6, r6, r2
    87b2:	4675      	movcs	r5, lr
    87b4:	ea40 000c 	orrcs.w	r0, r0, ip
    87b8:	085b      	lsrs	r3, r3, #1
    87ba:	ea4f 0232 	mov.w	r2, r2, rrx
    87be:	ebb6 0e02 	subs.w	lr, r6, r2
    87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87c6:	bf22      	ittt	cs
    87c8:	1ab6      	subcs	r6, r6, r2
    87ca:	4675      	movcs	r5, lr
    87cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    87d0:	085b      	lsrs	r3, r3, #1
    87d2:	ea4f 0232 	mov.w	r2, r2, rrx
    87d6:	ebb6 0e02 	subs.w	lr, r6, r2
    87da:	eb75 0e03 	sbcs.w	lr, r5, r3
    87de:	bf22      	ittt	cs
    87e0:	1ab6      	subcs	r6, r6, r2
    87e2:	4675      	movcs	r5, lr
    87e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    87e8:	085b      	lsrs	r3, r3, #1
    87ea:	ea4f 0232 	mov.w	r2, r2, rrx
    87ee:	ebb6 0e02 	subs.w	lr, r6, r2
    87f2:	eb75 0e03 	sbcs.w	lr, r5, r3
    87f6:	bf22      	ittt	cs
    87f8:	1ab6      	subcs	r6, r6, r2
    87fa:	4675      	movcs	r5, lr
    87fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8800:	ea55 0e06 	orrs.w	lr, r5, r6
    8804:	d018      	beq.n	8838 <__aeabi_ddiv+0x114>
    8806:	ea4f 1505 	mov.w	r5, r5, lsl #4
    880a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    880e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    881a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    881e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8822:	d1c0      	bne.n	87a6 <__aeabi_ddiv+0x82>
    8824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8828:	d10b      	bne.n	8842 <__aeabi_ddiv+0x11e>
    882a:	ea41 0100 	orr.w	r1, r1, r0
    882e:	f04f 0000 	mov.w	r0, #0
    8832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8836:	e7b6      	b.n	87a6 <__aeabi_ddiv+0x82>
    8838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    883c:	bf04      	itt	eq
    883e:	4301      	orreq	r1, r0
    8840:	2000      	moveq	r0, #0
    8842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8846:	bf88      	it	hi
    8848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    884c:	f63f aeaf 	bhi.w	85ae <__aeabi_dmul+0xde>
    8850:	ebb5 0c03 	subs.w	ip, r5, r3
    8854:	bf04      	itt	eq
    8856:	ebb6 0c02 	subseq.w	ip, r6, r2
    885a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    885e:	f150 0000 	adcs.w	r0, r0, #0
    8862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8866:	bd70      	pop	{r4, r5, r6, pc}
    8868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    886c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8874:	bfc2      	ittt	gt
    8876:	ebd4 050c 	rsbsgt	r5, r4, ip
    887a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    887e:	bd70      	popgt	{r4, r5, r6, pc}
    8880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8884:	f04f 0e00 	mov.w	lr, #0
    8888:	3c01      	subs	r4, #1
    888a:	e690      	b.n	85ae <__aeabi_dmul+0xde>
    888c:	ea45 0e06 	orr.w	lr, r5, r6
    8890:	e68d      	b.n	85ae <__aeabi_dmul+0xde>
    8892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8896:	ea94 0f0c 	teq	r4, ip
    889a:	bf08      	it	eq
    889c:	ea95 0f0c 	teqeq	r5, ip
    88a0:	f43f af3b 	beq.w	871a <__aeabi_dmul+0x24a>
    88a4:	ea94 0f0c 	teq	r4, ip
    88a8:	d10a      	bne.n	88c0 <__aeabi_ddiv+0x19c>
    88aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    88ae:	f47f af34 	bne.w	871a <__aeabi_dmul+0x24a>
    88b2:	ea95 0f0c 	teq	r5, ip
    88b6:	f47f af25 	bne.w	8704 <__aeabi_dmul+0x234>
    88ba:	4610      	mov	r0, r2
    88bc:	4619      	mov	r1, r3
    88be:	e72c      	b.n	871a <__aeabi_dmul+0x24a>
    88c0:	ea95 0f0c 	teq	r5, ip
    88c4:	d106      	bne.n	88d4 <__aeabi_ddiv+0x1b0>
    88c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    88ca:	f43f aefd 	beq.w	86c8 <__aeabi_dmul+0x1f8>
    88ce:	4610      	mov	r0, r2
    88d0:	4619      	mov	r1, r3
    88d2:	e722      	b.n	871a <__aeabi_dmul+0x24a>
    88d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    88d8:	bf18      	it	ne
    88da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    88de:	f47f aec5 	bne.w	866c <__aeabi_dmul+0x19c>
    88e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    88e6:	f47f af0d 	bne.w	8704 <__aeabi_dmul+0x234>
    88ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    88ee:	f47f aeeb 	bne.w	86c8 <__aeabi_dmul+0x1f8>
    88f2:	e712      	b.n	871a <__aeabi_dmul+0x24a>

000088f4 <__aeabi_d2f>:
    88f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    88f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    88fc:	bf24      	itt	cs
    88fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    8902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    8906:	d90d      	bls.n	8924 <__aeabi_d2f+0x30>
    8908:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    890c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    8910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    8914:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    8918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    891c:	bf08      	it	eq
    891e:	f020 0001 	biceq.w	r0, r0, #1
    8922:	4770      	bx	lr
    8924:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    8928:	d121      	bne.n	896e <__aeabi_d2f+0x7a>
    892a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    892e:	bfbc      	itt	lt
    8930:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    8934:	4770      	bxlt	lr
    8936:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    893a:	ea4f 5252 	mov.w	r2, r2, lsr #21
    893e:	f1c2 0218 	rsb	r2, r2, #24
    8942:	f1c2 0c20 	rsb	ip, r2, #32
    8946:	fa10 f30c 	lsls.w	r3, r0, ip
    894a:	fa20 f002 	lsr.w	r0, r0, r2
    894e:	bf18      	it	ne
    8950:	f040 0001 	orrne.w	r0, r0, #1
    8954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    895c:	fa03 fc0c 	lsl.w	ip, r3, ip
    8960:	ea40 000c 	orr.w	r0, r0, ip
    8964:	fa23 f302 	lsr.w	r3, r3, r2
    8968:	ea4f 0343 	mov.w	r3, r3, lsl #1
    896c:	e7cc      	b.n	8908 <__aeabi_d2f+0x14>
    896e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    8972:	d107      	bne.n	8984 <__aeabi_d2f+0x90>
    8974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    8978:	bf1e      	ittt	ne
    897a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    897e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    8982:	4770      	bxne	lr
    8984:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    8988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    898c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8990:	4770      	bx	lr
    8992:	bf00      	nop

00008994 <__aeabi_frsub>:
    8994:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8998:	e002      	b.n	89a0 <__addsf3>
    899a:	bf00      	nop

0000899c <__aeabi_fsub>:
    899c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000089a0 <__addsf3>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	bf1f      	itttt	ne
    89a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    89a8:	ea92 0f03 	teqne	r2, r3
    89ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    89b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    89b4:	d06a      	beq.n	8a8c <__addsf3+0xec>
    89b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    89ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    89be:	bfc1      	itttt	gt
    89c0:	18d2      	addgt	r2, r2, r3
    89c2:	4041      	eorgt	r1, r0
    89c4:	4048      	eorgt	r0, r1
    89c6:	4041      	eorgt	r1, r0
    89c8:	bfb8      	it	lt
    89ca:	425b      	neglt	r3, r3
    89cc:	2b19      	cmp	r3, #25
    89ce:	bf88      	it	hi
    89d0:	4770      	bxhi	lr
    89d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    89d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    89da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    89de:	bf18      	it	ne
    89e0:	4240      	negne	r0, r0
    89e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    89e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    89ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    89ee:	bf18      	it	ne
    89f0:	4249      	negne	r1, r1
    89f2:	ea92 0f03 	teq	r2, r3
    89f6:	d03f      	beq.n	8a78 <__addsf3+0xd8>
    89f8:	f1a2 0201 	sub.w	r2, r2, #1
    89fc:	fa41 fc03 	asr.w	ip, r1, r3
    8a00:	eb10 000c 	adds.w	r0, r0, ip
    8a04:	f1c3 0320 	rsb	r3, r3, #32
    8a08:	fa01 f103 	lsl.w	r1, r1, r3
    8a0c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8a10:	d502      	bpl.n	8a18 <__addsf3+0x78>
    8a12:	4249      	negs	r1, r1
    8a14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    8a18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8a1c:	d313      	bcc.n	8a46 <__addsf3+0xa6>
    8a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    8a22:	d306      	bcc.n	8a32 <__addsf3+0x92>
    8a24:	0840      	lsrs	r0, r0, #1
    8a26:	ea4f 0131 	mov.w	r1, r1, rrx
    8a2a:	f102 0201 	add.w	r2, r2, #1
    8a2e:	2afe      	cmp	r2, #254	; 0xfe
    8a30:	d251      	bcs.n	8ad6 <__addsf3+0x136>
    8a32:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    8a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8a3a:	bf08      	it	eq
    8a3c:	f020 0001 	biceq.w	r0, r0, #1
    8a40:	ea40 0003 	orr.w	r0, r0, r3
    8a44:	4770      	bx	lr
    8a46:	0049      	lsls	r1, r1, #1
    8a48:	eb40 0000 	adc.w	r0, r0, r0
    8a4c:	3a01      	subs	r2, #1
    8a4e:	bf28      	it	cs
    8a50:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    8a54:	d2ed      	bcs.n	8a32 <__addsf3+0x92>
    8a56:	fab0 fc80 	clz	ip, r0
    8a5a:	f1ac 0c08 	sub.w	ip, ip, #8
    8a5e:	ebb2 020c 	subs.w	r2, r2, ip
    8a62:	fa00 f00c 	lsl.w	r0, r0, ip
    8a66:	bfaa      	itet	ge
    8a68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    8a6c:	4252      	neglt	r2, r2
    8a6e:	4318      	orrge	r0, r3
    8a70:	bfbc      	itt	lt
    8a72:	40d0      	lsrlt	r0, r2
    8a74:	4318      	orrlt	r0, r3
    8a76:	4770      	bx	lr
    8a78:	f092 0f00 	teq	r2, #0
    8a7c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    8a80:	bf06      	itte	eq
    8a82:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    8a86:	3201      	addeq	r2, #1
    8a88:	3b01      	subne	r3, #1
    8a8a:	e7b5      	b.n	89f8 <__addsf3+0x58>
    8a8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    8a90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    8a94:	bf18      	it	ne
    8a96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8a9a:	d021      	beq.n	8ae0 <__addsf3+0x140>
    8a9c:	ea92 0f03 	teq	r2, r3
    8aa0:	d004      	beq.n	8aac <__addsf3+0x10c>
    8aa2:	f092 0f00 	teq	r2, #0
    8aa6:	bf08      	it	eq
    8aa8:	4608      	moveq	r0, r1
    8aaa:	4770      	bx	lr
    8aac:	ea90 0f01 	teq	r0, r1
    8ab0:	bf1c      	itt	ne
    8ab2:	2000      	movne	r0, #0
    8ab4:	4770      	bxne	lr
    8ab6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    8aba:	d104      	bne.n	8ac6 <__addsf3+0x126>
    8abc:	0040      	lsls	r0, r0, #1
    8abe:	bf28      	it	cs
    8ac0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    8ac4:	4770      	bx	lr
    8ac6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    8aca:	bf3c      	itt	cc
    8acc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    8ad0:	4770      	bxcc	lr
    8ad2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    8ad6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    8ada:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8ade:	4770      	bx	lr
    8ae0:	ea7f 6222 	mvns.w	r2, r2, asr #24
    8ae4:	bf16      	itet	ne
    8ae6:	4608      	movne	r0, r1
    8ae8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    8aec:	4601      	movne	r1, r0
    8aee:	0242      	lsls	r2, r0, #9
    8af0:	bf06      	itte	eq
    8af2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    8af6:	ea90 0f01 	teqeq	r0, r1
    8afa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    8afe:	4770      	bx	lr

00008b00 <__aeabi_ui2f>:
    8b00:	f04f 0300 	mov.w	r3, #0
    8b04:	e004      	b.n	8b10 <__aeabi_i2f+0x8>
    8b06:	bf00      	nop

00008b08 <__aeabi_i2f>:
    8b08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    8b0c:	bf48      	it	mi
    8b0e:	4240      	negmi	r0, r0
    8b10:	ea5f 0c00 	movs.w	ip, r0
    8b14:	bf08      	it	eq
    8b16:	4770      	bxeq	lr
    8b18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    8b1c:	4601      	mov	r1, r0
    8b1e:	f04f 0000 	mov.w	r0, #0
    8b22:	e01c      	b.n	8b5e <__aeabi_l2f+0x2a>

00008b24 <__aeabi_ul2f>:
    8b24:	ea50 0201 	orrs.w	r2, r0, r1
    8b28:	bf08      	it	eq
    8b2a:	4770      	bxeq	lr
    8b2c:	f04f 0300 	mov.w	r3, #0
    8b30:	e00a      	b.n	8b48 <__aeabi_l2f+0x14>
    8b32:	bf00      	nop

00008b34 <__aeabi_l2f>:
    8b34:	ea50 0201 	orrs.w	r2, r0, r1
    8b38:	bf08      	it	eq
    8b3a:	4770      	bxeq	lr
    8b3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    8b40:	d502      	bpl.n	8b48 <__aeabi_l2f+0x14>
    8b42:	4240      	negs	r0, r0
    8b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8b48:	ea5f 0c01 	movs.w	ip, r1
    8b4c:	bf02      	ittt	eq
    8b4e:	4684      	moveq	ip, r0
    8b50:	4601      	moveq	r1, r0
    8b52:	2000      	moveq	r0, #0
    8b54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    8b58:	bf08      	it	eq
    8b5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    8b5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    8b62:	fabc f28c 	clz	r2, ip
    8b66:	3a08      	subs	r2, #8
    8b68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    8b6c:	db10      	blt.n	8b90 <__aeabi_l2f+0x5c>
    8b6e:	fa01 fc02 	lsl.w	ip, r1, r2
    8b72:	4463      	add	r3, ip
    8b74:	fa00 fc02 	lsl.w	ip, r0, r2
    8b78:	f1c2 0220 	rsb	r2, r2, #32
    8b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    8b80:	fa20 f202 	lsr.w	r2, r0, r2
    8b84:	eb43 0002 	adc.w	r0, r3, r2
    8b88:	bf08      	it	eq
    8b8a:	f020 0001 	biceq.w	r0, r0, #1
    8b8e:	4770      	bx	lr
    8b90:	f102 0220 	add.w	r2, r2, #32
    8b94:	fa01 fc02 	lsl.w	ip, r1, r2
    8b98:	f1c2 0220 	rsb	r2, r2, #32
    8b9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    8ba0:	fa21 f202 	lsr.w	r2, r1, r2
    8ba4:	eb43 0002 	adc.w	r0, r3, r2
    8ba8:	bf08      	it	eq
    8baa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8bae:	4770      	bx	lr

00008bb0 <__aeabi_fmul>:
    8bb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8bb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8bb8:	bf1e      	ittt	ne
    8bba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8bbe:	ea92 0f0c 	teqne	r2, ip
    8bc2:	ea93 0f0c 	teqne	r3, ip
    8bc6:	d06f      	beq.n	8ca8 <__aeabi_fmul+0xf8>
    8bc8:	441a      	add	r2, r3
    8bca:	ea80 0c01 	eor.w	ip, r0, r1
    8bce:	0240      	lsls	r0, r0, #9
    8bd0:	bf18      	it	ne
    8bd2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    8bd6:	d01e      	beq.n	8c16 <__aeabi_fmul+0x66>
    8bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    8bdc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    8be0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    8be4:	fba0 3101 	umull	r3, r1, r0, r1
    8be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8bec:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    8bf0:	bf3e      	ittt	cc
    8bf2:	0049      	lslcc	r1, r1, #1
    8bf4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    8bf8:	005b      	lslcc	r3, r3, #1
    8bfa:	ea40 0001 	orr.w	r0, r0, r1
    8bfe:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    8c02:	2afd      	cmp	r2, #253	; 0xfd
    8c04:	d81d      	bhi.n	8c42 <__aeabi_fmul+0x92>
    8c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8c0e:	bf08      	it	eq
    8c10:	f020 0001 	biceq.w	r0, r0, #1
    8c14:	4770      	bx	lr
    8c16:	f090 0f00 	teq	r0, #0
    8c1a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8c1e:	bf08      	it	eq
    8c20:	0249      	lsleq	r1, r1, #9
    8c22:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8c26:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    8c2a:	3a7f      	subs	r2, #127	; 0x7f
    8c2c:	bfc2      	ittt	gt
    8c2e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8c32:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8c36:	4770      	bxgt	lr
    8c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8c3c:	f04f 0300 	mov.w	r3, #0
    8c40:	3a01      	subs	r2, #1
    8c42:	dc5d      	bgt.n	8d00 <__aeabi_fmul+0x150>
    8c44:	f112 0f19 	cmn.w	r2, #25
    8c48:	bfdc      	itt	le
    8c4a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    8c4e:	4770      	bxle	lr
    8c50:	f1c2 0200 	rsb	r2, r2, #0
    8c54:	0041      	lsls	r1, r0, #1
    8c56:	fa21 f102 	lsr.w	r1, r1, r2
    8c5a:	f1c2 0220 	rsb	r2, r2, #32
    8c5e:	fa00 fc02 	lsl.w	ip, r0, r2
    8c62:	ea5f 0031 	movs.w	r0, r1, rrx
    8c66:	f140 0000 	adc.w	r0, r0, #0
    8c6a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    8c6e:	bf08      	it	eq
    8c70:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    8c74:	4770      	bx	lr
    8c76:	f092 0f00 	teq	r2, #0
    8c7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8c7e:	bf02      	ittt	eq
    8c80:	0040      	lsleq	r0, r0, #1
    8c82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8c86:	3a01      	subeq	r2, #1
    8c88:	d0f9      	beq.n	8c7e <__aeabi_fmul+0xce>
    8c8a:	ea40 000c 	orr.w	r0, r0, ip
    8c8e:	f093 0f00 	teq	r3, #0
    8c92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8c96:	bf02      	ittt	eq
    8c98:	0049      	lsleq	r1, r1, #1
    8c9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8c9e:	3b01      	subeq	r3, #1
    8ca0:	d0f9      	beq.n	8c96 <__aeabi_fmul+0xe6>
    8ca2:	ea41 010c 	orr.w	r1, r1, ip
    8ca6:	e78f      	b.n	8bc8 <__aeabi_fmul+0x18>
    8ca8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8cac:	ea92 0f0c 	teq	r2, ip
    8cb0:	bf18      	it	ne
    8cb2:	ea93 0f0c 	teqne	r3, ip
    8cb6:	d00a      	beq.n	8cce <__aeabi_fmul+0x11e>
    8cb8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8cbc:	bf18      	it	ne
    8cbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8cc2:	d1d8      	bne.n	8c76 <__aeabi_fmul+0xc6>
    8cc4:	ea80 0001 	eor.w	r0, r0, r1
    8cc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8ccc:	4770      	bx	lr
    8cce:	f090 0f00 	teq	r0, #0
    8cd2:	bf17      	itett	ne
    8cd4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    8cd8:	4608      	moveq	r0, r1
    8cda:	f091 0f00 	teqne	r1, #0
    8cde:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    8ce2:	d014      	beq.n	8d0e <__aeabi_fmul+0x15e>
    8ce4:	ea92 0f0c 	teq	r2, ip
    8ce8:	d101      	bne.n	8cee <__aeabi_fmul+0x13e>
    8cea:	0242      	lsls	r2, r0, #9
    8cec:	d10f      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cee:	ea93 0f0c 	teq	r3, ip
    8cf2:	d103      	bne.n	8cfc <__aeabi_fmul+0x14c>
    8cf4:	024b      	lsls	r3, r1, #9
    8cf6:	bf18      	it	ne
    8cf8:	4608      	movne	r0, r1
    8cfa:	d108      	bne.n	8d0e <__aeabi_fmul+0x15e>
    8cfc:	ea80 0001 	eor.w	r0, r0, r1
    8d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    8d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8d0c:	4770      	bx	lr
    8d0e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    8d12:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    8d16:	4770      	bx	lr

00008d18 <__aeabi_fdiv>:
    8d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    8d20:	bf1e      	ittt	ne
    8d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    8d26:	ea92 0f0c 	teqne	r2, ip
    8d2a:	ea93 0f0c 	teqne	r3, ip
    8d2e:	d069      	beq.n	8e04 <__aeabi_fdiv+0xec>
    8d30:	eba2 0203 	sub.w	r2, r2, r3
    8d34:	ea80 0c01 	eor.w	ip, r0, r1
    8d38:	0249      	lsls	r1, r1, #9
    8d3a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    8d3e:	d037      	beq.n	8db0 <__aeabi_fdiv+0x98>
    8d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8d44:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    8d48:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    8d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    8d50:	428b      	cmp	r3, r1
    8d52:	bf38      	it	cc
    8d54:	005b      	lslcc	r3, r3, #1
    8d56:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    8d5a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    8d5e:	428b      	cmp	r3, r1
    8d60:	bf24      	itt	cs
    8d62:	1a5b      	subcs	r3, r3, r1
    8d64:	ea40 000c 	orrcs.w	r0, r0, ip
    8d68:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    8d6c:	bf24      	itt	cs
    8d6e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    8d72:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d76:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    8d7a:	bf24      	itt	cs
    8d7c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d84:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    8d88:	bf24      	itt	cs
    8d8a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    8d8e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d92:	011b      	lsls	r3, r3, #4
    8d94:	bf18      	it	ne
    8d96:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    8d9a:	d1e0      	bne.n	8d5e <__aeabi_fdiv+0x46>
    8d9c:	2afd      	cmp	r2, #253	; 0xfd
    8d9e:	f63f af50 	bhi.w	8c42 <__aeabi_fmul+0x92>
    8da2:	428b      	cmp	r3, r1
    8da4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    8da8:	bf08      	it	eq
    8daa:	f020 0001 	biceq.w	r0, r0, #1
    8dae:	4770      	bx	lr
    8db0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    8db4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    8db8:	327f      	adds	r2, #127	; 0x7f
    8dba:	bfc2      	ittt	gt
    8dbc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    8dc0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    8dc4:	4770      	bxgt	lr
    8dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8dca:	f04f 0300 	mov.w	r3, #0
    8dce:	3a01      	subs	r2, #1
    8dd0:	e737      	b.n	8c42 <__aeabi_fmul+0x92>
    8dd2:	f092 0f00 	teq	r2, #0
    8dd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    8dda:	bf02      	ittt	eq
    8ddc:	0040      	lsleq	r0, r0, #1
    8dde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    8de2:	3a01      	subeq	r2, #1
    8de4:	d0f9      	beq.n	8dda <__aeabi_fdiv+0xc2>
    8de6:	ea40 000c 	orr.w	r0, r0, ip
    8dea:	f093 0f00 	teq	r3, #0
    8dee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    8df2:	bf02      	ittt	eq
    8df4:	0049      	lsleq	r1, r1, #1
    8df6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    8dfa:	3b01      	subeq	r3, #1
    8dfc:	d0f9      	beq.n	8df2 <__aeabi_fdiv+0xda>
    8dfe:	ea41 010c 	orr.w	r1, r1, ip
    8e02:	e795      	b.n	8d30 <__aeabi_fdiv+0x18>
    8e04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    8e08:	ea92 0f0c 	teq	r2, ip
    8e0c:	d108      	bne.n	8e20 <__aeabi_fdiv+0x108>
    8e0e:	0242      	lsls	r2, r0, #9
    8e10:	f47f af7d 	bne.w	8d0e <__aeabi_fmul+0x15e>
    8e14:	ea93 0f0c 	teq	r3, ip
    8e18:	f47f af70 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e1c:	4608      	mov	r0, r1
    8e1e:	e776      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e20:	ea93 0f0c 	teq	r3, ip
    8e24:	d104      	bne.n	8e30 <__aeabi_fdiv+0x118>
    8e26:	024b      	lsls	r3, r1, #9
    8e28:	f43f af4c 	beq.w	8cc4 <__aeabi_fmul+0x114>
    8e2c:	4608      	mov	r0, r1
    8e2e:	e76e      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    8e34:	bf18      	it	ne
    8e36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    8e3a:	d1ca      	bne.n	8dd2 <__aeabi_fdiv+0xba>
    8e3c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    8e40:	f47f af5c 	bne.w	8cfc <__aeabi_fmul+0x14c>
    8e44:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    8e48:	f47f af3c 	bne.w	8cc4 <__aeabi_fmul+0x114>
    8e4c:	e75f      	b.n	8d0e <__aeabi_fmul+0x15e>
    8e4e:	bf00      	nop

00008e50 <__aeabi_ldivmod>:
    8e50:	b97b      	cbnz	r3, 8e72 <__aeabi_ldivmod+0x22>
    8e52:	b972      	cbnz	r2, 8e72 <__aeabi_ldivmod+0x22>
    8e54:	2900      	cmp	r1, #0
    8e56:	bfbe      	ittt	lt
    8e58:	2000      	movlt	r0, #0
    8e5a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    8e5e:	e006      	blt.n	8e6e <__aeabi_ldivmod+0x1e>
    8e60:	bf08      	it	eq
    8e62:	2800      	cmpeq	r0, #0
    8e64:	bf1c      	itt	ne
    8e66:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    8e6a:	f04f 30ff 	movne.w	r0, #4294967295
    8e6e:	f000 b857 	b.w	8f20 <__aeabi_idiv0>
    8e72:	f1ad 0c08 	sub.w	ip, sp, #8
    8e76:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8e7a:	2900      	cmp	r1, #0
    8e7c:	db09      	blt.n	8e92 <__aeabi_ldivmod+0x42>
    8e7e:	2b00      	cmp	r3, #0
    8e80:	db1a      	blt.n	8eb8 <__aeabi_ldivmod+0x68>
    8e82:	f000 f928 	bl	90d6 <__udivmoddi4>
    8e86:	f8dd e004 	ldr.w	lr, [sp, #4]
    8e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8e8e:	b004      	add	sp, #16
    8e90:	4770      	bx	lr
    8e92:	4240      	negs	r0, r0
    8e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8e98:	2b00      	cmp	r3, #0
    8e9a:	db1b      	blt.n	8ed4 <__aeabi_ldivmod+0x84>
    8e9c:	f000 f91b 	bl	90d6 <__udivmoddi4>
    8ea0:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ea8:	b004      	add	sp, #16
    8eaa:	4240      	negs	r0, r0
    8eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8eb0:	4252      	negs	r2, r2
    8eb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eb6:	4770      	bx	lr
    8eb8:	4252      	negs	r2, r2
    8eba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8ebe:	f000 f90a 	bl	90d6 <__udivmoddi4>
    8ec2:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8eca:	b004      	add	sp, #16
    8ecc:	4240      	negs	r0, r0
    8ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8ed2:	4770      	bx	lr
    8ed4:	4252      	negs	r2, r2
    8ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eda:	f000 f8fc 	bl	90d6 <__udivmoddi4>
    8ede:	f8dd e004 	ldr.w	lr, [sp, #4]
    8ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ee6:	b004      	add	sp, #16
    8ee8:	4252      	negs	r2, r2
    8eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8eee:	4770      	bx	lr

00008ef0 <__aeabi_uldivmod>:
    8ef0:	b953      	cbnz	r3, 8f08 <__aeabi_uldivmod+0x18>
    8ef2:	b94a      	cbnz	r2, 8f08 <__aeabi_uldivmod+0x18>
    8ef4:	2900      	cmp	r1, #0
    8ef6:	bf08      	it	eq
    8ef8:	2800      	cmpeq	r0, #0
    8efa:	bf1c      	itt	ne
    8efc:	f04f 31ff 	movne.w	r1, #4294967295
    8f00:	f04f 30ff 	movne.w	r0, #4294967295
    8f04:	f000 b80c 	b.w	8f20 <__aeabi_idiv0>
    8f08:	f1ad 0c08 	sub.w	ip, sp, #8
    8f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8f10:	f000 f8e1 	bl	90d6 <__udivmoddi4>
    8f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    8f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8f1c:	b004      	add	sp, #16
    8f1e:	4770      	bx	lr

00008f20 <__aeabi_idiv0>:
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop

00008f24 <__gedf2>:
    8f24:	f04f 3cff 	mov.w	ip, #4294967295
    8f28:	e006      	b.n	8f38 <__cmpdf2+0x4>
    8f2a:	bf00      	nop

00008f2c <__ledf2>:
    8f2c:	f04f 0c01 	mov.w	ip, #1
    8f30:	e002      	b.n	8f38 <__cmpdf2+0x4>
    8f32:	bf00      	nop

00008f34 <__cmpdf2>:
    8f34:	f04f 0c01 	mov.w	ip, #1
    8f38:	f84d cd04 	str.w	ip, [sp, #-4]!
    8f3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f48:	bf18      	it	ne
    8f4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8f4e:	d01b      	beq.n	8f88 <__cmpdf2+0x54>
    8f50:	b001      	add	sp, #4
    8f52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8f56:	bf0c      	ite	eq
    8f58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8f5c:	ea91 0f03 	teqne	r1, r3
    8f60:	bf02      	ittt	eq
    8f62:	ea90 0f02 	teqeq	r0, r2
    8f66:	2000      	moveq	r0, #0
    8f68:	4770      	bxeq	lr
    8f6a:	f110 0f00 	cmn.w	r0, #0
    8f6e:	ea91 0f03 	teq	r1, r3
    8f72:	bf58      	it	pl
    8f74:	4299      	cmppl	r1, r3
    8f76:	bf08      	it	eq
    8f78:	4290      	cmpeq	r0, r2
    8f7a:	bf2c      	ite	cs
    8f7c:	17d8      	asrcs	r0, r3, #31
    8f7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8f82:	f040 0001 	orr.w	r0, r0, #1
    8f86:	4770      	bx	lr
    8f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f90:	d102      	bne.n	8f98 <__cmpdf2+0x64>
    8f92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f96:	d107      	bne.n	8fa8 <__cmpdf2+0x74>
    8f98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8fa0:	d1d6      	bne.n	8f50 <__cmpdf2+0x1c>
    8fa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8fa6:	d0d3      	beq.n	8f50 <__cmpdf2+0x1c>
    8fa8:	f85d 0b04 	ldr.w	r0, [sp], #4
    8fac:	4770      	bx	lr
    8fae:	bf00      	nop

00008fb0 <__aeabi_cdrcmple>:
    8fb0:	4684      	mov	ip, r0
    8fb2:	4610      	mov	r0, r2
    8fb4:	4662      	mov	r2, ip
    8fb6:	468c      	mov	ip, r1
    8fb8:	4619      	mov	r1, r3
    8fba:	4663      	mov	r3, ip
    8fbc:	e000      	b.n	8fc0 <__aeabi_cdcmpeq>
    8fbe:	bf00      	nop

00008fc0 <__aeabi_cdcmpeq>:
    8fc0:	b501      	push	{r0, lr}
    8fc2:	f7ff ffb7 	bl	8f34 <__cmpdf2>
    8fc6:	2800      	cmp	r0, #0
    8fc8:	bf48      	it	mi
    8fca:	f110 0f00 	cmnmi.w	r0, #0
    8fce:	bd01      	pop	{r0, pc}

00008fd0 <__aeabi_dcmpeq>:
    8fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fd4:	f7ff fff4 	bl	8fc0 <__aeabi_cdcmpeq>
    8fd8:	bf0c      	ite	eq
    8fda:	2001      	moveq	r0, #1
    8fdc:	2000      	movne	r0, #0
    8fde:	f85d fb08 	ldr.w	pc, [sp], #8
    8fe2:	bf00      	nop

00008fe4 <__aeabi_dcmplt>:
    8fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8fe8:	f7ff ffea 	bl	8fc0 <__aeabi_cdcmpeq>
    8fec:	bf34      	ite	cc
    8fee:	2001      	movcc	r0, #1
    8ff0:	2000      	movcs	r0, #0
    8ff2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ff6:	bf00      	nop

00008ff8 <__aeabi_dcmple>:
    8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ffc:	f7ff ffe0 	bl	8fc0 <__aeabi_cdcmpeq>
    9000:	bf94      	ite	ls
    9002:	2001      	movls	r0, #1
    9004:	2000      	movhi	r0, #0
    9006:	f85d fb08 	ldr.w	pc, [sp], #8
    900a:	bf00      	nop

0000900c <__aeabi_dcmpge>:
    900c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9010:	f7ff ffce 	bl	8fb0 <__aeabi_cdrcmple>
    9014:	bf94      	ite	ls
    9016:	2001      	movls	r0, #1
    9018:	2000      	movhi	r0, #0
    901a:	f85d fb08 	ldr.w	pc, [sp], #8
    901e:	bf00      	nop

00009020 <__aeabi_dcmpgt>:
    9020:	f84d ed08 	str.w	lr, [sp, #-8]!
    9024:	f7ff ffc4 	bl	8fb0 <__aeabi_cdrcmple>
    9028:	bf34      	ite	cc
    902a:	2001      	movcc	r0, #1
    902c:	2000      	movcs	r0, #0
    902e:	f85d fb08 	ldr.w	pc, [sp], #8
    9032:	bf00      	nop

00009034 <__aeabi_dcmpun>:
    9034:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    9038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    903c:	d102      	bne.n	9044 <__aeabi_dcmpun+0x10>
    903e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    9042:	d10a      	bne.n	905a <__aeabi_dcmpun+0x26>
    9044:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    9048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    904c:	d102      	bne.n	9054 <__aeabi_dcmpun+0x20>
    904e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    9052:	d102      	bne.n	905a <__aeabi_dcmpun+0x26>
    9054:	f04f 0000 	mov.w	r0, #0
    9058:	4770      	bx	lr
    905a:	f04f 0001 	mov.w	r0, #1
    905e:	4770      	bx	lr

00009060 <__aeabi_d2iz>:
    9060:	ea4f 0241 	mov.w	r2, r1, lsl #1
    9064:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    9068:	d215      	bcs.n	9096 <__aeabi_d2iz+0x36>
    906a:	d511      	bpl.n	9090 <__aeabi_d2iz+0x30>
    906c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    9070:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    9074:	d912      	bls.n	909c <__aeabi_d2iz+0x3c>
    9076:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    907a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    907e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    9082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9086:	fa23 f002 	lsr.w	r0, r3, r2
    908a:	bf18      	it	ne
    908c:	4240      	negne	r0, r0
    908e:	4770      	bx	lr
    9090:	f04f 0000 	mov.w	r0, #0
    9094:	4770      	bx	lr
    9096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    909a:	d105      	bne.n	90a8 <__aeabi_d2iz+0x48>
    909c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    90a0:	bf08      	it	eq
    90a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    90a6:	4770      	bx	lr
    90a8:	f04f 0000 	mov.w	r0, #0
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop

000090b0 <__popcountsi2>:
    90b0:	0843      	lsrs	r3, r0, #1
    90b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    90b6:	1ac0      	subs	r0, r0, r3
    90b8:	f000 3333 	and.w	r3, r0, #858993459	; 0x33333333
    90bc:	0880      	lsrs	r0, r0, #2
    90be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    90c2:	4418      	add	r0, r3
    90c4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    90c8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    90cc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    90d0:	4358      	muls	r0, r3
    90d2:	0e00      	lsrs	r0, r0, #24
    90d4:	4770      	bx	lr

000090d6 <__udivmoddi4>:
    90d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90da:	4686      	mov	lr, r0
    90dc:	468c      	mov	ip, r1
    90de:	4608      	mov	r0, r1
    90e0:	9e08      	ldr	r6, [sp, #32]
    90e2:	4615      	mov	r5, r2
    90e4:	4674      	mov	r4, lr
    90e6:	4619      	mov	r1, r3
    90e8:	2b00      	cmp	r3, #0
    90ea:	f040 80c1 	bne.w	9270 <__udivmoddi4+0x19a>
    90ee:	4285      	cmp	r5, r0
    90f0:	fab2 f282 	clz	r2, r2
    90f4:	d945      	bls.n	9182 <__udivmoddi4+0xac>
    90f6:	b14a      	cbz	r2, 910c <__udivmoddi4+0x36>
    90f8:	f1c2 0320 	rsb	r3, r2, #32
    90fc:	fa00 fc02 	lsl.w	ip, r0, r2
    9100:	4095      	lsls	r5, r2
    9102:	4094      	lsls	r4, r2
    9104:	fa2e f303 	lsr.w	r3, lr, r3
    9108:	ea43 0c0c 	orr.w	ip, r3, ip
    910c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9110:	b2a8      	uxth	r0, r5
    9112:	0c23      	lsrs	r3, r4, #16
    9114:	fbbc f8fe 	udiv	r8, ip, lr
    9118:	fb0e cc18 	mls	ip, lr, r8, ip
    911c:	fb08 f900 	mul.w	r9, r8, r0
    9120:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    9124:	4599      	cmp	r9, r3
    9126:	d928      	bls.n	917a <__udivmoddi4+0xa4>
    9128:	18eb      	adds	r3, r5, r3
    912a:	f108 37ff 	add.w	r7, r8, #4294967295
    912e:	d204      	bcs.n	913a <__udivmoddi4+0x64>
    9130:	4599      	cmp	r9, r3
    9132:	d902      	bls.n	913a <__udivmoddi4+0x64>
    9134:	f1a8 0702 	sub.w	r7, r8, #2
    9138:	442b      	add	r3, r5
    913a:	eba3 0309 	sub.w	r3, r3, r9
    913e:	b2a4      	uxth	r4, r4
    9140:	fbb3 fcfe 	udiv	ip, r3, lr
    9144:	fb0e 331c 	mls	r3, lr, ip, r3
    9148:	fb0c f000 	mul.w	r0, ip, r0
    914c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9150:	42a0      	cmp	r0, r4
    9152:	d914      	bls.n	917e <__udivmoddi4+0xa8>
    9154:	192c      	adds	r4, r5, r4
    9156:	f10c 33ff 	add.w	r3, ip, #4294967295
    915a:	d204      	bcs.n	9166 <__udivmoddi4+0x90>
    915c:	42a0      	cmp	r0, r4
    915e:	d902      	bls.n	9166 <__udivmoddi4+0x90>
    9160:	f1ac 0302 	sub.w	r3, ip, #2
    9164:	442c      	add	r4, r5
    9166:	1a24      	subs	r4, r4, r0
    9168:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    916c:	b11e      	cbz	r6, 9176 <__udivmoddi4+0xa0>
    916e:	40d4      	lsrs	r4, r2
    9170:	2300      	movs	r3, #0
    9172:	6034      	str	r4, [r6, #0]
    9174:	6073      	str	r3, [r6, #4]
    9176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    917a:	4647      	mov	r7, r8
    917c:	e7dd      	b.n	913a <__udivmoddi4+0x64>
    917e:	4663      	mov	r3, ip
    9180:	e7f1      	b.n	9166 <__udivmoddi4+0x90>
    9182:	bb92      	cbnz	r2, 91ea <__udivmoddi4+0x114>
    9184:	1b43      	subs	r3, r0, r5
    9186:	2101      	movs	r1, #1
    9188:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    918c:	b2af      	uxth	r7, r5
    918e:	0c20      	lsrs	r0, r4, #16
    9190:	fbb3 fcfe 	udiv	ip, r3, lr
    9194:	fb0e 331c 	mls	r3, lr, ip, r3
    9198:	fb0c f807 	mul.w	r8, ip, r7
    919c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    91a0:	4598      	cmp	r8, r3
    91a2:	d961      	bls.n	9268 <__udivmoddi4+0x192>
    91a4:	18eb      	adds	r3, r5, r3
    91a6:	f10c 30ff 	add.w	r0, ip, #4294967295
    91aa:	d204      	bcs.n	91b6 <__udivmoddi4+0xe0>
    91ac:	4598      	cmp	r8, r3
    91ae:	d902      	bls.n	91b6 <__udivmoddi4+0xe0>
    91b0:	f1ac 0002 	sub.w	r0, ip, #2
    91b4:	442b      	add	r3, r5
    91b6:	eba3 0308 	sub.w	r3, r3, r8
    91ba:	b2a4      	uxth	r4, r4
    91bc:	fbb3 fcfe 	udiv	ip, r3, lr
    91c0:	fb0e 331c 	mls	r3, lr, ip, r3
    91c4:	fb0c f707 	mul.w	r7, ip, r7
    91c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    91cc:	42a7      	cmp	r7, r4
    91ce:	d94d      	bls.n	926c <__udivmoddi4+0x196>
    91d0:	192c      	adds	r4, r5, r4
    91d2:	f10c 33ff 	add.w	r3, ip, #4294967295
    91d6:	d204      	bcs.n	91e2 <__udivmoddi4+0x10c>
    91d8:	42a7      	cmp	r7, r4
    91da:	d902      	bls.n	91e2 <__udivmoddi4+0x10c>
    91dc:	f1ac 0302 	sub.w	r3, ip, #2
    91e0:	442c      	add	r4, r5
    91e2:	1be4      	subs	r4, r4, r7
    91e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    91e8:	e7c0      	b.n	916c <__udivmoddi4+0x96>
    91ea:	f1c2 0320 	rsb	r3, r2, #32
    91ee:	4095      	lsls	r5, r2
    91f0:	4094      	lsls	r4, r2
    91f2:	fa20 f103 	lsr.w	r1, r0, r3
    91f6:	fa2e f303 	lsr.w	r3, lr, r3
    91fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    91fe:	4090      	lsls	r0, r2
    9200:	b2af      	uxth	r7, r5
    9202:	4303      	orrs	r3, r0
    9204:	fbb1 fcfe 	udiv	ip, r1, lr
    9208:	fb0e 101c 	mls	r0, lr, ip, r1
    920c:	0c19      	lsrs	r1, r3, #16
    920e:	fb0c f807 	mul.w	r8, ip, r7
    9212:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    9216:	4588      	cmp	r8, r1
    9218:	d922      	bls.n	9260 <__udivmoddi4+0x18a>
    921a:	1869      	adds	r1, r5, r1
    921c:	f10c 30ff 	add.w	r0, ip, #4294967295
    9220:	d204      	bcs.n	922c <__udivmoddi4+0x156>
    9222:	4588      	cmp	r8, r1
    9224:	d902      	bls.n	922c <__udivmoddi4+0x156>
    9226:	f1ac 0002 	sub.w	r0, ip, #2
    922a:	4429      	add	r1, r5
    922c:	eba1 0108 	sub.w	r1, r1, r8
    9230:	b29b      	uxth	r3, r3
    9232:	fbb1 fcfe 	udiv	ip, r1, lr
    9236:	fb0e 111c 	mls	r1, lr, ip, r1
    923a:	fb0c f707 	mul.w	r7, ip, r7
    923e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    9242:	429f      	cmp	r7, r3
    9244:	d90e      	bls.n	9264 <__udivmoddi4+0x18e>
    9246:	18eb      	adds	r3, r5, r3
    9248:	f10c 31ff 	add.w	r1, ip, #4294967295
    924c:	d204      	bcs.n	9258 <__udivmoddi4+0x182>
    924e:	429f      	cmp	r7, r3
    9250:	d902      	bls.n	9258 <__udivmoddi4+0x182>
    9252:	f1ac 0102 	sub.w	r1, ip, #2
    9256:	442b      	add	r3, r5
    9258:	1bdb      	subs	r3, r3, r7
    925a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    925e:	e793      	b.n	9188 <__udivmoddi4+0xb2>
    9260:	4660      	mov	r0, ip
    9262:	e7e3      	b.n	922c <__udivmoddi4+0x156>
    9264:	4661      	mov	r1, ip
    9266:	e7f7      	b.n	9258 <__udivmoddi4+0x182>
    9268:	4660      	mov	r0, ip
    926a:	e7a4      	b.n	91b6 <__udivmoddi4+0xe0>
    926c:	4663      	mov	r3, ip
    926e:	e7b8      	b.n	91e2 <__udivmoddi4+0x10c>
    9270:	4283      	cmp	r3, r0
    9272:	d906      	bls.n	9282 <__udivmoddi4+0x1ac>
    9274:	b916      	cbnz	r6, 927c <__udivmoddi4+0x1a6>
    9276:	2100      	movs	r1, #0
    9278:	4608      	mov	r0, r1
    927a:	e77c      	b.n	9176 <__udivmoddi4+0xa0>
    927c:	e9c6 e000 	strd	lr, r0, [r6]
    9280:	e7f9      	b.n	9276 <__udivmoddi4+0x1a0>
    9282:	fab3 f783 	clz	r7, r3
    9286:	b98f      	cbnz	r7, 92ac <__udivmoddi4+0x1d6>
    9288:	4283      	cmp	r3, r0
    928a:	d301      	bcc.n	9290 <__udivmoddi4+0x1ba>
    928c:	4572      	cmp	r2, lr
    928e:	d808      	bhi.n	92a2 <__udivmoddi4+0x1cc>
    9290:	ebbe 0402 	subs.w	r4, lr, r2
    9294:	eb60 0303 	sbc.w	r3, r0, r3
    9298:	2001      	movs	r0, #1
    929a:	469c      	mov	ip, r3
    929c:	b91e      	cbnz	r6, 92a6 <__udivmoddi4+0x1d0>
    929e:	2100      	movs	r1, #0
    92a0:	e769      	b.n	9176 <__udivmoddi4+0xa0>
    92a2:	4638      	mov	r0, r7
    92a4:	e7fa      	b.n	929c <__udivmoddi4+0x1c6>
    92a6:	e9c6 4c00 	strd	r4, ip, [r6]
    92aa:	e7f8      	b.n	929e <__udivmoddi4+0x1c8>
    92ac:	f1c7 0c20 	rsb	ip, r7, #32
    92b0:	40bb      	lsls	r3, r7
    92b2:	fa0e f507 	lsl.w	r5, lr, r7
    92b6:	fa22 f40c 	lsr.w	r4, r2, ip
    92ba:	fa2e f10c 	lsr.w	r1, lr, ip
    92be:	40ba      	lsls	r2, r7
    92c0:	431c      	orrs	r4, r3
    92c2:	fa20 f30c 	lsr.w	r3, r0, ip
    92c6:	40b8      	lsls	r0, r7
    92c8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    92cc:	4301      	orrs	r1, r0
    92ce:	fa1f fe84 	uxth.w	lr, r4
    92d2:	fbb3 f8f9 	udiv	r8, r3, r9
    92d6:	fb09 3018 	mls	r0, r9, r8, r3
    92da:	0c0b      	lsrs	r3, r1, #16
    92dc:	fb08 fa0e 	mul.w	sl, r8, lr
    92e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    92e4:	459a      	cmp	sl, r3
    92e6:	d940      	bls.n	936a <__udivmoddi4+0x294>
    92e8:	18e3      	adds	r3, r4, r3
    92ea:	f108 30ff 	add.w	r0, r8, #4294967295
    92ee:	d204      	bcs.n	92fa <__udivmoddi4+0x224>
    92f0:	459a      	cmp	sl, r3
    92f2:	d902      	bls.n	92fa <__udivmoddi4+0x224>
    92f4:	f1a8 0002 	sub.w	r0, r8, #2
    92f8:	4423      	add	r3, r4
    92fa:	eba3 030a 	sub.w	r3, r3, sl
    92fe:	b289      	uxth	r1, r1
    9300:	fbb3 f8f9 	udiv	r8, r3, r9
    9304:	fb09 3318 	mls	r3, r9, r8, r3
    9308:	fb08 fe0e 	mul.w	lr, r8, lr
    930c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    9310:	458e      	cmp	lr, r1
    9312:	d92c      	bls.n	936e <__udivmoddi4+0x298>
    9314:	1861      	adds	r1, r4, r1
    9316:	f108 33ff 	add.w	r3, r8, #4294967295
    931a:	d204      	bcs.n	9326 <__udivmoddi4+0x250>
    931c:	458e      	cmp	lr, r1
    931e:	d902      	bls.n	9326 <__udivmoddi4+0x250>
    9320:	f1a8 0302 	sub.w	r3, r8, #2
    9324:	4421      	add	r1, r4
    9326:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    932a:	eba1 010e 	sub.w	r1, r1, lr
    932e:	fba0 9802 	umull	r9, r8, r0, r2
    9332:	4541      	cmp	r1, r8
    9334:	46ce      	mov	lr, r9
    9336:	4643      	mov	r3, r8
    9338:	d302      	bcc.n	9340 <__udivmoddi4+0x26a>
    933a:	d106      	bne.n	934a <__udivmoddi4+0x274>
    933c:	454d      	cmp	r5, r9
    933e:	d204      	bcs.n	934a <__udivmoddi4+0x274>
    9340:	3801      	subs	r0, #1
    9342:	ebb9 0e02 	subs.w	lr, r9, r2
    9346:	eb68 0304 	sbc.w	r3, r8, r4
    934a:	2e00      	cmp	r6, #0
    934c:	d0a7      	beq.n	929e <__udivmoddi4+0x1c8>
    934e:	ebb5 020e 	subs.w	r2, r5, lr
    9352:	eb61 0103 	sbc.w	r1, r1, r3
    9356:	fa01 fc0c 	lsl.w	ip, r1, ip
    935a:	fa22 f307 	lsr.w	r3, r2, r7
    935e:	40f9      	lsrs	r1, r7
    9360:	ea4c 0303 	orr.w	r3, ip, r3
    9364:	e9c6 3100 	strd	r3, r1, [r6]
    9368:	e799      	b.n	929e <__udivmoddi4+0x1c8>
    936a:	4640      	mov	r0, r8
    936c:	e7c5      	b.n	92fa <__udivmoddi4+0x224>
    936e:	4643      	mov	r3, r8
    9370:	e7d9      	b.n	9326 <__udivmoddi4+0x250>

00009372 <strcmp>:
    9372:	f810 2b01 	ldrb.w	r2, [r0], #1
    9376:	f811 3b01 	ldrb.w	r3, [r1], #1
    937a:	2a01      	cmp	r2, #1
    937c:	bf28      	it	cs
    937e:	429a      	cmpcs	r2, r3
    9380:	d0f7      	beq.n	9372 <strcmp>
    9382:	1ad0      	subs	r0, r2, r3
    9384:	4770      	bx	lr

00009386 <strlen>:
    9386:	4603      	mov	r3, r0
    9388:	f813 2b01 	ldrb.w	r2, [r3], #1
    938c:	2a00      	cmp	r2, #0
    938e:	d1fb      	bne.n	9388 <strlen+0x2>
    9390:	1a18      	subs	r0, r3, r0
    9392:	3801      	subs	r0, #1
    9394:	4770      	bx	lr
	...

00009398 <ntc_temperature>:
  printf("Beta=%f\n",beta);
  return beta;
 
}
  
float ntc_temperature(uint16_t conversao,uint8_t sensor_number){
    9398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    939a:	460c      	mov	r4, r1
  //sources:  https://blog.eletrogate.com/termistor-ntc-para-controle-de-temperatura/
  //          https://elcereza.com/termistor/
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    939c:	f7ff f82e 	bl	83fc <__aeabi_i2d>
    93a0:	a325      	add	r3, pc, #148	; (adr r3, 9438 <ntc_temperature+0xa0>)
    93a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    93a6:	f7ff f893 	bl	84d0 <__aeabi_dmul>
    93aa:	f7ff faa3 	bl	88f4 <__aeabi_d2f>
    93ae:	4605      	mov	r5, r0
  //printf("voltageUC=%f\n",voltageUc);

  float resistor=0;
  switch (sensor_number){
    93b0:	1e63      	subs	r3, r4, #1
    93b2:	b2db      	uxtb	r3, r3
    93b4:	2b02      	cmp	r3, #2
    93b6:	bf96      	itet	ls
    93b8:	4a27      	ldrls	r2, [pc, #156]	; (9458 <ntc_temperature+0xc0>)
  float voltageUc = conversao*(ADC_VOLTAGE_REF/(ADC_RESOLUTION-1));
    93ba:	2000      	movhi	r0, #0
    93bc:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
    case NTC_1: resistor=RESISTOR_SERIE_NTC1;break;
    case NTC_2: resistor=RESISTOR_SERIE_NTC2;break;
    case NTC_3: resistor=RESISTOR_SERIE_NTC3;break;
  }

  float Rt =  (voltageUc*resistor)/(VOLTAGE_ALIM-voltageUc);
    93c0:	4629      	mov	r1, r5
    93c2:	f7ff fbf5 	bl	8bb0 <__aeabi_fmul>
    93c6:	f7ff f82b 	bl	8420 <__aeabi_f2d>
    93ca:	4606      	mov	r6, r0
    93cc:	4628      	mov	r0, r5
    93ce:	460f      	mov	r7, r1
    93d0:	f7ff f826 	bl	8420 <__aeabi_f2d>
    93d4:	4602      	mov	r2, r0
    93d6:	460b      	mov	r3, r1
    93d8:	2000      	movs	r0, #0
    93da:	4920      	ldr	r1, [pc, #128]	; (945c <ntc_temperature+0xc4>)
    93dc:	f7fe fec0 	bl	8160 <__aeabi_dsub>
    93e0:	4602      	mov	r2, r0
    93e2:	460b      	mov	r3, r1
    93e4:	4630      	mov	r0, r6
    93e6:	4639      	mov	r1, r7
    93e8:	f7ff f99c 	bl	8724 <__aeabi_ddiv>
    93ec:	f7ff fa82 	bl	88f4 <__aeabi_d2f>
  //printf("Rt=%f\n",Rt);
  float T = 1 /( 1 / TERMISTOR_KELVIN_25 + log(Rt / TERMISTOR_RES_25) / TERMISTOR_BETA ); 
    93f0:	491b      	ldr	r1, [pc, #108]	; (9460 <ntc_temperature+0xc8>)
    93f2:	f7ff fc91 	bl	8d18 <__aeabi_fdiv>
    93f6:	f7ff f813 	bl	8420 <__aeabi_f2d>
    93fa:	f01f f92b 	bl	28654 <log>
    93fe:	a310      	add	r3, pc, #64	; (adr r3, 9440 <ntc_temperature+0xa8>)
    9400:	e9d3 2300 	ldrd	r2, r3, [r3]
    9404:	f7ff f98e 	bl	8724 <__aeabi_ddiv>
    9408:	a30f      	add	r3, pc, #60	; (adr r3, 9448 <ntc_temperature+0xb0>)
    940a:	e9d3 2300 	ldrd	r2, r3, [r3]
    940e:	f7fe fea9 	bl	8164 <__adddf3>
    9412:	4602      	mov	r2, r0
    9414:	460b      	mov	r3, r1
    9416:	2000      	movs	r0, #0
    9418:	4912      	ldr	r1, [pc, #72]	; (9464 <ntc_temperature+0xcc>)
    941a:	f7ff f983 	bl	8724 <__aeabi_ddiv>
    941e:	f7ff fa69 	bl	88f4 <__aeabi_d2f>
  //printf("T=%f\n",T);
  float Tc = T - 273.15; 
    9422:	f7fe fffd 	bl	8420 <__aeabi_f2d>
    9426:	a30a      	add	r3, pc, #40	; (adr r3, 9450 <ntc_temperature+0xb8>)
    9428:	e9d3 2300 	ldrd	r2, r3, [r3]
    942c:	f7fe fe98 	bl	8160 <__aeabi_dsub>
    9430:	f7ff fa60 	bl	88f4 <__aeabi_d2f>
  //printf("Tc=%f\n",Tc);
  return Tc;
}
    9434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9436:	bf00      	nop
    9438:	3a66a002 	.word	0x3a66a002
    943c:	3f2ccdb3 	.word	0x3f2ccdb3
    9440:	00000000 	.word	0x00000000
    9444:	40af0200 	.word	0x40af0200
    9448:	dcb5db83 	.word	0xdcb5db83
    944c:	3f6b79e1 	.word	0x3f6b79e1
    9450:	66666666 	.word	0x66666666
    9454:	40711266 	.word	0x40711266
    9458:	00031930 	.word	0x00031930
    945c:	40080000 	.word	0x40080000
    9460:	461c4000 	.word	0x461c4000
    9464:	3ff00000 	.word	0x3ff00000

00009468 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    9468:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    946a:	4d65      	ldr	r5, [pc, #404]	; (9600 <bt_init+0x198>)
{
    946c:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    946e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
    9472:	6899      	ldr	r1, [r3, #8]
    9474:	f011 0101 	ands.w	r1, r1, #1
    9478:	d11a      	bne.n	94b0 <bt_init+0x48>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    947a:	f640 4003 	movw	r0, #3075	; 0xc03
    947e:	aa01      	add	r2, sp, #4
    9480:	f009 f9f8 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    9484:	4604      	mov	r4, r0
    9486:	2800      	cmp	r0, #0
    9488:	f040 80b6 	bne.w	95f8 <bt_init+0x190>
		hci_reset_complete(rsp);
    948c:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
    948e:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	b95b      	cbnz	r3, 94ac <bt_init+0x44>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9494:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9498:	e8d3 2faf 	lda	r2, [r3]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    949c:	f002 0209 	and.w	r2, r2, #9
    94a0:	e8d3 1fef 	ldaex	r1, [r3]
    94a4:	e8c3 2fe4 	stlex	r4, r2, [r3]
    94a8:	2c00      	cmp	r4, #0
    94aa:	d1f9      	bne.n	94a0 <bt_init+0x38>
		net_buf_unref(rsp);
    94ac:	f012 f87c 	bl	1b5a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    94b0:	2100      	movs	r1, #0
    94b2:	f241 0003 	movw	r0, #4099	; 0x1003
    94b6:	aa01      	add	r2, sp, #4
    94b8:	f009 f9dc 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    94bc:	4604      	mov	r4, r0
    94be:	2800      	cmp	r0, #0
    94c0:	f040 809a 	bne.w	95f8 <bt_init+0x190>
	read_local_features_complete(rsp);
    94c4:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94c6:	4e4f      	ldr	r6, [pc, #316]	; (9604 <bt_init+0x19c>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    94c8:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    94ca:	f8d2 0001 	ldr.w	r0, [r2, #1]
    94ce:	f8d2 1005 	ldr.w	r1, [r2, #5]
    94d2:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    94d4:	4618      	mov	r0, r3
    94d6:	f012 f867 	bl	1b5a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    94da:	4621      	mov	r1, r4
    94dc:	f241 0001 	movw	r0, #4097	; 0x1001
    94e0:	aa01      	add	r2, sp, #4
    94e2:	f009 f9c7 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    94e6:	4604      	mov	r4, r0
    94e8:	2800      	cmp	r0, #0
    94ea:	f040 8085 	bne.w	95f8 <bt_init+0x190>
	read_local_ver_complete(rsp);
    94ee:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    94f0:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    94f2:	785a      	ldrb	r2, [r3, #1]
    94f4:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    94f8:	885a      	ldrh	r2, [r3, #2]
    94fa:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    94fe:	791a      	ldrb	r2, [r3, #4]
    9500:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    9504:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    9508:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    950c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    9510:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    9514:	f012 f848 	bl	1b5a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    9518:	4621      	mov	r1, r4
    951a:	f241 0002 	movw	r0, #4098	; 0x1002
    951e:	aa01      	add	r2, sp, #4
    9520:	f009 f9a8 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    9524:	4604      	mov	r4, r0
    9526:	2800      	cmp	r0, #0
    9528:	d166      	bne.n	95f8 <bt_init+0x190>
	read_supported_commands_complete(rsp);
    952a:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    952c:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
    952e:	1c53      	adds	r3, r2, #1
    9530:	3241      	adds	r2, #65	; 0x41
    9532:	4634      	mov	r4, r6
    9534:	6818      	ldr	r0, [r3, #0]
    9536:	6859      	ldr	r1, [r3, #4]
    9538:	3308      	adds	r3, #8
    953a:	c403      	stmia	r4!, {r0, r1}
    953c:	4293      	cmp	r3, r2
    953e:	4626      	mov	r6, r4
    9540:	d1f7      	bne.n	9532 <bt_init+0xca>
	net_buf_unref(rsp);
    9542:	4638      	mov	r0, r7
    9544:	f012 f830 	bl	1b5a8 <net_buf_unref>
		err = prng_init();
    9548:	f00a ffe4 	bl	14514 <prng_init>
		if (err) {
    954c:	4604      	mov	r4, r0
    954e:	2800      	cmp	r0, #0
    9550:	d152      	bne.n	95f8 <bt_init+0x190>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    9552:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    9556:	069a      	lsls	r2, r3, #26
    9558:	d41a      	bmi.n	9590 <bt_init+0x128>
		LOG_WRN("Controller to host flow control not supported");
    955a:	4b2b      	ldr	r3, [pc, #172]	; (9608 <bt_init+0x1a0>)
    955c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9560:	9307      	str	r3, [sp, #28]
    9562:	2302      	movs	r3, #2
    9564:	4829      	ldr	r0, [pc, #164]	; (960c <bt_init+0x1a4>)
    9566:	aa06      	add	r2, sp, #24
    9568:	9306      	str	r3, [sp, #24]
    956a:	f022 fd40 	bl	2bfee <z_log_msg_static_create.constprop.0>
	if (!BT_FEAT_LE(bt_dev.features)) {
    956e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    9572:	065b      	lsls	r3, r3, #25
    9574:	d44e      	bmi.n	9614 <bt_init+0x1ac>
		LOG_ERR("Non-LE capable controller detected!");
    9576:	4b26      	ldr	r3, [pc, #152]	; (9610 <bt_init+0x1a8>)
    9578:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    957c:	9307      	str	r3, [sp, #28]
    957e:	2302      	movs	r3, #2
    9580:	4822      	ldr	r0, [pc, #136]	; (960c <bt_init+0x1a4>)
    9582:	aa06      	add	r2, sp, #24
    9584:	9306      	str	r3, [sp, #24]
		return -ENODEV;
    9586:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    958a:	f022 fd30 	bl	2bfee <z_log_msg_static_create.constprop.0>
	if (err) {
    958e:	e033      	b.n	95f8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    9590:	2107      	movs	r1, #7
    9592:	f640 4033 	movw	r0, #3123	; 0xc33
    9596:	f009 f91f 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
    959a:	4606      	mov	r6, r0
    959c:	2800      	cmp	r0, #0
    959e:	f000 8141 	beq.w	9824 <bt_init+0x3bc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    95a2:	2107      	movs	r1, #7
    95a4:	300c      	adds	r0, #12
    95a6:	f012 f921 	bl	1b7ec <net_buf_simple_add>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95aa:	2345      	movs	r3, #69	; 0x45
    95ac:	7003      	strb	r3, [r0, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95ae:	2306      	movs	r3, #6

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    95b0:	f8c0 4002 	str.w	r4, [r0, #2]
    95b4:	7184      	strb	r4, [r0, #6]
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
    95b6:	7044      	strb	r4, [r0, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95b8:	7104      	strb	r4, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95ba:	4622      	mov	r2, r4
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
    95bc:	70c3      	strb	r3, [r0, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    95be:	4631      	mov	r1, r6
    95c0:	f640 4033 	movw	r0, #3123	; 0xc33
    95c4:	f009 f956 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    95c8:	4604      	mov	r4, r0
    95ca:	b9a8      	cbnz	r0, 95f8 <bt_init+0x190>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    95cc:	2101      	movs	r1, #1
    95ce:	f640 4031 	movw	r0, #3121	; 0xc31
    95d2:	f009 f901 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
    95d6:	4606      	mov	r6, r0
    95d8:	2800      	cmp	r0, #0
    95da:	f000 8123 	beq.w	9824 <bt_init+0x3bc>
 *
 * @return Pointer to the value added
 */
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
	return net_buf_simple_add_u8(&buf->b, val);
    95de:	2101      	movs	r1, #1
    95e0:	300c      	adds	r0, #12
    95e2:	f024 fd34 	bl	2e04e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    95e6:	4622      	mov	r2, r4
    95e8:	4631      	mov	r1, r6
    95ea:	f640 4031 	movw	r0, #3121	; 0xc31
    95ee:	f009 f941 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    95f2:	4604      	mov	r4, r0
    95f4:	2800      	cmp	r0, #0
    95f6:	d0ba      	beq.n	956e <bt_init+0x106>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    95f8:	4620      	mov	r0, r4
    95fa:	b009      	add	sp, #36	; 0x24
    95fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95fe:	bf00      	nop
    9600:	20008000 	.word	0x20008000
    9604:	20008070 	.word	0x20008070
    9608:	00034cf2 	.word	0x00034cf2
    960c:	000314fc 	.word	0x000314fc
    9610:	00034d20 	.word	0x00034d20
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    9614:	2100      	movs	r1, #0
    9616:	f242 0003 	movw	r0, #8195	; 0x2003
    961a:	aa02      	add	r2, sp, #8
    961c:	f009 f92a 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    9620:	4604      	mov	r4, r0
    9622:	2800      	cmp	r0, #0
    9624:	d1e8      	bne.n	95f8 <bt_init+0x190>
	read_le_features_complete(rsp);
    9626:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    9628:	4ebf      	ldr	r6, [pc, #764]	; (9928 <bt_init+0x4c0>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    962a:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    962c:	f8d2 0001 	ldr.w	r0, [r2, #1]
    9630:	f8d2 1005 	ldr.w	r1, [r2, #5]
    9634:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    9636:	4618      	mov	r0, r3
    9638:	f011 ffb6 	bl	1b5a8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    963c:	4621      	mov	r1, r4
    963e:	f242 0002 	movw	r0, #8194	; 0x2002
    9642:	aa02      	add	r2, sp, #8
    9644:	f009 f916 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    9648:	4604      	mov	r4, r0
    964a:	2800      	cmp	r0, #0
    964c:	d1d4      	bne.n	95f8 <bt_init+0x190>
		le_read_buffer_size_complete(rsp);
    964e:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    9650:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    9652:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9656:	b291      	uxth	r1, r2
    9658:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
    965c:	b129      	cbz	r1, 966a <bt_init+0x202>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    965e:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    9660:	4611      	mov	r1, r2
    9662:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9666:	f026 fdd0 	bl	3020a <z_impl_k_sem_init>
		net_buf_unref(rsp);
    966a:	4620      	mov	r0, r4
    966c:	f011 ff9c 	bl	1b5a8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    9670:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    9674:	f016 0620 	ands.w	r6, r6, #32
    9678:	d118      	bne.n	96ac <bt_init+0x244>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    967a:	2102      	movs	r1, #2
    967c:	f640 406d 	movw	r0, #3181	; 0xc6d
    9680:	f009 f8aa 	bl	127d8 <bt_hci_cmd_create>
		if (!buf) {
    9684:	4604      	mov	r4, r0
    9686:	2800      	cmp	r0, #0
    9688:	f000 80cc 	beq.w	9824 <bt_init+0x3bc>
	return net_buf_simple_add(&buf->b, len);
    968c:	2102      	movs	r1, #2
    968e:	300c      	adds	r0, #12
    9690:	f012 f8ac 	bl	1b7ec <net_buf_simple_add>
		cp_le->le = 0x01;
    9694:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    9696:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    9698:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    969a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    969c:	4632      	mov	r2, r6
    969e:	f640 406d 	movw	r0, #3181	; 0xc6d
    96a2:	f009 f8e7 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    96a6:	4604      	mov	r4, r0
    96a8:	2800      	cmp	r0, #0
    96aa:	d1a5      	bne.n	95f8 <bt_init+0x190>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    96ac:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    96b0:	071f      	lsls	r7, r3, #28
    96b2:	d512      	bpl.n	96da <bt_init+0x272>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    96b4:	2100      	movs	r1, #0
    96b6:	f242 001c 	movw	r0, #8220	; 0x201c
    96ba:	aa02      	add	r2, sp, #8
    96bc:	f009 f8da 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    96c0:	4604      	mov	r4, r0
    96c2:	2800      	cmp	r0, #0
    96c4:	d198      	bne.n	95f8 <bt_init+0x190>
		le_read_supp_states_complete(rsp);
    96c6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    96c8:	68c3      	ldr	r3, [r0, #12]
    96ca:	f8d3 2001 	ldr.w	r2, [r3, #1]
    96ce:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    96d2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    96d6:	f011 ff67 	bl	1b5a8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    96da:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    96de:	069e      	lsls	r6, r3, #26
    96e0:	d524      	bpl.n	972c <bt_init+0x2c4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    96e2:	a901      	add	r1, sp, #4
    96e4:	f10d 0002 	add.w	r0, sp, #2
    96e8:	f009 f940 	bl	1296c <hci_le_read_max_data_len>
		if (err) {
    96ec:	4604      	mov	r4, r0
    96ee:	2800      	cmp	r0, #0
    96f0:	d182      	bne.n	95f8 <bt_init+0x190>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    96f2:	2104      	movs	r1, #4
    96f4:	f242 0024 	movw	r0, #8228	; 0x2024
    96f8:	f009 f86e 	bl	127d8 <bt_hci_cmd_create>
		if (!buf) {
    96fc:	4606      	mov	r6, r0
    96fe:	2800      	cmp	r0, #0
    9700:	f000 8090 	beq.w	9824 <bt_init+0x3bc>
    9704:	2104      	movs	r1, #4
    9706:	300c      	adds	r0, #12
    9708:	f012 f870 	bl	1b7ec <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    970c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9710:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    9712:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    9714:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    9718:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    971a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    971c:	f242 0024 	movw	r0, #8228	; 0x2024
    9720:	f009 f8a8 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    9724:	4604      	mov	r4, r0
    9726:	2800      	cmp	r0, #0
    9728:	f47f af66 	bne.w	95f8 <bt_init+0x190>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    972c:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9730:	065c      	lsls	r4, r3, #25
    9732:	d510      	bpl.n	9756 <bt_init+0x2ee>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    9734:	2100      	movs	r1, #0
    9736:	f242 002a 	movw	r0, #8234	; 0x202a
    973a:	aa02      	add	r2, sp, #8
    973c:	f009 f89a 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    9740:	4604      	mov	r4, r0
    9742:	2800      	cmp	r0, #0
    9744:	f47f af58 	bne.w	95f8 <bt_init+0x190>
		le_read_resolving_list_size_complete(rsp);
    9748:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    974a:	68c3      	ldr	r3, [r0, #12]
    974c:	785b      	ldrb	r3, [r3, #1]
    974e:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    9752:	f011 ff29 	bl	1b5a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    9756:	2108      	movs	r1, #8
    9758:	f242 0001 	movw	r0, #8193	; 0x2001
    975c:	f009 f83c 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
    9760:	4604      	mov	r4, r0
    9762:	2800      	cmp	r0, #0
    9764:	d05e      	beq.n	9824 <bt_init+0x3bc>
    9766:	2108      	movs	r1, #8
    9768:	300c      	adds	r0, #12
    976a:	f012 f83f 	bl	1b7ec <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    976e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    9772:	f240 2302 	movw	r3, #514	; 0x202
    9776:	f011 0f40 	tst.w	r1, #64	; 0x40
    977a:	bf08      	it	eq
    977c:	2303      	moveq	r3, #3
    977e:	4602      	mov	r2, r0
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    9780:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    9782:	bf4c      	ite	mi
    9784:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    9788:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    978c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    9790:	068f      	lsls	r7, r1, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    9792:	bf48      	it	mi
    9794:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    9798:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    979c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    97a0:	bf18      	it	ne
    97a2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97a6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    97aa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    97ac:	bf48      	it	mi
    97ae:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    97b2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    97b4:	bf08      	it	eq
    97b6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    97ba:	2100      	movs	r1, #0
    97bc:	f022 fc22 	bl	2c004 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    97c0:	4621      	mov	r1, r4
    97c2:	2200      	movs	r2, #0
    97c4:	f242 0001 	movw	r0, #8193	; 0x2001
    97c8:	f009 f854 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    97cc:	4604      	mov	r4, r0
    97ce:	2800      	cmp	r0, #0
    97d0:	f47f af12 	bne.w	95f8 <bt_init+0x190>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97d4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    97d8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    97dc:	0698      	lsls	r0, r3, #26
    97de:	d424      	bmi.n	982a <bt_init+0x3c2>
	if (bt_dev.le.acl_mtu) {
    97e0:	b9c9      	cbnz	r1, 9816 <bt_init+0x3ae>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    97e2:	f241 0005 	movw	r0, #4101	; 0x1005
    97e6:	aa02      	add	r2, sp, #8
    97e8:	f009 f844 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    97ec:	4604      	mov	r4, r0
    97ee:	2800      	cmp	r0, #0
    97f0:	f47f af02 	bne.w	95f8 <bt_init+0x190>
	if (bt_dev.le.acl_mtu) {
    97f4:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
    97f8:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
    97fa:	b94b      	cbnz	r3, 9810 <bt_init+0x3a8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    97fc:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    97fe:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9802:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    9806:	889a      	ldrh	r2, [r3, #4]
    9808:	4848      	ldr	r0, [pc, #288]	; (992c <bt_init+0x4c4>)
    980a:	4611      	mov	r1, r2
    980c:	f026 fcfd 	bl	3020a <z_impl_k_sem_init>
	net_buf_unref(rsp);
    9810:	4620      	mov	r0, r4
    9812:	f011 fec9 	bl	1b5a8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    9816:	2108      	movs	r1, #8
    9818:	f640 4001 	movw	r0, #3073	; 0xc01
    981c:	f008 ffdc 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
    9820:	4604      	mov	r4, r0
    9822:	b988      	cbnz	r0, 9848 <bt_init+0x3e0>
		return -ENOBUFS;
    9824:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9828:	e6e6      	b.n	95f8 <bt_init+0x190>
	else if (!bt_dev.le.acl_mtu) {
    982a:	2900      	cmp	r1, #0
    982c:	d1f3      	bne.n	9816 <bt_init+0x3ae>
		LOG_ERR("ACL BR/EDR buffers not initialized");
    982e:	4b40      	ldr	r3, [pc, #256]	; (9930 <bt_init+0x4c8>)
    9830:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9834:	9307      	str	r3, [sp, #28]
    9836:	2302      	movs	r3, #2
    9838:	483e      	ldr	r0, [pc, #248]	; (9934 <bt_init+0x4cc>)
    983a:	aa06      	add	r2, sp, #24
    983c:	9306      	str	r3, [sp, #24]
		return -EIO;
    983e:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
    9842:	f022 fbd4 	bl	2bfee <z_log_msg_static_create.constprop.0>
	if (err) {
    9846:	e6d7      	b.n	95f8 <bt_init+0x190>
    9848:	2108      	movs	r1, #8
    984a:	300c      	adds	r0, #12
    984c:	f011 ffce 	bl	1b7ec <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9850:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    9854:	4602      	mov	r2, r0
    9856:	07d9      	lsls	r1, r3, #31
    9858:	d431      	bmi.n	98be <bt_init+0x456>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    985a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    985e:	4836      	ldr	r0, [pc, #216]	; (9938 <bt_init+0x4d0>)
	sys_put_le64(mask, ev->events);
    9860:	f022 fbd0 	bl	2c004 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    9864:	4621      	mov	r1, r4
    9866:	2200      	movs	r2, #0
    9868:	f640 4001 	movw	r0, #3073	; 0xc01
    986c:	f009 f802 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    9870:	4604      	mov	r4, r0
    9872:	2800      	cmp	r0, #0
    9874:	f47f aec0 	bne.w	95f8 <bt_init+0x190>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    9878:	4601      	mov	r1, r0
    987a:	aa01      	add	r2, sp, #4
    987c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    9880:	f008 fff8 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    9884:	4604      	mov	r4, r0
    9886:	b1f0      	cbz	r0, 98c6 <bt_init+0x45e>
		LOG_WRN("Vendor HCI extensions not available");
    9888:	4b2c      	ldr	r3, [pc, #176]	; (993c <bt_init+0x4d4>)
			LOG_WRN("Failed to read supported vendor features");
    988a:	9307      	str	r3, [sp, #28]
    988c:	2302      	movs	r3, #2
    988e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9892:	4828      	ldr	r0, [pc, #160]	; (9934 <bt_init+0x4cc>)
    9894:	aa06      	add	r2, sp, #24
    9896:	9306      	str	r3, [sp, #24]
    9898:	f022 fba9 	bl	2bfee <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    989c:	f022 fd46 	bl	2c32c <bt_id_init>
	if (err) {
    98a0:	4604      	mov	r4, r0
    98a2:	2800      	cmp	r0, #0
    98a4:	f47f aea8 	bne.w	95f8 <bt_init+0x190>
		err = bt_conn_init();
    98a8:	f00b ffd0 	bl	1584c <bt_conn_init>
		if (err) {
    98ac:	4604      	mov	r4, r0
    98ae:	2800      	cmp	r0, #0
    98b0:	f47f aea2 	bne.w	95f8 <bt_init+0x190>
}
    98b4:	b009      	add	sp, #36	; 0x24
    98b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    98ba:	f009 bdf7 	b.w	134ac <bt_init.part.0>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    98be:	a118      	add	r1, pc, #96	; (adr r1, 9920 <bt_init+0x4b8>)
    98c0:	e9d1 0100 	ldrd	r0, r1, [r1]
    98c4:	e7cc      	b.n	9860 <bt_init+0x3f8>
	net_buf_unref(rsp);
    98c6:	9801      	ldr	r0, [sp, #4]
    98c8:	f011 fe6e 	bl	1b5a8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    98cc:	4621      	mov	r1, r4
    98ce:	f64f 4002 	movw	r0, #64514	; 0xfc02
    98d2:	aa01      	add	r2, sp, #4
    98d4:	f008 ffce 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
    98d8:	4604      	mov	r4, r0
    98da:	b108      	cbz	r0, 98e0 <bt_init+0x478>
		LOG_WRN("Failed to read supported vendor commands");
    98dc:	4b18      	ldr	r3, [pc, #96]	; (9940 <bt_init+0x4d8>)
    98de:	e7d4      	b.n	988a <bt_init+0x422>
	rp.cmds = (void *)rsp->data;
    98e0:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    98e2:	68c3      	ldr	r3, [r0, #12]
    98e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    98e8:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    98ec:	f011 fe5c 	bl	1b5a8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    98f0:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    98f4:	075b      	lsls	r3, r3, #29
    98f6:	d5d1      	bpl.n	989c <bt_init+0x434>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    98f8:	4621      	mov	r1, r4
    98fa:	f64f 4003 	movw	r0, #64515	; 0xfc03
    98fe:	aa01      	add	r2, sp, #4
    9900:	f008 ffb8 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
    9904:	b108      	cbz	r0, 990a <bt_init+0x4a2>
			LOG_WRN("Failed to read supported vendor features");
    9906:	4b0f      	ldr	r3, [pc, #60]	; (9944 <bt_init+0x4dc>)
    9908:	e7bf      	b.n	988a <bt_init+0x422>
		rp.feat = (void *)rsp->data;
    990a:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    990c:	68c3      	ldr	r3, [r0, #12]
    990e:	785b      	ldrb	r3, [r3, #1]
    9910:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    9914:	f011 fe48 	bl	1b5a8 <net_buf_unref>
    9918:	e7c0      	b.n	989c <bt_init+0x434>
    991a:	bf00      	nop
    991c:	f3af 8000 	nop.w
    9920:	02008890 	.word	0x02008890
    9924:	20008000 	.word	0x20008000
    9928:	200080d0 	.word	0x200080d0
    992c:	20008100 	.word	0x20008100
    9930:	00034d44 	.word	0x00034d44
    9934:	000314fc 	.word	0x000314fc
    9938:	02008810 	.word	0x02008810
    993c:	00034d67 	.word	0x00034d67
    9940:	00034d8b 	.word	0x00034d8b
    9944:	00034db4 	.word	0x00034db4

00009948 <__ieee754_log>:
    9948:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    994c:	4602      	mov	r2, r0
    994e:	460b      	mov	r3, r1
    9950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9954:	460d      	mov	r5, r1
    9956:	b087      	sub	sp, #28
    9958:	da24      	bge.n	99a4 <__ieee754_log+0x5c>
    995a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    995e:	4304      	orrs	r4, r0
    9960:	d108      	bne.n	9974 <__ieee754_log+0x2c>
    9962:	2200      	movs	r2, #0
    9964:	2300      	movs	r3, #0
    9966:	2000      	movs	r0, #0
    9968:	49c9      	ldr	r1, [pc, #804]	; (9c90 <__ieee754_log+0x348>)
    996a:	f7fe fedb 	bl	8724 <__aeabi_ddiv>
    996e:	b007      	add	sp, #28
    9970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9974:	2900      	cmp	r1, #0
    9976:	da04      	bge.n	9982 <__ieee754_log+0x3a>
    9978:	f7fe fbf2 	bl	8160 <__aeabi_dsub>
    997c:	2200      	movs	r2, #0
    997e:	2300      	movs	r3, #0
    9980:	e7f3      	b.n	996a <__ieee754_log+0x22>
    9982:	2200      	movs	r2, #0
    9984:	4bc3      	ldr	r3, [pc, #780]	; (9c94 <__ieee754_log+0x34c>)
    9986:	f7fe fda3 	bl	84d0 <__aeabi_dmul>
    998a:	460b      	mov	r3, r1
    998c:	460d      	mov	r5, r1
    998e:	4602      	mov	r2, r0
    9990:	f06f 0135 	mvn.w	r1, #53	; 0x35
    9994:	48c0      	ldr	r0, [pc, #768]	; (9c98 <__ieee754_log+0x350>)
    9996:	4285      	cmp	r5, r0
    9998:	dd06      	ble.n	99a8 <__ieee754_log+0x60>
    999a:	4610      	mov	r0, r2
    999c:	4619      	mov	r1, r3
    999e:	f7fe fbe1 	bl	8164 <__adddf3>
    99a2:	e7e4      	b.n	996e <__ieee754_log+0x26>
    99a4:	2100      	movs	r1, #0
    99a6:	e7f5      	b.n	9994 <__ieee754_log+0x4c>
    99a8:	152c      	asrs	r4, r5, #20
    99aa:	f3c5 0513 	ubfx	r5, r5, #0, #20
    99ae:	4610      	mov	r0, r2
    99b0:	2200      	movs	r2, #0
    99b2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    99b6:	440c      	add	r4, r1
    99b8:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
    99bc:	f601 7164 	addw	r1, r1, #3940	; 0xf64
    99c0:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
    99c4:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
    99c8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    99cc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
    99d0:	ea41 0305 	orr.w	r3, r1, r5
    99d4:	4619      	mov	r1, r3
    99d6:	4bb1      	ldr	r3, [pc, #708]	; (9c9c <__ieee754_log+0x354>)
    99d8:	f7fe fbc2 	bl	8160 <__aeabi_dsub>
    99dc:	1cab      	adds	r3, r5, #2
    99de:	4682      	mov	sl, r0
    99e0:	468b      	mov	fp, r1
    99e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    99e6:	2200      	movs	r2, #0
    99e8:	2b02      	cmp	r3, #2
    99ea:	dc53      	bgt.n	9a94 <__ieee754_log+0x14c>
    99ec:	2300      	movs	r3, #0
    99ee:	f7ff faef 	bl	8fd0 <__aeabi_dcmpeq>
    99f2:	b1d0      	cbz	r0, 9a2a <__ieee754_log+0xe2>
    99f4:	2c00      	cmp	r4, #0
    99f6:	f000 8120 	beq.w	9c3a <__ieee754_log+0x2f2>
    99fa:	4620      	mov	r0, r4
    99fc:	f7fe fcfe 	bl	83fc <__aeabi_i2d>
    9a00:	4606      	mov	r6, r0
    9a02:	460f      	mov	r7, r1
    9a04:	a38e      	add	r3, pc, #568	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9a06:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a0a:	f7fe fd61 	bl	84d0 <__aeabi_dmul>
    9a0e:	4604      	mov	r4, r0
    9a10:	460d      	mov	r5, r1
    9a12:	4630      	mov	r0, r6
    9a14:	4639      	mov	r1, r7
    9a16:	a38c      	add	r3, pc, #560	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9a18:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a1c:	f7fe fd58 	bl	84d0 <__aeabi_dmul>
    9a20:	4602      	mov	r2, r0
    9a22:	460b      	mov	r3, r1
    9a24:	4620      	mov	r0, r4
    9a26:	4629      	mov	r1, r5
    9a28:	e7b9      	b.n	999e <__ieee754_log+0x56>
    9a2a:	a389      	add	r3, pc, #548	; (adr r3, 9c50 <__ieee754_log+0x308>)
    9a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a30:	4650      	mov	r0, sl
    9a32:	4659      	mov	r1, fp
    9a34:	f7fe fd4c 	bl	84d0 <__aeabi_dmul>
    9a38:	4602      	mov	r2, r0
    9a3a:	460b      	mov	r3, r1
    9a3c:	2000      	movs	r0, #0
    9a3e:	4998      	ldr	r1, [pc, #608]	; (9ca0 <__ieee754_log+0x358>)
    9a40:	f7fe fb8e 	bl	8160 <__aeabi_dsub>
    9a44:	4606      	mov	r6, r0
    9a46:	460f      	mov	r7, r1
    9a48:	4652      	mov	r2, sl
    9a4a:	465b      	mov	r3, fp
    9a4c:	4650      	mov	r0, sl
    9a4e:	4659      	mov	r1, fp
    9a50:	f7fe fd3e 	bl	84d0 <__aeabi_dmul>
    9a54:	4602      	mov	r2, r0
    9a56:	460b      	mov	r3, r1
    9a58:	4630      	mov	r0, r6
    9a5a:	4639      	mov	r1, r7
    9a5c:	f7fe fd38 	bl	84d0 <__aeabi_dmul>
    9a60:	4606      	mov	r6, r0
    9a62:	460f      	mov	r7, r1
    9a64:	b914      	cbnz	r4, 9a6c <__ieee754_log+0x124>
    9a66:	4632      	mov	r2, r6
    9a68:	463b      	mov	r3, r7
    9a6a:	e0a0      	b.n	9bae <__ieee754_log+0x266>
    9a6c:	4620      	mov	r0, r4
    9a6e:	f7fe fcc5 	bl	83fc <__aeabi_i2d>
    9a72:	4680      	mov	r8, r0
    9a74:	4689      	mov	r9, r1
    9a76:	a372      	add	r3, pc, #456	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9a78:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a7c:	f7fe fd28 	bl	84d0 <__aeabi_dmul>
    9a80:	4604      	mov	r4, r0
    9a82:	460d      	mov	r5, r1
    9a84:	4640      	mov	r0, r8
    9a86:	4649      	mov	r1, r9
    9a88:	a36f      	add	r3, pc, #444	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a8e:	f7fe fd1f 	bl	84d0 <__aeabi_dmul>
    9a92:	e0a5      	b.n	9be0 <__ieee754_log+0x298>
    9a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a98:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
    9a9c:	f7fe fb62 	bl	8164 <__adddf3>
    9aa0:	4602      	mov	r2, r0
    9aa2:	460b      	mov	r3, r1
    9aa4:	4650      	mov	r0, sl
    9aa6:	4659      	mov	r1, fp
    9aa8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    9aac:	f7fe fe3a 	bl	8724 <__aeabi_ddiv>
    9ab0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
    9ab4:	3551      	adds	r5, #81	; 0x51
    9ab6:	e9cd 0100 	strd	r0, r1, [sp]
    9aba:	4620      	mov	r0, r4
    9abc:	4335      	orrs	r5, r6
    9abe:	f7fe fc9d 	bl	83fc <__aeabi_i2d>
    9ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
    9ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9aca:	4610      	mov	r0, r2
    9acc:	4619      	mov	r1, r3
    9ace:	f7fe fcff 	bl	84d0 <__aeabi_dmul>
    9ad2:	4602      	mov	r2, r0
    9ad4:	460b      	mov	r3, r1
    9ad6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    9ada:	f7fe fcf9 	bl	84d0 <__aeabi_dmul>
    9ade:	4680      	mov	r8, r0
    9ae0:	4689      	mov	r9, r1
    9ae2:	a35d      	add	r3, pc, #372	; (adr r3, 9c58 <__ieee754_log+0x310>)
    9ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ae8:	f7fe fcf2 	bl	84d0 <__aeabi_dmul>
    9aec:	a35c      	add	r3, pc, #368	; (adr r3, 9c60 <__ieee754_log+0x318>)
    9aee:	e9d3 2300 	ldrd	r2, r3, [r3]
    9af2:	f7fe fb37 	bl	8164 <__adddf3>
    9af6:	4642      	mov	r2, r8
    9af8:	464b      	mov	r3, r9
    9afa:	f7fe fce9 	bl	84d0 <__aeabi_dmul>
    9afe:	a35a      	add	r3, pc, #360	; (adr r3, 9c68 <__ieee754_log+0x320>)
    9b00:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b04:	f7fe fb2e 	bl	8164 <__adddf3>
    9b08:	4642      	mov	r2, r8
    9b0a:	464b      	mov	r3, r9
    9b0c:	f7fe fce0 	bl	84d0 <__aeabi_dmul>
    9b10:	a357      	add	r3, pc, #348	; (adr r3, 9c70 <__ieee754_log+0x328>)
    9b12:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b16:	f7fe fb25 	bl	8164 <__adddf3>
    9b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9b1e:	f7fe fcd7 	bl	84d0 <__aeabi_dmul>
    9b22:	a355      	add	r3, pc, #340	; (adr r3, 9c78 <__ieee754_log+0x330>)
    9b24:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9b2c:	4640      	mov	r0, r8
    9b2e:	4649      	mov	r1, r9
    9b30:	f7fe fcce 	bl	84d0 <__aeabi_dmul>
    9b34:	a352      	add	r3, pc, #328	; (adr r3, 9c80 <__ieee754_log+0x338>)
    9b36:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b3a:	f7fe fb13 	bl	8164 <__adddf3>
    9b3e:	4642      	mov	r2, r8
    9b40:	464b      	mov	r3, r9
    9b42:	f7fe fcc5 	bl	84d0 <__aeabi_dmul>
    9b46:	a350      	add	r3, pc, #320	; (adr r3, 9c88 <__ieee754_log+0x340>)
    9b48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b4c:	f7fe fb0a 	bl	8164 <__adddf3>
    9b50:	4642      	mov	r2, r8
    9b52:	464b      	mov	r3, r9
    9b54:	f7fe fcbc 	bl	84d0 <__aeabi_dmul>
    9b58:	4602      	mov	r2, r0
    9b5a:	460b      	mov	r3, r1
    9b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9b60:	f7fe fb00 	bl	8164 <__adddf3>
    9b64:	2d00      	cmp	r5, #0
    9b66:	4680      	mov	r8, r0
    9b68:	4689      	mov	r9, r1
    9b6a:	dd48      	ble.n	9bfe <__ieee754_log+0x2b6>
    9b6c:	2200      	movs	r2, #0
    9b6e:	4b4c      	ldr	r3, [pc, #304]	; (9ca0 <__ieee754_log+0x358>)
    9b70:	4650      	mov	r0, sl
    9b72:	4659      	mov	r1, fp
    9b74:	f7fe fcac 	bl	84d0 <__aeabi_dmul>
    9b78:	4652      	mov	r2, sl
    9b7a:	465b      	mov	r3, fp
    9b7c:	f7fe fca8 	bl	84d0 <__aeabi_dmul>
    9b80:	4602      	mov	r2, r0
    9b82:	460b      	mov	r3, r1
    9b84:	4606      	mov	r6, r0
    9b86:	460f      	mov	r7, r1
    9b88:	4640      	mov	r0, r8
    9b8a:	4649      	mov	r1, r9
    9b8c:	f7fe faea 	bl	8164 <__adddf3>
    9b90:	e9dd 2300 	ldrd	r2, r3, [sp]
    9b94:	f7fe fc9c 	bl	84d0 <__aeabi_dmul>
    9b98:	4680      	mov	r8, r0
    9b9a:	4689      	mov	r9, r1
    9b9c:	b964      	cbnz	r4, 9bb8 <__ieee754_log+0x270>
    9b9e:	4602      	mov	r2, r0
    9ba0:	460b      	mov	r3, r1
    9ba2:	4630      	mov	r0, r6
    9ba4:	4639      	mov	r1, r7
    9ba6:	f7fe fadb 	bl	8160 <__aeabi_dsub>
    9baa:	4602      	mov	r2, r0
    9bac:	460b      	mov	r3, r1
    9bae:	4650      	mov	r0, sl
    9bb0:	4659      	mov	r1, fp
    9bb2:	f7fe fad5 	bl	8160 <__aeabi_dsub>
    9bb6:	e6da      	b.n	996e <__ieee754_log+0x26>
    9bb8:	a321      	add	r3, pc, #132	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9bba:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bc2:	f7fe fc85 	bl	84d0 <__aeabi_dmul>
    9bc6:	4604      	mov	r4, r0
    9bc8:	460d      	mov	r5, r1
    9bca:	a31f      	add	r3, pc, #124	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9bd4:	f7fe fc7c 	bl	84d0 <__aeabi_dmul>
    9bd8:	4642      	mov	r2, r8
    9bda:	464b      	mov	r3, r9
    9bdc:	f7fe fac2 	bl	8164 <__adddf3>
    9be0:	4602      	mov	r2, r0
    9be2:	460b      	mov	r3, r1
    9be4:	4630      	mov	r0, r6
    9be6:	4639      	mov	r1, r7
    9be8:	f7fe faba 	bl	8160 <__aeabi_dsub>
    9bec:	4652      	mov	r2, sl
    9bee:	465b      	mov	r3, fp
    9bf0:	f7fe fab6 	bl	8160 <__aeabi_dsub>
    9bf4:	4602      	mov	r2, r0
    9bf6:	460b      	mov	r3, r1
    9bf8:	4620      	mov	r0, r4
    9bfa:	4629      	mov	r1, r5
    9bfc:	e7d9      	b.n	9bb2 <__ieee754_log+0x26a>
    9bfe:	4602      	mov	r2, r0
    9c00:	460b      	mov	r3, r1
    9c02:	4650      	mov	r0, sl
    9c04:	4659      	mov	r1, fp
    9c06:	f7fe faab 	bl	8160 <__aeabi_dsub>
    9c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
    9c0e:	f7fe fc5f 	bl	84d0 <__aeabi_dmul>
    9c12:	4606      	mov	r6, r0
    9c14:	460f      	mov	r7, r1
    9c16:	2c00      	cmp	r4, #0
    9c18:	f43f af25 	beq.w	9a66 <__ieee754_log+0x11e>
    9c1c:	a308      	add	r3, pc, #32	; (adr r3, 9c40 <__ieee754_log+0x2f8>)
    9c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c26:	f7fe fc53 	bl	84d0 <__aeabi_dmul>
    9c2a:	4604      	mov	r4, r0
    9c2c:	460d      	mov	r5, r1
    9c2e:	a306      	add	r3, pc, #24	; (adr r3, 9c48 <__ieee754_log+0x300>)
    9c30:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c38:	e729      	b.n	9a8e <__ieee754_log+0x146>
    9c3a:	2000      	movs	r0, #0
    9c3c:	2100      	movs	r1, #0
    9c3e:	e696      	b.n	996e <__ieee754_log+0x26>
    9c40:	fee00000 	.word	0xfee00000
    9c44:	3fe62e42 	.word	0x3fe62e42
    9c48:	35793c76 	.word	0x35793c76
    9c4c:	3dea39ef 	.word	0x3dea39ef
    9c50:	55555555 	.word	0x55555555
    9c54:	3fd55555 	.word	0x3fd55555
    9c58:	df3e5244 	.word	0xdf3e5244
    9c5c:	3fc2f112 	.word	0x3fc2f112
    9c60:	96cb03de 	.word	0x96cb03de
    9c64:	3fc74664 	.word	0x3fc74664
    9c68:	94229359 	.word	0x94229359
    9c6c:	3fd24924 	.word	0x3fd24924
    9c70:	55555593 	.word	0x55555593
    9c74:	3fe55555 	.word	0x3fe55555
    9c78:	d078c69f 	.word	0xd078c69f
    9c7c:	3fc39a09 	.word	0x3fc39a09
    9c80:	1d8e78af 	.word	0x1d8e78af
    9c84:	3fcc71c5 	.word	0x3fcc71c5
    9c88:	9997fa04 	.word	0x9997fa04
    9c8c:	3fd99999 	.word	0x3fd99999
    9c90:	c3500000 	.word	0xc3500000
    9c94:	43500000 	.word	0x43500000
    9c98:	7fefffff 	.word	0x7fefffff
    9c9c:	3ff00000 	.word	0x3ff00000
    9ca0:	3fe00000 	.word	0x3fe00000
    9ca4:	00000000 	.word	0x00000000

00009ca8 <_dtoa_r>:
    9ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cac:	4614      	mov	r4, r2
    9cae:	b097      	sub	sp, #92	; 0x5c
    9cb0:	461d      	mov	r5, r3
    9cb2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    9cb4:	4683      	mov	fp, r0
    9cb6:	9e23      	ldr	r6, [sp, #140]	; 0x8c
    9cb8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    9cbc:	b97f      	cbnz	r7, 9cde <_dtoa_r+0x36>
    9cbe:	2010      	movs	r0, #16
    9cc0:	f01e fd08 	bl	286d4 <malloc>
    9cc4:	4602      	mov	r2, r0
    9cc6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    9cca:	b920      	cbnz	r0, 9cd6 <_dtoa_r+0x2e>
    9ccc:	4ba2      	ldr	r3, [pc, #648]	; (9f58 <_dtoa_r+0x2b0>)
    9cce:	21ea      	movs	r1, #234	; 0xea
    9cd0:	48a2      	ldr	r0, [pc, #648]	; (9f5c <_dtoa_r+0x2b4>)
    9cd2:	f01f f9bb 	bl	2904c <__assert_func>
    9cd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
    9cda:	6007      	str	r7, [r0, #0]
    9cdc:	60c7      	str	r7, [r0, #12]
    9cde:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9ce2:	6819      	ldr	r1, [r3, #0]
    9ce4:	b159      	cbz	r1, 9cfe <_dtoa_r+0x56>
    9ce6:	685a      	ldr	r2, [r3, #4]
    9ce8:	2301      	movs	r3, #1
    9cea:	4658      	mov	r0, fp
    9cec:	4093      	lsls	r3, r2
    9cee:	604a      	str	r2, [r1, #4]
    9cf0:	608b      	str	r3, [r1, #8]
    9cf2:	f01f faeb 	bl	292cc <_Bfree>
    9cf6:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9cfa:	2200      	movs	r2, #0
    9cfc:	601a      	str	r2, [r3, #0]
    9cfe:	1e2b      	subs	r3, r5, #0
    9d00:	bfb7      	itett	lt
    9d02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    9d06:	2300      	movge	r3, #0
    9d08:	2201      	movlt	r2, #1
    9d0a:	9305      	strlt	r3, [sp, #20]
    9d0c:	bfa8      	it	ge
    9d0e:	6033      	strge	r3, [r6, #0]
    9d10:	9f05      	ldr	r7, [sp, #20]
    9d12:	4b93      	ldr	r3, [pc, #588]	; (9f60 <_dtoa_r+0x2b8>)
    9d14:	bfb8      	it	lt
    9d16:	6032      	strlt	r2, [r6, #0]
    9d18:	43bb      	bics	r3, r7
    9d1a:	d119      	bne.n	9d50 <_dtoa_r+0xa8>
    9d1c:	f242 730f 	movw	r3, #9999	; 0x270f
    9d20:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d22:	6013      	str	r3, [r2, #0]
    9d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9d28:	4323      	orrs	r3, r4
    9d2a:	f000 85e0 	beq.w	a8ee <_dtoa_r+0xc46>
    9d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d30:	b953      	cbnz	r3, 9d48 <_dtoa_r+0xa0>
    9d32:	4b8c      	ldr	r3, [pc, #560]	; (9f64 <_dtoa_r+0x2bc>)
    9d34:	e021      	b.n	9d7a <_dtoa_r+0xd2>
    9d36:	4b8c      	ldr	r3, [pc, #560]	; (9f68 <_dtoa_r+0x2c0>)
    9d38:	9308      	str	r3, [sp, #32]
    9d3a:	3308      	adds	r3, #8
    9d3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d3e:	6013      	str	r3, [r2, #0]
    9d40:	9808      	ldr	r0, [sp, #32]
    9d42:	b017      	add	sp, #92	; 0x5c
    9d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d48:	4b86      	ldr	r3, [pc, #536]	; (9f64 <_dtoa_r+0x2bc>)
    9d4a:	9308      	str	r3, [sp, #32]
    9d4c:	3303      	adds	r3, #3
    9d4e:	e7f5      	b.n	9d3c <_dtoa_r+0x94>
    9d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9d54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9d5c:	2200      	movs	r2, #0
    9d5e:	2300      	movs	r3, #0
    9d60:	f7ff f936 	bl	8fd0 <__aeabi_dcmpeq>
    9d64:	4680      	mov	r8, r0
    9d66:	b150      	cbz	r0, 9d7e <_dtoa_r+0xd6>
    9d68:	2301      	movs	r3, #1
    9d6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d6c:	6013      	str	r3, [r2, #0]
    9d6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    9d70:	b113      	cbz	r3, 9d78 <_dtoa_r+0xd0>
    9d72:	4b7e      	ldr	r3, [pc, #504]	; (9f6c <_dtoa_r+0x2c4>)
    9d74:	9a24      	ldr	r2, [sp, #144]	; 0x90
    9d76:	6013      	str	r3, [r2, #0]
    9d78:	4b7d      	ldr	r3, [pc, #500]	; (9f70 <_dtoa_r+0x2c8>)
    9d7a:	9308      	str	r3, [sp, #32]
    9d7c:	e7e0      	b.n	9d40 <_dtoa_r+0x98>
    9d7e:	ab14      	add	r3, sp, #80	; 0x50
    9d80:	f3c7 560a 	ubfx	r6, r7, #20, #11
    9d84:	4658      	mov	r0, fp
    9d86:	9301      	str	r3, [sp, #4]
    9d88:	ab15      	add	r3, sp, #84	; 0x54
    9d8a:	9300      	str	r3, [sp, #0]
    9d8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    9d90:	f01f fd22 	bl	297d8 <__d2b>
    9d94:	9003      	str	r0, [sp, #12]
    9d96:	2e00      	cmp	r6, #0
    9d98:	d078      	beq.n	9e8c <_dtoa_r+0x1e4>
    9d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d9c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    9da0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9da8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
    9dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9db0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9db4:	4619      	mov	r1, r3
    9db6:	2200      	movs	r2, #0
    9db8:	4b6e      	ldr	r3, [pc, #440]	; (9f74 <_dtoa_r+0x2cc>)
    9dba:	f7fe f9d1 	bl	8160 <__aeabi_dsub>
    9dbe:	a360      	add	r3, pc, #384	; (adr r3, 9f40 <_dtoa_r+0x298>)
    9dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dc4:	f7fe fb84 	bl	84d0 <__aeabi_dmul>
    9dc8:	a35f      	add	r3, pc, #380	; (adr r3, 9f48 <_dtoa_r+0x2a0>)
    9dca:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dce:	f7fe f9c9 	bl	8164 <__adddf3>
    9dd2:	4604      	mov	r4, r0
    9dd4:	460d      	mov	r5, r1
    9dd6:	4630      	mov	r0, r6
    9dd8:	f7fe fb10 	bl	83fc <__aeabi_i2d>
    9ddc:	a35c      	add	r3, pc, #368	; (adr r3, 9f50 <_dtoa_r+0x2a8>)
    9dde:	e9d3 2300 	ldrd	r2, r3, [r3]
    9de2:	f7fe fb75 	bl	84d0 <__aeabi_dmul>
    9de6:	4602      	mov	r2, r0
    9de8:	460b      	mov	r3, r1
    9dea:	4620      	mov	r0, r4
    9dec:	4629      	mov	r1, r5
    9dee:	f7fe f9b9 	bl	8164 <__adddf3>
    9df2:	4604      	mov	r4, r0
    9df4:	460d      	mov	r5, r1
    9df6:	f7ff f933 	bl	9060 <__aeabi_d2iz>
    9dfa:	2200      	movs	r2, #0
    9dfc:	4607      	mov	r7, r0
    9dfe:	2300      	movs	r3, #0
    9e00:	4620      	mov	r0, r4
    9e02:	4629      	mov	r1, r5
    9e04:	f7ff f8ee 	bl	8fe4 <__aeabi_dcmplt>
    9e08:	b140      	cbz	r0, 9e1c <_dtoa_r+0x174>
    9e0a:	4638      	mov	r0, r7
    9e0c:	f7fe faf6 	bl	83fc <__aeabi_i2d>
    9e10:	4622      	mov	r2, r4
    9e12:	462b      	mov	r3, r5
    9e14:	f7ff f8dc 	bl	8fd0 <__aeabi_dcmpeq>
    9e18:	b900      	cbnz	r0, 9e1c <_dtoa_r+0x174>
    9e1a:	3f01      	subs	r7, #1
    9e1c:	2f16      	cmp	r7, #22
    9e1e:	d854      	bhi.n	9eca <_dtoa_r+0x222>
    9e20:	4b55      	ldr	r3, [pc, #340]	; (9f78 <_dtoa_r+0x2d0>)
    9e22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e2e:	f7ff f8d9 	bl	8fe4 <__aeabi_dcmplt>
    9e32:	2800      	cmp	r0, #0
    9e34:	d04b      	beq.n	9ece <_dtoa_r+0x226>
    9e36:	3f01      	subs	r7, #1
    9e38:	2300      	movs	r3, #0
    9e3a:	9312      	str	r3, [sp, #72]	; 0x48
    9e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9e3e:	1b9b      	subs	r3, r3, r6
    9e40:	1e5a      	subs	r2, r3, #1
    9e42:	bf4c      	ite	mi
    9e44:	f1c3 0301 	rsbmi	r3, r3, #1
    9e48:	2300      	movpl	r3, #0
    9e4a:	920a      	str	r2, [sp, #40]	; 0x28
    9e4c:	bf45      	ittet	mi
    9e4e:	9306      	strmi	r3, [sp, #24]
    9e50:	2300      	movmi	r3, #0
    9e52:	9306      	strpl	r3, [sp, #24]
    9e54:	930a      	strmi	r3, [sp, #40]	; 0x28
    9e56:	2f00      	cmp	r7, #0
    9e58:	db3b      	blt.n	9ed2 <_dtoa_r+0x22a>
    9e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e5c:	970f      	str	r7, [sp, #60]	; 0x3c
    9e5e:	443b      	add	r3, r7
    9e60:	930a      	str	r3, [sp, #40]	; 0x28
    9e62:	2300      	movs	r3, #0
    9e64:	930b      	str	r3, [sp, #44]	; 0x2c
    9e66:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e68:	2b09      	cmp	r3, #9
    9e6a:	f200 8089 	bhi.w	9f80 <_dtoa_r+0x2d8>
    9e6e:	2b05      	cmp	r3, #5
    9e70:	bfc5      	ittet	gt
    9e72:	3b04      	subgt	r3, #4
    9e74:	2400      	movgt	r4, #0
    9e76:	2401      	movle	r4, #1
    9e78:	9320      	strgt	r3, [sp, #128]	; 0x80
    9e7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9e7c:	3b02      	subs	r3, #2
    9e7e:	2b03      	cmp	r3, #3
    9e80:	f200 8089 	bhi.w	9f96 <_dtoa_r+0x2ee>
    9e84:	e8df f003 	tbb	[pc, r3]
    9e88:	59383a2d 	.word	0x59383a2d
    9e8c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
    9e90:	441e      	add	r6, r3
    9e92:	f206 4332 	addw	r3, r6, #1074	; 0x432
    9e96:	2b20      	cmp	r3, #32
    9e98:	bfc9      	itett	gt
    9e9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    9e9e:	f1c3 0320 	rsble	r3, r3, #32
    9ea2:	409f      	lslgt	r7, r3
    9ea4:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
    9ea8:	bfd8      	it	le
    9eaa:	fa04 f003 	lslle.w	r0, r4, r3
    9eae:	f106 36ff 	add.w	r6, r6, #4294967295
    9eb2:	bfc4      	itt	gt
    9eb4:	fa24 f303 	lsrgt.w	r3, r4, r3
    9eb8:	ea47 0003 	orrgt.w	r0, r7, r3
    9ebc:	f7fe fa8e 	bl	83dc <__aeabi_ui2d>
    9ec0:	2201      	movs	r2, #1
    9ec2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
    9ec6:	9213      	str	r2, [sp, #76]	; 0x4c
    9ec8:	e774      	b.n	9db4 <_dtoa_r+0x10c>
    9eca:	2301      	movs	r3, #1
    9ecc:	e7b5      	b.n	9e3a <_dtoa_r+0x192>
    9ece:	9012      	str	r0, [sp, #72]	; 0x48
    9ed0:	e7b4      	b.n	9e3c <_dtoa_r+0x194>
    9ed2:	9b06      	ldr	r3, [sp, #24]
    9ed4:	1bdb      	subs	r3, r3, r7
    9ed6:	9306      	str	r3, [sp, #24]
    9ed8:	427b      	negs	r3, r7
    9eda:	930b      	str	r3, [sp, #44]	; 0x2c
    9edc:	2300      	movs	r3, #0
    9ede:	930f      	str	r3, [sp, #60]	; 0x3c
    9ee0:	e7c1      	b.n	9e66 <_dtoa_r+0x1be>
    9ee2:	2300      	movs	r3, #0
    9ee4:	930e      	str	r3, [sp, #56]	; 0x38
    9ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9ee8:	2b00      	cmp	r3, #0
    9eea:	dc57      	bgt.n	9f9c <_dtoa_r+0x2f4>
    9eec:	2301      	movs	r3, #1
    9eee:	4699      	mov	r9, r3
    9ef0:	461a      	mov	r2, r3
    9ef2:	9309      	str	r3, [sp, #36]	; 0x24
    9ef4:	9221      	str	r2, [sp, #132]	; 0x84
    9ef6:	e00c      	b.n	9f12 <_dtoa_r+0x26a>
    9ef8:	2301      	movs	r3, #1
    9efa:	e7f3      	b.n	9ee4 <_dtoa_r+0x23c>
    9efc:	2300      	movs	r3, #0
    9efe:	930e      	str	r3, [sp, #56]	; 0x38
    9f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f02:	18fb      	adds	r3, r7, r3
    9f04:	f103 0901 	add.w	r9, r3, #1
    9f08:	9309      	str	r3, [sp, #36]	; 0x24
    9f0a:	464b      	mov	r3, r9
    9f0c:	2b01      	cmp	r3, #1
    9f0e:	bfb8      	it	lt
    9f10:	2301      	movlt	r3, #1
    9f12:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
    9f16:	2100      	movs	r1, #0
    9f18:	2204      	movs	r2, #4
    9f1a:	f102 0514 	add.w	r5, r2, #20
    9f1e:	429d      	cmp	r5, r3
    9f20:	d940      	bls.n	9fa4 <_dtoa_r+0x2fc>
    9f22:	6041      	str	r1, [r0, #4]
    9f24:	4658      	mov	r0, fp
    9f26:	f01f f991 	bl	2924c <_Balloc>
    9f2a:	9008      	str	r0, [sp, #32]
    9f2c:	2800      	cmp	r0, #0
    9f2e:	d13c      	bne.n	9faa <_dtoa_r+0x302>
    9f30:	4b12      	ldr	r3, [pc, #72]	; (9f7c <_dtoa_r+0x2d4>)
    9f32:	4602      	mov	r2, r0
    9f34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    9f38:	e6ca      	b.n	9cd0 <_dtoa_r+0x28>
    9f3a:	2301      	movs	r3, #1
    9f3c:	e7df      	b.n	9efe <_dtoa_r+0x256>
    9f3e:	bf00      	nop
    9f40:	636f4361 	.word	0x636f4361
    9f44:	3fd287a7 	.word	0x3fd287a7
    9f48:	8b60c8b3 	.word	0x8b60c8b3
    9f4c:	3fc68a28 	.word	0x3fc68a28
    9f50:	509f79fb 	.word	0x509f79fb
    9f54:	3fd34413 	.word	0x3fd34413
    9f58:	00038d58 	.word	0x00038d58
    9f5c:	00038d6f 	.word	0x00038d6f
    9f60:	7ff00000 	.word	0x7ff00000
    9f64:	00038d54 	.word	0x00038d54
    9f68:	00038d4b 	.word	0x00038d4b
    9f6c:	00037b57 	.word	0x00037b57
    9f70:	00037b56 	.word	0x00037b56
    9f74:	3ff80000 	.word	0x3ff80000
    9f78:	00031780 	.word	0x00031780
    9f7c:	00038de3 	.word	0x00038de3
    9f80:	2401      	movs	r4, #1
    9f82:	2300      	movs	r3, #0
    9f84:	940e      	str	r4, [sp, #56]	; 0x38
    9f86:	9320      	str	r3, [sp, #128]	; 0x80
    9f88:	f04f 33ff 	mov.w	r3, #4294967295
    9f8c:	2200      	movs	r2, #0
    9f8e:	4699      	mov	r9, r3
    9f90:	9309      	str	r3, [sp, #36]	; 0x24
    9f92:	2312      	movs	r3, #18
    9f94:	e7ae      	b.n	9ef4 <_dtoa_r+0x24c>
    9f96:	2301      	movs	r3, #1
    9f98:	930e      	str	r3, [sp, #56]	; 0x38
    9f9a:	e7f5      	b.n	9f88 <_dtoa_r+0x2e0>
    9f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9f9e:	4699      	mov	r9, r3
    9fa0:	9309      	str	r3, [sp, #36]	; 0x24
    9fa2:	e7b6      	b.n	9f12 <_dtoa_r+0x26a>
    9fa4:	3101      	adds	r1, #1
    9fa6:	0052      	lsls	r2, r2, #1
    9fa8:	e7b7      	b.n	9f1a <_dtoa_r+0x272>
    9faa:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    9fae:	f1b9 0f0e 	cmp.w	r9, #14
    9fb2:	9a08      	ldr	r2, [sp, #32]
    9fb4:	601a      	str	r2, [r3, #0]
    9fb6:	d86f      	bhi.n	a098 <_dtoa_r+0x3f0>
    9fb8:	2c00      	cmp	r4, #0
    9fba:	d06d      	beq.n	a098 <_dtoa_r+0x3f0>
    9fbc:	2f00      	cmp	r7, #0
    9fbe:	dd36      	ble.n	a02e <_dtoa_r+0x386>
    9fc0:	f007 020f 	and.w	r2, r7, #15
    9fc4:	4ba0      	ldr	r3, [pc, #640]	; (a248 <_dtoa_r+0x5a0>)
    9fc6:	05f8      	lsls	r0, r7, #23
    9fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9fcc:	e9d3 3400 	ldrd	r3, r4, [r3]
    9fd0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    9fd4:	ea4f 1427 	mov.w	r4, r7, asr #4
    9fd8:	d517      	bpl.n	a00a <_dtoa_r+0x362>
    9fda:	4b9c      	ldr	r3, [pc, #624]	; (a24c <_dtoa_r+0x5a4>)
    9fdc:	f004 040f 	and.w	r4, r4, #15
    9fe0:	f04f 0803 	mov.w	r8, #3
    9fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    9fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    9fec:	f7fe fb9a 	bl	8724 <__aeabi_ddiv>
    9ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9ff4:	4d95      	ldr	r5, [pc, #596]	; (a24c <_dtoa_r+0x5a4>)
    9ff6:	b95c      	cbnz	r4, a010 <_dtoa_r+0x368>
    9ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    9ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a000:	f7fe fb90 	bl	8724 <__aeabi_ddiv>
    a004:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a008:	e02b      	b.n	a062 <_dtoa_r+0x3ba>
    a00a:	f04f 0802 	mov.w	r8, #2
    a00e:	e7f1      	b.n	9ff4 <_dtoa_r+0x34c>
    a010:	07e1      	lsls	r1, r4, #31
    a012:	d509      	bpl.n	a028 <_dtoa_r+0x380>
    a014:	f108 0801 	add.w	r8, r8, #1
    a018:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a01c:	e9d5 2300 	ldrd	r2, r3, [r5]
    a020:	f7fe fa56 	bl	84d0 <__aeabi_dmul>
    a024:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a028:	1064      	asrs	r4, r4, #1
    a02a:	3508      	adds	r5, #8
    a02c:	e7e3      	b.n	9ff6 <_dtoa_r+0x34e>
    a02e:	f000 8107 	beq.w	a240 <_dtoa_r+0x598>
    a032:	427c      	negs	r4, r7
    a034:	4b84      	ldr	r3, [pc, #528]	; (a248 <_dtoa_r+0x5a0>)
    a036:	4d85      	ldr	r5, [pc, #532]	; (a24c <_dtoa_r+0x5a4>)
    a038:	f04f 0802 	mov.w	r8, #2
    a03c:	f004 020f 	and.w	r2, r4, #15
    a040:	1124      	asrs	r4, r4, #4
    a042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a04e:	f7fe fa3f 	bl	84d0 <__aeabi_dmul>
    a052:	2300      	movs	r3, #0
    a054:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a058:	2c00      	cmp	r4, #0
    a05a:	f040 80e5 	bne.w	a228 <_dtoa_r+0x580>
    a05e:	2b00      	cmp	r3, #0
    a060:	d1d0      	bne.n	a004 <_dtoa_r+0x35c>
    a062:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a064:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a068:	2b00      	cmp	r3, #0
    a06a:	f000 814c 	beq.w	a306 <_dtoa_r+0x65e>
    a06e:	2200      	movs	r2, #0
    a070:	4b77      	ldr	r3, [pc, #476]	; (a250 <_dtoa_r+0x5a8>)
    a072:	4620      	mov	r0, r4
    a074:	4629      	mov	r1, r5
    a076:	f7fe ffb5 	bl	8fe4 <__aeabi_dcmplt>
    a07a:	2800      	cmp	r0, #0
    a07c:	f000 8143 	beq.w	a306 <_dtoa_r+0x65e>
    a080:	f1b9 0f00 	cmp.w	r9, #0
    a084:	f000 813f 	beq.w	a306 <_dtoa_r+0x65e>
    a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a08a:	2b00      	cmp	r3, #0
    a08c:	f300 80e4 	bgt.w	a258 <_dtoa_r+0x5b0>
    a090:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a094:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a098:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a09a:	2b00      	cmp	r3, #0
    a09c:	db02      	blt.n	a0a4 <_dtoa_r+0x3fc>
    a09e:	2f0e      	cmp	r7, #14
    a0a0:	f340 8242 	ble.w	a528 <_dtoa_r+0x880>
    a0a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a0a6:	2a00      	cmp	r2, #0
    a0a8:	f040 8267 	bne.w	a57a <_dtoa_r+0x8d2>
    a0ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a0ae:	2500      	movs	r5, #0
    a0b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a0b4:	f1b8 0f00 	cmp.w	r8, #0
    a0b8:	d00d      	beq.n	a0d6 <_dtoa_r+0x42e>
    a0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0bc:	2b00      	cmp	r3, #0
    a0be:	dd0a      	ble.n	a0d6 <_dtoa_r+0x42e>
    a0c0:	4543      	cmp	r3, r8
    a0c2:	9a06      	ldr	r2, [sp, #24]
    a0c4:	bfa8      	it	ge
    a0c6:	4643      	movge	r3, r8
    a0c8:	1ad2      	subs	r2, r2, r3
    a0ca:	eba8 0803 	sub.w	r8, r8, r3
    a0ce:	9206      	str	r2, [sp, #24]
    a0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0d2:	1ad3      	subs	r3, r2, r3
    a0d4:	930a      	str	r3, [sp, #40]	; 0x28
    a0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0d8:	b30b      	cbz	r3, a11e <_dtoa_r+0x476>
    a0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0dc:	2b00      	cmp	r3, #0
    a0de:	f000 82a6 	beq.w	a62e <_dtoa_r+0x986>
    a0e2:	2c00      	cmp	r4, #0
    a0e4:	f000 82a1 	beq.w	a62a <_dtoa_r+0x982>
    a0e8:	4629      	mov	r1, r5
    a0ea:	4622      	mov	r2, r4
    a0ec:	4658      	mov	r0, fp
    a0ee:	f01f fa17 	bl	29520 <__pow5mult>
    a0f2:	9a03      	ldr	r2, [sp, #12]
    a0f4:	4601      	mov	r1, r0
    a0f6:	4605      	mov	r5, r0
    a0f8:	4658      	mov	r0, fp
    a0fa:	f01f f967 	bl	293cc <__multiply>
    a0fe:	9903      	ldr	r1, [sp, #12]
    a100:	4606      	mov	r6, r0
    a102:	4658      	mov	r0, fp
    a104:	f01f f8e2 	bl	292cc <_Bfree>
    a108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a10a:	1b1b      	subs	r3, r3, r4
    a10c:	930b      	str	r3, [sp, #44]	; 0x2c
    a10e:	f000 8291 	beq.w	a634 <_dtoa_r+0x98c>
    a112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a114:	4631      	mov	r1, r6
    a116:	4658      	mov	r0, fp
    a118:	f01f fa02 	bl	29520 <__pow5mult>
    a11c:	9003      	str	r0, [sp, #12]
    a11e:	2101      	movs	r1, #1
    a120:	4658      	mov	r0, fp
    a122:	f01f f93d 	bl	293a0 <__i2b>
    a126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a128:	4604      	mov	r4, r0
    a12a:	2b00      	cmp	r3, #0
    a12c:	f000 8284 	beq.w	a638 <_dtoa_r+0x990>
    a130:	461a      	mov	r2, r3
    a132:	4601      	mov	r1, r0
    a134:	4658      	mov	r0, fp
    a136:	f01f f9f3 	bl	29520 <__pow5mult>
    a13a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a13c:	4604      	mov	r4, r0
    a13e:	2b01      	cmp	r3, #1
    a140:	dc03      	bgt.n	a14a <_dtoa_r+0x4a2>
    a142:	9b04      	ldr	r3, [sp, #16]
    a144:	2b00      	cmp	r3, #0
    a146:	f000 827c 	beq.w	a642 <_dtoa_r+0x99a>
    a14a:	2600      	movs	r6, #0
    a14c:	6923      	ldr	r3, [r4, #16]
    a14e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a152:	6918      	ldr	r0, [r3, #16]
    a154:	f026 fca6 	bl	30aa4 <__hi0bits>
    a158:	f1c0 0020 	rsb	r0, r0, #32
    a15c:	960f      	str	r6, [sp, #60]	; 0x3c
    a15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a160:	4418      	add	r0, r3
    a162:	f010 001f 	ands.w	r0, r0, #31
    a166:	f000 8291 	beq.w	a68c <_dtoa_r+0x9e4>
    a16a:	f1c0 0320 	rsb	r3, r0, #32
    a16e:	2b04      	cmp	r3, #4
    a170:	f340 8281 	ble.w	a676 <_dtoa_r+0x9ce>
    a174:	f1c0 001c 	rsb	r0, r0, #28
    a178:	9b06      	ldr	r3, [sp, #24]
    a17a:	4403      	add	r3, r0
    a17c:	4480      	add	r8, r0
    a17e:	9306      	str	r3, [sp, #24]
    a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a182:	4403      	add	r3, r0
    a184:	930a      	str	r3, [sp, #40]	; 0x28
    a186:	9b06      	ldr	r3, [sp, #24]
    a188:	2b00      	cmp	r3, #0
    a18a:	dd05      	ble.n	a198 <_dtoa_r+0x4f0>
    a18c:	461a      	mov	r2, r3
    a18e:	9903      	ldr	r1, [sp, #12]
    a190:	4658      	mov	r0, fp
    a192:	f01f fa1f 	bl	295d4 <__lshift>
    a196:	9003      	str	r0, [sp, #12]
    a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a19a:	2b00      	cmp	r3, #0
    a19c:	dd05      	ble.n	a1aa <_dtoa_r+0x502>
    a19e:	4621      	mov	r1, r4
    a1a0:	461a      	mov	r2, r3
    a1a2:	4658      	mov	r0, fp
    a1a4:	f01f fa16 	bl	295d4 <__lshift>
    a1a8:	4604      	mov	r4, r0
    a1aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	f000 8276 	beq.w	a69e <_dtoa_r+0x9f6>
    a1b2:	4621      	mov	r1, r4
    a1b4:	9803      	ldr	r0, [sp, #12]
    a1b6:	f026 fcc4 	bl	30b42 <__mcmp>
    a1ba:	2800      	cmp	r0, #0
    a1bc:	f280 826f 	bge.w	a69e <_dtoa_r+0x9f6>
    a1c0:	2300      	movs	r3, #0
    a1c2:	220a      	movs	r2, #10
    a1c4:	9903      	ldr	r1, [sp, #12]
    a1c6:	4658      	mov	r0, fp
    a1c8:	f01f f8a2 	bl	29310 <__multadd>
    a1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a1ce:	1e7e      	subs	r6, r7, #1
    a1d0:	9003      	str	r0, [sp, #12]
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	f000 825c 	beq.w	a690 <_dtoa_r+0x9e8>
    a1d8:	2300      	movs	r3, #0
    a1da:	4629      	mov	r1, r5
    a1dc:	220a      	movs	r2, #10
    a1de:	4658      	mov	r0, fp
    a1e0:	f01f f896 	bl	29310 <__multadd>
    a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1e6:	4605      	mov	r5, r0
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	dc03      	bgt.n	a1f4 <_dtoa_r+0x54c>
    a1ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1ee:	2b02      	cmp	r3, #2
    a1f0:	f300 825e 	bgt.w	a6b0 <_dtoa_r+0xa08>
    a1f4:	f1b8 0f00 	cmp.w	r8, #0
    a1f8:	dd05      	ble.n	a206 <_dtoa_r+0x55e>
    a1fa:	4629      	mov	r1, r5
    a1fc:	4642      	mov	r2, r8
    a1fe:	4658      	mov	r0, fp
    a200:	f01f f9e8 	bl	295d4 <__lshift>
    a204:	4605      	mov	r5, r0
    a206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a208:	2b00      	cmp	r3, #0
    a20a:	f000 82d0 	beq.w	a7ae <_dtoa_r+0xb06>
    a20e:	6869      	ldr	r1, [r5, #4]
    a210:	4658      	mov	r0, fp
    a212:	f01f f81b 	bl	2924c <_Balloc>
    a216:	4607      	mov	r7, r0
    a218:	2800      	cmp	r0, #0
    a21a:	f040 827f 	bne.w	a71c <_dtoa_r+0xa74>
    a21e:	4b0d      	ldr	r3, [pc, #52]	; (a254 <_dtoa_r+0x5ac>)
    a220:	4602      	mov	r2, r0
    a222:	f240 21ea 	movw	r1, #746	; 0x2ea
    a226:	e553      	b.n	9cd0 <_dtoa_r+0x28>
    a228:	07e2      	lsls	r2, r4, #31
    a22a:	d506      	bpl.n	a23a <_dtoa_r+0x592>
    a22c:	f108 0801 	add.w	r8, r8, #1
    a230:	e9d5 2300 	ldrd	r2, r3, [r5]
    a234:	f7fe f94c 	bl	84d0 <__aeabi_dmul>
    a238:	2301      	movs	r3, #1
    a23a:	1064      	asrs	r4, r4, #1
    a23c:	3508      	adds	r5, #8
    a23e:	e70b      	b.n	a058 <_dtoa_r+0x3b0>
    a240:	f04f 0802 	mov.w	r8, #2
    a244:	e70d      	b.n	a062 <_dtoa_r+0x3ba>
    a246:	bf00      	nop
    a248:	00031780 	.word	0x00031780
    a24c:	00031758 	.word	0x00031758
    a250:	3ff00000 	.word	0x3ff00000
    a254:	00038de3 	.word	0x00038de3
    a258:	4620      	mov	r0, r4
    a25a:	2200      	movs	r2, #0
    a25c:	4bac      	ldr	r3, [pc, #688]	; (a510 <_dtoa_r+0x868>)
    a25e:	4629      	mov	r1, r5
    a260:	f7fe f936 	bl	84d0 <__aeabi_dmul>
    a264:	1e7e      	subs	r6, r7, #1
    a266:	f108 0801 	add.w	r8, r8, #1
    a26a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a26c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a270:	4640      	mov	r0, r8
    a272:	f7fe f8c3 	bl	83fc <__aeabi_i2d>
    a276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a27a:	f7fe f929 	bl	84d0 <__aeabi_dmul>
    a27e:	4ba5      	ldr	r3, [pc, #660]	; (a514 <_dtoa_r+0x86c>)
    a280:	2200      	movs	r2, #0
    a282:	f7fd ff6f 	bl	8164 <__adddf3>
    a286:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
    a28a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a28e:	9311      	str	r3, [sp, #68]	; 0x44
    a290:	2c00      	cmp	r4, #0
    a292:	d13b      	bne.n	a30c <_dtoa_r+0x664>
    a294:	2200      	movs	r2, #0
    a296:	4ba0      	ldr	r3, [pc, #640]	; (a518 <_dtoa_r+0x870>)
    a298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a29c:	f7fd ff60 	bl	8160 <__aeabi_dsub>
    a2a0:	4602      	mov	r2, r0
    a2a2:	460b      	mov	r3, r1
    a2a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a2a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a2ac:	f7fe feb8 	bl	9020 <__aeabi_dcmpgt>
    a2b0:	2800      	cmp	r0, #0
    a2b2:	f040 8157 	bne.w	a564 <_dtoa_r+0x8bc>
    a2b6:	e9dd 2110 	ldrd	r2, r1, [sp, #64]	; 0x40
    a2ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    a2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a2c2:	f7fe fe8f 	bl	8fe4 <__aeabi_dcmplt>
    a2c6:	2800      	cmp	r0, #0
    a2c8:	f43f aee2 	beq.w	a090 <_dtoa_r+0x3e8>
    a2cc:	2400      	movs	r4, #0
    a2ce:	4625      	mov	r5, r4
    a2d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a2d2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a2d6:	43de      	mvns	r6, r3
    a2d8:	f04f 0800 	mov.w	r8, #0
    a2dc:	4621      	mov	r1, r4
    a2de:	4658      	mov	r0, fp
    a2e0:	f01e fff4 	bl	292cc <_Bfree>
    a2e4:	2d00      	cmp	r5, #0
    a2e6:	f000 80a9 	beq.w	a43c <_dtoa_r+0x794>
    a2ea:	f1b8 0f00 	cmp.w	r8, #0
    a2ee:	d005      	beq.n	a2fc <_dtoa_r+0x654>
    a2f0:	45a8      	cmp	r8, r5
    a2f2:	d003      	beq.n	a2fc <_dtoa_r+0x654>
    a2f4:	4641      	mov	r1, r8
    a2f6:	4658      	mov	r0, fp
    a2f8:	f01e ffe8 	bl	292cc <_Bfree>
    a2fc:	4629      	mov	r1, r5
    a2fe:	4658      	mov	r0, fp
    a300:	f01e ffe4 	bl	292cc <_Bfree>
    a304:	e09a      	b.n	a43c <_dtoa_r+0x794>
    a306:	463e      	mov	r6, r7
    a308:	464c      	mov	r4, r9
    a30a:	e7b1      	b.n	a270 <_dtoa_r+0x5c8>
    a30c:	4b83      	ldr	r3, [pc, #524]	; (a51c <_dtoa_r+0x874>)
    a30e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    a312:	e953 0102 	ldrd	r0, r1, [r3, #-8]
    a316:	9b08      	ldr	r3, [sp, #32]
    a318:	441c      	add	r4, r3
    a31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a31c:	2b00      	cmp	r3, #0
    a31e:	d04a      	beq.n	a3b6 <_dtoa_r+0x70e>
    a320:	4602      	mov	r2, r0
    a322:	460b      	mov	r3, r1
    a324:	2000      	movs	r0, #0
    a326:	497e      	ldr	r1, [pc, #504]	; (a520 <_dtoa_r+0x878>)
    a328:	f7fe f9fc 	bl	8724 <__aeabi_ddiv>
    a32c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a330:	f7fd ff16 	bl	8160 <__aeabi_dsub>
    a334:	f8dd a020 	ldr.w	sl, [sp, #32]
    a338:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a33c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a340:	f7fe fe8e 	bl	9060 <__aeabi_d2iz>
    a344:	4605      	mov	r5, r0
    a346:	f7fe f859 	bl	83fc <__aeabi_i2d>
    a34a:	4602      	mov	r2, r0
    a34c:	3530      	adds	r5, #48	; 0x30
    a34e:	460b      	mov	r3, r1
    a350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a354:	f7fd ff04 	bl	8160 <__aeabi_dsub>
    a358:	f80a 5b01 	strb.w	r5, [sl], #1
    a35c:	4602      	mov	r2, r0
    a35e:	460b      	mov	r3, r1
    a360:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a368:	f7fe fe5a 	bl	9020 <__aeabi_dcmpgt>
    a36c:	2800      	cmp	r0, #0
    a36e:	d165      	bne.n	a43c <_dtoa_r+0x794>
    a370:	2000      	movs	r0, #0
    a372:	496c      	ldr	r1, [pc, #432]	; (a524 <_dtoa_r+0x87c>)
    a374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a378:	f7fd fef2 	bl	8160 <__aeabi_dsub>
    a37c:	4602      	mov	r2, r0
    a37e:	460b      	mov	r3, r1
    a380:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a384:	f7fe fe4c 	bl	9020 <__aeabi_dcmpgt>
    a388:	2800      	cmp	r0, #0
    a38a:	f040 810d 	bne.w	a5a8 <_dtoa_r+0x900>
    a38e:	45a2      	cmp	sl, r4
    a390:	f000 80ea 	beq.w	a568 <_dtoa_r+0x8c0>
    a394:	2200      	movs	r2, #0
    a396:	4b5e      	ldr	r3, [pc, #376]	; (a510 <_dtoa_r+0x868>)
    a398:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a39c:	f7fe f898 	bl	84d0 <__aeabi_dmul>
    a3a0:	2200      	movs	r2, #0
    a3a2:	4b5b      	ldr	r3, [pc, #364]	; (a510 <_dtoa_r+0x868>)
    a3a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3ac:	f7fe f890 	bl	84d0 <__aeabi_dmul>
    a3b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a3b4:	e7c2      	b.n	a33c <_dtoa_r+0x694>
    a3b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a3ba:	f7fe f889 	bl	84d0 <__aeabi_dmul>
    a3be:	46a0      	mov	r8, r4
    a3c0:	f8dd a020 	ldr.w	sl, [sp, #32]
    a3c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    a3c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3cc:	f7fe fe48 	bl	9060 <__aeabi_d2iz>
    a3d0:	4605      	mov	r5, r0
    a3d2:	f7fe f813 	bl	83fc <__aeabi_i2d>
    a3d6:	4602      	mov	r2, r0
    a3d8:	3530      	adds	r5, #48	; 0x30
    a3da:	460b      	mov	r3, r1
    a3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a3e0:	f7fd febe 	bl	8160 <__aeabi_dsub>
    a3e4:	f80a 5b01 	strb.w	r5, [sl], #1
    a3e8:	4602      	mov	r2, r0
    a3ea:	460b      	mov	r3, r1
    a3ec:	45a2      	cmp	sl, r4
    a3ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    a3f2:	f04f 0200 	mov.w	r2, #0
    a3f6:	d123      	bne.n	a440 <_dtoa_r+0x798>
    a3f8:	4b49      	ldr	r3, [pc, #292]	; (a520 <_dtoa_r+0x878>)
    a3fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    a3fe:	f7fd feb1 	bl	8164 <__adddf3>
    a402:	4602      	mov	r2, r0
    a404:	460b      	mov	r3, r1
    a406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a40a:	f7fe fe09 	bl	9020 <__aeabi_dcmpgt>
    a40e:	2800      	cmp	r0, #0
    a410:	f040 80ca 	bne.w	a5a8 <_dtoa_r+0x900>
    a414:	2000      	movs	r0, #0
    a416:	4942      	ldr	r1, [pc, #264]	; (a520 <_dtoa_r+0x878>)
    a418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    a41c:	f7fd fea0 	bl	8160 <__aeabi_dsub>
    a420:	4602      	mov	r2, r0
    a422:	460b      	mov	r3, r1
    a424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a428:	f7fe fddc 	bl	8fe4 <__aeabi_dcmplt>
    a42c:	b170      	cbz	r0, a44c <_dtoa_r+0x7a4>
    a42e:	46c2      	mov	sl, r8
    a430:	f108 38ff 	add.w	r8, r8, #4294967295
    a434:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a438:	2b30      	cmp	r3, #48	; 0x30
    a43a:	d0f8      	beq.n	a42e <_dtoa_r+0x786>
    a43c:	4637      	mov	r7, r6
    a43e:	e055      	b.n	a4ec <_dtoa_r+0x844>
    a440:	4b33      	ldr	r3, [pc, #204]	; (a510 <_dtoa_r+0x868>)
    a442:	f7fe f845 	bl	84d0 <__aeabi_dmul>
    a446:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a44a:	e7bd      	b.n	a3c8 <_dtoa_r+0x720>
    a44c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a450:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a454:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a456:	2b00      	cmp	r3, #0
    a458:	f6ff ae28 	blt.w	a0ac <_dtoa_r+0x404>
    a45c:	2f0e      	cmp	r7, #14
    a45e:	f73f ae25 	bgt.w	a0ac <_dtoa_r+0x404>
    a462:	4b2e      	ldr	r3, [pc, #184]	; (a51c <_dtoa_r+0x874>)
    a464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a468:	e9d3 3400 	ldrd	r3, r4, [r3]
    a46c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a470:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a472:	2b00      	cmp	r3, #0
    a474:	da02      	bge.n	a47c <_dtoa_r+0x7d4>
    a476:	f1b9 0f00 	cmp.w	r9, #0
    a47a:	d064      	beq.n	a546 <_dtoa_r+0x89e>
    a47c:	f8dd a020 	ldr.w	sl, [sp, #32]
    a480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
    a484:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a488:	4620      	mov	r0, r4
    a48a:	4629      	mov	r1, r5
    a48c:	f7fe f94a 	bl	8724 <__aeabi_ddiv>
    a490:	f7fe fde6 	bl	9060 <__aeabi_d2iz>
    a494:	4606      	mov	r6, r0
    a496:	f7fd ffb1 	bl	83fc <__aeabi_i2d>
    a49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a49e:	f7fe f817 	bl	84d0 <__aeabi_dmul>
    a4a2:	4602      	mov	r2, r0
    a4a4:	4620      	mov	r0, r4
    a4a6:	f106 0430 	add.w	r4, r6, #48	; 0x30
    a4aa:	460b      	mov	r3, r1
    a4ac:	4629      	mov	r1, r5
    a4ae:	f7fd fe57 	bl	8160 <__aeabi_dsub>
    a4b2:	f80a 4b01 	strb.w	r4, [sl], #1
    a4b6:	9c08      	ldr	r4, [sp, #32]
    a4b8:	4602      	mov	r2, r0
    a4ba:	460b      	mov	r3, r1
    a4bc:	ebaa 0404 	sub.w	r4, sl, r4
    a4c0:	45a1      	cmp	r9, r4
    a4c2:	f040 8082 	bne.w	a5ca <_dtoa_r+0x922>
    a4c6:	f7fd fe4d 	bl	8164 <__adddf3>
    a4ca:	4604      	mov	r4, r0
    a4cc:	460d      	mov	r5, r1
    a4ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4d2:	f7fe fda5 	bl	9020 <__aeabi_dcmpgt>
    a4d6:	2800      	cmp	r0, #0
    a4d8:	d165      	bne.n	a5a6 <_dtoa_r+0x8fe>
    a4da:	4620      	mov	r0, r4
    a4dc:	4629      	mov	r1, r5
    a4de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a4e2:	f7fe fd75 	bl	8fd0 <__aeabi_dcmpeq>
    a4e6:	b108      	cbz	r0, a4ec <_dtoa_r+0x844>
    a4e8:	07f3      	lsls	r3, r6, #31
    a4ea:	d45c      	bmi.n	a5a6 <_dtoa_r+0x8fe>
    a4ec:	9903      	ldr	r1, [sp, #12]
    a4ee:	4658      	mov	r0, fp
    a4f0:	f01e feec 	bl	292cc <_Bfree>
    a4f4:	2300      	movs	r3, #0
    a4f6:	3701      	adds	r7, #1
    a4f8:	f88a 3000 	strb.w	r3, [sl]
    a4fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a4fe:	601f      	str	r7, [r3, #0]
    a500:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a502:	2b00      	cmp	r3, #0
    a504:	f43f ac1c 	beq.w	9d40 <_dtoa_r+0x98>
    a508:	f8c3 a000 	str.w	sl, [r3]
    a50c:	e418      	b.n	9d40 <_dtoa_r+0x98>
    a50e:	bf00      	nop
    a510:	40240000 	.word	0x40240000
    a514:	401c0000 	.word	0x401c0000
    a518:	40140000 	.word	0x40140000
    a51c:	00031780 	.word	0x00031780
    a520:	3fe00000 	.word	0x3fe00000
    a524:	3ff00000 	.word	0x3ff00000
    a528:	4ba2      	ldr	r3, [pc, #648]	; (a7b4 <_dtoa_r+0xb0c>)
    a52a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a52e:	e9d3 3400 	ldrd	r3, r4, [r3]
    a532:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a536:	9b21      	ldr	r3, [sp, #132]	; 0x84
    a538:	2b00      	cmp	r3, #0
    a53a:	da9f      	bge.n	a47c <_dtoa_r+0x7d4>
    a53c:	f1b9 0f00 	cmp.w	r9, #0
    a540:	dc9c      	bgt.n	a47c <_dtoa_r+0x7d4>
    a542:	f47f aec3 	bne.w	a2cc <_dtoa_r+0x624>
    a546:	2200      	movs	r2, #0
    a548:	4b9b      	ldr	r3, [pc, #620]	; (a7b8 <_dtoa_r+0xb10>)
    a54a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a54e:	f7fd ffbf 	bl	84d0 <__aeabi_dmul>
    a552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a556:	f7fe fd59 	bl	900c <__aeabi_dcmpge>
    a55a:	4604      	mov	r4, r0
    a55c:	2800      	cmp	r0, #0
    a55e:	f47f aeb5 	bne.w	a2cc <_dtoa_r+0x624>
    a562:	463e      	mov	r6, r7
    a564:	4625      	mov	r5, r4
    a566:	e0b4      	b.n	a6d2 <_dtoa_r+0xa2a>
    a568:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    a56c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    a570:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a572:	2b00      	cmp	r3, #0
    a574:	db01      	blt.n	a57a <_dtoa_r+0x8d2>
    a576:	2f0e      	cmp	r7, #14
    a578:	ddd6      	ble.n	a528 <_dtoa_r+0x880>
    a57a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a57c:	2a01      	cmp	r2, #1
    a57e:	dc36      	bgt.n	a5ee <_dtoa_r+0x946>
    a580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a582:	b382      	cbz	r2, a5e6 <_dtoa_r+0x93e>
    a584:	f203 4333 	addw	r3, r3, #1075	; 0x433
    a588:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a58a:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a58e:	9a06      	ldr	r2, [sp, #24]
    a590:	2101      	movs	r1, #1
    a592:	4658      	mov	r0, fp
    a594:	441a      	add	r2, r3
    a596:	9206      	str	r2, [sp, #24]
    a598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a59a:	441a      	add	r2, r3
    a59c:	920a      	str	r2, [sp, #40]	; 0x28
    a59e:	f01e feff 	bl	293a0 <__i2b>
    a5a2:	4605      	mov	r5, r0
    a5a4:	e586      	b.n	a0b4 <_dtoa_r+0x40c>
    a5a6:	463e      	mov	r6, r7
    a5a8:	4653      	mov	r3, sl
    a5aa:	469a      	mov	sl, r3
    a5ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    a5b0:	2a39      	cmp	r2, #57	; 0x39
    a5b2:	d106      	bne.n	a5c2 <_dtoa_r+0x91a>
    a5b4:	9a08      	ldr	r2, [sp, #32]
    a5b6:	429a      	cmp	r2, r3
    a5b8:	d1f7      	bne.n	a5aa <_dtoa_r+0x902>
    a5ba:	2230      	movs	r2, #48	; 0x30
    a5bc:	9908      	ldr	r1, [sp, #32]
    a5be:	3601      	adds	r6, #1
    a5c0:	700a      	strb	r2, [r1, #0]
    a5c2:	781a      	ldrb	r2, [r3, #0]
    a5c4:	3201      	adds	r2, #1
    a5c6:	701a      	strb	r2, [r3, #0]
    a5c8:	e738      	b.n	a43c <_dtoa_r+0x794>
    a5ca:	2200      	movs	r2, #0
    a5cc:	4b7b      	ldr	r3, [pc, #492]	; (a7bc <_dtoa_r+0xb14>)
    a5ce:	f7fd ff7f 	bl	84d0 <__aeabi_dmul>
    a5d2:	2200      	movs	r2, #0
    a5d4:	2300      	movs	r3, #0
    a5d6:	4604      	mov	r4, r0
    a5d8:	460d      	mov	r5, r1
    a5da:	f7fe fcf9 	bl	8fd0 <__aeabi_dcmpeq>
    a5de:	2800      	cmp	r0, #0
    a5e0:	f43f af50 	beq.w	a484 <_dtoa_r+0x7dc>
    a5e4:	e782      	b.n	a4ec <_dtoa_r+0x844>
    a5e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a5e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    a5ec:	e7cc      	b.n	a588 <_dtoa_r+0x8e0>
    a5ee:	f109 34ff 	add.w	r4, r9, #4294967295
    a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5f4:	42a3      	cmp	r3, r4
    a5f6:	db08      	blt.n	a60a <_dtoa_r+0x962>
    a5f8:	f1b9 0f00 	cmp.w	r9, #0
    a5fc:	eba3 0404 	sub.w	r4, r3, r4
    a600:	db0e      	blt.n	a620 <_dtoa_r+0x978>
    a602:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a606:	464b      	mov	r3, r9
    a608:	e7c1      	b.n	a58e <_dtoa_r+0x8e6>
    a60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a60c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a60e:	1ae3      	subs	r3, r4, r3
    a610:	940b      	str	r4, [sp, #44]	; 0x2c
    a612:	f8dd 8018 	ldr.w	r8, [sp, #24]
    a616:	2400      	movs	r4, #0
    a618:	441a      	add	r2, r3
    a61a:	464b      	mov	r3, r9
    a61c:	920f      	str	r2, [sp, #60]	; 0x3c
    a61e:	e7b6      	b.n	a58e <_dtoa_r+0x8e6>
    a620:	9b06      	ldr	r3, [sp, #24]
    a622:	eba3 0809 	sub.w	r8, r3, r9
    a626:	2300      	movs	r3, #0
    a628:	e7b1      	b.n	a58e <_dtoa_r+0x8e6>
    a62a:	9e03      	ldr	r6, [sp, #12]
    a62c:	e571      	b.n	a112 <_dtoa_r+0x46a>
    a62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a630:	9903      	ldr	r1, [sp, #12]
    a632:	e570      	b.n	a116 <_dtoa_r+0x46e>
    a634:	9603      	str	r6, [sp, #12]
    a636:	e572      	b.n	a11e <_dtoa_r+0x476>
    a638:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a63a:	2b01      	cmp	r3, #1
    a63c:	dc17      	bgt.n	a66e <_dtoa_r+0x9c6>
    a63e:	9b04      	ldr	r3, [sp, #16]
    a640:	b9ab      	cbnz	r3, a66e <_dtoa_r+0x9c6>
    a642:	9b05      	ldr	r3, [sp, #20]
    a644:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a648:	b99b      	cbnz	r3, a672 <_dtoa_r+0x9ca>
    a64a:	9b05      	ldr	r3, [sp, #20]
    a64c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
    a650:	0d36      	lsrs	r6, r6, #20
    a652:	0536      	lsls	r6, r6, #20
    a654:	b136      	cbz	r6, a664 <_dtoa_r+0x9bc>
    a656:	9b06      	ldr	r3, [sp, #24]
    a658:	2601      	movs	r6, #1
    a65a:	3301      	adds	r3, #1
    a65c:	9306      	str	r3, [sp, #24]
    a65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a660:	3301      	adds	r3, #1
    a662:	930a      	str	r3, [sp, #40]	; 0x28
    a664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a666:	2b00      	cmp	r3, #0
    a668:	f47f ad70 	bne.w	a14c <_dtoa_r+0x4a4>
    a66c:	960f      	str	r6, [sp, #60]	; 0x3c
    a66e:	2001      	movs	r0, #1
    a670:	e575      	b.n	a15e <_dtoa_r+0x4b6>
    a672:	2600      	movs	r6, #0
    a674:	e7f6      	b.n	a664 <_dtoa_r+0x9bc>
    a676:	f43f ad86 	beq.w	a186 <_dtoa_r+0x4de>
    a67a:	331c      	adds	r3, #28
    a67c:	9a06      	ldr	r2, [sp, #24]
    a67e:	441a      	add	r2, r3
    a680:	4498      	add	r8, r3
    a682:	9206      	str	r2, [sp, #24]
    a684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a686:	441a      	add	r2, r3
    a688:	920a      	str	r2, [sp, #40]	; 0x28
    a68a:	e57c      	b.n	a186 <_dtoa_r+0x4de>
    a68c:	4603      	mov	r3, r0
    a68e:	e7f4      	b.n	a67a <_dtoa_r+0x9d2>
    a690:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a692:	2b00      	cmp	r3, #0
    a694:	dc2b      	bgt.n	a6ee <_dtoa_r+0xa46>
    a696:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a698:	2b02      	cmp	r3, #2
    a69a:	dc09      	bgt.n	a6b0 <_dtoa_r+0xa08>
    a69c:	e027      	b.n	a6ee <_dtoa_r+0xa46>
    a69e:	f1b9 0f00 	cmp.w	r9, #0
    a6a2:	dc1d      	bgt.n	a6e0 <_dtoa_r+0xa38>
    a6a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a6a6:	2b02      	cmp	r3, #2
    a6a8:	dd1a      	ble.n	a6e0 <_dtoa_r+0xa38>
    a6aa:	463e      	mov	r6, r7
    a6ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	f47f ae0c 	bne.w	a2d0 <_dtoa_r+0x628>
    a6b8:	4621      	mov	r1, r4
    a6ba:	2205      	movs	r2, #5
    a6bc:	4658      	mov	r0, fp
    a6be:	f01e fe27 	bl	29310 <__multadd>
    a6c2:	4601      	mov	r1, r0
    a6c4:	4604      	mov	r4, r0
    a6c6:	9803      	ldr	r0, [sp, #12]
    a6c8:	f026 fa3b 	bl	30b42 <__mcmp>
    a6cc:	2800      	cmp	r0, #0
    a6ce:	f77f adff 	ble.w	a2d0 <_dtoa_r+0x628>
    a6d2:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6d6:	2331      	movs	r3, #49	; 0x31
    a6d8:	3601      	adds	r6, #1
    a6da:	f80a 3b01 	strb.w	r3, [sl], #1
    a6de:	e5fb      	b.n	a2d8 <_dtoa_r+0x630>
    a6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6e2:	463e      	mov	r6, r7
    a6e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	f47f ad83 	bne.w	a1f4 <_dtoa_r+0x54c>
    a6ee:	9f08      	ldr	r7, [sp, #32]
    a6f0:	4621      	mov	r1, r4
    a6f2:	9803      	ldr	r0, [sp, #12]
    a6f4:	f026 f914 	bl	30920 <quorem>
    a6f8:	9b08      	ldr	r3, [sp, #32]
    a6fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a700:	f807 9b01 	strb.w	r9, [r7], #1
    a704:	1afb      	subs	r3, r7, r3
    a706:	429a      	cmp	r2, r3
    a708:	f340 80cb 	ble.w	a8a2 <_dtoa_r+0xbfa>
    a70c:	2300      	movs	r3, #0
    a70e:	220a      	movs	r2, #10
    a710:	9903      	ldr	r1, [sp, #12]
    a712:	4658      	mov	r0, fp
    a714:	f01e fdfc 	bl	29310 <__multadd>
    a718:	9003      	str	r0, [sp, #12]
    a71a:	e7e9      	b.n	a6f0 <_dtoa_r+0xa48>
    a71c:	692a      	ldr	r2, [r5, #16]
    a71e:	f105 010c 	add.w	r1, r5, #12
    a722:	300c      	adds	r0, #12
    a724:	3202      	adds	r2, #2
    a726:	0092      	lsls	r2, r2, #2
    a728:	f025 ff31 	bl	3058e <memcpy>
    a72c:	2201      	movs	r2, #1
    a72e:	4639      	mov	r1, r7
    a730:	4658      	mov	r0, fp
    a732:	f01e ff4f 	bl	295d4 <__lshift>
    a736:	9b08      	ldr	r3, [sp, #32]
    a738:	46a8      	mov	r8, r5
    a73a:	4605      	mov	r5, r0
    a73c:	f103 0a01 	add.w	sl, r3, #1
    a740:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    a744:	4413      	add	r3, r2
    a746:	930a      	str	r3, [sp, #40]	; 0x28
    a748:	9b04      	ldr	r3, [sp, #16]
    a74a:	f003 0301 	and.w	r3, r3, #1
    a74e:	930b      	str	r3, [sp, #44]	; 0x2c
    a750:	f10a 33ff 	add.w	r3, sl, #4294967295
    a754:	4621      	mov	r1, r4
    a756:	9803      	ldr	r0, [sp, #12]
    a758:	9306      	str	r3, [sp, #24]
    a75a:	f026 f8e1 	bl	30920 <quorem>
    a75e:	4641      	mov	r1, r8
    a760:	9009      	str	r0, [sp, #36]	; 0x24
    a762:	f100 0930 	add.w	r9, r0, #48	; 0x30
    a766:	9803      	ldr	r0, [sp, #12]
    a768:	f026 f9eb 	bl	30b42 <__mcmp>
    a76c:	462a      	mov	r2, r5
    a76e:	4621      	mov	r1, r4
    a770:	4607      	mov	r7, r0
    a772:	4658      	mov	r0, fp
    a774:	f01e ff9a 	bl	296ac <__mdiff>
    a778:	68c2      	ldr	r2, [r0, #12]
    a77a:	4601      	mov	r1, r0
    a77c:	b302      	cbz	r2, a7c0 <_dtoa_r+0xb18>
    a77e:	4658      	mov	r0, fp
    a780:	f01e fda4 	bl	292cc <_Bfree>
    a784:	2f00      	cmp	r7, #0
    a786:	da3a      	bge.n	a7fe <_dtoa_r+0xb56>
    a788:	2201      	movs	r2, #1
    a78a:	9903      	ldr	r1, [sp, #12]
    a78c:	4658      	mov	r0, fp
    a78e:	f01e ff21 	bl	295d4 <__lshift>
    a792:	4621      	mov	r1, r4
    a794:	9003      	str	r0, [sp, #12]
    a796:	f026 f9d4 	bl	30b42 <__mcmp>
    a79a:	2800      	cmp	r0, #0
    a79c:	dc03      	bgt.n	a7a6 <_dtoa_r+0xafe>
    a79e:	d129      	bne.n	a7f4 <_dtoa_r+0xb4c>
    a7a0:	f019 0f01 	tst.w	r9, #1
    a7a4:	d026      	beq.n	a7f4 <_dtoa_r+0xb4c>
    a7a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7aa:	d11d      	bne.n	a7e8 <_dtoa_r+0xb40>
    a7ac:	e032      	b.n	a814 <_dtoa_r+0xb6c>
    a7ae:	4628      	mov	r0, r5
    a7b0:	e7c1      	b.n	a736 <_dtoa_r+0xa8e>
    a7b2:	bf00      	nop
    a7b4:	00031780 	.word	0x00031780
    a7b8:	40140000 	.word	0x40140000
    a7bc:	40240000 	.word	0x40240000
    a7c0:	900e      	str	r0, [sp, #56]	; 0x38
    a7c2:	9803      	ldr	r0, [sp, #12]
    a7c4:	f026 f9bd 	bl	30b42 <__mcmp>
    a7c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    a7ca:	900c      	str	r0, [sp, #48]	; 0x30
    a7cc:	4658      	mov	r0, fp
    a7ce:	f01e fd7d 	bl	292cc <_Bfree>
    a7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7d4:	bb5a      	cbnz	r2, a82e <_dtoa_r+0xb86>
    a7d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a7d8:	b953      	cbnz	r3, a7f0 <_dtoa_r+0xb48>
    a7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a7dc:	b943      	cbnz	r3, a7f0 <_dtoa_r+0xb48>
    a7de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a7e2:	d017      	beq.n	a814 <_dtoa_r+0xb6c>
    a7e4:	2f00      	cmp	r7, #0
    a7e6:	dd05      	ble.n	a7f4 <_dtoa_r+0xb4c>
    a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
    a7ee:	e001      	b.n	a7f4 <_dtoa_r+0xb4c>
    a7f0:	2f00      	cmp	r7, #0
    a7f2:	da2a      	bge.n	a84a <_dtoa_r+0xba2>
    a7f4:	f8dd a018 	ldr.w	sl, [sp, #24]
    a7f8:	f80a 9b01 	strb.w	r9, [sl], #1
    a7fc:	e56e      	b.n	a2dc <_dtoa_r+0x634>
    a7fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a800:	433b      	orrs	r3, r7
    a802:	d104      	bne.n	a80e <_dtoa_r+0xb66>
    a804:	9b04      	ldr	r3, [sp, #16]
    a806:	f003 0301 	and.w	r3, r3, #1
    a80a:	2b00      	cmp	r3, #0
    a80c:	d0bc      	beq.n	a788 <_dtoa_r+0xae0>
    a80e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    a812:	d136      	bne.n	a882 <_dtoa_r+0xbda>
    a814:	9f06      	ldr	r7, [sp, #24]
    a816:	2339      	movs	r3, #57	; 0x39
    a818:	f807 3b01 	strb.w	r3, [r7], #1
    a81c:	46ba      	mov	sl, r7
    a81e:	3f01      	subs	r7, #1
    a820:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a824:	2b39      	cmp	r3, #57	; 0x39
    a826:	d05a      	beq.n	a8de <_dtoa_r+0xc36>
    a828:	3301      	adds	r3, #1
    a82a:	703b      	strb	r3, [r7, #0]
    a82c:	e556      	b.n	a2dc <_dtoa_r+0x634>
    a82e:	2f00      	cmp	r7, #0
    a830:	db06      	blt.n	a840 <_dtoa_r+0xb98>
    a832:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a834:	433b      	orrs	r3, r7
    a836:	d106      	bne.n	a846 <_dtoa_r+0xb9e>
    a838:	9b04      	ldr	r3, [sp, #16]
    a83a:	f003 0301 	and.w	r3, r3, #1
    a83e:	b913      	cbnz	r3, a846 <_dtoa_r+0xb9e>
    a840:	2a00      	cmp	r2, #0
    a842:	dca1      	bgt.n	a788 <_dtoa_r+0xae0>
    a844:	e7d6      	b.n	a7f4 <_dtoa_r+0xb4c>
    a846:	2a00      	cmp	r2, #0
    a848:	dce1      	bgt.n	a80e <_dtoa_r+0xb66>
    a84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a84c:	4657      	mov	r7, sl
    a84e:	f80a 9c01 	strb.w	r9, [sl, #-1]
    a852:	4553      	cmp	r3, sl
    a854:	d02e      	beq.n	a8b4 <_dtoa_r+0xc0c>
    a856:	2300      	movs	r3, #0
    a858:	220a      	movs	r2, #10
    a85a:	9903      	ldr	r1, [sp, #12]
    a85c:	4658      	mov	r0, fp
    a85e:	f01e fd57 	bl	29310 <__multadd>
    a862:	45a8      	cmp	r8, r5
    a864:	9003      	str	r0, [sp, #12]
    a866:	f04f 0300 	mov.w	r3, #0
    a86a:	f04f 020a 	mov.w	r2, #10
    a86e:	4641      	mov	r1, r8
    a870:	4658      	mov	r0, fp
    a872:	d10b      	bne.n	a88c <_dtoa_r+0xbe4>
    a874:	f01e fd4c 	bl	29310 <__multadd>
    a878:	4680      	mov	r8, r0
    a87a:	4605      	mov	r5, r0
    a87c:	f10a 0a01 	add.w	sl, sl, #1
    a880:	e766      	b.n	a750 <_dtoa_r+0xaa8>
    a882:	f8dd a018 	ldr.w	sl, [sp, #24]
    a886:	f109 0901 	add.w	r9, r9, #1
    a88a:	e7b5      	b.n	a7f8 <_dtoa_r+0xb50>
    a88c:	f01e fd40 	bl	29310 <__multadd>
    a890:	4629      	mov	r1, r5
    a892:	4680      	mov	r8, r0
    a894:	2300      	movs	r3, #0
    a896:	220a      	movs	r2, #10
    a898:	4658      	mov	r0, fp
    a89a:	f01e fd39 	bl	29310 <__multadd>
    a89e:	4605      	mov	r5, r0
    a8a0:	e7ec      	b.n	a87c <_dtoa_r+0xbd4>
    a8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8a4:	f04f 0800 	mov.w	r8, #0
    a8a8:	2b00      	cmp	r3, #0
    a8aa:	bfcc      	ite	gt
    a8ac:	461f      	movgt	r7, r3
    a8ae:	2701      	movle	r7, #1
    a8b0:	9b08      	ldr	r3, [sp, #32]
    a8b2:	441f      	add	r7, r3
    a8b4:	2201      	movs	r2, #1
    a8b6:	9903      	ldr	r1, [sp, #12]
    a8b8:	4658      	mov	r0, fp
    a8ba:	f01e fe8b 	bl	295d4 <__lshift>
    a8be:	4621      	mov	r1, r4
    a8c0:	9003      	str	r0, [sp, #12]
    a8c2:	f026 f93e 	bl	30b42 <__mcmp>
    a8c6:	2800      	cmp	r0, #0
    a8c8:	dca8      	bgt.n	a81c <_dtoa_r+0xb74>
    a8ca:	d102      	bne.n	a8d2 <_dtoa_r+0xc2a>
    a8cc:	f019 0f01 	tst.w	r9, #1
    a8d0:	d1a4      	bne.n	a81c <_dtoa_r+0xb74>
    a8d2:	46ba      	mov	sl, r7
    a8d4:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
    a8d8:	2b30      	cmp	r3, #48	; 0x30
    a8da:	d0fa      	beq.n	a8d2 <_dtoa_r+0xc2a>
    a8dc:	e4fe      	b.n	a2dc <_dtoa_r+0x634>
    a8de:	9b08      	ldr	r3, [sp, #32]
    a8e0:	42bb      	cmp	r3, r7
    a8e2:	d19b      	bne.n	a81c <_dtoa_r+0xb74>
    a8e4:	2331      	movs	r3, #49	; 0x31
    a8e6:	9a08      	ldr	r2, [sp, #32]
    a8e8:	3601      	adds	r6, #1
    a8ea:	7013      	strb	r3, [r2, #0]
    a8ec:	e4f6      	b.n	a2dc <_dtoa_r+0x634>
    a8ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	f47f aa20 	bne.w	9d36 <_dtoa_r+0x8e>
    a8f6:	4b01      	ldr	r3, [pc, #4]	; (a8fc <_dtoa_r+0xc54>)
    a8f8:	f7ff ba3f 	b.w	9d7a <_dtoa_r+0xd2>
    a8fc:	00038d4b 	.word	0x00038d4b

0000a900 <gpio_pin_get_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
    a900:	4603      	mov	r3, r0
    a902:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a904:	2401      	movs	r4, #1
    a906:	791b      	ldrb	r3, [r3, #4]
	return gpio_pin_get(spec->port, spec->pin);
    a908:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    a90a:	409c      	lsls	r4, r3
    a90c:	6843      	ldr	r3, [r0, #4]
    a90e:	681b      	ldr	r3, [r3, #0]
    a910:	421c      	tst	r4, r3
    a912:	d10e      	bne.n	a932 <gpio_pin_get_dt+0x32>
    a914:	490e      	ldr	r1, [pc, #56]	; (a950 <gpio_pin_get_dt+0x50>)
    a916:	f240 43e4 	movw	r3, #1252	; 0x4e4
    a91a:	4a0e      	ldr	r2, [pc, #56]	; (a954 <gpio_pin_get_dt+0x54>)
    a91c:	480e      	ldr	r0, [pc, #56]	; (a958 <gpio_pin_get_dt+0x58>)
    a91e:	f01f fedc 	bl	2a6da <assert_print>
    a922:	480e      	ldr	r0, [pc, #56]	; (a95c <gpio_pin_get_dt+0x5c>)
    a924:	f01f fed9 	bl	2a6da <assert_print>
    a928:	f240 41e4 	movw	r1, #1252	; 0x4e4
    a92c:	4809      	ldr	r0, [pc, #36]	; (a954 <gpio_pin_get_dt+0x54>)
    a92e:	f01f fecd 	bl	2a6cc <assert_post_action>
	const struct gpio_driver_data *const data =
    a932:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    a934:	6883      	ldr	r3, [r0, #8]
    a936:	a901      	add	r1, sp, #4
    a938:	685b      	ldr	r3, [r3, #4]
    a93a:	4798      	blx	r3
	if (ret == 0) {
    a93c:	b930      	cbnz	r0, a94c <gpio_pin_get_dt+0x4c>
		*value ^= data->invert;
    a93e:	682a      	ldr	r2, [r5, #0]
    a940:	9b01      	ldr	r3, [sp, #4]
    a942:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    a944:	4223      	tst	r3, r4
    a946:	bf14      	ite	ne
    a948:	2001      	movne	r0, #1
    a94a:	2000      	moveq	r0, #0
}
    a94c:	b003      	add	sp, #12
    a94e:	bd30      	pop	{r4, r5, pc}
    a950:	0003263b 	.word	0x0003263b
    a954:	0003260a 	.word	0x0003260a
    a958:	00032679 	.word	0x00032679
    a95c:	00032696 	.word	0x00032696

0000a960 <digital_0_call_back>:
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
	
}

//DIGITAL CALL BACK
void digital_0_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a960:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a962:	f023 ff72 	bl	2e84a <sys_clock_cycle_get_32>
    a966:	4601      	mov	r1, r0
	printk("Digital 0 activated at %" PRIu32 "\n", k_cycle_get_32());
    a968:	4804      	ldr	r0, [pc, #16]	; (a97c <digital_0_call_back+0x1c>)
    a96a:	f01f fcf4 	bl	2a356 <printk>
	if(digital_value[0]<=DIGITAL_0_LIMIT)digital_value[0]++;
    a96e:	4a04      	ldr	r2, [pc, #16]	; (a980 <digital_0_call_back+0x20>)
    a970:	8813      	ldrh	r3, [r2, #0]
    a972:	8813      	ldrh	r3, [r2, #0]
    a974:	3301      	adds	r3, #1
    a976:	b21b      	sxth	r3, r3
    a978:	8013      	strh	r3, [r2, #0]
}
    a97a:	bd08      	pop	{r3, pc}
    a97c:	000326a8 	.word	0x000326a8
    a980:	20021af0 	.word	0x20021af0

0000a984 <digital_1_call_back>:

void digital_1_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a984:	b508      	push	{r3, lr}
    a986:	f023 ff60 	bl	2e84a <sys_clock_cycle_get_32>
    a98a:	4601      	mov	r1, r0
	printk("Digital 1 activated at %" PRIu32 "\n", k_cycle_get_32());
    a98c:	4804      	ldr	r0, [pc, #16]	; (a9a0 <digital_1_call_back+0x1c>)
    a98e:	f01f fce2 	bl	2a356 <printk>
	if(digital_value[1]<=DIGITAL_0_LIMIT)digital_value[1]++;
    a992:	4a04      	ldr	r2, [pc, #16]	; (a9a4 <digital_1_call_back+0x20>)
    a994:	8853      	ldrh	r3, [r2, #2]
    a996:	8853      	ldrh	r3, [r2, #2]
    a998:	3301      	adds	r3, #1
    a99a:	b21b      	sxth	r3, r3
    a99c:	8053      	strh	r3, [r2, #2]
}
    a99e:	bd08      	pop	{r3, pc}
    a9a0:	000326c3 	.word	0x000326c3
    a9a4:	20021af0 	.word	0x20021af0

0000a9a8 <digital_2_call_back>:

void digital_2_call_back(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    a9a8:	b508      	push	{r3, lr}
    a9aa:	f023 ff4e 	bl	2e84a <sys_clock_cycle_get_32>
    a9ae:	4601      	mov	r1, r0
	printk("Digital 2 activated at %" PRIu32 "\n", k_cycle_get_32());
    a9b0:	4804      	ldr	r0, [pc, #16]	; (a9c4 <digital_2_call_back+0x1c>)
    a9b2:	f01f fcd0 	bl	2a356 <printk>
	if(digital_value[2]<=DIGITAL_0_LIMIT)digital_value[2]++;
    a9b6:	4a04      	ldr	r2, [pc, #16]	; (a9c8 <digital_2_call_back+0x20>)
    a9b8:	8893      	ldrh	r3, [r2, #4]
    a9ba:	8893      	ldrh	r3, [r2, #4]
    a9bc:	3301      	adds	r3, #1
    a9be:	b21b      	sxth	r3, r3
    a9c0:	8093      	strh	r3, [r2, #4]
}
    a9c2:	bd08      	pop	{r3, pc}
    a9c4:	000326de 	.word	0x000326de
    a9c8:	20021af0 	.word	0x20021af0

0000a9cc <uart_2_work_handler.part.0>:
static void uart_2_work_handler(struct k_work *item)
    a9cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART_2 receive buffer");
    a9ce:	4b09      	ldr	r3, [pc, #36]	; (a9f4 <uart_2_work_handler.part.0+0x28>)
    a9d0:	aa04      	add	r2, sp, #16
    a9d2:	9305      	str	r3, [sp, #20]
    a9d4:	2302      	movs	r3, #2
    a9d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a9da:	4807      	ldr	r0, [pc, #28]	; (a9f8 <uart_2_work_handler.part.0+0x2c>)
    a9dc:	9304      	str	r3, [sp, #16]
    a9de:	f01f fa43 	bl	29e68 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9e2:	f240 6267 	movw	r2, #1639	; 0x667
    a9e6:	2300      	movs	r3, #0
    a9e8:	4804      	ldr	r0, [pc, #16]	; (a9fc <uart_2_work_handler.part.0+0x30>)
}
    a9ea:	b007      	add	sp, #28
    a9ec:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work_2, UART_WAIT_FOR_BUF_DELAY);
    a9f0:	f01b bb9a 	b.w	26128 <k_work_reschedule>
    a9f4:	000326f9 	.word	0x000326f9
    a9f8:	000315cc 	.word	0x000315cc
    a9fc:	200091f8 	.word	0x200091f8

0000aa00 <uart_work_handler.part.0>:
static void uart_work_handler(struct k_work *item)
    aa00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Not able to allocate UART receive buffer");
    aa02:	4b09      	ldr	r3, [pc, #36]	; (aa28 <uart_work_handler.part.0+0x28>)
    aa04:	aa04      	add	r2, sp, #16
    aa06:	9305      	str	r3, [sp, #20]
    aa08:	2302      	movs	r3, #2
    aa0a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    aa0e:	4807      	ldr	r0, [pc, #28]	; (aa2c <uart_work_handler.part.0+0x2c>)
    aa10:	9304      	str	r3, [sp, #16]
    aa12:	f01f fa29 	bl	29e68 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa16:	f240 6267 	movw	r2, #1639	; 0x667
    aa1a:	2300      	movs	r3, #0
    aa1c:	4804      	ldr	r0, [pc, #16]	; (aa30 <uart_work_handler.part.0+0x30>)
}
    aa1e:	b007      	add	sp, #28
    aa20:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    aa24:	f01b bb80 	b.w	26128 <k_work_reschedule>
    aa28:	00032724 	.word	0x00032724
    aa2c:	000315cc 	.word	0x000315cc
    aa30:	20009228 	.word	0x20009228

0000aa34 <uart_2_work_handler>:
{
    aa34:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa36:	2030      	movs	r0, #48	; 0x30
    aa38:	f025 fd86 	bl	30548 <k_malloc>
	if (buf) {
    aa3c:	b138      	cbz	r0, aa4e <uart_2_work_handler+0x1a>
		buf->len = 0;
    aa3e:	2300      	movs	r3, #0
    aa40:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa42:	1d01      	adds	r1, r0, #4
}
    aa44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart_2, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa48:	4803      	ldr	r0, [pc, #12]	; (aa58 <uart_2_work_handler+0x24>)
    aa4a:	f01f ba10 	b.w	29e6e <uart_rx_enable.constprop.0>
}
    aa4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa52:	f7ff bfbb 	b.w	a9cc <uart_2_work_handler.part.0>
    aa56:	bf00      	nop
    aa58:	00030fb4 	.word	0x00030fb4

0000aa5c <uart_work_handler>:
{
    aa5c:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
    aa5e:	2030      	movs	r0, #48	; 0x30
    aa60:	f025 fd72 	bl	30548 <k_malloc>
	if (buf) {
    aa64:	b138      	cbz	r0, aa76 <uart_work_handler+0x1a>
		buf->len = 0;
    aa66:	2300      	movs	r3, #0
    aa68:	8583      	strh	r3, [r0, #44]	; 0x2c
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa6a:	1d01      	adds	r1, r0, #4
}
    aa6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
    aa70:	4803      	ldr	r0, [pc, #12]	; (aa80 <uart_work_handler+0x24>)
    aa72:	f01f b9fc 	b.w	29e6e <uart_rx_enable.constprop.0>
}
    aa76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aa7a:	f7ff bfc1 	b.w	aa00 <uart_work_handler.part.0>
    aa7e:	bf00      	nop
    aa80:	00030fcc 	.word	0x00030fcc

0000aa84 <button3_thread>:
		    flash_test_();
	}
}


void button3_thread(void){
    aa84:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;
	while(1){
		i=0;
		k_sem_take(&button_3,K_FOREVER);
    aa86:	4e09      	ldr	r6, [pc, #36]	; (aaac <button3_thread+0x28>)
	    while (i<=C_Buffer_Current_Position){
    aa88:	4d09      	ldr	r5, [pc, #36]	; (aab0 <button3_thread+0x2c>)
		k_sem_take(&button_3,K_FOREVER);
    aa8a:	f04f 32ff 	mov.w	r2, #4294967295
    aa8e:	f04f 33ff 	mov.w	r3, #4294967295
    aa92:	4630      	mov	r0, r6
    aa94:	f01f f9fb 	bl	29e8e <k_sem_take.constprop.0.isra.0>
		i=0;
    aa98:	2400      	movs	r4, #0
	     print_current_position_cb(i);
    aa9a:	4620      	mov	r0, r4
    aa9c:	f001 f992 	bl	bdc4 <print_current_position_cb>
	    while (i<=C_Buffer_Current_Position){
    aaa0:	682b      	ldr	r3, [r5, #0]
	     i++;
    aaa2:	3401      	adds	r4, #1
	    while (i<=C_Buffer_Current_Position){
    aaa4:	42a3      	cmp	r3, r4
    aaa6:	d3f0      	bcc.n	aa8a <button3_thread+0x6>
    aaa8:	e7f7      	b.n	aa9a <button3_thread+0x16>
    aaaa:	bf00      	nop
    aaac:	20008bbc 	.word	0x20008bbc
    aab0:	20021468 	.word	0x20021468

0000aab4 <button4_thread>:
		}
    }
}

void button4_thread(void){
    aab4:	b538      	push	{r3, r4, r5, lr}

    uint8_t *packet_data;
	packet_data = k_malloc(25);
    aab6:	2019      	movs	r0, #25
    aab8:	f025 fd46 	bl	30548 <k_malloc>
	//49 53 41 44 4f 52 41 
    *packet_data = 0x49;
    aabc:	2349      	movs	r3, #73	; 0x49
    *(packet_data+1) = 0x53;
    *(packet_data+2) = 0x41;
    *(packet_data+3) = 0x44;
    aabe:	2244      	movs	r2, #68	; 0x44
    *packet_data = 0x49;
    aac0:	7003      	strb	r3, [r0, #0]
    *(packet_data+3) = 0x44;
    aac2:	70c2      	strb	r2, [r0, #3]
    *(packet_data+1) = 0x53;
    aac4:	2353      	movs	r3, #83	; 0x53
    *(packet_data+4) = 0x4F;
    aac6:	224f      	movs	r2, #79	; 0x4f
    *(packet_data+1) = 0x53;
    aac8:	7043      	strb	r3, [r0, #1]
    *(packet_data+4) = 0x4F;
    aaca:	7102      	strb	r2, [r0, #4]
    *(packet_data+2) = 0x41;
    aacc:	2341      	movs	r3, #65	; 0x41
    *(packet_data+5) = 0x52;
    aace:	2252      	movs	r2, #82	; 0x52
	packet_data = k_malloc(25);
    aad0:	4604      	mov	r4, r0
    *(packet_data+6) = 0x41;
	while(1){
		k_sem_take(&button_test,K_FOREVER);
    aad2:	4d08      	ldr	r5, [pc, #32]	; (aaf4 <button4_thread+0x40>)
    *(packet_data+2) = 0x41;
    aad4:	7083      	strb	r3, [r0, #2]
    *(packet_data+5) = 0x52;
    aad6:	7142      	strb	r2, [r0, #5]
    *(packet_data+6) = 0x41;
    aad8:	7183      	strb	r3, [r0, #6]
		k_sem_take(&button_test,K_FOREVER);
    aada:	4628      	mov	r0, r5
    aadc:	f04f 32ff 	mov.w	r2, #4294967295
    aae0:	f04f 33ff 	mov.w	r3, #4294967295
    aae4:	f01f f9d3 	bl	29e8e <k_sem_take.constprop.0.isra.0>
    	bt_nus_send(NULL, packet_data,7);
    aae8:	2207      	movs	r2, #7
    aaea:	4621      	mov	r1, r4
    aaec:	2000      	movs	r0, #0
    aaee:	f005 fd85 	bl	105fc <bt_nus_send>
	while(1){
    aaf2:	e7f2      	b.n	aada <button4_thread+0x26>
    aaf4:	20008bd4 	.word	0x20008bd4

0000aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>:
static inline int gpio_pin_interrupt_configure_dt(const struct gpio_dt_spec *spec,
    aaf8:	4603      	mov	r3, r0
    aafa:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    aafc:	6800      	ldr	r0, [r0, #0]
    aafe:	7919      	ldrb	r1, [r3, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab00:	2301      	movs	r3, #1
    ab02:	6845      	ldr	r5, [r0, #4]
    ab04:	408b      	lsls	r3, r1
    ab06:	682d      	ldr	r5, [r5, #0]
	const struct gpio_driver_api *api =
    ab08:	6882      	ldr	r2, [r0, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab0a:	422b      	tst	r3, r5
	const struct gpio_driver_data *const data =
    ab0c:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    ab0e:	d10e      	bne.n	ab2e <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x36>
    ab10:	490e      	ldr	r1, [pc, #56]	; (ab4c <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x54>)
    ab12:	f44f 731d 	mov.w	r3, #628	; 0x274
    ab16:	4a0e      	ldr	r2, [pc, #56]	; (ab50 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab18:	480e      	ldr	r0, [pc, #56]	; (ab54 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x5c>)
    ab1a:	f01f fdde 	bl	2a6da <assert_print>
    ab1e:	480e      	ldr	r0, [pc, #56]	; (ab58 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x60>)
    ab20:	f01f fddb 	bl	2a6da <assert_print>
    ab24:	f44f 711d 	mov.w	r1, #628	; 0x274
    ab28:	4809      	ldr	r0, [pc, #36]	; (ab50 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0+0x58>)
    ab2a:	f01f fdcf 	bl	2a6cc <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    ab2e:	6824      	ldr	r4, [r4, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    ab30:	4223      	tst	r3, r4
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab32:	6994      	ldr	r4, [r2, #24]
    ab34:	bf18      	it	ne
    ab36:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    ab3a:	46a4      	mov	ip, r4
}
    ab3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ab40:	bf08      	it	eq
    ab42:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    ab46:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    ab4a:	4760      	bx	ip
    ab4c:	0003263b 	.word	0x0003263b
    ab50:	0003260a 	.word	0x0003260a
    ab54:	00032679 	.word	0x00032679
    ab58:	00032696 	.word	0x00032696

0000ab5c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab5c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    ab5e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    ab60:	b08a      	sub	sp, #40	; 0x28
    ab62:	4604      	mov	r4, r0
    ab64:	460e      	mov	r6, r1
    ab66:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    ab68:	2b03      	cmp	r3, #3
    ab6a:	d820      	bhi.n	abae <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    ab6c:	e8df f003 	tbb	[pc, r3]
    ab70:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    ab74:	4911      	ldr	r1, [pc, #68]	; (abbc <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    ab76:	4628      	mov	r0, r5
    ab78:	f025 fe78 	bl	3086c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ab7c:	9505      	str	r5, [sp, #20]
    ab7e:	7863      	ldrb	r3, [r4, #1]
    ab80:	211e      	movs	r1, #30
    ab82:	9304      	str	r3, [sp, #16]
    ab84:	78a3      	ldrb	r3, [r4, #2]
    ab86:	4630      	mov	r0, r6
    ab88:	9303      	str	r3, [sp, #12]
    ab8a:	78e3      	ldrb	r3, [r4, #3]
    ab8c:	4a0c      	ldr	r2, [pc, #48]	; (abc0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    ab8e:	9302      	str	r3, [sp, #8]
    ab90:	7923      	ldrb	r3, [r4, #4]
    ab92:	9301      	str	r3, [sp, #4]
    ab94:	7963      	ldrb	r3, [r4, #5]
    ab96:	9300      	str	r3, [sp, #0]
    ab98:	79a3      	ldrb	r3, [r4, #6]
    ab9a:	f01f fbe9 	bl	2a370 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    ab9e:	b00a      	add	sp, #40	; 0x28
    aba0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    aba2:	4908      	ldr	r1, [pc, #32]	; (abc4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    aba4:	e7e7      	b.n	ab76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    aba6:	4908      	ldr	r1, [pc, #32]	; (abc8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    aba8:	e7e5      	b.n	ab76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    abaa:	4908      	ldr	r1, [pc, #32]	; (abcc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    abac:	e7e3      	b.n	ab76 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    abae:	210a      	movs	r1, #10
    abb0:	4628      	mov	r0, r5
    abb2:	4a07      	ldr	r2, [pc, #28]	; (abd0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    abb4:	f01f fbdc 	bl	2a370 <snprintk>
		break;
    abb8:	e7e0      	b.n	ab7c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    abba:	bf00      	nop
    abbc:	0003274d 	.word	0x0003274d
    abc0:	0003276f 	.word	0x0003276f
    abc4:	00032754 	.word	0x00032754
    abc8:	0003275b 	.word	0x0003275b
    abcc:	00032765 	.word	0x00032765
    abd0:	00036260 	.word	0x00036260

0000abd4 <security_changed>:
{
    abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    abd6:	4614      	mov	r4, r2
    abd8:	b089      	sub	sp, #36	; 0x24
    abda:	af00      	add	r7, sp, #0
    abdc:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    abde:	f021 fd84 	bl	2c6ea <bt_conn_get_dst>
    abe2:	4639      	mov	r1, r7
    abe4:	f7ff ffba 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
    abe8:	b9ac      	cbnz	r4, ac16 <security_changed+0x42>
		LOG_INF("Security changed: %s level %u", addr, level);
    abea:	466c      	mov	r4, sp
    abec:	b08a      	sub	sp, #40	; 0x28
    abee:	466a      	mov	r2, sp
    abf0:	4b14      	ldr	r3, [pc, #80]	; (ac44 <security_changed+0x70>)
    abf2:	61d5      	str	r5, [r2, #28]
    abf4:	e9c2 3705 	strd	r3, r7, [r2, #20]
    abf8:	f44f 7300 	mov.w	r3, #512	; 0x200
    abfc:	8413      	strh	r3, [r2, #32]
    abfe:	4b12      	ldr	r3, [pc, #72]	; (ac48 <security_changed+0x74>)
    ac00:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac04:	4811      	ldr	r0, [pc, #68]	; (ac4c <security_changed+0x78>)
    ac06:	f842 3f10 	str.w	r3, [r2, #16]!
    ac0a:	f01f f92d 	bl	29e68 <z_log_msg_static_create.constprop.0>
    ac0e:	46a5      	mov	sp, r4
}
    ac10:	3724      	adds	r7, #36	; 0x24
    ac12:	46bd      	mov	sp, r7
    ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("Security failed: %s level %u err %d", addr,
    ac16:	466e      	mov	r6, sp
    ac18:	b08a      	sub	sp, #40	; 0x28
    ac1a:	466b      	mov	r3, sp
    ac1c:	4a0c      	ldr	r2, [pc, #48]	; (ac50 <security_changed+0x7c>)
    ac1e:	e9c3 5407 	strd	r5, r4, [r3, #28]
    ac22:	e9c3 2705 	strd	r2, r7, [r3, #20]
    ac26:	f44f 7200 	mov.w	r2, #512	; 0x200
    ac2a:	849a      	strh	r2, [r3, #36]	; 0x24
    ac2c:	461a      	mov	r2, r3
    ac2e:	4b09      	ldr	r3, [pc, #36]	; (ac54 <security_changed+0x80>)
    ac30:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    ac34:	4805      	ldr	r0, [pc, #20]	; (ac4c <security_changed+0x78>)
    ac36:	f842 3f10 	str.w	r3, [r2, #16]!
    ac3a:	f01f f915 	bl	29e68 <z_log_msg_static_create.constprop.0>
    ac3e:	46b5      	mov	sp, r6
}
    ac40:	e7e6      	b.n	ac10 <security_changed+0x3c>
    ac42:	bf00      	nop
    ac44:	00032792 	.word	0x00032792
    ac48:	01000004 	.word	0x01000004
    ac4c:	000315cc 	.word	0x000315cc
    ac50:	000327b0 	.word	0x000327b0
    ac54:	01000005 	.word	0x01000005

0000ac58 <pairing_failed>:
{
    ac58:	b590      	push	{r4, r7, lr}
    ac5a:	b089      	sub	sp, #36	; 0x24
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ac60:	f021 fd43 	bl	2c6ea <bt_conn_get_dst>
    ac64:	4639      	mov	r1, r7
    ac66:	f7ff ff79 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
    ac6a:	b08a      	sub	sp, #40	; 0x28
    ac6c:	466a      	mov	r2, sp
    ac6e:	4b09      	ldr	r3, [pc, #36]	; (ac94 <pairing_failed+0x3c>)
    ac70:	61d4      	str	r4, [r2, #28]
    ac72:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ac76:	f44f 7300 	mov.w	r3, #512	; 0x200
    ac7a:	8413      	strh	r3, [r2, #32]
    ac7c:	4b06      	ldr	r3, [pc, #24]	; (ac98 <pairing_failed+0x40>)
    ac7e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ac82:	4806      	ldr	r0, [pc, #24]	; (ac9c <pairing_failed+0x44>)
    ac84:	f842 3f10 	str.w	r3, [r2, #16]!
    ac88:	f01f f8ee 	bl	29e68 <z_log_msg_static_create.constprop.0>
}
    ac8c:	3724      	adds	r7, #36	; 0x24
    ac8e:	46bd      	mov	sp, r7
    ac90:	bd90      	pop	{r4, r7, pc}
    ac92:	bf00      	nop
    ac94:	000327d4 	.word	0x000327d4
    ac98:	01000004 	.word	0x01000004
    ac9c:	000315cc 	.word	0x000315cc

0000aca0 <pairing_complete>:
{
    aca0:	b590      	push	{r4, r7, lr}
    aca2:	b089      	sub	sp, #36	; 0x24
    aca4:	af00      	add	r7, sp, #0
    aca6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    aca8:	f021 fd1f 	bl	2c6ea <bt_conn_get_dst>
    acac:	4639      	mov	r1, r7
    acae:	f7ff ff55 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
    acb2:	b08a      	sub	sp, #40	; 0x28
    acb4:	466a      	mov	r2, sp
    acb6:	4b09      	ldr	r3, [pc, #36]	; (acdc <pairing_complete+0x3c>)
    acb8:	61d4      	str	r4, [r2, #28]
    acba:	e9c2 3705 	strd	r3, r7, [r2, #20]
    acbe:	f44f 7300 	mov.w	r3, #512	; 0x200
    acc2:	8413      	strh	r3, [r2, #32]
    acc4:	4b06      	ldr	r3, [pc, #24]	; (ace0 <pairing_complete+0x40>)
    acc6:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    acca:	4806      	ldr	r0, [pc, #24]	; (ace4 <pairing_complete+0x44>)
    accc:	f842 3f10 	str.w	r3, [r2, #16]!
    acd0:	f01f f8ca 	bl	29e68 <z_log_msg_static_create.constprop.0>
}
    acd4:	3724      	adds	r7, #36	; 0x24
    acd6:	46bd      	mov	sp, r7
    acd8:	bd90      	pop	{r4, r7, pc}
    acda:	bf00      	nop
    acdc:	000327f7 	.word	0x000327f7
    ace0:	01000004 	.word	0x01000004
    ace4:	000315cc 	.word	0x000315cc

0000ace8 <auth_cancel>:
{
    ace8:	b580      	push	{r7, lr}
    acea:	b088      	sub	sp, #32
    acec:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    acee:	f021 fcfc 	bl	2c6ea <bt_conn_get_dst>
    acf2:	4639      	mov	r1, r7
    acf4:	f7ff ff32 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s", addr);
    acf8:	b088      	sub	sp, #32
    acfa:	466a      	mov	r2, sp
    acfc:	4b08      	ldr	r3, [pc, #32]	; (ad20 <auth_cancel+0x38>)
    acfe:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    ad02:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad06:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad0a:	8393      	strh	r3, [r2, #28]
    ad0c:	4b05      	ldr	r3, [pc, #20]	; (ad24 <auth_cancel+0x3c>)
    ad0e:	4806      	ldr	r0, [pc, #24]	; (ad28 <auth_cancel+0x40>)
    ad10:	f842 3f10 	str.w	r3, [r2, #16]!
    ad14:	f01f f8a8 	bl	29e68 <z_log_msg_static_create.constprop.0>
}
    ad18:	3720      	adds	r7, #32
    ad1a:	46bd      	mov	sp, r7
    ad1c:	bd80      	pop	{r7, pc}
    ad1e:	bf00      	nop
    ad20:	00032819 	.word	0x00032819
    ad24:	01000003 	.word	0x01000003
    ad28:	000315cc 	.word	0x000315cc

0000ad2c <auth_passkey_display>:
{
    ad2c:	b590      	push	{r4, r7, lr}
    ad2e:	b089      	sub	sp, #36	; 0x24
    ad30:	af00      	add	r7, sp, #0
    ad32:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad34:	f021 fcd9 	bl	2c6ea <bt_conn_get_dst>
    ad38:	4639      	mov	r1, r7
    ad3a:	f7ff ff0f 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad3e:	b08a      	sub	sp, #40	; 0x28
    ad40:	466a      	mov	r2, sp
    ad42:	4b09      	ldr	r3, [pc, #36]	; (ad68 <auth_passkey_display+0x3c>)
    ad44:	61d4      	str	r4, [r2, #28]
    ad46:	e9c2 3705 	strd	r3, r7, [r2, #20]
    ad4a:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad4e:	8413      	strh	r3, [r2, #32]
    ad50:	4b06      	ldr	r3, [pc, #24]	; (ad6c <auth_passkey_display+0x40>)
    ad52:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ad56:	4806      	ldr	r0, [pc, #24]	; (ad70 <auth_passkey_display+0x44>)
    ad58:	f842 3f10 	str.w	r3, [r2, #16]!
    ad5c:	f01f f884 	bl	29e68 <z_log_msg_static_create.constprop.0>
}
    ad60:	3724      	adds	r7, #36	; 0x24
    ad62:	46bd      	mov	sp, r7
    ad64:	bd90      	pop	{r4, r7, pc}
    ad66:	bf00      	nop
    ad68:	0003282f 	.word	0x0003282f
    ad6c:	01000004 	.word	0x01000004
    ad70:	000315cc 	.word	0x000315cc

0000ad74 <auth_passkey_confirm>:
{
    ad74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad76:	b08f      	sub	sp, #60	; 0x3c
    ad78:	af00      	add	r7, sp, #0
    ad7a:	460c      	mov	r4, r1
    ad7c:	4605      	mov	r5, r0
	auth_conn = bt_conn_ref(conn);
    ad7e:	f00a f849 	bl	14e14 <bt_conn_ref>
    ad82:	4b16      	ldr	r3, [pc, #88]	; (addc <auth_passkey_confirm+0x68>)
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad84:	466e      	mov	r6, sp
	auth_conn = bt_conn_ref(conn);
    ad86:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    ad88:	4628      	mov	r0, r5
    ad8a:	f107 0518 	add.w	r5, r7, #24
    ad8e:	f021 fcac 	bl	2c6ea <bt_conn_get_dst>
    ad92:	4629      	mov	r1, r5
    ad94:	f7ff fee2 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
    ad98:	b08a      	sub	sp, #40	; 0x28
    ad9a:	466a      	mov	r2, sp
    ad9c:	4b10      	ldr	r3, [pc, #64]	; (ade0 <auth_passkey_confirm+0x6c>)
    ad9e:	61d4      	str	r4, [r2, #28]
    ada0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    ada4:	f44f 7300 	mov.w	r3, #512	; 0x200
    ada8:	4c0e      	ldr	r4, [pc, #56]	; (ade4 <auth_passkey_confirm+0x70>)
    adaa:	8413      	strh	r3, [r2, #32]
    adac:	4b0e      	ldr	r3, [pc, #56]	; (ade8 <auth_passkey_confirm+0x74>)
    adae:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    adb2:	4620      	mov	r0, r4
    adb4:	f842 3f10 	str.w	r3, [r2, #16]!
    adb8:	f01f f856 	bl	29e68 <z_log_msg_static_create.constprop.0>
    adbc:	46b5      	mov	sp, r6
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
    adbe:	4b0b      	ldr	r3, [pc, #44]	; (adec <auth_passkey_confirm+0x78>)
    adc0:	f107 0210 	add.w	r2, r7, #16
    adc4:	617b      	str	r3, [r7, #20]
    adc6:	2302      	movs	r3, #2
    adc8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    adcc:	613b      	str	r3, [r7, #16]
    adce:	4620      	mov	r0, r4
    add0:	f01f f84a 	bl	29e68 <z_log_msg_static_create.constprop.0>
}
    add4:	373c      	adds	r7, #60	; 0x3c
    add6:	46bd      	mov	sp, r7
    add8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adda:	bf00      	nop
    addc:	2000a328 	.word	0x2000a328
    ade0:	0003282f 	.word	0x0003282f
    ade4:	000315cc 	.word	0x000315cc
    ade8:	01000004 	.word	0x01000004
    adec:	00032844 	.word	0x00032844

0000adf0 <bt_receive_cb>:
{
    adf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    adf4:	2400      	movs	r4, #0
{
    adf6:	4605      	mov	r5, r0
    adf8:	b088      	sub	sp, #32
    adfa:	460f      	mov	r7, r1
    adfc:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
    adfe:	4621      	mov	r1, r4
    ae00:	221a      	movs	r2, #26
    ae02:	a801      	add	r0, sp, #4
    ae04:	9400      	str	r4, [sp, #0]
    ae06:	f025 fbfc 	bl	30602 <memset>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
    ae0a:	4628      	mov	r0, r5
    ae0c:	f021 fc6d 	bl	2c6ea <bt_conn_get_dst>
    ae10:	4669      	mov	r1, sp
    ae12:	f7ff fea3 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	printf("Received data from: %s", addr);
    ae16:	4669      	mov	r1, sp
    ae18:	481d      	ldr	r0, [pc, #116]	; (ae90 <bt_receive_cb+0xa0>)
    ae1a:	f01e f873 	bl	28f04 <iprintf>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae1e:	f8df 8074 	ldr.w	r8, [pc, #116]	; ae94 <bt_receive_cb+0xa4>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae22:	f8df 9074 	ldr.w	r9, [pc, #116]	; ae98 <bt_receive_cb+0xa8>
	for (uint16_t pos = 0; pos != len;) {
    ae26:	42b4      	cmp	r4, r6
    ae28:	d007      	beq.n	ae3a <bt_receive_cb+0x4a>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
    ae2a:	2030      	movs	r0, #48	; 0x30
    ae2c:	f025 fb8c 	bl	30548 <k_malloc>
		if (!tx) {
    ae30:	4605      	mov	r5, r0
    ae32:	b928      	cbnz	r0, ae40 <bt_receive_cb+0x50>
			printf("Not able to allocate UART send data buffer");
    ae34:	4819      	ldr	r0, [pc, #100]	; (ae9c <bt_receive_cb+0xac>)
    ae36:	f01e f865 	bl	28f04 <iprintf>
}
    ae3a:	b008      	add	sp, #32
    ae3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if ((len - pos) > tx_data_size) {
    ae40:	1b32      	subs	r2, r6, r4
    ae42:	2a27      	cmp	r2, #39	; 0x27
			tx->len = tx_data_size;
    ae44:	bf8c      	ite	hi
    ae46:	2227      	movhi	r2, #39	; 0x27
			tx->len = (len - pos);
    ae48:	b292      	uxthls	r2, r2
		memcpy(tx->data, &data[pos], tx->len);
    ae4a:	f100 0a04 	add.w	sl, r0, #4
    ae4e:	8582      	strh	r2, [r0, #44]	; 0x2c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae50:	1939      	adds	r1, r7, r4
    ae52:	4650      	mov	r0, sl
    ae54:	f025 fb9b 	bl	3058e <memcpy>
		pos += tx->len;
    ae58:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ae5a:	441c      	add	r4, r3
    ae5c:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
    ae5e:	42a6      	cmp	r6, r4
    ae60:	d109      	bne.n	ae76 <bt_receive_cb+0x86>
    ae62:	19ba      	adds	r2, r7, r6
    ae64:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    ae68:	2a0d      	cmp	r2, #13
    ae6a:	d104      	bne.n	ae76 <bt_receive_cb+0x86>
			tx->data[tx->len] = '\n';
    ae6c:	210a      	movs	r1, #10
    ae6e:	18ea      	adds	r2, r5, r3
			tx->len++;
    ae70:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
    ae72:	7111      	strb	r1, [r2, #4]
			tx->len++;
    ae74:	85ab      	strh	r3, [r5, #44]	; 0x2c
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    ae76:	4651      	mov	r1, sl
    ae78:	4640      	mov	r0, r8
    ae7a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    ae7c:	f01e ffff 	bl	29e7e <uart_tx.constprop.0>
		if (err) {
    ae80:	2800      	cmp	r0, #0
    ae82:	d0d0      	beq.n	ae26 <bt_receive_cb+0x36>
			k_fifo_put(&fifo_uart_tx_data, tx);
    ae84:	4629      	mov	r1, r5
    ae86:	4648      	mov	r0, r9
    ae88:	f025 f9aa 	bl	301e0 <k_queue_append>
    ae8c:	e7cb      	b.n	ae26 <bt_receive_cb+0x36>
    ae8e:	bf00      	nop
    ae90:	00032873 	.word	0x00032873
    ae94:	00030fcc 	.word	0x00030fcc
    ae98:	20008c80 	.word	0x20008c80
    ae9c:	0003288a 	.word	0x0003288a

0000aea0 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    aea0:	4603      	mov	r3, r0
    aea2:	b510      	push	{r4, lr}
    aea4:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aea6:	7919      	ldrb	r1, [r3, #4]
    aea8:	2301      	movs	r3, #1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    aeaa:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aeac:	fa03 f101 	lsl.w	r1, r3, r1
    aeb0:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
    aeb2:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    aeb4:	681b      	ldr	r3, [r3, #0]
    aeb6:	4219      	tst	r1, r3
    aeb8:	d10e      	bne.n	aed8 <gpio_pin_set_dt.isra.0+0x38>
    aeba:	490e      	ldr	r1, [pc, #56]	; (aef4 <gpio_pin_set_dt.isra.0+0x54>)
    aebc:	f240 533d 	movw	r3, #1341	; 0x53d
    aec0:	4a0d      	ldr	r2, [pc, #52]	; (aef8 <gpio_pin_set_dt.isra.0+0x58>)
    aec2:	480e      	ldr	r0, [pc, #56]	; (aefc <gpio_pin_set_dt.isra.0+0x5c>)
    aec4:	f01f fc09 	bl	2a6da <assert_print>
    aec8:	480d      	ldr	r0, [pc, #52]	; (af00 <gpio_pin_set_dt.isra.0+0x60>)
    aeca:	f01f fc06 	bl	2a6da <assert_print>
    aece:	f240 513d 	movw	r1, #1341	; 0x53d
    aed2:	4809      	ldr	r0, [pc, #36]	; (aef8 <gpio_pin_set_dt.isra.0+0x58>)
    aed4:	f01f fbfa 	bl	2a6cc <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aed8:	6823      	ldr	r3, [r4, #0]
    aeda:	4219      	tst	r1, r3
    aedc:	d003      	beq.n	aee6 <gpio_pin_set_dt.isra.0+0x46>
	if (value != 0)	{
    aede:	b122      	cbz	r2, aeea <gpio_pin_set_dt.isra.0+0x4a>
	return api->port_clear_bits_raw(port, pins);
    aee0:	6883      	ldr	r3, [r0, #8]
    aee2:	691b      	ldr	r3, [r3, #16]
    aee4:	e003      	b.n	aeee <gpio_pin_set_dt.isra.0+0x4e>
	if (value != 0)	{
    aee6:	2a00      	cmp	r2, #0
    aee8:	d0fa      	beq.n	aee0 <gpio_pin_set_dt.isra.0+0x40>
	return api->port_set_bits_raw(port, pins);
    aeea:	6883      	ldr	r3, [r0, #8]
    aeec:	68db      	ldr	r3, [r3, #12]
}
    aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
    aef2:	4718      	bx	r3
    aef4:	0003263b 	.word	0x0003263b
    aef8:	0003260a 	.word	0x0003260a
    aefc:	00032679 	.word	0x00032679
    af00:	00032696 	.word	0x00032696

0000af04 <button_pressed_1>:
void button_pressed_1(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    af04:	b508      	push	{r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    af06:	4807      	ldr	r0, [pc, #28]	; (af24 <button_pressed_1+0x20>)
    af08:	f01a fb6e 	bl	255e8 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED4, ON);
    af0c:	2101      	movs	r1, #1
    af0e:	4806      	ldr	r0, [pc, #24]	; (af28 <button_pressed_1+0x24>)
    af10:	f7ff ffc6 	bl	aea0 <gpio_pin_set_dt.isra.0>
    af14:	f023 fc99 	bl	2e84a <sys_clock_cycle_get_32>
}
    af18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    af1c:	4601      	mov	r1, r0
	printk("Button pressed 1 at %" PRIu32 "\n", k_cycle_get_32());
    af1e:	4803      	ldr	r0, [pc, #12]	; (af2c <button_pressed_1+0x28>)
    af20:	f01f ba19 	b.w	2a356 <printk>
    af24:	20008c4c 	.word	0x20008c4c
    af28:	000318d8 	.word	0x000318d8
    af2c:	000328b5 	.word	0x000328b5

0000af30 <connected>:
{
    af30:	b5b0      	push	{r4, r5, r7, lr}
    af32:	b088      	sub	sp, #32
    af34:	4604      	mov	r4, r0
    af36:	af00      	add	r7, sp, #0
	if (err) {
    af38:	b189      	cbz	r1, af5e <connected+0x2e>
		LOG_ERR("Connection failed (err %u)", err);
    af3a:	466c      	mov	r4, sp
    af3c:	b088      	sub	sp, #32
    af3e:	466a      	mov	r2, sp
    af40:	4b17      	ldr	r3, [pc, #92]	; (afa0 <connected+0x70>)
    af42:	4818      	ldr	r0, [pc, #96]	; (afa4 <connected+0x74>)
    af44:	e9c2 3105 	strd	r3, r1, [r2, #20]
    af48:	2303      	movs	r3, #3
    af4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    af4e:	f842 3f10 	str.w	r3, [r2, #16]!
    af52:	f01e ff89 	bl	29e68 <z_log_msg_static_create.constprop.0>
    af56:	46a5      	mov	sp, r4
}
    af58:	3720      	adds	r7, #32
    af5a:	46bd      	mov	sp, r7
    af5c:	bdb0      	pop	{r4, r5, r7, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    af5e:	f021 fbc4 	bl	2c6ea <bt_conn_get_dst>
    af62:	4639      	mov	r1, r7
    af64:	f7ff fdfa 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
    af68:	466d      	mov	r5, sp
    af6a:	b088      	sub	sp, #32
    af6c:	466a      	mov	r2, sp
    af6e:	4b0e      	ldr	r3, [pc, #56]	; (afa8 <connected+0x78>)
    af70:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    af74:	e9c2 3705 	strd	r3, r7, [r2, #20]
    af78:	f44f 7300 	mov.w	r3, #512	; 0x200
    af7c:	8393      	strh	r3, [r2, #28]
    af7e:	4b0b      	ldr	r3, [pc, #44]	; (afac <connected+0x7c>)
    af80:	4808      	ldr	r0, [pc, #32]	; (afa4 <connected+0x74>)
    af82:	f842 3f10 	str.w	r3, [r2, #16]!
    af86:	f01e ff6f 	bl	29e68 <z_log_msg_static_create.constprop.0>
	current_conn = bt_conn_ref(conn);
    af8a:	4620      	mov	r0, r4
    af8c:	46ad      	mov	sp, r5
    af8e:	f009 ff41 	bl	14e14 <bt_conn_ref>
    af92:	4b07      	ldr	r3, [pc, #28]	; (afb0 <connected+0x80>)
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    af94:	2101      	movs	r1, #1
	current_conn = bt_conn_ref(conn);
    af96:	6018      	str	r0, [r3, #0]
    gpio_pin_set_dt(CON_STATUS_LED, ON);
    af98:	4806      	ldr	r0, [pc, #24]	; (afb4 <connected+0x84>)
    af9a:	f7ff ff81 	bl	aea0 <gpio_pin_set_dt.isra.0>
    af9e:	e7db      	b.n	af58 <connected+0x28>
    afa0:	000328cd 	.word	0x000328cd
    afa4:	000315cc 	.word	0x000315cc
    afa8:	000328e8 	.word	0x000328e8
    afac:	01000003 	.word	0x01000003
    afb0:	2000a32c 	.word	0x2000a32c
    afb4:	000318f0 	.word	0x000318f0

0000afb8 <disconnected>:
{
    afb8:	b5b0      	push	{r4, r5, r7, lr}
    afba:	b088      	sub	sp, #32
    afbc:	af00      	add	r7, sp, #0
    afbe:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    afc0:	f021 fb93 	bl	2c6ea <bt_conn_get_dst>
    afc4:	4639      	mov	r1, r7
    afc6:	f7ff fdc9 	bl	ab5c <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afca:	466d      	mov	r5, sp
    afcc:	b08a      	sub	sp, #40	; 0x28
    afce:	466a      	mov	r2, sp
    afd0:	4b11      	ldr	r3, [pc, #68]	; (b018 <disconnected+0x60>)
    afd2:	61d4      	str	r4, [r2, #28]
    afd4:	e9c2 3705 	strd	r3, r7, [r2, #20]
    afd8:	f44f 7300 	mov.w	r3, #512	; 0x200
    afdc:	8413      	strh	r3, [r2, #32]
    afde:	4b0f      	ldr	r3, [pc, #60]	; (b01c <disconnected+0x64>)
	if (auth_conn) {
    afe0:	4c0f      	ldr	r4, [pc, #60]	; (b020 <disconnected+0x68>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
    afe2:	4810      	ldr	r0, [pc, #64]	; (b024 <disconnected+0x6c>)
    afe4:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    afe8:	f842 3f10 	str.w	r3, [r2, #16]!
    afec:	f01e ff3c 	bl	29e68 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
    aff0:	6820      	ldr	r0, [r4, #0]
    aff2:	46ad      	mov	sp, r5
    aff4:	b118      	cbz	r0, affe <disconnected+0x46>
		bt_conn_unref(auth_conn);
    aff6:	f009 ff35 	bl	14e64 <bt_conn_unref>
		auth_conn = NULL;
    affa:	2300      	movs	r3, #0
    affc:	6023      	str	r3, [r4, #0]
	if (current_conn) {
    affe:	4c0a      	ldr	r4, [pc, #40]	; (b028 <disconnected+0x70>)
    b000:	6820      	ldr	r0, [r4, #0]
    b002:	b130      	cbz	r0, b012 <disconnected+0x5a>
		bt_conn_unref(current_conn);
    b004:	f009 ff2e 	bl	14e64 <bt_conn_unref>
		current_conn = NULL;
    b008:	2100      	movs	r1, #0
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b00a:	4808      	ldr	r0, [pc, #32]	; (b02c <disconnected+0x74>)
		current_conn = NULL;
    b00c:	6021      	str	r1, [r4, #0]
		gpio_pin_set_dt(CON_STATUS_LED, OFF);
    b00e:	f7ff ff47 	bl	aea0 <gpio_pin_set_dt.isra.0>
}
    b012:	3720      	adds	r7, #32
    b014:	46bd      	mov	sp, r7
    b016:	bdb0      	pop	{r4, r5, r7, pc}
    b018:	000328f5 	.word	0x000328f5
    b01c:	01000004 	.word	0x01000004
    b020:	2000a328 	.word	0x2000a328
    b024:	000315cc 	.word	0x000315cc
    b028:	2000a32c 	.word	0x2000a32c
    b02c:	000318f0 	.word	0x000318f0

0000b030 <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    b030:	4603      	mov	r3, r0
    b032:	b570      	push	{r4, r5, r6, lr}
    b034:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    b036:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    b038:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    b03a:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    b03c:	4322      	orrs	r2, r4
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b03e:	f002 0430 	and.w	r4, r2, #48	; 0x30
    b042:	2c30      	cmp	r4, #48	; 0x30
	struct gpio_driver_data *data =
    b044:	6905      	ldr	r5, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
    b046:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
    b04a:	d10e      	bne.n	b06a <gpio_pin_configure_dt.isra.0+0x3a>
    b04c:	4925      	ldr	r1, [pc, #148]	; (b0e4 <gpio_pin_configure_dt.isra.0+0xb4>)
    b04e:	f240 23b7 	movw	r3, #695	; 0x2b7
    b052:	4a25      	ldr	r2, [pc, #148]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b054:	4825      	ldr	r0, [pc, #148]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b056:	f01f fb40 	bl	2a6da <assert_print>
    b05a:	4825      	ldr	r0, [pc, #148]	; (b0f0 <gpio_pin_configure_dt.isra.0+0xc0>)
    b05c:	f01f fb3d 	bl	2a6da <assert_print>
    b060:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
    b064:	4820      	ldr	r0, [pc, #128]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b066:	f01f fb31 	bl	2a6cc <assert_post_action>
    b06a:	f002 1402 	and.w	r4, r2, #131074	; 0x20002
    b06e:	2c02      	cmp	r4, #2
    b070:	d10c      	bne.n	b08c <gpio_pin_configure_dt.isra.0+0x5c>
    b072:	4920      	ldr	r1, [pc, #128]	; (b0f4 <gpio_pin_configure_dt.isra.0+0xc4>)
    b074:	f240 23bb 	movw	r3, #699	; 0x2bb
    b078:	4a1b      	ldr	r2, [pc, #108]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b07a:	481c      	ldr	r0, [pc, #112]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b07c:	f01f fb2d 	bl	2a6da <assert_print>
    b080:	481d      	ldr	r0, [pc, #116]	; (b0f8 <gpio_pin_configure_dt.isra.0+0xc8>)
    b082:	f01f fb2a 	bl	2a6da <assert_print>
    b086:	f240 21bb 	movw	r1, #699	; 0x2bb
    b08a:	e7eb      	b.n	b064 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
    b08c:	f002 0406 	and.w	r4, r2, #6
    b090:	2c04      	cmp	r4, #4
    b092:	d109      	bne.n	b0a8 <gpio_pin_configure_dt.isra.0+0x78>
    b094:	4919      	ldr	r1, [pc, #100]	; (b0fc <gpio_pin_configure_dt.isra.0+0xcc>)
    b096:	f240 23bf 	movw	r3, #703	; 0x2bf
    b09a:	4a13      	ldr	r2, [pc, #76]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b09c:	4813      	ldr	r0, [pc, #76]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b09e:	f01f fb1c 	bl	2a6da <assert_print>
    b0a2:	f240 21bf 	movw	r1, #703	; 0x2bf
    b0a6:	e7dd      	b.n	b064 <gpio_pin_configure_dt.isra.0+0x34>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    b0a8:	2401      	movs	r4, #1
    b0aa:	681b      	ldr	r3, [r3, #0]
    b0ac:	408c      	lsls	r4, r1
    b0ae:	421c      	tst	r4, r3
    b0b0:	d10c      	bne.n	b0cc <gpio_pin_configure_dt.isra.0+0x9c>
    b0b2:	4913      	ldr	r1, [pc, #76]	; (b100 <gpio_pin_configure_dt.isra.0+0xd0>)
    b0b4:	f240 23d2 	movw	r3, #722	; 0x2d2
    b0b8:	4a0b      	ldr	r2, [pc, #44]	; (b0e8 <gpio_pin_configure_dt.isra.0+0xb8>)
    b0ba:	480c      	ldr	r0, [pc, #48]	; (b0ec <gpio_pin_configure_dt.isra.0+0xbc>)
    b0bc:	f01f fb0d 	bl	2a6da <assert_print>
    b0c0:	4810      	ldr	r0, [pc, #64]	; (b104 <gpio_pin_configure_dt.isra.0+0xd4>)
    b0c2:	f01f fb0a 	bl	2a6da <assert_print>
    b0c6:	f240 21d2 	movw	r1, #722	; 0x2d2
    b0ca:	e7cb      	b.n	b064 <gpio_pin_configure_dt.isra.0+0x34>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0cc:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    b0ce:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    b0d2:	bf14      	ite	ne
    b0d4:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    b0d6:	43a3      	biceq	r3, r4
    b0d8:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    b0da:	6833      	ldr	r3, [r6, #0]
}
    b0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_configure(port, pin, flags);
    b0e0:	4718      	bx	r3
    b0e2:	bf00      	nop
    b0e4:	00032912 	.word	0x00032912
    b0e8:	0003260a 	.word	0x0003260a
    b0ec:	00032679 	.word	0x00032679
    b0f0:	0003294b 	.word	0x0003294b
    b0f4:	00032988 	.word	0x00032988
    b0f8:	000329bd 	.word	0x000329bd
    b0fc:	00032a0f 	.word	0x00032a0f
    b100:	0003263b 	.word	0x0003263b
    b104:	00032696 	.word	0x00032696

0000b108 <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b108:	b510      	push	{r4, lr}
	switch (evt->type) {
    b10a:	780b      	ldrb	r3, [r1, #0]
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data){
    b10c:	b086      	sub	sp, #24
	switch (evt->type) {
    b10e:	2b05      	cmp	r3, #5
    b110:	d828      	bhi.n	b164 <uart_cb+0x5c>
    b112:	e8df f003 	tbb	[pc, r3]
    b116:	8a03      	.short	0x8a03
    b118:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
    b11c:	688b      	ldr	r3, [r1, #8]
    b11e:	b30b      	cbz	r3, b164 <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
    b120:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
    b122:	b1f8      	cbz	r0, b164 <uart_cb+0x5c>
		if (aborted_buf) {
    b124:	4a4b      	ldr	r2, [pc, #300]	; (b254 <uart_cb+0x14c>)
    b126:	6813      	ldr	r3, [r2, #0]
    b128:	b1f3      	cbz	r3, b168 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b12a:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
    b12c:	2300      	movs	r3, #0
    b12e:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
    b130:	4a49      	ldr	r2, [pc, #292]	; (b258 <uart_cb+0x150>)
    b132:	6013      	str	r3, [r2, #0]
		k_free(buf);
    b134:	f025 fa01 	bl	3053a <k_free>
	return z_impl_k_queue_get(queue, timeout);
    b138:	2200      	movs	r2, #0
    b13a:	2300      	movs	r3, #0
    b13c:	4847      	ldr	r0, [pc, #284]	; (b25c <uart_cb+0x154>)
    b13e:	f01a f9e9 	bl	25514 <z_impl_k_queue_get>
		if (!buf) {
    b142:	b178      	cbz	r0, b164 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
    b144:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b146:	1d01      	adds	r1, r0, #4
    b148:	4845      	ldr	r0, [pc, #276]	; (b260 <uart_cb+0x158>)
    b14a:	f01e fe98 	bl	29e7e <uart_tx.constprop.0>
    b14e:	b148      	cbz	r0, b164 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
    b150:	4b44      	ldr	r3, [pc, #272]	; (b264 <uart_cb+0x15c>)
			LOG_WRN("Not able to allocate UART receive buffer");
    b152:	9305      	str	r3, [sp, #20]
    b154:	2302      	movs	r3, #2
    b156:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b15a:	4843      	ldr	r0, [pc, #268]	; (b268 <uart_cb+0x160>)
    b15c:	aa04      	add	r2, sp, #16
    b15e:	9304      	str	r3, [sp, #16]
    b160:	f01e fe82 	bl	29e68 <z_log_msg_static_create.constprop.0>
}
    b164:	b006      	add	sp, #24
    b166:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
    b168:	3804      	subs	r0, #4
    b16a:	e7e3      	b.n	b134 <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
    b16c:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
    b16e:	68cb      	ldr	r3, [r1, #12]
    b170:	8d10      	ldrh	r0, [r2, #40]	; 0x28
    b172:	4403      	add	r3, r0
		if (disable_req) {
    b174:	483d      	ldr	r0, [pc, #244]	; (b26c <uart_cb+0x164>)
		buf->len += evt->data.rx.len;
    b176:	b29b      	uxth	r3, r3
    b178:	8513      	strh	r3, [r2, #40]	; 0x28
		if (disable_req) {
    b17a:	7802      	ldrb	r2, [r0, #0]
    b17c:	2a00      	cmp	r2, #0
    b17e:	d1f1      	bne.n	b164 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
    b180:	684a      	ldr	r2, [r1, #4]
    b182:	4413      	add	r3, r2
    b184:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    b188:	2b0a      	cmp	r3, #10
    b18a:	d001      	beq.n	b190 <uart_cb+0x88>
    b18c:	2b0d      	cmp	r3, #13
    b18e:	d1e9      	bne.n	b164 <uart_cb+0x5c>
			disable_req = true;
    b190:	2301      	movs	r3, #1
    b192:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    b194:	4832      	ldr	r0, [pc, #200]	; (b260 <uart_cb+0x158>)
    b196:	6883      	ldr	r3, [r0, #8]
    b198:	695b      	ldr	r3, [r3, #20]
}
    b19a:	b006      	add	sp, #24
    b19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1a0:	4718      	bx	r3
		disable_req = false;
    b1a2:	2400      	movs	r4, #0
    b1a4:	4b31      	ldr	r3, [pc, #196]	; (b26c <uart_cb+0x164>)
		buf = k_malloc(sizeof(*buf));
    b1a6:	2030      	movs	r0, #48	; 0x30
		disable_req = false;
    b1a8:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
    b1aa:	f025 f9cd 	bl	30548 <k_malloc>
		if (buf) {
    b1ae:	b138      	cbz	r0, b1c0 <uart_cb+0xb8>
			buf->len = 0;
    b1b0:	8584      	strh	r4, [r0, #44]	; 0x2c
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1b2:	1d01      	adds	r1, r0, #4
    b1b4:	482a      	ldr	r0, [pc, #168]	; (b260 <uart_cb+0x158>)
}
    b1b6:	b006      	add	sp, #24
    b1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
    b1bc:	f01e be57 	b.w	29e6e <uart_rx_enable.constprop.0>
			LOG_WRN("Not able to allocate UART receive buffer");
    b1c0:	4b2b      	ldr	r3, [pc, #172]	; (b270 <uart_cb+0x168>)
    b1c2:	aa04      	add	r2, sp, #16
    b1c4:	9305      	str	r3, [sp, #20]
    b1c6:	2302      	movs	r3, #2
    b1c8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b1cc:	4826      	ldr	r0, [pc, #152]	; (b268 <uart_cb+0x160>)
    b1ce:	9304      	str	r3, [sp, #16]
    b1d0:	f01e fe4a 	bl	29e68 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1d4:	f240 6267 	movw	r2, #1639	; 0x667
    b1d8:	2300      	movs	r3, #0
    b1da:	4826      	ldr	r0, [pc, #152]	; (b274 <uart_cb+0x16c>)
}
    b1dc:	b006      	add	sp, #24
    b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
    b1e2:	f01a bfa1 	b.w	26128 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
    b1e6:	2030      	movs	r0, #48	; 0x30
    b1e8:	f025 f9ae 	bl	30548 <k_malloc>
		if (buf) {
    b1ec:	4601      	mov	r1, r0
    b1ee:	b150      	cbz	r0, b206 <uart_cb+0xfe>
			buf->len = 0;
    b1f0:	2300      	movs	r3, #0
	return api->rx_buf_rsp(dev, buf, len);
    b1f2:	2228      	movs	r2, #40	; 0x28
    b1f4:	8583      	strh	r3, [r0, #44]	; 0x2c
    b1f6:	481a      	ldr	r0, [pc, #104]	; (b260 <uart_cb+0x158>)
    b1f8:	3104      	adds	r1, #4
    b1fa:	6883      	ldr	r3, [r0, #8]
    b1fc:	691b      	ldr	r3, [r3, #16]
}
    b1fe:	b006      	add	sp, #24
    b200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b204:	4718      	bx	r3
			LOG_WRN("Not able to allocate UART receive buffer");
    b206:	4b1a      	ldr	r3, [pc, #104]	; (b270 <uart_cb+0x168>)
    b208:	e7a3      	b.n	b152 <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
    b20a:	684b      	ldr	r3, [r1, #4]
    b20c:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
    b20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b210:	b12b      	cbz	r3, b21e <uart_cb+0x116>
			k_fifo_put(&fifo_uart_rx_data, buf);
    b212:	4819      	ldr	r0, [pc, #100]	; (b278 <uart_cb+0x170>)
}
    b214:	b006      	add	sp, #24
    b216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
    b21a:	f024 bfe1 	b.w	301e0 <k_queue_append>
			k_free(buf);
    b21e:	4608      	mov	r0, r1
}
    b220:	b006      	add	sp, #24
    b222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
    b226:	f025 b988 	b.w	3053a <k_free>
		if (!aborted_buf) {
    b22a:	4a0a      	ldr	r2, [pc, #40]	; (b254 <uart_cb+0x14c>)
    b22c:	6813      	ldr	r3, [r2, #0]
    b22e:	b90b      	cbnz	r3, b234 <uart_cb+0x12c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
    b230:	684b      	ldr	r3, [r1, #4]
    b232:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
    b234:	4808      	ldr	r0, [pc, #32]	; (b258 <uart_cb+0x150>)
    b236:	688b      	ldr	r3, [r1, #8]
    b238:	6801      	ldr	r1, [r0, #0]
    b23a:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
    b23c:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
    b23e:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
    b240:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
		uart_tx(uart, &buf->data[aborted_len],
    b242:	4807      	ldr	r0, [pc, #28]	; (b260 <uart_cb+0x158>)
    b244:	1ad2      	subs	r2, r2, r3
    b246:	4419      	add	r1, r3
}
    b248:	b006      	add	sp, #24
    b24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
    b24e:	f01e be16 	b.w	29e7e <uart_tx.constprop.0>
    b252:	bf00      	nop
    b254:	2000a324 	.word	0x2000a324
    b258:	2000a320 	.word	0x2000a320
    b25c:	20008c80 	.word	0x20008c80
    b260:	00030fcc 	.word	0x00030fcc
    b264:	00032a42 	.word	0x00032a42
    b268:	000315cc 	.word	0x000315cc
    b26c:	20021b2e 	.word	0x20021b2e
    b270:	00032724 	.word	0x00032724
    b274:	20009228 	.word	0x20009228
    b278:	20008c64 	.word	0x20008c64

0000b27c <shoot_minute_save_thread>:
void shoot_minute_save_thread(void){
    b27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_uptime_ticks();
    b280:	f025 f86c 	bl	3035c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b288:	fba0 0302 	umull	r0, r3, r0, r2
    b28c:	fb02 3101 	mla	r1, r2, r1, r3
    b290:	0bc0      	lsrs	r0, r0, #15
   uint64_t actual_time = k_uptime_get()/1000;
    b292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b296:	2300      	movs	r3, #0
    b298:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    b29c:	0bc9      	lsrs	r1, r1, #15
    b29e:	f7fd fdd7 	bl	8e50 <__aeabi_ldivmod>
    h = (actual_time/3600); 
    b2a2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2a6:	2300      	movs	r3, #0
   uint64_t actual_time = k_uptime_get()/1000;
    b2a8:	460d      	mov	r5, r1
    b2aa:	4606      	mov	r6, r0
    h = (actual_time/3600); 
    b2ac:	f7fd fe20 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2b0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    b2b4:	fb03 f100 	mul.w	r1, r3, r0
    b2b8:	1a70      	subs	r0, r6, r1
    b2ba:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
    b2be:	223c      	movs	r2, #60	; 0x3c
    b2c0:	2300      	movs	r3, #0
    b2c2:	f7fd fe15 	bl	8ef0 <__aeabi_uldivmod>
    b2c6:	4605      	mov	r5, r0
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b2c8:	4f22      	ldr	r7, [pc, #136]	; (b354 <shoot_minute_save_thread+0xd8>)
    b2ca:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    b2ce:	f025 f845 	bl	3035c <z_impl_k_uptime_ticks>
    b2d2:	fba0 4306 	umull	r4, r3, r0, r6
    b2d6:	fb06 3101 	mla	r1, r6, r1, r3
    b2da:	0be4      	lsrs	r4, r4, #15
    actual_time = k_uptime_get()/1000;
    b2dc:	ea44 4041 	orr.w	r0, r4, r1, lsl #17
    b2e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2e4:	2300      	movs	r3, #0
    b2e6:	0bc9      	lsrs	r1, r1, #15
    b2e8:	f7fd fdb2 	bl	8e50 <__aeabi_ldivmod>
	h = (actual_time/3600); 
    b2ec:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    b2f0:	2300      	movs	r3, #0
    actual_time = k_uptime_get()/1000;
    b2f2:	4604      	mov	r4, r0
    b2f4:	468a      	mov	sl, r1
	m = (actual_time -(3600*h))/60;
    b2f6:	f44f 6861 	mov.w	r8, #3600	; 0xe10
	h = (actual_time/3600); 
    b2fa:	f7fd fdf9 	bl	8ef0 <__aeabi_uldivmod>
	m = (actual_time -(3600*h))/60;
    b2fe:	fb08 f800 	mul.w	r8, r8, r0
	h = (actual_time/3600); 
    b302:	4681      	mov	r9, r0
	m = (actual_time -(3600*h))/60;
    b304:	ebb4 0008 	subs.w	r0, r4, r8
    b308:	f04f 023c 	mov.w	r2, #60	; 0x3c
    b30c:	eb6a 71e8 	sbc.w	r1, sl, r8, asr #31
    b310:	2300      	movs	r3, #0
    b312:	f7fd fded 	bl	8ef0 <__aeabi_uldivmod>
   if (m==(last_minute+1)){
    b316:	1c6a      	adds	r2, r5, #1
    b318:	4282      	cmp	r2, r0
    b31a:	d1d8      	bne.n	b2ce <shoot_minute_save_thread+0x52>
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b31c:	233c      	movs	r3, #60	; 0x3c
        if (m==59){last_minute=-1;}
    b31e:	2a3b      	cmp	r2, #59	; 0x3b
    b320:	bf14      	ite	ne
    b322:	4615      	movne	r5, r2
    b324:	f04f 35ff 	moveq.w	r5, #4294967295
	s = (actual_time -(3600*h)-(m*60));
    b328:	eba4 0408 	sub.w	r4, r4, r8
		if (h==24){h=0;} // only up to 23:59:59h
    b32c:	f1b9 0f18 	cmp.w	r9, #24
		printk("LOG Circular Buffer hh:mm:ss at %02d:%02d:%02d\n",h,m,s);
    b330:	fb03 4312 	mls	r3, r3, r2, r4
    b334:	bf14      	ite	ne
    b336:	4649      	movne	r1, r9
    b338:	2100      	moveq	r1, #0
    b33a:	4638      	mov	r0, r7
    b33c:	f01f f80b 	bl	2a356 <printk>
        feed_circular_buffer();
    b340:	f000 fc0a 	bl	bb58 <feed_circular_buffer>
		print_current_position_cb(C_Buffer_Current_Position);
    b344:	4b04      	ldr	r3, [pc, #16]	; (b358 <shoot_minute_save_thread+0xdc>)
    b346:	6818      	ldr	r0, [r3, #0]
    b348:	f000 fd3c 	bl	bdc4 <print_current_position_cb>
		printk(" \n");
    b34c:	4803      	ldr	r0, [pc, #12]	; (b35c <shoot_minute_save_thread+0xe0>)
    b34e:	f01f f802 	bl	2a356 <printk>
    b352:	e7ba      	b.n	b2ca <shoot_minute_save_thread+0x4e>
    b354:	00032a60 	.word	0x00032a60
    b358:	20021468 	.word	0x20021468
    b35c:	00032ed1 	.word	0x00032ed1

0000b360 <ble_write_thread>:
{
    b360:	b570      	push	{r4, r5, r6, lr}
	k_sem_take(&ble_init_ok, K_FOREVER);
    b362:	f04f 32ff 	mov.w	r2, #4294967295
    b366:	f04f 33ff 	mov.w	r3, #4294967295
    b36a:	480d      	ldr	r0, [pc, #52]	; (b3a0 <ble_write_thread+0x40>)
    b36c:	f01e fd8f 	bl	29e8e <k_sem_take.constprop.0.isra.0>
	return z_impl_k_queue_get(queue, timeout);
    b370:	4d0c      	ldr	r5, [pc, #48]	; (b3a4 <ble_write_thread+0x44>)
			printk("Falha aqui- Failed to send data over BLE connection");
    b372:	4e0d      	ldr	r6, [pc, #52]	; (b3a8 <ble_write_thread+0x48>)
    b374:	f04f 32ff 	mov.w	r2, #4294967295
    b378:	f04f 33ff 	mov.w	r3, #4294967295
    b37c:	4628      	mov	r0, r5
    b37e:	f01a f8c9 	bl	25514 <z_impl_k_queue_get>
    b382:	4604      	mov	r4, r0
		if (bt_nus_send(NULL, buf->data, buf->len)) {
    b384:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    b386:	1d01      	adds	r1, r0, #4
    b388:	2000      	movs	r0, #0
    b38a:	f005 f937 	bl	105fc <bt_nus_send>
    b38e:	b110      	cbz	r0, b396 <ble_write_thread+0x36>
			printk("Falha aqui- Failed to send data over BLE connection");
    b390:	4630      	mov	r0, r6
    b392:	f01e ffe0 	bl	2a356 <printk>
		k_free(buf);
    b396:	4620      	mov	r0, r4
    b398:	f025 f8cf 	bl	3053a <k_free>
	for (;;) {
    b39c:	e7ea      	b.n	b374 <ble_write_thread+0x14>
    b39e:	bf00      	nop
    b3a0:	20008ba4 	.word	0x20008ba4
    b3a4:	20008c64 	.word	0x20008c64
    b3a8:	00032a90 	.word	0x00032a90

0000b3ac <adc_thread>:
}




void adc_thread(void){
    b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
    b3b0:	4e36      	ldr	r6, [pc, #216]	; (b48c <adc_thread+0xe0>)
	return z_impl_k_mutex_lock(mutex, timeout);
    b3b2:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b490 <adc_thread+0xe4>
    b3b6:	b085      	sub	sp, #20
	int err;
    

    while (1) {	
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b3b8:	4c36      	ldr	r4, [pc, #216]	; (b494 <adc_thread+0xe8>)
    b3ba:	2700      	movs	r7, #0
    b3bc:	46a3      	mov	fp, r4
			int32_t val_mv;

			(void)adc_sequence_init_dt(&adc_channels[i], &sequence);
            k_mutex_lock(&ad_ready, K_FOREVER);
			err = adc_read(adc_channels[i].dev, &sequence);
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b3be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; b498 <adc_thread+0xec>
	if (!spec->channel_cfg_dt_node_exists) {
    b3c2:	7963      	ldrb	r3, [r4, #5]
    b3c4:	b13b      	cbz	r3, b3d6 <adc_thread+0x2a>
	seq->channels = BIT(spec->channel_id);
    b3c6:	2301      	movs	r3, #1
    b3c8:	7922      	ldrb	r2, [r4, #4]
    b3ca:	4093      	lsls	r3, r2
    b3cc:	6073      	str	r3, [r6, #4]
	seq->resolution = spec->resolution;
    b3ce:	7c23      	ldrb	r3, [r4, #16]
    b3d0:	7433      	strb	r3, [r6, #16]
	seq->oversampling = spec->oversampling;
    b3d2:	7c63      	ldrb	r3, [r4, #17]
    b3d4:	7473      	strb	r3, [r6, #17]
    b3d6:	f04f 32ff 	mov.w	r2, #4294967295
    b3da:	f04f 33ff 	mov.w	r3, #4294967295
    b3de:	4650      	mov	r0, sl
    b3e0:	f019 fea0 	bl	25124 <z_impl_k_mutex_lock>
			err = adc_read(adc_channels[i].dev, &sequence);
    b3e4:	6825      	ldr	r5, [r4, #0]
	return api->read(dev, sequence);
    b3e6:	68ab      	ldr	r3, [r5, #8]
    b3e8:	4631      	mov	r1, r6
    b3ea:	4628      	mov	r0, r5
    b3ec:	685b      	ldr	r3, [r3, #4]
    b3ee:	4798      	blx	r3
			adc_value[adc_channels[i].channel_id]=buf_adc;
    b3f0:	7922      	ldrb	r2, [r4, #4]
    b3f2:	f9b8 1000 	ldrsh.w	r1, [r8]
    b3f6:	4b29      	ldr	r3, [pc, #164]	; (b49c <adc_thread+0xf0>)
    b3f8:	9201      	str	r2, [sp, #4]
    b3fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			k_mutex_unlock(&ad_ready);

           if (flag==1){
    b3fe:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b4a0 <adc_thread+0xf4>
	return z_impl_k_mutex_unlock(mutex);
    b402:	4650      	mov	r0, sl
    b404:	f019 ff5e 	bl	252c4 <z_impl_k_mutex_unlock>
    b408:	f8d9 3000 	ldr.w	r3, [r9]
    b40c:	9a01      	ldr	r2, [sp, #4]
    b40e:	2b01      	cmp	r3, #1
    b410:	d12d      	bne.n	b46e <adc_thread+0xc2>
			printk("- %s, channel %d: ",adc_channels[i].dev->name,adc_channels[i].channel_id);
    b412:	6829      	ldr	r1, [r5, #0]
    b414:	4823      	ldr	r0, [pc, #140]	; (b4a4 <adc_thread+0xf8>)
    b416:	f01e ff9e 	bl	2a356 <printk>
			printk("%"PRId16, buf_adc);
    b41a:	f9b8 1000 	ldrsh.w	r1, [r8]
    b41e:	4822      	ldr	r0, [pc, #136]	; (b4a8 <adc_thread+0xfc>)
    b420:	f01e ff99 	bl	2a356 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b424:	7963      	ldrb	r3, [r4, #5]
			val_mv = buf_adc;
    b426:	f9b8 5000 	ldrsh.w	r5, [r8]
    b42a:	b1e3      	cbz	r3, b466 <adc_thread+0xba>
	if (spec->channel_cfg.differential) {
    b42c:	2114      	movs	r1, #20
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b42e:	79e3      	ldrb	r3, [r4, #7]
	if (spec->channel_cfg.differential) {
    b430:	fb01 b107 	mla	r1, r1, r7, fp
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    b434:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    b436:	bf0a      	itet	eq
    b438:	6823      	ldreq	r3, [r4, #0]
		vref_mv = spec->vref_mv;
    b43a:	89e2      	ldrhne	r2, [r4, #14]
	return api->ref_internal;
    b43c:	689b      	ldreq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    b43e:	7a89      	ldrb	r1, [r1, #10]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    b440:	bf08      	it	eq
    b442:	891a      	ldrheq	r2, [r3, #8]
	resolution = spec->resolution;
    b444:	7c23      	ldrb	r3, [r4, #16]
	int32_t adc_mv = *valp * ref_mv;
    b446:	436a      	muls	r2, r5
	if (spec->channel_cfg.differential) {
    b448:	0689      	lsls	r1, r1, #26
		resolution -= 1U;
    b44a:	bf44      	itt	mi
    b44c:	f103 33ff 	addmi.w	r3, r3, #4294967295
    b450:	b2db      	uxtbmi	r3, r3
	int ret = adc_gain_invert(gain, &adc_mv);
    b452:	79a0      	ldrb	r0, [r4, #6]
    b454:	a903      	add	r1, sp, #12
    b456:	9301      	str	r3, [sp, #4]
	int32_t adc_mv = *valp * ref_mv;
    b458:	9203      	str	r2, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    b45a:	f010 f9f3 	bl	1b844 <adc_gain_invert>
	if (ret == 0) {
    b45e:	b910      	cbnz	r0, b466 <adc_thread+0xba>
		*valp = (adc_mv >> resolution);
    b460:	9d03      	ldr	r5, [sp, #12]
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	411d      	asrs	r5, r3
			adc_raw_to_millivolts_dt(&adc_channels[i],&val_mv);
			printk(" = %"PRId32" mV\n", val_mv);
    b466:	4629      	mov	r1, r5
    b468:	4810      	ldr	r0, [pc, #64]	; (b4ac <adc_thread+0x100>)
    b46a:	f01e ff74 	bl	2a356 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b46e:	3701      	adds	r7, #1
    b470:	2f06      	cmp	r7, #6
    b472:	f104 0414 	add.w	r4, r4, #20
    b476:	d1a4      	bne.n	b3c2 <adc_thread+0x16>
		   }
			
		}
        flag=0;
    b478:	2300      	movs	r3, #0
    b47a:	f8c9 3000 	str.w	r3, [r9]
	return z_impl_k_sleep(timeout);
    b47e:	2100      	movs	r1, #0
    b480:	f640 40cd 	movw	r0, #3277	; 0xccd
    b484:	f01b ffa4 	bl	273d0 <z_impl_k_sleep>
    while (1) {	
    b488:	e796      	b.n	b3b8 <adc_thread+0xc>
    b48a:	bf00      	nop
    b48c:	200083e4 	.word	0x200083e4
    b490:	2000a334 	.word	0x2000a334
    b494:	00031860 	.word	0x00031860
    b498:	20021b10 	.word	0x20021b10
    b49c:	20021b00 	.word	0x20021b00
    b4a0:	2000a330 	.word	0x2000a330
    b4a4:	00032ac4 	.word	0x00032ac4
    b4a8:	00032ad7 	.word	0x00032ad7
    b4ac:	00032adb 	.word	0x00032adb

0000b4b0 <button_pressed_4>:
void button_pressed_4(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4b0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    b4b2:	4805      	ldr	r0, [pc, #20]	; (b4c8 <button_pressed_4+0x18>)
    b4b4:	f01a f898 	bl	255e8 <z_impl_k_sem_give>
    b4b8:	f023 f9c7 	bl	2e84a <sys_clock_cycle_get_32>
}
    b4bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4c0:	4601      	mov	r1, r0
	printk("Button pressed 4 at %" PRIu32 "\n", k_cycle_get_32());
    b4c2:	4802      	ldr	r0, [pc, #8]	; (b4cc <button_pressed_4+0x1c>)
    b4c4:	f01e bf47 	b.w	2a356 <printk>
    b4c8:	20008bd4 	.word	0x20008bd4
    b4cc:	00032ae5 	.word	0x00032ae5

0000b4d0 <button_pressed_3>:
void button_pressed_3(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4d0:	b508      	push	{r3, lr}
    b4d2:	4805      	ldr	r0, [pc, #20]	; (b4e8 <button_pressed_3+0x18>)
    b4d4:	f01a f888 	bl	255e8 <z_impl_k_sem_give>
    b4d8:	f023 f9b7 	bl	2e84a <sys_clock_cycle_get_32>
}
    b4dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b4e0:	4601      	mov	r1, r0
	printk("Button pressed 3 at %" PRIu32 "\n", k_cycle_get_32());
    b4e2:	4802      	ldr	r0, [pc, #8]	; (b4ec <button_pressed_3+0x1c>)
    b4e4:	f01e bf37 	b.w	2a356 <printk>
    b4e8:	20008bbc 	.word	0x20008bbc
    b4ec:	00032afd 	.word	0x00032afd

0000b4f0 <button_pressed_2>:
void button_pressed_2(const struct device *dev, struct gpio_callback *cb,uint32_t pins){
    b4f0:	b508      	push	{r3, lr}
    b4f2:	4807      	ldr	r0, [pc, #28]	; (b510 <button_pressed_2+0x20>)
    b4f4:	f01a f878 	bl	255e8 <z_impl_k_sem_give>
	gpio_pin_set_dt(LED3, ON);
    b4f8:	2101      	movs	r1, #1
    b4fa:	4806      	ldr	r0, [pc, #24]	; (b514 <button_pressed_2+0x24>)
    b4fc:	f7ff fcd0 	bl	aea0 <gpio_pin_set_dt.isra.0>
    b500:	f023 f9a3 	bl	2e84a <sys_clock_cycle_get_32>
}
    b504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b508:	4601      	mov	r1, r0
	printk("Button pressed 2 at %" PRIu32 "\n", k_cycle_get_32());
    b50a:	4803      	ldr	r0, [pc, #12]	; (b518 <button_pressed_2+0x28>)
    b50c:	f01e bf23 	b.w	2a356 <printk>
    b510:	20008c1c 	.word	0x20008c1c
    b514:	000318e0 	.word	0x000318e0
    b518:	00032b15 	.word	0x00032b15

0000b51c <uart2_teste>:
void uart2_teste(void){
    b51c:	b510      	push	{r4, lr}
   buf = k_malloc(sizeof(*buf));
    b51e:	2030      	movs	r0, #48	; 0x30
    b520:	f025 f812 	bl	30548 <k_malloc>
    buf->data[0] = 0x41;
    b524:	f244 2341 	movw	r3, #16961	; 0x4241
    buf->len=3;
    b528:	2203      	movs	r2, #3
    buf->data[0] = 0x41;
    b52a:	8083      	strh	r3, [r0, #4]
	buf->data[2] = 0x43;
    b52c:	2343      	movs	r3, #67	; 0x43
   buf = k_malloc(sizeof(*buf));
    b52e:	4604      	mov	r4, r0
	buf->data[2] = 0x43;
    b530:	7183      	strb	r3, [r0, #6]
    buf->len=3;
    b532:	8582      	strh	r2, [r0, #44]	; 0x2c
   uart_tx(uart_2, buf->data, buf->len, SYS_FOREVER_MS);
    b534:	1d01      	adds	r1, r0, #4
    b536:	4804      	ldr	r0, [pc, #16]	; (b548 <uart2_teste+0x2c>)
    b538:	f01e fca1 	bl	29e7e <uart_tx.constprop.0>
   k_free(buf);
    b53c:	4620      	mov	r0, r4
}
    b53e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   k_free(buf);
    b542:	f024 bffa 	b.w	3053a <k_free>
    b546:	bf00      	nop
    b548:	00030fb4 	.word	0x00030fb4

0000b54c <flash_test_>:
void flash_test_(void) {
    b54c:	b507      	push	{r0, r1, r2, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    b54e:	480c      	ldr	r0, [pc, #48]	; (b580 <flash_test_+0x34>)
    b550:	f024 fdd3 	bl	300fa <z_device_is_ready>
    b554:	4601      	mov	r1, r0
printf("Dev_OK:%d \n", dev_ok);
    b556:	480b      	ldr	r0, [pc, #44]	; (b584 <flash_test_+0x38>)
    b558:	f01d fcd4 	bl	28f04 <iprintf>
err=flash_area_open(FIXED_PARTITION_ID(partition_0), &my_area);
    b55c:	a901      	add	r1, sp, #4
    b55e:	2000      	movs	r0, #0
    b560:	f004 fbe8 	bl	fd34 <flash_area_open>
    b564:	4601      	mov	r1, r0
printf("Result Open:%d \n", err);
    b566:	4808      	ldr	r0, [pc, #32]	; (b588 <flash_test_+0x3c>)
    b568:	f01d fccc 	bl	28f04 <iprintf>
printf("fa_id:%d device_id:%d size=%zu\n", my_area->fa_id,my_area->fa_device_id,my_area->fa_size);
    b56c:	9901      	ldr	r1, [sp, #4]
    b56e:	4807      	ldr	r0, [pc, #28]	; (b58c <flash_test_+0x40>)
    b570:	688b      	ldr	r3, [r1, #8]
    b572:	784a      	ldrb	r2, [r1, #1]
    b574:	7809      	ldrb	r1, [r1, #0]
    b576:	f01d fcc5 	bl	28f04 <iprintf>
}
    b57a:	b003      	add	sp, #12
    b57c:	f85d fb04 	ldr.w	pc, [sp], #4
    b580:	0003105c 	.word	0x0003105c
    b584:	00032b2d 	.word	0x00032b2d
    b588:	00032b39 	.word	0x00032b39
    b58c:	00032b4a 	.word	0x00032b4a

0000b590 <write_memory_thread>:
void write_memory_thread(void){
    b590:	b510      	push	{r4, lr}
		    k_sem_take(&save_memory,K_FOREVER);
    b592:	4c05      	ldr	r4, [pc, #20]	; (b5a8 <write_memory_thread+0x18>)
    b594:	f04f 32ff 	mov.w	r2, #4294967295
    b598:	f04f 33ff 	mov.w	r3, #4294967295
    b59c:	4620      	mov	r0, r4
    b59e:	f01e fc76 	bl	29e8e <k_sem_take.constprop.0.isra.0>
		    flash_test_();
    b5a2:	f7ff ffd3 	bl	b54c <flash_test_>
	while(1){
    b5a6:	e7f5      	b.n	b594 <write_memory_thread+0x4>
    b5a8:	20008c1c 	.word	0x20008c1c

0000b5ac <send_bluetooth>:
{
    b5ac:	b084      	sub	sp, #16
    b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b2:	ac06      	add	r4, sp, #24
    b5b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b5b8:	203d      	movs	r0, #61	; 0x3d
    uint32_t comprimento=buf.len;
    b5ba:	f8bd 67f0 	ldrh.w	r6, [sp, #2032]	; 0x7f0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b5be:	f024 ffc3 	bl	30548 <k_malloc>
    int k=0;
    b5c2:	2400      	movs	r4, #0
	packet_data = k_malloc(BLE_NUS_MAX_DATA_LEN);
    b5c4:	4605      	mov	r5, r0
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b5c6:	f8df 8054 	ldr.w	r8, [pc, #84]	; b61c <send_bluetooth+0x70>
    while(k<comprimento-1){
    b5ca:	1e77      	subs	r7, r6, #1
    b5cc:	42a7      	cmp	r7, r4
    b5ce:	d91d      	bls.n	b60c <send_bluetooth+0x60>
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5d0:	42b4      	cmp	r4, r6
    b5d2:	d301      	bcc.n	b5d8 <send_bluetooth+0x2c>
    b5d4:	2200      	movs	r2, #0
    b5d6:	e00f      	b.n	b5f8 <send_bluetooth+0x4c>
    b5d8:	2200      	movs	r2, #0
    b5da:	1e6b      	subs	r3, r5, #1
       data[small_pkt]=buf.data[k];
    b5dc:	f104 0118 	add.w	r1, r4, #24
    b5e0:	4469      	add	r1, sp
       small_pkt++;
    b5e2:	3201      	adds	r2, #1
	   *(packet_data+small_pkt) = buf.data[k];
    b5e4:	7909      	ldrb	r1, [r1, #4]
       small_pkt++;
    b5e6:	b292      	uxth	r2, r2
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5e8:	2a3d      	cmp	r2, #61	; 0x3d
	   *(packet_data+small_pkt) = buf.data[k];
    b5ea:	f803 1f01 	strb.w	r1, [r3, #1]!
       k++;
    b5ee:	f104 0401 	add.w	r4, r4, #1
      while (small_pkt<BLE_NUS_MAX_DATA_LEN && k < comprimento  ){
    b5f2:	d001      	beq.n	b5f8 <send_bluetooth+0x4c>
    b5f4:	42a6      	cmp	r6, r4
    b5f6:	d8f1      	bhi.n	b5dc <send_bluetooth+0x30>
           if (bt_nus_send(NULL, packet_data ,small_pkt)) {
    b5f8:	4629      	mov	r1, r5
    b5fa:	2000      	movs	r0, #0
    b5fc:	f004 fffe 	bl	105fc <bt_nus_send>
    b600:	2800      	cmp	r0, #0
    b602:	d0e3      	beq.n	b5cc <send_bluetooth+0x20>
		    	printk("FALHA - ATIVE A RECEPCAO BLUETOOTH ");
    b604:	4640      	mov	r0, r8
    b606:	f01e fea6 	bl	2a356 <printk>
    b60a:	e7df      	b.n	b5cc <send_bluetooth+0x20>
     k_free(packet_data);
    b60c:	4628      	mov	r0, r5
    b60e:	f024 ff94 	bl	3053a <k_free>
}
    b612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b616:	2000      	movs	r0, #0
    b618:	b004      	add	sp, #16
    b61a:	4770      	bx	lr
    b61c:	00032b6a 	.word	0x00032b6a

0000b620 <send_protobuf_thread>:
void send_protobuf_thread(void){
    b620:	b510      	push	{r4, lr}
		    k_sem_take(&send_proto,K_FOREVER);
    b622:	4c05      	ldr	r4, [pc, #20]	; (b638 <send_protobuf_thread+0x18>)
    b624:	f04f 32ff 	mov.w	r2, #4294967295
    b628:	f04f 33ff 	mov.w	r3, #4294967295
    b62c:	4620      	mov	r0, r4
    b62e:	f01e fc2e 	bl	29e8e <k_sem_take.constprop.0.isra.0>
		    send_protobuf();
    b632:	f01e fc34 	bl	29e9e <send_protobuf>
   while(1){
    b636:	e7f5      	b.n	b624 <send_protobuf_thread+0x4>
    b638:	20008c4c 	.word	0x20008c4c

0000b63c <configure_all_buttons>:
void configure_all_buttons(void){
    b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(BUTTON1_ADR, GPIO_INPUT);
    b63e:	4c30      	ldr	r4, [pc, #192]	; (b700 <configure_all_buttons+0xc4>)
    b640:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b644:	4620      	mov	r0, r4
    b646:	f7ff fcf3 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b64a:	4620      	mov	r0, r4
    b64c:	f7ff fa54 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    b650:	492c      	ldr	r1, [pc, #176]	; (b704 <configure_all_buttons+0xc8>)
    b652:	4b2d      	ldr	r3, [pc, #180]	; (b708 <configure_all_buttons+0xcc>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b654:	4c2d      	ldr	r4, [pc, #180]	; (b70c <configure_all_buttons+0xd0>)
    b656:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b658:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    b65c:	4620      	mov	r0, r4
    b65e:	608b      	str	r3, [r1, #8]
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b660:	4d2b      	ldr	r5, [pc, #172]	; (b710 <configure_all_buttons+0xd4>)
 gpio_add_callback(BUTTON1.port, BUTTON1_CB);
    b662:	f01e fc16 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b666:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b668:	4f2a      	ldr	r7, [pc, #168]	; (b714 <configure_all_buttons+0xd8>)
 printk("Set up button at %s pin %d\n", BUTTON1.port->name, BUTTON1.pin);
    b66a:	2217      	movs	r2, #23
    b66c:	4631      	mov	r1, r6
    b66e:	4628      	mov	r0, r5
    b670:	f01e fe71 	bl	2a356 <printk>
 gpio_pin_configure_dt(BUTTON2_ADR, GPIO_INPUT);
    b674:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b678:	4638      	mov	r0, r7
    b67a:	f7ff fcd9 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b67e:	4638      	mov	r0, r7
    b680:	f7ff fa3a 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b684:	4924      	ldr	r1, [pc, #144]	; (b718 <configure_all_buttons+0xdc>)
    b686:	4b25      	ldr	r3, [pc, #148]	; (b71c <configure_all_buttons+0xe0>)
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b688:	4620      	mov	r0, r4
    b68a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b68c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b690:	4f23      	ldr	r7, [pc, #140]	; (b720 <configure_all_buttons+0xe4>)
    b692:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON2.port, BUTTON2_CB);
    b694:	f01e fbfd 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON2.port->name, BUTTON2.pin);
    b698:	2218      	movs	r2, #24
    b69a:	4631      	mov	r1, r6
    b69c:	4628      	mov	r0, r5
    b69e:	f01e fe5a 	bl	2a356 <printk>
 gpio_pin_configure_dt(BUTTON3_ADR, GPIO_INPUT);
    b6a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6a6:	4638      	mov	r0, r7
    b6a8:	f7ff fcc2 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON3_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b6ac:	4638      	mov	r0, r7
    b6ae:	f7ff fa23 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b6b2:	491c      	ldr	r1, [pc, #112]	; (b724 <configure_all_buttons+0xe8>)
    b6b4:	4b1c      	ldr	r3, [pc, #112]	; (b728 <configure_all_buttons+0xec>)
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b6b6:	4620      	mov	r0, r4
    b6b8:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b6be:	4f1b      	ldr	r7, [pc, #108]	; (b72c <configure_all_buttons+0xf0>)
    b6c0:	608b      	str	r3, [r1, #8]
 gpio_add_callback(BUTTON3.port, BUTTON3_CB);
    b6c2:	f01e fbe6 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON3.port->name, BUTTON3.pin);
    b6c6:	2208      	movs	r2, #8
    b6c8:	4631      	mov	r1, r6
    b6ca:	4628      	mov	r0, r5
    b6cc:	f01e fe43 	bl	2a356 <printk>
 gpio_pin_configure_dt(BUTTON4_ADR, GPIO_INPUT);
    b6d0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b6d4:	4638      	mov	r0, r7
    b6d6:	f7ff fcab 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_interrupt_configure_dt(BUTTON4_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b6da:	4638      	mov	r0, r7
    b6dc:	f7ff fa0c 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b6e0:	4913      	ldr	r1, [pc, #76]	; (b730 <configure_all_buttons+0xf4>)
    b6e2:	4b14      	ldr	r3, [pc, #80]	; (b734 <configure_all_buttons+0xf8>)
 gpio_add_callback(BUTTON4.port, BUTTON4_CB);
    b6e4:	4620      	mov	r0, r4
    b6e6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b6e8:	f44f 7300 	mov.w	r3, #512	; 0x200
    b6ec:	608b      	str	r3, [r1, #8]
    b6ee:	f01e fbd0 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6f2:	4631      	mov	r1, r6
    b6f4:	4628      	mov	r0, r5
}
    b6f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up button at %s pin %d\n", BUTTON4.port->name, BUTTON4.pin);
    b6fa:	2209      	movs	r2, #9
    b6fc:	f01e be2b 	b.w	2a356 <printk>
    b700:	00031928 	.word	0x00031928
    b704:	2000a390 	.word	0x2000a390
    b708:	0000af05 	.word	0x0000af05
    b70c:	00030f6c 	.word	0x00030f6c
    b710:	00032b8e 	.word	0x00032b8e
    b714:	00031920 	.word	0x00031920
    b718:	2000a384 	.word	0x2000a384
    b71c:	0000b4f1 	.word	0x0000b4f1
    b720:	00031918 	.word	0x00031918
    b724:	2000a378 	.word	0x2000a378
    b728:	0000b4d1 	.word	0x0000b4d1
    b72c:	00031910 	.word	0x00031910
    b730:	2000a36c 	.word	0x2000a36c
    b734:	0000b4b1 	.word	0x0000b4b1

0000b738 <configure_digital_inputs>:
void configure_digital_inputs(void){
    b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 gpio_pin_configure_dt(DIG_0_ADR, GPIO_INPUT );
    b73a:	4c2e      	ldr	r4, [pc, #184]	; (b7f4 <configure_digital_inputs+0xbc>)
    b73c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b740:	4620      	mov	r0, r4
    b742:	f7ff fc75 	bl	b030 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 4 Value:%d \n",gpio_pin_get_dt(DIG_0_ADR));
    b746:	4620      	mov	r0, r4
    b748:	f7ff f8da 	bl	a900 <gpio_pin_get_dt>
    b74c:	4601      	mov	r1, r0
    b74e:	482a      	ldr	r0, [pc, #168]	; (b7f8 <configure_digital_inputs+0xc0>)
    b750:	f01e fe01 	bl	2a356 <printk>
 gpio_pin_interrupt_configure_dt(DIG_0_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b754:	4620      	mov	r0, r4
    b756:	f7ff f9cf 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b75a:	4928      	ldr	r1, [pc, #160]	; (b7fc <configure_digital_inputs+0xc4>)
    b75c:	4b28      	ldr	r3, [pc, #160]	; (b800 <configure_digital_inputs+0xc8>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b75e:	4c29      	ldr	r4, [pc, #164]	; (b804 <configure_digital_inputs+0xcc>)
    b760:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b762:	2310      	movs	r3, #16
    b764:	4620      	mov	r0, r4
    b766:	608b      	str	r3, [r1, #8]
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b768:	4d27      	ldr	r5, [pc, #156]	; (b808 <configure_digital_inputs+0xd0>)
 gpio_add_callback(DIG_0.port, DIG_0_CB);
    b76a:	f01e fb92 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b76e:	6826      	ldr	r6, [r4, #0]
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b770:	4f26      	ldr	r7, [pc, #152]	; (b80c <configure_digital_inputs+0xd4>)
 printk("Set up Digital Input at %s pin %d\n", DIG_0.port->name, DIG_0.pin);
    b772:	2204      	movs	r2, #4
    b774:	4631      	mov	r1, r6
    b776:	4628      	mov	r0, r5
    b778:	f01e fded 	bl	2a356 <printk>
 gpio_pin_configure_dt(DIG_1_ADR, GPIO_INPUT);
    b77c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b780:	4638      	mov	r0, r7
    b782:	f7ff fc55 	bl	b030 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 5 Value:%d \n",gpio_pin_get_dt(DIG_1_ADR));
    b786:	4638      	mov	r0, r7
    b788:	f7ff f8ba 	bl	a900 <gpio_pin_get_dt>
    b78c:	4601      	mov	r1, r0
    b78e:	4820      	ldr	r0, [pc, #128]	; (b810 <configure_digital_inputs+0xd8>)
    b790:	f01e fde1 	bl	2a356 <printk>
 gpio_pin_interrupt_configure_dt(DIG_1_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b794:	4638      	mov	r0, r7
    b796:	f7ff f9af 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b79a:	491e      	ldr	r1, [pc, #120]	; (b814 <configure_digital_inputs+0xdc>)
    b79c:	4b1e      	ldr	r3, [pc, #120]	; (b818 <configure_digital_inputs+0xe0>)
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b79e:	4f1f      	ldr	r7, [pc, #124]	; (b81c <configure_digital_inputs+0xe4>)
    b7a0:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7a2:	2320      	movs	r3, #32
 gpio_add_callback(DIG_1.port, DIG_1_CB);
    b7a4:	4620      	mov	r0, r4
    b7a6:	608b      	str	r3, [r1, #8]
    b7a8:	f01e fb73 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_1.port->name, DIG_1.pin);
    b7ac:	2205      	movs	r2, #5
    b7ae:	4631      	mov	r1, r6
    b7b0:	4628      	mov	r0, r5
    b7b2:	f01e fdd0 	bl	2a356 <printk>
 gpio_pin_configure_dt(DIG_2_ADR, GPIO_INPUT);
    b7b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    b7ba:	4638      	mov	r0, r7
    b7bc:	f7ff fc38 	bl	b030 <gpio_pin_configure_dt.isra.0>
 printk("GPIO 1 Pin 6 Value:%d \n",gpio_pin_get_dt(DIG_2_ADR));
    b7c0:	4638      	mov	r0, r7
    b7c2:	f7ff f89d 	bl	a900 <gpio_pin_get_dt>
    b7c6:	4601      	mov	r1, r0
    b7c8:	4815      	ldr	r0, [pc, #84]	; (b820 <configure_digital_inputs+0xe8>)
    b7ca:	f01e fdc4 	bl	2a356 <printk>
 gpio_pin_interrupt_configure_dt(DIG_2_ADR,GPIO_INT_EDGE_TO_ACTIVE);
    b7ce:	4638      	mov	r0, r7
    b7d0:	f7ff f992 	bl	aaf8 <gpio_pin_interrupt_configure_dt.constprop.0.isra.0>
	callback->handler = handler;
    b7d4:	4913      	ldr	r1, [pc, #76]	; (b824 <configure_digital_inputs+0xec>)
    b7d6:	4b14      	ldr	r3, [pc, #80]	; (b828 <configure_digital_inputs+0xf0>)
 gpio_add_callback(DIG_2.port, DIG_2_CB);
    b7d8:	4620      	mov	r0, r4
    b7da:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    b7dc:	2340      	movs	r3, #64	; 0x40
    b7de:	608b      	str	r3, [r1, #8]
    b7e0:	f01e fb57 	bl	29e92 <gpio_add_callback.isra.0>
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7e4:	4631      	mov	r1, r6
    b7e6:	4628      	mov	r0, r5
}
    b7e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 printk("Set up Digital Input at %s pin %d\n", DIG_2.port->name, DIG_2.pin);
    b7ec:	2206      	movs	r2, #6
    b7ee:	f01e bdb2 	b.w	2a356 <printk>
    b7f2:	bf00      	nop
    b7f4:	00031908 	.word	0x00031908
    b7f8:	00032baa 	.word	0x00032baa
    b7fc:	2000a360 	.word	0x2000a360
    b800:	0000a961 	.word	0x0000a961
    b804:	00030f54 	.word	0x00030f54
    b808:	00032bc2 	.word	0x00032bc2
    b80c:	00031900 	.word	0x00031900
    b810:	00032be5 	.word	0x00032be5
    b814:	2000a354 	.word	0x2000a354
    b818:	0000a985 	.word	0x0000a985
    b81c:	000318f8 	.word	0x000318f8
    b820:	00032bfd 	.word	0x00032bfd
    b824:	2000a348 	.word	0x2000a348
    b828:	0000a9a9 	.word	0x0000a9a9

0000b82c <configure_led>:
void configure_led(void){
    b82c:	b508      	push	{r3, lr}
 gpio_pin_configure_dt(LED1, GPIO_OUTPUT);
    b82e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b832:	480a      	ldr	r0, [pc, #40]	; (b85c <configure_led+0x30>)
    b834:	f7ff fbfc 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED2, GPIO_OUTPUT);
    b838:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b83c:	4808      	ldr	r0, [pc, #32]	; (b860 <configure_led+0x34>)
    b83e:	f7ff fbf7 	bl	b030 <gpio_pin_configure_dt.isra.0>
 gpio_pin_configure_dt(LED3, GPIO_OUTPUT);
    b842:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b846:	4807      	ldr	r0, [pc, #28]	; (b864 <configure_led+0x38>)
    b848:	f7ff fbf2 	bl	b030 <gpio_pin_configure_dt.isra.0>
}
    b84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 gpio_pin_configure_dt(LED4, GPIO_OUTPUT);
    b850:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    b854:	4804      	ldr	r0, [pc, #16]	; (b868 <configure_led+0x3c>)
    b856:	f7ff bbeb 	b.w	b030 <gpio_pin_configure_dt.isra.0>
    b85a:	bf00      	nop
    b85c:	000318f0 	.word	0x000318f0
    b860:	000318e8 	.word	0x000318e8
    b864:	000318e0 	.word	0x000318e0
    b868:	000318d8 	.word	0x000318d8

0000b86c <turn_off_all_leds>:
void turn_off_all_leds(void){
    b86c:	b508      	push	{r3, lr}
       gpio_pin_set_dt(LED1, OFF);
    b86e:	2100      	movs	r1, #0
    b870:	4808      	ldr	r0, [pc, #32]	; (b894 <turn_off_all_leds+0x28>)
    b872:	f7ff fb15 	bl	aea0 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED2, OFF);
    b876:	2100      	movs	r1, #0
    b878:	4807      	ldr	r0, [pc, #28]	; (b898 <turn_off_all_leds+0x2c>)
    b87a:	f7ff fb11 	bl	aea0 <gpio_pin_set_dt.isra.0>
       gpio_pin_set_dt(LED3, OFF);
    b87e:	2100      	movs	r1, #0
    b880:	4806      	ldr	r0, [pc, #24]	; (b89c <turn_off_all_leds+0x30>)
    b882:	f7ff fb0d 	bl	aea0 <gpio_pin_set_dt.isra.0>
}
    b886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       gpio_pin_set_dt(LED4, OFF);
    b88a:	2100      	movs	r1, #0
    b88c:	4804      	ldr	r0, [pc, #16]	; (b8a0 <turn_off_all_leds+0x34>)
    b88e:	f7ff bb07 	b.w	aea0 <gpio_pin_set_dt.isra.0>
    b892:	bf00      	nop
    b894:	000318f0 	.word	0x000318f0
    b898:	000318e8 	.word	0x000318e8
    b89c:	000318e0 	.word	0x000318e0
    b8a0:	000318d8 	.word	0x000318d8

0000b8a4 <configure_adc>:
void configure_adc(void){
    b8a4:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b8a6:	2500      	movs	r5, #0
    b8a8:	4c12      	ldr	r4, [pc, #72]	; (b8f4 <configure_adc+0x50>)
		if (!device_is_ready(adc_channels[i].dev)) {
    b8aa:	f854 0c06 	ldr.w	r0, [r4, #-6]
    b8ae:	f024 fc24 	bl	300fa <z_device_is_ready>
    b8b2:	b920      	cbnz	r0, b8be <configure_adc+0x1a>
			printk("ADC controller device not ready\n");
    b8b4:	4810      	ldr	r0, [pc, #64]	; (b8f8 <configure_adc+0x54>)
}
    b8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("ADC controller device not ready\n");
    b8ba:	f01e bd4c 	b.w	2a356 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
    b8be:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    b8c2:	b16b      	cbz	r3, b8e0 <configure_adc+0x3c>
	return adc_channel_setup(spec->dev, &spec->channel_cfg);
    b8c4:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
    b8c8:	6883      	ldr	r3, [r0, #8]
    b8ca:	4621      	mov	r1, r4
    b8cc:	681b      	ldr	r3, [r3, #0]
    b8ce:	4798      	blx	r3
		if (err < 0) {
    b8d0:	1e02      	subs	r2, r0, #0
    b8d2:	da08      	bge.n	b8e6 <configure_adc+0x42>
			printk("Could not setup channel #%d (%d)\n", i, err);
    b8d4:	4629      	mov	r1, r5
}
    b8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			printk("Could not setup channel #%d (%d)\n", i, err);
    b8da:	4808      	ldr	r0, [pc, #32]	; (b8fc <configure_adc+0x58>)
    b8dc:	f01e bd3b 	b.w	2a356 <printk>
		return -ENOTSUP;
    b8e0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    b8e4:	e7f6      	b.n	b8d4 <configure_adc+0x30>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
    b8e6:	3501      	adds	r5, #1
    b8e8:	2d06      	cmp	r5, #6
    b8ea:	f104 0414 	add.w	r4, r4, #20
    b8ee:	d1dc      	bne.n	b8aa <configure_adc+0x6>
}
    b8f0:	bd38      	pop	{r3, r4, r5, pc}
    b8f2:	bf00      	nop
    b8f4:	00031866 	.word	0x00031866
    b8f8:	00032c15 	.word	0x00032c15
    b8fc:	00032c36 	.word	0x00032c36

0000b900 <main>:
{
    b900:	b570      	push	{r4, r5, r6, lr}
    b902:	b08a      	sub	sp, #40	; 0x28
	return z_impl_k_mutex_init(mutex);
    b904:	4862      	ldr	r0, [pc, #392]	; (ba90 <main+0x190>)
    b906:	f024 fc4b 	bl	301a0 <z_impl_k_mutex_init>
	configure_led();
    b90a:	f7ff ff8f 	bl	b82c <configure_led>
	turn_off_all_leds();
    b90e:	f7ff ffad 	bl	b86c <turn_off_all_leds>
 	configure_all_buttons();
    b912:	f7ff fe93 	bl	b63c <configure_all_buttons>
	configure_digital_inputs();
    b916:	f7ff ff0f 	bl	b738 <configure_digital_inputs>
	configure_adc();
    b91a:	f7ff ffc3 	bl	b8a4 <configure_adc>
    b91e:	4d5d      	ldr	r5, [pc, #372]	; (ba94 <main+0x194>)
    b920:	4628      	mov	r0, r5
    b922:	f024 fbea 	bl	300fa <z_device_is_ready>
	if (!device_is_ready(uart)) {
    b926:	b1d0      	cbz	r0, b95e <main+0x5e>
	rx = k_malloc(sizeof(*rx));
    b928:	2030      	movs	r0, #48	; 0x30
    b92a:	f024 fe0d 	bl	30548 <k_malloc>
	if (rx) {
    b92e:	4604      	mov	r4, r0
    b930:	b1a8      	cbz	r0, b95e <main+0x5e>
		rx->len = 0;
    b932:	2600      	movs	r6, #0
	k_work_init_delayable(&uart_work, uart_work_handler);
    b934:	4958      	ldr	r1, [pc, #352]	; (ba98 <main+0x198>)
		rx->len = 0;
    b936:	8586      	strh	r6, [r0, #44]	; 0x2c
	k_work_init_delayable(&uart_work, uart_work_handler);
    b938:	4858      	ldr	r0, [pc, #352]	; (ba9c <main+0x19c>)
    b93a:	f01a fad9 	bl	25ef0 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b93e:	68ab      	ldr	r3, [r5, #8]
    b940:	681b      	ldr	r3, [r3, #0]
    b942:	b973      	cbnz	r3, b962 <main+0x62>
		k_free(rx);
    b944:	4620      	mov	r0, r4
    b946:	f024 fdf8 	bl	3053a <k_free>
		LOG_ERR("Cannot initialize UART callback");
    b94a:	4b55      	ldr	r3, [pc, #340]	; (baa0 <main+0x1a0>)
    b94c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b950:	9309      	str	r3, [sp, #36]	; 0x24
    b952:	2302      	movs	r3, #2
    b954:	4853      	ldr	r0, [pc, #332]	; (baa4 <main+0x1a4>)
    b956:	aa08      	add	r2, sp, #32
    b958:	9308      	str	r3, [sp, #32]
    b95a:	f01e fa85 	bl	29e68 <z_log_msg_static_create.constprop.0>
		error();
    b95e:	f01e fab4 	bl	29eca <error>
	return api->callback_set(dev, callback, user_data);
    b962:	4632      	mov	r2, r6
    b964:	4628      	mov	r0, r5
    b966:	4950      	ldr	r1, [pc, #320]	; (baa8 <main+0x1a8>)
    b968:	4798      	blx	r3
	if (err) {
    b96a:	2800      	cmp	r0, #0
    b96c:	d1ea      	bne.n	b944 <main+0x44>
	tx = k_malloc(sizeof(*tx));
    b96e:	2030      	movs	r0, #48	; 0x30
    b970:	f024 fdea 	bl	30548 <k_malloc>
	if (tx) {
    b974:	4606      	mov	r6, r0
    b976:	2800      	cmp	r0, #0
    b978:	d0f1      	beq.n	b95e <main+0x5e>
		pos = snprintf(tx->data, sizeof(tx->data),
    b97a:	1d03      	adds	r3, r0, #4
    b97c:	4618      	mov	r0, r3
    b97e:	494b      	ldr	r1, [pc, #300]	; (baac <main+0x1ac>)
    b980:	f024 ff74 	bl	3086c <strcpy>
		tx->len = pos;
    b984:	2226      	movs	r2, #38	; 0x26
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b986:	4601      	mov	r1, r0
		tx->len = pos;
    b988:	85b2      	strh	r2, [r6, #44]	; 0x2c
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
    b98a:	4628      	mov	r0, r5
    b98c:	f01e fa77 	bl	29e7e <uart_tx.constprop.0>
	if (err) {
    b990:	4601      	mov	r1, r0
    b992:	b118      	cbz	r0, b99c <main+0x9c>
		printf("Cannot display welcome message (err: %d)", err);
    b994:	4846      	ldr	r0, [pc, #280]	; (bab0 <main+0x1b0>)
    b996:	f01d fab5 	bl	28f04 <iprintf>
	if (err) {
    b99a:	e7e0      	b.n	b95e <main+0x5e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
    b99c:	1d21      	adds	r1, r4, #4
    b99e:	4628      	mov	r0, r5
    b9a0:	f01e fa65 	bl	29e6e <uart_rx_enable.constprop.0>
	if (err) {
    b9a4:	4604      	mov	r4, r0
    b9a6:	2800      	cmp	r0, #0
    b9a8:	d1d9      	bne.n	b95e <main+0x5e>
    b9aa:	4e42      	ldr	r6, [pc, #264]	; (bab4 <main+0x1b4>)
    b9ac:	4630      	mov	r0, r6
    b9ae:	f024 fba4 	bl	300fa <z_device_is_ready>
	if (!device_is_ready(uart_2)) {
    b9b2:	2800      	cmp	r0, #0
    b9b4:	d0d3      	beq.n	b95e <main+0x5e>
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b9b6:	2030      	movs	r0, #48	; 0x30
    b9b8:	f024 fdc6 	bl	30548 <k_malloc>
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b9bc:	493e      	ldr	r1, [pc, #248]	; (bab8 <main+0x1b8>)
	rx_uart2->len = 0;
    b9be:	8584      	strh	r4, [r0, #44]	; 0x2c
	rx_uart2 = k_malloc(sizeof(*rx_uart2));
    b9c0:	4605      	mov	r5, r0
	k_work_init_delayable(&uart_work_2, uart_2_work_handler);
    b9c2:	483e      	ldr	r0, [pc, #248]	; (babc <main+0x1bc>)
    b9c4:	f01a fa94 	bl	25ef0 <k_work_init_delayable>
	if (api->callback_set == NULL) {
    b9c8:	68b3      	ldr	r3, [r6, #8]
    b9ca:	681b      	ldr	r3, [r3, #0]
    b9cc:	b11b      	cbz	r3, b9d6 <main+0xd6>
	return api->callback_set(dev, callback, user_data);
    b9ce:	4622      	mov	r2, r4
    b9d0:	4630      	mov	r0, r6
    b9d2:	493b      	ldr	r1, [pc, #236]	; (bac0 <main+0x1c0>)
    b9d4:	4798      	blx	r3
	uart_rx_enable(uart_2, rx_uart2->data, sizeof(rx_uart2->data), 50);
    b9d6:	4837      	ldr	r0, [pc, #220]	; (bab4 <main+0x1b4>)
    b9d8:	1d29      	adds	r1, r5, #4
    b9da:	f01e fa48 	bl	29e6e <uart_rx_enable.constprop.0>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    b9de:	4839      	ldr	r0, [pc, #228]	; (bac4 <main+0x1c4>)
    b9e0:	f009 fefe 	bl	157e0 <bt_conn_auth_cb_register>
		if (err) {
    b9e4:	b128      	cbz	r0, b9f2 <main+0xf2>
			printk("Failed to register authorization callbacks.\n");
    b9e6:	4838      	ldr	r0, [pc, #224]	; (bac8 <main+0x1c8>)
}
    b9e8:	b00a      	add	sp, #40	; 0x28
    b9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			printk("Failed to register authorization info callbacks.\n");
    b9ee:	f01e bcb2 	b.w	2a356 <printk>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    b9f2:	4836      	ldr	r0, [pc, #216]	; (bacc <main+0x1cc>)
    b9f4:	f009 ff0e 	bl	15814 <bt_conn_auth_info_cb_register>
		if (err) {
    b9f8:	b108      	cbz	r0, b9fe <main+0xfe>
			printk("Failed to register authorization info callbacks.\n");
    b9fa:	4835      	ldr	r0, [pc, #212]	; (bad0 <main+0x1d0>)
    b9fc:	e7f4      	b.n	b9e8 <main+0xe8>
	err = bt_enable(NULL);
    b9fe:	f007 fd81 	bl	13504 <bt_enable>
	if (err) {
    ba02:	2800      	cmp	r0, #0
    ba04:	d1ab      	bne.n	b95e <main+0x5e>
	printf("Bluetooth initialized \n\r");
    ba06:	4833      	ldr	r0, [pc, #204]	; (bad4 <main+0x1d4>)
    ba08:	f01d fa7c 	bl	28f04 <iprintf>
	printf("Increase the Client MTU to 65 \n\r");
    ba0c:	4832      	ldr	r0, [pc, #200]	; (bad8 <main+0x1d8>)
    ba0e:	f01d fa79 	bl	28f04 <iprintf>
	printf("Press any key to send the Protobuffer \n\r");
    ba12:	4832      	ldr	r0, [pc, #200]	; (badc <main+0x1dc>)
    ba14:	f01d fa76 	bl	28f04 <iprintf>
	z_impl_k_sem_give(sem);
    ba18:	4831      	ldr	r0, [pc, #196]	; (bae0 <main+0x1e0>)
    ba1a:	f019 fde5 	bl	255e8 <z_impl_k_sem_give>
		settings_load();
    ba1e:	f01f fc53 	bl	2b2c8 <settings_load>
	err = bt_nus_init(&nus_cb);
    ba22:	4830      	ldr	r0, [pc, #192]	; (bae4 <main+0x1e4>)
    ba24:	f004 fdde 	bl	105e4 <bt_nus_init>
	if (err) {
    ba28:	4601      	mov	r1, r0
    ba2a:	b128      	cbz	r0, ba38 <main+0x138>
		printf("Failed to initialize UART service (err: %d)", err);
    ba2c:	482e      	ldr	r0, [pc, #184]	; (bae8 <main+0x1e8>)
}
    ba2e:	b00a      	add	sp, #40	; 0x28
    ba30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("Failed to initialize UART service (err: %d)", err);
    ba34:	f01d ba66 	b.w	28f04 <iprintf>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
    ba38:	4d2c      	ldr	r5, [pc, #176]	; (baec <main+0x1ec>)
    ba3a:	ac04      	add	r4, sp, #16
    ba3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ba3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ba40:	682b      	ldr	r3, [r5, #0]
    ba42:	2501      	movs	r5, #1
    ba44:	6023      	str	r3, [r4, #0]
    ba46:	2202      	movs	r2, #2
    ba48:	4b29      	ldr	r3, [pc, #164]	; (baf0 <main+0x1f0>)
    ba4a:	492a      	ldr	r1, [pc, #168]	; (baf4 <main+0x1f4>)
    ba4c:	9500      	str	r5, [sp, #0]
    ba4e:	a804      	add	r0, sp, #16
    ba50:	f008 fc32 	bl	142b8 <bt_le_adv_start>
	if (err) {
    ba54:	4604      	mov	r4, r0
    ba56:	b128      	cbz	r0, ba64 <main+0x164>
		printf("Advertising failed to start (err %d)", err);
    ba58:	4601      	mov	r1, r0
    ba5a:	4827      	ldr	r0, [pc, #156]	; (baf8 <main+0x1f8>)
    ba5c:	f01d fa52 	bl	28f04 <iprintf>
}
    ba60:	b00a      	add	sp, #40	; 0x28
    ba62:	bd70      	pop	{r4, r5, r6, pc}
	flag=1;//print ad values once
    ba64:	4b25      	ldr	r3, [pc, #148]	; (bafc <main+0x1fc>)
    ba66:	4e26      	ldr	r6, [pc, #152]	; (bb00 <main+0x200>)
    ba68:	601d      	str	r5, [r3, #0]
    ba6a:	ad02      	add	r5, sp, #8
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba6c:	3401      	adds	r4, #1
		uart2_teste();
    ba6e:	f7ff fd55 	bl	b51c <uart2_teste>
		led_on_off(*RUN_STATUS_LED, (++blink_status) % 2);
    ba72:	e896 0003 	ldmia.w	r6, {r0, r1}
    ba76:	e885 0003 	stmia.w	r5, {r0, r1}
        gpio_pin_set_dt(&led, value);
    ba7a:	4628      	mov	r0, r5
    ba7c:	f004 0101 	and.w	r1, r4, #1
    ba80:	f7ff fa0e 	bl	aea0 <gpio_pin_set_dt.isra.0>
	return z_impl_k_sleep(timeout);
    ba84:	2100      	movs	r1, #0
    ba86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ba8a:	f01b fca1 	bl	273d0 <z_impl_k_sleep>
	for (;;) {
    ba8e:	e7ed      	b.n	ba6c <main+0x16c>
    ba90:	2000a334 	.word	0x2000a334
    ba94:	00030fcc 	.word	0x00030fcc
    ba98:	0000aa5d 	.word	0x0000aa5d
    ba9c:	20009228 	.word	0x20009228
    baa0:	00032c58 	.word	0x00032c58
    baa4:	000315cc 	.word	0x000315cc
    baa8:	0000b109 	.word	0x0000b109
    baac:	00032c78 	.word	0x00032c78
    bab0:	00032c9f 	.word	0x00032c9f
    bab4:	00030fb4 	.word	0x00030fb4
    bab8:	0000aa35 	.word	0x0000aa35
    babc:	200091f8 	.word	0x200091f8
    bac0:	00029e67 	.word	0x00029e67
    bac4:	200083cc 	.word	0x200083cc
    bac8:	00032cc8 	.word	0x00032cc8
    bacc:	200083bc 	.word	0x200083bc
    bad0:	00032cf5 	.word	0x00032cf5
    bad4:	00032d27 	.word	0x00032d27
    bad8:	00032d40 	.word	0x00032d40
    badc:	00032d61 	.word	0x00032d61
    bae0:	20008ba4 	.word	0x20008ba4
    bae4:	200083b0 	.word	0x200083b0
    bae8:	00032d8a 	.word	0x00032d8a
    baec:	000316a0 	.word	0x000316a0
    baf0:	00031848 	.word	0x00031848
    baf4:	00031850 	.word	0x00031850
    baf8:	00032db6 	.word	0x00032db6
    bafc:	2000a330 	.word	0x2000a330
    bb00:	000318e8 	.word	0x000318e8

0000bb04 <time_stamp_function>:
uint32_t time_stamp_function(void){
    bb04:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    bb06:	f024 fc29 	bl	3035c <z_impl_k_uptime_ticks>
    bb0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bb0e:	fba0 0302 	umull	r0, r3, r0, r2
    bb12:	fb02 3101 	mla	r1, r2, r1, r3
    bb16:	0bc0      	lsrs	r0, r0, #15
  uint64_t actual_time_seconds = k_uptime_get()/1000;
    bb18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bb1c:	2300      	movs	r3, #0
    bb1e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    bb22:	0bc9      	lsrs	r1, r1, #15
    bb24:	f7fd f994 	bl	8e50 <__aeabi_ldivmod>
    bb28:	4603      	mov	r3, r0
}
    bb2a:	4801      	ldr	r0, [pc, #4]	; (bb30 <time_stamp_function+0x2c>)
    bb2c:	4418      	add	r0, r3
    bb2e:	bd08      	pop	{r3, pc}
    bb30:	61cf9980 	.word	0x61cf9980

0000bb34 <values_of_digital_sensor>:
Digital values_of_digital_sensor(uint8_t sensor_number){
    bb34:	b538      	push	{r3, r4, r5, lr}
    bb36:	460d      	mov	r5, r1
    bb38:	4604      	mov	r4, r0
  digital_return_value.timestamp=time_stamp_function();
    bb3a:	f7ff ffe3 	bl	bb04 <time_stamp_function>
  digital_value[sensor_number]=0; //resets the counter
    bb3e:	2100      	movs	r1, #0
  digital_return_value.value=digital_value[sensor_number];
    bb40:	4b04      	ldr	r3, [pc, #16]	; (bb54 <values_of_digital_sensor+0x20>)
    bb42:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
  digital_value[sensor_number]=0; //resets the counter
    bb46:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
  return digital_return_value;
    bb4a:	e9c4 0200 	strd	r0, r2, [r4]
}
    bb4e:	4620      	mov	r0, r4
    bb50:	bd38      	pop	{r3, r4, r5, pc}
    bb52:	bf00      	nop
    bb54:	20021af0 	.word	0x20021af0

0000bb58 <feed_circular_buffer>:
void feed_circular_buffer(void){
    bb58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb5c:	4d2f      	ldr	r5, [pc, #188]	; (bc1c <feed_circular_buffer+0xc4>)
    bb5e:	4b30      	ldr	r3, [pc, #192]	; (bc20 <feed_circular_buffer+0xc8>)
    bb60:	682e      	ldr	r6, [r5, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb62:	f5b6 6fb4 	cmp.w	r6, #1440	; 0x5a0
    C_Buffer_Current_Position=C_Buffer_Free_Position;
    bb66:	601e      	str	r6, [r3, #0]
    if (C_Buffer_Free_Position < CIRCULAR_BUFFER_ELEMENTS){
    bb68:	d256      	bcs.n	bc18 <feed_circular_buffer+0xc0>
  gnss_return_value.timestamp=time_stamp_function();
    bb6a:	f7ff ffcb 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb6e:	f04f 0800 	mov.w	r8, #0
    bb72:	4c2c      	ldr	r4, [pc, #176]	; (bc24 <feed_circular_buffer+0xcc>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb74:	682f      	ldr	r7, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].gnss_module=values_of_gnss_module();
    bb76:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bb7a:	e9c6 8802 	strd	r8, r8, [r6, #8]
    bb7e:	6070      	str	r0, [r6, #4]
  analog_return_value.timestamp=time_stamp_function();
    bb80:	f7ff ffc0 	bl	bb04 <time_stamp_function>
  analog_return_value.value=adc_value[channel];
    bb84:	4e28      	ldr	r6, [pc, #160]	; (bc28 <feed_circular_buffer+0xd0>)
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb86:	eb04 1387 	add.w	r3, r4, r7, lsl #6
  analog_return_value.value=adc_value[channel];
    bb8a:	f9b6 2000 	ldrsh.w	r2, [r6]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bb8e:	466f      	mov	r7, sp
     C_Buffer[C_Buffer_Free_Position].analog=values_of_analog_sensor(ANALOG_SENSOR);
    bb90:	e9c3 0204 	strd	r0, r2, [r3, #16]
  ntc_return.timestamp=time_stamp_function();
    bb94:	f7ff ffb6 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].value=values_of_ntc_sensor(NTC_1).value;
    bb98:	682b      	ldr	r3, [r5, #0]
    bb9a:	8872      	ldrh	r2, [r6, #2]
    bb9c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bba0:	839a      	strh	r2, [r3, #28]
  ntc_return.timestamp=time_stamp_function();
    bba2:	f7ff ffaf 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].value=values_of_ntc_sensor(NTC_2).value;
    bba6:	682b      	ldr	r3, [r5, #0]
    bba8:	88b2      	ldrh	r2, [r6, #4]
    bbaa:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bbae:	849a      	strh	r2, [r3, #36]	; 0x24
  ntc_return.timestamp=time_stamp_function();
    bbb0:	f7ff ffa8 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].value=values_of_ntc_sensor(NTC_3).value;
    bbb4:	682b      	ldr	r3, [r5, #0]
    bbb6:	88f2      	ldrh	r2, [r6, #6]
    bbb8:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bbbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  ntc_return.timestamp=time_stamp_function();
    bbbe:	f7ff ffa1 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[0].timestamp=values_of_ntc_sensor(NTC_1).timestamp;
    bbc2:	682b      	ldr	r3, [r5, #0]
    bbc4:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bbc8:	6198      	str	r0, [r3, #24]
  ntc_return.timestamp=time_stamp_function();
    bbca:	f7ff ff9b 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[1].timestamp=values_of_ntc_sensor(NTC_2).timestamp;
    bbce:	682b      	ldr	r3, [r5, #0]
    bbd0:	eb04 1383 	add.w	r3, r4, r3, lsl #6
    bbd4:	6218      	str	r0, [r3, #32]
  ntc_return.timestamp=time_stamp_function();
    bbd6:	f7ff ff95 	bl	bb04 <time_stamp_function>
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bbda:	682e      	ldr	r6, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbdc:	4641      	mov	r1, r8
     C_Buffer[C_Buffer_Free_Position].ntc[2].timestamp=values_of_ntc_sensor(NTC_3).timestamp;
    bbde:	eb04 1686 	add.w	r6, r4, r6, lsl #6
    bbe2:	62b0      	str	r0, [r6, #40]	; 0x28
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbe4:	4638      	mov	r0, r7
    bbe6:	f7ff ffa5 	bl	bb34 <values_of_digital_sensor>
    bbea:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbee:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbf0:	3630      	adds	r6, #48	; 0x30
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbf2:	eb04 1483 	add.w	r4, r4, r3, lsl #6
     C_Buffer[C_Buffer_Free_Position].digital[0]=values_of_digital_sensor(0);
    bbf6:	e886 0003 	stmia.w	r6, {r0, r1}
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bbfa:	3438      	adds	r4, #56	; 0x38
    bbfc:	2101      	movs	r1, #1
    bbfe:	4638      	mov	r0, r7
    bc00:	f7ff ff98 	bl	bb34 <values_of_digital_sensor>
    bc04:	e897 0003 	ldmia.w	r7, {r0, r1}
     C_Buffer_Free_Position++;
    bc08:	682b      	ldr	r3, [r5, #0]
     C_Buffer[C_Buffer_Free_Position].digital[1]=values_of_digital_sensor(1);
    bc0a:	e884 0003 	stmia.w	r4, {r0, r1}
     C_Buffer_Free_Position++;
    bc0e:	3301      	adds	r3, #1
    bc10:	602b      	str	r3, [r5, #0]
}
    bc12:	b002      	add	sp, #8
    bc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc18:	2300      	movs	r3, #0
    bc1a:	e7f9      	b.n	bc10 <feed_circular_buffer+0xb8>
    bc1c:	2002146c 	.word	0x2002146c
    bc20:	20021468 	.word	0x20021468
    bc24:	2000ac68 	.word	0x2000ac68
    bc28:	20021b00 	.word	0x20021b00

0000bc2c <fill_fields_to_test>:
History_st *fill_fields_to_test(){
    bc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   char tag[30]="10203";
    bc2e:	4b1c      	ldr	r3, [pc, #112]	; (bca0 <fill_fields_to_test+0x74>)
History_st *fill_fields_to_test(){
    bc30:	b089      	sub	sp, #36	; 0x24
   char tag[30]="10203";
    bc32:	6818      	ldr	r0, [r3, #0]
    bc34:	889b      	ldrh	r3, [r3, #4]
    bc36:	9000      	str	r0, [sp, #0]
    bc38:	2218      	movs	r2, #24
    bc3a:	2100      	movs	r1, #0
    bc3c:	f10d 0006 	add.w	r0, sp, #6
    bc40:	f8ad 3004 	strh.w	r3, [sp, #4]
     msg.positions.timestamp=1;
    bc44:	2601      	movs	r6, #1
   char tag[30]="10203";
    bc46:	f024 fcdc 	bl	30602 <memset>
     msg.positions.timestamp=1;
    bc4a:	2300      	movs	r3, #0
    msg.timestamp=0;
    bc4c:	4c15      	ldr	r4, [pc, #84]	; (bca4 <fill_fields_to_test+0x78>)
     msg.device_internal_temperatures.value=12;
    bc4e:	2570      	movs	r5, #112	; 0x70
     msg.positions.timestamp=1;
    bc50:	e9c4 3600 	strd	r3, r6, [r4]
     msg.positions.latitude=2;
    bc54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bc58:	60a3      	str	r3, [r4, #8]
     msg.positions.longitude=3;
    bc5a:	4b13      	ldr	r3, [pc, #76]	; (bca8 <fill_fields_to_test+0x7c>)
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc5c:	2705      	movs	r7, #5
     msg.positions.longitude=3;
    bc5e:	60e3      	str	r3, [r4, #12]
     msg.device_internal_temperatures.timestamp=11;
    bc60:	230b      	movs	r3, #11
    bc62:	6123      	str	r3, [r4, #16]
     msg.device_internal_temperatures.value=12;
    bc64:	4b11      	ldr	r3, [pc, #68]	; (bcac <fill_fields_to_test+0x80>)
    bc66:	6163      	str	r3, [r4, #20]
    msg.input_data[sensor_id].input_id=sensor_id+112;
    bc68:	61a5      	str	r5, [r4, #24]
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bc6a:	4669      	mov	r1, sp
    msg.input_data[sensor_id].enable=sensor_id+113;
    bc6c:	7726      	strb	r6, [r4, #28]
    msg.input_data[sensor_id].has_label=0xFF; // if false the label will not show
    bc6e:	7766      	strb	r6, [r4, #29]
    bc70:	f104 001e 	add.w	r0, r4, #30
    bc74:	f024 fdfa 	bl	3086c <strcpy>
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc78:	f205 33e7 	addw	r3, r5, #999	; 0x3e7
    msg.input_data[sensor_id].has_phy_dimension=0xFF; // if false the dimension will not show
    bc7c:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
    msg.input_data[sensor_id].phy_dimension=PhysicalDimension_AREA; 
    bc80:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
    msg.input_data[sensor_id].values.timestamp=sensor_id+1111;
    bc84:	6363      	str	r3, [r4, #52]	; 0x34
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc86:	f505 707a 	add.w	r0, r5, #1000	; 0x3e8
    bc8a:	f7fc ff3d 	bl	8b08 <__aeabi_i2f>
   while (sensor_id<6){
    bc8e:	3501      	adds	r5, #1
    bc90:	2d76      	cmp	r5, #118	; 0x76
    msg.input_data[sensor_id].values.value=sensor_id+1112;
    bc92:	63a0      	str	r0, [r4, #56]	; 0x38
   while (sensor_id<6){
    bc94:	f104 0424 	add.w	r4, r4, #36	; 0x24
    bc98:	d1e6      	bne.n	bc68 <fill_fields_to_test+0x3c>
}
    bc9a:	4802      	ldr	r0, [pc, #8]	; (bca4 <fill_fields_to_test+0x78>)
    bc9c:	b009      	add	sp, #36	; 0x24
    bc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bca0:	000316f4 	.word	0x000316f4
    bca4:	2000ab78 	.word	0x2000ab78
    bca8:	40400000 	.word	0x40400000
    bcac:	41400000 	.word	0x41400000

0000bcb0 <send_array_dd_v0>:
buf_data send_array_dd_v0(void){
    bcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcb2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
    bcb6:	4607      	mov	r7, r0
   History_st *data = fill_fields_to_test();
    bcb8:	f7ff ffb8 	bl	bc2c <fill_fields_to_test>
   msg_all.type=MessageType_HISTORY; // tipo history
    bcbc:	2202      	movs	r2, #2
    bcbe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   msg_all.which_Data=MessageType_HISTORY;
    bcc2:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
   msg_all.Data.history.timestamp=1234567;
    bcc6:	4a3a      	ldr	r2, [pc, #232]	; (bdb0 <send_array_dd_v0+0x100>)
    bcc8:	ae0c      	add	r6, sp, #48	; 0x30
    bcca:	920d      	str	r2, [sp, #52]	; 0x34
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bccc:	4631      	mov	r1, r6
    bcce:	220c      	movs	r2, #12
   History_st *data = fill_fields_to_test();
    bcd0:	4603      	mov	r3, r0
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bcd2:	6845      	ldr	r5, [r0, #4]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bcd4:	6884      	ldr	r4, [r0, #8]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bcd6:	68c0      	ldr	r0, [r0, #12]
    while (sensor_data<ARRAY_TEST){
    bcd8:	3a01      	subs	r2, #1
     msg_all.Data.history.positions[sensor_data].timestamp=data->positions.timestamp;
    bcda:	608d      	str	r5, [r1, #8]
     msg_all.Data.history.positions[sensor_data].latitude=data->positions.latitude;
    bcdc:	60cc      	str	r4, [r1, #12]
     msg_all.Data.history.positions[sensor_data].longitude=data->positions.longitude;
    bcde:	6108      	str	r0, [r1, #16]
    while (sensor_data<ARRAY_TEST){
    bce0:	f101 010c 	add.w	r1, r1, #12
    bce4:	d1f8      	bne.n	bcd8 <send_array_dd_v0+0x28>
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bce6:	691c      	ldr	r4, [r3, #16]
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bce8:	6958      	ldr	r0, [r3, #20]
    bcea:	a90c      	add	r1, sp, #48	; 0x30
   sensor_data++;
    bcec:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bcee:	2a0c      	cmp	r2, #12
    msg_all.Data.history.device_internal_temperatures[sensor_data].timestamp=data->device_internal_temperatures.timestamp;
    bcf0:	f8c1 4098 	str.w	r4, [r1, #152]	; 0x98
    msg_all.Data.history.device_internal_temperatures[sensor_data].value=data->device_internal_temperatures.value;
    bcf4:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    while (sensor_data<ARRAY_TEST){
    bcf8:	f101 0108 	add.w	r1, r1, #8
    bcfc:	d1f6      	bne.n	bcec <send_array_dd_v0+0x3c>
    bcfe:	f103 051e 	add.w	r5, r3, #30
    bd02:	f103 04f6 	add.w	r4, r3, #246	; 0xf6
    msg_all.Data.history.input_data[sensor_id].input_id=data->input_data[sensor_id].input_id;
    bd06:	f855 3c06 	ldr.w	r3, [r5, #-6]
    bd0a:	4629      	mov	r1, r5
    bd0c:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
    msg_all.Data.history.input_data[sensor_id].enable=data->input_data[sensor_id].enable;
    bd10:	f815 3c02 	ldrb.w	r3, [r5, #-2]
    bd14:	f106 00fe 	add.w	r0, r6, #254	; 0xfe
    bd18:	f886 30fc 	strb.w	r3, [r6, #252]	; 0xfc
    msg_all.Data.history.input_data[sensor_id].has_label=data->input_data[sensor_id].has_label;
    bd1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    bd20:	f886 30fd 	strb.w	r3, [r6, #253]	; 0xfd
    bd24:	f024 fda2 	bl	3086c <strcpy>
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bd28:	7d2b      	ldrb	r3, [r5, #20]
    sensor_data=0;  //CORRECT 1440
    bd2a:	2200      	movs	r2, #0
    msg_all.Data.history.input_data[sensor_id].has_phy_dimension=data->input_data[sensor_id].has_phy_dimension;
    bd2c:	f886 3112 	strb.w	r3, [r6, #274]	; 0x112
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bd30:	7d6b      	ldrb	r3, [r5, #21]
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bd32:	f8d5 0016 	ldr.w	r0, [r5, #22]
    msg_all.Data.history.input_data[sensor_id].phy_dimension=data->input_data[sensor_id].phy_dimension;
    bd36:	f886 3113 	strb.w	r3, [r6, #275]	; 0x113
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd3a:	4633      	mov	r3, r6
    bd3c:	f8d5 101a 	ldr.w	r1, [r5, #26]
     sensor_data++;
    bd40:	3201      	adds	r2, #1
    while (sensor_data<ARRAY_TEST){
    bd42:	2a0c      	cmp	r2, #12
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].timestamp=data->input_data[sensor_id].values.timestamp;
    bd44:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    msg_all.Data.history.input_data[sensor_id].values[sensor_data].value=data->input_data[sensor_id].values.value;
    bd48:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    while (sensor_data<ARRAY_TEST){
    bd4c:	f103 0308 	add.w	r3, r3, #8
    bd50:	d1f6      	bne.n	bd40 <send_array_dd_v0+0x90>
   while (sensor_id<6){
    bd52:	3524      	adds	r5, #36	; 0x24
    bd54:	42a5      	cmp	r5, r4
    bd56:	f106 067c 	add.w	r6, r6, #124	; 0x7c
    bd5a:	d1d4      	bne.n	bd06 <send_array_dd_v0+0x56>
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd5c:	466c      	mov	r4, sp
    bd5e:	f44f 62fb 	mov.w	r2, #2008	; 0x7d8
    bd62:	4668      	mov	r0, sp
    bd64:	4913      	ldr	r1, [pc, #76]	; (bdb4 <send_array_dd_v0+0x104>)
    bd66:	ad07      	add	r5, sp, #28
    bd68:	f000 f906 	bl	bf78 <pb_ostream_from_buffer>
    bd6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    bd6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    bd70:	6823      	ldr	r3, [r4, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd72:	4911      	ldr	r1, [pc, #68]	; (bdb8 <send_array_dd_v0+0x108>)
    bd74:	aa0c      	add	r2, sp, #48	; 0x30
    bd76:	a807      	add	r0, sp, #28
   ostream = pb_ostream_from_buffer(buffer, UplinkMessage_size);
    bd78:	602b      	str	r3, [r5, #0]
   pb_encode(&ostream, UplinkMessage_fields, &msg_all);
    bd7a:	f000 fb7d 	bl	c478 <pb_encode>
   int j=0;
    bd7e:	2300      	movs	r3, #0
   total_bytes_encoded = ostream.bytes_written;
    bd80:	980a      	ldr	r0, [sp, #40]	; 0x28
   while(j < total_bytes_encoded ){
    bd82:	490c      	ldr	r1, [pc, #48]	; (bdb4 <send_array_dd_v0+0x104>)
    bd84:	4a0d      	ldr	r2, [pc, #52]	; (bdbc <send_array_dd_v0+0x10c>)
    bd86:	4283      	cmp	r3, r0
    bd88:	d10b      	bne.n	bda2 <send_array_dd_v0+0xf2>
   function_return.len=total_bytes_encoded;
    bd8a:	490d      	ldr	r1, [pc, #52]	; (bdc0 <send_array_dd_v0+0x110>)
    return function_return;
    bd8c:	f240 72dc 	movw	r2, #2012	; 0x7dc
    bd90:	4638      	mov	r0, r7
   function_return.len=total_bytes_encoded;
    bd92:	f8a1 37d8 	strh.w	r3, [r1, #2008]	; 0x7d8
    return function_return;
    bd96:	f024 fbfa 	bl	3058e <memcpy>
}
    bd9a:	4638      	mov	r0, r7
    bd9c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
    bda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   function_return.data[j]=buffer[j];
    bda2:	f811 4b01 	ldrb.w	r4, [r1], #1
   j++;
    bda6:	3301      	adds	r3, #1
   function_return.data[j]=buffer[j];
    bda8:	f802 4f01 	strb.w	r4, [r2, #1]!
   j++;
    bdac:	e7eb      	b.n	bd86 <send_array_dd_v0+0xd6>
    bdae:	bf00      	nop
    bdb0:	0012d687 	.word	0x0012d687
    bdb4:	20021b2f 	.word	0x20021b2f
    bdb8:	0003193c 	.word	0x0003193c
    bdbc:	2000a39f 	.word	0x2000a39f
    bdc0:	2000a39c 	.word	0x2000a39c

0000bdc4 <print_current_position_cb>:
void print_current_position_cb(uint32_t pos){
    bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bdc8:	4604      	mov	r4, r0
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bdca:	4d30      	ldr	r5, [pc, #192]	; (be8c <print_current_position_cb+0xc8>)
    printf("\n\n####Position %d #####\n",pos);
    bdcc:	4601      	mov	r1, r0
void print_current_position_cb(uint32_t pos){
    bdce:	b085      	sub	sp, #20
    printf("\n\n####Position %d #####\n",pos);
    bdd0:	482f      	ldr	r0, [pc, #188]	; (be90 <print_current_position_cb+0xcc>)
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bdd2:	01a6      	lsls	r6, r4, #6
    bdd4:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    printf("\n\n####Position %d #####\n",pos);
    bdd8:	f01d f894 	bl	28f04 <iprintf>
    printf("GNSS Position Lat=%d Long=%d TimeStamp=%d \n",
    bddc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    bde0:	6863      	ldr	r3, [r4, #4]
    bde2:	482c      	ldr	r0, [pc, #176]	; (be94 <print_current_position_cb+0xd0>)
    bde4:	f01d f88e 	bl	28f04 <iprintf>
	if (!spec->channel_cfg_dt_node_exists) {
    bde8:	4a2b      	ldr	r2, [pc, #172]	; (be98 <print_current_position_cb+0xd4>)
    val_mv = C_Buffer[pos].analog.value;
    bdea:	6967      	ldr	r7, [r4, #20]
    bdec:	7953      	ldrb	r3, [r2, #5]
    bdee:	b1cb      	cbz	r3, be24 <print_current_position_cb+0x60>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdf0:	79d3      	ldrb	r3, [r2, #7]
	if (spec->channel_cfg.differential) {
    bdf2:	7a91      	ldrb	r1, [r2, #10]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
    bdf4:	2b04      	cmp	r3, #4
	const struct adc_driver_api *api =
    bdf6:	bf0a      	itet	eq
    bdf8:	6813      	ldreq	r3, [r2, #0]
		vref_mv = spec->vref_mv;
    bdfa:	89d3      	ldrhne	r3, [r2, #14]
	return api->ref_internal;
    bdfc:	689b      	ldreq	r3, [r3, #8]
	resolution = spec->resolution;
    bdfe:	7c14      	ldrb	r4, [r2, #16]
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
    be00:	bf08      	it	eq
    be02:	891b      	ldrheq	r3, [r3, #8]
	if (spec->channel_cfg.differential) {
    be04:	0689      	lsls	r1, r1, #26
	int32_t adc_mv = *valp * ref_mv;
    be06:	fb07 f303 	mul.w	r3, r7, r3
		resolution -= 1U;
    be0a:	bf48      	it	mi
    be0c:	f104 34ff 	addmi.w	r4, r4, #4294967295
	int ret = adc_gain_invert(gain, &adc_mv);
    be10:	7990      	ldrb	r0, [r2, #6]
    be12:	a903      	add	r1, sp, #12
		resolution -= 1U;
    be14:	bf48      	it	mi
    be16:	b2e4      	uxtbmi	r4, r4
	int32_t adc_mv = *valp * ref_mv;
    be18:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    be1a:	f00f fd13 	bl	1b844 <adc_gain_invert>
	if (ret == 0) {
    be1e:	b908      	cbnz	r0, be24 <print_current_position_cb+0x60>
		*valp = (adc_mv >> resolution);
    be20:	9f03      	ldr	r7, [sp, #12]
    be22:	4127      	asrs	r7, r4
    printf("Analog  TimeStamp=%d Value=%d  %"PRId32"mV \n",
    be24:	19ac      	adds	r4, r5, r6
    be26:	463b      	mov	r3, r7
    be28:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    be2c:	481b      	ldr	r0, [pc, #108]	; (be9c <print_current_position_cb+0xd8>)
    be2e:	f01d f869 	bl	28f04 <iprintf>
    int i=0;
    be32:	2700      	movs	r7, #0
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be34:	f8df 9068 	ldr.w	r9, [pc, #104]	; bea0 <print_current_position_cb+0xdc>
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be38:	f107 0801 	add.w	r8, r7, #1
    be3c:	8ba0      	ldrh	r0, [r4, #28]
    be3e:	fa5f f188 	uxtb.w	r1, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be42:	f8d4 a018 	ldr.w	sl, [r4, #24]
      C_Buffer[pos].ntc[i].value,
    be46:	f9b4 b01c 	ldrsh.w	fp, [r4, #28]
      ntc_temperature(C_Buffer[pos].ntc[i].value,(i+1)));
    be4a:	f7fd faa5 	bl	9398 <ntc_temperature>
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be4e:	f7fc fae7 	bl	8420 <__aeabi_f2d>
    be52:	e9cd 0100 	strd	r0, r1, [sp]
    be56:	4639      	mov	r1, r7
      i++;
    be58:	4647      	mov	r7, r8
      printf("NTC %d TimeStamp=%d Value=%d %3.1f C\n",
    be5a:	465b      	mov	r3, fp
    be5c:	4652      	mov	r2, sl
    be5e:	4648      	mov	r0, r9
    be60:	f01d f850 	bl	28f04 <iprintf>
    while (i<3){
    be64:	2f03      	cmp	r7, #3
    be66:	f104 0408 	add.w	r4, r4, #8
    be6a:	d1e5      	bne.n	be38 <print_current_position_cb+0x74>
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be6c:	4435      	add	r5, r6
    be6e:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
    be72:	2100      	movs	r1, #0
    be74:	480b      	ldr	r0, [pc, #44]	; (bea4 <print_current_position_cb+0xe0>)
    be76:	f01d f845 	bl	28f04 <iprintf>
    be7a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
    be7e:	2101      	movs	r1, #1
    be80:	4808      	ldr	r0, [pc, #32]	; (bea4 <print_current_position_cb+0xe0>)
}
    be82:	b005      	add	sp, #20
    be84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      printf("Digital%d  TimeStamp=%d Value=%d\n",
    be88:	f01d b83c 	b.w	28f04 <iprintf>
    be8c:	2000ac68 	.word	0x2000ac68
    be90:	00032e69 	.word	0x00032e69
    be94:	00032e82 	.word	0x00032e82
    be98:	00031860 	.word	0x00031860
    be9c:	00032eae 	.word	0x00032eae
    bea0:	00032ed4 	.word	0x00032ed4
    bea4:	00032efa 	.word	0x00032efa

0000bea8 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
    bea8:	b500      	push	{lr}
    pb_type_t type = field->type;
    beaa:	7d83      	ldrb	r3, [r0, #22]
{
    beac:	4601      	mov	r1, r0

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    beae:	2b3f      	cmp	r3, #63	; 0x3f
{
    beb0:	b08b      	sub	sp, #44	; 0x2c
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    beb2:	d849      	bhi.n	bf48 <pb_check_proto3_default_value+0xa0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
    beb4:	f013 0030 	ands.w	r0, r3, #48	; 0x30
    beb8:	d01c      	beq.n	bef4 <pb_check_proto3_default_value+0x4c>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
    beba:	2820      	cmp	r0, #32
    bebc:	d102      	bne.n	bec4 <pb_check_proto3_default_value+0x1c>
            return *(const pb_size_t*)field->pSize == 0;
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
    bebe:	6a0b      	ldr	r3, [r1, #32]
            return true;
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
            return bytes->size == 0;
    bec0:	8818      	ldrh	r0, [r3, #0]
    bec2:	e006      	b.n	bed2 <pb_check_proto3_default_value+0x2a>
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    bec4:	2830      	cmp	r0, #48	; 0x30
    bec6:	d0fa      	beq.n	bebe <pb_check_proto3_default_value+0x16>
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
    bec8:	2810      	cmp	r0, #16
    beca:	d106      	bne.n	beda <pb_check_proto3_default_value+0x32>
    becc:	6a0a      	ldr	r2, [r1, #32]
    bece:	b122      	cbz	r2, beda <pb_check_proto3_default_value+0x32>
        if (p[i] != 0)
    bed0:	7810      	ldrb	r0, [r2, #0]
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
            return extension == NULL;
    bed2:	fab0 f080 	clz	r0, r0
    bed6:	0940      	lsrs	r0, r0, #5
    bed8:	e00c      	b.n	bef4 <pb_check_proto3_default_value+0x4c>
        else if (field->descriptor->default_value)
    beda:	680a      	ldr	r2, [r1, #0]
    bedc:	6890      	ldr	r0, [r2, #8]
    bede:	b980      	cbnz	r0, bf02 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
    bee0:	f003 020f 	and.w	r2, r3, #15
    bee4:	2a05      	cmp	r2, #5
    bee6:	d80e      	bhi.n	bf06 <pb_check_proto3_default_value+0x5e>
            for (i = 0; i < field->data_size; i++)
    bee8:	69cb      	ldr	r3, [r1, #28]
    beea:	8a4a      	ldrh	r2, [r1, #18]
    beec:	441a      	add	r2, r3
    beee:	4293      	cmp	r3, r2
    bef0:	d103      	bne.n	befa <pb_check_proto3_default_value+0x52>
            return true;
    bef2:	2001      	movs	r0, #1
            return field->descriptor->field_callback == NULL;
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
}
    bef4:	b00b      	add	sp, #44	; 0x2c
    bef6:	f85d fb04 	ldr.w	pc, [sp], #4
                if (p[i] != 0)
    befa:	f813 1b01 	ldrb.w	r1, [r3], #1
    befe:	2900      	cmp	r1, #0
    bf00:	d0f5      	beq.n	beee <pb_check_proto3_default_value+0x46>
            return false;
    bf02:	2000      	movs	r0, #0
    bf04:	e7f6      	b.n	bef4 <pb_check_proto3_default_value+0x4c>
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
    bf06:	2a06      	cmp	r2, #6
    bf08:	d101      	bne.n	bf0e <pb_check_proto3_default_value+0x66>
            return bytes->size == 0;
    bf0a:	69cb      	ldr	r3, [r1, #28]
    bf0c:	e7d8      	b.n	bec0 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
    bf0e:	2a07      	cmp	r2, #7
    bf10:	d102      	bne.n	bf18 <pb_check_proto3_default_value+0x70>
            return *(const char*)field->pData == '\0';
    bf12:	69cb      	ldr	r3, [r1, #28]
    bf14:	7818      	ldrb	r0, [r3, #0]
    bf16:	e7dc      	b.n	bed2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
    bf18:	2a0b      	cmp	r2, #11
    bf1a:	d101      	bne.n	bf20 <pb_check_proto3_default_value+0x78>
            return field->data_size == 0;
    bf1c:	8a48      	ldrh	r0, [r1, #18]
    bf1e:	e7d8      	b.n	bed2 <pb_check_proto3_default_value+0x2a>
        else if (PB_LTYPE_IS_SUBMSG(type))
    bf20:	f003 030e 	and.w	r3, r3, #14
    bf24:	2b08      	cmp	r3, #8
    bf26:	d1e5      	bne.n	bef4 <pb_check_proto3_default_value+0x4c>
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
    bf28:	69ca      	ldr	r2, [r1, #28]
    bf2a:	4668      	mov	r0, sp
    bf2c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bf2e:	f01e f877 	bl	2a020 <pb_field_iter_begin>
    bf32:	2800      	cmp	r0, #0
    bf34:	d0dd      	beq.n	bef2 <pb_check_proto3_default_value+0x4a>
                    if (!pb_check_proto3_default_value(&iter))
    bf36:	4668      	mov	r0, sp
    bf38:	f7ff ffb6 	bl	bea8 <pb_check_proto3_default_value>
    bf3c:	2800      	cmp	r0, #0
    bf3e:	d0d9      	beq.n	bef4 <pb_check_proto3_default_value+0x4c>
                } while (pb_field_iter_next(&iter));
    bf40:	4668      	mov	r0, sp
    bf42:	f01e f890 	bl	2a066 <pb_field_iter_next>
    bf46:	e7f4      	b.n	bf32 <pb_check_proto3_default_value+0x8a>
    bf48:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
    bf4c:	2a80      	cmp	r2, #128	; 0x80
    bf4e:	d101      	bne.n	bf54 <pb_check_proto3_default_value+0xac>
        return field->pData == NULL;
    bf50:	69c0      	ldr	r0, [r0, #28]
    bf52:	e7be      	b.n	bed2 <pb_check_proto3_default_value+0x2a>
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    bf54:	2a40      	cmp	r2, #64	; 0x40
    bf56:	d1d4      	bne.n	bf02 <pb_check_proto3_default_value+0x5a>
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
    bf58:	f003 030f 	and.w	r3, r3, #15
    bf5c:	2b0a      	cmp	r3, #10
    bf5e:	d102      	bne.n	bf66 <pb_check_proto3_default_value+0xbe>
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    bf60:	69cb      	ldr	r3, [r1, #28]
            return extension == NULL;
    bf62:	6818      	ldr	r0, [r3, #0]
    bf64:	e7b5      	b.n	bed2 <pb_check_proto3_default_value+0x2a>
        else if (field->descriptor->field_callback == pb_default_field_callback)
    bf66:	6803      	ldr	r3, [r0, #0]
    bf68:	4a02      	ldr	r2, [pc, #8]	; (bf74 <pb_check_proto3_default_value+0xcc>)
    bf6a:	68d8      	ldr	r0, [r3, #12]
    bf6c:	4290      	cmp	r0, r2
    bf6e:	d1b0      	bne.n	bed2 <pb_check_proto3_default_value+0x2a>
    bf70:	e7f6      	b.n	bf60 <pb_check_proto3_default_value+0xb8>
    bf72:	bf00      	nop
    bf74:	0002a085 	.word	0x0002a085

0000bf78 <pb_ostream_from_buffer>:
    return stream;
    bf78:	6082      	str	r2, [r0, #8]
    bf7a:	2200      	movs	r2, #0
{
    bf7c:	b510      	push	{r4, lr}
    return stream;
    bf7e:	4c03      	ldr	r4, [pc, #12]	; (bf8c <pb_ostream_from_buffer+0x14>)
    bf80:	e9c0 2203 	strd	r2, r2, [r0, #12]
    bf84:	e9c0 4100 	strd	r4, r1, [r0]
}
    bf88:	bd10      	pop	{r4, pc}
    bf8a:	bf00      	nop
    bf8c:	0002a0b5 	.word	0x0002a0b5

0000bf90 <pb_write>:
{
    bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf92:	4604      	mov	r4, r0
    if (count > 0 && stream->callback != NULL)
    bf94:	4615      	mov	r5, r2
        if (stream->bytes_written + count < stream->bytes_written ||
    bf96:	68c3      	ldr	r3, [r0, #12]
    if (count > 0 && stream->callback != NULL)
    bf98:	b19a      	cbz	r2, bfc2 <pb_write+0x32>
    bf9a:	6806      	ldr	r6, [r0, #0]
    bf9c:	b18e      	cbz	r6, bfc2 <pb_write+0x32>
    bf9e:	18d3      	adds	r3, r2, r3
    bfa0:	d202      	bcs.n	bfa8 <pb_write+0x18>
        if (stream->bytes_written + count < stream->bytes_written ||
    bfa2:	6887      	ldr	r7, [r0, #8]
    bfa4:	429f      	cmp	r7, r3
    bfa6:	d207      	bcs.n	bfb8 <pb_write+0x28>
            PB_RETURN_ERROR(stream, "stream full");
    bfa8:	6923      	ldr	r3, [r4, #16]
    bfaa:	4a08      	ldr	r2, [pc, #32]	; (bfcc <pb_write+0x3c>)
            PB_RETURN_ERROR(stream, "io error");
    bfac:	2b00      	cmp	r3, #0
    bfae:	bf08      	it	eq
    bfb0:	4613      	moveq	r3, r2
            PB_RETURN_ERROR(stream, "stream full");
    bfb2:	2000      	movs	r0, #0
            PB_RETURN_ERROR(stream, "io error");
    bfb4:	6123      	str	r3, [r4, #16]
}
    bfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
    bfb8:	47b0      	blx	r6
    bfba:	b910      	cbnz	r0, bfc2 <pb_write+0x32>
            PB_RETURN_ERROR(stream, "io error");
    bfbc:	6923      	ldr	r3, [r4, #16]
    bfbe:	4a04      	ldr	r2, [pc, #16]	; (bfd0 <pb_write+0x40>)
    bfc0:	e7f4      	b.n	bfac <pb_write+0x1c>
    stream->bytes_written += count;
    bfc2:	68e3      	ldr	r3, [r4, #12]
    return true;
    bfc4:	2001      	movs	r0, #1
    stream->bytes_written += count;
    bfc6:	442b      	add	r3, r5
    bfc8:	60e3      	str	r3, [r4, #12]
    return true;
    bfca:	e7f4      	b.n	bfb6 <pb_write+0x26>
    bfcc:	00032f1c 	.word	0x00032f1c
    bfd0:	00032f28 	.word	0x00032f28

0000bfd4 <pb_enc_varint>:
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
}

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    bfd4:	b410      	push	{r4}
    bfd6:	7d8c      	ldrb	r4, [r1, #22]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;

        if (field->data_size == sizeof(uint_least8_t))
    bfd8:	8a4b      	ldrh	r3, [r1, #18]
    bfda:	f004 040f 	and.w	r4, r4, #15
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
    bfde:	2c02      	cmp	r4, #2
    bfe0:	d117      	bne.n	c012 <pb_enc_varint+0x3e>
        if (field->data_size == sizeof(uint_least8_t))
    bfe2:	2b01      	cmp	r3, #1
    bfe4:	d105      	bne.n	bff2 <pb_enc_varint+0x1e>
            value = *(const uint_least8_t*)field->pData;
    bfe6:	69cb      	ldr	r3, [r1, #28]
    bfe8:	781a      	ldrb	r2, [r3, #0]
        else if (field->data_size == sizeof(uint_least16_t))
            value = *(const uint_least16_t*)field->pData;
        else if (field->data_size == sizeof(uint32_t))
            value = *(const uint32_t*)field->pData;
    bfea:	2300      	movs	r3, #0
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);

    }
}
    bfec:	bc10      	pop	{r4}
            return pb_encode_varint(stream, (pb_uint64_t)value);
    bfee:	f01e b86a 	b.w	2a0c6 <pb_encode_varint>
        else if (field->data_size == sizeof(uint_least16_t))
    bff2:	2b02      	cmp	r3, #2
    bff4:	d102      	bne.n	bffc <pb_enc_varint+0x28>
            value = *(const uint_least16_t*)field->pData;
    bff6:	69cb      	ldr	r3, [r1, #28]
    bff8:	881a      	ldrh	r2, [r3, #0]
    bffa:	e7f6      	b.n	bfea <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(uint32_t))
    bffc:	2b04      	cmp	r3, #4
    bffe:	d102      	bne.n	c006 <pb_enc_varint+0x32>
            value = *(const uint32_t*)field->pData;
    c000:	69cb      	ldr	r3, [r1, #28]
    c002:	681a      	ldr	r2, [r3, #0]
    c004:	e7f1      	b.n	bfea <pb_enc_varint+0x16>
        else if (field->data_size == sizeof(pb_uint64_t))
    c006:	2b08      	cmp	r3, #8
    c008:	d11f      	bne.n	c04a <pb_enc_varint+0x76>
            value = *(const pb_uint64_t*)field->pData;
    c00a:	69cb      	ldr	r3, [r1, #28]
    c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c010:	e7ec      	b.n	bfec <pb_enc_varint+0x18>
        if (field->data_size == sizeof(int_least8_t))
    c012:	2b01      	cmp	r3, #1
    c014:	d108      	bne.n	c028 <pb_enc_varint+0x54>
            value = *(const int_least8_t*)field->pData;
    c016:	69cb      	ldr	r3, [r1, #28]
    c018:	f993 2000 	ldrsb.w	r2, [r3]
            value = *(const int32_t*)field->pData;
    c01c:	17d3      	asrs	r3, r2, #31
        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
    c01e:	2c03      	cmp	r4, #3
    c020:	d1e4      	bne.n	bfec <pb_enc_varint+0x18>
}
    c022:	bc10      	pop	{r4}
            return pb_encode_svarint(stream, value);
    c024:	f01e b88e 	b.w	2a144 <pb_encode_svarint>
        else if (field->data_size == sizeof(int_least16_t))
    c028:	2b02      	cmp	r3, #2
    c02a:	d103      	bne.n	c034 <pb_enc_varint+0x60>
            value = *(const int_least16_t*)field->pData;
    c02c:	69cb      	ldr	r3, [r1, #28]
    c02e:	f9b3 2000 	ldrsh.w	r2, [r3]
    c032:	e7f3      	b.n	c01c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(int32_t))
    c034:	2b04      	cmp	r3, #4
    c036:	d102      	bne.n	c03e <pb_enc_varint+0x6a>
            value = *(const int32_t*)field->pData;
    c038:	69cb      	ldr	r3, [r1, #28]
    c03a:	681a      	ldr	r2, [r3, #0]
    c03c:	e7ee      	b.n	c01c <pb_enc_varint+0x48>
        else if (field->data_size == sizeof(pb_int64_t))
    c03e:	2b08      	cmp	r3, #8
    c040:	d103      	bne.n	c04a <pb_enc_varint+0x76>
            value = *(const pb_int64_t*)field->pData;
    c042:	69cb      	ldr	r3, [r1, #28]
    c044:	e9d3 2300 	ldrd	r2, r3, [r3]
    c048:	e7e9      	b.n	c01e <pb_enc_varint+0x4a>
            PB_RETURN_ERROR(stream, "invalid data_size");
    c04a:	6903      	ldr	r3, [r0, #16]
    c04c:	4a03      	ldr	r2, [pc, #12]	; (c05c <pb_enc_varint+0x88>)
    c04e:	2b00      	cmp	r3, #0
    c050:	bf08      	it	eq
    c052:	4613      	moveq	r3, r2
    c054:	6103      	str	r3, [r0, #16]
}
    c056:	bc10      	pop	{r4}
    c058:	2000      	movs	r0, #0
    c05a:	4770      	bx	lr
    c05c:	00032f31 	.word	0x00032f31

0000c060 <pb_enc_fixed>:
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
    c060:	8a4a      	ldrh	r2, [r1, #18]
    c062:	2a04      	cmp	r2, #4
    c064:	d102      	bne.n	c06c <pb_enc_fixed+0xc>
    {
        return pb_encode_fixed32(stream, field->pData);
    c066:	69c9      	ldr	r1, [r1, #28]
    c068:	f01e b875 	b.w	2a156 <pb_encode_fixed32>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
    c06c:	2a08      	cmp	r2, #8
    c06e:	d102      	bne.n	c076 <pb_enc_fixed+0x16>
    {
        return pb_encode_fixed64(stream, field->pData);
    c070:	69c9      	ldr	r1, [r1, #28]
    c072:	f01e b873 	b.w	2a15c <pb_encode_fixed64>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
    c076:	6902      	ldr	r2, [r0, #16]
    c078:	4903      	ldr	r1, [pc, #12]	; (c088 <pb_enc_fixed+0x28>)
    c07a:	2a00      	cmp	r2, #0
    c07c:	bf08      	it	eq
    c07e:	460a      	moveq	r2, r1
    c080:	6102      	str	r2, [r0, #16]
    }
}
    c082:	2000      	movs	r0, #0
    c084:	4770      	bx	lr
    c086:	bf00      	nop
    c088:	00032f31 	.word	0x00032f31

0000c08c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
    c08c:	7d8a      	ldrb	r2, [r1, #22]
{
    c08e:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
    c090:	f002 020f 	and.w	r2, r2, #15
    c094:	2a0b      	cmp	r2, #11
    c096:	d811      	bhi.n	c0bc <pb_encode_tag_for_field+0x30>
    c098:	e8df f002 	tbb	[pc, r2]
    c09c:	0c0c0c0c 	.word	0x0c0c0c0c
    c0a0:	0a0a060e 	.word	0x0a0a060e
    c0a4:	0a100a0a 	.word	0x0a100a0a
            wiretype = PB_WT_64BIT;
    c0a8:	2101      	movs	r1, #1
    return pb_encode_tag(stream, wiretype, field->tag);
    c0aa:	8a1a      	ldrh	r2, [r3, #16]
    c0ac:	f01e b859 	b.w	2a162 <pb_encode_tag>
            wiretype = PB_WT_STRING;
    c0b0:	2102      	movs	r1, #2
            break;
    c0b2:	e7fa      	b.n	c0aa <pb_encode_tag_for_field+0x1e>
            wiretype = PB_WT_VARINT;
    c0b4:	2100      	movs	r1, #0
    c0b6:	e7f8      	b.n	c0aa <pb_encode_tag_for_field+0x1e>
    switch (PB_LTYPE(field->type))
    c0b8:	2105      	movs	r1, #5
    c0ba:	e7f6      	b.n	c0aa <pb_encode_tag_for_field+0x1e>
            PB_RETURN_ERROR(stream, "invalid field type");
    c0bc:	6903      	ldr	r3, [r0, #16]
    c0be:	4a03      	ldr	r2, [pc, #12]	; (c0cc <pb_encode_tag_for_field+0x40>)
    c0c0:	2b00      	cmp	r3, #0
    c0c2:	bf08      	it	eq
    c0c4:	4613      	moveq	r3, r2
    c0c6:	6103      	str	r3, [r0, #16]
}
    c0c8:	2000      	movs	r0, #0
    c0ca:	4770      	bx	lr
    c0cc:	00032f43 	.word	0x00032f43

0000c0d0 <pb_encode_submessage>:
{
    c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0d4:	460e      	mov	r6, r1
    c0d6:	4617      	mov	r7, r2
    c0d8:	b086      	sub	sp, #24
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c0da:	2214      	movs	r2, #20
    c0dc:	2100      	movs	r1, #0
{
    c0de:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
    c0e0:	a801      	add	r0, sp, #4
    c0e2:	f024 fa8e 	bl	30602 <memset>
    if (!pb_encode(&substream, fields, src_struct))
    c0e6:	463a      	mov	r2, r7
    c0e8:	4631      	mov	r1, r6
    c0ea:	a801      	add	r0, sp, #4
    c0ec:	f000 f9c4 	bl	c478 <pb_encode>
    c0f0:	b910      	cbnz	r0, c0f8 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
    c0f2:	9b05      	ldr	r3, [sp, #20]
        PB_RETURN_ERROR(stream, "stream full");
    c0f4:	6123      	str	r3, [r4, #16]
    c0f6:	e008      	b.n	c10a <pb_encode_submessage+0x3a>
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0f8:	f04f 0800 	mov.w	r8, #0
    size = substream.bytes_written;
    c0fc:	9d04      	ldr	r5, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c0fe:	4643      	mov	r3, r8
    c100:	462a      	mov	r2, r5
    c102:	4620      	mov	r0, r4
    c104:	f01d ffdf 	bl	2a0c6 <pb_encode_varint>
    c108:	b918      	cbnz	r0, c112 <pb_encode_submessage+0x42>
        return false;
    c10a:	2000      	movs	r0, #0
}
    c10c:	b006      	add	sp, #24
    c10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->callback == NULL)
    c112:	6821      	ldr	r1, [r4, #0]
    c114:	b921      	cbnz	r1, c120 <pb_encode_submessage+0x50>
        return pb_write(stream, NULL, size); /* Just sizing */
    c116:	462a      	mov	r2, r5
    c118:	4620      	mov	r0, r4
    c11a:	f7ff ff39 	bl	bf90 <pb_write>
    c11e:	e7f5      	b.n	c10c <pb_encode_submessage+0x3c>
    if (stream->bytes_written + size > stream->max_size)
    c120:	68e3      	ldr	r3, [r4, #12]
    c122:	68a2      	ldr	r2, [r4, #8]
    c124:	442b      	add	r3, r5
    c126:	4293      	cmp	r3, r2
    c128:	d905      	bls.n	c136 <pb_encode_submessage+0x66>
        PB_RETURN_ERROR(stream, "stream full");
    c12a:	6923      	ldr	r3, [r4, #16]
    c12c:	4a0e      	ldr	r2, [pc, #56]	; (c168 <pb_encode_submessage+0x98>)
    c12e:	2b00      	cmp	r3, #0
    c130:	bf08      	it	eq
    c132:	4613      	moveq	r3, r2
    c134:	e7de      	b.n	c0f4 <pb_encode_submessage+0x24>
    substream.state = stream->state;
    c136:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
    c138:	463a      	mov	r2, r7
    substream.callback = stream->callback;
    c13a:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
    c13c:	a801      	add	r0, sp, #4
    c13e:	4631      	mov	r1, r6
    substream.max_size = size;
    c140:	e9cd 3502 	strd	r3, r5, [sp, #8]
    substream.errmsg = NULL;
    c144:	e9cd 8804 	strd	r8, r8, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
    c148:	f000 f996 	bl	c478 <pb_encode>
    stream->bytes_written += substream.bytes_written;
    c14c:	9a04      	ldr	r2, [sp, #16]
    c14e:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
    c150:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
    c152:	4413      	add	r3, r2
    c154:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
    c156:	9b02      	ldr	r3, [sp, #8]
    c158:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
    c15a:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
    c15c:	d101      	bne.n	c162 <pb_encode_submessage+0x92>
    stream->errmsg = substream.errmsg;
    c15e:	6123      	str	r3, [r4, #16]
    c160:	e7d4      	b.n	c10c <pb_encode_submessage+0x3c>
        PB_RETURN_ERROR(stream, "submsg size changed");
    c162:	4a02      	ldr	r2, [pc, #8]	; (c16c <pb_encode_submessage+0x9c>)
    c164:	e7e3      	b.n	c12e <pb_encode_submessage+0x5e>
    c166:	bf00      	nop
    c168:	00032f1c 	.word	0x00032f1c
    c16c:	00032f56 	.word	0x00032f56

0000c170 <encode_basic_field>:
{
    c170:	b570      	push	{r4, r5, r6, lr}
    if (!field->pData)
    c172:	69cb      	ldr	r3, [r1, #28]
{
    c174:	4604      	mov	r4, r0
    c176:	460d      	mov	r5, r1
    if (!field->pData)
    c178:	2b00      	cmp	r3, #0
    c17a:	d07f      	beq.n	c27c <encode_basic_field+0x10c>
    if (!pb_encode_tag_for_field(stream, field))
    c17c:	f7ff ff86 	bl	c08c <pb_encode_tag_for_field>
    c180:	2800      	cmp	r0, #0
    c182:	d073      	beq.n	c26c <encode_basic_field+0xfc>
    switch (PB_LTYPE(field->type))
    c184:	7da8      	ldrb	r0, [r5, #22]
    c186:	f000 030f 	and.w	r3, r0, #15
    c18a:	2b0b      	cmp	r3, #11
    c18c:	d873      	bhi.n	c276 <encode_basic_field+0x106>
    c18e:	e8df f003 	tbb	[pc, r3]
    c192:	1106      	.short	0x1106
    c194:	17171111 	.word	0x17171111
    c198:	5252351d 	.word	0x5252351d
    c19c:	6f72      	.short	0x6f72
        if (p[i] != 0)
    c19e:	69eb      	ldr	r3, [r5, #28]
    return pb_encode_varint(stream, value);
    c1a0:	4620      	mov	r0, r4
}
    c1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (p[i] != 0)
    c1a6:	781a      	ldrb	r2, [r3, #0]
    return pb_encode_varint(stream, value);
    c1a8:	2300      	movs	r3, #0
    c1aa:	3a00      	subs	r2, #0
    c1ac:	bf18      	it	ne
    c1ae:	2201      	movne	r2, #1
    c1b0:	f01d bf89 	b.w	2a0c6 <pb_encode_varint>
            return pb_enc_varint(stream, field);
    c1b4:	4629      	mov	r1, r5
    c1b6:	4620      	mov	r0, r4
}
    c1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_varint(stream, field);
    c1bc:	f7ff bf0a 	b.w	bfd4 <pb_enc_varint>
            return pb_enc_fixed(stream, field);
    c1c0:	4629      	mov	r1, r5
    c1c2:	4620      	mov	r0, r4
}
    c1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return pb_enc_fixed(stream, field);
    c1c8:	f7ff bf4a 	b.w	c060 <pb_enc_fixed>

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_bytes_array_t *bytes = NULL;

    bytes = (const pb_bytes_array_t*)field->pData;
    c1cc:	69e9      	ldr	r1, [r5, #28]
    
    if (bytes == NULL)
    c1ce:	b909      	cbnz	r1, c1d4 <encode_basic_field+0x64>
    }


    if (str == NULL)
    {
        size = 0; /* Treat null pointer as an empty string */
    c1d0:	460a      	mov	r2, r1
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
    c1d2:	e00e      	b.n	c1f2 <encode_basic_field+0x82>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1d4:	283f      	cmp	r0, #63	; 0x3f
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c1d6:	880a      	ldrh	r2, [r1, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1d8:	d80a      	bhi.n	c1f0 <encode_basic_field+0x80>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    c1da:	8a6b      	ldrh	r3, [r5, #18]
    c1dc:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
    c1de:	4293      	cmp	r3, r2
    c1e0:	d206      	bcs.n	c1f0 <encode_basic_field+0x80>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
    c1e2:	6923      	ldr	r3, [r4, #16]
    c1e4:	4a26      	ldr	r2, [pc, #152]	; (c280 <encode_basic_field+0x110>)
            PB_RETURN_ERROR(stream, "invalid field type");
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	bf08      	it	eq
    c1ea:	4613      	moveq	r3, r2
    c1ec:	6123      	str	r3, [r4, #16]
    c1ee:	e03d      	b.n	c26c <encode_basic_field+0xfc>
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
    c1f0:	3102      	adds	r1, #2
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1f2:	4620      	mov	r0, r4
}
    c1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c1f8:	f01d bfb9 	b.w	2a16e <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c1fc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    c200:	2880      	cmp	r0, #128	; 0x80
    size_t max_size = (size_t)field->data_size;
    c202:	8a6b      	ldrh	r3, [r5, #18]
    const char *str = (const char*)field->pData;
    c204:	69e9      	ldr	r1, [r5, #28]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
    c206:	d00e      	beq.n	c226 <encode_basic_field+0xb6>
        if (max_size == 0)
    c208:	b913      	cbnz	r3, c210 <encode_basic_field+0xa0>
            PB_RETURN_ERROR(stream, "zero-length string");
    c20a:	6923      	ldr	r3, [r4, #16]
    c20c:	4a1d      	ldr	r2, [pc, #116]	; (c284 <encode_basic_field+0x114>)
    c20e:	e7ea      	b.n	c1e6 <encode_basic_field+0x76>
        max_size -= 1;
    c210:	3b01      	subs	r3, #1
    if (str == NULL)
    c212:	2900      	cmp	r1, #0
    c214:	d0dc      	beq.n	c1d0 <encode_basic_field+0x60>
    size_t size = 0;
    c216:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
    c218:	429a      	cmp	r2, r3
    c21a:	5c88      	ldrb	r0, [r1, r2]
    c21c:	d006      	beq.n	c22c <encode_basic_field+0xbc>
    c21e:	2800      	cmp	r0, #0
    c220:	d0e7      	beq.n	c1f2 <encode_basic_field+0x82>
            size++;
    c222:	3201      	adds	r2, #1
            p++;
    c224:	e7f8      	b.n	c218 <encode_basic_field+0xa8>
        max_size = (size_t)-1;
    c226:	f04f 33ff 	mov.w	r3, #4294967295
    c22a:	e7f2      	b.n	c212 <encode_basic_field+0xa2>
        if (*p != '\0')
    c22c:	2800      	cmp	r0, #0
    c22e:	d0e0      	beq.n	c1f2 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "unterminated string");
    c230:	6923      	ldr	r3, [r4, #16]
    c232:	4a15      	ldr	r2, [pc, #84]	; (c288 <encode_basic_field+0x118>)
    c234:	e7d7      	b.n	c1e6 <encode_basic_field+0x76>
    if (field->submsg_desc == NULL)
    c236:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c238:	b912      	cbnz	r2, c240 <encode_basic_field+0xd0>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
    c23a:	6923      	ldr	r3, [r4, #16]
    c23c:	4a13      	ldr	r2, [pc, #76]	; (c28c <encode_basic_field+0x11c>)
    c23e:	e7d2      	b.n	c1e6 <encode_basic_field+0x76>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c240:	2b09      	cmp	r3, #9
    c242:	d006      	beq.n	c252 <encode_basic_field+0xe2>
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c244:	4620      	mov	r0, r4
    c246:	69ea      	ldr	r2, [r5, #28]
    c248:	6a69      	ldr	r1, [r5, #36]	; 0x24
}
    c24a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
    c24e:	f7ff bf3f 	b.w	c0d0 <pb_encode_submessage>
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
    c252:	6a2a      	ldr	r2, [r5, #32]
    c254:	2a00      	cmp	r2, #0
    c256:	d0f5      	beq.n	c244 <encode_basic_field+0xd4>
        if (callback->funcs.encode)
    c258:	f852 3c08 	ldr.w	r3, [r2, #-8]
    c25c:	2b00      	cmp	r3, #0
    c25e:	d0f1      	beq.n	c244 <encode_basic_field+0xd4>
            if (!callback->funcs.encode(stream, field, &callback->arg))
    c260:	4629      	mov	r1, r5
    c262:	4620      	mov	r0, r4
    c264:	3a04      	subs	r2, #4
    c266:	4798      	blx	r3
    c268:	2800      	cmp	r0, #0
    c26a:	d1eb      	bne.n	c244 <encode_basic_field+0xd4>
        return false;
    c26c:	2000      	movs	r0, #0
}
    c26e:	bd70      	pop	{r4, r5, r6, pc}
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
    c270:	8a6a      	ldrh	r2, [r5, #18]
    c272:	69e9      	ldr	r1, [r5, #28]
    c274:	e7bd      	b.n	c1f2 <encode_basic_field+0x82>
            PB_RETURN_ERROR(stream, "invalid field type");
    c276:	6923      	ldr	r3, [r4, #16]
    c278:	4a05      	ldr	r2, [pc, #20]	; (c290 <encode_basic_field+0x120>)
    c27a:	e7b4      	b.n	c1e6 <encode_basic_field+0x76>
        return true;
    c27c:	2001      	movs	r0, #1
    c27e:	e7f6      	b.n	c26e <encode_basic_field+0xfe>
    c280:	00032f6a 	.word	0x00032f6a
    c284:	00032f7e 	.word	0x00032f7e
    c288:	00032f91 	.word	0x00032f91
    c28c:	00032fa5 	.word	0x00032fa5
    c290:	00032f43 	.word	0x00032f43

0000c294 <encode_field>:
{
    c294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c298:	7d8b      	ldrb	r3, [r1, #22]
{
    c29a:	4605      	mov	r5, r0
    c29c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c2a0:	2a30      	cmp	r2, #48	; 0x30
{
    c2a2:	460c      	mov	r4, r1
    c2a4:	b087      	sub	sp, #28
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
    c2a6:	d112      	bne.n	c2ce <encode_field+0x3a>
        if (*(const pb_size_t*)field->pSize != field->tag)
    c2a8:	6a0b      	ldr	r3, [r1, #32]
    c2aa:	881a      	ldrh	r2, [r3, #0]
    c2ac:	8a0b      	ldrh	r3, [r1, #16]
    c2ae:	429a      	cmp	r2, r3
    c2b0:	d114      	bne.n	c2dc <encode_field+0x48>
    if (!field->pData)
    c2b2:	69e2      	ldr	r2, [r4, #28]
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c2b4:	7da3      	ldrb	r3, [r4, #22]
    if (!field->pData)
    c2b6:	b9ea      	cbnz	r2, c2f4 <encode_field+0x60>
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
    c2b8:	f013 0f30 	tst.w	r3, #48	; 0x30
    c2bc:	d10e      	bne.n	c2dc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "missing required field");
    c2be:	692b      	ldr	r3, [r5, #16]
    c2c0:	4a69      	ldr	r2, [pc, #420]	; (c468 <encode_field+0x1d4>)
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	bf08      	it	eq
    c2c6:	4613      	moveq	r3, r2
    c2c8:	612b      	str	r3, [r5, #16]
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c2ca:	2000      	movs	r0, #0
    c2cc:	e007      	b.n	c2de <encode_field+0x4a>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
    c2ce:	2a10      	cmp	r2, #16
    c2d0:	d1ef      	bne.n	c2b2 <encode_field+0x1e>
        if (field->pSize)
    c2d2:	6a0a      	ldr	r2, [r1, #32]
    c2d4:	b132      	cbz	r2, c2e4 <encode_field+0x50>
        if (p[i] != 0)
    c2d6:	7813      	ldrb	r3, [r2, #0]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d1ea      	bne.n	c2b2 <encode_field+0x1e>
            return true;
    c2dc:	2001      	movs	r0, #1
}
    c2de:	b007      	add	sp, #28
    c2e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
    c2e4:	2b3f      	cmp	r3, #63	; 0x3f
    c2e6:	d8e4      	bhi.n	c2b2 <encode_field+0x1e>
            if (pb_check_proto3_default_value(field))
    c2e8:	4608      	mov	r0, r1
    c2ea:	f7ff fddd 	bl	bea8 <pb_check_proto3_default_value>
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d0df      	beq.n	c2b2 <encode_field+0x1e>
    c2f2:	e7f3      	b.n	c2dc <encode_field+0x48>
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
    c2f4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
    c2f8:	2a40      	cmp	r2, #64	; 0x40
    c2fa:	d10c      	bne.n	c316 <encode_field+0x82>
    if (field->descriptor->field_callback != NULL)
    c2fc:	6823      	ldr	r3, [r4, #0]
    c2fe:	68db      	ldr	r3, [r3, #12]
    c300:	2b00      	cmp	r3, #0
    c302:	d0eb      	beq.n	c2dc <encode_field+0x48>
        if (!field->descriptor->field_callback(NULL, stream, field))
    c304:	4622      	mov	r2, r4
    c306:	4629      	mov	r1, r5
    c308:	2000      	movs	r0, #0
    c30a:	4798      	blx	r3
    c30c:	2800      	cmp	r0, #0
    c30e:	d1e5      	bne.n	c2dc <encode_field+0x48>
            PB_RETURN_ERROR(stream, "callback error");
    c310:	692b      	ldr	r3, [r5, #16]
    c312:	4a56      	ldr	r2, [pc, #344]	; (c46c <encode_field+0x1d8>)
    c314:	e7d5      	b.n	c2c2 <encode_field+0x2e>
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
    c316:	f003 0130 	and.w	r1, r3, #48	; 0x30
    c31a:	2920      	cmp	r1, #32
    c31c:	f040 809d 	bne.w	c45a <encode_field+0x1c6>
    count = *(pb_size_t*)field->pSize;
    c320:	6a21      	ldr	r1, [r4, #32]
    c322:	880e      	ldrh	r6, [r1, #0]
    if (count == 0)
    c324:	2e00      	cmp	r6, #0
    c326:	d0d9      	beq.n	c2dc <encode_field+0x48>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c328:	2a80      	cmp	r2, #128	; 0x80
    c32a:	d120      	bne.n	c36e <encode_field+0xda>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
    c32c:	f003 030f 	and.w	r3, r3, #15
    c330:	2b05      	cmp	r3, #5
    c332:	d85e      	bhi.n	c3f2 <encode_field+0x15e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
    c334:	2102      	movs	r1, #2
    c336:	4628      	mov	r0, r5
    c338:	8a22      	ldrh	r2, [r4, #16]
    c33a:	f01d ff12 	bl	2a162 <pb_encode_tag>
    c33e:	2800      	cmp	r0, #0
    c340:	d0c3      	beq.n	c2ca <encode_field+0x36>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
    c342:	7da3      	ldrb	r3, [r4, #22]
    c344:	f003 030f 	and.w	r3, r3, #15
    c348:	2b04      	cmp	r3, #4
    c34a:	d116      	bne.n	c37a <encode_field+0xe6>
            size = 4 * (size_t)count;
    c34c:	00b7      	lsls	r7, r6, #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
    c34e:	463a      	mov	r2, r7
    c350:	2300      	movs	r3, #0
    c352:	4628      	mov	r0, r5
    c354:	f01d feb7 	bl	2a0c6 <pb_encode_varint>
    c358:	2800      	cmp	r0, #0
    c35a:	d0b6      	beq.n	c2ca <encode_field+0x36>
        if (stream->callback == NULL)
    c35c:	6829      	ldr	r1, [r5, #0]
    c35e:	bb79      	cbnz	r1, c3c0 <encode_field+0x12c>
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c360:	463a      	mov	r2, r7
    c362:	4628      	mov	r0, r5
}
    c364:	b007      	add	sp, #28
    c366:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
    c36a:	f7ff be11 	b.w	bf90 <pb_write>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
    c36e:	8aa2      	ldrh	r2, [r4, #20]
    c370:	42b2      	cmp	r2, r6
    c372:	d2db      	bcs.n	c32c <encode_field+0x98>
        PB_RETURN_ERROR(stream, "array max size exceeded");
    c374:	692b      	ldr	r3, [r5, #16]
    c376:	4a3e      	ldr	r2, [pc, #248]	; (c470 <encode_field+0x1dc>)
    c378:	e7a3      	b.n	c2c2 <encode_field+0x2e>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c37a:	2b05      	cmp	r3, #5
    c37c:	d101      	bne.n	c382 <encode_field+0xee>
            size = 8 * (size_t)count;
    c37e:	00f7      	lsls	r7, r6, #3
    c380:	e7e5      	b.n	c34e <encode_field+0xba>
            void *pData_orig = field->pData;
    c382:	2700      	movs	r7, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
    c384:	2214      	movs	r2, #20
    c386:	2100      	movs	r1, #0
    c388:	a801      	add	r0, sp, #4
    c38a:	f024 f93a 	bl	30602 <memset>
            void *pData_orig = field->pData;
    c38e:	f8d4 801c 	ldr.w	r8, [r4, #28]
                if (!pb_enc_varint(&sizestream, field))
    c392:	4621      	mov	r1, r4
    c394:	a801      	add	r0, sp, #4
    c396:	f7ff fe1d 	bl	bfd4 <pb_enc_varint>
    c39a:	b928      	cbnz	r0, c3a8 <encode_field+0x114>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
    c39c:	692b      	ldr	r3, [r5, #16]
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d192      	bne.n	c2c8 <encode_field+0x34>
    c3a2:	9b05      	ldr	r3, [sp, #20]
    c3a4:	4a33      	ldr	r2, [pc, #204]	; (c474 <encode_field+0x1e0>)
    c3a6:	e78c      	b.n	c2c2 <encode_field+0x2e>
                field->pData = (char*)field->pData + field->data_size;
    c3a8:	69e3      	ldr	r3, [r4, #28]
    c3aa:	8a62      	ldrh	r2, [r4, #18]
            for (i = 0; i < count; i++)
    c3ac:	3701      	adds	r7, #1
                field->pData = (char*)field->pData + field->data_size;
    c3ae:	4413      	add	r3, r2
    c3b0:	61e3      	str	r3, [r4, #28]
            for (i = 0; i < count; i++)
    c3b2:	b2bb      	uxth	r3, r7
    c3b4:	429e      	cmp	r6, r3
    c3b6:	d8ec      	bhi.n	c392 <encode_field+0xfe>
            size = sizestream.bytes_written;
    c3b8:	9f04      	ldr	r7, [sp, #16]
            field->pData = pData_orig;
    c3ba:	f8c4 801c 	str.w	r8, [r4, #28]
            size = sizestream.bytes_written;
    c3be:	e7c6      	b.n	c34e <encode_field+0xba>
    c3c0:	2700      	movs	r7, #0
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c3c2:	7da3      	ldrb	r3, [r4, #22]
                if (!pb_enc_fixed(stream, field))
    c3c4:	4621      	mov	r1, r4
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c3c6:	f003 030e 	and.w	r3, r3, #14
    c3ca:	2b04      	cmp	r3, #4
                if (!pb_enc_fixed(stream, field))
    c3cc:	4628      	mov	r0, r5
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
    c3ce:	d10d      	bne.n	c3ec <encode_field+0x158>
                if (!pb_enc_fixed(stream, field))
    c3d0:	f7ff fe46 	bl	c060 <pb_enc_fixed>
    c3d4:	2800      	cmp	r0, #0
    c3d6:	f43f af78 	beq.w	c2ca <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c3da:	69e3      	ldr	r3, [r4, #28]
    c3dc:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c3de:	3701      	adds	r7, #1
            field->pData = (char*)field->pData + field->data_size;
    c3e0:	4413      	add	r3, r2
    c3e2:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c3e4:	b2bb      	uxth	r3, r7
    c3e6:	429e      	cmp	r6, r3
    c3e8:	d8eb      	bhi.n	c3c2 <encode_field+0x12e>
    c3ea:	e777      	b.n	c2dc <encode_field+0x48>
                if (!pb_enc_varint(stream, field))
    c3ec:	f7ff fdf2 	bl	bfd4 <pb_enc_varint>
    c3f0:	e7f0      	b.n	c3d4 <encode_field+0x140>
    c3f2:	f04f 0800 	mov.w	r8, #0
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
    c3f6:	7da3      	ldrb	r3, [r4, #22]
    c3f8:	f003 03ce 	and.w	r3, r3, #206	; 0xce
    c3fc:	2b86      	cmp	r3, #134	; 0x86
    c3fe:	d127      	bne.n	c450 <encode_field+0x1bc>
                void *pData_orig = field->pData;
    c400:	69e7      	ldr	r7, [r4, #28]
                    status = pb_encode_tag_for_field(stream, field) &&
    c402:	4621      	mov	r1, r4
                field->pData = *(void* const*)field->pData;
    c404:	f8d7 9000 	ldr.w	r9, [r7]
                    status = pb_encode_tag_for_field(stream, field) &&
    c408:	4628      	mov	r0, r5
                field->pData = *(void* const*)field->pData;
    c40a:	f8c4 901c 	str.w	r9, [r4, #28]
                if (!field->pData)
    c40e:	f1b9 0f00 	cmp.w	r9, #0
    c412:	d11a      	bne.n	c44a <encode_field+0x1b6>
                    status = pb_encode_tag_for_field(stream, field) &&
    c414:	f7ff fe3a 	bl	c08c <pb_encode_tag_for_field>
    c418:	b908      	cbnz	r0, c41e <encode_field+0x18a>
                field->pData = pData_orig;
    c41a:	61e7      	str	r7, [r4, #28]
                if (!status)
    c41c:	e755      	b.n	c2ca <encode_field+0x36>
        return pb_write(stream, &byte, 1);
    c41e:	2201      	movs	r2, #1
    c420:	4628      	mov	r0, r5
    c422:	a901      	add	r1, sp, #4
        pb_byte_t byte = (pb_byte_t)value;
    c424:	f88d 9004 	strb.w	r9, [sp, #4]
        return pb_write(stream, &byte, 1);
    c428:	f7ff fdb2 	bl	bf90 <pb_write>
                field->pData = pData_orig;
    c42c:	61e7      	str	r7, [r4, #28]
                if (!encode_basic_field(stream, field))
    c42e:	2800      	cmp	r0, #0
    c430:	f43f af4b 	beq.w	c2ca <encode_field+0x36>
            field->pData = (char*)field->pData + field->data_size;
    c434:	69e3      	ldr	r3, [r4, #28]
    c436:	8a62      	ldrh	r2, [r4, #18]
        for (i = 0; i < count; i++)
    c438:	f108 0801 	add.w	r8, r8, #1
            field->pData = (char*)field->pData + field->data_size;
    c43c:	4413      	add	r3, r2
    c43e:	61e3      	str	r3, [r4, #28]
        for (i = 0; i < count; i++)
    c440:	fa1f f388 	uxth.w	r3, r8
    c444:	429e      	cmp	r6, r3
    c446:	d8d6      	bhi.n	c3f6 <encode_field+0x162>
    c448:	e748      	b.n	c2dc <encode_field+0x48>
                    status = encode_basic_field(stream, field);
    c44a:	f7ff fe91 	bl	c170 <encode_basic_field>
    c44e:	e7ed      	b.n	c42c <encode_field+0x198>
                if (!encode_basic_field(stream, field))
    c450:	4621      	mov	r1, r4
    c452:	4628      	mov	r0, r5
    c454:	f7ff fe8c 	bl	c170 <encode_basic_field>
    c458:	e7e9      	b.n	c42e <encode_field+0x19a>
        return encode_basic_field(stream, field);
    c45a:	4621      	mov	r1, r4
    c45c:	4628      	mov	r0, r5
}
    c45e:	b007      	add	sp, #28
    c460:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return encode_basic_field(stream, field);
    c464:	f7ff be84 	b.w	c170 <encode_basic_field>
    c468:	00032fbe 	.word	0x00032fbe
    c46c:	00032fd5 	.word	0x00032fd5
    c470:	00032fe4 	.word	0x00032fe4
    c474:	00032ffc 	.word	0x00032ffc

0000c478 <pb_encode>:
{
    c478:	b530      	push	{r4, r5, lr}
    c47a:	b095      	sub	sp, #84	; 0x54
    c47c:	4604      	mov	r4, r0
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
    c47e:	4668      	mov	r0, sp
    c480:	f01d fdfc 	bl	2a07c <pb_field_iter_begin_const>
    c484:	b370      	cbz	r0, c4e4 <pb_encode+0x6c>
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
    c486:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c48a:	f003 030f 	and.w	r3, r3, #15
    c48e:	2b0a      	cmp	r3, #10
    c490:	d121      	bne.n	c4d6 <pb_encode+0x5e>
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
    c492:	9b07      	ldr	r3, [sp, #28]
    c494:	681d      	ldr	r5, [r3, #0]
    while (extension)
    c496:	b91d      	cbnz	r5, c4a0 <pb_encode+0x28>
    } while (pb_field_iter_next(&iter));
    c498:	4668      	mov	r0, sp
    c49a:	f01d fde4 	bl	2a066 <pb_field_iter_next>
    c49e:	e7f1      	b.n	c484 <pb_encode+0xc>
        if (extension->type->encode)
    c4a0:	682b      	ldr	r3, [r5, #0]
            status = extension->type->encode(stream, extension);
    c4a2:	4629      	mov	r1, r5
        if (extension->type->encode)
    c4a4:	685b      	ldr	r3, [r3, #4]
    c4a6:	b123      	cbz	r3, c4b2 <pb_encode+0x3a>
            status = extension->type->encode(stream, extension);
    c4a8:	4620      	mov	r0, r4
    c4aa:	4798      	blx	r3
        if (!status)
    c4ac:	b158      	cbz	r0, c4c6 <pb_encode+0x4e>
        extension = extension->next;
    c4ae:	68ad      	ldr	r5, [r5, #8]
    c4b0:	e7f1      	b.n	c496 <pb_encode+0x1e>
    if (!pb_field_iter_begin_extension_const(&iter, extension))
    c4b2:	a80a      	add	r0, sp, #40	; 0x28
    c4b4:	f01d fde4 	bl	2a080 <pb_field_iter_begin_extension_const>
    c4b8:	b940      	cbnz	r0, c4cc <pb_encode+0x54>
        PB_RETURN_ERROR(stream, "invalid extension");
    c4ba:	6923      	ldr	r3, [r4, #16]
    c4bc:	4a0a      	ldr	r2, [pc, #40]	; (c4e8 <pb_encode+0x70>)
    c4be:	2b00      	cmp	r3, #0
    c4c0:	bf08      	it	eq
    c4c2:	4613      	moveq	r3, r2
    c4c4:	6123      	str	r3, [r4, #16]
                return false;
    c4c6:	2000      	movs	r0, #0
}
    c4c8:	b015      	add	sp, #84	; 0x54
    c4ca:	bd30      	pop	{r4, r5, pc}
    return encode_field(stream, &iter);
    c4cc:	4620      	mov	r0, r4
    c4ce:	a90a      	add	r1, sp, #40	; 0x28
    c4d0:	f7ff fee0 	bl	c294 <encode_field>
    c4d4:	e7ea      	b.n	c4ac <pb_encode+0x34>
            if (!encode_field(stream, &iter))
    c4d6:	4669      	mov	r1, sp
    c4d8:	4620      	mov	r0, r4
    c4da:	f7ff fedb 	bl	c294 <encode_field>
    c4de:	2800      	cmp	r0, #0
    c4e0:	d1da      	bne.n	c498 <pb_encode+0x20>
    c4e2:	e7f0      	b.n	c4c6 <pb_encode+0x4e>
        return true; /* Empty message type */
    c4e4:	2001      	movs	r0, #1
    c4e6:	e7ef      	b.n	c4c8 <pb_encode+0x50>
    c4e8:	00033003 	.word	0x00033003

0000c4ec <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4f0:	b097      	sub	sp, #92	; 0x5c
    c4f2:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(in_packaged != NULL);
    c4f4:	4604      	mov	r4, r0
{
    c4f6:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
    c4fa:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
    c4fe:	61fb      	str	r3, [r7, #28]
	__ASSERT_NO_MSG(in_packaged != NULL);
    c500:	b958      	cbnz	r0, c51a <cbprintf_package_convert+0x2e>
    c502:	49ab      	ldr	r1, [pc, #684]	; (c7b0 <cbprintf_package_convert+0x2c4>)
    c504:	f44f 7365 	mov.w	r3, #916	; 0x394
    c508:	4aaa      	ldr	r2, [pc, #680]	; (c7b4 <cbprintf_package_convert+0x2c8>)
    c50a:	48ab      	ldr	r0, [pc, #684]	; (c7b8 <cbprintf_package_convert+0x2cc>)
    c50c:	f01e f8e5 	bl	2a6da <assert_print>
    c510:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c514:	48a7      	ldr	r0, [pc, #668]	; (c7b4 <cbprintf_package_convert+0x2c8>)
    c516:	f01e f8d9 	bl	2a6cc <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
    c51a:	f3ca 03c0 	ubfx	r3, sl, #3, #1
    c51e:	617b      	str	r3, [r7, #20]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c522:	b953      	cbnz	r3, c53a <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
    c524:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    c526:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    c528:	7880      	ldrb	r0, [r0, #2]
	for (int i = 0; i < s_nbr; i++) {
    c52a:	6abd      	ldr	r5, [r7, #40]	; 0x28
	buf += ros_nbr;
    c52c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    c530:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
    c532:	42b5      	cmp	r5, r6
    c534:	d319      	bcc.n	c56a <cbprintf_package_convert+0x7e>
	return (size_t)(uintptr_t)(buf - start);
    c536:	1b03      	subs	r3, r0, r4
    c538:	62bb      	str	r3, [r7, #40]	; 0x28
	rws_nbr = in_desc->rw_str_cnt;
    c53a:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
    c53c:	f894 b002 	ldrb.w	fp, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
    c540:	61bb      	str	r3, [r7, #24]
	ro_cpy = ros_nbr &&
    c542:	f1bb 0f00 	cmp.w	fp, #0
    c546:	d002      	beq.n	c54e <cbprintf_package_convert+0x62>
    c548:	f01a 0f01 	tst.w	sl, #1
    c54c:	d116      	bne.n	c57c <cbprintf_package_convert+0x90>
	rw_cpy = rws_nbr > 0 &&
    c54e:	69bb      	ldr	r3, [r7, #24]
    c550:	bb53      	cbnz	r3, c5a8 <cbprintf_package_convert+0xbc>
		if (cb) {
    c552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c554:	b11b      	cbz	r3, c55e <cbprintf_package_convert+0x72>
			cb(in_packaged, in_len, ctx);
    c556:	4620      	mov	r0, r4
    c558:	69fa      	ldr	r2, [r7, #28]
    c55a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c55c:	4798      	blx	r3
		return in_len;
    c55e:	6abd      	ldr	r5, [r7, #40]	; 0x28

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    c560:	4628      	mov	r0, r5
    c562:	375c      	adds	r7, #92	; 0x5c
    c564:	46bd      	mov	sp, r7
    c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    c56a:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
    c56e:	4640      	mov	r0, r8
    c570:	f7fc ff09 	bl	9386 <strlen>
    c574:	3001      	adds	r0, #1
    c576:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
    c578:	3501      	adds	r5, #1
    c57a:	e7da      	b.n	c532 <cbprintf_package_convert+0x46>
	rw_cpy = rws_nbr > 0 &&
    c57c:	7823      	ldrb	r3, [r4, #0]
    c57e:	6862      	ldr	r2, [r4, #4]
	args_size = in_desc->len * sizeof(int);
    c580:	627b      	str	r3, [r7, #36]	; 0x24
    c582:	009b      	lsls	r3, r3, #2
    c584:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
    c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c588:	623a      	str	r2, [r7, #32]
	uint8_t *str_pos = &buf[args_size];
    c58a:	eb04 0983 	add.w	r9, r4, r3, lsl #2
	if (cb == NULL) {
    c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c590:	2b00      	cmp	r3, #0
    c592:	f040 8101 	bne.w	c798 <cbprintf_package_convert+0x2ac>
		out_len = (int)in_len;
    c596:	46c8      	mov	r8, r9
	size_t strl_cnt = 0;
    c598:	2600      	movs	r6, #0
		out_len = (int)in_len;
    c59a:	6abd      	ldr	r5, [r7, #40]	; 0x28
		if (ro_cpy) {
    c59c:	eb09 030b 	add.w	r3, r9, fp
			for (int i = 0; i < ros_nbr; i++) {
    c5a0:	4543      	cmp	r3, r8
    c5a2:	d14e      	bne.n	c642 <cbprintf_package_convert+0x156>
    c5a4:	44d9      	add	r9, fp
    c5a6:	e013      	b.n	c5d0 <cbprintf_package_convert+0xe4>
	rw_cpy = rws_nbr > 0 &&
    c5a8:	f01a 0f02 	tst.w	sl, #2
    c5ac:	d0d1      	beq.n	c552 <cbprintf_package_convert+0x66>
	args_size = in_desc->len * sizeof(int);
    c5ae:	7823      	ldrb	r3, [r4, #0]
    c5b0:	4699      	mov	r9, r3
    c5b2:	627b      	str	r3, [r7, #36]	; 0x24
    c5b4:	009b      	lsls	r3, r3, #2
    c5b6:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c5b8:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
    c5ba:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
    c5be:	623b      	str	r3, [r7, #32]
	if (cb == NULL) {
    c5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	d17c      	bne.n	c6c0 <cbprintf_package_convert+0x1d4>
		out_len = (int)in_len;
    c5c6:	6abd      	ldr	r5, [r7, #40]	; 0x28
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c5c8:	f1bb 0f00 	cmp.w	fp, #0
    c5cc:	d150      	bne.n	c670 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
    c5ce:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
    c5d0:	f01a 0f05 	tst.w	sl, #5
    c5d4:	bf0c      	ite	eq
    c5d6:	2302      	moveq	r3, #2
    c5d8:	2301      	movne	r3, #1
    c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
    c5dc:	69bb      	ldr	r3, [r7, #24]
    c5de:	eb09 0b43 	add.w	fp, r9, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c5e2:	f00a 0302 	and.w	r3, sl, #2
    c5e6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < rws_nbr; i++) {
    c5e8:	45d9      	cmp	r9, fp
    c5ea:	d0b9      	beq.n	c560 <cbprintf_package_convert+0x74>
			uint8_t arg_idx = *str_pos++;
    c5ec:	f819 1b02 	ldrb.w	r1, [r9], #2
			const char *str = *(const char **)&buf32[arg_pos];
    c5f0:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    c5f4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    c5f8:	4b70      	ldr	r3, [pc, #448]	; (c7bc <cbprintf_package_convert+0x2d0>)
    c5fa:	4598      	cmp	r8, r3
    c5fc:	d302      	bcc.n	c604 <cbprintf_package_convert+0x118>
    c5fe:	4b70      	ldr	r3, [pc, #448]	; (c7c0 <cbprintf_package_convert+0x2d4>)
    c600:	4598      	cmp	r8, r3
    c602:	d33b      	bcc.n	c67c <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c604:	697b      	ldr	r3, [r7, #20]
    c606:	2b00      	cmp	r3, #0
    c608:	d045      	beq.n	c696 <cbprintf_package_convert+0x1aa>
    c60a:	6a38      	ldr	r0, [r7, #32]
    c60c:	f01d fdf0 	bl	2a1f0 <is_ptr>
    c610:	2800      	cmp	r0, #0
    c612:	d040      	beq.n	c696 <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    c614:	46e8      	mov	r8, sp
    c616:	b08a      	sub	sp, #40	; 0x28
    c618:	466a      	mov	r2, sp
    c61a:	4b6a      	ldr	r3, [pc, #424]	; (c7c4 <cbprintf_package_convert+0x2d8>)
    c61c:	6153      	str	r3, [r2, #20]
    c61e:	6a3b      	ldr	r3, [r7, #32]
    c620:	e9c2 3106 	strd	r3, r1, [r2, #24]
    c624:	f44f 7300 	mov.w	r3, #512	; 0x200
    c628:	8413      	strh	r3, [r2, #32]
    c62a:	4b67      	ldr	r3, [pc, #412]	; (c7c8 <cbprintf_package_convert+0x2dc>)
    c62c:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    c630:	2300      	movs	r3, #0
    c632:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    c636:	4865      	ldr	r0, [pc, #404]	; (c7cc <cbprintf_package_convert+0x2e0>)
    c638:	f002 f93a 	bl	e8b0 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    c63c:	3d02      	subs	r5, #2
    c63e:	46c5      	mov	sp, r8
				continue;
    c640:	e7d2      	b.n	c5e8 <cbprintf_package_convert+0xfc>
				const char *str = *(const char **)&buf32[*str_pos];
    c642:	f818 2b01 	ldrb.w	r2, [r8], #1
    c646:	62fb      	str	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c648:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    c64c:	f7fc fe9b 	bl	9386 <strlen>
				if (strl && strl_cnt < strl_len) {
    c650:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		return 1 + strlen(str);
    c656:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    c658:	b142      	cbz	r2, c66c <cbprintf_package_convert+0x180>
    c65a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
    c65e:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    c660:	bf3e      	ittt	cc
    c662:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
    c666:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    c66a:	3601      	addcc	r6, #1
				out_len += len;
    c66c:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
    c66e:	e797      	b.n	c5a0 <cbprintf_package_convert+0xb4>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c670:	f01a 0604 	ands.w	r6, sl, #4
	size_t strl_cnt = 0;
    c674:	bf1c      	itt	ne
    c676:	6afe      	ldrne	r6, [r7, #44]	; 0x2c
				str_pos += ros_nbr;
    c678:	44d9      	addne	r9, fp
    c67a:	e7a9      	b.n	c5d0 <cbprintf_package_convert+0xe4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    c67c:	697b      	ldr	r3, [r7, #20]
    c67e:	b123      	cbz	r3, c68a <cbprintf_package_convert+0x19e>
    c680:	6a38      	ldr	r0, [r7, #32]
    c682:	f01d fdb5 	bl	2a1f0 <is_ptr>
    c686:	2800      	cmp	r0, #0
    c688:	d1c4      	bne.n	c614 <cbprintf_package_convert+0x128>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c68a:	f01a 0f01 	tst.w	sl, #1
    c68e:	d105      	bne.n	c69c <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
    c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c692:	1aed      	subs	r5, r5, r3
    c694:	e7a8      	b.n	c5e8 <cbprintf_package_convert+0xfc>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c698:	2b00      	cmp	r3, #0
    c69a:	d0a5      	beq.n	c5e8 <cbprintf_package_convert+0xfc>
		return 1 + strlen(str);
    c69c:	4640      	mov	r0, r8
    c69e:	f7fc fe72 	bl	9386 <strlen>
				if (strl && strl_cnt < strl_len) {
    c6a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c6a6:	b14b      	cbz	r3, c6bc <cbprintf_package_convert+0x1d0>
    c6a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    c6ac:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    c6ae:	bf3f      	itttt	cc
    c6b0:	f8d7 2084 	ldrcc.w	r2, [r7, #132]	; 0x84
		return 1 + strlen(str);
    c6b4:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    c6b6:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    c6ba:	3601      	addcc	r6, #1
				out_len += (len - 1);
    c6bc:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    c6be:	e793      	b.n	c5e8 <cbprintf_package_convert+0xfc>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c6c0:	f1bb 0f00 	cmp.w	fp, #0
    c6c4:	d06e      	beq.n	c7a4 <cbprintf_package_convert+0x2b8>
    c6c6:	f01a 0604 	ands.w	r6, sl, #4
    c6ca:	d06e      	beq.n	c7aa <cbprintf_package_convert+0x2be>
		keep_cnt = ros_nbr;
    c6cc:	46d8      	mov	r8, fp
		scpy_cnt = 0;
    c6ce:	2600      	movs	r6, #0
		dst = keep_str_pos;
    c6d0:	f107 0048 	add.w	r0, r7, #72	; 0x48
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c6d4:	465a      	mov	r2, fp
    c6d6:	4649      	mov	r1, r9
    c6d8:	f023 ff59 	bl	3058e <memcpy>
	str_pos += ros_nbr;
    c6dc:	69bb      	ldr	r3, [r7, #24]
    c6de:	44d9      	add	r9, fp
	for (int i = 0; i < rws_nbr; i++) {
    c6e0:	005b      	lsls	r3, r3, #1
    c6e2:	60fb      	str	r3, [r7, #12]
    c6e4:	69bb      	ldr	r3, [r7, #24]
    c6e6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    c6ea:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c6ec:	f00a 0302 	and.w	r3, sl, #2
    c6f0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    c6f2:	68bb      	ldr	r3, [r7, #8]
    c6f4:	454b      	cmp	r3, r9
    c6f6:	d16b      	bne.n	c7d0 <cbprintf_package_convert+0x2e4>
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c6f8:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c6fa:	f01a 0f02 	tst.w	sl, #2
    c6fe:	bf18      	it	ne
    c700:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c702:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    c706:	bf08      	it	eq
    c708:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c70c:	f01a 0f01 	tst.w	sl, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    c710:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c712:	f040 80e1 	bne.w	c8d8 <cbprintf_package_convert+0x3ec>
    c716:	f01a 0f04 	tst.w	sl, #4
    c71a:	bf14      	ite	ne
    c71c:	4640      	movne	r0, r8
    c71e:	2000      	moveq	r0, #0
    c720:	623b      	str	r3, [r7, #32]
	*in_desc = out_desc;
    c722:	7062      	strb	r2, [r4, #1]
    c724:	70a0      	strb	r0, [r4, #2]
    c726:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    c728:	4620      	mov	r0, r4
    c72a:	69fa      	ldr	r2, [r7, #28]
    c72c:	6939      	ldr	r1, [r7, #16]
    c72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c730:	4798      	blx	r3
	if (rv < 0) {
    c732:	1e05      	subs	r5, r0, #0
    c734:	f6ff af14 	blt.w	c560 <cbprintf_package_convert+0x74>
	*in_desc = in_desc_backup;
    c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c73a:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    c73c:	7023      	strb	r3, [r4, #0]
    c73e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c740:	69fa      	ldr	r2, [r7, #28]
	*in_desc = in_desc_backup;
    c742:	7063      	strb	r3, [r4, #1]
    c744:	69bb      	ldr	r3, [r7, #24]
    c746:	f884 b002 	strb.w	fp, [r4, #2]
    c74a:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    c74c:	f107 0048 	add.w	r0, r7, #72	; 0x48
    c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c752:	4798      	blx	r3
	if (rv < 0) {
    c754:	f1b0 0800 	subs.w	r8, r0, #0
    c758:	f2c0 80ec 	blt.w	c934 <cbprintf_package_convert+0x448>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	rv = cb(str_pos, strs_len, ctx);
    c75e:	4648      	mov	r0, r9
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c760:	eba3 010b 	sub.w	r1, r3, fp
    c764:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
    c766:	69fa      	ldr	r2, [r7, #28]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    c768:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    c76a:	68fb      	ldr	r3, [r7, #12]
    c76c:	1ac9      	subs	r1, r1, r3
    c76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c770:	4798      	blx	r3
	if (rv < 0) {
    c772:	2800      	cmp	r0, #0
    c774:	f2c0 80e0 	blt.w	c938 <cbprintf_package_convert+0x44c>
	for (int i = 0; i < scpy_cnt; i++) {
    c778:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    c77c:	44a8      	add	r8, r5
	out_len += rv;
    c77e:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    c782:	f107 0a38 	add.w	sl, r7, #56	; 0x38
	for (int i = 0; i < scpy_cnt; i++) {
    c786:	45b3      	cmp	fp, r6
    c788:	f2c0 80a8 	blt.w	c8dc <cbprintf_package_convert+0x3f0>
	(void)cb(NULL, 0, ctx);
    c78c:	2100      	movs	r1, #0
    c78e:	69fa      	ldr	r2, [r7, #28]
    c790:	4608      	mov	r0, r1
    c792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c794:	4798      	blx	r3
	return out_len;
    c796:	e6e3      	b.n	c560 <cbprintf_package_convert+0x74>
	if (cb == NULL) {
    c798:	465e      	mov	r6, fp
    c79a:	f04f 0800 	mov.w	r8, #0
    c79e:	f107 0038 	add.w	r0, r7, #56	; 0x38
    c7a2:	e797      	b.n	c6d4 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
    c7a4:	465e      	mov	r6, fp
		keep_cnt = 0;
    c7a6:	46d8      	mov	r8, fp
    c7a8:	e798      	b.n	c6dc <cbprintf_package_convert+0x1f0>
    c7aa:	46b0      	mov	r8, r6
    c7ac:	e796      	b.n	c6dc <cbprintf_package_convert+0x1f0>
    c7ae:	bf00      	nop
    c7b0:	000330aa 	.word	0x000330aa
    c7b4:	00033015 	.word	0x00033015
    c7b8:	00032679 	.word	0x00032679
    c7bc:	00030e3c 	.word	0x00030e3c
    c7c0:	00038e80 	.word	0x00038e80
    c7c4:	000330c5 	.word	0x000330c5
    c7c8:	01000004 	.word	0x01000004
    c7cc:	0003154c 	.word	0x0003154c
		uint8_t arg_idx = *str_pos++;
    c7d0:	f819 1b02 	ldrb.w	r1, [r9], #2
    c7d4:	4b59      	ldr	r3, [pc, #356]	; (c93c <cbprintf_package_convert+0x450>)
		uint8_t arg_pos = *str_pos++;
    c7d6:	f819 5c01 	ldrb.w	r5, [r9, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    c7da:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    c7de:	4298      	cmp	r0, r3
    c7e0:	d302      	bcc.n	c7e8 <cbprintf_package_convert+0x2fc>
    c7e2:	4b57      	ldr	r3, [pc, #348]	; (c940 <cbprintf_package_convert+0x454>)
    c7e4:	4298      	cmp	r0, r3
    c7e6:	d316      	bcc.n	c816 <cbprintf_package_convert+0x32a>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c7e8:	697b      	ldr	r3, [r7, #20]
    c7ea:	b12b      	cbz	r3, c7f8 <cbprintf_package_convert+0x30c>
    c7ec:	6a38      	ldr	r0, [r7, #32]
    c7ee:	f01d fcff 	bl	2a1f0 <is_ptr>
    c7f2:	2800      	cmp	r0, #0
    c7f4:	f47f af7d 	bne.w	c6f2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    c7f8:	687b      	ldr	r3, [r7, #4]
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	d04a      	beq.n	c894 <cbprintf_package_convert+0x3a8>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c7fe:	2e0f      	cmp	r6, #15
    c800:	d93e      	bls.n	c880 <cbprintf_package_convert+0x394>
    c802:	4950      	ldr	r1, [pc, #320]	; (c944 <cbprintf_package_convert+0x458>)
    c804:	f44f 6389 	mov.w	r3, #1096	; 0x448
    c808:	4a4f      	ldr	r2, [pc, #316]	; (c948 <cbprintf_package_convert+0x45c>)
    c80a:	4850      	ldr	r0, [pc, #320]	; (c94c <cbprintf_package_convert+0x460>)
    c80c:	f01d ff65 	bl	2a6da <assert_print>
    c810:	f44f 6189 	mov.w	r1, #1096	; 0x448
    c814:	e67e      	b.n	c514 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    c816:	697b      	ldr	r3, [r7, #20]
    c818:	b12b      	cbz	r3, c826 <cbprintf_package_convert+0x33a>
    c81a:	6a38      	ldr	r0, [r7, #32]
    c81c:	f01d fce8 	bl	2a1f0 <is_ptr>
    c820:	2800      	cmp	r0, #0
    c822:	f47f af66 	bne.w	c6f2 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    c826:	f01a 0f01 	tst.w	sl, #1
    c82a:	d00b      	beq.n	c844 <cbprintf_package_convert+0x358>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
    c82c:	2e0f      	cmp	r6, #15
    c82e:	d927      	bls.n	c880 <cbprintf_package_convert+0x394>
    c830:	4944      	ldr	r1, [pc, #272]	; (c944 <cbprintf_package_convert+0x458>)
    c832:	f240 433e 	movw	r3, #1086	; 0x43e
    c836:	4a44      	ldr	r2, [pc, #272]	; (c948 <cbprintf_package_convert+0x45c>)
    c838:	4844      	ldr	r0, [pc, #272]	; (c94c <cbprintf_package_convert+0x460>)
    c83a:	f01d ff4e 	bl	2a6da <assert_print>
    c83e:	f240 413e 	movw	r1, #1086	; 0x43e
    c842:	e667      	b.n	c514 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    c844:	f01a 0f04 	tst.w	sl, #4
    c848:	f43f af53 	beq.w	c6f2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c84c:	f1b8 0f0f 	cmp.w	r8, #15
    c850:	d909      	bls.n	c866 <cbprintf_package_convert+0x37a>
    c852:	493f      	ldr	r1, [pc, #252]	; (c950 <cbprintf_package_convert+0x464>)
    c854:	f240 4341 	movw	r3, #1089	; 0x441
    c858:	4a3b      	ldr	r2, [pc, #236]	; (c948 <cbprintf_package_convert+0x45c>)
    c85a:	483c      	ldr	r0, [pc, #240]	; (c94c <cbprintf_package_convert+0x460>)
    c85c:	f01d ff3d 	bl	2a6da <assert_print>
    c860:	f240 4141 	movw	r1, #1089	; 0x441
    c864:	e656      	b.n	c514 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
    c866:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c86a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c86e:	f108 0101 	add.w	r1, r8, #1
    c872:	eb03 0802 	add.w	r8, r3, r2
    c876:	f808 5c10 	strb.w	r5, [r8, #-16]
    c87a:	fa5f f881 	uxtb.w	r8, r1
    c87e:	e738      	b.n	c6f2 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    c880:	f106 0328 	add.w	r3, r6, #40	; 0x28
    c884:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c888:	1c71      	adds	r1, r6, #1
    c88a:	189e      	adds	r6, r3, r2
    c88c:	f806 5c20 	strb.w	r5, [r6, #-32]
    c890:	b2ce      	uxtb	r6, r1
    c892:	e72e      	b.n	c6f2 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
    c894:	f1b8 0f0f 	cmp.w	r8, #15
    c898:	d909      	bls.n	c8ae <cbprintf_package_convert+0x3c2>
    c89a:	492d      	ldr	r1, [pc, #180]	; (c950 <cbprintf_package_convert+0x464>)
    c89c:	f240 434b 	movw	r3, #1099	; 0x44b
    c8a0:	4a29      	ldr	r2, [pc, #164]	; (c948 <cbprintf_package_convert+0x45c>)
    c8a2:	482a      	ldr	r0, [pc, #168]	; (c94c <cbprintf_package_convert+0x460>)
    c8a4:	f01d ff19 	bl	2a6da <assert_print>
    c8a8:	f240 414b 	movw	r1, #1099	; 0x44b
    c8ac:	e632      	b.n	c514 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
    c8ae:	f108 0328 	add.w	r3, r8, #40	; 0x28
    c8b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c8b6:	f108 0001 	add.w	r0, r8, #1
    c8ba:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
    c8be:	f107 0358 	add.w	r3, r7, #88	; 0x58
    c8c2:	f108 0802 	add.w	r8, r8, #2
    c8c6:	fa53 f080 	uxtab	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_idx;
    c8ca:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    c8ce:	fa5f f888 	uxtb.w	r8, r8
    c8d2:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    c8d6:	e70c      	b.n	c6f2 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    c8d8:	2000      	movs	r0, #0
    c8da:	e721      	b.n	c720 <cbprintf_package_convert+0x234>
		uint8_t loc = cpy_str_pos[i];
    c8dc:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    c8e0:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    c8e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t str_len = strl ? strl[i] : 0;
    c8e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c8ec:	b1fb      	cbz	r3, c92e <cbprintf_package_convert+0x442>
    c8ee:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    c8f2:	2101      	movs	r1, #1
    c8f4:	69fa      	ldr	r2, [r7, #28]
    c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8f8:	f107 0037 	add.w	r0, r7, #55	; 0x37
    c8fc:	4798      	blx	r3
		if (rv < 0) {
    c8fe:	2800      	cmp	r0, #0
    c900:	db1a      	blt.n	c938 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c902:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    c904:	f1b8 0f00 	cmp.w	r8, #0
    c908:	d106      	bne.n	c918 <cbprintf_package_convert+0x42c>
    c90a:	4648      	mov	r0, r9
    c90c:	f7fc fd3b 	bl	9386 <strlen>
    c910:	f100 0801 	add.w	r8, r0, #1
    c914:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    c918:	4641      	mov	r1, r8
    c91a:	4648      	mov	r0, r9
    c91c:	69fa      	ldr	r2, [r7, #28]
    c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c920:	4798      	blx	r3
		if (rv < 0) {
    c922:	2800      	cmp	r0, #0
    c924:	db08      	blt.n	c938 <cbprintf_package_convert+0x44c>
		out_len += rv;
    c926:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    c928:	f10b 0b01 	add.w	fp, fp, #1
    c92c:	e72b      	b.n	c786 <cbprintf_package_convert+0x29a>
		uint16_t str_len = strl ? strl[i] : 0;
    c92e:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
    c932:	e7de      	b.n	c8f2 <cbprintf_package_convert+0x406>
    c934:	4645      	mov	r5, r8
    c936:	e613      	b.n	c560 <cbprintf_package_convert+0x74>
    c938:	4605      	mov	r5, r0
    c93a:	e611      	b.n	c560 <cbprintf_package_convert+0x74>
    c93c:	00030e3c 	.word	0x00030e3c
    c940:	00038e80 	.word	0x00038e80
    c944:	00033168 	.word	0x00033168
    c948:	00033015 	.word	0x00033015
    c94c:	00032679 	.word	0x00032679
    c950:	00033187 	.word	0x00033187

0000c954 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    c954:	4b01      	ldr	r3, [pc, #4]	; (c95c <char_out+0x8>)
    c956:	681b      	ldr	r3, [r3, #0]
    c958:	4718      	bx	r3
    c95a:	bf00      	nop
    c95c:	200083f8 	.word	0x200083f8

0000c960 <__printk_hook_install>:
	_char_out = fn;
    c960:	4b01      	ldr	r3, [pc, #4]	; (c968 <__printk_hook_install+0x8>)
    c962:	6018      	str	r0, [r3, #0]
}
    c964:	4770      	bx	lr
    c966:	bf00      	nop
    c968:	200083f8 	.word	0x200083f8

0000c96c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    c96c:	b507      	push	{r0, r1, r2, lr}
    c96e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c970:	2100      	movs	r1, #0
    c972:	4602      	mov	r2, r0
    c974:	9100      	str	r1, [sp, #0]
    c976:	4803      	ldr	r0, [pc, #12]	; (c984 <vprintk+0x18>)
    c978:	f000 fcb0 	bl	d2dc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    c97c:	b003      	add	sp, #12
    c97e:	f85d fb04 	ldr.w	pc, [sp], #4
    c982:	bf00      	nop
    c984:	0000c955 	.word	0x0000c955

0000c988 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    c988:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    c98a:	2500      	movs	r5, #0
{
    c98c:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    c98e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    c992:	4604      	mov	r4, r0
    c994:	9500      	str	r5, [sp, #0]
    c996:	a903      	add	r1, sp, #12
    c998:	4805      	ldr	r0, [pc, #20]	; (c9b0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    c99a:	9505      	str	r5, [sp, #20]
    c99c:	f000 fc9e 	bl	d2dc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    c9a0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    c9a4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    c9a6:	bfb8      	it	lt
    c9a8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    c9aa:	b007      	add	sp, #28
    c9ac:	bd30      	pop	{r4, r5, pc}
    c9ae:	bf00      	nop
    c9b0:	0002a331 	.word	0x0002a331

0000c9b4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    c9b4:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    c9b6:	460c      	mov	r4, r1
    c9b8:	2900      	cmp	r1, #0
    c9ba:	d034      	beq.n	ca26 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    c9bc:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c9be:	1f0b      	subs	r3, r1, #4
    c9c0:	1a9b      	subs	r3, r3, r2
    c9c2:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c9c4:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c9c8:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c9ca:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    c9cc:	07e8      	lsls	r0, r5, #31
    c9ce:	d40d      	bmi.n	c9ec <sys_heap_free+0x38>
    c9d0:	23af      	movs	r3, #175	; 0xaf
    c9d2:	4a15      	ldr	r2, [pc, #84]	; (ca28 <sys_heap_free+0x74>)
    c9d4:	4915      	ldr	r1, [pc, #84]	; (ca2c <sys_heap_free+0x78>)
    c9d6:	4816      	ldr	r0, [pc, #88]	; (ca30 <sys_heap_free+0x7c>)
    c9d8:	f01d fe7f 	bl	2a6da <assert_print>
    c9dc:	4621      	mov	r1, r4
    c9de:	4815      	ldr	r0, [pc, #84]	; (ca34 <sys_heap_free+0x80>)
    c9e0:	f01d fe7b 	bl	2a6da <assert_print>
    c9e4:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    c9e6:	4810      	ldr	r0, [pc, #64]	; (ca28 <sys_heap_free+0x74>)
    c9e8:	f01d fe70 	bl	2a6cc <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c9ec:	4610      	mov	r0, r2
    c9ee:	f01d fcd6 	bl	2a39e <chunk_size>
    c9f2:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
    c9f4:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c9f8:	1b80      	subs	r0, r0, r6
    c9fa:	4281      	cmp	r1, r0
    c9fc:	d00b      	beq.n	ca16 <sys_heap_free+0x62>
    c9fe:	23b7      	movs	r3, #183	; 0xb7
    ca00:	4a09      	ldr	r2, [pc, #36]	; (ca28 <sys_heap_free+0x74>)
    ca02:	490d      	ldr	r1, [pc, #52]	; (ca38 <sys_heap_free+0x84>)
    ca04:	480a      	ldr	r0, [pc, #40]	; (ca30 <sys_heap_free+0x7c>)
    ca06:	f01d fe68 	bl	2a6da <assert_print>
    ca0a:	4621      	mov	r1, r4
    ca0c:	480b      	ldr	r0, [pc, #44]	; (ca3c <sys_heap_free+0x88>)
    ca0e:	f01d fe64 	bl	2a6da <assert_print>
    ca12:	21b7      	movs	r1, #183	; 0xb7
    ca14:	e7e7      	b.n	c9e6 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    ca16:	f025 0501 	bic.w	r5, r5, #1
    ca1a:	805d      	strh	r5, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
    ca1c:	4610      	mov	r0, r2
}
    ca1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    ca22:	f01d bd79 	b.w	2a518 <free_chunk>
}
    ca26:	bd70      	pop	{r4, r5, r6, pc}
    ca28:	000331b8 	.word	0x000331b8
    ca2c:	000331d9 	.word	0x000331d9
    ca30:	00032679 	.word	0x00032679
    ca34:	000331ea 	.word	0x000331ea
    ca38:	00033222 	.word	0x00033222
    ca3c:	00033248 	.word	0x00033248

0000ca40 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca44:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    ca46:	400b      	ands	r3, r1
{
    ca48:	460f      	mov	r7, r1
    ca4a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    ca4c:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    ca4e:	d010      	beq.n	ca72 <sys_heap_aligned_alloc+0x32>
	rew = align & -align;
    ca50:	f1c1 0900 	rsb	r9, r1, #0
    ca54:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    ca58:	464a      	mov	r2, r9
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca5a:	1e59      	subs	r1, r3, #1
		gap = MIN(rew, chunk_header_bytes(h));
    ca5c:	2a04      	cmp	r2, #4
    ca5e:	bf28      	it	cs
    ca60:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca62:	4219      	tst	r1, r3
    ca64:	d10c      	bne.n	ca80 <sys_heap_aligned_alloc+0x40>
    ca66:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    ca68:	b9e4      	cbnz	r4, caa4 <sys_heap_aligned_alloc+0x64>
		return NULL;
    ca6a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ca6c:	4628      	mov	r0, r5
    ca6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ca72:	2904      	cmp	r1, #4
    ca74:	d813      	bhi.n	ca9e <sys_heap_aligned_alloc+0x5e>
}
    ca76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ca7a:	4611      	mov	r1, r2
    ca7c:	f01d bd7d 	b.w	2a57a <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    ca80:	492c      	ldr	r1, [pc, #176]	; (cb34 <sys_heap_aligned_alloc+0xf4>)
    ca82:	f44f 73a2 	mov.w	r3, #324	; 0x144
    ca86:	4a2c      	ldr	r2, [pc, #176]	; (cb38 <sys_heap_aligned_alloc+0xf8>)
    ca88:	482c      	ldr	r0, [pc, #176]	; (cb3c <sys_heap_aligned_alloc+0xfc>)
    ca8a:	f01d fe26 	bl	2a6da <assert_print>
    ca8e:	482c      	ldr	r0, [pc, #176]	; (cb40 <sys_heap_aligned_alloc+0x100>)
    ca90:	f01d fe23 	bl	2a6da <assert_print>
    ca94:	f44f 71a2 	mov.w	r1, #324	; 0x144
    ca98:	4827      	ldr	r0, [pc, #156]	; (cb38 <sys_heap_aligned_alloc+0xf8>)
    ca9a:	f01d fe17 	bl	2a6cc <assert_post_action>
		rew = 0;
    ca9e:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
    caa0:	2204      	movs	r2, #4
    caa2:	e7e1      	b.n	ca68 <sys_heap_aligned_alloc+0x28>
	if (bytes == 0 || size_too_big(h, bytes)) {
    caa4:	68b3      	ldr	r3, [r6, #8]
    caa6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    caaa:	d9de      	bls.n	ca6a <sys_heap_aligned_alloc+0x2a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    caac:	f104 010b 	add.w	r1, r4, #11
    cab0:	4439      	add	r1, r7
    cab2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    cab4:	4630      	mov	r0, r6
    cab6:	08c9      	lsrs	r1, r1, #3
    cab8:	f01d fcc7 	bl	2a44a <alloc_chunk>
	if (c0 == 0) {
    cabc:	4680      	mov	r8, r0
    cabe:	2800      	cmp	r0, #0
    cac0:	d0d3      	beq.n	ca6a <sys_heap_aligned_alloc+0x2a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    cac2:	f109 0504 	add.w	r5, r9, #4
    cac6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    caca:	1e7b      	subs	r3, r7, #1
    cacc:	4435      	add	r5, r6
    cace:	441d      	add	r5, r3
    cad0:	427f      	negs	r7, r7
    cad2:	403d      	ands	r5, r7
    cad4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cad8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cada:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cadc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    cade:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    cae0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    cae4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    cae6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    caea:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    caee:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    caf2:	d208      	bcs.n	cb06 <sys_heap_aligned_alloc+0xc6>
		split_chunks(h, c0, c);
    caf4:	4601      	mov	r1, r0
    caf6:	463a      	mov	r2, r7
    caf8:	4630      	mov	r0, r6
    cafa:	f01d fcf3 	bl	2a4e4 <split_chunks>
		free_list_add(h, c0);
    cafe:	4641      	mov	r1, r8
    cb00:	4630      	mov	r0, r6
    cb02:	f01d fc51 	bl	2a3a8 <free_list_add>
	return c + chunk_size(h, c);
    cb06:	4639      	mov	r1, r7
    cb08:	4630      	mov	r0, r6
    cb0a:	f01d fc48 	bl	2a39e <chunk_size>
    cb0e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    cb10:	4284      	cmp	r4, r0
    cb12:	d207      	bcs.n	cb24 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
    cb14:	4630      	mov	r0, r6
    cb16:	4622      	mov	r2, r4
    cb18:	f01d fce4 	bl	2a4e4 <split_chunks>
		free_list_add(h, c_end);
    cb1c:	4621      	mov	r1, r4
    cb1e:	4630      	mov	r0, r6
    cb20:	f01d fc42 	bl	2a3a8 <free_list_add>
	void *cmem = &buf[c];
    cb24:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb28:	8873      	ldrh	r3, [r6, #2]
    cb2a:	f043 0301 	orr.w	r3, r3, #1
    cb2e:	8073      	strh	r3, [r6, #2]
    cb30:	e79c      	b.n	ca6c <sys_heap_aligned_alloc+0x2c>
    cb32:	bf00      	nop
    cb34:	00033284 	.word	0x00033284
    cb38:	000331b8 	.word	0x000331b8
    cb3c:	00032679 	.word	0x00032679
    cb40:	0003329f 	.word	0x0003329f

0000cb44 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cb44:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb4a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    cb4c:	d30e      	bcc.n	cb6c <sys_heap_init+0x28>
    cb4e:	493a      	ldr	r1, [pc, #232]	; (cc38 <sys_heap_init+0xf4>)
    cb50:	f240 13eb 	movw	r3, #491	; 0x1eb
    cb54:	4a39      	ldr	r2, [pc, #228]	; (cc3c <sys_heap_init+0xf8>)
    cb56:	483a      	ldr	r0, [pc, #232]	; (cc40 <sys_heap_init+0xfc>)
    cb58:	f01d fdbf 	bl	2a6da <assert_print>
    cb5c:	4839      	ldr	r0, [pc, #228]	; (cc44 <sys_heap_init+0x100>)
    cb5e:	f01d fdbc 	bl	2a6da <assert_print>
    cb62:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    cb66:	4835      	ldr	r0, [pc, #212]	; (cc3c <sys_heap_init+0xf8>)
    cb68:	f01d fdb0 	bl	2a6cc <assert_post_action>
    cb6c:	2a04      	cmp	r2, #4
    cb6e:	d80c      	bhi.n	cb8a <sys_heap_init+0x46>
    cb70:	4935      	ldr	r1, [pc, #212]	; (cc48 <sys_heap_init+0x104>)
    cb72:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    cb76:	4a31      	ldr	r2, [pc, #196]	; (cc3c <sys_heap_init+0xf8>)
    cb78:	4831      	ldr	r0, [pc, #196]	; (cc40 <sys_heap_init+0xfc>)
    cb7a:	f01d fdae 	bl	2a6da <assert_print>
    cb7e:	4833      	ldr	r0, [pc, #204]	; (cc4c <sys_heap_init+0x108>)
    cb80:	f01d fdab 	bl	2a6da <assert_print>
    cb84:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    cb88:	e7ed      	b.n	cb66 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
    cb8a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb8c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb8e:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cb90:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cb94:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb98:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cb9a:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    cb9c:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    cba0:	d80c      	bhi.n	cbbc <sys_heap_init+0x78>
    cba2:	492b      	ldr	r1, [pc, #172]	; (cc50 <sys_heap_init+0x10c>)
    cba4:	f240 13fb 	movw	r3, #507	; 0x1fb
    cba8:	4a24      	ldr	r2, [pc, #144]	; (cc3c <sys_heap_init+0xf8>)
    cbaa:	4825      	ldr	r0, [pc, #148]	; (cc40 <sys_heap_init+0xfc>)
    cbac:	f01d fd95 	bl	2a6da <assert_print>
    cbb0:	4826      	ldr	r0, [pc, #152]	; (cc4c <sys_heap_init+0x108>)
    cbb2:	f01d fd92 	bl	2a6da <assert_print>
    cbb6:	f240 11fb 	movw	r1, #507	; 0x1fb
    cbba:	e7d4      	b.n	cb66 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    cbbc:	fab3 f183 	clz	r1, r3

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    cbc0:	6020      	str	r0, [r4, #0]
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    cbc2:	2400      	movs	r4, #0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cbc4:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cbc8:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
    cbcc:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cbce:	3107      	adds	r1, #7
    cbd0:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cbd2:	1c4d      	adds	r5, r1, #1
    cbd4:	429d      	cmp	r5, r3
	h->end_chunk = heap_sz;
    cbd6:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
    cbd8:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    cbda:	d90c      	bls.n	cbf6 <sys_heap_init+0xb2>
    cbdc:	491d      	ldr	r1, [pc, #116]	; (cc54 <sys_heap_init+0x110>)
    cbde:	f44f 7303 	mov.w	r3, #524	; 0x20c
    cbe2:	4a16      	ldr	r2, [pc, #88]	; (cc3c <sys_heap_init+0xf8>)
    cbe4:	4816      	ldr	r0, [pc, #88]	; (cc40 <sys_heap_init+0xfc>)
    cbe6:	f01d fd78 	bl	2a6da <assert_print>
    cbea:	4818      	ldr	r0, [pc, #96]	; (cc4c <sys_heap_init+0x108>)
    cbec:	f01d fd75 	bl	2a6da <assert_print>
    cbf0:	f44f 7103 	mov.w	r1, #524	; 0x20c
    cbf4:	e7b7      	b.n	cb66 <sys_heap_init+0x22>
    cbf6:	f100 050c 	add.w	r5, r0, #12
    cbfa:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    cbfe:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cc02:	42b5      	cmp	r5, r6
    cc04:	d1fb      	bne.n	cbfe <sys_heap_init+0xba>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cc06:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cc08:	f045 0501 	orr.w	r5, r5, #1
    cc0c:	8045      	strh	r5, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cc0e:	1a5d      	subs	r5, r3, r1
		((uint16_t *)cmem)[f] = val;
    cc10:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cc14:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
    cc16:	8004      	strh	r4, [r0, #0]
    cc18:	8077      	strh	r7, [r6, #2]
    cc1a:	1886      	adds	r6, r0, r2
    cc1c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cc20:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cc24:	8074      	strh	r4, [r6, #2]
    cc26:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cc28:	885a      	ldrh	r2, [r3, #2]
    cc2a:	f042 0201 	orr.w	r2, r2, #1
    cc2e:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cc30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    cc34:	f01d bbb8 	b.w	2a3a8 <free_list_add>
    cc38:	000332bc 	.word	0x000332bc
    cc3c:	000331b8 	.word	0x000331b8
    cc40:	00032679 	.word	0x00032679
    cc44:	000332d2 	.word	0x000332d2
    cc48:	000332e9 	.word	0x000332e9
    cc4c:	0003330a 	.word	0x0003330a
    cc50:	00033323 	.word	0x00033323
    cc54:	0003334c 	.word	0x0003334c

0000cc58 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    cc58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc5c:	4604      	mov	r4, r0
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc5e:	8ba3      	ldrh	r3, [r4, #28]
{
    cc60:	4608      	mov	r0, r1
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    cc62:	0719      	lsls	r1, r3, #28
{
    cc64:	4615      	mov	r5, r2
	if (processing) {
    cc66:	d412      	bmi.n	cc8e <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    cc68:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cc6a:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
    cc6e:	d164      	bne.n	cd3a <process_event+0xe2>
			evt = process_recheck(mgr);
    cc70:	4620      	mov	r0, r4
    cc72:	f01d fcab 	bl	2a5cc <process_recheck>
		}

		if (evt == EVT_NOP) {
    cc76:	b188      	cbz	r0, cc9c <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    cc78:	3801      	subs	r0, #1
    cc7a:	2804      	cmp	r0, #4
    cc7c:	f200 8134 	bhi.w	cee8 <process_event+0x290>
    cc80:	e8df f010 	tbh	[pc, r0, lsl #1]
    cc84:	0132005b 	.word	0x0132005b
    cc88:	00d10081 	.word	0x00d10081
    cc8c:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
    cc8e:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    cc90:	bf0c      	ite	eq
    cc92:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cc96:	f043 0120 	orrne.w	r1, r3, #32
    cc9a:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    cc9c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc9e:	4620      	mov	r0, r4
    cca0:	f018 f9f8 	bl	25094 <z_spin_unlock_valid>
    cca4:	2800      	cmp	r0, #0
    cca6:	f040 819b 	bne.w	cfe0 <process_event+0x388>
    ccaa:	4998      	ldr	r1, [pc, #608]	; (cf0c <process_event+0x2b4>)
    ccac:	23c2      	movs	r3, #194	; 0xc2
    ccae:	4a98      	ldr	r2, [pc, #608]	; (cf10 <process_event+0x2b8>)
    ccb0:	4898      	ldr	r0, [pc, #608]	; (cf14 <process_event+0x2bc>)
    ccb2:	f01d fd12 	bl	2a6da <assert_print>
    ccb6:	4621      	mov	r1, r4
    ccb8:	e0b0      	b.n	ce1c <process_event+0x1c4>
    ccba:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ccbe:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ccc0:	2801      	cmp	r0, #1
    ccc2:	d81e      	bhi.n	cd02 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    ccc4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
    ccc6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    ccc8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    ccca:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ccce:	d114      	bne.n	ccfa <process_event+0xa2>
		*clients = mgr->clients;
    ccd0:	463a      	mov	r2, r7
    ccd2:	e003      	b.n	ccdc <process_event+0x84>
				mgr->refs += 1U;
    ccd4:	8be0      	ldrh	r0, [r4, #30]
    ccd6:	3001      	adds	r0, #1
    ccd8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    ccda:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ccdc:	2a00      	cmp	r2, #0
    ccde:	d1f9      	bne.n	ccd4 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cce0:	f023 0307 	bic.w	r3, r3, #7
    cce4:	f043 0202 	orr.w	r2, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    cce8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ccea:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    ccec:	f01d fc6e 	bl	2a5cc <process_recheck>
    ccf0:	b390      	cbz	r0, cd58 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ccf2:	f042 0220 	orr.w	r2, r2, #32
    ccf6:	83a2      	strh	r2, [r4, #28]
    ccf8:	e02e      	b.n	cd58 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ccfa:	f023 0307 	bic.w	r3, r3, #7
    ccfe:	b29a      	uxth	r2, r3
}
    cd00:	e7f2      	b.n	cce8 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
    cd02:	2a04      	cmp	r2, #4
    cd04:	d133      	bne.n	cd6e <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd06:	f023 0307 	bic.w	r3, r3, #7
    cd0a:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    cd0c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd0e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    cd10:	f01d fc5c 	bl	2a5cc <process_recheck>
    cd14:	b110      	cbz	r0, cd1c <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    cd16:	f042 0220 	orr.w	r2, r2, #32
    cd1a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd1c:	8ba3      	ldrh	r3, [r4, #28]
    cd1e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cd22:	4589      	cmp	r9, r1
    cd24:	f040 80ea 	bne.w	cefc <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    cd28:	8ba1      	ldrh	r1, [r4, #28]
    cd2a:	06ca      	lsls	r2, r1, #27
    cd2c:	f140 814f 	bpl.w	cfce <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cd30:	f021 0310 	bic.w	r3, r1, #16
    cd34:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cd36:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
    cd3a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd3e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    cd40:	f1b8 0f00 	cmp.w	r8, #0
    cd44:	dab9      	bge.n	ccba <process_event+0x62>
	list->head = NULL;
    cd46:	2200      	movs	r2, #0
		*clients = mgr->clients;
    cd48:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cd4a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    cd4e:	e9c4 2200 	strd	r2, r2, [r4]
    cd52:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    cd56:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd58:	8ba3      	ldrh	r3, [r4, #28]
    cd5a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    cd5e:	4589      	cmp	r9, r1
    cd60:	f040 80cd 	bne.w	cefe <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
    cd64:	2f00      	cmp	r7, #0
    cd66:	d0df      	beq.n	cd28 <process_event+0xd0>
    cd68:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cd6a:	46b2      	mov	sl, r6
    cd6c:	e044      	b.n	cdf8 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
    cd6e:	496a      	ldr	r1, [pc, #424]	; (cf18 <process_event+0x2c0>)
    cd70:	f240 131b 	movw	r3, #283	; 0x11b
    cd74:	4a69      	ldr	r2, [pc, #420]	; (cf1c <process_event+0x2c4>)
    cd76:	4867      	ldr	r0, [pc, #412]	; (cf14 <process_event+0x2bc>)
    cd78:	f01d fcaf 	bl	2a6da <assert_print>
    cd7c:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    cd80:	4866      	ldr	r0, [pc, #408]	; (cf1c <process_event+0x2c4>)
    cd82:	f01d fca3 	bl	2a6cc <assert_post_action>
    cd86:	b149      	cbz	r1, cd9c <process_event+0x144>
    cd88:	4965      	ldr	r1, [pc, #404]	; (cf20 <process_event+0x2c8>)
    cd8a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    cd8e:	4a63      	ldr	r2, [pc, #396]	; (cf1c <process_event+0x2c4>)
    cd90:	4860      	ldr	r0, [pc, #384]	; (cf14 <process_event+0x2bc>)
    cd92:	f01d fca2 	bl	2a6da <assert_print>
    cd96:	f44f 71ab 	mov.w	r1, #342	; 0x156
    cd9a:	e7f1      	b.n	cd80 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    cd9c:	6823      	ldr	r3, [r4, #0]
    cd9e:	b94b      	cbnz	r3, cdb4 <process_event+0x15c>
    cda0:	4960      	ldr	r1, [pc, #384]	; (cf24 <process_event+0x2cc>)
    cda2:	f240 1357 	movw	r3, #343	; 0x157
    cda6:	4a5d      	ldr	r2, [pc, #372]	; (cf1c <process_event+0x2c4>)
    cda8:	485a      	ldr	r0, [pc, #360]	; (cf14 <process_event+0x2bc>)
    cdaa:	f01d fc96 	bl	2a6da <assert_print>
    cdae:	f240 1157 	movw	r1, #343	; 0x157
    cdb2:	e7e5      	b.n	cd80 <process_event+0x128>
			transit = mgr->transitions->start;
    cdb4:	6923      	ldr	r3, [r4, #16]
    cdb6:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    cdb8:	b94e      	cbnz	r6, cdce <process_event+0x176>
    cdba:	495b      	ldr	r1, [pc, #364]	; (cf28 <process_event+0x2d0>)
    cdbc:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    cdc0:	4a56      	ldr	r2, [pc, #344]	; (cf1c <process_event+0x2c4>)
    cdc2:	4854      	ldr	r0, [pc, #336]	; (cf14 <process_event+0x2bc>)
    cdc4:	f01d fc89 	bl	2a6da <assert_print>
    cdc8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    cdcc:	e7d8      	b.n	cd80 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    cdce:	460f      	mov	r7, r1
		res = 0;
    cdd0:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdd2:	f04f 0906 	mov.w	r9, #6
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    cdd6:	8ba3      	ldrh	r3, [r4, #28]
    cdd8:	f023 0307 	bic.w	r3, r3, #7
    cddc:	f043 0306 	orr.w	r3, r3, #6
    cde0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    cde2:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    cde4:	68a2      	ldr	r2, [r4, #8]
    cde6:	2a00      	cmp	r2, #0
    cde8:	f040 808b 	bne.w	cf02 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
    cdec:	2f00      	cmp	r7, #0
    cdee:	f040 808b 	bne.w	cf08 <process_event+0x2b0>
		    || (transit != NULL)) {
    cdf2:	2e00      	cmp	r6, #0
    cdf4:	d098      	beq.n	cd28 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cdf6:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    cdf8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    cdfc:	f104 0b14 	add.w	fp, r4, #20
    ce00:	4658      	mov	r0, fp
			mgr->flags = flags;
    ce02:	83a3      	strh	r3, [r4, #28]
    ce04:	f018 f946 	bl	25094 <z_spin_unlock_valid>
    ce08:	2800      	cmp	r0, #0
    ce0a:	f040 8097 	bne.w	cf3c <process_event+0x2e4>
    ce0e:	493f      	ldr	r1, [pc, #252]	; (cf0c <process_event+0x2b4>)
    ce10:	23c2      	movs	r3, #194	; 0xc2
    ce12:	4a3f      	ldr	r2, [pc, #252]	; (cf10 <process_event+0x2b8>)
    ce14:	483f      	ldr	r0, [pc, #252]	; (cf14 <process_event+0x2bc>)
    ce16:	f01d fc60 	bl	2a6da <assert_print>
    ce1a:	4659      	mov	r1, fp
    ce1c:	4843      	ldr	r0, [pc, #268]	; (cf2c <process_event+0x2d4>)
    ce1e:	f01d fc5c 	bl	2a6da <assert_print>
    ce22:	21c2      	movs	r1, #194	; 0xc2
    ce24:	e0ae      	b.n	cf84 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    ce26:	2902      	cmp	r1, #2
    ce28:	d009      	beq.n	ce3e <process_event+0x1e6>
    ce2a:	4941      	ldr	r1, [pc, #260]	; (cf30 <process_event+0x2d8>)
    ce2c:	f240 135d 	movw	r3, #349	; 0x15d
    ce30:	4a3a      	ldr	r2, [pc, #232]	; (cf1c <process_event+0x2c4>)
    ce32:	4838      	ldr	r0, [pc, #224]	; (cf14 <process_event+0x2bc>)
    ce34:	f01d fc51 	bl	2a6da <assert_print>
    ce38:	f240 115d 	movw	r1, #349	; 0x15d
    ce3c:	e7a0      	b.n	cd80 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ce3e:	8be7      	ldrh	r7, [r4, #30]
    ce40:	b14f      	cbz	r7, ce56 <process_event+0x1fe>
    ce42:	493c      	ldr	r1, [pc, #240]	; (cf34 <process_event+0x2dc>)
    ce44:	f44f 73af 	mov.w	r3, #350	; 0x15e
    ce48:	4a34      	ldr	r2, [pc, #208]	; (cf1c <process_event+0x2c4>)
    ce4a:	4832      	ldr	r0, [pc, #200]	; (cf14 <process_event+0x2bc>)
    ce4c:	f01d fc45 	bl	2a6da <assert_print>
    ce50:	f44f 71af 	mov.w	r1, #350	; 0x15e
    ce54:	e794      	b.n	cd80 <process_event+0x128>
			transit = mgr->transitions->stop;
    ce56:	6923      	ldr	r3, [r4, #16]
    ce58:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ce5a:	b94e      	cbnz	r6, ce70 <process_event+0x218>
    ce5c:	4932      	ldr	r1, [pc, #200]	; (cf28 <process_event+0x2d0>)
    ce5e:	f240 1361 	movw	r3, #353	; 0x161
    ce62:	4a2e      	ldr	r2, [pc, #184]	; (cf1c <process_event+0x2c4>)
    ce64:	482b      	ldr	r0, [pc, #172]	; (cf14 <process_event+0x2bc>)
    ce66:	f01d fc38 	bl	2a6da <assert_print>
    ce6a:	f240 1161 	movw	r1, #353	; 0x161
    ce6e:	e787      	b.n	cd80 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce70:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ce72:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ce74:	f023 0307 	bic.w	r3, r3, #7
    ce78:	f043 0304 	orr.w	r3, r3, #4
    ce7c:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce7e:	f04f 0904 	mov.w	r9, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    ce82:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ce84:	e7ae      	b.n	cde4 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ce86:	2901      	cmp	r1, #1
    ce88:	d009      	beq.n	ce9e <process_event+0x246>
    ce8a:	492b      	ldr	r1, [pc, #172]	; (cf38 <process_event+0x2e0>)
    ce8c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    ce90:	4a22      	ldr	r2, [pc, #136]	; (cf1c <process_event+0x2c4>)
    ce92:	4820      	ldr	r0, [pc, #128]	; (cf14 <process_event+0x2bc>)
    ce94:	f01d fc21 	bl	2a6da <assert_print>
    ce98:	f44f 71b2 	mov.w	r1, #356	; 0x164
    ce9c:	e770      	b.n	cd80 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ce9e:	6823      	ldr	r3, [r4, #0]
    cea0:	b94b      	cbnz	r3, ceb6 <process_event+0x25e>
    cea2:	4920      	ldr	r1, [pc, #128]	; (cf24 <process_event+0x2cc>)
    cea4:	f240 1365 	movw	r3, #357	; 0x165
    cea8:	4a1c      	ldr	r2, [pc, #112]	; (cf1c <process_event+0x2c4>)
    ceaa:	481a      	ldr	r0, [pc, #104]	; (cf14 <process_event+0x2bc>)
    ceac:	f01d fc15 	bl	2a6da <assert_print>
    ceb0:	f240 1165 	movw	r1, #357	; 0x165
    ceb4:	e764      	b.n	cd80 <process_event+0x128>
			transit = mgr->transitions->reset;
    ceb6:	6923      	ldr	r3, [r4, #16]
    ceb8:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ceba:	b94e      	cbnz	r6, ced0 <process_event+0x278>
    cebc:	491a      	ldr	r1, [pc, #104]	; (cf28 <process_event+0x2d0>)
    cebe:	f44f 73b4 	mov.w	r3, #360	; 0x168
    cec2:	4a16      	ldr	r2, [pc, #88]	; (cf1c <process_event+0x2c4>)
    cec4:	4813      	ldr	r0, [pc, #76]	; (cf14 <process_event+0x2bc>)
    cec6:	f01d fc08 	bl	2a6da <assert_print>
    ceca:	f44f 71b4 	mov.w	r1, #360	; 0x168
    cece:	e757      	b.n	cd80 <process_event+0x128>
	mgr->flags = (state & ONOFF_STATE_MASK)
    ced0:	2700      	movs	r7, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ced2:	8ba3      	ldrh	r3, [r4, #28]
		res = 0;
    ced4:	46b8      	mov	r8, r7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ced6:	f023 0307 	bic.w	r3, r3, #7
    ceda:	f043 0305 	orr.w	r3, r3, #5
    cede:	b29b      	uxth	r3, r3
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cee0:	f04f 0905 	mov.w	r9, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    cee4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cee6:	e77d      	b.n	cde4 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    cee8:	490b      	ldr	r1, [pc, #44]	; (cf18 <process_event+0x2c0>)
    ceea:	f240 136b 	movw	r3, #363	; 0x16b
    ceee:	4a0b      	ldr	r2, [pc, #44]	; (cf1c <process_event+0x2c4>)
    cef0:	4808      	ldr	r0, [pc, #32]	; (cf14 <process_event+0x2bc>)
    cef2:	f01d fbf2 	bl	2a6da <assert_print>
    cef6:	f240 116b 	movw	r1, #363	; 0x16b
    cefa:	e741      	b.n	cd80 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
    cefc:	2700      	movs	r7, #0
    cefe:	2600      	movs	r6, #0
    cf00:	e770      	b.n	cde4 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    cf02:	f04f 0a01 	mov.w	sl, #1
    cf06:	e777      	b.n	cdf8 <process_event+0x1a0>
    cf08:	4692      	mov	sl, r2
    cf0a:	e775      	b.n	cdf8 <process_event+0x1a0>
    cf0c:	00033447 	.word	0x00033447
    cf10:	0003341a 	.word	0x0003341a
    cf14:	00032679 	.word	0x00032679
    cf18:	00037b56 	.word	0x00037b56
    cf1c:	00033377 	.word	0x00033377
    cf20:	00033399 	.word	0x00033399
    cf24:	000333a5 	.word	0x000333a5
    cf28:	000333c8 	.word	0x000333c8
    cf2c:	0003345e 	.word	0x0003345e
    cf30:	000333df 	.word	0x000333df
    cf34:	000333f5 	.word	0x000333f5
    cf38:	00033404 	.word	0x00033404
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    cf3c:	f385 8811 	msr	BASEPRI, r5
    cf40:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    cf44:	f1ba 0f00 	cmp.w	sl, #0
    cf48:	d11e      	bne.n	cf88 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
    cf4a:	2f00      	cmp	r7, #0
    cf4c:	d12f      	bne.n	cfae <process_event+0x356>
			if (transit != NULL) {
    cf4e:	b116      	cbz	r6, cf56 <process_event+0x2fe>
				transit(mgr, transition_complete);
    cf50:	4620      	mov	r0, r4
    cf52:	4926      	ldr	r1, [pc, #152]	; (cfec <process_event+0x394>)
    cf54:	47b0      	blx	r6
	__asm__ volatile(
    cf56:	f04f 0320 	mov.w	r3, #32
    cf5a:	f3ef 8511 	mrs	r5, BASEPRI
    cf5e:	f383 8812 	msr	BASEPRI_MAX, r3
    cf62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf66:	4658      	mov	r0, fp
    cf68:	f018 f886 	bl	25078 <z_spin_lock_valid>
    cf6c:	bb38      	cbnz	r0, cfbe <process_event+0x366>
    cf6e:	2394      	movs	r3, #148	; 0x94
    cf70:	4a1f      	ldr	r2, [pc, #124]	; (cff0 <process_event+0x398>)
    cf72:	4920      	ldr	r1, [pc, #128]	; (cff4 <process_event+0x39c>)
    cf74:	4820      	ldr	r0, [pc, #128]	; (cff8 <process_event+0x3a0>)
    cf76:	f01d fbb0 	bl	2a6da <assert_print>
    cf7a:	4659      	mov	r1, fp
    cf7c:	481f      	ldr	r0, [pc, #124]	; (cffc <process_event+0x3a4>)
    cf7e:	f01d fbac 	bl	2a6da <assert_print>
    cf82:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf84:	481a      	ldr	r0, [pc, #104]	; (cff0 <process_event+0x398>)
    cf86:	e6fc      	b.n	cd82 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    cf88:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cf8a:	2900      	cmp	r1, #0
    cf8c:	d0dd      	beq.n	cf4a <process_event+0x2f2>
	return node->next;
    cf8e:	680d      	ldr	r5, [r1, #0]
    cf90:	2900      	cmp	r1, #0
    cf92:	d0da      	beq.n	cf4a <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
    cf94:	4643      	mov	r3, r8
    cf96:	464a      	mov	r2, r9
    cf98:	4620      	mov	r0, r4
    cf9a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    cf9e:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    cfa0:	b11d      	cbz	r5, cfaa <process_event+0x352>
    cfa2:	682b      	ldr	r3, [r5, #0]
    cfa4:	4629      	mov	r1, r5
    cfa6:	461d      	mov	r5, r3
    cfa8:	e7f2      	b.n	cf90 <process_event+0x338>
    cfaa:	462b      	mov	r3, r5
    cfac:	e7fa      	b.n	cfa4 <process_event+0x34c>
    cfae:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
    cfb0:	4643      	mov	r3, r8
    cfb2:	464a      	mov	r2, r9
    cfb4:	4620      	mov	r0, r4
    cfb6:	683f      	ldr	r7, [r7, #0]
    cfb8:	f01d fb34 	bl	2a624 <notify_one>
    cfbc:	e7c5      	b.n	cf4a <process_event+0x2f2>
	z_spin_lock_set_owner(l);
    cfbe:	4658      	mov	r0, fp
    cfc0:	f018 f876 	bl	250b0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    cfc4:	8ba3      	ldrh	r3, [r4, #28]
    cfc6:	f023 0308 	bic.w	r3, r3, #8
    cfca:	83a3      	strh	r3, [r4, #28]
    cfcc:	e6ac      	b.n	cd28 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    cfce:	068b      	lsls	r3, r1, #26
    cfd0:	f57f ae64 	bpl.w	cc9c <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    cfd4:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    cfd8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    cfda:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
    cfde:	e647      	b.n	cc70 <process_event+0x18>
	__asm__ volatile(
    cfe0:	f385 8811 	msr	BASEPRI, r5
    cfe4:	f3bf 8f6f 	isb	sy
}
    cfe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfec:	0000d001 	.word	0x0000d001
    cff0:	0003341a 	.word	0x0003341a
    cff4:	00033473 	.word	0x00033473
    cff8:	00032679 	.word	0x00032679
    cffc:	00033488 	.word	0x00033488

0000d000 <transition_complete>:
{
    d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d002:	4604      	mov	r4, r0
    d004:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d006:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    d00a:	f04f 0320 	mov.w	r3, #32
    d00e:	f3ef 8711 	mrs	r7, BASEPRI
    d012:	f383 8812 	msr	BASEPRI_MAX, r3
    d016:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d01a:	4630      	mov	r0, r6
    d01c:	f018 f82c 	bl	25078 <z_spin_lock_valid>
    d020:	b968      	cbnz	r0, d03e <transition_complete+0x3e>
    d022:	2394      	movs	r3, #148	; 0x94
    d024:	4a0b      	ldr	r2, [pc, #44]	; (d054 <transition_complete+0x54>)
    d026:	490c      	ldr	r1, [pc, #48]	; (d058 <transition_complete+0x58>)
    d028:	480c      	ldr	r0, [pc, #48]	; (d05c <transition_complete+0x5c>)
    d02a:	f01d fb56 	bl	2a6da <assert_print>
    d02e:	4631      	mov	r1, r6
    d030:	480b      	ldr	r0, [pc, #44]	; (d060 <transition_complete+0x60>)
    d032:	f01d fb52 	bl	2a6da <assert_print>
    d036:	2194      	movs	r1, #148	; 0x94
    d038:	4806      	ldr	r0, [pc, #24]	; (d054 <transition_complete+0x54>)
    d03a:	f01d fb47 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
    d03e:	4630      	mov	r0, r6
    d040:	f018 f836 	bl	250b0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    d044:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d046:	463a      	mov	r2, r7
    d048:	4620      	mov	r0, r4
}
    d04a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d04e:	2101      	movs	r1, #1
    d050:	f7ff be02 	b.w	cc58 <process_event>
    d054:	0003341a 	.word	0x0003341a
    d058:	00033473 	.word	0x00033473
    d05c:	00032679 	.word	0x00032679
    d060:	00033488 	.word	0x00033488

0000d064 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d068:	4604      	mov	r4, r0
    d06a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d06c:	f01d faca 	bl	2a604 <validate_args>

	if (rv < 0) {
    d070:	1e05      	subs	r5, r0, #0
    d072:	db67      	blt.n	d144 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d074:	f104 0914 	add.w	r9, r4, #20
    d078:	f04f 0320 	mov.w	r3, #32
    d07c:	f3ef 8a11 	mrs	sl, BASEPRI
    d080:	f383 8812 	msr	BASEPRI_MAX, r3
    d084:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d088:	4648      	mov	r0, r9
    d08a:	f017 fff5 	bl	25078 <z_spin_lock_valid>
    d08e:	4680      	mov	r8, r0
    d090:	b960      	cbnz	r0, d0ac <onoff_request+0x48>
    d092:	2394      	movs	r3, #148	; 0x94
    d094:	4a37      	ldr	r2, [pc, #220]	; (d174 <onoff_request+0x110>)
    d096:	4938      	ldr	r1, [pc, #224]	; (d178 <onoff_request+0x114>)
    d098:	4838      	ldr	r0, [pc, #224]	; (d17c <onoff_request+0x118>)
    d09a:	f01d fb1e 	bl	2a6da <assert_print>
    d09e:	4649      	mov	r1, r9
    d0a0:	4837      	ldr	r0, [pc, #220]	; (d180 <onoff_request+0x11c>)
    d0a2:	f01d fb1a 	bl	2a6da <assert_print>
    d0a6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d0a8:	4832      	ldr	r0, [pc, #200]	; (d174 <onoff_request+0x110>)
    d0aa:	e040      	b.n	d12e <onoff_request+0xca>
	z_spin_lock_set_owner(l);
    d0ac:	4648      	mov	r0, r9
    d0ae:	f017 ffff 	bl	250b0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d0b6:	8be3      	ldrh	r3, [r4, #30]
    d0b8:	8ba6      	ldrh	r6, [r4, #28]
    d0ba:	4293      	cmp	r3, r2
    d0bc:	f006 0607 	and.w	r6, r6, #7
    d0c0:	d043      	beq.n	d14a <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d0c2:	2e02      	cmp	r6, #2
    d0c4:	d113      	bne.n	d0ee <onoff_request+0x8a>
	rv = state;
    d0c6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    d0c8:	3301      	adds	r3, #1
    d0ca:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d0cc:	4648      	mov	r0, r9
    d0ce:	f017 ffe1 	bl	25094 <z_spin_unlock_valid>
    d0d2:	2800      	cmp	r0, #0
    d0d4:	d13f      	bne.n	d156 <onoff_request+0xf2>
    d0d6:	23c2      	movs	r3, #194	; 0xc2
    d0d8:	4a26      	ldr	r2, [pc, #152]	; (d174 <onoff_request+0x110>)
    d0da:	492a      	ldr	r1, [pc, #168]	; (d184 <onoff_request+0x120>)
    d0dc:	4827      	ldr	r0, [pc, #156]	; (d17c <onoff_request+0x118>)
    d0de:	f01d fafc 	bl	2a6da <assert_print>
    d0e2:	4649      	mov	r1, r9
    d0e4:	4828      	ldr	r0, [pc, #160]	; (d188 <onoff_request+0x124>)
    d0e6:	f01d faf8 	bl	2a6da <assert_print>
    d0ea:	21c2      	movs	r1, #194	; 0xc2
    d0ec:	e7dc      	b.n	d0a8 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
    d0ee:	2e06      	cmp	r6, #6
    d0f0:	d813      	bhi.n	d11a <onoff_request+0xb6>
    d0f2:	e8df f006 	tbb	[pc, r6]
    d0f6:	2d09      	.short	0x2d09
    d0f8:	04091212 	.word	0x04091212
    d0fc:	09          	.byte	0x09
    d0fd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
    d0fe:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d102:	f04f 0800 	mov.w	r8, #0
    d106:	e7e1      	b.n	d0cc <onoff_request+0x68>
	parent->next = child;
    d108:	2300      	movs	r3, #0
    d10a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    d10c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    d10e:	b983      	cbnz	r3, d132 <onoff_request+0xce>
	list->head = node;
    d110:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    d114:	b186      	cbz	r6, d138 <onoff_request+0xd4>
	rv = state;
    d116:	4635      	mov	r5, r6
    d118:	e7f3      	b.n	d102 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d11a:	491c      	ldr	r1, [pc, #112]	; (d18c <onoff_request+0x128>)
    d11c:	4817      	ldr	r0, [pc, #92]	; (d17c <onoff_request+0x118>)
    d11e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    d122:	4a1b      	ldr	r2, [pc, #108]	; (d190 <onoff_request+0x12c>)
    d124:	f01d fad9 	bl	2a6da <assert_print>
    d128:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    d12c:	4818      	ldr	r0, [pc, #96]	; (d190 <onoff_request+0x12c>)
    d12e:	f01d facd 	bl	2a6cc <assert_post_action>
	parent->next = child;
    d132:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d134:	6067      	str	r7, [r4, #4]
}
    d136:	e7ed      	b.n	d114 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
    d138:	4652      	mov	r2, sl
    d13a:	2102      	movs	r1, #2
    d13c:	4620      	mov	r0, r4
    d13e:	f7ff fd8b 	bl	cc58 <process_event>
    d142:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    d144:	4628      	mov	r0, r5
    d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    d14a:	f06f 050a 	mvn.w	r5, #10
    d14e:	e7d8      	b.n	d102 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
    d150:	f06f 0504 	mvn.w	r5, #4
    d154:	e7d5      	b.n	d102 <onoff_request+0x9e>
	__asm__ volatile(
    d156:	f38a 8811 	msr	BASEPRI, sl
    d15a:	f3bf 8f6f 	isb	sy
		if (notify) {
    d15e:	f1b8 0f00 	cmp.w	r8, #0
    d162:	d0ef      	beq.n	d144 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
    d164:	2300      	movs	r3, #0
    d166:	4632      	mov	r2, r6
    d168:	4639      	mov	r1, r7
    d16a:	4620      	mov	r0, r4
    d16c:	f01d fa5a 	bl	2a624 <notify_one>
    d170:	e7e8      	b.n	d144 <onoff_request+0xe0>
    d172:	bf00      	nop
    d174:	0003341a 	.word	0x0003341a
    d178:	00033473 	.word	0x00033473
    d17c:	00032679 	.word	0x00032679
    d180:	00033488 	.word	0x00033488
    d184:	00033447 	.word	0x00033447
    d188:	0003345e 	.word	0x0003345e
    d18c:	00033404 	.word	0x00033404
    d190:	00033377 	.word	0x00033377

0000d194 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d194:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d196:	6842      	ldr	r2, [r0, #4]
    d198:	4603      	mov	r3, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d19a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d19e:	2a02      	cmp	r2, #2
	notify->result = res;
    d1a0:	6081      	str	r1, [r0, #8]
	switch (method) {
    d1a2:	d00a      	beq.n	d1ba <sys_notify_finalize+0x26>
    d1a4:	2a03      	cmp	r2, #3
    d1a6:	f04f 0100 	mov.w	r1, #0
    d1aa:	d003      	beq.n	d1b4 <sys_notify_finalize+0x20>
    d1ac:	2a01      	cmp	r2, #1
    d1ae:	d10a      	bne.n	d1c6 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d1b0:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d1b2:	e006      	b.n	d1c2 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
    d1b4:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d1b6:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d1b8:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
    d1ba:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d1bc:	2200      	movs	r2, #0
    d1be:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    d1c0:	b958      	cbnz	r0, d1da <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
    d1c2:	2000      	movs	r0, #0
    d1c4:	e7f8      	b.n	d1b8 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    d1c6:	4906      	ldr	r1, [pc, #24]	; (d1e0 <sys_notify_finalize+0x4c>)
    d1c8:	4806      	ldr	r0, [pc, #24]	; (d1e4 <sys_notify_finalize+0x50>)
    d1ca:	2345      	movs	r3, #69	; 0x45
    d1cc:	4a06      	ldr	r2, [pc, #24]	; (d1e8 <sys_notify_finalize+0x54>)
    d1ce:	f01d fa84 	bl	2a6da <assert_print>
    d1d2:	2145      	movs	r1, #69	; 0x45
    d1d4:	4804      	ldr	r0, [pc, #16]	; (d1e8 <sys_notify_finalize+0x54>)
    d1d6:	f01d fa79 	bl	2a6cc <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    d1da:	f01b f953 	bl	28484 <z_impl_k_poll_signal_raise>
    d1de:	e7f0      	b.n	d1c2 <sys_notify_finalize+0x2e>
    d1e0:	00037b56 	.word	0x00037b56
    d1e4:	00032679 	.word	0x00032679
    d1e8:	000334a0 	.word	0x000334a0

0000d1ec <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    d1ec:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1ee:	4c09      	ldr	r4, [pc, #36]	; (d214 <crc8_ccitt+0x28>)
    d1f0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    d1f2:	4291      	cmp	r1, r2
    d1f4:	d100      	bne.n	d1f8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    d1f6:	bd10      	pop	{r4, pc}
		val ^= p[i];
    d1f8:	f811 3b01 	ldrb.w	r3, [r1], #1
    d1fc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d1fe:	0903      	lsrs	r3, r0, #4
    d200:	5ce3      	ldrb	r3, [r4, r3]
    d202:	0100      	lsls	r0, r0, #4
    d204:	b2c0      	uxtb	r0, r0
    d206:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    d208:	0918      	lsrs	r0, r3, #4
    d20a:	5c20      	ldrb	r0, [r4, r0]
    d20c:	011b      	lsls	r3, r3, #4
    d20e:	b2db      	uxtb	r3, r3
    d210:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
    d212:	e7ee      	b.n	d1f2 <crc8_ccitt+0x6>
    d214:	000334c3 	.word	0x000334c3

0000d218 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    d218:	b5f0      	push	{r4, r5, r6, r7, lr}
    d21a:	4602      	mov	r2, r0
    d21c:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
    d21e:	270a      	movs	r7, #10
	size_t val = 0;
    d220:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    d222:	4e07      	ldr	r6, [pc, #28]	; (d240 <extract_decimal+0x28>)
    d224:	460b      	mov	r3, r1
    d226:	781c      	ldrb	r4, [r3, #0]
    d228:	3101      	adds	r1, #1
    d22a:	5d35      	ldrb	r5, [r6, r4]
    d22c:	076d      	lsls	r5, r5, #29
    d22e:	d401      	bmi.n	d234 <extract_decimal+0x1c>
	}
	*str = sp;
    d230:	6013      	str	r3, [r2, #0]
	return val;
}
    d232:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    d234:	fb07 4300 	mla	r3, r7, r0, r4
    d238:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d23c:	e7f2      	b.n	d224 <extract_decimal+0xc>
    d23e:	bf00      	nop
    d240:	00038be1 	.word	0x00038be1

0000d244 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    d244:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d248:	4615      	mov	r5, r2
    d24a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    d24c:	78d3      	ldrb	r3, [r2, #3]
    d24e:	4a22      	ldr	r2, [pc, #136]	; (d2d8 <encode_uint+0x94>)
	switch (specifier) {
    d250:	2b6f      	cmp	r3, #111	; 0x6f
    d252:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    d256:	4680      	mov	r8, r0
    d258:	460f      	mov	r7, r1
    d25a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    d25e:	d029      	beq.n	d2b4 <encode_uint+0x70>
    d260:	d824      	bhi.n	d2ac <encode_uint+0x68>
		return 10;
    d262:	2b58      	cmp	r3, #88	; 0x58
    d264:	bf0c      	ite	eq
    d266:	2610      	moveq	r6, #16
    d268:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    d26a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    d26e:	4632      	mov	r2, r6
    d270:	2300      	movs	r3, #0
    d272:	4640      	mov	r0, r8
    d274:	4639      	mov	r1, r7
    d276:	f7fb fe3b 	bl	8ef0 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    d27a:	2a09      	cmp	r2, #9
    d27c:	b2d4      	uxtb	r4, r2
    d27e:	d81e      	bhi.n	d2be <encode_uint+0x7a>
    d280:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    d282:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d284:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    d286:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d28a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    d28e:	d301      	bcc.n	d294 <encode_uint+0x50>
    d290:	45d1      	cmp	r9, sl
    d292:	d811      	bhi.n	d2b8 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    d294:	782b      	ldrb	r3, [r5, #0]
    d296:	069b      	lsls	r3, r3, #26
    d298:	d505      	bpl.n	d2a6 <encode_uint+0x62>
		if (radix == 8) {
    d29a:	2e08      	cmp	r6, #8
    d29c:	d115      	bne.n	d2ca <encode_uint+0x86>
			conv->altform_0 = true;
    d29e:	78ab      	ldrb	r3, [r5, #2]
    d2a0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    d2a4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    d2a6:	4648      	mov	r0, r9
    d2a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    d2ac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    d2b0:	2b70      	cmp	r3, #112	; 0x70
    d2b2:	e7d7      	b.n	d264 <encode_uint+0x20>
	switch (specifier) {
    d2b4:	2608      	movs	r6, #8
    d2b6:	e7d8      	b.n	d26a <encode_uint+0x26>
		value /= radix;
    d2b8:	4680      	mov	r8, r0
    d2ba:	460f      	mov	r7, r1
    d2bc:	e7d7      	b.n	d26e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    d2be:	f1bb 0f01 	cmp.w	fp, #1
    d2c2:	bf0c      	ite	eq
    d2c4:	3437      	addeq	r4, #55	; 0x37
    d2c6:	3457      	addne	r4, #87	; 0x57
    d2c8:	e7db      	b.n	d282 <encode_uint+0x3e>
		} else if (radix == 16) {
    d2ca:	2e10      	cmp	r6, #16
    d2cc:	d1eb      	bne.n	d2a6 <encode_uint+0x62>
			conv->altform_0c = true;
    d2ce:	78ab      	ldrb	r3, [r5, #2]
    d2d0:	f043 0310 	orr.w	r3, r3, #16
    d2d4:	e7e6      	b.n	d2a4 <encode_uint+0x60>
    d2d6:	bf00      	nop
    d2d8:	00038be1 	.word	0x00038be1

0000d2dc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2e0:	4682      	mov	sl, r0
    d2e2:	4617      	mov	r7, r2
    d2e4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d2e6:	2500      	movs	r5, #0
{
    d2e8:	b097      	sub	sp, #92	; 0x5c
    d2ea:	9103      	str	r1, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d2ec:	7838      	ldrb	r0, [r7, #0]
    d2ee:	b908      	cbnz	r0, d2f4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d2f0:	4628      	mov	r0, r5
    d2f2:	e349      	b.n	d988 <z_cbvprintf_impl+0x6ac>
			OUTC(*fp++);
    d2f4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    d2f6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    d2f8:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    d2fa:	d006      	beq.n	d30a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    d2fc:	9903      	ldr	r1, [sp, #12]
    d2fe:	47d0      	blx	sl
    d300:	2800      	cmp	r0, #0
    d302:	f2c0 8341 	blt.w	d988 <z_cbvprintf_impl+0x6ac>
    d306:	3501      	adds	r5, #1
		if (bps == NULL) {
    d308:	e1f0      	b.n	d6ec <z_cbvprintf_impl+0x410>
		} state = {
    d30a:	2218      	movs	r2, #24
    d30c:	2100      	movs	r1, #0
    d30e:	a810      	add	r0, sp, #64	; 0x40
    d310:	f023 f977 	bl	30602 <memset>
	if (*sp == '%') {
    d314:	787b      	ldrb	r3, [r7, #1]
    d316:	2b25      	cmp	r3, #37	; 0x25
    d318:	f000 80a3 	beq.w	d462 <z_cbvprintf_impl+0x186>
    d31c:	2300      	movs	r3, #0
    d31e:	4698      	mov	r8, r3
    d320:	469e      	mov	lr, r3
    d322:	469c      	mov	ip, r3
    d324:	4618      	mov	r0, r3
    d326:	1c79      	adds	r1, r7, #1
    d328:	460e      	mov	r6, r1
		switch (*sp) {
    d32a:	f811 2b01 	ldrb.w	r2, [r1], #1
    d32e:	2a2b      	cmp	r2, #43	; 0x2b
    d330:	f000 80c6 	beq.w	d4c0 <z_cbvprintf_impl+0x1e4>
    d334:	f200 80bd 	bhi.w	d4b2 <z_cbvprintf_impl+0x1d6>
    d338:	2a20      	cmp	r2, #32
    d33a:	f000 80c4 	beq.w	d4c6 <z_cbvprintf_impl+0x1ea>
    d33e:	2a23      	cmp	r2, #35	; 0x23
    d340:	f000 80c4 	beq.w	d4cc <z_cbvprintf_impl+0x1f0>
    d344:	b12b      	cbz	r3, d352 <z_cbvprintf_impl+0x76>
    d346:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d34e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d352:	f1b8 0f00 	cmp.w	r8, #0
    d356:	d005      	beq.n	d364 <z_cbvprintf_impl+0x88>
    d358:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d35c:	f043 0320 	orr.w	r3, r3, #32
    d360:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d364:	f1be 0f00 	cmp.w	lr, #0
    d368:	d005      	beq.n	d376 <z_cbvprintf_impl+0x9a>
    d36a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d36e:	f043 0310 	orr.w	r3, r3, #16
    d372:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d376:	f1bc 0f00 	cmp.w	ip, #0
    d37a:	d005      	beq.n	d388 <z_cbvprintf_impl+0xac>
    d37c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d380:	f043 0308 	orr.w	r3, r3, #8
    d384:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    d388:	b128      	cbz	r0, d396 <z_cbvprintf_impl+0xba>
    d38a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d38e:	f043 0304 	orr.w	r3, r3, #4
    d392:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    d396:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d39a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    d39e:	2944      	cmp	r1, #68	; 0x44
    d3a0:	d103      	bne.n	d3aa <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    d3a2:	f36f 1386 	bfc	r3, #6, #1
    d3a6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    d3aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d3ae:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    d3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d3b4:	9609      	str	r6, [sp, #36]	; 0x24
    d3b6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    d3ba:	f040 808c 	bne.w	d4d6 <z_cbvprintf_impl+0x1fa>
		conv->width_star = true;
    d3be:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d3c2:	f043 0301 	orr.w	r3, r3, #1
    d3c6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    d3ca:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    d3cc:	781a      	ldrb	r2, [r3, #0]
    d3ce:	2a2e      	cmp	r2, #46	; 0x2e
    d3d0:	bf0c      	ite	eq
    d3d2:	2101      	moveq	r1, #1
    d3d4:	2100      	movne	r1, #0
    d3d6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d3da:	f361 0241 	bfi	r2, r1, #1, #1
    d3de:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    d3e2:	d10c      	bne.n	d3fe <z_cbvprintf_impl+0x122>
	++sp;
    d3e4:	1c5a      	adds	r2, r3, #1
    d3e6:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    d3e8:	785a      	ldrb	r2, [r3, #1]
    d3ea:	2a2a      	cmp	r2, #42	; 0x2a
    d3ec:	f040 8083 	bne.w	d4f6 <z_cbvprintf_impl+0x21a>
		conv->prec_star = true;
    d3f0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    d3f4:	3302      	adds	r3, #2
		conv->prec_star = true;
    d3f6:	f042 0204 	orr.w	r2, r2, #4
    d3fa:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    d3fe:	781a      	ldrb	r2, [r3, #0]
    d400:	2a6c      	cmp	r2, #108	; 0x6c
    d402:	f000 80a4 	beq.w	d54e <z_cbvprintf_impl+0x272>
    d406:	f200 8086 	bhi.w	d516 <z_cbvprintf_impl+0x23a>
    d40a:	2a68      	cmp	r2, #104	; 0x68
    d40c:	f000 808c 	beq.w	d528 <z_cbvprintf_impl+0x24c>
    d410:	2a6a      	cmp	r2, #106	; 0x6a
    d412:	f000 80a5 	beq.w	d560 <z_cbvprintf_impl+0x284>
    d416:	2a4c      	cmp	r2, #76	; 0x4c
    d418:	f000 80aa 	beq.w	d570 <z_cbvprintf_impl+0x294>
	conv->specifier = *sp++;
    d41c:	461a      	mov	r2, r3
    d41e:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    d422:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    d424:	9204      	str	r2, [sp, #16]
    d426:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    d42a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    d42e:	f200 8117 	bhi.w	d660 <z_cbvprintf_impl+0x384>
    d432:	2b6d      	cmp	r3, #109	; 0x6d
    d434:	f200 80a9 	bhi.w	d58a <z_cbvprintf_impl+0x2ae>
    d438:	2b69      	cmp	r3, #105	; 0x69
    d43a:	f200 8111 	bhi.w	d660 <z_cbvprintf_impl+0x384>
    d43e:	2b57      	cmp	r3, #87	; 0x57
    d440:	f200 80be 	bhi.w	d5c0 <z_cbvprintf_impl+0x2e4>
    d444:	2b41      	cmp	r3, #65	; 0x41
    d446:	d003      	beq.n	d450 <z_cbvprintf_impl+0x174>
    d448:	3b45      	subs	r3, #69	; 0x45
    d44a:	2b02      	cmp	r3, #2
    d44c:	f200 8108 	bhi.w	d660 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    d450:	2204      	movs	r2, #4
    d452:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d456:	f362 0302 	bfi	r3, r2, #0, #3
    d45a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    d45e:	2301      	movs	r3, #1
			break;
    d460:	e0ca      	b.n	d5f8 <z_cbvprintf_impl+0x31c>
		conv->specifier = *sp++;
    d462:	1cba      	adds	r2, r7, #2
    d464:	9204      	str	r2, [sp, #16]
    d466:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    d46a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d46e:	07da      	lsls	r2, r3, #31
    d470:	f140 80fd 	bpl.w	d66e <z_cbvprintf_impl+0x392>
			width = va_arg(ap, int);
    d474:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d478:	f1b9 0f00 	cmp.w	r9, #0
    d47c:	da07      	bge.n	d48e <z_cbvprintf_impl+0x1b2>
				conv->flag_dash = true;
    d47e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    d482:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d486:	f042 0204 	orr.w	r2, r2, #4
    d48a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    d48e:	075e      	lsls	r6, r3, #29
    d490:	f140 80f6 	bpl.w	d680 <z_cbvprintf_impl+0x3a4>
			int arg = va_arg(ap, int);
    d494:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    d498:	f1bb 0f00 	cmp.w	fp, #0
    d49c:	f280 80f5 	bge.w	d68a <z_cbvprintf_impl+0x3ae>
				conv->prec_present = false;
    d4a0:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    d4a4:	f36f 0341 	bfc	r3, #1, #1
    d4a8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    d4ac:	f04f 3bff 	mov.w	fp, #4294967295
    d4b0:	e0eb      	b.n	d68a <z_cbvprintf_impl+0x3ae>
		switch (*sp) {
    d4b2:	2a2d      	cmp	r2, #45	; 0x2d
    d4b4:	d00d      	beq.n	d4d2 <z_cbvprintf_impl+0x1f6>
    d4b6:	2a30      	cmp	r2, #48	; 0x30
    d4b8:	f47f af44 	bne.w	d344 <z_cbvprintf_impl+0x68>
    d4bc:	2301      	movs	r3, #1
	} while (loop);
    d4be:	e733      	b.n	d328 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    d4c0:	f04f 0c01 	mov.w	ip, #1
    d4c4:	e730      	b.n	d328 <z_cbvprintf_impl+0x4c>
    d4c6:	f04f 0e01 	mov.w	lr, #1
    d4ca:	e72d      	b.n	d328 <z_cbvprintf_impl+0x4c>
    d4cc:	f04f 0801 	mov.w	r8, #1
    d4d0:	e72a      	b.n	d328 <z_cbvprintf_impl+0x4c>
    d4d2:	2001      	movs	r0, #1
    d4d4:	e728      	b.n	d328 <z_cbvprintf_impl+0x4c>
	size_t width = extract_decimal(&sp);
    d4d6:	a809      	add	r0, sp, #36	; 0x24
    d4d8:	f7ff fe9e 	bl	d218 <extract_decimal>
	if (sp != wp) {
    d4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4de:	42b3      	cmp	r3, r6
    d4e0:	f43f af74 	beq.w	d3cc <z_cbvprintf_impl+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    d4e4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    d4e8:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    d4ea:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    d4ec:	f360 0241 	bfi	r2, r0, #1, #1
    d4f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    d4f4:	e76a      	b.n	d3cc <z_cbvprintf_impl+0xf0>
	size_t prec = extract_decimal(&sp);
    d4f6:	a809      	add	r0, sp, #36	; 0x24
    d4f8:	f7ff fe8e 	bl	d218 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    d4fc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    d500:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    d502:	f3c3 0240 	ubfx	r2, r3, #1, #1
    d506:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    d50a:	f362 0341 	bfi	r3, r2, #1, #1
    d50e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    d512:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d514:	e773      	b.n	d3fe <z_cbvprintf_impl+0x122>
	switch (*sp) {
    d516:	2a74      	cmp	r2, #116	; 0x74
    d518:	d026      	beq.n	d568 <z_cbvprintf_impl+0x28c>
    d51a:	2a7a      	cmp	r2, #122	; 0x7a
    d51c:	f47f af7e 	bne.w	d41c <z_cbvprintf_impl+0x140>
		conv->length_mod = LENGTH_Z;
    d520:	2106      	movs	r1, #6
    d522:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d526:	e00c      	b.n	d542 <z_cbvprintf_impl+0x266>
		if (*++sp == 'h') {
    d528:	785a      	ldrb	r2, [r3, #1]
    d52a:	2a68      	cmp	r2, #104	; 0x68
    d52c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d530:	d106      	bne.n	d540 <z_cbvprintf_impl+0x264>
			conv->length_mod = LENGTH_HH;
    d532:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d534:	f361 02c6 	bfi	r2, r1, #3, #4
    d538:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    d53c:	3302      	adds	r3, #2
    d53e:	e76d      	b.n	d41c <z_cbvprintf_impl+0x140>
			conv->length_mod = LENGTH_H;
    d540:	2102      	movs	r1, #2
    d542:	f361 02c6 	bfi	r2, r1, #3, #4
    d546:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    d54a:	3301      	adds	r3, #1
    d54c:	e766      	b.n	d41c <z_cbvprintf_impl+0x140>
		if (*++sp == 'l') {
    d54e:	785a      	ldrb	r2, [r3, #1]
    d550:	2a6c      	cmp	r2, #108	; 0x6c
    d552:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d556:	d101      	bne.n	d55c <z_cbvprintf_impl+0x280>
			conv->length_mod = LENGTH_LL;
    d558:	2104      	movs	r1, #4
    d55a:	e7eb      	b.n	d534 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_L;
    d55c:	2103      	movs	r1, #3
    d55e:	e7f0      	b.n	d542 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_J;
    d560:	2105      	movs	r1, #5
    d562:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d566:	e7ec      	b.n	d542 <z_cbvprintf_impl+0x266>
		conv->length_mod = LENGTH_T;
    d568:	2107      	movs	r1, #7
    d56a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    d56e:	e7e8      	b.n	d542 <z_cbvprintf_impl+0x266>
		conv->unsupported = true;
    d570:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    d574:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    d578:	f022 0202 	bic.w	r2, r2, #2
    d57c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    d580:	f042 0202 	orr.w	r2, r2, #2
    d584:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    d588:	e7df      	b.n	d54a <z_cbvprintf_impl+0x26e>
	switch (conv->specifier) {
    d58a:	3b6e      	subs	r3, #110	; 0x6e
    d58c:	b2d9      	uxtb	r1, r3
    d58e:	2301      	movs	r3, #1
    d590:	408b      	lsls	r3, r1
    d592:	f240 4182 	movw	r1, #1154	; 0x482
    d596:	420b      	tst	r3, r1
    d598:	d138      	bne.n	d60c <z_cbvprintf_impl+0x330>
    d59a:	f013 0f24 	tst.w	r3, #36	; 0x24
    d59e:	d152      	bne.n	d646 <z_cbvprintf_impl+0x36a>
    d5a0:	07d8      	lsls	r0, r3, #31
    d5a2:	d55d      	bpl.n	d660 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    d5a4:	2103      	movs	r1, #3
    d5a6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d5aa:	f361 0302 	bfi	r3, r1, #0, #3
    d5ae:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5b2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    d5b6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    d5ba:	424b      	negs	r3, r1
    d5bc:	414b      	adcs	r3, r1
    d5be:	e01b      	b.n	d5f8 <z_cbvprintf_impl+0x31c>
    d5c0:	2001      	movs	r0, #1
	switch (conv->specifier) {
    d5c2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    d5c6:	b2c9      	uxtb	r1, r1
    d5c8:	fa00 f101 	lsl.w	r1, r0, r1
    d5cc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    d5d0:	f47f af3e 	bne.w	d450 <z_cbvprintf_impl+0x174>
    d5d4:	f640 0601 	movw	r6, #2049	; 0x801
    d5d8:	4231      	tst	r1, r6
    d5da:	d11d      	bne.n	d618 <z_cbvprintf_impl+0x33c>
    d5dc:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    d5e0:	d03e      	beq.n	d660 <z_cbvprintf_impl+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    d5e2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d5e6:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5ea:	f002 0278 	and.w	r2, r2, #120	; 0x78
    d5ee:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    d5f0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d5f4:	d034      	beq.n	d660 <z_cbvprintf_impl+0x384>
	bool unsupported = false;
    d5f6:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    d5f8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    d5fc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    d600:	430b      	orrs	r3, r1
    d602:	f363 0241 	bfi	r2, r3, #1, #1
    d606:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    d60a:	e72e      	b.n	d46a <z_cbvprintf_impl+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    d60c:	2102      	movs	r1, #2
    d60e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d612:	f361 0302 	bfi	r3, r1, #0, #3
    d616:	e7e8      	b.n	d5ea <z_cbvprintf_impl+0x30e>
    d618:	2002      	movs	r0, #2
    d61a:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    d61e:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    d622:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    d626:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    d628:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    d62c:	bf02      	ittt	eq
    d62e:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    d632:	f041 0101 	orreq.w	r1, r1, #1
    d636:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    d63a:	2b63      	cmp	r3, #99	; 0x63
    d63c:	d1db      	bne.n	d5f6 <z_cbvprintf_impl+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    d63e:	1e13      	subs	r3, r2, #0
    d640:	bf18      	it	ne
    d642:	2301      	movne	r3, #1
    d644:	e7d8      	b.n	d5f8 <z_cbvprintf_impl+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    d646:	2103      	movs	r1, #3
    d648:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d64c:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    d650:	f361 0302 	bfi	r3, r1, #0, #3
    d654:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    d658:	bf14      	ite	ne
    d65a:	2301      	movne	r3, #1
    d65c:	2300      	moveq	r3, #0
    d65e:	e7cb      	b.n	d5f8 <z_cbvprintf_impl+0x31c>
		conv->invalid = true;
    d660:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d664:	f043 0301 	orr.w	r3, r3, #1
    d668:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    d66c:	e7c3      	b.n	d5f6 <z_cbvprintf_impl+0x31a>
		} else if (conv->width_present) {
    d66e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    d672:	2a00      	cmp	r2, #0
		int width = -1;
    d674:	bfac      	ite	ge
    d676:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    d67a:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
    d67e:	e706      	b.n	d48e <z_cbvprintf_impl+0x1b2>
		} else if (conv->prec_present) {
    d680:	0798      	lsls	r0, r3, #30
    d682:	f57f af13 	bpl.w	d4ac <z_cbvprintf_impl+0x1d0>
			precision = conv->prec_value;
    d686:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    d68a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    d68c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    d690:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    d694:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    d698:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    d69c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    d69e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    d6a2:	d133      	bne.n	d70c <z_cbvprintf_impl+0x430>
			switch (length_mod) {
    d6a4:	1ecb      	subs	r3, r1, #3
    d6a6:	2b04      	cmp	r3, #4
    d6a8:	d804      	bhi.n	d6b4 <z_cbvprintf_impl+0x3d8>
    d6aa:	e8df f003 	tbb	[pc, r3]
    d6ae:	4621      	.short	0x4621
    d6b0:	2146      	.short	0x2146
    d6b2:	21          	.byte	0x21
    d6b3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    d6b4:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    d6b6:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    d6b8:	ea4f 72e3 	mov.w	r2, r3, asr #31
    d6bc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d6c0:	d11c      	bne.n	d6fc <z_cbvprintf_impl+0x420>
				value->sint = (signed char)value->sint;
    d6c2:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    d6c6:	17da      	asrs	r2, r3, #31
    d6c8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    d6cc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    d6ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    d6d2:	f013 0603 	ands.w	r6, r3, #3
    d6d6:	d050      	beq.n	d77a <z_cbvprintf_impl+0x49e>
			OUTS(sp, fp);
    d6d8:	463a      	mov	r2, r7
    d6da:	4650      	mov	r0, sl
    d6dc:	9b04      	ldr	r3, [sp, #16]
    d6de:	9903      	ldr	r1, [sp, #12]
    d6e0:	f01c ffdd 	bl	2a69e <outs>
    d6e4:	2800      	cmp	r0, #0
    d6e6:	f2c0 814f 	blt.w	d988 <z_cbvprintf_impl+0x6ac>
    d6ea:	4405      	add	r5, r0
			continue;
    d6ec:	9f04      	ldr	r7, [sp, #16]
    d6ee:	e5fd      	b.n	d2ec <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    d6f0:	f854 3b04 	ldr.w	r3, [r4], #4
    d6f4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    d6f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    d6fa:	e7e8      	b.n	d6ce <z_cbvprintf_impl+0x3f2>
			} else if (length_mod == LENGTH_H) {
    d6fc:	2902      	cmp	r1, #2
    d6fe:	d1e5      	bne.n	d6cc <z_cbvprintf_impl+0x3f0>
				value->sint = (short)value->sint;
    d700:	b21a      	sxth	r2, r3
    d702:	f343 33c0 	sbfx	r3, r3, #15, #1
    d706:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d70a:	e7df      	b.n	d6cc <z_cbvprintf_impl+0x3f0>
		} else if (specifier_cat == SPECIFIER_UINT) {
    d70c:	2b02      	cmp	r3, #2
    d70e:	d124      	bne.n	d75a <z_cbvprintf_impl+0x47e>
			switch (length_mod) {
    d710:	1ecb      	subs	r3, r1, #3
    d712:	2b04      	cmp	r3, #4
    d714:	d804      	bhi.n	d720 <z_cbvprintf_impl+0x444>
    d716:	e8df f003 	tbb	[pc, r3]
    d71a:	1018      	.short	0x1018
    d71c:	1810      	.short	0x1810
    d71e:	18          	.byte	0x18
    d71f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    d720:	2901      	cmp	r1, #1
    d722:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    d726:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    d72a:	d014      	beq.n	d756 <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
    d72c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    d72e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    d732:	d1cc      	bne.n	d6ce <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned short)value->uint;
    d734:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    d736:	9310      	str	r3, [sp, #64]	; 0x40
    d738:	e7c9      	b.n	d6ce <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap,
    d73a:	3407      	adds	r4, #7
    d73c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    d740:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    d744:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    d748:	e7c1      	b.n	d6ce <z_cbvprintf_impl+0x3f2>
					(uint_value_type)va_arg(ap, size_t);
    d74a:	f854 3b04 	ldr.w	r3, [r4], #4
    d74e:	9310      	str	r3, [sp, #64]	; 0x40
    d750:	2300      	movs	r3, #0
    d752:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    d754:	e7bb      	b.n	d6ce <z_cbvprintf_impl+0x3f2>
				value->uint = (unsigned char)value->uint;
    d756:	b2db      	uxtb	r3, r3
    d758:	e7cd      	b.n	d6f6 <z_cbvprintf_impl+0x41a>
		} else if (specifier_cat == SPECIFIER_FP) {
    d75a:	2b04      	cmp	r3, #4
    d75c:	d108      	bne.n	d770 <z_cbvprintf_impl+0x494>
					(sint_value_type)va_arg(ap, long long);
    d75e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    d760:	f024 0407 	bic.w	r4, r4, #7
    d764:	e9d4 2300 	ldrd	r2, r3, [r4]
    d768:	3408      	adds	r4, #8
    d76a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d76e:	e7ae      	b.n	d6ce <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_PTR) {
    d770:	2b03      	cmp	r3, #3
    d772:	d1ac      	bne.n	d6ce <z_cbvprintf_impl+0x3f2>
			value->ptr = va_arg(ap, void *);
    d774:	f854 3b04 	ldr.w	r3, [r4], #4
    d778:	e7dd      	b.n	d736 <z_cbvprintf_impl+0x45a>
		switch (conv->specifier) {
    d77a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d77e:	2878      	cmp	r0, #120	; 0x78
    d780:	d8b4      	bhi.n	d6ec <z_cbvprintf_impl+0x410>
    d782:	2862      	cmp	r0, #98	; 0x62
    d784:	d81c      	bhi.n	d7c0 <z_cbvprintf_impl+0x4e4>
    d786:	2825      	cmp	r0, #37	; 0x25
    d788:	f43f adb8 	beq.w	d2fc <z_cbvprintf_impl+0x20>
    d78c:	2858      	cmp	r0, #88	; 0x58
    d78e:	d1ad      	bne.n	d6ec <z_cbvprintf_impl+0x410>
			bps = encode_uint(value->uint, conv, buf, bpe);
    d790:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    d794:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d798:	9300      	str	r3, [sp, #0]
    d79a:	aa12      	add	r2, sp, #72	; 0x48
    d79c:	ab0a      	add	r3, sp, #40	; 0x28
    d79e:	f7ff fd51 	bl	d244 <encode_uint>
			if (precision >= 0) {
    d7a2:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    d7a6:	4607      	mov	r7, r0
			if (precision >= 0) {
    d7a8:	f280 8097 	bge.w	d8da <z_cbvprintf_impl+0x5fe>
		if (bps == NULL) {
    d7ac:	2f00      	cmp	r7, #0
    d7ae:	d09d      	beq.n	d6ec <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d7b0:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d7b4:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    d7b8:	2e00      	cmp	r6, #0
    d7ba:	d04e      	beq.n	d85a <z_cbvprintf_impl+0x57e>
			nj_len += 1U;
    d7bc:	3001      	adds	r0, #1
    d7be:	e04c      	b.n	d85a <z_cbvprintf_impl+0x57e>
		switch (conv->specifier) {
    d7c0:	3863      	subs	r0, #99	; 0x63
    d7c2:	2815      	cmp	r0, #21
    d7c4:	d892      	bhi.n	d6ec <z_cbvprintf_impl+0x410>
    d7c6:	a201      	add	r2, pc, #4	; (adr r2, d7cc <z_cbvprintf_impl+0x4f0>)
    d7c8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    d7cc:	0000d84b 	.word	0x0000d84b
    d7d0:	0000d8b1 	.word	0x0000d8b1
    d7d4:	0000d6ed 	.word	0x0000d6ed
    d7d8:	0000d6ed 	.word	0x0000d6ed
    d7dc:	0000d6ed 	.word	0x0000d6ed
    d7e0:	0000d6ed 	.word	0x0000d6ed
    d7e4:	0000d8b1 	.word	0x0000d8b1
    d7e8:	0000d6ed 	.word	0x0000d6ed
    d7ec:	0000d6ed 	.word	0x0000d6ed
    d7f0:	0000d6ed 	.word	0x0000d6ed
    d7f4:	0000d6ed 	.word	0x0000d6ed
    d7f8:	0000d939 	.word	0x0000d939
    d7fc:	0000d8d5 	.word	0x0000d8d5
    d800:	0000d8fb 	.word	0x0000d8fb
    d804:	0000d6ed 	.word	0x0000d6ed
    d808:	0000d6ed 	.word	0x0000d6ed
    d80c:	0000d825 	.word	0x0000d825
    d810:	0000d6ed 	.word	0x0000d6ed
    d814:	0000d8d5 	.word	0x0000d8d5
    d818:	0000d6ed 	.word	0x0000d6ed
    d81c:	0000d6ed 	.word	0x0000d6ed
    d820:	0000d8d5 	.word	0x0000d8d5
			if (precision >= 0) {
    d824:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    d828:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    d82a:	db0a      	blt.n	d842 <z_cbvprintf_impl+0x566>
				len = strnlen(bps, precision);
    d82c:	4659      	mov	r1, fp
    d82e:	4638      	mov	r0, r7
    d830:	f023 f85a 	bl	308e8 <strnlen>
			bpe = bps + len;
    d834:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    d838:	2f00      	cmp	r7, #0
    d83a:	f43f af57 	beq.w	d6ec <z_cbvprintf_impl+0x410>
		char sign = 0;
    d83e:	2600      	movs	r6, #0
    d840:	e00b      	b.n	d85a <z_cbvprintf_impl+0x57e>
				len = strlen(bps);
    d842:	4638      	mov	r0, r7
    d844:	f7fb fd9f 	bl	9386 <strlen>
    d848:	e7f4      	b.n	d834 <z_cbvprintf_impl+0x558>
		char sign = 0;
    d84a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    d84c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d84e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			bpe = buf + 1;
    d850:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    d854:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			bps = buf;
    d858:	af0a      	add	r7, sp, #40	; 0x28
		if (conv->altform_0c) {
    d85a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d85e:	f013 0210 	ands.w	r2, r3, #16
    d862:	9205      	str	r2, [sp, #20]
    d864:	f000 8083 	beq.w	d96e <z_cbvprintf_impl+0x692>
			nj_len += 2U;
    d868:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    d86a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    d86c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    d870:	bf48      	it	mi
    d872:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    d874:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    d876:	bf48      	it	mi
    d878:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    d87a:	f1b9 0f00 	cmp.w	r9, #0
    d87e:	f340 8090 	ble.w	d9a2 <z_cbvprintf_impl+0x6c6>
			if (!conv->flag_dash) {
    d882:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    d886:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    d88a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    d88e:	0750      	lsls	r0, r2, #29
    d890:	9306      	str	r3, [sp, #24]
    d892:	f100 8086 	bmi.w	d9a2 <z_cbvprintf_impl+0x6c6>
				if (conv->flag_zero) {
    d896:	0651      	lsls	r1, r2, #25
    d898:	d579      	bpl.n	d98e <z_cbvprintf_impl+0x6b2>
					if (sign != 0) {
    d89a:	b13e      	cbz	r6, d8ac <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    d89c:	4630      	mov	r0, r6
    d89e:	9903      	ldr	r1, [sp, #12]
    d8a0:	47d0      	blx	sl
    d8a2:	2800      	cmp	r0, #0
    d8a4:	db70      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    d8a6:	9b06      	ldr	r3, [sp, #24]
    d8a8:	3501      	adds	r5, #1
    d8aa:	461e      	mov	r6, r3
					pad = '0';
    d8ac:	2230      	movs	r2, #48	; 0x30
    d8ae:	e06f      	b.n	d990 <z_cbvprintf_impl+0x6b4>
			if (conv->flag_plus) {
    d8b0:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    d8b2:	bf5a      	itte	pl
    d8b4:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    d8b8:	015e      	lslpl	r6, r3, #5
				sign = '+';
    d8ba:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    d8bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    d8c0:	2b00      	cmp	r3, #0
    d8c2:	f6bf af65 	bge.w	d790 <z_cbvprintf_impl+0x4b4>
				value->uint = (uint_value_type)-sint;
    d8c6:	4252      	negs	r2, r2
    d8c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    d8cc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    d8ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    d8d2:	e75d      	b.n	d790 <z_cbvprintf_impl+0x4b4>
		switch (conv->specifier) {
    d8d4:	2600      	movs	r6, #0
    d8d6:	e75b      	b.n	d790 <z_cbvprintf_impl+0x4b4>
		char sign = 0;
    d8d8:	2600      	movs	r6, #0
				conv->flag_zero = false;
    d8da:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    d8de:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    d8e2:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    d8e4:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    d8e8:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    d8ea:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    d8ee:	f67f af5d 	bls.w	d7ac <z_cbvprintf_impl+0x4d0>
					conv->pad0_value = precision - (int)len;
    d8f2:	ebab 0303 	sub.w	r3, fp, r3
    d8f6:	9313      	str	r3, [sp, #76]	; 0x4c
    d8f8:	e758      	b.n	d7ac <z_cbvprintf_impl+0x4d0>
			if (value->ptr != NULL) {
    d8fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    d8fc:	b380      	cbz	r0, d960 <z_cbvprintf_impl+0x684>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d8fe:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    d902:	ab0a      	add	r3, sp, #40	; 0x28
    d904:	2100      	movs	r1, #0
    d906:	f8cd 8000 	str.w	r8, [sp]
    d90a:	aa12      	add	r2, sp, #72	; 0x48
    d90c:	f7ff fc9a 	bl	d244 <encode_uint>
				conv->altform_0c = true;
    d910:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d914:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    d918:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d91c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    d920:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    d924:	4607      	mov	r7, r0
				conv->altform_0c = true;
    d926:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    d92a:	dad5      	bge.n	d8d8 <z_cbvprintf_impl+0x5fc>
		if (bps == NULL) {
    d92c:	2800      	cmp	r0, #0
    d92e:	f43f aedd 	beq.w	d6ec <z_cbvprintf_impl+0x410>
		size_t nj_len = (bpe - bps);
    d932:	eba8 0000 	sub.w	r0, r8, r0
    d936:	e782      	b.n	d83e <z_cbvprintf_impl+0x562>
				store_count(conv, value->ptr, count);
    d938:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    d93a:	2907      	cmp	r1, #7
    d93c:	f63f aed6 	bhi.w	d6ec <z_cbvprintf_impl+0x410>
    d940:	e8df f001 	tbb	[pc, r1]
    d944:	0c06040c 	.word	0x0c06040c
    d948:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    d94c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    d94e:	e6cd      	b.n	d6ec <z_cbvprintf_impl+0x410>
		*(short *)dp = (short)count;
    d950:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    d952:	e6cb      	b.n	d6ec <z_cbvprintf_impl+0x410>
		*(intmax_t *)dp = (intmax_t)count;
    d954:	17ea      	asrs	r2, r5, #31
    d956:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    d95a:	e6c7      	b.n	d6ec <z_cbvprintf_impl+0x410>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    d95c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    d95e:	e6c5      	b.n	d6ec <z_cbvprintf_impl+0x410>
			bpe = bps + 5;
    d960:	f8df 80bc 	ldr.w	r8, [pc, #188]	; da20 <z_cbvprintf_impl+0x744>
		char sign = 0;
    d964:	4606      	mov	r6, r0
    d966:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    d96a:	2005      	movs	r0, #5
    d96c:	e775      	b.n	d85a <z_cbvprintf_impl+0x57e>
		} else if (conv->altform_0) {
    d96e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    d970:	bf48      	it	mi
    d972:	3001      	addmi	r0, #1
    d974:	e779      	b.n	d86a <z_cbvprintf_impl+0x58e>
					OUTC(pad);
    d976:	4610      	mov	r0, r2
    d978:	9307      	str	r3, [sp, #28]
    d97a:	9206      	str	r2, [sp, #24]
    d97c:	9903      	ldr	r1, [sp, #12]
    d97e:	47d0      	blx	sl
    d980:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d984:	2800      	cmp	r0, #0
    d986:	da04      	bge.n	d992 <z_cbvprintf_impl+0x6b6>
#undef OUTS
#undef OUTC
}
    d988:	b017      	add	sp, #92	; 0x5c
    d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    d98e:	2220      	movs	r2, #32
					pad = '0';
    d990:	464b      	mov	r3, r9
				while (width-- > 0) {
    d992:	4619      	mov	r1, r3
    d994:	2900      	cmp	r1, #0
    d996:	f103 33ff 	add.w	r3, r3, #4294967295
    d99a:	dcec      	bgt.n	d976 <z_cbvprintf_impl+0x69a>
    d99c:	444d      	add	r5, r9
    d99e:	4699      	mov	r9, r3
    d9a0:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    d9a2:	b12e      	cbz	r6, d9b0 <z_cbvprintf_impl+0x6d4>
			OUTC(sign);
    d9a4:	4630      	mov	r0, r6
    d9a6:	9903      	ldr	r1, [sp, #12]
    d9a8:	47d0      	blx	sl
    d9aa:	2800      	cmp	r0, #0
    d9ac:	dbec      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    d9ae:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    d9b0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    d9b4:	06da      	lsls	r2, r3, #27
    d9b6:	d401      	bmi.n	d9bc <z_cbvprintf_impl+0x6e0>
    d9b8:	071b      	lsls	r3, r3, #28
    d9ba:	d505      	bpl.n	d9c8 <z_cbvprintf_impl+0x6ec>
				OUTC('0');
    d9bc:	2030      	movs	r0, #48	; 0x30
    d9be:	9903      	ldr	r1, [sp, #12]
    d9c0:	47d0      	blx	sl
    d9c2:	2800      	cmp	r0, #0
    d9c4:	dbe0      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    d9c6:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    d9c8:	9b05      	ldr	r3, [sp, #20]
    d9ca:	b133      	cbz	r3, d9da <z_cbvprintf_impl+0x6fe>
				OUTC(conv->specifier);
    d9cc:	9903      	ldr	r1, [sp, #12]
    d9ce:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    d9d2:	47d0      	blx	sl
    d9d4:	2800      	cmp	r0, #0
    d9d6:	dbd7      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    d9d8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d9da:	44ab      	add	fp, r5
    d9dc:	e005      	b.n	d9ea <z_cbvprintf_impl+0x70e>
				OUTC('0');
    d9de:	2030      	movs	r0, #48	; 0x30
    d9e0:	9903      	ldr	r1, [sp, #12]
    d9e2:	47d0      	blx	sl
    d9e4:	2800      	cmp	r0, #0
    d9e6:	dbcf      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    d9e8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    d9ea:	ebab 0305 	sub.w	r3, fp, r5
    d9ee:	2b00      	cmp	r3, #0
    d9f0:	dcf5      	bgt.n	d9de <z_cbvprintf_impl+0x702>
			OUTS(bps, bpe);
    d9f2:	4643      	mov	r3, r8
    d9f4:	463a      	mov	r2, r7
    d9f6:	4650      	mov	r0, sl
    d9f8:	9903      	ldr	r1, [sp, #12]
    d9fa:	f01c fe50 	bl	2a69e <outs>
    d9fe:	2800      	cmp	r0, #0
    da00:	dbc2      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    da02:	4405      	add	r5, r0
		while (width > 0) {
    da04:	44a9      	add	r9, r5
    da06:	eba9 0305 	sub.w	r3, r9, r5
    da0a:	2b00      	cmp	r3, #0
    da0c:	f77f ae6e 	ble.w	d6ec <z_cbvprintf_impl+0x410>
			OUTC(' ');
    da10:	2020      	movs	r0, #32
    da12:	9903      	ldr	r1, [sp, #12]
    da14:	47d0      	blx	sl
    da16:	2800      	cmp	r0, #0
    da18:	dbb6      	blt.n	d988 <z_cbvprintf_impl+0x6ac>
    da1a:	3501      	adds	r5, #1
			--width;
    da1c:	e7f3      	b.n	da06 <z_cbvprintf_impl+0x72a>
    da1e:	bf00      	nop
    da20:	000334d8 	.word	0x000334d8

0000da24 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    da24:	b538      	push	{r3, r4, r5, lr}
    da26:	460d      	mov	r5, r1
    da28:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    da2a:	2220      	movs	r2, #32
    da2c:	2100      	movs	r1, #0
    da2e:	f022 fde8 	bl	30602 <memset>
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
	buffer->get_wlen = cfg->get_wlen;
	buffer->notify_drop = cfg->notify_drop;
	buffer->buf = cfg->buf;
	buffer->size = cfg->size;
	buffer->max_usage = 0;
    da32:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    da34:	68eb      	ldr	r3, [r5, #12]
    da36:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
    da38:	68ab      	ldr	r3, [r5, #8]
    da3a:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
    da3c:	682b      	ldr	r3, [r5, #0]
    da3e:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
    da40:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    da42:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->size = cfg->size;
    da44:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    da46:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    da48:	b123      	cbz	r3, da54 <mpsc_pbuf_init+0x30>
    da4a:	1e59      	subs	r1, r3, #1
    da4c:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    da4e:	bf08      	it	eq
    da50:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    da54:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    da56:	2201      	movs	r2, #1
    da58:	2100      	movs	r1, #0
    da5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    da5e:	f022 fbd4 	bl	3020a <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
    da62:	b148      	cbz	r0, da78 <mpsc_pbuf_init+0x54>
    da64:	4905      	ldr	r1, [pc, #20]	; (da7c <mpsc_pbuf_init+0x58>)
    da66:	4806      	ldr	r0, [pc, #24]	; (da80 <mpsc_pbuf_init+0x5c>)
    da68:	232e      	movs	r3, #46	; 0x2e
    da6a:	4a06      	ldr	r2, [pc, #24]	; (da84 <mpsc_pbuf_init+0x60>)
    da6c:	f01c fe35 	bl	2a6da <assert_print>
    da70:	212e      	movs	r1, #46	; 0x2e
    da72:	4804      	ldr	r0, [pc, #16]	; (da84 <mpsc_pbuf_init+0x60>)
    da74:	f01c fe2a 	bl	2a6cc <assert_post_action>
	ARG_UNUSED(err);
}
    da78:	bd38      	pop	{r3, r4, r5, pc}
    da7a:	bf00      	nop
    da7c:	000334ff 	.word	0x000334ff
    da80:	00032679 	.word	0x00032679
    da84:	000334d9 	.word	0x000334d9

0000da88 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da8c:	b087      	sub	sp, #28
    da8e:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    da92:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    da94:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    da96:	3b01      	subs	r3, #1
    da98:	428b      	cmp	r3, r1
{
    da9a:	460f      	mov	r7, r1
	if (wlen > (buffer->size - 1)) {
    da9c:	f0c0 80a0 	bcc.w	dbe0 <mpsc_pbuf_alloc+0x158>
	union mpsc_pbuf_generic *dropped_item = NULL;
    daa0:	2600      	movs	r6, #0
	union mpsc_pbuf_generic *item = NULL;
    daa2:	46b2      	mov	sl, r6
	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    daa4:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    daa8:	f04f 0320 	mov.w	r3, #32
    daac:	f3ef 8b11 	mrs	fp, BASEPRI
    dab0:	f383 8812 	msr	BASEPRI_MAX, r3
    dab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dab8:	4628      	mov	r0, r5
	k.key = arch_irq_lock();
    daba:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dabc:	f017 fadc 	bl	25078 <z_spin_lock_valid>
    dac0:	b958      	cbnz	r0, dada <mpsc_pbuf_alloc+0x52>
    dac2:	2394      	movs	r3, #148	; 0x94
    dac4:	4a49      	ldr	r2, [pc, #292]	; (dbec <mpsc_pbuf_alloc+0x164>)
    dac6:	494a      	ldr	r1, [pc, #296]	; (dbf0 <mpsc_pbuf_alloc+0x168>)
    dac8:	484a      	ldr	r0, [pc, #296]	; (dbf4 <mpsc_pbuf_alloc+0x16c>)
    daca:	f01c fe06 	bl	2a6da <assert_print>
    dace:	4629      	mov	r1, r5
    dad0:	4849      	ldr	r0, [pc, #292]	; (dbf8 <mpsc_pbuf_alloc+0x170>)
    dad2:	f01c fe02 	bl	2a6da <assert_print>
    dad6:	2194      	movs	r1, #148	; 0x94
    dad8:	e050      	b.n	db7c <mpsc_pbuf_alloc+0xf4>
	z_spin_lock_set_owner(l);
    dada:	4628      	mov	r0, r5
    dadc:	f017 fae8 	bl	250b0 <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
    dae0:	a905      	add	r1, sp, #20
    dae2:	4620      	mov	r0, r4
    dae4:	f01c fe06 	bl	2a6f4 <free_space>

		if (free_wlen >= wlen) {
    dae8:	9905      	ldr	r1, [sp, #20]
		wrap = free_space(buffer, &free_wlen);
    daea:	4680      	mov	r8, r0
		if (free_wlen >= wlen) {
    daec:	42b9      	cmp	r1, r7
    daee:	d328      	bcc.n	db42 <mpsc_pbuf_alloc+0xba>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    daf0:	6822      	ldr	r2, [r4, #0]
			item =
    daf2:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    daf4:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    daf6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    dafa:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
    dafe:	f021 0103 	bic.w	r1, r1, #3
    db02:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    db06:	6821      	ldr	r1, [r4, #0]
    db08:	463a      	mov	r2, r7
    db0a:	f01c fe15 	bl	2a738 <idx_inc>
		cont = false;
    db0e:	f04f 0800 	mov.w	r8, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    db12:	6020      	str	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    db14:	4628      	mov	r0, r5
    db16:	f017 fabd 	bl	25094 <z_spin_unlock_valid>
    db1a:	b320      	cbz	r0, db66 <mpsc_pbuf_alloc+0xde>
	__asm__ volatile(
    db1c:	f389 8811 	msr	BASEPRI, r9
    db20:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    db24:	f1b8 0f00 	cmp.w	r8, #0
    db28:	d05c      	beq.n	dbe4 <mpsc_pbuf_alloc+0x15c>
    db2a:	b146      	cbz	r6, db3e <mpsc_pbuf_alloc+0xb6>
    db2c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    db30:	2b00      	cmp	r3, #0
    db32:	d0b9      	beq.n	daa8 <mpsc_pbuf_alloc+0x20>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    db34:	69a3      	ldr	r3, [r4, #24]
    db36:	b113      	cbz	r3, db3e <mpsc_pbuf_alloc+0xb6>
				buffer->notify_drop(buffer, dropped_item);
    db38:	4631      	mov	r1, r6
    db3a:	4620      	mov	r0, r4
    db3c:	4798      	blx	r3
{
    db3e:	2600      	movs	r6, #0
    db40:	e7b2      	b.n	daa8 <mpsc_pbuf_alloc+0x20>
		} else if (wrap) {
    db42:	b118      	cbz	r0, db4c <mpsc_pbuf_alloc+0xc4>
			add_skip_item(buffer, free_wlen);
    db44:	4620      	mov	r0, r4
    db46:	f01c fe05 	bl	2a754 <add_skip_item>
			cont = true;
    db4a:	e7e3      	b.n	db14 <mpsc_pbuf_alloc+0x8c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    db4c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
    db50:	4313      	orrs	r3, r2
    db52:	d036      	beq.n	dbc2 <mpsc_pbuf_alloc+0x13a>
    db54:	9103      	str	r1, [sp, #12]
			   !k_is_in_isr()) {
    db56:	f022 fb07 	bl	30168 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    db5a:	9903      	ldr	r1, [sp, #12]
    db5c:	bb88      	cbnz	r0, dbc2 <mpsc_pbuf_alloc+0x13a>
    db5e:	4628      	mov	r0, r5
    db60:	f017 fa98 	bl	25094 <z_spin_unlock_valid>
    db64:	b968      	cbnz	r0, db82 <mpsc_pbuf_alloc+0xfa>
    db66:	23c2      	movs	r3, #194	; 0xc2
    db68:	4a20      	ldr	r2, [pc, #128]	; (dbec <mpsc_pbuf_alloc+0x164>)
    db6a:	4924      	ldr	r1, [pc, #144]	; (dbfc <mpsc_pbuf_alloc+0x174>)
    db6c:	4821      	ldr	r0, [pc, #132]	; (dbf4 <mpsc_pbuf_alloc+0x16c>)
    db6e:	f01c fdb4 	bl	2a6da <assert_print>
    db72:	4629      	mov	r1, r5
    db74:	4822      	ldr	r0, [pc, #136]	; (dc00 <mpsc_pbuf_alloc+0x178>)
    db76:	f01c fdb0 	bl	2a6da <assert_print>
    db7a:	21c2      	movs	r1, #194	; 0xc2
    db7c:	481b      	ldr	r0, [pc, #108]	; (dbec <mpsc_pbuf_alloc+0x164>)
    db7e:	f01c fda5 	bl	2a6cc <assert_post_action>
    db82:	f38b 8811 	msr	BASEPRI, fp
    db86:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    db8a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    db8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
    db92:	f017 fd6d 	bl	25670 <z_impl_k_sem_take>
    db96:	4680      	mov	r8, r0
	__asm__ volatile(
    db98:	f04f 0320 	mov.w	r3, #32
    db9c:	f3ef 8911 	mrs	r9, BASEPRI
    dba0:	f383 8812 	msr	BASEPRI_MAX, r3
    dba4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dba8:	4628      	mov	r0, r5
    dbaa:	f017 fa65 	bl	25078 <z_spin_lock_valid>
    dbae:	2800      	cmp	r0, #0
    dbb0:	d087      	beq.n	dac2 <mpsc_pbuf_alloc+0x3a>
			if (err == 0) {
    dbb2:	fab8 f888 	clz	r8, r8
	z_spin_lock_set_owner(l);
    dbb6:	4628      	mov	r0, r5
    dbb8:	f017 fa7a 	bl	250b0 <z_spin_lock_set_owner>
    dbbc:	ea4f 1858 	mov.w	r8, r8, lsr #5
    dbc0:	e7a8      	b.n	db14 <mpsc_pbuf_alloc+0x8c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    dbc2:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    dbc4:	4620      	mov	r0, r4
    dbc6:	f10d 0313 	add.w	r3, sp, #19
    dbca:	f3c2 0240 	ubfx	r2, r2, #1, #1
    dbce:	f01c fde4 	bl	2a79a <drop_item_locked>
			cont = dropped_item != NULL;
    dbd2:	f1b0 0800 	subs.w	r8, r0, #0
    dbd6:	4606      	mov	r6, r0
    dbd8:	bf18      	it	ne
    dbda:	f04f 0801 	movne.w	r8, #1
    dbde:	e799      	b.n	db14 <mpsc_pbuf_alloc+0x8c>
		return NULL;
    dbe0:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    dbe4:	4650      	mov	r0, sl
    dbe6:	b007      	add	sp, #28
    dbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbec:	0003341a 	.word	0x0003341a
    dbf0:	00033473 	.word	0x00033473
    dbf4:	00032679 	.word	0x00032679
    dbf8:	00033488 	.word	0x00033488
    dbfc:	00033447 	.word	0x00033447
    dc00:	0003345e 	.word	0x0003345e

0000dc04 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc08:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    dc0a:	69c3      	ldr	r3, [r0, #28]
    dc0c:	4608      	mov	r0, r1
{
    dc0e:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
    dc10:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    dc12:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    dc16:	4607      	mov	r7, r0
    dc18:	f04f 0320 	mov.w	r3, #32
    dc1c:	f3ef 8811 	mrs	r8, BASEPRI
    dc20:	f383 8812 	msr	BASEPRI_MAX, r3
    dc24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dc28:	4628      	mov	r0, r5
    dc2a:	f017 fa25 	bl	25078 <z_spin_lock_valid>
    dc2e:	b968      	cbnz	r0, dc4c <mpsc_pbuf_commit+0x48>
    dc30:	2394      	movs	r3, #148	; 0x94
    dc32:	4a19      	ldr	r2, [pc, #100]	; (dc98 <mpsc_pbuf_commit+0x94>)
    dc34:	4919      	ldr	r1, [pc, #100]	; (dc9c <mpsc_pbuf_commit+0x98>)
    dc36:	481a      	ldr	r0, [pc, #104]	; (dca0 <mpsc_pbuf_commit+0x9c>)
    dc38:	f01c fd4f 	bl	2a6da <assert_print>
    dc3c:	4629      	mov	r1, r5
    dc3e:	4819      	ldr	r0, [pc, #100]	; (dca4 <mpsc_pbuf_commit+0xa0>)
    dc40:	f01c fd4b 	bl	2a6da <assert_print>
    dc44:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc46:	4814      	ldr	r0, [pc, #80]	; (dc98 <mpsc_pbuf_commit+0x94>)
    dc48:	f01c fd40 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
    dc4c:	4628      	mov	r0, r5
    dc4e:	f017 fa2f 	bl	250b0 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
    dc52:	7833      	ldrb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dc54:	463a      	mov	r2, r7
	item->hdr.valid = 1;
    dc56:	f043 0301 	orr.w	r3, r3, #1
    dc5a:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    dc5c:	6861      	ldr	r1, [r4, #4]
    dc5e:	4620      	mov	r0, r4
    dc60:	f01c fd6a 	bl	2a738 <idx_inc>
    dc64:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    dc66:	4620      	mov	r0, r4
    dc68:	f01c fd8a 	bl	2a780 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc6c:	4628      	mov	r0, r5
    dc6e:	f017 fa11 	bl	25094 <z_spin_unlock_valid>
    dc72:	b958      	cbnz	r0, dc8c <mpsc_pbuf_commit+0x88>
    dc74:	23c2      	movs	r3, #194	; 0xc2
    dc76:	4a08      	ldr	r2, [pc, #32]	; (dc98 <mpsc_pbuf_commit+0x94>)
    dc78:	490b      	ldr	r1, [pc, #44]	; (dca8 <mpsc_pbuf_commit+0xa4>)
    dc7a:	4809      	ldr	r0, [pc, #36]	; (dca0 <mpsc_pbuf_commit+0x9c>)
    dc7c:	f01c fd2d 	bl	2a6da <assert_print>
    dc80:	4629      	mov	r1, r5
    dc82:	480a      	ldr	r0, [pc, #40]	; (dcac <mpsc_pbuf_commit+0xa8>)
    dc84:	f01c fd29 	bl	2a6da <assert_print>
    dc88:	21c2      	movs	r1, #194	; 0xc2
    dc8a:	e7dc      	b.n	dc46 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
    dc8c:	f388 8811 	msr	BASEPRI, r8
    dc90:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    dc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc98:	0003341a 	.word	0x0003341a
    dc9c:	00033473 	.word	0x00033473
    dca0:	00032679 	.word	0x00032679
    dca4:	00033488 	.word	0x00033488
    dca8:	00033447 	.word	0x00033447
    dcac:	0003345e 	.word	0x0003345e

0000dcb0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    dcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dcb4:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
    dcb6:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
    dcba:	f04f 0320 	mov.w	r3, #32
    dcbe:	f3ef 8811 	mrs	r8, BASEPRI
    dcc2:	f383 8812 	msr	BASEPRI_MAX, r3
    dcc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dcca:	4638      	mov	r0, r7
    dccc:	f017 f9d4 	bl	25078 <z_spin_lock_valid>
    dcd0:	4605      	mov	r5, r0
    dcd2:	b968      	cbnz	r0, dcf0 <mpsc_pbuf_claim+0x40>
    dcd4:	2394      	movs	r3, #148	; 0x94
    dcd6:	4a33      	ldr	r2, [pc, #204]	; (dda4 <mpsc_pbuf_claim+0xf4>)
    dcd8:	4933      	ldr	r1, [pc, #204]	; (dda8 <mpsc_pbuf_claim+0xf8>)
    dcda:	4834      	ldr	r0, [pc, #208]	; (ddac <mpsc_pbuf_claim+0xfc>)
    dcdc:	f01c fcfd 	bl	2a6da <assert_print>
    dce0:	4639      	mov	r1, r7
    dce2:	4833      	ldr	r0, [pc, #204]	; (ddb0 <mpsc_pbuf_claim+0x100>)
    dce4:	f01c fcf9 	bl	2a6da <assert_print>
    dce8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dcea:	482e      	ldr	r0, [pc, #184]	; (dda4 <mpsc_pbuf_claim+0xf4>)
    dcec:	f01c fcee 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
    dcf0:	4638      	mov	r0, r7
    dcf2:	f017 f9dd 	bl	250b0 <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    dcf6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    dcfa:	429a      	cmp	r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    dcfc:	bf88      	it	hi
    dcfe:	6a63      	ldrhi	r3, [r4, #36]	; 0x24
    dd00:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    dd02:	2b00      	cmp	r3, #0
    dd04:	d03f      	beq.n	dd86 <mpsc_pbuf_claim+0xd6>
		item = (union mpsc_pbuf_generic *)
    dd06:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
    dd08:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		item = (union mpsc_pbuf_generic *)
    dd0c:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    dd10:	f013 0003 	ands.w	r0, r3, #3
    dd14:	d03a      	beq.n	dd8c <mpsc_pbuf_claim+0xdc>
	if (item->hdr.busy && !item->hdr.valid) {
    dd16:	2802      	cmp	r0, #2
    dd18:	d103      	bne.n	dd22 <mpsc_pbuf_claim+0x72>
		return item->skip.len;
    dd1a:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    dd1e:	08b6      	lsrs	r6, r6, #2
    dd20:	d105      	bne.n	dd2e <mpsc_pbuf_claim+0x7e>
    dd22:	07d8      	lsls	r0, r3, #31
    dd24:	d41f      	bmi.n	dd66 <mpsc_pbuf_claim+0xb6>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    dd26:	4648      	mov	r0, r9
    dd28:	69e3      	ldr	r3, [r4, #28]
    dd2a:	4798      	blx	r3
    dd2c:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    dd2e:	68a1      	ldr	r1, [r4, #8]
    dd30:	4632      	mov	r2, r6
    dd32:	4620      	mov	r0, r4
    dd34:	f01c fd00 	bl	2a738 <idx_inc>
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    dd38:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    dd3a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    dd3c:	4632      	mov	r2, r6
    dd3e:	4620      	mov	r0, r4
    dd40:	f01c fcfa 	bl	2a738 <idx_inc>
				buffer->rd_idx =
    dd44:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd46:	4638      	mov	r0, r7
    dd48:	f017 f9a4 	bl	25094 <z_spin_unlock_valid>
    dd4c:	bb00      	cbnz	r0, dd90 <mpsc_pbuf_claim+0xe0>
    dd4e:	23c2      	movs	r3, #194	; 0xc2
    dd50:	4a14      	ldr	r2, [pc, #80]	; (dda4 <mpsc_pbuf_claim+0xf4>)
    dd52:	4918      	ldr	r1, [pc, #96]	; (ddb4 <mpsc_pbuf_claim+0x104>)
    dd54:	4815      	ldr	r0, [pc, #84]	; (ddac <mpsc_pbuf_claim+0xfc>)
    dd56:	f01c fcc0 	bl	2a6da <assert_print>
    dd5a:	4639      	mov	r1, r7
    dd5c:	4816      	ldr	r0, [pc, #88]	; (ddb8 <mpsc_pbuf_claim+0x108>)
    dd5e:	f01c fcbc 	bl	2a6da <assert_print>
    dd62:	21c2      	movs	r1, #194	; 0xc2
    dd64:	e7c1      	b.n	dcea <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
    dd66:	f043 0302 	orr.w	r3, r3, #2
    dd6a:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    dd6e:	69e3      	ldr	r3, [r4, #28]
    dd70:	4648      	mov	r0, r9
    dd72:	68a5      	ldr	r5, [r4, #8]
    dd74:	4798      	blx	r3
    dd76:	4629      	mov	r1, r5
    dd78:	4602      	mov	r2, r0
    dd7a:	4620      	mov	r0, r4
    dd7c:	f01c fcdc 	bl	2a738 <idx_inc>
		cont = false;
    dd80:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
    dd82:	60a0      	str	r0, [r4, #8]
    dd84:	e7df      	b.n	dd46 <mpsc_pbuf_claim+0x96>
		cont = false;
    dd86:	461d      	mov	r5, r3
			item = NULL;
    dd88:	46a9      	mov	r9, r5
    dd8a:	e7dc      	b.n	dd46 <mpsc_pbuf_claim+0x96>
		cont = false;
    dd8c:	4605      	mov	r5, r0
    dd8e:	e7fb      	b.n	dd88 <mpsc_pbuf_claim+0xd8>
	__asm__ volatile(
    dd90:	f388 8811 	msr	BASEPRI, r8
    dd94:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    dd98:	2d00      	cmp	r5, #0
    dd9a:	d18e      	bne.n	dcba <mpsc_pbuf_claim+0xa>

	return item;
}
    dd9c:	4648      	mov	r0, r9
    dd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dda2:	bf00      	nop
    dda4:	0003341a 	.word	0x0003341a
    dda8:	00033473 	.word	0x00033473
    ddac:	00032679 	.word	0x00032679
    ddb0:	00033488 	.word	0x00033488
    ddb4:	00033447 	.word	0x00033447
    ddb8:	0003345e 	.word	0x0003345e

0000ddbc <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddc0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    ddc2:	69c3      	ldr	r3, [r0, #28]
    ddc4:	4608      	mov	r0, r1
{
    ddc6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    ddc8:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    ddca:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
    ddce:	4607      	mov	r7, r0
	__asm__ volatile(
    ddd0:	f04f 0320 	mov.w	r3, #32
    ddd4:	f3ef 8811 	mrs	r8, BASEPRI
    ddd8:	f383 8812 	msr	BASEPRI_MAX, r3
    dddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    dde0:	4630      	mov	r0, r6
    dde2:	f017 f949 	bl	25078 <z_spin_lock_valid>
    dde6:	b968      	cbnz	r0, de04 <mpsc_pbuf_free+0x48>
    dde8:	2394      	movs	r3, #148	; 0x94
    ddea:	4a23      	ldr	r2, [pc, #140]	; (de78 <mpsc_pbuf_free+0xbc>)
    ddec:	4923      	ldr	r1, [pc, #140]	; (de7c <mpsc_pbuf_free+0xc0>)
    ddee:	4824      	ldr	r0, [pc, #144]	; (de80 <mpsc_pbuf_free+0xc4>)
    ddf0:	f01c fc73 	bl	2a6da <assert_print>
    ddf4:	4631      	mov	r1, r6
    ddf6:	4823      	ldr	r0, [pc, #140]	; (de84 <mpsc_pbuf_free+0xc8>)
    ddf8:	f01c fc6f 	bl	2a6da <assert_print>
    ddfc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ddfe:	481e      	ldr	r0, [pc, #120]	; (de78 <mpsc_pbuf_free+0xbc>)
    de00:	f01c fc64 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
    de04:	4630      	mov	r0, r6
    de06:	f017 f953 	bl	250b0 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    de0a:	782b      	ldrb	r3, [r5, #0]
    de0c:	f36f 0300 	bfc	r3, #0, #1
    de10:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    de12:	6923      	ldr	r3, [r4, #16]
    de14:	079b      	lsls	r3, r3, #30
    de16:	d505      	bpl.n	de24 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    de18:	68e2      	ldr	r2, [r4, #12]
    de1a:	6a23      	ldr	r3, [r4, #32]
    de1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    de20:	429d      	cmp	r5, r3
    de22:	d119      	bne.n	de58 <mpsc_pbuf_free+0x9c>
		witem->hdr.busy = 0;
    de24:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    de26:	463a      	mov	r2, r7
		witem->hdr.busy = 0;
    de28:	f36f 0341 	bfc	r3, #1, #1
    de2c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    de2e:	68e1      	ldr	r1, [r4, #12]
    de30:	4620      	mov	r0, r4
    de32:	f01c fc81 	bl	2a738 <idx_inc>
    de36:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    de38:	4630      	mov	r0, r6
    de3a:	f017 f92b 	bl	25094 <z_spin_unlock_valid>
    de3e:	b980      	cbnz	r0, de62 <mpsc_pbuf_free+0xa6>
    de40:	23c2      	movs	r3, #194	; 0xc2
    de42:	4a0d      	ldr	r2, [pc, #52]	; (de78 <mpsc_pbuf_free+0xbc>)
    de44:	4910      	ldr	r1, [pc, #64]	; (de88 <mpsc_pbuf_free+0xcc>)
    de46:	480e      	ldr	r0, [pc, #56]	; (de80 <mpsc_pbuf_free+0xc4>)
    de48:	f01c fc47 	bl	2a6da <assert_print>
    de4c:	4631      	mov	r1, r6
    de4e:	480f      	ldr	r0, [pc, #60]	; (de8c <mpsc_pbuf_free+0xd0>)
    de50:	f01c fc43 	bl	2a6da <assert_print>
    de54:	21c2      	movs	r1, #194	; 0xc2
    de56:	e7d2      	b.n	ddfe <mpsc_pbuf_free+0x42>
	} else {
		witem->skip.len = wlen;
    de58:	682b      	ldr	r3, [r5, #0]
    de5a:	f367 039f 	bfi	r3, r7, #2, #30
    de5e:	602b      	str	r3, [r5, #0]
    de60:	e7ea      	b.n	de38 <mpsc_pbuf_free+0x7c>
	__asm__ volatile(
    de62:	f388 8811 	msr	BASEPRI, r8
    de66:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    de6a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    de6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de72:	f017 bbb9 	b.w	255e8 <z_impl_k_sem_give>
    de76:	bf00      	nop
    de78:	0003341a 	.word	0x0003341a
    de7c:	00033473 	.word	0x00033473
    de80:	00032679 	.word	0x00032679
    de84:	00033488 	.word	0x00033488
    de88:	00033447 	.word	0x00033447
    de8c:	0003345e 	.word	0x0003345e

0000de90 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    de90:	b148      	cbz	r0, dea6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    de92:	4b05      	ldr	r3, [pc, #20]	; (dea8 <arch_busy_wait+0x18>)
    de94:	4a05      	ldr	r2, [pc, #20]	; (deac <arch_busy_wait+0x1c>)
    de96:	681b      	ldr	r3, [r3, #0]
    de98:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    de9c:	4358      	muls	r0, r3
    de9e:	4b04      	ldr	r3, [pc, #16]	; (deb0 <arch_busy_wait+0x20>)
    dea0:	f043 0301 	orr.w	r3, r3, #1
    dea4:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    dea6:	4770      	bx	lr
    dea8:	20008694 	.word	0x20008694
    deac:	000f4240 	.word	0x000f4240
    deb0:	00031750 	.word	0x00031750

0000deb4 <ppi_ipc_to_rtc.isra.0>:
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    deb4:	2a0f      	cmp	r2, #15
/* Setup or clear connection from IPC_RECEIVE to RTC_CAPTURE
 *
 * @param channels Details about channels
 * @param setup If true connection is setup, else it is cleared.
 */
static void ppi_ipc_to_rtc(union rtc_sync_channels channels, bool setup)
    deb6:	b570      	push	{r4, r5, r6, lr}
    deb8:	4605      	mov	r5, r0
    deba:	461e      	mov	r6, r3
    debc:	4608      	mov	r0, r1
    debe:	d90b      	bls.n	ded8 <ppi_ipc_to_rtc.isra.0+0x24>
    dec0:	491d      	ldr	r1, [pc, #116]	; (df38 <ppi_ipc_to_rtc.isra.0+0x84>)
    dec2:	481e      	ldr	r0, [pc, #120]	; (df3c <ppi_ipc_to_rtc.isra.0+0x88>)
    dec4:	f240 13e7 	movw	r3, #487	; 0x1e7
    dec8:	4a1d      	ldr	r2, [pc, #116]	; (df40 <ppi_ipc_to_rtc.isra.0+0x8c>)
    deca:	f01c fc06 	bl	2a6da <assert_print>
    dece:	f240 11e7 	movw	r1, #487	; 0x1e7
    ded2:	481b      	ldr	r0, [pc, #108]	; (df40 <ppi_ipc_to_rtc.isra.0+0x8c>)
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    ded4:	f01c fbfa 	bl	2a6cc <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    ded8:	0094      	lsls	r4, r2, #2
{
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    deda:	f010 fa39 	bl	1e350 <z_nrf_rtc_timer_capture_task_address_get>

	if (setup) {
    dede:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    dee2:	b1ae      	cbz	r6, df10 <ppi_ipc_to_rtc.isra.0+0x5c>
    dee4:	b950      	cbnz	r0, defc <ppi_ipc_to_rtc.isra.0+0x48>
    dee6:	4917      	ldr	r1, [pc, #92]	; (df44 <ppi_ipc_to_rtc.isra.0+0x90>)
    dee8:	f240 234e 	movw	r3, #590	; 0x24e
    deec:	4a16      	ldr	r2, [pc, #88]	; (df48 <ppi_ipc_to_rtc.isra.0+0x94>)
    deee:	4813      	ldr	r0, [pc, #76]	; (df3c <ppi_ipc_to_rtc.isra.0+0x88>)
    def0:	f01c fbf3 	bl	2a6da <assert_print>
    def4:	f240 214e 	movw	r1, #590	; 0x24e
    def8:	4813      	ldr	r0, [pc, #76]	; (df48 <ppi_ipc_to_rtc.isra.0+0x94>)
    defa:	e7eb      	b.n	ded4 <ppi_ipc_to_rtc.isra.0+0x20>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    defc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    df00:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    df04:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    df08:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    df0c:	6015      	str	r5, [r2, #0]
		nrf_ipc_publish_set(NRF_IPC, ipc_evt, channels.ch.ppi);
	} else {
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
		nrf_ipc_publish_clear(NRF_IPC, ipc_evt);
	}
}
    df0e:	bd70      	pop	{r4, r5, r6, pc}
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    df10:	b948      	cbnz	r0, df26 <ppi_ipc_to_rtc.isra.0+0x72>
    df12:	490c      	ldr	r1, [pc, #48]	; (df44 <ppi_ipc_to_rtc.isra.0+0x90>)
    df14:	f240 2363 	movw	r3, #611	; 0x263
    df18:	4a0b      	ldr	r2, [pc, #44]	; (df48 <ppi_ipc_to_rtc.isra.0+0x94>)
    df1a:	4808      	ldr	r0, [pc, #32]	; (df3c <ppi_ipc_to_rtc.isra.0+0x88>)
    df1c:	f01c fbdd 	bl	2a6da <assert_print>
    df20:	f240 2163 	movw	r1, #611	; 0x263
    df24:	e7e8      	b.n	def8 <ppi_ipc_to_rtc.isra.0+0x44>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    df26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    df2a:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    df2e:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
    df32:	6016      	str	r6, [r2, #0]
    df34:	e7eb      	b.n	df0e <ppi_ipc_to_rtc.isra.0+0x5a>
    df36:	bf00      	nop
    df38:	0003353e 	.word	0x0003353e
    df3c:	00032679 	.word	0x00032679
    df40:	0003350c 	.word	0x0003350c
    df44:	00033581 	.word	0x00033581
    df48:	00033549 	.word	0x00033549

0000df4c <sync_rtc_setup>:
	return mbox_set_enabled(&channel, true);
}

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    df4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df4e:	b083      	sub	sp, #12
    df50:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    df52:	1d38      	adds	r0, r7, #4
    df54:	f011 f8a4 	bl	1f0a0 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    df58:	4b24      	ldr	r3, [pc, #144]	; (dfec <sync_rtc_setup+0xa0>)
    df5a:	4298      	cmp	r0, r3
    df5c:	d143      	bne.n	dfe6 <sync_rtc_setup+0x9a>
		rv = -ENODEV;
		goto bail;
	}

	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    df5e:	f010 fbeb 	bl	1e738 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    df62:	1e04      	subs	r4, r0, #0
    df64:	da13      	bge.n	df8e <sync_rtc_setup+0x42>
		nrfx_dppi_channel_free(channels.ch.ppi);
    df66:	7938      	ldrb	r0, [r7, #4]
    df68:	f011 f8a0 	bl	1f0ac <nrfx_dppi_channel_free>
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    df6c:	466d      	mov	r5, sp
    df6e:	b088      	sub	sp, #32
    df70:	466a      	mov	r2, sp
    df72:	4b1f      	ldr	r3, [pc, #124]	; (dff0 <sync_rtc_setup+0xa4>)
    df74:	e9c2 3405 	strd	r3, r4, [r2, #20]
    df78:	2303      	movs	r3, #3
    df7a:	f842 3f10 	str.w	r3, [r2, #16]!
    df7e:	2300      	movs	r3, #0
    df80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    df84:	481b      	ldr	r0, [pc, #108]	; (dff4 <sync_rtc_setup+0xa8>)
    df86:	f000 fc93 	bl	e8b0 <z_impl_z_log_msg_static_create>
    df8a:	46ad      	mov	sp, r5
	}

	return rv;
    df8c:	e027      	b.n	dfde <sync_rtc_setup+0x92>
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df8e:	f640 0307 	movw	r3, #2055	; 0x807
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
	const struct mbox_driver_api *api =
    df92:	4d19      	ldr	r5, [pc, #100]	; (dff8 <sync_rtc_setup+0xac>)
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    df94:	717c      	strb	r4, [r7, #5]
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->register_callback == NULL) {
    df96:	68ae      	ldr	r6, [r5, #8]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    df98:	80fb      	strh	r3, [r7, #6]
    df9a:	6874      	ldr	r4, [r6, #4]
	rv = mbox_rx_init((void *)channels.raw);
    df9c:	687b      	ldr	r3, [r7, #4]
    df9e:	b914      	cbnz	r4, dfa6 <sync_rtc_setup+0x5a>
		return -ENOSYS;
    dfa0:	f06f 0457 	mvn.w	r4, #87	; 0x57
    dfa4:	e7e2      	b.n	df6c <sync_rtc_setup+0x20>
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    dfa6:	2108      	movs	r1, #8
    dfa8:	4628      	mov	r0, r5
    dfaa:	4a14      	ldr	r2, [pc, #80]	; (dffc <sync_rtc_setup+0xb0>)
    dfac:	47a0      	blx	r4
	if (err < 0) {
    dfae:	1e04      	subs	r4, r0, #0
    dfb0:	dbdc      	blt.n	df6c <sync_rtc_setup+0x20>
static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;

	if (api->set_enabled == NULL) {
    dfb2:	6933      	ldr	r3, [r6, #16]
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d0f3      	beq.n	dfa0 <sync_rtc_setup+0x54>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    dfb8:	2201      	movs	r2, #1
    dfba:	2108      	movs	r1, #8
    dfbc:	4628      	mov	r0, r5
    dfbe:	4798      	blx	r3
	if (rv < 0) {
    dfc0:	1e04      	subs	r4, r0, #0
    dfc2:	dbd3      	blt.n	df6c <sync_rtc_setup+0x20>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    dfc4:	2301      	movs	r3, #1
    dfc6:	7938      	ldrb	r0, [r7, #4]
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    dfc8:	4a0d      	ldr	r2, [pc, #52]	; (e000 <sync_rtc_setup+0xb4>)
    dfca:	fa03 f100 	lsl.w	r1, r3, r0
    dfce:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    dfd2:	79fa      	ldrb	r2, [r7, #7]
    dfd4:	7979      	ldrb	r1, [r7, #5]
    dfd6:	f7ff ff6d 	bl	deb4 <ppi_ipc_to_rtc.isra.0>
	if (rv != 0) {
    dfda:	2c00      	cmp	r4, #0
    dfdc:	d1c6      	bne.n	df6c <sync_rtc_setup+0x20>
}
    dfde:	4620      	mov	r0, r4
    dfe0:	370c      	adds	r7, #12
    dfe2:	46bd      	mov	sp, r7
    dfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rv = -ENODEV;
    dfe6:	f06f 0412 	mvn.w	r4, #18
    dfea:	e7bf      	b.n	df6c <sync_rtc_setup+0x20>
    dfec:	0bad0000 	.word	0x0bad0000
    dff0:	00033585 	.word	0x00033585
    dff4:	000315fc 	.word	0x000315fc
    dff8:	0003102c 	.word	0x0003102c
    dffc:	0000e0b5 	.word	0x0000e0b5
    e000:	40017000 	.word	0x40017000

0000e004 <rtc_cb>:
{
    e004:	b570      	push	{r4, r5, r6, lr}
    e006:	9e04      	ldr	r6, [sp, #16]
    e008:	f3c6 4407 	ubfx	r4, r6, #16, #8
static void ppi_rtc_to_ipc(union rtc_sync_channels channels, bool setup)
    e00c:	b2f5      	uxtb	r5, r6
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e00e:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e012:	4630      	mov	r0, r6
    e014:	f010 f982 	bl	1e31c <z_nrf_rtc_timer_compare_evt_address_get>
    NRFX_ASSERT(index < IPC_CH_NUM);
    e018:	2c0f      	cmp	r4, #15
    e01a:	d90b      	bls.n	e034 <rtc_cb+0x30>
    e01c:	491b      	ldr	r1, [pc, #108]	; (e08c <rtc_cb+0x88>)
    e01e:	481c      	ldr	r0, [pc, #112]	; (e090 <rtc_cb+0x8c>)
    e020:	f240 13e1 	movw	r3, #481	; 0x1e1
    e024:	4a1b      	ldr	r2, [pc, #108]	; (e094 <rtc_cb+0x90>)
    e026:	f01c fb58 	bl	2a6da <assert_print>
    e02a:	f240 11e1 	movw	r1, #481	; 0x1e1
    e02e:	4819      	ldr	r0, [pc, #100]	; (e094 <rtc_cb+0x90>)
    NRFX_ASSERT(eep);
    e030:	f01c fb4c 	bl	2a6cc <assert_post_action>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e034:	00a4      	lsls	r4, r4, #2
    e036:	b2e4      	uxtb	r4, r4
    e038:	b950      	cbnz	r0, e050 <rtc_cb+0x4c>
    e03a:	4917      	ldr	r1, [pc, #92]	; (e098 <rtc_cb+0x94>)
    e03c:	4814      	ldr	r0, [pc, #80]	; (e090 <rtc_cb+0x8c>)
    e03e:	f44f 7317 	mov.w	r3, #604	; 0x25c
    e042:	4a16      	ldr	r2, [pc, #88]	; (e09c <rtc_cb+0x98>)
    e044:	f01c fb49 	bl	2a6da <assert_print>
    e048:	f44f 7117 	mov.w	r1, #604	; 0x25c
    e04c:	4813      	ldr	r0, [pc, #76]	; (e09c <rtc_cb+0x98>)
    e04e:	e7ef      	b.n	e030 <rtc_cb+0x2c>
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    e050:	2200      	movs	r2, #0
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    e052:	4b13      	ldr	r3, [pc, #76]	; (e0a0 <rtc_cb+0x9c>)
    e054:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    e058:	511a      	str	r2, [r3, r4]
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    e05a:	2301      	movs	r3, #1
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    e05c:	4a11      	ldr	r2, [pc, #68]	; (e0a4 <rtc_cb+0xa0>)
    e05e:	40ab      	lsls	r3, r5
    e060:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    e064:	4630      	mov	r0, r6
    e066:	f010 fb85 	bl	1e774 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    e06a:	4628      	mov	r0, r5
    e06c:	f011 f81e 	bl	1f0ac <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    e070:	4b0d      	ldr	r3, [pc, #52]	; (e0a8 <rtc_cb+0xa4>)
    e072:	4298      	cmp	r0, r3
    e074:	d008      	beq.n	e088 <rtc_cb+0x84>
    e076:	490d      	ldr	r1, [pc, #52]	; (e0ac <rtc_cb+0xa8>)
    e078:	4805      	ldr	r0, [pc, #20]	; (e090 <rtc_cb+0x8c>)
    e07a:	2374      	movs	r3, #116	; 0x74
    e07c:	4a0c      	ldr	r2, [pc, #48]	; (e0b0 <rtc_cb+0xac>)
    e07e:	f01c fb2c 	bl	2a6da <assert_print>
    e082:	2174      	movs	r1, #116	; 0x74
    e084:	480a      	ldr	r0, [pc, #40]	; (e0b0 <rtc_cb+0xac>)
    e086:	e7d3      	b.n	e030 <rtc_cb+0x2c>
}
    e088:	bd70      	pop	{r4, r5, r6, pc}
    e08a:	bf00      	nop
    e08c:	0003353e 	.word	0x0003353e
    e090:	00032679 	.word	0x00032679
    e094:	0003350c 	.word	0x0003350c
    e098:	000335ad 	.word	0x000335ad
    e09c:	00033549 	.word	0x00033549
    e0a0:	4002a080 	.word	0x4002a080
    e0a4:	40017000 	.word	0x40017000
    e0a8:	0bad0000 	.word	0x0bad0000
    e0ac:	000335e8 	.word	0x000335e8
    e0b0:	000335b1 	.word	0x000335b1

0000e0b4 <mbox_callback>:
{
    e0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e0b8:	4614      	mov	r4, r2
	if (api->set_enabled == NULL) {
    e0ba:	6883      	ldr	r3, [r0, #8]
    e0bc:	691b      	ldr	r3, [r3, #16]
    e0be:	b94b      	cbnz	r3, e0d4 <mbox_callback+0x20>
	__ASSERT_NO_MSG(err == 0);
    e0c0:	4927      	ldr	r1, [pc, #156]	; (e160 <mbox_callback+0xac>)
    e0c2:	4828      	ldr	r0, [pc, #160]	; (e164 <mbox_callback+0xb0>)
    e0c4:	23ca      	movs	r3, #202	; 0xca
    e0c6:	4a28      	ldr	r2, [pc, #160]	; (e168 <mbox_callback+0xb4>)
    e0c8:	f01c fb07 	bl	2a6da <assert_print>
    e0cc:	21ca      	movs	r1, #202	; 0xca
    e0ce:	4826      	ldr	r0, [pc, #152]	; (e168 <mbox_callback+0xb4>)
    NRFX_ASSERT(index < IPC_CH_NUM);
    e0d0:	f01c fafc 	bl	2a6cc <assert_post_action>
	return api->set_enabled(channel->dev, channel->id, enable);
    e0d4:	2200      	movs	r2, #0
    e0d6:	4798      	blx	r3
    e0d8:	4606      	mov	r6, r0
    e0da:	2800      	cmp	r0, #0
    e0dc:	d1f0      	bne.n	e0c0 <mbox_callback+0xc>
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e0de:	f3c4 2907 	ubfx	r9, r4, #8, #8
    e0e2:	4648      	mov	r0, r9
    e0e4:	f010 f94e 	bl	1e384 <z_nrf_rtc_timer_compare_read>
	ppi_ipc_to_rtc(channels, false);
    e0e8:	fa5f f884 	uxtb.w	r8, r4
    e0ec:	4633      	mov	r3, r6
    e0ee:	4649      	mov	r1, r9
    e0f0:	0e22      	lsrs	r2, r4, #24
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    e0f2:	4607      	mov	r7, r0
	ppi_ipc_to_rtc(channels, false);
    e0f4:	4640      	mov	r0, r8
    e0f6:	f7ff fedd 	bl	deb4 <ppi_ipc_to_rtc.isra.0>
		ppi_rtc_to_ipc(channels, true);
    e0fa:	f3c4 4507 	ubfx	r5, r4, #16, #8
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    e0fe:	4648      	mov	r0, r9
    e100:	f010 f90c 	bl	1e31c <z_nrf_rtc_timer_compare_evt_address_get>
    e104:	2d0f      	cmp	r5, #15
    e106:	d90a      	bls.n	e11e <mbox_callback+0x6a>
    e108:	4918      	ldr	r1, [pc, #96]	; (e16c <mbox_callback+0xb8>)
    e10a:	4816      	ldr	r0, [pc, #88]	; (e164 <mbox_callback+0xb0>)
    e10c:	f240 13e1 	movw	r3, #481	; 0x1e1
    e110:	4a17      	ldr	r2, [pc, #92]	; (e170 <mbox_callback+0xbc>)
    e112:	f01c fae2 	bl	2a6da <assert_print>
    e116:	f240 11e1 	movw	r1, #481	; 0x1e1
    e11a:	4815      	ldr	r0, [pc, #84]	; (e170 <mbox_callback+0xbc>)
    e11c:	e7d8      	b.n	e0d0 <mbox_callback+0x1c>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e11e:	4a15      	ldr	r2, [pc, #84]	; (e174 <mbox_callback+0xc0>)
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    e120:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e122:	b2ed      	uxtb	r5, r5
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    e124:	f048 4300 	orr.w	r3, r8, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    e128:	5153      	str	r3, [r2, r5]
    NRFX_ASSERT(eep);
    e12a:	b950      	cbnz	r0, e142 <mbox_callback+0x8e>
    e12c:	4912      	ldr	r1, [pc, #72]	; (e178 <mbox_callback+0xc4>)
    e12e:	480d      	ldr	r0, [pc, #52]	; (e164 <mbox_callback+0xb0>)
    e130:	f44f 7312 	mov.w	r3, #584	; 0x248
    e134:	4a11      	ldr	r2, [pc, #68]	; (e17c <mbox_callback+0xc8>)
    e136:	f01c fad0 	bl	2a6da <assert_print>
    e13a:	f44f 7112 	mov.w	r1, #584	; 0x248
    e13e:	480f      	ldr	r0, [pc, #60]	; (e17c <mbox_callback+0xc8>)
    e140:	e7c6      	b.n	e0d0 <mbox_callback+0x1c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    e142:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    e146:	4b0e      	ldr	r3, [pc, #56]	; (e180 <mbox_callback+0xcc>)
    e148:	f107 0232 	add.w	r2, r7, #50	; 0x32
    e14c:	9300      	str	r3, [sp, #0]
    e14e:	4648      	mov	r0, r9
    e150:	4633      	mov	r3, r6
    e152:	9401      	str	r4, [sp, #4]
    e154:	0052      	lsls	r2, r2, #1
    e156:	f010 f9ff 	bl	1e558 <z_nrf_rtc_timer_set>
}
    e15a:	b003      	add	sp, #12
    e15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e160:	000334ff 	.word	0x000334ff
    e164:	00032679 	.word	0x00032679
    e168:	000335b1 	.word	0x000335b1
    e16c:	0003353e 	.word	0x0003353e
    e170:	0003350c 	.word	0x0003350c
    e174:	4002a080 	.word	0x4002a080
    e178:	000335ad 	.word	0x000335ad
    e17c:	00033549 	.word	0x00033549
    e180:	0000e005 	.word	0x0000e005

0000e184 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e184:	f020 bc9f 	b.w	2eac6 <SystemInit>

0000e188 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
    e188:	b513      	push	{r0, r1, r4, lr}
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
    e18a:	aa01      	add	r2, sp, #4
    e18c:	f020 fc82 	bl	2ea94 <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
    e190:	4604      	mov	r4, r0
    e192:	b168      	cbz	r0, e1b0 <soc_secure_gpio_pin_mcu_select+0x28>
    e194:	2316      	movs	r3, #22
    e196:	4a0e      	ldr	r2, [pc, #56]	; (e1d0 <soc_secure_gpio_pin_mcu_select+0x48>)
    e198:	490e      	ldr	r1, [pc, #56]	; (e1d4 <soc_secure_gpio_pin_mcu_select+0x4c>)
    e19a:	480f      	ldr	r0, [pc, #60]	; (e1d8 <soc_secure_gpio_pin_mcu_select+0x50>)
    e19c:	f01c fa9d 	bl	2a6da <assert_print>
    e1a0:	4621      	mov	r1, r4
    e1a2:	480e      	ldr	r0, [pc, #56]	; (e1dc <soc_secure_gpio_pin_mcu_select+0x54>)
    e1a4:	f01c fa99 	bl	2a6da <assert_print>
    e1a8:	2116      	movs	r1, #22
	__ASSERT(result == 0, "GPIO service error (%d)", result);
    e1aa:	4809      	ldr	r0, [pc, #36]	; (e1d0 <soc_secure_gpio_pin_mcu_select+0x48>)
    e1ac:	f01c fa8e 	bl	2a6cc <assert_post_action>
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	b15b      	cbz	r3, e1cc <soc_secure_gpio_pin_mcu_select+0x44>
    e1b4:	2317      	movs	r3, #23
    e1b6:	4a06      	ldr	r2, [pc, #24]	; (e1d0 <soc_secure_gpio_pin_mcu_select+0x48>)
    e1b8:	4909      	ldr	r1, [pc, #36]	; (e1e0 <soc_secure_gpio_pin_mcu_select+0x58>)
    e1ba:	4807      	ldr	r0, [pc, #28]	; (e1d8 <soc_secure_gpio_pin_mcu_select+0x50>)
    e1bc:	f01c fa8d 	bl	2a6da <assert_print>
    e1c0:	9901      	ldr	r1, [sp, #4]
    e1c2:	4808      	ldr	r0, [pc, #32]	; (e1e4 <soc_secure_gpio_pin_mcu_select+0x5c>)
    e1c4:	f01c fa89 	bl	2a6da <assert_print>
    e1c8:	2117      	movs	r1, #23
    e1ca:	e7ee      	b.n	e1aa <soc_secure_gpio_pin_mcu_select+0x22>
}
    e1cc:	b002      	add	sp, #8
    e1ce:	bd10      	pop	{r4, pc}
    e1d0:	00033605 	.word	0x00033605
    e1d4:	0003363f 	.word	0x0003363f
    e1d8:	00032679 	.word	0x00032679
    e1dc:	0003365f 	.word	0x0003365f
    e1e0:	00033679 	.word	0x00033679
    e1e4:	00033685 	.word	0x00033685

0000e1e8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e1e8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    e1ea:	2200      	movs	r2, #0
{
    e1ec:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    e1ee:	490f      	ldr	r1, [pc, #60]	; (e22c <enable_logger+0x44>)
    e1f0:	480f      	ldr	r0, [pc, #60]	; (e230 <enable_logger+0x48>)
    e1f2:	f022 f8db 	bl	303ac <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e1f6:	2200      	movs	r2, #0
    e1f8:	2300      	movs	r3, #0
    e1fa:	2400      	movs	r4, #0
    e1fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e200:	230e      	movs	r3, #14
    e202:	4d0c      	ldr	r5, [pc, #48]	; (e234 <enable_logger+0x4c>)
    e204:	e9cd 3403 	strd	r3, r4, [sp, #12]
    e208:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e20c:	4628      	mov	r0, r5
    e20e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    e212:	4b09      	ldr	r3, [pc, #36]	; (e238 <enable_logger+0x50>)
    e214:	4909      	ldr	r1, [pc, #36]	; (e23c <enable_logger+0x54>)
    e216:	9400      	str	r4, [sp, #0]
    e218:	f016 fe64 	bl	24ee4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e21c:	4908      	ldr	r1, [pc, #32]	; (e240 <enable_logger+0x58>)
    e21e:	4628      	mov	r0, r5
    e220:	f021 ffa8 	bl	30174 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    e224:	4620      	mov	r0, r4
    e226:	b009      	add	sp, #36	; 0x24
    e228:	bd30      	pop	{r4, r5, pc}
    e22a:	bf00      	nop
    e22c:	0000e389 	.word	0x0000e389
    e230:	200096e8 	.word	0x200096e8
    e234:	20009258 	.word	0x20009258
    e238:	0000e659 	.word	0x0000e659
    e23c:	20031688 	.word	0x20031688
    e240:	0003369f 	.word	0x0003369f

0000e244 <activate_foreach_backend>:
{
    e244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e248:	4604      	mov	r4, r0
	while (mask_cpy) {
    e24a:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    e24c:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e250:	f8df 8050 	ldr.w	r8, [pc, #80]	; e2a4 <activate_foreach_backend+0x60>
	while (mask_cpy) {
    e254:	b914      	cbnz	r4, e25c <activate_foreach_backend+0x18>
}
    e256:	4638      	mov	r0, r7
    e258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    e25c:	fa94 f5a4 	rbit	r5, r4
    e260:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    e264:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e268:	012e      	lsls	r6, r5, #4
    e26a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    e26e:	ea6f 0a03 	mvn.w	sl, r3
    e272:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e276:	7b2b      	ldrb	r3, [r5, #12]
    e278:	2b00      	cmp	r3, #0
    e27a:	d0eb      	beq.n	e254 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    e27c:	f858 3006 	ldr.w	r3, [r8, r6]
    e280:	691b      	ldr	r3, [r3, #16]
    e282:	b94b      	cbnz	r3, e298 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    e284:	4446      	add	r6, r8
			log_backend_enable(backend,
    e286:	6873      	ldr	r3, [r6, #4]
    e288:	2204      	movs	r2, #4
    e28a:	4628      	mov	r0, r5
    e28c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    e28e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    e292:	f000 fae7 	bl	e864 <log_backend_enable>
    e296:	e7dd      	b.n	e254 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    e298:	4628      	mov	r0, r5
    e29a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    e29c:	2800      	cmp	r0, #0
    e29e:	d1d9      	bne.n	e254 <activate_foreach_backend+0x10>
    e2a0:	e7f0      	b.n	e284 <activate_foreach_backend+0x40>
    e2a2:	bf00      	nop
    e2a4:	0003160c 	.word	0x0003160c

0000e2a8 <z_log_init>:
{
    e2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e2ac:	f8df 90b8 	ldr.w	r9, [pc, #184]	; e368 <z_log_init+0xc0>
    e2b0:	4c2e      	ldr	r4, [pc, #184]	; (e36c <z_log_init+0xc4>)
    e2b2:	4680      	mov	r8, r0
    e2b4:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e2b8:	2b9f      	cmp	r3, #159	; 0x9f
{
    e2ba:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    e2bc:	d90b      	bls.n	e2d6 <z_log_init+0x2e>
    e2be:	492c      	ldr	r1, [pc, #176]	; (e370 <z_log_init+0xc8>)
    e2c0:	f240 1315 	movw	r3, #277	; 0x115
    e2c4:	4a2b      	ldr	r2, [pc, #172]	; (e374 <z_log_init+0xcc>)
    e2c6:	482c      	ldr	r0, [pc, #176]	; (e378 <z_log_init+0xd0>)
    e2c8:	f01c fa07 	bl	2a6da <assert_print>
    e2cc:	f240 1115 	movw	r1, #277	; 0x115
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e2d0:	4828      	ldr	r0, [pc, #160]	; (e374 <z_log_init+0xcc>)
    e2d2:	f01c f9fb 	bl	2a6cc <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
    e2d6:	4829      	ldr	r0, [pc, #164]	; (e37c <z_log_init+0xd4>)
    e2d8:	f01c fb30 	bl	2a93c <atomic_inc>
    e2dc:	4606      	mov	r6, r0
    e2de:	b360      	cbz	r0, e33a <z_log_init+0x92>
	uint32_t mask = 0;
    e2e0:	2500      	movs	r5, #0
}
    e2e2:	4628      	mov	r0, r5
    e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    e2e8:	7b23      	ldrb	r3, [r4, #12]
    e2ea:	b173      	cbz	r3, e30a <z_log_init+0x62>
	if (backend->api->init) {
    e2ec:	6823      	ldr	r3, [r4, #0]
    e2ee:	68db      	ldr	r3, [r3, #12]
    e2f0:	b10b      	cbz	r3, e2f6 <z_log_init+0x4e>
		backend->api->init(backend);
    e2f2:	4620      	mov	r0, r4
    e2f4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    e2f6:	6823      	ldr	r3, [r4, #0]
    e2f8:	691b      	ldr	r3, [r3, #16]
    e2fa:	b9b3      	cbnz	r3, e32a <z_log_init+0x82>
				log_backend_enable(backend,
    e2fc:	6863      	ldr	r3, [r4, #4]
    e2fe:	2204      	movs	r2, #4
    e300:	4620      	mov	r0, r4
    e302:	6819      	ldr	r1, [r3, #0]
    e304:	f000 faae 	bl	e864 <log_backend_enable>
			i++;
    e308:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e30a:	3410      	adds	r4, #16
    e30c:	454c      	cmp	r4, r9
    e30e:	d918      	bls.n	e342 <z_log_init+0x9a>
    e310:	491b      	ldr	r1, [pc, #108]	; (e380 <z_log_init+0xd8>)
    e312:	f44f 7391 	mov.w	r3, #290	; 0x122
    e316:	4a17      	ldr	r2, [pc, #92]	; (e374 <z_log_init+0xcc>)
    e318:	4817      	ldr	r0, [pc, #92]	; (e378 <z_log_init+0xd0>)
    e31a:	f01c f9de 	bl	2a6da <assert_print>
    e31e:	4819      	ldr	r0, [pc, #100]	; (e384 <z_log_init+0xdc>)
    e320:	f01c f9db 	bl	2a6da <assert_print>
    e324:	f44f 7191 	mov.w	r1, #290	; 0x122
    e328:	e7d2      	b.n	e2d0 <z_log_init+0x28>
		return backend->api->is_ready(backend);
    e32a:	4620      	mov	r0, r4
    e32c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    e32e:	2800      	cmp	r0, #0
    e330:	d0e4      	beq.n	e2fc <z_log_init+0x54>
				mask |= BIT(i);
    e332:	fa0a f306 	lsl.w	r3, sl, r6
    e336:	431d      	orrs	r5, r3
    e338:	e7e6      	b.n	e308 <z_log_init+0x60>
	uint32_t mask = 0;
    e33a:	4605      	mov	r5, r0
				mask |= BIT(i);
    e33c:	f04f 0a01 	mov.w	sl, #1
    e340:	e7e4      	b.n	e30c <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e342:	d3d1      	bcc.n	e2e8 <z_log_init+0x40>
	if (blocking) {
    e344:	f1b8 0f00 	cmp.w	r8, #0
    e348:	d0cb      	beq.n	e2e2 <z_log_init+0x3a>
		while (mask) {
    e34a:	2d00      	cmp	r5, #0
    e34c:	d0c8      	beq.n	e2e0 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
    e34e:	4628      	mov	r0, r5
    e350:	f7ff ff78 	bl	e244 <activate_foreach_backend>
    e354:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    e356:	2f00      	cmp	r7, #0
    e358:	d0f7      	beq.n	e34a <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
    e35a:	2100      	movs	r1, #0
    e35c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    e360:	f019 f836 	bl	273d0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    e364:	e7f1      	b.n	e34a <z_log_init+0xa2>
    e366:	bf00      	nop
    e368:	0003161c 	.word	0x0003161c
    e36c:	0003160c 	.word	0x0003160c
    e370:	000336d4 	.word	0x000336d4
    e374:	000336a7 	.word	0x000336a7
    e378:	00032679 	.word	0x00032679
    e37c:	20021484 	.word	0x20021484
    e380:	000336f8 	.word	0x000336f8
    e384:	00033719 	.word	0x00033719

0000e388 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    e388:	4801      	ldr	r0, [pc, #4]	; (e390 <log_process_thread_timer_expiry_fn+0x8>)
    e38a:	f017 b92d 	b.w	255e8 <z_impl_k_sem_give>
    e38e:	bf00      	nop
    e390:	20008c04 	.word	0x20008c04

0000e394 <log_format_func_t_get>:
}
    e394:	4b01      	ldr	r3, [pc, #4]	; (e39c <log_format_func_t_get+0x8>)
    e396:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e39a:	4770      	bx	lr
    e39c:	00031b68 	.word	0x00031b68

0000e3a0 <log_set_timestamp_func>:
{
    e3a0:	b508      	push	{r3, lr}
    e3a2:	4603      	mov	r3, r0
    e3a4:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    e3a6:	b12b      	cbz	r3, e3b4 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    e3a8:	4a04      	ldr	r2, [pc, #16]	; (e3bc <log_set_timestamp_func+0x1c>)
    e3aa:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    e3ac:	f000 fcfc 	bl	eda8 <log_output_timestamp_freq_set>
	return 0;
    e3b0:	2000      	movs	r0, #0
}
    e3b2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e3b4:	f06f 0015 	mvn.w	r0, #21
    e3b8:	e7fb      	b.n	e3b2 <log_set_timestamp_func+0x12>
    e3ba:	bf00      	nop
    e3bc:	200083fc 	.word	0x200083fc

0000e3c0 <z_log_notify_backend_enabled>:
{
    e3c0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    e3c2:	4c04      	ldr	r4, [pc, #16]	; (e3d4 <z_log_notify_backend_enabled+0x14>)
    e3c4:	7823      	ldrb	r3, [r4, #0]
    e3c6:	b913      	cbnz	r3, e3ce <z_log_notify_backend_enabled+0xe>
    e3c8:	4803      	ldr	r0, [pc, #12]	; (e3d8 <z_log_notify_backend_enabled+0x18>)
    e3ca:	f017 f90d 	bl	255e8 <z_impl_k_sem_give>
	backend_attached = true;
    e3ce:	2301      	movs	r3, #1
    e3d0:	7023      	strb	r3, [r4, #0]
}
    e3d2:	bd10      	pop	{r4, pc}
    e3d4:	20022302 	.word	0x20022302
    e3d8:	20008c04 	.word	0x20008c04

0000e3dc <z_log_dropped>:
{
    e3dc:	b510      	push	{r4, lr}
    e3de:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    e3e0:	4806      	ldr	r0, [pc, #24]	; (e3fc <z_log_dropped+0x20>)
    e3e2:	f01c faab 	bl	2a93c <atomic_inc>
	if (buffered) {
    e3e6:	b13c      	cbz	r4, e3f8 <z_log_dropped+0x1c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e3e8:	4b05      	ldr	r3, [pc, #20]	; (e400 <z_log_dropped+0x24>)
    e3ea:	e8d3 1fef 	ldaex	r1, [r3]
    e3ee:	3901      	subs	r1, #1
    e3f0:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e3f4:	2a00      	cmp	r2, #0
    e3f6:	d1f8      	bne.n	e3ea <z_log_dropped+0xe>
}
    e3f8:	bd10      	pop	{r4, pc}
    e3fa:	bf00      	nop
    e3fc:	2002147c 	.word	0x2002147c
    e400:	20021480 	.word	0x20021480

0000e404 <z_log_dropped_read_and_clear>:
}
    e404:	2000      	movs	r0, #0
    e406:	4601      	mov	r1, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e408:	4b03      	ldr	r3, [pc, #12]	; (e418 <z_log_dropped_read_and_clear+0x14>)
    e40a:	e8d3 0fef 	ldaex	r0, [r3]
    e40e:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e412:	2a00      	cmp	r2, #0
    e414:	d1f9      	bne.n	e40a <z_log_dropped_read_and_clear+0x6>
    e416:	4770      	bx	lr
    e418:	2002147c 	.word	0x2002147c

0000e41c <dropped_notify>:
{
    e41c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    e41e:	f7ff fff1 	bl	e404 <z_log_dropped_read_and_clear>
    e422:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e424:	4c0f      	ldr	r4, [pc, #60]	; (e464 <dropped_notify+0x48>)
    e426:	4e10      	ldr	r6, [pc, #64]	; (e468 <dropped_notify+0x4c>)
    e428:	42b4      	cmp	r4, r6
    e42a:	d919      	bls.n	e460 <dropped_notify+0x44>
    e42c:	490f      	ldr	r1, [pc, #60]	; (e46c <dropped_notify+0x50>)
    e42e:	f240 13cd 	movw	r3, #461	; 0x1cd
    e432:	4a0f      	ldr	r2, [pc, #60]	; (e470 <dropped_notify+0x54>)
    e434:	480f      	ldr	r0, [pc, #60]	; (e474 <dropped_notify+0x58>)
    e436:	f01c f950 	bl	2a6da <assert_print>
    e43a:	480f      	ldr	r0, [pc, #60]	; (e478 <dropped_notify+0x5c>)
    e43c:	f01c f94d 	bl	2a6da <assert_print>
    e440:	f240 11cd 	movw	r1, #461	; 0x1cd
    e444:	480a      	ldr	r0, [pc, #40]	; (e470 <dropped_notify+0x54>)
    e446:	f01c f941 	bl	2a6cc <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    e44a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e44c:	795b      	ldrb	r3, [r3, #5]
    e44e:	b12b      	cbz	r3, e45c <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
    e450:	6823      	ldr	r3, [r4, #0]
    e452:	685b      	ldr	r3, [r3, #4]
    e454:	b113      	cbz	r3, e45c <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
    e456:	4629      	mov	r1, r5
    e458:	4620      	mov	r0, r4
    e45a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e45c:	3410      	adds	r4, #16
    e45e:	e7e3      	b.n	e428 <dropped_notify+0xc>
    e460:	d3f3      	bcc.n	e44a <dropped_notify+0x2e>
}
    e462:	bd70      	pop	{r4, r5, r6, pc}
    e464:	0003160c 	.word	0x0003160c
    e468:	0003161c 	.word	0x0003161c
    e46c:	000336f8 	.word	0x000336f8
    e470:	000336a7 	.word	0x000336a7
    e474:	00032679 	.word	0x00032679
    e478:	00033719 	.word	0x00033719

0000e47c <z_log_msg_init>:
{
    e47c:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    e47e:	4c04      	ldr	r4, [pc, #16]	; (e490 <z_log_msg_init+0x14>)
    e480:	4904      	ldr	r1, [pc, #16]	; (e494 <z_log_msg_init+0x18>)
    e482:	4620      	mov	r0, r4
    e484:	f7ff face 	bl	da24 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    e488:	4b03      	ldr	r3, [pc, #12]	; (e498 <z_log_msg_init+0x1c>)
    e48a:	601c      	str	r4, [r3, #0]
}
    e48c:	bd10      	pop	{r4, pc}
    e48e:	bf00      	nop
    e490:	20008a14 	.word	0x20008a14
    e494:	00031b54 	.word	0x00031b54
    e498:	20021474 	.word	0x20021474

0000e49c <log_core_init>:
{
    e49c:	b508      	push	{r3, lr}
	panic_mode = false;
    e49e:	2300      	movs	r3, #0
    e4a0:	4a06      	ldr	r2, [pc, #24]	; (e4bc <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    e4a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    e4a6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    e4a8:	4a05      	ldr	r2, [pc, #20]	; (e4c0 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    e4aa:	4806      	ldr	r0, [pc, #24]	; (e4c4 <log_core_init+0x28>)
	dropped_cnt = 0;
    e4ac:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    e4ae:	f7ff ff77 	bl	e3a0 <log_set_timestamp_func>
}
    e4b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    e4b6:	f7ff bfe1 	b.w	e47c <z_log_msg_init>
    e4ba:	bf00      	nop
    e4bc:	20022303 	.word	0x20022303
    e4c0:	2002147c 	.word	0x2002147c
    e4c4:	0002a939 	.word	0x0002a939

0000e4c8 <z_log_msg_alloc>:
{
    e4c8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    e4ca:	2200      	movs	r2, #0
    e4cc:	2300      	movs	r3, #0
    e4ce:	4801      	ldr	r0, [pc, #4]	; (e4d4 <z_log_msg_alloc+0xc>)
    e4d0:	f7ff bada 	b.w	da88 <mpsc_pbuf_alloc>
    e4d4:	20008a14 	.word	0x20008a14

0000e4d8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    e4d8:	4801      	ldr	r0, [pc, #4]	; (e4e0 <z_log_msg_local_claim+0x8>)
    e4da:	f7ff bbe9 	b.w	dcb0 <mpsc_pbuf_claim>
    e4de:	bf00      	nop
    e4e0:	20008a14 	.word	0x20008a14

0000e4e4 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    e4e4:	4b02      	ldr	r3, [pc, #8]	; (e4f0 <z_log_msg_free+0xc>)
{
    e4e6:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    e4e8:	6818      	ldr	r0, [r3, #0]
    e4ea:	f7ff bc67 	b.w	ddbc <mpsc_pbuf_free>
    e4ee:	bf00      	nop
    e4f0:	20021474 	.word	0x20021474

0000e4f4 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    e4f4:	4801      	ldr	r0, [pc, #4]	; (e4fc <z_log_msg_pending+0x8>)
    e4f6:	f01c b9aa 	b.w	2a84e <mpsc_pbuf_is_pending>
    e4fa:	bf00      	nop
    e4fc:	20008a14 	.word	0x20008a14

0000e500 <z_impl_log_process>:
{
    e500:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    e502:	4b2e      	ldr	r3, [pc, #184]	; (e5bc <z_impl_log_process+0xbc>)
    e504:	7818      	ldrb	r0, [r3, #0]
    e506:	2800      	cmp	r0, #0
    e508:	d057      	beq.n	e5ba <z_impl_log_process+0xba>
	return z_log_msg_local_claim();
    e50a:	f7ff ffe5 	bl	e4d8 <z_log_msg_local_claim>
	if (msg) {
    e50e:	4605      	mov	r5, r0
    e510:	b340      	cbz	r0, e564 <z_impl_log_process+0x64>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    e512:	4b2b      	ldr	r3, [pc, #172]	; (e5c0 <z_impl_log_process+0xc0>)
    e514:	e8d3 1fef 	ldaex	r1, [r3]
    e518:	3901      	subs	r1, #1
    e51a:	e8c3 1fe2 	stlex	r2, r1, [r3]
    e51e:	2a00      	cmp	r2, #0
    e520:	d1f8      	bne.n	e514 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e522:	4c28      	ldr	r4, [pc, #160]	; (e5c4 <z_impl_log_process+0xc4>)
    e524:	4e28      	ldr	r6, [pc, #160]	; (e5c8 <z_impl_log_process+0xc8>)
    e526:	42b4      	cmp	r4, r6
    e528:	d918      	bls.n	e55c <z_impl_log_process+0x5c>
    e52a:	4928      	ldr	r1, [pc, #160]	; (e5cc <z_impl_log_process+0xcc>)
    e52c:	f240 13c1 	movw	r3, #449	; 0x1c1
    e530:	4a27      	ldr	r2, [pc, #156]	; (e5d0 <z_impl_log_process+0xd0>)
    e532:	4828      	ldr	r0, [pc, #160]	; (e5d4 <z_impl_log_process+0xd4>)
    e534:	f01c f8d1 	bl	2a6da <assert_print>
    e538:	4827      	ldr	r0, [pc, #156]	; (e5d8 <z_impl_log_process+0xd8>)
    e53a:	f01c f8ce 	bl	2a6da <assert_print>
    e53e:	f240 11c1 	movw	r1, #449	; 0x1c1
    e542:	4823      	ldr	r0, [pc, #140]	; (e5d0 <z_impl_log_process+0xd0>)
    e544:	f01c f8c2 	bl	2a6cc <assert_post_action>
	return backend->cb->active;
    e548:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    e54a:	795b      	ldrb	r3, [r3, #5]
    e54c:	b123      	cbz	r3, e558 <z_impl_log_process+0x58>
	backend->api->process(backend, msg);
    e54e:	6823      	ldr	r3, [r4, #0]
    e550:	4629      	mov	r1, r5
    e552:	4620      	mov	r0, r4
    e554:	681b      	ldr	r3, [r3, #0]
    e556:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e558:	3410      	adds	r4, #16
    e55a:	e7e4      	b.n	e526 <z_impl_log_process+0x26>
    e55c:	d3f4      	bcc.n	e548 <z_impl_log_process+0x48>
		z_log_msg_free(msg);
    e55e:	4628      	mov	r0, r5
    e560:	f7ff ffc0 	bl	e4e4 <z_log_msg_free>
	return dropped_cnt > 0;
    e564:	4b1d      	ldr	r3, [pc, #116]	; (e5dc <z_impl_log_process+0xdc>)
    e566:	4c1e      	ldr	r4, [pc, #120]	; (e5e0 <z_impl_log_process+0xe0>)
		if ((dropped_pend || unordered_pend) &&
    e568:	681b      	ldr	r3, [r3, #0]
    e56a:	2b00      	cmp	r3, #0
    e56c:	dd19      	ble.n	e5a2 <z_impl_log_process+0xa2>
	return z_impl_k_uptime_ticks();
    e56e:	f021 fef5 	bl	3035c <z_impl_k_uptime_ticks>
    e572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e576:	fba0 0302 	umull	r0, r3, r0, r2
    e57a:	fb02 3101 	mla	r1, r2, r1, r3
    e57e:	0bc3      	lsrs	r3, r0, #15
    e580:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e584:	e9d4 2000 	ldrd	r2, r0, [r4]
    e588:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    e58a:	f240 32e9 	movw	r2, #1001	; 0x3e9
    e58e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    e592:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    e596:	4293      	cmp	r3, r2
    e598:	f171 0100 	sbcs.w	r1, r1, #0
    e59c:	d301      	bcc.n	e5a2 <z_impl_log_process+0xa2>
				dropped_notify();
    e59e:	f7ff ff3d 	bl	e41c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    e5a2:	e9d4 3200 	ldrd	r3, r2, [r4]
    e5a6:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    e5aa:	f142 0200 	adc.w	r2, r2, #0
    e5ae:	e9c4 3200 	strd	r3, r2, [r4]
}
    e5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    e5b6:	f7ff bf9d 	b.w	e4f4 <z_log_msg_pending>
}
    e5ba:	bd70      	pop	{r4, r5, r6, pc}
    e5bc:	20022302 	.word	0x20022302
    e5c0:	20021480 	.word	0x20021480
    e5c4:	0003160c 	.word	0x0003160c
    e5c8:	0003161c 	.word	0x0003161c
    e5cc:	000336f8 	.word	0x000336f8
    e5d0:	000336a7 	.word	0x000336a7
    e5d4:	00032679 	.word	0x00032679
    e5d8:	00033719 	.word	0x00033719
    e5dc:	2002147c 	.word	0x2002147c
    e5e0:	200096e0 	.word	0x200096e0

0000e5e4 <z_impl_log_panic>:
{
    e5e4:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    e5e6:	4d15      	ldr	r5, [pc, #84]	; (e63c <z_impl_log_panic+0x58>)
    e5e8:	7829      	ldrb	r1, [r5, #0]
    e5ea:	bb29      	cbnz	r1, e638 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
    e5ec:	2001      	movs	r0, #1
    e5ee:	f7ff fe5b 	bl	e2a8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e5f2:	4c13      	ldr	r4, [pc, #76]	; (e640 <z_impl_log_panic+0x5c>)
    e5f4:	4e13      	ldr	r6, [pc, #76]	; (e644 <z_impl_log_panic+0x60>)
    e5f6:	42b4      	cmp	r4, r6
    e5f8:	d917      	bls.n	e62a <z_impl_log_panic+0x46>
    e5fa:	4913      	ldr	r1, [pc, #76]	; (e648 <z_impl_log_panic+0x64>)
    e5fc:	f44f 73c2 	mov.w	r3, #388	; 0x184
    e600:	4a12      	ldr	r2, [pc, #72]	; (e64c <z_impl_log_panic+0x68>)
    e602:	4813      	ldr	r0, [pc, #76]	; (e650 <z_impl_log_panic+0x6c>)
    e604:	f01c f869 	bl	2a6da <assert_print>
    e608:	4812      	ldr	r0, [pc, #72]	; (e654 <z_impl_log_panic+0x70>)
    e60a:	f01c f866 	bl	2a6da <assert_print>
    e60e:	f44f 71c2 	mov.w	r1, #388	; 0x184
    e612:	480e      	ldr	r0, [pc, #56]	; (e64c <z_impl_log_panic+0x68>)
    e614:	f01c f85a 	bl	2a6cc <assert_post_action>
	return backend->cb->active;
    e618:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    e61a:	795b      	ldrb	r3, [r3, #5]
    e61c:	b11b      	cbz	r3, e626 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
    e61e:	6823      	ldr	r3, [r4, #0]
    e620:	4620      	mov	r0, r4
    e622:	689b      	ldr	r3, [r3, #8]
    e624:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e626:	3410      	adds	r4, #16
    e628:	e7e5      	b.n	e5f6 <z_impl_log_panic+0x12>
    e62a:	d3f5      	bcc.n	e618 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    e62c:	f7ff ff68 	bl	e500 <z_impl_log_process>
		while (log_process() == true) {
    e630:	2800      	cmp	r0, #0
    e632:	d1fb      	bne.n	e62c <z_impl_log_panic+0x48>
	panic_mode = true;
    e634:	2301      	movs	r3, #1
    e636:	702b      	strb	r3, [r5, #0]
}
    e638:	bd70      	pop	{r4, r5, r6, pc}
    e63a:	bf00      	nop
    e63c:	20022303 	.word	0x20022303
    e640:	0003160c 	.word	0x0003160c
    e644:	0003161c 	.word	0x0003161c
    e648:	000336f8 	.word	0x000336f8
    e64c:	000336a7 	.word	0x000336a7
    e650:	00032679 	.word	0x00032679
    e654:	00033719 	.word	0x00033719

0000e658 <log_process_thread_func>:
{
    e658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
    e65c:	4b2f      	ldr	r3, [pc, #188]	; (e71c <log_process_thread_func+0xc4>)
    e65e:	4f30      	ldr	r7, [pc, #192]	; (e720 <log_process_thread_func+0xc8>)
    e660:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    e662:	091b      	lsrs	r3, r3, #4
    e664:	d10b      	bne.n	e67e <log_process_thread_func+0x26>
    e666:	492f      	ldr	r1, [pc, #188]	; (e724 <log_process_thread_func+0xcc>)
    e668:	f240 3347 	movw	r3, #839	; 0x347
    e66c:	4a2e      	ldr	r2, [pc, #184]	; (e728 <log_process_thread_func+0xd0>)
    e66e:	482f      	ldr	r0, [pc, #188]	; (e72c <log_process_thread_func+0xd4>)
    e670:	f01c f833 	bl	2a6da <assert_print>
    e674:	f240 3147 	movw	r1, #839	; 0x347
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e678:	482b      	ldr	r0, [pc, #172]	; (e728 <log_process_thread_func+0xd0>)
    e67a:	f01c f827 	bl	2a6cc <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
    e67e:	2100      	movs	r1, #0
    e680:	4608      	mov	r0, r1
    e682:	f7ff fe11 	bl	e2a8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e686:	4604      	mov	r4, r0
    e688:	b340      	cbz	r0, e6dc <log_process_thread_func+0x84>
    e68a:	f240 6867 	movw	r8, #1639	; 0x667
    e68e:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    e692:	f018 fed1 	bl	27438 <z_impl_z_current_get>
	proc_tid = process_tid;
    e696:	4b26      	ldr	r3, [pc, #152]	; (e730 <log_process_thread_func+0xd8>)
    e698:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e69a:	b130      	cbz	r0, e6aa <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    e69c:	4b25      	ldr	r3, [pc, #148]	; (e734 <log_process_thread_func+0xdc>)
	    process_tid &&
    e69e:	681b      	ldr	r3, [r3, #0]
    e6a0:	2b09      	cmp	r3, #9
    e6a2:	dd02      	ble.n	e6aa <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
    e6a4:	4824      	ldr	r0, [pc, #144]	; (e738 <log_process_thread_func+0xe0>)
    e6a6:	f016 ff9f 	bl	255e8 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e6aa:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
    e6ac:	f8df a088 	ldr.w	sl, [pc, #136]	; e738 <log_process_thread_func+0xe0>
		if (activate_mask) {
    e6b0:	b144      	cbz	r4, e6c4 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
    e6b2:	4620      	mov	r0, r4
    e6b4:	f7ff fdc6 	bl	e244 <activate_foreach_backend>
			if (!activate_mask) {
    e6b8:	4604      	mov	r4, r0
    e6ba:	b918      	cbnz	r0, e6c4 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
    e6bc:	f04f 38ff 	mov.w	r8, #4294967295
    e6c0:	f04f 39ff 	mov.w	r9, #4294967295
    e6c4:	f7ff ff1c 	bl	e500 <z_impl_log_process>
		if (log_process() == false) {
    e6c8:	4606      	mov	r6, r0
    e6ca:	b928      	cbnz	r0, e6d8 <log_process_thread_func+0x80>
			if (processed_any) {
    e6cc:	b95d      	cbnz	r5, e6e6 <log_process_thread_func+0x8e>
    e6ce:	4642      	mov	r2, r8
    e6d0:	464b      	mov	r3, r9
    e6d2:	4650      	mov	r0, sl
    e6d4:	f016 ffcc 	bl	25670 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    e6d8:	4635      	mov	r5, r6
    e6da:	e7e9      	b.n	e6b0 <log_process_thread_func+0x58>
    e6dc:	f04f 38ff 	mov.w	r8, #4294967295
    e6e0:	f04f 39ff 	mov.w	r9, #4294967295
    e6e4:	e7d5      	b.n	e692 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    e6e6:	4d0d      	ldr	r5, [pc, #52]	; (e71c <log_process_thread_func+0xc4>)
    e6e8:	e008      	b.n	e6fc <log_process_thread_func+0xa4>
    e6ea:	d2f0      	bcs.n	e6ce <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    e6ec:	682b      	ldr	r3, [r5, #0]
    e6ee:	699b      	ldr	r3, [r3, #24]
    e6f0:	b11b      	cbz	r3, e6fa <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
    e6f2:	2200      	movs	r2, #0
    e6f4:	4628      	mov	r0, r5
    e6f6:	4611      	mov	r1, r2
    e6f8:	4798      	blx	r3
    e6fa:	3510      	adds	r5, #16
    e6fc:	42bd      	cmp	r5, r7
    e6fe:	d9f4      	bls.n	e6ea <log_process_thread_func+0x92>
    e700:	490e      	ldr	r1, [pc, #56]	; (e73c <log_process_thread_func+0xe4>)
    e702:	f240 333b 	movw	r3, #827	; 0x33b
    e706:	4a08      	ldr	r2, [pc, #32]	; (e728 <log_process_thread_func+0xd0>)
    e708:	4808      	ldr	r0, [pc, #32]	; (e72c <log_process_thread_func+0xd4>)
    e70a:	f01b ffe6 	bl	2a6da <assert_print>
    e70e:	480c      	ldr	r0, [pc, #48]	; (e740 <log_process_thread_func+0xe8>)
    e710:	f01b ffe3 	bl	2a6da <assert_print>
    e714:	f240 313b 	movw	r1, #827	; 0x33b
    e718:	e7ae      	b.n	e678 <log_process_thread_func+0x20>
    e71a:	bf00      	nop
    e71c:	0003160c 	.word	0x0003160c
    e720:	0003161c 	.word	0x0003161c
    e724:	00033738 	.word	0x00033738
    e728:	000336a7 	.word	0x000336a7
    e72c:	00032679 	.word	0x00032679
    e730:	20021478 	.word	0x20021478
    e734:	20021480 	.word	0x20021480
    e738:	20008c04 	.word	0x20008c04
    e73c:	000336f8 	.word	0x000336f8
    e740:	00033719 	.word	0x00033719

0000e744 <z_log_msg_post_finalize>:
{
    e744:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    e746:	482b      	ldr	r0, [pc, #172]	; (e7f4 <z_log_msg_post_finalize+0xb0>)
    e748:	f01c f8f8 	bl	2a93c <atomic_inc>
	if (panic_mode) {
    e74c:	4b2a      	ldr	r3, [pc, #168]	; (e7f8 <z_log_msg_post_finalize+0xb4>)
    e74e:	781b      	ldrb	r3, [r3, #0]
    e750:	2b00      	cmp	r3, #0
    e752:	d034      	beq.n	e7be <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
    e754:	f04f 0320 	mov.w	r3, #32
    e758:	f3ef 8411 	mrs	r4, BASEPRI
    e75c:	f383 8812 	msr	BASEPRI_MAX, r3
    e760:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e764:	4825      	ldr	r0, [pc, #148]	; (e7fc <z_log_msg_post_finalize+0xb8>)
    e766:	f016 fc87 	bl	25078 <z_spin_lock_valid>
    e76a:	b968      	cbnz	r0, e788 <z_log_msg_post_finalize+0x44>
    e76c:	2394      	movs	r3, #148	; 0x94
    e76e:	4a24      	ldr	r2, [pc, #144]	; (e800 <z_log_msg_post_finalize+0xbc>)
    e770:	4924      	ldr	r1, [pc, #144]	; (e804 <z_log_msg_post_finalize+0xc0>)
    e772:	4825      	ldr	r0, [pc, #148]	; (e808 <z_log_msg_post_finalize+0xc4>)
    e774:	f01b ffb1 	bl	2a6da <assert_print>
    e778:	4920      	ldr	r1, [pc, #128]	; (e7fc <z_log_msg_post_finalize+0xb8>)
    e77a:	4824      	ldr	r0, [pc, #144]	; (e80c <z_log_msg_post_finalize+0xc8>)
    e77c:	f01b ffad 	bl	2a6da <assert_print>
    e780:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e782:	481f      	ldr	r0, [pc, #124]	; (e800 <z_log_msg_post_finalize+0xbc>)
    e784:	f01b ffa2 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
    e788:	481c      	ldr	r0, [pc, #112]	; (e7fc <z_log_msg_post_finalize+0xb8>)
    e78a:	f016 fc91 	bl	250b0 <z_spin_lock_set_owner>
    e78e:	f7ff feb7 	bl	e500 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e792:	481a      	ldr	r0, [pc, #104]	; (e7fc <z_log_msg_post_finalize+0xb8>)
    e794:	f016 fc7e 	bl	25094 <z_spin_unlock_valid>
    e798:	b958      	cbnz	r0, e7b2 <z_log_msg_post_finalize+0x6e>
    e79a:	23c2      	movs	r3, #194	; 0xc2
    e79c:	4a18      	ldr	r2, [pc, #96]	; (e800 <z_log_msg_post_finalize+0xbc>)
    e79e:	491c      	ldr	r1, [pc, #112]	; (e810 <z_log_msg_post_finalize+0xcc>)
    e7a0:	4819      	ldr	r0, [pc, #100]	; (e808 <z_log_msg_post_finalize+0xc4>)
    e7a2:	f01b ff9a 	bl	2a6da <assert_print>
    e7a6:	4915      	ldr	r1, [pc, #84]	; (e7fc <z_log_msg_post_finalize+0xb8>)
    e7a8:	481a      	ldr	r0, [pc, #104]	; (e814 <z_log_msg_post_finalize+0xd0>)
    e7aa:	f01b ff96 	bl	2a6da <assert_print>
    e7ae:	21c2      	movs	r1, #194	; 0xc2
    e7b0:	e7e7      	b.n	e782 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
    e7b2:	f384 8811 	msr	BASEPRI, r4
    e7b6:	f3bf 8f6f 	isb	sy
}
    e7ba:	b002      	add	sp, #8
    e7bc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    e7be:	4b16      	ldr	r3, [pc, #88]	; (e818 <z_log_msg_post_finalize+0xd4>)
    e7c0:	681b      	ldr	r3, [r3, #0]
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d0f9      	beq.n	e7ba <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
    e7c6:	b950      	cbnz	r0, e7de <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
    e7c8:	2200      	movs	r2, #0
    e7ca:	2300      	movs	r3, #0
    e7cc:	4813      	ldr	r0, [pc, #76]	; (e81c <z_log_msg_post_finalize+0xd8>)
    e7ce:	e9cd 2300 	strd	r2, r3, [sp]
    e7d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e7d6:	2300      	movs	r3, #0
    e7d8:	f019 fb18 	bl	27e0c <z_impl_k_timer_start>
    e7dc:	e7ed      	b.n	e7ba <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    e7de:	280a      	cmp	r0, #10
    e7e0:	d1eb      	bne.n	e7ba <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
    e7e2:	480e      	ldr	r0, [pc, #56]	; (e81c <z_log_msg_post_finalize+0xd8>)
    e7e4:	f021 fdee 	bl	303c4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    e7e8:	480d      	ldr	r0, [pc, #52]	; (e820 <z_log_msg_post_finalize+0xdc>)
}
    e7ea:	b002      	add	sp, #8
    e7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7f0:	f016 befa 	b.w	255e8 <z_impl_k_sem_give>
    e7f4:	20021480 	.word	0x20021480
    e7f8:	20022303 	.word	0x20022303
    e7fc:	20021470 	.word	0x20021470
    e800:	0003341a 	.word	0x0003341a
    e804:	00033473 	.word	0x00033473
    e808:	00032679 	.word	0x00032679
    e80c:	00033488 	.word	0x00033488
    e810:	00033447 	.word	0x00033447
    e814:	0003345e 	.word	0x0003345e
    e818:	20021478 	.word	0x20021478
    e81c:	200096e8 	.word	0x200096e8
    e820:	20008c04 	.word	0x20008c04

0000e824 <z_log_msg_commit>:
{
    e824:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    e826:	4b06      	ldr	r3, [pc, #24]	; (e840 <z_log_msg_commit+0x1c>)
{
    e828:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    e82a:	681b      	ldr	r3, [r3, #0]
    e82c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    e82e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    e830:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    e832:	4804      	ldr	r0, [pc, #16]	; (e844 <z_log_msg_commit+0x20>)
    e834:	f7ff f9e6 	bl	dc04 <mpsc_pbuf_commit>
}
    e838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    e83c:	f7ff bf82 	b.w	e744 <z_log_msg_post_finalize>
    e840:	200083fc 	.word	0x200083fc
    e844:	20008a14 	.word	0x20008a14

0000e848 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    e848:	4a04      	ldr	r2, [pc, #16]	; (e85c <log_source_name_get+0x14>)
    e84a:	4b05      	ldr	r3, [pc, #20]	; (e860 <log_source_name_get+0x18>)
    e84c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    e84e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    e852:	bf34      	ite	cc
    e854:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    e858:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    e85a:	4770      	bx	lr
    e85c:	0003149c 	.word	0x0003149c
    e860:	0003160c 	.word	0x0003160c

0000e864 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    e864:	4b0e      	ldr	r3, [pc, #56]	; (e8a0 <log_backend_enable+0x3c>)
{
    e866:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    e868:	1ac3      	subs	r3, r0, r3
    e86a:	111b      	asrs	r3, r3, #4
    e86c:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    e86e:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
    e870:	b948      	cbnz	r0, e886 <log_backend_enable+0x22>
    e872:	490c      	ldr	r1, [pc, #48]	; (e8a4 <log_backend_enable+0x40>)
    e874:	480c      	ldr	r0, [pc, #48]	; (e8a8 <log_backend_enable+0x44>)
    e876:	23de      	movs	r3, #222	; 0xde
    e878:	4a0c      	ldr	r2, [pc, #48]	; (e8ac <log_backend_enable+0x48>)
    e87a:	f01b ff2e 	bl	2a6da <assert_print>
    e87e:	21de      	movs	r1, #222	; 0xde
    e880:	480a      	ldr	r0, [pc, #40]	; (e8ac <log_backend_enable+0x48>)
    e882:	f01b ff23 	bl	2a6cc <assert_post_action>
	backend->cb->id = id;
    e886:	6844      	ldr	r4, [r0, #4]
    e888:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    e88a:	6843      	ldr	r3, [r0, #4]
    e88c:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    e88e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    e890:	6843      	ldr	r3, [r0, #4]
    e892:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    e894:	6843      	ldr	r3, [r0, #4]
    e896:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    e898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
    e89c:	f7ff bd90 	b.w	e3c0 <z_log_notify_backend_enabled>
    e8a0:	0003160c 	.word	0x0003160c
    e8a4:	000337d8 	.word	0x000337d8
    e8a8:	00032679 	.word	0x00032679
    e8ac:	000337a0 	.word	0x000337a0

0000e8b0 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    e8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    e8b4:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    e8b8:	b08f      	sub	sp, #60	; 0x3c
    e8ba:	f3c1 2649 	ubfx	r6, r1, #9, #10
    e8be:	460d      	mov	r5, r1
    e8c0:	4690      	mov	r8, r2
    e8c2:	4699      	mov	r9, r3
    e8c4:	9005      	str	r0, [sp, #20]
    e8c6:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    e8c8:	2e00      	cmp	r6, #0
    e8ca:	d03d      	beq.n	e948 <z_impl_z_log_msg_static_create+0x98>
	return cbprintf_package_convert(in_packaged, in_len,
    e8cc:	f04f 0b04 	mov.w	fp, #4
    e8d0:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    e8d4:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    e8d6:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    e8d8:	4631      	mov	r1, r6
    e8da:	ab0b      	add	r3, sp, #44	; 0x2c
    e8dc:	4640      	mov	r0, r8
    e8de:	f8cd b008 	str.w	fp, [sp, #8]
    e8e2:	9701      	str	r7, [sp, #4]
    e8e4:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    e8e8:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    e8ec:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e8ee:	9607      	str	r6, [sp, #28]
    e8f0:	f7fd fdfc 	bl	c4ec <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    e8f4:	f3c0 0309 	ubfx	r3, r0, #0, #10
    e8f8:	1918      	adds	r0, r3, r4
    e8fa:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e8fe:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    e900:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e902:	f363 2552 	bfi	r5, r3, #9, #10
    e906:	9306      	str	r3, [sp, #24]
    e908:	f7ff fdde 	bl	e4c8 <z_log_msg_alloc>
		if (msg) {
    e90c:	4604      	mov	r4, r0
    e90e:	b308      	cbz	r0, e954 <z_impl_z_log_msg_static_create+0xa4>
	struct z_cbprintf_buf_desc buf_desc = {
    e910:	2200      	movs	r2, #0
    e912:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    e914:	3010      	adds	r0, #16
    e916:	900b      	str	r0, [sp, #44]	; 0x2c
    e918:	930c      	str	r3, [sp, #48]	; 0x30
    e91a:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    e91c:	4640      	mov	r0, r8
    e91e:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    e922:	4a12      	ldr	r2, [pc, #72]	; (e96c <z_impl_z_log_msg_static_create+0xbc>)
    e924:	9907      	ldr	r1, [sp, #28]
    e926:	f8cd a000 	str.w	sl, [sp]
    e92a:	ab0b      	add	r3, sp, #44	; 0x2c
    e92c:	f7fd fdde 	bl	c4ec <cbprintf_package_convert>
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    e930:	2800      	cmp	r0, #0
    e932:	da0f      	bge.n	e954 <z_impl_z_log_msg_static_create+0xa4>
    e934:	490e      	ldr	r1, [pc, #56]	; (e970 <z_impl_z_log_msg_static_create+0xc0>)
    e936:	480f      	ldr	r0, [pc, #60]	; (e974 <z_impl_z_log_msg_static_create+0xc4>)
    e938:	2349      	movs	r3, #73	; 0x49
    e93a:	4a0f      	ldr	r2, [pc, #60]	; (e978 <z_impl_z_log_msg_static_create+0xc8>)
    e93c:	f01b fecd 	bl	2a6da <assert_print>
    e940:	2149      	movs	r1, #73	; 0x49
    e942:	480d      	ldr	r0, [pc, #52]	; (e978 <z_impl_z_log_msg_static_create+0xc8>)
    e944:	f01b fec2 	bl	2a6cc <assert_post_action>
    e948:	f024 0007 	bic.w	r0, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    e94c:	0880      	lsrs	r0, r0, #2
    e94e:	f7ff fdbb 	bl	e4c8 <z_log_msg_alloc>
    e952:	4604      	mov	r4, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    e954:	f366 2552 	bfi	r5, r6, #9, #10
    e958:	464b      	mov	r3, r9
    e95a:	462a      	mov	r2, r5
    e95c:	4620      	mov	r0, r4
    e95e:	9905      	ldr	r1, [sp, #20]
}
    e960:	b00f      	add	sp, #60	; 0x3c
    e962:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    e966:	f01c b80d 	b.w	2a984 <z_log_msg_finalize>
    e96a:	bf00      	nop
    e96c:	0002a959 	.word	0x0002a959
    e970:	00033824 	.word	0x00033824
    e974:	00032679 	.word	0x00032679
    e978:	000337f8 	.word	0x000337f8

0000e97c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    e97c:	b40e      	push	{r1, r2, r3}
    e97e:	b503      	push	{r0, r1, lr}
    e980:	ab03      	add	r3, sp, #12
    e982:	f853 2b04 	ldr.w	r2, [r3], #4
    e986:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e988:	4804      	ldr	r0, [pc, #16]	; (e99c <print_formatted+0x20>)
	va_start(args, fmt);
    e98a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    e98c:	f01c f821 	bl	2a9d2 <cbvprintf>
	va_end(args);

	return length;
}
    e990:	b002      	add	sp, #8
    e992:	f85d eb04 	ldr.w	lr, [sp], #4
    e996:	b003      	add	sp, #12
    e998:	4770      	bx	lr
    e99a:	bf00      	nop
    e99c:	0000e9bd 	.word	0x0000e9bd

0000e9a0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    e9a0:	06ca      	lsls	r2, r1, #27
    e9a2:	d405      	bmi.n	e9b0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    e9a4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    e9a6:	bf4c      	ite	mi
    e9a8:	4902      	ldrmi	r1, [pc, #8]	; (e9b4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    e9aa:	4903      	ldrpl	r1, [pc, #12]	; (e9b8 <newline_print+0x18>)
    e9ac:	f7ff bfe6 	b.w	e97c <print_formatted>
	}
}
    e9b0:	4770      	bx	lr
    e9b2:	bf00      	nop
    e9b4:	00036917 	.word	0x00036917
    e9b8:	00032c9c 	.word	0x00032c9c

0000e9bc <out_func>:
{
    e9bc:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    e9be:	684b      	ldr	r3, [r1, #4]
{
    e9c0:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    e9c2:	681a      	ldr	r2, [r3, #0]
    e9c4:	68cb      	ldr	r3, [r1, #12]
{
    e9c6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    e9c8:	429a      	cmp	r2, r3
    e9ca:	d102      	bne.n	e9d2 <out_func+0x16>
		log_output_flush(out_ctx);
    e9cc:	4608      	mov	r0, r1
    e9ce:	f01c f807 	bl	2a9e0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    e9d2:	6863      	ldr	r3, [r4, #4]
    e9d4:	e8d3 2fef 	ldaex	r2, [r3]
    e9d8:	1c51      	adds	r1, r2, #1
    e9da:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e9de:	2800      	cmp	r0, #0
    e9e0:	d1f8      	bne.n	e9d4 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    e9e2:	68a3      	ldr	r3, [r4, #8]
    e9e4:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    e9e6:	6863      	ldr	r3, [r4, #4]
    e9e8:	681a      	ldr	r2, [r3, #0]
    e9ea:	68e3      	ldr	r3, [r4, #12]
    e9ec:	429a      	cmp	r2, r3
    e9ee:	d909      	bls.n	ea04 <out_func+0x48>
    e9f0:	4905      	ldr	r1, [pc, #20]	; (ea08 <out_func+0x4c>)
    e9f2:	4806      	ldr	r0, [pc, #24]	; (ea0c <out_func+0x50>)
    e9f4:	2379      	movs	r3, #121	; 0x79
    e9f6:	4a06      	ldr	r2, [pc, #24]	; (ea10 <out_func+0x54>)
    e9f8:	f01b fe6f 	bl	2a6da <assert_print>
    e9fc:	2179      	movs	r1, #121	; 0x79
    e9fe:	4804      	ldr	r0, [pc, #16]	; (ea10 <out_func+0x54>)
    ea00:	f01b fe64 	bl	2a6cc <assert_post_action>
}
    ea04:	2000      	movs	r0, #0
    ea06:	bd38      	pop	{r3, r4, r5, pc}
    ea08:	0003385c 	.word	0x0003385c
    ea0c:	00032679 	.word	0x00032679
    ea10:	0003382d 	.word	0x0003382d

0000ea14 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    ea14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea18:	b089      	sub	sp, #36	; 0x24
    ea1a:	469a      	mov	sl, r3
    ea1c:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
    ea20:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    ea24:	9305      	str	r3, [sp, #20]
    ea26:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ea28:	4604      	mov	r4, r0
    ea2a:	460d      	mov	r5, r1
    ea2c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    ea2e:	9206      	str	r2, [sp, #24]
    ea30:	9304      	str	r3, [sp, #16]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    ea32:	f1bb 0f00 	cmp.w	fp, #0
    ea36:	f000 8085 	beq.w	eb44 <log_output_process+0x130>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    ea3a:	f006 0308 	and.w	r3, r6, #8
    ea3e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    ea40:	f01b ff88 	bl	2a954 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    ea44:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    ea48:	4602      	mov	r2, r0
    ea4a:	2800      	cmp	r0, #0
    ea4c:	d049      	beq.n	eae2 <log_output_process+0xce>
		length += print_formatted(output, "%s ", tag);
    ea4e:	4620      	mov	r0, r4
    ea50:	498c      	ldr	r1, [pc, #560]	; (ec84 <log_output_process+0x270>)
    ea52:	f7ff ff93 	bl	e97c <print_formatted>
    ea56:	4680      	mov	r8, r0
	if (stamp) {
    ea58:	f1b9 0f00 	cmp.w	r9, #0
    ea5c:	d008      	beq.n	ea70 <log_output_process+0x5c>
	if (!format) {
    ea5e:	f016 0f44 	tst.w	r6, #68	; 0x44
    ea62:	d140      	bne.n	eae6 <log_output_process+0xd2>
		length = print_formatted(output, "[%08lu] ", timestamp);
    ea64:	462a      	mov	r2, r5
    ea66:	4620      	mov	r0, r4
    ea68:	4987      	ldr	r1, [pc, #540]	; (ec88 <log_output_process+0x274>)
    ea6a:	f7ff ff87 	bl	e97c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    ea6e:	4480      	add	r8, r0
	if (color) {
    ea70:	f006 0301 	and.w	r3, r6, #1
    ea74:	b153      	cbz	r3, ea8c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
    ea76:	4b85      	ldr	r3, [pc, #532]	; (ec8c <log_output_process+0x278>)
		print_formatted(output, "%s", log_color);
    ea78:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    ea7a:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    ea7e:	4b84      	ldr	r3, [pc, #528]	; (ec90 <log_output_process+0x27c>)
    ea80:	4984      	ldr	r1, [pc, #528]	; (ec94 <log_output_process+0x280>)
    ea82:	2a00      	cmp	r2, #0
    ea84:	bf08      	it	eq
    ea86:	461a      	moveq	r2, r3
    ea88:	f7ff ff78 	bl	e97c <print_formatted>
	if (level_on) {
    ea8c:	f006 0308 	and.w	r3, r6, #8
    ea90:	2b00      	cmp	r3, #0
    ea92:	d054      	beq.n	eb3e <log_output_process+0x12a>
		total += print_formatted(output, "<%s> ", severity[level]);
    ea94:	4b80      	ldr	r3, [pc, #512]	; (ec98 <log_output_process+0x284>)
    ea96:	4620      	mov	r0, r4
    ea98:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    ea9c:	497f      	ldr	r1, [pc, #508]	; (ec9c <log_output_process+0x288>)
    ea9e:	f7ff ff6d 	bl	e97c <print_formatted>
    eaa2:	4605      	mov	r5, r0
	if (domain) {
    eaa4:	9b06      	ldr	r3, [sp, #24]
    eaa6:	b12b      	cbz	r3, eab4 <log_output_process+0xa0>
		total += print_formatted(output, "%s/", domain);
    eaa8:	461a      	mov	r2, r3
    eaaa:	4620      	mov	r0, r4
    eaac:	497c      	ldr	r1, [pc, #496]	; (eca0 <log_output_process+0x28c>)
    eaae:	f7ff ff65 	bl	e97c <print_formatted>
    eab2:	4405      	add	r5, r0
	if (source) {
    eab4:	f1ba 0f00 	cmp.w	sl, #0
    eab8:	d005      	beq.n	eac6 <log_output_process+0xb2>
		total += print_formatted(output,
    eaba:	4652      	mov	r2, sl
    eabc:	4620      	mov	r0, r4
    eabe:	4979      	ldr	r1, [pc, #484]	; (eca4 <log_output_process+0x290>)
    eac0:	f7ff ff5c 	bl	e97c <print_formatted>
    eac4:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    eac6:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    eac8:	2f00      	cmp	r7, #0
    eaca:	d149      	bne.n	eb60 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    eacc:	9b04      	ldr	r3, [sp, #16]
    eace:	2b00      	cmp	r3, #0
    ead0:	d160      	bne.n	eb94 <log_output_process+0x180>
	if (color) {
    ead2:	07f3      	lsls	r3, r6, #31
    ead4:	f100 80cf 	bmi.w	ec76 <log_output_process+0x262>
	newline_print(output, flags);
    ead8:	4631      	mov	r1, r6
    eada:	4620      	mov	r0, r4
    eadc:	f7ff ff60 	bl	e9a0 <newline_print>
}
    eae0:	e0c3      	b.n	ec6a <log_output_process+0x256>
	uint32_t length = 0U;
    eae2:	4680      	mov	r8, r0
    eae4:	e7b8      	b.n	ea58 <log_output_process+0x44>
	} else if (freq != 0U) {
    eae6:	4b70      	ldr	r3, [pc, #448]	; (eca8 <log_output_process+0x294>)
    eae8:	6818      	ldr	r0, [r3, #0]
    eaea:	2800      	cmp	r0, #0
    eaec:	d0bf      	beq.n	ea6e <log_output_process+0x5a>
		timestamp /= timestamp_div;
    eaee:	4b6f      	ldr	r3, [pc, #444]	; (ecac <log_output_process+0x298>)
		ms = (remainder * 1000U) / freq;
    eaf0:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    eaf4:	681b      	ldr	r3, [r3, #0]
    eaf6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    eafa:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    eafe:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    eb02:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    eb06:	fb09 f505 	mul.w	r5, r9, r5
    eb0a:	fbb3 f2f1 	udiv	r2, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eb0e:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    eb12:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    eb16:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eb1a:	fb00 551e 	mls	r5, r0, lr, r5
		mins = seconds / 60U;
    eb1e:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    eb22:	fb09 f505 	mul.w	r5, r9, r5
    eb26:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    eb2a:	fb0c 1113 	mls	r1, ip, r3, r1
    eb2e:	4620      	mov	r0, r4
    eb30:	9100      	str	r1, [sp, #0]
    eb32:	e9cd e501 	strd	lr, r5, [sp, #4]
    eb36:	495e      	ldr	r1, [pc, #376]	; (ecb0 <log_output_process+0x29c>)
    eb38:	f7ff ff20 	bl	e97c <print_formatted>
    eb3c:	e797      	b.n	ea6e <log_output_process+0x5a>
	int total = 0;
    eb3e:	f006 0508 	and.w	r5, r6, #8
    eb42:	e7af      	b.n	eaa4 <log_output_process+0x90>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb44:	f1ba 0f01 	cmp.w	sl, #1
    eb48:	d106      	bne.n	eb58 <log_output_process+0x144>
	if (package) {
    eb4a:	b9ef      	cbnz	r7, eb88 <log_output_process+0x174>
	if (data_len) {
    eb4c:	9b04      	ldr	r3, [sp, #16]
    eb4e:	2b00      	cmp	r3, #0
    eb50:	f000 808b 	beq.w	ec6a <log_output_process+0x256>
		prefix_offset = 0;
    eb54:	2500      	movs	r5, #0
    eb56:	e01d      	b.n	eb94 <log_output_process+0x180>
	if (package) {
    eb58:	2f00      	cmp	r7, #0
    eb5a:	d0f7      	beq.n	eb4c <log_output_process+0x138>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb5c:	4855      	ldr	r0, [pc, #340]	; (ecb4 <log_output_process+0x2a0>)
    eb5e:	e014      	b.n	eb8a <log_output_process+0x176>
		cb = out_func;
    eb60:	4855      	ldr	r0, [pc, #340]	; (ecb8 <log_output_process+0x2a4>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    eb62:	463b      	mov	r3, r7
    eb64:	4622      	mov	r2, r4
    eb66:	4955      	ldr	r1, [pc, #340]	; (ecbc <log_output_process+0x2a8>)
    eb68:	f01b fb11 	bl	2a18e <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    eb6c:	2800      	cmp	r0, #0
    eb6e:	da0e      	bge.n	eb8e <log_output_process+0x17a>
    eb70:	4953      	ldr	r1, [pc, #332]	; (ecc0 <log_output_process+0x2ac>)
    eb72:	4854      	ldr	r0, [pc, #336]	; (ecc4 <log_output_process+0x2b0>)
    eb74:	f44f 7300 	mov.w	r3, #512	; 0x200
    eb78:	4a53      	ldr	r2, [pc, #332]	; (ecc8 <log_output_process+0x2b4>)
    eb7a:	f01b fdae 	bl	2a6da <assert_print>
    eb7e:	f44f 7100 	mov.w	r1, #512	; 0x200
    eb82:	4851      	ldr	r0, [pc, #324]	; (ecc8 <log_output_process+0x2b4>)
    eb84:	f01b fda2 	bl	2a6cc <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    eb88:	484b      	ldr	r0, [pc, #300]	; (ecb8 <log_output_process+0x2a4>)
		prefix_offset = 0;
    eb8a:	465d      	mov	r5, fp
    eb8c:	e7e9      	b.n	eb62 <log_output_process+0x14e>
	if (data_len) {
    eb8e:	9b04      	ldr	r3, [sp, #16]
    eb90:	2b00      	cmp	r3, #0
    eb92:	d066      	beq.n	ec62 <log_output_process+0x24e>
		print_formatted(output, " ");
    eb94:	f8df 8134 	ldr.w	r8, [pc, #308]	; eccc <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
    eb98:	f8df 9134 	ldr.w	r9, [pc, #308]	; ecd0 <log_output_process+0x2bc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eb9c:	9f04      	ldr	r7, [sp, #16]
	newline_print(output, flags);
    eb9e:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eba0:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    eba2:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    eba4:	bf28      	it	cs
    eba6:	2710      	movcs	r7, #16
	for (int i = 0; i < prefix_offset; i++) {
    eba8:	f04f 0a00 	mov.w	sl, #0
	newline_print(output, flags);
    ebac:	f7ff fef8 	bl	e9a0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    ebb0:	4555      	cmp	r5, sl
    ebb2:	dc43      	bgt.n	ec3c <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
    ebb4:	9b05      	ldr	r3, [sp, #20]
    ebb6:	4649      	mov	r1, r9
    ebb8:	4620      	mov	r0, r4
    ebba:	781a      	ldrb	r2, [r3, #0]
    ebbc:	f7ff fede 	bl	e97c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebc0:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    ebc4:	f01a 0f07 	tst.w	sl, #7
    ebc8:	d103      	bne.n	ebd2 <log_output_process+0x1be>
			print_formatted(output, " ");
    ebca:	4641      	mov	r1, r8
    ebcc:	4620      	mov	r0, r4
    ebce:	f7ff fed5 	bl	e97c <print_formatted>
		if (i < length) {
    ebd2:	4557      	cmp	r7, sl
    ebd4:	d939      	bls.n	ec4a <log_output_process+0x236>
			print_formatted(output, "%02x ", data[i]);
    ebd6:	9b05      	ldr	r3, [sp, #20]
    ebd8:	4649      	mov	r1, r9
    ebda:	4620      	mov	r0, r4
    ebdc:	f813 200a 	ldrb.w	r2, [r3, sl]
    ebe0:	f7ff fecc 	bl	e97c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebe4:	f10a 0a01 	add.w	sl, sl, #1
    ebe8:	f1ba 0f10 	cmp.w	sl, #16
    ebec:	d1ea      	bne.n	ebc4 <log_output_process+0x1b0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ebee:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    ebf2:	4620      	mov	r0, r4
    ebf4:	4937      	ldr	r1, [pc, #220]	; (ecd4 <log_output_process+0x2c0>)
    ebf6:	f7ff fec1 	bl	e97c <print_formatted>
		if (i < length) {
    ebfa:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    ebfc:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    ebfe:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    ec00:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    ec02:	4b35      	ldr	r3, [pc, #212]	; (ecd8 <log_output_process+0x2c4>)
    ec04:	5c99      	ldrb	r1, [r3, r2]
    ec06:	f011 0f97 	tst.w	r1, #151	; 0x97
    ec0a:	bf08      	it	eq
    ec0c:	222e      	moveq	r2, #46	; 0x2e
    ec0e:	4933      	ldr	r1, [pc, #204]	; (ecdc <log_output_process+0x2c8>)
    ec10:	f7ff feb4 	bl	e97c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    ec14:	f10a 0a01 	add.w	sl, sl, #1
    ec18:	f1ba 0f10 	cmp.w	sl, #16
    ec1c:	d01a      	beq.n	ec54 <log_output_process+0x240>
		if (i > 0 && !(i % 8)) {
    ec1e:	f01a 0f07 	tst.w	sl, #7
    ec22:	d103      	bne.n	ec2c <log_output_process+0x218>
			print_formatted(output, " ");
    ec24:	4641      	mov	r1, r8
    ec26:	4620      	mov	r0, r4
    ec28:	f7ff fea8 	bl	e97c <print_formatted>
		if (i < length) {
    ec2c:	4557      	cmp	r7, sl
    ec2e:	4652      	mov	r2, sl
    ec30:	d8e4      	bhi.n	ebfc <log_output_process+0x1e8>
			print_formatted(output, " ");
    ec32:	4641      	mov	r1, r8
    ec34:	4620      	mov	r0, r4
    ec36:	f7ff fea1 	bl	e97c <print_formatted>
    ec3a:	e7eb      	b.n	ec14 <log_output_process+0x200>
		print_formatted(output, " ");
    ec3c:	4641      	mov	r1, r8
    ec3e:	4620      	mov	r0, r4
    ec40:	f7ff fe9c 	bl	e97c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    ec44:	f10a 0a01 	add.w	sl, sl, #1
    ec48:	e7b2      	b.n	ebb0 <log_output_process+0x19c>
			print_formatted(output, "   ");
    ec4a:	4620      	mov	r0, r4
    ec4c:	4924      	ldr	r1, [pc, #144]	; (ece0 <log_output_process+0x2cc>)
    ec4e:	f7ff fe95 	bl	e97c <print_formatted>
    ec52:	e7c7      	b.n	ebe4 <log_output_process+0x1d0>
		data += length;
    ec54:	9b05      	ldr	r3, [sp, #20]
    ec56:	443b      	add	r3, r7
    ec58:	9305      	str	r3, [sp, #20]
	} while (len);
    ec5a:	9b04      	ldr	r3, [sp, #16]
    ec5c:	1bdb      	subs	r3, r3, r7
    ec5e:	9304      	str	r3, [sp, #16]
    ec60:	d19c      	bne.n	eb9c <log_output_process+0x188>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    ec62:	f1bb 0f00 	cmp.w	fp, #0
    ec66:	f47f af34 	bne.w	ead2 <log_output_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    ec6a:	4620      	mov	r0, r4
}
    ec6c:	b009      	add	sp, #36	; 0x24
    ec6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    ec72:	f01b beb5 	b.w	2a9e0 <log_output_flush>
		print_formatted(output, "%s", log_color);
    ec76:	4620      	mov	r0, r4
    ec78:	4a05      	ldr	r2, [pc, #20]	; (ec90 <log_output_process+0x27c>)
    ec7a:	4906      	ldr	r1, [pc, #24]	; (ec94 <log_output_process+0x280>)
    ec7c:	f7ff fe7e 	bl	e97c <print_formatted>
}
    ec80:	e72a      	b.n	ead8 <log_output_process+0xc4>
    ec82:	bf00      	nop
    ec84:	00033891 	.word	0x00033891
    ec88:	00033895 	.word	0x00033895
    ec8c:	00031b78 	.word	0x00031b78
    ec90:	0003388c 	.word	0x0003388c
    ec94:	0003282c 	.word	0x0003282c
    ec98:	00031b8c 	.word	0x00031b8c
    ec9c:	000338ba 	.word	0x000338ba
    eca0:	000338c0 	.word	0x000338c0
    eca4:	000338c4 	.word	0x000338c4
    eca8:	2002148c 	.word	0x2002148c
    ecac:	20021488 	.word	0x20021488
    ecb0:	0003389e 	.word	0x0003389e
    ecb4:	0002a9fb 	.word	0x0002a9fb
    ecb8:	0000e9bd 	.word	0x0000e9bd
    ecbc:	0002a9d3 	.word	0x0002a9d3
    ecc0:	000338c9 	.word	0x000338c9
    ecc4:	00032679 	.word	0x00032679
    ecc8:	0003382d 	.word	0x0003382d
    eccc:	00037a95 	.word	0x00037a95
    ecd0:	000338d2 	.word	0x000338d2
    ecd4:	000338d8 	.word	0x000338d8
    ecd8:	00038be1 	.word	0x00038be1
    ecdc:	000338da 	.word	0x000338da
    ece0:	00037a93 	.word	0x00037a93

0000ece4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    ece4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    ece8:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    ecea:	684b      	ldr	r3, [r1, #4]
    ecec:	4605      	mov	r5, r0
    ecee:	460c      	mov	r4, r1
    ecf0:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    ecf2:	688e      	ldr	r6, [r1, #8]
    ecf4:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    ecf6:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    ecfa:	b15b      	cbz	r3, ed14 <log_output_msg_process+0x30>
    ecfc:	4a13      	ldr	r2, [pc, #76]	; (ed4c <log_output_msg_process+0x68>)
    ecfe:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    ed00:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ed04:	2900      	cmp	r1, #0
    ed06:	db1f      	blt.n	ed48 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    ed08:	7820      	ldrb	r0, [r4, #0]
    ed0a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ed0e:	f7ff fd9b 	bl	e848 <log_source_name_get>
    ed12:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    ed14:	4621      	mov	r1, r4
    ed16:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    ed1a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    ed1c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    ed20:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    ed22:	eb01 0402 	add.w	r4, r1, r2
    ed26:	bf08      	it	eq
    ed28:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    ed2a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    ed2e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    ed32:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ed36:	2200      	movs	r2, #0
    ed38:	4631      	mov	r1, r6
    ed3a:	4628      	mov	r0, r5
    ed3c:	9700      	str	r7, [sp, #0]
    ed3e:	f7ff fe69 	bl	ea14 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    ed42:	b006      	add	sp, #24
    ed44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    ed48:	2300      	movs	r3, #0
    ed4a:	e7e3      	b.n	ed14 <log_output_msg_process+0x30>
    ed4c:	0003149c 	.word	0x0003149c

0000ed50 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed50:	f242 730f 	movw	r3, #9999	; 0x270f
{
    ed54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed56:	428b      	cmp	r3, r1
    ed58:	bf28      	it	cs
    ed5a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    ed5c:	6805      	ldr	r5, [r0, #0]
{
    ed5e:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    ed60:	2105      	movs	r1, #5
    ed62:	4668      	mov	r0, sp
    ed64:	4a0d      	ldr	r2, [pc, #52]	; (ed9c <log_output_dropped_process+0x4c>)
    ed66:	f01b fb03 	bl	2a370 <snprintk>
    ed6a:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    ed6c:	6863      	ldr	r3, [r4, #4]
    ed6e:	4628      	mov	r0, r5
    ed70:	220b      	movs	r2, #11
    ed72:	685b      	ldr	r3, [r3, #4]
    ed74:	490a      	ldr	r1, [pc, #40]	; (eda0 <log_output_dropped_process+0x50>)
    ed76:	f01b fe1f 	bl	2a9b8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    ed7a:	6863      	ldr	r3, [r4, #4]
    ed7c:	4632      	mov	r2, r6
    ed7e:	4669      	mov	r1, sp
    ed80:	4628      	mov	r0, r5
    ed82:	685b      	ldr	r3, [r3, #4]
    ed84:	f01b fe18 	bl	2a9b8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    ed88:	6863      	ldr	r3, [r4, #4]
    ed8a:	221b      	movs	r2, #27
    ed8c:	4628      	mov	r0, r5
    ed8e:	685b      	ldr	r3, [r3, #4]
    ed90:	4904      	ldr	r1, [pc, #16]	; (eda4 <log_output_dropped_process+0x54>)
    ed92:	f01b fe11 	bl	2a9b8 <buffer_write>
		     output->control_block->ctx);
}
    ed96:	b002      	add	sp, #8
    ed98:	bd70      	pop	{r4, r5, r6, pc}
    ed9a:	bf00      	nop
    ed9c:	00032816 	.word	0x00032816
    eda0:	000338f9 	.word	0x000338f9
    eda4:	000338dd 	.word	0x000338dd

0000eda8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    eda8:	2100      	movs	r1, #0
    edaa:	2301      	movs	r3, #1
    edac:	4a06      	ldr	r2, [pc, #24]	; (edc8 <log_output_timestamp_freq_set+0x20>)
    edae:	4290      	cmp	r0, r2
    edb0:	d806      	bhi.n	edc0 <log_output_timestamp_freq_set+0x18>
    edb2:	4a06      	ldr	r2, [pc, #24]	; (edcc <log_output_timestamp_freq_set+0x24>)
    edb4:	b901      	cbnz	r1, edb8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    edb6:	2301      	movs	r3, #1
    edb8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    edba:	4b05      	ldr	r3, [pc, #20]	; (edd0 <log_output_timestamp_freq_set+0x28>)
    edbc:	6018      	str	r0, [r3, #0]
}
    edbe:	4770      	bx	lr
		timestamp_div *= 2U;
    edc0:	2101      	movs	r1, #1
		frequency /= 2U;
    edc2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    edc4:	005b      	lsls	r3, r3, #1
    edc6:	e7f2      	b.n	edae <log_output_timestamp_freq_set+0x6>
    edc8:	000f4240 	.word	0x000f4240
    edcc:	20021488 	.word	0x20021488
    edd0:	2002148c 	.word	0x2002148c

0000edd4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    edd4:	2201      	movs	r2, #1
    edd6:	4b01      	ldr	r3, [pc, #4]	; (eddc <log_backend_rtt_init+0x8>)
    edd8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    edda:	4770      	bx	lr
    eddc:	20022304 	.word	0x20022304

0000ede0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    ede0:	4b01      	ldr	r3, [pc, #4]	; (ede8 <format_set+0x8>)
	return 0;
}
    ede2:	2000      	movs	r0, #0
	log_format_current = log_type;
    ede4:	6019      	str	r1, [r3, #0]
}
    ede6:	4770      	bx	lr
    ede8:	200214a4 	.word	0x200214a4

0000edec <panic>:
	panic_mode = true;
    edec:	2201      	movs	r2, #1
    edee:	4b02      	ldr	r3, [pc, #8]	; (edf8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    edf0:	4802      	ldr	r0, [pc, #8]	; (edfc <panic+0x10>)
    edf2:	701a      	strb	r2, [r3, #0]
    edf4:	f01b bdf4 	b.w	2a9e0 <log_output_flush>
    edf8:	20022305 	.word	0x20022305
    edfc:	00031bbc 	.word	0x00031bbc

0000ee00 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    ee00:	4801      	ldr	r0, [pc, #4]	; (ee08 <dropped+0x8>)
    ee02:	f7ff bfa5 	b.w	ed50 <log_output_dropped_process>
    ee06:	bf00      	nop
    ee08:	00031bbc 	.word	0x00031bbc

0000ee0c <process>:
{
    ee0c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ee0e:	4b06      	ldr	r3, [pc, #24]	; (ee28 <process+0x1c>)
{
    ee10:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ee12:	6818      	ldr	r0, [r3, #0]
    ee14:	f7ff fabe 	bl	e394 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    ee18:	4621      	mov	r1, r4
}
    ee1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    ee1e:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    ee20:	220f      	movs	r2, #15
    ee22:	4802      	ldr	r0, [pc, #8]	; (ee2c <process+0x20>)
    ee24:	4718      	bx	r3
    ee26:	bf00      	nop
    ee28:	200214a4 	.word	0x200214a4
    ee2c:	00031bbc 	.word	0x00031bbc

0000ee30 <on_failed_write>:
	if (retry_cnt == 0) {
    ee30:	b910      	cbnz	r0, ee38 <on_failed_write+0x8>
		host_present = false;
    ee32:	4b07      	ldr	r3, [pc, #28]	; (ee50 <on_failed_write+0x20>)
    ee34:	7018      	strb	r0, [r3, #0]
}
    ee36:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    ee38:	4b06      	ldr	r3, [pc, #24]	; (ee54 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    ee3a:	781b      	ldrb	r3, [r3, #0]
    ee3c:	b11b      	cbz	r3, ee46 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    ee3e:	f241 3088 	movw	r0, #5000	; 0x1388
    ee42:	f021 ba8d 	b.w	30360 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    ee46:	20a4      	movs	r0, #164	; 0xa4
    ee48:	2100      	movs	r1, #0
    ee4a:	f018 bac1 	b.w	273d0 <z_impl_k_sleep>
    ee4e:	bf00      	nop
    ee50:	20022304 	.word	0x20022304
    ee54:	20022305 	.word	0x20022305

0000ee58 <data_out_block_mode>:
{
    ee58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee5c:	4680      	mov	r8, r0
    ee5e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    ee60:	2404      	movs	r4, #4
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    ee62:	f8df 9070 	ldr.w	r9, [pc, #112]	; eed4 <data_out_block_mode+0x7c>
    ee66:	4f1c      	ldr	r7, [pc, #112]	; (eed8 <data_out_block_mode+0x80>)
		if (!is_sync_mode()) {
    ee68:	f899 5000 	ldrb.w	r5, [r9]
    ee6c:	b995      	cbnz	r5, ee94 <data_out_block_mode+0x3c>
			RTT_LOCK();
    ee6e:	f015 fc3d 	bl	246ec <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ee72:	4628      	mov	r0, r5
    ee74:	4632      	mov	r2, r6
    ee76:	4641      	mov	r1, r8
    ee78:	f015 fbe6 	bl	24648 <SEGGER_RTT_WriteSkipNoLock>
    ee7c:	4605      	mov	r5, r0
			RTT_UNLOCK();
    ee7e:	f015 fc3f 	bl	24700 <zephyr_rtt_mutex_unlock>
		if (ret) {
    ee82:	b1e5      	cbz	r5, eebe <data_out_block_mode+0x66>
	host_present = true;
    ee84:	2301      	movs	r3, #1
    ee86:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    ee88:	f899 3000 	ldrb.w	r3, [r9]
    ee8c:	b973      	cbnz	r3, eeac <data_out_block_mode+0x54>
}
    ee8e:	4630      	mov	r0, r6
    ee90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    ee94:	4632      	mov	r2, r6
    ee96:	4641      	mov	r1, r8
    ee98:	2000      	movs	r0, #0
    ee9a:	f015 fbd5 	bl	24648 <SEGGER_RTT_WriteSkipNoLock>
    ee9e:	4605      	mov	r5, r0
    eea0:	e7ef      	b.n	ee82 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    eea2:	4620      	mov	r0, r4
    eea4:	1e65      	subs	r5, r4, #1
    eea6:	f7ff ffc3 	bl	ee30 <on_failed_write>
    eeaa:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    eeac:	2000      	movs	r0, #0
    eeae:	f015 fc13 	bl	246d8 <SEGGER_RTT_HasDataUp>
    eeb2:	2800      	cmp	r0, #0
    eeb4:	d0eb      	beq.n	ee8e <data_out_block_mode+0x36>
    eeb6:	783b      	ldrb	r3, [r7, #0]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d1f2      	bne.n	eea2 <data_out_block_mode+0x4a>
    eebc:	e7e7      	b.n	ee8e <data_out_block_mode+0x36>
		} else if (host_present) {
    eebe:	783b      	ldrb	r3, [r7, #0]
    eec0:	2b00      	cmp	r3, #0
    eec2:	d0e4      	beq.n	ee8e <data_out_block_mode+0x36>
			retry_cnt--;
    eec4:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    eec6:	4620      	mov	r0, r4
    eec8:	f7ff ffb2 	bl	ee30 <on_failed_write>
	} while ((ret == 0) && host_present);
    eecc:	783b      	ldrb	r3, [r7, #0]
    eece:	2b00      	cmp	r3, #0
    eed0:	d1ca      	bne.n	ee68 <data_out_block_mode+0x10>
    eed2:	e7dc      	b.n	ee8e <data_out_block_mode+0x36>
    eed4:	20022305 	.word	0x20022305
    eed8:	20022304 	.word	0x20022304

0000eedc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    eedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    eee0:	460f      	mov	r7, r1
    eee2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    eee4:	2108      	movs	r1, #8
    eee6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    eee8:	f01b fe25 	bl	2ab36 <nvs_al_size.isra.0>
    eeec:	4680      	mov	r8, r0

	*addr -= ate_size;
    eeee:	683c      	ldr	r4, [r7, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    eef0:	f8df 9048 	ldr.w	r9, [pc, #72]	; ef3c <nvs_recover_last_ate+0x60>
	*addr -= ate_size;
    eef4:	1a24      	subs	r4, r4, r0
    eef6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    eef8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    eefc:	42ac      	cmp	r4, r5
    eefe:	d803      	bhi.n	ef08 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    ef00:	2000      	movs	r0, #0
}
    ef02:	b003      	add	sp, #12
    ef04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    ef08:	2308      	movs	r3, #8
    ef0a:	466a      	mov	r2, sp
    ef0c:	4621      	mov	r1, r4
    ef0e:	4630      	mov	r0, r6
    ef10:	f01b fd81 	bl	2aa16 <nvs_flash_rd>
		if (rc) {
    ef14:	2800      	cmp	r0, #0
    ef16:	d1f4      	bne.n	ef02 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
    ef18:	4669      	mov	r1, sp
    ef1a:	4630      	mov	r0, r6
    ef1c:	f01b fe15 	bl	2ab4a <nvs_ate_valid>
    ef20:	b140      	cbz	r0, ef34 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
    ef22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    ef26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			data_end_addr &= ADDR_SECT_MASK;
    ef2a:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    ef2e:	4413      	add	r3, r2
    ef30:	441d      	add	r5, r3
			*addr = ate_end_addr;
    ef32:	603c      	str	r4, [r7, #0]
		ate_end_addr -= ate_size;
    ef34:	eba4 0408 	sub.w	r4, r4, r8
    ef38:	e7e0      	b.n	eefc <nvs_recover_last_ate+0x20>
    ef3a:	bf00      	nop
    ef3c:	ffff0000 	.word	0xffff0000

0000ef40 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
    ef40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef44:	b08f      	sub	sp, #60	; 0x3c
    ef46:	4604      	mov	r4, r0
    ef48:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    ef4a:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
    ef4e:	4640      	mov	r0, r8
    ef50:	f021 f926 	bl	301a0 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    ef54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    ef56:	6883      	ldr	r3, [r0, #8]
    ef58:	68db      	ldr	r3, [r3, #12]
    ef5a:	4798      	blx	r3
    ef5c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    ef5e:	b988      	cbnz	r0, ef84 <nvs_mount+0x44>
		LOG_ERR("Could not obtain flash parameters");
    ef60:	4b8d      	ldr	r3, [pc, #564]	; (f198 <nvs_mount+0x258>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
    ef62:	637b      	str	r3, [r7, #52]	; 0x34
    ef64:	2302      	movs	r3, #2
		return -EINVAL;
    ef66:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Unsupported write block size");
    ef6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ef6e:	488b      	ldr	r0, [pc, #556]	; (f19c <nvs_mount+0x25c>)
    ef70:	633b      	str	r3, [r7, #48]	; 0x30
    ef72:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ef76:	f01b fddb 	bl	2ab30 <z_log_msg_static_create.constprop.0>
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    ef7a:	4628      	mov	r0, r5
    ef7c:	373c      	adds	r7, #60	; 0x3c
    ef7e:	46bd      	mov	sp, r7
    ef80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    ef84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    ef86:	6883      	ldr	r3, [r0, #8]
    ef88:	68db      	ldr	r3, [r3, #12]
    ef8a:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    ef8c:	6803      	ldr	r3, [r0, #0]
    ef8e:	3b01      	subs	r3, #1
    ef90:	2b1f      	cmp	r3, #31
    ef92:	d901      	bls.n	ef98 <nvs_mount+0x58>
		LOG_ERR("Unsupported write block size");
    ef94:	4b82      	ldr	r3, [pc, #520]	; (f1a0 <nvs_mount+0x260>)
    ef96:	e7e4      	b.n	ef62 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    ef98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ef9a:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    ef9c:	f107 0214 	add.w	r2, r7, #20
    efa0:	f01f f9e1 	bl	2e366 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    efa4:	b108      	cbz	r0, efaa <nvs_mount+0x6a>
		LOG_ERR("Unable to get page info");
    efa6:	4b7f      	ldr	r3, [pc, #508]	; (f1a4 <nvs_mount+0x264>)
    efa8:	e7db      	b.n	ef62 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
    efaa:	89a5      	ldrh	r5, [r4, #12]
    efac:	b12d      	cbz	r5, efba <nvs_mount+0x7a>
    efae:	69bb      	ldr	r3, [r7, #24]
    efb0:	fbb5 f2f3 	udiv	r2, r5, r3
    efb4:	fb03 5512 	mls	r5, r3, r2, r5
    efb8:	b10d      	cbz	r5, efbe <nvs_mount+0x7e>
		LOG_ERR("Invalid sector size");
    efba:	4b7b      	ldr	r3, [pc, #492]	; (f1a8 <nvs_mount+0x268>)
    efbc:	e7d1      	b.n	ef62 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
    efbe:	89e3      	ldrh	r3, [r4, #14]
    efc0:	2b01      	cmp	r3, #1
    efc2:	d801      	bhi.n	efc8 <nvs_mount+0x88>
		LOG_ERR("Configuration error - sector count");
    efc4:	4b79      	ldr	r3, [pc, #484]	; (f1ac <nvs_mount+0x26c>)
    efc6:	e7cc      	b.n	ef62 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    efc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    efca:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    efcc:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    efd0:	f04f 33ff 	mov.w	r3, #4294967295
    efd4:	f04f 32ff 	mov.w	r2, #4294967295
    efd8:	4640      	mov	r0, r8
    efda:	f016 f8a3 	bl	25124 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    efde:	2108      	movs	r1, #8
    efe0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    efe2:	f01b fda8 	bl	2ab36 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    efe6:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    efe8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
    efea:	89e3      	ldrh	r3, [r4, #14]
    efec:	fa1f fb85 	uxth.w	fp, r5
    eff0:	455b      	cmp	r3, fp
    eff2:	d808      	bhi.n	f006 <nvs_mount+0xc6>
	if (closed_sectors == fs->sector_count) {
    eff4:	89e3      	ldrh	r3, [r4, #14]
    eff6:	454b      	cmp	r3, r9
    eff8:	d123      	bne.n	f042 <nvs_mount+0x102>
	return z_impl_k_mutex_unlock(mutex);
    effa:	4640      	mov	r0, r8
    effc:	f016 f962 	bl	252c4 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
    f000:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    f004:	e7b9      	b.n	ef7a <nvs_mount+0x3a>
		       (uint16_t)(fs->sector_size - ate_size);
    f006:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    f008:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    f00a:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
    f00c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f010:	4652      	mov	r2, sl
    f012:	2308      	movs	r3, #8
    f014:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    f016:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f018:	f01b fd4b 	bl	2aab2 <nvs_flash_cmp_const>
		if (rc) {
    f01c:	b178      	cbz	r0, f03e <nvs_mount+0xfe>
			nvs_sector_advance(fs, &addr);
    f01e:	4639      	mov	r1, r7
    f020:	4620      	mov	r0, r4
    f022:	f01b fd06 	bl	2aa32 <nvs_sector_advance>
			closed_sectors++;
    f026:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f02a:	2308      	movs	r3, #8
    f02c:	4652      	mov	r2, sl
    f02e:	4620      	mov	r0, r4
    f030:	6839      	ldr	r1, [r7, #0]
			closed_sectors++;
    f032:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    f036:	f01b fd3c 	bl	2aab2 <nvs_flash_cmp_const>
			if (!rc) {
    f03a:	2800      	cmp	r0, #0
    f03c:	d0da      	beq.n	eff4 <nvs_mount+0xb4>
	for (i = 0; i < fs->sector_count; i++) {
    f03e:	3501      	adds	r5, #1
    f040:	e7d3      	b.n	efea <nvs_mount+0xaa>
	if (i == fs->sector_count) {
    f042:	455b      	cmp	r3, fp
    f044:	d10b      	bne.n	f05e <nvs_mount+0x11e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    f046:	6839      	ldr	r1, [r7, #0]
    f048:	2308      	movs	r3, #8
    f04a:	4652      	mov	r2, sl
    f04c:	4620      	mov	r0, r4
    f04e:	1b89      	subs	r1, r1, r6
    f050:	f01b fd2f 	bl	2aab2 <nvs_flash_cmp_const>
		if (!rc) {
    f054:	b918      	cbnz	r0, f05e <nvs_mount+0x11e>
			nvs_sector_advance(fs, &addr);
    f056:	4639      	mov	r1, r7
    f058:	4620      	mov	r0, r4
    f05a:	f01b fcea 	bl	2aa32 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
    f05e:	4639      	mov	r1, r7
    f060:	4620      	mov	r0, r4
    f062:	f7ff ff3b 	bl	eedc <nvs_recover_last_ate>
	if (rc) {
    f066:	4605      	mov	r5, r0
    f068:	b118      	cbz	r0, f072 <nvs_mount+0x132>
    f06a:	4640      	mov	r0, r8
    f06c:	f016 f92a 	bl	252c4 <z_impl_k_mutex_unlock>
	if (rc) {
    f070:	e783      	b.n	ef7a <nvs_mount+0x3a>
	fs->ate_wra = addr;
    f072:	683b      	ldr	r3, [r7, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f074:	ea4f 4913 	mov.w	r9, r3, lsr #16
    f078:	ea4f 4909 	mov.w	r9, r9, lsl #16
	fs->ate_wra = addr;
    f07c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    f07e:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    f082:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    f086:	4299      	cmp	r1, r3
    f088:	d30f      	bcc.n	f0aa <nvs_mount+0x16a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f08a:	2308      	movs	r3, #8
    f08c:	4620      	mov	r0, r4
    f08e:	1d3a      	adds	r2, r7, #4
    f090:	f01b fcc1 	bl	2aa16 <nvs_flash_rd>
		if (rc) {
    f094:	4605      	mov	r5, r0
    f096:	2800      	cmp	r0, #0
    f098:	d1e7      	bne.n	f06a <nvs_mount+0x12a>
    f09a:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
    f09c:	f813 2b01 	ldrb.w	r2, [r3], #1
    f0a0:	4592      	cmp	sl, r2
    f0a2:	d144      	bne.n	f12e <nvs_mount+0x1ee>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    f0a4:	3501      	adds	r5, #1
    f0a6:	2d08      	cmp	r5, #8
    f0a8:	d1f8      	bne.n	f09c <nvs_mount+0x15c>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f0aa:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
    f0ac:	4639      	mov	r1, r7
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f0ae:	0c1b      	lsrs	r3, r3, #16
    f0b0:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
    f0b2:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
    f0b4:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
    f0b6:	f01b fcbc 	bl	2aa32 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    f0ba:	4652      	mov	r2, sl
    f0bc:	4620      	mov	r0, r4
    f0be:	89a3      	ldrh	r3, [r4, #12]
    f0c0:	6839      	ldr	r1, [r7, #0]
    f0c2:	f01b fcf6 	bl	2aab2 <nvs_flash_cmp_const>
	if (rc < 0) {
    f0c6:	1e05      	subs	r5, r0, #0
    f0c8:	dbcf      	blt.n	f06a <nvs_mount+0x12a>
		addr = fs->ate_wra + ate_size;
    f0ca:	6863      	ldr	r3, [r4, #4]
	if (rc) {
    f0cc:	f000 8082 	beq.w	f1d4 <nvs_mount+0x294>
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f0d0:	f64f 7aff 	movw	sl, #65535	; 0xffff
		addr = fs->ate_wra + ate_size;
    f0d4:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f0d8:	89a3      	ldrh	r3, [r4, #12]
    f0da:	fa1f f289 	uxth.w	r2, r9
    f0de:	1b9b      	subs	r3, r3, r6
    f0e0:	429a      	cmp	r2, r3
		addr = fs->ate_wra + ate_size;
    f0e2:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
    f0e6:	d33c      	bcc.n	f162 <nvs_mount+0x222>
		LOG_INF("No GC Done marker found: restarting gc");
    f0e8:	4b31      	ldr	r3, [pc, #196]	; (f1b0 <nvs_mount+0x270>)
    f0ea:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f0ee:	637b      	str	r3, [r7, #52]	; 0x34
    f0f0:	2302      	movs	r3, #2
    f0f2:	482a      	ldr	r0, [pc, #168]	; (f19c <nvs_mount+0x25c>)
    f0f4:	633b      	str	r3, [r7, #48]	; 0x30
    f0f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f0fa:	f01b fd19 	bl	2ab30 <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f0fe:	4620      	mov	r0, r4
    f100:	6861      	ldr	r1, [r4, #4]
    f102:	f01b fcfb 	bl	2aafc <nvs_flash_erase_sector>
		if (rc) {
    f106:	4605      	mov	r5, r0
    f108:	2800      	cmp	r0, #0
    f10a:	d1ae      	bne.n	f06a <nvs_mount+0x12a>
		fs->ate_wra &= ADDR_SECT_MASK;
    f10c:	6863      	ldr	r3, [r4, #4]
    f10e:	4a29      	ldr	r2, [pc, #164]	; (f1b4 <nvs_mount+0x274>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f110:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    f112:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    f114:	440b      	add	r3, r1
    f116:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    f11a:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f11c:	4013      	ands	r3, r2
		rc = nvs_gc(fs);
    f11e:	4620      	mov	r0, r4
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    f120:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f122:	f01b fdf4 	bl	2ad0e <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
    f126:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f128:	2d00      	cmp	r5, #0
    f12a:	d06f      	beq.n	f20c <nvs_mount+0x2cc>
    f12c:	e79d      	b.n	f06a <nvs_mount+0x12a>
		if (nvs_ate_valid(fs, &last_ate)) {
    f12e:	4620      	mov	r0, r4
    f130:	1d39      	adds	r1, r7, #4
    f132:	f01b fd0a 	bl	2ab4a <nvs_ate_valid>
    f136:	6862      	ldr	r2, [r4, #4]
    f138:	b910      	cbnz	r0, f140 <nvs_mount+0x200>
		fs->ate_wra -= ate_size;
    f13a:	1b92      	subs	r2, r2, r6
    f13c:	6062      	str	r2, [r4, #4]
    f13e:	e7a0      	b.n	f082 <nvs_mount+0x142>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f140:	893d      	ldrh	r5, [r7, #8]
    f142:	88f9      	ldrh	r1, [r7, #6]
    f144:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    f146:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f14a:	4429      	add	r1, r5
    f14c:	f01b fcf3 	bl	2ab36 <nvs_al_size.isra.0>
    f150:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f152:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
    f154:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    f156:	d1f0      	bne.n	f13a <nvs_mount+0x1fa>
    f158:	2d00      	cmp	r5, #0
    f15a:	d0ee      	beq.n	f13a <nvs_mount+0x1fa>
				rc = -ESPIPE;
    f15c:	f06f 051c 	mvn.w	r5, #28
    f160:	e09c      	b.n	f29c <nvs_mount+0x35c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    f162:	2308      	movs	r3, #8
    f164:	4649      	mov	r1, r9
    f166:	4620      	mov	r0, r4
    f168:	f107 020c 	add.w	r2, r7, #12
    f16c:	f01b fc53 	bl	2aa16 <nvs_flash_rd>
			if (rc) {
    f170:	4605      	mov	r5, r0
    f172:	2800      	cmp	r0, #0
    f174:	f47f af79 	bne.w	f06a <nvs_mount+0x12a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
    f178:	4620      	mov	r0, r4
    f17a:	f107 010c 	add.w	r1, r7, #12
    f17e:	f01b fce4 	bl	2ab4a <nvs_ate_valid>
    f182:	b130      	cbz	r0, f192 <nvs_mount+0x252>
    f184:	89bb      	ldrh	r3, [r7, #12]
    f186:	4553      	cmp	r3, sl
    f188:	d103      	bne.n	f192 <nvs_mount+0x252>
			    (gc_done_ate.id == 0xffff) &&
    f18a:	8a3b      	ldrh	r3, [r7, #16]
    f18c:	2b00      	cmp	r3, #0
    f18e:	f000 808b 	beq.w	f2a8 <nvs_mount+0x368>
			addr += ate_size;
    f192:	44b1      	add	r9, r6
    f194:	e7a0      	b.n	f0d8 <nvs_mount+0x198>
    f196:	bf00      	nop
    f198:	00033949 	.word	0x00033949
    f19c:	0003157c 	.word	0x0003157c
    f1a0:	0003396b 	.word	0x0003396b
    f1a4:	00033988 	.word	0x00033988
    f1a8:	000339a0 	.word	0x000339a0
    f1ac:	000339b4 	.word	0x000339b4
    f1b0:	00033a11 	.word	0x00033a11
    f1b4:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    f1b8:	4652      	mov	r2, sl
    f1ba:	4620      	mov	r0, r4
    f1bc:	1a5b      	subs	r3, r3, r1
    f1be:	f01b fc78 	bl	2aab2 <nvs_flash_cmp_const>
		if (rc < 0) {
    f1c2:	1e05      	subs	r5, r0, #0
    f1c4:	f6ff af51 	blt.w	f06a <nvs_mount+0x12a>
		if (!rc) {
    f1c8:	d008      	beq.n	f1dc <nvs_mount+0x29c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    f1ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f1cc:	68a3      	ldr	r3, [r4, #8]
    f1ce:	6812      	ldr	r2, [r2, #0]
    f1d0:	4413      	add	r3, r2
    f1d2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
    f1d4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    f1d8:	428b      	cmp	r3, r1
    f1da:	d8ed      	bhi.n	f1b8 <nvs_mount+0x278>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1dc:	6861      	ldr	r1, [r4, #4]
    f1de:	89a3      	ldrh	r3, [r4, #12]
    f1e0:	eb01 0246 	add.w	r2, r1, r6, lsl #1
    f1e4:	429a      	cmp	r2, r3
    f1e6:	d19f      	bne.n	f128 <nvs_mount+0x1e8>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f1e8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; f2d8 <nvs_mount+0x398>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1ec:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
    f1ee:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
    f1f2:	4293      	cmp	r3, r2
    f1f4:	d098      	beq.n	f128 <nvs_mount+0x1e8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    f1f6:	4620      	mov	r0, r4
    f1f8:	f01b fc80 	bl	2aafc <nvs_flash_erase_sector>
		if (rc) {
    f1fc:	4605      	mov	r5, r0
    f1fe:	2800      	cmp	r0, #0
    f200:	f47f af33 	bne.w	f06a <nvs_mount+0x12a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f204:	6863      	ldr	r3, [r4, #4]
    f206:	ea03 0309 	and.w	r3, r3, r9
    f20a:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
    f20c:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f20e:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
    f210:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
    f214:	429a      	cmp	r2, r3
    f216:	d03d      	beq.n	f294 <nvs_mount+0x354>
    f218:	4640      	mov	r0, r8
    f21a:	f016 f853 	bl	252c4 <z_impl_k_mutex_unlock>
	fs->ready = true;
    f21e:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f220:	46e8      	mov	r8, sp
    f222:	b088      	sub	sp, #32
	fs->ready = true;
    f224:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    f226:	466d      	mov	r5, sp
    f228:	89e2      	ldrh	r2, [r4, #14]
    f22a:	89a3      	ldrh	r3, [r4, #12]
    f22c:	f04f 0904 	mov.w	r9, #4
    f230:	462e      	mov	r6, r5
    f232:	492a      	ldr	r1, [pc, #168]	; (f2dc <nvs_mount+0x39c>)
    f234:	61eb      	str	r3, [r5, #28]
    f236:	e9c5 1205 	strd	r1, r2, [r5, #20]
    f23a:	f846 9f10 	str.w	r9, [r6, #16]!
    f23e:	4632      	mov	r2, r6
    f240:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f244:	4826      	ldr	r0, [pc, #152]	; (f2e0 <nvs_mount+0x3a0>)
    f246:	f01b fc73 	bl	2ab30 <z_log_msg_static_create.constprop.0>
    f24a:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
    f24c:	6863      	ldr	r3, [r4, #4]
    f24e:	46ad      	mov	sp, r5
    f250:	4a24      	ldr	r2, [pc, #144]	; (f2e4 <nvs_mount+0x3a4>)
    f252:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f256:	616a      	str	r2, [r5, #20]
    f258:	0c1a      	lsrs	r2, r3, #16
    f25a:	b29b      	uxth	r3, r3
    f25c:	61aa      	str	r2, [r5, #24]
    f25e:	61eb      	str	r3, [r5, #28]
    f260:	4632      	mov	r2, r6
    f262:	481f      	ldr	r0, [pc, #124]	; (f2e0 <nvs_mount+0x3a0>)
    f264:	f8c5 9010 	str.w	r9, [r5, #16]
    f268:	f01b fc62 	bl	2ab30 <z_log_msg_static_create.constprop.0>
    f26c:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
    f26e:	68a3      	ldr	r3, [r4, #8]
    f270:	46ad      	mov	sp, r5
    f272:	4a1d      	ldr	r2, [pc, #116]	; (f2e8 <nvs_mount+0x3a8>)
    f274:	f8c5 9010 	str.w	r9, [r5, #16]
    f278:	616a      	str	r2, [r5, #20]
    f27a:	0c1a      	lsrs	r2, r3, #16
    f27c:	b29b      	uxth	r3, r3
    f27e:	61aa      	str	r2, [r5, #24]
    f280:	61eb      	str	r3, [r5, #28]
    f282:	4632      	mov	r2, r6
    f284:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    f288:	4815      	ldr	r0, [pc, #84]	; (f2e0 <nvs_mount+0x3a0>)
    f28a:	f01b fc51 	bl	2ab30 <z_log_msg_static_create.constprop.0>
	return 0;
    f28e:	2500      	movs	r5, #0
    f290:	46c5      	mov	sp, r8
    f292:	e672      	b.n	ef7a <nvs_mount+0x3a>
		rc = nvs_add_gc_done_ate(fs);
    f294:	4620      	mov	r0, r4
    f296:	f01b fd25 	bl	2ace4 <nvs_add_gc_done_ate>
    f29a:	4605      	mov	r5, r0
    f29c:	4640      	mov	r0, r8
    f29e:	f016 f811 	bl	252c4 <z_impl_k_mutex_unlock>
	if (rc) {
    f2a2:	2d00      	cmp	r5, #0
    f2a4:	d0bb      	beq.n	f21e <nvs_mount+0x2de>
    f2a6:	e668      	b.n	ef7a <nvs_mount+0x3a>
			LOG_INF("GC Done marker found");
    f2a8:	4b10      	ldr	r3, [pc, #64]	; (f2ec <nvs_mount+0x3ac>)
    f2aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f2ae:	637b      	str	r3, [r7, #52]	; 0x34
    f2b0:	2302      	movs	r3, #2
    f2b2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f2b6:	633b      	str	r3, [r7, #48]	; 0x30
    f2b8:	4809      	ldr	r0, [pc, #36]	; (f2e0 <nvs_mount+0x3a0>)
    f2ba:	f01b fc39 	bl	2ab30 <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f2be:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
    f2c0:	4639      	mov	r1, r7
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f2c2:	0c1b      	lsrs	r3, r3, #16
			nvs_sector_advance(fs, &addr);
    f2c4:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
    f2c6:	041b      	lsls	r3, r3, #16
    f2c8:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
    f2ca:	f01b fbb2 	bl	2aa32 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
    f2ce:	4620      	mov	r0, r4
    f2d0:	6839      	ldr	r1, [r7, #0]
    f2d2:	f01b fc13 	bl	2aafc <nvs_flash_erase_sector>
    f2d6:	e726      	b.n	f126 <nvs_mount+0x1e6>
    f2d8:	ffff0000 	.word	0xffff0000
    f2dc:	000339d7 	.word	0x000339d7
    f2e0:	0003157c 	.word	0x0003157c
    f2e4:	000339ee 	.word	0x000339ee
    f2e8:	00033a00 	.word	0x00033a00
    f2ec:	00033a38 	.word	0x00033a38

0000f2f0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2f4:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    f2f6:	7c03      	ldrb	r3, [r0, #16]
{
    f2f8:	4604      	mov	r4, r0
    f2fa:	4689      	mov	r9, r1
    f2fc:	4690      	mov	r8, r2
    f2fe:	b08d      	sub	sp, #52	; 0x34
	if (!fs->ready) {
    f300:	b97b      	cbnz	r3, f322 <nvs_write+0x32>
		LOG_ERR("NVS not initialized");
    f302:	4b66      	ldr	r3, [pc, #408]	; (f49c <nvs_write+0x1ac>)
		return -EACCES;
    f304:	f06f 060c 	mvn.w	r6, #12
		LOG_ERR("NVS not initialized");
    f308:	930b      	str	r3, [sp, #44]	; 0x2c
    f30a:	2302      	movs	r3, #2
    f30c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f310:	4863      	ldr	r0, [pc, #396]	; (f4a0 <nvs_write+0x1b0>)
    f312:	aa0a      	add	r2, sp, #40	; 0x28
    f314:	930a      	str	r3, [sp, #40]	; 0x28
    f316:	f01b fc0b 	bl	2ab30 <z_log_msg_static_create.constprop.0>
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    f31a:	4630      	mov	r0, r6
    f31c:	b00d      	add	sp, #52	; 0x34
    f31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f322:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    f324:	2108      	movs	r1, #8
    f326:	4610      	mov	r0, r2
    f328:	f01b fc05 	bl	2ab36 <nvs_al_size.isra.0>
    f32c:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    f32e:	4629      	mov	r1, r5
    f330:	4610      	mov	r0, r2
    f332:	f01b fc00 	bl	2ab36 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f336:	89a3      	ldrh	r3, [r4, #12]
	data_size = nvs_al_size(fs, len);
    f338:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
    f33a:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
    f33e:	42ab      	cmp	r3, r5
    f340:	f0c0 80a9 	bcc.w	f496 <nvs_write+0x1a6>
    f344:	b11d      	cbz	r5, f34e <nvs_write+0x5e>
	    ((len > 0) && (data == NULL))) {
    f346:	f1b8 0f00 	cmp.w	r8, #0
    f34a:	f000 80a4 	beq.w	f496 <nvs_write+0x1a6>
	wlk_addr = fs->ate_wra;
    f34e:	6863      	ldr	r3, [r4, #4]
    f350:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f352:	4620      	mov	r0, r4
    f354:	aa04      	add	r2, sp, #16
    f356:	a903      	add	r1, sp, #12
		rd_addr = wlk_addr;
    f358:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f35c:	f01b fc2d 	bl	2abba <nvs_prev_ate>
		if (rc) {
    f360:	4606      	mov	r6, r0
    f362:	2800      	cmp	r0, #0
    f364:	d1d9      	bne.n	f31a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f366:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f36a:	454b      	cmp	r3, r9
    f36c:	d005      	beq.n	f37a <nvs_write+0x8a>
		if (wlk_addr == fs->ate_wra) {
    f36e:	6862      	ldr	r2, [r4, #4]
    f370:	9b03      	ldr	r3, [sp, #12]
    f372:	429a      	cmp	r2, r3
    f374:	d1ed      	bne.n	f352 <nvs_write+0x62>
		if (len == 0) {
    f376:	b9e5      	cbnz	r5, f3b2 <nvs_write+0xc2>
    f378:	e7cf      	b.n	f31a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
    f37a:	4620      	mov	r0, r4
    f37c:	a904      	add	r1, sp, #16
    f37e:	f01b fbe4 	bl	2ab4a <nvs_ate_valid>
    f382:	2800      	cmp	r0, #0
    f384:	d0f3      	beq.n	f36e <nvs_write+0x7e>
		rd_addr += wlk_ate.offset;
    f386:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
    f38a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    f38e:	b175      	cbz	r5, f3ae <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    f390:	42ab      	cmp	r3, r5
    f392:	d10e      	bne.n	f3b2 <nvs_write+0xc2>
		rd_addr &= ADDR_SECT_MASK;
    f394:	ea4f 411b 	mov.w	r1, fp, lsr #16
    f398:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    f39a:	4401      	add	r1, r0
    f39c:	462b      	mov	r3, r5
    f39e:	4642      	mov	r2, r8
    f3a0:	4620      	mov	r0, r4
    f3a2:	f01b fb53 	bl	2aa4c <nvs_flash_block_cmp>
			if (rc <= 0) {
    f3a6:	2800      	cmp	r0, #0
    f3a8:	dc03      	bgt.n	f3b2 <nvs_write+0xc2>
    f3aa:	4606      	mov	r6, r0
    f3ac:	e7b5      	b.n	f31a <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    f3ae:	2b00      	cmp	r3, #0
    f3b0:	d0b3      	beq.n	f31a <nvs_write+0x2a>
	if (data_size) {
    f3b2:	2f00      	cmp	r7, #0
    f3b4:	d13e      	bne.n	f434 <nvs_write+0x144>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    f3b6:	f104 0314 	add.w	r3, r4, #20
    f3ba:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    f3bc:	f04f 32ff 	mov.w	r2, #4294967295
    f3c0:	f04f 33ff 	mov.w	r3, #4294967295
    f3c4:	f104 0014 	add.w	r0, r4, #20
    f3c8:	f015 feac 	bl	25124 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    f3cc:	f8df b0d4 	ldr.w	fp, [pc, #212]	; f4a4 <nvs_write+0x1b4>
		if (gc_count == fs->sector_count) {
    f3d0:	89e3      	ldrh	r3, [r4, #14]
    f3d2:	429e      	cmp	r6, r3
    f3d4:	d05c      	beq.n	f490 <nvs_write+0x1a0>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
    f3d6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f3da:	18f9      	adds	r1, r7, r3
    f3dc:	428a      	cmp	r2, r1
    f3de:	d32c      	bcc.n	f43a <nvs_write+0x14a>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    f3e0:	f8ad 301a 	strh.w	r3, [sp, #26]
	entry.part = 0xff;
    f3e4:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    f3e6:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    f3e8:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    f3ec:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    f3f0:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
    f3f4:	f01b fb54 	bl	2aaa0 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f3f8:	462b      	mov	r3, r5
    f3fa:	4642      	mov	r2, r8
    f3fc:	68a1      	ldr	r1, [r4, #8]
    f3fe:	4620      	mov	r0, r4
    f400:	f01b fc25 	bl	2ac4e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
    f404:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
    f406:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
    f408:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f40a:	f01b fb94 	bl	2ab36 <nvs_al_size.isra.0>
    f40e:	68a2      	ldr	r2, [r4, #8]
    f410:	4402      	add	r2, r0
    f412:	60a2      	str	r2, [r4, #8]
	if (rc) {
    f414:	f1ba 0f00 	cmp.w	sl, #0
    f418:	d107      	bne.n	f42a <nvs_write+0x13a>
	rc = nvs_flash_ate_wrt(fs, &entry);
    f41a:	4620      	mov	r0, r4
    f41c:	a906      	add	r1, sp, #24
    f41e:	f01b fc50 	bl	2acc2 <nvs_flash_ate_wrt>
	rc = len;
    f422:	2800      	cmp	r0, #0
    f424:	bf14      	ite	ne
    f426:	4682      	movne	sl, r0
    f428:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
    f42a:	9801      	ldr	r0, [sp, #4]
    f42c:	f015 ff4a 	bl	252c4 <z_impl_k_mutex_unlock>
	return rc;
    f430:	4656      	mov	r6, sl
    f432:	e772      	b.n	f31a <nvs_write+0x2a>
		required_space = data_size + ate_size;
    f434:	4457      	add	r7, sl
    f436:	b2bf      	uxth	r7, r7
    f438:	e7bd      	b.n	f3b6 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f43a:	2108      	movs	r1, #8
    f43c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f43e:	f01b fb7a 	bl	2ab36 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    f442:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f446:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    f44a:	2300      	movs	r3, #0
    f44c:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    f450:	1813      	adds	r3, r2, r0
    f452:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    f456:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    f458:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    f45c:	441a      	add	r2, r3
    f45e:	1a10      	subs	r0, r2, r0
    f460:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    f462:	a806      	add	r0, sp, #24
    f464:	f01b fb1c 	bl	2aaa0 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    f468:	a906      	add	r1, sp, #24
    f46a:	4620      	mov	r0, r4
    f46c:	f01b fc29 	bl	2acc2 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    f470:	4620      	mov	r0, r4
    f472:	1d21      	adds	r1, r4, #4
    f474:	f01b fadd 	bl	2aa32 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f478:	6863      	ldr	r3, [r4, #4]
		rc = nvs_gc(fs);
    f47a:	4620      	mov	r0, r4
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    f47c:	ea03 030b 	and.w	r3, r3, fp
    f480:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    f482:	f01b fc44 	bl	2ad0e <nvs_gc>
		if (rc) {
    f486:	4682      	mov	sl, r0
    f488:	2800      	cmp	r0, #0
    f48a:	d1ce      	bne.n	f42a <nvs_write+0x13a>
		gc_count++;
    f48c:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
    f48e:	e79f      	b.n	f3d0 <nvs_write+0xe0>
			rc = -ENOSPC;
    f490:	f06f 0a1b 	mvn.w	sl, #27
    f494:	e7c9      	b.n	f42a <nvs_write+0x13a>
		return -EINVAL;
    f496:	f06f 0615 	mvn.w	r6, #21
    f49a:	e73e      	b.n	f31a <nvs_write+0x2a>
    f49c:	00033935 	.word	0x00033935
    f4a0:	0003157c 	.word	0x0003157c
    f4a4:	ffff0000 	.word	0xffff0000

0000f4a8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    f4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4ac:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    f4ae:	7c03      	ldrb	r3, [r0, #16]
{
    f4b0:	b088      	sub	sp, #32
    f4b2:	4604      	mov	r4, r0
    f4b4:	460f      	mov	r7, r1
    f4b6:	4690      	mov	r8, r2
    f4b8:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
	if (!fs->ready) {
    f4bc:	b973      	cbnz	r3, f4dc <nvs_read_hist+0x34>
		LOG_ERR("NVS not initialized");
    f4be:	4b2f      	ldr	r3, [pc, #188]	; (f57c <nvs_read_hist+0xd4>)
    f4c0:	482f      	ldr	r0, [pc, #188]	; (f580 <nvs_read_hist+0xd8>)
    f4c2:	9307      	str	r3, [sp, #28]
    f4c4:	2302      	movs	r3, #2
    f4c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f4ca:	aa06      	add	r2, sp, #24
    f4cc:	9306      	str	r3, [sp, #24]
    f4ce:	f01b fb2f 	bl	2ab30 <z_log_msg_static_create.constprop.0>
		return -EACCES;
    f4d2:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    f4d6:	b008      	add	sp, #32
    f4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    f4dc:	2108      	movs	r1, #8
    f4de:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f4e0:	f01b fb29 	bl	2ab36 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    f4e4:	89a3      	ldrh	r3, [r4, #12]
    f4e6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    f4ea:	42b3      	cmp	r3, r6
    f4ec:	d343      	bcc.n	f576 <nvs_read_hist+0xce>
	cnt_his = 0U;
    f4ee:	2500      	movs	r5, #0
	wlk_addr = fs->ate_wra;
    f4f0:	f8d4 a004 	ldr.w	sl, [r4, #4]
    f4f4:	f8cd a004 	str.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f4f8:	454d      	cmp	r5, r9
    f4fa:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
    f4fc:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
    f500:	d909      	bls.n	f516 <nvs_read_hist+0x6e>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f502:	6863      	ldr	r3, [r4, #4]
    f504:	4553      	cmp	r3, sl
    f506:	d11e      	bne.n	f546 <nvs_read_hist+0x9e>
    f508:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f50c:	42bb      	cmp	r3, r7
    f50e:	d01a      	beq.n	f546 <nvs_read_hist+0x9e>
		return -ENOENT;
    f510:	f06f 0001 	mvn.w	r0, #1
    f514:	e7df      	b.n	f4d6 <nvs_read_hist+0x2e>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    f516:	4620      	mov	r0, r4
    f518:	aa02      	add	r2, sp, #8
    f51a:	a901      	add	r1, sp, #4
    f51c:	f01b fb4d 	bl	2abba <nvs_prev_ate>
		if (rc) {
    f520:	2800      	cmp	r0, #0
    f522:	d1d8      	bne.n	f4d6 <nvs_read_hist+0x2e>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
    f524:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f528:	42bb      	cmp	r3, r7
    f52a:	d106      	bne.n	f53a <nvs_read_hist+0x92>
    f52c:	4620      	mov	r0, r4
    f52e:	a902      	add	r1, sp, #8
    f530:	f01b fb0b 	bl	2ab4a <nvs_ate_valid>
    f534:	b108      	cbz	r0, f53a <nvs_read_hist+0x92>
			cnt_his++;
    f536:	3501      	adds	r5, #1
    f538:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    f53a:	6862      	ldr	r2, [r4, #4]
    f53c:	9b01      	ldr	r3, [sp, #4]
    f53e:	429a      	cmp	r2, r3
    f540:	d1da      	bne.n	f4f8 <nvs_read_hist+0x50>
		rd_addr = wlk_addr;
    f542:	4651      	mov	r1, sl
    f544:	e7e0      	b.n	f508 <nvs_read_hist+0x60>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f546:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    f54a:	2b00      	cmp	r3, #0
    f54c:	d0e0      	beq.n	f510 <nvs_read_hist+0x68>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    f54e:	45a9      	cmp	r9, r5
    f550:	d8de      	bhi.n	f510 <nvs_read_hist+0x68>
	rd_addr += wlk_ate.offset;
    f552:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    f556:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f558:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    f55a:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    f55e:	bf28      	it	cs
    f560:	4633      	movcs	r3, r6
    f562:	4401      	add	r1, r0
    f564:	4642      	mov	r2, r8
    f566:	4620      	mov	r0, r4
    f568:	f01b fa55 	bl	2aa16 <nvs_flash_rd>
	if (rc) {
    f56c:	2800      	cmp	r0, #0
    f56e:	d1b2      	bne.n	f4d6 <nvs_read_hist+0x2e>
	return wlk_ate.len;
    f570:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    f574:	e7af      	b.n	f4d6 <nvs_read_hist+0x2e>
		return -EINVAL;
    f576:	f06f 0015 	mvn.w	r0, #21
    f57a:	e7ac      	b.n	f4d6 <nvs_read_hist+0x2e>
    f57c:	00033935 	.word	0x00033935
    f580:	0003157c 	.word	0x0003157c

0000f584 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
    f584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct ipc_service_backend *backend;

	if (!instance) {
    f586:	b970      	cbnz	r0, f5a6 <ipc_service_open_instance+0x22>
		LOG_ERR("Invalid instance");
    f588:	4b12      	ldr	r3, [pc, #72]	; (f5d4 <ipc_service_open_instance+0x50>)
    f58a:	4813      	ldr	r0, [pc, #76]	; (f5d8 <ipc_service_open_instance+0x54>)
    f58c:	9305      	str	r3, [sp, #20]
    f58e:	2302      	movs	r3, #2
    f590:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f594:	aa04      	add	r2, sp, #16
    f596:	9304      	str	r3, [sp, #16]
    f598:	f01b fc91 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f59c:	f06f 0015 	mvn.w	r0, #21
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
}
    f5a0:	b007      	add	sp, #28
    f5a2:	f85d fb04 	ldr.w	pc, [sp], #4
	backend = (const struct ipc_service_backend *) instance->api;
    f5a6:	6883      	ldr	r3, [r0, #8]
	if (!backend) {
    f5a8:	b963      	cbnz	r3, f5c4 <ipc_service_open_instance+0x40>
		LOG_ERR("Invalid backend configuration");
    f5aa:	4b0c      	ldr	r3, [pc, #48]	; (f5dc <ipc_service_open_instance+0x58>)
    f5ac:	480a      	ldr	r0, [pc, #40]	; (f5d8 <ipc_service_open_instance+0x54>)
    f5ae:	9305      	str	r3, [sp, #20]
    f5b0:	2302      	movs	r3, #2
    f5b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5b6:	aa04      	add	r2, sp, #16
    f5b8:	9304      	str	r3, [sp, #16]
    f5ba:	f01b fc80 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -EIO;
    f5be:	f06f 0004 	mvn.w	r0, #4
    f5c2:	e7ed      	b.n	f5a0 <ipc_service_open_instance+0x1c>
	if (!backend->open_instance) {
    f5c4:	681b      	ldr	r3, [r3, #0]
    f5c6:	b11b      	cbz	r3, f5d0 <ipc_service_open_instance+0x4c>
}
    f5c8:	b007      	add	sp, #28
    f5ca:	f85d eb04 	ldr.w	lr, [sp], #4
	return backend->open_instance(instance);
    f5ce:	4718      	bx	r3
		return 0;
    f5d0:	4618      	mov	r0, r3
    f5d2:	e7e5      	b.n	f5a0 <ipc_service_open_instance+0x1c>
    f5d4:	00033a54 	.word	0x00033a54
    f5d8:	00031584 	.word	0x00031584
    f5dc:	00033a65 	.word	0x00033a65

0000f5e0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
    f5e0:	b530      	push	{r4, r5, lr}
    f5e2:	b087      	sub	sp, #28
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
    f5e4:	b108      	cbz	r0, f5ea <ipc_service_register_endpoint+0xa>
    f5e6:	b101      	cbz	r1, f5ea <ipc_service_register_endpoint+0xa>
    f5e8:	b96a      	cbnz	r2, f606 <ipc_service_register_endpoint+0x26>
		LOG_ERR("Invalid instance, endpoint or configuration");
    f5ea:	4b13      	ldr	r3, [pc, #76]	; (f638 <ipc_service_register_endpoint+0x58>)
    f5ec:	4813      	ldr	r0, [pc, #76]	; (f63c <ipc_service_register_endpoint+0x5c>)
    f5ee:	9305      	str	r3, [sp, #20]
    f5f0:	2302      	movs	r3, #2
    f5f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5f6:	aa04      	add	r2, sp, #16
    f5f8:	9304      	str	r3, [sp, #16]
    f5fa:	f01b fc60 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f5fe:	f06f 0015 	mvn.w	r0, #21
	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;

	return backend->register_endpoint(instance, &ept->token, cfg);
}
    f602:	b007      	add	sp, #28
    f604:	bd30      	pop	{r4, r5, pc}
	backend = (const struct ipc_service_backend *) instance->api;
    f606:	6884      	ldr	r4, [r0, #8]
	if (!backend || !backend->register_endpoint) {
    f608:	b10c      	cbz	r4, f60e <ipc_service_register_endpoint+0x2e>
    f60a:	68e5      	ldr	r5, [r4, #12]
    f60c:	b965      	cbnz	r5, f628 <ipc_service_register_endpoint+0x48>
		LOG_ERR("Invalid backend configuration");
    f60e:	4b0c      	ldr	r3, [pc, #48]	; (f640 <ipc_service_register_endpoint+0x60>)
    f610:	480a      	ldr	r0, [pc, #40]	; (f63c <ipc_service_register_endpoint+0x5c>)
    f612:	9305      	str	r3, [sp, #20]
    f614:	2302      	movs	r3, #2
    f616:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f61a:	aa04      	add	r2, sp, #16
    f61c:	9304      	str	r3, [sp, #16]
    f61e:	f01b fc4e 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -EIO;
    f622:	f06f 0004 	mvn.w	r0, #4
    f626:	e7ec      	b.n	f602 <ipc_service_register_endpoint+0x22>
	ept->instance = instance;
    f628:	f841 0b04 	str.w	r0, [r1], #4
	return backend->register_endpoint(instance, &ept->token, cfg);
    f62c:	68e3      	ldr	r3, [r4, #12]
}
    f62e:	b007      	add	sp, #28
    f630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->register_endpoint(instance, &ept->token, cfg);
    f634:	4718      	bx	r3
    f636:	bf00      	nop
    f638:	00033a83 	.word	0x00033a83
    f63c:	00031584 	.word	0x00031584
    f640:	00033a65 	.word	0x00033a65

0000f644 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
    f644:	b530      	push	{r4, r5, lr}
    f646:	4613      	mov	r3, r2
	const struct ipc_service_backend *backend;

	if (!ept) {
    f648:	4604      	mov	r4, r0
{
    f64a:	b087      	sub	sp, #28
	if (!ept) {
    f64c:	b968      	cbnz	r0, f66a <ipc_service_send+0x26>
		LOG_ERR("Invalid endpoint");
    f64e:	4b1a      	ldr	r3, [pc, #104]	; (f6b8 <ipc_service_send+0x74>)
    f650:	481a      	ldr	r0, [pc, #104]	; (f6bc <ipc_service_send+0x78>)
    f652:	9305      	str	r3, [sp, #20]
    f654:	2302      	movs	r3, #2
    f656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f65a:	aa04      	add	r2, sp, #16
    f65c:	9304      	str	r3, [sp, #16]
    f65e:	f01b fc2e 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    f662:	f06f 0015 	mvn.w	r0, #21
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
}
    f666:	b007      	add	sp, #28
    f668:	bd30      	pop	{r4, r5, pc}
	if (!ept->instance) {
    f66a:	6800      	ldr	r0, [r0, #0]
    f66c:	b960      	cbnz	r0, f688 <ipc_service_send+0x44>
		LOG_ERR("Endpoint not registered\n");
    f66e:	4b14      	ldr	r3, [pc, #80]	; (f6c0 <ipc_service_send+0x7c>)
    f670:	4812      	ldr	r0, [pc, #72]	; (f6bc <ipc_service_send+0x78>)
    f672:	9305      	str	r3, [sp, #20]
    f674:	2302      	movs	r3, #2
    f676:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f67a:	aa04      	add	r2, sp, #16
    f67c:	9304      	str	r3, [sp, #16]
    f67e:	f01b fc1e 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -ENOENT;
    f682:	f06f 0001 	mvn.w	r0, #1
    f686:	e7ee      	b.n	f666 <ipc_service_send+0x22>
	backend = ept->instance->api;
    f688:	6882      	ldr	r2, [r0, #8]
	if (!backend || !backend->send) {
    f68a:	b10a      	cbz	r2, f690 <ipc_service_send+0x4c>
    f68c:	6895      	ldr	r5, [r2, #8]
    f68e:	b965      	cbnz	r5, f6aa <ipc_service_send+0x66>
		LOG_ERR("Invalid backend configuration");
    f690:	4b0c      	ldr	r3, [pc, #48]	; (f6c4 <ipc_service_send+0x80>)
    f692:	480a      	ldr	r0, [pc, #40]	; (f6bc <ipc_service_send+0x78>)
    f694:	9305      	str	r3, [sp, #20]
    f696:	2302      	movs	r3, #2
    f698:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f69c:	aa04      	add	r2, sp, #16
    f69e:	9304      	str	r3, [sp, #16]
    f6a0:	f01b fc0d 	bl	2aebe <z_log_msg_static_create.constprop.0>
		return -EIO;
    f6a4:	f06f 0004 	mvn.w	r0, #4
    f6a8:	e7dd      	b.n	f666 <ipc_service_send+0x22>
	return backend->send(ept->instance, ept->token, data, len);
    f6aa:	460a      	mov	r2, r1
    f6ac:	46ac      	mov	ip, r5
    f6ae:	6861      	ldr	r1, [r4, #4]
}
    f6b0:	b007      	add	sp, #28
    f6b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return backend->send(ept->instance, ept->token, data, len);
    f6b6:	4760      	bx	ip
    f6b8:	00033aaf 	.word	0x00033aaf
    f6bc:	00031584 	.word	0x00031584
    f6c0:	00033ac0 	.word	0x00033ac0
    f6c4:	00033a65 	.word	0x00033a65

0000f6c8 <shared_memory_prepare>:
    f6c8:	2000      	movs	r0, #0
    f6ca:	4b01      	ldr	r3, [pc, #4]	; (f6d0 <shared_memory_prepare+0x8>)
    f6cc:	6018      	str	r0, [r3, #0]
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
    f6ce:	4770      	bx	lr
    f6d0:	20070000 	.word	0x20070000

0000f6d4 <advertise_ept>:
{
    f6d4:	b530      	push	{r4, r5, lr}
    f6d6:	460c      	mov	r4, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f6d8:	490e      	ldr	r1, [pc, #56]	; (f714 <advertise_ept+0x40>)
{
    f6da:	b085      	sub	sp, #20
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f6dc:	9102      	str	r1, [sp, #8]
    f6de:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
{
    f6e2:	4605      	mov	r5, r0
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
    f6e4:	e9cd 3100 	strd	r3, r1, [sp]
    f6e8:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    f6ec:	f04f 33ff 	mov.w	r3, #4294967295
    f6f0:	4620      	mov	r0, r4
    f6f2:	f014 fc6f 	bl	23fd4 <rpmsg_create_ept>
	if (err != 0) {
    f6f6:	b950      	cbnz	r0, f70e <advertise_ept+0x3a>
	rpmsg_ept->bound = true;
    f6f8:	2301      	movs	r3, #1
    f6fa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
    f6fe:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    f702:	b123      	cbz	r3, f70e <advertise_ept+0x3a>
		rpmsg_inst->bound_cb(rpmsg_ept);
    f704:	4620      	mov	r0, r4
}
    f706:	b005      	add	sp, #20
    f708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		rpmsg_inst->bound_cb(rpmsg_ept);
    f70c:	4718      	bx	r3
}
    f70e:	b005      	add	sp, #20
    f710:	bd30      	pop	{r4, r5, pc}
    f712:	bf00      	nop
    f714:	0002afb5 	.word	0x0002afb5

0000f718 <get_ept>:
{
    f718:	b538      	push	{r3, r4, r5, lr}
    f71a:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f71c:	4611      	mov	r1, r2
{
    f71e:	4605      	mov	r5, r0
	ept = get_ept_slot_with_name(rpmsg_inst, name);
    f720:	f01b fc4a 	bl	2afb8 <get_ept_slot_with_name>
	if (ept != NULL) {
    f724:	4603      	mov	r3, r0
    f726:	b938      	cbnz	r0, f738 <get_ept+0x20>
	return get_ept_slot_with_name(rpmsg_inst, "");
    f728:	4628      	mov	r0, r5
    f72a:	4904      	ldr	r1, [pc, #16]	; (f73c <get_ept+0x24>)
    f72c:	f01b fc44 	bl	2afb8 <get_ept_slot_with_name>
    f730:	4603      	mov	r3, r0
	if (ept != NULL) {
    f732:	2000      	movs	r0, #0
		(*rpmsg_ept) = ept;
    f734:	6023      	str	r3, [r4, #0]
}
    f736:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    f738:	2001      	movs	r0, #1
    f73a:	e7fb      	b.n	f734 <get_ept+0x1c>
    f73c:	00036918 	.word	0x00036918

0000f740 <open>:
{
    f740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    f744:	2301      	movs	r3, #1
    f746:	4681      	mov	r9, r0
	struct backend_data_t *data = instance->data;
    f748:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f74a:	6846      	ldr	r6, [r0, #4]
{
    f74c:	b085      	sub	sp, #20
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
    f74e:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f752:	e8d7 2fef 	ldaex	r2, [r7]
    f756:	2a00      	cmp	r2, #0
    f758:	d103      	bne.n	f762 <open+0x22>
    f75a:	e8c7 3fe1 	stlex	r1, r3, [r7]
    f75e:	2900      	cmp	r1, #0
    f760:	d1f7      	bne.n	f752 <open+0x12>
    f762:	f040 80b8 	bne.w	f8d6 <open+0x196>
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
    f766:	68b3      	ldr	r3, [r6, #8]
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f768:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	available = shm_size - VDEV_STATUS_SIZE;
    f76a:	3b04      	subs	r3, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
    f76c:	3226      	adds	r2, #38	; 0x26
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
    f76e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    f772:	ea4f 0142 	mov.w	r1, r2, lsl #1

	num_desc = (unsigned int) (available / single_alloc);
    f776:	bf26      	itte	cs
    f778:	fbb3 f3f1 	udivcs	r3, r3, r1
		return 0;
	}

	return 32 - __builtin_clz(op);
    f77c:	fab3 f383 	clzcs	r3, r3
		return 0;
    f780:	2300      	movcc	r3, #0

	return (1 << (find_msb_set(num_desc) - 1));
    f782:	f04f 0401 	mov.w	r4, #1
	return 32 - __builtin_clz(op);
    f786:	bf28      	it	cs
    f788:	f1c3 0320 	rsbcs	r3, r3, #32
    f78c:	3b01      	subs	r3, #1
	if (num_desc == 0) {
    f78e:	409c      	lsls	r4, r3
	err = vr_shm_configure(&data->vr, conf);
    f790:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
	if (num_desc == 0) {
    f794:	f000 8099 	beq.w	f8ca <open+0x18a>

static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
    f798:	2210      	movs	r2, #16
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f79a:	2108      	movs	r1, #8
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
    f79c:	6870      	ldr	r0, [r6, #4]
	size = num * sizeof(struct vring_desc);
    f79e:	409a      	lsls	r2, r3
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
    f7a0:	eb02 0244 	add.w	r2, r2, r4, lsl #1
    f7a4:	3004      	adds	r0, #4
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
    f7a6:	4099      	lsls	r1, r3
	size = (size + align - 1) & ~(align - 1);
    f7a8:	3209      	adds	r2, #9
    f7aa:	f8c5 0260 	str.w	r0, [r5, #608]	; 0x260
	size += sizeof(struct vring_used) +
    f7ae:	3106      	adds	r1, #6
	size = (size + align - 1) & ~(align - 1);
    f7b0:	f022 0203 	bic.w	r2, r2, #3
	size += sizeof(struct vring_used) +
    f7b4:	440a      	add	r2, r1
	return (buf_size * num);
    f7b6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f7b8:	fa01 fc03 	lsl.w	ip, r1, r3
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
    f7bc:	0051      	lsls	r1, r2, #1
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
    f7be:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    f7c2:	f8c5 1264 	str.w	r1, [r5, #612]	; 0x264
	return (buf_size * num);
    f7c6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f7c8:	4099      	lsls	r1, r3
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
    f7ca:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    f7ce:	f8c5 3258 	str.w	r3, [r5, #600]	; 0x258
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
    f7d2:	3303      	adds	r3, #3
    f7d4:	4413      	add	r3, r2
    f7d6:	f023 0303 	bic.w	r3, r3, #3
    f7da:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	vr->status_reg_addr = conf->shm_addr;
    f7de:	6873      	ldr	r3, [r6, #4]
	vr->vring_size = num_desc;
    f7e0:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
	vr->status_reg_addr = conf->shm_addr;
    f7e4:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
	data->vr.notify_cb = virtio_notify_cb;
    f7e8:	4b3c      	ldr	r3, [pc, #240]	; (f8dc <open+0x19c>)
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f7ea:	4640      	mov	r0, r8
	data->vr.priv = (void *) conf;
    f7ec:	e9c5 63a9 	strd	r6, r3, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
    f7f0:	6831      	ldr	r1, [r6, #0]
    f7f2:	f000 fa1d 	bl	fc30 <ipc_static_vrings_init>
	if (err != 0) {
    f7f6:	4604      	mov	r4, r0
    f7f8:	bb30      	cbnz	r0, f848 <open+0x108>
	const struct backend_config_t *conf = instance->config;
    f7fa:	f8d9 a004 	ldr.w	sl, [r9, #4]
	struct backend_data_t *data = instance->data;
    f7fe:	f8d9 9010 	ldr.w	r9, [r9, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f802:	e9da 3407 	ldrd	r3, r4, [sl, #28]
	k_work_queue_init(&data->mbox_wq);
    f806:	f509 7b30 	add.w	fp, r9, #704	; 0x2c0
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f80a:	2b01      	cmp	r3, #1
	k_work_queue_init(&data->mbox_wq);
    f80c:	4658      	mov	r0, fp
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
    f80e:	bf08      	it	eq
    f810:	3c10      	subeq	r4, #16
	k_work_queue_init(&data->mbox_wq);
    f812:	f016 fa5d 	bl	25cd0 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
    f816:	2300      	movs	r3, #0
    f818:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
    f81c:	4930      	ldr	r1, [pc, #192]	; (f8e0 <open+0x1a0>)
    f81e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f822:	eb01 2180 	add.w	r1, r1, r0, lsl #10
    f826:	9300      	str	r3, [sp, #0]
    f828:	4658      	mov	r0, fp
    f82a:	4623      	mov	r3, r4
    f82c:	f016 fa6a 	bl	25d04 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
    f830:	f509 702c 	add.w	r0, r9, #688	; 0x2b0
    f834:	492b      	ldr	r1, [pc, #172]	; (f8e4 <open+0x1a4>)
    f836:	f016 f97f 	bl	25b38 <k_work_init>
		(const struct mbox_driver_api *)channel->dev->api;
    f83a:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->register_callback == NULL) {
    f83e:	6883      	ldr	r3, [r0, #8]
    f840:	685c      	ldr	r4, [r3, #4]
    f842:	b91c      	cbnz	r4, f84c <open+0x10c>
		return -ENOSYS;
    f844:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_READY);
    f848:	2100      	movs	r1, #0
    f84a:	e037      	b.n	f8bc <open+0x17c>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
    f84c:	464b      	mov	r3, r9
    f84e:	4a26      	ldr	r2, [pc, #152]	; (f8e8 <open+0x1a8>)
    f850:	f8da 1018 	ldr.w	r1, [sl, #24]
    f854:	47a0      	blx	r4
	if (err != 0) {
    f856:	4604      	mov	r4, r0
    f858:	2800      	cmp	r0, #0
    f85a:	d1f5      	bne.n	f848 <open+0x108>
		(const struct mbox_driver_api *)channel->dev->api;
    f85c:	f8da 0014 	ldr.w	r0, [sl, #20]
	if (api->set_enabled == NULL) {
    f860:	6883      	ldr	r3, [r0, #8]
    f862:	691b      	ldr	r3, [r3, #16]
    f864:	2b00      	cmp	r3, #0
    f866:	d0ed      	beq.n	f844 <open+0x104>
	return api->set_enabled(channel->dev, channel->id, enable);
    f868:	2201      	movs	r2, #1
    f86a:	f8da 1018 	ldr.w	r1, [sl, #24]
    f86e:	4798      	blx	r3
	if (err != 0) {
    f870:	4604      	mov	r4, r0
    f872:	2800      	cmp	r0, #0
    f874:	d1e8      	bne.n	f848 <open+0x108>
	rpmsg_inst->bound_cb = bound_cb;
    f876:	4b1d      	ldr	r3, [pc, #116]	; (f8ec <open+0x1ac>)
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f878:	4628      	mov	r0, r5
	rpmsg_inst->bound_cb = bound_cb;
    f87a:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
    f87e:	4b1c      	ldr	r3, [pc, #112]	; (f8f0 <open+0x1b0>)
    f880:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
    f884:	4b1b      	ldr	r3, [pc, #108]	; (f8f4 <open+0x1b4>)
    f886:	9303      	str	r3, [sp, #12]
    f888:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    f88c:	9302      	str	r3, [sp, #8]
    f88e:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
    f892:	e9cd 8300 	strd	r8, r3, [sp]
    f896:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
    f89a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    f89c:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f8a0:	f000 f98e 	bl	fbc0 <ipc_rpmsg_init>
	if (err != 0) {
    f8a4:	4604      	mov	r4, r0
    f8a6:	2800      	cmp	r0, #0
    f8a8:	d1ce      	bne.n	f848 <open+0x108>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f8aa:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
    f8ae:	f014 fd35 	bl	2431c <rpmsg_virtio_get_buffer_size>
	if (data->tx_buffer_size < 0) {
    f8b2:	2800      	cmp	r0, #0
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
    f8b4:	f8c5 0370 	str.w	r0, [r5, #880]	; 0x370
	if (data->tx_buffer_size < 0) {
    f8b8:	db0a      	blt.n	f8d0 <open+0x190>
	atomic_set(&data->state, STATE_INITED);
    f8ba:	2102      	movs	r1, #2
	atomic_set(&data->state, STATE_READY);
    f8bc:	4638      	mov	r0, r7
    f8be:	f01b fbb0 	bl	2b022 <atomic_set.isra.0>
}
    f8c2:	4620      	mov	r0, r4
    f8c4:	b005      	add	sp, #20
    f8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    f8ca:	f06f 040b 	mvn.w	r4, #11
    f8ce:	e7bb      	b.n	f848 <open+0x108>
		err = -EINVAL;
    f8d0:	f06f 0415 	mvn.w	r4, #21
    f8d4:	e7b8      	b.n	f848 <open+0x108>
		return -EALREADY;
    f8d6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f8da:	e7f2      	b.n	f8c2 <open+0x182>
    f8dc:	0002b00b 	.word	0x0002b00b
    f8e0:	20031e88 	.word	0x20031e88
    f8e4:	0002aff1 	.word	0x0002aff1
    f8e8:	0002afe5 	.word	0x0002afe5
    f8ec:	0000f9bd 	.word	0x0000f9bd
    f8f0:	0002b0c3 	.word	0x0002b0c3
    f8f4:	0002b053 	.word	0x0002b053

0000f8f8 <close>:
{
    f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8fc:	4606      	mov	r6, r0
    f8fe:	f04f 0901 	mov.w	r9, #1
	struct backend_data_t *data = instance->data;
    f902:	6905      	ldr	r5, [r0, #16]
	const struct backend_config_t *conf = instance->config;
    f904:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
    f908:	f505 775b 	add.w	r7, r5, #876	; 0x36c
    f90c:	e8d7 3fef 	ldaex	r3, [r7]
    f910:	2b02      	cmp	r3, #2
    f912:	d103      	bne.n	f91c <close+0x24>
    f914:	e8c7 9fe2 	stlex	r2, r9, [r7]
    f918:	2a00      	cmp	r2, #0
    f91a:	d1f7      	bne.n	f90c <close+0x14>
    f91c:	d149      	bne.n	f9b2 <close+0xba>
		if (strcmp("", rpmsg_ept->name) != 0) {
    f91e:	4826      	ldr	r0, [pc, #152]	; (f9b8 <close+0xc0>)
    f920:	f105 0140 	add.w	r1, r5, #64	; 0x40
    f924:	f7f9 fd25 	bl	9372 <strcmp>
    f928:	b120      	cbz	r0, f934 <close+0x3c>
		return -EBUSY;
    f92a:	f06f 040f 	mvn.w	r4, #15
}
    f92e:	4620      	mov	r0, r4
    f930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (strcmp("", rpmsg_ept->name) != 0) {
    f934:	4820      	ldr	r0, [pc, #128]	; (f9b8 <close+0xc0>)
    f936:	f105 01b0 	add.w	r1, r5, #176	; 0xb0
    f93a:	f7f9 fd1a 	bl	9372 <strcmp>
    f93e:	2800      	cmp	r0, #0
    f940:	d1f3      	bne.n	f92a <close+0x32>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
    f942:	4628      	mov	r0, r5
    f944:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
    f948:	f01b fbee 	bl	2b128 <ipc_rpmsg_deinit>
	if (err != 0) {
    f94c:	4604      	mov	r4, r0
    f94e:	bb70      	cbnz	r0, f9ae <close+0xb6>
	const struct backend_config_t *conf = instance->config;
    f950:	6871      	ldr	r1, [r6, #4]
	struct backend_data_t *data = instance->data;
    f952:	6936      	ldr	r6, [r6, #16]
		(const struct mbox_driver_api *)channel->dev->api;
    f954:	6948      	ldr	r0, [r1, #20]
	if (api->set_enabled == NULL) {
    f956:	6883      	ldr	r3, [r0, #8]
    f958:	691b      	ldr	r3, [r3, #16]
    f95a:	b333      	cbz	r3, f9aa <close+0xb2>
	return api->set_enabled(channel->dev, channel->id, enable);
    f95c:	4622      	mov	r2, r4
    f95e:	6989      	ldr	r1, [r1, #24]
    f960:	4798      	blx	r3
	if (err != 0) {
    f962:	4604      	mov	r4, r0
    f964:	bb18      	cbnz	r0, f9ae <close+0xb6>
	k_work_queue_drain(&data->mbox_wq, 1);
    f966:	f506 7630 	add.w	r6, r6, #704	; 0x2c0
    f96a:	4649      	mov	r1, r9
    f96c:	4630      	mov	r0, r6
    f96e:	f016 fa31 	bl	25dd4 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
    f972:	4630      	mov	r0, r6
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
    f974:	f505 76e4 	add.w	r6, r5, #456	; 0x1c8
    f978:	f001 fd68 	bl	1144c <z_impl_k_thread_abort>
    f97c:	4630      	mov	r0, r6
    f97e:	f8d8 1000 	ldr.w	r1, [r8]
    f982:	f01b fc0e 	bl	2b1a2 <ipc_static_vrings_deinit>
	if (err != 0) {
    f986:	4604      	mov	r4, r0
    f988:	b988      	cbnz	r0, f9ae <close+0xb6>
    f98a:	4601      	mov	r1, r0
    f98c:	22e8      	movs	r2, #232	; 0xe8
    f98e:	4630      	mov	r0, r6
    f990:	f020 fe37 	bl	30602 <memset>
    f994:	4621      	mov	r1, r4
    f996:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
    f99a:	4628      	mov	r0, r5
    f99c:	f020 fe31 	bl	30602 <memset>
	atomic_set(&data->state, STATE_READY);
    f9a0:	4621      	mov	r1, r4
	atomic_set(&data->state, STATE_INITED);
    f9a2:	4638      	mov	r0, r7
    f9a4:	f01b fb3d 	bl	2b022 <atomic_set.isra.0>
	return err;
    f9a8:	e7c1      	b.n	f92e <close+0x36>
		return -ENOSYS;
    f9aa:	f06f 0457 	mvn.w	r4, #87	; 0x57
	atomic_set(&data->state, STATE_INITED);
    f9ae:	2102      	movs	r1, #2
    f9b0:	e7f7      	b.n	f9a2 <close+0xaa>
		return -EALREADY;
    f9b2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    f9b6:	e7ba      	b.n	f92e <close+0x36>
    f9b8:	00036918 	.word	0x00036918

0000f9bc <bound_cb>:
{
    f9bc:	b513      	push	{r0, r1, r4, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	if (!ept)
    f9be:	4604      	mov	r4, r0
    f9c0:	b140      	cbz	r0, f9d4 <bound_cb+0x18>
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    f9c2:	2300      	movs	r3, #0
    f9c4:	2201      	movs	r2, #1
    f9c6:	e9cd 3200 	strd	r3, r2, [sp]
    f9ca:	4b07      	ldr	r3, [pc, #28]	; (f9e8 <bound_cb+0x2c>)
    f9cc:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    f9d0:	f014 fab4 	bl	23f3c <rpmsg_send_offchannel_raw>
	if (ept->cb->bound) {
    f9d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f9d6:	681b      	ldr	r3, [r3, #0]
    f9d8:	b123      	cbz	r3, f9e4 <bound_cb+0x28>
		ept->cb->bound(ept->priv);
    f9da:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
    f9dc:	b002      	add	sp, #8
    f9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ept->cb->bound(ept->priv);
    f9e2:	4718      	bx	r3
}
    f9e4:	b002      	add	sp, #8
    f9e6:	bd10      	pop	{r4, pc}
    f9e8:	00036918 	.word	0x00036918

0000f9ec <send>:
{
    f9ec:	b513      	push	{r0, r1, r4, lr}
    f9ee:	4604      	mov	r4, r0
    f9f0:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f9f2:	6921      	ldr	r1, [r4, #16]
    f9f4:	f501 715b 	add.w	r1, r1, #876	; 0x36c
    f9f8:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
    f9fc:	2902      	cmp	r1, #2
    f9fe:	d110      	bne.n	fa22 <send+0x36>
	if (len == 0) {
    fa00:	b193      	cbz	r3, fa28 <send+0x3c>
	if (!rpmsg_ept) {
    fa02:	b1a0      	cbz	r0, fa2e <send+0x42>
    fa04:	2101      	movs	r1, #1
    fa06:	e9cd 3100 	strd	r3, r1, [sp]
    fa0a:	4613      	mov	r3, r2
    fa0c:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
    fa10:	f014 fa94 	bl	23f3c <rpmsg_send_offchannel_raw>
	if (ret == RPMSG_ERR_NO_BUFF) {
    fa14:	4b07      	ldr	r3, [pc, #28]	; (fa34 <send+0x48>)
		return -ENOMEM;
    fa16:	4298      	cmp	r0, r3
    fa18:	bf08      	it	eq
    fa1a:	f06f 000b 	mvneq.w	r0, #11
}
    fa1e:	b002      	add	sp, #8
    fa20:	bd10      	pop	{r4, pc}
		return -EBUSY;
    fa22:	f06f 000f 	mvn.w	r0, #15
    fa26:	e7fa      	b.n	fa1e <send+0x32>
		return -EBADMSG;
    fa28:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    fa2c:	e7f7      	b.n	fa1e <send+0x32>
		return -ENOENT;
    fa2e:	f06f 0001 	mvn.w	r0, #1
    fa32:	e7f4      	b.n	fa1e <send+0x32>
    fa34:	fffff82e 	.word	0xfffff82e

0000fa38 <register_ept>:
{
    fa38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    fa3c:	4688      	mov	r8, r1
    fa3e:	4615      	mov	r5, r2
	struct backend_data_t *data = instance->data;
    fa40:	6906      	ldr	r6, [r0, #16]
    fa42:	f506 735b 	add.w	r3, r6, #876	; 0x36c
    fa46:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
    fa4a:	2b02      	cmp	r3, #2
    fa4c:	d15f      	bne.n	fb0e <register_ept+0xd6>
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fa4e:	6813      	ldr	r3, [r2, #0]
    fa50:	b923      	cbnz	r3, fa5c <register_ept+0x24>
		return -EINVAL;
    fa52:	f06f 0015 	mvn.w	r0, #21
}
    fa56:	b003      	add	sp, #12
    fa58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cfg->name == NULL || cfg->name[0] == '\0') {
    fa5c:	781b      	ldrb	r3, [r3, #0]
    fa5e:	2b00      	cmp	r3, #0
    fa60:	d0f7      	beq.n	fa52 <register_ept+0x1a>
			register_ept_on_host(rpmsg_inst, cfg) :
    fa62:	f8d6 9368 	ldr.w	r9, [r6, #872]	; 0x368
    fa66:	f1b9 0f00 	cmp.w	r9, #0
    fa6a:	d133      	bne.n	fad4 <register_ept+0x9c>
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
    fa6c:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
    fa70:	f04f 32ff 	mov.w	r2, #4294967295
    fa74:	f04f 33ff 	mov.w	r3, #4294967295
    fa78:	4638      	mov	r0, r7
    fa7a:	f015 fb53 	bl	25124 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
    fa7e:	4630      	mov	r0, r6
    fa80:	682a      	ldr	r2, [r5, #0]
    fa82:	a901      	add	r1, sp, #4
    fa84:	f7ff fe48 	bl	f718 <get_ept>
	if (rpmsg_ept == NULL) {
    fa88:	9c01      	ldr	r4, [sp, #4]
    fa8a:	b91c      	cbnz	r4, fa94 <register_ept+0x5c>
		k_mutex_unlock(&rpmsg_inst->mtx);
    fa8c:	4638      	mov	r0, r7
    fa8e:	f01b fac6 	bl	2b01e <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fa92:	e7de      	b.n	fa52 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fa94:	f105 0308 	add.w	r3, r5, #8
    fa98:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fa9a:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->bound = false;
    fa9c:	f884 9064 	strb.w	r9, [r4, #100]	; 0x64
	rpmsg_ept->priv = cfg->priv;
    faa0:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->ep.priv = rpmsg_ept;
    faa2:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
    faa4:	b160      	cbz	r0, fac0 <register_ept+0x88>
		k_mutex_unlock(&rpmsg_inst->mtx);
    faa6:	4638      	mov	r0, r7
    faa8:	f01b fab9 	bl	2b01e <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
    faac:	4621      	mov	r1, r4
    faae:	4630      	mov	r0, r6
    fab0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    fab2:	682a      	ldr	r2, [r5, #0]
    fab4:	f7ff fe0e 	bl	f6d4 <advertise_ept>
	return 0;
    fab8:	2000      	movs	r0, #0
	(*token) = rpmsg_ept;
    faba:	f8c8 4000 	str.w	r4, [r8]
	return 0;
    fabe:	e7ca      	b.n	fa56 <register_ept+0x1e>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    fac0:	2220      	movs	r2, #32
    fac2:	6829      	ldr	r1, [r5, #0]
    fac4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fac8:	f020 fefb 	bl	308c2 <strncpy>
		k_mutex_unlock(&rpmsg_inst->mtx);
    facc:	4638      	mov	r0, r7
    face:	f01b faa6 	bl	2b01e <k_mutex_unlock.isra.0>
	if (rpmsg_ept == NULL) {
    fad2:	e7f1      	b.n	fab8 <register_ept+0x80>
	return get_ept_slot_with_name(rpmsg_inst, "");
    fad4:	4630      	mov	r0, r6
    fad6:	490f      	ldr	r1, [pc, #60]	; (fb14 <register_ept+0xdc>)
    fad8:	f01b fa6e 	bl	2afb8 <get_ept_slot_with_name>
	if (rpmsg_ept == NULL) {
    fadc:	4604      	mov	r4, r0
    fade:	2800      	cmp	r0, #0
    fae0:	d0b7      	beq.n	fa52 <register_ept+0x1a>
	rpmsg_ept->cb = &cfg->cb;
    fae2:	f105 0308 	add.w	r3, r5, #8
    fae6:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
    fae8:	696b      	ldr	r3, [r5, #20]
	rpmsg_ept->ep.priv = rpmsg_ept;
    faea:	63c0      	str	r0, [r0, #60]	; 0x3c
	rpmsg_ept->priv = cfg->priv;
    faec:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
    faee:	2300      	movs	r3, #0
    faf0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    faf4:	2220      	movs	r2, #32
    faf6:	6829      	ldr	r1, [r5, #0]
    faf8:	3040      	adds	r0, #64	; 0x40
    fafa:	f020 fee2 	bl	308c2 <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
    fafe:	4622      	mov	r2, r4
    fb00:	2101      	movs	r1, #1
    fb02:	4630      	mov	r0, r6
    fb04:	f000 f83e 	bl	fb84 <ipc_rpmsg_register_ept>
	if (err != 0) {
    fb08:	2800      	cmp	r0, #0
    fb0a:	d0d5      	beq.n	fab8 <register_ept+0x80>
    fb0c:	e7a1      	b.n	fa52 <register_ept+0x1a>
		return -EBUSY;
    fb0e:	f06f 000f 	mvn.w	r0, #15
    fb12:	e7a0      	b.n	fa56 <register_ept+0x1e>
    fb14:	00036918 	.word	0x00036918

0000fb18 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
    fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb1c:	4605      	mov	r5, r0
    fb1e:	460e      	mov	r6, r1
    fb20:	4690      	mov	r8, r2
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb22:	2700      	movs	r7, #0
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
    fb24:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
{
    fb28:	b085      	sub	sp, #20
    fb2a:	f5aa 74ae 	sub.w	r4, sl, #348	; 0x15c
		ept = &instance->endpoint[i];

		if (strcmp(name, ept->name) == 0) {
    fb2e:	4621      	mov	r1, r4
    fb30:	4630      	mov	r0, r6
    fb32:	f7f9 fc1e 	bl	9372 <strcmp>
    fb36:	b9e0      	cbnz	r0, fb72 <ns_bind_cb+0x5a>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    fb38:	4b11      	ldr	r3, [pc, #68]	; (fb80 <ns_bind_cb+0x68>)
		ept = &instance->endpoint[i];
    fb3a:	f1a4 0b40 	sub.w	fp, r4, #64	; 0x40
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
    fb3e:	9302      	str	r3, [sp, #8]
    fb40:	f8da 3010 	ldr.w	r3, [sl, #16]
    fb44:	4632      	mov	r2, r6
    fb46:	e9cd 8300 	strd	r8, r3, [sp]
    fb4a:	4629      	mov	r1, r5
    fb4c:	f04f 33ff 	mov.w	r3, #4294967295
    fb50:	4658      	mov	r0, fp
    fb52:	f5aa 79ce 	sub.w	r9, sl, #412	; 0x19c
    fb56:	f014 fa3d 	bl	23fd4 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
    fb5a:	b960      	cbnz	r0, fb76 <ns_bind_cb+0x5e>
				return;
			}

			ept->bound = true;
    fb5c:	2370      	movs	r3, #112	; 0x70
    fb5e:	2201      	movs	r2, #1
    fb60:	fb03 9307 	mla	r3, r3, r7, r9
    fb64:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			if (instance->bound_cb) {
    fb68:	f8da 300c 	ldr.w	r3, [sl, #12]
    fb6c:	b10b      	cbz	r3, fb72 <ns_bind_cb+0x5a>
				instance->bound_cb(ept);
    fb6e:	4658      	mov	r0, fp
    fb70:	4798      	blx	r3
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb72:	3470      	adds	r4, #112	; 0x70
    fb74:	b117      	cbz	r7, fb7c <ns_bind_cb+0x64>
			}
		}
	}
}
    fb76:	b005      	add	sp, #20
    fb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
    fb7c:	2701      	movs	r7, #1
    fb7e:	e7d6      	b.n	fb2e <ns_bind_cb+0x16>
    fb80:	0002b125 	.word	0x0002b125

0000fb84 <ipc_rpmsg_register_ept>:

int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
    fb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fb86:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
    fb88:	b190      	cbz	r0, fbb0 <ipc_rpmsg_register_ept+0x2c>
    fb8a:	b18a      	cbz	r2, fbb0 <ipc_rpmsg_register_ept+0x2c>
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
    fb8c:	2901      	cmp	r1, #1
    fb8e:	d112      	bne.n	fbb6 <ipc_rpmsg_register_ept+0x32>
		/*
		 * The destination address is RPMSG_ADDR_ANY, this will trigger
		 * the ns_bind_cb() callback function on the HOST side.
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
    fb90:	4b0a      	ldr	r3, [pc, #40]	; (fbbc <ipc_rpmsg_register_ept+0x38>)
    fb92:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    fb96:	9302      	str	r3, [sp, #8]
    fb98:	f8d0 31ac 	ldr.w	r3, [r0, #428]	; 0x1ac
    fb9c:	3240      	adds	r2, #64	; 0x40
    fb9e:	9301      	str	r3, [sp, #4]
    fba0:	f04f 33ff 	mov.w	r3, #4294967295
    fba4:	4620      	mov	r0, r4
    fba6:	9300      	str	r3, [sp, #0]
    fba8:	f014 fa14 	bl	23fd4 <rpmsg_create_ept>
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
}
    fbac:	b004      	add	sp, #16
    fbae:	bd10      	pop	{r4, pc}
		return -EINVAL;
    fbb0:	f06f 0015 	mvn.w	r0, #21
    fbb4:	e7fa      	b.n	fbac <ipc_rpmsg_register_ept+0x28>
	return RPMSG_SUCCESS;
    fbb6:	2000      	movs	r0, #0
    fbb8:	e7f8      	b.n	fbac <ipc_rpmsg_register_ept+0x28>
    fbba:	bf00      	nop
    fbbc:	0002b125 	.word	0x0002b125

0000fbc0 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
    fbc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fbc4:	b087      	sub	sp, #28
    fbc6:	460e      	mov	r6, r1
    fbc8:	e9dd 810e 	ldrd	r8, r1, [sp, #56]	; 0x38
    fbcc:	4614      	mov	r4, r2
    fbce:	e9dd 2510 	ldrd	r2, r5, [sp, #64]	; 0x40
    fbd2:	461f      	mov	r7, r3
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
    fbd4:	b330      	cbz	r0, fc24 <ipc_rpmsg_init+0x64>
    fbd6:	b329      	cbz	r1, fc24 <ipc_rpmsg_init+0x64>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
		bind_cb = ns_bind_cb;
    fbd8:	f8df c050 	ldr.w	ip, [pc, #80]	; fc2c <ipc_rpmsg_init+0x6c>
		config.h2r_buf_size = (uint32_t) buffer_size;
		config.r2h_buf_size = (uint32_t) buffer_size;

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fbdc:	f100 09e0 	add.w	r9, r0, #224	; 0xe0
		bind_cb = ns_bind_cb;
    fbe0:	2d00      	cmp	r5, #0
    fbe2:	bf08      	it	eq
    fbe4:	4665      	moveq	r5, ip
	if (role == RPMSG_HOST) {
    fbe6:	b99e      	cbnz	r6, fc10 <ipc_rpmsg_init+0x50>
		config.r2h_buf_size = (uint32_t) buffer_size;
    fbe8:	e9cd 4403 	strd	r4, r4, [sp, #12]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fbec:	f500 74ce 	add.w	r4, r0, #412	; 0x19c
    fbf0:	4620      	mov	r0, r4
		struct rpmsg_virtio_config config = { 0 };
    fbf2:	9605      	str	r6, [sp, #20]
		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
    fbf4:	f020 fa64 	bl	300c0 <rpmsg_virtio_init_shm_pool>
		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
    fbf8:	ab03      	add	r3, sp, #12
    fbfa:	e9cd 4300 	strd	r4, r3, [sp]
    fbfe:	462a      	mov	r2, r5
    fc00:	463b      	mov	r3, r7
    fc02:	4641      	mov	r1, r8
    fc04:	4648      	mov	r0, r9
    fc06:	f014 fbaf 	bl	24368 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
    fc0a:	b007      	add	sp, #28
    fc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fc10:	2200      	movs	r2, #0
    fc12:	4641      	mov	r1, r8
    fc14:	920e      	str	r2, [sp, #56]	; 0x38
    fc16:	4648      	mov	r0, r9
    fc18:	462a      	mov	r2, r5
}
    fc1a:	b007      	add	sp, #28
    fc1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
    fc20:	f014 bccc 	b.w	245bc <rpmsg_init_vdev>
		return -EINVAL;
    fc24:	f06f 0015 	mvn.w	r0, #21
    fc28:	e7ef      	b.n	fc0a <ipc_rpmsg_init+0x4a>
    fc2a:	bf00      	nop
    fc2c:	0000fb19 	.word	0x0000fb19

0000fc30 <ipc_static_vrings_init>:

	return 0;
}

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
    fc30:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc32:	460e      	mov	r6, r1
	int err = 0;

	if (!vr) {
    fc34:	4604      	mov	r4, r0
{
    fc36:	b089      	sub	sp, #36	; 0x24
	if (!vr) {
    fc38:	2800      	cmp	r0, #0
    fc3a:	d06f      	beq.n	fd1c <ipc_static_vrings_init+0xec>
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
	vr->shm_device.num_regions = 1;
    fc3c:	2301      	movs	r3, #1
	vr->shm_physmap[0] = vr->shm_addr;
    fc3e:	4602      	mov	r2, r0
	vr->shm_device.num_regions = 1;
    fc40:	63c3      	str	r3, [r0, #60]	; 0x3c

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc42:	2300      	movs	r3, #0
	vr->shm_physmap[0] = vr->shm_addr;
    fc44:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
	vr->shm_device.name = SHM_DEVICE_NAME;
    fc48:	4f36      	ldr	r7, [pc, #216]	; (fd24 <ipc_static_vrings_init+0xf4>)
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc4a:	3040      	adds	r0, #64	; 0x40
	vr->shm_device.name = SHM_DEVICE_NAME;
    fc4c:	f840 7c0c 	str.w	r7, [r0, #-12]
	vr->shm_physmap[0] = vr->shm_addr;
    fc50:	f842 1f30 	str.w	r1, [r2, #48]!
	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
    fc54:	e9cd 3301 	strd	r3, r3, [sp, #4]
    fc58:	f04f 33ff 	mov.w	r3, #4294967295
    fc5c:	9300      	str	r3, [sp, #0]
    fc5e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    fc60:	f01f f83f 	bl	2ece2 <metal_io_init>
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    fc64:	4a30      	ldr	r2, [pc, #192]	; (fd28 <ipc_static_vrings_init+0xf8>)
    fc66:	ab06      	add	r3, sp, #24
    fc68:	e892 0003 	ldmia.w	r2, {r0, r1}
    fc6c:	e883 0003 	stmia.w	r3, {r0, r1}
	err = metal_init(&metal_params);
    fc70:	4618      	mov	r0, r3
    fc72:	f010 fe95 	bl	209a0 <metal_init>
	if (err != 0) {
    fc76:	4605      	mov	r5, r0
    fc78:	b9d8      	cbnz	r0, fcb2 <ipc_static_vrings_init+0x82>
	err = metal_register_generic_device(&vr->shm_device);
    fc7a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    fc7e:	f010 fe6f 	bl	20960 <metal_register_generic_device>
	if (err != 0) {
    fc82:	4605      	mov	r5, r0
    fc84:	b9a8      	cbnz	r0, fcb2 <ipc_static_vrings_init+0x82>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    fc86:	4639      	mov	r1, r7
    fc88:	4828      	ldr	r0, [pc, #160]	; (fd2c <ipc_static_vrings_init+0xfc>)
    fc8a:	aa05      	add	r2, sp, #20
    fc8c:	f01f f801 	bl	2ec92 <metal_device_open>
	if (err != 0) {
    fc90:	4605      	mov	r5, r0
    fc92:	b970      	cbnz	r0, fcb2 <ipc_static_vrings_init+0x82>
	vr->shm_io = metal_device_io_region(device, 0);
    fc94:	9b05      	ldr	r3, [sp, #20]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    fc96:	689a      	ldr	r2, [r3, #8]
    fc98:	b172      	cbz	r2, fcb8 <ipc_static_vrings_init+0x88>
    fc9a:	330c      	adds	r3, #12
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fc9c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
	vr->shm_io = metal_device_io_region(device, 0);
    fca0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
    fca4:	f01b fa6f 	bl	2b186 <virtqueue_allocate>
    fca8:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
    fcac:	b930      	cbnz	r0, fcbc <ipc_static_vrings_init+0x8c>
		return -ENOMEM;
    fcae:	f06f 050b 	mvn.w	r5, #11
	if (err != 0) {
		return err;
	}

	return vq_setup(vr, role);
}
    fcb2:	4628      	mov	r0, r5
    fcb4:	b009      	add	sp, #36	; 0x24
    fcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fcb8:	4603      	mov	r3, r0
    fcba:	e7ef      	b.n	fc9c <ipc_static_vrings_init+0x6c>
	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
    fcbc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    fcc0:	f01b fa61 	bl	2b186 <virtqueue_allocate>
    fcc4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
    fcc8:	2800      	cmp	r0, #0
    fcca:	d0f0      	beq.n	fcae <ipc_static_vrings_init+0x7e>
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fccc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fcd0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
    fcd4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
    fcd8:	2304      	movs	r3, #4
    fcda:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
    fcde:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->vdev.vrings_num = VRING_COUNT;
    fce2:	2302      	movs	r3, #2
    fce4:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
    fce6:	4b12      	ldr	r3, [pc, #72]	; (fd30 <ipc_static_vrings_init+0x100>)
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fce8:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fcec:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
    fcf0:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
    fcf4:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fcf8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
	vr->vdev.func = &dispatch;
    fcfc:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fcfe:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
    fd02:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
    fd06:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
    fd0a:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
    fd0e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
    fd12:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	vr->vdev.role = role;
    fd16:	61a6      	str	r6, [r4, #24]
	vr->vdev.vrings_info = &vr->rvrings[0];
    fd18:	62e3      	str	r3, [r4, #44]	; 0x2c
	return 0;
    fd1a:	e7ca      	b.n	fcb2 <ipc_static_vrings_init+0x82>
		return -EINVAL;
    fd1c:	f06f 0515 	mvn.w	r5, #21
    fd20:	e7c7      	b.n	fcb2 <ipc_static_vrings_init+0x82>
    fd22:	bf00      	nop
    fd24:	00033aea 	.word	0x00033aea
    fd28:	000316b4 	.word	0x000316b4
    fd2c:	00033af4 	.word	0x00033af4
    fd30:	00031bf8 	.word	0x00031bf8

0000fd34 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    fd34:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    fd36:	4b11      	ldr	r3, [pc, #68]	; (fd7c <flash_area_open+0x48>)
{
    fd38:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    fd3a:	681c      	ldr	r4, [r3, #0]
    fd3c:	b1dc      	cbz	r4, fd76 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    fd3e:	4b10      	ldr	r3, [pc, #64]	; (fd80 <flash_area_open+0x4c>)
    fd40:	6819      	ldr	r1, [r3, #0]
    fd42:	2300      	movs	r3, #0
    fd44:	428b      	cmp	r3, r1
    fd46:	db02      	blt.n	fd4e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    fd48:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    fd4c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    fd4e:	4622      	mov	r2, r4
    fd50:	f812 6b10 	ldrb.w	r6, [r2], #16
    fd54:	4286      	cmp	r6, r0
    fd56:	d002      	beq.n	fd5e <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    fd58:	4614      	mov	r4, r2
    fd5a:	3301      	adds	r3, #1
    fd5c:	e7f2      	b.n	fd44 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fd5e:	68e0      	ldr	r0, [r4, #12]
    fd60:	b910      	cbnz	r0, fd68 <flash_area_open+0x34>
		return -ENODEV;
    fd62:	f06f 0012 	mvn.w	r0, #18
    fd66:	e7f1      	b.n	fd4c <flash_area_open+0x18>
    fd68:	f020 f9c7 	bl	300fa <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    fd6c:	2800      	cmp	r0, #0
    fd6e:	d0f8      	beq.n	fd62 <flash_area_open+0x2e>
	return 0;
    fd70:	2000      	movs	r0, #0
	*fap = area;
    fd72:	602c      	str	r4, [r5, #0]
	return 0;
    fd74:	e7ea      	b.n	fd4c <flash_area_open+0x18>
		return -EACCES;
    fd76:	f06f 000c 	mvn.w	r0, #12
    fd7a:	e7e7      	b.n	fd4c <flash_area_open+0x18>
    fd7c:	2000846c 	.word	0x2000846c
    fd80:	00031c94 	.word	0x00031c94

0000fd84 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    fd84:	b570      	push	{r4, r5, r6, lr}
    fd86:	b088      	sub	sp, #32
    fd88:	4605      	mov	r5, r0
    fd8a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    fd8c:	b2c0      	uxtb	r0, r0
    fd8e:	4669      	mov	r1, sp
{
    fd90:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    fd92:	f7ff ffcf 	bl	fd34 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    fd96:	2800      	cmp	r0, #0
    fd98:	db1b      	blt.n	fdd2 <flash_area_get_sectors+0x4e>
    fd9a:	9800      	ldr	r0, [sp, #0]
    fd9c:	b1c8      	cbz	r0, fdd2 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    fd9e:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    fda0:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    fda2:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    fda4:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    fda6:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    fda8:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    fdac:	2300      	movs	r3, #0
	cb_data->status = 0;
    fdae:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    fdb2:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    fdb4:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    fdb6:	f01b fa24 	bl	2b202 <flash_area_close>
	if (flash_dev == NULL) {
    fdba:	b16d      	cbz	r5, fdd8 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    fdbc:	4628      	mov	r0, r5
    fdbe:	4908      	ldr	r1, [pc, #32]	; (fde0 <flash_area_get_sectors+0x5c>)
    fdc0:	aa01      	add	r2, sp, #4
    fdc2:	f01e fad4 	bl	2e36e <flash_page_foreach>
	if (cb_data->status == 0) {
    fdc6:	9807      	ldr	r0, [sp, #28]
    fdc8:	b908      	cbnz	r0, fdce <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    fdca:	9b05      	ldr	r3, [sp, #20]
    fdcc:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    fdce:	b008      	add	sp, #32
    fdd0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    fdd2:	f06f 0015 	mvn.w	r0, #21
    fdd6:	e7fa      	b.n	fdce <flash_area_get_sectors+0x4a>
		return -ENODEV;
    fdd8:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    fddc:	e7f7      	b.n	fdce <flash_area_get_sectors+0x4a>
    fdde:	bf00      	nop
    fde0:	0002b285 	.word	0x0002b285

0000fde4 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
    fde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    fde8:	4b0f      	ldr	r3, [pc, #60]	; (fe28 <settings_save_one+0x44>)
{
    fdea:	4605      	mov	r5, r0
	cs = settings_save_dst;
    fdec:	681c      	ldr	r4, [r3, #0]
{
    fdee:	460e      	mov	r6, r1
    fdf0:	4617      	mov	r7, r2
	if (!cs) {
    fdf2:	b1ac      	cbz	r4, fe20 <settings_save_one+0x3c>
    fdf4:	f04f 32ff 	mov.w	r2, #4294967295
    fdf8:	f04f 33ff 	mov.w	r3, #4294967295
    fdfc:	480b      	ldr	r0, [pc, #44]	; (fe2c <settings_save_one+0x48>)
    fdfe:	f015 f991 	bl	25124 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    fe02:	6863      	ldr	r3, [r4, #4]
    fe04:	4632      	mov	r2, r6
    fe06:	f8d3 8008 	ldr.w	r8, [r3, #8]
    fe0a:	4629      	mov	r1, r5
    fe0c:	463b      	mov	r3, r7
    fe0e:	4620      	mov	r0, r4
    fe10:	47c0      	blx	r8
    fe12:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fe14:	4805      	ldr	r0, [pc, #20]	; (fe2c <settings_save_one+0x48>)
    fe16:	f015 fa55 	bl	252c4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    fe1a:	4620      	mov	r0, r4
    fe1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    fe20:	f06f 0401 	mvn.w	r4, #1
    fe24:	e7f9      	b.n	fe1a <settings_save_one+0x36>
    fe26:	bf00      	nop
    fe28:	200214a8 	.word	0x200214a8
    fe2c:	20008b7c 	.word	0x20008b7c

0000fe30 <settings_src_register>:
	parent->next = child;
    fe30:	2300      	movs	r3, #0
    fe32:	6003      	str	r3, [r0, #0]
	return list->tail;
    fe34:	4b04      	ldr	r3, [pc, #16]	; (fe48 <settings_src_register+0x18>)
    fe36:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    fe38:	b912      	cbnz	r2, fe40 <settings_src_register+0x10>
	list->head = node;
    fe3a:	e9c3 0000 	strd	r0, r0, [r3]
}
    fe3e:	4770      	bx	lr
	parent->next = child;
    fe40:	6010      	str	r0, [r2, #0]
	list->tail = node;
    fe42:	6058      	str	r0, [r3, #4]
}
    fe44:	4770      	bx	lr
    fe46:	bf00      	nop
    fe48:	200214ac 	.word	0x200214ac

0000fe4c <settings_dst_register>:
	settings_save_dst = cs;
    fe4c:	4b01      	ldr	r3, [pc, #4]	; (fe54 <settings_dst_register+0x8>)
    fe4e:	6018      	str	r0, [r3, #0]
}
    fe50:	4770      	bx	lr
    fe52:	bf00      	nop
    fe54:	200214a8 	.word	0x200214a8

0000fe58 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    fe58:	2300      	movs	r3, #0
{
    fe5a:	b530      	push	{r4, r5, lr}
    fe5c:	b085      	sub	sp, #20
    fe5e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    fe60:	e9cd 3302 	strd	r3, r3, [sp, #8]
    fe64:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    fe66:	f04f 33ff 	mov.w	r3, #4294967295
    fe6a:	f04f 32ff 	mov.w	r2, #4294967295
    fe6e:	480b      	ldr	r0, [pc, #44]	; (fe9c <settings_load_subtree+0x44>)
    fe70:	f015 f958 	bl	25124 <z_impl_k_mutex_lock>
	return list->head;
    fe74:	4b0a      	ldr	r3, [pc, #40]	; (fea0 <settings_load_subtree+0x48>)
    fe76:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    fe78:	b94c      	cbnz	r4, fe8e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
    fe7a:	4628      	mov	r0, r5
    fe7c:	f000 f8f6 	bl	1006c <settings_commit_subtree>
    fe80:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    fe82:	4806      	ldr	r0, [pc, #24]	; (fe9c <settings_load_subtree+0x44>)
    fe84:	f015 fa1e 	bl	252c4 <z_impl_k_mutex_unlock>
}
    fe88:	4620      	mov	r0, r4
    fe8a:	b005      	add	sp, #20
    fe8c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fe8e:	6863      	ldr	r3, [r4, #4]
    fe90:	4620      	mov	r0, r4
    fe92:	681b      	ldr	r3, [r3, #0]
    fe94:	a901      	add	r1, sp, #4
    fe96:	4798      	blx	r3
	return node->next;
    fe98:	6824      	ldr	r4, [r4, #0]
    fe9a:	e7ed      	b.n	fe78 <settings_load_subtree+0x20>
    fe9c:	20008b7c 	.word	0x20008b7c
    fea0:	200214ac 	.word	0x200214ac

0000fea4 <settings_load_subtree_direct>:
{
    fea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    fea6:	e9cd 0101 	strd	r0, r1, [sp, #4]
    feaa:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    feac:	f04f 33ff 	mov.w	r3, #4294967295
    feb0:	f04f 32ff 	mov.w	r2, #4294967295
    feb4:	4809      	ldr	r0, [pc, #36]	; (fedc <settings_load_subtree_direct+0x38>)
    feb6:	f015 f935 	bl	25124 <z_impl_k_mutex_lock>
	return list->head;
    feba:	4b09      	ldr	r3, [pc, #36]	; (fee0 <settings_load_subtree_direct+0x3c>)
    febc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    febe:	b92c      	cbnz	r4, fecc <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
    fec0:	4806      	ldr	r0, [pc, #24]	; (fedc <settings_load_subtree_direct+0x38>)
    fec2:	f015 f9ff 	bl	252c4 <z_impl_k_mutex_unlock>
}
    fec6:	4620      	mov	r0, r4
    fec8:	b004      	add	sp, #16
    feca:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
    fecc:	6863      	ldr	r3, [r4, #4]
    fece:	4620      	mov	r0, r4
    fed0:	681b      	ldr	r3, [r3, #0]
    fed2:	a901      	add	r1, sp, #4
    fed4:	4798      	blx	r3
	return node->next;
    fed6:	6824      	ldr	r4, [r4, #0]
    fed8:	e7f1      	b.n	febe <settings_load_subtree_direct+0x1a>
    feda:	bf00      	nop
    fedc:	20008b7c 	.word	0x20008b7c
    fee0:	200214ac 	.word	0x200214ac

0000fee4 <settings_store_init>:
	list->head = NULL;
    fee4:	2200      	movs	r2, #0
    fee6:	4b02      	ldr	r3, [pc, #8]	; (fef0 <settings_store_init+0xc>)
	list->tail = NULL;
    fee8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    feec:	4770      	bx	lr
    feee:	bf00      	nop
    fef0:	200214ac 	.word	0x200214ac

0000fef4 <settings_init>:
	list->head = NULL;
    fef4:	2200      	movs	r2, #0
    fef6:	4b02      	ldr	r3, [pc, #8]	; (ff00 <settings_init+0xc>)
	list->tail = NULL;
    fef8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    fefc:	f7ff bff2 	b.w	fee4 <settings_store_init>
    ff00:	200214b4 	.word	0x200214b4

0000ff04 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    ff04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ff08:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    ff0a:	460c      	mov	r4, r1
    ff0c:	b109      	cbz	r1, ff12 <settings_parse_and_lookup+0xe>
		*next = NULL;
    ff0e:	2300      	movs	r3, #0
    ff10:	600b      	str	r3, [r1, #0]
{
    ff12:	2600      	movs	r6, #0
    ff14:	4d25      	ldr	r5, [pc, #148]	; (ffac <settings_parse_and_lookup+0xa8>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff16:	f8df 9098 	ldr.w	r9, [pc, #152]	; ffb0 <settings_parse_and_lookup+0xac>
    ff1a:	454d      	cmp	r5, r9
    ff1c:	d924      	bls.n	ff68 <settings_parse_and_lookup+0x64>
    ff1e:	4925      	ldr	r1, [pc, #148]	; (ffb4 <settings_parse_and_lookup+0xb0>)
    ff20:	2394      	movs	r3, #148	; 0x94
    ff22:	4a25      	ldr	r2, [pc, #148]	; (ffb8 <settings_parse_and_lookup+0xb4>)
    ff24:	4825      	ldr	r0, [pc, #148]	; (ffbc <settings_parse_and_lookup+0xb8>)
    ff26:	f01a fbd8 	bl	2a6da <assert_print>
    ff2a:	4825      	ldr	r0, [pc, #148]	; (ffc0 <settings_parse_and_lookup+0xbc>)
    ff2c:	f01a fbd5 	bl	2a6da <assert_print>
    ff30:	2194      	movs	r1, #148	; 0x94
    ff32:	4821      	ldr	r0, [pc, #132]	; (ffb8 <settings_parse_and_lookup+0xb4>)
    ff34:	f01a fbca 	bl	2a6cc <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff38:	f8d5 8000 	ldr.w	r8, [r5]
    ff3c:	4638      	mov	r0, r7
    ff3e:	4641      	mov	r1, r8
    ff40:	aa01      	add	r2, sp, #4
    ff42:	f01b f9c8 	bl	2b2d6 <settings_name_steq>
    ff46:	b150      	cbz	r0, ff5e <settings_parse_and_lookup+0x5a>
			continue;
		}
		if (!bestmatch) {
    ff48:	b916      	cbnz	r6, ff50 <settings_parse_and_lookup+0x4c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
    ff4a:	b954      	cbnz	r4, ff62 <settings_parse_and_lookup+0x5e>
{
    ff4c:	462e      	mov	r6, r5
    ff4e:	e006      	b.n	ff5e <settings_parse_and_lookup+0x5a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff50:	2200      	movs	r2, #0
    ff52:	4640      	mov	r0, r8
    ff54:	6831      	ldr	r1, [r6, #0]
    ff56:	f01b f9be 	bl	2b2d6 <settings_name_steq>
    ff5a:	2800      	cmp	r0, #0
    ff5c:	d1f5      	bne.n	ff4a <settings_parse_and_lookup+0x46>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff5e:	3514      	adds	r5, #20
    ff60:	e7db      	b.n	ff1a <settings_parse_and_lookup+0x16>
				*next = tmpnext;
    ff62:	9b01      	ldr	r3, [sp, #4]
    ff64:	6023      	str	r3, [r4, #0]
    ff66:	e7f1      	b.n	ff4c <settings_parse_and_lookup+0x48>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    ff68:	d3e6      	bcc.n	ff38 <settings_parse_and_lookup+0x34>
	return list->head;
    ff6a:	4b16      	ldr	r3, [pc, #88]	; (ffc4 <settings_parse_and_lookup+0xc0>)
    ff6c:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff6e:	b1c5      	cbz	r5, ffa2 <settings_parse_and_lookup+0x9e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff70:	f855 8c14 	ldr.w	r8, [r5, #-20]
    ff74:	4638      	mov	r0, r7
    ff76:	4641      	mov	r1, r8
    ff78:	aa01      	add	r2, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    ff7a:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    ff7c:	f01b f9ab 	bl	2b2d6 <settings_name_steq>
    ff80:	b150      	cbz	r0, ff98 <settings_parse_and_lookup+0x94>
			continue;
		}
		if (!bestmatch) {
    ff82:	b916      	cbnz	r6, ff8a <settings_parse_and_lookup+0x86>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
    ff84:	b954      	cbnz	r4, ff9c <settings_parse_and_lookup+0x98>
{
    ff86:	462e      	mov	r6, r5
    ff88:	e006      	b.n	ff98 <settings_parse_and_lookup+0x94>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    ff8a:	2200      	movs	r2, #0
    ff8c:	4640      	mov	r0, r8
    ff8e:	6831      	ldr	r1, [r6, #0]
    ff90:	f01b f9a1 	bl	2b2d6 <settings_name_steq>
    ff94:	2800      	cmp	r0, #0
    ff96:	d1f5      	bne.n	ff84 <settings_parse_and_lookup+0x80>
	return node->next;
    ff98:	696d      	ldr	r5, [r5, #20]
    ff9a:	e7e8      	b.n	ff6e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    ff9c:	9b01      	ldr	r3, [sp, #4]
    ff9e:	6023      	str	r3, [r4, #0]
    ffa0:	e7f1      	b.n	ff86 <settings_parse_and_lookup+0x82>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    ffa2:	4630      	mov	r0, r6
    ffa4:	b003      	add	sp, #12
    ffa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ffaa:	bf00      	nop
    ffac:	0003161c 	.word	0x0003161c
    ffb0:	00031694 	.word	0x00031694
    ffb4:	00033b2e 	.word	0x00033b2e
    ffb8:	00033afc 	.word	0x00033afc
    ffbc:	00032679 	.word	0x00032679
    ffc0:	00033719 	.word	0x00033719
    ffc4:	200214b4 	.word	0x200214b4

0000ffc8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    ffc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffcc:	b084      	sub	sp, #16
    ffce:	af02      	add	r7, sp, #8
    ffd0:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
    ffd4:	4604      	mov	r4, r0
    ffd6:	460d      	mov	r5, r1
    ffd8:	4616      	mov	r6, r2
    ffda:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
    ffdc:	6078      	str	r0, [r7, #4]

	if (load_arg && load_arg->subtree &&
    ffde:	f1b9 0f00 	cmp.w	r9, #0
    ffe2:	d007      	beq.n	fff4 <settings_call_set_handler+0x2c>
    ffe4:	f8d9 1000 	ldr.w	r1, [r9]
    ffe8:	bb31      	cbnz	r1, 10038 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
    ffea:	f8d9 a004 	ldr.w	sl, [r9, #4]
    ffee:	f1ba 0f00 	cmp.w	sl, #0
    fff2:	d128      	bne.n	10046 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x46>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
    fff4:	4620      	mov	r0, r4
    fff6:	1d39      	adds	r1, r7, #4
    fff8:	f7ff ff84 	bl	ff04 <settings_parse_and_lookup>
		if (!ch) {
    fffc:	b308      	cbz	r0, 10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    fffe:	f8d0 9008 	ldr.w	r9, [r0, #8]
   10002:	4643      	mov	r3, r8
   10004:	4632      	mov	r2, r6
   10006:	4629      	mov	r1, r5
   10008:	6878      	ldr	r0, [r7, #4]
   1000a:	47c8      	blx	r9

		if (rc != 0) {
   1000c:	b1c8      	cbz	r0, 10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
			LOG_ERR("set-value failure. key: %s error(%d)",
   1000e:	466d      	mov	r5, sp
   10010:	b08a      	sub	sp, #40	; 0x28
   10012:	aa02      	add	r2, sp, #8
   10014:	4b12      	ldr	r3, [pc, #72]	; (10060 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x60>)
   10016:	61d0      	str	r0, [r2, #28]
   10018:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1001c:	f44f 7300 	mov.w	r3, #512	; 0x200
   10020:	8413      	strh	r3, [r2, #32]
   10022:	4b10      	ldr	r3, [pc, #64]	; (10064 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x64>)
   10024:	f842 3f10 	str.w	r3, [r2, #16]!
   10028:	2300      	movs	r3, #0
   1002a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1002e:	480e      	ldr	r0, [pc, #56]	; (10068 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x68>)
   10030:	f7fe fc3e 	bl	e8b0 <z_impl_z_log_msg_static_create>
   10034:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   10036:	e004      	b.n	10042 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   10038:	1d3a      	adds	r2, r7, #4
   1003a:	f01b f94c 	bl	2b2d6 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1003e:	2800      	cmp	r0, #0
   10040:	d1d3      	bne.n	ffea <settings_call_set_handler+0x22>
		return 0;
   10042:	2000      	movs	r0, #0
   10044:	e007      	b.n	10056 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x56>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   10046:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1004a:	4632      	mov	r2, r6
   1004c:	9300      	str	r3, [sp, #0]
   1004e:	4629      	mov	r1, r5
   10050:	4643      	mov	r3, r8
   10052:	6878      	ldr	r0, [r7, #4]
   10054:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   10056:	3708      	adds	r7, #8
   10058:	46bd      	mov	sp, r7
   1005a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1005e:	bf00      	nop
   10060:	00033b56 	.word	0x00033b56
   10064:	01000004 	.word	0x01000004
   10068:	000315e4 	.word	0x000315e4

0001006c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   1006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1006e:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   10070:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   10072:	4c1e      	ldr	r4, [pc, #120]	; (100ec <settings_commit_subtree+0x80>)
   10074:	4f1e      	ldr	r7, [pc, #120]	; (100f0 <settings_commit_subtree+0x84>)
   10076:	42bc      	cmp	r4, r7
   10078:	d91f      	bls.n	100ba <settings_commit_subtree+0x4e>
   1007a:	491e      	ldr	r1, [pc, #120]	; (100f4 <settings_commit_subtree+0x88>)
   1007c:	23f4      	movs	r3, #244	; 0xf4
   1007e:	4a1e      	ldr	r2, [pc, #120]	; (100f8 <settings_commit_subtree+0x8c>)
   10080:	481e      	ldr	r0, [pc, #120]	; (100fc <settings_commit_subtree+0x90>)
   10082:	f01a fb2a 	bl	2a6da <assert_print>
   10086:	481e      	ldr	r0, [pc, #120]	; (10100 <settings_commit_subtree+0x94>)
   10088:	f01a fb27 	bl	2a6da <assert_print>
   1008c:	21f4      	movs	r1, #244	; 0xf4
   1008e:	481a      	ldr	r0, [pc, #104]	; (100f8 <settings_commit_subtree+0x8c>)
   10090:	f01a fb1c 	bl	2a6cc <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   10094:	b92e      	cbnz	r6, 100a2 <settings_commit_subtree+0x36>
			continue;
		}
		if (ch->h_commit) {
   10096:	68e3      	ldr	r3, [r4, #12]
   10098:	b95b      	cbnz	r3, 100b2 <settings_commit_subtree+0x46>
{
   1009a:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1009c:	4605      	mov	r5, r0
   1009e:	3414      	adds	r4, #20
   100a0:	e7e9      	b.n	10076 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   100a2:	2200      	movs	r2, #0
   100a4:	4631      	mov	r1, r6
   100a6:	6820      	ldr	r0, [r4, #0]
   100a8:	f01b f915 	bl	2b2d6 <settings_name_steq>
   100ac:	2800      	cmp	r0, #0
   100ae:	d1f2      	bne.n	10096 <settings_commit_subtree+0x2a>
   100b0:	e7f3      	b.n	1009a <settings_commit_subtree+0x2e>
			rc2 = ch->h_commit();
   100b2:	4798      	blx	r3
			if (!rc) {
   100b4:	2d00      	cmp	r5, #0
   100b6:	d1f0      	bne.n	1009a <settings_commit_subtree+0x2e>
   100b8:	e7f0      	b.n	1009c <settings_commit_subtree+0x30>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   100ba:	d3eb      	bcc.n	10094 <settings_commit_subtree+0x28>
	return list->head;
   100bc:	4b11      	ldr	r3, [pc, #68]	; (10104 <settings_commit_subtree+0x98>)
   100be:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   100c0:	b194      	cbz	r4, 100e8 <settings_commit_subtree+0x7c>
   100c2:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   100c4:	b91e      	cbnz	r6, 100ce <settings_commit_subtree+0x62>
			continue;
		}
		if (ch->h_commit) {
   100c6:	68e3      	ldr	r3, [r4, #12]
   100c8:	b94b      	cbnz	r3, 100de <settings_commit_subtree+0x72>
	return node->next;
   100ca:	6964      	ldr	r4, [r4, #20]
   100cc:	e7f8      	b.n	100c0 <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   100ce:	2200      	movs	r2, #0
   100d0:	4631      	mov	r1, r6
   100d2:	6820      	ldr	r0, [r4, #0]
   100d4:	f01b f8ff 	bl	2b2d6 <settings_name_steq>
   100d8:	2800      	cmp	r0, #0
   100da:	d1f4      	bne.n	100c6 <settings_commit_subtree+0x5a>
   100dc:	e7f5      	b.n	100ca <settings_commit_subtree+0x5e>
			rc2 = ch->h_commit();
   100de:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   100e0:	2d00      	cmp	r5, #0
   100e2:	bf08      	it	eq
   100e4:	4605      	moveq	r5, r0
   100e6:	e7f0      	b.n	100ca <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   100e8:	4628      	mov	r0, r5
   100ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   100ec:	0003161c 	.word	0x0003161c
   100f0:	00031694 	.word	0x00031694
   100f4:	00033b2e 	.word	0x00033b2e
   100f8:	00033afc 	.word	0x00033afc
   100fc:	00032679 	.word	0x00032679
   10100:	00033719 	.word	0x00033719
   10104:	200214b4 	.word	0x200214b4

00010108 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   10108:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   1010a:	4c07      	ldr	r4, [pc, #28]	; (10128 <settings_subsys_init+0x20>)
   1010c:	7823      	ldrb	r3, [r4, #0]
   1010e:	b10b      	cbz	r3, 10114 <settings_subsys_init+0xc>
		return 0;
   10110:	2000      	movs	r0, #0
	if (!err) {
		settings_subsys_initialized = true;
	}

	return err;
}
   10112:	bd10      	pop	{r4, pc}
	settings_init();
   10114:	f7ff feee 	bl	fef4 <settings_init>
	err = settings_backend_init(); /* func rises kernel panic once error */
   10118:	f000 f866 	bl	101e8 <settings_backend_init>
	if (!err) {
   1011c:	2800      	cmp	r0, #0
   1011e:	d1f8      	bne.n	10112 <settings_subsys_init+0xa>
		settings_subsys_initialized = true;
   10120:	2301      	movs	r3, #1
   10122:	7023      	strb	r3, [r4, #0]
   10124:	e7f4      	b.n	10110 <settings_subsys_init+0x8>
   10126:	bf00      	nop
   10128:	20022316 	.word	0x20022316

0001012c <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   1012c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10130:	4680      	mov	r8, r0
   10132:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   10134:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   10136:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 101e4 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   1013a:	3401      	adds	r4, #1
{
   1013c:	b098      	sub	sp, #96	; 0x60
	name_id = cf->last_name_id + 1;
   1013e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   10140:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   10144:	1e65      	subs	r5, r4, #1
   10146:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   10148:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1014c:	d047      	beq.n	101de <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1014e:	234a      	movs	r3, #74	; 0x4a
   10150:	4629      	mov	r1, r5
   10152:	aa05      	add	r2, sp, #20
   10154:	4630      	mov	r0, r6
   10156:	f01a feab 	bl	2aeb0 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   1015a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1015e:	343f      	adds	r4, #63	; 0x3f
   10160:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   10162:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10164:	4621      	mov	r1, r4
   10166:	2301      	movs	r3, #1
   10168:	4630      	mov	r0, r6
   1016a:	f10d 020b 	add.w	r2, sp, #11
   1016e:	f01a fe9f 	bl	2aeb0 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10172:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   10174:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   10176:	dc03      	bgt.n	10180 <settings_nvs_load+0x54>
   10178:	2800      	cmp	r0, #0
   1017a:	dc03      	bgt.n	10184 <settings_nvs_load+0x58>
{
   1017c:	462c      	mov	r4, r5
   1017e:	e7e1      	b.n	10144 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   10180:	2800      	cmp	r0, #0
   10182:	dc16      	bgt.n	101b2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   10184:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   10188:	42ab      	cmp	r3, r5
   1018a:	d109      	bne.n	101a0 <settings_nvs_load+0x74>
				cf->last_name_id--;
   1018c:	4642      	mov	r2, r8
   1018e:	1e6b      	subs	r3, r5, #1
   10190:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   10194:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10198:	2302      	movs	r3, #2
   1019a:	4630      	mov	r0, r6
   1019c:	f7ff f8a8 	bl	f2f0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   101a0:	4629      	mov	r1, r5
   101a2:	4630      	mov	r0, r6
   101a4:	f01a fe80 	bl	2aea8 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   101a8:	4621      	mov	r1, r4
   101aa:	4630      	mov	r0, r6
   101ac:	f01a fe7c 	bl	2aea8 <nvs_delete>
			continue;
   101b0:	e7e4      	b.n	1017c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   101b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
   101b6:	eb0d 0703 	add.w	r7, sp, r3
   101ba:	2300      	movs	r3, #0
		ret = settings_call_set_handler(
   101bc:	4652      	mov	r2, sl
		name[rc1] = '\0';
   101be:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   101c2:	a805      	add	r0, sp, #20
   101c4:	f8cd 9000 	str.w	r9, [sp]
   101c8:	ab03      	add	r3, sp, #12
		read_fn_arg.fs = &cf->cf_nvs;
   101ca:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   101cc:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   101d0:	f7ff fefa 	bl	ffc8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   101d4:	2800      	cmp	r0, #0
   101d6:	d0d1      	beq.n	1017c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   101d8:	b018      	add	sp, #96	; 0x60
   101da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101de:	2000      	movs	r0, #0
	return ret;
   101e0:	e7fa      	b.n	101d8 <settings_nvs_load+0xac>
   101e2:	bf00      	nop
   101e4:	0002b347 	.word	0x0002b347

000101e8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   101e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   101ea:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   101ec:	4669      	mov	r1, sp
   101ee:	2007      	movs	r0, #7
	uint32_t sector_cnt = 1;
   101f0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   101f2:	f7ff fd9f 	bl	fd34 <flash_area_open>
	if (rc) {
   101f6:	4604      	mov	r4, r0
   101f8:	2800      	cmp	r0, #0
   101fa:	d134      	bne.n	10266 <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   101fc:	2007      	movs	r0, #7
   101fe:	aa02      	add	r2, sp, #8
   10200:	a901      	add	r1, sp, #4
   10202:	f7ff fdbf 	bl	fd84 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   10206:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   1020a:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   1020c:	d02b      	beq.n	10266 <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   1020e:	b138      	cbz	r0, 10220 <settings_backend_init+0x38>
   10210:	340c      	adds	r4, #12
   10212:	d005      	beq.n	10220 <settings_backend_init+0x38>
		k_panic();
   10214:	4040      	eors	r0, r0
   10216:	f380 8811 	msr	BASEPRI, r0
   1021a:	f04f 0004 	mov.w	r0, #4
   1021e:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   10220:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   10222:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   10226:	d223      	bcs.n	10270 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   10228:	2300      	movs	r3, #0
	size_t nvs_sector_size, nvs_size = 0;
   1022a:	4618      	mov	r0, r3
		if (nvs_size > fa->fa_size) {
   1022c:	9a00      	ldr	r2, [sp, #0]
   1022e:	6894      	ldr	r4, [r2, #8]
		nvs_size += nvs_sector_size;
   10230:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   10232:	4284      	cmp	r4, r0
   10234:	d31a      	bcc.n	1026c <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   10236:	3301      	adds	r3, #1
   10238:	2b08      	cmp	r3, #8
   1023a:	d1f9      	bne.n	10230 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   1023c:	4d0e      	ldr	r5, [pc, #56]	; (10278 <settings_backend_init+0x90>)
   1023e:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   10240:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   10242:	6853      	ldr	r3, [r2, #4]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   10244:	4628      	mov	r0, r5
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   10246:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   10248:	68d3      	ldr	r3, [r2, #12]
   1024a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   1024c:	f01b f915 	bl	2b47a <settings_nvs_backend_init>
	if (rc) {
   10250:	4604      	mov	r4, r0
   10252:	b940      	cbnz	r0, 10266 <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10254:	4e09      	ldr	r6, [pc, #36]	; (1027c <settings_backend_init+0x94>)
	settings_src_register(&cf->cf_store);
   10256:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10258:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   1025a:	f7ff fde9 	bl	fe30 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   1025e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   10260:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   10262:	f7ff fdf3 	bl	fe4c <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   10266:	4620      	mov	r0, r4
   10268:	b004      	add	sp, #16
   1026a:	bd70      	pop	{r4, r5, r6, pc}
   1026c:	b29b      	uxth	r3, r3
   1026e:	e7e5      	b.n	1023c <settings_backend_init+0x54>
		return -EDOM;
   10270:	f06f 0420 	mvn.w	r4, #32
   10274:	e7f7      	b.n	10266 <settings_backend_init+0x7e>
   10276:	bf00      	nop
   10278:	200214bc 	.word	0x200214bc
   1027c:	2000842c 	.word	0x2000842c

00010280 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   10280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10284:	4605      	mov	r5, r0
	__asm__ volatile(
   10286:	f04f 0320 	mov.w	r3, #32
   1028a:	f3ef 8611 	mrs	r6, BASEPRI
   1028e:	f383 8812 	msr	BASEPRI_MAX, r3
   10292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10296:	4820      	ldr	r0, [pc, #128]	; (10318 <pm_state_notify+0x98>)
   10298:	f014 feee 	bl	25078 <z_spin_lock_valid>
   1029c:	b968      	cbnz	r0, 102ba <pm_state_notify+0x3a>
   1029e:	2394      	movs	r3, #148	; 0x94
   102a0:	4a1e      	ldr	r2, [pc, #120]	; (1031c <pm_state_notify+0x9c>)
   102a2:	491f      	ldr	r1, [pc, #124]	; (10320 <pm_state_notify+0xa0>)
   102a4:	481f      	ldr	r0, [pc, #124]	; (10324 <pm_state_notify+0xa4>)
   102a6:	f01a fa18 	bl	2a6da <assert_print>
   102aa:	491b      	ldr	r1, [pc, #108]	; (10318 <pm_state_notify+0x98>)
   102ac:	481e      	ldr	r0, [pc, #120]	; (10328 <pm_state_notify+0xa8>)
   102ae:	f01a fa14 	bl	2a6da <assert_print>
   102b2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   102b4:	4819      	ldr	r0, [pc, #100]	; (1031c <pm_state_notify+0x9c>)
   102b6:	f01a fa09 	bl	2a6cc <assert_post_action>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   102ba:	f04f 090c 	mov.w	r9, #12
	z_spin_lock_set_owner(l);
   102be:	4816      	ldr	r0, [pc, #88]	; (10318 <pm_state_notify+0x98>)
   102c0:	f014 fef6 	bl	250b0 <z_spin_lock_set_owner>
	return list->head;
   102c4:	4b19      	ldr	r3, [pc, #100]	; (1032c <pm_state_notify+0xac>)
   102c6:	4f1a      	ldr	r7, [pc, #104]	; (10330 <pm_state_notify+0xb0>)
   102c8:	681c      	ldr	r4, [r3, #0]
   102ca:	f8df 8068 	ldr.w	r8, [pc, #104]	; 10334 <pm_state_notify+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   102ce:	b97c      	cbnz	r4, 102f0 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   102d0:	4811      	ldr	r0, [pc, #68]	; (10318 <pm_state_notify+0x98>)
   102d2:	f014 fedf 	bl	25094 <z_spin_unlock_valid>
   102d6:	b9c8      	cbnz	r0, 1030c <pm_state_notify+0x8c>
   102d8:	23c2      	movs	r3, #194	; 0xc2
   102da:	4a10      	ldr	r2, [pc, #64]	; (1031c <pm_state_notify+0x9c>)
   102dc:	4916      	ldr	r1, [pc, #88]	; (10338 <pm_state_notify+0xb8>)
   102de:	4811      	ldr	r0, [pc, #68]	; (10324 <pm_state_notify+0xa4>)
   102e0:	f01a f9fb 	bl	2a6da <assert_print>
   102e4:	490c      	ldr	r1, [pc, #48]	; (10318 <pm_state_notify+0x98>)
   102e6:	4815      	ldr	r0, [pc, #84]	; (1033c <pm_state_notify+0xbc>)
   102e8:	f01a f9f7 	bl	2a6da <assert_print>
   102ec:	21c2      	movs	r1, #194	; 0xc2
   102ee:	e7e1      	b.n	102b4 <pm_state_notify+0x34>
			callback = notifier->state_exit;
   102f0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   102f4:	2d00      	cmp	r5, #0
   102f6:	bf18      	it	ne
   102f8:	4613      	movne	r3, r2
		if (callback) {
   102fa:	b12b      	cbz	r3, 10308 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   102fc:	f898 2014 	ldrb.w	r2, [r8, #20]
   10300:	fb09 f202 	mul.w	r2, r9, r2
   10304:	5cb8      	ldrb	r0, [r7, r2]
   10306:	4798      	blx	r3
	return node->next;
   10308:	6824      	ldr	r4, [r4, #0]
   1030a:	e7e0      	b.n	102ce <pm_state_notify+0x4e>
	__asm__ volatile(
   1030c:	f386 8811 	msr	BASEPRI, r6
   10310:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   10314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10318:	200214fc 	.word	0x200214fc
   1031c:	0003341a 	.word	0x0003341a
   10320:	00033473 	.word	0x00033473
   10324:	00032679 	.word	0x00032679
   10328:	00033488 	.word	0x00033488
   1032c:	2002151c 	.word	0x2002151c
   10330:	20021510 	.word	0x20021510
   10334:	20021a88 	.word	0x20021a88
   10338:	00033447 	.word	0x00033447
   1033c:	0003345e 	.word	0x0003345e

00010340 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   10340:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   10342:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   10344:	4b16      	ldr	r3, [pc, #88]	; (103a0 <pm_system_resume+0x60>)
   10346:	7d1c      	ldrb	r4, [r3, #20]
   10348:	f004 031f 	and.w	r3, r4, #31
   1034c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1034e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10350:	4b14      	ldr	r3, [pc, #80]	; (103a4 <pm_system_resume+0x64>)
   10352:	0961      	lsrs	r1, r4, #5
   10354:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10358:	e8d3 1fef 	ldaex	r1, [r3]
   1035c:	ea01 0500 	and.w	r5, r1, r0
   10360:	e8c3 5fe6 	stlex	r6, r5, [r3]
   10364:	2e00      	cmp	r6, #0
   10366:	d1f7      	bne.n	10358 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   10368:	420a      	tst	r2, r1
   1036a:	d013      	beq.n	10394 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
   1036c:	4b0e      	ldr	r3, [pc, #56]	; (103a8 <pm_system_resume+0x68>)
   1036e:	4d0f      	ldr	r5, [pc, #60]	; (103ac <pm_system_resume+0x6c>)
   10370:	b18b      	cbz	r3, 10396 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
   10372:	230c      	movs	r3, #12
   10374:	4363      	muls	r3, r4
   10376:	18ea      	adds	r2, r5, r3
   10378:	7851      	ldrb	r1, [r2, #1]
   1037a:	5ce8      	ldrb	r0, [r5, r3]
   1037c:	f01a faa9 	bl	2a8d2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   10380:	2000      	movs	r0, #0
   10382:	f7ff ff7d 	bl	10280 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   10386:	230c      	movs	r3, #12
   10388:	435c      	muls	r4, r3
   1038a:	2300      	movs	r3, #0
   1038c:	192a      	adds	r2, r5, r4
   1038e:	512b      	str	r3, [r5, r4]
   10390:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   10394:	bd70      	pop	{r4, r5, r6, pc}
   10396:	f383 8811 	msr	BASEPRI, r3
   1039a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1039e:	e7ef      	b.n	10380 <pm_system_resume+0x40>
   103a0:	20021a88 	.word	0x20021a88
   103a4:	20021524 	.word	0x20021524
   103a8:	0002a8d3 	.word	0x0002a8d3
   103ac:	20021510 	.word	0x20021510

000103b0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   103b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   103b4:	4b45      	ldr	r3, [pc, #276]	; (104cc <pm_system_suspend+0x11c>)
{
   103b6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   103b8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   103ba:	f04f 0320 	mov.w	r3, #32
   103be:	f3ef 8811 	mrs	r8, BASEPRI
   103c2:	f383 8812 	msr	BASEPRI_MAX, r3
   103c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   103ca:	4841      	ldr	r0, [pc, #260]	; (104d0 <pm_system_suspend+0x120>)
   103cc:	f014 fe54 	bl	25078 <z_spin_lock_valid>
   103d0:	b968      	cbnz	r0, 103ee <pm_system_suspend+0x3e>
   103d2:	2394      	movs	r3, #148	; 0x94
   103d4:	4a3f      	ldr	r2, [pc, #252]	; (104d4 <pm_system_suspend+0x124>)
   103d6:	4940      	ldr	r1, [pc, #256]	; (104d8 <pm_system_suspend+0x128>)
   103d8:	4840      	ldr	r0, [pc, #256]	; (104dc <pm_system_suspend+0x12c>)
   103da:	f01a f97e 	bl	2a6da <assert_print>
   103de:	493c      	ldr	r1, [pc, #240]	; (104d0 <pm_system_suspend+0x120>)
   103e0:	483f      	ldr	r0, [pc, #252]	; (104e0 <pm_system_suspend+0x130>)
   103e2:	f01a f97a 	bl	2a6da <assert_print>
   103e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   103e8:	483a      	ldr	r0, [pc, #232]	; (104d4 <pm_system_suspend+0x124>)
   103ea:	f01a f96f 	bl	2a6cc <assert_post_action>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   103ee:	240c      	movs	r4, #12
   103f0:	436c      	muls	r4, r5
	z_spin_lock_set_owner(l);
   103f2:	4837      	ldr	r0, [pc, #220]	; (104d0 <pm_system_suspend+0x120>)
   103f4:	f014 fe5c 	bl	250b0 <z_spin_lock_set_owner>
   103f8:	4b3a      	ldr	r3, [pc, #232]	; (104e4 <pm_system_suspend+0x134>)
   103fa:	4e3b      	ldr	r6, [pc, #236]	; (104e8 <pm_system_suspend+0x138>)
   103fc:	5d19      	ldrb	r1, [r3, r4]
   103fe:	191a      	adds	r2, r3, r4
   10400:	b1b9      	cbz	r1, 10432 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   10402:	ca07      	ldmia	r2, {r0, r1, r2}
   10404:	eb06 0c04 	add.w	ip, r6, r4
   10408:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1040c:	2200      	movs	r2, #0
   1040e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10410:	482f      	ldr	r0, [pc, #188]	; (104d0 <pm_system_suspend+0x120>)
   10412:	f014 fe3f 	bl	25094 <z_spin_unlock_valid>
   10416:	4604      	mov	r4, r0
   10418:	b9b0      	cbnz	r0, 10448 <pm_system_suspend+0x98>
   1041a:	23c2      	movs	r3, #194	; 0xc2
   1041c:	4a2d      	ldr	r2, [pc, #180]	; (104d4 <pm_system_suspend+0x124>)
   1041e:	4933      	ldr	r1, [pc, #204]	; (104ec <pm_system_suspend+0x13c>)
   10420:	482e      	ldr	r0, [pc, #184]	; (104dc <pm_system_suspend+0x12c>)
   10422:	f01a f95a 	bl	2a6da <assert_print>
   10426:	492a      	ldr	r1, [pc, #168]	; (104d0 <pm_system_suspend+0x120>)
   10428:	4831      	ldr	r0, [pc, #196]	; (104f0 <pm_system_suspend+0x140>)
   1042a:	f01a f956 	bl	2a6da <assert_print>
   1042e:	21c2      	movs	r1, #194	; 0xc2
   10430:	e7da      	b.n	103e8 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   10432:	4639      	mov	r1, r7
   10434:	4628      	mov	r0, r5
   10436:	f000 f865 	bl	10504 <pm_policy_next_state>
		if (info != NULL) {
   1043a:	2800      	cmp	r0, #0
   1043c:	d0e8      	beq.n	10410 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   1043e:	c807      	ldmia	r0, {r0, r1, r2}
   10440:	4434      	add	r4, r6
   10442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   10446:	e7e3      	b.n	10410 <pm_system_suspend+0x60>
	__asm__ volatile(
   10448:	f388 8811 	msr	BASEPRI, r8
   1044c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   10450:	230c      	movs	r3, #12
   10452:	436b      	muls	r3, r5
   10454:	18f2      	adds	r2, r6, r3
   10456:	5cf3      	ldrb	r3, [r6, r3]
   10458:	b3ab      	cbz	r3, 104c6 <pm_system_suspend+0x116>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   1045a:	1c7b      	adds	r3, r7, #1
   1045c:	d00f      	beq.n	1047e <pm_system_suspend+0xce>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1045e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   10462:	2100      	movs	r1, #0
   10464:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10468:	4822      	ldr	r0, [pc, #136]	; (104f4 <pm_system_suspend+0x144>)
   1046a:	2300      	movs	r3, #0
   1046c:	fbee 010c 	umlal	r0, r1, lr, ip
   10470:	4a21      	ldr	r2, [pc, #132]	; (104f8 <pm_system_suspend+0x148>)
   10472:	f7f8 fd3d 	bl	8ef0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   10476:	2101      	movs	r1, #1
   10478:	1a38      	subs	r0, r7, r0
   1047a:	f017 fadb 	bl	27a34 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1047e:	f016 f959 	bl	26734 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   10482:	2001      	movs	r0, #1
   10484:	f7ff fefc 	bl	10280 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10488:	4b1c      	ldr	r3, [pc, #112]	; (104fc <pm_system_suspend+0x14c>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1048a:	096a      	lsrs	r2, r5, #5
   1048c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   10490:	2201      	movs	r2, #1
   10492:	f005 011f 	and.w	r1, r5, #31
   10496:	408a      	lsls	r2, r1
   10498:	e8d3 0fef 	ldaex	r0, [r3]
   1049c:	4310      	orrs	r0, r2
   1049e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   104a2:	2900      	cmp	r1, #0
   104a4:	d1f8      	bne.n	10498 <pm_system_suspend+0xe8>
	if (pm_state_set != NULL) {
   104a6:	4b16      	ldr	r3, [pc, #88]	; (10500 <pm_system_suspend+0x150>)
   104a8:	b133      	cbz	r3, 104b8 <pm_system_suspend+0x108>
		pm_state_set(info->state, info->substate_id);
   104aa:	230c      	movs	r3, #12
   104ac:	436b      	muls	r3, r5
   104ae:	18f2      	adds	r2, r6, r3
   104b0:	7851      	ldrb	r1, [r2, #1]
   104b2:	5cf0      	ldrb	r0, [r6, r3]
   104b4:	f01a fa01 	bl	2a8ba <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   104b8:	f7ff ff42 	bl	10340 <pm_system_resume>
	k_sched_unlock();
   104bc:	f016 f9a6 	bl	2680c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   104c0:	4620      	mov	r0, r4
   104c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   104c6:	461c      	mov	r4, r3
   104c8:	e7fa      	b.n	104c0 <pm_system_suspend+0x110>
   104ca:	bf00      	nop
   104cc:	20021a88 	.word	0x20021a88
   104d0:	20021500 	.word	0x20021500
   104d4:	0003341a 	.word	0x0003341a
   104d8:	00033473 	.word	0x00033473
   104dc:	00032679 	.word	0x00032679
   104e0:	00033488 	.word	0x00033488
   104e4:	20021504 	.word	0x20021504
   104e8:	20021510 	.word	0x20021510
   104ec:	00033447 	.word	0x00033447
   104f0:	0003345e 	.word	0x0003345e
   104f4:	000f423f 	.word	0x000f423f
   104f8:	000f4240 	.word	0x000f4240
   104fc:	20021524 	.word	0x20021524
   10500:	0002a8bb 	.word	0x0002a8bb

00010504 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   10504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10508:	b085      	sub	sp, #20
   1050a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1050c:	a903      	add	r1, sp, #12
   1050e:	f000 f843 	bl	10598 <pm_state_cpu_get_all>
   10512:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   10516:	4604      	mov	r4, r0
   10518:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1051c:	4b1b      	ldr	r3, [pc, #108]	; (1058c <pm_policy_next_state+0x88>)
   1051e:	9d03      	ldr	r5, [sp, #12]
   10520:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10524:	1e43      	subs	r3, r0, #1
   10526:	b21b      	sxth	r3, r3
   10528:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1052c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10590 <pm_policy_next_state+0x8c>
   10530:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   10534:	b924      	cbnz	r4, 10540 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   10536:	46a1      	mov	r9, r4
}
   10538:	4648      	mov	r0, r9
   1053a:	b005      	add	sp, #20
   1053c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10540:	46c4      	mov	ip, r8
   10542:	4659      	mov	r1, fp
   10544:	6868      	ldr	r0, [r5, #4]
   10546:	2300      	movs	r3, #0
   10548:	fbe0 c107 	umlal	ip, r1, r0, r7
   1054c:	4a11      	ldr	r2, [pc, #68]	; (10594 <pm_policy_next_state+0x90>)
   1054e:	4660      	mov	r0, ip
   10550:	f7f8 fcce 	bl	8ef0 <__aeabi_uldivmod>
   10554:	46c4      	mov	ip, r8
   10556:	4659      	mov	r1, fp
   10558:	9001      	str	r0, [sp, #4]
   1055a:	68a8      	ldr	r0, [r5, #8]
   1055c:	2300      	movs	r3, #0
   1055e:	fbe0 c107 	umlal	ip, r1, r0, r7
   10562:	4a0c      	ldr	r2, [pc, #48]	; (10594 <pm_policy_next_state+0x90>)
   10564:	4660      	mov	r0, ip
   10566:	f7f8 fcc3 	bl	8ef0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1056a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1056e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   10570:	d001      	beq.n	10576 <pm_policy_next_state+0x72>
   10572:	4582      	cmp	sl, r0
   10574:	d905      	bls.n	10582 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   10576:	1c73      	adds	r3, r6, #1
   10578:	d0de      	beq.n	10538 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1057a:	9b01      	ldr	r3, [sp, #4]
   1057c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1057e:	42b0      	cmp	r0, r6
   10580:	d9da      	bls.n	10538 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   10582:	3c01      	subs	r4, #1
   10584:	b2a4      	uxth	r4, r4
   10586:	3d0c      	subs	r5, #12
   10588:	e7d4      	b.n	10534 <pm_policy_next_state+0x30>
   1058a:	bf00      	nop
   1058c:	20008440 	.word	0x20008440
   10590:	000f423f 	.word	0x000f423f
   10594:	000f4240 	.word	0x000f4240

00010598 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   10598:	b908      	cbnz	r0, 1059e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1059a:	4b02      	ldr	r3, [pc, #8]	; (105a4 <pm_state_cpu_get_all+0xc>)
   1059c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1059e:	2000      	movs	r0, #0
   105a0:	4770      	bx	lr
   105a2:	bf00      	nop
   105a4:	00031c1c 	.word	0x00031c1c

000105a8 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   105a8:	4b03      	ldr	r3, [pc, #12]	; (105b8 <nus_ccc_cfg_changed+0x10>)
   105aa:	689b      	ldr	r3, [r3, #8]
   105ac:	b11b      	cbz	r3, 105b6 <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   105ae:	1e48      	subs	r0, r1, #1
   105b0:	bf18      	it	ne
   105b2:	2001      	movne	r0, #1
   105b4:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   105b6:	4770      	bx	lr
   105b8:	20021528 	.word	0x20021528

000105bc <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   105bc:	b510      	push	{r4, lr}
   105be:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   105c0:	4b03      	ldr	r3, [pc, #12]	; (105d0 <on_receive+0x14>)
{
   105c2:	4611      	mov	r1, r2
	if (nus_cb.received) {
   105c4:	681b      	ldr	r3, [r3, #0]
   105c6:	b10b      	cbz	r3, 105cc <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   105c8:	4622      	mov	r2, r4
   105ca:	4798      	blx	r3
}
	return len;
}
   105cc:	4620      	mov	r0, r4
   105ce:	bd10      	pop	{r4, pc}
   105d0:	20021528 	.word	0x20021528

000105d4 <on_sent>:
{
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   105d4:	4b02      	ldr	r3, [pc, #8]	; (105e0 <on_sent+0xc>)
   105d6:	685b      	ldr	r3, [r3, #4]
   105d8:	b103      	cbz	r3, 105dc <on_sent+0x8>
		nus_cb.sent(conn);
   105da:	4718      	bx	r3
	}
}
   105dc:	4770      	bx	lr
   105de:	bf00      	nop
   105e0:	20021528 	.word	0x20021528

000105e4 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   105e4:	b130      	cbz	r0, 105f4 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   105e6:	4b04      	ldr	r3, [pc, #16]	; (105f8 <bt_nus_init+0x14>)
   105e8:	6802      	ldr	r2, [r0, #0]
   105ea:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   105ec:	6842      	ldr	r2, [r0, #4]
   105ee:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   105f0:	6882      	ldr	r2, [r0, #8]
   105f2:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   105f4:	2000      	movs	r0, #0
   105f6:	4770      	bx	lr
   105f8:	20021528 	.word	0x20021528

000105fc <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   105fc:	b570      	push	{r4, r5, r6, lr}
   105fe:	460e      	mov	r6, r1
   10600:	4615      	mov	r5, r2
   10602:	4604      	mov	r4, r0
   10604:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   10606:	2100      	movs	r1, #0
   10608:	2218      	movs	r2, #24
   1060a:	4668      	mov	r0, sp
   1060c:	f01f fff9 	bl	30602 <memset>
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   10610:	490b      	ldr	r1, [pc, #44]	; (10640 <bt_nus_send+0x44>)
	params.data = data;
	params.len = len;
	params.func = on_sent;
   10612:	4b0c      	ldr	r3, [pc, #48]	; (10644 <bt_nus_send+0x48>)
	params.data = data;
   10614:	e9cd 1601 	strd	r1, r6, [sp, #4]
	params.len = len;
   10618:	f8ad 500c 	strh.w	r5, [sp, #12]
	params.func = on_sent;
   1061c:	9304      	str	r3, [sp, #16]

	if (!conn) {
   1061e:	b92c      	cbnz	r4, 1062c <bt_nus_send+0x30>
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
		return bt_gatt_notify_cb(conn, &params);
   10620:	4669      	mov	r1, sp
   10622:	4620      	mov	r0, r4
   10624:	f007 ff0a 	bl	1843c <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   10628:	b006      	add	sp, #24
   1062a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   1062c:	2201      	movs	r2, #1
   1062e:	4620      	mov	r0, r4
   10630:	f007 fbd2 	bl	17dd8 <bt_gatt_is_subscribed>
   10634:	2800      	cmp	r0, #0
   10636:	d1f3      	bne.n	10620 <bt_nus_send+0x24>
		return -EINVAL;
   10638:	f06f 0015 	mvn.w	r0, #21
   1063c:	e7f4      	b.n	10628 <bt_nus_send+0x2c>
   1063e:	bf00      	nop
   10640:	00031c44 	.word	0x00031c44
   10644:	000105d5 	.word	0x000105d5

00010648 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   10648:	4904      	ldr	r1, [pc, #16]	; (1065c <sub_bytes+0x14>)
   1064a:	1e43      	subs	r3, r0, #1
   1064c:	300f      	adds	r0, #15
   1064e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10652:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
   10654:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
   10656:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10658:	d1f9      	bne.n	1064e <sub_bytes+0x6>
	}
}
   1065a:	4770      	bx	lr
   1065c:	00033b85 	.word	0x00033b85

00010660 <tc_aes128_set_encrypt_key>:
{
   10660:	b5f0      	push	{r4, r5, r6, r7, lr}
   10662:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
   10664:	4e26      	ldr	r6, [pc, #152]	; (10700 <tc_aes128_set_encrypt_key+0xa0>)
{
   10666:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10668:	ad01      	add	r5, sp, #4
{
   1066a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   1066c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10670:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10674:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10678:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1067c:	4638      	mov	r0, r7
   1067e:	2f00      	cmp	r7, #0
   10680:	d039      	beq.n	106f6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
   10682:	2c00      	cmp	r4, #0
   10684:	d039      	beq.n	106fa <tc_aes128_set_encrypt_key+0x9a>
   10686:	1f38      	subs	r0, r7, #4
   10688:	4602      	mov	r2, r0
   1068a:	4621      	mov	r1, r4
   1068c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1068e:	784b      	ldrb	r3, [r1, #1]
   10690:	780d      	ldrb	r5, [r1, #0]
   10692:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10694:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10698:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
   1069a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1069c:	432b      	orrs	r3, r5
   1069e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
   106a2:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   106a4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   106a8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   106ac:	d1ef      	bne.n	1068e <tc_aes128_set_encrypt_key+0x2e>
   106ae:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
   106b0:	4c14      	ldr	r4, [pc, #80]	; (10704 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
   106b2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   106b4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   106b6:	d116      	bne.n	106e6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   106b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   106bc:	5ca5      	ldrb	r5, [r4, r2]
   106be:	0e1a      	lsrs	r2, r3, #24
   106c0:	5ca2      	ldrb	r2, [r4, r2]
   106c2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   106c6:	f3c3 2507 	ubfx	r5, r3, #8, #8
   106ca:	5d65      	ldrb	r5, [r4, r5]
   106cc:	b2db      	uxtb	r3, r3
   106ce:	5ce3      	ldrb	r3, [r4, r3]
   106d0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   106d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   106d8:	f021 0303 	bic.w	r3, r1, #3
   106dc:	3330      	adds	r3, #48	; 0x30
   106de:	446b      	add	r3, sp
   106e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   106e4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   106e6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   106ea:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   106ec:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   106ee:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   106f0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   106f2:	d1de      	bne.n	106b2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
   106f4:	2001      	movs	r0, #1
}
   106f6:	b00d      	add	sp, #52	; 0x34
   106f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   106fa:	4620      	mov	r0, r4
   106fc:	e7fb      	b.n	106f6 <tc_aes128_set_encrypt_key+0x96>
   106fe:	bf00      	nop
   10700:	000316bc 	.word	0x000316bc
   10704:	00033b85 	.word	0x00033b85

00010708 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   10708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1070c:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1070e:	6803      	ldr	r3, [r0, #0]
{
   10710:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   10712:	9302      	str	r3, [sp, #8]
   10714:	6843      	ldr	r3, [r0, #4]
   10716:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 108d4 <compress+0x1cc>
   1071a:	9303      	str	r3, [sp, #12]
   1071c:	6883      	ldr	r3, [r0, #8]
   1071e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   10722:	9304      	str	r3, [sp, #16]
   10724:	68c3      	ldr	r3, [r0, #12]
   10726:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   10728:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   1072a:	e9dd be04 	ldrd	fp, lr, [sp, #16]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   1072e:	9306      	str	r3, [sp, #24]
   10730:	6943      	ldr	r3, [r0, #20]
   10732:	9307      	str	r3, [sp, #28]
   10734:	6983      	ldr	r3, [r0, #24]
   10736:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
   1073a:	9308      	str	r3, [sp, #32]
   1073c:	69c3      	ldr	r3, [r0, #28]
   1073e:	4698      	mov	r8, r3
   10740:	9309      	str	r3, [sp, #36]	; 0x24
   10742:	9b08      	ldr	r3, [sp, #32]
   10744:	9300      	str	r3, [sp, #0]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
   10746:	59cd      	ldr	r5, [r1, r7]
		t1 = work_space[i] = n;
   10748:	ab0c      	add	r3, sp, #48	; 0x30
   1074a:	ba2d      	rev	r5, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   1074c:	f85a 9b04 	ldr.w	r9, [sl], #4
		t1 = work_space[i] = n;
   10750:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   10752:	ea4f 23f2 	mov.w	r3, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10756:	44a9      	add	r9, r5
   10758:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
   1075c:	9d00      	ldr	r5, [sp, #0]
   1075e:	ea83 6372 	eor.w	r3, r3, r2, ror #25
   10762:	444b      	add	r3, r9
   10764:	ea25 0502 	bic.w	r5, r5, r2
   10768:	ea02 090c 	and.w	r9, r2, ip
   1076c:	ea85 0509 	eor.w	r5, r5, r9
   10770:	442b      	add	r3, r5
   10772:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   10774:	ea86 050b 	eor.w	r5, r6, fp
	return (((a) >> n) | ((a) << (32 - n)));
   10778:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   1077c:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   10780:	4025      	ands	r5, r4
   10782:	ea06 090b 	and.w	r9, r6, fp
   10786:	ea85 0509 	eor.w	r5, r5, r9
   1078a:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	for (i = 0; i < 16; ++i) {
   1078e:	3704      	adds	r7, #4
		t2 = Sigma0(a) + Maj(a, b, c);
   10790:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   10792:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   10794:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   10798:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
   1079a:	46de      	mov	lr, fp
   1079c:	f8dd 8000 	ldr.w	r8, [sp]
   107a0:	f040 8088 	bne.w	108b4 <compress+0x1ac>
   107a4:	f04f 0a10 	mov.w	sl, #16
   107a8:	494b      	ldr	r1, [pc, #300]	; (108d8 <compress+0x1d0>)
   107aa:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   107ac:	4651      	mov	r1, sl
   107ae:	f10a 0a01 	add.w	sl, sl, #1
   107b2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   107b6:	f00a 070f 	and.w	r7, sl, #15
   107ba:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   107be:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107c2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   107c6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   107ca:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
   107cc:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   107d0:	f101 070e 	add.w	r7, r1, #14
   107d4:	f007 070f 	and.w	r7, r7, #15
   107d8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   107dc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107e0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   107e2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
   107e6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
   107ea:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   107ee:	f001 010f 	and.w	r1, r1, #15
   107f2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   107f6:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   107fa:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
   107fe:	f859 ec40 	ldr.w	lr, [r9, #-64]
   10802:	f851 1c40 	ldr.w	r1, [r1, #-64]
	for ( ; i < 64; ++i) {
   10806:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1080a:	4471      	add	r1, lr
		s0 = sigma0(s0);
   1080c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10810:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
   10814:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10818:	4441      	add	r1, r8
		s1 = sigma1(s1);
   1081a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   1081e:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10820:	ea05 0802 	and.w	r8, r5, r2
	return (((a) >> n) | ((a) << (32 - n)));
   10824:	ea4f 2ef5 	mov.w	lr, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10828:	ea2c 0705 	bic.w	r7, ip, r5
   1082c:	ea87 0708 	eor.w	r7, r7, r8
   10830:	ea8e 1eb5 	eor.w	lr, lr, r5, ror #6
   10834:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   10838:	ea8e 6e75 	eor.w	lr, lr, r5, ror #25
   1083c:	4477      	add	r7, lr
   1083e:	f858 ef04 	ldr.w	lr, [r8, #4]!
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   10842:	f849 1c40 	str.w	r1, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10846:	4477      	add	r7, lr
   10848:	440f      	add	r7, r1
   1084a:	9900      	ldr	r1, [sp, #0]
	return (((a) >> n) | ((a) << (32 - n)));
   1084c:	ea4f 3e73 	mov.w	lr, r3, ror #13
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10850:	4439      	add	r1, r7
		t2 = Sigma0(a) + Maj(a, b, c);
   10852:	ea84 0706 	eor.w	r7, r4, r6
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   10856:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
		t2 = Sigma0(a) + Maj(a, b, c);
   1085a:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
   1085e:	ea07 0703 	and.w	r7, r7, r3
   10862:	ea04 0806 	and.w	r8, r4, r6
   10866:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
   1086a:	ea87 0708 	eor.w	r7, r7, r8
   1086e:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   10870:	440f      	add	r7, r1
		h = g; g = f; f = e; e = d + t1;
   10872:	eb01 0e0b 	add.w	lr, r1, fp
	for ( ; i < 64; ++i) {
   10876:	f8cd c000 	str.w	ip, [sp]
   1087a:	46b3      	mov	fp, r6
   1087c:	d122      	bne.n	108c4 <compress+0x1bc>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   1087e:	9902      	ldr	r1, [sp, #8]
   10880:	4439      	add	r1, r7
   10882:	6001      	str	r1, [r0, #0]
   10884:	9903      	ldr	r1, [sp, #12]
   10886:	4419      	add	r1, r3
   10888:	9b04      	ldr	r3, [sp, #16]
   1088a:	6041      	str	r1, [r0, #4]
   1088c:	4423      	add	r3, r4
   1088e:	6083      	str	r3, [r0, #8]
   10890:	9b05      	ldr	r3, [sp, #20]
   10892:	4433      	add	r3, r6
   10894:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   10896:	9b06      	ldr	r3, [sp, #24]
   10898:	4473      	add	r3, lr
   1089a:	6103      	str	r3, [r0, #16]
   1089c:	9b07      	ldr	r3, [sp, #28]
   1089e:	442b      	add	r3, r5
   108a0:	6143      	str	r3, [r0, #20]
   108a2:	9b08      	ldr	r3, [sp, #32]
   108a4:	4413      	add	r3, r2
   108a6:	6183      	str	r3, [r0, #24]
   108a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   108aa:	4463      	add	r3, ip
   108ac:	61c3      	str	r3, [r0, #28]
}
   108ae:	b01d      	add	sp, #116	; 0x74
   108b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108b4:	46b3      	mov	fp, r6
   108b6:	f8cd c000 	str.w	ip, [sp]
   108ba:	4626      	mov	r6, r4
   108bc:	4694      	mov	ip, r2
		d = c; c = b; b = a; a = t1 + t2;
   108be:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   108c0:	462a      	mov	r2, r5
   108c2:	e740      	b.n	10746 <compress+0x3e>
   108c4:	4694      	mov	ip, r2
   108c6:	4626      	mov	r6, r4
   108c8:	462a      	mov	r2, r5
   108ca:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   108cc:	4675      	mov	r5, lr
		d = c; c = b; b = a; a = t1 + t2;
   108ce:	463b      	mov	r3, r7
   108d0:	e76c      	b.n	107ac <compress+0xa4>
   108d2:	bf00      	nop
   108d4:	00031d48 	.word	0x00031d48
   108d8:	00031d84 	.word	0x00031d84

000108dc <tc_sha256_init>:
{
   108dc:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   108de:	4604      	mov	r4, r0
   108e0:	b1c8      	cbz	r0, 10916 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   108e2:	2270      	movs	r2, #112	; 0x70
   108e4:	2100      	movs	r1, #0
   108e6:	f01a fdf6 	bl	2b4d6 <_set>
	s->iv[1] = 0xbb67ae85;
   108ea:	4b0b      	ldr	r3, [pc, #44]	; (10918 <tc_sha256_init+0x3c>)
   108ec:	4a0b      	ldr	r2, [pc, #44]	; (1091c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   108ee:	490c      	ldr	r1, [pc, #48]	; (10920 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   108f0:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   108f4:	4b0b      	ldr	r3, [pc, #44]	; (10924 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   108f6:	480c      	ldr	r0, [pc, #48]	; (10928 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   108f8:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   108fc:	4b0b      	ldr	r3, [pc, #44]	; (1092c <tc_sha256_init+0x50>)
   108fe:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   10902:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   10904:	4b0a      	ldr	r3, [pc, #40]	; (10930 <tc_sha256_init+0x54>)
   10906:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   10908:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1090c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10910:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10914:	61e3      	str	r3, [r4, #28]
}
   10916:	bd10      	pop	{r4, pc}
   10918:	bb67ae85 	.word	0xbb67ae85
   1091c:	6a09e667 	.word	0x6a09e667
   10920:	3c6ef372 	.word	0x3c6ef372
   10924:	a54ff53a 	.word	0xa54ff53a
   10928:	510e527f 	.word	0x510e527f
   1092c:	9b05688c 	.word	0x9b05688c
   10930:	1f83d9ab 	.word	0x1f83d9ab

00010934 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   10934:	4901      	ldr	r1, [pc, #4]	; (1093c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   10936:	2210      	movs	r2, #16
	str	r2, [r1]
   10938:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1093a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1093c:	e000ed10 	.word	0xe000ed10

00010940 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   10940:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   10942:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   10944:	f380 8811 	msr	BASEPRI, r0
	isb
   10948:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1094c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   10950:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   10952:	b662      	cpsie	i
	isb
   10954:	f3bf 8f6f 	isb	sy

	bx	lr
   10958:	4770      	bx	lr
   1095a:	bf00      	nop

0001095c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1095c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1095e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   10960:	f381 8811 	msr	BASEPRI, r1

	wfe
   10964:	bf20      	wfe

	msr	BASEPRI, r0
   10966:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1096a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1096c:	4770      	bx	lr
   1096e:	bf00      	nop

00010970 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10974:	4681      	mov	r9, r0

	if (esf != NULL) {
   10976:	460c      	mov	r4, r1
{
   10978:	af00      	add	r7, sp, #0
	if (esf != NULL) {
   1097a:	2900      	cmp	r1, #0
   1097c:	d04c      	beq.n	10a18 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1097e:	e9d1 1200 	ldrd	r1, r2, [r1]
   10982:	466e      	mov	r6, sp
   10984:	b08a      	sub	sp, #40	; 0x28
   10986:	68a3      	ldr	r3, [r4, #8]
   10988:	466d      	mov	r5, sp
   1098a:	f04f 0a05 	mov.w	sl, #5
   1098e:	46a8      	mov	r8, r5
   10990:	4825      	ldr	r0, [pc, #148]	; (10a28 <z_arm_fatal_error+0xb8>)
   10992:	e9c5 2307 	strd	r2, r3, [r5, #28]
   10996:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1099a:	f848 af10 	str.w	sl, [r8, #16]!
   1099e:	2300      	movs	r3, #0
   109a0:	4642      	mov	r2, r8
   109a2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   109a6:	4821      	ldr	r0, [pc, #132]	; (10a2c <z_arm_fatal_error+0xbc>)
   109a8:	f7fd ff82 	bl	e8b0 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   109ac:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   109b0:	46b5      	mov	sp, r6
   109b2:	6963      	ldr	r3, [r4, #20]
   109b4:	46ad      	mov	sp, r5
   109b6:	481e      	ldr	r0, [pc, #120]	; (10a30 <z_arm_fatal_error+0xc0>)
   109b8:	e9c5 2307 	strd	r2, r3, [r5, #28]
   109bc:	e9c5 0105 	strd	r0, r1, [r5, #20]
   109c0:	f8c5 a010 	str.w	sl, [r5, #16]
   109c4:	2300      	movs	r3, #0
   109c6:	4642      	mov	r2, r8
   109c8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   109cc:	4817      	ldr	r0, [pc, #92]	; (10a2c <z_arm_fatal_error+0xbc>)
   109ce:	f7fd ff6f 	bl	e8b0 <z_impl_z_log_msg_static_create>
   109d2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   109d4:	b088      	sub	sp, #32
   109d6:	69e3      	ldr	r3, [r4, #28]
   109d8:	466d      	mov	r5, sp
   109da:	f04f 0a03 	mov.w	sl, #3
   109de:	46a8      	mov	r8, r5
   109e0:	4a14      	ldr	r2, [pc, #80]	; (10a34 <z_arm_fatal_error+0xc4>)
   109e2:	e9c5 2305 	strd	r2, r3, [r5, #20]
   109e6:	f848 af10 	str.w	sl, [r8, #16]!
   109ea:	2300      	movs	r3, #0
   109ec:	4642      	mov	r2, r8
   109ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   109f2:	480e      	ldr	r0, [pc, #56]	; (10a2c <z_arm_fatal_error+0xbc>)
   109f4:	f7fd ff5c 	bl	e8b0 <z_impl_z_log_msg_static_create>
   109f8:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   109fa:	69a3      	ldr	r3, [r4, #24]
   109fc:	46ad      	mov	sp, r5
   109fe:	4a0e      	ldr	r2, [pc, #56]	; (10a38 <z_arm_fatal_error+0xc8>)
   10a00:	f8c5 a010 	str.w	sl, [r5, #16]
   10a04:	e9c5 2305 	strd	r2, r3, [r5, #20]
   10a08:	2300      	movs	r3, #0
   10a0a:	4642      	mov	r2, r8
   10a0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10a10:	4806      	ldr	r0, [pc, #24]	; (10a2c <z_arm_fatal_error+0xbc>)
   10a12:	f7fd ff4d 	bl	e8b0 <z_impl_z_log_msg_static_create>
   10a16:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   10a18:	4621      	mov	r1, r4
   10a1a:	4648      	mov	r0, r9
   10a1c:	f013 fe7c 	bl	24718 <z_fatal_error>
}
   10a20:	46bd      	mov	sp, r7
   10a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a26:	bf00      	nop
   10a28:	00033c85 	.word	0x00033c85
   10a2c:	000315c4 	.word	0x000315c4
   10a30:	00033cb4 	.word	0x00033cb4
   10a34:	00033ce3 	.word	0x00033ce3
   10a38:	00033cf2 	.word	0x00033cf2

00010a3c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   10a3c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10a3e:	2800      	cmp	r0, #0
   10a40:	db07      	blt.n	10a52 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10a42:	2301      	movs	r3, #1
   10a44:	0941      	lsrs	r1, r0, #5
   10a46:	4a03      	ldr	r2, [pc, #12]	; (10a54 <arch_irq_enable+0x18>)
   10a48:	f000 001f 	and.w	r0, r0, #31
   10a4c:	4083      	lsls	r3, r0
   10a4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   10a52:	4770      	bx	lr
   10a54:	e000e100 	.word	0xe000e100

00010a58 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   10a58:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   10a5a:	2800      	cmp	r0, #0
   10a5c:	db0c      	blt.n	10a78 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10a5e:	2201      	movs	r2, #1
   10a60:	4906      	ldr	r1, [pc, #24]	; (10a7c <arch_irq_disable+0x24>)
   10a62:	0943      	lsrs	r3, r0, #5
   10a64:	f000 001f 	and.w	r0, r0, #31
   10a68:	4082      	lsls	r2, r0
   10a6a:	3320      	adds	r3, #32
   10a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   10a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10a74:	f3bf 8f6f 	isb	sy
}
   10a78:	4770      	bx	lr
   10a7a:	bf00      	nop
   10a7c:	e000e100 	.word	0xe000e100

00010a80 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   10a80:	4b05      	ldr	r3, [pc, #20]	; (10a98 <arch_irq_is_enabled+0x18>)
   10a82:	0942      	lsrs	r2, r0, #5
   10a84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   10a88:	2301      	movs	r3, #1
   10a8a:	f000 001f 	and.w	r0, r0, #31
   10a8e:	fa03 f000 	lsl.w	r0, r3, r0
}
   10a92:	4010      	ands	r0, r2
   10a94:	4770      	bx	lr
   10a96:	bf00      	nop
   10a98:	e000e100 	.word	0xe000e100

00010a9c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   10a9c:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   10a9e:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10aa0:	2b07      	cmp	r3, #7
{
   10aa2:	4604      	mov	r4, r0
   10aa4:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   10aa6:	d90f      	bls.n	10ac8 <z_arm_irq_priority_set+0x2c>
   10aa8:	235b      	movs	r3, #91	; 0x5b
   10aaa:	4a10      	ldr	r2, [pc, #64]	; (10aec <z_arm_irq_priority_set+0x50>)
   10aac:	4910      	ldr	r1, [pc, #64]	; (10af0 <z_arm_irq_priority_set+0x54>)
   10aae:	4811      	ldr	r0, [pc, #68]	; (10af4 <z_arm_irq_priority_set+0x58>)
   10ab0:	f019 fe13 	bl	2a6da <assert_print>
   10ab4:	4629      	mov	r1, r5
   10ab6:	4810      	ldr	r0, [pc, #64]	; (10af8 <z_arm_irq_priority_set+0x5c>)
   10ab8:	2307      	movs	r3, #7
   10aba:	4622      	mov	r2, r4
   10abc:	f019 fe0d 	bl	2a6da <assert_print>
   10ac0:	215b      	movs	r1, #91	; 0x5b
   10ac2:	480a      	ldr	r0, [pc, #40]	; (10aec <z_arm_irq_priority_set+0x50>)
   10ac4:	f019 fe02 	bl	2a6cc <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   10ac8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   10aca:	2800      	cmp	r0, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10acc:	bfac      	ite	ge
   10ace:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ad2:	4a0a      	ldrlt	r2, [pc, #40]	; (10afc <z_arm_irq_priority_set+0x60>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ad4:	ea4f 1343 	mov.w	r3, r3, lsl #5
   10ad8:	b2db      	uxtb	r3, r3
   10ada:	bfab      	itete	ge
   10adc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ae0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ae4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   10ae8:	5413      	strblt	r3, [r2, r0]
}
   10aea:	bd38      	pop	{r3, r4, r5, pc}
   10aec:	00033d20 	.word	0x00033d20
   10af0:	00033d56 	.word	0x00033d56
   10af4:	00032679 	.word	0x00032679
   10af8:	00033d71 	.word	0x00033d71
   10afc:	e000ed14 	.word	0xe000ed14

00010b00 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   10b00:	bf30      	wfi
    b z_SysNmiOnReset
   10b02:	f7ff bffd 	b.w	10b00 <z_SysNmiOnReset>
   10b06:	bf00      	nop

00010b08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10b08:	4a0b      	ldr	r2, [pc, #44]	; (10b38 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   10b0a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   10b0c:	4b0b      	ldr	r3, [pc, #44]	; (10b3c <z_arm_prep_c+0x34>)
   10b0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10b12:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   10b14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10b18:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   10b1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   10b20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   10b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   10b28:	f013 fec8 	bl	248bc <z_bss_zero>
	z_data_copy();
   10b2c:	f016 fdc2 	bl	276b4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   10b30:	f000 fc06 	bl	11340 <z_arm_interrupt_init>
	z_cstart();
   10b34:	f013 ff02 	bl	2493c <z_cstart>
   10b38:	00008000 	.word	0x00008000
   10b3c:	e000ed00 	.word	0xe000ed00

00010b40 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   10b40:	4a09      	ldr	r2, [pc, #36]	; (10b68 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   10b42:	490a      	ldr	r1, [pc, #40]	; (10b6c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   10b44:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   10b46:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   10b48:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   10b4a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   10b4c:	4908      	ldr	r1, [pc, #32]	; (10b70 <arch_swap+0x30>)
   10b4e:	684b      	ldr	r3, [r1, #4]
   10b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   10b54:	604b      	str	r3, [r1, #4]
   10b56:	2300      	movs	r3, #0
   10b58:	f383 8811 	msr	BASEPRI, r3
   10b5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   10b60:	6893      	ldr	r3, [r2, #8]
}
   10b62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   10b64:	4770      	bx	lr
   10b66:	bf00      	nop
   10b68:	20021a88 	.word	0x20021a88
   10b6c:	00032554 	.word	0x00032554
   10b70:	e000ed00 	.word	0xe000ed00

00010b74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   10b74:	4915      	ldr	r1, [pc, #84]	; (10bcc <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
   10b76:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   10b78:	f882 e081 	strb.w	lr, [r2, #129]	; 0x81
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   10b7c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   10b80:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   10b82:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   10b86:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   10b8a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   10b8c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   10b90:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   10b94:	4f0e      	ldr	r7, [pc, #56]	; (10bd0 <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   10b96:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   10b9a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   10b9c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   10b9e:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   10ba0:	f992 e081 	ldrsb.w	lr, [r2, #129]	; 0x81

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   10ba4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   10ba6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   10ba8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   10baa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   10bae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   10bb2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   10bb6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   10bba:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   10bbe:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   10bc0:	f01b f8d6 	bl	2bd70 <configure_builtin_stack_guard>
    pop {r2, lr}
   10bc4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   10bc8:	4770      	bx	lr
   10bca:	0000      	.short	0x0000
    ldr r1, =_kernel
   10bcc:	20021a88 	.word	0x20021a88
    ldr v4, =_SCS_ICSR
   10bd0:	e000ed04 	.word	0xe000ed04

00010bd4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   10bd4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   10bd8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   10bda:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   10bde:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   10be2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   10be4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   10be8:	2902      	cmp	r1, #2
    beq _oops
   10bea:	d0ff      	beq.n	10bec <_oops>

00010bec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   10bec:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   10bee:	f01b f8b0 	bl	2bd52 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   10bf2:	bd01      	pop	{r0, pc}

00010bf4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   10bf4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   10bf8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   10bfa:	490d      	ldr	r1, [pc, #52]	; (10c30 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   10bfc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   10c00:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   10c02:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   10c06:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   10c0a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   10c0c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   10c10:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   10c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10c18:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   10c1c:	2300      	movs	r3, #0
   10c1e:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   10c20:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   10c24:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   10c26:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   10c28:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   10c2c:	4770      	bx	lr
   10c2e:	bf00      	nop
   10c30:	0002a38b 	.word	0x0002a38b

00010c34 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   10c34:	4b08      	ldr	r3, [pc, #32]	; (10c58 <arch_switch_to_main_thread+0x24>)
   10c36:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   10c38:	6e83      	ldr	r3, [r0, #104]	; 0x68
   10c3a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   10c3e:	4610      	mov	r0, r2
   10c40:	f381 8809 	msr	PSP, r1
   10c44:	2100      	movs	r1, #0
   10c46:	b663      	cpsie	if
   10c48:	f381 8811 	msr	BASEPRI, r1
   10c4c:	f3bf 8f6f 	isb	sy
   10c50:	2200      	movs	r2, #0
   10c52:	2300      	movs	r3, #0
   10c54:	f019 fb99 	bl	2a38a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   10c58:	20021a88 	.word	0x20021a88

00010c5c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   10c5c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   10c5e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   10c60:	4a0b      	ldr	r2, [pc, #44]	; (10c90 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   10c62:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   10c64:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   10c66:	bf1e      	ittt	ne
	movne	r1, #0
   10c68:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   10c6a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   10c6c:	f01f fa89 	blne	30182 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   10c70:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   10c72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   10c76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   10c7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   10c7e:	4905      	ldr	r1, [pc, #20]	; (10c94 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   10c80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   10c82:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   10c84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   10c86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   10c8a:	4903      	ldr	r1, [pc, #12]	; (10c98 <_isr_wrapper+0x3c>)
	bx r1
   10c8c:	4708      	bx	r1
   10c8e:	0000      	.short	0x0000
	ldr r2, =_kernel
   10c90:	20021a88 	.word	0x20021a88
	ldr r1, =_sw_isr_table
   10c94:	00031074 	.word	0x00031074
	ldr r1, =z_arm_int_exit
   10c98:	00010c9d 	.word	0x00010c9d

00010c9c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   10c9c:	4b04      	ldr	r3, [pc, #16]	; (10cb0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   10c9e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   10ca0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   10ca2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   10ca4:	d003      	beq.n	10cae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   10ca6:	4903      	ldr	r1, [pc, #12]	; (10cb4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   10ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   10cac:	600a      	str	r2, [r1, #0]

00010cae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   10cae:	4770      	bx	lr
	ldr r3, =_kernel
   10cb0:	20021a88 	.word	0x20021a88
	ldr r1, =_SCS_ICSR
   10cb4:	e000ed04 	.word	0xe000ed04

00010cb8 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   10cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10cbc:	b086      	sub	sp, #24
   10cbe:	4606      	mov	r6, r0
   10cc0:	460d      	mov	r5, r1
   10cc2:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   10cc4:	2402      	movs	r4, #2
   10cc6:	4b4b      	ldr	r3, [pc, #300]	; (10df4 <mem_manage_fault.constprop.0+0x13c>)
   10cc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ccc:	617b      	str	r3, [r7, #20]
   10cce:	484a      	ldr	r0, [pc, #296]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10cd0:	613c      	str	r4, [r7, #16]
   10cd2:	f107 0210 	add.w	r2, r7, #16
   10cd6:	f01b f84f 	bl	2bd78 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   10cda:	4b48      	ldr	r3, [pc, #288]	; (10dfc <mem_manage_fault.constprop.0+0x144>)
   10cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cde:	06db      	lsls	r3, r3, #27
   10ce0:	d509      	bpl.n	10cf6 <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   10ce2:	4b47      	ldr	r3, [pc, #284]	; (10e00 <mem_manage_fault.constprop.0+0x148>)
   10ce4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ce8:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10cec:	4842      	ldr	r0, [pc, #264]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10cee:	f107 0210 	add.w	r2, r7, #16
   10cf2:	f01b f841 	bl	2bd78 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   10cf6:	4b41      	ldr	r3, [pc, #260]	; (10dfc <mem_manage_fault.constprop.0+0x144>)
   10cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10cfa:	0718      	lsls	r0, r3, #28
   10cfc:	d50a      	bpl.n	10d14 <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10cfe:	4b41      	ldr	r3, [pc, #260]	; (10e04 <mem_manage_fault.constprop.0+0x14c>)
   10d00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d04:	617b      	str	r3, [r7, #20]
   10d06:	2302      	movs	r3, #2
   10d08:	483b      	ldr	r0, [pc, #236]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10d0a:	613b      	str	r3, [r7, #16]
   10d0c:	f107 0210 	add.w	r2, r7, #16
   10d10:	f01b f832 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   10d14:	4c39      	ldr	r4, [pc, #228]	; (10dfc <mem_manage_fault.constprop.0+0x144>)
   10d16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10d18:	0799      	lsls	r1, r3, #30
   10d1a:	d522      	bpl.n	10d62 <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
   10d1c:	46e8      	mov	r8, sp
   10d1e:	4b3a      	ldr	r3, [pc, #232]	; (10e08 <mem_manage_fault.constprop.0+0x150>)
   10d20:	f107 0210 	add.w	r2, r7, #16
   10d24:	617b      	str	r3, [r7, #20]
   10d26:	2302      	movs	r3, #2
   10d28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d2c:	613b      	str	r3, [r7, #16]
   10d2e:	4832      	ldr	r0, [pc, #200]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10d30:	f01b f822 	bl	2bd78 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   10d34:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   10d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10d38:	0612      	lsls	r2, r2, #24
   10d3a:	d512      	bpl.n	10d62 <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   10d3c:	b088      	sub	sp, #32
   10d3e:	466a      	mov	r2, sp
   10d40:	4932      	ldr	r1, [pc, #200]	; (10e0c <mem_manage_fault.constprop.0+0x154>)
   10d42:	482d      	ldr	r0, [pc, #180]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10d44:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10d48:	2303      	movs	r3, #3
   10d4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10d4e:	f842 3f10 	str.w	r3, [r2, #16]!
   10d52:	f01b f811 	bl	2bd78 <z_log_msg_static_create.constprop.0>
   10d56:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10d58:	b11e      	cbz	r6, 10d62 <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   10d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10d60:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   10d62:	4b26      	ldr	r3, [pc, #152]	; (10dfc <mem_manage_fault.constprop.0+0x144>)
   10d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d66:	07db      	lsls	r3, r3, #31
   10d68:	d50a      	bpl.n	10d80 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
   10d6a:	4b29      	ldr	r3, [pc, #164]	; (10e10 <mem_manage_fault.constprop.0+0x158>)
   10d6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d70:	617b      	str	r3, [r7, #20]
   10d72:	2302      	movs	r3, #2
   10d74:	4820      	ldr	r0, [pc, #128]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10d76:	613b      	str	r3, [r7, #16]
   10d78:	f107 0210 	add.w	r2, r7, #16
   10d7c:	f01a fffc 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10d80:	4b1e      	ldr	r3, [pc, #120]	; (10dfc <mem_manage_fault.constprop.0+0x144>)
   10d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10d84:	069e      	lsls	r6, r3, #26
   10d86:	d50a      	bpl.n	10d9e <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
   10d88:	4b22      	ldr	r3, [pc, #136]	; (10e14 <mem_manage_fault.constprop.0+0x15c>)
   10d8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10d8e:	617b      	str	r3, [r7, #20]
   10d90:	2302      	movs	r3, #2
   10d92:	4819      	ldr	r0, [pc, #100]	; (10df8 <mem_manage_fault.constprop.0+0x140>)
   10d94:	613b      	str	r3, [r7, #16]
   10d96:	f107 0210 	add.w	r2, r7, #16
   10d9a:	f01a ffed 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10d9e:	4b17      	ldr	r3, [pc, #92]	; (10dfc <mem_manage_fault.constprop.0+0x144>)
   10da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10da2:	06d4      	lsls	r4, r2, #27
   10da4:	d402      	bmi.n	10dac <mem_manage_fault.constprop.0+0xf4>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   10da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   10da8:	0790      	lsls	r0, r2, #30
   10daa:	d511      	bpl.n	10dd0 <mem_manage_fault.constprop.0+0x118>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   10dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10dae:	06d9      	lsls	r1, r3, #27
   10db0:	d50e      	bpl.n	10dd0 <mem_manage_fault.constprop.0+0x118>
   10db2:	4919      	ldr	r1, [pc, #100]	; (10e18 <mem_manage_fault.constprop.0+0x160>)
   10db4:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   10db8:	4a18      	ldr	r2, [pc, #96]	; (10e1c <mem_manage_fault.constprop.0+0x164>)
   10dba:	4819      	ldr	r0, [pc, #100]	; (10e20 <mem_manage_fault.constprop.0+0x168>)
   10dbc:	f019 fc8d 	bl	2a6da <assert_print>
   10dc0:	4818      	ldr	r0, [pc, #96]	; (10e24 <mem_manage_fault.constprop.0+0x16c>)
   10dc2:	f019 fc8a 	bl	2a6da <assert_print>
   10dc6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   10dca:	4814      	ldr	r0, [pc, #80]	; (10e1c <mem_manage_fault.constprop.0+0x164>)
   10dcc:	f019 fc7e 	bl	2a6cc <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   10dd0:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10dd2:	4b0a      	ldr	r3, [pc, #40]	; (10dfc <mem_manage_fault.constprop.0+0x144>)

	return reason;
}
   10dd4:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   10dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10dd8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   10dda:	bf42      	ittt	mi
   10ddc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   10dde:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   10de2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   10de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10de6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   10dea:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10dec:	7028      	strb	r0, [r5, #0]
}
   10dee:	46bd      	mov	sp, r7
   10df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10df4:	00033db1 	.word	0x00033db1
   10df8:	000315c4 	.word	0x000315c4
   10dfc:	e000ed00 	.word	0xe000ed00
   10e00:	00033dc7 	.word	0x00033dc7
   10e04:	00033dfa 	.word	0x00033dfa
   10e08:	00033e0d 	.word	0x00033e0d
   10e0c:	00033e25 	.word	0x00033e25
   10e10:	00033e3b 	.word	0x00033e3b
   10e14:	00033e5a 	.word	0x00033e5a
   10e18:	00033ec3 	.word	0x00033ec3
   10e1c:	00033e89 	.word	0x00033e89
   10e20:	00032679 	.word	0x00032679
   10e24:	00033f0d 	.word	0x00033f0d

00010e28 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   10e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e2c:	b086      	sub	sp, #24
   10e2e:	4606      	mov	r6, r0
   10e30:	460d      	mov	r5, r1
   10e32:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   10e34:	2402      	movs	r4, #2
   10e36:	4b3e      	ldr	r3, [pc, #248]	; (10f30 <bus_fault.constprop.0+0x108>)
   10e38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e3c:	617b      	str	r3, [r7, #20]
   10e3e:	483d      	ldr	r0, [pc, #244]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10e40:	613c      	str	r4, [r7, #16]
   10e42:	f107 0210 	add.w	r2, r7, #16
   10e46:	f01a ff97 	bl	2bd78 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   10e4a:	4b3b      	ldr	r3, [pc, #236]	; (10f38 <bus_fault.constprop.0+0x110>)
   10e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e4e:	04d9      	lsls	r1, r3, #19
   10e50:	d509      	bpl.n	10e66 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   10e52:	4b3a      	ldr	r3, [pc, #232]	; (10f3c <bus_fault.constprop.0+0x114>)
   10e54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e58:	e9c7 4304 	strd	r4, r3, [r7, #16]
   10e5c:	4835      	ldr	r0, [pc, #212]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10e5e:	f107 0210 	add.w	r2, r7, #16
   10e62:	f01a ff89 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   10e66:	4b34      	ldr	r3, [pc, #208]	; (10f38 <bus_fault.constprop.0+0x110>)
   10e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10e6a:	051a      	lsls	r2, r3, #20
   10e6c:	d50a      	bpl.n	10e84 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   10e6e:	4b34      	ldr	r3, [pc, #208]	; (10f40 <bus_fault.constprop.0+0x118>)
   10e70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e74:	617b      	str	r3, [r7, #20]
   10e76:	2302      	movs	r3, #2
   10e78:	482e      	ldr	r0, [pc, #184]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10e7a:	613b      	str	r3, [r7, #16]
   10e7c:	f107 0210 	add.w	r2, r7, #16
   10e80:	f01a ff7a 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   10e84:	4c2c      	ldr	r4, [pc, #176]	; (10f38 <bus_fault.constprop.0+0x110>)
   10e86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10e88:	059b      	lsls	r3, r3, #22
   10e8a:	d522      	bpl.n	10ed2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   10e8c:	46e8      	mov	r8, sp
   10e8e:	4b2d      	ldr	r3, [pc, #180]	; (10f44 <bus_fault.constprop.0+0x11c>)
   10e90:	4828      	ldr	r0, [pc, #160]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10e92:	617b      	str	r3, [r7, #20]
   10e94:	2302      	movs	r3, #2
   10e96:	f107 0210 	add.w	r2, r7, #16
   10e9a:	613b      	str	r3, [r7, #16]
   10e9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ea0:	f01a ff6a 	bl	2bd78 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   10ea4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   10ea6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10ea8:	0410      	lsls	r0, r2, #16
   10eaa:	d512      	bpl.n	10ed2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   10eac:	b088      	sub	sp, #32
   10eae:	466a      	mov	r2, sp
   10eb0:	4925      	ldr	r1, [pc, #148]	; (10f48 <bus_fault.constprop.0+0x120>)
   10eb2:	4820      	ldr	r0, [pc, #128]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10eb4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10eb8:	2303      	movs	r3, #3
   10eba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10ebe:	f842 3f10 	str.w	r3, [r2, #16]!
   10ec2:	f01a ff59 	bl	2bd78 <z_log_msg_static_create.constprop.0>
   10ec6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   10ec8:	b11e      	cbz	r6, 10ed2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   10eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   10ed0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   10ed2:	4b19      	ldr	r3, [pc, #100]	; (10f38 <bus_fault.constprop.0+0x110>)
   10ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ed6:	0559      	lsls	r1, r3, #21
   10ed8:	d50a      	bpl.n	10ef0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   10eda:	4b1c      	ldr	r3, [pc, #112]	; (10f4c <bus_fault.constprop.0+0x124>)
   10edc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10ee0:	617b      	str	r3, [r7, #20]
   10ee2:	2302      	movs	r3, #2
   10ee4:	4813      	ldr	r0, [pc, #76]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10ee6:	613b      	str	r3, [r7, #16]
   10ee8:	f107 0210 	add.w	r2, r7, #16
   10eec:	f01a ff44 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   10ef0:	4b11      	ldr	r3, [pc, #68]	; (10f38 <bus_fault.constprop.0+0x110>)
   10ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10ef4:	05d2      	lsls	r2, r2, #23
   10ef6:	d515      	bpl.n	10f24 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   10ef8:	4b15      	ldr	r3, [pc, #84]	; (10f50 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10efa:	617b      	str	r3, [r7, #20]
   10efc:	2302      	movs	r3, #2
   10efe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f02:	480c      	ldr	r0, [pc, #48]	; (10f34 <bus_fault.constprop.0+0x10c>)
   10f04:	613b      	str	r3, [r7, #16]
   10f06:	f107 0210 	add.w	r2, r7, #16
   10f0a:	f01a ff35 	bl	2bd78 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   10f0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10f10:	4a09      	ldr	r2, [pc, #36]	; (10f38 <bus_fault.constprop.0+0x110>)

	return reason;
}
   10f12:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   10f14:	6a93      	ldr	r3, [r2, #40]	; 0x28
   10f16:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   10f1a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   10f1c:	7028      	strb	r0, [r5, #0]
}
   10f1e:	46bd      	mov	sp, r7
   10f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   10f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f26:	049b      	lsls	r3, r3, #18
   10f28:	d5f1      	bpl.n	10f0e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   10f2a:	4b0a      	ldr	r3, [pc, #40]	; (10f54 <bus_fault.constprop.0+0x12c>)
   10f2c:	e7e5      	b.n	10efa <bus_fault.constprop.0+0xd2>
   10f2e:	bf00      	nop
   10f30:	00033f71 	.word	0x00033f71
   10f34:	000315c4 	.word	0x000315c4
   10f38:	e000ed00 	.word	0xe000ed00
   10f3c:	00033f87 	.word	0x00033f87
   10f40:	00033dfa 	.word	0x00033dfa
   10f44:	00033f98 	.word	0x00033f98
   10f48:	00033fb1 	.word	0x00033fb1
   10f4c:	00033fc6 	.word	0x00033fc6
   10f50:	00033fe1 	.word	0x00033fe1
   10f54:	00033e5a 	.word	0x00033e5a

00010f58 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   10f58:	b510      	push	{r4, lr}
   10f5a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   10f5c:	2402      	movs	r4, #2
   10f5e:	4b3a      	ldr	r3, [pc, #232]	; (11048 <usage_fault.constprop.0+0xf0>)
   10f60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f64:	4839      	ldr	r0, [pc, #228]	; (1104c <usage_fault.constprop.0+0xf4>)
   10f66:	aa04      	add	r2, sp, #16
   10f68:	9305      	str	r3, [sp, #20]
   10f6a:	9404      	str	r4, [sp, #16]
   10f6c:	f01a ff04 	bl	2bd78 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   10f70:	4b37      	ldr	r3, [pc, #220]	; (11050 <usage_fault.constprop.0+0xf8>)
   10f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f74:	019b      	lsls	r3, r3, #6
   10f76:	d508      	bpl.n	10f8a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   10f78:	4b36      	ldr	r3, [pc, #216]	; (11054 <usage_fault.constprop.0+0xfc>)
   10f7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f7e:	4833      	ldr	r0, [pc, #204]	; (1104c <usage_fault.constprop.0+0xf4>)
   10f80:	aa04      	add	r2, sp, #16
   10f82:	e9cd 4304 	strd	r4, r3, [sp, #16]
   10f86:	f01a fef7 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   10f8a:	4b31      	ldr	r3, [pc, #196]	; (11050 <usage_fault.constprop.0+0xf8>)
   10f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10f8e:	01dc      	lsls	r4, r3, #7
   10f90:	d509      	bpl.n	10fa6 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   10f92:	4b31      	ldr	r3, [pc, #196]	; (11058 <usage_fault.constprop.0+0x100>)
   10f94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10f98:	9305      	str	r3, [sp, #20]
   10f9a:	2302      	movs	r3, #2
   10f9c:	482b      	ldr	r0, [pc, #172]	; (1104c <usage_fault.constprop.0+0xf4>)
   10f9e:	aa04      	add	r2, sp, #16
   10fa0:	9304      	str	r3, [sp, #16]
   10fa2:	f01a fee9 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   10fa6:	4b2a      	ldr	r3, [pc, #168]	; (11050 <usage_fault.constprop.0+0xf8>)
   10fa8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   10faa:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   10fae:	d009      	beq.n	10fc4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   10fb0:	2402      	movs	r4, #2
   10fb2:	4b2a      	ldr	r3, [pc, #168]	; (1105c <usage_fault.constprop.0+0x104>)
   10fb4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fb8:	4824      	ldr	r0, [pc, #144]	; (1104c <usage_fault.constprop.0+0xf4>)
   10fba:	aa04      	add	r2, sp, #16
   10fbc:	9305      	str	r3, [sp, #20]
   10fbe:	9404      	str	r4, [sp, #16]
   10fc0:	f01a feda 	bl	2bd78 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   10fc4:	4b22      	ldr	r3, [pc, #136]	; (11050 <usage_fault.constprop.0+0xf8>)
   10fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fc8:	0318      	lsls	r0, r3, #12
   10fca:	d509      	bpl.n	10fe0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
   10fcc:	4b24      	ldr	r3, [pc, #144]	; (11060 <usage_fault.constprop.0+0x108>)
   10fce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fd2:	9305      	str	r3, [sp, #20]
   10fd4:	2302      	movs	r3, #2
   10fd6:	481d      	ldr	r0, [pc, #116]	; (1104c <usage_fault.constprop.0+0xf4>)
   10fd8:	aa04      	add	r2, sp, #16
   10fda:	9304      	str	r3, [sp, #16]
   10fdc:	f01a fecc 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   10fe0:	4b1b      	ldr	r3, [pc, #108]	; (11050 <usage_fault.constprop.0+0xf8>)
   10fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10fe4:	0359      	lsls	r1, r3, #13
   10fe6:	d509      	bpl.n	10ffc <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   10fe8:	4b1e      	ldr	r3, [pc, #120]	; (11064 <usage_fault.constprop.0+0x10c>)
   10fea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10fee:	9305      	str	r3, [sp, #20]
   10ff0:	2302      	movs	r3, #2
   10ff2:	4816      	ldr	r0, [pc, #88]	; (1104c <usage_fault.constprop.0+0xf4>)
   10ff4:	aa04      	add	r2, sp, #16
   10ff6:	9304      	str	r3, [sp, #16]
   10ff8:	f01a febe 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   10ffc:	4b14      	ldr	r3, [pc, #80]	; (11050 <usage_fault.constprop.0+0xf8>)
   10ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11000:	039a      	lsls	r2, r3, #14
   11002:	d509      	bpl.n	11018 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   11004:	4b18      	ldr	r3, [pc, #96]	; (11068 <usage_fault.constprop.0+0x110>)
   11006:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1100a:	9305      	str	r3, [sp, #20]
   1100c:	2302      	movs	r3, #2
   1100e:	480f      	ldr	r0, [pc, #60]	; (1104c <usage_fault.constprop.0+0xf4>)
   11010:	aa04      	add	r2, sp, #16
   11012:	9304      	str	r3, [sp, #16]
   11014:	f01a feb0 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   11018:	4b0d      	ldr	r3, [pc, #52]	; (11050 <usage_fault.constprop.0+0xf8>)
   1101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1101c:	03db      	lsls	r3, r3, #15
   1101e:	d509      	bpl.n	11034 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   11020:	4b12      	ldr	r3, [pc, #72]	; (1106c <usage_fault.constprop.0+0x114>)
   11022:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11026:	9305      	str	r3, [sp, #20]
   11028:	2302      	movs	r3, #2
   1102a:	4808      	ldr	r0, [pc, #32]	; (1104c <usage_fault.constprop.0+0xf4>)
   1102c:	aa04      	add	r2, sp, #16
   1102e:	9304      	str	r3, [sp, #16]
   11030:	f01a fea2 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11034:	4a06      	ldr	r2, [pc, #24]	; (11050 <usage_fault.constprop.0+0xf8>)

	return reason;
}
   11036:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   11038:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1103a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1103e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   11042:	6293      	str	r3, [r2, #40]	; 0x28
}
   11044:	b006      	add	sp, #24
   11046:	bd10      	pop	{r4, pc}
   11048:	00033ff9 	.word	0x00033ff9
   1104c:	000315c4 	.word	0x000315c4
   11050:	e000ed00 	.word	0xe000ed00
   11054:	00034011 	.word	0x00034011
   11058:	00034024 	.word	0x00034024
   1105c:	0003403e 	.word	0x0003403e
   11060:	00034068 	.word	0x00034068
   11064:	00034086 	.word	0x00034086
   11068:	000340ab 	.word	0x000340ab
   1106c:	000340c5 	.word	0x000340c5

00011070 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   11070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11074:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   11076:	4b93      	ldr	r3, [pc, #588]	; (112c4 <z_arm_fault+0x254>)
{
   11078:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1107a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
   1107e:	4688      	mov	r8, r1
   11080:	4616      	mov	r6, r2
   11082:	2300      	movs	r3, #0
   11084:	af00      	add	r7, sp, #0
   11086:	f3ca 0908 	ubfx	r9, sl, #0, #9
   1108a:	f383 8811 	msr	BASEPRI, r3
   1108e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   11092:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   11096:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1109a:	d00e      	beq.n	110ba <z_arm_fault+0x4a>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1109c:	498a      	ldr	r1, [pc, #552]	; (112c8 <z_arm_fault+0x258>)
   1109e:	f44f 6384 	mov.w	r3, #1056	; 0x420
   110a2:	4a8a      	ldr	r2, [pc, #552]	; (112cc <z_arm_fault+0x25c>)
   110a4:	488a      	ldr	r0, [pc, #552]	; (112d0 <z_arm_fault+0x260>)
   110a6:	f019 fb18 	bl	2a6da <assert_print>
   110aa:	488a      	ldr	r0, [pc, #552]	; (112d4 <z_arm_fault+0x264>)
   110ac:	f019 fb15 	bl	2a6da <assert_print>
   110b0:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   110b4:	4885      	ldr	r0, [pc, #532]	; (112cc <z_arm_fault+0x25c>)
   110b6:	f019 fb09 	bl	2a6cc <assert_post_action>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   110ba:	f012 0401 	ands.w	r4, r2, #1
   110be:	d1ed      	bne.n	1109c <z_arm_fault+0x2c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   110c0:	0653      	lsls	r3, r2, #25
   110c2:	d404      	bmi.n	110ce <z_arm_fault+0x5e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   110c4:	0710      	lsls	r0, r2, #28
   110c6:	d40f      	bmi.n	110e8 <z_arm_fault+0x78>
			*nested_exc = true;
   110c8:	f04f 0801 	mov.w	r8, #1
   110cc:	e00f      	b.n	110ee <z_arm_fault+0x7e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   110ce:	4b82      	ldr	r3, [pc, #520]	; (112d8 <z_arm_fault+0x268>)
   110d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   110d4:	61fb      	str	r3, [r7, #28]
   110d6:	2302      	movs	r3, #2
   110d8:	4880      	ldr	r0, [pc, #512]	; (112dc <z_arm_fault+0x26c>)
   110da:	61bb      	str	r3, [r7, #24]
   110dc:	f107 0218 	add.w	r2, r7, #24
   110e0:	f01a fe4a 	bl	2bd78 <z_log_msg_static_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   110e4:	0771      	lsls	r1, r6, #29
   110e6:	d500      	bpl.n	110ea <z_arm_fault+0x7a>
			ptr_esf = (z_arch_esf_t *)psp;
   110e8:	4645      	mov	r5, r8
	*nested_exc = false;
   110ea:	f04f 0800 	mov.w	r8, #0
	__ASSERT(esf != NULL,
   110ee:	2d00      	cmp	r5, #0
   110f0:	d0d4      	beq.n	1109c <z_arm_fault+0x2c>
	*recoverable = false;
   110f2:	2300      	movs	r3, #0
   110f4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   110f6:	f1a9 0303 	sub.w	r3, r9, #3
   110fa:	2b09      	cmp	r3, #9
   110fc:	f200 80c1 	bhi.w	11282 <z_arm_fault+0x212>
   11100:	e8df f003 	tbb	[pc, r3]
   11104:	97b7b405 	.word	0x97b7b405
   11108:	bfbfbfbf 	.word	0xbfbfbfbf
   1110c:	babf      	.short	0xbabf
	PR_FAULT_INFO("***** HARD FAULT *****");
   1110e:	46e9      	mov	r9, sp
   11110:	f04f 0a02 	mov.w	sl, #2
   11114:	4b72      	ldr	r3, [pc, #456]	; (112e0 <z_arm_fault+0x270>)
   11116:	f107 0218 	add.w	r2, r7, #24
   1111a:	61fb      	str	r3, [r7, #28]
   1111c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11120:	486e      	ldr	r0, [pc, #440]	; (112dc <z_arm_fault+0x26c>)
   11122:	f8c7 a018 	str.w	sl, [r7, #24]
   11126:	f01a fe27 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1112a:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1112c:	4e65      	ldr	r6, [pc, #404]	; (112c4 <z_arm_fault+0x254>)
	*recoverable = false;
   1112e:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   11130:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11132:	079a      	lsls	r2, r3, #30
   11134:	d50a      	bpl.n	1114c <z_arm_fault+0xdc>
		PR_EXC("  Bus fault on vector table read");
   11136:	4b6b      	ldr	r3, [pc, #428]	; (112e4 <z_arm_fault+0x274>)
		PR_EXC("  Debug event");
   11138:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
   1113c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11140:	4866      	ldr	r0, [pc, #408]	; (112dc <z_arm_fault+0x26c>)
   11142:	f107 0218 	add.w	r2, r7, #24
   11146:	f01a fe17 	bl	2bd78 <z_log_msg_static_create.constprop.0>
}
   1114a:	e042      	b.n	111d2 <z_arm_fault+0x162>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1114c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1114e:	2b00      	cmp	r3, #0
   11150:	da01      	bge.n	11156 <z_arm_fault+0xe6>
		PR_EXC("  Debug event");
   11152:	4b65      	ldr	r3, [pc, #404]	; (112e8 <z_arm_fault+0x278>)
   11154:	e7f0      	b.n	11138 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   11156:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   11158:	005b      	lsls	r3, r3, #1
   1115a:	d57a      	bpl.n	11252 <z_arm_fault+0x1e2>
		PR_EXC("  Fault escalation (see below)");
   1115c:	4b63      	ldr	r3, [pc, #396]	; (112ec <z_arm_fault+0x27c>)
   1115e:	f107 0218 	add.w	r2, r7, #24
   11162:	e9c7 a306 	strd	sl, r3, [r7, #24]
   11166:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1116a:	485c      	ldr	r0, [pc, #368]	; (112dc <z_arm_fault+0x26c>)
   1116c:	f01a fe04 	bl	2bd78 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11170:	6973      	ldr	r3, [r6, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   11172:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   11174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11178:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1117a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1117e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11182:	6973      	ldr	r3, [r6, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   11184:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   11188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1118c:	6173      	str	r3, [r6, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   1118e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11192:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   11196:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1119a:	429a      	cmp	r2, r3
   1119c:	d009      	beq.n	111b2 <z_arm_fault+0x142>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1119e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   111a0:	b2db      	uxtb	r3, r3
   111a2:	2b00      	cmp	r3, #0
   111a4:	d038      	beq.n	11218 <z_arm_fault+0x1a8>
			reason = mem_manage_fault(esf, 1, recoverable);
   111a6:	2001      	movs	r0, #1
   111a8:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   111aa:	f7ff fd85 	bl	10cb8 <mem_manage_fault.constprop.0>
   111ae:	4604      	mov	r4, r0
		break;
   111b0:	e00f      	b.n	111d2 <z_arm_fault+0x162>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   111b2:	b088      	sub	sp, #32
   111b4:	682b      	ldr	r3, [r5, #0]
   111b6:	466a      	mov	r2, sp
   111b8:	494d      	ldr	r1, [pc, #308]	; (112f0 <z_arm_fault+0x280>)
   111ba:	4848      	ldr	r0, [pc, #288]	; (112dc <z_arm_fault+0x26c>)
   111bc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   111c0:	2303      	movs	r3, #3
   111c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   111c6:	f842 3f10 	str.w	r3, [r2, #16]!
   111ca:	f01a fdd5 	bl	2bd78 <z_log_msg_static_create.constprop.0>
   111ce:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
   111d0:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   111d2:	79fb      	ldrb	r3, [r7, #7]
   111d4:	b9e3      	cbnz	r3, 11210 <z_arm_fault+0x1a0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   111d6:	f107 0208 	add.w	r2, r7, #8
   111da:	f105 0620 	add.w	r6, r5, #32
   111de:	4613      	mov	r3, r2
   111e0:	6828      	ldr	r0, [r5, #0]
   111e2:	6869      	ldr	r1, [r5, #4]
   111e4:	3508      	adds	r5, #8
   111e6:	c303      	stmia	r3!, {r0, r1}
   111e8:	42b5      	cmp	r5, r6
   111ea:	461a      	mov	r2, r3
   111ec:	d1f7      	bne.n	111de <z_arm_fault+0x16e>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   111f0:	f1b8 0f00 	cmp.w	r8, #0
   111f4:	d061      	beq.n	112ba <z_arm_fault+0x24a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   111f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   111fa:	b922      	cbnz	r2, 11206 <z_arm_fault+0x196>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   111fc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   11200:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   11204:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   11206:	4620      	mov	r0, r4
   11208:	f107 0108 	add.w	r1, r7, #8
   1120c:	f7ff fbb0 	bl	10970 <z_arm_fatal_error>
}
   11210:	3728      	adds	r7, #40	; 0x28
   11212:	46bd      	mov	sp, r7
   11214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   11218:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1121a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1121e:	d004      	beq.n	1122a <z_arm_fault+0x1ba>
			reason = bus_fault(esf, 1, recoverable);
   11220:	2001      	movs	r0, #1
   11222:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
   11224:	f7ff fe00 	bl	10e28 <bus_fault.constprop.0>
   11228:	e7c1      	b.n	111ae <z_arm_fault+0x13e>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1122a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11230:	d302      	bcc.n	11238 <z_arm_fault+0x1c8>
		reason = usage_fault(esf);
   11232:	f7ff fe91 	bl	10f58 <usage_fault.constprop.0>
   11236:	e7ba      	b.n	111ae <z_arm_fault+0x13e>
			__ASSERT(0,
   11238:	492e      	ldr	r1, [pc, #184]	; (112f4 <z_arm_fault+0x284>)
   1123a:	f240 23f2 	movw	r3, #754	; 0x2f2
   1123e:	4a23      	ldr	r2, [pc, #140]	; (112cc <z_arm_fault+0x25c>)
   11240:	4823      	ldr	r0, [pc, #140]	; (112d0 <z_arm_fault+0x260>)
   11242:	f019 fa4a 	bl	2a6da <assert_print>
   11246:	482c      	ldr	r0, [pc, #176]	; (112f8 <z_arm_fault+0x288>)
   11248:	f019 fa47 	bl	2a6da <assert_print>
   1124c:	f240 21f2 	movw	r1, #754	; 0x2f2
   11250:	e730      	b.n	110b4 <z_arm_fault+0x44>
		__ASSERT(0,
   11252:	4928      	ldr	r1, [pc, #160]	; (112f4 <z_arm_fault+0x284>)
   11254:	f240 23f6 	movw	r3, #758	; 0x2f6
   11258:	4a1c      	ldr	r2, [pc, #112]	; (112cc <z_arm_fault+0x25c>)
   1125a:	481d      	ldr	r0, [pc, #116]	; (112d0 <z_arm_fault+0x260>)
   1125c:	f019 fa3d 	bl	2a6da <assert_print>
   11260:	4826      	ldr	r0, [pc, #152]	; (112fc <z_arm_fault+0x28c>)
   11262:	f019 fa3a 	bl	2a6da <assert_print>
   11266:	f240 21f6 	movw	r1, #758	; 0x2f6
   1126a:	e723      	b.n	110b4 <z_arm_fault+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   1126c:	2000      	movs	r0, #0
   1126e:	1df9      	adds	r1, r7, #7
   11270:	e79b      	b.n	111aa <z_arm_fault+0x13a>
		reason = bus_fault(esf, 0, recoverable);
   11272:	2000      	movs	r0, #0
   11274:	1df9      	adds	r1, r7, #7
   11276:	e7d5      	b.n	11224 <z_arm_fault+0x1b4>
	PR_FAULT_INFO(
   11278:	4b21      	ldr	r3, [pc, #132]	; (11300 <z_arm_fault+0x290>)
   1127a:	61fb      	str	r3, [r7, #28]
   1127c:	2302      	movs	r3, #2
   1127e:	61bb      	str	r3, [r7, #24]
   11280:	e75c      	b.n	1113c <z_arm_fault+0xcc>
	PR_FAULT_INFO("***** %s %d) *****",
   11282:	4a20      	ldr	r2, [pc, #128]	; (11304 <z_arm_fault+0x294>)
   11284:	466e      	mov	r6, sp
   11286:	f41a 7ff8 	tst.w	sl, #496	; 0x1f0
   1128a:	b08a      	sub	sp, #40	; 0x28
   1128c:	4b1e      	ldr	r3, [pc, #120]	; (11308 <z_arm_fault+0x298>)
   1128e:	bf18      	it	ne
   11290:	4613      	movne	r3, r2
   11292:	466a      	mov	r2, sp
   11294:	491d      	ldr	r1, [pc, #116]	; (1130c <z_arm_fault+0x29c>)
   11296:	4811      	ldr	r0, [pc, #68]	; (112dc <z_arm_fault+0x26c>)
   11298:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1129c:	f1a9 0310 	sub.w	r3, r9, #16
   112a0:	61d3      	str	r3, [r2, #28]
   112a2:	f44f 7300 	mov.w	r3, #512	; 0x200
   112a6:	8413      	strh	r3, [r2, #32]
   112a8:	4b19      	ldr	r3, [pc, #100]	; (11310 <z_arm_fault+0x2a0>)
   112aa:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   112ae:	f842 3f10 	str.w	r3, [r2, #16]!
   112b2:	f01a fd61 	bl	2bd78 <z_log_msg_static_create.constprop.0>
   112b6:	46b5      	mov	sp, r6
}
   112b8:	e78b      	b.n	111d2 <z_arm_fault+0x162>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   112ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   112be:	f023 0301 	bic.w	r3, r3, #1
   112c2:	e79f      	b.n	11204 <z_arm_fault+0x194>
   112c4:	e000ed00 	.word	0xe000ed00
   112c8:	0003411e 	.word	0x0003411e
   112cc:	00033e89 	.word	0x00033e89
   112d0:	00032679 	.word	0x00032679
   112d4:	00034131 	.word	0x00034131
   112d8:	0003416f 	.word	0x0003416f
   112dc:	000315c4 	.word	0x000315c4
   112e0:	00034192 	.word	0x00034192
   112e4:	000341a9 	.word	0x000341a9
   112e8:	000341ca 	.word	0x000341ca
   112ec:	000341d8 	.word	0x000341d8
   112f0:	000341f7 	.word	0x000341f7
   112f4:	00037b56 	.word	0x00037b56
   112f8:	00034213 	.word	0x00034213
   112fc:	00034237 	.word	0x00034237
   11300:	00034267 	.word	0x00034267
   11304:	00034105 	.word	0x00034105
   11308:	000340f0 	.word	0x000340f0
   1130c:	0003428b 	.word	0x0003428b
   11310:	01000004 	.word	0x01000004

00011314 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   11314:	4b04      	ldr	r3, [pc, #16]	; (11328 <z_arm_fault_init+0x14>)
   11316:	695a      	ldr	r2, [r3, #20]
   11318:	f042 0210 	orr.w	r2, r2, #16
   1131c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1131e:	695a      	ldr	r2, [r3, #20]
   11320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   11324:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   11326:	4770      	bx	lr
   11328:	e000ed00 	.word	0xe000ed00

0001132c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1132c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   11330:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   11334:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   11336:	4672      	mov	r2, lr
	bl z_arm_fault
   11338:	f7ff fe9a 	bl	11070 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1133c:	bd01      	pop	{r0, pc}
   1133e:	bf00      	nop

00011340 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   11340:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11342:	2120      	movs	r1, #32
   11344:	4803      	ldr	r0, [pc, #12]	; (11354 <z_arm_interrupt_init+0x14>)
   11346:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   11348:	3301      	adds	r3, #1
   1134a:	2b45      	cmp	r3, #69	; 0x45
   1134c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   11350:	d1f9      	bne.n	11346 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   11352:	4770      	bx	lr
   11354:	e000e100 	.word	0xe000e100

00011358 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   11358:	2000      	movs	r0, #0
    msr CONTROL, r0
   1135a:	f380 8814 	msr	CONTROL, r0
    isb
   1135e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   11362:	2000      	movs	r0, #0
    msr MSPLIM, r0
   11364:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   11368:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1136c:	f7fc ff0a 	bl	e184 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   11370:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   11372:	490e      	ldr	r1, [pc, #56]	; (113ac <__start+0x54>)
    str r0, [r1]
   11374:	6008      	str	r0, [r1, #0]
    dsb
   11376:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1137a:	480d      	ldr	r0, [pc, #52]	; (113b0 <__start+0x58>)
    msr msp, r0
   1137c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   11380:	f000 f83e 	bl	11400 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11384:	2020      	movs	r0, #32
    msr BASEPRI, r0
   11386:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1138a:	480a      	ldr	r0, [pc, #40]	; (113b4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   11390:	1840      	adds	r0, r0, r1
    msr PSP, r0
   11392:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   11396:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1139a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1139c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1139e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   113a2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   113a6:	f7ff fbaf 	bl	10b08 <z_arm_prep_c>
   113aa:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   113ac:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   113b0:	200343f0 	.word	0x200343f0
    ldr r0, =z_interrupt_stacks
   113b4:	200336b0 	.word	0x200336b0

000113b8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   113b8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   113bc:	4905      	ldr	r1, [pc, #20]	; (113d4 <sys_arch_reboot+0x1c>)
   113be:	4b06      	ldr	r3, [pc, #24]	; (113d8 <sys_arch_reboot+0x20>)
   113c0:	68ca      	ldr	r2, [r1, #12]
   113c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   113c6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   113c8:	60cb      	str	r3, [r1, #12]
   113ca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   113ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   113d0:	e7fd      	b.n	113ce <sys_arch_reboot+0x16>
   113d2:	bf00      	nop
   113d4:	e000ed00 	.word	0xe000ed00
   113d8:	05fa0004 	.word	0x05fa0004

000113dc <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   113dc:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   113de:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   113e0:	4906      	ldr	r1, [pc, #24]	; (113fc <z_arm_clear_arm_mpu_config+0x20>)
   113e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   113e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   113ea:	4293      	cmp	r3, r2
   113ec:	db00      	blt.n	113f0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   113ee:	4770      	bx	lr
  mpu->RNR = rnr;
   113f0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   113f4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   113f8:	3301      	adds	r3, #1
   113fa:	e7f6      	b.n	113ea <z_arm_clear_arm_mpu_config+0xe>
   113fc:	e000ed00 	.word	0xe000ed00

00011400 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   11400:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   11402:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   11404:	2400      	movs	r4, #0
   11406:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1140a:	f7ff ffe7 	bl	113dc <z_arm_clear_arm_mpu_config>
   1140e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   11410:	f04f 30ff 	mov.w	r0, #4294967295
   11414:	4a0c      	ldr	r2, [pc, #48]	; (11448 <z_arm_init_arch_hw_at_boot+0x48>)
   11416:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1141a:	3301      	adds	r3, #1
   1141c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   1141e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   11422:	d1f8      	bne.n	11416 <z_arm_init_arch_hw_at_boot+0x16>
   11424:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11426:	f04f 30ff 	mov.w	r0, #4294967295
   1142a:	4a07      	ldr	r2, [pc, #28]	; (11448 <z_arm_init_arch_hw_at_boot+0x48>)
   1142c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11430:	3301      	adds	r3, #1
   11432:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   11434:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   11438:	d1f8      	bne.n	1142c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1143a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1143c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11440:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   11444:	bd10      	pop	{r4, pc}
   11446:	bf00      	nop
   11448:	e000e100 	.word	0xe000e100

0001144c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1144c:	4b08      	ldr	r3, [pc, #32]	; (11470 <z_impl_k_thread_abort+0x24>)
   1144e:	689b      	ldr	r3, [r3, #8]
   11450:	4283      	cmp	r3, r0
   11452:	d10b      	bne.n	1146c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11454:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   11458:	b143      	cbz	r3, 1146c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1145a:	4b06      	ldr	r3, [pc, #24]	; (11474 <z_impl_k_thread_abort+0x28>)
   1145c:	685a      	ldr	r2, [r3, #4]
   1145e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   11462:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   11464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   11466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1146a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   1146c:	f015 bfea 	b.w	27444 <z_thread_abort>
   11470:	20021a88 	.word	0x20021a88
   11474:	e000ed00 	.word	0xe000ed00

00011478 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   11478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1147a:	4c09      	ldr	r4, [pc, #36]	; (114a0 <z_arm_configure_static_mpu_regions+0x28>)
   1147c:	4a09      	ldr	r2, [pc, #36]	; (114a4 <z_arm_configure_static_mpu_regions+0x2c>)
   1147e:	4623      	mov	r3, r4
   11480:	2101      	movs	r1, #1
   11482:	4809      	ldr	r0, [pc, #36]	; (114a8 <z_arm_configure_static_mpu_regions+0x30>)
   11484:	f000 f92a 	bl	116dc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11488:	2300      	movs	r3, #0
   1148a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1148c:	4b07      	ldr	r3, [pc, #28]	; (114ac <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1148e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   11490:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11492:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   11494:	9301      	str	r3, [sp, #4]
   11496:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   11498:	f000 f944 	bl	11724 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1149c:	b004      	add	sp, #16
   1149e:	bd10      	pop	{r4, pc}
   114a0:	20070000 	.word	0x20070000
   114a4:	20008000 	.word	0x20008000
   114a8:	00031e48 	.word	0x00031e48
   114ac:	20008e40 	.word	0x20008e40

000114b0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   114b0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
   114b2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   114b4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   114b6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
   114ba:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   114be:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   114c0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   114c2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   114c4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   114c8:	4905      	ldr	r1, [pc, #20]	; (114e0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   114ca:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   114ce:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   114d2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   114d6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   114da:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   114de:	bd10      	pop	{r4, pc}
   114e0:	e000ed00 	.word	0xe000ed00

000114e4 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   114e4:	b580      	push	{r7, lr}
   114e6:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   114e8:	b088      	sub	sp, #32
   114ea:	466a      	mov	r2, sp
   114ec:	4b07      	ldr	r3, [pc, #28]	; (1150c <region_allocate_and_init.part.0+0x28>)
   114ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   114f2:	2303      	movs	r3, #3
   114f4:	f842 3f10 	str.w	r3, [r2, #16]!
   114f8:	2300      	movs	r3, #0
   114fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   114fe:	4804      	ldr	r0, [pc, #16]	; (11510 <region_allocate_and_init.part.0+0x2c>)
   11500:	f7fd f9d6 	bl	e8b0 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   11504:	f06f 0015 	mvn.w	r0, #21
   11508:	46bd      	mov	sp, r7
   1150a:	bd80      	pop	{r7, pc}
   1150c:	000342a2 	.word	0x000342a2
   11510:	000315ac 	.word	0x000315ac

00011514 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11518:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1151a:	4606      	mov	r6, r0
   1151c:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11520:	b087      	sub	sp, #28
	MPU->RNR = rnr;
   11522:	4d5f      	ldr	r5, [pc, #380]	; (116a0 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   11524:	af00      	add	r7, sp, #0
   11526:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
   11528:	687b      	ldr	r3, [r7, #4]
   1152a:	4599      	cmp	r9, r3
   1152c:	da35      	bge.n	1159a <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
   1152e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   11532:	f1b8 0f00 	cmp.w	r8, #0
   11536:	d054      	beq.n	115e2 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
   11538:	f1b8 0f1f 	cmp.w	r8, #31
   1153c:	d91b      	bls.n	11576 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
   1153e:	f018 0f1f 	tst.w	r8, #31
   11542:	d118      	bne.n	11576 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
   11544:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   11548:	f01b 0f1f 	tst.w	fp, #31
   1154c:	d113      	bne.n	11576 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1154e:	4658      	mov	r0, fp
   11550:	f01a fc17 	bl	2bd82 <arm_cmse_mpu_region_get>
   11554:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11556:	eb08 000b 	add.w	r0, r8, fp
   1155a:	3801      	subs	r0, #1
   1155c:	f01a fc11 	bl	2bd82 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11560:	4582      	cmp	sl, r0
   11562:	d01f      	beq.n	115a4 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   11564:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   11568:	466c      	mov	r4, sp
   1156a:	b088      	sub	sp, #32
   1156c:	466a      	mov	r2, sp
   1156e:	494d      	ldr	r1, [pc, #308]	; (116a4 <mpu_configure_regions_and_partition.constprop.0+0x190>)
   11570:	e9c2 1a05 	strd	r1, sl, [r2, #20]
   11574:	e005      	b.n	11582 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   11576:	466c      	mov	r4, sp
   11578:	b088      	sub	sp, #32
   1157a:	466a      	mov	r2, sp
   1157c:	4b4a      	ldr	r3, [pc, #296]	; (116a8 <mpu_configure_regions_and_partition.constprop.0+0x194>)
   1157e:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
   11582:	2303      	movs	r3, #3
   11584:	f842 3f10 	str.w	r3, [r2, #16]!
   11588:	2300      	movs	r3, #0
   1158a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1158e:	4847      	ldr	r0, [pc, #284]	; (116ac <mpu_configure_regions_and_partition.constprop.0+0x198>)
   11590:	f7fd f98e 	bl	e8b0 <z_impl_z_log_msg_static_create>
   11594:	46a5      	mov	sp, r4
			return -EINVAL;
   11596:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1159a:	4620      	mov	r0, r4
   1159c:	371c      	adds	r7, #28
   1159e:	46bd      	mov	sp, r7
   115a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   115a4:	f11a 0f16 	cmn.w	sl, #22
   115a8:	d0de      	beq.n	11568 <mpu_configure_regions_and_partition.constprop.0+0x54>
   115aa:	4554      	cmp	r4, sl
   115ac:	dddc      	ble.n	11568 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
   115ae:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   115b2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   115b6:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
   115ba:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   115be:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   115c2:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   115c6:	e9d6 2100 	ldrd	r2, r1, [r6]
   115ca:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
   115cc:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   115ce:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
   115d2:	d11e      	bne.n	11612 <mpu_configure_regions_and_partition.constprop.0+0xfe>
   115d4:	45d8      	cmp	r8, fp
   115d6:	d108      	bne.n	115ea <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
   115d8:	4631      	mov	r1, r6
   115da:	fa5f f08a 	uxtb.w	r0, sl
   115de:	f01a fbd9 	bl	2bd94 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   115e2:	f109 0901 	add.w	r9, r9, #1
   115e6:	360c      	adds	r6, #12
   115e8:	e79e      	b.n	11528 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
   115ea:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   115ee:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   115f2:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   115f6:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   115fa:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
   115fc:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
   115fe:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   11602:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   11604:	f01a fbc6 	bl	2bd94 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11608:	f110 0f16 	cmn.w	r0, #22
   1160c:	d0c3      	beq.n	11596 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
   1160e:	1c44      	adds	r4, r0, #1
   11610:	e7e7      	b.n	115e2 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
   11612:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
   11614:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
   11616:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   11618:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1161c:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   11620:	d108      	bne.n	11634 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
   11622:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   11626:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11628:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1162c:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1162e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   11632:	e7e7      	b.n	11604 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
   11634:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   11638:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1163c:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
   1163e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   11642:	4631      	mov	r1, r6
   11644:	f01a fba6 	bl	2bd94 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   11648:	f110 0f16 	cmn.w	r0, #22
   1164c:	d0a3      	beq.n	11596 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
   1164e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
   11652:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   11656:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   11658:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
   1165c:	f362 0304 	bfi	r3, r2, #0, #5
   11660:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
   11662:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   11666:	7c3a      	ldrb	r2, [r7, #16]
   11668:	085b      	lsrs	r3, r3, #1
   1166a:	f363 1247 	bfi	r2, r3, #5, #3
   1166e:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
   11670:	e9d6 3200 	ldrd	r3, r2, [r6]
   11674:	4413      	add	r3, r2
   11676:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   11678:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   1167c:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   1167e:	4443      	add	r3, r8
   11680:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
   11684:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   11686:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   1168a:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
   1168c:	617b      	str	r3, [r7, #20]
   1168e:	d902      	bls.n	11696 <mpu_configure_regions_and_partition.constprop.0+0x182>
   11690:	f7ff ff28 	bl	114e4 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
   11694:	e7b8      	b.n	11608 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
   11696:	f107 0108 	add.w	r1, r7, #8
   1169a:	f7ff ff09 	bl	114b0 <region_init>
   1169e:	e7b6      	b.n	1160e <mpu_configure_regions_and_partition.constprop.0+0xfa>
   116a0:	e000ed00 	.word	0xe000ed00
   116a4:	000342eb 	.word	0x000342eb
   116a8:	000342c8 	.word	0x000342c8
   116ac:	000315ac 	.word	0x000315ac

000116b0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   116b0:	2205      	movs	r2, #5
   116b2:	4b04      	ldr	r3, [pc, #16]	; (116c4 <arm_core_mpu_enable+0x14>)
   116b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   116b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116bc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   116c0:	4770      	bx	lr
   116c2:	bf00      	nop
   116c4:	e000ed00 	.word	0xe000ed00

000116c8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   116c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   116cc:	2200      	movs	r2, #0
   116ce:	4b02      	ldr	r3, [pc, #8]	; (116d8 <arm_core_mpu_disable+0x10>)
   116d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   116d4:	4770      	bx	lr
   116d6:	bf00      	nop
   116d8:	e000ed00 	.word	0xe000ed00

000116dc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   116dc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   116de:	4d0c      	ldr	r5, [pc, #48]	; (11710 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   116e0:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   116e2:	782a      	ldrb	r2, [r5, #0]
   116e4:	f7ff ff16 	bl	11514 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   116e8:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   116ea:	3016      	adds	r0, #22
   116ec:	d10f      	bne.n	1170e <arm_core_mpu_configure_static_mpu_regions+0x32>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   116ee:	f44f 738d 	mov.w	r3, #282	; 0x11a
   116f2:	4a08      	ldr	r2, [pc, #32]	; (11714 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   116f4:	4908      	ldr	r1, [pc, #32]	; (11718 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   116f6:	4809      	ldr	r0, [pc, #36]	; (1171c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   116f8:	f018 ffef 	bl	2a6da <assert_print>
   116fc:	4621      	mov	r1, r4
   116fe:	4808      	ldr	r0, [pc, #32]	; (11720 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   11700:	f018 ffeb 	bl	2a6da <assert_print>
   11704:	f44f 718d 	mov.w	r1, #282	; 0x11a
   11708:	4802      	ldr	r0, [pc, #8]	; (11714 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1170a:	f018 ffdf 	bl	2a6cc <assert_post_action>
			regions_num);
	}
}
   1170e:	bd38      	pop	{r3, r4, r5, pc}
   11710:	20022317 	.word	0x20022317
   11714:	0003430e 	.word	0x0003430e
   11718:	00037b56 	.word	0x00037b56
   1171c:	00032679 	.word	0x00032679
   11720:	00034345 	.word	0x00034345

00011724 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   11724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11728:	4e31      	ldr	r6, [pc, #196]	; (117f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   1172a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1172c:	4605      	mov	r5, r0
   1172e:	f04f 0800 	mov.w	r8, #0
   11732:	46b3      	mov	fp, r6
	MPU->RNR = rnr;
   11734:	4f2f      	ldr	r7, [pc, #188]	; (117f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   11736:	45c8      	cmp	r8, r9
   11738:	db02      	blt.n	11740 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1173a:	b003      	add	sp, #12
   1173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   11740:	f8d5 a004 	ldr.w	sl, [r5, #4]
   11744:	f1ba 0f00 	cmp.w	sl, #0
   11748:	d04c      	beq.n	117e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1174a:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1174c:	4608      	mov	r0, r1
   1174e:	9101      	str	r1, [sp, #4]
   11750:	f01a fb17 	bl	2bd82 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11754:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   11756:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   11758:	eb0a 0001 	add.w	r0, sl, r1
   1175c:	3801      	subs	r0, #1
   1175e:	f01a fb10 	bl	2bd82 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   11762:	4284      	cmp	r4, r0
   11764:	f04f 0214 	mov.w	r2, #20
   11768:	4b23      	ldr	r3, [pc, #140]	; (117f8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   1176a:	d015      	beq.n	11798 <arm_core_mpu_mark_areas_for_dynamic_regions+0x74>
		dyn_reg_info[i].index =
   1176c:	fb02 f308 	mul.w	r3, r2, r8
   11770:	f06f 0215 	mvn.w	r2, #21
   11774:	f84b 2003 	str.w	r2, [fp, r3]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   11778:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1177c:	4a1f      	ldr	r2, [pc, #124]	; (117fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   1177e:	4920      	ldr	r1, [pc, #128]	; (11800 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   11780:	4820      	ldr	r0, [pc, #128]	; (11804 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe0>)
   11782:	f018 ffaa 	bl	2a6da <assert_print>
   11786:	4649      	mov	r1, r9
   11788:	481f      	ldr	r0, [pc, #124]	; (11808 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe4>)
   1178a:	f018 ffa6 	bl	2a6da <assert_print>
   1178e:	f44f 7195 	mov.w	r1, #298	; 0x12a
   11792:	481a      	ldr	r0, [pc, #104]	; (117fc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   11794:	f018 ff9a 	bl	2a6cc <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   11798:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1179c:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1179e:	d0eb      	beq.n	11778 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   117a0:	7819      	ldrb	r1, [r3, #0]
   117a2:	42a1      	cmp	r1, r4
   117a4:	dde8      	ble.n	11778 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = mpu_get_rbar() &
   117a6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   117aa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   117ae:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   117b2:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   117b6:	f100 0108 	add.w	r1, r0, #8
   117ba:	7b00      	ldrb	r0, [r0, #12]
   117bc:	f364 0004 	bfi	r0, r4, #0, #5
   117c0:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   117c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   117c6:	790c      	ldrb	r4, [r1, #4]
   117c8:	0840      	lsrs	r0, r0, #1
   117ca:	f360 1447 	bfi	r4, r0, #5, #3
   117ce:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   117d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   117d4:	f021 011f 	bic.w	r1, r1, #31
   117d8:	6071      	str	r1, [r6, #4]
	return MPU->RLAR;
   117da:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   117de:	f021 011f 	bic.w	r1, r1, #31
   117e2:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   117e4:	f108 0801 	add.w	r8, r8, #1
   117e8:	3614      	adds	r6, #20
   117ea:	350c      	adds	r5, #12
   117ec:	e7a3      	b.n	11736 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   117ee:	bf00      	nop
   117f0:	20021534 	.word	0x20021534
   117f4:	e000ed00 	.word	0xe000ed00
   117f8:	20022317 	.word	0x20022317
   117fc:	0003430e 	.word	0x0003430e
   11800:	00037b56 	.word	0x00037b56
   11804:	00032679 	.word	0x00032679
   11808:	00034371 	.word	0x00034371

0001180c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1180c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1180e:	4d1f      	ldr	r5, [pc, #124]	; (1188c <z_arm_mpu_init+0x80>)
   11810:	682c      	ldr	r4, [r5, #0]
   11812:	2c08      	cmp	r4, #8
   11814:	d910      	bls.n	11838 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   11816:	f240 1351 	movw	r3, #337	; 0x151
   1181a:	4a1d      	ldr	r2, [pc, #116]	; (11890 <z_arm_mpu_init+0x84>)
   1181c:	491d      	ldr	r1, [pc, #116]	; (11894 <z_arm_mpu_init+0x88>)
   1181e:	481e      	ldr	r0, [pc, #120]	; (11898 <z_arm_mpu_init+0x8c>)
   11820:	f018 ff5b 	bl	2a6da <assert_print>
   11824:	4621      	mov	r1, r4
   11826:	2208      	movs	r2, #8
   11828:	481c      	ldr	r0, [pc, #112]	; (1189c <z_arm_mpu_init+0x90>)
   1182a:	f018 ff56 	bl	2a6da <assert_print>
   1182e:	f240 1151 	movw	r1, #337	; 0x151
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   11832:	4817      	ldr	r0, [pc, #92]	; (11890 <z_arm_mpu_init+0x84>)
   11834:	f018 ff4a 	bl	2a6cc <assert_post_action>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11838:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   1183a:	f7ff ff45 	bl	116c8 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   1183e:	4b18      	ldr	r3, [pc, #96]	; (118a0 <z_arm_mpu_init+0x94>)
   11840:	4a18      	ldr	r2, [pc, #96]	; (118a4 <z_arm_mpu_init+0x98>)
   11842:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11846:	4284      	cmp	r4, r0
   11848:	d117      	bne.n	1187a <z_arm_mpu_init+0x6e>
	static_regions_num = mpu_config.num_regions;
   1184a:	4b17      	ldr	r3, [pc, #92]	; (118a8 <z_arm_mpu_init+0x9c>)
   1184c:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   1184e:	f7ff ff2f 	bl	116b0 <arm_core_mpu_enable>
	__ASSERT(
   11852:	4b13      	ldr	r3, [pc, #76]	; (118a0 <z_arm_mpu_init+0x94>)
   11854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   11858:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1185c:	2b08      	cmp	r3, #8
   1185e:	d013      	beq.n	11888 <z_arm_mpu_init+0x7c>
   11860:	4912      	ldr	r1, [pc, #72]	; (118ac <z_arm_mpu_init+0xa0>)
   11862:	f240 13bb 	movw	r3, #443	; 0x1bb
   11866:	4a0a      	ldr	r2, [pc, #40]	; (11890 <z_arm_mpu_init+0x84>)
   11868:	480b      	ldr	r0, [pc, #44]	; (11898 <z_arm_mpu_init+0x8c>)
   1186a:	f018 ff36 	bl	2a6da <assert_print>
   1186e:	4810      	ldr	r0, [pc, #64]	; (118b0 <z_arm_mpu_init+0xa4>)
   11870:	f018 ff33 	bl	2a6da <assert_print>
   11874:	f240 11bb 	movw	r1, #443	; 0x1bb
   11878:	e7db      	b.n	11832 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1187a:	6869      	ldr	r1, [r5, #4]
   1187c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   11880:	f7ff fe16 	bl	114b0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   11884:	3001      	adds	r0, #1
   11886:	e7de      	b.n	11846 <z_arm_mpu_init+0x3a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   11888:	2000      	movs	r0, #0
   1188a:	bd38      	pop	{r3, r4, r5, pc}
   1188c:	00031e54 	.word	0x00031e54
   11890:	0003430e 	.word	0x0003430e
   11894:	00037b56 	.word	0x00037b56
   11898:	00032679 	.word	0x00032679
   1189c:	000343a0 	.word	0x000343a0
   118a0:	e000ed00 	.word	0xe000ed00
   118a4:	0044ffaa 	.word	0x0044ffaa
   118a8:	20022317 	.word	0x20022317
   118ac:	000343d4 	.word	0x000343d4
   118b0:	00034424 	.word	0x00034424

000118b4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   118b4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   118b6:	4b0b      	ldr	r3, [pc, #44]	; (118e4 <malloc_prepare+0x30>)
   118b8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   118bc:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
   118c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   118c4:	d20c      	bcs.n	118e0 <malloc_prepare+0x2c>
   118c6:	4908      	ldr	r1, [pc, #32]	; (118e8 <malloc_prepare+0x34>)
   118c8:	2381      	movs	r3, #129	; 0x81
   118ca:	4a08      	ldr	r2, [pc, #32]	; (118ec <malloc_prepare+0x38>)
   118cc:	4808      	ldr	r0, [pc, #32]	; (118f0 <malloc_prepare+0x3c>)
   118ce:	f018 ff04 	bl	2a6da <assert_print>
   118d2:	4808      	ldr	r0, [pc, #32]	; (118f4 <malloc_prepare+0x40>)
   118d4:	f018 ff01 	bl	2a6da <assert_print>
   118d8:	2181      	movs	r1, #129	; 0x81
   118da:	4804      	ldr	r0, [pc, #16]	; (118ec <malloc_prepare+0x38>)
   118dc:	f018 fef6 	bl	2a6cc <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   118e0:	2000      	movs	r0, #0
   118e2:	bd08      	pop	{r3, pc}
   118e4:	200385c0 	.word	0x200385c0
   118e8:	00034475 	.word	0x00034475
   118ec:	00034445 	.word	0x00034445
   118f0:	00032679 	.word	0x00032679
   118f4:	000344bc 	.word	0x000344bc

000118f8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   118f8:	4b01      	ldr	r3, [pc, #4]	; (11900 <__stdout_hook_install+0x8>)
   118fa:	6018      	str	r0, [r3, #0]
}
   118fc:	4770      	bx	lr
   118fe:	bf00      	nop
   11900:	20008474 	.word	0x20008474

00011904 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   11904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11906:	4606      	mov	r6, r0
   11908:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1190a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   1190c:	4f06      	ldr	r7, [pc, #24]	; (11928 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   1190e:	42ac      	cmp	r4, r5
   11910:	da08      	bge.n	11924 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   11912:	683b      	ldr	r3, [r7, #0]
   11914:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   11916:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   11918:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   1191a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1191e:	d001      	beq.n	11924 <z_impl_zephyr_read_stdin+0x20>
   11920:	280d      	cmp	r0, #13
   11922:	d1f4      	bne.n	1190e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   11924:	4620      	mov	r0, r4
   11926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11928:	20008470 	.word	0x20008470

0001192c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   1192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1192e:	460d      	mov	r5, r1
   11930:	4f09      	ldr	r7, [pc, #36]	; (11958 <z_impl_zephyr_write_stdout+0x2c>)
   11932:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   11934:	f1c0 0401 	rsb	r4, r0, #1
   11938:	19a3      	adds	r3, r4, r6
   1193a:	429d      	cmp	r5, r3
   1193c:	dc01      	bgt.n	11942 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   1193e:	4628      	mov	r0, r5
   11940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   11942:	7873      	ldrb	r3, [r6, #1]
   11944:	2b0a      	cmp	r3, #10
   11946:	d102      	bne.n	1194e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   11948:	200d      	movs	r0, #13
   1194a:	683b      	ldr	r3, [r7, #0]
   1194c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   1194e:	683b      	ldr	r3, [r7, #0]
   11950:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   11954:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   11956:	e7ef      	b.n	11938 <z_impl_zephyr_write_stdout+0xc>
   11958:	20008474 	.word	0x20008474

0001195c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   1195c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1195e:	2105      	movs	r1, #5
   11960:	4801      	ldr	r0, [pc, #4]	; (11968 <_exit+0xc>)
   11962:	f7ff ffe3 	bl	1192c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   11966:	e7fe      	b.n	11966 <_exit+0xa>
   11968:	00034543 	.word	0x00034543

0001196c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   1196c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   1196e:	4c07      	ldr	r4, [pc, #28]	; (1198c <_sbrk+0x20>)
   11970:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   11972:	18c2      	adds	r2, r0, r3
   11974:	4806      	ldr	r0, [pc, #24]	; (11990 <_sbrk+0x24>)
   11976:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1197a:	f501 21e0 	add.w	r1, r1, #458752	; 0x70000
   1197e:	428a      	cmp	r2, r1
		heap_sz += count;
   11980:	bf36      	itet	cc
   11982:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   11984:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   11988:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
   1198a:	bd10      	pop	{r4, pc}
   1198c:	20021548 	.word	0x20021548
   11990:	200385c0 	.word	0x200385c0

00011994 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   11994:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11996:	4604      	mov	r4, r0
   11998:	b958      	cbnz	r0, 119b2 <__retarget_lock_init_recursive+0x1e>
   1199a:	4911      	ldr	r1, [pc, #68]	; (119e0 <__retarget_lock_init_recursive+0x4c>)
   1199c:	f240 137b 	movw	r3, #379	; 0x17b
   119a0:	4a10      	ldr	r2, [pc, #64]	; (119e4 <__retarget_lock_init_recursive+0x50>)
   119a2:	4811      	ldr	r0, [pc, #68]	; (119e8 <__retarget_lock_init_recursive+0x54>)
   119a4:	f018 fe99 	bl	2a6da <assert_print>
   119a8:	f240 117b 	movw	r1, #379	; 0x17b
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   119ac:	480d      	ldr	r0, [pc, #52]	; (119e4 <__retarget_lock_init_recursive+0x50>)
   119ae:	f018 fe8d 	bl	2a6cc <assert_post_action>
	*lock = malloc(sizeof(struct k_mutex));
   119b2:	2014      	movs	r0, #20
   119b4:	f016 fe8e 	bl	286d4 <malloc>
   119b8:	6020      	str	r0, [r4, #0]
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   119ba:	b960      	cbnz	r0, 119d6 <__retarget_lock_init_recursive+0x42>
   119bc:	490b      	ldr	r1, [pc, #44]	; (119ec <__retarget_lock_init_recursive+0x58>)
   119be:	f240 1383 	movw	r3, #387	; 0x183
   119c2:	4a08      	ldr	r2, [pc, #32]	; (119e4 <__retarget_lock_init_recursive+0x50>)
   119c4:	4808      	ldr	r0, [pc, #32]	; (119e8 <__retarget_lock_init_recursive+0x54>)
   119c6:	f018 fe88 	bl	2a6da <assert_print>
   119ca:	4809      	ldr	r0, [pc, #36]	; (119f0 <__retarget_lock_init_recursive+0x5c>)
   119cc:	f018 fe85 	bl	2a6da <assert_print>
   119d0:	f240 1183 	movw	r1, #387	; 0x183
   119d4:	e7ea      	b.n	119ac <__retarget_lock_init_recursive+0x18>

	k_mutex_init((struct k_mutex *)*lock);
}
   119d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   119da:	f01e bbe1 	b.w	301a0 <z_impl_k_mutex_init>
   119de:	bf00      	nop
   119e0:	0003454a 	.word	0x0003454a
   119e4:	00034445 	.word	0x00034445
   119e8:	00032679 	.word	0x00032679
   119ec:	00034549 	.word	0x00034549
   119f0:	00034585 	.word	0x00034585

000119f4 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   119f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   119f6:	b958      	cbnz	r0, 11a10 <__retarget_lock_acquire_recursive+0x1c>
   119f8:	4909      	ldr	r1, [pc, #36]	; (11a20 <__retarget_lock_acquire_recursive+0x2c>)
   119fa:	480a      	ldr	r0, [pc, #40]	; (11a24 <__retarget_lock_acquire_recursive+0x30>)
   119fc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   11a00:	4a09      	ldr	r2, [pc, #36]	; (11a28 <__retarget_lock_acquire_recursive+0x34>)
   11a02:	f018 fe6a 	bl	2a6da <assert_print>
   11a06:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   11a0a:	4807      	ldr	r0, [pc, #28]	; (11a28 <__retarget_lock_acquire_recursive+0x34>)
   11a0c:	f018 fe5e 	bl	2a6cc <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   11a10:	f04f 32ff 	mov.w	r2, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   11a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a18:	f04f 33ff 	mov.w	r3, #4294967295
   11a1c:	f013 bb82 	b.w	25124 <z_impl_k_mutex_lock>
   11a20:	0003454a 	.word	0x0003454a
   11a24:	00032679 	.word	0x00032679
   11a28:	00034445 	.word	0x00034445

00011a2c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   11a2c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
   11a2e:	b958      	cbnz	r0, 11a48 <__retarget_lock_release_recursive+0x1c>
   11a30:	4907      	ldr	r1, [pc, #28]	; (11a50 <__retarget_lock_release_recursive+0x24>)
   11a32:	4808      	ldr	r0, [pc, #32]	; (11a54 <__retarget_lock_release_recursive+0x28>)
   11a34:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   11a38:	4a07      	ldr	r2, [pc, #28]	; (11a58 <__retarget_lock_release_recursive+0x2c>)
   11a3a:	f018 fe4e 	bl	2a6da <assert_print>
   11a3e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   11a42:	4805      	ldr	r0, [pc, #20]	; (11a58 <__retarget_lock_release_recursive+0x2c>)
   11a44:	f018 fe42 	bl	2a6cc <assert_post_action>
	k_mutex_unlock((struct k_mutex *)lock);
}
   11a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   11a4c:	f013 bc3a 	b.w	252c4 <z_impl_k_mutex_unlock>
   11a50:	0003454a 	.word	0x0003454a
   11a54:	00032679 	.word	0x00032679
   11a58:	00034445 	.word	0x00034445

00011a5c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   11a5c:	b508      	push	{r3, lr}
   11a5e:	211d      	movs	r1, #29
   11a60:	4804      	ldr	r0, [pc, #16]	; (11a74 <__chk_fail+0x18>)
   11a62:	f7ff ff63 	bl	1192c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   11a66:	4040      	eors	r0, r0
   11a68:	f380 8811 	msr	BASEPRI, r0
   11a6c:	f04f 0003 	mov.w	r0, #3
   11a70:	df02      	svc	2
	CODE_UNREACHABLE;
   11a72:	bf00      	nop
   11a74:	000345a8 	.word	0x000345a8

00011a78 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   11a78:	2000      	movs	r0, #0
   11a7a:	4b02      	ldr	r3, [pc, #8]	; (11a84 <remoteproc_mgr_boot+0xc>)
   11a7c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   11a80:	4770      	bx	lr
   11a82:	bf00      	nop
   11a84:	40005000 	.word	0x40005000

00011a88 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   11a88:	4b0e      	ldr	r3, [pc, #56]	; (11ac4 <bt_hex+0x3c>)
   11a8a:	2940      	cmp	r1, #64	; 0x40
   11a8c:	bf28      	it	cs
   11a8e:	2140      	movcs	r1, #64	; 0x40
{
   11a90:	b570      	push	{r4, r5, r6, lr}
   11a92:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   11a94:	4c0c      	ldr	r4, [pc, #48]	; (11ac8 <bt_hex+0x40>)
   11a96:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   11a98:	42b0      	cmp	r0, r6
   11a9a:	f103 0302 	add.w	r3, r3, #2
   11a9e:	d104      	bne.n	11aaa <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   11aa0:	2300      	movs	r3, #0
   11aa2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   11aa6:	4807      	ldr	r0, [pc, #28]	; (11ac4 <bt_hex+0x3c>)
   11aa8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   11aaa:	7802      	ldrb	r2, [r0, #0]
   11aac:	0912      	lsrs	r2, r2, #4
   11aae:	5ca2      	ldrb	r2, [r4, r2]
   11ab0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   11ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
   11ab8:	f002 020f 	and.w	r2, r2, #15
   11abc:	5ca2      	ldrb	r2, [r4, r2]
   11abe:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   11ac2:	e7e9      	b.n	11a98 <bt_hex+0x10>
   11ac4:	20022336 	.word	0x20022336
   11ac8:	00034608 	.word	0x00034608

00011acc <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   11acc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   11ace:	7803      	ldrb	r3, [r0, #0]
   11ad0:	b08b      	sub	sp, #44	; 0x2c
   11ad2:	4604      	mov	r4, r0
   11ad4:	ad07      	add	r5, sp, #28
   11ad6:	2b03      	cmp	r3, #3
   11ad8:	d821      	bhi.n	11b1e <bt_addr_le_str+0x52>
   11ada:	e8df f003 	tbb	[pc, r3]
   11ade:	1a02      	.short	0x1a02
   11ae0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   11ae2:	4912      	ldr	r1, [pc, #72]	; (11b2c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   11ae4:	4628      	mov	r0, r5
   11ae6:	f01e fec1 	bl	3086c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11aea:	9505      	str	r5, [sp, #20]
   11aec:	7863      	ldrb	r3, [r4, #1]
   11aee:	211e      	movs	r1, #30
   11af0:	9304      	str	r3, [sp, #16]
   11af2:	78a3      	ldrb	r3, [r4, #2]
   11af4:	4a0e      	ldr	r2, [pc, #56]	; (11b30 <bt_addr_le_str+0x64>)
   11af6:	9303      	str	r3, [sp, #12]
   11af8:	78e3      	ldrb	r3, [r4, #3]
   11afa:	480e      	ldr	r0, [pc, #56]	; (11b34 <bt_addr_le_str+0x68>)
   11afc:	9302      	str	r3, [sp, #8]
   11afe:	7923      	ldrb	r3, [r4, #4]
   11b00:	9301      	str	r3, [sp, #4]
   11b02:	7963      	ldrb	r3, [r4, #5]
   11b04:	9300      	str	r3, [sp, #0]
   11b06:	79a3      	ldrb	r3, [r4, #6]
   11b08:	f018 fc32 	bl	2a370 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   11b0c:	4809      	ldr	r0, [pc, #36]	; (11b34 <bt_addr_le_str+0x68>)
   11b0e:	b00b      	add	sp, #44	; 0x2c
   11b10:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   11b12:	4909      	ldr	r1, [pc, #36]	; (11b38 <bt_addr_le_str+0x6c>)
   11b14:	e7e6      	b.n	11ae4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   11b16:	4909      	ldr	r1, [pc, #36]	; (11b3c <bt_addr_le_str+0x70>)
   11b18:	e7e4      	b.n	11ae4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   11b1a:	4909      	ldr	r1, [pc, #36]	; (11b40 <bt_addr_le_str+0x74>)
   11b1c:	e7e2      	b.n	11ae4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11b1e:	210a      	movs	r1, #10
   11b20:	4628      	mov	r0, r5
   11b22:	4a08      	ldr	r2, [pc, #32]	; (11b44 <bt_addr_le_str+0x78>)
   11b24:	f018 fc24 	bl	2a370 <snprintk>
		break;
   11b28:	e7df      	b.n	11aea <bt_addr_le_str+0x1e>
   11b2a:	bf00      	nop
   11b2c:	0003274d 	.word	0x0003274d
   11b30:	0003276f 	.word	0x0003276f
   11b34:	20022318 	.word	0x20022318
   11b38:	00032754 	.word	0x00032754
   11b3c:	0003275b 	.word	0x0003275b
   11b40:	00032765 	.word	0x00032765
   11b44:	00036260 	.word	0x00036260

00011b48 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   11b48:	b590      	push	{r4, r7, lr}
   11b4a:	b087      	sub	sp, #28
	int err;
	LOG_INF("Saving ID");
   11b4c:	466c      	mov	r4, sp
{
   11b4e:	af00      	add	r7, sp, #0
	LOG_INF("Saving ID");
   11b50:	4b12      	ldr	r3, [pc, #72]	; (11b9c <save_id+0x54>)
   11b52:	617b      	str	r3, [r7, #20]
   11b54:	2302      	movs	r3, #2
   11b56:	613b      	str	r3, [r7, #16]
   11b58:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11b5c:	4810      	ldr	r0, [pc, #64]	; (11ba0 <save_id+0x58>)
   11b5e:	f107 0210 	add.w	r2, r7, #16
   11b62:	2300      	movs	r3, #0
   11b64:	f7fc fea4 	bl	e8b0 <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   11b68:	490e      	ldr	r1, [pc, #56]	; (11ba4 <save_id+0x5c>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   11b6a:	480f      	ldr	r0, [pc, #60]	; (11ba8 <save_id+0x60>)
   11b6c:	79ca      	ldrb	r2, [r1, #7]
   11b6e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   11b72:	f7fe f937 	bl	fde4 <settings_save_one>
	if (err) {
   11b76:	b170      	cbz	r0, 11b96 <save_id+0x4e>
		LOG_ERR("Failed to save ID (err %d)", err);
   11b78:	b088      	sub	sp, #32
   11b7a:	466a      	mov	r2, sp
   11b7c:	4b0b      	ldr	r3, [pc, #44]	; (11bac <save_id+0x64>)
   11b7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11b82:	2303      	movs	r3, #3
   11b84:	f842 3f10 	str.w	r3, [r2, #16]!
   11b88:	2300      	movs	r3, #0
   11b8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11b8e:	4804      	ldr	r0, [pc, #16]	; (11ba0 <save_id+0x58>)
   11b90:	f7fc fe8e 	bl	e8b0 <z_impl_z_log_msg_static_create>
   11b94:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   11b96:	371c      	adds	r7, #28
   11b98:	46bd      	mov	sp, r7
   11b9a:	bd90      	pop	{r4, r7, pc}
   11b9c:	00034620 	.word	0x00034620
   11ba0:	0003153c 	.word	0x0003153c
   11ba4:	20008000 	.word	0x20008000
   11ba8:	0003462a 	.word	0x0003462a
   11bac:	00034630 	.word	0x00034630

00011bb0 <set_setting>:
{
   11bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bb4:	4604      	mov	r4, r0
   11bb6:	4617      	mov	r7, r2
   11bb8:	4698      	mov	r8, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11bba:	4e29      	ldr	r6, [pc, #164]	; (11c60 <set_setting+0xb0>)
   11bbc:	b088      	sub	sp, #32
   11bbe:	e8d6 3faf 	lda	r3, [r6]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11bc2:	07d9      	lsls	r1, r3, #31
   11bc4:	d529      	bpl.n	11c1a <set_setting+0x6a>
	if (!name) {
   11bc6:	b968      	cbnz	r0, 11be4 <set_setting+0x34>
		LOG_ERR("Insufficient number of arguments");
   11bc8:	4b26      	ldr	r3, [pc, #152]	; (11c64 <set_setting+0xb4>)
   11bca:	9307      	str	r3, [sp, #28]
   11bcc:	2302      	movs	r3, #2
   11bce:	9306      	str	r3, [sp, #24]
   11bd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11bd4:	4603      	mov	r3, r0
   11bd6:	aa06      	add	r2, sp, #24
   11bd8:	4823      	ldr	r0, [pc, #140]	; (11c68 <set_setting+0xb8>)
   11bda:	f7fc fe69 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -ENOENT;
   11bde:	f06f 0001 	mvn.w	r0, #1
   11be2:	e01b      	b.n	11c1c <set_setting+0x6c>
	len = settings_name_next(name, &next);
   11be4:	a901      	add	r1, sp, #4
   11be6:	f019 fb9a 	bl	2b31e <settings_name_next>
	if (!strncmp(name, "id", len)) {
   11bea:	4920      	ldr	r1, [pc, #128]	; (11c6c <set_setting+0xbc>)
	len = settings_name_next(name, &next);
   11bec:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   11bee:	4620      	mov	r0, r4
   11bf0:	f01e fe55 	bl	3089e <strncmp>
   11bf4:	4603      	mov	r3, r0
   11bf6:	2800      	cmp	r0, #0
   11bf8:	d1f1      	bne.n	11bde <set_setting+0x2e>
   11bfa:	e8d6 2faf 	lda	r2, [r6]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   11bfe:	f3c2 05c0 	ubfx	r5, r2, #3, #1
   11c02:	0712      	lsls	r2, r2, #28
   11c04:	d50d      	bpl.n	11c22 <set_setting+0x72>
			LOG_WRN("Ignoring identities stored in flash");
   11c06:	4a1a      	ldr	r2, [pc, #104]	; (11c70 <set_setting+0xc0>)
   11c08:	9207      	str	r2, [sp, #28]
   11c0a:	2202      	movs	r2, #2
   11c0c:	9206      	str	r2, [sp, #24]
   11c0e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c12:	4815      	ldr	r0, [pc, #84]	; (11c68 <set_setting+0xb8>)
   11c14:	aa06      	add	r2, sp, #24
   11c16:	f7fc fe4b 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return 0;
   11c1a:	2000      	movs	r0, #0
}
   11c1c:	b008      	add	sp, #32
   11c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   11c22:	f1a6 04cc 	sub.w	r4, r6, #204	; 0xcc
   11c26:	2207      	movs	r2, #7
   11c28:	4621      	mov	r1, r4
   11c2a:	4640      	mov	r0, r8
   11c2c:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
   11c2e:	2806      	cmp	r0, #6
   11c30:	d810      	bhi.n	11c54 <set_setting+0xa4>
				LOG_ERR("Invalid length ID address in storage");
   11c32:	4b10      	ldr	r3, [pc, #64]	; (11c74 <set_setting+0xc4>)
   11c34:	9307      	str	r3, [sp, #28]
   11c36:	2302      	movs	r3, #2
   11c38:	9306      	str	r3, [sp, #24]
   11c3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11c3e:	462b      	mov	r3, r5
   11c40:	4809      	ldr	r0, [pc, #36]	; (11c68 <set_setting+0xb8>)
   11c42:	aa06      	add	r2, sp, #24
   11c44:	f7fc fe34 	bl	e8b0 <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   11c48:	f846 5ccc 	str.w	r5, [r6, #-204]
			bt_dev.id_count = 0U;
   11c4c:	71e5      	strb	r5, [r4, #7]
			(void)memset(bt_dev.id_addr, 0,
   11c4e:	f8c4 5003 	str.w	r5, [r4, #3]
			bt_dev.id_count = 0U;
   11c52:	e7e2      	b.n	11c1a <set_setting+0x6a>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   11c54:	2307      	movs	r3, #7
   11c56:	fbb0 f0f3 	udiv	r0, r0, r3
   11c5a:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   11c5c:	e7dd      	b.n	11c1a <set_setting+0x6a>
   11c5e:	bf00      	nop
   11c60:	200080cc 	.word	0x200080cc
   11c64:	0003464b 	.word	0x0003464b
   11c68:	0003153c 	.word	0x0003153c
   11c6c:	00032762 	.word	0x00032762
   11c70:	0003466c 	.word	0x0003466c
   11c74:	00034690 	.word	0x00034690

00011c78 <bt_settings_encode_key>:
{
   11c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c7c:	b088      	sub	sp, #32
   11c7e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   11c82:	799c      	ldrb	r4, [r3, #6]
   11c84:	795d      	ldrb	r5, [r3, #5]
   11c86:	791e      	ldrb	r6, [r3, #4]
   11c88:	78df      	ldrb	r7, [r3, #3]
   11c8a:	f893 c002 	ldrb.w	ip, [r3, #2]
   11c8e:	f893 e001 	ldrb.w	lr, [r3, #1]
   11c92:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   11c94:	f1b8 0f00 	cmp.w	r8, #0
   11c98:	d00e      	beq.n	11cb8 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   11c9a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   11c9e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   11ca2:	4613      	mov	r3, r2
   11ca4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11ca8:	e9cd 4500 	strd	r4, r5, [sp]
   11cac:	4a08      	ldr	r2, [pc, #32]	; (11cd0 <bt_settings_encode_key+0x58>)
   11cae:	f018 fb5f 	bl	2a370 <snprintk>
}
   11cb2:	b008      	add	sp, #32
   11cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   11cb8:	e9cd e305 	strd	lr, r3, [sp, #20]
   11cbc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   11cc0:	4613      	mov	r3, r2
   11cc2:	e9cd 5601 	strd	r5, r6, [sp, #4]
   11cc6:	4a03      	ldr	r2, [pc, #12]	; (11cd4 <bt_settings_encode_key+0x5c>)
   11cc8:	9400      	str	r4, [sp, #0]
   11cca:	f018 fb51 	bl	2a370 <snprintk>
}
   11cce:	e7f0      	b.n	11cb2 <bt_settings_encode_key+0x3a>
   11cd0:	000346b5 	.word	0x000346b5
   11cd4:	000346d9 	.word	0x000346d9

00011cd8 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   11cd8:	4801      	ldr	r0, [pc, #4]	; (11ce0 <bt_settings_save_id+0x8>)
   11cda:	f013 bff3 	b.w	25cc4 <k_work_submit>
   11cde:	bf00      	nop
   11ce0:	20008478 	.word	0x20008478

00011ce4 <commit_settings>:
}

static int commit_settings(void)
{
   11ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ce8:	4d1d      	ldr	r5, [pc, #116]	; (11d60 <commit_settings+0x7c>)
   11cea:	b086      	sub	sp, #24
   11cec:	e8d5 3faf 	lda	r3, [r5]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   11cf0:	f013 0f01 	tst.w	r3, #1
   11cf4:	462f      	mov	r7, r5
   11cf6:	d031      	beq.n	11d5c <commit_settings+0x78>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   11cf8:	f815 6cc5 	ldrb.w	r6, [r5, #-197]
   11cfc:	f1a5 08cc 	sub.w	r8, r5, #204	; 0xcc
   11d00:	b9d6      	cbnz	r6, 11d38 <commit_settings+0x54>
		err = bt_setup_public_id_addr();
   11d02:	f001 ffc5 	bl	13c90 <bt_setup_public_id_addr>
		if (err) {
   11d06:	4604      	mov	r4, r0
   11d08:	b170      	cbz	r0, 11d28 <commit_settings+0x44>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   11d0a:	4b16      	ldr	r3, [pc, #88]	; (11d64 <commit_settings+0x80>)
   11d0c:	9305      	str	r3, [sp, #20]
   11d0e:	2302      	movs	r3, #2
   11d10:	9304      	str	r3, [sp, #16]
   11d12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11d16:	4633      	mov	r3, r6
   11d18:	4813      	ldr	r0, [pc, #76]	; (11d68 <commit_settings+0x84>)
   11d1a:	aa04      	add	r2, sp, #16
   11d1c:	f7fc fdc8 	bl	e8b0 <z_impl_z_log_msg_static_create>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   11d20:	4620      	mov	r0, r4
   11d22:	b006      	add	sp, #24
   11d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   11d28:	f898 6007 	ldrb.w	r6, [r8, #7]
   11d2c:	b926      	cbnz	r6, 11d38 <commit_settings+0x54>
		err = bt_setup_random_id_addr();
   11d2e:	f002 f813 	bl	13d58 <bt_setup_random_id_addr>
		if (err) {
   11d32:	4604      	mov	r4, r0
   11d34:	2800      	cmp	r0, #0
   11d36:	d1e8      	bne.n	11d0a <commit_settings+0x26>
   11d38:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11d3c:	075a      	lsls	r2, r3, #29
   11d3e:	d401      	bmi.n	11d44 <commit_settings+0x60>
		bt_finalize_init();
   11d40:	f001 fbae 	bl	134a0 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d44:	e8d7 3fef 	ldaex	r3, [r7]
   11d48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   11d4c:	e8c7 2fe1 	stlex	r1, r2, [r7]
   11d50:	2900      	cmp	r1, #0
   11d52:	d1f7      	bne.n	11d44 <commit_settings+0x60>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   11d54:	03db      	lsls	r3, r3, #15
   11d56:	d501      	bpl.n	11d5c <commit_settings+0x78>
		bt_settings_save_id();
   11d58:	f7ff ffbe 	bl	11cd8 <bt_settings_save_id>
		return 0;
   11d5c:	2400      	movs	r4, #0
   11d5e:	e7df      	b.n	11d20 <commit_settings+0x3c>
   11d60:	200080cc 	.word	0x200080cc
   11d64:	000346fa 	.word	0x000346fa
   11d68:	0003153c 	.word	0x0003153c

00011d6c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   11d6c:	b5b0      	push	{r4, r5, r7, lr}
   11d6e:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   11d70:	f7fe f9ca 	bl	10108 <settings_subsys_init>
	if (err) {
   11d74:	4604      	mov	r4, r0
   11d76:	b178      	cbz	r0, 11d98 <bt_settings_init+0x2c>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   11d78:	466d      	mov	r5, sp
   11d7a:	b088      	sub	sp, #32
   11d7c:	466a      	mov	r2, sp
   11d7e:	4b08      	ldr	r3, [pc, #32]	; (11da0 <bt_settings_init+0x34>)
   11d80:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11d84:	2303      	movs	r3, #3
   11d86:	f842 3f10 	str.w	r3, [r2, #16]!
   11d8a:	2300      	movs	r3, #0
   11d8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11d90:	4804      	ldr	r0, [pc, #16]	; (11da4 <bt_settings_init+0x38>)
   11d92:	f7fc fd8d 	bl	e8b0 <z_impl_z_log_msg_static_create>
   11d96:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   11d98:	4620      	mov	r0, r4
   11d9a:	46bd      	mov	sp, r7
   11d9c:	bdb0      	pop	{r4, r5, r7, pc}
   11d9e:	bf00      	nop
   11da0:	0003471e 	.word	0x0003471e
   11da4:	0003153c 	.word	0x0003153c

00011da8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   11da8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11daa:	2400      	movs	r4, #0

	k_work_queue_init(&bt_long_wq);
   11dac:	4d09      	ldr	r5, [pc, #36]	; (11dd4 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11dae:	4b0a      	ldr	r3, [pc, #40]	; (11dd8 <long_wq_init+0x30>)
{
   11db0:	b085      	sub	sp, #20
	k_work_queue_init(&bt_long_wq);
   11db2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   11db4:	9302      	str	r3, [sp, #8]
   11db6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   11db8:	f013 ff8a 	bl	25cd0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   11dbc:	ab02      	add	r3, sp, #8
   11dbe:	4628      	mov	r0, r5
   11dc0:	9300      	str	r3, [sp, #0]
   11dc2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   11dc6:	230a      	movs	r3, #10
   11dc8:	4904      	ldr	r1, [pc, #16]	; (11ddc <long_wq_init+0x34>)
   11dca:	f013 ff9b 	bl	25d04 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   11dce:	4620      	mov	r0, r4
   11dd0:	b005      	add	sp, #20
   11dd2:	bd30      	pop	{r4, r5, pc}
   11dd4:	20009a98 	.word	0x20009a98
   11dd8:	00034752 	.word	0x00034752
   11ddc:	20032288 	.word	0x20032288

00011de0 <bt_long_wq_schedule>:
{
   11de0:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   11de2:	4801      	ldr	r0, [pc, #4]	; (11de8 <bt_long_wq_schedule+0x8>)
   11de4:	f014 b8b0 	b.w	25f48 <k_work_schedule_for_queue>
   11de8:	20009a98 	.word	0x20009a98

00011dec <bt_long_wq_reschedule>:
{
   11dec:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   11dee:	4801      	ldr	r0, [pc, #4]	; (11df4 <bt_long_wq_reschedule+0x8>)
   11df0:	f014 b926 	b.w	26040 <k_work_reschedule_for_queue>
   11df4:	20009a98 	.word	0x20009a98

00011df8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   11df8:	7803      	ldrb	r3, [r0, #0]
{
   11dfa:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   11dfc:	2b01      	cmp	r3, #1
   11dfe:	d013      	beq.n	11e28 <uuid_to_uuid128+0x30>
   11e00:	2b02      	cmp	r3, #2
   11e02:	d027      	beq.n	11e54 <uuid_to_uuid128+0x5c>
   11e04:	b97b      	cbnz	r3, 11e26 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   11e06:	460a      	mov	r2, r1
   11e08:	4b18      	ldr	r3, [pc, #96]	; (11e6c <uuid_to_uuid128+0x74>)
   11e0a:	f103 0410 	add.w	r4, r3, #16
   11e0e:	f853 5b04 	ldr.w	r5, [r3], #4
   11e12:	42a3      	cmp	r3, r4
   11e14:	f842 5b04 	str.w	r5, [r2], #4
   11e18:	d1f9      	bne.n	11e0e <uuid_to_uuid128+0x16>
   11e1a:	781b      	ldrb	r3, [r3, #0]
   11e1c:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   11e1e:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
   11e20:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   11e22:	0a1b      	lsrs	r3, r3, #8
   11e24:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   11e26:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   11e28:	460a      	mov	r2, r1
   11e2a:	4b10      	ldr	r3, [pc, #64]	; (11e6c <uuid_to_uuid128+0x74>)
   11e2c:	f103 0410 	add.w	r4, r3, #16
   11e30:	f853 5b04 	ldr.w	r5, [r3], #4
   11e34:	42a3      	cmp	r3, r4
   11e36:	f842 5b04 	str.w	r5, [r2], #4
   11e3a:	d1f9      	bne.n	11e30 <uuid_to_uuid128+0x38>
   11e3c:	781b      	ldrb	r3, [r3, #0]
   11e3e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   11e40:	6843      	ldr	r3, [r0, #4]
   11e42:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   11e46:	734b      	strb	r3, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   11e48:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   11e4a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   11e4c:	0a1b      	lsrs	r3, r3, #8
   11e4e:	738a      	strb	r2, [r1, #14]
   11e50:	740b      	strb	r3, [r1, #16]
}
   11e52:	e7e8      	b.n	11e26 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11e54:	f100 0310 	add.w	r3, r0, #16
   11e58:	f850 2b04 	ldr.w	r2, [r0], #4
   11e5c:	4298      	cmp	r0, r3
   11e5e:	f841 2b04 	str.w	r2, [r1], #4
   11e62:	d1f9      	bne.n	11e58 <uuid_to_uuid128+0x60>
   11e64:	7803      	ldrb	r3, [r0, #0]
   11e66:	700b      	strb	r3, [r1, #0]
   11e68:	e7dd      	b.n	11e26 <uuid_to_uuid128+0x2e>
   11e6a:	bf00      	nop
   11e6c:	0003475b 	.word	0x0003475b

00011e70 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   11e70:	b538      	push	{r3, r4, r5, lr}
   11e72:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e74:	2d01      	cmp	r5, #1
{
   11e76:	4610      	mov	r0, r2
   11e78:	4619      	mov	r1, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   11e7a:	d010      	beq.n	11e9e <bt_buf_get_rx+0x2e>
   11e7c:	2d03      	cmp	r5, #3
   11e7e:	d01a      	beq.n	11eb6 <bt_buf_get_rx+0x46>
   11e80:	2d05      	cmp	r5, #5
   11e82:	d018      	beq.n	11eb6 <bt_buf_get_rx+0x46>
   11e84:	490e      	ldr	r1, [pc, #56]	; (11ec0 <bt_buf_get_rx+0x50>)
   11e86:	233d      	movs	r3, #61	; 0x3d
   11e88:	4a0e      	ldr	r2, [pc, #56]	; (11ec4 <bt_buf_get_rx+0x54>)
   11e8a:	480f      	ldr	r0, [pc, #60]	; (11ec8 <bt_buf_get_rx+0x58>)
   11e8c:	f018 fc25 	bl	2a6da <assert_print>
   11e90:	480e      	ldr	r0, [pc, #56]	; (11ecc <bt_buf_get_rx+0x5c>)
   11e92:	f018 fc22 	bl	2a6da <assert_print>
   11e96:	213d      	movs	r1, #61	; 0x3d
   11e98:	480a      	ldr	r0, [pc, #40]	; (11ec4 <bt_buf_get_rx+0x54>)
   11e9a:	f018 fc17 	bl	2a6cc <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11e9e:	480c      	ldr	r0, [pc, #48]	; (11ed0 <bt_buf_get_rx+0x60>)
   11ea0:	f01c f8a7 	bl	2dff2 <net_buf_alloc_fixed>
   11ea4:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   11ea6:	b120      	cbz	r0, 11eb2 <bt_buf_get_rx+0x42>
	net_buf_simple_reserve(&buf->b, reserve);
   11ea8:	2101      	movs	r1, #1
   11eaa:	300c      	adds	r0, #12
   11eac:	f009 fa6a 	bl	1b384 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11eb0:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   11eb2:	4620      	mov	r0, r4
   11eb4:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_alloc_fixed(pool, timeout);
   11eb6:	4602      	mov	r2, r0
   11eb8:	460b      	mov	r3, r1
   11eba:	4806      	ldr	r0, [pc, #24]	; (11ed4 <bt_buf_get_rx+0x64>)
   11ebc:	e7f0      	b.n	11ea0 <bt_buf_get_rx+0x30>
   11ebe:	bf00      	nop
   11ec0:	0003479b 	.word	0x0003479b
   11ec4:	0003476c 	.word	0x0003476c
   11ec8:	00032679 	.word	0x00032679
   11ecc:	000347e0 	.word	0x000347e0
   11ed0:	20008d70 	.word	0x20008d70
   11ed4:	20008cd4 	.word	0x20008cd4

00011ed8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   11ed8:	b510      	push	{r4, lr}
   11eda:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   11edc:	490a      	ldr	r1, [pc, #40]	; (11f08 <bt_buf_get_cmd_complete+0x30>)
{
   11ede:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   11ee0:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   11ee4:	b920      	cbnz	r0, 11ef0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   11ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11eea:	2001      	movs	r0, #1
   11eec:	f7ff bfc0 	b.w	11e70 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   11ef0:	f009 fb9e 	bl	1b630 <net_buf_ref>
   11ef4:	2101      	movs	r1, #1
		buf->len = 0U;
   11ef6:	2300      	movs	r3, #0
		buf = net_buf_ref(bt_dev.sent_cmd);
   11ef8:	4604      	mov	r4, r0
   11efa:	7601      	strb	r1, [r0, #24]
		buf->len = 0U;
   11efc:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   11efe:	300c      	adds	r0, #12
   11f00:	f009 fa40 	bl	1b384 <net_buf_simple_reserve>
}
   11f04:	4620      	mov	r0, r4
   11f06:	bd10      	pop	{r4, pc}
   11f08:	20008000 	.word	0x20008000

00011f0c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   11f0c:	b570      	push	{r4, r5, r6, lr}
   11f0e:	4604      	mov	r4, r0
	switch (evt) {
   11f10:	2c0f      	cmp	r4, #15
{
   11f12:	460d      	mov	r5, r1
   11f14:	4610      	mov	r0, r2
   11f16:	4619      	mov	r1, r3
	switch (evt) {
   11f18:	d805      	bhi.n	11f26 <bt_buf_get_evt+0x1a>
   11f1a:	2c0d      	cmp	r4, #13
   11f1c:	d90d      	bls.n	11f3a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   11f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   11f22:	f7ff bfd9 	b.w	11ed8 <bt_buf_get_cmd_complete>
	switch (evt) {
   11f26:	2c13      	cmp	r4, #19
   11f28:	d107      	bne.n	11f3a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   11f2a:	480c      	ldr	r0, [pc, #48]	; (11f5c <bt_buf_get_evt+0x50>)
   11f2c:	f01c f861 	bl	2dff2 <net_buf_alloc_fixed>
			if (buf) {
   11f30:	4604      	mov	r4, r0
   11f32:	b938      	cbnz	r0, 11f44 <bt_buf_get_evt+0x38>
{
   11f34:	2400      	movs	r4, #0
}
   11f36:	4620      	mov	r0, r4
   11f38:	bd70      	pop	{r4, r5, r6, pc}
   11f3a:	4602      	mov	r2, r0
   11f3c:	460b      	mov	r3, r1
		if (discardable) {
   11f3e:	b145      	cbz	r5, 11f52 <bt_buf_get_evt+0x46>
   11f40:	4807      	ldr	r0, [pc, #28]	; (11f60 <bt_buf_get_evt+0x54>)
   11f42:	e7f3      	b.n	11f2c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   11f44:	2101      	movs	r1, #1
   11f46:	300c      	adds	r0, #12
   11f48:	f009 fa1c 	bl	1b384 <net_buf_simple_reserve>
   11f4c:	2301      	movs	r3, #1
   11f4e:	7623      	strb	r3, [r4, #24]
}
   11f50:	e7f1      	b.n	11f36 <bt_buf_get_evt+0x2a>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f52:	2001      	movs	r0, #1
}
   11f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   11f58:	f7ff bf8a 	b.w	11e70 <bt_buf_get_rx>
   11f5c:	20008e0c 	.word	0x20008e0c
   11f60:	20008d3c 	.word	0x20008d3c

00011f64 <hci_disconn_complete_prio>:
{
   11f64:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   11f66:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   11f68:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   11f6c:	781b      	ldrb	r3, [r3, #0]
   11f6e:	b963      	cbnz	r3, 11f8a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   11f70:	4620      	mov	r0, r4
   11f72:	f002 ffa7 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   11f76:	4605      	mov	r5, r0
   11f78:	b940      	cbnz	r0, 11f8c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   11f7a:	4b08      	ldr	r3, [pc, #32]	; (11f9c <hci_disconn_complete_prio+0x38>)
   11f7c:	881a      	ldrh	r2, [r3, #0]
   11f7e:	b922      	cbnz	r2, 11f8a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   11f80:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   11f84:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   11f88:	8018      	strh	r0, [r3, #0]
}
   11f8a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   11f8c:	2101      	movs	r1, #1
   11f8e:	f002 ffa1 	bl	14ed4 <bt_conn_set_state>
	bt_conn_unref(conn);
   11f92:	4628      	mov	r0, r5
}
   11f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   11f98:	f002 bf64 	b.w	14e64 <bt_conn_unref>
   11f9c:	20021b12 	.word	0x20021b12

00011fa0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11fa0:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11fa2:	4c08      	ldr	r4, [pc, #32]	; (11fc4 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   11fa4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   11fa6:	2205      	movs	r2, #5
   11fa8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11fac:	f003 fa80 	bl	154b0 <bt_conn_lookup_state_le>
		if (!conn) {
   11fb0:	b938      	cbnz	r0, 11fc2 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11fb2:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   11fb6:	2204      	movs	r2, #4
}
   11fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   11fbc:	4902      	ldr	r1, [pc, #8]	; (11fc8 <find_pending_connect.part.0+0x28>)
   11fbe:	f003 ba77 	b.w	154b0 <bt_conn_lookup_state_le>
}
   11fc2:	bd10      	pop	{r4, pc}
   11fc4:	20008000 	.word	0x20008000
   11fc8:	000345ee 	.word	0x000345ee

00011fcc <hci_data_buf_overflow>:
{
   11fcc:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11fce:	68c3      	ldr	r3, [r0, #12]
{
   11fd0:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   11fd2:	b088      	sub	sp, #32
   11fd4:	466a      	mov	r2, sp
   11fd6:	781b      	ldrb	r3, [r3, #0]
   11fd8:	4906      	ldr	r1, [pc, #24]	; (11ff4 <hci_data_buf_overflow+0x28>)
   11fda:	4807      	ldr	r0, [pc, #28]	; (11ff8 <hci_data_buf_overflow+0x2c>)
   11fdc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   11fe0:	2303      	movs	r3, #3
   11fe2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11fe6:	f842 3f10 	str.w	r3, [r2, #16]!
   11fea:	f01a f800 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   11fee:	46bd      	mov	sp, r7
   11ff0:	bd80      	pop	{r7, pc}
   11ff2:	bf00      	nop
   11ff4:	00034800 	.word	0x00034800
   11ff8:	000314fc 	.word	0x000314fc

00011ffc <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   11ffc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   11ffe:	4b06      	ldr	r3, [pc, #24]	; (12018 <le_conn_param_neg_reply.part.0+0x1c>)
   12000:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12004:	9305      	str	r3, [sp, #20]
   12006:	2302      	movs	r3, #2
   12008:	4804      	ldr	r0, [pc, #16]	; (1201c <le_conn_param_neg_reply.part.0+0x20>)
   1200a:	aa04      	add	r2, sp, #16
   1200c:	9304      	str	r3, [sp, #16]
   1200e:	f019 ffee 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   12012:	b007      	add	sp, #28
   12014:	f85d fb04 	ldr.w	pc, [sp], #4
   12018:	00034828 	.word	0x00034828
   1201c:	000314fc 	.word	0x000314fc

00012020 <rx_queue_put>:
{
   12020:	b598      	push	{r3, r4, r7, lr}
   12022:	4601      	mov	r1, r0
   12024:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   12026:	480d      	ldr	r0, [pc, #52]	; (1205c <rx_queue_put+0x3c>)
   12028:	f009 f9d2 	bl	1b3d0 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1202c:	490c      	ldr	r1, [pc, #48]	; (12060 <rx_queue_put+0x40>)
   1202e:	480d      	ldr	r0, [pc, #52]	; (12064 <rx_queue_put+0x44>)
   12030:	f01e f94e 	bl	302d0 <k_work_submit_to_queue>
	if (err < 0) {
   12034:	2800      	cmp	r0, #0
   12036:	da0e      	bge.n	12056 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   12038:	466c      	mov	r4, sp
   1203a:	b088      	sub	sp, #32
   1203c:	466a      	mov	r2, sp
   1203e:	4b0a      	ldr	r3, [pc, #40]	; (12068 <rx_queue_put+0x48>)
   12040:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12044:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12048:	2303      	movs	r3, #3
   1204a:	4808      	ldr	r0, [pc, #32]	; (1206c <rx_queue_put+0x4c>)
   1204c:	f842 3f10 	str.w	r3, [r2, #16]!
   12050:	f019 ffcd 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12054:	46a5      	mov	sp, r4
}
   12056:	46bd      	mov	sp, r7
   12058:	bd98      	pop	{r3, r4, r7, pc}
   1205a:	bf00      	nop
   1205c:	2000813c 	.word	0x2000813c
   12060:	200084c4 	.word	0x200084c4
   12064:	20009bc8 	.word	0x20009bc8
   12068:	00034842 	.word	0x00034842
   1206c:	000314fc 	.word	0x000314fc

00012070 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12070:	460b      	mov	r3, r1
   12072:	b5b0      	push	{r4, r5, r7, lr}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   12074:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   12076:	af00      	add	r7, sp, #0
   12078:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1207a:	4629      	mov	r1, r5
   1207c:	68d8      	ldr	r0, [r3, #12]
   1207e:	f7ff fd03 	bl	11a88 <bt_hex>
   12082:	b08a      	sub	sp, #40	; 0x28
   12084:	466a      	mov	r2, sp
   12086:	4b09      	ldr	r3, [pc, #36]	; (120ac <handle_event.part.0+0x3c>)
   12088:	e9c2 5007 	strd	r5, r0, [r2, #28]
   1208c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12090:	f240 4302 	movw	r3, #1026	; 0x402
   12094:	8493      	strh	r3, [r2, #36]	; 0x24
   12096:	4b06      	ldr	r3, [pc, #24]	; (120b0 <handle_event.part.0+0x40>)
   12098:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   1209c:	4805      	ldr	r0, [pc, #20]	; (120b4 <handle_event.part.0+0x44>)
   1209e:	f842 3f10 	str.w	r3, [r2, #16]!
   120a2:	f019 ffa4 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   120a6:	46bd      	mov	sp, r7
   120a8:	bdb0      	pop	{r4, r5, r7, pc}
   120aa:	bf00      	nop
   120ac:	0003485f 	.word	0x0003485f
   120b0:	01000005 	.word	0x01000005
   120b4:	000314fc 	.word	0x000314fc

000120b8 <hci_hardware_error>:
{
   120b8:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   120ba:	2101      	movs	r1, #1
   120bc:	af00      	add	r7, sp, #0
   120be:	300c      	adds	r0, #12
   120c0:	f009 fb76 	bl	1b7b0 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   120c4:	b088      	sub	sp, #32
   120c6:	466a      	mov	r2, sp
   120c8:	7803      	ldrb	r3, [r0, #0]
   120ca:	4906      	ldr	r1, [pc, #24]	; (120e4 <hci_hardware_error+0x2c>)
   120cc:	4806      	ldr	r0, [pc, #24]	; (120e8 <hci_hardware_error+0x30>)
   120ce:	e9c2 1305 	strd	r1, r3, [r2, #20]
   120d2:	2303      	movs	r3, #3
   120d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   120d8:	f842 3f10 	str.w	r3, [r2, #16]!
   120dc:	f019 ff87 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   120e0:	46bd      	mov	sp, r7
   120e2:	bd80      	pop	{r7, pc}
   120e4:	00034881 	.word	0x00034881
   120e8:	000314fc 	.word	0x000314fc

000120ec <le_data_len_change>:
{
   120ec:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120ee:	68c3      	ldr	r3, [r0, #12]
{
   120f0:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   120f2:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   120f4:	4620      	mov	r0, r4
   120f6:	f002 fee5 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   120fa:	b980      	cbnz	r0, 1211e <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   120fc:	466d      	mov	r5, sp
   120fe:	b088      	sub	sp, #32
   12100:	466a      	mov	r2, sp
   12102:	4b08      	ldr	r3, [pc, #32]	; (12124 <le_data_len_change+0x38>)
   12104:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12108:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1210c:	2303      	movs	r3, #3
   1210e:	4806      	ldr	r0, [pc, #24]	; (12128 <le_data_len_change+0x3c>)
   12110:	f842 3f10 	str.w	r3, [r2, #16]!
   12114:	f019 ff6b 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12118:	46ad      	mov	sp, r5
}
   1211a:	46bd      	mov	sp, r7
   1211c:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1211e:	f002 fea1 	bl	14e64 <bt_conn_unref>
   12122:	e7fa      	b.n	1211a <le_data_len_change+0x2e>
   12124:	000348a3 	.word	0x000348a3
   12128:	000314fc 	.word	0x000314fc

0001212c <le_phy_update_complete>:
{
   1212c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1212e:	68c3      	ldr	r3, [r0, #12]
{
   12130:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12132:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   12136:	4620      	mov	r0, r4
   12138:	f002 fec4 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   1213c:	b980      	cbnz	r0, 12160 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1213e:	466d      	mov	r5, sp
   12140:	b088      	sub	sp, #32
   12142:	466a      	mov	r2, sp
   12144:	4b08      	ldr	r3, [pc, #32]	; (12168 <le_phy_update_complete+0x3c>)
   12146:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1214a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1214e:	2303      	movs	r3, #3
   12150:	4806      	ldr	r0, [pc, #24]	; (1216c <le_phy_update_complete+0x40>)
   12152:	f842 3f10 	str.w	r3, [r2, #16]!
   12156:	f019 ff4a 	bl	2bfee <z_log_msg_static_create.constprop.0>
   1215a:	46ad      	mov	sp, r5
}
   1215c:	46bd      	mov	sp, r7
   1215e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   12160:	f002 fe80 	bl	14e64 <bt_conn_unref>
   12164:	e7fa      	b.n	1215c <le_phy_update_complete+0x30>
   12166:	bf00      	nop
   12168:	000348a3 	.word	0x000348a3
   1216c:	000314fc 	.word	0x000314fc

00012170 <hci_disconn_complete>:
{
   12170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   12174:	68c5      	ldr	r5, [r0, #12]
{
   12176:	af00      	add	r7, sp, #0
	if (evt->status) {
   12178:	782e      	ldrb	r6, [r5, #0]
   1217a:	b9ae      	cbnz	r6, 121a8 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1217c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   12180:	4640      	mov	r0, r8
   12182:	f002 fe9f 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   12186:	4604      	mov	r4, r0
   12188:	b988      	cbnz	r0, 121ae <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1218a:	466c      	mov	r4, sp
   1218c:	b088      	sub	sp, #32
   1218e:	466a      	mov	r2, sp
   12190:	4b0b      	ldr	r3, [pc, #44]	; (121c0 <hci_disconn_complete+0x50>)
   12192:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12196:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1219a:	2303      	movs	r3, #3
   1219c:	4809      	ldr	r0, [pc, #36]	; (121c4 <hci_disconn_complete+0x54>)
   1219e:	f842 3f10 	str.w	r3, [r2, #16]!
   121a2:	f019 ff24 	bl	2bfee <z_log_msg_static_create.constprop.0>
   121a6:	46a5      	mov	sp, r4
}
   121a8:	46bd      	mov	sp, r7
   121aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   121ae:	78eb      	ldrb	r3, [r5, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   121b0:	4631      	mov	r1, r6
	conn->err = evt->reason;
   121b2:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   121b4:	f002 fe8e 	bl	14ed4 <bt_conn_set_state>
		bt_conn_unref(conn);
   121b8:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   121ba:	f002 fe53 	bl	14e64 <bt_conn_unref>
   121be:	e7f3      	b.n	121a8 <hci_disconn_complete+0x38>
   121c0:	000348c7 	.word	0x000348c7
   121c4:	000314fc 	.word	0x000314fc

000121c8 <handle_event>:
{
   121c8:	b5b0      	push	{r4, r5, r7, lr}
   121ca:	4604      	mov	r4, r0
   121cc:	af00      	add	r7, sp, #0
   121ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	for (i = 0; i < num_handlers; i++) {
   121d2:	4293      	cmp	r3, r2
   121d4:	d103      	bne.n	121de <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   121d6:	4620      	mov	r0, r4
   121d8:	f7ff ff4a 	bl	12070 <handle_event.part.0>
}
   121dc:	e018      	b.n	12210 <handle_event+0x48>
		if (handler->event != event) {
   121de:	4610      	mov	r0, r2
   121e0:	f810 5b08 	ldrb.w	r5, [r0], #8
   121e4:	42a5      	cmp	r5, r4
   121e6:	d119      	bne.n	1221c <handle_event+0x54>
		if (buf->len < handler->min_len) {
   121e8:	8a0b      	ldrh	r3, [r1, #16]
   121ea:	7850      	ldrb	r0, [r2, #1]
   121ec:	4298      	cmp	r0, r3
   121ee:	d911      	bls.n	12214 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   121f0:	466d      	mov	r5, sp
   121f2:	b088      	sub	sp, #32
   121f4:	466a      	mov	r2, sp
   121f6:	490a      	ldr	r1, [pc, #40]	; (12220 <handle_event+0x58>)
   121f8:	61d4      	str	r4, [r2, #28]
   121fa:	e9c2 1305 	strd	r1, r3, [r2, #20]
   121fe:	2304      	movs	r3, #4
   12200:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12204:	4807      	ldr	r0, [pc, #28]	; (12224 <handle_event+0x5c>)
   12206:	f842 3f10 	str.w	r3, [r2, #16]!
   1220a:	f019 fef0 	bl	2bfee <z_log_msg_static_create.constprop.0>
   1220e:	46ad      	mov	sp, r5
}
   12210:	46bd      	mov	sp, r7
   12212:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   12214:	4608      	mov	r0, r1
   12216:	6853      	ldr	r3, [r2, #4]
   12218:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   1221a:	e7f9      	b.n	12210 <handle_event+0x48>
   1221c:	4602      	mov	r2, r0
   1221e:	e7d8      	b.n	121d2 <handle_event+0xa>
   12220:	000348ed 	.word	0x000348ed
   12224:	000314fc 	.word	0x000314fc

00012228 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   12228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1222a:	4855      	ldr	r0, [pc, #340]	; (12380 <rx_work_handler+0x158>)
{
   1222c:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1222e:	f009 f939 	bl	1b4a4 <net_buf_slist_get>
	if (!buf) {
   12232:	4604      	mov	r4, r0
   12234:	2800      	cmp	r0, #0
   12236:	d06a      	beq.n	1230e <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12238:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1223a:	2b01      	cmp	r3, #1
   1223c:	d069      	beq.n	12312 <rx_work_handler+0xea>
   1223e:	2b03      	cmp	r3, #3
   12240:	f040 8099 	bne.w	12376 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12244:	8a03      	ldrh	r3, [r0, #16]
   12246:	2b03      	cmp	r3, #3
   12248:	d80c      	bhi.n	12264 <rx_work_handler+0x3c>
   1224a:	f240 13ed 	movw	r3, #493	; 0x1ed
   1224e:	4a4d      	ldr	r2, [pc, #308]	; (12384 <rx_work_handler+0x15c>)
   12250:	494d      	ldr	r1, [pc, #308]	; (12388 <rx_work_handler+0x160>)
   12252:	484e      	ldr	r0, [pc, #312]	; (1238c <rx_work_handler+0x164>)
   12254:	f018 fa41 	bl	2a6da <assert_print>
   12258:	4040      	eors	r0, r0
   1225a:	f380 8811 	msr	BASEPRI, r0
   1225e:	f04f 0003 	mov.w	r0, #3
   12262:	df02      	svc	2
   12264:	2104      	movs	r1, #4
   12266:	f104 000c 	add.w	r0, r4, #12
   1226a:	f009 faa1 	bl	1b7b0 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1226e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   12270:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   12272:	8806      	ldrh	r6, [r0, #0]
	if (buf->len != len) {
   12274:	8a21      	ldrh	r1, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   12276:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1227a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1227c:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1227e:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   12280:	d010      	beq.n	122a4 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   12282:	466d      	mov	r5, sp
   12284:	b088      	sub	sp, #32
   12286:	466a      	mov	r2, sp
   12288:	4841      	ldr	r0, [pc, #260]	; (12390 <rx_work_handler+0x168>)
   1228a:	61d3      	str	r3, [r2, #28]
   1228c:	2304      	movs	r3, #4
   1228e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   12292:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   12296:	f842 3f10 	str.w	r3, [r2, #16]!
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1229a:	483e      	ldr	r0, [pc, #248]	; (12394 <rx_work_handler+0x16c>)
   1229c:	f019 fea7 	bl	2bfee <z_log_msg_static_create.constprop.0>
   122a0:	46ad      	mov	sp, r5
   122a2:	e064      	b.n	1236e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   122a4:	f002 fe0e 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   122a8:	4605      	mov	r5, r0
   122aa:	b960      	cbnz	r0, 122c6 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   122ac:	466d      	mov	r5, sp
   122ae:	b088      	sub	sp, #32
   122b0:	8b63      	ldrh	r3, [r4, #26]
   122b2:	466a      	mov	r2, sp
   122b4:	4938      	ldr	r1, [pc, #224]	; (12398 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   122b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   122ba:	2303      	movs	r3, #3
   122bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122c0:	f842 3f10 	str.w	r3, [r2, #16]!
   122c4:	e7e9      	b.n	1229a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   122c6:	f002 fef9 	bl	150bc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   122ca:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
   122cc:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   122ce:	0b32      	lsrs	r2, r6, #12
   122d0:	4628      	mov	r0, r5
   122d2:	f002 fc63 	bl	14b9c <bt_conn_recv>
	bt_conn_unref(conn);
   122d6:	4628      	mov	r0, r5
   122d8:	f002 fdc4 	bl	14e64 <bt_conn_unref>
	return list->head;
   122dc:	4b2f      	ldr	r3, [pc, #188]	; (1239c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   122de:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   122e2:	b1a3      	cbz	r3, 1230e <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   122e4:	492e      	ldr	r1, [pc, #184]	; (123a0 <rx_work_handler+0x178>)
   122e6:	482f      	ldr	r0, [pc, #188]	; (123a4 <rx_work_handler+0x17c>)
   122e8:	f01d fff2 	bl	302d0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   122ec:	2800      	cmp	r0, #0
   122ee:	da0e      	bge.n	1230e <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   122f0:	466c      	mov	r4, sp
   122f2:	b088      	sub	sp, #32
   122f4:	466a      	mov	r2, sp
   122f6:	4b2c      	ldr	r3, [pc, #176]	; (123a8 <rx_work_handler+0x180>)
   122f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122fc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12300:	2303      	movs	r3, #3
   12302:	4824      	ldr	r0, [pc, #144]	; (12394 <rx_work_handler+0x16c>)
   12304:	f842 3f10 	str.w	r3, [r2, #16]!
   12308:	f019 fe71 	bl	2bfee <z_log_msg_static_create.constprop.0>
   1230c:	46a5      	mov	sp, r4
		}
	}
}
   1230e:	46bd      	mov	sp, r7
   12310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   12312:	8a03      	ldrh	r3, [r0, #16]
   12314:	2b01      	cmp	r3, #1
   12316:	d80c      	bhi.n	12332 <rx_work_handler+0x10a>
   12318:	f640 136d 	movw	r3, #2413	; 0x96d
   1231c:	4a19      	ldr	r2, [pc, #100]	; (12384 <rx_work_handler+0x15c>)
   1231e:	491a      	ldr	r1, [pc, #104]	; (12388 <rx_work_handler+0x160>)
   12320:	481a      	ldr	r0, [pc, #104]	; (1238c <rx_work_handler+0x164>)
   12322:	f018 f9da 	bl	2a6da <assert_print>
   12326:	4040      	eors	r0, r0
   12328:	f380 8811 	msr	BASEPRI, r0
   1232c:	f04f 0003 	mov.w	r0, #3
   12330:	df02      	svc	2
   12332:	2102      	movs	r1, #2
   12334:	f104 000c 	add.w	r0, r4, #12
   12338:	f009 fa3a 	bl	1b7b0 <net_buf_simple_pull_mem>
   1233c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1233e:	7800      	ldrb	r0, [r0, #0]
   12340:	f019 fe13 	bl	2bf6a <bt_hci_evt_get_flags>
   12344:	0783      	lsls	r3, r0, #30
   12346:	d40c      	bmi.n	12362 <rx_work_handler+0x13a>
   12348:	f640 1371 	movw	r3, #2417	; 0x971
   1234c:	4a0d      	ldr	r2, [pc, #52]	; (12384 <rx_work_handler+0x15c>)
   1234e:	4917      	ldr	r1, [pc, #92]	; (123ac <rx_work_handler+0x184>)
   12350:	480e      	ldr	r0, [pc, #56]	; (1238c <rx_work_handler+0x164>)
   12352:	f018 f9c2 	bl	2a6da <assert_print>
   12356:	4040      	eors	r0, r0
   12358:	f380 8811 	msr	BASEPRI, r0
   1235c:	f04f 0003 	mov.w	r0, #3
   12360:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   12362:	2306      	movs	r3, #6
   12364:	4621      	mov	r1, r4
   12366:	4a12      	ldr	r2, [pc, #72]	; (123b0 <rx_work_handler+0x188>)
   12368:	7828      	ldrb	r0, [r5, #0]
   1236a:	f7ff ff2d 	bl	121c8 <handle_event>
		net_buf_unref(buf);
   1236e:	4620      	mov	r0, r4
   12370:	f009 f91a 	bl	1b5a8 <net_buf_unref>
		break;
   12374:	e7b2      	b.n	122dc <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   12376:	466d      	mov	r5, sp
   12378:	b088      	sub	sp, #32
   1237a:	466a      	mov	r2, sp
   1237c:	490d      	ldr	r1, [pc, #52]	; (123b4 <rx_work_handler+0x18c>)
   1237e:	e79a      	b.n	122b6 <rx_work_handler+0x8e>
   12380:	2000813c 	.word	0x2000813c
   12384:	0003490f 	.word	0x0003490f
   12388:	00034943 	.word	0x00034943
   1238c:	00032679 	.word	0x00032679
   12390:	0003495c 	.word	0x0003495c
   12394:	000314fc 	.word	0x000314fc
   12398:	00034980 	.word	0x00034980
   1239c:	20008000 	.word	0x20008000
   123a0:	200084c4 	.word	0x200084c4
   123a4:	20009bc8 	.word	0x20009bc8
   123a8:	00034842 	.word	0x00034842
   123ac:	000349a2 	.word	0x000349a2
   123b0:	00031ee4 	.word	0x00031ee4
   123b4:	000349d0 	.word	0x000349d0

000123b8 <hci_le_meta_event>:
{
   123b8:	b510      	push	{r4, lr}
   123ba:	2101      	movs	r1, #1
   123bc:	4604      	mov	r4, r0
   123be:	300c      	adds	r0, #12
   123c0:	f009 f9f6 	bl	1b7b0 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   123c4:	4621      	mov	r1, r4
}
   123c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   123ca:	230a      	movs	r3, #10
   123cc:	4a01      	ldr	r2, [pc, #4]	; (123d4 <hci_le_meta_event+0x1c>)
   123ce:	7800      	ldrb	r0, [r0, #0]
   123d0:	f7ff befa 	b.w	121c8 <handle_event>
   123d4:	00031f14 	.word	0x00031f14

000123d8 <le_remote_feat_complete>:
{
   123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   123da:	68c5      	ldr	r5, [r0, #12]
{
   123dc:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   123de:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   123e2:	4630      	mov	r0, r6
   123e4:	f002 fd6e 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   123e8:	4604      	mov	r4, r0
   123ea:	b980      	cbnz	r0, 1240e <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   123ec:	466c      	mov	r4, sp
   123ee:	b088      	sub	sp, #32
   123f0:	466a      	mov	r2, sp
   123f2:	4b10      	ldr	r3, [pc, #64]	; (12434 <le_remote_feat_complete+0x5c>)
   123f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   123f8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   123fc:	2303      	movs	r3, #3
   123fe:	480e      	ldr	r0, [pc, #56]	; (12438 <le_remote_feat_complete+0x60>)
   12400:	f842 3f10 	str.w	r3, [r2, #16]!
   12404:	f019 fdf3 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12408:	46a5      	mov	sp, r4
}
   1240a:	46bd      	mov	sp, r7
   1240c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   1240e:	782b      	ldrb	r3, [r5, #0]
   12410:	b93b      	cbnz	r3, 12422 <le_remote_feat_complete+0x4a>
   12412:	f8d5 3003 	ldr.w	r3, [r5, #3]
   12416:	f8c0 30b5 	str.w	r3, [r0, #181]	; 0xb5
   1241a:	f8d5 3007 	ldr.w	r3, [r5, #7]
   1241e:	f8c0 30b9 	str.w	r3, [r0, #185]	; 0xb9
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12426:	1d20      	adds	r0, r4, #4
   12428:	f019 fdca 	bl	2bfc0 <atomic_or>
	bt_conn_unref(conn);
   1242c:	4620      	mov	r0, r4
   1242e:	f002 fd19 	bl	14e64 <bt_conn_unref>
   12432:	e7ea      	b.n	1240a <le_remote_feat_complete+0x32>
   12434:	000348a3 	.word	0x000348a3
   12438:	000314fc 	.word	0x000314fc

0001243c <hci_cmd_done>:
{
   1243c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12440:	4606      	mov	r6, r0
   12442:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   12444:	7a90      	ldrb	r0, [r2, #10]
{
   12446:	4688      	mov	r8, r1
   12448:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1244a:	f008 fe73 	bl	1b134 <net_buf_pool_get>
   1244e:	4d41      	ldr	r5, [pc, #260]	; (12554 <hci_cmd_done+0x118>)
   12450:	4285      	cmp	r5, r0
   12452:	d018      	beq.n	12486 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   12454:	7aa4      	ldrb	r4, [r4, #10]
   12456:	46e8      	mov	r8, sp
   12458:	4620      	mov	r0, r4
   1245a:	f008 fe6b 	bl	1b134 <net_buf_pool_get>
   1245e:	b08a      	sub	sp, #40	; 0x28
   12460:	466a      	mov	r2, sp
   12462:	4b3d      	ldr	r3, [pc, #244]	; (12558 <hci_cmd_done+0x11c>)
   12464:	e9c2 4007 	strd	r4, r0, [r2, #28]
   12468:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1246c:	2306      	movs	r3, #6
   1246e:	6255      	str	r5, [r2, #36]	; 0x24
   12470:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   12474:	4839      	ldr	r0, [pc, #228]	; (1255c <hci_cmd_done+0x120>)
   12476:	f842 3f10 	str.w	r3, [r2, #16]!
   1247a:	f019 fdb8 	bl	2bfee <z_log_msg_static_create.constprop.0>
   1247e:	46c5      	mov	sp, r8
}
   12480:	46bd      	mov	sp, r7
   12482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   12486:	4620      	mov	r0, r4
   12488:	f008 fe5c 	bl	1b144 <net_buf_id>
   1248c:	f04f 090c 	mov.w	r9, #12
   12490:	4d33      	ldr	r5, [pc, #204]	; (12560 <hci_cmd_done+0x124>)
   12492:	fb09 5000 	mla	r0, r9, r0, r5
   12496:	8843      	ldrh	r3, [r0, #2]
   12498:	42b3      	cmp	r3, r6
   1249a:	d016      	beq.n	124ca <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1249c:	4620      	mov	r0, r4
   1249e:	f008 fe51 	bl	1b144 <net_buf_id>
   124a2:	fb09 5000 	mla	r0, r9, r0, r5
   124a6:	466c      	mov	r4, sp
   124a8:	b088      	sub	sp, #32
   124aa:	466a      	mov	r2, sp
   124ac:	8843      	ldrh	r3, [r0, #2]
   124ae:	61d3      	str	r3, [r2, #28]
   124b0:	2304      	movs	r3, #4
   124b2:	492c      	ldr	r1, [pc, #176]	; (12564 <hci_cmd_done+0x128>)
   124b4:	4829      	ldr	r0, [pc, #164]	; (1255c <hci_cmd_done+0x120>)
   124b6:	e9c2 1605 	strd	r1, r6, [r2, #20]
   124ba:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   124be:	f842 3f10 	str.w	r3, [r2, #16]!
   124c2:	f019 fd94 	bl	2bfee <z_log_msg_static_create.constprop.0>
   124c6:	46a5      	mov	sp, r4
		return;
   124c8:	e7da      	b.n	12480 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   124ca:	4e27      	ldr	r6, [pc, #156]	; (12568 <hci_cmd_done+0x12c>)
   124cc:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   124d0:	b120      	cbz	r0, 124dc <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   124d2:	f009 f869 	bl	1b5a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   124d6:	2300      	movs	r3, #0
   124d8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   124dc:	4620      	mov	r0, r4
   124de:	f008 fe31 	bl	1b144 <net_buf_id>
   124e2:	260c      	movs	r6, #12
   124e4:	fb06 5000 	mla	r0, r6, r0, r5
   124e8:	6843      	ldr	r3, [r0, #4]
   124ea:	b1ab      	cbz	r3, 12518 <hci_cmd_done+0xdc>
   124ec:	f1b8 0f00 	cmp.w	r8, #0
   124f0:	d112      	bne.n	12518 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   124f2:	4620      	mov	r0, r4
   124f4:	f008 fe26 	bl	1b144 <net_buf_id>
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   124f8:	2101      	movs	r1, #1
   124fa:	fb06 5000 	mla	r0, r6, r0, r5
   124fe:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   12500:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   12504:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   12506:	f003 061f 	and.w	r6, r3, #31
   1250a:	40b1      	lsls	r1, r6
	if (val) {
   1250c:	095b      	lsrs	r3, r3, #5
   1250e:	b1da      	cbz	r2, 12548 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12510:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12514:	f019 fd54 	bl	2bfc0 <atomic_or>
	if (cmd(buf)->sync) {
   12518:	4620      	mov	r0, r4
   1251a:	f008 fe13 	bl	1b144 <net_buf_id>
   1251e:	260c      	movs	r6, #12
   12520:	fb06 5000 	mla	r0, r6, r0, r5
   12524:	6883      	ldr	r3, [r0, #8]
   12526:	2b00      	cmp	r3, #0
   12528:	d0aa      	beq.n	12480 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   1252a:	4620      	mov	r0, r4
   1252c:	f008 fe0a 	bl	1b144 <net_buf_id>
   12530:	4370      	muls	r0, r6
   12532:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   12536:	4620      	mov	r0, r4
   12538:	f008 fe04 	bl	1b144 <net_buf_id>
   1253c:	fb06 5500 	mla	r5, r6, r0, r5
   12540:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   12542:	f013 f851 	bl	255e8 <z_impl_k_sem_give>
}
   12546:	e79b      	b.n	12480 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12548:	43c9      	mvns	r1, r1
   1254a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1254e:	f019 fd51 	bl	2bff4 <atomic_and.isra.0>
   12552:	e7e1      	b.n	12518 <hci_cmd_done+0xdc>
   12554:	20008dd8 	.word	0x20008dd8
   12558:	000349e4 	.word	0x000349e4
   1255c:	000314fc 	.word	0x000314fc
   12560:	2002154c 	.word	0x2002154c
   12564:	00034a19 	.word	0x00034a19
   12568:	20008000 	.word	0x20008000

0001256c <hci_cmd_status>:
{
   1256c:	b538      	push	{r3, r4, r5, lr}
   1256e:	2104      	movs	r1, #4
   12570:	4604      	mov	r4, r0
   12572:	300c      	adds	r0, #12
   12574:	f009 f91c 	bl	1b7b0 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   12578:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1257a:	7801      	ldrb	r1, [r0, #0]
   1257c:	4622      	mov	r2, r4
   1257e:	8840      	ldrh	r0, [r0, #2]
   12580:	f7ff ff5c 	bl	1243c <hci_cmd_done>
	if (ncmd) {
   12584:	b125      	cbz	r5, 12590 <hci_cmd_status+0x24>
}
   12586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1258a:	4802      	ldr	r0, [pc, #8]	; (12594 <hci_cmd_status+0x28>)
   1258c:	f013 b82c 	b.w	255e8 <z_impl_k_sem_give>
   12590:	bd38      	pop	{r3, r4, r5, pc}
   12592:	bf00      	nop
   12594:	20008120 	.word	0x20008120

00012598 <hci_cmd_complete>:
{
   12598:	b538      	push	{r3, r4, r5, lr}
   1259a:	2103      	movs	r1, #3
   1259c:	4604      	mov	r4, r0
   1259e:	300c      	adds	r0, #12
   125a0:	f009 f906 	bl	1b7b0 <net_buf_simple_pull_mem>
	status = buf->data[0];
   125a4:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   125a6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   125a8:	4622      	mov	r2, r4
   125aa:	7819      	ldrb	r1, [r3, #0]
   125ac:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   125b0:	f7ff ff44 	bl	1243c <hci_cmd_done>
	if (ncmd) {
   125b4:	b125      	cbz	r5, 125c0 <hci_cmd_complete+0x28>
}
   125b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   125ba:	4802      	ldr	r0, [pc, #8]	; (125c4 <hci_cmd_complete+0x2c>)
   125bc:	f013 b814 	b.w	255e8 <z_impl_k_sem_give>
   125c0:	bd38      	pop	{r3, r4, r5, pc}
   125c2:	bf00      	nop
   125c4:	20008120 	.word	0x20008120

000125c8 <hci_num_completed_packets>:
{
   125c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0; i < evt->num_handles; i++) {
   125cc:	2500      	movs	r5, #0
{
   125ce:	b087      	sub	sp, #28
			tx->pending_no_cb = 0U;
   125d0:	46a9      	mov	r9, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   125d2:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   125d6:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 126d4 <hci_num_completed_packets+0x10c>
{
   125da:	af00      	add	r7, sp, #0
	for (i = 0; i < evt->num_handles; i++) {
   125dc:	f898 3000 	ldrb.w	r3, [r8]
   125e0:	429d      	cmp	r5, r3
   125e2:	db03      	blt.n	125ec <hci_num_completed_packets+0x24>
}
   125e4:	371c      	adds	r7, #28
   125e6:	46bd      	mov	sp, r7
   125e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   125ec:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   125f0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   125f4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   125f8:	4658      	mov	r0, fp
   125fa:	f002 fc63 	bl	14ec4 <bt_conn_lookup_handle>
		if (!conn) {
   125fe:	4604      	mov	r4, r0
   12600:	b1d8      	cbz	r0, 1263a <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   12602:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   12606:	2e00      	cmp	r6, #0
   12608:	d039      	beq.n	1267e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   1260a:	f04f 0320 	mov.w	r3, #32
   1260e:	f3ef 8211 	mrs	r2, BASEPRI
   12612:	f383 8812 	msr	BASEPRI_MAX, r3
   12616:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1261a:	69e3      	ldr	r3, [r4, #28]
   1261c:	b1f3      	cbz	r3, 1265c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   1261e:	3b01      	subs	r3, #1
   12620:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   12622:	f382 8811 	msr	BASEPRI, r2
   12626:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1262a:	4620      	mov	r0, r4
   1262c:	f002 fa3a 	bl	14aa4 <bt_conn_get_pkts>
   12630:	3e01      	subs	r6, #1
   12632:	f012 ffd9 	bl	255e8 <z_impl_k_sem_give>
   12636:	b2b6      	uxth	r6, r6
   12638:	e7e5      	b.n	12606 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   1263a:	466c      	mov	r4, sp
   1263c:	b088      	sub	sp, #32
   1263e:	466a      	mov	r2, sp
   12640:	4b25      	ldr	r3, [pc, #148]	; (126d8 <hci_num_completed_packets+0x110>)
   12642:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12646:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   1264a:	2303      	movs	r3, #3
   1264c:	4823      	ldr	r0, [pc, #140]	; (126dc <hci_num_completed_packets+0x114>)
   1264e:	f842 3f10 	str.w	r3, [r2, #16]!
   12652:	f019 fccc 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12656:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   12658:	3501      	adds	r5, #1
   1265a:	e7bf      	b.n	125dc <hci_num_completed_packets+0x14>
   1265c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1265e:	b993      	cbnz	r3, 12686 <hci_num_completed_packets+0xbe>
   12660:	f382 8811 	msr	BASEPRI, r2
   12664:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   12668:	2302      	movs	r3, #2
   1266a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1266e:	481b      	ldr	r0, [pc, #108]	; (126dc <hci_num_completed_packets+0x114>)
   12670:	f8c7 a014 	str.w	sl, [r7, #20]
   12674:	613b      	str	r3, [r7, #16]
   12676:	f107 0210 	add.w	r2, r7, #16
   1267a:	f019 fcb8 	bl	2bfee <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1267e:	4620      	mov	r0, r4
   12680:	f002 fbf0 	bl	14e64 <bt_conn_unref>
   12684:	e7e8      	b.n	12658 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12686:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   12688:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1268a:	428b      	cmp	r3, r1
	list->head = node;
   1268c:	6160      	str	r0, [r4, #20]
	list->tail = node;
   1268e:	bf08      	it	eq
   12690:	61a0      	streq	r0, [r4, #24]
   12692:	f382 8811 	msr	BASEPRI, r2
   12696:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1269a:	f04f 0220 	mov.w	r2, #32
   1269e:	f3ef 8111 	mrs	r1, BASEPRI
   126a2:	f382 8812 	msr	BASEPRI_MAX, r2
   126a6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   126aa:	68da      	ldr	r2, [r3, #12]
   126ac:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   126ae:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   126b2:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   126b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   126b8:	b94a      	cbnz	r2, 126ce <hci_num_completed_packets+0x106>
	list->head = node;
   126ba:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   126be:	f381 8811 	msr	BASEPRI, r1
   126c2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   126c6:	4658      	mov	r0, fp
   126c8:	f013 fafc 	bl	25cc4 <k_work_submit>
   126cc:	e7ad      	b.n	1262a <hci_num_completed_packets+0x62>
	parent->next = child;
   126ce:	6013      	str	r3, [r2, #0]
	list->tail = node;
   126d0:	6263      	str	r3, [r4, #36]	; 0x24
}
   126d2:	e7f4      	b.n	126be <hci_num_completed_packets+0xf6>
   126d4:	00034a68 	.word	0x00034a68
   126d8:	00034a4c 	.word	0x00034a4c
   126dc:	000314fc 	.word	0x000314fc

000126e0 <le_conn_update_complete>:
{
   126e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   126e2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   126e4:	68c5      	ldr	r5, [r0, #12]
{
   126e6:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   126e8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   126ec:	4630      	mov	r0, r6
   126ee:	f002 fbe9 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   126f2:	4604      	mov	r4, r0
   126f4:	b988      	cbnz	r0, 1271a <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   126f6:	466c      	mov	r4, sp
   126f8:	b088      	sub	sp, #32
   126fa:	466a      	mov	r2, sp
   126fc:	4b2b      	ldr	r3, [pc, #172]	; (127ac <le_conn_update_complete+0xcc>)
   126fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12702:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12706:	2303      	movs	r3, #3
   12708:	4829      	ldr	r0, [pc, #164]	; (127b0 <le_conn_update_complete+0xd0>)
   1270a:	f842 3f10 	str.w	r3, [r2, #16]!
   1270e:	f019 fc6e 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12712:	46a5      	mov	sp, r4
}
   12714:	370c      	adds	r7, #12
   12716:	46bd      	mov	sp, r7
   12718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1271a:	782b      	ldrb	r3, [r5, #0]
	    !atomic_test_and_set_bit(conn->flags,
   1271c:	1d06      	adds	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1271e:	2b1a      	cmp	r3, #26
   12720:	d117      	bne.n	12752 <le_conn_update_complete+0x72>
   12722:	78c3      	ldrb	r3, [r0, #3]
   12724:	2b01      	cmp	r3, #1
   12726:	d128      	bne.n	1277a <le_conn_update_complete+0x9a>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   12728:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1272c:	4630      	mov	r0, r6
   1272e:	f019 fc47 	bl	2bfc0 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   12732:	0542      	lsls	r2, r0, #21
   12734:	d40d      	bmi.n	12752 <le_conn_update_complete+0x72>
		param.interval_min = conn->le.interval_min;
   12736:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
		bt_l2cap_update_conn_param(conn, &param);
   1273a:	4639      	mov	r1, r7
		param.interval_min = conn->le.interval_min;
   1273c:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   1273e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
		bt_l2cap_update_conn_param(conn, &param);
   12742:	4620      	mov	r0, r4
		param.latency = conn->le.pending_latency;
   12744:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   12746:	f003 f9eb 	bl	15b20 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   1274a:	4620      	mov	r0, r4
   1274c:	f002 fb8a 	bl	14e64 <bt_conn_unref>
   12750:	e7e0      	b.n	12714 <le_conn_update_complete+0x34>
		if (!evt->status) {
   12752:	782b      	ldrb	r3, [r5, #0]
   12754:	b98b      	cbnz	r3, 1277a <le_conn_update_complete+0x9a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   12756:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1275a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1275e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   12762:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12766:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1276a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1276e:	f46f 7180 	mvn.w	r1, #256	; 0x100
   12772:	4630      	mov	r0, r6
   12774:	f019 fc3e 	bl	2bff4 <atomic_and.isra.0>
}
   12778:	e014      	b.n	127a4 <le_conn_update_complete+0xc4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1277a:	e8d6 3faf 	lda	r3, [r6]
		} else if (atomic_test_bit(conn->flags,
   1277e:	05db      	lsls	r3, r3, #23
   12780:	d5f5      	bpl.n	1276e <le_conn_update_complete+0x8e>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   12782:	782b      	ldrb	r3, [r5, #0]
   12784:	2b20      	cmp	r3, #32
   12786:	d1f2      	bne.n	1276e <le_conn_update_complete+0x8e>
			   conn->le.conn_param_retry_countdown) {
   12788:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1278c:	2b00      	cmp	r3, #0
   1278e:	d0ee      	beq.n	1276e <le_conn_update_complete+0x8e>
			conn->le.conn_param_retry_countdown--;
   12790:	3b01      	subs	r3, #1
   12792:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   12796:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1279a:	2300      	movs	r3, #0
   1279c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   127a0:	f013 fc48 	bl	26034 <k_work_schedule>
		notify_le_param_updated(conn);
   127a4:	4620      	mov	r0, r4
   127a6:	f002 fced 	bl	15184 <notify_le_param_updated>
   127aa:	e7ce      	b.n	1274a <le_conn_update_complete+0x6a>
   127ac:	000348a3 	.word	0x000348a3
   127b0:	000314fc 	.word	0x000314fc

000127b4 <bt_hci_cmd_state_set_init>:
{
   127b4:	b510      	push	{r4, lr}
	state->bit = bit;
   127b6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   127ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
{
   127be:	460c      	mov	r4, r1
	state->val = val;
   127c0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   127c2:	f008 fcbf 	bl	1b144 <net_buf_id>
   127c6:	220c      	movs	r2, #12
   127c8:	4b02      	ldr	r3, [pc, #8]	; (127d4 <bt_hci_cmd_state_set_init+0x20>)
   127ca:	fb02 3300 	mla	r3, r2, r0, r3
   127ce:	605c      	str	r4, [r3, #4]
}
   127d0:	bd10      	pop	{r4, pc}
   127d2:	bf00      	nop
   127d4:	2002154c 	.word	0x2002154c

000127d8 <bt_hci_cmd_create>:
{
   127d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   127dc:	f04f 32ff 	mov.w	r2, #4294967295
   127e0:	4606      	mov	r6, r0
   127e2:	f04f 33ff 	mov.w	r3, #4294967295
   127e6:	481e      	ldr	r0, [pc, #120]	; (12860 <bt_hci_cmd_create+0x88>)
   127e8:	460f      	mov	r7, r1
   127ea:	f01b fc02 	bl	2dff2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   127ee:	4604      	mov	r4, r0
   127f0:	b958      	cbnz	r0, 1280a <bt_hci_cmd_create+0x32>
   127f2:	491c      	ldr	r1, [pc, #112]	; (12864 <bt_hci_cmd_create+0x8c>)
   127f4:	481c      	ldr	r0, [pc, #112]	; (12868 <bt_hci_cmd_create+0x90>)
   127f6:	f240 1301 	movw	r3, #257	; 0x101
   127fa:	4a1c      	ldr	r2, [pc, #112]	; (1286c <bt_hci_cmd_create+0x94>)
   127fc:	f017 ff6d 	bl	2a6da <assert_print>
   12800:	f240 1101 	movw	r1, #257	; 0x101
   12804:	4819      	ldr	r0, [pc, #100]	; (1286c <bt_hci_cmd_create+0x94>)
   12806:	f017 ff61 	bl	2a6cc <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1280a:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
   1280e:	f100 0a0c 	add.w	sl, r0, #12
   12812:	2101      	movs	r1, #1
   12814:	4650      	mov	r0, sl
   12816:	f008 fdb5 	bl	1b384 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
   1281a:	4620      	mov	r0, r4
   1281c:	f884 8018 	strb.w	r8, [r4, #24]
   12820:	f008 fc90 	bl	1b144 <net_buf_id>
   12824:	f04f 090c 	mov.w	r9, #12
   12828:	4d11      	ldr	r5, [pc, #68]	; (12870 <bt_hci_cmd_create+0x98>)
   1282a:	fb09 5000 	mla	r0, r9, r0, r5
   1282e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   12830:	4620      	mov	r0, r4
   12832:	f008 fc87 	bl	1b144 <net_buf_id>
   12836:	fb09 5000 	mla	r0, r9, r0, r5
   1283a:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   1283e:	4620      	mov	r0, r4
   12840:	f008 fc80 	bl	1b144 <net_buf_id>
   12844:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   12848:	2103      	movs	r1, #3
   1284a:	4650      	mov	r0, sl
   1284c:	f8c5 8004 	str.w	r8, [r5, #4]
   12850:	f008 ffcc 	bl	1b7ec <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   12854:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   12856:	7087      	strb	r7, [r0, #2]
}
   12858:	4620      	mov	r0, r4
   1285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1285e:	bf00      	nop
   12860:	20008dd8 	.word	0x20008dd8
   12864:	00036995 	.word	0x00036995
   12868:	00032679 	.word	0x00032679
   1286c:	0003490f 	.word	0x0003490f
   12870:	2002154c 	.word	0x2002154c

00012874 <bt_hci_cmd_send_sync>:
{
   12874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12878:	b087      	sub	sp, #28
   1287a:	4680      	mov	r8, r0
   1287c:	4615      	mov	r5, r2
	if (!buf) {
   1287e:	460c      	mov	r4, r1
{
   12880:	af00      	add	r7, sp, #0
	if (!buf) {
   12882:	b921      	cbnz	r1, 1288e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   12884:	f7ff ffa8 	bl	127d8 <bt_hci_cmd_create>
		if (!buf) {
   12888:	4604      	mov	r4, r0
   1288a:	2800      	cmp	r0, #0
   1288c:	d05a      	beq.n	12944 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1288e:	2201      	movs	r2, #1
   12890:	2100      	movs	r1, #0
   12892:	4638      	mov	r0, r7
   12894:	f01d fcb9 	bl	3020a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   12898:	4620      	mov	r0, r4
   1289a:	f008 fc53 	bl	1b144 <net_buf_id>
   1289e:	230c      	movs	r3, #12
   128a0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1294c <bt_hci_cmd_send_sync+0xd8>
   128a4:	fb03 9000 	mla	r0, r3, r0, r9
   128a8:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   128aa:	4620      	mov	r0, r4
   128ac:	f008 fec0 	bl	1b630 <net_buf_ref>
   128b0:	4601      	mov	r1, r0
   128b2:	4827      	ldr	r0, [pc, #156]	; (12950 <bt_hci_cmd_send_sync+0xdc>)
   128b4:	f008 fe52 	bl	1b55c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   128b8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   128bc:	2300      	movs	r3, #0
   128be:	4638      	mov	r0, r7
   128c0:	f012 fed6 	bl	25670 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   128c4:	4606      	mov	r6, r0
   128c6:	b180      	cbz	r0, 128ea <bt_hci_cmd_send_sync+0x76>
   128c8:	f240 1349 	movw	r3, #329	; 0x149
   128cc:	4a21      	ldr	r2, [pc, #132]	; (12954 <bt_hci_cmd_send_sync+0xe0>)
   128ce:	4922      	ldr	r1, [pc, #136]	; (12958 <bt_hci_cmd_send_sync+0xe4>)
   128d0:	4822      	ldr	r0, [pc, #136]	; (1295c <bt_hci_cmd_send_sync+0xe8>)
   128d2:	f017 ff02 	bl	2a6da <assert_print>
   128d6:	4631      	mov	r1, r6
   128d8:	4821      	ldr	r0, [pc, #132]	; (12960 <bt_hci_cmd_send_sync+0xec>)
   128da:	f017 fefe 	bl	2a6da <assert_print>
   128de:	4040      	eors	r0, r0
   128e0:	f380 8811 	msr	BASEPRI, r0
   128e4:	f04f 0003 	mov.w	r0, #3
   128e8:	df02      	svc	2
	status = cmd(buf)->status;
   128ea:	4620      	mov	r0, r4
   128ec:	f008 fc2a 	bl	1b144 <net_buf_id>
   128f0:	230c      	movs	r3, #12
   128f2:	4358      	muls	r0, r3
   128f4:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   128f8:	b1e6      	cbz	r6, 12934 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   128fa:	466d      	mov	r5, sp
   128fc:	b088      	sub	sp, #32
   128fe:	466a      	mov	r2, sp
   12900:	4b18      	ldr	r3, [pc, #96]	; (12964 <bt_hci_cmd_send_sync+0xf0>)
   12902:	61d6      	str	r6, [r2, #28]
   12904:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12908:	2304      	movs	r3, #4
   1290a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1290e:	4816      	ldr	r0, [pc, #88]	; (12968 <bt_hci_cmd_send_sync+0xf4>)
   12910:	f842 3f10 	str.w	r3, [r2, #16]!
   12914:	f019 fb6b 	bl	2bfee <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   12918:	4620      	mov	r0, r4
   1291a:	46ad      	mov	sp, r5
   1291c:	f008 fe44 	bl	1b5a8 <net_buf_unref>
			return -ECONNREFUSED;
   12920:	2e09      	cmp	r6, #9
   12922:	bf14      	ite	ne
   12924:	f06f 0004 	mvnne.w	r0, #4
   12928:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   1292c:	371c      	adds	r7, #28
   1292e:	46bd      	mov	sp, r7
   12930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   12934:	b115      	cbz	r5, 1293c <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   12936:	602c      	str	r4, [r5, #0]
	return 0;
   12938:	2000      	movs	r0, #0
   1293a:	e7f7      	b.n	1292c <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   1293c:	4620      	mov	r0, r4
   1293e:	f008 fe33 	bl	1b5a8 <net_buf_unref>
   12942:	e7f9      	b.n	12938 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   12944:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12948:	e7f0      	b.n	1292c <bt_hci_cmd_send_sync+0xb8>
   1294a:	bf00      	nop
   1294c:	2002154c 	.word	0x2002154c
   12950:	20008144 	.word	0x20008144
   12954:	0003490f 	.word	0x0003490f
   12958:	000334ff 	.word	0x000334ff
   1295c:	00032679 	.word	0x00032679
   12960:	00034a7f 	.word	0x00034a7f
   12964:	00034a9f 	.word	0x00034a9f
   12968:	000314fc 	.word	0x000314fc

0001296c <hci_le_read_max_data_len>:
{
   1296c:	b570      	push	{r4, r5, r6, lr}
   1296e:	b088      	sub	sp, #32
   12970:	4606      	mov	r6, r0
   12972:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   12974:	f242 002f 	movw	r0, #8239	; 0x202f
   12978:	2100      	movs	r1, #0
   1297a:	aa01      	add	r2, sp, #4
   1297c:	f7ff ff7a 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   12980:	4604      	mov	r4, r0
   12982:	b160      	cbz	r0, 1299e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   12984:	4b0b      	ldr	r3, [pc, #44]	; (129b4 <hci_le_read_max_data_len+0x48>)
   12986:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1298a:	9307      	str	r3, [sp, #28]
   1298c:	2302      	movs	r3, #2
   1298e:	480a      	ldr	r0, [pc, #40]	; (129b8 <hci_le_read_max_data_len+0x4c>)
   12990:	aa06      	add	r2, sp, #24
   12992:	9306      	str	r3, [sp, #24]
   12994:	f019 fb2b 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   12998:	4620      	mov	r0, r4
   1299a:	b008      	add	sp, #32
   1299c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1299e:	9801      	ldr	r0, [sp, #4]
   129a0:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   129a2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   129a6:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   129a8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   129ac:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   129ae:	f008 fdfb 	bl	1b5a8 <net_buf_unref>
	return 0;
   129b2:	e7f1      	b.n	12998 <hci_le_read_max_data_len+0x2c>
   129b4:	00034abb 	.word	0x00034abb
   129b8:	000314fc 	.word	0x000314fc

000129bc <bt_hci_le_rand>:
{
   129bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   129be:	4b14      	ldr	r3, [pc, #80]	; (12a10 <bt_hci_le_rand+0x54>)
{
   129c0:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   129c2:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
{
   129c6:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   129c8:	2b00      	cmp	r3, #0
   129ca:	da1d      	bge.n	12a08 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   129cc:	b914      	cbnz	r4, 129d4 <bt_hci_le_rand+0x18>
	return 0;
   129ce:	4620      	mov	r0, r4
}
   129d0:	b003      	add	sp, #12
   129d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   129d4:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   129d6:	f04f 0100 	mov.w	r1, #0
   129da:	f242 0018 	movw	r0, #8216	; 0x2018
   129de:	aa01      	add	r2, sp, #4
		count = MIN(len, sizeof(rp->rand));
   129e0:	4626      	mov	r6, r4
   129e2:	bf28      	it	cs
   129e4:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   129e6:	f7ff ff45 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
   129ea:	2800      	cmp	r0, #0
   129ec:	d1f0      	bne.n	129d0 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   129ee:	9f01      	ldr	r7, [sp, #4]
   129f0:	4632      	mov	r2, r6
   129f2:	68f9      	ldr	r1, [r7, #12]
   129f4:	4628      	mov	r0, r5
   129f6:	3101      	adds	r1, #1
   129f8:	f01d fdc9 	bl	3058e <memcpy>
		net_buf_unref(rsp);
   129fc:	4638      	mov	r0, r7
   129fe:	f008 fdd3 	bl	1b5a8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   12a02:	4435      	add	r5, r6
		len -= count;
   12a04:	1ba4      	subs	r4, r4, r6
   12a06:	e7e1      	b.n	129cc <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   12a08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   12a0c:	e7e0      	b.n	129d0 <bt_hci_le_rand+0x14>
   12a0e:	bf00      	nop
   12a10:	20008000 	.word	0x20008000

00012a14 <bt_hci_le_enh_conn_complete>:
{
   12a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a18:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12a1a:	f8b0 9001 	ldrh.w	r9, [r0, #1]
   12a1e:	2600      	movs	r6, #0
	handle |= ~BT_ACL_HANDLE_MASK;
   12a20:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   12a24:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   12a28:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   12a2a:	4aa9      	ldr	r2, [pc, #676]	; (12cd0 <bt_hci_le_enh_conn_complete+0x2bc>)
   12a2c:	b29b      	uxth	r3, r3
   12a2e:	8811      	ldrh	r1, [r2, #0]
{
   12a30:	af02      	add	r7, sp, #8
		if (disconnected_handles[i] == handle) {
   12a32:	4299      	cmp	r1, r3
			disconnected_handles[i] = 0;
   12a34:	bf04      	itt	eq
   12a36:	8016      	strheq	r6, [r2, #0]
			return true;
   12a38:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   12a3a:	f000 ff99 	bl	13970 <bt_id_pending_keys_update>
	if (evt->status) {
   12a3e:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12a40:	fa1f f889 	uxth.w	r8, r9
	if (evt->status) {
   12a44:	b3a4      	cbz	r4, 12ab0 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12a46:	2c3c      	cmp	r4, #60	; 0x3c
   12a48:	d122      	bne.n	12a90 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12a4a:	f001 fafb 	bl	14044 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12a4e:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12a52:	3010      	adds	r0, #16
   12a54:	f019 face 	bl	2bff4 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12a58:	2000      	movs	r0, #0
   12a5a:	f7ff faa1 	bl	11fa0 <find_pending_connect.part.0>
		if (!conn) {
   12a5e:	4605      	mov	r5, r0
   12a60:	b970      	cbnz	r0, 12a80 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   12a62:	4b9c      	ldr	r3, [pc, #624]	; (12cd4 <bt_hci_le_enh_conn_complete+0x2c0>)
   12a64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a68:	627b      	str	r3, [r7, #36]	; 0x24
   12a6a:	2302      	movs	r3, #2
   12a6c:	489a      	ldr	r0, [pc, #616]	; (12cd8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12a6e:	623b      	str	r3, [r7, #32]
   12a70:	f107 0220 	add.w	r2, r7, #32
   12a74:	f019 fabb 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   12a78:	372c      	adds	r7, #44	; 0x2c
   12a7a:	46bd      	mov	sp, r7
   12a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12a80:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12a82:	2100      	movs	r1, #0
   12a84:	f002 fa26 	bl	14ed4 <bt_conn_set_state>
		bt_conn_unref(conn);
   12a88:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   12a8a:	f002 f9eb 	bl	14e64 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   12a8e:	e7f3      	b.n	12a78 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   12a90:	466d      	mov	r5, sp
   12a92:	b088      	sub	sp, #32
   12a94:	aa02      	add	r2, sp, #8
   12a96:	4b91      	ldr	r3, [pc, #580]	; (12cdc <bt_hci_le_enh_conn_complete+0x2c8>)
   12a98:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12a9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12aa0:	2303      	movs	r3, #3
   12aa2:	488d      	ldr	r0, [pc, #564]	; (12cd8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12aa4:	f842 3f10 	str.w	r3, [r2, #16]!
   12aa8:	f019 faa1 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12aac:	46ad      	mov	sp, r5
		return;
   12aae:	e7e3      	b.n	12a78 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12ab0:	792b      	ldrb	r3, [r5, #4]
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12ab2:	f105 0a04 	add.w	sl, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   12ab6:	3b02      	subs	r3, #2
   12ab8:	2b01      	cmp	r3, #1
   12aba:	d82c      	bhi.n	12b16 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   12abc:	4651      	mov	r1, sl
   12abe:	f107 0010 	add.w	r0, r7, #16
   12ac2:	f019 fa8d 	bl	2bfe0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12ac6:	7c3b      	ldrb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12ac8:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   12acc:	3b02      	subs	r3, #2
   12ace:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   12ad0:	f107 0009 	add.w	r0, r7, #9
   12ad4:	f019 fa7f 	bl	2bfd6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   12ad8:	2301      	movs	r3, #1
   12ada:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12adc:	78eb      	ldrb	r3, [r5, #3]
   12ade:	2b01      	cmp	r3, #1
   12ae0:	d02e      	beq.n	12b40 <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   12ae2:	4650      	mov	r0, sl
   12ae4:	f7fe fff2 	bl	11acc <bt_addr_le_str>
   12ae8:	466c      	mov	r4, sp
   12aea:	b088      	sub	sp, #32
   12aec:	aa02      	add	r2, sp, #8
   12aee:	4b7c      	ldr	r3, [pc, #496]	; (12ce0 <bt_hci_le_enh_conn_complete+0x2cc>)
   12af0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   12af4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12af8:	f44f 7300 	mov.w	r3, #512	; 0x200
   12afc:	8393      	strh	r3, [r2, #28]
   12afe:	4b79      	ldr	r3, [pc, #484]	; (12ce4 <bt_hci_le_enh_conn_complete+0x2d0>)
   12b00:	4875      	ldr	r0, [pc, #468]	; (12cd8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12b02:	f842 3f10 	str.w	r3, [r2, #16]!
   12b06:	f019 fa72 	bl	2bfee <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   12b0a:	211f      	movs	r1, #31
   12b0c:	46a5      	mov	sp, r4
   12b0e:	4640      	mov	r0, r8
   12b10:	f019 fa88 	bl	2c024 <bt_hci_disconnect>
		return;
   12b14:	e7b0      	b.n	12a78 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12b16:	78eb      	ldrb	r3, [r5, #3]
		bt_addr_le_copy(&id_addr,
   12b18:	4651      	mov	r1, sl
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   12b1a:	2b01      	cmp	r3, #1
   12b1c:	bf04      	itt	eq
   12b1e:	4b72      	ldreq	r3, [pc, #456]	; (12ce8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12b20:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   12b24:	4620      	mov	r0, r4
   12b26:	f019 fbc2 	bl	2c2ae <bt_lookup_id_addr>
   12b2a:	4601      	mov	r1, r0
   12b2c:	f107 0010 	add.w	r0, r7, #16
   12b30:	f019 fa56 	bl	2bfe0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   12b34:	4651      	mov	r1, sl
   12b36:	f107 0008 	add.w	r0, r7, #8
   12b3a:	f019 fa51 	bl	2bfe0 <bt_addr_le_copy>
   12b3e:	e7cd      	b.n	12adc <bt_hci_le_enh_conn_complete+0xc8>
   12b40:	f107 0010 	add.w	r0, r7, #16
   12b44:	f7ff fa2c 	bl	11fa0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b48:	78eb      	ldrb	r3, [r5, #3]
   12b4a:	4604      	mov	r4, r0
   12b4c:	2b01      	cmp	r3, #1
   12b4e:	d10a      	bne.n	12b66 <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12b50:	f001 fa78 	bl	14044 <bt_le_adv_lookup_legacy>
   12b54:	4683      	mov	fp, r0
   12b56:	f06f 0180 	mvn.w	r1, #128	; 0x80
   12b5a:	3010      	adds	r0, #16
   12b5c:	f019 fa4a 	bl	2bff4 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   12b60:	4658      	mov	r0, fp
   12b62:	f019 fcc5 	bl	2c4f0 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   12b66:	2c00      	cmp	r4, #0
   12b68:	d0bb      	beq.n	12ae2 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   12b6a:	4620      	mov	r0, r4
	conn->err = 0U;
   12b6c:	2200      	movs	r2, #0
	conn->handle = handle;
   12b6e:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   12b72:	f107 0110 	add.w	r1, r7, #16
   12b76:	f019 fa33 	bl	2bfe0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   12b7a:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   12b7e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   12b82:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   12b86:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   12b8a:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   12b8e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   12b92:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   12b94:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b96:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   12b98:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   12b9a:	d116      	bne.n	12bca <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   12b9c:	f107 0108 	add.w	r1, r7, #8
   12ba0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   12ba4:	f019 fa1c 	bl	2bfe0 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12ba8:	f001 fa4c 	bl	14044 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   12bac:	7a21      	ldrb	r1, [r4, #8]
   12bae:	4a4e      	ldr	r2, [pc, #312]	; (12ce8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12bb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   12bb4:	4411      	add	r1, r2
   12bb6:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   12bba:	f019 fa11 	bl	2bfe0 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   12bbe:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   12bc2:	065d      	lsls	r5, r3, #25
   12bc4:	d501      	bpl.n	12bca <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   12bc6:	f001 fc03 	bl	143d0 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   12bca:	2107      	movs	r1, #7
   12bcc:	4620      	mov	r0, r4
   12bce:	f002 f981 	bl	14ed4 <bt_conn_set_state>
	if (is_disconnected) {
   12bd2:	b11e      	cbz	r6, 12bdc <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   12bd4:	2101      	movs	r1, #1
   12bd6:	4620      	mov	r0, r4
   12bd8:	f002 f97c 	bl	14ed4 <bt_conn_set_state>
	bt_conn_connected(conn);
   12bdc:	4620      	mov	r0, r4
   12bde:	f019 fd0d 	bl	2c5fc <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   12be2:	7b63      	ldrb	r3, [r4, #13]
   12be4:	2b07      	cmp	r3, #7
   12be6:	d16e      	bne.n	12cc6 <bt_hci_le_enh_conn_complete+0x2b2>
   12be8:	1d23      	adds	r3, r4, #4
   12bea:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   12bee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12bf2:	4d3d      	ldr	r5, [pc, #244]	; (12ce8 <bt_hci_le_enh_conn_complete+0x2d4>)
   12bf4:	d129      	bne.n	12c4a <bt_hci_le_enh_conn_complete+0x236>
   12bf6:	78e3      	ldrb	r3, [r4, #3]
   12bf8:	b11b      	cbz	r3, 12c02 <bt_hci_le_enh_conn_complete+0x1ee>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   12bfa:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12bfe:	0718      	lsls	r0, r3, #28
   12c00:	d523      	bpl.n	12c4a <bt_hci_le_enh_conn_complete+0x236>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   12c02:	2102      	movs	r1, #2
   12c04:	f242 0016 	movw	r0, #8214	; 0x2016
   12c08:	f7ff fde6 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   12c0c:	4606      	mov	r6, r0
   12c0e:	2800      	cmp	r0, #0
   12c10:	d05b      	beq.n	12cca <bt_hci_le_enh_conn_complete+0x2b6>
   12c12:	2102      	movs	r1, #2
   12c14:	300c      	adds	r0, #12
   12c16:	f008 fde9 	bl	1b7ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   12c1a:	8823      	ldrh	r3, [r4, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12c1c:	2200      	movs	r2, #0
	cp->handle = sys_cpu_to_le16(conn->handle);
   12c1e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   12c20:	4631      	mov	r1, r6
   12c22:	f242 0016 	movw	r0, #8214	; 0x2016
   12c26:	f7ff fe25 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
   12c2a:	b170      	cbz	r0, 12c4a <bt_hci_le_enh_conn_complete+0x236>
			LOG_ERR("Failed read remote features (%d)", err);
   12c2c:	466e      	mov	r6, sp
   12c2e:	b088      	sub	sp, #32
   12c30:	aa02      	add	r2, sp, #8
   12c32:	4b2e      	ldr	r3, [pc, #184]	; (12cec <bt_hci_le_enh_conn_complete+0x2d8>)
   12c34:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c3c:	2303      	movs	r3, #3
   12c3e:	4826      	ldr	r0, [pc, #152]	; (12cd8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c40:	f842 3f10 	str.w	r3, [r2, #16]!
   12c44:	f019 f9d3 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12c48:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   12c4a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   12c4e:	07d9      	lsls	r1, r3, #31
   12c50:	d516      	bpl.n	12c80 <bt_hci_le_enh_conn_complete+0x26c>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   12c52:	2100      	movs	r1, #0
   12c54:	2302      	movs	r3, #2
   12c56:	4620      	mov	r0, r4
   12c58:	461a      	mov	r2, r3
   12c5a:	9100      	str	r1, [sp, #0]
   12c5c:	f019 fa1b 	bl	2c096 <bt_le_set_phy>
		if (err) {
   12c60:	b170      	cbz	r0, 12c80 <bt_hci_le_enh_conn_complete+0x26c>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   12c62:	466e      	mov	r6, sp
   12c64:	b088      	sub	sp, #32
   12c66:	aa02      	add	r2, sp, #8
   12c68:	4b21      	ldr	r3, [pc, #132]	; (12cf0 <bt_hci_le_enh_conn_complete+0x2dc>)
   12c6a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12c6e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12c72:	2303      	movs	r3, #3
   12c74:	4818      	ldr	r0, [pc, #96]	; (12cd8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12c76:	f842 3f10 	str.w	r3, [r2, #16]!
   12c7a:	f019 f9b8 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12c7e:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   12c80:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   12c84:	069a      	lsls	r2, r3, #26
   12c86:	d51e      	bpl.n	12cc6 <bt_hci_le_enh_conn_complete+0x2b2>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   12c88:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   12c8c:	689b      	ldr	r3, [r3, #8]
   12c8e:	079b      	lsls	r3, r3, #30
   12c90:	d519      	bpl.n	12cc6 <bt_hci_le_enh_conn_complete+0x2b2>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   12c92:	1db9      	adds	r1, r7, #6
   12c94:	1d38      	adds	r0, r7, #4
   12c96:	f7ff fe69 	bl	1296c <hci_le_read_max_data_len>
			if (!err) {
   12c9a:	b9a0      	cbnz	r0, 12cc6 <bt_hci_le_enh_conn_complete+0x2b2>
				err = bt_le_set_data_len(conn,
   12c9c:	4620      	mov	r0, r4
   12c9e:	88fa      	ldrh	r2, [r7, #6]
   12ca0:	88b9      	ldrh	r1, [r7, #4]
   12ca2:	f019 f9da 	bl	2c05a <bt_le_set_data_len>
				if (err) {
   12ca6:	b170      	cbz	r0, 12cc6 <bt_hci_le_enh_conn_complete+0x2b2>
					LOG_ERR("Failed to set data len (%d)", err);
   12ca8:	466d      	mov	r5, sp
   12caa:	b088      	sub	sp, #32
   12cac:	aa02      	add	r2, sp, #8
   12cae:	4b11      	ldr	r3, [pc, #68]	; (12cf4 <bt_hci_le_enh_conn_complete+0x2e0>)
   12cb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12cb4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12cb8:	2303      	movs	r3, #3
   12cba:	4807      	ldr	r0, [pc, #28]	; (12cd8 <bt_hci_le_enh_conn_complete+0x2c4>)
   12cbc:	f842 3f10 	str.w	r3, [r2, #16]!
   12cc0:	f019 f995 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12cc4:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   12cc6:	4620      	mov	r0, r4
   12cc8:	e6df      	b.n	12a8a <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   12cca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12cce:	e7ad      	b.n	12c2c <bt_hci_le_enh_conn_complete+0x218>
   12cd0:	20021b12 	.word	0x20021b12
   12cd4:	00034adb 	.word	0x00034adb
   12cd8:	000314fc 	.word	0x000314fc
   12cdc:	00034afc 	.word	0x00034afc
   12ce0:	00034b15 	.word	0x00034b15
   12ce4:	01000003 	.word	0x01000003
   12ce8:	20008000 	.word	0x20008000
   12cec:	00034b31 	.word	0x00034b31
   12cf0:	00034b52 	.word	0x00034b52
   12cf4:	00034b69 	.word	0x00034b69

00012cf8 <le_legacy_conn_complete>:
{
   12cf8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   12cfa:	68c1      	ldr	r1, [r0, #12]
{
   12cfc:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   12cfe:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12d00:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   12d02:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   12d06:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12d0a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   12d0c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   12d10:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12d14:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   12d18:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   12d1c:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   12d20:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   12d24:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   12d28:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   12d2c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   12d30:	7b4b      	ldrb	r3, [r1, #13]
   12d32:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   12d36:	f019 f953 	bl	2bfe0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   12d3a:	4907      	ldr	r1, [pc, #28]	; (12d58 <le_legacy_conn_complete+0x60>)
   12d3c:	f10d 000b 	add.w	r0, sp, #11
   12d40:	f019 f949 	bl	2bfd6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   12d44:	f10d 0011 	add.w	r0, sp, #17
   12d48:	f019 f945 	bl	2bfd6 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   12d4c:	4668      	mov	r0, sp
   12d4e:	f7ff fe61 	bl	12a14 <bt_hci_le_enh_conn_complete>
}
   12d52:	b009      	add	sp, #36	; 0x24
   12d54:	f85d fb04 	ldr.w	pc, [sp], #4
   12d58:	00034602 	.word	0x00034602

00012d5c <bt_security_err_get>:
	switch (hci_err) {
   12d5c:	2829      	cmp	r0, #41	; 0x29
   12d5e:	bf9a      	itte	ls
   12d60:	4b01      	ldrls	r3, [pc, #4]	; (12d68 <bt_security_err_get+0xc>)
   12d62:	5c18      	ldrbls	r0, [r3, r0]
{
   12d64:	2009      	movhi	r0, #9
}
   12d66:	4770      	bx	lr
   12d68:	00034e1e 	.word	0x00034e1e

00012d6c <hci_encrypt_key_refresh_complete>:
{
   12d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d6e:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   12d70:	68c3      	ldr	r3, [r0, #12]
{
   12d72:	af00      	add	r7, sp, #0
	handle = sys_le16_to_cpu(evt->handle);
   12d74:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   12d78:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   12d7a:	4630      	mov	r0, r6
   12d7c:	f002 f8a2 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   12d80:	4604      	mov	r4, r0
   12d82:	b988      	cbnz	r0, 12da8 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12d84:	466c      	mov	r4, sp
   12d86:	b088      	sub	sp, #32
   12d88:	466a      	mov	r2, sp
   12d8a:	4b1f      	ldr	r3, [pc, #124]	; (12e08 <hci_encrypt_key_refresh_complete+0x9c>)
   12d8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d90:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12d94:	2303      	movs	r3, #3
   12d96:	481d      	ldr	r0, [pc, #116]	; (12e0c <hci_encrypt_key_refresh_complete+0xa0>)
   12d98:	f842 3f10 	str.w	r3, [r2, #16]!
   12d9c:	f019 f927 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12da0:	46a5      	mov	sp, r4
}
   12da2:	371c      	adds	r7, #28
   12da4:	46bd      	mov	sp, r7
   12da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   12da8:	b15d      	cbz	r5, 12dc2 <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12daa:	4628      	mov	r0, r5
   12dac:	f7ff ffd6 	bl	12d5c <bt_security_err_get>
   12db0:	4629      	mov	r1, r5
   12db2:	4602      	mov	r2, r0
   12db4:	4620      	mov	r0, r4
   12db6:	f002 fad5 	bl	15364 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12dba:	4620      	mov	r0, r4
   12dbc:	f002 f852 	bl	14e64 <bt_conn_unref>
   12dc0:	e7ef      	b.n	12da2 <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   12dc2:	7883      	ldrb	r3, [r0, #2]
   12dc4:	2b01      	cmp	r3, #1
   12dc6:	d1f0      	bne.n	12daa <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   12dc8:	f007 fa32 	bl	1a230 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12dcc:	4620      	mov	r0, r4
   12dce:	f019 f8de 	bl	2bf8e <update_sec_level>
   12dd2:	2800      	cmp	r0, #0
   12dd4:	d1e9      	bne.n	12daa <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12dd6:	2005      	movs	r0, #5
   12dd8:	f7ff ffc0 	bl	12d5c <bt_security_err_get>
   12ddc:	2105      	movs	r1, #5
   12dde:	4602      	mov	r2, r0
   12de0:	4620      	mov	r0, r4
   12de2:	f002 fabf 	bl	15364 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12de6:	4b0a      	ldr	r3, [pc, #40]	; (12e10 <hci_encrypt_key_refresh_complete+0xa4>)
   12de8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12dec:	617b      	str	r3, [r7, #20]
   12dee:	2302      	movs	r3, #2
   12df0:	4806      	ldr	r0, [pc, #24]	; (12e0c <hci_encrypt_key_refresh_complete+0xa0>)
   12df2:	613b      	str	r3, [r7, #16]
   12df4:	f107 0210 	add.w	r2, r7, #16
   12df8:	f019 f8f9 	bl	2bfee <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12dfc:	2105      	movs	r1, #5
   12dfe:	4620      	mov	r0, r4
   12e00:	f019 fc05 	bl	2c60e <bt_conn_disconnect>
   12e04:	e7d9      	b.n	12dba <hci_encrypt_key_refresh_complete+0x4e>
   12e06:	bf00      	nop
   12e08:	000348c7 	.word	0x000348c7
   12e0c:	000314fc 	.word	0x000314fc
   12e10:	00034b85 	.word	0x00034b85

00012e14 <hci_encrypt_change>:
{
   12e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e18:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   12e1a:	68c6      	ldr	r6, [r0, #12]
{
   12e1c:	af00      	add	r7, sp, #0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   12e1e:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   12e22:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   12e24:	4640      	mov	r0, r8
   12e26:	f002 f84d 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   12e2a:	4604      	mov	r4, r0
   12e2c:	b990      	cbnz	r0, 12e54 <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   12e2e:	466c      	mov	r4, sp
   12e30:	b088      	sub	sp, #32
   12e32:	466a      	mov	r2, sp
   12e34:	4b23      	ldr	r3, [pc, #140]	; (12ec4 <hci_encrypt_change+0xb0>)
   12e36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12e3a:	e9c2 3805 	strd	r3, r8, [r2, #20]
   12e3e:	2303      	movs	r3, #3
   12e40:	4821      	ldr	r0, [pc, #132]	; (12ec8 <hci_encrypt_change+0xb4>)
   12e42:	f842 3f10 	str.w	r3, [r2, #16]!
   12e46:	f019 f8d2 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12e4a:	46a5      	mov	sp, r4
}
   12e4c:	3718      	adds	r7, #24
   12e4e:	46bd      	mov	sp, r7
   12e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   12e54:	b15d      	cbz	r5, 12e6e <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   12e56:	4628      	mov	r0, r5
   12e58:	f7ff ff80 	bl	12d5c <bt_security_err_get>
   12e5c:	4629      	mov	r1, r5
   12e5e:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e60:	4620      	mov	r0, r4
   12e62:	f002 fa7f 	bl	15364 <bt_conn_security_changed>
	bt_conn_unref(conn);
   12e66:	4620      	mov	r0, r4
   12e68:	f001 fffc 	bl	14e64 <bt_conn_unref>
   12e6c:	e7ee      	b.n	12e4c <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   12e6e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   12e70:	78f3      	ldrb	r3, [r6, #3]
	if (conn->type == BT_CONN_TYPE_LE) {
   12e72:	2a01      	cmp	r2, #1
	conn->encrypt = evt->encrypt;
   12e74:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   12e76:	d005      	beq.n	12e84 <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e78:	2000      	movs	r0, #0
   12e7a:	f7ff ff6f 	bl	12d5c <bt_security_err_get>
   12e7e:	2100      	movs	r1, #0
   12e80:	4602      	mov	r2, r0
   12e82:	e7ed      	b.n	12e60 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   12e84:	b10b      	cbz	r3, 12e8a <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   12e86:	f007 f9d3 	bl	1a230 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   12e8a:	4620      	mov	r0, r4
   12e8c:	f019 f87f 	bl	2bf8e <update_sec_level>
   12e90:	2800      	cmp	r0, #0
   12e92:	d1f1      	bne.n	12e78 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   12e94:	2005      	movs	r0, #5
   12e96:	f7ff ff61 	bl	12d5c <bt_security_err_get>
   12e9a:	2105      	movs	r1, #5
   12e9c:	4602      	mov	r2, r0
   12e9e:	4620      	mov	r0, r4
   12ea0:	f002 fa60 	bl	15364 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   12ea4:	4b09      	ldr	r3, [pc, #36]	; (12ecc <hci_encrypt_change+0xb8>)
   12ea6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12eaa:	617b      	str	r3, [r7, #20]
   12eac:	2302      	movs	r3, #2
   12eae:	4806      	ldr	r0, [pc, #24]	; (12ec8 <hci_encrypt_change+0xb4>)
   12eb0:	613b      	str	r3, [r7, #16]
   12eb2:	f107 0210 	add.w	r2, r7, #16
   12eb6:	f019 f89a 	bl	2bfee <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   12eba:	2105      	movs	r1, #5
   12ebc:	4620      	mov	r0, r4
   12ebe:	f019 fba6 	bl	2c60e <bt_conn_disconnect>
   12ec2:	e7d0      	b.n	12e66 <hci_encrypt_change+0x52>
   12ec4:	000348c7 	.word	0x000348c7
   12ec8:	000314fc 	.word	0x000314fc
   12ecc:	00034b85 	.word	0x00034b85

00012ed0 <bt_send>:
	return bt_dev.drv->send(buf);
   12ed0:	4b02      	ldr	r3, [pc, #8]	; (12edc <bt_send+0xc>)
   12ed2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   12ed6:	695b      	ldr	r3, [r3, #20]
   12ed8:	4718      	bx	r3
   12eda:	bf00      	nop
   12edc:	20008000 	.word	0x20008000

00012ee0 <bt_hci_cmd_send>:
{
   12ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ee2:	4605      	mov	r5, r0
	if (!buf) {
   12ee4:	460c      	mov	r4, r1
{
   12ee6:	af00      	add	r7, sp, #0
	if (!buf) {
   12ee8:	b919      	cbnz	r1, 12ef2 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   12eea:	f7ff fc75 	bl	127d8 <bt_hci_cmd_create>
		if (!buf) {
   12eee:	4604      	mov	r4, r0
   12ef0:	b318      	cbz	r0, 12f3a <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   12ef2:	f640 4335 	movw	r3, #3125	; 0xc35
   12ef6:	429d      	cmp	r5, r3
   12ef8:	d119      	bne.n	12f2e <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   12efa:	4620      	mov	r0, r4
   12efc:	f7ff ffe8 	bl	12ed0 <bt_send>
		if (err) {
   12f00:	4605      	mov	r5, r0
   12f02:	b188      	cbz	r0, 12f28 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   12f04:	466e      	mov	r6, sp
   12f06:	b088      	sub	sp, #32
   12f08:	466a      	mov	r2, sp
   12f0a:	4b0d      	ldr	r3, [pc, #52]	; (12f40 <bt_hci_cmd_send+0x60>)
   12f0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12f10:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12f14:	2303      	movs	r3, #3
   12f16:	480b      	ldr	r0, [pc, #44]	; (12f44 <bt_hci_cmd_send+0x64>)
   12f18:	f842 3f10 	str.w	r3, [r2, #16]!
   12f1c:	f019 f867 	bl	2bfee <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   12f20:	4620      	mov	r0, r4
   12f22:	46b5      	mov	sp, r6
   12f24:	f008 fb40 	bl	1b5a8 <net_buf_unref>
}
   12f28:	4628      	mov	r0, r5
   12f2a:	46bd      	mov	sp, r7
   12f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   12f2e:	4621      	mov	r1, r4
   12f30:	4805      	ldr	r0, [pc, #20]	; (12f48 <bt_hci_cmd_send+0x68>)
   12f32:	f008 fb13 	bl	1b55c <net_buf_put>
	return 0;
   12f36:	2500      	movs	r5, #0
   12f38:	e7f6      	b.n	12f28 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   12f3a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   12f3e:	e7f3      	b.n	12f28 <bt_hci_cmd_send+0x48>
   12f40:	00034bab 	.word	0x00034bab
   12f44:	000314fc 	.word	0x000314fc
   12f48:	20008144 	.word	0x20008144

00012f4c <bt_hci_host_num_completed_packets>:
{
   12f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f50:	b086      	sub	sp, #24
   12f52:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
   12f54:	8b45      	ldrh	r5, [r0, #26]
	uint8_t index = acl(buf)->index;
   12f56:	7e46      	ldrb	r6, [r0, #25]
{
   12f58:	af00      	add	r7, sp, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   12f5a:	7a80      	ldrb	r0, [r0, #10]
   12f5c:	f008 f8ea 	bl	1b134 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   12f60:	4621      	mov	r1, r4
   12f62:	f01d f948 	bl	301f6 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   12f66:	4b2d      	ldr	r3, [pc, #180]	; (1301c <bt_hci_host_num_completed_packets+0xd0>)
   12f68:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   12f6c:	069b      	lsls	r3, r3, #26
   12f6e:	d513      	bpl.n	12f98 <bt_hci_host_num_completed_packets+0x4c>
	conn = bt_conn_lookup_index(index);
   12f70:	4630      	mov	r0, r6
   12f72:	f002 fc63 	bl	1583c <bt_conn_lookup_index>
	if (!conn) {
   12f76:	4604      	mov	r4, r0
   12f78:	b990      	cbnz	r0, 12fa0 <bt_hci_host_num_completed_packets+0x54>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   12f7a:	466c      	mov	r4, sp
   12f7c:	b088      	sub	sp, #32
   12f7e:	466a      	mov	r2, sp
   12f80:	4b27      	ldr	r3, [pc, #156]	; (13020 <bt_hci_host_num_completed_packets+0xd4>)
   12f82:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   12f86:	e9c2 3605 	strd	r3, r6, [r2, #20]
   12f8a:	2303      	movs	r3, #3
   12f8c:	4825      	ldr	r0, [pc, #148]	; (13024 <bt_hci_host_num_completed_packets+0xd8>)
   12f8e:	f842 3f10 	str.w	r3, [r2, #16]!
   12f92:	f019 f82c 	bl	2bfee <z_log_msg_static_create.constprop.0>
   12f96:	46a5      	mov	sp, r4
}
   12f98:	3718      	adds	r7, #24
   12f9a:	46bd      	mov	sp, r7
   12f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED &&
   12fa0:	7b43      	ldrb	r3, [r0, #13]
   12fa2:	3b07      	subs	r3, #7
   12fa4:	2b01      	cmp	r3, #1
   12fa6:	d90e      	bls.n	12fc6 <bt_hci_host_num_completed_packets+0x7a>
		LOG_WRN("Not reporting packet for non-connected conn");
   12fa8:	4b1f      	ldr	r3, [pc, #124]	; (13028 <bt_hci_host_num_completed_packets+0xdc>)
   12faa:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12fae:	617b      	str	r3, [r7, #20]
   12fb0:	2302      	movs	r3, #2
   12fb2:	481c      	ldr	r0, [pc, #112]	; (13024 <bt_hci_host_num_completed_packets+0xd8>)
   12fb4:	613b      	str	r3, [r7, #16]
   12fb6:	f107 0210 	add.w	r2, r7, #16
   12fba:	f019 f818 	bl	2bfee <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   12fbe:	4620      	mov	r0, r4
   12fc0:	f001 ff50 	bl	14e64 <bt_conn_unref>
		return;
   12fc4:	e7e8      	b.n	12f98 <bt_hci_host_num_completed_packets+0x4c>
	bt_conn_unref(conn);
   12fc6:	f001 ff4d 	bl	14e64 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   12fca:	2105      	movs	r1, #5
   12fcc:	f640 4035 	movw	r0, #3125	; 0xc35
   12fd0:	f7ff fc02 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   12fd4:	4604      	mov	r4, r0
   12fd6:	b958      	cbnz	r0, 12ff0 <bt_hci_host_num_completed_packets+0xa4>
		LOG_ERR("Unable to allocate new HCI command");
   12fd8:	4b14      	ldr	r3, [pc, #80]	; (1302c <bt_hci_host_num_completed_packets+0xe0>)
   12fda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12fde:	617b      	str	r3, [r7, #20]
   12fe0:	2302      	movs	r3, #2
   12fe2:	4810      	ldr	r0, [pc, #64]	; (13024 <bt_hci_host_num_completed_packets+0xd8>)
   12fe4:	613b      	str	r3, [r7, #16]
   12fe6:	f107 0210 	add.w	r2, r7, #16
   12fea:	f019 f800 	bl	2bfee <z_log_msg_static_create.constprop.0>
		return;
   12fee:	e7d3      	b.n	12f98 <bt_hci_host_num_completed_packets+0x4c>
	return net_buf_simple_add(&buf->b, len);
   12ff0:	f100 080c 	add.w	r8, r0, #12
   12ff4:	2101      	movs	r1, #1
   12ff6:	4640      	mov	r0, r8
   12ff8:	f008 fbf8 	bl	1b7ec <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   12ffc:	2601      	movs	r6, #1
   12ffe:	2104      	movs	r1, #4
   13000:	7006      	strb	r6, [r0, #0]
   13002:	4640      	mov	r0, r8
   13004:	f008 fbf2 	bl	1b7ec <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
   13008:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
   1300a:	8005      	strh	r5, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   1300c:	7086      	strb	r6, [r0, #2]
   1300e:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   13010:	4621      	mov	r1, r4
   13012:	f640 4035 	movw	r0, #3125	; 0xc35
   13016:	f7ff ff63 	bl	12ee0 <bt_hci_cmd_send>
   1301a:	e7bd      	b.n	12f98 <bt_hci_host_num_completed_packets+0x4c>
   1301c:	20008000 	.word	0x20008000
   13020:	00034bcd 	.word	0x00034bcd
   13024:	000314fc 	.word	0x000314fc
   13028:	00034bf6 	.word	0x00034bf6
   1302c:	00034c22 	.word	0x00034c22

00013030 <le_ltk_request>:
{
   13030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13034:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   13036:	68c4      	ldr	r4, [r0, #12]
{
   13038:	af02      	add	r7, sp, #8
	handle = sys_le16_to_cpu(evt->handle);
   1303a:	8826      	ldrh	r6, [r4, #0]
   1303c:	fa1f f886 	uxth.w	r8, r6
	conn = bt_conn_lookup_handle(handle);
   13040:	4640      	mov	r0, r8
   13042:	f001 ff3f 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   13046:	4605      	mov	r5, r0
   13048:	b990      	cbnz	r0, 13070 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1304a:	466c      	mov	r4, sp
   1304c:	b088      	sub	sp, #32
   1304e:	aa02      	add	r2, sp, #8
   13050:	4b2c      	ldr	r3, [pc, #176]	; (13104 <le_ltk_request+0xd4>)
   13052:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13056:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1305a:	2303      	movs	r3, #3
   1305c:	482a      	ldr	r0, [pc, #168]	; (13108 <le_ltk_request+0xd8>)
   1305e:	f842 3f10 	str.w	r3, [r2, #16]!
   13062:	f018 ffc4 	bl	2bfee <z_log_msg_static_create.constprop.0>
   13066:	46a5      	mov	sp, r4
}
   13068:	3728      	adds	r7, #40	; 0x28
   1306a:	46bd      	mov	sp, r7
   1306c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   13070:	f8d4 2002 	ldr.w	r2, [r4, #2]
   13074:	f8d4 3006 	ldr.w	r3, [r4, #6]
   13078:	9701      	str	r7, [sp, #4]
   1307a:	8961      	ldrh	r1, [r4, #10]
   1307c:	9100      	str	r1, [sp, #0]
   1307e:	f01a fc3e 	bl	2d8fe <bt_smp_request_ltk>
   13082:	b370      	cbz	r0, 130e2 <le_ltk_request+0xb2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   13084:	2112      	movs	r1, #18
   13086:	f242 001a 	movw	r0, #8218	; 0x201a
   1308a:	f7ff fba5 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   1308e:	4604      	mov	r4, r0
   13090:	b970      	cbnz	r0, 130b0 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   13092:	4b1e      	ldr	r3, [pc, #120]	; (1310c <le_ltk_request+0xdc>)
   13094:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13098:	627b      	str	r3, [r7, #36]	; 0x24
   1309a:	2302      	movs	r3, #2
   1309c:	481a      	ldr	r0, [pc, #104]	; (13108 <le_ltk_request+0xd8>)
   1309e:	623b      	str	r3, [r7, #32]
   130a0:	f107 0220 	add.w	r2, r7, #32
   130a4:	f018 ffa3 	bl	2bfee <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   130a8:	4628      	mov	r0, r5
   130aa:	f001 fedb 	bl	14e64 <bt_conn_unref>
   130ae:	e7db      	b.n	13068 <le_ltk_request+0x38>
   130b0:	2112      	movs	r1, #18
   130b2:	300c      	adds	r0, #12
   130b4:	f008 fb9a 	bl	1b7ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   130b8:	4603      	mov	r3, r0
   130ba:	463a      	mov	r2, r7
   130bc:	f823 6b02 	strh.w	r6, [r3], #2
   130c0:	f107 0c10 	add.w	ip, r7, #16
   130c4:	4616      	mov	r6, r2
   130c6:	ce03      	ldmia	r6!, {r0, r1}
   130c8:	4566      	cmp	r6, ip
   130ca:	6018      	str	r0, [r3, #0]
   130cc:	6059      	str	r1, [r3, #4]
   130ce:	4632      	mov	r2, r6
   130d0:	f103 0308 	add.w	r3, r3, #8
   130d4:	d1f6      	bne.n	130c4 <le_ltk_request+0x94>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   130d6:	4621      	mov	r1, r4
   130d8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130dc:	f7ff ff00 	bl	12ee0 <bt_hci_cmd_send>
   130e0:	e7e2      	b.n	130a8 <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   130e2:	2102      	movs	r1, #2
   130e4:	f242 001b 	movw	r0, #8219	; 0x201b
   130e8:	f7ff fb76 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   130ec:	4604      	mov	r4, r0
   130ee:	2800      	cmp	r0, #0
   130f0:	d0cf      	beq.n	13092 <le_ltk_request+0x62>
   130f2:	2102      	movs	r1, #2
   130f4:	300c      	adds	r0, #12
   130f6:	f008 fb79 	bl	1b7ec <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130fa:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   130fc:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   130fe:	f242 001b 	movw	r0, #8219	; 0x201b
   13102:	e7eb      	b.n	130dc <le_ltk_request+0xac>
   13104:	000348a3 	.word	0x000348a3
   13108:	000314fc 	.word	0x000314fc
   1310c:	00034c45 	.word	0x00034c45

00013110 <le_conn_param_req>:
{
   13110:	b5f0      	push	{r4, r5, r6, r7, lr}
   13112:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   13114:	68c3      	ldr	r3, [r0, #12]
{
   13116:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   13118:	78d9      	ldrb	r1, [r3, #3]
   1311a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1311c:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1311e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13122:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   13124:	7959      	ldrb	r1, [r3, #5]
   13126:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
   13128:	b2b4      	uxth	r4, r6
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1312a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1312e:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   13130:	799a      	ldrb	r2, [r3, #6]
   13132:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
   13134:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
   13136:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1313a:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1313c:	7a1a      	ldrb	r2, [r3, #8]
   1313e:	7a5b      	ldrb	r3, [r3, #9]
   13140:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   13144:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   13146:	f001 febd 	bl	14ec4 <bt_conn_lookup_handle>
	if (!conn) {
   1314a:	4605      	mov	r5, r0
   1314c:	b9a8      	cbnz	r0, 1317a <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1314e:	466d      	mov	r5, sp
   13150:	b088      	sub	sp, #32
   13152:	466a      	mov	r2, sp
   13154:	4b1e      	ldr	r3, [pc, #120]	; (131d0 <le_conn_param_req+0xc0>)
   13156:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1315a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1315e:	2303      	movs	r3, #3
   13160:	481c      	ldr	r0, [pc, #112]	; (131d4 <le_conn_param_req+0xc4>)
   13162:	f842 3f10 	str.w	r3, [r2, #16]!
   13166:	f018 ff42 	bl	2bfee <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1316a:	2102      	movs	r1, #2
   1316c:	46ad      	mov	sp, r5
   1316e:	4620      	mov	r0, r4
   13170:	f018 ffdd 	bl	2c12e <le_conn_param_neg_reply>
}
   13174:	370c      	adds	r7, #12
   13176:	46bd      	mov	sp, r7
   13178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1317a:	4639      	mov	r1, r7
   1317c:	f002 f85a 	bl	15234 <le_param_req>
   13180:	b938      	cbnz	r0, 13192 <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   13182:	211e      	movs	r1, #30
   13184:	4620      	mov	r0, r4
   13186:	f018 ffd2 	bl	2c12e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1318a:	4628      	mov	r0, r5
   1318c:	f001 fe6a 	bl	14e64 <bt_conn_unref>
   13190:	e7f0      	b.n	13174 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   13192:	210e      	movs	r1, #14
   13194:	f242 0020 	movw	r0, #8224	; 0x2020
   13198:	f7ff fb1e 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   1319c:	4604      	mov	r4, r0
   1319e:	2800      	cmp	r0, #0
   131a0:	d0f3      	beq.n	1318a <le_conn_param_req+0x7a>
   131a2:	210e      	movs	r1, #14
   131a4:	300c      	adds	r0, #12
   131a6:	f008 fb21 	bl	1b7ec <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   131aa:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   131ac:	8006      	strh	r6, [r0, #0]
   131ae:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   131b2:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   131b4:	4621      	mov	r1, r4
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   131b6:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   131b8:	887b      	ldrh	r3, [r7, #2]
   131ba:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   131bc:	88bb      	ldrh	r3, [r7, #4]
   131be:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   131c0:	88fb      	ldrh	r3, [r7, #6]
   131c2:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   131c4:	f242 0020 	movw	r0, #8224	; 0x2020
   131c8:	f7ff fe8a 	bl	12ee0 <bt_hci_cmd_send>
   131cc:	e7dd      	b.n	1318a <le_conn_param_req+0x7a>
   131ce:	bf00      	nop
   131d0:	000348a3 	.word	0x000348a3
   131d4:	000314fc 	.word	0x000314fc

000131d8 <hci_tx_thread>:
{
   131d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   131dc:	f8df 8154 	ldr.w	r8, [pc, #340]	; 13334 <hci_tx_thread+0x15c>
{
   131e0:	b087      	sub	sp, #28
		BT_ASSERT(err == 0);
   131e2:	f8df 9154 	ldr.w	r9, [pc, #340]	; 13338 <hci_tx_thread+0x160>
{
   131e6:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   131e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   131ec:	4853      	ldr	r0, [pc, #332]	; (1333c <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   131ee:	f36f 3394 	bfc	r3, #14, #7
   131f2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   131f6:	f001 fdd5 	bl	14da4 <bt_conn_prepare_events>
   131fa:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   131fc:	f04f 32ff 	mov.w	r2, #4294967295
   13200:	f04f 33ff 	mov.w	r3, #4294967295
   13204:	4629      	mov	r1, r5
   13206:	484b      	ldr	r0, [pc, #300]	; (13334 <hci_tx_thread+0x15c>)
   13208:	f015 f860 	bl	282cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1320c:	b160      	cbz	r0, 13228 <hci_tx_thread+0x50>
   1320e:	f640 13e6 	movw	r3, #2534	; 0x9e6
   13212:	464a      	mov	r2, r9
   13214:	494a      	ldr	r1, [pc, #296]	; (13340 <hci_tx_thread+0x168>)
   13216:	484b      	ldr	r0, [pc, #300]	; (13344 <hci_tx_thread+0x16c>)
   13218:	f017 fa5f 	bl	2a6da <assert_print>
   1321c:	4040      	eors	r0, r0
   1321e:	f380 8811 	msr	BASEPRI, r0
   13222:	f04f 0003 	mov.w	r0, #3
   13226:	df02      	svc	2
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13228:	f04f 0a03 	mov.w	sl, #3
{
   1322c:	4e41      	ldr	r6, [pc, #260]	; (13334 <hci_tx_thread+0x15c>)
	for (; count; ev++, count--) {
   1322e:	b915      	cbnz	r5, 13236 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   13230:	f013 ff94 	bl	2715c <z_impl_k_yield>
	while (1) {
   13234:	e7d8      	b.n	131e8 <hci_tx_thread+0x10>
		switch (ev->state) {
   13236:	68f3      	ldr	r3, [r6, #12]
   13238:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1323c:	2b01      	cmp	r3, #1
   1323e:	d960      	bls.n	13302 <hci_tx_thread+0x12a>
   13240:	2b04      	cmp	r3, #4
   13242:	d168      	bne.n	13316 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   13244:	7b33      	ldrb	r3, [r6, #12]
   13246:	2b00      	cmp	r3, #0
   13248:	d15e      	bne.n	13308 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1324a:	2200      	movs	r2, #0
   1324c:	2300      	movs	r3, #0
   1324e:	483e      	ldr	r0, [pc, #248]	; (13348 <hci_tx_thread+0x170>)
   13250:	f01a fed4 	bl	2dffc <net_buf_get>
	BT_ASSERT(buf);
   13254:	4604      	mov	r4, r0
   13256:	b960      	cbnz	r0, 13272 <hci_tx_thread+0x9a>
   13258:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1325c:	464a      	mov	r2, r9
   1325e:	493b      	ldr	r1, [pc, #236]	; (1334c <hci_tx_thread+0x174>)
   13260:	4838      	ldr	r0, [pc, #224]	; (13344 <hci_tx_thread+0x16c>)
   13262:	f017 fa3a 	bl	2a6da <assert_print>
   13266:	4040      	eors	r0, r0
   13268:	f380 8811 	msr	BASEPRI, r0
   1326c:	f04f 0003 	mov.w	r0, #3
   13270:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   13272:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 13350 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   13276:	f04f 33ff 	mov.w	r3, #4294967295
   1327a:	f04f 32ff 	mov.w	r2, #4294967295
   1327e:	4835      	ldr	r0, [pc, #212]	; (13354 <hci_tx_thread+0x17c>)
   13280:	f012 f9f6 	bl	25670 <z_impl_k_sem_take>
   13284:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   13288:	b18b      	cbz	r3, 132ae <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   1328a:	4b33      	ldr	r3, [pc, #204]	; (13358 <hci_tx_thread+0x180>)
   1328c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13290:	617b      	str	r3, [r7, #20]
   13292:	2302      	movs	r3, #2
   13294:	4831      	ldr	r0, [pc, #196]	; (1335c <hci_tx_thread+0x184>)
   13296:	613b      	str	r3, [r7, #16]
   13298:	f107 0210 	add.w	r2, r7, #16
   1329c:	f018 fea7 	bl	2bfee <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   132a0:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   132a4:	f008 f980 	bl	1b5a8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   132a8:	2300      	movs	r3, #0
   132aa:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   132ae:	4620      	mov	r0, r4
   132b0:	f008 f9be 	bl	1b630 <net_buf_ref>
   132b4:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   132b8:	4620      	mov	r0, r4
   132ba:	f7ff fe09 	bl	12ed0 <bt_send>
	if (err) {
   132be:	b300      	cbz	r0, 13302 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   132c0:	46eb      	mov	fp, sp
   132c2:	b088      	sub	sp, #32
   132c4:	466a      	mov	r2, sp
   132c6:	4b26      	ldr	r3, [pc, #152]	; (13360 <hci_tx_thread+0x188>)
   132c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   132cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   132d0:	2303      	movs	r3, #3
   132d2:	4822      	ldr	r0, [pc, #136]	; (1335c <hci_tx_thread+0x184>)
   132d4:	f842 3f10 	str.w	r3, [r2, #16]!
   132d8:	f018 fe89 	bl	2bfee <z_log_msg_static_create.constprop.0>
   132dc:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   132de:	481d      	ldr	r0, [pc, #116]	; (13354 <hci_tx_thread+0x17c>)
   132e0:	f012 f982 	bl	255e8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   132e4:	4620      	mov	r0, r4
   132e6:	f007 ff2d 	bl	1b144 <net_buf_id>
   132ea:	220c      	movs	r2, #12
   132ec:	4b1d      	ldr	r3, [pc, #116]	; (13364 <hci_tx_thread+0x18c>)
   132ee:	211f      	movs	r1, #31
   132f0:	fb02 3000 	mla	r0, r2, r0, r3
   132f4:	4622      	mov	r2, r4
   132f6:	8840      	ldrh	r0, [r0, #2]
   132f8:	f7ff f8a0 	bl	1243c <hci_cmd_done>
		net_buf_unref(buf);
   132fc:	4620      	mov	r0, r4
   132fe:	f008 f953 	bl	1b5a8 <net_buf_unref>
	for (; count; ev++, count--) {
   13302:	3614      	adds	r6, #20
   13304:	3d01      	subs	r5, #1
   13306:	e792      	b.n	1322e <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   13308:	2b01      	cmp	r3, #1
   1330a:	d1fa      	bne.n	13302 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   1330c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1330e:	3838      	subs	r0, #56	; 0x38
   13310:	f002 f9fe 	bl	15710 <bt_conn_process_tx>
   13314:	e7f5      	b.n	13302 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13316:	466c      	mov	r4, sp
   13318:	b088      	sub	sp, #32
   1331a:	466a      	mov	r2, sp
   1331c:	4912      	ldr	r1, [pc, #72]	; (13368 <hci_tx_thread+0x190>)
   1331e:	480f      	ldr	r0, [pc, #60]	; (1335c <hci_tx_thread+0x184>)
		switch (ev->state) {
   13320:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   13324:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13328:	f842 af10 	str.w	sl, [r2, #16]!
   1332c:	f018 fe5f 	bl	2bfee <z_log_msg_static_create.constprop.0>
   13330:	46a5      	mov	sp, r4
   13332:	e7e6      	b.n	13302 <hci_tx_thread+0x12a>
   13334:	20008488 	.word	0x20008488
   13338:	0003490f 	.word	0x0003490f
   1333c:	2000849c 	.word	0x2000849c
   13340:	000334ff 	.word	0x000334ff
   13344:	00032679 	.word	0x00032679
   13348:	20008144 	.word	0x20008144
   1334c:	00036995 	.word	0x00036995
   13350:	20008000 	.word	0x20008000
   13354:	20008120 	.word	0x20008120
   13358:	00034c5c 	.word	0x00034c5c
   1335c:	000314fc 	.word	0x000314fc
   13360:	00034bab 	.word	0x00034bab
   13364:	2002154c 	.word	0x2002154c
   13368:	00034c77 	.word	0x00034c77

0001336c <hci_event_prio>:
{
   1336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13370:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   13372:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   13376:	4630      	mov	r0, r6
   13378:	f01a fe51 	bl	2e01e <net_buf_simple_headroom>
	state->len = buf->len;
   1337c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   13380:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13382:	f1b8 0f01 	cmp.w	r8, #1
   13386:	d80c      	bhi.n	133a2 <hci_event_prio+0x36>
   13388:	f640 537b 	movw	r3, #3451	; 0xd7b
   1338c:	4a1b      	ldr	r2, [pc, #108]	; (133fc <hci_event_prio+0x90>)
   1338e:	491c      	ldr	r1, [pc, #112]	; (13400 <hci_event_prio+0x94>)
   13390:	481c      	ldr	r0, [pc, #112]	; (13404 <hci_event_prio+0x98>)
   13392:	f017 f9a2 	bl	2a6da <assert_print>
   13396:	4040      	eors	r0, r0
   13398:	f380 8811 	msr	BASEPRI, r0
   1339c:	f04f 0003 	mov.w	r0, #3
   133a0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   133a2:	4630      	mov	r0, r6
   133a4:	2102      	movs	r1, #2
   133a6:	f008 fa03 	bl	1b7b0 <net_buf_simple_pull_mem>
   133aa:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   133ac:	7800      	ldrb	r0, [r0, #0]
   133ae:	f018 fddc 	bl	2bf6a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   133b2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   133b4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   133b6:	d40c      	bmi.n	133d2 <hci_event_prio+0x66>
   133b8:	f640 537f 	movw	r3, #3455	; 0xd7f
   133bc:	4a0f      	ldr	r2, [pc, #60]	; (133fc <hci_event_prio+0x90>)
   133be:	4912      	ldr	r1, [pc, #72]	; (13408 <hci_event_prio+0x9c>)
   133c0:	4810      	ldr	r0, [pc, #64]	; (13404 <hci_event_prio+0x98>)
   133c2:	f017 f98a 	bl	2a6da <assert_print>
   133c6:	4040      	eors	r0, r0
   133c8:	f380 8811 	msr	BASEPRI, r0
   133cc:	f04f 0003 	mov.w	r0, #3
   133d0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   133d2:	2305      	movs	r3, #5
   133d4:	4621      	mov	r1, r4
   133d6:	4a0d      	ldr	r2, [pc, #52]	; (1340c <hci_event_prio+0xa0>)
   133d8:	7838      	ldrb	r0, [r7, #0]
   133da:	f7fe fef5 	bl	121c8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   133de:	07b3      	lsls	r3, r6, #30
   133e0:	d507      	bpl.n	133f2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   133e2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   133e4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   133e8:	fa13 f585 	uxtah	r5, r3, r5
   133ec:	60e5      	str	r5, [r4, #12]
}
   133ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   133f2:	4620      	mov	r0, r4
}
   133f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   133f8:	f008 b8d6 	b.w	1b5a8 <net_buf_unref>
   133fc:	0003490f 	.word	0x0003490f
   13400:	00034943 	.word	0x00034943
   13404:	00032679 	.word	0x00032679
   13408:	00034c98 	.word	0x00034c98
   1340c:	00031ebc 	.word	0x00031ebc

00013410 <bt_recv>:
{
   13410:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13412:	7e03      	ldrb	r3, [r0, #24]
   13414:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   13416:	2b01      	cmp	r3, #1
{
   13418:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1341a:	d006      	beq.n	1342a <bt_recv+0x1a>
   1341c:	2b03      	cmp	r3, #3
   1341e:	d112      	bne.n	13446 <bt_recv+0x36>
			rx_queue_put(buf);
   13420:	f7fe fdfe 	bl	12020 <rx_queue_put>
		return 0;
   13424:	2000      	movs	r0, #0
}
   13426:	46bd      	mov	sp, r7
   13428:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1342a:	68c3      	ldr	r3, [r0, #12]
   1342c:	7818      	ldrb	r0, [r3, #0]
   1342e:	f018 fd9c 	bl	2bf6a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13432:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   13434:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   13436:	d502      	bpl.n	1343e <bt_recv+0x2e>
			hci_event_prio(buf);
   13438:	4620      	mov	r0, r4
   1343a:	f7ff ff97 	bl	1336c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1343e:	07ab      	lsls	r3, r5, #30
   13440:	d5f0      	bpl.n	13424 <bt_recv+0x14>
			rx_queue_put(buf);
   13442:	4620      	mov	r0, r4
   13444:	e7ec      	b.n	13420 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13446:	466d      	mov	r5, sp
   13448:	b088      	sub	sp, #32
   1344a:	466a      	mov	r2, sp
   1344c:	4908      	ldr	r1, [pc, #32]	; (13470 <bt_recv+0x60>)
   1344e:	4809      	ldr	r0, [pc, #36]	; (13474 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   13450:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   13454:	2303      	movs	r3, #3
   13456:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1345a:	f842 3f10 	str.w	r3, [r2, #16]!
   1345e:	f018 fdc6 	bl	2bfee <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   13462:	4620      	mov	r0, r4
   13464:	46ad      	mov	sp, r5
   13466:	f008 f89f 	bl	1b5a8 <net_buf_unref>
		return -EINVAL;
   1346a:	f06f 0015 	mvn.w	r0, #21
   1346e:	e7da      	b.n	13426 <bt_recv+0x16>
   13470:	00034cb1 	.word	0x00034cb1
   13474:	000314fc 	.word	0x000314fc

00013478 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   13478:	4a08      	ldr	r2, [pc, #32]	; (1349c <bt_hci_driver_register+0x24>)
{
   1347a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   1347c:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   13480:	b930      	cbnz	r0, 13490 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   13482:	68d9      	ldr	r1, [r3, #12]
   13484:	b139      	cbz	r1, 13496 <bt_hci_driver_register+0x1e>
   13486:	6959      	ldr	r1, [r3, #20]
   13488:	b129      	cbz	r1, 13496 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1348a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   1348e:	4770      	bx	lr
		return -EALREADY;
   13490:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13494:	4770      	bx	lr
		return -EINVAL;
   13496:	f06f 0015 	mvn.w	r0, #21
}
   1349a:	4770      	bx	lr
   1349c:	20008000 	.word	0x20008000

000134a0 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   134a0:	2104      	movs	r1, #4
   134a2:	4801      	ldr	r0, [pc, #4]	; (134a8 <bt_finalize_init+0x8>)
   134a4:	f018 bd8c 	b.w	2bfc0 <atomic_or>
   134a8:	200080cc 	.word	0x200080cc

000134ac <bt_init.part.0>:
static int bt_init(void)
   134ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		if (!bt_dev.id_count) {
   134ae:	480c      	ldr	r0, [pc, #48]	; (134e0 <bt_init.part.0+0x34>)
   134b0:	79c3      	ldrb	r3, [r0, #7]
   134b2:	b96b      	cbnz	r3, 134d0 <bt_init.part.0+0x24>
			LOG_INF("No ID address. App must call settings_load()");
   134b4:	4b0b      	ldr	r3, [pc, #44]	; (134e4 <bt_init.part.0+0x38>)
   134b6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   134ba:	9305      	str	r3, [sp, #20]
   134bc:	2302      	movs	r3, #2
   134be:	480a      	ldr	r0, [pc, #40]	; (134e8 <bt_init.part.0+0x3c>)
   134c0:	aa04      	add	r2, sp, #16
   134c2:	9304      	str	r3, [sp, #16]
   134c4:	f018 fd93 	bl	2bfee <z_log_msg_static_create.constprop.0>
}
   134c8:	2000      	movs	r0, #0
   134ca:	b007      	add	sp, #28
   134cc:	f85d fb04 	ldr.w	pc, [sp], #4
   134d0:	2108      	movs	r1, #8
   134d2:	30cc      	adds	r0, #204	; 0xcc
   134d4:	f018 fd74 	bl	2bfc0 <atomic_or>
	bt_finalize_init();
   134d8:	f7ff ffe2 	bl	134a0 <bt_finalize_init>
	return 0;
   134dc:	e7f4      	b.n	134c8 <bt_init.part.0+0x1c>
   134de:	bf00      	nop
   134e0:	20008000 	.word	0x20008000
   134e4:	00034cc5 	.word	0x00034cc5
   134e8:	000314fc 	.word	0x000314fc

000134ec <init_work>:
{
   134ec:	b510      	push	{r4, lr}
	err = bt_init();
   134ee:	f7f5 ffbb 	bl	9468 <bt_init>
	if (ready_cb) {
   134f2:	4b03      	ldr	r3, [pc, #12]	; (13500 <init_work+0x14>)
   134f4:	681b      	ldr	r3, [r3, #0]
   134f6:	b113      	cbz	r3, 134fe <init_work+0x12>
}
   134f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   134fc:	4718      	bx	r3
}
   134fe:	bd10      	pop	{r4, pc}
   13500:	200215c4 	.word	0x200215c4

00013504 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   13504:	b5f0      	push	{r4, r5, r6, r7, lr}
   13506:	b08f      	sub	sp, #60	; 0x3c
	int err;

	if (!bt_dev.drv) {
   13508:	4d3d      	ldr	r5, [pc, #244]	; (13600 <bt_enable+0xfc>)
{
   1350a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1350c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   13510:	af08      	add	r7, sp, #32
	if (!bt_dev.drv) {
   13512:	b983      	cbnz	r3, 13536 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   13514:	4b3b      	ldr	r3, [pc, #236]	; (13604 <bt_enable+0x100>)
		return -ENODEV;
   13516:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   1351a:	617b      	str	r3, [r7, #20]
   1351c:	2302      	movs	r3, #2
   1351e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13522:	4839      	ldr	r0, [pc, #228]	; (13608 <bt_enable+0x104>)
   13524:	613b      	str	r3, [r7, #16]
   13526:	f107 0210 	add.w	r2, r7, #16
   1352a:	f018 fd60 	bl	2bfee <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1352e:	4620      	mov	r0, r4
   13530:	371c      	adds	r7, #28
   13532:	46bd      	mov	sp, r7
   13534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13536:	f06f 0102 	mvn.w	r1, #2
   1353a:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   1353e:	f018 fd59 	bl	2bff4 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13542:	2101      	movs	r1, #1
   13544:	f018 fd3c 	bl	2bfc0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13548:	07c3      	lsls	r3, r0, #31
   1354a:	d456      	bmi.n	135fa <bt_enable+0xf6>
		err = bt_settings_init();
   1354c:	f7fe fc0e 	bl	11d6c <bt_settings_init>
		if (err) {
   13550:	4604      	mov	r4, r0
   13552:	2800      	cmp	r0, #0
   13554:	d1eb      	bne.n	1352e <bt_enable+0x2a>
	ready_cb = cb;
   13556:	4b2d      	ldr	r3, [pc, #180]	; (1360c <bt_enable+0x108>)
   13558:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1355a:	2201      	movs	r2, #1
   1355c:	f505 7090 	add.w	r0, r5, #288	; 0x120
   13560:	4611      	mov	r1, r2
   13562:	f01c fe52 	bl	3020a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   13566:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   1356a:	f01c fe2c 	bl	301c6 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1356e:	2200      	movs	r2, #0
   13570:	2300      	movs	r3, #0
   13572:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13576:	f06f 0308 	mvn.w	r3, #8
   1357a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1357e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   13582:	e9cd 4400 	strd	r4, r4, [sp]
   13586:	4b22      	ldr	r3, [pc, #136]	; (13610 <bt_enable+0x10c>)
   13588:	4922      	ldr	r1, [pc, #136]	; (13614 <bt_enable+0x110>)
   1358a:	9404      	str	r4, [sp, #16]
   1358c:	4822      	ldr	r0, [pc, #136]	; (13618 <bt_enable+0x114>)
   1358e:	f011 fca9 	bl	24ee4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13592:	4922      	ldr	r1, [pc, #136]	; (1361c <bt_enable+0x118>)
   13594:	4820      	ldr	r0, [pc, #128]	; (13618 <bt_enable+0x114>)
   13596:	f01c fded 	bl	30174 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1359a:	4821      	ldr	r0, [pc, #132]	; (13620 <bt_enable+0x11c>)
   1359c:	f012 fb98 	bl	25cd0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   135a0:	f06f 0307 	mvn.w	r3, #7
   135a4:	f640 0298 	movw	r2, #2200	; 0x898
   135a8:	491e      	ldr	r1, [pc, #120]	; (13624 <bt_enable+0x120>)
   135aa:	481d      	ldr	r0, [pc, #116]	; (13620 <bt_enable+0x11c>)
   135ac:	9400      	str	r4, [sp, #0]
   135ae:	f012 fba9 	bl	25d04 <k_work_queue_start>
   135b2:	491d      	ldr	r1, [pc, #116]	; (13628 <bt_enable+0x124>)
   135b4:	481a      	ldr	r0, [pc, #104]	; (13620 <bt_enable+0x11c>)
   135b6:	f01c fddd 	bl	30174 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   135ba:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   135be:	68db      	ldr	r3, [r3, #12]
   135c0:	4798      	blx	r3
	if (err) {
   135c2:	4604      	mov	r4, r0
   135c4:	b178      	cbz	r0, 135e6 <bt_enable+0xe2>
		LOG_ERR("HCI driver open failed (%d)", err);
   135c6:	466d      	mov	r5, sp
   135c8:	b088      	sub	sp, #32
   135ca:	462a      	mov	r2, r5
   135cc:	4b17      	ldr	r3, [pc, #92]	; (1362c <bt_enable+0x128>)
   135ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   135d2:	e9c5 3005 	strd	r3, r0, [r5, #20]
   135d6:	2303      	movs	r3, #3
   135d8:	480b      	ldr	r0, [pc, #44]	; (13608 <bt_enable+0x104>)
   135da:	f842 3f10 	str.w	r3, [r2, #16]!
   135de:	f018 fd06 	bl	2bfee <z_log_msg_static_create.constprop.0>
   135e2:	46ad      	mov	sp, r5
		return err;
   135e4:	e7a3      	b.n	1352e <bt_enable+0x2a>
	if (!cb) {
   135e6:	b91e      	cbnz	r6, 135f0 <bt_enable+0xec>
		return bt_init();
   135e8:	f7f5 ff3e 	bl	9468 <bt_init>
   135ec:	4604      	mov	r4, r0
   135ee:	e79e      	b.n	1352e <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   135f0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   135f4:	f012 fb66 	bl	25cc4 <k_work_submit>
	return 0;
   135f8:	e799      	b.n	1352e <bt_enable+0x2a>
		return -EALREADY;
   135fa:	f06f 0477 	mvn.w	r4, #119	; 0x77
   135fe:	e796      	b.n	1352e <bt_enable+0x2a>
   13600:	20008000 	.word	0x20008000
   13604:	00034ddd 	.word	0x00034ddd
   13608:	000314fc 	.word	0x000314fc
   1360c:	200215c4 	.word	0x200215c4
   13610:	000131d9 	.word	0x000131d9
   13614:	200327a0 	.word	0x200327a0
   13618:	20009b40 	.word	0x20009b40
   1361c:	00034df6 	.word	0x00034df6
   13620:	20009bc8 	.word	0x20009bc8
   13624:	20032ba0 	.word	0x20032ba0
   13628:	00034dfc 	.word	0x00034dfc
   1362c:	00034e02 	.word	0x00034e02

00013630 <bt_is_ready>:
   13630:	4b02      	ldr	r3, [pc, #8]	; (1363c <bt_is_ready+0xc>)
   13632:	e8d3 0faf 	lda	r0, [r3]
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   13636:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1363a:	4770      	bx	lr
   1363c:	200080cc 	.word	0x200080cc

00013640 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   13640:	4800      	ldr	r0, [pc, #0]	; (13644 <bt_get_name+0x4>)
   13642:	4770      	bx	lr
   13644:	00032e4a 	.word	0x00032e4a

00013648 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   13648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1364a:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1364c:	2500      	movs	r5, #0
   1364e:	4f09      	ldr	r7, [pc, #36]	; (13674 <id_find+0x2c>)
   13650:	79fb      	ldrb	r3, [r7, #7]
   13652:	b2ec      	uxtb	r4, r5
   13654:	42a3      	cmp	r3, r4
   13656:	d802      	bhi.n	1365e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   13658:	f06f 0001 	mvn.w	r0, #1
   1365c:	e009      	b.n	13672 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1365e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   13662:	4630      	mov	r0, r6
   13664:	4439      	add	r1, r7
   13666:	f018 fd89 	bl	2c17c <bt_addr_le_eq>
   1366a:	3501      	adds	r5, #1
   1366c:	2800      	cmp	r0, #0
   1366e:	d0ef      	beq.n	13650 <id_find+0x8>
   13670:	4620      	mov	r0, r4
}
   13672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13674:	20008000 	.word	0x20008000

00013678 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   13678:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1367a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1367c:	460d      	mov	r5, r1
   1367e:	b1a9      	cbz	r1, 136ac <id_create.constprop.0+0x34>
   13680:	4628      	mov	r0, r5
   13682:	4915      	ldr	r1, [pc, #84]	; (136d8 <id_create.constprop.0+0x60>)
   13684:	f018 fd7a 	bl	2c17c <bt_addr_le_eq>
   13688:	b980      	cbnz	r0, 136ac <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1368a:	4629      	mov	r1, r5
   1368c:	4813      	ldr	r0, [pc, #76]	; (136dc <id_create.constprop.0+0x64>)
   1368e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13692:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   13694:	f018 fd82 	bl	2c19c <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13698:	4811      	ldr	r0, [pc, #68]	; (136e0 <id_create.constprop.0+0x68>)
   1369a:	f018 fd77 	bl	2c18c <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1369e:	0743      	lsls	r3, r0, #29
   136a0:	d501      	bpl.n	136a6 <id_create.constprop.0+0x2e>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   136a2:	f7fe fb19 	bl	11cd8 <bt_settings_save_id>
	}

	return 0;
   136a6:	2000      	movs	r0, #0
}
   136a8:	b003      	add	sp, #12
   136aa:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   136ac:	4668      	mov	r0, sp
   136ae:	f018 fc4e 	bl	2bf4e <bt_addr_le_create_static>
			if (err) {
   136b2:	2800      	cmp	r0, #0
   136b4:	d1f8      	bne.n	136a8 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
   136b6:	4668      	mov	r0, sp
   136b8:	f7ff ffc6 	bl	13648 <id_find>
   136bc:	2800      	cmp	r0, #0
   136be:	daf5      	bge.n	136ac <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   136c0:	4b06      	ldr	r3, [pc, #24]	; (136dc <id_create.constprop.0+0x64>)
   136c2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   136c6:	4669      	mov	r1, sp
   136c8:	4418      	add	r0, r3
   136ca:	f018 fd67 	bl	2c19c <bt_addr_le_copy>
		if (addr) {
   136ce:	2d00      	cmp	r5, #0
   136d0:	d0e2      	beq.n	13698 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   136d2:	4601      	mov	r1, r0
   136d4:	4628      	mov	r0, r5
   136d6:	e7dd      	b.n	13694 <id_create.constprop.0+0x1c>
   136d8:	000345f5 	.word	0x000345f5
   136dc:	20008000 	.word	0x20008000
   136e0:	200080cc 	.word	0x200080cc

000136e4 <set_random_address>:
{
   136e4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   136e6:	2206      	movs	r2, #6
   136e8:	4911      	ldr	r1, [pc, #68]	; (13730 <set_random_address+0x4c>)
   136ea:	4605      	mov	r5, r0
   136ec:	f01c ff3f 	bl	3056e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   136f0:	b1c8      	cbz	r0, 13726 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   136f2:	2106      	movs	r1, #6
   136f4:	f242 0005 	movw	r0, #8197	; 0x2005
   136f8:	f7ff f86e 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   136fc:	4604      	mov	r4, r0
   136fe:	b1a0      	cbz	r0, 1372a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13700:	2206      	movs	r2, #6
   13702:	4629      	mov	r1, r5
   13704:	300c      	adds	r0, #12
   13706:	f01a fc96 	bl	2e036 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1370a:	2200      	movs	r2, #0
   1370c:	4621      	mov	r1, r4
   1370e:	f242 0005 	movw	r0, #8197	; 0x2005
   13712:	f7ff f8af 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   13716:	b938      	cbnz	r0, 13728 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   13718:	4805      	ldr	r0, [pc, #20]	; (13730 <set_random_address+0x4c>)
   1371a:	4629      	mov	r1, r5
   1371c:	f018 fd39 	bl	2c192 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   13720:	2301      	movs	r3, #1
   13722:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   13726:	2000      	movs	r0, #0
}
   13728:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1372a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1372e:	e7fb      	b.n	13728 <set_random_address+0x44>
   13730:	20008061 	.word	0x20008061

00013734 <find_rl_conflict>:
{
   13734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13738:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(conflict != NULL);
   1373a:	460c      	mov	r4, r1
{
   1373c:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   1373e:	b959      	cbnz	r1, 13758 <find_rl_conflict+0x24>
   13740:	492b      	ldr	r1, [pc, #172]	; (137f0 <find_rl_conflict+0xbc>)
   13742:	f44f 7357 	mov.w	r3, #860	; 0x35c
   13746:	4a2b      	ldr	r2, [pc, #172]	; (137f4 <find_rl_conflict+0xc0>)
   13748:	482b      	ldr	r0, [pc, #172]	; (137f8 <find_rl_conflict+0xc4>)
   1374a:	f016 ffc6 	bl	2a6da <assert_print>
   1374e:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   13752:	4828      	ldr	r0, [pc, #160]	; (137f4 <find_rl_conflict+0xc0>)
   13754:	f016 ffba 	bl	2a6cc <assert_post_action>
   13758:	6808      	ldr	r0, [r1, #0]
   1375a:	b948      	cbnz	r0, 13770 <find_rl_conflict+0x3c>
   1375c:	4927      	ldr	r1, [pc, #156]	; (137fc <find_rl_conflict+0xc8>)
   1375e:	f240 335d 	movw	r3, #861	; 0x35d
   13762:	4a24      	ldr	r2, [pc, #144]	; (137f4 <find_rl_conflict+0xc0>)
   13764:	4824      	ldr	r0, [pc, #144]	; (137f8 <find_rl_conflict+0xc4>)
   13766:	f016 ffb8 	bl	2a6da <assert_print>
   1376a:	f240 315d 	movw	r1, #861	; 0x35d
   1376e:	e7f0      	b.n	13752 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG(resident != NULL);
   13770:	b94d      	cbnz	r5, 13786 <find_rl_conflict+0x52>
   13772:	4923      	ldr	r1, [pc, #140]	; (13800 <find_rl_conflict+0xcc>)
   13774:	f240 335e 	movw	r3, #862	; 0x35e
   13778:	4a1e      	ldr	r2, [pc, #120]	; (137f4 <find_rl_conflict+0xc0>)
   1377a:	481f      	ldr	r0, [pc, #124]	; (137f8 <find_rl_conflict+0xc4>)
   1377c:	f016 ffad 	bl	2a6da <assert_print>
   13780:	f240 315e 	movw	r1, #862	; 0x35e
   13784:	e7e5      	b.n	13752 <find_rl_conflict+0x1e>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   13786:	7a03      	ldrb	r3, [r0, #8]
   13788:	075a      	lsls	r2, r3, #29
   1378a:	d509      	bpl.n	137a0 <find_rl_conflict+0x6c>
   1378c:	491d      	ldr	r1, [pc, #116]	; (13804 <find_rl_conflict+0xd0>)
   1378e:	f44f 7358 	mov.w	r3, #864	; 0x360
   13792:	4a18      	ldr	r2, [pc, #96]	; (137f4 <find_rl_conflict+0xc0>)
   13794:	4818      	ldr	r0, [pc, #96]	; (137f8 <find_rl_conflict+0xc4>)
   13796:	f016 ffa0 	bl	2a6da <assert_print>
   1379a:	f44f 7158 	mov.w	r1, #864	; 0x360
   1379e:	e7d8      	b.n	13752 <find_rl_conflict+0x1e>
	if (conflict->found) {
   137a0:	684f      	ldr	r7, [r1, #4]
   137a2:	b9f7      	cbnz	r7, 137e2 <find_rl_conflict+0xae>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   137a4:	7a2b      	ldrb	r3, [r5, #8]
   137a6:	075b      	lsls	r3, r3, #29
   137a8:	d51b      	bpl.n	137e2 <find_rl_conflict+0xae>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   137aa:	1c69      	adds	r1, r5, #1
   137ac:	3001      	adds	r0, #1
   137ae:	f018 fce5 	bl	2c17c <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   137b2:	f8d4 8000 	ldr.w	r8, [r4]
   137b6:	2216      	movs	r2, #22
   137b8:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   137ba:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   137bc:	4668      	mov	r0, sp
   137be:	f01c ff20 	bl	30602 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   137c2:	2210      	movs	r2, #16
   137c4:	4669      	mov	r1, sp
   137c6:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   137ca:	f01c fed0 	bl	3056e <memcmp>
   137ce:	b158      	cbz	r0, 137e8 <find_rl_conflict+0xb4>
   137d0:	6820      	ldr	r0, [r4, #0]
   137d2:	2210      	movs	r2, #16
   137d4:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   137d8:	302a      	adds	r0, #42	; 0x2a
   137da:	f01c fec8 	bl	3056e <memcmp>
   137de:	b918      	cbnz	r0, 137e8 <find_rl_conflict+0xb4>
		conflict->found = resident;
   137e0:	6065      	str	r5, [r4, #4]
}
   137e2:	b006      	add	sp, #24
   137e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   137e8:	2e00      	cmp	r6, #0
   137ea:	d1f9      	bne.n	137e0 <find_rl_conflict+0xac>
   137ec:	e7f9      	b.n	137e2 <find_rl_conflict+0xae>
   137ee:	bf00      	nop
   137f0:	00034e82 	.word	0x00034e82
   137f4:	00034e54 	.word	0x00034e54
   137f8:	00032679 	.word	0x00032679
   137fc:	00034e9a 	.word	0x00034e9a
   13800:	00034ebd 	.word	0x00034ebd
   13804:	00034ed5 	.word	0x00034ed5

00013808 <bt_id_add.part.0>:
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13808:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   1380a:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1380c:	2206      	movs	r2, #6
void bt_id_add(struct bt_keys *keys)
   1380e:	4604      	mov	r4, r0
   13810:	b087      	sub	sp, #28
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13812:	4608      	mov	r0, r1
   13814:	f001 fe4c 	bl	154b0 <bt_conn_lookup_state_le>
	if (conn) {
   13818:	4606      	mov	r6, r0
   1381a:	b188      	cbz	r0, 13840 <bt_id_add.part.0+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1381c:	4b49      	ldr	r3, [pc, #292]	; (13944 <bt_id_add.part.0+0x13c>)
   1381e:	e8d3 1fef 	ldaex	r1, [r3]
   13822:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   13826:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1382a:	2a00      	cmp	r2, #0
   1382c:	d1f7      	bne.n	1381e <bt_id_add.part.0+0x16>
	keys->state |= flag;
   1382e:	7a23      	ldrb	r3, [r4, #8]
   13830:	f043 0301 	orr.w	r3, r3, #1
   13834:	7223      	strb	r3, [r4, #8]
}
   13836:	b007      	add	sp, #28
   13838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   1383c:	f001 bb12 	b.w	14e64 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   13840:	4d41      	ldr	r5, [pc, #260]	; (13948 <bt_id_add.part.0+0x140>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13842:	4601      	mov	r1, r0
   13844:	4841      	ldr	r0, [pc, #260]	; (1394c <bt_id_add.part.0+0x144>)
   13846:	f000 fbf7 	bl	14038 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1384a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1384e:	b173      	cbz	r3, 1386e <bt_id_add.part.0+0x66>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13850:	4630      	mov	r0, r6
   13852:	f018 fce9 	bl	2c228 <addr_res_enable>
		if (err) {
   13856:	b150      	cbz	r0, 1386e <bt_id_add.part.0+0x66>
			LOG_WRN("Failed to disable address resolution");
   13858:	4b3d      	ldr	r3, [pc, #244]	; (13950 <bt_id_add.part.0+0x148>)
		LOG_WRN("Set privacy mode command is not supported");
   1385a:	9305      	str	r3, [sp, #20]
   1385c:	2302      	movs	r3, #2
   1385e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13862:	9304      	str	r3, [sp, #16]
   13864:	aa04      	add	r2, sp, #16
		LOG_ERR("Failed to set privacy mode");
   13866:	483b      	ldr	r0, [pc, #236]	; (13954 <bt_id_add.part.0+0x14c>)
   13868:	f018 fcdb 	bl	2c222 <z_log_msg_static_create.constprop.0>
		goto done;
   1386c:	e026      	b.n	138bc <bt_id_add.part.0+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1386e:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   13872:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   13876:	429a      	cmp	r2, r3
   13878:	d12a      	bne.n	138d0 <bt_id_add.part.0+0xc8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1387a:	2602      	movs	r6, #2
   1387c:	4b36      	ldr	r3, [pc, #216]	; (13958 <bt_id_add.part.0+0x150>)
   1387e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13882:	4834      	ldr	r0, [pc, #208]	; (13954 <bt_id_add.part.0+0x14c>)
   13884:	aa04      	add	r2, sp, #16
   13886:	9305      	str	r3, [sp, #20]
   13888:	9604      	str	r6, [sp, #16]
   1388a:	f018 fcca 	bl	2c222 <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1388e:	2200      	movs	r2, #0
   13890:	f242 0029 	movw	r0, #8233	; 0x2029
   13894:	4611      	mov	r1, r2
   13896:	f7fe ffed 	bl	12874 <bt_hci_cmd_send_sync>
		if (err) {
   1389a:	b130      	cbz	r0, 138aa <bt_id_add.part.0+0xa2>
			LOG_ERR("Failed to clear resolution list");
   1389c:	4b2f      	ldr	r3, [pc, #188]	; (1395c <bt_id_add.part.0+0x154>)
   1389e:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   138a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   138a6:	aa04      	add	r2, sp, #16
   138a8:	e7dd      	b.n	13866 <bt_id_add.part.0+0x5e>
		bt_dev.le.rl_entries++;
   138aa:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   138ae:	3301      	adds	r3, #1
   138b0:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   138b4:	7a23      	ldrb	r3, [r4, #8]
   138b6:	f043 0304 	orr.w	r3, r3, #4
   138ba:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   138bc:	2001      	movs	r0, #1
   138be:	f018 fcb3 	bl	2c228 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   138c2:	2100      	movs	r1, #0
   138c4:	4826      	ldr	r0, [pc, #152]	; (13960 <bt_id_add.part.0+0x158>)
}
   138c6:	b007      	add	sp, #28
   138c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   138cc:	f000 bbb4 	b.w	14038 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   138d0:	4622      	mov	r2, r4
   138d2:	1c67      	adds	r7, r4, #1
   138d4:	4639      	mov	r1, r7
   138d6:	f812 0b2a 	ldrb.w	r0, [r2], #42
   138da:	f018 fc66 	bl	2c1aa <hci_id_add>
	if (err) {
   138de:	4606      	mov	r6, r0
   138e0:	b120      	cbz	r0, 138ec <bt_id_add.part.0+0xe4>
		LOG_ERR("Failed to add IRK to controller");
   138e2:	4b20      	ldr	r3, [pc, #128]	; (13964 <bt_id_add.part.0+0x15c>)
		LOG_ERR("Failed to set privacy mode");
   138e4:	9305      	str	r3, [sp, #20]
   138e6:	2302      	movs	r3, #2
   138e8:	9304      	str	r3, [sp, #16]
   138ea:	e7da      	b.n	138a2 <bt_id_add.part.0+0x9a>
	bt_dev.le.rl_entries++;
   138ec:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   138f0:	3301      	adds	r3, #1
   138f2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   138f6:	7a23      	ldrb	r3, [r4, #8]
   138f8:	f043 0304 	orr.w	r3, r3, #4
   138fc:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   138fe:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   13902:	075b      	lsls	r3, r3, #29
   13904:	d401      	bmi.n	1390a <bt_id_add.part.0+0x102>
		LOG_WRN("Set privacy mode command is not supported");
   13906:	4b18      	ldr	r3, [pc, #96]	; (13968 <bt_id_add.part.0+0x160>)
   13908:	e7a7      	b.n	1385a <bt_id_add.part.0+0x52>
	bt_addr_le_copy(&cp.id_addr, addr);
   1390a:	4639      	mov	r1, r7
   1390c:	4668      	mov	r0, sp
   1390e:	f018 fc45 	bl	2c19c <bt_addr_le_copy>
	cp.mode = mode;
   13912:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   13914:	2108      	movs	r1, #8
   13916:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   1391a:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1391e:	f7fe ff5b 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   13922:	4604      	mov	r4, r0
   13924:	b160      	cbz	r0, 13940 <bt_id_add.part.0+0x138>
   13926:	2208      	movs	r2, #8
   13928:	4669      	mov	r1, sp
   1392a:	300c      	adds	r0, #12
   1392c:	f01a fb83 	bl	2e036 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   13930:	4632      	mov	r2, r6
   13932:	4621      	mov	r1, r4
   13934:	f242 004e 	movw	r0, #8270	; 0x204e
   13938:	f7fe ff9c 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   1393c:	2800      	cmp	r0, #0
   1393e:	d0bd      	beq.n	138bc <bt_id_add.part.0+0xb4>
		LOG_ERR("Failed to set privacy mode");
   13940:	4b0a      	ldr	r3, [pc, #40]	; (1396c <bt_id_add.part.0+0x164>)
   13942:	e7cf      	b.n	138e4 <bt_id_add.part.0+0xdc>
   13944:	200080cc 	.word	0x200080cc
   13948:	20008000 	.word	0x20008000
   1394c:	0002c27f 	.word	0x0002c27f
   13950:	00034f0a 	.word	0x00034f0a
   13954:	00031514 	.word	0x00031514
   13958:	00034f2f 	.word	0x00034f2f
   1395c:	00034f60 	.word	0x00034f60
   13960:	0002c259 	.word	0x0002c259
   13964:	00034f80 	.word	0x00034f80
   13968:	00034fa0 	.word	0x00034fa0
   1396c:	00034fca 	.word	0x00034fca

00013970 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13970:	4b08      	ldr	r3, [pc, #32]	; (13994 <bt_id_pending_keys_update+0x24>)
   13972:	e8d3 2fef 	ldaex	r2, [r3]
   13976:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1397a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1397e:	2800      	cmp	r0, #0
   13980:	d1f7      	bne.n	13972 <bt_id_pending_keys_update+0x2>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   13982:	0413      	lsls	r3, r2, #16
   13984:	d504      	bpl.n	13990 <bt_id_pending_keys_update+0x20>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   13986:	2200      	movs	r2, #0
   13988:	2002      	movs	r0, #2
   1398a:	4903      	ldr	r1, [pc, #12]	; (13998 <bt_id_pending_keys_update+0x28>)
   1398c:	f006 bd5a 	b.w	1a444 <bt_keys_foreach_type>
}
   13990:	4770      	bx	lr
   13992:	bf00      	nop
   13994:	200080cc 	.word	0x200080cc
   13998:	0002c30d 	.word	0x0002c30d

0001399c <bt_id_find_conflict>:
	struct bt_id_conflict conflict = {
   1399c:	2300      	movs	r3, #0
{
   1399e:	b507      	push	{r0, r1, r2, lr}
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   139a0:	4905      	ldr	r1, [pc, #20]	; (139b8 <bt_id_find_conflict+0x1c>)
	struct bt_id_conflict conflict = {
   139a2:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   139a6:	466a      	mov	r2, sp
   139a8:	2002      	movs	r0, #2
   139aa:	f006 fd4b 	bl	1a444 <bt_keys_foreach_type>
}
   139ae:	9801      	ldr	r0, [sp, #4]
   139b0:	b003      	add	sp, #12
   139b2:	f85d fb04 	ldr.w	pc, [sp], #4
   139b6:	bf00      	nop
   139b8:	00013735 	.word	0x00013735

000139bc <bt_id_add>:
	CHECKIF(keys == NULL) {
   139bc:	4603      	mov	r3, r0
{
   139be:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   139c0:	b170      	cbz	r0, 139e0 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   139c2:	490a      	ldr	r1, [pc, #40]	; (139ec <bt_id_add+0x30>)
   139c4:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
   139c8:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
   139cc:	b10c      	cbz	r4, 139d2 <bt_id_add+0x16>
   139ce:	4294      	cmp	r4, r2
   139d0:	d208      	bcs.n	139e4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   139d2:	3201      	adds	r2, #1
   139d4:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   139d8:	7a1a      	ldrb	r2, [r3, #8]
   139da:	f042 0204 	orr.w	r2, r2, #4
   139de:	721a      	strb	r2, [r3, #8]
}
   139e0:	bc10      	pop	{r4}
   139e2:	4770      	bx	lr
   139e4:	bc10      	pop	{r4}
   139e6:	f7ff bf0f 	b.w	13808 <bt_id_add.part.0>
   139ea:	bf00      	nop
   139ec:	20008000 	.word	0x20008000

000139f0 <bt_id_del>:
{
   139f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   139f4:	b087      	sub	sp, #28
	CHECKIF(keys == NULL) {
   139f6:	4605      	mov	r5, r0
{
   139f8:	af00      	add	r7, sp, #0
	CHECKIF(keys == NULL) {
   139fa:	b398      	cbz	r0, 13a64 <bt_id_del+0x74>
	if (!bt_dev.le.rl_size ||
   139fc:	4c4e      	ldr	r4, [pc, #312]	; (13b38 <bt_id_del+0x148>)
   139fe:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13a02:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   13a06:	b1ca      	cbz	r2, 13a3c <bt_id_del+0x4c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   13a08:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   13a0a:	4293      	cmp	r3, r2
   13a0c:	dc23      	bgt.n	13a56 <bt_id_del+0x66>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   13a0e:	2100      	movs	r1, #0
   13a10:	2206      	movs	r2, #6
   13a12:	4608      	mov	r0, r1
   13a14:	f001 fd4c 	bl	154b0 <bt_conn_lookup_state_le>
	if (conn) {
   13a18:	4606      	mov	r6, r0
   13a1a:	b338      	cbz	r0, 13a6c <bt_id_del+0x7c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13a1c:	34cc      	adds	r4, #204	; 0xcc
   13a1e:	e8d4 3fef 	ldaex	r3, [r4]
   13a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   13a26:	e8c4 3fe2 	stlex	r2, r3, [r4]
   13a2a:	2a00      	cmp	r2, #0
   13a2c:	d1f7      	bne.n	13a1e <bt_id_del+0x2e>
	keys->state |= flag;
   13a2e:	7a2b      	ldrb	r3, [r5, #8]
   13a30:	f043 0302 	orr.w	r3, r3, #2
   13a34:	722b      	strb	r3, [r5, #8]
		bt_conn_unref(conn);
   13a36:	f001 fa15 	bl	14e64 <bt_conn_unref>
		return;
   13a3a:	e013      	b.n	13a64 <bt_id_del+0x74>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   13a3c:	b95b      	cbnz	r3, 13a56 <bt_id_del+0x66>
   13a3e:	493f      	ldr	r1, [pc, #252]	; (13b3c <bt_id_del+0x14c>)
   13a40:	483f      	ldr	r0, [pc, #252]	; (13b40 <bt_id_del+0x150>)
   13a42:	f240 4323 	movw	r3, #1059	; 0x423
   13a46:	4a3f      	ldr	r2, [pc, #252]	; (13b44 <bt_id_del+0x154>)
   13a48:	f016 fe47 	bl	2a6da <assert_print>
   13a4c:	f240 4123 	movw	r1, #1059	; 0x423
   13a50:	483c      	ldr	r0, [pc, #240]	; (13b44 <bt_id_del+0x154>)
   13a52:	f016 fe3b 	bl	2a6cc <assert_post_action>
			bt_dev.le.rl_entries--;
   13a56:	3b01      	subs	r3, #1
   13a58:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13a5c:	7a2b      	ldrb	r3, [r5, #8]
   13a5e:	f023 0304 	bic.w	r3, r3, #4
   13a62:	722b      	strb	r3, [r5, #8]
}
   13a64:	371c      	adds	r7, #28
   13a66:	46bd      	mov	sp, r7
   13a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   13a6c:	4601      	mov	r1, r0
   13a6e:	4836      	ldr	r0, [pc, #216]	; (13b48 <bt_id_del+0x158>)
   13a70:	f000 fae2 	bl	14038 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   13a74:	4630      	mov	r0, r6
   13a76:	f018 fbd7 	bl	2c228 <addr_res_enable>
	if (err) {
   13a7a:	4606      	mov	r6, r0
   13a7c:	b1d0      	cbz	r0, 13ab4 <bt_id_del+0xc4>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   13a7e:	466d      	mov	r5, sp
   13a80:	b088      	sub	sp, #32
   13a82:	466b      	mov	r3, sp
   13a84:	4a31      	ldr	r2, [pc, #196]	; (13b4c <bt_id_del+0x15c>)
   13a86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13a8a:	e9c3 2005 	strd	r2, r0, [r3, #20]
   13a8e:	461a      	mov	r2, r3
   13a90:	2303      	movs	r3, #3
   13a92:	482f      	ldr	r0, [pc, #188]	; (13b50 <bt_id_del+0x160>)
   13a94:	f842 3f10 	str.w	r3, [r2, #16]!
   13a98:	f018 fbc3 	bl	2c222 <z_log_msg_static_create.constprop.0>
   13a9c:	46ad      	mov	sp, r5
	if (bt_dev.le.rl_entries) {
   13a9e:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13aa2:	b113      	cbz	r3, 13aaa <bt_id_del+0xba>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   13aa4:	2001      	movs	r0, #1
   13aa6:	f018 fbbf 	bl	2c228 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   13aaa:	2100      	movs	r1, #0
   13aac:	4829      	ldr	r0, [pc, #164]	; (13b54 <bt_id_del+0x164>)
   13aae:	f000 fac3 	bl	14038 <bt_le_ext_adv_foreach>
   13ab2:	e7d7      	b.n	13a64 <bt_id_del+0x74>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   13ab4:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13ab8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   13abc:	429a      	cmp	r2, r3
   13abe:	d20c      	bcs.n	13ada <bt_id_del+0xea>
		bt_dev.le.rl_entries--;
   13ac0:	3b01      	subs	r3, #1
   13ac2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   13ac6:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13ac8:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   13aca:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13ace:	2002      	movs	r0, #2
   13ad0:	4921      	ldr	r1, [pc, #132]	; (13b58 <bt_id_del+0x168>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   13ad2:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   13ad4:	f006 fcb6 	bl	1a444 <bt_keys_foreach_type>
		goto done;
   13ad8:	e7e1      	b.n	13a9e <bt_id_del+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   13ada:	2107      	movs	r1, #7
   13adc:	f242 0028 	movw	r0, #8232	; 0x2028
   13ae0:	f7fe fe7a 	bl	127d8 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   13ae4:	f105 0901 	add.w	r9, r5, #1
	if (!buf) {
   13ae8:	4680      	mov	r8, r0
   13aea:	b958      	cbnz	r0, 13b04 <bt_id_del+0x114>
		LOG_ERR("Failed to remove IRK from controller");
   13aec:	4b1b      	ldr	r3, [pc, #108]	; (13b5c <bt_id_del+0x16c>)
   13aee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13af2:	617b      	str	r3, [r7, #20]
   13af4:	2302      	movs	r3, #2
   13af6:	4816      	ldr	r0, [pc, #88]	; (13b50 <bt_id_del+0x160>)
   13af8:	613b      	str	r3, [r7, #16]
   13afa:	f107 0210 	add.w	r2, r7, #16
   13afe:	f018 fb90 	bl	2c222 <z_log_msg_static_create.constprop.0>
		goto done;
   13b02:	e7cc      	b.n	13a9e <bt_id_del+0xae>
	return net_buf_simple_add(&buf->b, len);
   13b04:	2107      	movs	r1, #7
   13b06:	300c      	adds	r0, #12
   13b08:	f007 fe70 	bl	1b7ec <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   13b0c:	4649      	mov	r1, r9
   13b0e:	f018 fb45 	bl	2c19c <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   13b12:	4632      	mov	r2, r6
   13b14:	4641      	mov	r1, r8
   13b16:	f242 0028 	movw	r0, #8232	; 0x2028
   13b1a:	f7fe feab 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   13b1e:	2800      	cmp	r0, #0
   13b20:	d1e4      	bne.n	13aec <bt_id_del+0xfc>
	bt_dev.le.rl_entries--;
   13b22:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13b26:	3b01      	subs	r3, #1
   13b28:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   13b2c:	7a2b      	ldrb	r3, [r5, #8]
   13b2e:	f023 0304 	bic.w	r3, r3, #4
   13b32:	722b      	strb	r3, [r5, #8]
   13b34:	e7b3      	b.n	13a9e <bt_id_del+0xae>
   13b36:	bf00      	nop
   13b38:	20008000 	.word	0x20008000
   13b3c:	00034fe5 	.word	0x00034fe5
   13b40:	00032679 	.word	0x00032679
   13b44:	00034e54 	.word	0x00034e54
   13b48:	0002c27f 	.word	0x0002c27f
   13b4c:	00034ffe 	.word	0x00034ffe
   13b50:	00031514 	.word	0x00031514
   13b54:	0002c259 	.word	0x0002c259
   13b58:	0002c20d 	.word	0x0002c20d
   13b5c:	0003502b 	.word	0x0003502b

00013b60 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   13b60:	b570      	push	{r4, r5, r6, lr}
   13b62:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b64:	4604      	mov	r4, r0
{
   13b66:	b086      	sub	sp, #24
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b68:	b920      	cbnz	r0, 13b74 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   13b6a:	b31d      	cbz	r5, 13bb4 <bt_id_create+0x54>
			return -EINVAL;
   13b6c:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   13b70:	b006      	add	sp, #24
   13b72:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   13b74:	4920      	ldr	r1, [pc, #128]	; (13bf8 <bt_id_create+0x98>)
   13b76:	f018 fb01 	bl	2c17c <bt_addr_le_eq>
   13b7a:	2800      	cmp	r0, #0
   13b7c:	d1f5      	bne.n	13b6a <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   13b7e:	7823      	ldrb	r3, [r4, #0]
   13b80:	2b01      	cmp	r3, #1
   13b82:	d104      	bne.n	13b8e <bt_id_create+0x2e>
   13b84:	79a3      	ldrb	r3, [r4, #6]
   13b86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13b8a:	2bc0      	cmp	r3, #192	; 0xc0
   13b8c:	d00a      	beq.n	13ba4 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   13b8e:	4b1b      	ldr	r3, [pc, #108]	; (13bfc <bt_id_create+0x9c>)
   13b90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13b94:	9305      	str	r3, [sp, #20]
   13b96:	2302      	movs	r3, #2
   13b98:	4819      	ldr	r0, [pc, #100]	; (13c00 <bt_id_create+0xa0>)
   13b9a:	aa04      	add	r2, sp, #16
   13b9c:	9304      	str	r3, [sp, #16]
   13b9e:	f018 fb40 	bl	2c222 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   13ba2:	e7e3      	b.n	13b6c <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   13ba4:	4620      	mov	r0, r4
   13ba6:	f7ff fd4f 	bl	13648 <id_find>
   13baa:	2800      	cmp	r0, #0
   13bac:	dbdd      	blt.n	13b6a <bt_id_create+0xa>
			return -EALREADY;
   13bae:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13bb2:	e7dd      	b.n	13b70 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   13bb4:	4d13      	ldr	r5, [pc, #76]	; (13c04 <bt_id_create+0xa4>)
   13bb6:	79eb      	ldrb	r3, [r5, #7]
   13bb8:	2b01      	cmp	r3, #1
   13bba:	d01a      	beq.n	13bf2 <bt_id_create+0x92>
   13bbc:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   13bc0:	f018 fae4 	bl	2c18c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   13bc4:	07c3      	lsls	r3, r0, #31
   13bc6:	d50b      	bpl.n	13be0 <bt_id_create+0x80>
	new_id = bt_dev.id_count;
   13bc8:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   13bca:	4621      	mov	r1, r4
   13bcc:	4630      	mov	r0, r6
   13bce:	f7ff fd53 	bl	13678 <id_create.constprop.0>
	if (err) {
   13bd2:	2800      	cmp	r0, #0
   13bd4:	d1cc      	bne.n	13b70 <bt_id_create+0x10>
		bt_dev.id_count++;
   13bd6:	79eb      	ldrb	r3, [r5, #7]
	new_id = bt_dev.id_count;
   13bd8:	4630      	mov	r0, r6
		bt_dev.id_count++;
   13bda:	3301      	adds	r3, #1
   13bdc:	71eb      	strb	r3, [r5, #7]
	return new_id;
   13bde:	e7c7      	b.n	13b70 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   13be0:	2c00      	cmp	r4, #0
   13be2:	d0c3      	beq.n	13b6c <bt_id_create+0xc>
   13be4:	4620      	mov	r0, r4
   13be6:	4904      	ldr	r1, [pc, #16]	; (13bf8 <bt_id_create+0x98>)
   13be8:	f018 fac8 	bl	2c17c <bt_addr_le_eq>
   13bec:	2800      	cmp	r0, #0
   13bee:	d0eb      	beq.n	13bc8 <bt_id_create+0x68>
   13bf0:	e7bc      	b.n	13b6c <bt_id_create+0xc>
		return -ENOMEM;
   13bf2:	f06f 000b 	mvn.w	r0, #11
   13bf6:	e7bb      	b.n	13b70 <bt_id_create+0x10>
   13bf8:	000345f5 	.word	0x000345f5
   13bfc:	00035050 	.word	0x00035050
   13c00:	00031514 	.word	0x00031514
   13c04:	20008000 	.word	0x20008000

00013c08 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   13c08:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   13c0a:	4604      	mov	r4, r0
{
   13c0c:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   13c0e:	b960      	cbnz	r0, 13c2a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   13c10:	4b1a      	ldr	r3, [pc, #104]	; (13c7c <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   13c12:	9307      	str	r3, [sp, #28]
   13c14:	2302      	movs	r3, #2
   13c16:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13c1a:	4819      	ldr	r0, [pc, #100]	; (13c80 <bt_id_read_public_addr+0x78>)
   13c1c:	aa06      	add	r2, sp, #24
   13c1e:	9306      	str	r3, [sp, #24]
   13c20:	f018 faff 	bl	2c222 <z_log_msg_static_create.constprop.0>
		return 0U;
   13c24:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   13c26:	b008      	add	sp, #32
   13c28:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   13c2a:	2100      	movs	r1, #0
   13c2c:	f241 0009 	movw	r0, #4105	; 0x1009
   13c30:	aa01      	add	r2, sp, #4
   13c32:	f7fe fe1f 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   13c36:	4606      	mov	r6, r0
   13c38:	b108      	cbz	r0, 13c3e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   13c3a:	4b12      	ldr	r3, [pc, #72]	; (13c84 <bt_id_read_public_addr+0x7c>)
   13c3c:	e7e9      	b.n	13c12 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   13c3e:	9b01      	ldr	r3, [sp, #4]
   13c40:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13c42:	68dd      	ldr	r5, [r3, #12]
   13c44:	4910      	ldr	r1, [pc, #64]	; (13c88 <bt_id_read_public_addr+0x80>)
   13c46:	3501      	adds	r5, #1
   13c48:	4628      	mov	r0, r5
   13c4a:	f01c fc90 	bl	3056e <memcmp>
   13c4e:	b918      	cbnz	r0, 13c58 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   13c50:	9801      	ldr	r0, [sp, #4]
   13c52:	f007 fca9 	bl	1b5a8 <net_buf_unref>
		return 0U;
   13c56:	e7e5      	b.n	13c24 <bt_id_read_public_addr+0x1c>
   13c58:	2206      	movs	r2, #6
   13c5a:	4628      	mov	r0, r5
   13c5c:	490b      	ldr	r1, [pc, #44]	; (13c8c <bt_id_read_public_addr+0x84>)
   13c5e:	f01c fc86 	bl	3056e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   13c62:	2800      	cmp	r0, #0
   13c64:	d0f4      	beq.n	13c50 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   13c66:	4629      	mov	r1, r5
   13c68:	1c60      	adds	r0, r4, #1
   13c6a:	f018 fa92 	bl	2c192 <bt_addr_copy>
	net_buf_unref(rsp);
   13c6e:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   13c70:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   13c72:	f007 fc99 	bl	1b5a8 <net_buf_unref>
	return 1U;
   13c76:	2001      	movs	r0, #1
   13c78:	e7d5      	b.n	13c26 <bt_id_read_public_addr+0x1e>
   13c7a:	bf00      	nop
   13c7c:	0003507e 	.word	0x0003507e
   13c80:	00031514 	.word	0x00031514
   13c84:	00035097 	.word	0x00035097
   13c88:	00034602 	.word	0x00034602
   13c8c:	000345fc 	.word	0x000345fc

00013c90 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   13c90:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   13c92:	4668      	mov	r0, sp
   13c94:	f7ff ffb8 	bl	13c08 <bt_id_read_public_addr>
   13c98:	4b04      	ldr	r3, [pc, #16]	; (13cac <bt_setup_public_id_addr+0x1c>)
   13c9a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   13c9c:	b118      	cbz	r0, 13ca6 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   13c9e:	4669      	mov	r1, sp
   13ca0:	2000      	movs	r0, #0
   13ca2:	f7ff fce9 	bl	13678 <id_create.constprop.0>
}
   13ca6:	b003      	add	sp, #12
   13ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   13cac:	20008000 	.word	0x20008000

00013cb0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   13cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13cb2:	4b24      	ldr	r3, [pc, #144]	; (13d44 <bt_read_static_addr+0x94>)
{
   13cb4:	4605      	mov	r5, r0
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13cb6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
{
   13cba:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13cbc:	07db      	lsls	r3, r3, #31
{
   13cbe:	b089      	sub	sp, #36	; 0x24
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   13cc0:	d40d      	bmi.n	13cde <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   13cc2:	4b21      	ldr	r3, [pc, #132]	; (13d48 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   13cc4:	9307      	str	r3, [sp, #28]
		return 0;
   13cc6:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   13cc8:	2302      	movs	r3, #2
   13cca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13cce:	481f      	ldr	r0, [pc, #124]	; (13d4c <bt_read_static_addr+0x9c>)
   13cd0:	aa06      	add	r2, sp, #24
   13cd2:	9306      	str	r3, [sp, #24]
   13cd4:	f018 faa5 	bl	2c222 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   13cd8:	4620      	mov	r0, r4
   13cda:	b009      	add	sp, #36	; 0x24
   13cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   13cde:	2100      	movs	r1, #0
   13ce0:	f64f 4009 	movw	r0, #64521	; 0xfc09
   13ce4:	aa01      	add	r2, sp, #4
   13ce6:	f7fe fdc5 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   13cea:	4603      	mov	r3, r0
   13cec:	b108      	cbz	r0, 13cf2 <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   13cee:	4b18      	ldr	r3, [pc, #96]	; (13d50 <bt_read_static_addr+0xa0>)
   13cf0:	e7e8      	b.n	13cc4 <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   13cf2:	9801      	ldr	r0, [sp, #4]
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   13cf4:	2716      	movs	r7, #22
	rp = (void *)rsp->data;
   13cf6:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   13cf8:	7854      	ldrb	r4, [r2, #1]
   13cfa:	3202      	adds	r2, #2
   13cfc:	42b4      	cmp	r4, r6
   13cfe:	bf28      	it	cs
   13d00:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   13d02:	429c      	cmp	r4, r3
   13d04:	dc0e      	bgt.n	13d24 <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   13d06:	f007 fc4f 	bl	1b5a8 <net_buf_unref>
	if (!cnt) {
   13d0a:	2c00      	cmp	r4, #0
   13d0c:	d1e4      	bne.n	13cd8 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   13d0e:	4b11      	ldr	r3, [pc, #68]	; (13d54 <bt_read_static_addr+0xa4>)
   13d10:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   13d14:	9307      	str	r3, [sp, #28]
   13d16:	2302      	movs	r3, #2
   13d18:	480c      	ldr	r0, [pc, #48]	; (13d4c <bt_read_static_addr+0x9c>)
   13d1a:	aa06      	add	r2, sp, #24
   13d1c:	9306      	str	r3, [sp, #24]
   13d1e:	f018 fa80 	bl	2c222 <z_log_msg_static_create.constprop.0>
   13d22:	e7d9      	b.n	13cd8 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13d24:	4611      	mov	r1, r2
   13d26:	fb07 5603 	mla	r6, r7, r3, r5
   13d2a:	f102 0c14 	add.w	ip, r2, #20
   13d2e:	f851 eb04 	ldr.w	lr, [r1], #4
   13d32:	4561      	cmp	r1, ip
   13d34:	f846 eb04 	str.w	lr, [r6], #4
   13d38:	d1f9      	bne.n	13d2e <bt_read_static_addr+0x7e>
   13d3a:	8809      	ldrh	r1, [r1, #0]
	for (i = 0; i < cnt; i++) {
   13d3c:	3301      	adds	r3, #1
   13d3e:	8031      	strh	r1, [r6, #0]
   13d40:	3216      	adds	r2, #22
   13d42:	e7de      	b.n	13d02 <bt_read_static_addr+0x52>
   13d44:	20008000 	.word	0x20008000
   13d48:	000350b5 	.word	0x000350b5
   13d4c:	00031514 	.word	0x00031514
   13d50:	000350e1 	.word	0x000350e1
   13d54:	00035101 	.word	0x00035101

00013d58 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   13d58:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   13d5a:	4d15      	ldr	r5, [pc, #84]	; (13db0 <bt_setup_random_id_addr+0x58>)
{
   13d5c:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   13d5e:	79ec      	ldrb	r4, [r5, #7]
   13d60:	b92c      	cbnz	r4, 13d6e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   13d62:	2101      	movs	r1, #1
   13d64:	a802      	add	r0, sp, #8
   13d66:	f7ff ffa3 	bl	13cb0 <bt_read_static_addr>
   13d6a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   13d6c:	b9c0      	cbnz	r0, 13da0 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   13d6e:	2100      	movs	r1, #0
   13d70:	4608      	mov	r0, r1
}
   13d72:	b008      	add	sp, #32
   13d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   13d78:	f7ff bef2 	b.w	13b60 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13d7c:	ab02      	add	r3, sp, #8
   13d7e:	fb06 3102 	mla	r1, r6, r2, r3
   13d82:	f10d 0001 	add.w	r0, sp, #1
   13d86:	f018 fa04 	bl	2c192 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   13d8a:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   13d8c:	4669      	mov	r1, sp
   13d8e:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   13d90:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   13d94:	f7ff fc70 	bl	13678 <id_create.constprop.0>
				if (err) {
   13d98:	3401      	adds	r4, #1
   13d9a:	b110      	cbz	r0, 13da2 <bt_setup_random_id_addr+0x4a>
}
   13d9c:	b008      	add	sp, #32
   13d9e:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   13da0:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   13da2:	79eb      	ldrb	r3, [r5, #7]
   13da4:	b2e2      	uxtb	r2, r4
   13da6:	4293      	cmp	r3, r2
   13da8:	d8e8      	bhi.n	13d7c <bt_setup_random_id_addr+0x24>
			return 0;
   13daa:	2000      	movs	r0, #0
   13dac:	e7f6      	b.n	13d9c <bt_setup_random_id_addr+0x44>
   13dae:	bf00      	nop
   13db0:	20008000 	.word	0x20008000

00013db4 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   13db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13db8:	4690      	mov	r8, r2
   13dba:	460e      	mov	r6, r1
   13dbc:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   13dbe:	4602      	mov	r2, r0
   13dc0:	2800      	cmp	r0, #0
   13dc2:	d04b      	beq.n	13e5c <bt_id_set_adv_own_addr+0xa8>
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	d049      	beq.n	13e5c <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13dc8:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   13dca:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   13dcc:	d531      	bpl.n	13e32 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13dce:	4f25      	ldr	r7, [pc, #148]	; (13e64 <bt_id_set_adv_own_addr+0xb0>)
   13dd0:	f1b8 0f00 	cmp.w	r8, #0
   13dd4:	d013      	beq.n	13dfe <bt_id_set_adv_own_addr+0x4a>
   13dd6:	0688      	lsls	r0, r1, #26
   13dd8:	d40a      	bmi.n	13df0 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13dda:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13dde:	5cfb      	ldrb	r3, [r7, r3]
   13de0:	2b01      	cmp	r3, #1
   13de2:	d015      	beq.n	13e10 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   13de4:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13de6:	06b2      	lsls	r2, r6, #26
   13de8:	d50f      	bpl.n	13e0a <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   13dea:	f043 0302 	orr.w	r3, r3, #2
   13dee:	e00b      	b.n	13e08 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   13df0:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   13df4:	0659      	lsls	r1, r3, #25
   13df6:	d4f0      	bmi.n	13dda <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   13df8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13dfc:	e006      	b.n	13e0c <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13dfe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13e02:	5cfb      	ldrb	r3, [r7, r3]
   13e04:	2b01      	cmp	r3, #1
   13e06:	d003      	beq.n	13e10 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   13e08:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   13e0a:	2000      	movs	r0, #0
}
   13e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13e10:	2107      	movs	r1, #7
   13e12:	fb01 7104 	mla	r1, r1, r4, r7
   13e16:	4610      	mov	r0, r2
   13e18:	3101      	adds	r1, #1
   13e1a:	f018 fa54 	bl	2c2c6 <bt_id_set_adv_random_addr>
				if (err) {
   13e1e:	2800      	cmp	r0, #0
   13e20:	d1f4      	bne.n	13e0c <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   13e22:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   13e26:	5d3b      	ldrb	r3, [r7, r4]
   13e28:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   13e2a:	f1b8 0f00 	cmp.w	r8, #0
   13e2e:	d0ec      	beq.n	13e0a <bt_id_set_adv_own_addr+0x56>
   13e30:	e7d9      	b.n	13de6 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   13e32:	074b      	lsls	r3, r1, #29
   13e34:	d50e      	bpl.n	13e54 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   13e36:	4e0b      	ldr	r6, [pc, #44]	; (13e64 <bt_id_set_adv_own_addr+0xb0>)
   13e38:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   13e3c:	5df3      	ldrb	r3, [r6, r7]
   13e3e:	2b01      	cmp	r3, #1
   13e40:	d1e2      	bne.n	13e08 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   13e42:	2107      	movs	r1, #7
   13e44:	fb11 3104 	smlabb	r1, r1, r4, r3
   13e48:	4431      	add	r1, r6
   13e4a:	f018 fa3c 	bl	2c2c6 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   13e4e:	5df3      	ldrb	r3, [r6, r7]
   13e50:	702b      	strb	r3, [r5, #0]
		if (err) {
   13e52:	e7db      	b.n	13e0c <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   13e54:	f018 fa3f 	bl	2c2d6 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   13e58:	2301      	movs	r3, #1
   13e5a:	e7f9      	b.n	13e50 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   13e5c:	f06f 0015 	mvn.w	r0, #21
   13e60:	e7d4      	b.n	13e0c <bt_id_set_adv_own_addr+0x58>
   13e62:	bf00      	nop
   13e64:	20008000 	.word	0x20008000

00013e68 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   13e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e6c:	460c      	mov	r4, r1
   13e6e:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13e70:	2120      	movs	r1, #32
{
   13e72:	4692      	mov	sl, r2
   13e74:	9000      	str	r0, [sp, #0]
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   13e76:	f7fe fcaf 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   13e7a:	4605      	mov	r5, r0
   13e7c:	2800      	cmp	r0, #0
   13e7e:	d05b      	beq.n	13f38 <hci_set_ad+0xd0>
   13e80:	2120      	movs	r1, #32
   13e82:	300c      	adds	r0, #12
   13e84:	f007 fcb2 	bl	1b7ec <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13e88:	2220      	movs	r2, #32
   13e8a:	4681      	mov	r9, r0
   13e8c:	2100      	movs	r1, #0
   13e8e:	f01c fbb8 	bl	30602 <memset>
	uint8_t set_data_len = 0;
   13e92:	2600      	movs	r6, #0
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   13e94:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   13e98:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
		for (size_t j = 0; j < ad[i].len; j++) {
   13e9c:	2300      	movs	r3, #0
   13e9e:	f8d4 8000 	ldr.w	r8, [r4]
   13ea2:	6862      	ldr	r2, [r4, #4]
   13ea4:	4293      	cmp	r3, r2
   13ea6:	d30c      	bcc.n	13ec2 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   13ea8:	3408      	adds	r4, #8
   13eaa:	45a2      	cmp	sl, r4
   13eac:	d1f6      	bne.n	13e9c <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13eae:	2200      	movs	r2, #0
   13eb0:	4629      	mov	r1, r5
   13eb2:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   13eb4:	f889 6000 	strb.w	r6, [r9]
}
   13eb8:	b009      	add	sp, #36	; 0x24
   13eba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   13ebe:	f7fe bcd9 	b.w	12874 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   13ec2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13ec6:	1cb0      	adds	r0, r6, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
   13ec8:	1811      	adds	r1, r2, r0
   13eca:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
   13ecc:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13ed0:	d91b      	bls.n	13f0a <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13ed2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13ed6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13eda:	d101      	bne.n	13ee0 <hci_set_ad+0x78>
   13edc:	2a00      	cmp	r2, #0
   13ede:	dc12      	bgt.n	13f06 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   13ee0:	4b17      	ldr	r3, [pc, #92]	; (13f40 <hci_set_ad+0xd8>)
   13ee2:	9307      	str	r3, [sp, #28]
   13ee4:	2302      	movs	r3, #2
   13ee6:	9306      	str	r3, [sp, #24]
   13ee8:	2300      	movs	r3, #0
   13eea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13eee:	4815      	ldr	r0, [pc, #84]	; (13f44 <hci_set_ad+0xdc>)
   13ef0:	aa06      	add	r2, sp, #24
   13ef2:	f7fa fcdd 	bl	e8b0 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   13ef6:	4628      	mov	r0, r5
   13ef8:	f007 fb56 	bl	1b5a8 <net_buf_unref>
					return -EINVAL;
   13efc:	f06f 0015 	mvn.w	r0, #21
}
   13f00:	b009      	add	sp, #36	; 0x24
   13f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   13f06:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13f0a:	b2d7      	uxtb	r7, r2
   13f0c:	1c79      	adds	r1, r7, #1
   13f0e:	f80b 1006 	strb.w	r1, [fp, r6]
   13f12:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   13f14:	b2c9      	uxtb	r1, r1
   13f16:	f80b c001 	strb.w	ip, [fp, r1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13f1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   13f1e:	fa5b f080 	uxtab	r0, fp, r0
   13f22:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   13f24:	3702      	adds	r7, #2
   13f26:	f01c fb32 	bl	3058e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13f2a:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13f2c:	4437      	add	r7, r6
   13f2e:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   13f30:	3301      	adds	r3, #1
   13f32:	f108 0808 	add.w	r8, r8, #8
   13f36:	e7b4      	b.n	13ea2 <hci_set_ad+0x3a>
		return -ENOBUFS;
   13f38:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13f3c:	e7e0      	b.n	13f00 <hci_set_ad+0x98>
   13f3e:	bf00      	nop
   13f40:	00035130 	.word	0x00035130
   13f44:	000314cc 	.word	0x000314cc

00013f48 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13f48:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13f4a:	4605      	mov	r5, r0
   13f4c:	4b16      	ldr	r3, [pc, #88]	; (13fa8 <le_adv_start_add_conn+0x60>)
   13f4e:	f815 2b09 	ldrb.w	r2, [r5], #9
{
   13f52:	4604      	mov	r4, r0
	bt_dev.adv_conn_id = adv->id;
   13f54:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13f58:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   13f5a:	2207      	movs	r2, #7
   13f5c:	4628      	mov	r0, r5
   13f5e:	4913      	ldr	r1, [pc, #76]	; (13fac <le_adv_start_add_conn+0x64>)
   13f60:	f01c fb05 	bl	3056e <memcmp>
   13f64:	4603      	mov	r3, r0
   13f66:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13f68:	b96b      	cbnz	r3, 13f86 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   13f6a:	4911      	ldr	r1, [pc, #68]	; (13fb0 <le_adv_start_add_conn+0x68>)
   13f6c:	f001 fa38 	bl	153e0 <bt_conn_add_le>
		if (!conn) {
   13f70:	4604      	mov	r4, r0
   13f72:	b910      	cbnz	r0, 13f7a <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   13f74:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   13f78:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   13f7a:	2104      	movs	r1, #4
   13f7c:	f000 ffaa 	bl	14ed4 <bt_conn_set_state>
		return 0;
   13f80:	2000      	movs	r0, #0
		*out_conn = conn;
   13f82:	6034      	str	r4, [r6, #0]
   13f84:	e7f8      	b.n	13f78 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   13f86:	4629      	mov	r1, r5
   13f88:	f001 fa62 	bl	15450 <bt_conn_exists_le>
   13f8c:	b940      	cbnz	r0, 13fa0 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   13f8e:	7820      	ldrb	r0, [r4, #0]
   13f90:	4629      	mov	r1, r5
   13f92:	f001 fa25 	bl	153e0 <bt_conn_add_le>
	if (!conn) {
   13f96:	4604      	mov	r4, r0
   13f98:	2800      	cmp	r0, #0
   13f9a:	d0eb      	beq.n	13f74 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   13f9c:	2105      	movs	r1, #5
   13f9e:	e7ed      	b.n	13f7c <le_adv_start_add_conn+0x34>
		return -EINVAL;
   13fa0:	f06f 0015 	mvn.w	r0, #21
   13fa4:	e7e8      	b.n	13f78 <le_adv_start_add_conn+0x30>
   13fa6:	bf00      	nop
   13fa8:	20008000 	.word	0x20008000
   13fac:	000345f5 	.word	0x000345f5
   13fb0:	000345ee 	.word	0x000345ee

00013fb4 <valid_adv_param>:
{
   13fb4:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13fb6:	6843      	ldr	r3, [r0, #4]
{
   13fb8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13fba:	0558      	lsls	r0, r3, #21
   13fbc:	d501      	bpl.n	13fc2 <valid_adv_param+0xe>
		return false;
   13fbe:	2000      	movs	r0, #0
}
   13fc0:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13fc2:	6922      	ldr	r2, [r4, #16]
   13fc4:	b10a      	cbz	r2, 13fca <valid_adv_param+0x16>
   13fc6:	07d9      	lsls	r1, r3, #31
   13fc8:	d5f9      	bpl.n	13fbe <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13fca:	4d19      	ldr	r5, [pc, #100]	; (14030 <valid_adv_param+0x7c>)
   13fcc:	7820      	ldrb	r0, [r4, #0]
   13fce:	79eb      	ldrb	r3, [r5, #7]
   13fd0:	4283      	cmp	r3, r0
   13fd2:	d9f4      	bls.n	13fbe <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   13fd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   13fd8:	2207      	movs	r2, #7
   13fda:	4916      	ldr	r1, [pc, #88]	; (14034 <valid_adv_param+0x80>)
   13fdc:	4428      	add	r0, r5
   13fde:	f01c fac6 	bl	3056e <memcmp>
	if (param->id >= bt_dev.id_count ||
   13fe2:	2800      	cmp	r0, #0
   13fe4:	d0eb      	beq.n	13fbe <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13fe6:	6860      	ldr	r0, [r4, #4]
   13fe8:	07c2      	lsls	r2, r0, #31
   13fea:	d406      	bmi.n	13ffa <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   13fec:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   13ff0:	2b08      	cmp	r3, #8
   13ff2:	d802      	bhi.n	13ffa <valid_adv_param+0x46>
   13ff4:	68a3      	ldr	r3, [r4, #8]
   13ff6:	2b9f      	cmp	r3, #159	; 0x9f
   13ff8:	d9e1      	bls.n	13fbe <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13ffa:	f010 0f30 	tst.w	r0, #48	; 0x30
   13ffe:	d002      	beq.n	14006 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   14000:	6923      	ldr	r3, [r4, #16]
   14002:	2b00      	cmp	r3, #0
   14004:	d0db      	beq.n	13fbe <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   14006:	06c3      	lsls	r3, r0, #27
   14008:	d401      	bmi.n	1400e <valid_adv_param+0x5a>
   1400a:	6923      	ldr	r3, [r4, #16]
   1400c:	b943      	cbnz	r3, 14020 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1400e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14012:	429a      	cmp	r2, r3
   14014:	d8d3      	bhi.n	13fbe <valid_adv_param+0xa>
   14016:	2a1f      	cmp	r2, #31
   14018:	d9d1      	bls.n	13fbe <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1401a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1401e:	d8ce      	bhi.n	13fbe <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   14020:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   14024:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   14028:	bf18      	it	ne
   1402a:	2001      	movne	r0, #1
   1402c:	e7c8      	b.n	13fc0 <valid_adv_param+0xc>
   1402e:	bf00      	nop
   14030:	20008000 	.word	0x20008000
   14034:	000345f5 	.word	0x000345f5

00014038 <bt_le_ext_adv_foreach>:
{
   14038:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1403a:	4801      	ldr	r0, [pc, #4]	; (14040 <bt_le_ext_adv_foreach+0x8>)
   1403c:	4718      	bx	r3
   1403e:	bf00      	nop
   14040:	20008018 	.word	0x20008018

00014044 <bt_le_adv_lookup_legacy>:
}
   14044:	4800      	ldr	r0, [pc, #0]	; (14048 <bt_le_adv_lookup_legacy+0x4>)
   14046:	4770      	bx	lr
   14048:	20008018 	.word	0x20008018

0001404c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14050:	b093      	sub	sp, #76	; 0x4c
   14052:	9305      	str	r3, [sp, #20]
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   14054:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   14056:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1405a:	4606      	mov	r6, r0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1405c:	ebba 0403 	subs.w	r4, sl, r3
   14060:	4890      	ldr	r0, [pc, #576]	; (142a4 <bt_le_adv_start_legacy+0x258>)
   14062:	bf18      	it	ne
   14064:	2401      	movne	r4, #1
	struct bt_conn *conn = NULL;
   14066:	9307      	str	r3, [sp, #28]
   14068:	f018 f971 	bl	2c34e <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1406c:	0747      	lsls	r7, r0, #29
{
   1406e:	460d      	mov	r5, r1
   14070:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14072:	f140 810d 	bpl.w	14290 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   14076:	4608      	mov	r0, r1
   14078:	f7ff ff9c 	bl	13fb4 <valid_adv_param>
   1407c:	b928      	cbnz	r0, 1408a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1407e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   14082:	4620      	mov	r0, r4
   14084:	b013      	add	sp, #76	; 0x4c
   14086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1408a:	4628      	mov	r0, r5
   1408c:	f018 f93a 	bl	2c304 <bt_id_adv_random_addr_check>
   14090:	4681      	mov	r9, r0
   14092:	2800      	cmp	r0, #0
   14094:	d0f3      	beq.n	1407e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14096:	f106 0810 	add.w	r8, r6, #16
   1409a:	4640      	mov	r0, r8
   1409c:	f018 f957 	bl	2c34e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   140a0:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   140a4:	0600      	lsls	r0, r0, #24
   140a6:	f100 80f6 	bmi.w	14296 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   140aa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   140ae:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   140b2:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   140b4:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   140b6:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   140ba:	68eb      	ldr	r3, [r5, #12]
   140bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   140c0:	f018 f936 	bl	2c330 <get_adv_channel_map>
	if (adv->id != param->id) {
   140c4:	7832      	ldrb	r2, [r6, #0]
   140c6:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   140c8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   140cc:	429a      	cmp	r2, r3
   140ce:	d004      	beq.n	140da <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   140d0:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   140d4:	4873      	ldr	r0, [pc, #460]	; (142a4 <bt_le_adv_start_legacy+0x258>)
   140d6:	f018 f93d 	bl	2c354 <atomic_and>
	adv->id = param->id;
   140da:	782b      	ldrb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   140dc:	4a72      	ldr	r2, [pc, #456]	; (142a8 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   140de:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   140e0:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   140e4:	4630      	mov	r0, r6
   140e6:	4622      	mov	r2, r4
   140e8:	6869      	ldr	r1, [r5, #4]
   140ea:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   140ee:	f7ff fe61 	bl	13db4 <bt_id_set_adv_own_addr>
	if (err) {
   140f2:	4604      	mov	r4, r0
   140f4:	2800      	cmp	r0, #0
   140f6:	d1c4      	bne.n	14082 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   140f8:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   140fc:	f1ba 0f00 	cmp.w	sl, #0
   14100:	d013      	beq.n	1412a <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   14102:	6929      	ldr	r1, [r5, #16]
   14104:	f018 f931 	bl	2c36a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   14108:	4628      	mov	r0, r5
   1410a:	f018 f9ba 	bl	2c482 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1410e:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   14110:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14112:	07d9      	lsls	r1, r3, #31
   14114:	d416      	bmi.n	14144 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   14116:	059b      	lsls	r3, r3, #22
   14118:	d403      	bmi.n	14122 <bt_le_adv_start_legacy+0xd6>
   1411a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1411c:	b90b      	cbnz	r3, 14122 <bt_le_adv_start_legacy+0xd6>
   1411e:	2f02      	cmp	r7, #2
   14120:	d159      	bne.n	141d6 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   14122:	2302      	movs	r3, #2
   14124:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   14128:	e019      	b.n	1415e <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1412a:	4960      	ldr	r1, [pc, #384]	; (142ac <bt_le_adv_start_legacy+0x260>)
   1412c:	f018 f91d 	bl	2c36a <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   14130:	4628      	mov	r0, r5
   14132:	f018 f9a6 	bl	2c482 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   14136:	686b      	ldr	r3, [r5, #4]
	name_type = get_adv_name_type_param(param);
   14138:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1413a:	07da      	lsls	r2, r3, #31
   1413c:	d5eb      	bpl.n	14116 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   1413e:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   14142:	e00c      	b.n	1415e <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   14144:	f013 0f10 	tst.w	r3, #16
   14148:	bf0c      	ite	eq
   1414a:	2301      	moveq	r3, #1
   1414c:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1414e:	6929      	ldr	r1, [r5, #16]
   14150:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   14154:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   14158:	46a1      	mov	r9, r4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1415a:	f018 f906 	bl	2c36a <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1415e:	210f      	movs	r1, #15
   14160:	f242 0006 	movw	r0, #8198	; 0x2006
   14164:	f7fe fb38 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   14168:	4604      	mov	r4, r0
   1416a:	2800      	cmp	r0, #0
   1416c:	f000 8096 	beq.w	1429c <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14170:	220f      	movs	r2, #15
   14172:	a908      	add	r1, sp, #32
   14174:	300c      	adds	r0, #12
   14176:	f019 ff5e 	bl	2e036 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1417a:	4621      	mov	r1, r4
   1417c:	2200      	movs	r2, #0
   1417e:	f242 0006 	movw	r0, #8198	; 0x2006
   14182:	f7fe fb77 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   14186:	4604      	mov	r4, r0
   14188:	2800      	cmp	r0, #0
   1418a:	f47f af7a 	bne.w	14082 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1418e:	f1ba 0f00 	cmp.w	sl, #0
   14192:	d026      	beq.n	141e2 <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   14194:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14196:	07dc      	lsls	r4, r3, #31
   14198:	d431      	bmi.n	141fe <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1419a:	2101      	movs	r1, #1
   1419c:	4630      	mov	r0, r6
   1419e:	f018 f980 	bl	2c4a2 <bt_le_adv_set_enable_legacy>
	if (err) {
   141a2:	4604      	mov	r4, r0
   141a4:	2800      	cmp	r0, #0
   141a6:	d06b      	beq.n	14280 <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   141a8:	4b41      	ldr	r3, [pc, #260]	; (142b0 <bt_le_adv_start_legacy+0x264>)
   141aa:	9311      	str	r3, [sp, #68]	; 0x44
   141ac:	2302      	movs	r3, #2
   141ae:	9310      	str	r3, [sp, #64]	; 0x40
   141b0:	2300      	movs	r3, #0
   141b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   141b6:	483f      	ldr	r0, [pc, #252]	; (142b4 <bt_le_adv_start_legacy+0x268>)
   141b8:	aa10      	add	r2, sp, #64	; 0x40
   141ba:	f7fa fb79 	bl	e8b0 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   141be:	9d07      	ldr	r5, [sp, #28]
   141c0:	2d00      	cmp	r5, #0
   141c2:	f43f af5e 	beq.w	14082 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   141c6:	4628      	mov	r0, r5
   141c8:	2100      	movs	r1, #0
   141ca:	f000 fe83 	bl	14ed4 <bt_conn_set_state>
			bt_conn_unref(conn);
   141ce:	4628      	mov	r0, r5
   141d0:	f000 fe48 	bl	14e64 <bt_conn_unref>
   141d4:	e755      	b.n	14082 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   141d6:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   141d8:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   141dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   141e0:	e7bd      	b.n	1415e <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   141e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141e4:	4659      	mov	r1, fp
   141e6:	9300      	str	r3, [sp, #0]
   141e8:	4630      	mov	r0, r6
   141ea:	e9cd 9701 	strd	r9, r7, [sp, #4]
   141ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   141f0:	9a05      	ldr	r2, [sp, #20]
   141f2:	f018 f8d4 	bl	2c39e <le_adv_update.constprop.0>
		if (err) {
   141f6:	4604      	mov	r4, r0
   141f8:	2800      	cmp	r0, #0
   141fa:	d0cb      	beq.n	14194 <bt_le_adv_start_legacy+0x148>
   141fc:	e741      	b.n	14082 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   141fe:	4630      	mov	r0, r6
   14200:	a907      	add	r1, sp, #28
   14202:	f7ff fea1 	bl	13f48 <le_adv_start_add_conn>
		if (err) {
   14206:	4604      	mov	r4, r0
   14208:	2800      	cmp	r0, #0
   1420a:	d0c6      	beq.n	1419a <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   1420c:	f110 0f0c 	cmn.w	r0, #12
   14210:	f47f af37 	bne.w	14082 <bt_le_adv_start_legacy+0x36>
   14214:	f1ba 0f00 	cmp.w	sl, #0
   14218:	f47f af33 	bne.w	14082 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1421c:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1421e:	0798      	lsls	r0, r3, #30
   14220:	f53f af2f 	bmi.w	14082 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14224:	686c      	ldr	r4, [r5, #4]
   14226:	f084 0402 	eor.w	r4, r4, #2
   1422a:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1422e:	f004 0201 	and.w	r2, r4, #1
   14232:	210e      	movs	r1, #14
   14234:	4640      	mov	r0, r8
   14236:	f018 f89f 	bl	2c378 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1423a:	1e7b      	subs	r3, r7, #1
   1423c:	425a      	negs	r2, r3
   1423e:	415a      	adcs	r2, r3
   14240:	2108      	movs	r1, #8
   14242:	4640      	mov	r0, r8
   14244:	f018 f898 	bl	2c378 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   14248:	1eb9      	subs	r1, r7, #2
   1424a:	424a      	negs	r2, r1
   1424c:	414a      	adcs	r2, r1
   1424e:	4640      	mov	r0, r8
   14250:	2109      	movs	r1, #9
   14252:	f018 f891 	bl	2c378 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   14256:	686a      	ldr	r2, [r5, #4]
   14258:	210a      	movs	r1, #10
   1425a:	4640      	mov	r0, r8
   1425c:	f002 0201 	and.w	r2, r2, #1
   14260:	f018 f88a 	bl	2c378 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   14264:	464a      	mov	r2, r9
   14266:	210b      	movs	r1, #11
   14268:	4640      	mov	r0, r8
   1426a:	f018 f885 	bl	2c378 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1426e:	686a      	ldr	r2, [r5, #4]
   14270:	210d      	movs	r1, #13
   14272:	4640      	mov	r0, r8
   14274:	f3c2 0280 	ubfx	r2, r2, #2, #1
   14278:	f018 f87e 	bl	2c378 <atomic_set_bit_to>
	return 0;
   1427c:	2400      	movs	r4, #0
   1427e:	e700      	b.n	14082 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   14280:	9807      	ldr	r0, [sp, #28]
   14282:	b108      	cbz	r0, 14288 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   14284:	f000 fdee 	bl	14e64 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   14288:	f1ba 0f00 	cmp.w	sl, #0
   1428c:	d1cf      	bne.n	1422e <bt_le_adv_start_legacy+0x1e2>
   1428e:	e7c9      	b.n	14224 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   14290:	f06f 040a 	mvn.w	r4, #10
   14294:	e6f5      	b.n	14082 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   14296:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1429a:	e6f2      	b.n	14082 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1429c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   142a0:	e6ef      	b.n	14082 <bt_le_adv_start_legacy+0x36>
   142a2:	bf00      	nop
   142a4:	200080cc 	.word	0x200080cc
   142a8:	20008000 	.word	0x20008000
   142ac:	000345f5 	.word	0x000345f5
   142b0:	00035149 	.word	0x00035149
   142b4:	000314cc 	.word	0x000314cc

000142b8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   142b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   142ba:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   142bc:	9a06      	ldr	r2, [sp, #24]
{
   142be:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   142c0:	e9cd 3200 	strd	r3, r2, [sp]
   142c4:	462b      	mov	r3, r5
   142c6:	460a      	mov	r2, r1
   142c8:	4601      	mov	r1, r0
   142ca:	4811      	ldr	r0, [pc, #68]	; (14310 <bt_le_adv_start+0x58>)
   142cc:	f7ff febe 	bl	1404c <bt_le_adv_start_legacy>
   142d0:	4621      	mov	r1, r4
   142d2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   142d4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   142d6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   142da:	429d      	cmp	r5, r3
   142dc:	d102      	bne.n	142e4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   142de:	4630      	mov	r0, r6
   142e0:	b002      	add	sp, #8
   142e2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   142e4:	880a      	ldrh	r2, [r1, #0]
   142e6:	4282      	cmp	r2, r0
   142e8:	d104      	bne.n	142f4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   142ea:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   142ec:	b112      	cbz	r2, 142f4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   142ee:	7812      	ldrb	r2, [r2, #0]
   142f0:	07d2      	lsls	r2, r2, #31
   142f2:	d402      	bmi.n	142fa <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   142f4:	3301      	adds	r3, #1
   142f6:	3108      	adds	r1, #8
   142f8:	e7ef      	b.n	142da <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   142fa:	4906      	ldr	r1, [pc, #24]	; (14314 <bt_le_adv_start+0x5c>)
   142fc:	4806      	ldr	r0, [pc, #24]	; (14318 <bt_le_adv_start+0x60>)
   142fe:	f011 fdf7 	bl	25ef0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   14302:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   14306:	2300      	movs	r3, #0
   14308:	4803      	ldr	r0, [pc, #12]	; (14318 <bt_le_adv_start+0x60>)
   1430a:	f011 ff0d 	bl	26128 <k_work_reschedule>
   1430e:	e7e6      	b.n	142de <bt_le_adv_start+0x26>
   14310:	20008018 	.word	0x20008018
   14314:	000143a1 	.word	0x000143a1
   14318:	20008030 	.word	0x20008030

0001431c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1431c:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1431e:	481a      	ldr	r0, [pc, #104]	; (14388 <bt_le_adv_stop+0x6c>)
   14320:	f018 f8e6 	bl	2c4f0 <bt_le_lim_adv_cancel_timeout>
   14324:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14328:	4818      	ldr	r0, [pc, #96]	; (1438c <bt_le_adv_stop+0x70>)
   1432a:	f018 f813 	bl	2c354 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1432e:	4817      	ldr	r0, [pc, #92]	; (1438c <bt_le_adv_stop+0x70>)
   14330:	f018 f80d 	bl	2c34e <atomic_get>
   14334:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   14336:	061a      	lsls	r2, r3, #24
   14338:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   1433c:	d523      	bpl.n	14386 <bt_le_adv_stop+0x6a>
   1433e:	4813      	ldr	r0, [pc, #76]	; (1438c <bt_le_adv_stop+0x70>)
   14340:	f018 f805 	bl	2c34e <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14344:	0543      	lsls	r3, r0, #21
   14346:	d514      	bpl.n	14372 <bt_le_adv_stop+0x56>
   14348:	2207      	movs	r2, #7
   1434a:	4911      	ldr	r1, [pc, #68]	; (14390 <bt_le_adv_stop+0x74>)
   1434c:	4811      	ldr	r0, [pc, #68]	; (14394 <bt_le_adv_stop+0x78>)
   1434e:	f01c f90e 	bl	3056e <memcmp>
   14352:	4b11      	ldr	r3, [pc, #68]	; (14398 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   14354:	b998      	cbnz	r0, 1437e <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   14356:	2204      	movs	r2, #4
   14358:	4910      	ldr	r1, [pc, #64]	; (1439c <bt_le_adv_stop+0x80>)
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1435a:	7e18      	ldrb	r0, [r3, #24]
   1435c:	f001 f8a8 	bl	154b0 <bt_conn_lookup_state_le>
   14360:	4604      	mov	r4, r0
	if (conn) {
   14362:	b130      	cbz	r0, 14372 <bt_le_adv_stop+0x56>
		conn->err = status;
   14364:	2100      	movs	r1, #0
   14366:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14368:	f000 fdb4 	bl	14ed4 <bt_conn_set_state>
		bt_conn_unref(conn);
   1436c:	4620      	mov	r0, r4
   1436e:	f000 fd79 	bl	14e64 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   14372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   14376:	2100      	movs	r1, #0
   14378:	4803      	ldr	r0, [pc, #12]	; (14388 <bt_le_adv_stop+0x6c>)
   1437a:	f018 b892 	b.w	2c4a2 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1437e:	2205      	movs	r2, #5
   14380:	f103 0121 	add.w	r1, r3, #33	; 0x21
   14384:	e7e9      	b.n	1435a <bt_le_adv_stop+0x3e>
}
   14386:	bd10      	pop	{r4, pc}
   14388:	20008018 	.word	0x20008018
   1438c:	20008028 	.word	0x20008028
   14390:	000345f5 	.word	0x000345f5
   14394:	20008021 	.word	0x20008021
   14398:	20008000 	.word	0x20008000
   1439c:	000345ee 	.word	0x000345ee

000143a0 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   143a0:	b580      	push	{r7, lr}
   143a2:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   143a4:	f7ff ffba 	bl	1431c <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   143a8:	b088      	sub	sp, #32
   143aa:	466a      	mov	r2, sp
   143ac:	4b06      	ldr	r3, [pc, #24]	; (143c8 <adv_timeout+0x28>)
   143ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   143b2:	2303      	movs	r3, #3
   143b4:	f842 3f10 	str.w	r3, [r2, #16]!
   143b8:	2300      	movs	r3, #0
   143ba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   143be:	4803      	ldr	r0, [pc, #12]	; (143cc <adv_timeout+0x2c>)
   143c0:	f7fa fa76 	bl	e8b0 <z_impl_z_log_msg_static_create>
}
   143c4:	46bd      	mov	sp, r7
   143c6:	bd80      	pop	{r7, pc}
   143c8:	00035164 	.word	0x00035164
   143cc:	000314cc 	.word	0x000314cc

000143d0 <bt_le_adv_resume>:
{
   143d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   143d2:	4c1e      	ldr	r4, [pc, #120]	; (1444c <bt_le_adv_resume+0x7c>)
   143d4:	4620      	mov	r0, r4
   143d6:	f017 ffba 	bl	2c34e <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   143da:	0440      	lsls	r0, r0, #17
   143dc:	d534      	bpl.n	14448 <bt_le_adv_resume+0x78>
   143de:	4620      	mov	r0, r4
   143e0:	f017 ffb5 	bl	2c34e <atomic_get>
   143e4:	0601      	lsls	r1, r0, #24
   143e6:	d42f      	bmi.n	14448 <bt_le_adv_resume+0x78>
   143e8:	4620      	mov	r0, r4
   143ea:	f017 ffb0 	bl	2c34e <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   143ee:	0542      	lsls	r2, r0, #21
   143f0:	d52a      	bpl.n	14448 <bt_le_adv_resume+0x78>
	err = le_adv_start_add_conn(adv, &conn);
   143f2:	a901      	add	r1, sp, #4
   143f4:	f1a4 0010 	sub.w	r0, r4, #16
   143f8:	f7ff fda6 	bl	13f48 <le_adv_start_add_conn>
	if (err) {
   143fc:	4605      	mov	r5, r0
   143fe:	bb18      	cbnz	r0, 14448 <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   14400:	2101      	movs	r1, #1
   14402:	f1a4 0010 	sub.w	r0, r4, #16
   14406:	f018 f84c 	bl	2c4a2 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1440a:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   1440c:	b928      	cbnz	r0, 1441a <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   1440e:	4630      	mov	r0, r6
}
   14410:	b002      	add	sp, #8
   14412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14416:	f000 bd25 	b.w	14e64 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1441a:	4629      	mov	r1, r5
   1441c:	4630      	mov	r0, r6
   1441e:	f000 fd59 	bl	14ed4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14422:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   14426:	4620      	mov	r0, r4
   14428:	f017 ff94 	bl	2c354 <atomic_and>
   1442c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1442e:	4630      	mov	r0, r6
   14430:	f000 fd18 	bl	14e64 <bt_conn_unref>
	if (persist_paused) {
   14434:	046b      	lsls	r3, r5, #17
   14436:	d507      	bpl.n	14448 <bt_le_adv_resume+0x78>
   14438:	e8d4 3fef 	ldaex	r3, [r4]
   1443c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   14440:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14444:	2a00      	cmp	r2, #0
   14446:	d1f7      	bne.n	14438 <bt_le_adv_resume+0x68>
}
   14448:	b002      	add	sp, #8
   1444a:	bd70      	pop	{r4, r5, r6, pc}
   1444c:	20008028 	.word	0x20008028

00014450 <sys_memcpy_swap.constprop.0>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14450:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14452:	b508      	push	{r3, lr}
   14454:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14458:	d910      	bls.n	1447c <sys_memcpy_swap.constprop.0+0x2c>
   1445a:	4298      	cmp	r0, r3
   1445c:	d213      	bcs.n	14486 <sys_memcpy_swap.constprop.0+0x36>
   1445e:	490e      	ldr	r1, [pc, #56]	; (14498 <sys_memcpy_swap.constprop.0+0x48>)
   14460:	f240 2315 	movw	r3, #533	; 0x215
   14464:	4a0d      	ldr	r2, [pc, #52]	; (1449c <sys_memcpy_swap.constprop.0+0x4c>)
   14466:	480e      	ldr	r0, [pc, #56]	; (144a0 <sys_memcpy_swap.constprop.0+0x50>)
   14468:	f016 f937 	bl	2a6da <assert_print>
   1446c:	480d      	ldr	r0, [pc, #52]	; (144a4 <sys_memcpy_swap.constprop.0+0x54>)
   1446e:	f016 f934 	bl	2a6da <assert_print>
   14472:	f240 2115 	movw	r1, #533	; 0x215
   14476:	4809      	ldr	r0, [pc, #36]	; (1449c <sys_memcpy_swap.constprop.0+0x4c>)
   14478:	f016 f928 	bl	2a6cc <assert_post_action>
   1447c:	d0ef      	beq.n	1445e <sys_memcpy_swap.constprop.0+0xe>
   1447e:	f100 0210 	add.w	r2, r0, #16
   14482:	4291      	cmp	r1, r2
   14484:	e7ea      	b.n	1445c <sys_memcpy_swap.constprop.0+0xc>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
   14486:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   14488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
	for (; length > 0; length--) {
   1448c:	428b      	cmp	r3, r1
		*pdst++ = *psrc--;
   1448e:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   14492:	d1f9      	bne.n	14488 <sys_memcpy_swap.constprop.0+0x38>
	}
}
   14494:	bd08      	pop	{r3, pc}
   14496:	bf00      	nop
   14498:	000351bc 	.word	0x000351bc
   1449c:	0003518a 	.word	0x0003518a
   144a0:	00032679 	.word	0x00032679
   144a4:	00035213 	.word	0x00035213

000144a8 <prng_reseed.constprop.0>:
#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   144a8:	b530      	push	{r4, r5, lr}
   144aa:	b093      	sub	sp, #76	; 0x4c
{
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   144ac:	2120      	movs	r1, #32
   144ae:	a80a      	add	r0, sp, #40	; 0x28
   144b0:	f7fe fa84 	bl	129bc <bt_hci_le_rand>
	if (ret) {
   144b4:	4604      	mov	r4, r0
   144b6:	bb18      	cbnz	r0, 14500 <prng_reseed.constprop.0+0x58>
	return z_impl_k_uptime_ticks();
   144b8:	f01b ff50 	bl	3035c <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   144bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   144c0:	fba0 2305 	umull	r2, r3, r0, r5
   144c4:	fb05 3101 	mla	r1, r5, r1, r3
		return ret;
	}

	extra = k_uptime_get();

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   144c8:	2308      	movs	r3, #8
   144ca:	0bd2      	lsrs	r2, r2, #15
   144cc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   144d0:	0bc9      	lsrs	r1, r1, #15
	extra = k_uptime_get();
   144d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   144d6:	9300      	str	r3, [sp, #0]
   144d8:	2220      	movs	r2, #32
   144da:	480b      	ldr	r0, [pc, #44]	; (14508 <prng_reseed.constprop.0+0x60>)
   144dc:	446b      	add	r3, sp
   144de:	a90a      	add	r1, sp, #40	; 0x28
   144e0:	f017 fbd7 	bl	2bc92 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   144e4:	b960      	cbnz	r0, 14500 <prng_reseed.constprop.0+0x58>
		LOG_ERR("Failed to re-seed PRNG");
   144e6:	4b09      	ldr	r3, [pc, #36]	; (1450c <prng_reseed.constprop.0+0x64>)
   144e8:	9309      	str	r3, [sp, #36]	; 0x24
   144ea:	2302      	movs	r3, #2
   144ec:	9308      	str	r3, [sp, #32]
   144ee:	4623      	mov	r3, r4
   144f0:	f06f 0404 	mvn.w	r4, #4
   144f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   144f8:	4805      	ldr	r0, [pc, #20]	; (14510 <prng_reseed.constprop.0+0x68>)
   144fa:	aa08      	add	r2, sp, #32
   144fc:	f7fa f9d8 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -EIO;
	}

	return 0;
}
   14500:	4620      	mov	r0, r4
   14502:	b013      	add	sp, #76	; 0x4c
   14504:	bd30      	pop	{r4, r5, pc}
   14506:	bf00      	nop
   14508:	20009c70 	.word	0x20009c70
   1450c:	00035245 	.word	0x00035245
   14510:	0003150c 	.word	0x0003150c

00014514 <prng_init>:

int prng_init(void)
{
   14514:	b510      	push	{r4, lr}
   14516:	b088      	sub	sp, #32
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   14518:	2108      	movs	r1, #8
   1451a:	4668      	mov	r0, sp
   1451c:	f7fe fa4e 	bl	129bc <bt_hci_le_rand>
	if (ret) {
   14520:	4604      	mov	r4, r0
   14522:	b990      	cbnz	r0, 1454a <prng_init+0x36>
		return ret;
	}

	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   14524:	2208      	movs	r2, #8
   14526:	4669      	mov	r1, sp
   14528:	480b      	ldr	r0, [pc, #44]	; (14558 <prng_init+0x44>)
   1452a:	f017 fb92 	bl	2bc52 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1452e:	b978      	cbnz	r0, 14550 <prng_init+0x3c>
		LOG_ERR("Failed to initialize PRNG");
   14530:	4b0a      	ldr	r3, [pc, #40]	; (1455c <prng_init+0x48>)
   14532:	9307      	str	r3, [sp, #28]
   14534:	2302      	movs	r3, #2
   14536:	9306      	str	r3, [sp, #24]
   14538:	4623      	mov	r3, r4
		return -EIO;
   1453a:	f06f 0404 	mvn.w	r4, #4
   1453e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14542:	4807      	ldr	r0, [pc, #28]	; (14560 <prng_init+0x4c>)
   14544:	aa06      	add	r2, sp, #24
   14546:	f7fa f9b3 	bl	e8b0 <z_impl_z_log_msg_static_create>
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1454a:	4620      	mov	r0, r4
   1454c:	b008      	add	sp, #32
   1454e:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   14550:	f7ff ffaa 	bl	144a8 <prng_reseed.constprop.0>
   14554:	4604      	mov	r4, r0
   14556:	e7f8      	b.n	1454a <prng_init+0x36>
   14558:	20009c70 	.word	0x20009c70
   1455c:	0003525c 	.word	0x0003525c
   14560:	0003150c 	.word	0x0003150c

00014564 <bt_rand>:

#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
   14564:	b538      	push	{r3, r4, r5, lr}
   14566:	460d      	mov	r5, r1
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   14568:	4604      	mov	r4, r0
   1456a:	b198      	cbz	r0, 14594 <bt_rand+0x30>
   1456c:	b191      	cbz	r1, 14594 <bt_rand+0x30>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1456e:	4a0b      	ldr	r2, [pc, #44]	; (1459c <bt_rand+0x38>)
   14570:	f017 fba8 	bl	2bcc4 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   14574:	1c43      	adds	r3, r0, #1
   14576:	d107      	bne.n	14588 <bt_rand+0x24>
		ret = prng_reseed(&prng);
   14578:	f7ff ff96 	bl	144a8 <prng_reseed.constprop.0>
		if (ret) {
   1457c:	b948      	cbnz	r0, 14592 <bt_rand+0x2e>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1457e:	4629      	mov	r1, r5
   14580:	4620      	mov	r0, r4
   14582:	4a06      	ldr	r2, [pc, #24]	; (1459c <bt_rand+0x38>)
   14584:	f017 fb9e 	bl	2bcc4 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
   14588:	2801      	cmp	r0, #1
   1458a:	bf0c      	ite	eq
   1458c:	2000      	moveq	r0, #0
   1458e:	f06f 0004 	mvnne.w	r0, #4
}
   14592:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14594:	f06f 0015 	mvn.w	r0, #21
   14598:	e7fb      	b.n	14592 <bt_rand+0x2e>
   1459a:	bf00      	nop
   1459c:	20009c70 	.word	0x20009c70

000145a0 <bt_pub_key_is_debug>:
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   145a0:	2240      	movs	r2, #64	; 0x40
{
   145a2:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   145a4:	4903      	ldr	r1, [pc, #12]	; (145b4 <bt_pub_key_is_debug+0x14>)
   145a6:	f01b ffe2 	bl	3056e <memcmp>
}
   145aa:	fab0 f080 	clz	r0, r0
   145ae:	0940      	lsrs	r0, r0, #5
   145b0:	bd08      	pop	{r3, pc}
   145b2:	bf00      	nop
   145b4:	0003530c 	.word	0x0003530c

000145b8 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   145b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   145ba:	4b3d      	ldr	r3, [pc, #244]	; (146b0 <bt_pub_key_gen+0xf8>)
{
   145bc:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   145be:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   145c2:	f003 0306 	and.w	r3, r3, #6
   145c6:	2b06      	cmp	r3, #6
   145c8:	d00f      	beq.n	145ea <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   145ca:	4b3a      	ldr	r3, [pc, #232]	; (146b4 <bt_pub_key_gen+0xfc>)
   145cc:	9305      	str	r3, [sp, #20]
   145ce:	2302      	movs	r3, #2
   145d0:	9304      	str	r3, [sp, #16]
		return -ENOTSUP;
   145d2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   145d6:	2300      	movs	r3, #0
   145d8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   145dc:	4836      	ldr	r0, [pc, #216]	; (146b8 <bt_pub_key_gen+0x100>)
   145de:	aa04      	add	r2, sp, #16
   145e0:	f7fa f966 	bl	e8b0 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   145e4:	4628      	mov	r0, r5
   145e6:	b007      	add	sp, #28
   145e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   145ea:	2800      	cmp	r0, #0
   145ec:	d05d      	beq.n	146aa <bt_pub_key_gen+0xf2>
	return list->head;
   145ee:	4e33      	ldr	r6, [pc, #204]	; (146bc <bt_pub_key_gen+0x104>)
   145f0:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   145f2:	b1a2      	cbz	r2, 1461e <bt_pub_key_gen+0x66>
   145f4:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   145f6:	4283      	cmp	r3, r0
   145f8:	d10d      	bne.n	14616 <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   145fa:	4b31      	ldr	r3, [pc, #196]	; (146c0 <bt_pub_key_gen+0x108>)
   145fc:	9305      	str	r3, [sp, #20]
   145fe:	2302      	movs	r3, #2
   14600:	9304      	str	r3, [sp, #16]
   14602:	2300      	movs	r3, #0
   14604:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14608:	482b      	ldr	r0, [pc, #172]	; (146b8 <bt_pub_key_gen+0x100>)
   1460a:	aa04      	add	r2, sp, #16
   1460c:	f7fa f950 	bl	e8b0 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   14610:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14614:	e7e6      	b.n	145e4 <bt_pub_key_gen+0x2c>
	return node->next;
   14616:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14618:	b10b      	cbz	r3, 1461e <bt_pub_key_gen+0x66>
   1461a:	3b04      	subs	r3, #4
   1461c:	e7eb      	b.n	145f6 <bt_pub_key_gen+0x3e>
	parent->next = child;
   1461e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   14620:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   14622:	1d03      	adds	r3, r0, #4
	list->head = node;
   14624:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   14626:	b902      	cbnz	r2, 1462a <bt_pub_key_gen+0x72>
	list->tail = node;
   14628:	6073      	str	r3, [r6, #4]
   1462a:	4c26      	ldr	r4, [pc, #152]	; (146c4 <bt_pub_key_gen+0x10c>)
   1462c:	e8d4 7fef 	ldaex	r7, [r4]
   14630:	f047 0320 	orr.w	r3, r7, #32
   14634:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14638:	2a00      	cmp	r2, #0
   1463a:	d1f7      	bne.n	1462c <bt_pub_key_gen+0x74>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1463c:	f017 0720 	ands.w	r7, r7, #32
   14640:	d001      	beq.n	14646 <bt_pub_key_gen+0x8e>
	return 0;
   14642:	2500      	movs	r5, #0
   14644:	e7ce      	b.n	145e4 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14646:	e8d4 3fef 	ldaex	r3, [r4]
   1464a:	f023 0310 	bic.w	r3, r3, #16
   1464e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   14652:	2a00      	cmp	r2, #0
   14654:	d1f7      	bne.n	14646 <bt_pub_key_gen+0x8e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   14656:	463a      	mov	r2, r7
   14658:	4639      	mov	r1, r7
   1465a:	f242 0025 	movw	r0, #8229	; 0x2025
   1465e:	f7fe f909 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   14662:	4605      	mov	r5, r0
   14664:	2800      	cmp	r0, #0
   14666:	d0ec      	beq.n	14642 <bt_pub_key_gen+0x8a>
		LOG_ERR("Sending LE P256 Public Key command failed");
   14668:	4b17      	ldr	r3, [pc, #92]	; (146c8 <bt_pub_key_gen+0x110>)
   1466a:	9305      	str	r3, [sp, #20]
   1466c:	2302      	movs	r3, #2
   1466e:	9304      	str	r3, [sp, #16]
   14670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14674:	463b      	mov	r3, r7
   14676:	4810      	ldr	r0, [pc, #64]	; (146b8 <bt_pub_key_gen+0x100>)
   14678:	aa04      	add	r2, sp, #16
   1467a:	f7fa f919 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1467e:	e8d4 3fef 	ldaex	r3, [r4]
   14682:	f023 0320 	bic.w	r3, r3, #32
   14686:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1468a:	2a00      	cmp	r2, #0
   1468c:	d1f7      	bne.n	1467e <bt_pub_key_gen+0xc6>
	return list->head;
   1468e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14690:	b13c      	cbz	r4, 146a2 <bt_pub_key_gen+0xea>
			if (cb->func) {
   14692:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   14696:	3c04      	subs	r4, #4
			if (cb->func) {
   14698:	b10b      	cbz	r3, 1469e <bt_pub_key_gen+0xe6>
				cb->func(NULL);
   1469a:	2000      	movs	r0, #0
   1469c:	4798      	blx	r3
	return node->next;
   1469e:	6864      	ldr	r4, [r4, #4]
   146a0:	e7f6      	b.n	14690 <bt_pub_key_gen+0xd8>
	list->head = NULL;
   146a2:	2300      	movs	r3, #0
	list->tail = NULL;
   146a4:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   146a8:	e79c      	b.n	145e4 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   146aa:	f06f 0515 	mvn.w	r5, #21
   146ae:	e799      	b.n	145e4 <bt_pub_key_gen+0x2c>
   146b0:	20008000 	.word	0x20008000
   146b4:	00035285 	.word	0x00035285
   146b8:	000314ec 	.word	0x000314ec
   146bc:	200215cc 	.word	0x200215cc
   146c0:	000352a4 	.word	0x000352a4
   146c4:	200080cc 	.word	0x200080cc
   146c8:	000352c0 	.word	0x000352c0

000146cc <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146cc:	4b04      	ldr	r3, [pc, #16]	; (146e0 <bt_pub_key_get+0x14>)
   146ce:	e8d3 3faf 	lda	r3, [r3]

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
   146d2:	f013 0f10 	tst.w	r3, #16
}
   146d6:	4803      	ldr	r0, [pc, #12]	; (146e4 <bt_pub_key_get+0x18>)
   146d8:	bf08      	it	eq
   146da:	2000      	moveq	r0, #0
   146dc:	4770      	bx	lr
   146de:	bf00      	nop
   146e0:	200080cc 	.word	0x200080cc
   146e4:	200223b7 	.word	0x200223b7

000146e8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   146e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   146ea:	4e27      	ldr	r6, [pc, #156]	; (14788 <bt_dh_key_gen+0xa0>)
{
   146ec:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
   146ee:	6833      	ldr	r3, [r6, #0]
{
   146f0:	af00      	add	r7, sp, #0
	if (dh_key_cb == cb) {
   146f2:	428b      	cmp	r3, r1
   146f4:	d041      	beq.n	1477a <bt_dh_key_gen+0x92>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   146f6:	b123      	cbz	r3, 14702 <bt_dh_key_gen+0x1a>
		return -EBUSY;
   146f8:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   146fc:	4620      	mov	r0, r4
   146fe:	46bd      	mov	sp, r7
   14700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14702:	4b22      	ldr	r3, [pc, #136]	; (1478c <bt_dh_key_gen+0xa4>)
   14704:	e8d3 2faf 	lda	r2, [r3]
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   14708:	0692      	lsls	r2, r2, #26
   1470a:	d4f5      	bmi.n	146f8 <bt_dh_key_gen+0x10>
   1470c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   14710:	06db      	lsls	r3, r3, #27
   14712:	d535      	bpl.n	14780 <bt_dh_key_gen+0x98>
	dh_key_cb = cb;
   14714:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   14716:	f242 0026 	movw	r0, #8230	; 0x2026
   1471a:	2140      	movs	r1, #64	; 0x40
   1471c:	f7fe f85c 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   14720:	4605      	mov	r5, r0
   14722:	b338      	cbz	r0, 14774 <bt_dh_key_gen+0x8c>
	return net_buf_simple_add(&buf->b, len);
   14724:	2140      	movs	r1, #64	; 0x40
   14726:	300c      	adds	r0, #12
   14728:	f007 f860 	bl	1b7ec <net_buf_simple_add>
   1472c:	4623      	mov	r3, r4
   1472e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14732:	f853 1b04 	ldr.w	r1, [r3], #4
   14736:	4293      	cmp	r3, r2
   14738:	f840 1b04 	str.w	r1, [r0], #4
   1473c:	d1f9      	bne.n	14732 <bt_dh_key_gen+0x4a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   1473e:	2200      	movs	r2, #0
   14740:	4629      	mov	r1, r5
   14742:	f242 0026 	movw	r0, #8230	; 0x2026
   14746:	f7fe f895 	bl	12874 <bt_hci_cmd_send_sync>
	if (err) {
   1474a:	4604      	mov	r4, r0
   1474c:	2800      	cmp	r0, #0
   1474e:	d0d5      	beq.n	146fc <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
   14750:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   14752:	466d      	mov	r5, sp
   14754:	b088      	sub	sp, #32
   14756:	466a      	mov	r2, sp
		dh_key_cb = NULL;
   14758:	6033      	str	r3, [r6, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1475a:	490d      	ldr	r1, [pc, #52]	; (14790 <bt_dh_key_gen+0xa8>)
   1475c:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14760:	2103      	movs	r1, #3
   14762:	f842 1f10 	str.w	r1, [r2, #16]!
   14766:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1476a:	480a      	ldr	r0, [pc, #40]	; (14794 <bt_dh_key_gen+0xac>)
   1476c:	f7fa f8a0 	bl	e8b0 <z_impl_z_log_msg_static_create>
   14770:	46ad      	mov	sp, r5
		return err;
   14772:	e7c3      	b.n	146fc <bt_dh_key_gen+0x14>
		return -ENOBUFS;
   14774:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14778:	e7ea      	b.n	14750 <bt_dh_key_gen+0x68>
		return -EALREADY;
   1477a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1477e:	e7bd      	b.n	146fc <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
   14780:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   14784:	e7ba      	b.n	146fc <bt_dh_key_gen+0x14>
   14786:	bf00      	nop
   14788:	200215c8 	.word	0x200215c8
   1478c:	200080cc 	.word	0x200080cc
   14790:	000352ea 	.word	0x000352ea
   14794:	000314ec 	.word	0x000314ec

00014798 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   14798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1479a:	4b19      	ldr	r3, [pc, #100]	; (14800 <bt_hci_evt_le_pkey_complete+0x68>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1479c:	68c5      	ldr	r5, [r0, #12]
   1479e:	e8d3 2fef 	ldaex	r2, [r3]
   147a2:	f022 0220 	bic.w	r2, r2, #32
   147a6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   147aa:	2900      	cmp	r1, #0
   147ac:	d1f7      	bne.n	1479e <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   147ae:	782a      	ldrb	r2, [r5, #0]
   147b0:	b98a      	cbnz	r2, 147d6 <bt_hci_evt_le_pkey_complete+0x3e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   147b2:	4914      	ldr	r1, [pc, #80]	; (14804 <bt_hci_evt_le_pkey_complete+0x6c>)
   147b4:	1c6a      	adds	r2, r5, #1
   147b6:	f105 0041 	add.w	r0, r5, #65	; 0x41
   147ba:	f852 4b04 	ldr.w	r4, [r2], #4
   147be:	4282      	cmp	r2, r0
   147c0:	f841 4b04 	str.w	r4, [r1], #4
   147c4:	d1f9      	bne.n	147ba <bt_hci_evt_le_pkey_complete+0x22>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   147c6:	e8d3 1fef 	ldaex	r1, [r3]
   147ca:	f041 0110 	orr.w	r1, r1, #16
   147ce:	e8c3 1fe2 	stlex	r2, r1, [r3]
   147d2:	2a00      	cmp	r2, #0
   147d4:	d1f7      	bne.n	147c6 <bt_hci_evt_le_pkey_complete+0x2e>
	return list->head;
   147d6:	4e0c      	ldr	r6, [pc, #48]	; (14808 <bt_hci_evt_le_pkey_complete+0x70>)
   147d8:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147da:	b16c      	cbz	r4, 147f8 <bt_hci_evt_le_pkey_complete+0x60>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   147dc:	4f09      	ldr	r7, [pc, #36]	; (14804 <bt_hci_evt_le_pkey_complete+0x6c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147de:	3c04      	subs	r4, #4
		if (cb->func) {
   147e0:	6823      	ldr	r3, [r4, #0]
   147e2:	b12b      	cbz	r3, 147f0 <bt_hci_evt_le_pkey_complete+0x58>
			cb->func(evt->status ? NULL : pub_key);
   147e4:	782a      	ldrb	r2, [r5, #0]
   147e6:	2a00      	cmp	r2, #0
   147e8:	bf0c      	ite	eq
   147ea:	4638      	moveq	r0, r7
   147ec:	2000      	movne	r0, #0
   147ee:	4798      	blx	r3
	return node->next;
   147f0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   147f2:	b10c      	cbz	r4, 147f8 <bt_hci_evt_le_pkey_complete+0x60>
   147f4:	3c04      	subs	r4, #4
   147f6:	e7f3      	b.n	147e0 <bt_hci_evt_le_pkey_complete+0x48>
	list->head = NULL;
   147f8:	2300      	movs	r3, #0
	list->tail = NULL;
   147fa:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   147fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14800:	200080cc 	.word	0x200080cc
   14804:	200223b7 	.word	0x200223b7
   14808:	200215cc 	.word	0x200215cc

0001480c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1480c:	4905      	ldr	r1, [pc, #20]	; (14824 <bt_hci_evt_le_dhkey_complete+0x18>)
   1480e:	680b      	ldr	r3, [r1, #0]
   14810:	b133      	cbz	r3, 14820 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   14812:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   14814:	2000      	movs	r0, #0
   14816:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   14818:	7811      	ldrb	r1, [r2, #0]
   1481a:	b901      	cbnz	r1, 1481e <bt_hci_evt_le_dhkey_complete+0x12>
   1481c:	1c50      	adds	r0, r2, #1
   1481e:	4718      	bx	r3
	}
}
   14820:	4770      	bx	lr
   14822:	bf00      	nop
   14824:	200215c8 	.word	0x200215c8

00014828 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   14828:	b570      	push	{r4, r5, r6, lr}
   1482a:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1482c:	4b12      	ldr	r3, [pc, #72]	; (14878 <notify_connected+0x50>)
   1482e:	681d      	ldr	r5, [r3, #0]
   14830:	b995      	cbnz	r5, 14858 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14832:	4d12      	ldr	r5, [pc, #72]	; (1487c <notify_connected+0x54>)
   14834:	4e12      	ldr	r6, [pc, #72]	; (14880 <notify_connected+0x58>)
   14836:	42b5      	cmp	r5, r6
   14838:	d91c      	bls.n	14874 <notify_connected+0x4c>
   1483a:	4912      	ldr	r1, [pc, #72]	; (14884 <notify_connected+0x5c>)
   1483c:	f240 535b 	movw	r3, #1371	; 0x55b
   14840:	4a11      	ldr	r2, [pc, #68]	; (14888 <notify_connected+0x60>)
   14842:	4812      	ldr	r0, [pc, #72]	; (1488c <notify_connected+0x64>)
   14844:	f015 ff49 	bl	2a6da <assert_print>
   14848:	4811      	ldr	r0, [pc, #68]	; (14890 <notify_connected+0x68>)
   1484a:	f015 ff46 	bl	2a6da <assert_print>
   1484e:	f240 515b 	movw	r1, #1371	; 0x55b
   14852:	480d      	ldr	r0, [pc, #52]	; (14888 <notify_connected+0x60>)
   14854:	f015 ff3a 	bl	2a6cc <assert_post_action>
		if (cb->connected) {
   14858:	682b      	ldr	r3, [r5, #0]
   1485a:	b113      	cbz	r3, 14862 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   1485c:	4620      	mov	r0, r4
   1485e:	7b21      	ldrb	r1, [r4, #12]
   14860:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14862:	69ad      	ldr	r5, [r5, #24]
   14864:	e7e4      	b.n	14830 <notify_connected+0x8>
		if (cb->connected) {
   14866:	682b      	ldr	r3, [r5, #0]
   14868:	b113      	cbz	r3, 14870 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   1486a:	4620      	mov	r0, r4
   1486c:	7b21      	ldrb	r1, [r4, #12]
   1486e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14870:	351c      	adds	r5, #28
   14872:	e7e0      	b.n	14836 <notify_connected+0xe>
   14874:	d3f7      	bcc.n	14866 <notify_connected+0x3e>
		}
	}
}
   14876:	bd70      	pop	{r4, r5, r6, pc}
   14878:	200215f4 	.word	0x200215f4
   1487c:	00031468 	.word	0x00031468
   14880:	00031484 	.word	0x00031484
   14884:	00035383 	.word	0x00035383
   14888:	00035353 	.word	0x00035353
   1488c:	00032679 	.word	0x00032679
   14890:	00033719 	.word	0x00033719

00014894 <tx_notify>:
{
   14894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14898:	4604      	mov	r4, r0
	tx->cb = NULL;
   1489a:	f04f 0800 	mov.w	r8, #0
	k_fifo_put(&free_tx, tx);
   1489e:	4f14      	ldr	r7, [pc, #80]	; (148f0 <tx_notify+0x5c>)
	__asm__ volatile(
   148a0:	f04f 0220 	mov.w	r2, #32
   148a4:	f3ef 8311 	mrs	r3, BASEPRI
   148a8:	f382 8812 	msr	BASEPRI_MAX, r2
   148ac:	f3bf 8f6f 	isb	sy
	return list->head;
   148b0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   148b2:	b929      	cbnz	r1, 148c0 <tx_notify+0x2c>
	__asm__ volatile(
   148b4:	f383 8811 	msr	BASEPRI, r3
   148b8:	f3bf 8f6f 	isb	sy
}
   148bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   148c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   148c2:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   148c4:	4281      	cmp	r1, r0
	list->tail = node;
   148c6:	bf08      	it	eq
   148c8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   148ca:	6222      	str	r2, [r4, #32]
   148cc:	f383 8811 	msr	BASEPRI, r3
   148d0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   148d4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	k_fifo_put(&free_tx, tx);
   148d8:	4638      	mov	r0, r7
	tx->user_data = NULL;
   148da:	e9c1 8801 	strd	r8, r8, [r1, #4]
	tx->pending_no_cb = 0U;
   148de:	f8c1 800c 	str.w	r8, [r1, #12]
	k_fifo_put(&free_tx, tx);
   148e2:	f01b fc7d 	bl	301e0 <k_queue_append>
		cb(conn, user_data, 0);
   148e6:	2200      	movs	r2, #0
   148e8:	4631      	mov	r1, r6
   148ea:	4620      	mov	r0, r4
   148ec:	47a8      	blx	r5
	while (1) {
   148ee:	e7d7      	b.n	148a0 <tx_notify+0xc>
   148f0:	20008cb8 	.word	0x20008cb8

000148f4 <conn_tx_destroy>:
{
   148f4:	b570      	push	{r4, r5, r6, lr}
   148f6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   148f8:	b949      	cbnz	r1, 1490e <conn_tx_destroy+0x1a>
   148fa:	490d      	ldr	r1, [pc, #52]	; (14930 <conn_tx_destroy+0x3c>)
   148fc:	480d      	ldr	r0, [pc, #52]	; (14934 <conn_tx_destroy+0x40>)
   148fe:	2339      	movs	r3, #57	; 0x39
   14900:	4a0d      	ldr	r2, [pc, #52]	; (14938 <conn_tx_destroy+0x44>)
   14902:	f015 feea 	bl	2a6da <assert_print>
   14906:	2139      	movs	r1, #57	; 0x39
   14908:	480b      	ldr	r0, [pc, #44]	; (14938 <conn_tx_destroy+0x44>)
   1490a:	f015 fedf 	bl	2a6cc <assert_post_action>
	tx->cb = NULL;
   1490e:	2200      	movs	r2, #0
	void *user_data = tx->user_data;
   14910:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   14914:	60ca      	str	r2, [r1, #12]
	tx->user_data = NULL;
   14916:	e9c1 2201 	strd	r2, r2, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1491a:	4808      	ldr	r0, [pc, #32]	; (1493c <conn_tx_destroy+0x48>)
   1491c:	f01b fc60 	bl	301e0 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   14920:	4631      	mov	r1, r6
   14922:	4620      	mov	r0, r4
   14924:	462b      	mov	r3, r5
}
   14926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1492a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1492e:	4718      	bx	r3
   14930:	0003539e 	.word	0x0003539e
   14934:	00032679 	.word	0x00032679
   14938:	00035353 	.word	0x00035353
   1493c:	20008cb8 	.word	0x20008cb8

00014940 <send_frag>:
{
   14940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14944:	4604      	mov	r4, r0
   14946:	460e      	mov	r6, r1
   14948:	4692      	mov	sl, r2
   1494a:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1494c:	698d      	ldr	r5, [r1, #24]
{
   1494e:	af00      	add	r7, sp, #0
	return z_impl_k_sem_take(sem, timeout);
   14950:	f04f 33ff 	mov.w	r3, #4294967295
   14954:	f04f 32ff 	mov.w	r2, #4294967295
   14958:	484c      	ldr	r0, [pc, #304]	; (14a8c <send_frag+0x14c>)
   1495a:	f010 fe89 	bl	25670 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1495e:	7b63      	ldrb	r3, [r4, #13]
   14960:	2b07      	cmp	r3, #7
   14962:	f040 8086 	bne.w	14a72 <send_frag+0x132>
	__asm__ volatile(
   14966:	f04f 0320 	mov.w	r3, #32
   1496a:	f3ef 8211 	mrs	r2, BASEPRI
   1496e:	f383 8812 	msr	BASEPRI_MAX, r3
   14972:	f3bf 8f6f 	isb	sy
	if (tx) {
   14976:	2d00      	cmp	r5, #0
   14978:	d04e      	beq.n	14a18 <send_frag+0xd8>
	parent->next = child;
   1497a:	2300      	movs	r3, #0
   1497c:	602b      	str	r3, [r5, #0]
	return list->tail;
   1497e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   14980:	2b00      	cmp	r3, #0
   14982:	d146      	bne.n	14a12 <send_frag+0xd2>
	list->head = node;
   14984:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   14988:	f382 8811 	msr	BASEPRI, r2
   1498c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   14990:	2104      	movs	r1, #4
   14992:	f106 000c 	add.w	r0, r6, #12
   14996:	f006 fecd 	bl	1b734 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1499a:	8823      	ldrh	r3, [r4, #0]
   1499c:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   149a0:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   149a4:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   149a8:	8a33      	ldrh	r3, [r6, #16]
   149aa:	3b04      	subs	r3, #4
   149ac:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   149ae:	2302      	movs	r3, #2
	return bt_send(buf);
   149b0:	4630      	mov	r0, r6
   149b2:	7633      	strb	r3, [r6, #24]
   149b4:	f7fe fa8c 	bl	12ed0 <bt_send>
	if (err) {
   149b8:	2800      	cmp	r0, #0
   149ba:	d064      	beq.n	14a86 <send_frag+0x146>
		LOG_ERR("Unable to send to driver (err %d)", err);
   149bc:	46ea      	mov	sl, sp
   149be:	b088      	sub	sp, #32
   149c0:	466a      	mov	r2, sp
   149c2:	4b33      	ldr	r3, [pc, #204]	; (14a90 <send_frag+0x150>)
   149c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   149c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   149cc:	2303      	movs	r3, #3
   149ce:	4831      	ldr	r0, [pc, #196]	; (14a94 <send_frag+0x154>)
   149d0:	f842 3f10 	str.w	r3, [r2, #16]!
   149d4:	f017 fde1 	bl	2c59a <z_log_msg_static_create.constprop.0>
   149d8:	46d5      	mov	sp, sl
	__asm__ volatile(
   149da:	f04f 0320 	mov.w	r3, #32
   149de:	f3ef 8a11 	mrs	sl, BASEPRI
   149e2:	f383 8812 	msr	BASEPRI_MAX, r3
   149e6:	f3bf 8f6f 	isb	sy
		if (tx) {
   149ea:	b315      	cbz	r5, 14a32 <send_frag+0xf2>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   149ec:	4629      	mov	r1, r5
   149ee:	f104 0014 	add.w	r0, r4, #20
   149f2:	f017 fdac 	bl	2c54e <sys_slist_find_and_remove>
	__asm__ volatile(
   149f6:	f38a 8811 	msr	BASEPRI, sl
   149fa:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   149fe:	4823      	ldr	r0, [pc, #140]	; (14a8c <send_frag+0x14c>)
   14a00:	f010 fdf2 	bl	255e8 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   14a04:	2300      	movs	r3, #0
		conn_tx_destroy(conn, tx);
   14a06:	4629      	mov	r1, r5
   14a08:	4620      	mov	r0, r4
		tx_data(buf)->tx = NULL;
   14a0a:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   14a0c:	f7ff ff72 	bl	148f4 <conn_tx_destroy>
   14a10:	e028      	b.n	14a64 <send_frag+0x124>
	parent->next = child;
   14a12:	601d      	str	r5, [r3, #0]
	list->tail = node;
   14a14:	61a5      	str	r5, [r4, #24]
}
   14a16:	e7b7      	b.n	14988 <send_frag+0x48>
	return list->tail;
   14a18:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   14a1a:	b133      	cbz	r3, 14a2a <send_frag+0xea>
			pending_no_cb = &tail_tx->pending_no_cb;
   14a1c:	f103 080c 	add.w	r8, r3, #12
   14a20:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14a22:	3301      	adds	r3, #1
   14a24:	f8c8 3000 	str.w	r3, [r8]
   14a28:	e7ae      	b.n	14988 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   14a2a:	69e3      	ldr	r3, [r4, #28]
   14a2c:	f104 081c 	add.w	r8, r4, #28
   14a30:	e7f7      	b.n	14a22 <send_frag+0xe2>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   14a32:	f8d8 3000 	ldr.w	r3, [r8]
   14a36:	b95b      	cbnz	r3, 14a50 <send_frag+0x110>
   14a38:	4917      	ldr	r1, [pc, #92]	; (14a98 <send_frag+0x158>)
   14a3a:	4818      	ldr	r0, [pc, #96]	; (14a9c <send_frag+0x15c>)
   14a3c:	f240 2327 	movw	r3, #551	; 0x227
   14a40:	4a17      	ldr	r2, [pc, #92]	; (14aa0 <send_frag+0x160>)
   14a42:	f015 fe4a 	bl	2a6da <assert_print>
   14a46:	f240 2127 	movw	r1, #551	; 0x227
   14a4a:	4815      	ldr	r0, [pc, #84]	; (14aa0 <send_frag+0x160>)
   14a4c:	f015 fe3e 	bl	2a6cc <assert_post_action>
			(*pending_no_cb)--;
   14a50:	3b01      	subs	r3, #1
   14a52:	f8c8 3000 	str.w	r3, [r8]
   14a56:	f38a 8811 	msr	BASEPRI, sl
   14a5a:	f3bf 8f6f 	isb	sy
   14a5e:	480b      	ldr	r0, [pc, #44]	; (14a8c <send_frag+0x14c>)
   14a60:	f010 fdc2 	bl	255e8 <z_impl_k_sem_give>
	if (always_consume) {
   14a64:	f1b9 0f00 	cmp.w	r9, #0
   14a68:	d109      	bne.n	14a7e <send_frag+0x13e>
	return false;
   14a6a:	2000      	movs	r0, #0
}
   14a6c:	46bd      	mov	sp, r7
   14a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a72:	4806      	ldr	r0, [pc, #24]	; (14a8c <send_frag+0x14c>)
   14a74:	f010 fdb8 	bl	255e8 <z_impl_k_sem_give>
	if (tx) {
   14a78:	2d00      	cmp	r5, #0
   14a7a:	d1c3      	bne.n	14a04 <send_frag+0xc4>
   14a7c:	e7f2      	b.n	14a64 <send_frag+0x124>
		net_buf_unref(buf);
   14a7e:	4630      	mov	r0, r6
   14a80:	f006 fd92 	bl	1b5a8 <net_buf_unref>
   14a84:	e7f1      	b.n	14a6a <send_frag+0x12a>
	return true;
   14a86:	2001      	movs	r0, #1
   14a88:	e7f0      	b.n	14a6c <send_frag+0x12c>
   14a8a:	bf00      	nop
   14a8c:	20008100 	.word	0x20008100
   14a90:	00034bab 	.word	0x00034bab
   14a94:	000314dc 	.word	0x000314dc
   14a98:	000353a1 	.word	0x000353a1
   14a9c:	00032679 	.word	0x00032679
   14aa0:	00035353 	.word	0x00035353

00014aa4 <bt_conn_get_pkts>:
}
   14aa4:	4800      	ldr	r0, [pc, #0]	; (14aa8 <bt_conn_get_pkts+0x4>)
   14aa6:	4770      	bx	lr
   14aa8:	20008100 	.word	0x20008100

00014aac <bt_conn_new>:
{
   14aac:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   14aae:	2200      	movs	r2, #0
   14ab0:	4604      	mov	r4, r0
   14ab2:	428a      	cmp	r2, r1
   14ab4:	d102      	bne.n	14abc <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14ab6:	2400      	movs	r4, #0
}
   14ab8:	4620      	mov	r0, r4
   14aba:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14abc:	2001      	movs	r0, #1
   14abe:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   14ac2:	e8d3 5fef 	ldaex	r5, [r3]
   14ac6:	2d00      	cmp	r5, #0
   14ac8:	d104      	bne.n	14ad4 <bt_conn_new+0x28>
   14aca:	e8c3 0fec 	stlex	ip, r0, [r3]
   14ace:	f1bc 0f00 	cmp.w	ip, #0
   14ad2:	d1f6      	bne.n	14ac2 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   14ad4:	d002      	beq.n	14adc <bt_conn_new+0x30>
   14ad6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   14ad8:	4402      	add	r2, r0
   14ada:	e7ea      	b.n	14ab2 <bt_conn_new+0x6>
	if (!conn) {
   14adc:	2c00      	cmp	r4, #0
   14ade:	d0ea      	beq.n	14ab6 <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   14ae0:	22c4      	movs	r2, #196	; 0xc4
   14ae2:	2100      	movs	r1, #0
   14ae4:	4620      	mov	r0, r4
   14ae6:	f01b fd8c 	bl	30602 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   14aea:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14aee:	4904      	ldr	r1, [pc, #16]	; (14b00 <bt_conn_new+0x54>)
   14af0:	f011 f9fe 	bl	25ef0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   14af4:	4903      	ldr	r1, [pc, #12]	; (14b04 <bt_conn_new+0x58>)
   14af6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14afa:	f011 f81d 	bl	25b38 <k_work_init>
	return conn;
   14afe:	e7db      	b.n	14ab8 <bt_conn_new+0xc>
   14b00:	0001555d 	.word	0x0001555d
   14b04:	0002c5a1 	.word	0x0002c5a1

00014b08 <conn_cleanup>:
{
   14b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b0c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   14b0e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   14b10:	f104 0638 	add.w	r6, r4, #56	; 0x38
   14b14:	2300      	movs	r3, #0
   14b16:	2200      	movs	r2, #0
   14b18:	4630      	mov	r0, r6
   14b1a:	f019 fa6f 	bl	2dffc <net_buf_get>
   14b1e:	4603      	mov	r3, r0
   14b20:	b980      	cbnz	r0, 14b44 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   14b22:	6963      	ldr	r3, [r4, #20]
   14b24:	b1cb      	cbz	r3, 14b5a <conn_cleanup+0x52>
   14b26:	4918      	ldr	r1, [pc, #96]	; (14b88 <conn_cleanup+0x80>)
   14b28:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   14b2c:	4a17      	ldr	r2, [pc, #92]	; (14b8c <conn_cleanup+0x84>)
   14b2e:	4818      	ldr	r0, [pc, #96]	; (14b90 <conn_cleanup+0x88>)
   14b30:	f015 fdd3 	bl	2a6da <assert_print>
   14b34:	4817      	ldr	r0, [pc, #92]	; (14b94 <conn_cleanup+0x8c>)
   14b36:	f015 fdd0 	bl	2a6da <assert_print>
   14b3a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14b3e:	4813      	ldr	r0, [pc, #76]	; (14b8c <conn_cleanup+0x84>)
   14b40:	f015 fdc4 	bl	2a6cc <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   14b44:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   14b46:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   14b48:	f006 fd2e 	bl	1b5a8 <net_buf_unref>
		if (tx) {
   14b4c:	2d00      	cmp	r5, #0
   14b4e:	d0e1      	beq.n	14b14 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   14b50:	4629      	mov	r1, r5
   14b52:	4620      	mov	r0, r4
   14b54:	f7ff fece 	bl	148f4 <conn_tx_destroy>
   14b58:	e7da      	b.n	14b10 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   14b5a:	69e3      	ldr	r3, [r4, #28]
   14b5c:	b14b      	cbz	r3, 14b72 <conn_cleanup+0x6a>
   14b5e:	490e      	ldr	r1, [pc, #56]	; (14b98 <conn_cleanup+0x90>)
   14b60:	f240 23b5 	movw	r3, #693	; 0x2b5
   14b64:	4a09      	ldr	r2, [pc, #36]	; (14b8c <conn_cleanup+0x84>)
   14b66:	480a      	ldr	r0, [pc, #40]	; (14b90 <conn_cleanup+0x88>)
   14b68:	f015 fdb7 	bl	2a6da <assert_print>
   14b6c:	f240 21b5 	movw	r1, #693	; 0x2b5
   14b70:	e7e5      	b.n	14b3e <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   14b72:	4620      	mov	r0, r4
   14b74:	f017 fd17 	bl	2c5a6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b78:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14b7c:	2200      	movs	r2, #0
}
   14b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   14b82:	2300      	movs	r3, #0
   14b84:	f011 bad0 	b.w	26128 <k_work_reschedule>
   14b88:	000353b4 	.word	0x000353b4
   14b8c:	00035353 	.word	0x00035353
   14b90:	00032679 	.word	0x00032679
   14b94:	000353da 	.word	0x000353da
   14b98:	000353ef 	.word	0x000353ef

00014b9c <bt_conn_recv>:
{
   14b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ba0:	4616      	mov	r6, r2
   14ba2:	b086      	sub	sp, #24
   14ba4:	af00      	add	r7, sp, #0
   14ba6:	4604      	mov	r4, r0
   14ba8:	460d      	mov	r5, r1
	tx_notify(conn);
   14baa:	f7ff fe73 	bl	14894 <tx_notify>
	switch (flags) {
   14bae:	2e01      	cmp	r6, #1
   14bb0:	d030      	beq.n	14c14 <bt_conn_recv+0x78>
   14bb2:	2e02      	cmp	r6, #2
   14bb4:	d16a      	bne.n	14c8c <bt_conn_recv+0xf0>
		if (conn->rx) {
   14bb6:	6923      	ldr	r3, [r4, #16]
   14bb8:	b163      	cbz	r3, 14bd4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   14bba:	4b40      	ldr	r3, [pc, #256]	; (14cbc <bt_conn_recv+0x120>)
   14bbc:	4840      	ldr	r0, [pc, #256]	; (14cc0 <bt_conn_recv+0x124>)
   14bbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14bc2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   14bc6:	f107 0210 	add.w	r2, r7, #16
   14bca:	f017 fce6 	bl	2c59a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   14bce:	4620      	mov	r0, r4
   14bd0:	f017 fce9 	bl	2c5a6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   14bd4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14bd6:	6921      	ldr	r1, [r4, #16]
   14bd8:	8a08      	ldrh	r0, [r1, #16]
   14bda:	2801      	cmp	r0, #1
   14bdc:	d930      	bls.n	14c40 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14bde:	68cb      	ldr	r3, [r1, #12]
   14be0:	881b      	ldrh	r3, [r3, #0]
   14be2:	3304      	adds	r3, #4
   14be4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   14be6:	4298      	cmp	r0, r3
   14be8:	d32a      	bcc.n	14c40 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   14bea:	d95f      	bls.n	14cac <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   14bec:	466d      	mov	r5, sp
   14bee:	b088      	sub	sp, #32
   14bf0:	466a      	mov	r2, sp
   14bf2:	61d3      	str	r3, [r2, #28]
   14bf4:	2304      	movs	r3, #4
   14bf6:	4933      	ldr	r1, [pc, #204]	; (14cc4 <bt_conn_recv+0x128>)
   14bf8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   14bfc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14c00:	482f      	ldr	r0, [pc, #188]	; (14cc0 <bt_conn_recv+0x124>)
   14c02:	f842 3f10 	str.w	r3, [r2, #16]!
   14c06:	f017 fcc8 	bl	2c59a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14c0a:	4620      	mov	r0, r4
   14c0c:	46ad      	mov	sp, r5
   14c0e:	f017 fcca 	bl	2c5a6 <bt_conn_reset_rx_state>
		return;
   14c12:	e015      	b.n	14c40 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   14c14:	6920      	ldr	r0, [r4, #16]
   14c16:	b970      	cbnz	r0, 14c36 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   14c18:	4b2b      	ldr	r3, [pc, #172]	; (14cc8 <bt_conn_recv+0x12c>)
   14c1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c1e:	617b      	str	r3, [r7, #20]
   14c20:	2302      	movs	r3, #2
   14c22:	4827      	ldr	r0, [pc, #156]	; (14cc0 <bt_conn_recv+0x124>)
   14c24:	613b      	str	r3, [r7, #16]
   14c26:	f107 0210 	add.w	r2, r7, #16
   14c2a:	f017 fcb6 	bl	2c59a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   14c2e:	4620      	mov	r0, r4
   14c30:	f017 fcb9 	bl	2c5a6 <bt_conn_reset_rx_state>
   14c34:	e001      	b.n	14c3a <bt_conn_recv+0x9e>
		if (!buf->len) {
   14c36:	8a2e      	ldrh	r6, [r5, #16]
   14c38:	b936      	cbnz	r6, 14c48 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   14c3a:	4628      	mov	r0, r5
   14c3c:	f006 fcb4 	bl	1b5a8 <net_buf_unref>
}
   14c40:	3718      	adds	r7, #24
   14c42:	46bd      	mov	sp, r7
   14c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   14c48:	300c      	adds	r0, #12
   14c4a:	f019 f9ec 	bl	2e026 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   14c4e:	4286      	cmp	r6, r0
   14c50:	d912      	bls.n	14c78 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   14c52:	4b1e      	ldr	r3, [pc, #120]	; (14ccc <bt_conn_recv+0x130>)
   14c54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14c58:	617b      	str	r3, [r7, #20]
   14c5a:	2302      	movs	r3, #2
   14c5c:	4818      	ldr	r0, [pc, #96]	; (14cc0 <bt_conn_recv+0x124>)
   14c5e:	613b      	str	r3, [r7, #16]
   14c60:	f107 0210 	add.w	r2, r7, #16
   14c64:	f017 fc99 	bl	2c59a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   14c68:	2200      	movs	r2, #0
   14c6a:	4620      	mov	r0, r4
   14c6c:	6921      	ldr	r1, [r4, #16]
   14c6e:	f000 ff19 	bl	15aa4 <bt_l2cap_recv>
			conn->rx = NULL;
   14c72:	2300      	movs	r3, #0
   14c74:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   14c76:	e7e0      	b.n	14c3a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14c78:	6920      	ldr	r0, [r4, #16]
   14c7a:	8a2a      	ldrh	r2, [r5, #16]
   14c7c:	68e9      	ldr	r1, [r5, #12]
   14c7e:	300c      	adds	r0, #12
   14c80:	f019 f9d9 	bl	2e036 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   14c84:	4628      	mov	r0, r5
   14c86:	f006 fc8f 	bl	1b5a8 <net_buf_unref>
		break;
   14c8a:	e7a4      	b.n	14bd6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14c8c:	46e8      	mov	r8, sp
   14c8e:	b088      	sub	sp, #32
   14c90:	466a      	mov	r2, sp
   14c92:	4b0f      	ldr	r3, [pc, #60]	; (14cd0 <bt_conn_recv+0x134>)
   14c94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (flags) {
   14c98:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   14c9c:	2303      	movs	r3, #3
   14c9e:	4808      	ldr	r0, [pc, #32]	; (14cc0 <bt_conn_recv+0x124>)
   14ca0:	f842 3f10 	str.w	r3, [r2, #16]!
   14ca4:	f017 fc79 	bl	2c59a <z_log_msg_static_create.constprop.0>
   14ca8:	46c5      	mov	sp, r8
   14caa:	e7c0      	b.n	14c2e <bt_conn_recv+0x92>
	conn->rx = NULL;
   14cac:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   14cae:	2201      	movs	r2, #1
   14cb0:	4620      	mov	r0, r4
	conn->rx = NULL;
   14cb2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14cb4:	f000 fef6 	bl	15aa4 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   14cb8:	e7c2      	b.n	14c40 <bt_conn_recv+0xa4>
   14cba:	bf00      	nop
   14cbc:	00035408 	.word	0x00035408
   14cc0:	000314dc 	.word	0x000314dc
   14cc4:	00035488 	.word	0x00035488
   14cc8:	00035425 	.word	0x00035425
   14ccc:	00035443 	.word	0x00035443
   14cd0:	0003546a 	.word	0x0003546a

00014cd4 <bt_conn_send_cb>:
{
   14cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cd8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14cda:	7b43      	ldrb	r3, [r0, #13]
{
   14cdc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14cde:	2b07      	cmp	r3, #7
{
   14ce0:	460f      	mov	r7, r1
   14ce2:	4616      	mov	r6, r2
   14ce4:	b086      	sub	sp, #24
	if (conn->state != BT_CONN_CONNECTED) {
   14ce6:	d00c      	beq.n	14d02 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   14ce8:	4b28      	ldr	r3, [pc, #160]	; (14d8c <bt_conn_send_cb+0xb8>)
   14cea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14cee:	9305      	str	r3, [sp, #20]
   14cf0:	2302      	movs	r3, #2
   14cf2:	4827      	ldr	r0, [pc, #156]	; (14d90 <bt_conn_send_cb+0xbc>)
   14cf4:	aa04      	add	r2, sp, #16
   14cf6:	9304      	str	r3, [sp, #16]
   14cf8:	f017 fc4f 	bl	2c59a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   14cfc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14d00:	e01d      	b.n	14d3e <bt_conn_send_cb+0x6a>
	if (cb) {
   14d02:	2a00      	cmp	r2, #0
   14d04:	d040      	beq.n	14d88 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   14d06:	f012 fb97 	bl	27438 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14d0a:	4b22      	ldr	r3, [pc, #136]	; (14d94 <bt_conn_send_cb+0xc0>)
   14d0c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14d0e:	4822      	ldr	r0, [pc, #136]	; (14d98 <bt_conn_send_cb+0xc4>)
   14d10:	bf07      	ittee	eq
   14d12:	2200      	moveq	r2, #0
   14d14:	2300      	moveq	r3, #0
   14d16:	f04f 32ff 	movne.w	r2, #4294967295
   14d1a:	f04f 33ff 	movne.w	r3, #4294967295
   14d1e:	f010 fbf9 	bl	25514 <z_impl_k_queue_get>
   14d22:	4604      	mov	r4, r0
		if (!tx) {
   14d24:	b970      	cbnz	r0, 14d44 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   14d26:	4b1d      	ldr	r3, [pc, #116]	; (14d9c <bt_conn_send_cb+0xc8>)
   14d28:	4819      	ldr	r0, [pc, #100]	; (14d90 <bt_conn_send_cb+0xbc>)
   14d2a:	9305      	str	r3, [sp, #20]
   14d2c:	2302      	movs	r3, #2
   14d2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14d32:	aa04      	add	r2, sp, #16
   14d34:	9304      	str	r3, [sp, #16]
   14d36:	f017 fc30 	bl	2c59a <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   14d3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14d3e:	b006      	add	sp, #24
   14d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14d44:	7b6b      	ldrb	r3, [r5, #13]
   14d46:	2b07      	cmp	r3, #7
   14d48:	d012      	beq.n	14d70 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   14d4a:	4b15      	ldr	r3, [pc, #84]	; (14da0 <bt_conn_send_cb+0xcc>)
   14d4c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   14d50:	9305      	str	r3, [sp, #20]
   14d52:	2302      	movs	r3, #2
   14d54:	480e      	ldr	r0, [pc, #56]	; (14d90 <bt_conn_send_cb+0xbc>)
   14d56:	aa04      	add	r2, sp, #16
   14d58:	9304      	str	r3, [sp, #16]
   14d5a:	f017 fc1e 	bl	2c59a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   14d5e:	2300      	movs	r3, #0
	k_fifo_put(&free_tx, tx);
   14d60:	4621      	mov	r1, r4
	tx->user_data = NULL;
   14d62:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   14d66:	480c      	ldr	r0, [pc, #48]	; (14d98 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   14d68:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   14d6a:	f01b fa39 	bl	301e0 <k_queue_append>
}
   14d6e:	e7c5      	b.n	14cfc <bt_conn_send_cb+0x28>
		tx->pending_no_cb = 0U;
   14d70:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14d72:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14d76:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   14d78:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14d7c:	4639      	mov	r1, r7
		tx_data(buf)->tx = tx;
   14d7e:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   14d80:	f006 fbec 	bl	1b55c <net_buf_put>
	return 0;
   14d84:	2000      	movs	r0, #0
   14d86:	e7da      	b.n	14d3e <bt_conn_send_cb+0x6a>
   14d88:	4614      	mov	r4, r2
   14d8a:	e7f5      	b.n	14d78 <bt_conn_send_cb+0xa4>
   14d8c:	000354a3 	.word	0x000354a3
   14d90:	000314dc 	.word	0x000314dc
   14d94:	2000a270 	.word	0x2000a270
   14d98:	20008cb8 	.word	0x20008cb8
   14d9c:	000354b2 	.word	0x000354b2
   14da0:	000354d0 	.word	0x000354d0

00014da4 <bt_conn_prepare_events>:
{
   14da4:	b570      	push	{r4, r5, r6, lr}
   14da6:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   14da8:	4817      	ldr	r0, [pc, #92]	; (14e08 <bt_conn_prepare_events+0x64>)
   14daa:	f01b fbc1 	bl	30530 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14dae:	2200      	movs	r2, #0
   14db0:	2101      	movs	r1, #1
   14db2:	4620      	mov	r0, r4
   14db4:	4b14      	ldr	r3, [pc, #80]	; (14e08 <bt_conn_prepare_events+0x64>)
   14db6:	f013 fa47 	bl	28248 <k_poll_event_init>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14dba:	f104 0614 	add.w	r6, r4, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dbe:	4b13      	ldr	r3, [pc, #76]	; (14e0c <bt_conn_prepare_events+0x68>)
   14dc0:	e8d3 2faf 	lda	r2, [r3]
	if (!atomic_get(&conn->ref)) {
   14dc4:	b90a      	cbnz	r2, 14dca <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14dc6:	2001      	movs	r0, #1
}
   14dc8:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14dca:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
   14dce:	f813 3cb7 	ldrb.w	r3, [r3, #-183]
   14dd2:	b953      	cbnz	r3, 14dea <bt_conn_prepare_events+0x46>
   14dd4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   14dd8:	1d28      	adds	r0, r5, #4
   14dda:	f017 fbd3 	bl	2c584 <atomic_and>
   14dde:	0643      	lsls	r3, r0, #25
   14de0:	d503      	bpl.n	14dea <bt_conn_prepare_events+0x46>
		conn_cleanup(conn);
   14de2:	4628      	mov	r0, r5
   14de4:	f7ff fe90 	bl	14b08 <conn_cleanup>
		return -ENOTCONN;
   14de8:	e7ed      	b.n	14dc6 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   14dea:	7b6b      	ldrb	r3, [r5, #13]
   14dec:	2b07      	cmp	r3, #7
   14dee:	d1ea      	bne.n	14dc6 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   14df0:	4630      	mov	r0, r6
   14df2:	4b07      	ldr	r3, [pc, #28]	; (14e10 <bt_conn_prepare_events+0x6c>)
   14df4:	2200      	movs	r2, #0
   14df6:	2104      	movs	r1, #4
   14df8:	f013 fa26 	bl	28248 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14dfc:	2301      	movs	r3, #1
			ev_count++;
   14dfe:	2002      	movs	r0, #2
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14e00:	f884 3020 	strb.w	r3, [r4, #32]
	return ev_count;
   14e04:	e7e0      	b.n	14dc8 <bt_conn_prepare_events+0x24>
   14e06:	bf00      	nop
   14e08:	200084d4 	.word	0x200084d4
   14e0c:	20009e6c 	.word	0x20009e6c
   14e10:	20009de0 	.word	0x20009de0

00014e14 <bt_conn_ref>:
{
   14e14:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   14e16:	b180      	cbz	r0, 14e3a <bt_conn_ref+0x26>
		old = atomic_get(&conn->ref);
   14e18:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   14e1c:	e8d2 3faf 	lda	r3, [r2]
		if (!old) {
   14e20:	b1bb      	cbz	r3, 14e52 <bt_conn_ref+0x3e>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   14e22:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14e24:	e8d2 4fef 	ldaex	r4, [r2]
   14e28:	429c      	cmp	r4, r3
   14e2a:	d104      	bne.n	14e36 <bt_conn_ref+0x22>
   14e2c:	e8c2 1fec 	stlex	ip, r1, [r2]
   14e30:	f1bc 0f00 	cmp.w	ip, #0
   14e34:	d1f6      	bne.n	14e24 <bt_conn_ref+0x10>
   14e36:	d1f1      	bne.n	14e1c <bt_conn_ref+0x8>
}
   14e38:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   14e3a:	4907      	ldr	r1, [pc, #28]	; (14e58 <bt_conn_ref+0x44>)
   14e3c:	4807      	ldr	r0, [pc, #28]	; (14e5c <bt_conn_ref+0x48>)
   14e3e:	f240 437c 	movw	r3, #1148	; 0x47c
   14e42:	4a07      	ldr	r2, [pc, #28]	; (14e60 <bt_conn_ref+0x4c>)
   14e44:	f015 fc49 	bl	2a6da <assert_print>
   14e48:	f240 417c 	movw	r1, #1148	; 0x47c
   14e4c:	4804      	ldr	r0, [pc, #16]	; (14e60 <bt_conn_ref+0x4c>)
   14e4e:	f015 fc3d 	bl	2a6cc <assert_post_action>
			return NULL;
   14e52:	4618      	mov	r0, r3
   14e54:	e7f0      	b.n	14e38 <bt_conn_ref+0x24>
   14e56:	bf00      	nop
   14e58:	00034c1d 	.word	0x00034c1d
   14e5c:	00032679 	.word	0x00032679
   14e60:	00035353 	.word	0x00035353

00014e64 <bt_conn_unref>:
{
   14e64:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   14e66:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14e6a:	e8d3 2fef 	ldaex	r2, [r3]
   14e6e:	1e51      	subs	r1, r2, #1
   14e70:	e8c3 1fe4 	stlex	r4, r1, [r3]
   14e74:	2c00      	cmp	r4, #0
   14e76:	d1f8      	bne.n	14e6a <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   14e78:	2a00      	cmp	r2, #0
   14e7a:	dc0e      	bgt.n	14e9a <bt_conn_unref+0x36>
   14e7c:	490d      	ldr	r1, [pc, #52]	; (14eb4 <bt_conn_unref+0x50>)
   14e7e:	f44f 6393 	mov.w	r3, #1176	; 0x498
   14e82:	4a0d      	ldr	r2, [pc, #52]	; (14eb8 <bt_conn_unref+0x54>)
   14e84:	480d      	ldr	r0, [pc, #52]	; (14ebc <bt_conn_unref+0x58>)
   14e86:	f015 fc28 	bl	2a6da <assert_print>
   14e8a:	480d      	ldr	r0, [pc, #52]	; (14ec0 <bt_conn_unref+0x5c>)
   14e8c:	f015 fc25 	bl	2a6da <assert_print>
   14e90:	f44f 6193 	mov.w	r1, #1176	; 0x498
   14e94:	4808      	ldr	r0, [pc, #32]	; (14eb8 <bt_conn_unref+0x54>)
   14e96:	f015 fc19 	bl	2a6cc <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   14e9a:	f240 1201 	movw	r2, #257	; 0x101
   14e9e:	8841      	ldrh	r1, [r0, #2]
   14ea0:	4291      	cmp	r1, r2
   14ea2:	d106      	bne.n	14eb2 <bt_conn_unref+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14ea4:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   14ea8:	b91b      	cbnz	r3, 14eb2 <bt_conn_unref+0x4e>
}
   14eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   14eae:	f7ff ba8f 	b.w	143d0 <bt_le_adv_resume>
}
   14eb2:	bd10      	pop	{r4, pc}
   14eb4:	000354f6 	.word	0x000354f6
   14eb8:	00035353 	.word	0x00035353
   14ebc:	00032679 	.word	0x00032679
   14ec0:	000354fe 	.word	0x000354fe

00014ec4 <bt_conn_lookup_handle>:
{
   14ec4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14ec6:	2101      	movs	r1, #1
   14ec8:	4801      	ldr	r0, [pc, #4]	; (14ed0 <bt_conn_lookup_handle+0xc>)
   14eca:	f017 bb75 	b.w	2c5b8 <conn_lookup_handle>
   14ece:	bf00      	nop
   14ed0:	20009da8 	.word	0x20009da8

00014ed4 <bt_conn_set_state>:
{
   14ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   14ed6:	7b46      	ldrb	r6, [r0, #13]
{
   14ed8:	4604      	mov	r4, r0
	if (conn->state == state) {
   14eda:	428e      	cmp	r6, r1
{
   14edc:	460d      	mov	r5, r1
   14ede:	af00      	add	r7, sp, #0
	if (conn->state == state) {
   14ee0:	d119      	bne.n	14f16 <bt_conn_set_state+0x42>
	switch (state) {
   14ee2:	2e08      	cmp	r6, #8
   14ee4:	bf98      	it	ls
   14ee6:	4b6c      	ldrls	r3, [pc, #432]	; (15098 <bt_conn_set_state+0x1c4>)
		LOG_WRN("no transition %s", state2str(state));
   14ee8:	466c      	mov	r4, sp
   14eea:	b088      	sub	sp, #32
   14eec:	bf94      	ite	ls
   14eee:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
	if (conn->state == state) {
   14ef2:	4b6a      	ldrhi	r3, [pc, #424]	; (1509c <bt_conn_set_state+0x1c8>)
		LOG_WRN("no transition %s", state2str(state));
   14ef4:	466a      	mov	r2, sp
   14ef6:	496a      	ldr	r1, [pc, #424]	; (150a0 <bt_conn_set_state+0x1cc>)
   14ef8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14efc:	f44f 7300 	mov.w	r3, #512	; 0x200
   14f00:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   14f04:	8393      	strh	r3, [r2, #28]
   14f06:	4b67      	ldr	r3, [pc, #412]	; (150a4 <bt_conn_set_state+0x1d0>)
   14f08:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_WRN("no valid (%u) state was set", state);
   14f0c:	4866      	ldr	r0, [pc, #408]	; (150a8 <bt_conn_set_state+0x1d4>)
   14f0e:	f017 fb44 	bl	2c59a <z_log_msg_static_create.constprop.0>
   14f12:	46a5      	mov	sp, r4
   14f14:	e043      	b.n	14f9e <bt_conn_set_state+0xca>
	conn->state = state;
   14f16:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14f18:	b926      	cbnz	r6, 14f24 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14f1a:	7883      	ldrb	r3, [r0, #2]
   14f1c:	2b08      	cmp	r3, #8
   14f1e:	d001      	beq.n	14f24 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   14f20:	f7ff ff78 	bl	14e14 <bt_conn_ref>
	switch (conn->state) {
   14f24:	7b63      	ldrb	r3, [r4, #13]
   14f26:	2b08      	cmp	r3, #8
   14f28:	f200 80b0 	bhi.w	1508c <bt_conn_set_state+0x1b8>
   14f2c:	e8df f003 	tbb	[pc, r3]
   14f30:	37370539 	.word	0x37370539
   14f34:	1c373737 	.word	0x1c373737
   14f38:	37          	.byte	0x37
   14f39:	00          	.byte	0x00
		tx->pending_no_cb = 0U;
   14f3a:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   14f3c:	4d5b      	ldr	r5, [pc, #364]	; (150ac <bt_conn_set_state+0x1d8>)
	__asm__ volatile(
   14f3e:	f04f 0220 	mov.w	r2, #32
   14f42:	f3ef 8311 	mrs	r3, BASEPRI
   14f46:	f382 8812 	msr	BASEPRI_MAX, r2
   14f4a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14f4e:	69e2      	ldr	r2, [r4, #28]
   14f50:	2a00      	cmp	r2, #0
   14f52:	d077      	beq.n	15044 <bt_conn_set_state+0x170>
			conn->pending_no_cb--;
   14f54:	3a01      	subs	r2, #1
   14f56:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   14f58:	f383 8811 	msr	BASEPRI, r3
   14f5c:	f3bf 8f6f 	isb	sy
   14f60:	4628      	mov	r0, r5
   14f62:	f010 fb41 	bl	255e8 <z_impl_k_sem_give>
}
   14f66:	e7ea      	b.n	14f3e <bt_conn_set_state+0x6a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14f68:	78a3      	ldrb	r3, [r4, #2]
   14f6a:	2b04      	cmp	r3, #4
   14f6c:	d017      	beq.n	14f9e <bt_conn_set_state+0xca>
	z_impl_k_queue_init(queue);
   14f6e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14f72:	f01b f928 	bl	301c6 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   14f76:	2100      	movs	r1, #0
   14f78:	484d      	ldr	r0, [pc, #308]	; (150b0 <bt_conn_set_state+0x1dc>)
   14f7a:	f013 fa83 	bl	28484 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14f7e:	2300      	movs	r3, #0
	list->tail = NULL;
   14f80:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14f84:	78e3      	ldrb	r3, [r4, #3]
   14f86:	2b01      	cmp	r3, #1
   14f88:	d109      	bne.n	14f9e <bt_conn_set_state+0xca>
			conn->le.conn_param_retry_countdown =
   14f8a:	2303      	movs	r3, #3
			k_work_schedule(&conn->deferred_work,
   14f8c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
			conn->le.conn_param_retry_countdown =
   14f90:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   14f94:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14f98:	2300      	movs	r3, #0
   14f9a:	f011 f84b 	bl	26034 <k_work_schedule>
}
   14f9e:	46bd      	mov	sp, r7
   14fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   14fa2:	78a3      	ldrb	r3, [r4, #2]
   14fa4:	2b04      	cmp	r3, #4
   14fa6:	d103      	bne.n	14fb0 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   14fa8:	4620      	mov	r0, r4
   14faa:	f7ff ff5b 	bl	14e64 <bt_conn_unref>
			break;
   14fae:	e7f6      	b.n	14f9e <bt_conn_set_state+0xca>
		switch (old_state) {
   14fb0:	2e08      	cmp	r6, #8
   14fb2:	d8f4      	bhi.n	14f9e <bt_conn_set_state+0xca>
   14fb4:	a301      	add	r3, pc, #4	; (adr r3, 14fbc <bt_conn_set_state+0xe8>)
   14fb6:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14fba:	bf00      	nop
   14fbc:	0001502d 	.word	0x0001502d
   14fc0:	00014fe1 	.word	0x00014fe1
   14fc4:	0001501f 	.word	0x0001501f
   14fc8:	00014fa9 	.word	0x00014fa9
   14fcc:	00014fa9 	.word	0x00014fa9
   14fd0:	0001501f 	.word	0x0001501f
   14fd4:	0001501f 	.word	0x0001501f
   14fd8:	00014f9f 	.word	0x00014f9f
   14fdc:	0001502d 	.word	0x0001502d
			tx_notify(conn);
   14fe0:	4620      	mov	r0, r4
   14fe2:	f7ff fc57 	bl	14894 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14fe6:	78a3      	ldrb	r3, [r4, #2]
   14fe8:	2b01      	cmp	r3, #1
   14fea:	d10a      	bne.n	15002 <bt_conn_set_state+0x12e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   14fec:	f104 0560 	add.w	r5, r4, #96	; 0x60
   14ff0:	4628      	mov	r0, r5
   14ff2:	f01b f97e 	bl	302f2 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   14ff6:	f010 0f0c 	tst.w	r0, #12
   14ffa:	d002      	beq.n	15002 <bt_conn_set_state+0x12e>
				k_work_cancel_delayable(&conn->deferred_work);
   14ffc:	4628      	mov	r0, r5
   14ffe:	f011 f899 	bl	26134 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15002:	3404      	adds	r4, #4
   15004:	e8d4 3fef 	ldaex	r3, [r4]
   15008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1500c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   15010:	2a00      	cmp	r2, #0
   15012:	d1f7      	bne.n	15004 <bt_conn_set_state+0x130>
   15014:	2100      	movs	r1, #0
   15016:	4826      	ldr	r0, [pc, #152]	; (150b0 <bt_conn_set_state+0x1dc>)
   15018:	f013 fa34 	bl	28484 <z_impl_k_poll_signal_raise>
   1501c:	e7bf      	b.n	14f9e <bt_conn_set_state+0xca>
			if (conn->err) {
   1501e:	7b23      	ldrb	r3, [r4, #12]
   15020:	2b00      	cmp	r3, #0
   15022:	d0c1      	beq.n	14fa8 <bt_conn_set_state+0xd4>
				notify_connected(conn);
   15024:	4620      	mov	r0, r4
   15026:	f7ff fbff 	bl	14828 <notify_connected>
   1502a:	e7bd      	b.n	14fa8 <bt_conn_set_state+0xd4>
			LOG_WRN("Invalid (%u) old state", state);
   1502c:	466c      	mov	r4, sp
   1502e:	b088      	sub	sp, #32
   15030:	466a      	mov	r2, sp
   15032:	4b20      	ldr	r3, [pc, #128]	; (150b4 <bt_conn_set_state+0x1e0>)
		LOG_WRN("no valid (%u) state was set", state);
   15034:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15038:	2303      	movs	r3, #3
   1503a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1503e:	f842 3f10 	str.w	r3, [r2, #16]!
   15042:	e763      	b.n	14f0c <bt_conn_set_state+0x38>
	return list->head;
   15044:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15046:	b921      	cbnz	r1, 15052 <bt_conn_set_state+0x17e>
   15048:	f383 8811 	msr	BASEPRI, r3
   1504c:	f3bf 8f6f 	isb	sy
		if (!node) {
   15050:	e7a5      	b.n	14f9e <bt_conn_set_state+0xca>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15052:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   15054:	680a      	ldr	r2, [r1, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15056:	4281      	cmp	r1, r0
	list->tail = node;
   15058:	bf08      	it	eq
   1505a:	61a2      	streq	r2, [r4, #24]
	list->head = node;
   1505c:	6162      	str	r2, [r4, #20]
   1505e:	f383 8811 	msr	BASEPRI, r3
   15062:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15066:	f04f 0220 	mov.w	r2, #32
   1506a:	f3ef 8311 	mrs	r3, BASEPRI
   1506e:	f382 8812 	msr	BASEPRI_MAX, r2
   15072:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15076:	68ca      	ldr	r2, [r1, #12]
   15078:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1507a:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   1507c:	f383 8811 	msr	BASEPRI, r3
   15080:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   15084:	4620      	mov	r0, r4
   15086:	f7ff fc35 	bl	148f4 <conn_tx_destroy>
   1508a:	e769      	b.n	14f60 <bt_conn_set_state+0x8c>
		LOG_WRN("no valid (%u) state was set", state);
   1508c:	466c      	mov	r4, sp
   1508e:	b088      	sub	sp, #32
   15090:	466a      	mov	r2, sp
   15092:	4b09      	ldr	r3, [pc, #36]	; (150b8 <bt_conn_set_state+0x1e4>)
   15094:	e7ce      	b.n	15034 <bt_conn_set_state+0x160>
   15096:	bf00      	nop
   15098:	00031f74 	.word	0x00031f74
   1509c:	0003551c 	.word	0x0003551c
   150a0:	00035526 	.word	0x00035526
   150a4:	01000003 	.word	0x01000003
   150a8:	000314dc 	.word	0x000314dc
   150ac:	20008100 	.word	0x20008100
   150b0:	200084d4 	.word	0x200084d4
   150b4:	00035537 	.word	0x00035537
   150b8:	0003554e 	.word	0x0003554e

000150bc <bt_conn_index>:
		index = conn - acl_conns;
   150bc:	4a0c      	ldr	r2, [pc, #48]	; (150f0 <bt_conn_index+0x34>)
{
   150be:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   150c0:	490c      	ldr	r1, [pc, #48]	; (150f4 <bt_conn_index+0x38>)
   150c2:	1a83      	subs	r3, r0, r2
   150c4:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   150c6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   150c8:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   150cc:	d00e      	beq.n	150ec <bt_conn_index+0x30>
   150ce:	490a      	ldr	r1, [pc, #40]	; (150f8 <bt_conn_index+0x3c>)
   150d0:	f240 43b6 	movw	r3, #1206	; 0x4b6
   150d4:	4a09      	ldr	r2, [pc, #36]	; (150fc <bt_conn_index+0x40>)
   150d6:	480a      	ldr	r0, [pc, #40]	; (15100 <bt_conn_index+0x44>)
   150d8:	f015 faff 	bl	2a6da <assert_print>
   150dc:	4809      	ldr	r0, [pc, #36]	; (15104 <bt_conn_index+0x48>)
   150de:	f015 fafc 	bl	2a6da <assert_print>
   150e2:	f240 41b6 	movw	r1, #1206	; 0x4b6
   150e6:	4805      	ldr	r0, [pc, #20]	; (150fc <bt_conn_index+0x40>)
   150e8:	f015 faf0 	bl	2a6cc <assert_post_action>
}
   150ec:	b2d8      	uxtb	r0, r3
   150ee:	bd08      	pop	{r3, pc}
   150f0:	20009da8 	.word	0x20009da8
   150f4:	c28f5c29 	.word	0xc28f5c29
   150f8:	0003556a 	.word	0x0003556a
   150fc:	00035353 	.word	0x00035353
   15100:	00032679 	.word	0x00032679
   15104:	00035633 	.word	0x00035633

00015108 <bt_conn_create_pdu_timeout>:
{
   15108:	b5f0      	push	{r4, r5, r6, r7, lr}
   1510a:	b087      	sub	sp, #28
   1510c:	4604      	mov	r4, r0
   1510e:	460d      	mov	r5, r1
   15110:	4617      	mov	r7, r2
   15112:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   15114:	f01b f828 	bl	30168 <k_is_in_isr>
   15118:	b158      	cbz	r0, 15132 <bt_conn_create_pdu_timeout+0x2a>
   1511a:	4914      	ldr	r1, [pc, #80]	; (1516c <bt_conn_create_pdu_timeout+0x64>)
   1511c:	4814      	ldr	r0, [pc, #80]	; (15170 <bt_conn_create_pdu_timeout+0x68>)
   1511e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   15122:	4a14      	ldr	r2, [pc, #80]	; (15174 <bt_conn_create_pdu_timeout+0x6c>)
   15124:	f015 fad9 	bl	2a6da <assert_print>
   15128:	f240 41d2 	movw	r1, #1234	; 0x4d2
   1512c:	4811      	ldr	r0, [pc, #68]	; (15174 <bt_conn_create_pdu_timeout+0x6c>)
   1512e:	f015 facd 	bl	2a6cc <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15132:	4911      	ldr	r1, [pc, #68]	; (15178 <bt_conn_create_pdu_timeout+0x70>)
   15134:	463a      	mov	r2, r7
   15136:	2c00      	cmp	r4, #0
   15138:	bf14      	ite	ne
   1513a:	4620      	movne	r0, r4
   1513c:	4608      	moveq	r0, r1
   1513e:	4633      	mov	r3, r6
   15140:	f018 ff57 	bl	2dff2 <net_buf_alloc_fixed>
	if (!buf) {
   15144:	4604      	mov	r4, r0
   15146:	b960      	cbnz	r0, 15162 <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   15148:	4b0c      	ldr	r3, [pc, #48]	; (1517c <bt_conn_create_pdu_timeout+0x74>)
   1514a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1514e:	9305      	str	r3, [sp, #20]
   15150:	2302      	movs	r3, #2
   15152:	480b      	ldr	r0, [pc, #44]	; (15180 <bt_conn_create_pdu_timeout+0x78>)
   15154:	aa04      	add	r2, sp, #16
   15156:	9304      	str	r3, [sp, #16]
   15158:	f017 fa1f 	bl	2c59a <z_log_msg_static_create.constprop.0>
}
   1515c:	4620      	mov	r0, r4
   1515e:	b007      	add	sp, #28
   15160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   15162:	1d69      	adds	r1, r5, #5
   15164:	300c      	adds	r0, #12
   15166:	f006 f90d 	bl	1b384 <net_buf_simple_reserve>
	return buf;
   1516a:	e7f7      	b.n	1515c <bt_conn_create_pdu_timeout+0x54>
   1516c:	0003564d 	.word	0x0003564d
   15170:	00032679 	.word	0x00032679
   15174:	00035353 	.word	0x00035353
   15178:	20008d08 	.word	0x20008d08
   1517c:	0003565c 	.word	0x0003565c
   15180:	000314dc 	.word	0x000314dc

00015184 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   15184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15186:	4604      	mov	r4, r0
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15188:	3004      	adds	r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1518a:	e8d0 3faf 	lda	r3, [r0]
   1518e:	059b      	lsls	r3, r3, #22
   15190:	d511      	bpl.n	151b6 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   15192:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15196:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
   1519a:	429a      	cmp	r2, r3
   1519c:	d80b      	bhi.n	151b6 <notify_le_param_updated+0x32>
	    conn->le.interval >= conn->le.interval_min &&
   1519e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   151a2:	429a      	cmp	r2, r3
   151a4:	d307      	bcc.n	151b6 <notify_le_param_updated+0x32>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   151a6:	e9d4 232b 	ldrd	r2, r3, [r4, #172]	; 0xac
   151aa:	429a      	cmp	r2, r3
   151ac:	d103      	bne.n	151b6 <notify_le_param_updated+0x32>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   151ae:	f46f 7100 	mvn.w	r1, #512	; 0x200
   151b2:	f017 f9e7 	bl	2c584 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   151b6:	4b18      	ldr	r3, [pc, #96]	; (15218 <notify_le_param_updated+0x94>)
   151b8:	681d      	ldr	r5, [r3, #0]
   151ba:	b995      	cbnz	r5, 151e2 <notify_le_param_updated+0x5e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   151bc:	4d17      	ldr	r5, [pc, #92]	; (1521c <notify_le_param_updated+0x98>)
   151be:	4f18      	ldr	r7, [pc, #96]	; (15220 <notify_le_param_updated+0x9c>)
   151c0:	42bd      	cmp	r5, r7
   151c2:	d926      	bls.n	15212 <notify_le_param_updated+0x8e>
   151c4:	4917      	ldr	r1, [pc, #92]	; (15224 <notify_le_param_updated+0xa0>)
   151c6:	f240 53a5 	movw	r3, #1445	; 0x5a5
   151ca:	4a17      	ldr	r2, [pc, #92]	; (15228 <notify_le_param_updated+0xa4>)
   151cc:	4817      	ldr	r0, [pc, #92]	; (1522c <notify_le_param_updated+0xa8>)
   151ce:	f015 fa84 	bl	2a6da <assert_print>
   151d2:	4817      	ldr	r0, [pc, #92]	; (15230 <notify_le_param_updated+0xac>)
   151d4:	f015 fa81 	bl	2a6da <assert_print>
   151d8:	f240 51a5 	movw	r1, #1445	; 0x5a5
   151dc:	4812      	ldr	r0, [pc, #72]	; (15228 <notify_le_param_updated+0xa4>)
   151de:	f015 fa75 	bl	2a6cc <assert_post_action>
		if (cb->le_param_updated) {
   151e2:	68ee      	ldr	r6, [r5, #12]
   151e4:	b13e      	cbz	r6, 151f6 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   151e6:	4620      	mov	r0, r4
   151e8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   151ec:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   151f0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   151f4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   151f6:	69ad      	ldr	r5, [r5, #24]
   151f8:	e7df      	b.n	151ba <notify_le_param_updated+0x36>
		if (cb->le_param_updated) {
   151fa:	68ee      	ldr	r6, [r5, #12]
   151fc:	b13e      	cbz	r6, 1520e <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   151fe:	4620      	mov	r0, r4
   15200:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   15204:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15208:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1520c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1520e:	351c      	adds	r5, #28
   15210:	e7d6      	b.n	151c0 <notify_le_param_updated+0x3c>
   15212:	d3f2      	bcc.n	151fa <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   15214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15216:	bf00      	nop
   15218:	200215f4 	.word	0x200215f4
   1521c:	00031468 	.word	0x00031468
   15220:	00031484 	.word	0x00031484
   15224:	00035383 	.word	0x00035383
   15228:	00035353 	.word	0x00035353
   1522c:	00032679 	.word	0x00032679
   15230:	00033719 	.word	0x00033719

00015234 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   15234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15238:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1523a:	4608      	mov	r0, r1
{
   1523c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1523e:	f016 ff55 	bl	2c0ec <bt_le_conn_params_valid>
   15242:	4605      	mov	r5, r0
   15244:	b918      	cbnz	r0, 1524e <le_param_req+0x1a>
		return false;
   15246:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   15248:	4628      	mov	r0, r5
   1524a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1524e:	4b1b      	ldr	r3, [pc, #108]	; (152bc <le_param_req+0x88>)
   15250:	681e      	ldr	r6, [r3, #0]
   15252:	b99e      	cbnz	r6, 1527c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15254:	4e1a      	ldr	r6, [pc, #104]	; (152c0 <le_param_req+0x8c>)
   15256:	f8df 806c 	ldr.w	r8, [pc, #108]	; 152c4 <le_param_req+0x90>
   1525a:	4546      	cmp	r6, r8
   1525c:	d927      	bls.n	152ae <le_param_req+0x7a>
   1525e:	491a      	ldr	r1, [pc, #104]	; (152c8 <le_param_req+0x94>)
   15260:	f240 53ed 	movw	r3, #1517	; 0x5ed
   15264:	4a19      	ldr	r2, [pc, #100]	; (152cc <le_param_req+0x98>)
   15266:	481a      	ldr	r0, [pc, #104]	; (152d0 <le_param_req+0x9c>)
   15268:	f015 fa37 	bl	2a6da <assert_print>
   1526c:	4819      	ldr	r0, [pc, #100]	; (152d4 <le_param_req+0xa0>)
   1526e:	f015 fa34 	bl	2a6da <assert_print>
   15272:	f240 51ed 	movw	r1, #1517	; 0x5ed
   15276:	4815      	ldr	r0, [pc, #84]	; (152cc <le_param_req+0x98>)
   15278:	f015 fa28 	bl	2a6cc <assert_post_action>
		if (!cb->le_param_req) {
   1527c:	68b3      	ldr	r3, [r6, #8]
   1527e:	b90b      	cbnz	r3, 15284 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   15280:	69b6      	ldr	r6, [r6, #24]
   15282:	e7e6      	b.n	15252 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15284:	4621      	mov	r1, r4
   15286:	4638      	mov	r0, r7
   15288:	4798      	blx	r3
   1528a:	2800      	cmp	r0, #0
   1528c:	d0db      	beq.n	15246 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1528e:	4620      	mov	r0, r4
   15290:	f016 ff2c 	bl	2c0ec <bt_le_conn_params_valid>
   15294:	2800      	cmp	r0, #0
   15296:	d1f3      	bne.n	15280 <le_param_req+0x4c>
   15298:	e7d5      	b.n	15246 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1529a:	4621      	mov	r1, r4
   1529c:	4638      	mov	r0, r7
   1529e:	4798      	blx	r3
   152a0:	2800      	cmp	r0, #0
   152a2:	d0d0      	beq.n	15246 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   152a4:	4620      	mov	r0, r4
   152a6:	f016 ff21 	bl	2c0ec <bt_le_conn_params_valid>
   152aa:	b920      	cbnz	r0, 152b6 <le_param_req+0x82>
   152ac:	e7cb      	b.n	15246 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152ae:	d2cb      	bcs.n	15248 <le_param_req+0x14>
		if (!cb->le_param_req) {
   152b0:	68b3      	ldr	r3, [r6, #8]
   152b2:	2b00      	cmp	r3, #0
   152b4:	d1f1      	bne.n	1529a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152b6:	361c      	adds	r6, #28
   152b8:	e7cf      	b.n	1525a <le_param_req+0x26>
   152ba:	bf00      	nop
   152bc:	200215f4 	.word	0x200215f4
   152c0:	00031468 	.word	0x00031468
   152c4:	00031484 	.word	0x00031484
   152c8:	00035383 	.word	0x00035383
   152cc:	00035353 	.word	0x00035353
   152d0:	00032679 	.word	0x00032679
   152d4:	00033719 	.word	0x00033719

000152d8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   152d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   152dc:	78c3      	ldrb	r3, [r0, #3]
{
   152de:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   152e0:	b9db      	cbnz	r3, 1531a <bt_conn_identity_resolved+0x42>
		rpa = &conn->le.resp_addr;
   152e2:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   152e6:	4b18      	ldr	r3, [pc, #96]	; (15348 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152e8:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   152ec:	681d      	ldr	r5, [r3, #0]
   152ee:	b9bd      	cbnz	r5, 15320 <bt_conn_identity_resolved+0x48>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152f0:	4d16      	ldr	r5, [pc, #88]	; (1534c <bt_conn_identity_resolved+0x74>)
   152f2:	4f17      	ldr	r7, [pc, #92]	; (15350 <bt_conn_identity_resolved+0x78>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   152f4:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   152f8:	42bd      	cmp	r5, r7
   152fa:	d921      	bls.n	15340 <bt_conn_identity_resolved+0x68>
   152fc:	4915      	ldr	r1, [pc, #84]	; (15354 <bt_conn_identity_resolved+0x7c>)
   152fe:	f240 73bc 	movw	r3, #1980	; 0x7bc
   15302:	4a15      	ldr	r2, [pc, #84]	; (15358 <bt_conn_identity_resolved+0x80>)
   15304:	4815      	ldr	r0, [pc, #84]	; (1535c <bt_conn_identity_resolved+0x84>)
   15306:	f015 f9e8 	bl	2a6da <assert_print>
   1530a:	4815      	ldr	r0, [pc, #84]	; (15360 <bt_conn_identity_resolved+0x88>)
   1530c:	f015 f9e5 	bl	2a6da <assert_print>
   15310:	f240 71bc 	movw	r1, #1980	; 0x7bc
   15314:	4810      	ldr	r0, [pc, #64]	; (15358 <bt_conn_identity_resolved+0x80>)
   15316:	f015 f9d9 	bl	2a6cc <assert_post_action>
		rpa = &conn->le.init_addr;
   1531a:	f100 0697 	add.w	r6, r0, #151	; 0x97
   1531e:	e7e2      	b.n	152e6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   15320:	692b      	ldr	r3, [r5, #16]
   15322:	b11b      	cbz	r3, 1532c <bt_conn_identity_resolved+0x54>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15324:	463a      	mov	r2, r7
   15326:	4631      	mov	r1, r6
   15328:	4620      	mov	r0, r4
   1532a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1532c:	69ad      	ldr	r5, [r5, #24]
   1532e:	e7de      	b.n	152ee <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   15330:	692b      	ldr	r3, [r5, #16]
   15332:	b11b      	cbz	r3, 1533c <bt_conn_identity_resolved+0x64>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   15334:	4642      	mov	r2, r8
   15336:	4631      	mov	r1, r6
   15338:	4620      	mov	r0, r4
   1533a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1533c:	351c      	adds	r5, #28
   1533e:	e7db      	b.n	152f8 <bt_conn_identity_resolved+0x20>
   15340:	d3f6      	bcc.n	15330 <bt_conn_identity_resolved+0x58>
		}
	}
}
   15342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15346:	bf00      	nop
   15348:	200215f4 	.word	0x200215f4
   1534c:	00031468 	.word	0x00031468
   15350:	00031484 	.word	0x00031484
   15354:	00035383 	.word	0x00035383
   15358:	00035353 	.word	0x00035353
   1535c:	00032679 	.word	0x00032679
   15360:	00033719 	.word	0x00033719

00015364 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   15364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   15366:	7a43      	ldrb	r3, [r0, #9]
{
   15368:	4604      	mov	r4, r0
	conn->required_sec_level = conn->sec_level;
   1536a:	7283      	strb	r3, [r0, #10]
{
   1536c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   1536e:	f017 fa33 	bl	2c7d8 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   15372:	4b14      	ldr	r3, [pc, #80]	; (153c4 <bt_conn_security_changed+0x60>)
   15374:	681d      	ldr	r5, [r3, #0]
   15376:	b995      	cbnz	r5, 1539e <bt_conn_security_changed+0x3a>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15378:	4d13      	ldr	r5, [pc, #76]	; (153c8 <bt_conn_security_changed+0x64>)
   1537a:	4f14      	ldr	r7, [pc, #80]	; (153cc <bt_conn_security_changed+0x68>)
   1537c:	42bd      	cmp	r5, r7
   1537e:	d91e      	bls.n	153be <bt_conn_security_changed+0x5a>
   15380:	4913      	ldr	r1, [pc, #76]	; (153d0 <bt_conn_security_changed+0x6c>)
   15382:	f640 0328 	movw	r3, #2088	; 0x828
   15386:	4a13      	ldr	r2, [pc, #76]	; (153d4 <bt_conn_security_changed+0x70>)
   15388:	4813      	ldr	r0, [pc, #76]	; (153d8 <bt_conn_security_changed+0x74>)
   1538a:	f015 f9a6 	bl	2a6da <assert_print>
   1538e:	4813      	ldr	r0, [pc, #76]	; (153dc <bt_conn_security_changed+0x78>)
   15390:	f015 f9a3 	bl	2a6da <assert_print>
   15394:	f640 0128 	movw	r1, #2088	; 0x828
   15398:	480e      	ldr	r0, [pc, #56]	; (153d4 <bt_conn_security_changed+0x70>)
   1539a:	f015 f997 	bl	2a6cc <assert_post_action>
		if (cb->security_changed) {
   1539e:	696b      	ldr	r3, [r5, #20]
   153a0:	b11b      	cbz	r3, 153aa <bt_conn_security_changed+0x46>
			cb->security_changed(conn, conn->sec_level, err);
   153a2:	4632      	mov	r2, r6
   153a4:	4620      	mov	r0, r4
   153a6:	7a61      	ldrb	r1, [r4, #9]
   153a8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   153aa:	69ad      	ldr	r5, [r5, #24]
   153ac:	e7e3      	b.n	15376 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   153ae:	696b      	ldr	r3, [r5, #20]
   153b0:	b11b      	cbz	r3, 153ba <bt_conn_security_changed+0x56>
			cb->security_changed(conn, conn->sec_level, err);
   153b2:	4632      	mov	r2, r6
   153b4:	4620      	mov	r0, r4
   153b6:	7a61      	ldrb	r1, [r4, #9]
   153b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   153ba:	351c      	adds	r5, #28
   153bc:	e7de      	b.n	1537c <bt_conn_security_changed+0x18>
   153be:	d3f6      	bcc.n	153ae <bt_conn_security_changed+0x4a>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   153c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153c2:	bf00      	nop
   153c4:	200215f4 	.word	0x200215f4
   153c8:	00031468 	.word	0x00031468
   153cc:	00031484 	.word	0x00031484
   153d0:	00035383 	.word	0x00035383
   153d4:	00035353 	.word	0x00035353
   153d8:	00032679 	.word	0x00032679
   153dc:	00033719 	.word	0x00033719

000153e0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   153e0:	b538      	push	{r3, r4, r5, lr}
   153e2:	4605      	mov	r5, r0
   153e4:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   153e6:	480b      	ldr	r0, [pc, #44]	; (15414 <bt_conn_add_le+0x34>)
   153e8:	2101      	movs	r1, #1
   153ea:	f7ff fb5f 	bl	14aac <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   153ee:	b180      	cbz	r0, 15412 <bt_conn_add_le+0x32>
		return NULL;
	}

	conn->id = id;
   153f0:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   153f2:	6823      	ldr	r3, [r4, #0]
   153f4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
   153f8:	88a3      	ldrh	r3, [r4, #4]
   153fa:	f8a0 3094 	strh.w	r3, [r0, #148]	; 0x94
   153fe:	79a3      	ldrb	r3, [r4, #6]
   15400:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   15404:	2301      	movs	r3, #1
   15406:	7243      	strb	r3, [r0, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   15408:	7283      	strb	r3, [r0, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1540a:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1540c:	4b02      	ldr	r3, [pc, #8]	; (15418 <bt_conn_add_le+0x38>)
   1540e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15412:	bd38      	pop	{r3, r4, r5, pc}
   15414:	20009da8 	.word	0x20009da8
   15418:	00280018 	.word	0x00280018

0001541c <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1541c:	b570      	push	{r4, r5, r6, lr}
   1541e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15420:	480a      	ldr	r0, [pc, #40]	; (1544c <bt_conn_lookup_addr_le+0x30>)
{
   15422:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15424:	f7ff fcf6 	bl	14e14 <bt_conn_ref>
   15428:	4604      	mov	r4, r0

		if (!conn) {
   1542a:	b120      	cbz	r0, 15436 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1542c:	7883      	ldrb	r3, [r0, #2]
   1542e:	2b01      	cmp	r3, #1
   15430:	d004      	beq.n	1543c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   15432:	f7ff fd17 	bl	14e64 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15436:	2400      	movs	r4, #0
}
   15438:	4620      	mov	r0, r4
   1543a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1543c:	4632      	mov	r2, r6
   1543e:	4629      	mov	r1, r5
   15440:	f017 f933 	bl	2c6aa <bt_conn_is_peer_addr_le>
   15444:	2800      	cmp	r0, #0
   15446:	d1f7      	bne.n	15438 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15448:	4620      	mov	r0, r4
   1544a:	e7f2      	b.n	15432 <bt_conn_lookup_addr_le+0x16>
   1544c:	20009da8 	.word	0x20009da8

00015450 <bt_conn_exists_le>:
{
   15450:	b5b0      	push	{r4, r5, r7, lr}
   15452:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15454:	f7ff ffe2 	bl	1541c <bt_conn_lookup_addr_le>
	if (conn) {
   15458:	4604      	mov	r4, r0
   1545a:	b1e8      	cbz	r0, 15498 <bt_conn_exists_le+0x48>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1545c:	7b43      	ldrb	r3, [r0, #13]
   1545e:	466d      	mov	r5, sp
   15460:	2b08      	cmp	r3, #8
   15462:	bf98      	it	ls
   15464:	4a0d      	ldrls	r2, [pc, #52]	; (1549c <bt_conn_exists_le+0x4c>)
   15466:	b088      	sub	sp, #32
   15468:	bf94      	ite	ls
   1546a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1546e:	4b0c      	ldrhi	r3, [pc, #48]	; (154a0 <bt_conn_exists_le+0x50>)
   15470:	466a      	mov	r2, sp
   15472:	490c      	ldr	r1, [pc, #48]	; (154a4 <bt_conn_exists_le+0x54>)
   15474:	480c      	ldr	r0, [pc, #48]	; (154a8 <bt_conn_exists_le+0x58>)
   15476:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1547a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1547e:	8393      	strh	r3, [r2, #28]
   15480:	4b0a      	ldr	r3, [pc, #40]	; (154ac <bt_conn_exists_le+0x5c>)
   15482:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   15486:	f842 3f10 	str.w	r3, [r2, #16]!
   1548a:	f017 f886 	bl	2c59a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1548e:	4620      	mov	r0, r4
   15490:	46ad      	mov	sp, r5
   15492:	f7ff fce7 	bl	14e64 <bt_conn_unref>
		return true;
   15496:	2001      	movs	r0, #1
}
   15498:	46bd      	mov	sp, r7
   1549a:	bdb0      	pop	{r4, r5, r7, pc}
   1549c:	00031f74 	.word	0x00031f74
   154a0:	0003551c 	.word	0x0003551c
   154a4:	00035685 	.word	0x00035685
   154a8:	000314dc 	.word	0x000314dc
   154ac:	01000003 	.word	0x01000003

000154b0 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   154b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154b2:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   154b4:	480e      	ldr	r0, [pc, #56]	; (154f0 <bt_conn_lookup_state_le+0x40>)
{
   154b6:	460e      	mov	r6, r1
   154b8:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   154ba:	f7ff fcab 	bl	14e14 <bt_conn_ref>

		if (!conn) {
   154be:	4604      	mov	r4, r0
   154c0:	b120      	cbz	r0, 154cc <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   154c2:	7883      	ldrb	r3, [r0, #2]
   154c4:	2b01      	cmp	r3, #1
   154c6:	d003      	beq.n	154d0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   154c8:	f7ff fccc 	bl	14e64 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   154cc:	2400      	movs	r4, #0
   154ce:	e00d      	b.n	154ec <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   154d0:	b136      	cbz	r6, 154e0 <bt_conn_lookup_state_le+0x30>
   154d2:	4632      	mov	r2, r6
   154d4:	4629      	mov	r1, r5
   154d6:	f017 f8e8 	bl	2c6aa <bt_conn_is_peer_addr_le>
   154da:	b908      	cbnz	r0, 154e0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   154dc:	4620      	mov	r0, r4
   154de:	e7f3      	b.n	154c8 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   154e0:	7b63      	ldrb	r3, [r4, #13]
   154e2:	42bb      	cmp	r3, r7
   154e4:	d1fa      	bne.n	154dc <bt_conn_lookup_state_le+0x2c>
   154e6:	7a23      	ldrb	r3, [r4, #8]
   154e8:	42ab      	cmp	r3, r5
   154ea:	d1f7      	bne.n	154dc <bt_conn_lookup_state_le+0x2c>
}
   154ec:	4620      	mov	r0, r4
   154ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154f0:	20009da8 	.word	0x20009da8

000154f4 <send_conn_le_param_update>:
{
   154f4:	b538      	push	{r3, r4, r5, lr}
   154f6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   154f8:	4608      	mov	r0, r1
{
   154fa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   154fc:	f016 fdf6 	bl	2c0ec <bt_le_conn_params_valid>
   15500:	b338      	cbz	r0, 15552 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15502:	4b15      	ldr	r3, [pc, #84]	; (15558 <send_conn_le_param_update+0x64>)
   15504:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15508:	0799      	lsls	r1, r3, #30
   1550a:	d407      	bmi.n	1551c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1550c:	78e3      	ldrb	r3, [r4, #3]
   1550e:	b173      	cbz	r3, 1552e <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15510:	4629      	mov	r1, r5
   15512:	4620      	mov	r0, r4
}
   15514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15518:	f000 bb02 	b.w	15b20 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1551c:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   15520:	079a      	lsls	r2, r3, #30
   15522:	d5f3      	bpl.n	1550c <send_conn_le_param_update+0x18>
   15524:	1d23      	adds	r3, r4, #4
   15526:	e8d3 3faf 	lda	r3, [r3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1552a:	055b      	lsls	r3, r3, #21
   1552c:	d4ee      	bmi.n	1550c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1552e:	4629      	mov	r1, r5
   15530:	4620      	mov	r0, r4
   15532:	f017 f8dc 	bl	2c6ee <bt_conn_le_conn_update>
		if (rc == 0) {
   15536:	b958      	cbnz	r0, 15550 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15538:	882b      	ldrh	r3, [r5, #0]
   1553a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1553e:	886b      	ldrh	r3, [r5, #2]
   15540:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   15544:	88ab      	ldrh	r3, [r5, #4]
   15546:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1554a:	88eb      	ldrh	r3, [r5, #6]
   1554c:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   15550:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15552:	f06f 0015 	mvn.w	r0, #21
   15556:	e7fb      	b.n	15550 <send_conn_le_param_update+0x5c>
   15558:	20008000 	.word	0x20008000

0001555c <deferred_work>:
{
   1555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15560:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   15562:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   15566:	4604      	mov	r4, r0
   15568:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1556a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1556e:	bb8b      	cbnz	r3, 155d4 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   15570:	4630      	mov	r0, r6
   15572:	f017 f919 	bl	2c7a8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15576:	4b3d      	ldr	r3, [pc, #244]	; (1566c <deferred_work+0x110>)
   15578:	681d      	ldr	r5, [r3, #0]
   1557a:	b99d      	cbnz	r5, 155a4 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1557c:	4d3c      	ldr	r5, [pc, #240]	; (15670 <deferred_work+0x114>)
   1557e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 15674 <deferred_work+0x118>
   15582:	4545      	cmp	r5, r8
   15584:	d91e      	bls.n	155c4 <deferred_work+0x68>
   15586:	493c      	ldr	r1, [pc, #240]	; (15678 <deferred_work+0x11c>)
   15588:	f240 536c 	movw	r3, #1388	; 0x56c
   1558c:	4a3b      	ldr	r2, [pc, #236]	; (1567c <deferred_work+0x120>)
   1558e:	483c      	ldr	r0, [pc, #240]	; (15680 <deferred_work+0x124>)
   15590:	f015 f8a3 	bl	2a6da <assert_print>
   15594:	483b      	ldr	r0, [pc, #236]	; (15684 <deferred_work+0x128>)
   15596:	f015 f8a0 	bl	2a6da <assert_print>
   1559a:	f240 516c 	movw	r1, #1388	; 0x56c
   1559e:	4837      	ldr	r0, [pc, #220]	; (1567c <deferred_work+0x120>)
   155a0:	f015 f894 	bl	2a6cc <assert_post_action>
		if (cb->disconnected) {
   155a4:	686b      	ldr	r3, [r5, #4]
   155a6:	b11b      	cbz	r3, 155b0 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   155a8:	4630      	mov	r0, r6
   155aa:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   155ae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   155b0:	69ad      	ldr	r5, [r5, #24]
   155b2:	e7e2      	b.n	1557a <deferred_work+0x1e>
		if (cb->disconnected) {
   155b4:	686b      	ldr	r3, [r5, #4]
   155b6:	b11b      	cbz	r3, 155c0 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   155b8:	4630      	mov	r0, r6
   155ba:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   155be:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   155c0:	351c      	adds	r5, #28
   155c2:	e7de      	b.n	15582 <deferred_work+0x26>
   155c4:	d3f6      	bcc.n	155b4 <deferred_work+0x58>
		bt_conn_unref(conn);
   155c6:	4630      	mov	r0, r6
   155c8:	f7ff fc4c 	bl	14e64 <bt_conn_unref>
}
   155cc:	3708      	adds	r7, #8
   155ce:	46bd      	mov	sp, r7
   155d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   155d4:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   155d8:	2b01      	cmp	r3, #1
   155da:	d1f7      	bne.n	155cc <deferred_work+0x70>
	if (atomic_test_and_clear_bit(conn->flags,
   155dc:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   155e0:	f46f 7100 	mvn.w	r1, #512	; 0x200
   155e4:	4628      	mov	r0, r5
   155e6:	f016 ffcd 	bl	2c584 <atomic_and>
   155ea:	0581      	lsls	r1, r0, #22
   155ec:	d526      	bpl.n	1563c <deferred_work+0xe0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		err = send_conn_le_param_update(conn, param);
   155f0:	4639      	mov	r1, r7
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155f2:	603b      	str	r3, [r7, #0]
   155f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
		err = send_conn_le_param_update(conn, param);
   155f6:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   155f8:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   155fa:	f7ff ff7b 	bl	154f4 <send_conn_le_param_update>
		if (!err) {
   155fe:	b968      	cbnz	r0, 1561c <deferred_work+0xc0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15600:	f46f 7180 	mvn.w	r1, #256	; 0x100
   15604:	4628      	mov	r0, r5
   15606:	f016 ffbd 	bl	2c584 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1560a:	e8d5 3fef 	ldaex	r3, [r5]
   1560e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15612:	e8c5 3fe2 	stlex	r2, r3, [r5]
   15616:	2a00      	cmp	r2, #0
   15618:	d0d8      	beq.n	155cc <deferred_work+0x70>
   1561a:	e7f6      	b.n	1560a <deferred_work+0xae>
			LOG_WRN("Send LE param update failed (err %d)", err);
   1561c:	466c      	mov	r4, sp
   1561e:	b088      	sub	sp, #32
   15620:	466a      	mov	r2, sp
   15622:	4b19      	ldr	r3, [pc, #100]	; (15688 <deferred_work+0x12c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   15624:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15628:	2303      	movs	r3, #3
   1562a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1562e:	4817      	ldr	r0, [pc, #92]	; (1568c <deferred_work+0x130>)
   15630:	f842 3f10 	str.w	r3, [r2, #16]!
   15634:	f016 ffb1 	bl	2c59a <z_log_msg_static_create.constprop.0>
   15638:	46a5      	mov	sp, r4
   1563a:	e7e6      	b.n	1560a <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(
   1563c:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   15640:	4a13      	ldr	r2, [pc, #76]	; (15690 <deferred_work+0x134>)
		err = send_conn_le_param_update(conn, param);
   15642:	4639      	mov	r1, r7
   15644:	4630      	mov	r0, r6
		param = BT_LE_CONN_PARAM(
   15646:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   1564a:	f7ff ff53 	bl	154f4 <send_conn_le_param_update>
		if (!err) {
   1564e:	b940      	cbnz	r0, 15662 <deferred_work+0x106>
   15650:	e8d5 3fef 	ldaex	r3, [r5]
   15654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15658:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1565c:	2a00      	cmp	r2, #0
   1565e:	d0d4      	beq.n	1560a <deferred_work+0xae>
   15660:	e7f6      	b.n	15650 <deferred_work+0xf4>
			LOG_WRN("Send auto LE param update failed (err %d)",
   15662:	466c      	mov	r4, sp
   15664:	b088      	sub	sp, #32
   15666:	466a      	mov	r2, sp
   15668:	4b0a      	ldr	r3, [pc, #40]	; (15694 <deferred_work+0x138>)
   1566a:	e7db      	b.n	15624 <deferred_work+0xc8>
   1566c:	200215f4 	.word	0x200215f4
   15670:	00031468 	.word	0x00031468
   15674:	00031484 	.word	0x00031484
   15678:	00035383 	.word	0x00035383
   1567c:	00035353 	.word	0x00035353
   15680:	00032679 	.word	0x00032679
   15684:	00033719 	.word	0x00033719
   15688:	000356a8 	.word	0x000356a8
   1568c:	000314dc 	.word	0x000314dc
   15690:	00280018 	.word	0x00280018
   15694:	000356cd 	.word	0x000356cd

00015698 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   15698:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1569a:	4801      	ldr	r0, [pc, #4]	; (156a0 <bt_conn_create_frag_timeout+0x8>)
   1569c:	f7ff bd34 	b.w	15108 <bt_conn_create_pdu_timeout>
   156a0:	20008da4 	.word	0x20008da4

000156a4 <create_frag>:
{
   156a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156a8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   156aa:	f04f 33ff 	mov.w	r3, #4294967295
   156ae:	f04f 32ff 	mov.w	r2, #4294967295
   156b2:	2000      	movs	r0, #0
{
   156b4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   156b6:	f7ff ffef 	bl	15698 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   156ba:	7b73      	ldrb	r3, [r6, #13]
		frag = bt_conn_create_frag(0);
   156bc:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   156be:	2b07      	cmp	r3, #7
   156c0:	f04f 0600 	mov.w	r6, #0
   156c4:	d005      	beq.n	156d2 <create_frag+0x2e>
		net_buf_unref(frag);
   156c6:	f005 ff6f 	bl	1b5a8 <net_buf_unref>
		return NULL;
   156ca:	4635      	mov	r5, r6
}
   156cc:	4628      	mov	r0, r5
   156ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   156d2:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   156d4:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   156d8:	4e0c      	ldr	r6, [pc, #48]	; (1570c <create_frag+0x68>)
   156da:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   156dc:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   156e0:	f018 fca1 	bl	2e026 <net_buf_simple_tailroom>
   156e4:	4580      	cmp	r8, r0
   156e6:	d20c      	bcs.n	15702 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   156e8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   156ec:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   156f0:	4632      	mov	r2, r6
   156f2:	4638      	mov	r0, r7
   156f4:	f018 fc9f 	bl	2e036 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   156f8:	4631      	mov	r1, r6
   156fa:	4620      	mov	r0, r4
   156fc:	f006 f83a 	bl	1b774 <net_buf_simple_pull>
   15700:	e7e4      	b.n	156cc <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15702:	4638      	mov	r0, r7
   15704:	f018 fc8f 	bl	2e026 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   15708:	b286      	uxth	r6, r0
   1570a:	e7ef      	b.n	156ec <create_frag+0x48>
   1570c:	20008000 	.word	0x20008000

00015710 <bt_conn_process_tx>:
{
   15710:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15712:	7b43      	ldrb	r3, [r0, #13]
{
   15714:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   15716:	b95b      	cbnz	r3, 15730 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15718:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1571c:	3004      	adds	r0, #4
   1571e:	f016 ff31 	bl	2c584 <atomic_and>
   15722:	0643      	lsls	r3, r0, #25
   15724:	d504      	bpl.n	15730 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   15726:	4620      	mov	r0, r4
}
   15728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1572c:	f7ff b9ec 	b.w	14b08 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15730:	2200      	movs	r2, #0
   15732:	2300      	movs	r3, #0
   15734:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15738:	f018 fc60 	bl	2dffc <net_buf_get>
	BT_ASSERT(buf);
   1573c:	4605      	mov	r5, r0
   1573e:	b960      	cbnz	r0, 1575a <bt_conn_process_tx+0x4a>
   15740:	f240 331a 	movw	r3, #794	; 0x31a
   15744:	4a22      	ldr	r2, [pc, #136]	; (157d0 <bt_conn_process_tx+0xc0>)
   15746:	4923      	ldr	r1, [pc, #140]	; (157d4 <bt_conn_process_tx+0xc4>)
   15748:	4823      	ldr	r0, [pc, #140]	; (157d8 <bt_conn_process_tx+0xc8>)
   1574a:	f014 ffc6 	bl	2a6da <assert_print>
   1574e:	4040      	eors	r0, r0
   15750:	f380 8811 	msr	BASEPRI, r0
   15754:	f04f 0003 	mov.w	r0, #3
   15758:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1575a:	4e20      	ldr	r6, [pc, #128]	; (157dc <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1575c:	8a2a      	ldrh	r2, [r5, #16]
   1575e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   15762:	429a      	cmp	r2, r3
   15764:	d807      	bhi.n	15776 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15766:	2300      	movs	r3, #0
   15768:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1576a:	4629      	mov	r1, r5
   1576c:	4620      	mov	r0, r4
   1576e:	f7ff f8e7 	bl	14940 <send_frag>
	if (!send_buf(conn, buf)) {
   15772:	b968      	cbnz	r0, 15790 <bt_conn_process_tx+0x80>
   15774:	e005      	b.n	15782 <bt_conn_process_tx+0x72>
	frag = create_frag(conn, buf);
   15776:	4629      	mov	r1, r5
   15778:	4620      	mov	r0, r4
   1577a:	f7ff ff93 	bl	156a4 <create_frag>
	if (!frag) {
   1577e:	4601      	mov	r1, r0
   15780:	b938      	cbnz	r0, 15792 <bt_conn_process_tx+0x82>
		tx_data(buf)->tx = NULL;
   15782:	2300      	movs	r3, #0
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   15784:	69ae      	ldr	r6, [r5, #24]
		net_buf_unref(buf);
   15786:	4628      	mov	r0, r5
		tx_data(buf)->tx = NULL;
   15788:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1578a:	f005 ff0d 	bl	1b5a8 <net_buf_unref>
		if (tx) {
   1578e:	b9ce      	cbnz	r6, 157c4 <bt_conn_process_tx+0xb4>
}
   15790:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   15792:	2301      	movs	r3, #1
   15794:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   15796:	4620      	mov	r0, r4
   15798:	f7ff f8d2 	bl	14940 <send_frag>
   1579c:	2800      	cmp	r0, #0
   1579e:	d0f0      	beq.n	15782 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   157a0:	8a2a      	ldrh	r2, [r5, #16]
   157a2:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   157a6:	429a      	cmp	r2, r3
   157a8:	d802      	bhi.n	157b0 <bt_conn_process_tx+0xa0>
	return send_frag(conn, buf, FRAG_END, false);
   157aa:	2300      	movs	r3, #0
   157ac:	2203      	movs	r2, #3
   157ae:	e7dc      	b.n	1576a <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   157b0:	4629      	mov	r1, r5
   157b2:	4620      	mov	r0, r4
   157b4:	f7ff ff76 	bl	156a4 <create_frag>
		if (!frag) {
   157b8:	4601      	mov	r1, r0
   157ba:	2800      	cmp	r0, #0
   157bc:	d0e1      	beq.n	15782 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   157be:	2301      	movs	r3, #1
   157c0:	461a      	mov	r2, r3
   157c2:	e7e8      	b.n	15796 <bt_conn_process_tx+0x86>
			conn_tx_destroy(conn, tx);
   157c4:	4631      	mov	r1, r6
   157c6:	4620      	mov	r0, r4
}
   157c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   157cc:	f7ff b892 	b.w	148f4 <conn_tx_destroy>
   157d0:	00035353 	.word	0x00035353
   157d4:	00036995 	.word	0x00036995
   157d8:	00032679 	.word	0x00032679
   157dc:	20008000 	.word	0x20008000

000157e0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   157e0:	4b0b      	ldr	r3, [pc, #44]	; (15810 <bt_conn_auth_cb_register+0x30>)
   157e2:	b158      	cbz	r0, 157fc <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   157e4:	681a      	ldr	r2, [r3, #0]
   157e6:	b962      	cbnz	r2, 15802 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   157e8:	6902      	ldr	r2, [r0, #16]
   157ea:	b93a      	cbnz	r2, 157fc <bt_conn_auth_cb_register+0x1c>
   157ec:	6802      	ldr	r2, [r0, #0]
   157ee:	b95a      	cbnz	r2, 15808 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   157f0:	6842      	ldr	r2, [r0, #4]
   157f2:	b94a      	cbnz	r2, 15808 <bt_conn_auth_cb_register+0x28>
   157f4:	6882      	ldr	r2, [r0, #8]
   157f6:	b93a      	cbnz	r2, 15808 <bt_conn_auth_cb_register+0x28>
   157f8:	6942      	ldr	r2, [r0, #20]
   157fa:	b92a      	cbnz	r2, 15808 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   157fc:	6018      	str	r0, [r3, #0]
		return 0;
   157fe:	2000      	movs	r0, #0
   15800:	4770      	bx	lr
		return -EALREADY;
   15802:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15806:	4770      	bx	lr
		return -EINVAL;
   15808:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   1580c:	4770      	bx	lr
   1580e:	bf00      	nop
   15810:	20021600 	.word	0x20021600

00015814 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   15814:	b168      	cbz	r0, 15832 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   15816:	2300      	movs	r3, #0
   15818:	60c3      	str	r3, [r0, #12]
	return list->tail;
   1581a:	4b07      	ldr	r3, [pc, #28]	; (15838 <bt_conn_auth_info_cb_register+0x24>)
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   1581c:	f100 020c 	add.w	r2, r0, #12
   15820:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   15822:	b919      	cbnz	r1, 1582c <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   15824:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   15828:	2000      	movs	r0, #0
   1582a:	4770      	bx	lr
	parent->next = child;
   1582c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1582e:	605a      	str	r2, [r3, #4]
}
   15830:	e7fa      	b.n	15828 <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   15832:	f06f 0015 	mvn.w	r0, #21
}
   15836:	4770      	bx	lr
   15838:	200215f8 	.word	0x200215f8

0001583c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   1583c:	b910      	cbnz	r0, 15844 <bt_conn_lookup_index+0x8>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1583e:	4802      	ldr	r0, [pc, #8]	; (15848 <bt_conn_lookup_index+0xc>)
   15840:	f7ff bae8 	b.w	14e14 <bt_conn_ref>
}
   15844:	2000      	movs	r0, #0
   15846:	4770      	bx	lr
   15848:	20009da8 	.word	0x20009da8

0001584c <bt_conn_init>:

int bt_conn_init(void)
{
   1584c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1584e:	480a      	ldr	r0, [pc, #40]	; (15878 <bt_conn_init+0x2c>)
   15850:	f01a fcb9 	bl	301c6 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   15854:	4909      	ldr	r1, [pc, #36]	; (1587c <bt_conn_init+0x30>)
   15856:	4808      	ldr	r0, [pc, #32]	; (15878 <bt_conn_init+0x2c>)
   15858:	f01a fcc2 	bl	301e0 <k_queue_append>
   1585c:	4908      	ldr	r1, [pc, #32]	; (15880 <bt_conn_init+0x34>)
   1585e:	4806      	ldr	r0, [pc, #24]	; (15878 <bt_conn_init+0x2c>)
   15860:	f01a fcbe 	bl	301e0 <k_queue_append>
	}

	bt_att_init();
   15864:	f001 f932 	bl	16acc <bt_att_init>

	err = bt_smp_init();
   15868:	f004 fd80 	bl	1a36c <bt_smp_init>
	if (err) {
   1586c:	4604      	mov	r4, r0
   1586e:	b908      	cbnz	r0, 15874 <bt_conn_init+0x28>
		return err;
	}

	bt_l2cap_init();
   15870:	f016 fffd 	bl	2c86e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15874:	4620      	mov	r0, r4
   15876:	bd10      	pop	{r4, pc}
   15878:	20008cb8 	.word	0x20008cb8
   1587c:	200215d4 	.word	0x200215d4
   15880:	200215e4 	.word	0x200215e4

00015884 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   15884:	b580      	push	{r7, lr}
   15886:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   15888:	b088      	sub	sp, #32
   1588a:	466a      	mov	r2, sp
   1588c:	4b06      	ldr	r3, [pc, #24]	; (158a8 <l2cap_create_le_sig_pdu.part.0+0x24>)
   1588e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15892:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15896:	2303      	movs	r3, #3
   15898:	4804      	ldr	r0, [pc, #16]	; (158ac <l2cap_create_le_sig_pdu.part.0+0x28>)
   1589a:	f842 3f10 	str.w	r3, [r2, #16]!
   1589e:	f016 ff4f 	bl	2c740 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   158a2:	2000      	movs	r0, #0
   158a4:	46bd      	mov	sp, r7
   158a6:	bd80      	pop	{r7, pc}
   158a8:	00035770 	.word	0x00035770
   158ac:	00031524 	.word	0x00031524

000158b0 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   158b0:	b580      	push	{r7, lr}
   158b2:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   158b4:	b088      	sub	sp, #32
   158b6:	466a      	mov	r2, sp
   158b8:	4b07      	ldr	r3, [pc, #28]	; (158d8 <l2cap_accept.part.0+0x28>)
   158ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   158be:	e9c2 3005 	strd	r3, r0, [r2, #20]
   158c2:	2303      	movs	r3, #3
   158c4:	4805      	ldr	r0, [pc, #20]	; (158dc <l2cap_accept.part.0+0x2c>)
   158c6:	f842 3f10 	str.w	r3, [r2, #16]!
   158ca:	f016 ff39 	bl	2c740 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   158ce:	f06f 000b 	mvn.w	r0, #11
   158d2:	46bd      	mov	sp, r7
   158d4:	bd80      	pop	{r7, pc}
   158d6:	bf00      	nop
   158d8:	00035798 	.word	0x00035798
   158dc:	00031524 	.word	0x00031524

000158e0 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   158e0:	4b04      	ldr	r3, [pc, #16]	; (158f4 <l2cap_accept+0x14>)
   158e2:	681a      	ldr	r2, [r3, #0]
   158e4:	b10a      	cbz	r2, 158ea <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   158e6:	f7ff bfe3 	b.w	158b0 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   158ea:	4803      	ldr	r0, [pc, #12]	; (158f8 <l2cap_accept+0x18>)
   158ec:	6058      	str	r0, [r3, #4]
}
   158ee:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   158f0:	600b      	str	r3, [r1, #0]
}
   158f2:	4770      	bx	lr
   158f4:	20021604 	.word	0x20021604
   158f8:	00031fb8 	.word	0x00031fb8

000158fc <bt_l2cap_connected>:
{
   158fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   158fe:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15900:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   15902:	4d27      	ldr	r5, [pc, #156]	; (159a0 <bt_l2cap_connected+0xa4>)
   15904:	4f27      	ldr	r7, [pc, #156]	; (159a4 <bt_l2cap_connected+0xa8>)
   15906:	42bd      	cmp	r5, r7
   15908:	d946      	bls.n	15998 <bt_l2cap_connected+0x9c>
   1590a:	4927      	ldr	r1, [pc, #156]	; (159a8 <bt_l2cap_connected+0xac>)
   1590c:	f240 1381 	movw	r3, #385	; 0x181
   15910:	4a26      	ldr	r2, [pc, #152]	; (159ac <bt_l2cap_connected+0xb0>)
   15912:	4827      	ldr	r0, [pc, #156]	; (159b0 <bt_l2cap_connected+0xb4>)
   15914:	f014 fee1 	bl	2a6da <assert_print>
   15918:	4826      	ldr	r0, [pc, #152]	; (159b4 <bt_l2cap_connected+0xb8>)
   1591a:	f014 fede 	bl	2a6da <assert_print>
   1591e:	f240 1181 	movw	r1, #385	; 0x181
   15922:	4822      	ldr	r0, [pc, #136]	; (159ac <bt_l2cap_connected+0xb0>)
   15924:	f014 fed2 	bl	2a6cc <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   15928:	4620      	mov	r0, r4
   1592a:	686b      	ldr	r3, [r5, #4]
   1592c:	a901      	add	r1, sp, #4
   1592e:	4798      	blx	r3
   15930:	2800      	cmp	r0, #0
   15932:	db2c      	blt.n	1598e <bt_l2cap_connected+0x92>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   15934:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   15936:	882a      	ldrh	r2, [r5, #0]
   15938:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1593a:	849a      	strh	r2, [r3, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1593c:	68a8      	ldr	r0, [r5, #8]
   1593e:	f103 0210 	add.w	r2, r3, #16
   15942:	e8d2 1fef 	ldaex	r1, [r2]
   15946:	e8c2 6fec 	stlex	ip, r6, [r2]
   1594a:	f1bc 0f00 	cmp.w	ip, #0
   1594e:	d1f8      	bne.n	15942 <bt_l2cap_connected+0x46>
	parent->next = child;
   15950:	609e      	str	r6, [r3, #8]
	return list->tail;
   15952:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   15954:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   15958:	b9d9      	cbnz	r1, 15992 <bt_l2cap_connected+0x96>
	list->head = node;
   1595a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1595e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   15960:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   15962:	9801      	ldr	r0, [sp, #4]
   15964:	6843      	ldr	r3, [r0, #4]
   15966:	681b      	ldr	r3, [r3, #0]
   15968:	b103      	cbz	r3, 1596c <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   1596a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1596c:	9b01      	ldr	r3, [sp, #4]
   1596e:	3310      	adds	r3, #16
   15970:	e8d3 1fef 	ldaex	r1, [r3]
   15974:	f041 0101 	orr.w	r1, r1, #1
   15978:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1597c:	2a00      	cmp	r2, #0
   1597e:	d1f7      	bne.n	15970 <bt_l2cap_connected+0x74>
		if (chan->ops->status) {
   15980:	9801      	ldr	r0, [sp, #4]
   15982:	6843      	ldr	r3, [r0, #4]
   15984:	69db      	ldr	r3, [r3, #28]
   15986:	b113      	cbz	r3, 1598e <bt_l2cap_connected+0x92>
			chan->ops->status(chan, chan->status);
   15988:	f100 0110 	add.w	r1, r0, #16
   1598c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1598e:	350c      	adds	r5, #12
   15990:	e7b9      	b.n	15906 <bt_l2cap_connected+0xa>
	parent->next = child;
   15992:	600a      	str	r2, [r1, #0]
	list->tail = node;
   15994:	65a2      	str	r2, [r4, #88]	; 0x58
}
   15996:	e7e2      	b.n	1595e <bt_l2cap_connected+0x62>
   15998:	d3c6      	bcc.n	15928 <bt_l2cap_connected+0x2c>
}
   1599a:	b003      	add	sp, #12
   1599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1599e:	bf00      	nop
   159a0:	00031444 	.word	0x00031444
   159a4:	00031468 	.word	0x00031468
   159a8:	000357f0 	.word	0x000357f0
   159ac:	000357bf 	.word	0x000357bf
   159b0:	00032679 	.word	0x00032679
   159b4:	00033719 	.word	0x00033719

000159b8 <l2cap_recv>:
{
   159b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   159ba:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   159bc:	8a0b      	ldrh	r3, [r1, #16]
{
   159be:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   159c0:	2b03      	cmp	r3, #3
{
   159c2:	460d      	mov	r5, r1
   159c4:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   159c6:	d80b      	bhi.n	159e0 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   159c8:	4b30      	ldr	r3, [pc, #192]	; (15a8c <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   159ca:	617b      	str	r3, [r7, #20]
   159cc:	2302      	movs	r3, #2
   159ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   159d2:	482f      	ldr	r0, [pc, #188]	; (15a90 <l2cap_recv+0xd8>)
   159d4:	613b      	str	r3, [r7, #16]
   159d6:	f107 0210 	add.w	r2, r7, #16
   159da:	f016 feb1 	bl	2c740 <z_log_msg_static_create.constprop.0>
		return 0;
   159de:	e019      	b.n	15a14 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   159e0:	2104      	movs	r1, #4
   159e2:	f105 000c 	add.w	r0, r5, #12
   159e6:	f005 fee3 	bl	1b7b0 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   159ea:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   159ec:	8843      	ldrh	r3, [r0, #2]
   159ee:	4604      	mov	r4, r0
	if (buf->len != len) {
   159f0:	4299      	cmp	r1, r3
   159f2:	d013      	beq.n	15a1c <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   159f4:	466c      	mov	r4, sp
   159f6:	b088      	sub	sp, #32
   159f8:	aa02      	add	r2, sp, #8
   159fa:	61d3      	str	r3, [r2, #28]
   159fc:	2304      	movs	r3, #4
   159fe:	4825      	ldr	r0, [pc, #148]	; (15a94 <l2cap_recv+0xdc>)
   15a00:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15a04:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15a08:	4821      	ldr	r0, [pc, #132]	; (15a90 <l2cap_recv+0xd8>)
   15a0a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a0e:	f016 fe97 	bl	2c740 <z_log_msg_static_create.constprop.0>
   15a12:	46a5      	mov	sp, r4
}
   15a14:	2000      	movs	r0, #0
   15a16:	371c      	adds	r7, #28
   15a18:	46bd      	mov	sp, r7
   15a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   15a1c:	7843      	ldrb	r3, [r0, #1]
   15a1e:	b90b      	cbnz	r3, 15a24 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   15a20:	4b1d      	ldr	r3, [pc, #116]	; (15a98 <l2cap_recv+0xe0>)
   15a22:	e7d2      	b.n	159ca <l2cap_recv+0x12>
	switch (hdr->code) {
   15a24:	7803      	ldrb	r3, [r0, #0]
   15a26:	2b01      	cmp	r3, #1
   15a28:	d0f4      	beq.n	15a14 <l2cap_recv+0x5c>
   15a2a:	2b13      	cmp	r3, #19
   15a2c:	d103      	bne.n	15a36 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   15a2e:	2901      	cmp	r1, #1
   15a30:	d8f0      	bhi.n	15a14 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   15a32:	4b1a      	ldr	r3, [pc, #104]	; (15a9c <l2cap_recv+0xe4>)
   15a34:	e7c9      	b.n	159ca <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15a36:	466d      	mov	r5, sp
   15a38:	b088      	sub	sp, #32
   15a3a:	aa02      	add	r2, sp, #8
   15a3c:	4918      	ldr	r1, [pc, #96]	; (15aa0 <l2cap_recv+0xe8>)
   15a3e:	4814      	ldr	r0, [pc, #80]	; (15a90 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   15a40:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   15a44:	2303      	movs	r3, #3
   15a46:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a4a:	f842 3f10 	str.w	r3, [r2, #16]!
   15a4e:	f016 fe77 	bl	2c740 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15a52:	2202      	movs	r2, #2
   15a54:	46ad      	mov	sp, r5
   15a56:	7861      	ldrb	r1, [r4, #1]
   15a58:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   15a5a:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   15a5c:	f016 fe73 	bl	2c746 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15a60:	4604      	mov	r4, r0
   15a62:	2800      	cmp	r0, #0
   15a64:	d0d6      	beq.n	15a14 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   15a66:	2102      	movs	r1, #2
   15a68:	300c      	adds	r0, #12
   15a6a:	f005 febf 	bl	1b7ec <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   15a6e:	2300      	movs	r3, #0
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   15a70:	4622      	mov	r2, r4
   15a72:	7003      	strb	r3, [r0, #0]
   15a74:	7043      	strb	r3, [r0, #1]
   15a76:	2105      	movs	r1, #5
   15a78:	4628      	mov	r0, r5
   15a7a:	9300      	str	r3, [sp, #0]
   15a7c:	f016 fecc 	bl	2c818 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   15a80:	2800      	cmp	r0, #0
   15a82:	d0c7      	beq.n	15a14 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   15a84:	4620      	mov	r0, r4
   15a86:	f005 fd8f 	bl	1b5a8 <net_buf_unref>
   15a8a:	e7c3      	b.n	15a14 <l2cap_recv+0x5c>
   15a8c:	00035817 	.word	0x00035817
   15a90:	00031524 	.word	0x00031524
   15a94:	00035835 	.word	0x00035835
   15a98:	00035856 	.word	0x00035856
   15a9c:	00035877 	.word	0x00035877
   15aa0:	00035893 	.word	0x00035893

00015aa4 <bt_l2cap_recv>:
{
   15aa4:	b5b0      	push	{r4, r5, r7, lr}
   15aa6:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   15aa8:	8a0b      	ldrh	r3, [r1, #16]
{
   15aaa:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   15aac:	2b03      	cmp	r3, #3
{
   15aae:	460c      	mov	r4, r1
   15ab0:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   15ab2:	d810      	bhi.n	15ad6 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   15ab4:	4b17      	ldr	r3, [pc, #92]	; (15b14 <bt_l2cap_recv+0x70>)
   15ab6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15aba:	617b      	str	r3, [r7, #20]
   15abc:	2302      	movs	r3, #2
   15abe:	4816      	ldr	r0, [pc, #88]	; (15b18 <bt_l2cap_recv+0x74>)
   15ac0:	613b      	str	r3, [r7, #16]
   15ac2:	f107 0210 	add.w	r2, r7, #16
   15ac6:	f016 fe3b 	bl	2c740 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   15aca:	4620      	mov	r0, r4
   15acc:	f005 fd6c 	bl	1b5a8 <net_buf_unref>
}
   15ad0:	3718      	adds	r7, #24
   15ad2:	46bd      	mov	sp, r7
   15ad4:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   15ad6:	2104      	movs	r1, #4
   15ad8:	f104 000c 	add.w	r0, r4, #12
   15adc:	f005 fe68 	bl	1b7b0 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   15ae0:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   15ae2:	4628      	mov	r0, r5
   15ae4:	f016 feba 	bl	2c85c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15ae8:	b978      	cbnz	r0, 15b0a <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   15aea:	466d      	mov	r5, sp
   15aec:	b088      	sub	sp, #32
   15aee:	466a      	mov	r2, sp
   15af0:	4b0a      	ldr	r3, [pc, #40]	; (15b1c <bt_l2cap_recv+0x78>)
   15af2:	4809      	ldr	r0, [pc, #36]	; (15b18 <bt_l2cap_recv+0x74>)
   15af4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   15af8:	2303      	movs	r3, #3
   15afa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15afe:	f842 3f10 	str.w	r3, [r2, #16]!
   15b02:	f016 fe1d 	bl	2c740 <z_log_msg_static_create.constprop.0>
   15b06:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   15b08:	e7df      	b.n	15aca <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   15b0a:	6843      	ldr	r3, [r0, #4]
   15b0c:	4621      	mov	r1, r4
   15b0e:	695b      	ldr	r3, [r3, #20]
   15b10:	4798      	blx	r3
   15b12:	e7da      	b.n	15aca <bt_l2cap_recv+0x26>
   15b14:	000358bb 	.word	0x000358bb
   15b18:	00031524 	.word	0x00031524
   15b1c:	000358d8 	.word	0x000358d8

00015b20 <bt_l2cap_update_conn_param>:
{
   15b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   15b22:	4b17      	ldr	r3, [pc, #92]	; (15b80 <bt_l2cap_update_conn_param+0x60>)
{
   15b24:	460e      	mov	r6, r1
	ident++;
   15b26:	7819      	ldrb	r1, [r3, #0]
{
   15b28:	4605      	mov	r5, r0
	ident++;
   15b2a:	3101      	adds	r1, #1
   15b2c:	b2c9      	uxtb	r1, r1
   15b2e:	2901      	cmp	r1, #1
   15b30:	bf38      	it	cc
   15b32:	2101      	movcc	r1, #1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15b34:	2208      	movs	r2, #8
   15b36:	2012      	movs	r0, #18
	ident++;
   15b38:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   15b3a:	f016 fe04 	bl	2c746 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   15b3e:	4604      	mov	r4, r0
   15b40:	b1d0      	cbz	r0, 15b78 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   15b42:	2108      	movs	r1, #8
   15b44:	300c      	adds	r0, #12
   15b46:	f005 fe51 	bl	1b7ec <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   15b4a:	8833      	ldrh	r3, [r6, #0]
   15b4c:	4622      	mov	r2, r4
   15b4e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   15b50:	8873      	ldrh	r3, [r6, #2]
   15b52:	2105      	movs	r1, #5
   15b54:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   15b56:	88b3      	ldrh	r3, [r6, #4]
   15b58:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   15b5a:	88f3      	ldrh	r3, [r6, #6]
   15b5c:	80c3      	strh	r3, [r0, #6]
   15b5e:	2300      	movs	r3, #0
   15b60:	4628      	mov	r0, r5
   15b62:	9300      	str	r3, [sp, #0]
   15b64:	f016 fe58 	bl	2c818 <bt_l2cap_send_cb>
	if (err) {
   15b68:	4605      	mov	r5, r0
   15b6a:	b110      	cbz	r0, 15b72 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   15b6c:	4620      	mov	r0, r4
   15b6e:	f005 fd1b 	bl	1b5a8 <net_buf_unref>
}
   15b72:	4628      	mov	r0, r5
   15b74:	b002      	add	sp, #8
   15b76:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   15b78:	f06f 050b 	mvn.w	r5, #11
   15b7c:	e7f9      	b.n	15b72 <bt_l2cap_update_conn_param+0x52>
   15b7e:	bf00      	nop
   15b80:	200223f7 	.word	0x200223f7

00015b84 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   15b84:	2823      	cmp	r0, #35	; 0x23
   15b86:	d81f      	bhi.n	15bc8 <att_op_get_type+0x44>
   15b88:	281a      	cmp	r0, #26
   15b8a:	d804      	bhi.n	15b96 <att_op_get_type+0x12>
   15b8c:	1e43      	subs	r3, r0, #1
   15b8e:	2b18      	cmp	r3, #24
   15b90:	d90e      	bls.n	15bb0 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   15b92:	2006      	movs	r0, #6
   15b94:	4770      	bx	lr
	switch (op) {
   15b96:	f1a0 031b 	sub.w	r3, r0, #27
   15b9a:	2b08      	cmp	r3, #8
   15b9c:	d81e      	bhi.n	15bdc <att_op_get_type+0x58>
   15b9e:	e8df f003 	tbb	[pc, r3]
   15ba2:	1d05      	.short	0x1d05
   15ba4:	191d231b 	.word	0x191d231b
   15ba8:	1d25      	.short	0x1d25
   15baa:	05          	.byte	0x05
   15bab:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   15bac:	2003      	movs	r0, #3
   15bae:	4770      	bx	lr
   15bb0:	2301      	movs	r3, #1
	switch (op) {
   15bb2:	4a0f      	ldr	r2, [pc, #60]	; (15bf0 <att_op_get_type+0x6c>)
   15bb4:	4083      	lsls	r3, r0
   15bb6:	401a      	ands	r2, r3
   15bb8:	b9c2      	cbnz	r2, 15bec <att_op_get_type+0x68>
   15bba:	4a0e      	ldr	r2, [pc, #56]	; (15bf4 <att_op_get_type+0x70>)
   15bbc:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   15bbe:	2a00      	cmp	r2, #0
   15bc0:	bf14      	ite	ne
   15bc2:	2001      	movne	r0, #1
   15bc4:	2006      	moveq	r0, #6
   15bc6:	4770      	bx	lr
	switch (op) {
   15bc8:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15bcc:	2b52      	cmp	r3, #82	; 0x52
   15bce:	d105      	bne.n	15bdc <att_op_get_type+0x58>
		return ATT_COMMAND;
   15bd0:	2000      	movs	r0, #0
}
   15bd2:	4770      	bx	lr
		return ATT_REQUEST;
   15bd4:	2001      	movs	r0, #1
   15bd6:	4770      	bx	lr
		return ATT_INDICATION;
   15bd8:	2005      	movs	r0, #5
   15bda:	4770      	bx	lr
		return ATT_COMMAND;
   15bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
   15be0:	bf0c      	ite	eq
   15be2:	2006      	moveq	r0, #6
   15be4:	2000      	movne	r0, #0
   15be6:	4770      	bx	lr
	switch (op) {
   15be8:	2004      	movs	r0, #4
   15bea:	4770      	bx	lr
		return ATT_RESPONSE;
   15bec:	2002      	movs	r0, #2
   15bee:	4770      	bx	lr
   15bf0:	028aaaaa 	.word	0x028aaaaa
   15bf4:	01455554 	.word	0x01455554

00015bf8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   15bf8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   15bfa:	3804      	subs	r0, #4
   15bfc:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   15bfe:	a901      	add	r1, sp, #4
   15c00:	4802      	ldr	r0, [pc, #8]	; (15c0c <bt_att_released+0x14>)
   15c02:	f00f f8b9 	bl	24d78 <k_mem_slab_free>
}
   15c06:	b003      	add	sp, #12
   15c08:	f85d fb04 	ldr.w	pc, [sp], #4
   15c0c:	20008a7c 	.word	0x20008a7c

00015c10 <tx_meta_data_free>:
{
   15c10:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   15c12:	4604      	mov	r4, r0
   15c14:	b948      	cbnz	r0, 15c2a <tx_meta_data_free+0x1a>
   15c16:	490a      	ldr	r1, [pc, #40]	; (15c40 <tx_meta_data_free+0x30>)
   15c18:	480a      	ldr	r0, [pc, #40]	; (15c44 <tx_meta_data_free+0x34>)
   15c1a:	23a6      	movs	r3, #166	; 0xa6
   15c1c:	4a0a      	ldr	r2, [pc, #40]	; (15c48 <tx_meta_data_free+0x38>)
   15c1e:	f014 fd5c 	bl	2a6da <assert_print>
   15c22:	21a6      	movs	r1, #166	; 0xa6
   15c24:	4808      	ldr	r0, [pc, #32]	; (15c48 <tx_meta_data_free+0x38>)
   15c26:	f014 fd51 	bl	2a6cc <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   15c2a:	2100      	movs	r1, #0
   15c2c:	2214      	movs	r2, #20
   15c2e:	f01a fce8 	bl	30602 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   15c32:	4621      	mov	r1, r4
}
   15c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   15c38:	4804      	ldr	r0, [pc, #16]	; (15c4c <tx_meta_data_free+0x3c>)
   15c3a:	f01a bad1 	b.w	301e0 <k_queue_append>
   15c3e:	bf00      	nop
   15c40:	00035465 	.word	0x00035465
   15c44:	00032679 	.word	0x00032679
   15c48:	0003590d 	.word	0x0003590d
   15c4c:	20008c9c 	.word	0x20008c9c

00015c50 <find_type_cb>:
{
   15c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c54:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   15c56:	f8d2 a000 	ldr.w	sl, [r2]
{
   15c5a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   15c5c:	f8da 3004 	ldr.w	r3, [sl, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c60:	2500      	movs	r5, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   15c62:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c64:	f642 0301 	movw	r3, #10241	; 0x2801
{
   15c68:	4680      	mov	r8, r0
   15c6a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c6c:	6800      	ldr	r0, [r0, #0]
   15c6e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15c72:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15c74:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   15c78:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   15c7a:	f016 f91a 	bl	2beb2 <bt_uuid_cmp>
   15c7e:	2800      	cmp	r0, #0
   15c80:	d070      	beq.n	15d64 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   15c82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   15c86:	f8d8 0000 	ldr.w	r0, [r8]
   15c8a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   15c8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15c90:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   15c94:	f016 f90d 	bl	2beb2 <bt_uuid_cmp>
   15c98:	b138      	cbz	r0, 15caa <find_type_cb+0x5a>
		if (data->group &&
   15c9a:	68a3      	ldr	r3, [r4, #8]
   15c9c:	b11b      	cbz	r3, 15ca6 <find_type_cb+0x56>
   15c9e:	885a      	ldrh	r2, [r3, #2]
   15ca0:	42b2      	cmp	r2, r6
   15ca2:	d200      	bcs.n	15ca6 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   15ca4:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   15ca6:	2001      	movs	r0, #1
   15ca8:	e009      	b.n	15cbe <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   15caa:	6861      	ldr	r1, [r4, #4]
   15cac:	4608      	mov	r0, r1
   15cae:	f016 fde9 	bl	2c884 <net_buf_frags_len>
   15cb2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15cb6:	1a1b      	subs	r3, r3, r0
   15cb8:	2b03      	cmp	r3, #3
   15cba:	d804      	bhi.n	15cc6 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   15cbc:	2000      	movs	r0, #0
}
   15cbe:	3744      	adds	r7, #68	; 0x44
   15cc0:	46bd      	mov	sp, r7
   15cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   15cc6:	4608      	mov	r0, r1
   15cc8:	f005 fcca 	bl	1b660 <net_buf_frag_last>
   15ccc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   15cce:	6860      	ldr	r0, [r4, #4]
   15cd0:	f016 fdd8 	bl	2c884 <net_buf_frags_len>
   15cd4:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   15cd8:	f105 090c 	add.w	r9, r5, #12
   15cdc:	ebab 0b00 	sub.w	fp, fp, r0
   15ce0:	4648      	mov	r0, r9
   15ce2:	f018 f9a0 	bl	2e026 <net_buf_simple_tailroom>
   15ce6:	4558      	cmp	r0, fp
   15ce8:	d93f      	bls.n	15d6a <find_type_cb+0x11a>
   15cea:	6860      	ldr	r0, [r4, #4]
   15cec:	f016 fdca 	bl	2c884 <net_buf_frags_len>
   15cf0:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   15cf4:	1a18      	subs	r0, r3, r0
	if (!len) {
   15cf6:	b970      	cbnz	r0, 15d16 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   15cf8:	6863      	ldr	r3, [r4, #4]
   15cfa:	7a98      	ldrb	r0, [r3, #10]
   15cfc:	f005 fa1a 	bl	1b134 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   15d00:	2200      	movs	r2, #0
   15d02:	2300      	movs	r3, #0
   15d04:	f018 f975 	bl	2dff2 <net_buf_alloc_fixed>
		if (!frag) {
   15d08:	4605      	mov	r5, r0
   15d0a:	2800      	cmp	r0, #0
   15d0c:	d0d6      	beq.n	15cbc <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   15d0e:	4601      	mov	r1, r0
   15d10:	6860      	ldr	r0, [r4, #4]
   15d12:	f005 fceb 	bl	1b6ec <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   15d16:	2300      	movs	r3, #0
   15d18:	9300      	str	r3, [sp, #0]
   15d1a:	4641      	mov	r1, r8
   15d1c:	f8d8 a004 	ldr.w	sl, [r8, #4]
   15d20:	2310      	movs	r3, #16
   15d22:	6878      	ldr	r0, [r7, #4]
   15d24:	f107 0208 	add.w	r2, r7, #8
   15d28:	47d0      	blx	sl
	if (read < 0) {
   15d2a:	f1b0 0800 	subs.w	r8, r0, #0
   15d2e:	db19      	blt.n	15d64 <find_type_cb+0x114>
	if (read != data->value_len) {
   15d30:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15d32:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   15d34:	4542      	cmp	r2, r8
   15d36:	d03f      	beq.n	15db8 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   15d38:	4601      	mov	r1, r0
   15d3a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15d3e:	f016 f8e6 	bl	2bf0e <bt_uuid_create>
   15d42:	b9b0      	cbnz	r0, 15d72 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   15d44:	466d      	mov	r5, sp
   15d46:	b088      	sub	sp, #32
   15d48:	7c23      	ldrb	r3, [r4, #16]
   15d4a:	aa02      	add	r2, sp, #8
   15d4c:	491d      	ldr	r1, [pc, #116]	; (15dc4 <find_type_cb+0x174>)
   15d4e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   15d52:	2303      	movs	r3, #3
   15d54:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15d58:	481b      	ldr	r0, [pc, #108]	; (15dc8 <find_type_cb+0x178>)
   15d5a:	f842 3f10 	str.w	r3, [r2, #16]!
   15d5e:	f016 fe80 	bl	2ca62 <z_log_msg_static_create.constprop.0>
   15d62:	46ad      	mov	sp, r5
	data->group = NULL;
   15d64:	2300      	movs	r3, #0
   15d66:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   15d68:	e79d      	b.n	15ca6 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   15d6a:	4648      	mov	r0, r9
   15d6c:	f018 f95b 	bl	2e026 <net_buf_simple_tailroom>
   15d70:	e7c1      	b.n	15cf6 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   15d72:	fa5f f288 	uxtb.w	r2, r8
   15d76:	f107 0108 	add.w	r1, r7, #8
   15d7a:	f107 0018 	add.w	r0, r7, #24
   15d7e:	f016 f8c6 	bl	2bf0e <bt_uuid_create>
   15d82:	b930      	cbnz	r0, 15d92 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   15d84:	466d      	mov	r5, sp
   15d86:	b088      	sub	sp, #32
   15d88:	aa02      	add	r2, sp, #8
   15d8a:	4b10      	ldr	r3, [pc, #64]	; (15dcc <find_type_cb+0x17c>)
   15d8c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15d90:	e7df      	b.n	15d52 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   15d92:	f107 0118 	add.w	r1, r7, #24
   15d96:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   15d9a:	f016 f88a 	bl	2beb2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   15d9e:	2800      	cmp	r0, #0
   15da0:	d1e0      	bne.n	15d64 <find_type_cb+0x114>
	data->err = 0x00;
   15da2:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   15da4:	2104      	movs	r1, #4
   15da6:	7463      	strb	r3, [r4, #17]
   15da8:	f105 000c 	add.w	r0, r5, #12
   15dac:	f005 fd1e 	bl	1b7ec <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   15db0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   15db2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   15db4:	68a3      	ldr	r3, [r4, #8]
   15db6:	e775      	b.n	15ca4 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   15db8:	f107 0108 	add.w	r1, r7, #8
   15dbc:	f01a fbd7 	bl	3056e <memcmp>
   15dc0:	e7ed      	b.n	15d9e <find_type_cb+0x14e>
   15dc2:	bf00      	nop
   15dc4:	0003593c 	.word	0x0003593c
   15dc8:	000314d4 	.word	0x000314d4
   15dcc:	0003595b 	.word	0x0003595b

00015dd0 <chan_send>:
{
   15dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15dd4:	4606      	mov	r6, r0
   15dd6:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   15dd8:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   15ddc:	68cb      	ldr	r3, [r1, #12]
{
   15dde:	b089      	sub	sp, #36	; 0x24
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   15de0:	2102      	movs	r1, #2
   15de2:	3098      	adds	r0, #152	; 0x98
   15de4:	f016 fd68 	bl	2c8b8 <atomic_test_bit>
   15de8:	2800      	cmp	r0, #0
   15dea:	d053      	beq.n	15e94 <chan_send+0xc4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   15dec:	781b      	ldrb	r3, [r3, #0]
   15dee:	2bd2      	cmp	r3, #210	; 0xd2
   15df0:	d11a      	bne.n	15e28 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   15df2:	6833      	ldr	r3, [r6, #0]
   15df4:	4621      	mov	r1, r4
   15df6:	6818      	ldr	r0, [r3, #0]
   15df8:	f017 fe0b 	bl	2da12 <bt_smp_sign>
		if (err) {
   15dfc:	4605      	mov	r5, r0
   15dfe:	b198      	cbz	r0, 15e28 <chan_send+0x58>
			LOG_ERR("Error signing data");
   15e00:	4b26      	ldr	r3, [pc, #152]	; (15e9c <chan_send+0xcc>)
   15e02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15e06:	9307      	str	r3, [sp, #28]
   15e08:	2302      	movs	r3, #2
   15e0a:	4825      	ldr	r0, [pc, #148]	; (15ea0 <chan_send+0xd0>)
   15e0c:	aa06      	add	r2, sp, #24
   15e0e:	9306      	str	r3, [sp, #24]
   15e10:	f016 fe27 	bl	2ca62 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   15e14:	69a0      	ldr	r0, [r4, #24]
   15e16:	f7ff fefb 	bl	15c10 <tx_meta_data_free>
			net_buf_unref(buf);
   15e1a:	4620      	mov	r0, r4
   15e1c:	f005 fbc4 	bl	1b5a8 <net_buf_unref>
}
   15e20:	4628      	mov	r0, r5
   15e22:	b009      	add	sp, #36	; 0x24
   15e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   15e28:	f104 000c 	add.w	r0, r4, #12
   15e2c:	f018 f8f7 	bl	2e01e <net_buf_simple_headroom>
	state->len = buf->len;
   15e30:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   15e34:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15e38:	6833      	ldr	r3, [r6, #0]
	state->offset = net_buf_simple_headroom(buf);
   15e3a:	4607      	mov	r7, r0
   15e3c:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   15e3e:	68e3      	ldr	r3, [r4, #12]
   15e40:	7818      	ldrb	r0, [r3, #0]
   15e42:	f7ff fe9f 	bl	15b84 <att_op_get_type>
   15e46:	2805      	cmp	r0, #5
   15e48:	4605      	mov	r5, r0
	switch (op_type) {
   15e4a:	d813      	bhi.n	15e74 <chan_send+0xa4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   15e4c:	4b15      	ldr	r3, [pc, #84]	; (15ea4 <chan_send+0xd4>)
   15e4e:	4622      	mov	r2, r4
   15e50:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   15e54:	2104      	movs	r1, #4
   15e56:	4630      	mov	r0, r6
   15e58:	f8cd 9000 	str.w	r9, [sp]
   15e5c:	f016 fcdc 	bl	2c818 <bt_l2cap_send_cb>
	if (err) {
   15e60:	4605      	mov	r5, r0
   15e62:	2800      	cmp	r0, #0
   15e64:	d0dc      	beq.n	15e20 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   15e66:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15e68:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15e6c:	fa13 f787 	uxtah	r7, r3, r7
   15e70:	60e7      	str	r7, [r4, #12]
}
   15e72:	e7d5      	b.n	15e20 <chan_send+0x50>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   15e74:	f240 2357 	movw	r3, #599	; 0x257
   15e78:	4a0b      	ldr	r2, [pc, #44]	; (15ea8 <chan_send+0xd8>)
   15e7a:	490c      	ldr	r1, [pc, #48]	; (15eac <chan_send+0xdc>)
   15e7c:	480c      	ldr	r0, [pc, #48]	; (15eb0 <chan_send+0xe0>)
   15e7e:	f014 fc2c 	bl	2a6da <assert_print>
   15e82:	4629      	mov	r1, r5
   15e84:	480b      	ldr	r0, [pc, #44]	; (15eb4 <chan_send+0xe4>)
   15e86:	f014 fc28 	bl	2a6da <assert_print>
   15e8a:	f240 2157 	movw	r1, #599	; 0x257
   15e8e:	4806      	ldr	r0, [pc, #24]	; (15ea8 <chan_send+0xd8>)
   15e90:	f014 fc1c 	bl	2a6cc <assert_post_action>
		return -EINVAL;
   15e94:	f06f 0515 	mvn.w	r5, #21
   15e98:	e7c2      	b.n	15e20 <chan_send+0x50>
   15e9a:	bf00      	nop
   15e9c:	0003597a 	.word	0x0003597a
   15ea0:	000314d4 	.word	0x000314d4
   15ea4:	00031fe0 	.word	0x00031fe0
   15ea8:	0003590d 	.word	0x0003590d
   15eac:	00037b56 	.word	0x00037b56
   15eb0:	00032679 	.word	0x00032679
   15eb4:	0003598d 	.word	0x0003598d

00015eb8 <bt_att_chan_req_send>:
{
   15eb8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   15eba:	b958      	cbnz	r0, 15ed4 <bt_att_chan_req_send+0x1c>
   15ebc:	4919      	ldr	r1, [pc, #100]	; (15f24 <bt_att_chan_req_send+0x6c>)
   15ebe:	f44f 7346 	mov.w	r3, #792	; 0x318
   15ec2:	4a19      	ldr	r2, [pc, #100]	; (15f28 <bt_att_chan_req_send+0x70>)
   15ec4:	4819      	ldr	r0, [pc, #100]	; (15f2c <bt_att_chan_req_send+0x74>)
   15ec6:	f014 fc08 	bl	2a6da <assert_print>
   15eca:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   15ece:	4816      	ldr	r0, [pc, #88]	; (15f28 <bt_att_chan_req_send+0x70>)
   15ed0:	f014 fbfc 	bl	2a6cc <assert_post_action>
   15ed4:	b949      	cbnz	r1, 15eea <bt_att_chan_req_send+0x32>
   15ed6:	4916      	ldr	r1, [pc, #88]	; (15f30 <bt_att_chan_req_send+0x78>)
   15ed8:	f240 3319 	movw	r3, #793	; 0x319
   15edc:	4a12      	ldr	r2, [pc, #72]	; (15f28 <bt_att_chan_req_send+0x70>)
   15ede:	4813      	ldr	r0, [pc, #76]	; (15f2c <bt_att_chan_req_send+0x74>)
   15ee0:	f014 fbfb 	bl	2a6da <assert_print>
   15ee4:	f240 3119 	movw	r1, #793	; 0x319
   15ee8:	e7f1      	b.n	15ece <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   15eea:	684a      	ldr	r2, [r1, #4]
   15eec:	b94a      	cbnz	r2, 15f02 <bt_att_chan_req_send+0x4a>
   15eee:	4911      	ldr	r1, [pc, #68]	; (15f34 <bt_att_chan_req_send+0x7c>)
   15ef0:	f240 331a 	movw	r3, #794	; 0x31a
   15ef4:	4a0c      	ldr	r2, [pc, #48]	; (15f28 <bt_att_chan_req_send+0x70>)
   15ef6:	480d      	ldr	r0, [pc, #52]	; (15f2c <bt_att_chan_req_send+0x74>)
   15ef8:	f014 fbef 	bl	2a6da <assert_print>
   15efc:	f240 311a 	movw	r1, #794	; 0x31a
   15f00:	e7e5      	b.n	15ece <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   15f02:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15f06:	b14b      	cbz	r3, 15f1c <bt_att_chan_req_send+0x64>
   15f08:	490b      	ldr	r1, [pc, #44]	; (15f38 <bt_att_chan_req_send+0x80>)
   15f0a:	f240 331b 	movw	r3, #795	; 0x31b
   15f0e:	4a06      	ldr	r2, [pc, #24]	; (15f28 <bt_att_chan_req_send+0x70>)
   15f10:	4806      	ldr	r0, [pc, #24]	; (15f2c <bt_att_chan_req_send+0x74>)
   15f12:	f014 fbe2 	bl	2a6da <assert_print>
   15f16:	f240 311b 	movw	r1, #795	; 0x31b
   15f1a:	e7d8      	b.n	15ece <bt_att_chan_req_send+0x16>
}
   15f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   15f20:	f016 bda2 	b.w	2ca68 <chan_req_send>
   15f24:	000359a6 	.word	0x000359a6
   15f28:	0003590d 	.word	0x0003590d
   15f2c:	00032679 	.word	0x00032679
   15f30:	000359bc 	.word	0x000359bc
   15f34:	000359ab 	.word	0x000359ab
   15f38:	000359b5 	.word	0x000359b5

00015f3c <att_get>:
{
   15f3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   15f3e:	7b43      	ldrb	r3, [r0, #13]
   15f40:	2b07      	cmp	r3, #7
   15f42:	d00d      	beq.n	15f60 <att_get+0x24>
		LOG_WRN("Not connected");
   15f44:	4b18      	ldr	r3, [pc, #96]	; (15fa8 <att_get+0x6c>)
   15f46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15f4a:	9305      	str	r3, [sp, #20]
   15f4c:	2302      	movs	r3, #2
   15f4e:	aa04      	add	r2, sp, #16
   15f50:	9304      	str	r3, [sp, #16]
		LOG_ERR("Unable to find ATT channel");
   15f52:	4816      	ldr	r0, [pc, #88]	; (15fac <att_get+0x70>)
   15f54:	f016 fd85 	bl	2ca62 <z_log_msg_static_create.constprop.0>
		return NULL;
   15f58:	2000      	movs	r0, #0
}
   15f5a:	b007      	add	sp, #28
   15f5c:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   15f60:	2104      	movs	r1, #4
   15f62:	f016 fc7b 	bl	2c85c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   15f66:	4603      	mov	r3, r0
   15f68:	b938      	cbnz	r0, 15f7a <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   15f6a:	4b11      	ldr	r3, [pc, #68]	; (15fb0 <att_get+0x74>)
   15f6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15f70:	9305      	str	r3, [sp, #20]
   15f72:	2302      	movs	r3, #2
   15f74:	aa04      	add	r2, sp, #16
   15f76:	9304      	str	r3, [sp, #16]
   15f78:	e7eb      	b.n	15f52 <att_get+0x16>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   15f7a:	2102      	movs	r1, #2
   15f7c:	3094      	adds	r0, #148	; 0x94
   15f7e:	f016 fc9b 	bl	2c8b8 <atomic_test_bit>
   15f82:	b970      	cbnz	r0, 15fa2 <att_get+0x66>
   15f84:	490b      	ldr	r1, [pc, #44]	; (15fb4 <att_get+0x78>)
   15f86:	f640 332a 	movw	r3, #2858	; 0xb2a
   15f8a:	4a0b      	ldr	r2, [pc, #44]	; (15fb8 <att_get+0x7c>)
   15f8c:	480b      	ldr	r0, [pc, #44]	; (15fbc <att_get+0x80>)
   15f8e:	f014 fba4 	bl	2a6da <assert_print>
   15f92:	480b      	ldr	r0, [pc, #44]	; (15fc0 <att_get+0x84>)
   15f94:	f014 fba1 	bl	2a6da <assert_print>
   15f98:	f640 312a 	movw	r1, #2858	; 0xb2a
   15f9c:	4806      	ldr	r0, [pc, #24]	; (15fb8 <att_get+0x7c>)
   15f9e:	f014 fb95 	bl	2a6cc <assert_post_action>
	return att_chan->att;
   15fa2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   15fa6:	e7d8      	b.n	15f5a <att_get+0x1e>
   15fa8:	000359c0 	.word	0x000359c0
   15fac:	000314d4 	.word	0x000314d4
   15fb0:	000359ce 	.word	0x000359ce
   15fb4:	000359e9 	.word	0x000359e9
   15fb8:	0003590d 	.word	0x0003590d
   15fbc:	00032679 	.word	0x00032679
   15fc0:	00035a19 	.word	0x00035a19

00015fc4 <bt_att_connected>:
{
   15fc4:	b510      	push	{r4, lr}
   15fc6:	4604      	mov	r4, r0
   15fc8:	f100 0394 	add.w	r3, r0, #148	; 0x94
   15fcc:	e8d3 1fef 	ldaex	r1, [r3]
   15fd0:	f041 0104 	orr.w	r1, r1, #4
   15fd4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   15fd8:	2a00      	cmp	r2, #0
   15fda:	d1f7      	bne.n	15fcc <bt_att_connected+0x8>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fdc:	2317      	movs	r3, #23
	att_chan_mtu_updated(att_chan);
   15fde:	1f20      	subs	r0, r4, #4
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fe0:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   15fe2:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   15fe4:	f016 fcaa 	bl	2c93c <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   15fe8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   15fec:	4903      	ldr	r1, [pc, #12]	; (15ffc <bt_att_connected+0x38>)
   15fee:	f00f ff7f 	bl	25ef0 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   15ff2:	6820      	ldr	r0, [r4, #0]
}
   15ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   15ff8:	f002 bb54 	b.w	186a4 <bt_gatt_connected>
   15ffc:	00016ccd 	.word	0x00016ccd

00016000 <read_group_cb>:
{
   16000:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16004:	f04f 0800 	mov.w	r8, #0
   16008:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   1600c:	4605      	mov	r5, r0
   1600e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16010:	6800      	ldr	r0, [r0, #0]
   16012:	a902      	add	r1, sp, #8
{
   16014:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16016:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16018:	f88d 8008 	strb.w	r8, [sp, #8]
   1601c:	f8ad 300a 	strh.w	r3, [sp, #10]
   16020:	f015 ff47 	bl	2beb2 <bt_uuid_cmp>
   16024:	b1a0      	cbz	r0, 16050 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16026:	f642 0301 	movw	r3, #10241	; 0x2801
   1602a:	6828      	ldr	r0, [r5, #0]
   1602c:	a903      	add	r1, sp, #12
   1602e:	f88d 800c 	strb.w	r8, [sp, #12]
   16032:	f8ad 300e 	strh.w	r3, [sp, #14]
   16036:	f015 ff3c 	bl	2beb2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1603a:	b148      	cbz	r0, 16050 <read_group_cb+0x50>
		if (data->group &&
   1603c:	6923      	ldr	r3, [r4, #16]
   1603e:	b11b      	cbz	r3, 16048 <read_group_cb+0x48>
   16040:	885a      	ldrh	r2, [r3, #2]
   16042:	42b2      	cmp	r2, r6
   16044:	d200      	bcs.n	16048 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16046:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16048:	2001      	movs	r0, #1
}
   1604a:	b004      	add	sp, #16
   1604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16050:	6861      	ldr	r1, [r4, #4]
   16052:	6828      	ldr	r0, [r5, #0]
   16054:	f015 ff2d 	bl	2beb2 <bt_uuid_cmp>
   16058:	b110      	cbz	r0, 16060 <read_group_cb+0x60>
		data->group = NULL;
   1605a:	2300      	movs	r3, #0
   1605c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1605e:	e7f3      	b.n	16048 <read_group_cb+0x48>
	if (data->rsp->len &&
   16060:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16062:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16064:	781a      	ldrb	r2, [r3, #0]
   16066:	b132      	cbz	r2, 16076 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16068:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1606a:	8a01      	ldrh	r1, [r0, #16]
   1606c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1606e:	4293      	cmp	r3, r2
   16070:	da01      	bge.n	16076 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   16072:	2000      	movs	r0, #0
   16074:	e7e9      	b.n	1604a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16076:	2104      	movs	r1, #4
   16078:	300c      	adds	r0, #12
   1607a:	f005 fbb7 	bl	1b7ec <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1607e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16080:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16082:	6923      	ldr	r3, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16084:	4629      	mov	r1, r5
	data->group->end_handle = sys_cpu_to_le16(handle);
   16086:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16088:	4b07      	ldr	r3, [pc, #28]	; (160a8 <read_group_cb+0xa8>)
   1608a:	9401      	str	r4, [sp, #4]
   1608c:	9300      	str	r3, [sp, #0]
   1608e:	4638      	mov	r0, r7
   16090:	2300      	movs	r3, #0
   16092:	68a2      	ldr	r2, [r4, #8]
   16094:	f016 fd29 	bl	2caea <att_chan_read>
	if (read < 0) {
   16098:	2800      	cmp	r0, #0
   1609a:	dbea      	blt.n	16072 <read_group_cb+0x72>
	if (!data->group) {
   1609c:	6920      	ldr	r0, [r4, #16]
   1609e:	3800      	subs	r0, #0
   160a0:	bf18      	it	ne
   160a2:	2001      	movne	r0, #1
   160a4:	e7d1      	b.n	1604a <read_group_cb+0x4a>
   160a6:	bf00      	nop
   160a8:	0002c9a3 	.word	0x0002c9a3

000160ac <read_type_cb>:
{
   160ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   160b0:	6817      	ldr	r7, [r2, #0]
{
   160b2:	4605      	mov	r5, r0
   160b4:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   160b6:	6800      	ldr	r0, [r0, #0]
   160b8:	6851      	ldr	r1, [r2, #4]
{
   160ba:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   160bc:	687e      	ldr	r6, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   160be:	f015 fef8 	bl	2beb2 <bt_uuid_cmp>
   160c2:	4681      	mov	r9, r0
   160c4:	2800      	cmp	r0, #0
   160c6:	d13c      	bne.n	16142 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   160c8:	4630      	mov	r0, r6
   160ca:	2295      	movs	r2, #149	; 0x95
   160cc:	4629      	mov	r1, r5
   160ce:	f017 f9d0 	bl	2d472 <bt_gatt_check_perm>
   160d2:	4606      	mov	r6, r0
   160d4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   160d6:	b140      	cbz	r0, 160ea <read_type_cb+0x3e>
		if (data->rsp->len) {
   160d8:	68e3      	ldr	r3, [r4, #12]
   160da:	781b      	ldrb	r3, [r3, #0]
   160dc:	b10b      	cbz	r3, 160e2 <read_type_cb+0x36>
			data->err = 0x00;
   160de:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   160e2:	2000      	movs	r0, #0
}
   160e4:	b003      	add	sp, #12
   160e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160ea:	68a0      	ldr	r0, [r4, #8]
   160ec:	f005 fab8 	bl	1b660 <net_buf_frag_last>
   160f0:	2102      	movs	r1, #2
   160f2:	300c      	adds	r0, #12
   160f4:	f005 fb7a 	bl	1b7ec <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   160f8:	4b13      	ldr	r3, [pc, #76]	; (16148 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   160fa:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   160fc:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16100:	9300      	str	r3, [sp, #0]
   16102:	9401      	str	r4, [sp, #4]
   16104:	4633      	mov	r3, r6
   16106:	4629      	mov	r1, r5
   16108:	4638      	mov	r0, r7
   1610a:	68a2      	ldr	r2, [r4, #8]
   1610c:	f016 fced 	bl	2caea <att_chan_read>
	if (read < 0) {
   16110:	2800      	cmp	r0, #0
   16112:	da07      	bge.n	16124 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   16114:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   16118:	bf32      	itee	cc
   1611a:	200e      	movcc	r0, #14
		return -err;
   1611c:	4240      	negcs	r0, r0
   1611e:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   16120:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16122:	e7de      	b.n	160e2 <read_type_cb+0x36>
	if (!data->item) {
   16124:	6923      	ldr	r3, [r4, #16]
   16126:	2b00      	cmp	r3, #0
   16128:	d0db      	beq.n	160e2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1612a:	68a0      	ldr	r0, [r4, #8]
   1612c:	f016 fbaa 	bl	2c884 <net_buf_frags_len>
   16130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16132:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16134:	68e3      	ldr	r3, [r4, #12]
   16136:	781b      	ldrb	r3, [r3, #0]
   16138:	4298      	cmp	r0, r3
   1613a:	bf94      	ite	ls
   1613c:	2000      	movls	r0, #0
   1613e:	2001      	movhi	r0, #1
   16140:	e7d0      	b.n	160e4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16142:	2001      	movs	r0, #1
   16144:	e7ce      	b.n	160e4 <read_type_cb+0x38>
   16146:	bf00      	nop
   16148:	0002c895 	.word	0x0002c895

0001614c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16150:	b082      	sub	sp, #8
   16152:	af00      	add	r7, sp, #0
   16154:	4604      	mov	r4, r0
   16156:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16158:	2200      	movs	r2, #0
   1615a:	2300      	movs	r3, #0
   1615c:	4639      	mov	r1, r7
   1615e:	483a      	ldr	r0, [pc, #232]	; (16248 <bt_att_accept+0xfc>)
   16160:	f00e fda0 	bl	24ca4 <k_mem_slab_alloc>
   16164:	4605      	mov	r5, r0
   16166:	b1a8      	cbz	r0, 16194 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   16168:	466d      	mov	r5, sp
   1616a:	b088      	sub	sp, #32
   1616c:	466a      	mov	r2, sp
   1616e:	4b37      	ldr	r3, [pc, #220]	; (1624c <bt_att_accept+0x100>)
   16170:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16174:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16178:	2303      	movs	r3, #3
   1617a:	4835      	ldr	r0, [pc, #212]	; (16250 <bt_att_accept+0x104>)
   1617c:	f842 3f10 	str.w	r3, [r2, #16]!
   16180:	f016 fc6f 	bl	2ca62 <z_log_msg_static_create.constprop.0>
   16184:	46ad      	mov	sp, r5
		return -ENOMEM;
   16186:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1618a:	4628      	mov	r0, r5
   1618c:	3708      	adds	r7, #8
   1618e:	46bd      	mov	sp, r7
   16190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   16194:	f011 f950 	bl	27438 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   16198:	4b2e      	ldr	r3, [pc, #184]	; (16254 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1619a:	f8d7 8000 	ldr.w	r8, [r7]
   1619e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   161a0:	6018      	str	r0, [r3, #0]
   161a2:	222c      	movs	r2, #44	; 0x2c
   161a4:	f108 0004 	add.w	r0, r8, #4
   161a8:	f01a fa2b 	bl	30602 <memset>
	att->conn = conn;
   161ac:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   161b0:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   161b2:	2200      	movs	r2, #0
	list->tail = NULL;
   161b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
   161b8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   161bc:	2300      	movs	r3, #0
   161be:	4826      	ldr	r0, [pc, #152]	; (16258 <bt_att_accept+0x10c>)
   161c0:	1d39      	adds	r1, r7, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   161c2:	607d      	str	r5, [r7, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   161c4:	f00e fd6e 	bl	24ca4 <k_mem_slab_alloc>
   161c8:	4605      	mov	r5, r0
   161ca:	b180      	cbz	r0, 161ee <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   161cc:	6823      	ldr	r3, [r4, #0]
   161ce:	466c      	mov	r4, sp
   161d0:	b088      	sub	sp, #32
   161d2:	466a      	mov	r2, sp
   161d4:	4921      	ldr	r1, [pc, #132]	; (1625c <bt_att_accept+0x110>)
   161d6:	481e      	ldr	r0, [pc, #120]	; (16250 <bt_att_accept+0x104>)
   161d8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   161dc:	2303      	movs	r3, #3
   161de:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   161e2:	f842 3f10 	str.w	r3, [r2, #16]!
   161e6:	f016 fc3c 	bl	2ca62 <z_log_msg_static_create.constprop.0>
   161ea:	46a5      	mov	sp, r4
	if (!chan) {
   161ec:	e7cb      	b.n	16186 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   161ee:	687b      	ldr	r3, [r7, #4]
   161f0:	4601      	mov	r1, r0
   161f2:	22f8      	movs	r2, #248	; 0xf8
   161f4:	4618      	mov	r0, r3
   161f6:	f01a fa04 	bl	30602 <memset>
	chan->chan.chan.ops = &ops;
   161fa:	4a19      	ldr	r2, [pc, #100]	; (16260 <bt_att_accept+0x114>)
   161fc:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   161fe:	30a0      	adds	r0, #160	; 0xa0
   16200:	f019 ffe1 	bl	301c6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16204:	687b      	ldr	r3, [r7, #4]
   16206:	3398      	adds	r3, #152	; 0x98
   16208:	e8d3 2fef 	ldaex	r2, [r3]
   1620c:	e8c3 5fe1 	stlex	r1, r5, [r3]
   16210:	2900      	cmp	r1, #0
   16212:	d1f9      	bne.n	16208 <bt_att_accept+0xbc>
	chan->att = att;
   16214:	687b      	ldr	r3, [r7, #4]
   16216:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   16218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   1621a:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1621e:	b91b      	cbnz	r3, 16228 <bt_att_accept+0xdc>
   16220:	f104 000c 	add.w	r0, r4, #12
   16224:	f019 ffcf 	bl	301c6 <z_impl_k_queue_init>
	return list->head;
   16228:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1622a:	f108 03f0 	add.w	r3, r8, #240	; 0xf0
	parent->next = child;
   1622e:	f8c8 20f0 	str.w	r2, [r8, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   16232:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	list->head = node;
   16234:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   16236:	b902      	cbnz	r2, 1623a <bt_att_accept+0xee>
	list->tail = node;
   16238:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1623a:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1623c:	2b00      	cmp	r3, #0
   1623e:	d0a2      	beq.n	16186 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   16240:	3304      	adds	r3, #4
   16242:	6033      	str	r3, [r6, #0]
	return 0;
   16244:	e7a1      	b.n	1618a <bt_att_accept+0x3e>
   16246:	bf00      	nop
   16248:	20008a5c 	.word	0x20008a5c
   1624c:	00035a35 	.word	0x00035a35
   16250:	000314d4 	.word	0x000314d4
   16254:	200216c0 	.word	0x200216c0
   16258:	20008a7c 	.word	0x20008a7c
   1625c:	00035a5a 	.word	0x00035a5a
   16260:	200084e4 	.word	0x200084e4

00016264 <bt_att_chan_create_pdu>:
{
   16264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   16268:	b086      	sub	sp, #24
   1626a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1626c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1626e:	1c53      	adds	r3, r2, #1
   16270:	428b      	cmp	r3, r1
{
   16272:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16274:	d915      	bls.n	162a2 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   16276:	466c      	mov	r4, sp
   16278:	b088      	sub	sp, #32
   1627a:	466a      	mov	r2, sp
   1627c:	4829      	ldr	r0, [pc, #164]	; (16324 <bt_att_chan_create_pdu+0xc0>)
   1627e:	61d3      	str	r3, [r2, #28]
   16280:	2304      	movs	r3, #4
   16282:	e9c2 0105 	strd	r0, r1, [r2, #20]
   16286:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1628a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1628e:	4826      	ldr	r0, [pc, #152]	; (16328 <bt_att_chan_create_pdu+0xc4>)
   16290:	f016 fbe7 	bl	2ca62 <z_log_msg_static_create.constprop.0>
   16294:	46a5      	mov	sp, r4
		return NULL;
   16296:	2400      	movs	r4, #0
}
   16298:	4620      	mov	r0, r4
   1629a:	3718      	adds	r7, #24
   1629c:	46bd      	mov	sp, r7
   1629e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   162a2:	4628      	mov	r0, r5
   162a4:	f7ff fc6e 	bl	15b84 <att_op_get_type>
   162a8:	2802      	cmp	r0, #2
   162aa:	d019      	beq.n	162e0 <bt_att_chan_create_pdu+0x7c>
   162ac:	2804      	cmp	r0, #4
   162ae:	d017      	beq.n	162e0 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   162b0:	f04f 38ff 	mov.w	r8, #4294967295
   162b4:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   162b8:	2100      	movs	r1, #0
   162ba:	4642      	mov	r2, r8
   162bc:	464b      	mov	r3, r9
   162be:	4608      	mov	r0, r1
   162c0:	f016 faa7 	bl	2c812 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   162c4:	4604      	mov	r4, r0
   162c6:	b980      	cbnz	r0, 162ea <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   162c8:	466c      	mov	r4, sp
   162ca:	b088      	sub	sp, #32
   162cc:	466a      	mov	r2, sp
   162ce:	4b17      	ldr	r3, [pc, #92]	; (1632c <bt_att_chan_create_pdu+0xc8>)
   162d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162d4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   162d8:	2303      	movs	r3, #3
   162da:	f842 3f10 	str.w	r3, [r2, #16]!
   162de:	e7d6      	b.n	1628e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   162e0:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   162e4:	f04f 0900 	mov.w	r9, #0
   162e8:	e7e6      	b.n	162b8 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   162ea:	4811      	ldr	r0, [pc, #68]	; (16330 <bt_att_chan_create_pdu+0xcc>)
   162ec:	4642      	mov	r2, r8
   162ee:	464b      	mov	r3, r9
   162f0:	f00f f910 	bl	25514 <z_impl_k_queue_get>
	if (!data) {
   162f4:	b970      	cbnz	r0, 16314 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   162f6:	4b0f      	ldr	r3, [pc, #60]	; (16334 <bt_att_chan_create_pdu+0xd0>)
   162f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   162fc:	617b      	str	r3, [r7, #20]
   162fe:	2302      	movs	r3, #2
   16300:	4809      	ldr	r0, [pc, #36]	; (16328 <bt_att_chan_create_pdu+0xc4>)
   16302:	613b      	str	r3, [r7, #16]
   16304:	f107 0210 	add.w	r2, r7, #16
   16308:	f016 fbab 	bl	2ca62 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1630c:	4620      	mov	r0, r4
   1630e:	f005 f94b 	bl	1b5a8 <net_buf_unref>
		return NULL;
   16312:	e7c0      	b.n	16296 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   16314:	61a0      	str	r0, [r4, #24]
   16316:	2101      	movs	r1, #1
   16318:	f104 000c 	add.w	r0, r4, #12
   1631c:	f005 fa66 	bl	1b7ec <net_buf_simple_add>
	hdr->code = op;
   16320:	7005      	strb	r5, [r0, #0]
	return buf;
   16322:	e7b9      	b.n	16298 <bt_att_chan_create_pdu+0x34>
   16324:	00035a7f 	.word	0x00035a7f
   16328:	000314d4 	.word	0x000314d4
   1632c:	00035770 	.word	0x00035770
   16330:	20008c9c 	.word	0x20008c9c
   16334:	00035aa4 	.word	0x00035aa4

00016338 <bt_att_recv>:
{
   16338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1633c:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1633e:	8a0b      	ldrh	r3, [r1, #16]
{
   16340:	4682      	mov	sl, r0
   16342:	460c      	mov	r4, r1
   16344:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   16346:	b97b      	cbnz	r3, 16368 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   16348:	4b4c      	ldr	r3, [pc, #304]	; (1647c <bt_att_recv+0x144>)
   1634a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1634e:	617b      	str	r3, [r7, #20]
   16350:	2302      	movs	r3, #2
   16352:	f107 0210 	add.w	r2, r7, #16
   16356:	613b      	str	r3, [r7, #16]
			LOG_WRN("Ignoring unexpected request");
   16358:	4849      	ldr	r0, [pc, #292]	; (16480 <bt_att_recv+0x148>)
   1635a:	f016 fb82 	bl	2ca62 <z_log_msg_static_create.constprop.0>
}
   1635e:	2000      	movs	r0, #0
   16360:	371c      	adds	r7, #28
   16362:	46bd      	mov	sp, r7
   16364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16368:	2101      	movs	r1, #1
   1636a:	f104 000c 	add.w	r0, r4, #12
   1636e:	f005 fa1f 	bl	1b7b0 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16372:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   16376:	4605      	mov	r5, r0
   16378:	2b00      	cmp	r3, #0
   1637a:	d0f0      	beq.n	1635e <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1637c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1637e:	7801      	ldrb	r1, [r0, #0]
   16380:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16484 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16384:	f1aa 0604 	sub.w	r6, sl, #4
		if (hdr->code == handlers[i].op) {
   16388:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1638c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   16390:	4288      	cmp	r0, r1
   16392:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   16396:	d114      	bne.n	163c2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   16398:	f892 9002 	ldrb.w	r9, [r2, #2]
   1639c:	f1b9 0f01 	cmp.w	r9, #1
   163a0:	d131      	bne.n	16406 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   163a2:	2100      	movs	r1, #0
   163a4:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   163a8:	f016 fc45 	bl	2cc36 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   163ac:	2800      	cmp	r0, #0
   163ae:	d035      	beq.n	1641c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   163b0:	4b35      	ldr	r3, [pc, #212]	; (16488 <bt_att_recv+0x150>)
   163b2:	617b      	str	r3, [r7, #20]
   163b4:	2302      	movs	r3, #2
   163b6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   163ba:	613b      	str	r3, [r7, #16]
   163bc:	f107 0210 	add.w	r2, r7, #16
   163c0:	e7ca      	b.n	16358 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   163c2:	3301      	adds	r3, #1
   163c4:	2b0e      	cmp	r3, #14
   163c6:	d1df      	bne.n	16388 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   163c8:	466c      	mov	r4, sp
   163ca:	b088      	sub	sp, #32
   163cc:	466a      	mov	r2, sp
   163ce:	4b2f      	ldr	r3, [pc, #188]	; (1648c <bt_att_recv+0x154>)
   163d0:	482b      	ldr	r0, [pc, #172]	; (16480 <bt_att_recv+0x148>)
   163d2:	e9c2 3105 	strd	r3, r1, [r2, #20]
   163d6:	2303      	movs	r3, #3
   163d8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   163dc:	f842 3f10 	str.w	r3, [r2, #16]!
   163e0:	f016 fb3f 	bl	2ca62 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   163e4:	7829      	ldrb	r1, [r5, #0]
   163e6:	46a5      	mov	sp, r4
   163e8:	4608      	mov	r0, r1
   163ea:	f7ff fbcb 	bl	15b84 <att_op_get_type>
   163ee:	2800      	cmp	r0, #0
   163f0:	d0b5      	beq.n	1635e <bt_att_recv+0x26>
   163f2:	2805      	cmp	r0, #5
   163f4:	d0b3      	beq.n	1635e <bt_att_recv+0x26>
	if (!req) {
   163f6:	2900      	cmp	r1, #0
   163f8:	d0b1      	beq.n	1635e <bt_att_recv+0x26>
   163fa:	2306      	movs	r3, #6
   163fc:	2200      	movs	r2, #0
   163fe:	4630      	mov	r0, r6
   16400:	f016 fd7d 	bl	2cefe <send_err_rsp.part.0>
   16404:	e7ab      	b.n	1635e <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   16406:	f1b9 0f05 	cmp.w	r9, #5
   1640a:	d107      	bne.n	1641c <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1640c:	2101      	movs	r1, #1
   1640e:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   16412:	f016 fc10 	bl	2cc36 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   16416:	b108      	cbz	r0, 1641c <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   16418:	4b1d      	ldr	r3, [pc, #116]	; (16490 <bt_att_recv+0x158>)
   1641a:	e7ca      	b.n	163b2 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1641c:	44d8      	add	r8, fp
   1641e:	8a23      	ldrh	r3, [r4, #16]
   16420:	f898 2001 	ldrb.w	r2, [r8, #1]
   16424:	429a      	cmp	r2, r3
   16426:	d916      	bls.n	16456 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16428:	46e9      	mov	r9, sp
   1642a:	b088      	sub	sp, #32
   1642c:	466a      	mov	r2, sp
   1642e:	7829      	ldrb	r1, [r5, #0]
   16430:	2404      	movs	r4, #4
   16432:	4818      	ldr	r0, [pc, #96]	; (16494 <bt_att_recv+0x15c>)
   16434:	61d1      	str	r1, [r2, #28]
   16436:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1643a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1643e:	4810      	ldr	r0, [pc, #64]	; (16480 <bt_att_recv+0x148>)
   16440:	f842 4f10 	str.w	r4, [r2, #16]!
   16444:	f016 fb0d 	bl	2ca62 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16448:	f898 3002 	ldrb.w	r3, [r8, #2]
   1644c:	46cd      	mov	sp, r9
   1644e:	2b01      	cmp	r3, #1
   16450:	d185      	bne.n	1635e <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   16452:	4623      	mov	r3, r4
   16454:	e00c      	b.n	16470 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   16456:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1645a:	4621      	mov	r1, r4
   1645c:	4630      	mov	r0, r6
   1645e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16460:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   16464:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16466:	f47f af7a 	bne.w	1635e <bt_att_recv+0x26>
   1646a:	2800      	cmp	r0, #0
   1646c:	f43f af77 	beq.w	1635e <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16470:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   16472:	2900      	cmp	r1, #0
   16474:	f43f af73 	beq.w	1635e <bt_att_recv+0x26>
   16478:	e7c0      	b.n	163fc <bt_att_recv+0xc4>
   1647a:	bf00      	nop
   1647c:	00035ac3 	.word	0x00035ac3
   16480:	000314d4 	.word	0x000314d4
   16484:	00031ff8 	.word	0x00031ff8
   16488:	00035af8 	.word	0x00035af8
   1648c:	00035ade 	.word	0x00035ade
   16490:	00035b14 	.word	0x00035b14
   16494:	00035b33 	.word	0x00035b33

00016498 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1649a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1649c:	6803      	ldr	r3, [r0, #0]
   1649e:	460d      	mov	r5, r1
   164a0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   164a2:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   164a4:	bf18      	it	ne
   164a6:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   164a8:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   164aa:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   164ac:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   164ae:	f017 f814 	bl	2d4da <bt_gatt_change_aware>
   164b2:	b948      	cbnz	r0, 164c8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   164b4:	2105      	movs	r1, #5
   164b6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   164ba:	f016 fbbc 	bl	2cc36 <atomic_test_and_set_bit>
   164be:	2800      	cmp	r0, #0
   164c0:	d048      	beq.n	16554 <att_write_rsp.constprop.0+0xbc>
			return 0;
   164c2:	2000      	movs	r0, #0
}
   164c4:	b007      	add	sp, #28
   164c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   164c8:	2e00      	cmp	r6, #0
   164ca:	d045      	beq.n	16558 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   164cc:	2218      	movs	r2, #24
   164ce:	2100      	movs	r1, #0
   164d0:	4668      	mov	r0, sp
   164d2:	f01a f896 	bl	30602 <memset>
	if (rsp) {
   164d6:	bb67      	cbnz	r7, 16532 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   164d8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164da:	4631      	mov	r1, r6
	data.conn = chan->att->conn;
   164dc:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164de:	4630      	mov	r0, r6
	data.conn = chan->att->conn;
   164e0:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   164e2:	2300      	movs	r3, #0
   164e4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   164e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   164ea:	4a1c      	ldr	r2, [pc, #112]	; (1655c <att_write_rsp.constprop.0+0xc4>)
	data.value = value;
   164ec:	9303      	str	r3, [sp, #12]
	data.len = len;
   164ee:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	data.req = req;
   164f2:	f88d 5008 	strb.w	r5, [sp, #8]
	data.len = len;
   164f6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   164fa:	2301      	movs	r3, #1
   164fc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16500:	466b      	mov	r3, sp
   16502:	f016 fa10 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   16506:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1650a:	b1e3      	cbz	r3, 16546 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1650c:	2f00      	cmp	r7, #0
   1650e:	d0d8      	beq.n	164c2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16510:	9b01      	ldr	r3, [sp, #4]
   16512:	6998      	ldr	r0, [r3, #24]
   16514:	f7ff fb7c 	bl	15c10 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16518:	9801      	ldr	r0, [sp, #4]
   1651a:	f005 f845 	bl	1b5a8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1651e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   16522:	2d00      	cmp	r5, #0
   16524:	d0cd      	beq.n	164c2 <att_write_rsp.constprop.0+0x2a>
   16526:	4632      	mov	r2, r6
   16528:	4629      	mov	r1, r5
   1652a:	4620      	mov	r0, r4
   1652c:	f016 fce7 	bl	2cefe <send_err_rsp.part.0>
   16530:	e7c7      	b.n	164c2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16532:	2200      	movs	r2, #0
   16534:	4639      	mov	r1, r7
   16536:	4620      	mov	r0, r4
   16538:	f7ff fe94 	bl	16264 <bt_att_chan_create_pdu>
   1653c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1653e:	2800      	cmp	r0, #0
   16540:	d1ca      	bne.n	164d8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16542:	200e      	movs	r0, #14
   16544:	e7be      	b.n	164c4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16546:	9901      	ldr	r1, [sp, #4]
   16548:	2900      	cmp	r1, #0
   1654a:	d0ba      	beq.n	164c2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1654c:	4620      	mov	r0, r4
   1654e:	f016 fabe 	bl	2cace <bt_att_chan_send_rsp>
   16552:	e7b6      	b.n	164c2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16554:	2012      	movs	r0, #18
   16556:	e7b5      	b.n	164c4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16558:	2001      	movs	r0, #1
   1655a:	e7b3      	b.n	164c4 <att_write_rsp.constprop.0+0x2c>
   1655c:	0002c8c5 	.word	0x0002c8c5

00016560 <bt_att_create_pdu>:
{
   16560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16562:	af00      	add	r7, sp, #0
   16564:	460e      	mov	r6, r1
   16566:	4615      	mov	r5, r2
	att = att_get(conn);
   16568:	f7ff fce8 	bl	15f3c <att_get>
	if (!att) {
   1656c:	b1e0      	cbz	r0, 165a8 <bt_att_create_pdu+0x48>
	return list->head;
   1656e:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16570:	4618      	mov	r0, r3
   16572:	b11b      	cbz	r3, 1657c <bt_att_create_pdu+0x1c>
	return node->next;
   16574:	f850 39f0 	ldr.w	r3, [r0], #-240
   16578:	b103      	cbz	r3, 1657c <bt_att_create_pdu+0x1c>
   1657a:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1657c:	1c6c      	adds	r4, r5, #1
   1657e:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16580:	b118      	cbz	r0, 1658a <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16582:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16584:	42a1      	cmp	r1, r4
   16586:	d219      	bcs.n	165bc <bt_att_create_pdu+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16588:	b983      	cbnz	r3, 165ac <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1658a:	466d      	mov	r5, sp
   1658c:	b088      	sub	sp, #32
   1658e:	466a      	mov	r2, sp
   16590:	4b0e      	ldr	r3, [pc, #56]	; (165cc <bt_att_create_pdu+0x6c>)
   16592:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16596:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1659a:	2303      	movs	r3, #3
   1659c:	480c      	ldr	r0, [pc, #48]	; (165d0 <bt_att_create_pdu+0x70>)
   1659e:	f842 3f10 	str.w	r3, [r2, #16]!
   165a2:	f016 fa5e 	bl	2ca62 <z_log_msg_static_create.constprop.0>
   165a6:	46ad      	mov	sp, r5
		return NULL;
   165a8:	2000      	movs	r0, #0
   165aa:	e00b      	b.n	165c4 <bt_att_create_pdu+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   165ac:	4618      	mov	r0, r3
   165ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   165b2:	b14b      	cbz	r3, 165c8 <bt_att_create_pdu+0x68>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   165b4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   165b6:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   165b8:	428a      	cmp	r2, r1
   165ba:	d8f7      	bhi.n	165ac <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   165bc:	462a      	mov	r2, r5
   165be:	4631      	mov	r1, r6
   165c0:	f7ff fe50 	bl	16264 <bt_att_chan_create_pdu>
}
   165c4:	46bd      	mov	sp, r7
   165c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   165c8:	4614      	mov	r4, r2
   165ca:	e7da      	b.n	16582 <bt_att_create_pdu+0x22>
   165cc:	00035b52 	.word	0x00035b52
   165d0:	000314d4 	.word	0x000314d4

000165d4 <att_read_group_req>:
{
   165d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   165d8:	8a0e      	ldrh	r6, [r1, #16]
{
   165da:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   165dc:	3e04      	subs	r6, #4
   165de:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   165e0:	2e02      	cmp	r6, #2
{
   165e2:	4608      	mov	r0, r1
   165e4:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   165e6:	d001      	beq.n	165ec <att_read_group_req+0x18>
   165e8:	2e10      	cmp	r6, #16
   165ea:	d16a      	bne.n	166c2 <att_read_group_req+0xee>
   165ec:	2104      	movs	r1, #4
   165ee:	300c      	adds	r0, #12
   165f0:	f005 f8de 	bl	1b7b0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165f4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   165f8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   165fa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   165fc:	1d01      	adds	r1, r0, #4
   165fe:	4632      	mov	r2, r6
   16600:	4640      	mov	r0, r8
   16602:	f015 fc84 	bl	2bf0e <bt_uuid_create>
   16606:	2800      	cmp	r0, #0
   16608:	d05d      	beq.n	166c6 <att_read_group_req+0xf2>
	if (!start || !end) {
   1660a:	2d00      	cmp	r5, #0
   1660c:	d03a      	beq.n	16684 <att_read_group_req+0xb0>
   1660e:	2600      	movs	r6, #0
   16610:	2f00      	cmp	r7, #0
   16612:	d036      	beq.n	16682 <att_read_group_req+0xae>
	if (start > end) {
   16614:	42bd      	cmp	r5, r7
   16616:	d835      	bhi.n	16684 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16618:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1661c:	4640      	mov	r0, r8
   1661e:	a901      	add	r1, sp, #4
   16620:	f88d 6004 	strb.w	r6, [sp, #4]
   16624:	f8ad 3006 	strh.w	r3, [sp, #6]
   16628:	f015 fc43 	bl	2beb2 <bt_uuid_cmp>
   1662c:	bb70      	cbnz	r0, 1668c <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1662e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16630:	2214      	movs	r2, #20
   16632:	2100      	movs	r1, #0
   16634:	a807      	add	r0, sp, #28
   16636:	f019 ffe4 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1663a:	2201      	movs	r2, #1
   1663c:	2111      	movs	r1, #17
   1663e:	4630      	mov	r0, r6
   16640:	f7ff ff8e 	bl	16560 <bt_att_create_pdu>
   16644:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16646:	2800      	cmp	r0, #0
   16648:	d03d      	beq.n	166c6 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1664a:	2101      	movs	r1, #1
   1664c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1664e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   16652:	f005 f8cb 	bl	1b7ec <net_buf_simple_add>
	data.rsp->len = 0U;
   16656:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16658:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1665a:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1665c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1665e:	4a1b      	ldr	r2, [pc, #108]	; (166cc <att_read_group_req+0xf8>)
	data.group = NULL;
   16660:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16662:	4628      	mov	r0, r5
   16664:	ab07      	add	r3, sp, #28
   16666:	f016 f95e 	bl	2c926 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1666a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1666c:	781b      	ldrb	r3, [r3, #0]
   1666e:	bb1b      	cbnz	r3, 166b8 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16670:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16672:	6998      	ldr	r0, [r3, #24]
   16674:	f7ff facc 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16678:	9809      	ldr	r0, [sp, #36]	; 0x24
   1667a:	f004 ff95 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   1667e:	230a      	movs	r3, #10
   16680:	e001      	b.n	16686 <att_read_group_req+0xb2>
			*err = 0U;
   16682:	463d      	mov	r5, r7
	if (!req) {
   16684:	2301      	movs	r3, #1
   16686:	462a      	mov	r2, r5
   16688:	2110      	movs	r1, #16
   1668a:	e00e      	b.n	166aa <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1668c:	f642 0301 	movw	r3, #10241	; 0x2801
   16690:	4640      	mov	r0, r8
   16692:	a907      	add	r1, sp, #28
   16694:	f88d 601c 	strb.w	r6, [sp, #28]
   16698:	f8ad 301e 	strh.w	r3, [sp, #30]
   1669c:	f015 fc09 	bl	2beb2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   166a0:	2800      	cmp	r0, #0
   166a2:	d0c4      	beq.n	1662e <att_read_group_req+0x5a>
	if (!req) {
   166a4:	2310      	movs	r3, #16
   166a6:	462a      	mov	r2, r5
   166a8:	4619      	mov	r1, r3
   166aa:	4620      	mov	r0, r4
   166ac:	f016 fc27 	bl	2cefe <send_err_rsp.part.0>
		return 0;
   166b0:	2000      	movs	r0, #0
}
   166b2:	b00c      	add	sp, #48	; 0x30
   166b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   166b8:	4620      	mov	r0, r4
   166ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   166bc:	f016 fa07 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   166c0:	e7f6      	b.n	166b0 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   166c2:	2004      	movs	r0, #4
   166c4:	e7f5      	b.n	166b2 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   166c6:	200e      	movs	r0, #14
   166c8:	e7f3      	b.n	166b2 <att_read_group_req+0xde>
   166ca:	bf00      	nop
   166cc:	00016001 	.word	0x00016001

000166d0 <att_read_mult_vl_req>:
{
   166d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   166d4:	6846      	ldr	r6, [r0, #4]
{
   166d6:	4604      	mov	r4, r0
   166d8:	460d      	mov	r5, r1
   166da:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   166dc:	2101      	movs	r1, #1
   166de:	4630      	mov	r0, r6
   166e0:	f016 fefb 	bl	2d4da <bt_gatt_change_aware>
   166e4:	b950      	cbnz	r0, 166fc <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   166e6:	2105      	movs	r1, #5
   166e8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   166ec:	f016 faa3 	bl	2cc36 <atomic_test_and_set_bit>
   166f0:	2800      	cmp	r0, #0
   166f2:	d13b      	bne.n	1676c <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   166f4:	2012      	movs	r0, #18
}
   166f6:	b005      	add	sp, #20
   166f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   166fc:	2210      	movs	r2, #16
   166fe:	2100      	movs	r1, #0
   16700:	4668      	mov	r0, sp
   16702:	f019 ff7e 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   16706:	2200      	movs	r2, #0
   16708:	2121      	movs	r1, #33	; 0x21
   1670a:	4630      	mov	r0, r6
   1670c:	f7ff ff28 	bl	16560 <bt_att_create_pdu>
   16710:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16712:	b368      	cbz	r0, 16770 <att_read_mult_vl_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16714:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16718:	f8df 9058 	ldr.w	r9, [pc, #88]	; 16774 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1671c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1671e:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   16722:	8a2b      	ldrh	r3, [r5, #16]
   16724:	2b01      	cmp	r3, #1
   16726:	d804      	bhi.n	16732 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16728:	4620      	mov	r0, r4
   1672a:	9902      	ldr	r1, [sp, #8]
   1672c:	f016 f9cf 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   16730:	e01c      	b.n	1676c <att_read_mult_vl_req+0x9c>
   16732:	4638      	mov	r0, r7
   16734:	f017 fc6b 	bl	2e00e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16738:	466b      	mov	r3, sp
   1673a:	464a      	mov	r2, r9
   1673c:	4601      	mov	r1, r0
   1673e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16740:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16744:	f016 f8ef 	bl	2c926 <bt_gatt_foreach_attr>
		if (data.err) {
   16748:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1674c:	2b00      	cmp	r3, #0
   1674e:	d0e8      	beq.n	16722 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16750:	9b02      	ldr	r3, [sp, #8]
   16752:	6998      	ldr	r0, [r3, #24]
   16754:	f7ff fa5c 	bl	15c10 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16758:	9802      	ldr	r0, [sp, #8]
   1675a:	f004 ff25 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   1675e:	4632      	mov	r2, r6
   16760:	2120      	movs	r1, #32
   16762:	4620      	mov	r0, r4
   16764:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16768:	f016 fbc9 	bl	2cefe <send_err_rsp.part.0>
			return 0;
   1676c:	2000      	movs	r0, #0
   1676e:	e7c2      	b.n	166f6 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16770:	200e      	movs	r0, #14
   16772:	e7c0      	b.n	166f6 <att_read_mult_vl_req+0x26>
   16774:	0002cc9f 	.word	0x0002cc9f

00016778 <att_read_mult_req>:
{
   16778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1677c:	6846      	ldr	r6, [r0, #4]
{
   1677e:	4604      	mov	r4, r0
   16780:	460d      	mov	r5, r1
   16782:	b085      	sub	sp, #20
	if (!bt_gatt_change_aware(conn, true)) {
   16784:	2101      	movs	r1, #1
   16786:	4630      	mov	r0, r6
   16788:	f016 fea7 	bl	2d4da <bt_gatt_change_aware>
   1678c:	b950      	cbnz	r0, 167a4 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1678e:	2105      	movs	r1, #5
   16790:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16794:	f016 fa4f 	bl	2cc36 <atomic_test_and_set_bit>
   16798:	2800      	cmp	r0, #0
   1679a:	d13b      	bne.n	16814 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1679c:	2012      	movs	r0, #18
}
   1679e:	b005      	add	sp, #20
   167a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   167a4:	2210      	movs	r2, #16
   167a6:	2100      	movs	r1, #0
   167a8:	4668      	mov	r0, sp
   167aa:	f019 ff2a 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   167ae:	2200      	movs	r2, #0
   167b0:	210f      	movs	r1, #15
   167b2:	4630      	mov	r0, r6
   167b4:	f7ff fed4 	bl	16560 <bt_att_create_pdu>
   167b8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   167ba:	b368      	cbz	r0, 16818 <att_read_mult_req+0xa0>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167bc:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167c0:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1681c <att_read_mult_req+0xa4>
	data.chan = chan;
   167c4:	9400      	str	r4, [sp, #0]
   167c6:	f105 070c 	add.w	r7, r5, #12
	while (buf->len >= sizeof(uint16_t)) {
   167ca:	8a2b      	ldrh	r3, [r5, #16]
   167cc:	2b01      	cmp	r3, #1
   167ce:	d804      	bhi.n	167da <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   167d0:	4620      	mov	r0, r4
   167d2:	9902      	ldr	r1, [sp, #8]
   167d4:	f016 f97b 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   167d8:	e01c      	b.n	16814 <att_read_mult_req+0x9c>
   167da:	4638      	mov	r0, r7
   167dc:	f017 fc17 	bl	2e00e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167e0:	466b      	mov	r3, sp
   167e2:	464a      	mov	r2, r9
   167e4:	4601      	mov	r1, r0
   167e6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   167e8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   167ec:	f016 f89b 	bl	2c926 <bt_gatt_foreach_attr>
		if (data.err) {
   167f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167f4:	2b00      	cmp	r3, #0
   167f6:	d0e8      	beq.n	167ca <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   167f8:	9b02      	ldr	r3, [sp, #8]
   167fa:	6998      	ldr	r0, [r3, #24]
   167fc:	f7ff fa08 	bl	15c10 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16800:	9802      	ldr	r0, [sp, #8]
   16802:	f004 fed1 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   16806:	4632      	mov	r2, r6
   16808:	210e      	movs	r1, #14
   1680a:	4620      	mov	r0, r4
   1680c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16810:	f016 fb75 	bl	2cefe <send_err_rsp.part.0>
			return 0;
   16814:	2000      	movs	r0, #0
   16816:	e7c2      	b.n	1679e <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16818:	200e      	movs	r0, #14
   1681a:	e7c0      	b.n	1679e <att_read_mult_req+0x26>
   1681c:	0002cc59 	.word	0x0002cc59

00016820 <att_read_rsp>:
{
   16820:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16824:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   16828:	4604      	mov	r4, r0
   1682a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1682c:	4640      	mov	r0, r8
   1682e:	2101      	movs	r1, #1
{
   16830:	4617      	mov	r7, r2
   16832:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   16834:	f016 fe51 	bl	2d4da <bt_gatt_change_aware>
   16838:	b948      	cbnz	r0, 1684e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1683a:	2105      	movs	r1, #5
   1683c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16840:	f016 f9f9 	bl	2cc36 <atomic_test_and_set_bit>
   16844:	bb78      	cbnz	r0, 168a6 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16846:	2012      	movs	r0, #18
}
   16848:	b004      	add	sp, #16
   1684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1684e:	b38d      	cbz	r5, 168b4 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   16850:	2210      	movs	r2, #16
   16852:	2100      	movs	r1, #0
   16854:	4668      	mov	r0, sp
   16856:	f019 fed4 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1685a:	2200      	movs	r2, #0
   1685c:	4639      	mov	r1, r7
   1685e:	4640      	mov	r0, r8
   16860:	f7ff fe7e 	bl	16560 <bt_att_create_pdu>
   16864:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16866:	b338      	cbz	r0, 168b8 <att_read_rsp+0x98>
	data.offset = offset;
   16868:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1686c:	4629      	mov	r1, r5
	data.offset = offset;
   1686e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16872:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16874:	4628      	mov	r0, r5
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16876:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1687a:	4a10      	ldr	r2, [pc, #64]	; (168bc <att_read_rsp+0x9c>)
   1687c:	466b      	mov	r3, sp
	data.chan = chan;
   1687e:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   16880:	f016 f851 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   16884:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16888:	b17b      	cbz	r3, 168aa <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1688a:	9b02      	ldr	r3, [sp, #8]
   1688c:	6998      	ldr	r0, [r3, #24]
   1688e:	f7ff f9bf 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16892:	9802      	ldr	r0, [sp, #8]
   16894:	f004 fe88 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   16898:	462a      	mov	r2, r5
   1689a:	4631      	mov	r1, r6
   1689c:	4620      	mov	r0, r4
   1689e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   168a2:	f016 fb2c 	bl	2cefe <send_err_rsp.part.0>
			return 0;
   168a6:	2000      	movs	r0, #0
   168a8:	e7ce      	b.n	16848 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   168aa:	4620      	mov	r0, r4
   168ac:	9902      	ldr	r1, [sp, #8]
   168ae:	f016 f90e 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   168b2:	e7f8      	b.n	168a6 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   168b4:	2001      	movs	r0, #1
   168b6:	e7c7      	b.n	16848 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   168b8:	200e      	movs	r0, #14
   168ba:	e7c5      	b.n	16848 <att_read_rsp+0x28>
   168bc:	0002cc59 	.word	0x0002cc59

000168c0 <att_read_type_req>:
{
   168c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   168c4:	8a0d      	ldrh	r5, [r1, #16]
{
   168c6:	4604      	mov	r4, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   168c8:	3d04      	subs	r5, #4
   168ca:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   168cc:	2d02      	cmp	r5, #2
{
   168ce:	4608      	mov	r0, r1
   168d0:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   168d2:	d001      	beq.n	168d8 <att_read_type_req+0x18>
   168d4:	2d10      	cmp	r5, #16
   168d6:	d150      	bne.n	1697a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   168d8:	2104      	movs	r1, #4
   168da:	300c      	adds	r0, #12
   168dc:	f004 ff68 	bl	1b7b0 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   168e0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   168e4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   168e6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   168e8:	1d01      	adds	r1, r0, #4
   168ea:	462a      	mov	r2, r5
   168ec:	4640      	mov	r0, r8
   168ee:	f015 fb0e 	bl	2bf0e <bt_uuid_create>
   168f2:	b188      	cbz	r0, 16918 <att_read_type_req+0x58>
	if (!start || !end) {
   168f4:	b19e      	cbz	r6, 1691e <att_read_type_req+0x5e>
   168f6:	b18f      	cbz	r7, 1691c <att_read_type_req+0x5c>
	if (start > end) {
   168f8:	42b7      	cmp	r7, r6
   168fa:	d310      	bcc.n	1691e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   168fc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   168fe:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16900:	2100      	movs	r1, #0
   16902:	eb0d 0002 	add.w	r0, sp, r2
   16906:	f019 fe7c 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1690a:	2201      	movs	r2, #1
   1690c:	2109      	movs	r1, #9
   1690e:	4628      	mov	r0, r5
   16910:	f7ff fe26 	bl	16560 <bt_att_create_pdu>
   16914:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   16916:	b960      	cbnz	r0, 16932 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   16918:	200e      	movs	r0, #14
   1691a:	e007      	b.n	1692c <att_read_type_req+0x6c>
			*err = 0U;
   1691c:	463e      	mov	r6, r7
	if (!req) {
   1691e:	2301      	movs	r3, #1
   16920:	4632      	mov	r2, r6
   16922:	2108      	movs	r1, #8
   16924:	4620      	mov	r0, r4
   16926:	f016 faea 	bl	2cefe <send_err_rsp.part.0>
		return 0;
   1692a:	2000      	movs	r0, #0
}
   1692c:	b00c      	add	sp, #48	; 0x30
   1692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   16932:	2101      	movs	r1, #1
   16934:	300c      	adds	r0, #12
	data.uuid = uuid;
   16936:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1693a:	f004 ff57 	bl	1b7ec <net_buf_simple_add>
	data.rsp->len = 0U;
   1693e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16940:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   16942:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16944:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   16946:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16948:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1694c:	4630      	mov	r0, r6
   1694e:	ab06      	add	r3, sp, #24
   16950:	4a0b      	ldr	r2, [pc, #44]	; (16980 <att_read_type_req+0xc0>)
   16952:	f015 ffe8 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   16956:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1695a:	b14b      	cbz	r3, 16970 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1695c:	9b08      	ldr	r3, [sp, #32]
   1695e:	6998      	ldr	r0, [r3, #24]
   16960:	f7ff f956 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16964:	9808      	ldr	r0, [sp, #32]
   16966:	f004 fe1f 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   1696a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1696e:	e7d7      	b.n	16920 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   16970:	4620      	mov	r0, r4
   16972:	9908      	ldr	r1, [sp, #32]
   16974:	f016 f8ab 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   16978:	e7d7      	b.n	1692a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1697a:	2004      	movs	r0, #4
   1697c:	e7d6      	b.n	1692c <att_read_type_req+0x6c>
   1697e:	bf00      	nop
   16980:	000160ad 	.word	0x000160ad

00016984 <att_find_type_req>:
{
   16984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16988:	460f      	mov	r7, r1
   1698a:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1698c:	2106      	movs	r1, #6
   1698e:	b086      	sub	sp, #24
   16990:	f107 000c 	add.w	r0, r7, #12
   16994:	f004 ff0c 	bl	1b7b0 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   16998:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1699a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1699e:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   169a0:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   169a4:	b1c5      	cbz	r5, 169d8 <att_find_type_req+0x54>
   169a6:	2300      	movs	r3, #0
   169a8:	f1b8 0f00 	cmp.w	r8, #0
   169ac:	d013      	beq.n	169d6 <att_find_type_req+0x52>
	if (start > end) {
   169ae:	4545      	cmp	r5, r8
   169b0:	d812      	bhi.n	169d8 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   169b2:	f88d 3000 	strb.w	r3, [sp]
   169b6:	f88d 3004 	strb.w	r3, [sp, #4]
   169ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   169be:	4668      	mov	r0, sp
   169c0:	a901      	add	r1, sp, #4
   169c2:	f8ad 2002 	strh.w	r2, [sp, #2]
   169c6:	f8ad 3006 	strh.w	r3, [sp, #6]
   169ca:	f015 fa72 	bl	2beb2 <bt_uuid_cmp>
   169ce:	4606      	mov	r6, r0
   169d0:	b160      	cbz	r0, 169ec <att_find_type_req+0x68>
	if (!req) {
   169d2:	230a      	movs	r3, #10
   169d4:	e001      	b.n	169da <att_find_type_req+0x56>
			*err = 0U;
   169d6:	4645      	mov	r5, r8
	if (!req) {
   169d8:	2301      	movs	r3, #1
   169da:	462a      	mov	r2, r5
   169dc:	2106      	movs	r1, #6
   169de:	4620      	mov	r0, r4
   169e0:	f016 fa8d 	bl	2cefe <send_err_rsp.part.0>
		return 0;
   169e4:	2000      	movs	r0, #0
}
   169e6:	b006      	add	sp, #24
   169e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   169ec:	f8d4 a004 	ldr.w	sl, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   169f0:	4601      	mov	r1, r0
   169f2:	2214      	movs	r2, #20
   169f4:	a801      	add	r0, sp, #4
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   169f6:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   169f8:	f019 fe03 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   169fc:	4632      	mov	r2, r6
   169fe:	2107      	movs	r1, #7
   16a00:	4650      	mov	r0, sl
   16a02:	f7ff fdad 	bl	16560 <bt_att_create_pdu>
   16a06:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16a08:	b1f8      	cbz	r0, 16a4a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16a0a:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16a0c:	4641      	mov	r1, r8
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   16a0e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16a12:	4628      	mov	r0, r5
   16a14:	ab01      	add	r3, sp, #4
   16a16:	4a0e      	ldr	r2, [pc, #56]	; (16a50 <att_find_type_req+0xcc>)
	data.value = value;
   16a18:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.chan = chan;
   16a1c:	9401      	str	r4, [sp, #4]
	data.value_len = value_len;
   16a1e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   16a22:	f015 ff80 	bl	2c926 <bt_gatt_foreach_attr>
	if (data.err) {
   16a26:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16a2a:	b14b      	cbz	r3, 16a40 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16a2c:	9b02      	ldr	r3, [sp, #8]
   16a2e:	6998      	ldr	r0, [r3, #24]
   16a30:	f7ff f8ee 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16a34:	9802      	ldr	r0, [sp, #8]
   16a36:	f004 fdb7 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   16a3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   16a3e:	e7cc      	b.n	169da <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   16a40:	4620      	mov	r0, r4
   16a42:	9902      	ldr	r1, [sp, #8]
   16a44:	f016 f843 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   16a48:	e7cc      	b.n	169e4 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   16a4a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   16a4c:	e7cb      	b.n	169e6 <att_find_type_req+0x62>
   16a4e:	bf00      	nop
   16a50:	00015c51 	.word	0x00015c51

00016a54 <att_find_info_req>:
{
   16a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   16a56:	68cb      	ldr	r3, [r1, #12]
{
   16a58:	4604      	mov	r4, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   16a5a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16a5c:	885e      	ldrh	r6, [r3, #2]
{
   16a5e:	b085      	sub	sp, #20
	if (!start || !end) {
   16a60:	b195      	cbz	r5, 16a88 <att_find_info_req+0x34>
   16a62:	b186      	cbz	r6, 16a86 <att_find_info_req+0x32>
	if (start > end) {
   16a64:	42b5      	cmp	r5, r6
   16a66:	d80f      	bhi.n	16a88 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   16a68:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   16a6a:	2210      	movs	r2, #16
   16a6c:	2100      	movs	r1, #0
   16a6e:	4668      	mov	r0, sp
   16a70:	f019 fdc7 	bl	30602 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   16a74:	2200      	movs	r2, #0
   16a76:	2105      	movs	r1, #5
   16a78:	4638      	mov	r0, r7
   16a7a:	f7ff fd71 	bl	16560 <bt_att_create_pdu>
   16a7e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   16a80:	b958      	cbnz	r0, 16a9a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   16a82:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   16a84:	e007      	b.n	16a96 <att_find_info_req+0x42>
			*err = 0U;
   16a86:	4635      	mov	r5, r6
	if (!req) {
   16a88:	2301      	movs	r3, #1
   16a8a:	462a      	mov	r2, r5
   16a8c:	2104      	movs	r1, #4
   16a8e:	4620      	mov	r0, r4
   16a90:	f016 fa35 	bl	2cefe <send_err_rsp.part.0>
		return 0;
   16a94:	2000      	movs	r0, #0
}
   16a96:	b005      	add	sp, #20
   16a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16a9a:	466b      	mov	r3, sp
   16a9c:	4631      	mov	r1, r6
   16a9e:	4628      	mov	r0, r5
   16aa0:	4a09      	ldr	r2, [pc, #36]	; (16ac8 <att_find_info_req+0x74>)
	data.chan = chan;
   16aa2:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   16aa4:	f015 ff3f 	bl	2c926 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   16aa8:	9b02      	ldr	r3, [sp, #8]
   16aaa:	b943      	cbnz	r3, 16abe <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16aac:	9b01      	ldr	r3, [sp, #4]
   16aae:	6998      	ldr	r0, [r3, #24]
   16ab0:	f7ff f8ae 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16ab4:	9801      	ldr	r0, [sp, #4]
   16ab6:	f004 fd77 	bl	1b5a8 <net_buf_unref>
	if (!req) {
   16aba:	230a      	movs	r3, #10
   16abc:	e7e5      	b.n	16a8a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   16abe:	4620      	mov	r0, r4
   16ac0:	9901      	ldr	r1, [sp, #4]
   16ac2:	f016 f804 	bl	2cace <bt_att_chan_send_rsp>
	return 0;
   16ac6:	e7e5      	b.n	16a94 <att_find_info_req+0x40>
   16ac8:	0002c9c3 	.word	0x0002c9c3

00016acc <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   16acc:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   16ace:	4c09      	ldr	r4, [pc, #36]	; (16af4 <bt_att_init+0x28>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   16ad0:	4d09      	ldr	r5, [pc, #36]	; (16af8 <bt_att_init+0x2c>)
   16ad2:	4620      	mov	r0, r4
   16ad4:	f019 fb77 	bl	301c6 <z_impl_k_queue_init>
   16ad8:	4629      	mov	r1, r5
   16ada:	4620      	mov	r0, r4
   16adc:	f019 fb80 	bl	301e0 <k_queue_append>
   16ae0:	4620      	mov	r0, r4
   16ae2:	f105 0114 	add.w	r1, r5, #20
   16ae6:	f019 fb7b 	bl	301e0 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   16aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   16aee:	f000 bec5 	b.w	1787c <bt_gatt_init>
   16af2:	bf00      	nop
   16af4:	20008c9c 	.word	0x20008c9c
   16af8:	20021698 	.word	0x20021698

00016afc <bt_att_req_alloc>:
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
	struct bt_att_req *req = NULL;
   16afc:	2300      	movs	r3, #0
{
   16afe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16b00:	4605      	mov	r5, r0
   16b02:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   16b04:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   16b06:	f010 fc97 	bl	27438 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   16b0a:	4b0c      	ldr	r3, [pc, #48]	; (16b3c <bt_att_req_alloc+0x40>)
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16b0c:	a901      	add	r1, sp, #4
	if (k_current_get() == att_handle_rsp_thread) {
   16b0e:	681b      	ldr	r3, [r3, #0]
   16b10:	4283      	cmp	r3, r0
		timeout = K_NO_WAIT;
   16b12:	bf04      	itt	eq
   16b14:	2500      	moveq	r5, #0
   16b16:	462c      	moveq	r4, r5
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   16b18:	462a      	mov	r2, r5
   16b1a:	4623      	mov	r3, r4
   16b1c:	4808      	ldr	r0, [pc, #32]	; (16b40 <bt_att_req_alloc+0x44>)
   16b1e:	f00e f8c1 	bl	24ca4 <k_mem_slab_alloc>
   16b22:	4601      	mov	r1, r0
   16b24:	b940      	cbnz	r0, 16b38 <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   16b26:	9b01      	ldr	r3, [sp, #4]
   16b28:	221c      	movs	r2, #28
   16b2a:	4618      	mov	r0, r3
   16b2c:	f019 fd69 	bl	30602 <memset>
   16b30:	4603      	mov	r3, r0

	return req;
}
   16b32:	4618      	mov	r0, r3
   16b34:	b003      	add	sp, #12
   16b36:	bd30      	pop	{r4, r5, pc}
		return NULL;
   16b38:	2300      	movs	r3, #0
   16b3a:	e7fa      	b.n	16b32 <bt_att_req_alloc+0x36>
   16b3c:	200216c0 	.word	0x200216c0
   16b40:	20008adc 	.word	0x20008adc

00016b44 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   16b44:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   16b46:	6883      	ldr	r3, [r0, #8]
{
   16b48:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   16b4a:	b14b      	cbz	r3, 16b60 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   16b4c:	6998      	ldr	r0, [r3, #24]
   16b4e:	f7ff f85f 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(req->buf);
   16b52:	9b01      	ldr	r3, [sp, #4]
   16b54:	6898      	ldr	r0, [r3, #8]
   16b56:	f004 fd27 	bl	1b5a8 <net_buf_unref>
		req->buf = NULL;
   16b5a:	2200      	movs	r2, #0
   16b5c:	9b01      	ldr	r3, [sp, #4]
   16b5e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   16b60:	4803      	ldr	r0, [pc, #12]	; (16b70 <bt_att_req_free+0x2c>)
   16b62:	a901      	add	r1, sp, #4
   16b64:	f00e f908 	bl	24d78 <k_mem_slab_free>
}
   16b68:	b003      	add	sp, #12
   16b6a:	f85d fb04 	ldr.w	pc, [sp], #4
   16b6e:	bf00      	nop
   16b70:	20008adc 	.word	0x20008adc

00016b74 <att_handle_rsp>:
{
   16b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b78:	4604      	mov	r4, r0
   16b7a:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   16b7c:	30c0      	adds	r0, #192	; 0xc0
{
   16b7e:	460e      	mov	r6, r1
   16b80:	4617      	mov	r7, r2
   16b82:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   16b84:	f00f fad6 	bl	26134 <k_work_cancel_delayable>
	if (!chan->req) {
   16b88:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16b8c:	b980      	cbnz	r0, 16bb0 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   16b8e:	4b1a      	ldr	r3, [pc, #104]	; (16bf8 <att_handle_rsp+0x84>)
   16b90:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16b94:	9307      	str	r3, [sp, #28]
   16b96:	2302      	movs	r3, #2
   16b98:	4818      	ldr	r0, [pc, #96]	; (16bfc <att_handle_rsp+0x88>)
   16b9a:	aa06      	add	r2, sp, #24
   16b9c:	9306      	str	r3, [sp, #24]
   16b9e:	f015 ff60 	bl	2ca62 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   16ba2:	6820      	ldr	r0, [r4, #0]
   16ba4:	f016 f8e3 	bl	2cd6e <att_req_send_process>
}
   16ba8:	2000      	movs	r0, #0
   16baa:	b008      	add	sp, #32
   16bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   16bb0:	4b13      	ldr	r3, [pc, #76]	; (16c00 <att_handle_rsp+0x8c>)
   16bb2:	f04f 0800 	mov.w	r8, #0
   16bb6:	4298      	cmp	r0, r3
   16bb8:	d102      	bne.n	16bc0 <att_handle_rsp+0x4c>
		chan->req = NULL;
   16bba:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   16bbe:	e7f0      	b.n	16ba2 <att_handle_rsp+0x2e>
	func = chan->req->func;
   16bc0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   16bc4:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   16bc8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   16bcc:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   16bd0:	f7ff ffb8 	bl	16b44 <bt_att_req_free>
	att_req_send_process(chan->att);
   16bd4:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   16bd6:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   16bda:	f016 f8c8 	bl	2cd6e <att_req_send_process>
	if (func) {
   16bde:	f1b9 0f00 	cmp.w	r9, #0
   16be2:	d0e1      	beq.n	16ba8 <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   16be4:	6820      	ldr	r0, [r4, #0]
   16be6:	f8cd a000 	str.w	sl, [sp]
   16bea:	463b      	mov	r3, r7
   16bec:	4632      	mov	r2, r6
   16bee:	4629      	mov	r1, r5
   16bf0:	6800      	ldr	r0, [r0, #0]
   16bf2:	47c8      	blx	r9
   16bf4:	e7d8      	b.n	16ba8 <att_handle_rsp+0x34>
   16bf6:	bf00      	nop
   16bf8:	00035b6d 	.word	0x00035b6d
   16bfc:	000314d4 	.word	0x000314d4
   16c00:	200216c4 	.word	0x200216c4

00016c04 <bt_att_disconnected>:
{
   16c04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   16c08:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   16c0c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   16c0e:	2e00      	cmp	r6, #0
   16c10:	d056      	beq.n	16cc0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   16c12:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   16c16:	f106 0028 	add.w	r0, r6, #40	; 0x28
   16c1a:	f015 fff1 	bl	2cc00 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   16c1e:	1f27      	subs	r7, r4, #4
   16c20:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   16c24:	2200      	movs	r2, #0
   16c26:	2300      	movs	r3, #0
   16c28:	4640      	mov	r0, r8
   16c2a:	f017 f9e7 	bl	2dffc <net_buf_get>
   16c2e:	4605      	mov	r5, r0
   16c30:	bb28      	cbnz	r0, 16c7e <bt_att_disconnected+0x7a>
	if (chan->req) {
   16c32:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16c36:	b12b      	cbz	r3, 16c44 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   16c38:	4602      	mov	r2, r0
   16c3a:	4601      	mov	r1, r0
   16c3c:	230e      	movs	r3, #14
   16c3e:	4638      	mov	r0, r7
   16c40:	f7ff ff98 	bl	16b74 <att_handle_rsp>
	chan->att = NULL;
   16c44:	2300      	movs	r3, #0
   16c46:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   16c4a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d137      	bne.n	16cc0 <bt_att_disconnected+0xbc>
	att_reset(att);
   16c50:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   16c52:	9803      	ldr	r0, [sp, #12]
   16c54:	2200      	movs	r2, #0
   16c56:	2300      	movs	r3, #0
   16c58:	300c      	adds	r0, #12
   16c5a:	f017 f9cf 	bl	2dffc <net_buf_get>
   16c5e:	4605      	mov	r5, r0
   16c60:	b9a0      	cbnz	r0, 16c8c <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   16c62:	9803      	ldr	r0, [sp, #12]
	return list->head;
   16c64:	6845      	ldr	r5, [r0, #4]
   16c66:	b9c5      	cbnz	r5, 16c9a <bt_att_disconnected+0x96>
	att->conn = NULL;
   16c68:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   16c6a:	a903      	add	r1, sp, #12
   16c6c:	4816      	ldr	r0, [pc, #88]	; (16cc8 <bt_att_disconnected+0xc4>)
   16c6e:	f00e f883 	bl	24d78 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   16c72:	6820      	ldr	r0, [r4, #0]
}
   16c74:	b004      	add	sp, #16
   16c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   16c7a:	f001 bdd7 	b.w	1882c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16c7e:	69a8      	ldr	r0, [r5, #24]
   16c80:	f7fe ffc6 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(buf);
   16c84:	4628      	mov	r0, r5
   16c86:	f004 fc8f 	bl	1b5a8 <net_buf_unref>
   16c8a:	e7cb      	b.n	16c24 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16c8c:	69a8      	ldr	r0, [r5, #24]
   16c8e:	f7fe ffbf 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(buf);
   16c92:	4628      	mov	r0, r5
   16c94:	f004 fc88 	bl	1b5a8 <net_buf_unref>
   16c98:	e7db      	b.n	16c52 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c9a:	6882      	ldr	r2, [r0, #8]
	return node->next;
   16c9c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c9e:	4295      	cmp	r5, r2
	list->head = node;
   16ca0:	6043      	str	r3, [r0, #4]
	list->tail = node;
   16ca2:	bf08      	it	eq
   16ca4:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   16ca6:	686e      	ldr	r6, [r5, #4]
   16ca8:	b136      	cbz	r6, 16cb8 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   16caa:	69ab      	ldr	r3, [r5, #24]
   16cac:	210e      	movs	r1, #14
   16cae:	9300      	str	r3, [sp, #0]
   16cb0:	2300      	movs	r3, #0
   16cb2:	6800      	ldr	r0, [r0, #0]
   16cb4:	461a      	mov	r2, r3
   16cb6:	47b0      	blx	r6
		bt_att_req_free(req);
   16cb8:	4628      	mov	r0, r5
   16cba:	f7ff ff43 	bl	16b44 <bt_att_req_free>
   16cbe:	e7d0      	b.n	16c62 <bt_att_disconnected+0x5e>
}
   16cc0:	b004      	add	sp, #16
   16cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16cc6:	bf00      	nop
   16cc8:	20008a5c 	.word	0x20008a5c

00016ccc <att_timeout>:
{
   16ccc:	b510      	push	{r4, lr}
   16cce:	4604      	mov	r4, r0
   16cd0:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   16cd2:	4b08      	ldr	r3, [pc, #32]	; (16cf4 <att_timeout+0x28>)
   16cd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16cd8:	9305      	str	r3, [sp, #20]
   16cda:	2302      	movs	r3, #2
   16cdc:	4806      	ldr	r0, [pc, #24]	; (16cf8 <att_timeout+0x2c>)
   16cde:	aa04      	add	r2, sp, #16
   16ce0:	9304      	str	r3, [sp, #16]
   16ce2:	f015 febe 	bl	2ca62 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   16ce6:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   16cea:	b006      	add	sp, #24
   16cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   16cf0:	f7ff bf88 	b.w	16c04 <bt_att_disconnected>
   16cf4:	00035b84 	.word	0x00035b84
   16cf8:	000314d4 	.word	0x000314d4

00016cfc <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   16cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16cfe:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   16d00:	b958      	cbnz	r0, 16d1a <bt_att_send+0x1e>
   16d02:	4929      	ldr	r1, [pc, #164]	; (16da8 <bt_att_send+0xac>)
   16d04:	f640 63a4 	movw	r3, #3748	; 0xea4
   16d08:	4a28      	ldr	r2, [pc, #160]	; (16dac <bt_att_send+0xb0>)
   16d0a:	4829      	ldr	r0, [pc, #164]	; (16db0 <bt_att_send+0xb4>)
   16d0c:	f013 fce5 	bl	2a6da <assert_print>
   16d10:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   16d14:	4825      	ldr	r0, [pc, #148]	; (16dac <bt_att_send+0xb0>)
   16d16:	f013 fcd9 	bl	2a6cc <assert_post_action>
   16d1a:	b949      	cbnz	r1, 16d30 <bt_att_send+0x34>
   16d1c:	4925      	ldr	r1, [pc, #148]	; (16db4 <bt_att_send+0xb8>)
   16d1e:	f640 63a5 	movw	r3, #3749	; 0xea5
   16d22:	4a22      	ldr	r2, [pc, #136]	; (16dac <bt_att_send+0xb0>)
   16d24:	4822      	ldr	r0, [pc, #136]	; (16db0 <bt_att_send+0xb4>)
   16d26:	f013 fcd8 	bl	2a6da <assert_print>
   16d2a:	f640 61a5 	movw	r1, #3749	; 0xea5
   16d2e:	e7f1      	b.n	16d14 <bt_att_send+0x18>

	att = att_get(conn);
   16d30:	f7ff f904 	bl	15f3c <att_get>
	if (!att) {
   16d34:	4605      	mov	r5, r0
   16d36:	b940      	cbnz	r0, 16d4a <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   16d38:	69a0      	ldr	r0, [r4, #24]
   16d3a:	f7fe ff69 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(buf);
   16d3e:	4620      	mov	r0, r4
   16d40:	f004 fc32 	bl	1b5a8 <net_buf_unref>
		return -ENOTCONN;
   16d44:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   16d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   16d4a:	f100 060c 	add.w	r6, r0, #12
   16d4e:	4621      	mov	r1, r4
   16d50:	4630      	mov	r0, r6
   16d52:	f004 fc03 	bl	1b55c <net_buf_put>
	return list->head;
   16d56:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d58:	b14d      	cbz	r5, 16d6e <bt_att_send+0x72>
	return node->next;
   16d5a:	f855 49f0 	ldr.w	r4, [r5], #-240
   16d5e:	b104      	cbz	r4, 16d62 <bt_att_send+0x66>
   16d60:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   16d62:	4631      	mov	r1, r6
   16d64:	4628      	mov	r0, r5
   16d66:	f015 fe99 	bl	2ca9c <process_queue>
		if (!err) {
   16d6a:	4603      	mov	r3, r0
   16d6c:	b980      	cbnz	r0, 16d90 <bt_att_send+0x94>
	return 0;
   16d6e:	2000      	movs	r0, #0
   16d70:	e7ea      	b.n	16d48 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   16d72:	2103      	movs	r1, #3
   16d74:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16d78:	f015 fd9e 	bl	2c8b8 <atomic_test_bit>
   16d7c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   16d7e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16d82:	f015 fd99 	bl	2c8b8 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   16d86:	4287      	cmp	r7, r0
   16d88:	f06f 0301 	mvn.w	r3, #1
   16d8c:	d107      	bne.n	16d9e <bt_att_send+0xa2>
   16d8e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16d90:	2c00      	cmp	r4, #0
   16d92:	d0ec      	beq.n	16d6e <bt_att_send+0x72>
   16d94:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   16d98:	b922      	cbnz	r2, 16da4 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   16d9a:	3302      	adds	r3, #2
   16d9c:	d0e9      	beq.n	16d72 <bt_att_send+0x76>
{
   16d9e:	4625      	mov	r5, r4
   16da0:	4614      	mov	r4, r2
   16da2:	e7de      	b.n	16d62 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16da4:	3af0      	subs	r2, #240	; 0xf0
   16da6:	e7f8      	b.n	16d9a <bt_att_send+0x9e>
   16da8:	00034c1d 	.word	0x00034c1d
   16dac:	0003590d 	.word	0x0003590d
   16db0:	00032679 	.word	0x00032679
   16db4:	00036995 	.word	0x00036995

00016db8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   16db8:	b510      	push	{r4, lr}
   16dba:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   16dbc:	b958      	cbnz	r0, 16dd6 <bt_att_req_send+0x1e>
   16dbe:	4915      	ldr	r1, [pc, #84]	; (16e14 <bt_att_req_send+0x5c>)
   16dc0:	f640 63ba 	movw	r3, #3770	; 0xeba
   16dc4:	4a14      	ldr	r2, [pc, #80]	; (16e18 <bt_att_req_send+0x60>)
   16dc6:	4815      	ldr	r0, [pc, #84]	; (16e1c <bt_att_req_send+0x64>)
   16dc8:	f013 fc87 	bl	2a6da <assert_print>
   16dcc:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   16dd0:	4811      	ldr	r0, [pc, #68]	; (16e18 <bt_att_req_send+0x60>)
   16dd2:	f013 fc7b 	bl	2a6cc <assert_post_action>
   16dd6:	b949      	cbnz	r1, 16dec <bt_att_req_send+0x34>
   16dd8:	4911      	ldr	r1, [pc, #68]	; (16e20 <bt_att_req_send+0x68>)
   16dda:	f640 63bb 	movw	r3, #3771	; 0xebb
   16dde:	4a0e      	ldr	r2, [pc, #56]	; (16e18 <bt_att_req_send+0x60>)
   16de0:	480e      	ldr	r0, [pc, #56]	; (16e1c <bt_att_req_send+0x64>)
   16de2:	f013 fc7a 	bl	2a6da <assert_print>
   16de6:	f640 61bb 	movw	r1, #3771	; 0xebb
   16dea:	e7f1      	b.n	16dd0 <bt_att_req_send+0x18>

	att = att_get(conn);
   16dec:	f7ff f8a6 	bl	15f3c <att_get>
	if (!att) {
   16df0:	b160      	cbz	r0, 16e0c <bt_att_req_send+0x54>
	parent->next = child;
   16df2:	2300      	movs	r3, #0
   16df4:	6023      	str	r3, [r4, #0]
	return list->tail;
   16df6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   16df8:	b92b      	cbnz	r3, 16e06 <bt_att_req_send+0x4e>
	list->head = node;
   16dfa:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   16dfe:	f015 ffb6 	bl	2cd6e <att_req_send_process>

	return 0;
   16e02:	2000      	movs	r0, #0
}
   16e04:	bd10      	pop	{r4, pc}
	parent->next = child;
   16e06:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16e08:	6084      	str	r4, [r0, #8]
}
   16e0a:	e7f8      	b.n	16dfe <bt_att_req_send+0x46>
		return -ENOTCONN;
   16e0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16e10:	e7f8      	b.n	16e04 <bt_att_req_send+0x4c>
   16e12:	bf00      	nop
   16e14:	00034c1d 	.word	0x00034c1d
   16e18:	0003590d 	.word	0x0003590d
   16e1c:	00032679 	.word	0x00032679
   16e20:	000359bc 	.word	0x000359bc

00016e24 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   16e24:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   16e26:	4606      	mov	r6, r0
   16e28:	4d13      	ldr	r5, [pc, #76]	; (16e78 <find_cf_cfg+0x54>)
   16e2a:	b140      	cbz	r0, 16e3e <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16e2c:	462a      	mov	r2, r5
   16e2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16e32:	1e6c      	subs	r4, r5, #1
   16e34:	f015 fc39 	bl	2c6aa <bt_conn_is_peer_addr_le>
   16e38:	b198      	cbz	r0, 16e62 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e3a:	4620      	mov	r0, r4
   16e3c:	e00c      	b.n	16e58 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16e3e:	4628      	mov	r0, r5
   16e40:	490e      	ldr	r1, [pc, #56]	; (16e7c <find_cf_cfg+0x58>)
   16e42:	f016 f9d2 	bl	2d1ea <bt_addr_le_eq>
   16e46:	b940      	cbnz	r0, 16e5a <find_cf_cfg+0x36>
   16e48:	490c      	ldr	r1, [pc, #48]	; (16e7c <find_cf_cfg+0x58>)
   16e4a:	f105 0010 	add.w	r0, r5, #16
   16e4e:	f016 f9cc 	bl	2d1ea <bt_addr_le_eq>
   16e52:	b120      	cbz	r0, 16e5e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e54:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   16e58:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e5a:	1e68      	subs	r0, r5, #1
   16e5c:	e7fc      	b.n	16e58 <find_cf_cfg+0x34>
	return NULL;
   16e5e:	2000      	movs	r0, #0
   16e60:	e7fa      	b.n	16e58 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   16e62:	4630      	mov	r0, r6
   16e64:	7c21      	ldrb	r1, [r4, #16]
   16e66:	f104 0211 	add.w	r2, r4, #17
   16e6a:	f015 fc1e 	bl	2c6aa <bt_conn_is_peer_addr_le>
   16e6e:	2800      	cmp	r0, #0
   16e70:	d0f5      	beq.n	16e5e <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   16e72:	f104 0010 	add.w	r0, r4, #16
   16e76:	e7ef      	b.n	16e58 <find_cf_cfg+0x34>
   16e78:	200216f9 	.word	0x200216f9
   16e7c:	000345f5 	.word	0x000345f5

00016e80 <find_sc_cfg>:
{
   16e80:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   16e82:	4c0e      	ldr	r4, [pc, #56]	; (16ebc <find_sc_cfg+0x3c>)
{
   16e84:	4605      	mov	r5, r0
		if (id == sc_cfg[i].id &&
   16e86:	7823      	ldrb	r3, [r4, #0]
{
   16e88:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   16e8a:	4283      	cmp	r3, r0
   16e8c:	d00c      	beq.n	16ea8 <find_sc_cfg+0x28>
   16e8e:	7b23      	ldrb	r3, [r4, #12]
   16e90:	42ab      	cmp	r3, r5
   16e92:	d110      	bne.n	16eb6 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16e94:	4631      	mov	r1, r6
   16e96:	480a      	ldr	r0, [pc, #40]	; (16ec0 <find_sc_cfg+0x40>)
   16e98:	f016 f9a7 	bl	2d1ea <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16e9c:	b158      	cbz	r0, 16eb6 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16e9e:	2301      	movs	r3, #1
			return &sc_cfg[i];
   16ea0:	220c      	movs	r2, #12
   16ea2:	fb02 4003 	mla	r0, r2, r3, r4
   16ea6:	e007      	b.n	16eb8 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   16ea8:	1c60      	adds	r0, r4, #1
   16eaa:	f016 f99e 	bl	2d1ea <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   16eae:	2800      	cmp	r0, #0
   16eb0:	d0ed      	beq.n	16e8e <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   16eb2:	2300      	movs	r3, #0
   16eb4:	e7f4      	b.n	16ea0 <find_sc_cfg+0x20>
	return NULL;
   16eb6:	2000      	movs	r0, #0
}
   16eb8:	bd70      	pop	{r4, r5, r6, pc}
   16eba:	bf00      	nop
   16ebc:	20021b14 	.word	0x20021b14
   16ec0:	20021b21 	.word	0x20021b21

00016ec4 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   16ec4:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   16ec6:	1c4a      	adds	r2, r1, #1
{
   16ec8:	460c      	mov	r4, r1
		if (conn) {
   16eca:	b138      	cbz	r0, 16edc <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   16ecc:	7809      	ldrb	r1, [r1, #0]
   16ece:	f015 fbec 	bl	2c6aa <bt_conn_is_peer_addr_le>
   16ed2:	b108      	cbz	r0, 16ed8 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   16ed4:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   16ed6:	bd10      	pop	{r4, pc}
	return NULL;
   16ed8:	2000      	movs	r0, #0
   16eda:	e7fc      	b.n	16ed6 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   16edc:	4610      	mov	r0, r2
   16ede:	4902      	ldr	r1, [pc, #8]	; (16ee8 <find_ccc_cfg+0x24>)
   16ee0:	f016 f983 	bl	2d1ea <bt_addr_le_eq>
   16ee4:	e7f5      	b.n	16ed2 <find_ccc_cfg+0xe>
   16ee6:	bf00      	nop
   16ee8:	000345f5 	.word	0x000345f5

00016eec <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   16eec:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   16eee:	4c0e      	ldr	r4, [pc, #56]	; (16f28 <find_cf_cfg_by_addr+0x3c>)
{
   16ef0:	4606      	mov	r6, r0
			if (id == cf_cfg[i].id &&
   16ef2:	7823      	ldrb	r3, [r4, #0]
{
   16ef4:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   16ef6:	4283      	cmp	r3, r0
   16ef8:	d00b      	beq.n	16f12 <find_cf_cfg_by_addr+0x26>
   16efa:	7c23      	ldrb	r3, [r4, #16]
   16efc:	42b3      	cmp	r3, r6
   16efe:	d110      	bne.n	16f22 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16f00:	4628      	mov	r0, r5
   16f02:	490a      	ldr	r1, [pc, #40]	; (16f2c <find_cf_cfg_by_addr+0x40>)
   16f04:	f016 f971 	bl	2d1ea <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16f08:	b158      	cbz	r0, 16f22 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16f0a:	2301      	movs	r3, #1
				return &cf_cfg[i];
   16f0c:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   16f10:	e008      	b.n	16f24 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   16f12:	4628      	mov	r0, r5
   16f14:	1c61      	adds	r1, r4, #1
   16f16:	f016 f968 	bl	2d1ea <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   16f1a:	2800      	cmp	r0, #0
   16f1c:	d0ed      	beq.n	16efa <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   16f1e:	2300      	movs	r3, #0
   16f20:	e7f4      	b.n	16f0c <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   16f22:	2000      	movs	r0, #0
}
   16f24:	bd70      	pop	{r4, r5, r6, pc}
   16f26:	bf00      	nop
   16f28:	200216f8 	.word	0x200216f8
   16f2c:	20021709 	.word	0x20021709

00016f30 <ccc_load>:
{
   16f30:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f32:	4b20      	ldr	r3, [pc, #128]	; (16fb4 <ccc_load+0x84>)
{
   16f34:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16f36:	6882      	ldr	r2, [r0, #8]
   16f38:	429a      	cmp	r2, r3
   16f3a:	d10f      	bne.n	16f5c <ccc_load+0x2c>
	if (!load->entry) {
   16f3c:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   16f3e:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   16f40:	b975      	cbnz	r5, 16f60 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   16f42:	7922      	ldrb	r2, [r4, #4]
   16f44:	4630      	mov	r0, r6
   16f46:	6821      	ldr	r1, [r4, #0]
   16f48:	f016 f957 	bl	2d1fa <ccc_find_cfg>
	if (!cfg) {
   16f4c:	4602      	mov	r2, r0
   16f4e:	b128      	cbz	r0, 16f5c <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   16f50:	4919      	ldr	r1, [pc, #100]	; (16fb8 <ccc_load+0x88>)
   16f52:	3001      	adds	r0, #1
   16f54:	f016 f977 	bl	2d246 <bt_addr_le_copy>
	cfg->id = 0U;
   16f58:	7015      	strb	r5, [r2, #0]
	cfg->value = 0U;
   16f5a:	8115      	strh	r5, [r2, #8]
		return BT_GATT_ITER_CONTINUE;
   16f5c:	2001      	movs	r0, #1
}
   16f5e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   16f60:	68e0      	ldr	r0, [r4, #12]
   16f62:	2800      	cmp	r0, #0
   16f64:	d0fb      	beq.n	16f5e <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   16f66:	882b      	ldrh	r3, [r5, #0]
   16f68:	428b      	cmp	r3, r1
   16f6a:	d00a      	beq.n	16f82 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   16f6c:	d2f6      	bcs.n	16f5c <ccc_load+0x2c>
	load->count--;
   16f6e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   16f70:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   16f72:	3801      	subs	r0, #1
	load->entry++;
   16f74:	3304      	adds	r3, #4
	load->count--;
   16f76:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16f78:	3800      	subs	r0, #0
   16f7a:	bf18      	it	ne
   16f7c:	2001      	movne	r0, #1
	load->entry++;
   16f7e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16f80:	e7ed      	b.n	16f5e <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   16f82:	7922      	ldrb	r2, [r4, #4]
   16f84:	4630      	mov	r0, r6
   16f86:	6821      	ldr	r1, [r4, #0]
   16f88:	f016 f937 	bl	2d1fa <ccc_find_cfg>
	if (!cfg) {
   16f8c:	4602      	mov	r2, r0
   16f8e:	b960      	cbnz	r0, 16faa <ccc_load+0x7a>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   16f90:	4630      	mov	r0, r6
   16f92:	4909      	ldr	r1, [pc, #36]	; (16fb8 <ccc_load+0x88>)
   16f94:	f016 f931 	bl	2d1fa <ccc_find_cfg>
		if (!cfg) {
   16f98:	4602      	mov	r2, r0
   16f9a:	2800      	cmp	r0, #0
   16f9c:	d0e7      	beq.n	16f6e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   16f9e:	6821      	ldr	r1, [r4, #0]
   16fa0:	3001      	adds	r0, #1
   16fa2:	f016 f950 	bl	2d246 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   16fa6:	7923      	ldrb	r3, [r4, #4]
   16fa8:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
   16faa:	68a3      	ldr	r3, [r4, #8]
   16fac:	885b      	ldrh	r3, [r3, #2]
   16fae:	8113      	strh	r3, [r2, #8]
   16fb0:	e7dd      	b.n	16f6e <ccc_load+0x3e>
   16fb2:	bf00      	nop
   16fb4:	000176ed 	.word	0x000176ed
   16fb8:	000345f5 	.word	0x000345f5

00016fbc <read_ppcp>:
{
   16fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   16fbe:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16fc0:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
{
   16fc4:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   16fc6:	4a06      	ldr	r2, [pc, #24]	; (16fe0 <read_ppcp+0x24>)
   16fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   16fcc:	2308      	movs	r3, #8
   16fce:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   16fd2:	9300      	str	r3, [sp, #0]
   16fd4:	446b      	add	r3, sp
   16fd6:	f016 f942 	bl	2d25e <bt_gatt_attr_read.constprop.0>
}
   16fda:	b005      	add	sp, #20
   16fdc:	f85d fb04 	ldr.w	pc, [sp], #4
   16fe0:	00280018 	.word	0x00280018

00016fe4 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   16fe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			LOG_ERR("Invalid key");
   16fe6:	4b07      	ldr	r3, [pc, #28]	; (17004 <ccc_set_direct.part.0+0x20>)
   16fe8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16fec:	9305      	str	r3, [sp, #20]
   16fee:	2302      	movs	r3, #2
   16ff0:	4805      	ldr	r0, [pc, #20]	; (17008 <ccc_set_direct.part.0+0x24>)
   16ff2:	aa04      	add	r2, sp, #16
   16ff4:	9304      	str	r3, [sp, #16]
   16ff6:	f016 f9ba 	bl	2d36e <z_log_msg_static_create.constprop.0>
}
   16ffa:	f06f 0015 	mvn.w	r0, #21
   16ffe:	b007      	add	sp, #28
   17000:	f85d fb04 	ldr.w	pc, [sp], #4
   17004:	00035b97 	.word	0x00035b97
   17008:	000314f4 	.word	0x000314f4

0001700c <db_hash_commit>:

	return 0;
}

static int db_hash_commit(void)
{
   1700c:	b5b0      	push	{r4, r5, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1700e:	2108      	movs	r1, #8
   17010:	af00      	add	r7, sp, #0
   17012:	480f      	ldr	r0, [pc, #60]	; (17050 <db_hash_commit+0x44>)
   17014:	f016 f901 	bl	2d21a <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   17018:	2200      	movs	r2, #0
   1701a:	2300      	movs	r3, #0
   1701c:	480d      	ldr	r0, [pc, #52]	; (17054 <db_hash_commit+0x48>)
   1701e:	f7fa fee5 	bl	11dec <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   17022:	1e04      	subs	r4, r0, #0
   17024:	da11      	bge.n	1704a <db_hash_commit+0x3e>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   17026:	466d      	mov	r5, sp
   17028:	b088      	sub	sp, #32
   1702a:	466a      	mov	r2, sp
   1702c:	4b0a      	ldr	r3, [pc, #40]	; (17058 <db_hash_commit+0x4c>)
   1702e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17032:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17036:	2303      	movs	r3, #3
   17038:	4808      	ldr	r0, [pc, #32]	; (1705c <db_hash_commit+0x50>)
   1703a:	f842 3f10 	str.w	r3, [r2, #16]!
   1703e:	f016 f996 	bl	2d36e <z_log_msg_static_create.constprop.0>
   17042:	46ad      	mov	sp, r5
	}

	return err;
}
   17044:	4620      	mov	r0, r4
   17046:	46bd      	mov	sp, r7
   17048:	bdb0      	pop	{r4, r5, r7, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1704a:	2400      	movs	r4, #0
	return err;
   1704c:	e7fa      	b.n	17044 <db_hash_commit+0x38>
   1704e:	bf00      	nop
   17050:	20009f70 	.word	0x20009f70
   17054:	20009ec8 	.word	0x20009ec8
   17058:	00035ba3 	.word	0x00035ba3
   1705c:	000314f4 	.word	0x000314f4

00017060 <sc_set>:
{
   17060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17064:	b08b      	sub	sp, #44	; 0x2c
   17066:	460e      	mov	r6, r1
   17068:	4690      	mov	r8, r2
   1706a:	4699      	mov	r9, r3
	if (!name) {
   1706c:	4604      	mov	r4, r0
{
   1706e:	af00      	add	r7, sp, #0
	if (!name) {
   17070:	b988      	cbnz	r0, 17096 <sc_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   17072:	4b43      	ldr	r3, [pc, #268]	; (17180 <sc_set+0x120>)
   17074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17078:	627b      	str	r3, [r7, #36]	; 0x24
   1707a:	2302      	movs	r3, #2
   1707c:	4841      	ldr	r0, [pc, #260]	; (17184 <sc_set+0x124>)
   1707e:	623b      	str	r3, [r7, #32]
   17080:	f107 0220 	add.w	r2, r7, #32
   17084:	f016 f973 	bl	2d36e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   17088:	f06f 0515 	mvn.w	r5, #21
}
   1708c:	4628      	mov	r0, r5
   1708e:	372c      	adds	r7, #44	; 0x2c
   17090:	46bd      	mov	sp, r7
   17092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   17096:	f107 0108 	add.w	r1, r7, #8
   1709a:	f014 fee6 	bl	2be6a <bt_settings_decode_key>
	if (err) {
   1709e:	4605      	mov	r5, r0
   170a0:	b190      	cbz	r0, 170c8 <sc_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   170a2:	466d      	mov	r5, sp
   170a4:	b088      	sub	sp, #32
   170a6:	466a      	mov	r2, sp
   170a8:	4b37      	ldr	r3, [pc, #220]	; (17188 <sc_set+0x128>)
   170aa:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   170ae:	e9c2 3405 	strd	r3, r4, [r2, #20]
   170b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   170b6:	8393      	strh	r3, [r2, #28]
   170b8:	4b34      	ldr	r3, [pc, #208]	; (1718c <sc_set+0x12c>)
   170ba:	4832      	ldr	r0, [pc, #200]	; (17184 <sc_set+0x124>)
   170bc:	f842 3f10 	str.w	r3, [r2, #16]!
   170c0:	f016 f955 	bl	2d36e <z_log_msg_static_create.constprop.0>
   170c4:	46ad      	mov	sp, r5
		return -EINVAL;
   170c6:	e7df      	b.n	17088 <sc_set+0x28>
	settings_name_next(name, &next);
   170c8:	4620      	mov	r0, r4
   170ca:	1d39      	adds	r1, r7, #4
   170cc:	f014 f927 	bl	2b31e <settings_name_next>
	if (!next) {
   170d0:	6878      	ldr	r0, [r7, #4]
   170d2:	b1a0      	cbz	r0, 170fe <sc_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   170d4:	220a      	movs	r2, #10
   170d6:	4629      	mov	r1, r5
   170d8:	f011 ffae 	bl	29038 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   170dc:	b178      	cbz	r0, 170fe <sc_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   170de:	466c      	mov	r4, sp
   170e0:	b088      	sub	sp, #32
   170e2:	466a      	mov	r2, sp
   170e4:	4b2a      	ldr	r3, [pc, #168]	; (17190 <sc_set+0x130>)
   170e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170ea:	e9c2 3005 	strd	r3, r0, [r2, #20]
   170ee:	2303      	movs	r3, #3
   170f0:	4824      	ldr	r0, [pc, #144]	; (17184 <sc_set+0x124>)
   170f2:	f842 3f10 	str.w	r3, [r2, #16]!
   170f6:	f016 f93a 	bl	2d36e <z_log_msg_static_create.constprop.0>
   170fa:	46a5      	mov	sp, r4
			return -EINVAL;
   170fc:	e7c4      	b.n	17088 <sc_set+0x28>
	cfg = find_sc_cfg(id, &addr);
   170fe:	2000      	movs	r0, #0
   17100:	f107 0108 	add.w	r1, r7, #8
   17104:	f7ff febc 	bl	16e80 <find_sc_cfg>
	if (!cfg && len_rd) {
   17108:	4604      	mov	r4, r0
   1710a:	bb98      	cbnz	r0, 17174 <sc_set+0x114>
   1710c:	2e00      	cmp	r6, #0
   1710e:	d0bd      	beq.n	1708c <sc_set+0x2c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17110:	4920      	ldr	r1, [pc, #128]	; (17194 <sc_set+0x134>)
   17112:	f7ff feb5 	bl	16e80 <find_sc_cfg>
		if (!cfg) {
   17116:	4604      	mov	r4, r0
   17118:	b968      	cbnz	r0, 17136 <sc_set+0xd6>
			LOG_ERR("Unable to restore SC: no cfg left");
   1711a:	4b1f      	ldr	r3, [pc, #124]	; (17198 <sc_set+0x138>)
   1711c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17120:	627b      	str	r3, [r7, #36]	; 0x24
   17122:	2302      	movs	r3, #2
   17124:	4817      	ldr	r0, [pc, #92]	; (17184 <sc_set+0x124>)
   17126:	623b      	str	r3, [r7, #32]
   17128:	f107 0220 	add.w	r2, r7, #32
   1712c:	f016 f91f 	bl	2d36e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   17130:	f06f 050b 	mvn.w	r5, #11
   17134:	e7aa      	b.n	1708c <sc_set+0x2c>
		cfg->id = id;
   17136:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   17138:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   1713c:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   17140:	f016 f881 	bl	2d246 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   17144:	f104 0108 	add.w	r1, r4, #8
   17148:	2204      	movs	r2, #4
   1714a:	4648      	mov	r0, r9
   1714c:	47c0      	blx	r8
		if (len < 0) {
   1714e:	1e04      	subs	r4, r0, #0
   17150:	da9c      	bge.n	1708c <sc_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   17152:	466d      	mov	r5, sp
   17154:	b088      	sub	sp, #32
   17156:	466a      	mov	r2, sp
   17158:	4b10      	ldr	r3, [pc, #64]	; (1719c <sc_set+0x13c>)
   1715a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1715e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17162:	2303      	movs	r3, #3
   17164:	4807      	ldr	r0, [pc, #28]	; (17184 <sc_set+0x124>)
   17166:	f842 3f10 	str.w	r3, [r2, #16]!
   1716a:	f016 f900 	bl	2d36e <z_log_msg_static_create.constprop.0>
   1716e:	46ad      	mov	sp, r5
			return len;
   17170:	4625      	mov	r5, r4
   17172:	e78b      	b.n	1708c <sc_set+0x2c>
	if (len_rd) {
   17174:	2e00      	cmp	r6, #0
   17176:	d1e5      	bne.n	17144 <sc_set+0xe4>
   17178:	6006      	str	r6, [r0, #0]
   1717a:	6046      	str	r6, [r0, #4]
   1717c:	6086      	str	r6, [r0, #8]
   1717e:	e785      	b.n	1708c <sc_set+0x2c>
   17180:	0003464b 	.word	0x0003464b
   17184:	000314f4 	.word	0x000314f4
   17188:	00035bd7 	.word	0x00035bd7
   1718c:	01000003 	.word	0x01000003
   17190:	00035bf3 	.word	0x00035bf3
   17194:	000345f5 	.word	0x000345f5
   17198:	00035c0e 	.word	0x00035c0e
   1719c:	00035c30 	.word	0x00035c30

000171a0 <bt_gatt_clear_sc>:
{
   171a0:	b5b0      	push	{r4, r5, r7, lr}
   171a2:	b08c      	sub	sp, #48	; 0x30
   171a4:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   171a6:	f7ff fe6b 	bl	16e80 <find_sc_cfg>
	if (!cfg) {
   171aa:	4604      	mov	r4, r0
   171ac:	b320      	cbz	r0, 171f8 <bt_gatt_clear_sc+0x58>
		if (cfg->id) {
   171ae:	4605      	mov	r5, r0
   171b0:	f815 2b01 	ldrb.w	r2, [r5], #1
   171b4:	b322      	cbz	r2, 17200 <bt_gatt_clear_sc+0x60>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   171b6:	2104      	movs	r1, #4
   171b8:	4638      	mov	r0, r7
   171ba:	f013 f83e 	bl	2a23a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   171be:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   171c0:	1d38      	adds	r0, r7, #4
   171c2:	462b      	mov	r3, r5
   171c4:	2124      	movs	r1, #36	; 0x24
   171c6:	4a0f      	ldr	r2, [pc, #60]	; (17204 <bt_gatt_clear_sc+0x64>)
   171c8:	f7fa fd56 	bl	11c78 <bt_settings_encode_key>
		err = settings_delete(key);
   171cc:	1d38      	adds	r0, r7, #4
   171ce:	f014 f87e 	bl	2b2ce <settings_delete>
		if (err) {
   171d2:	b170      	cbz	r0, 171f2 <bt_gatt_clear_sc+0x52>
			LOG_ERR("failed to delete SC (err %d)", err);
   171d4:	466d      	mov	r5, sp
   171d6:	b088      	sub	sp, #32
   171d8:	aa02      	add	r2, sp, #8
   171da:	4b0b      	ldr	r3, [pc, #44]	; (17208 <bt_gatt_clear_sc+0x68>)
   171dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   171e0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   171e4:	2303      	movs	r3, #3
   171e6:	4809      	ldr	r0, [pc, #36]	; (1720c <bt_gatt_clear_sc+0x6c>)
   171e8:	f842 3f10 	str.w	r3, [r2, #16]!
   171ec:	f016 f8bf 	bl	2d36e <z_log_msg_static_create.constprop.0>
   171f0:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   171f2:	4620      	mov	r0, r4
   171f4:	f016 f82e 	bl	2d254 <clear_sc_cfg>
}
   171f8:	2000      	movs	r0, #0
   171fa:	3728      	adds	r7, #40	; 0x28
   171fc:	46bd      	mov	sp, r7
   171fe:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   17200:	9200      	str	r2, [sp, #0]
   17202:	e7dd      	b.n	171c0 <bt_gatt_clear_sc+0x20>
   17204:	00035fe1 	.word	0x00035fe1
   17208:	00035c51 	.word	0x00035c51
   1720c:	000314f4 	.word	0x000314f4

00017210 <sc_clear>:
{
   17210:	b5b0      	push	{r4, r5, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17212:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   17216:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17218:	4629      	mov	r1, r5
   1721a:	7a00      	ldrb	r0, [r0, #8]
{
   1721c:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1721e:	f014 ffa4 	bl	2c16a <bt_addr_le_is_bonded>
   17222:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   17224:	4629      	mov	r1, r5
   17226:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17228:	b19b      	cbz	r3, 17252 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1722a:	f7ff ffb9 	bl	171a0 <bt_gatt_clear_sc>
		if (err) {
   1722e:	b170      	cbz	r0, 1724e <sc_clear+0x3e>
			LOG_ERR("Failed to clear SC %d", err);
   17230:	466c      	mov	r4, sp
   17232:	b088      	sub	sp, #32
   17234:	466a      	mov	r2, sp
   17236:	4b0a      	ldr	r3, [pc, #40]	; (17260 <sc_clear+0x50>)
   17238:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1723c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17240:	2303      	movs	r3, #3
   17242:	4808      	ldr	r0, [pc, #32]	; (17264 <sc_clear+0x54>)
   17244:	f842 3f10 	str.w	r3, [r2, #16]!
   17248:	f016 f891 	bl	2d36e <z_log_msg_static_create.constprop.0>
   1724c:	46a5      	mov	sp, r4
}
   1724e:	46bd      	mov	sp, r7
   17250:	bdb0      	pop	{r4, r5, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17252:	f7ff fe15 	bl	16e80 <find_sc_cfg>
		if (cfg) {
   17256:	2800      	cmp	r0, #0
   17258:	d0f9      	beq.n	1724e <sc_clear+0x3e>
			clear_sc_cfg(cfg);
   1725a:	f015 fffb 	bl	2d254 <clear_sc_cfg>
}
   1725e:	e7f6      	b.n	1724e <sc_clear+0x3e>
   17260:	00035c6e 	.word	0x00035c6e
   17264:	000314f4 	.word	0x000314f4

00017268 <sc_store>:
{
   17268:	b5b0      	push	{r4, r5, r7, lr}
   1726a:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1726c:	4605      	mov	r5, r0
   1726e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   17272:	4604      	mov	r4, r0
   17274:	af02      	add	r7, sp, #8
	if (cfg->id) {
   17276:	b31a      	cbz	r2, 172c0 <sc_store+0x58>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   17278:	2104      	movs	r1, #4
   1727a:	4638      	mov	r0, r7
   1727c:	f012 ffdd 	bl	2a23a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   17280:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   17282:	2124      	movs	r1, #36	; 0x24
   17284:	4a0f      	ldr	r2, [pc, #60]	; (172c4 <sc_store+0x5c>)
   17286:	1d38      	adds	r0, r7, #4
   17288:	462b      	mov	r3, r5
   1728a:	f7fa fcf5 	bl	11c78 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1728e:	2204      	movs	r2, #4
   17290:	f104 0108 	add.w	r1, r4, #8
   17294:	18b8      	adds	r0, r7, r2
   17296:	f7f8 fda5 	bl	fde4 <settings_save_one>
	if (err) {
   1729a:	b170      	cbz	r0, 172ba <sc_store+0x52>
		LOG_ERR("failed to store SC (err %d)", err);
   1729c:	466c      	mov	r4, sp
   1729e:	b088      	sub	sp, #32
   172a0:	aa02      	add	r2, sp, #8
   172a2:	4b09      	ldr	r3, [pc, #36]	; (172c8 <sc_store+0x60>)
   172a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   172a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   172ac:	2303      	movs	r3, #3
   172ae:	4807      	ldr	r0, [pc, #28]	; (172cc <sc_store+0x64>)
   172b0:	f842 3f10 	str.w	r3, [r2, #16]!
   172b4:	f016 f85b 	bl	2d36e <z_log_msg_static_create.constprop.0>
   172b8:	46a5      	mov	sp, r4
}
   172ba:	3728      	adds	r7, #40	; 0x28
   172bc:	46bd      	mov	sp, r7
   172be:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   172c0:	9200      	str	r2, [sp, #0]
   172c2:	e7de      	b.n	17282 <sc_store+0x1a>
   172c4:	00035fe1 	.word	0x00035fe1
   172c8:	00035c84 	.word	0x00035c84
   172cc:	000314f4 	.word	0x000314f4

000172d0 <sc_save>:
{
   172d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172d4:	b086      	sub	sp, #24
   172d6:	4680      	mov	r8, r0
   172d8:	460f      	mov	r7, r1
   172da:	4616      	mov	r6, r2
   172dc:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   172de:	f7ff fdcf 	bl	16e80 <find_sc_cfg>
	if (!cfg) {
   172e2:	4604      	mov	r4, r0
   172e4:	b9b0      	cbnz	r0, 17314 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   172e6:	4919      	ldr	r1, [pc, #100]	; (1734c <sc_save+0x7c>)
   172e8:	f7ff fdca 	bl	16e80 <find_sc_cfg>
		if (!cfg) {
   172ec:	4604      	mov	r4, r0
   172ee:	b960      	cbnz	r0, 1730a <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   172f0:	4b17      	ldr	r3, [pc, #92]	; (17350 <sc_save+0x80>)
   172f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172f6:	9305      	str	r3, [sp, #20]
   172f8:	2302      	movs	r3, #2
   172fa:	4816      	ldr	r0, [pc, #88]	; (17354 <sc_save+0x84>)
   172fc:	aa04      	add	r2, sp, #16
   172fe:	9304      	str	r3, [sp, #16]
   17300:	f016 f835 	bl	2d36e <z_log_msg_static_create.constprop.0>
}
   17304:	b006      	add	sp, #24
   17306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1730a:	4639      	mov	r1, r7
		cfg->id = id;
   1730c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17310:	f015 ff99 	bl	2d246 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17314:	8922      	ldrh	r2, [r4, #8]
   17316:	8963      	ldrh	r3, [r4, #10]
   17318:	b97a      	cbnz	r2, 1733a <sc_save+0x6a>
   1731a:	b983      	cbnz	r3, 1733e <sc_save+0x6e>
		cfg->data.start = start;
   1731c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1731e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   17320:	4621      	mov	r1, r4
   17322:	f811 0b01 	ldrb.w	r0, [r1], #1
   17326:	f014 ff20 	bl	2c16a <bt_addr_le_is_bonded>
   1732a:	2800      	cmp	r0, #0
   1732c:	d0ea      	beq.n	17304 <sc_save+0x34>
		sc_store(cfg);
   1732e:	4620      	mov	r0, r4
}
   17330:	b006      	add	sp, #24
   17332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   17336:	f7ff bf97 	b.w	17268 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1733a:	4296      	cmp	r6, r2
   1733c:	d302      	bcc.n	17344 <sc_save+0x74>
   1733e:	429d      	cmp	r5, r3
   17340:	d8ed      	bhi.n	1731e <sc_save+0x4e>
   17342:	e7df      	b.n	17304 <sc_save+0x34>
	if (*end < new_end) {
   17344:	429d      	cmp	r5, r3
		*start = new_start;
   17346:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17348:	d9ea      	bls.n	17320 <sc_save+0x50>
   1734a:	e7e8      	b.n	1731e <sc_save+0x4e>
   1734c:	000345f5 	.word	0x000345f5
   17350:	00035ca0 	.word	0x00035ca0
   17354:	000314f4 	.word	0x000314f4

00017358 <cf_write>:
{
   17358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1735c:	b086      	sub	sp, #24
   1735e:	461f      	mov	r7, r3
   17360:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   17364:	4606      	mov	r6, r0
	if (offset > sizeof(cfg->data)) {
   17366:	2b01      	cmp	r3, #1
{
   17368:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1736a:	d83c      	bhi.n	173e6 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1736c:	443b      	add	r3, r7
   1736e:	2b01      	cmp	r3, #1
   17370:	463d      	mov	r5, r7
   17372:	dc3b      	bgt.n	173ec <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   17374:	f7ff fd56 	bl	16e24 <find_cf_cfg>
	if (!cfg) {
   17378:	4604      	mov	r4, r0
   1737a:	b998      	cbnz	r0, 173a4 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1737c:	f7ff fd52 	bl	16e24 <find_cf_cfg>
	if (!cfg) {
   17380:	4604      	mov	r4, r0
   17382:	b978      	cbnz	r0, 173a4 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   17384:	4b1c      	ldr	r3, [pc, #112]	; (173f8 <cf_write+0xa0>)
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17386:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1738a:	9305      	str	r3, [sp, #20]
   1738c:	2302      	movs	r3, #2
   1738e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17392:	481a      	ldr	r0, [pc, #104]	; (173fc <cf_write+0xa4>)
   17394:	aa04      	add	r2, sp, #16
   17396:	9304      	str	r3, [sp, #16]
   17398:	f015 ffe9 	bl	2d36e <z_log_msg_static_create.constprop.0>
}
   1739c:	4628      	mov	r0, r5
   1739e:	b006      	add	sp, #24
   173a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   173a4:	b197      	cbz	r7, 173cc <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   173a6:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   173a8:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   173aa:	f898 2000 	ldrb.w	r2, [r8]
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   173ae:	fa21 f003 	lsr.w	r0, r1, r3
   173b2:	07c7      	lsls	r7, r0, #31
   173b4:	d503      	bpl.n	173be <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   173b6:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   173ba:	07c0      	lsls	r0, r0, #31
   173bc:	d519      	bpl.n	173f2 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   173be:	3301      	adds	r3, #1
   173c0:	2b03      	cmp	r3, #3
   173c2:	d1f4      	bne.n	173ae <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   173c4:	f002 0207 	and.w	r2, r2, #7
   173c8:	4311      	orrs	r1, r2
   173ca:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   173cc:	f106 0190 	add.w	r1, r6, #144	; 0x90
   173d0:	1c60      	adds	r0, r4, #1
   173d2:	f015 ff38 	bl	2d246 <bt_addr_le_copy>
	cfg->id = conn->id;
   173d6:	4620      	mov	r0, r4
   173d8:	7a33      	ldrb	r3, [r6, #8]
   173da:	2101      	movs	r1, #1
   173dc:	f800 3b0c 	strb.w	r3, [r0], #12
   173e0:	f015 ff1b 	bl	2d21a <atomic_or>
}
   173e4:	e7da      	b.n	1739c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   173e6:	f06f 0506 	mvn.w	r5, #6
   173ea:	e7d7      	b.n	1739c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   173ec:	f06f 050c 	mvn.w	r5, #12
   173f0:	e7d4      	b.n	1739c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   173f2:	f06f 0512 	mvn.w	r5, #18
   173f6:	e7d1      	b.n	1739c <cf_write+0x44>
   173f8:	00035cbf 	.word	0x00035cbf
   173fc:	000314f4 	.word	0x000314f4

00017400 <db_hash_store>:
{
   17400:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   17402:	2210      	movs	r2, #16
{
   17404:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   17406:	490b      	ldr	r1, [pc, #44]	; (17434 <db_hash_store+0x34>)
   17408:	480b      	ldr	r0, [pc, #44]	; (17438 <db_hash_store+0x38>)
   1740a:	f7f8 fceb 	bl	fde4 <settings_save_one>
	if (err) {
   1740e:	b170      	cbz	r0, 1742e <db_hash_store+0x2e>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   17410:	466c      	mov	r4, sp
   17412:	b088      	sub	sp, #32
   17414:	466a      	mov	r2, sp
   17416:	4b09      	ldr	r3, [pc, #36]	; (1743c <db_hash_store+0x3c>)
   17418:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1741c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17420:	2303      	movs	r3, #3
   17422:	4807      	ldr	r0, [pc, #28]	; (17440 <db_hash_store+0x40>)
   17424:	f842 3f10 	str.w	r3, [r2, #16]!
   17428:	f015 ffa1 	bl	2d36e <z_log_msg_static_create.constprop.0>
   1742c:	46a5      	mov	sp, r4
}
   1742e:	46bd      	mov	sp, r7
   17430:	bd98      	pop	{r3, r4, r7, pc}
   17432:	bf00      	nop
   17434:	20009ea8 	.word	0x20009ea8
   17438:	00035ceb 	.word	0x00035ceb
   1743c:	00035cf3 	.word	0x00035cf3
   17440:	000314f4 	.word	0x000314f4

00017444 <db_hash_set>:
{
   17444:	b5b0      	push	{r4, r5, r7, lr}
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17446:	4618      	mov	r0, r3
{
   17448:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1744a:	490d      	ldr	r1, [pc, #52]	; (17480 <db_hash_set+0x3c>)
   1744c:	2210      	movs	r2, #16
{
   1744e:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   17450:	47a0      	blx	r4
	if (len < 0) {
   17452:	1e04      	subs	r4, r0, #0
   17454:	da11      	bge.n	1747a <db_hash_set+0x36>
		LOG_ERR("Failed to decode value (err %zd)", len);
   17456:	466d      	mov	r5, sp
   17458:	b088      	sub	sp, #32
   1745a:	466a      	mov	r2, sp
   1745c:	4b09      	ldr	r3, [pc, #36]	; (17484 <db_hash_set+0x40>)
   1745e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17462:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17466:	2303      	movs	r3, #3
   17468:	4807      	ldr	r0, [pc, #28]	; (17488 <db_hash_set+0x44>)
   1746a:	f842 3f10 	str.w	r3, [r2, #16]!
   1746e:	f015 ff7e 	bl	2d36e <z_log_msg_static_create.constprop.0>
   17472:	46ad      	mov	sp, r5
}
   17474:	4620      	mov	r0, r4
   17476:	46bd      	mov	sp, r7
   17478:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1747a:	2400      	movs	r4, #0
   1747c:	e7fa      	b.n	17474 <db_hash_set+0x30>
   1747e:	bf00      	nop
   17480:	20009eb8 	.word	0x20009eb8
   17484:	00035c30 	.word	0x00035c30
   17488:	000314f4 	.word	0x000314f4

0001748c <clear_cf_cfg>:
{
   1748c:	4602      	mov	r2, r0
   1748e:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17490:	4907      	ldr	r1, [pc, #28]	; (174b0 <clear_cf_cfg+0x24>)
   17492:	3001      	adds	r0, #1
   17494:	f015 fed7 	bl	2d246 <bt_addr_le_copy>
   17498:	2300      	movs	r3, #0
   1749a:	320c      	adds	r2, #12
   1749c:	f802 3c04 	strb.w	r3, [r2, #-4]
   174a0:	e8d2 1fef 	ldaex	r1, [r2]
   174a4:	e8c2 3fe0 	stlex	r0, r3, [r2]
   174a8:	2800      	cmp	r0, #0
   174aa:	d1f9      	bne.n	174a0 <clear_cf_cfg+0x14>
}
   174ac:	bd08      	pop	{r3, pc}
   174ae:	bf00      	nop
   174b0:	000345f5 	.word	0x000345f5

000174b4 <cf_set>:
{
   174b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   174b8:	b08b      	sub	sp, #44	; 0x2c
   174ba:	4689      	mov	r9, r1
   174bc:	4616      	mov	r6, r2
   174be:	4698      	mov	r8, r3
	if (!name) {
   174c0:	4604      	mov	r4, r0
{
   174c2:	af00      	add	r7, sp, #0
	if (!name) {
   174c4:	b988      	cbnz	r0, 174ea <cf_set+0x36>
		LOG_ERR("Insufficient number of arguments");
   174c6:	4b42      	ldr	r3, [pc, #264]	; (175d0 <cf_set+0x11c>)
   174c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   174cc:	627b      	str	r3, [r7, #36]	; 0x24
   174ce:	2302      	movs	r3, #2
   174d0:	4840      	ldr	r0, [pc, #256]	; (175d4 <cf_set+0x120>)
   174d2:	623b      	str	r3, [r7, #32]
   174d4:	f107 0220 	add.w	r2, r7, #32
   174d8:	f015 ff49 	bl	2d36e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   174dc:	f06f 0515 	mvn.w	r5, #21
}
   174e0:	4628      	mov	r0, r5
   174e2:	372c      	adds	r7, #44	; 0x2c
   174e4:	46bd      	mov	sp, r7
   174e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   174ea:	f107 0108 	add.w	r1, r7, #8
   174ee:	f014 fcbc 	bl	2be6a <bt_settings_decode_key>
	if (err) {
   174f2:	4605      	mov	r5, r0
   174f4:	b190      	cbz	r0, 1751c <cf_set+0x68>
		LOG_ERR("Unable to decode address %s", name);
   174f6:	466d      	mov	r5, sp
   174f8:	b088      	sub	sp, #32
   174fa:	466a      	mov	r2, sp
   174fc:	4b36      	ldr	r3, [pc, #216]	; (175d8 <cf_set+0x124>)
   174fe:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17502:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17506:	f44f 7300 	mov.w	r3, #512	; 0x200
   1750a:	8393      	strh	r3, [r2, #28]
   1750c:	4b33      	ldr	r3, [pc, #204]	; (175dc <cf_set+0x128>)
   1750e:	4831      	ldr	r0, [pc, #196]	; (175d4 <cf_set+0x120>)
   17510:	f842 3f10 	str.w	r3, [r2, #16]!
   17514:	f015 ff2b 	bl	2d36e <z_log_msg_static_create.constprop.0>
   17518:	46ad      	mov	sp, r5
		return -EINVAL;
   1751a:	e7df      	b.n	174dc <cf_set+0x28>
	settings_name_next(name, &next);
   1751c:	4620      	mov	r0, r4
   1751e:	1d39      	adds	r1, r7, #4
   17520:	f013 fefd 	bl	2b31e <settings_name_next>
	if (!next) {
   17524:	6878      	ldr	r0, [r7, #4]
   17526:	b1a0      	cbz	r0, 17552 <cf_set+0x9e>
		unsigned long next_id = strtoul(next, NULL, 10);
   17528:	220a      	movs	r2, #10
   1752a:	4629      	mov	r1, r5
   1752c:	f011 fd84 	bl	29038 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   17530:	b178      	cbz	r0, 17552 <cf_set+0x9e>
			LOG_ERR("Invalid local identity %lu", next_id);
   17532:	466c      	mov	r4, sp
   17534:	b088      	sub	sp, #32
   17536:	466a      	mov	r2, sp
   17538:	4b29      	ldr	r3, [pc, #164]	; (175e0 <cf_set+0x12c>)
   1753a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1753e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17542:	2303      	movs	r3, #3
   17544:	4823      	ldr	r0, [pc, #140]	; (175d4 <cf_set+0x120>)
   17546:	f842 3f10 	str.w	r3, [r2, #16]!
   1754a:	f015 ff10 	bl	2d36e <z_log_msg_static_create.constprop.0>
   1754e:	46a5      	mov	sp, r4
			return -EINVAL;
   17550:	e7c4      	b.n	174dc <cf_set+0x28>
	cfg = find_cf_cfg_by_addr(id, &addr);
   17552:	2000      	movs	r0, #0
   17554:	f107 0108 	add.w	r1, r7, #8
   17558:	f7ff fcc8 	bl	16eec <find_cf_cfg_by_addr>
	if (!cfg) {
   1755c:	4604      	mov	r4, r0
   1755e:	b9c0      	cbnz	r0, 17592 <cf_set+0xde>
		cfg = find_cf_cfg(NULL);
   17560:	f7ff fc60 	bl	16e24 <find_cf_cfg>
		if (!cfg) {
   17564:	4604      	mov	r4, r0
   17566:	b968      	cbnz	r0, 17584 <cf_set+0xd0>
			LOG_ERR("Unable to restore CF: no cfg left");
   17568:	4b1e      	ldr	r3, [pc, #120]	; (175e4 <cf_set+0x130>)
   1756a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1756e:	627b      	str	r3, [r7, #36]	; 0x24
   17570:	2302      	movs	r3, #2
   17572:	4818      	ldr	r0, [pc, #96]	; (175d4 <cf_set+0x120>)
   17574:	623b      	str	r3, [r7, #32]
   17576:	f107 0220 	add.w	r2, r7, #32
   1757a:	f015 fef8 	bl	2d36e <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1757e:	f06f 050b 	mvn.w	r5, #11
   17582:	e7ad      	b.n	174e0 <cf_set+0x2c>
		cfg->id = id;
   17584:	2300      	movs	r3, #0
		bt_addr_le_copy(&cfg->peer, &addr);
   17586:	f107 0108 	add.w	r1, r7, #8
		cfg->id = id;
   1758a:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1758e:	f015 fe5a 	bl	2d246 <bt_addr_le_copy>
	if (len_rd) {
   17592:	f1b9 0f00 	cmp.w	r9, #0
   17596:	d017      	beq.n	175c8 <cf_set+0x114>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   17598:	f104 0108 	add.w	r1, r4, #8
   1759c:	2201      	movs	r2, #1
   1759e:	4640      	mov	r0, r8
   175a0:	47b0      	blx	r6
		if (len < 0) {
   175a2:	1e04      	subs	r4, r0, #0
   175a4:	da9c      	bge.n	174e0 <cf_set+0x2c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   175a6:	466d      	mov	r5, sp
   175a8:	b088      	sub	sp, #32
   175aa:	466a      	mov	r2, sp
   175ac:	4b0e      	ldr	r3, [pc, #56]	; (175e8 <cf_set+0x134>)
   175ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   175b2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   175b6:	2303      	movs	r3, #3
   175b8:	4806      	ldr	r0, [pc, #24]	; (175d4 <cf_set+0x120>)
   175ba:	f842 3f10 	str.w	r3, [r2, #16]!
   175be:	f015 fed6 	bl	2d36e <z_log_msg_static_create.constprop.0>
   175c2:	46ad      	mov	sp, r5
			return len;
   175c4:	4625      	mov	r5, r4
   175c6:	e78b      	b.n	174e0 <cf_set+0x2c>
		clear_cf_cfg(cfg);
   175c8:	4620      	mov	r0, r4
   175ca:	f7ff ff5f 	bl	1748c <clear_cf_cfg>
   175ce:	e787      	b.n	174e0 <cf_set+0x2c>
   175d0:	0003464b 	.word	0x0003464b
   175d4:	000314f4 	.word	0x000314f4
   175d8:	00035bd7 	.word	0x00035bd7
   175dc:	01000003 	.word	0x01000003
   175e0:	00035bf3 	.word	0x00035bf3
   175e4:	00035d19 	.word	0x00035d19
   175e8:	00035c30 	.word	0x00035c30

000175ec <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   175ec:	b508      	push	{r3, lr}
   175ee:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   175f0:	6881      	ldr	r1, [r0, #8]
   175f2:	4a07      	ldr	r2, [pc, #28]	; (17610 <remove_peer_from_attr+0x24>)
   175f4:	4291      	cmp	r1, r2
   175f6:	d109      	bne.n	1760c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   175f8:	791a      	ldrb	r2, [r3, #4]
   175fa:	6819      	ldr	r1, [r3, #0]
   175fc:	68c0      	ldr	r0, [r0, #12]
   175fe:	f015 fdfc 	bl	2d1fa <ccc_find_cfg>
	if (cfg) {
   17602:	b118      	cbz	r0, 1760c <remove_peer_from_attr+0x20>
   17604:	2300      	movs	r3, #0
   17606:	6003      	str	r3, [r0, #0]
   17608:	6043      	str	r3, [r0, #4]
   1760a:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1760c:	2001      	movs	r0, #1
   1760e:	bd08      	pop	{r3, pc}
   17610:	000176ed 	.word	0x000176ed

00017614 <ccc_save>:
{
   17614:	b538      	push	{r3, r4, r5, lr}
   17616:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17618:	4b0b      	ldr	r3, [pc, #44]	; (17648 <ccc_save+0x34>)
   1761a:	6882      	ldr	r2, [r0, #8]
{
   1761c:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1761e:	429a      	cmp	r2, r3
   17620:	d10f      	bne.n	17642 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   17622:	7922      	ldrb	r2, [r4, #4]
   17624:	6821      	ldr	r1, [r4, #0]
   17626:	68c0      	ldr	r0, [r0, #12]
   17628:	f015 fde7 	bl	2d1fa <ccc_find_cfg>
	if (!cfg) {
   1762c:	b148      	cbz	r0, 17642 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1762e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   17632:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   17636:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   17638:	8901      	ldrh	r1, [r0, #8]
	save->count++;
   1763a:	3301      	adds	r3, #1
	save->store[save->count].value = cfg->value;
   1763c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1763e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   17642:	2001      	movs	r0, #1
   17644:	bd38      	pop	{r3, r4, r5, pc}
   17646:	bf00      	nop
   17648:	000176ed 	.word	0x000176ed

0001764c <disconnected_cb>:
{
   1764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17650:	4b23      	ldr	r3, [pc, #140]	; (176e0 <disconnected_cb+0x94>)
{
   17652:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17654:	6882      	ldr	r2, [r0, #8]
{
   17656:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17658:	429a      	cmp	r2, r3
   1765a:	d102      	bne.n	17662 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1765c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1765e:	8963      	ldrh	r3, [r4, #10]
   17660:	bb33      	cbnz	r3, 176b0 <disconnected_cb+0x64>
}
   17662:	2001      	movs	r0, #1
   17664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   17668:	f7fd fbfc 	bl	14e64 <bt_conn_unref>
		ccc->value = 0U;
   1766c:	2100      	movs	r1, #0
		if (ccc->cfg_changed) {
   1766e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17670:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17672:	2b00      	cmp	r3, #0
   17674:	d0f5      	beq.n	17662 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   17676:	4638      	mov	r0, r7
   17678:	4798      	blx	r3
   1767a:	e7f2      	b.n	17662 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1767c:	f105 0890 	add.w	r8, r5, #144	; 0x90
   17680:	4641      	mov	r1, r8
   17682:	7a28      	ldrb	r0, [r5, #8]
   17684:	f014 fd71 	bl	2c16a <bt_addr_le_is_bonded>
   17688:	b968      	cbnz	r0, 176a6 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1768a:	4b16      	ldr	r3, [pc, #88]	; (176e4 <disconnected_cb+0x98>)
   1768c:	429c      	cmp	r4, r3
   1768e:	d102      	bne.n	17696 <disconnected_cb+0x4a>
					sc_clear(conn);
   17690:	4628      	mov	r0, r5
   17692:	f7ff fdbd 	bl	17210 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   17696:	4630      	mov	r0, r6
   17698:	4913      	ldr	r1, [pc, #76]	; (176e8 <disconnected_cb+0x9c>)
   1769a:	f015 fdd4 	bl	2d246 <bt_addr_le_copy>
	cfg->id = 0U;
   1769e:	2300      	movs	r3, #0
   176a0:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   176a2:	8123      	strh	r3, [r4, #8]
}
   176a4:	e7e2      	b.n	1766c <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   176a6:	4641      	mov	r1, r8
   176a8:	4630      	mov	r0, r6
   176aa:	f015 fdcc 	bl	2d246 <bt_addr_le_copy>
   176ae:	e7dd      	b.n	1766c <disconnected_cb+0x20>
		if (!cfg->value) {
   176b0:	8923      	ldrh	r3, [r4, #8]
   176b2:	2b00      	cmp	r3, #0
   176b4:	d0da      	beq.n	1766c <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   176b6:	4626      	mov	r6, r4
   176b8:	f816 1b01 	ldrb.w	r1, [r6], #1
   176bc:	4628      	mov	r0, r5
   176be:	4632      	mov	r2, r6
   176c0:	f014 fff3 	bl	2c6aa <bt_conn_is_peer_addr_le>
   176c4:	2800      	cmp	r0, #0
   176c6:	d1d9      	bne.n	1767c <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   176c8:	4631      	mov	r1, r6
   176ca:	7820      	ldrb	r0, [r4, #0]
   176cc:	f7fd fea6 	bl	1541c <bt_conn_lookup_addr_le>
			if (tmp) {
   176d0:	2800      	cmp	r0, #0
   176d2:	d0cb      	beq.n	1766c <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   176d4:	7b43      	ldrb	r3, [r0, #13]
   176d6:	2b07      	cmp	r3, #7
   176d8:	d1c6      	bne.n	17668 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   176da:	f7fd fbc3 	bl	14e64 <bt_conn_unref>
	if (!value_used) {
   176de:	e7c0      	b.n	17662 <disconnected_cb+0x16>
   176e0:	000176ed 	.word	0x000176ed
   176e4:	20008524 	.word	0x20008524
   176e8:	000345f5 	.word	0x000345f5

000176ec <bt_gatt_attr_write_ccc>:
{
   176ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176f0:	b086      	sub	sp, #24
   176f2:	461f      	mov	r7, r3
   176f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   176f8:	4605      	mov	r5, r0
   176fa:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   176fc:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   17700:	2b00      	cmp	r3, #0
   17702:	d16d      	bne.n	177e0 <bt_gatt_attr_write_ccc+0xf4>
	if (!len || len > sizeof(uint16_t)) {
   17704:	1e7b      	subs	r3, r7, #1
   17706:	2b01      	cmp	r3, #1
   17708:	d86d      	bhi.n	177e6 <bt_gatt_attr_write_ccc+0xfa>
	if (len < sizeof(uint16_t)) {
   1770a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1770c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1770e:	7816      	ldrb	r6, [r2, #0]
   17710:	bf18      	it	ne
   17712:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   17714:	f7ff fbd6 	bl	16ec4 <find_ccc_cfg>
	if (!cfg) {
   17718:	4604      	mov	r4, r0
   1771a:	b9e8      	cbnz	r0, 17758 <bt_gatt_attr_write_ccc+0x6c>
		if (!value) {
   1771c:	b91e      	cbnz	r6, 17726 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1771e:	4638      	mov	r0, r7
}
   17720:	b006      	add	sp, #24
   17722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   17726:	4649      	mov	r1, r9
   17728:	f7ff fbcc 	bl	16ec4 <find_ccc_cfg>
		if (!cfg) {
   1772c:	4604      	mov	r4, r0
   1772e:	b960      	cbnz	r0, 1774a <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   17730:	4b2e      	ldr	r3, [pc, #184]	; (177ec <bt_gatt_attr_write_ccc+0x100>)
   17732:	482f      	ldr	r0, [pc, #188]	; (177f0 <bt_gatt_attr_write_ccc+0x104>)
   17734:	9305      	str	r3, [sp, #20]
   17736:	2302      	movs	r3, #2
   17738:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1773c:	aa04      	add	r2, sp, #16
   1773e:	9304      	str	r3, [sp, #16]
   17740:	f015 fe15 	bl	2d36e <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17744:	f06f 0010 	mvn.w	r0, #16
   17748:	e7ea      	b.n	17720 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1774a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1774e:	3001      	adds	r0, #1
   17750:	f015 fd79 	bl	2d246 <bt_addr_le_copy>
		cfg->id = conn->id;
   17754:	7a2b      	ldrb	r3, [r5, #8]
   17756:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17758:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1775c:	bba3      	cbnz	r3, 177c8 <bt_gatt_attr_write_ccc+0xdc>
	value_changed = cfg->value != value;
   1775e:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   17762:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   17764:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   17768:	42b3      	cmp	r3, r6
   1776a:	d003      	beq.n	17774 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
   1776c:	4649      	mov	r1, r9
   1776e:	4640      	mov	r0, r8
   17770:	f015 fcc5 	bl	2d0fe <gatt_ccc_changed>
	if (value_changed) {
   17774:	45b2      	cmp	sl, r6
   17776:	d01e      	beq.n	177b6 <bt_gatt_attr_write_ccc+0xca>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   17778:	4628      	mov	r0, r5
   1777a:	f7fd fc9f 	bl	150bc <bt_conn_index>
   1777e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 177f4 <bt_gatt_attr_write_ccc+0x108>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17782:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   17786:	429d      	cmp	r5, r3
   17788:	d015      	beq.n	177b6 <bt_gatt_attr_write_ccc+0xca>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1778a:	7a28      	ldrb	r0, [r5, #8]
   1778c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   17790:	f014 fceb 	bl	2c16a <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   17794:	b178      	cbz	r0, 177b6 <bt_gatt_attr_write_ccc+0xca>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   17796:	4628      	mov	r0, r5
   17798:	f7fd fc90 	bl	150bc <bt_conn_index>
   1779c:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1779e:	4628      	mov	r0, r5
   177a0:	f7fd fb38 	bl	14e14 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   177a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   177a8:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   177ac:	2300      	movs	r3, #0
   177ae:	f108 0008 	add.w	r0, r8, #8
   177b2:	f00e fcb9 	bl	26128 <k_work_reschedule>
	if (!value) {
   177b6:	2e00      	cmp	r6, #0
   177b8:	d1b1      	bne.n	1771e <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   177ba:	490f      	ldr	r1, [pc, #60]	; (177f8 <bt_gatt_attr_write_ccc+0x10c>)
   177bc:	1c60      	adds	r0, r4, #1
   177be:	f015 fd42 	bl	2d246 <bt_addr_le_copy>
	cfg->id = 0U;
   177c2:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   177c4:	8126      	strh	r6, [r4, #8]
}
   177c6:	e7aa      	b.n	1771e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   177c8:	4632      	mov	r2, r6
   177ca:	4641      	mov	r1, r8
   177cc:	4628      	mov	r0, r5
   177ce:	4798      	blx	r3
		if (write < 0) {
   177d0:	2800      	cmp	r0, #0
   177d2:	dba5      	blt.n	17720 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   177d4:	3801      	subs	r0, #1
   177d6:	2801      	cmp	r0, #1
   177d8:	d9c1      	bls.n	1775e <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   177da:	f06f 000d 	mvn.w	r0, #13
   177de:	e79f      	b.n	17720 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   177e0:	f06f 0006 	mvn.w	r0, #6
   177e4:	e79c      	b.n	17720 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   177e6:	f06f 000c 	mvn.w	r0, #12
   177ea:	e799      	b.n	17720 <bt_gatt_attr_write_ccc+0x34>
   177ec:	00035d3b 	.word	0x00035d3b
   177f0:	000314f4 	.word	0x000314f4
   177f4:	20009e70 	.word	0x20009e70
   177f8:	000345f5 	.word	0x000345f5

000177fc <sc_commit>:
{
   177fc:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   177fe:	f06f 0102 	mvn.w	r1, #2
   17802:	4808      	ldr	r0, [pc, #32]	; (17824 <sc_commit+0x28>)
   17804:	f015 fd14 	bl	2d230 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17808:	4806      	ldr	r0, [pc, #24]	; (17824 <sc_commit+0x28>)
   1780a:	f015 fd03 	bl	2d214 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1780e:	07c3      	lsls	r3, r0, #31
   17810:	d505      	bpl.n	1781e <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17812:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17816:	2300      	movs	r3, #0
   17818:	4803      	ldr	r0, [pc, #12]	; (17828 <sc_commit+0x2c>)
   1781a:	f00e fc85 	bl	26128 <k_work_reschedule>
}
   1781e:	2000      	movs	r0, #0
   17820:	bd08      	pop	{r3, pc}
   17822:	bf00      	nop
   17824:	20009f70 	.word	0x20009f70
   17828:	20009f40 	.word	0x20009f40

0001782c <sc_indicate_rsp>:
{
   1782c:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1782e:	f06f 0102 	mvn.w	r1, #2
   17832:	4604      	mov	r4, r0
   17834:	480f      	ldr	r0, [pc, #60]	; (17874 <sc_indicate_rsp+0x48>)
   17836:	f015 fcfb 	bl	2d230 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1783a:	480e      	ldr	r0, [pc, #56]	; (17874 <sc_indicate_rsp+0x48>)
   1783c:	f015 fcea 	bl	2d214 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17840:	07c2      	lsls	r2, r0, #31
   17842:	d504      	bpl.n	1784e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   17844:	2200      	movs	r2, #0
   17846:	2300      	movs	r3, #0
   17848:	480b      	ldr	r0, [pc, #44]	; (17878 <sc_indicate_rsp+0x4c>)
   1784a:	f00e fc6d 	bl	26128 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1784e:	4620      	mov	r0, r4
   17850:	f015 fc28 	bl	2d0a4 <bt_att_fixed_chan_only>
   17854:	b160      	cbz	r0, 17870 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   17856:	4620      	mov	r0, r4
   17858:	f7ff fae4 	bl	16e24 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1785c:	b140      	cbz	r0, 17870 <sc_indicate_rsp+0x44>
   1785e:	7a03      	ldrb	r3, [r0, #8]
   17860:	07db      	lsls	r3, r3, #31
   17862:	d505      	bpl.n	17870 <sc_indicate_rsp+0x44>
}
   17864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17868:	2101      	movs	r1, #1
   1786a:	300c      	adds	r0, #12
   1786c:	f015 bcd5 	b.w	2d21a <atomic_or>
   17870:	bd10      	pop	{r4, pc}
   17872:	bf00      	nop
   17874:	20009f70 	.word	0x20009f70
   17878:	20009f40 	.word	0x20009f40

0001787c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1787c:	2201      	movs	r2, #1
{
   1787e:	b510      	push	{r4, lr}
   17880:	4b28      	ldr	r3, [pc, #160]	; (17924 <bt_gatt_init+0xa8>)
   17882:	e8d3 1fef 	ldaex	r1, [r3]
   17886:	2900      	cmp	r1, #0
   17888:	d103      	bne.n	17892 <bt_gatt_init+0x16>
   1788a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1788e:	2800      	cmp	r0, #0
   17890:	d1f7      	bne.n	17882 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   17892:	d146      	bne.n	17922 <bt_gatt_init+0xa6>
   17894:	4b24      	ldr	r3, [pc, #144]	; (17928 <bt_gatt_init+0xac>)
   17896:	e8d3 1fef 	ldaex	r1, [r3]
   1789a:	2900      	cmp	r1, #0
   1789c:	d103      	bne.n	178a6 <bt_gatt_init+0x2a>
   1789e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   178a2:	2800      	cmp	r0, #0
   178a4:	d1f7      	bne.n	17896 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   178a6:	d120      	bne.n	178ea <bt_gatt_init+0x6e>
   178a8:	2000      	movs	r0, #0
   178aa:	4920      	ldr	r1, [pc, #128]	; (1792c <bt_gatt_init+0xb0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178ac:	4a20      	ldr	r2, [pc, #128]	; (17930 <bt_gatt_init+0xb4>)
   178ae:	880b      	ldrh	r3, [r1, #0]
   178b0:	4c20      	ldr	r4, [pc, #128]	; (17934 <bt_gatt_init+0xb8>)
   178b2:	42a2      	cmp	r2, r4
   178b4:	d916      	bls.n	178e4 <bt_gatt_init+0x68>
   178b6:	b100      	cbz	r0, 178ba <bt_gatt_init+0x3e>
   178b8:	800b      	strh	r3, [r1, #0]
   178ba:	491f      	ldr	r1, [pc, #124]	; (17938 <bt_gatt_init+0xbc>)
   178bc:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   178c0:	4a1e      	ldr	r2, [pc, #120]	; (1793c <bt_gatt_init+0xc0>)
   178c2:	481f      	ldr	r0, [pc, #124]	; (17940 <bt_gatt_init+0xc4>)
   178c4:	f012 ff09 	bl	2a6da <assert_print>
   178c8:	481e      	ldr	r0, [pc, #120]	; (17944 <bt_gatt_init+0xc8>)
   178ca:	f012 ff06 	bl	2a6da <assert_print>
   178ce:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   178d2:	481a      	ldr	r0, [pc, #104]	; (1793c <bt_gatt_init+0xc0>)
   178d4:	f012 fefa 	bl	2a6cc <assert_post_action>
		last_static_handle += svc->attr_count;
   178d8:	6850      	ldr	r0, [r2, #4]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178da:	3208      	adds	r2, #8
		last_static_handle += svc->attr_count;
   178dc:	4403      	add	r3, r0
   178de:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178e0:	2001      	movs	r0, #1
   178e2:	e7e6      	b.n	178b2 <bt_gatt_init+0x36>
   178e4:	d3f8      	bcc.n	178d8 <bt_gatt_init+0x5c>
   178e6:	b100      	cbz	r0, 178ea <bt_gatt_init+0x6e>
   178e8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   178ea:	2200      	movs	r2, #0
   178ec:	4b16      	ldr	r3, [pc, #88]	; (17948 <bt_gatt_init+0xcc>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   178ee:	4917      	ldr	r1, [pc, #92]	; (1794c <bt_gatt_init+0xd0>)
   178f0:	4817      	ldr	r0, [pc, #92]	; (17950 <bt_gatt_init+0xd4>)
	list->tail = NULL;
   178f2:	e9c3 2200 	strd	r2, r2, [r3]
   178f6:	f00e fafb 	bl	25ef0 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   178fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178fe:	2300      	movs	r3, #0
   17900:	4813      	ldr	r0, [pc, #76]	; (17950 <bt_gatt_init+0xd4>)
   17902:	f7fa fa6d 	bl	11de0 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   17906:	4913      	ldr	r1, [pc, #76]	; (17954 <bt_gatt_init+0xd8>)
   17908:	4813      	ldr	r0, [pc, #76]	; (17958 <bt_gatt_init+0xdc>)
   1790a:	f00e faf1 	bl	25ef0 <k_work_init_delayable>
   1790e:	2102      	movs	r1, #2
   17910:	4812      	ldr	r0, [pc, #72]	; (1795c <bt_gatt_init+0xe0>)
   17912:	f015 fc82 	bl	2d21a <atomic_or>
}
   17916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1791a:	4911      	ldr	r1, [pc, #68]	; (17960 <bt_gatt_init+0xe4>)
   1791c:	4811      	ldr	r0, [pc, #68]	; (17964 <bt_gatt_init+0xe8>)
   1791e:	f00e bae7 	b.w	25ef0 <k_work_init_delayable>
}
   17922:	bd10      	pop	{r4, pc}
   17924:	2002171c 	.word	0x2002171c
   17928:	20021718 	.word	0x20021718
   1792c:	20021b2c 	.word	0x20021b2c
   17930:	00031484 	.word	0x00031484
   17934:	0003149c 	.word	0x0003149c
   17938:	00035d8c 	.word	0x00035d8c
   1793c:	00035d55 	.word	0x00035d55
   17940:	00032679 	.word	0x00032679
   17944:	00033719 	.word	0x00033719
   17948:	20021720 	.word	0x20021720
   1794c:	00017bd5 	.word	0x00017bd5
   17950:	20009ec8 	.word	0x20009ec8
   17954:	000181b9 	.word	0x000181b9
   17958:	20009f40 	.word	0x20009f40
   1795c:	20009f70 	.word	0x20009f70
   17960:	0002d543 	.word	0x0002d543
   17964:	20009e78 	.word	0x20009e78

00017968 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17968:	4603      	mov	r3, r0
{
   1796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1796e:	b398      	cbz	r0, 179d8 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   17970:	8a00      	ldrh	r0, [r0, #16]
   17972:	bb88      	cbnz	r0, 179d8 <bt_gatt_attr_get_handle+0x70>
	uint16_t handle = 1;
   17974:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17976:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1797a:	4919      	ldr	r1, [pc, #100]	; (179e0 <bt_gatt_attr_get_handle+0x78>)
   1797c:	f8df e064 	ldr.w	lr, [pc, #100]	; 179e4 <bt_gatt_attr_get_handle+0x7c>
   17980:	4571      	cmp	r1, lr
   17982:	d928      	bls.n	179d6 <bt_gatt_attr_get_handle+0x6e>
   17984:	4918      	ldr	r1, [pc, #96]	; (179e8 <bt_gatt_attr_get_handle+0x80>)
   17986:	f240 635d 	movw	r3, #1629	; 0x65d
   1798a:	4a18      	ldr	r2, [pc, #96]	; (179ec <bt_gatt_attr_get_handle+0x84>)
   1798c:	4818      	ldr	r0, [pc, #96]	; (179f0 <bt_gatt_attr_get_handle+0x88>)
   1798e:	f012 fea4 	bl	2a6da <assert_print>
   17992:	4818      	ldr	r0, [pc, #96]	; (179f4 <bt_gatt_attr_get_handle+0x8c>)
   17994:	f012 fea1 	bl	2a6da <assert_print>
   17998:	f240 615d 	movw	r1, #1629	; 0x65d
   1799c:	4813      	ldr	r0, [pc, #76]	; (179ec <bt_gatt_attr_get_handle+0x84>)
   1799e:	f012 fe95 	bl	2a6cc <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   179a2:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   179a6:	42bb      	cmp	r3, r7
   179a8:	d304      	bcc.n	179b4 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   179aa:	fb0c 7206 	mla	r2, ip, r6, r7
   179ae:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   179b0:	4293      	cmp	r3, r2
   179b2:	d90e      	bls.n	179d2 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   179b4:	4434      	add	r4, r6
   179b6:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   179b8:	4614      	mov	r4, r2
   179ba:	3108      	adds	r1, #8
   179bc:	e7e0      	b.n	17980 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   179be:	fb0c 7805 	mla	r8, ip, r5, r7
   179c2:	4543      	cmp	r3, r8
   179c4:	d00a      	beq.n	179dc <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   179c6:	3501      	adds	r5, #1
   179c8:	1962      	adds	r2, r4, r5
   179ca:	42b5      	cmp	r5, r6
   179cc:	b292      	uxth	r2, r2
   179ce:	d1f6      	bne.n	179be <bt_gatt_attr_get_handle+0x56>
   179d0:	e7f2      	b.n	179b8 <bt_gatt_attr_get_handle+0x50>
   179d2:	2500      	movs	r5, #0
   179d4:	e7f8      	b.n	179c8 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   179d6:	d3e4      	bcc.n	179a2 <bt_gatt_attr_get_handle+0x3a>
}
   179d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179dc:	4610      	mov	r0, r2
   179de:	e7fb      	b.n	179d8 <bt_gatt_attr_get_handle+0x70>
   179e0:	00031484 	.word	0x00031484
   179e4:	0003149c 	.word	0x0003149c
   179e8:	00035d85 	.word	0x00035d85
   179ec:	00035d55 	.word	0x00035d55
   179f0:	00032679 	.word	0x00032679
   179f4:	00033719 	.word	0x00033719

000179f8 <bt_gatt_foreach_attr_type>:
{
   179f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179fc:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   179fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   17a02:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   17a06:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   17a08:	2d00      	cmp	r5, #0
   17a0a:	bf08      	it	eq
   17a0c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   17a0e:	4b2b      	ldr	r3, [pc, #172]	; (17abc <bt_gatt_foreach_attr_type+0xc4>)
{
   17a10:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   17a12:	881b      	ldrh	r3, [r3, #0]
{
   17a14:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   17a16:	4283      	cmp	r3, r0
   17a18:	d232      	bcs.n	17a80 <bt_gatt_foreach_attr_type+0x88>
}
   17a1a:	b003      	add	sp, #12
   17a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a20:	4640      	mov	r0, r8
   17a22:	5889      	ldr	r1, [r1, r2]
   17a24:	9301      	str	r3, [sp, #4]
   17a26:	f014 fa44 	bl	2beb2 <bt_uuid_cmp>
   17a2a:	9b01      	ldr	r3, [sp, #4]
   17a2c:	b190      	cbz	r0, 17a54 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a2e:	3401      	adds	r4, #1
   17a30:	f10a 0a01 	add.w	sl, sl, #1
   17a34:	b2a4      	uxth	r4, r4
   17a36:	6873      	ldr	r3, [r6, #4]
   17a38:	4553      	cmp	r3, sl
   17a3a:	d92c      	bls.n	17a96 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   17a3c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a3e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   17a40:	429c      	cmp	r4, r3
   17a42:	d8ea      	bhi.n	17a1a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17a44:	42bc      	cmp	r4, r7
   17a46:	d3f2      	bcc.n	17a2e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a48:	fb0b f20a 	mul.w	r2, fp, sl
   17a4c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a4e:	f1b8 0f00 	cmp.w	r8, #0
   17a52:	d1e5      	bne.n	17a20 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   17a54:	f1b9 0f00 	cmp.w	r9, #0
   17a58:	d10b      	bne.n	17a72 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   17a5a:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   17a5c:	4618      	mov	r0, r3
	*num_matches -= 1;
   17a5e:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17a60:	4621      	mov	r1, r4
   17a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17a66:	4798      	blx	r3
	if (!*num_matches) {
   17a68:	2d00      	cmp	r5, #0
   17a6a:	d0d6      	beq.n	17a1a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a6c:	2800      	cmp	r0, #0
   17a6e:	d1de      	bne.n	17a2e <bt_gatt_foreach_attr_type+0x36>
   17a70:	e7d3      	b.n	17a1a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17a72:	68da      	ldr	r2, [r3, #12]
   17a74:	4591      	cmp	r9, r2
   17a76:	d1da      	bne.n	17a2e <bt_gatt_foreach_attr_type+0x36>
   17a78:	e7ef      	b.n	17a5a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a7a:	f04f 0a00 	mov.w	sl, #0
   17a7e:	e7da      	b.n	17a36 <bt_gatt_foreach_attr_type+0x3e>
		uint16_t handle = 1;
   17a80:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a82:	f04f 0b14 	mov.w	fp, #20
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a86:	4e0e      	ldr	r6, [pc, #56]	; (17ac0 <bt_gatt_foreach_attr_type+0xc8>)
   17a88:	e006      	b.n	17a98 <bt_gatt_foreach_attr_type+0xa0>
   17a8a:	d2c6      	bcs.n	17a1a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   17a8c:	6873      	ldr	r3, [r6, #4]
   17a8e:	4423      	add	r3, r4
   17a90:	42bb      	cmp	r3, r7
   17a92:	d2f2      	bcs.n	17a7a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   17a94:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a96:	3608      	adds	r6, #8
   17a98:	4b0a      	ldr	r3, [pc, #40]	; (17ac4 <bt_gatt_foreach_attr_type+0xcc>)
   17a9a:	429e      	cmp	r6, r3
   17a9c:	d9f5      	bls.n	17a8a <bt_gatt_foreach_attr_type+0x92>
   17a9e:	490a      	ldr	r1, [pc, #40]	; (17ac8 <bt_gatt_foreach_attr_type+0xd0>)
   17aa0:	f240 7321 	movw	r3, #1825	; 0x721
   17aa4:	4a09      	ldr	r2, [pc, #36]	; (17acc <bt_gatt_foreach_attr_type+0xd4>)
   17aa6:	480a      	ldr	r0, [pc, #40]	; (17ad0 <bt_gatt_foreach_attr_type+0xd8>)
   17aa8:	f012 fe17 	bl	2a6da <assert_print>
   17aac:	4809      	ldr	r0, [pc, #36]	; (17ad4 <bt_gatt_foreach_attr_type+0xdc>)
   17aae:	f012 fe14 	bl	2a6da <assert_print>
   17ab2:	f240 7121 	movw	r1, #1825	; 0x721
   17ab6:	4805      	ldr	r0, [pc, #20]	; (17acc <bt_gatt_foreach_attr_type+0xd4>)
   17ab8:	f012 fe08 	bl	2a6cc <assert_post_action>
   17abc:	20021b2c 	.word	0x20021b2c
   17ac0:	00031484 	.word	0x00031484
   17ac4:	0003149c 	.word	0x0003149c
   17ac8:	00035d85 	.word	0x00035d85
   17acc:	00035d55 	.word	0x00035d55
   17ad0:	00032679 	.word	0x00032679
   17ad4:	00033719 	.word	0x00033719

00017ad8 <db_hash_gen>:
{
   17ad8:	b530      	push	{r4, r5, lr}
	uint8_t key[16] = {};
   17ada:	2400      	movs	r4, #0
{
   17adc:	b0cf      	sub	sp, #316	; 0x13c
   17ade:	4605      	mov	r5, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17ae0:	4669      	mov	r1, sp
   17ae2:	aa22      	add	r2, sp, #136	; 0x88
   17ae4:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   17ae6:	e9cd 4400 	strd	r4, r4, [sp]
   17aea:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17aee:	f013 fe45 	bl	2b77c <tc_cmac_setup>
   17af2:	b958      	cbnz	r0, 17b0c <db_hash_gen+0x34>
		LOG_ERR("Unable to setup AES CMAC");
   17af4:	4b16      	ldr	r3, [pc, #88]	; (17b50 <db_hash_gen+0x78>)
		LOG_ERR("Unable to calculate hash");
   17af6:	9309      	str	r3, [sp, #36]	; 0x24
   17af8:	2302      	movs	r3, #2
   17afa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17afe:	4815      	ldr	r0, [pc, #84]	; (17b54 <db_hash_gen+0x7c>)
   17b00:	aa08      	add	r2, sp, #32
   17b02:	9308      	str	r3, [sp, #32]
   17b04:	f015 fc33 	bl	2d36e <z_log_msg_static_create.constprop.0>
}
   17b08:	b04f      	add	sp, #316	; 0x13c
   17b0a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17b10:	2001      	movs	r0, #1
   17b12:	4a11      	ldr	r2, [pc, #68]	; (17b58 <db_hash_gen+0x80>)
   17b14:	ab0a      	add	r3, sp, #40	; 0x28
   17b16:	f015 fca1 	bl	2d45c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17b1a:	4810      	ldr	r0, [pc, #64]	; (17b5c <db_hash_gen+0x84>)
   17b1c:	a90a      	add	r1, sp, #40	; 0x28
   17b1e:	f013 fec2 	bl	2b8a6 <tc_cmac_final>
   17b22:	b908      	cbnz	r0, 17b28 <db_hash_gen+0x50>
		LOG_ERR("Unable to calculate hash");
   17b24:	4b0e      	ldr	r3, [pc, #56]	; (17b60 <db_hash_gen+0x88>)
   17b26:	e7e6      	b.n	17af6 <db_hash_gen+0x1e>
   17b28:	4b0c      	ldr	r3, [pc, #48]	; (17b5c <db_hash_gen+0x84>)
   17b2a:	f103 0210 	add.w	r2, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17b2e:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17b30:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   17b34:	3401      	adds	r4, #1
   17b36:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17b38:	f803 0b01 	strb.w	r0, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17b3c:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   17b3e:	d1f6      	bne.n	17b2e <db_hash_gen+0x56>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   17b40:	b10d      	cbz	r5, 17b46 <db_hash_gen+0x6e>
		db_hash_store();
   17b42:	f7ff fc5d 	bl	17400 <db_hash_store>
   17b46:	2104      	movs	r1, #4
   17b48:	4806      	ldr	r0, [pc, #24]	; (17b64 <db_hash_gen+0x8c>)
   17b4a:	f015 fb66 	bl	2d21a <atomic_or>
   17b4e:	e7db      	b.n	17b08 <db_hash_gen+0x30>
   17b50:	00035db4 	.word	0x00035db4
   17b54:	000314f4 	.word	0x000314f4
   17b58:	0002d145 	.word	0x0002d145
   17b5c:	20009ea8 	.word	0x20009ea8
   17b60:	00035dcd 	.word	0x00035dcd
   17b64:	20009f70 	.word	0x20009f70

00017b68 <db_hash_read>:
{
   17b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b6c:	4916      	ldr	r1, [pc, #88]	; (17bc8 <db_hash_read+0x60>)
{
   17b6e:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b70:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17b74:	4615      	mov	r5, r2
   17b76:	461e      	mov	r6, r3
   17b78:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b7c:	f00e fb34 	bl	261e8 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17b80:	4812      	ldr	r0, [pc, #72]	; (17bcc <db_hash_read+0x64>)
   17b82:	f015 fb47 	bl	2d214 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17b86:	0741      	lsls	r1, r0, #29
   17b88:	d402      	bmi.n	17b90 <db_hash_read+0x28>
		db_hash_gen(true);
   17b8a:	2001      	movs	r0, #1
   17b8c:	f7ff ffa4 	bl	17ad8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   17b90:	4620      	mov	r0, r4
   17b92:	f7ff f947 	bl	16e24 <find_cf_cfg>
	if (cfg &&
   17b96:	b168      	cbz	r0, 17bb4 <db_hash_read+0x4c>
   17b98:	7a03      	ldrb	r3, [r0, #8]
   17b9a:	07da      	lsls	r2, r3, #31
   17b9c:	d50a      	bpl.n	17bb4 <db_hash_read+0x4c>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17b9e:	f100 040c 	add.w	r4, r0, #12
   17ba2:	4620      	mov	r0, r4
   17ba4:	f015 fb36 	bl	2d214 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   17ba8:	07c3      	lsls	r3, r0, #31
   17baa:	d403      	bmi.n	17bb4 <db_hash_read+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17bac:	2102      	movs	r1, #2
   17bae:	4620      	mov	r0, r4
   17bb0:	f015 fb33 	bl	2d21a <atomic_or>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17bb4:	2310      	movs	r3, #16
   17bb6:	463a      	mov	r2, r7
   17bb8:	9306      	str	r3, [sp, #24]
   17bba:	4631      	mov	r1, r6
   17bbc:	4628      	mov	r0, r5
}
   17bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17bc2:	4b03      	ldr	r3, [pc, #12]	; (17bd0 <db_hash_read+0x68>)
   17bc4:	f015 bb4b 	b.w	2d25e <bt_gatt_attr_read.constprop.0>
   17bc8:	20009ef8 	.word	0x20009ef8
   17bcc:	20009f70 	.word	0x20009f70
   17bd0:	20009ea8 	.word	0x20009ea8

00017bd4 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bd4:	f06f 0108 	mvn.w	r1, #8
{
   17bd8:	b508      	push	{r3, lr}
   17bda:	4826      	ldr	r0, [pc, #152]	; (17c74 <db_hash_process+0xa0>)
   17bdc:	f015 fb28 	bl	2d230 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   17be0:	0701      	lsls	r1, r0, #28
   17be2:	d542      	bpl.n	17c6a <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17be4:	4823      	ldr	r0, [pc, #140]	; (17c74 <db_hash_process+0xa0>)
   17be6:	f015 fb15 	bl	2d214 <atomic_get>
   17bea:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17bec:	075a      	lsls	r2, r3, #29
   17bee:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17bf2:	d401      	bmi.n	17bf8 <db_hash_process+0x24>
			db_hash_gen(false);
   17bf4:	f7ff ff70 	bl	17ad8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   17bf8:	2210      	movs	r2, #16
   17bfa:	491f      	ldr	r1, [pc, #124]	; (17c78 <db_hash_process+0xa4>)
   17bfc:	1888      	adds	r0, r1, r2
   17bfe:	f018 fcb6 	bl	3056e <memcmp>
   17c02:	b948      	cbnz	r0, 17c18 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   17c04:	481d      	ldr	r0, [pc, #116]	; (17c7c <db_hash_process+0xa8>)
   17c06:	f00e fa95 	bl	26134 <k_work_cancel_delayable>
}
   17c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c0e:	f06f 0101 	mvn.w	r1, #1
   17c12:	4818      	ldr	r0, [pc, #96]	; (17c74 <db_hash_process+0xa0>)
   17c14:	f015 bb0c 	b.w	2d230 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17c18:	2101      	movs	r1, #1
   17c1a:	4816      	ldr	r0, [pc, #88]	; (17c74 <db_hash_process+0xa0>)
   17c1c:	f015 fafd 	bl	2d21a <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17c20:	f010 0f01 	tst.w	r0, #1
   17c24:	4b16      	ldr	r3, [pc, #88]	; (17c80 <db_hash_process+0xac>)
   17c26:	d110      	bne.n	17c4a <db_hash_process+0x76>
		gatt_sc.start = start;
   17c28:	4a16      	ldr	r2, [pc, #88]	; (17c84 <db_hash_process+0xb0>)
   17c2a:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17c2c:	4811      	ldr	r0, [pc, #68]	; (17c74 <db_hash_process+0xa0>)
   17c2e:	f015 faf1 	bl	2d214 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   17c32:	0783      	lsls	r3, r0, #30
   17c34:	d405      	bmi.n	17c42 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   17c36:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17c3a:	2300      	movs	r3, #0
   17c3c:	480f      	ldr	r0, [pc, #60]	; (17c7c <db_hash_process+0xa8>)
   17c3e:	f00e fa73 	bl	26128 <k_work_reschedule>
}
   17c42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   17c46:	f7ff bbdb 	b.w	17400 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   17c4a:	8b1a      	ldrh	r2, [r3, #24]
   17c4c:	8b58      	ldrh	r0, [r3, #26]
   17c4e:	2a01      	cmp	r2, #1
   17c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c54:	d805      	bhi.n	17c62 <db_hash_process+0x8e>
   17c56:	4290      	cmp	r0, r2
   17c58:	d0f3      	beq.n	17c42 <db_hash_process+0x6e>
		*end = new_end;
   17c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c5e:	835a      	strh	r2, [r3, #26]
   17c60:	e7e4      	b.n	17c2c <db_hash_process+0x58>
	if (*end < new_end) {
   17c62:	4290      	cmp	r0, r2
		*start = new_start;
   17c64:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   17c66:	d0e1      	beq.n	17c2c <db_hash_process+0x58>
   17c68:	e7f7      	b.n	17c5a <db_hash_process+0x86>
	db_hash_gen(true);
   17c6a:	2001      	movs	r0, #1
}
   17c6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   17c70:	f7ff bf32 	b.w	17ad8 <db_hash_gen>
   17c74:	20009f70 	.word	0x20009f70
   17c78:	20009ea8 	.word	0x20009ea8
   17c7c:	20009f40 	.word	0x20009f40
   17c80:	20009f20 	.word	0x20009f20
   17c84:	ffff0001 	.word	0xffff0001

00017c88 <ccc_set_direct>:
{
   17c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c8c:	b0b8      	sub	sp, #224	; 0xe0
   17c8e:	af00      	add	r7, sp, #0
   17c90:	460c      	mov	r4, r1
   17c92:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17c94:	493f      	ldr	r1, [pc, #252]	; (17d94 <ccc_set_direct+0x10c>)
   17c96:	463a      	mov	r2, r7
   17c98:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
{
   17c9c:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   17c9e:	f013 fb1a 	bl	2b2d6 <settings_name_steq>
   17ca2:	b938      	cbnz	r0, 17cb4 <ccc_set_direct+0x2c>
   17ca4:	f7ff f99e 	bl	16fe4 <ccc_set_direct.part.0>
   17ca8:	4605      	mov	r5, r0
}
   17caa:	4628      	mov	r0, r5
   17cac:	37e0      	adds	r7, #224	; 0xe0
   17cae:	46bd      	mov	sp, r7
   17cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   17cb4:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   17cb6:	1d39      	adds	r1, r7, #4
   17cb8:	4630      	mov	r0, r6
   17cba:	f013 fb30 	bl	2b31e <settings_name_next>
		if (!name) {
   17cbe:	b96e      	cbnz	r6, 17cdc <ccc_set_direct+0x54>
			LOG_ERR("Insufficient number of arguments");
   17cc0:	4b35      	ldr	r3, [pc, #212]	; (17d98 <ccc_set_direct+0x110>)
   17cc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17cc6:	637b      	str	r3, [r7, #52]	; 0x34
   17cc8:	2302      	movs	r3, #2
   17cca:	4834      	ldr	r0, [pc, #208]	; (17d9c <ccc_set_direct+0x114>)
   17ccc:	633b      	str	r3, [r7, #48]	; 0x30
   17cce:	f107 0230 	add.w	r2, r7, #48	; 0x30
   17cd2:	f015 fb4c 	bl	2d36e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17cd6:	f06f 0415 	mvn.w	r4, #21
   17cda:	e049      	b.n	17d70 <ccc_set_direct+0xe8>
		} else if (!next) {
   17cdc:	6878      	ldr	r0, [r7, #4]
   17cde:	b9c0      	cbnz	r0, 17d12 <ccc_set_direct+0x8a>
			load.addr_with_id.id = BT_ID_DEFAULT;
   17ce0:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   17ce2:	f107 0a08 	add.w	sl, r7, #8
   17ce6:	4651      	mov	r1, sl
   17ce8:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   17cea:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   17cec:	f014 f8bd 	bl	2be6a <bt_settings_decode_key>
		if (err) {
   17cf0:	4605      	mov	r5, r0
   17cf2:	b320      	cbz	r0, 17d3e <ccc_set_direct+0xb6>
			LOG_ERR("Unable to decode address %s", name);
   17cf4:	466c      	mov	r4, sp
   17cf6:	b088      	sub	sp, #32
   17cf8:	466a      	mov	r2, sp
   17cfa:	4b29      	ldr	r3, [pc, #164]	; (17da0 <ccc_set_direct+0x118>)
   17cfc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17d00:	e9c2 3605 	strd	r3, r6, [r2, #20]
   17d04:	f44f 7300 	mov.w	r3, #512	; 0x200
   17d08:	8393      	strh	r3, [r2, #28]
   17d0a:	4b26      	ldr	r3, [pc, #152]	; (17da4 <ccc_set_direct+0x11c>)
   17d0c:	f842 3f10 	str.w	r3, [r2, #16]!
   17d10:	e010      	b.n	17d34 <ccc_set_direct+0xac>
			unsigned long next_id = strtoul(next, NULL, 10);
   17d12:	220a      	movs	r2, #10
   17d14:	2100      	movs	r1, #0
   17d16:	f011 f98f 	bl	29038 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   17d1a:	2800      	cmp	r0, #0
   17d1c:	d0e0      	beq.n	17ce0 <ccc_set_direct+0x58>
				LOG_ERR("Invalid local identity %lu", next_id);
   17d1e:	466c      	mov	r4, sp
   17d20:	b088      	sub	sp, #32
   17d22:	466a      	mov	r2, sp
   17d24:	4b20      	ldr	r3, [pc, #128]	; (17da8 <ccc_set_direct+0x120>)
   17d26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17d2a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17d2e:	2303      	movs	r3, #3
   17d30:	f842 3f10 	str.w	r3, [r2, #16]!
			LOG_ERR("Unable to decode address %s", name);
   17d34:	4819      	ldr	r0, [pc, #100]	; (17d9c <ccc_set_direct+0x114>)
   17d36:	f015 fb1a 	bl	2d36e <z_log_msg_static_create.constprop.0>
   17d3a:	46a5      	mov	sp, r4
			return -EINVAL;
   17d3c:	e7cb      	b.n	17cd6 <ccc_set_direct+0x4e>
		load.addr_with_id.addr = &addr;
   17d3e:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   17d42:	b32c      	cbz	r4, 17d90 <ccc_set_direct+0x108>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   17d44:	22c0      	movs	r2, #192	; 0xc0
   17d46:	4648      	mov	r0, r9
   17d48:	f107 0120 	add.w	r1, r7, #32
   17d4c:	47c0      	blx	r8
			if (len < 0) {
   17d4e:	1e04      	subs	r4, r0, #0
   17d50:	da10      	bge.n	17d74 <ccc_set_direct+0xec>
				LOG_ERR("Failed to decode value (err %zd)", len);
   17d52:	466d      	mov	r5, sp
   17d54:	b088      	sub	sp, #32
   17d56:	466a      	mov	r2, sp
   17d58:	4b14      	ldr	r3, [pc, #80]	; (17dac <ccc_set_direct+0x124>)
   17d5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17d5e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17d62:	2303      	movs	r3, #3
   17d64:	480d      	ldr	r0, [pc, #52]	; (17d9c <ccc_set_direct+0x114>)
   17d66:	f842 3f10 	str.w	r3, [r2, #16]!
   17d6a:	f015 fb00 	bl	2d36e <z_log_msg_static_create.constprop.0>
   17d6e:	46ad      	mov	sp, r5
			return -EINVAL;
   17d70:	4625      	mov	r5, r4
   17d72:	e79a      	b.n	17caa <ccc_set_direct+0x22>
			load.count = len / sizeof(*ccc_store);
   17d74:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   17d76:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   17d7a:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   17d7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17d82:	2001      	movs	r0, #1
   17d84:	4a0a      	ldr	r2, [pc, #40]	; (17db0 <ccc_set_direct+0x128>)
   17d86:	f107 0310 	add.w	r3, r7, #16
   17d8a:	f015 fb67 	bl	2d45c <bt_gatt_foreach_attr>
	return 0;
   17d8e:	e78c      	b.n	17caa <ccc_set_direct+0x22>
   17d90:	4623      	mov	r3, r4
   17d92:	e7f2      	b.n	17d7a <ccc_set_direct+0xf2>
   17d94:	00035de6 	.word	0x00035de6
   17d98:	0003464b 	.word	0x0003464b
   17d9c:	000314f4 	.word	0x000314f4
   17da0:	00035bd7 	.word	0x00035bd7
   17da4:	01000003 	.word	0x01000003
   17da8:	00035bf3 	.word	0x00035bf3
   17dac:	00035c30 	.word	0x00035c30
   17db0:	00016f31 	.word	0x00016f31

00017db4 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   17db4:	2300      	movs	r3, #0
{
   17db6:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17db8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   17dba:	f7ff fdd5 	bl	17968 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   17dbe:	1c41      	adds	r1, r0, #1
   17dc0:	b289      	uxth	r1, r1
   17dc2:	4608      	mov	r0, r1
   17dc4:	4a03      	ldr	r2, [pc, #12]	; (17dd4 <bt_gatt_attr_next+0x20>)
   17dc6:	ab01      	add	r3, sp, #4
   17dc8:	f015 fb48 	bl	2d45c <bt_gatt_foreach_attr>
}
   17dcc:	9801      	ldr	r0, [sp, #4]
   17dce:	b003      	add	sp, #12
   17dd0:	f85d fb04 	ldr.w	pc, [sp], #4
   17dd4:	0002d0f9 	.word	0x0002d0f9

00017dd8 <bt_gatt_is_subscribed>:
{
   17dd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17ddc:	460c      	mov	r4, r1
   17dde:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   17de0:	4605      	mov	r5, r0
   17de2:	b970      	cbnz	r0, 17e02 <bt_gatt_is_subscribed+0x2a>
   17de4:	495b      	ldr	r1, [pc, #364]	; (17f54 <bt_gatt_is_subscribed+0x17c>)
   17de6:	f640 434d 	movw	r3, #3149	; 0xc4d
   17dea:	4a5b      	ldr	r2, [pc, #364]	; (17f58 <bt_gatt_is_subscribed+0x180>)
   17dec:	485b      	ldr	r0, [pc, #364]	; (17f5c <bt_gatt_is_subscribed+0x184>)
   17dee:	f012 fc74 	bl	2a6da <assert_print>
   17df2:	485b      	ldr	r0, [pc, #364]	; (17f60 <bt_gatt_is_subscribed+0x188>)
   17df4:	f012 fc71 	bl	2a6da <assert_print>
   17df8:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   17dfc:	4856      	ldr	r0, [pc, #344]	; (17f58 <bt_gatt_is_subscribed+0x180>)
   17dfe:	f012 fc65 	bl	2a6cc <assert_post_action>
   17e02:	b961      	cbnz	r1, 17e1e <bt_gatt_is_subscribed+0x46>
   17e04:	4957      	ldr	r1, [pc, #348]	; (17f64 <bt_gatt_is_subscribed+0x18c>)
   17e06:	f640 434e 	movw	r3, #3150	; 0xc4e
   17e0a:	4a53      	ldr	r2, [pc, #332]	; (17f58 <bt_gatt_is_subscribed+0x180>)
   17e0c:	4853      	ldr	r0, [pc, #332]	; (17f5c <bt_gatt_is_subscribed+0x184>)
   17e0e:	f012 fc64 	bl	2a6da <assert_print>
   17e12:	4853      	ldr	r0, [pc, #332]	; (17f60 <bt_gatt_is_subscribed+0x188>)
   17e14:	f012 fc61 	bl	2a6da <assert_print>
   17e18:	f640 414e 	movw	r1, #3150	; 0xc4e
   17e1c:	e7ee      	b.n	17dfc <bt_gatt_is_subscribed+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   17e1e:	7b43      	ldrb	r3, [r0, #13]
   17e20:	2b07      	cmp	r3, #7
   17e22:	d110      	bne.n	17e46 <bt_gatt_is_subscribed+0x6e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   17e24:	2300      	movs	r3, #0
   17e26:	f88d 300c 	strb.w	r3, [sp, #12]
   17e2a:	f642 0303 	movw	r3, #10243	; 0x2803
   17e2e:	6820      	ldr	r0, [r4, #0]
   17e30:	a903      	add	r1, sp, #12
   17e32:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e36:	f014 f83c 	bl	2beb2 <bt_uuid_cmp>
   17e3a:	b9d0      	cbnz	r0, 17e72 <bt_gatt_is_subscribed+0x9a>
		if (!(chrc->properties &
   17e3c:	68e3      	ldr	r3, [r4, #12]
   17e3e:	799b      	ldrb	r3, [r3, #6]
   17e40:	f013 0f30 	tst.w	r3, #48	; 0x30
   17e44:	d103      	bne.n	17e4e <bt_gatt_is_subscribed+0x76>
		return false;
   17e46:	2000      	movs	r0, #0
}
   17e48:	b004      	add	sp, #16
   17e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   17e4e:	4620      	mov	r0, r4
   17e50:	f7ff ffb0 	bl	17db4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17e54:	4604      	mov	r4, r0
   17e56:	b960      	cbnz	r0, 17e72 <bt_gatt_is_subscribed+0x9a>
   17e58:	4942      	ldr	r1, [pc, #264]	; (17f64 <bt_gatt_is_subscribed+0x18c>)
   17e5a:	f640 435f 	movw	r3, #3167	; 0xc5f
   17e5e:	4a3e      	ldr	r2, [pc, #248]	; (17f58 <bt_gatt_is_subscribed+0x180>)
   17e60:	483e      	ldr	r0, [pc, #248]	; (17f5c <bt_gatt_is_subscribed+0x184>)
   17e62:	f012 fc3a 	bl	2a6da <assert_print>
   17e66:	4840      	ldr	r0, [pc, #256]	; (17f68 <bt_gatt_is_subscribed+0x190>)
   17e68:	f012 fc37 	bl	2a6da <assert_print>
   17e6c:	f640 415f 	movw	r1, #3167	; 0xc5f
   17e70:	e7c4      	b.n	17dfc <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17e72:	2300      	movs	r3, #0
   17e74:	6820      	ldr	r0, [r4, #0]
   17e76:	f88d 300c 	strb.w	r3, [sp, #12]
   17e7a:	f642 1302 	movw	r3, #10498	; 0x2902
   17e7e:	a903      	add	r1, sp, #12
   17e80:	f8ad 300e 	strh.w	r3, [sp, #14]
   17e84:	f014 f815 	bl	2beb2 <bt_uuid_cmp>
   17e88:	b188      	cbz	r0, 17eae <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   17e8a:	4620      	mov	r0, r4
   17e8c:	f7ff ff92 	bl	17db4 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   17e90:	4604      	mov	r4, r0
   17e92:	b960      	cbnz	r0, 17eae <bt_gatt_is_subscribed+0xd6>
   17e94:	4933      	ldr	r1, [pc, #204]	; (17f64 <bt_gatt_is_subscribed+0x18c>)
   17e96:	f640 4365 	movw	r3, #3173	; 0xc65
   17e9a:	4a2f      	ldr	r2, [pc, #188]	; (17f58 <bt_gatt_is_subscribed+0x180>)
   17e9c:	482f      	ldr	r0, [pc, #188]	; (17f5c <bt_gatt_is_subscribed+0x184>)
   17e9e:	f012 fc1c 	bl	2a6da <assert_print>
   17ea2:	4831      	ldr	r0, [pc, #196]	; (17f68 <bt_gatt_is_subscribed+0x190>)
   17ea4:	f012 fc19 	bl	2a6da <assert_print>
   17ea8:	f640 4165 	movw	r1, #3173	; 0xc65
   17eac:	e7a6      	b.n	17dfc <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17eae:	2600      	movs	r6, #0
   17eb0:	f642 1802 	movw	r8, #10498	; 0x2902
   17eb4:	6820      	ldr	r0, [r4, #0]
   17eb6:	4669      	mov	r1, sp
   17eb8:	f88d 6000 	strb.w	r6, [sp]
   17ebc:	f8ad 8002 	strh.w	r8, [sp, #2]
   17ec0:	f013 fff7 	bl	2beb2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17ec4:	b9d8      	cbnz	r0, 17efe <bt_gatt_is_subscribed+0x126>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   17ec6:	2300      	movs	r3, #0
   17ec8:	6820      	ldr	r0, [r4, #0]
   17eca:	f88d 300c 	strb.w	r3, [sp, #12]
   17ece:	f642 1302 	movw	r3, #10498	; 0x2902
   17ed2:	a903      	add	r1, sp, #12
   17ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
   17ed8:	f013 ffeb 	bl	2beb2 <bt_uuid_cmp>
   17edc:	2800      	cmp	r0, #0
   17ede:	d1b2      	bne.n	17e46 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   17ee0:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   17ee2:	4628      	mov	r0, r5
   17ee4:	4622      	mov	r2, r4
   17ee6:	f812 1b01 	ldrb.w	r1, [r2], #1
   17eea:	f014 fbde 	bl	2c6aa <bt_conn_is_peer_addr_le>
   17eee:	2800      	cmp	r0, #0
   17ef0:	d0a9      	beq.n	17e46 <bt_gatt_is_subscribed+0x6e>
   17ef2:	8923      	ldrh	r3, [r4, #8]
   17ef4:	421f      	tst	r7, r3
   17ef6:	bf14      	ite	ne
   17ef8:	2001      	movne	r0, #1
   17efa:	2000      	moveq	r0, #0
   17efc:	e7a4      	b.n	17e48 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17efe:	f642 0303 	movw	r3, #10243	; 0x2803
   17f02:	6820      	ldr	r0, [r4, #0]
   17f04:	a901      	add	r1, sp, #4
   17f06:	f88d 6004 	strb.w	r6, [sp, #4]
   17f0a:	f8ad 3006 	strh.w	r3, [sp, #6]
   17f0e:	f013 ffd0 	bl	2beb2 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   17f12:	2800      	cmp	r0, #0
   17f14:	d0d7      	beq.n	17ec6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17f16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17f1a:	6820      	ldr	r0, [r4, #0]
   17f1c:	a902      	add	r1, sp, #8
   17f1e:	f88d 6008 	strb.w	r6, [sp, #8]
   17f22:	f8ad 300a 	strh.w	r3, [sp, #10]
   17f26:	f013 ffc4 	bl	2beb2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   17f2a:	2800      	cmp	r0, #0
   17f2c:	d0cb      	beq.n	17ec6 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17f2e:	f642 0301 	movw	r3, #10241	; 0x2801
   17f32:	6820      	ldr	r0, [r4, #0]
   17f34:	a903      	add	r1, sp, #12
   17f36:	f88d 600c 	strb.w	r6, [sp, #12]
   17f3a:	f8ad 300e 	strh.w	r3, [sp, #14]
   17f3e:	f013 ffb8 	bl	2beb2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   17f42:	2800      	cmp	r0, #0
   17f44:	d0bf      	beq.n	17ec6 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   17f46:	4620      	mov	r0, r4
   17f48:	f7ff ff34 	bl	17db4 <bt_gatt_attr_next>
		if (!attr) {
   17f4c:	4604      	mov	r4, r0
   17f4e:	2800      	cmp	r0, #0
   17f50:	d1b0      	bne.n	17eb4 <bt_gatt_is_subscribed+0xdc>
   17f52:	e778      	b.n	17e46 <bt_gatt_is_subscribed+0x6e>
   17f54:	00034c1d 	.word	0x00034c1d
   17f58:	00035d55 	.word	0x00035d55
   17f5c:	00032679 	.word	0x00032679
   17f60:	00035ded 	.word	0x00035ded
   17f64:	00035e02 	.word	0x00035e02
   17f68:	00035e07 	.word	0x00035e07

00017f6c <gatt_indicate>:
{
   17f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17f70:	4615      	mov	r5, r2
   17f72:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f74:	2294      	movs	r2, #148	; 0x94
   17f76:	6869      	ldr	r1, [r5, #4]
{
   17f78:	b086      	sub	sp, #24
   17f7a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f7c:	f015 fa79 	bl	2d472 <bt_gatt_check_perm>
   17f80:	4680      	mov	r8, r0
   17f82:	b178      	cbz	r0, 17fa4 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   17f84:	4b36      	ldr	r3, [pc, #216]	; (18060 <gatt_indicate+0xf4>)
		return -EPERM;
   17f86:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   17f8a:	9305      	str	r3, [sp, #20]
   17f8c:	2302      	movs	r3, #2
   17f8e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17f92:	4834      	ldr	r0, [pc, #208]	; (18064 <gatt_indicate+0xf8>)
   17f94:	aa04      	add	r2, sp, #16
   17f96:	9304      	str	r3, [sp, #16]
   17f98:	f015 f9e9 	bl	2d36e <z_log_msg_static_create.constprop.0>
}
   17f9c:	4628      	mov	r0, r5
   17f9e:	b006      	add	sp, #24
   17fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17fa4:	2202      	movs	r2, #2
   17fa6:	4630      	mov	r0, r6
   17fa8:	6869      	ldr	r1, [r5, #4]
   17faa:	f7ff ff15 	bl	17dd8 <bt_gatt_is_subscribed>
   17fae:	b960      	cbnz	r0, 17fca <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   17fb0:	4b2d      	ldr	r3, [pc, #180]	; (18068 <gatt_indicate+0xfc>)
   17fb2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17fb6:	9305      	str	r3, [sp, #20]
   17fb8:	2302      	movs	r3, #2
   17fba:	482a      	ldr	r0, [pc, #168]	; (18064 <gatt_indicate+0xf8>)
   17fbc:	aa04      	add	r2, sp, #16
   17fbe:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   17fc0:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   17fc4:	f015 f9d3 	bl	2d36e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17fc8:	e7e8      	b.n	17f9c <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17fca:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17fce:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17fd0:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17fd2:	f7fe fd93 	bl	16afc <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17fd6:	3702      	adds	r7, #2
	if (!req) {
   17fd8:	4604      	mov	r4, r0
   17fda:	b1d0      	cbz	r0, 18012 <gatt_indicate+0xa6>
	req->att_op = op;
   17fdc:	211d      	movs	r1, #29
	req->func = func;
   17fde:	4b23      	ldr	r3, [pc, #140]	; (1806c <gatt_indicate+0x100>)
	req->len = len;
   17fe0:	6147      	str	r7, [r0, #20]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17fe2:	463a      	mov	r2, r7
	req->att_op = op;
   17fe4:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   17fe6:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   17fea:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17fec:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17fee:	4630      	mov	r0, r6
   17ff0:	f7fe fab6 	bl	16560 <bt_att_create_pdu>
	if (!buf) {
   17ff4:	4607      	mov	r7, r0
   17ff6:	b978      	cbnz	r0, 18018 <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   17ff8:	4b1d      	ldr	r3, [pc, #116]	; (18070 <gatt_indicate+0x104>)
   17ffa:	481a      	ldr	r0, [pc, #104]	; (18064 <gatt_indicate+0xf8>)
   17ffc:	9305      	str	r3, [sp, #20]
   17ffe:	2302      	movs	r3, #2
   18000:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18004:	aa04      	add	r2, sp, #16
   18006:	9304      	str	r3, [sp, #16]
   18008:	f015 f9b1 	bl	2d36e <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1800c:	4620      	mov	r0, r4
   1800e:	f7fe fd99 	bl	16b44 <bt_att_req_free>
		return -ENOMEM;
   18012:	f06f 050b 	mvn.w	r5, #11
   18016:	e7c1      	b.n	17f9c <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   18018:	2301      	movs	r3, #1
   1801a:	4642      	mov	r2, r8
   1801c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1801e:	f107 0a0c 	add.w	sl, r7, #12
   18022:	f015 f862 	bl	2d0ea <bt_att_set_tx_meta_data>
   18026:	2102      	movs	r1, #2
   18028:	4650      	mov	r0, sl
   1802a:	f003 fbdf 	bl	1b7ec <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1802e:	4680      	mov	r8, r0
   18030:	f828 9b02 	strh.w	r9, [r8], #2
   18034:	8aa9      	ldrh	r1, [r5, #20]
   18036:	4650      	mov	r0, sl
   18038:	f003 fbd8 	bl	1b7ec <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1803c:	8aaa      	ldrh	r2, [r5, #20]
   1803e:	6929      	ldr	r1, [r5, #16]
   18040:	4640      	mov	r0, r8
   18042:	f018 faa4 	bl	3058e <memcpy>
	err = bt_att_req_send(conn, req);
   18046:	4621      	mov	r1, r4
   18048:	4630      	mov	r0, r6
	req->buf = buf;
   1804a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1804c:	f7fe feb4 	bl	16db8 <bt_att_req_send>
	if (err) {
   18050:	4605      	mov	r5, r0
   18052:	2800      	cmp	r0, #0
   18054:	d0a2      	beq.n	17f9c <gatt_indicate+0x30>
		bt_att_req_free(req);
   18056:	4620      	mov	r0, r4
   18058:	f7fe fd74 	bl	16b44 <bt_att_req_free>
   1805c:	e79e      	b.n	17f9c <gatt_indicate+0x30>
   1805e:	bf00      	nop
   18060:	00035e1d 	.word	0x00035e1d
   18064:	000314f4 	.word	0x000314f4
   18068:	00035e33 	.word	0x00035e33
   1806c:	0002d113 	.word	0x0002d113
   18070:	00035e5e 	.word	0x00035e5e

00018074 <bt_gatt_indicate>:
{
   18074:	b530      	push	{r4, r5, lr}
   18076:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18078:	460c      	mov	r4, r1
{
   1807a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1807c:	b971      	cbnz	r1, 1809c <bt_gatt_indicate+0x28>
   1807e:	4946      	ldr	r1, [pc, #280]	; (18198 <bt_gatt_indicate+0x124>)
   18080:	f640 330d 	movw	r3, #2829	; 0xb0d
   18084:	4a45      	ldr	r2, [pc, #276]	; (1819c <bt_gatt_indicate+0x128>)
   18086:	4846      	ldr	r0, [pc, #280]	; (181a0 <bt_gatt_indicate+0x12c>)
   18088:	f012 fb27 	bl	2a6da <assert_print>
   1808c:	4845      	ldr	r0, [pc, #276]	; (181a4 <bt_gatt_indicate+0x130>)
   1808e:	f012 fb24 	bl	2a6da <assert_print>
   18092:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   18096:	4841      	ldr	r0, [pc, #260]	; (1819c <bt_gatt_indicate+0x128>)
   18098:	f012 fb18 	bl	2a6cc <assert_post_action>
   1809c:	684b      	ldr	r3, [r1, #4]
   1809e:	b973      	cbnz	r3, 180be <bt_gatt_indicate+0x4a>
   180a0:	680b      	ldr	r3, [r1, #0]
   180a2:	b963      	cbnz	r3, 180be <bt_gatt_indicate+0x4a>
   180a4:	4940      	ldr	r1, [pc, #256]	; (181a8 <bt_gatt_indicate+0x134>)
   180a6:	f640 330e 	movw	r3, #2830	; 0xb0e
   180aa:	4a3c      	ldr	r2, [pc, #240]	; (1819c <bt_gatt_indicate+0x128>)
   180ac:	483c      	ldr	r0, [pc, #240]	; (181a0 <bt_gatt_indicate+0x12c>)
   180ae:	f012 fb14 	bl	2a6da <assert_print>
   180b2:	483c      	ldr	r0, [pc, #240]	; (181a4 <bt_gatt_indicate+0x130>)
   180b4:	f012 fb11 	bl	2a6da <assert_print>
   180b8:	f640 310e 	movw	r1, #2830	; 0xb0e
   180bc:	e7eb      	b.n	18096 <bt_gatt_indicate+0x22>
   180be:	483b      	ldr	r0, [pc, #236]	; (181ac <bt_gatt_indicate+0x138>)
   180c0:	f015 f8a8 	bl	2d214 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   180c4:	0742      	lsls	r2, r0, #29
   180c6:	d561      	bpl.n	1818c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   180c8:	b115      	cbz	r5, 180d0 <bt_gatt_indicate+0x5c>
   180ca:	7b6b      	ldrb	r3, [r5, #13]
   180cc:	2b07      	cmp	r3, #7
   180ce:	d160      	bne.n	18192 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   180d0:	6860      	ldr	r0, [r4, #4]
   180d2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   180d4:	f7ff fc48 	bl	17968 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   180d8:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   180da:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   180de:	b33a      	cbz	r2, 18130 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180e0:	a905      	add	r1, sp, #20
   180e2:	9102      	str	r1, [sp, #8]
   180e4:	4932      	ldr	r1, [pc, #200]	; (181b0 <bt_gatt_indicate+0x13c>)
	found->attr = NULL;
   180e6:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180e8:	9101      	str	r1, [sp, #4]
   180ea:	2101      	movs	r1, #1
   180ec:	9100      	str	r1, [sp, #0]
   180ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   180f2:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   180f4:	f7ff fc80 	bl	179f8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   180f8:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   180fa:	b91b      	cbnz	r3, 18104 <bt_gatt_indicate+0x90>
			return -ENOENT;
   180fc:	f06f 0001 	mvn.w	r0, #1
}
   18100:	b00b      	add	sp, #44	; 0x2c
   18102:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   18104:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   18106:	9b05      	ldr	r3, [sp, #20]
   18108:	a904      	add	r1, sp, #16
   1810a:	6818      	ldr	r0, [r3, #0]
   1810c:	2300      	movs	r3, #0
   1810e:	f88d 3010 	strb.w	r3, [sp, #16]
   18112:	f642 0303 	movw	r3, #10243	; 0x2803
   18116:	f8ad 3012 	strh.w	r3, [sp, #18]
   1811a:	f013 feca 	bl	2beb2 <bt_uuid_cmp>
   1811e:	b970      	cbnz	r0, 1813e <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   18120:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   18122:	68c3      	ldr	r3, [r0, #12]
   18124:	799b      	ldrb	r3, [r3, #6]
   18126:	069b      	lsls	r3, r3, #26
   18128:	d405      	bmi.n	18136 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1812a:	f06f 0015 	mvn.w	r0, #21
   1812e:	e7e7      	b.n	18100 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   18130:	2800      	cmp	r0, #0
   18132:	d1e8      	bne.n	18106 <bt_gatt_indicate+0x92>
   18134:	e7e2      	b.n	180fc <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   18136:	f015 f94a 	bl	2d3ce <bt_gatt_attr_value_handle>
   1813a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1813e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   18142:	b13d      	cbz	r5, 18154 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   18144:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   18146:	4601      	mov	r1, r0
   18148:	4622      	mov	r2, r4
   1814a:	4628      	mov	r0, r5
		params->_ref = 1;
   1814c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1814e:	f7ff ff0d 	bl	17f6c <gatt_indicate>
   18152:	e7d5      	b.n	18100 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   18154:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18158:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1815a:	2302      	movs	r3, #2
   1815c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18160:	f642 1302 	movw	r3, #10498	; 0x2902
   18164:	f8ad 3012 	strh.w	r3, [sp, #18]
   18168:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1816a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1816c:	9302      	str	r3, [sp, #8]
   1816e:	4b11      	ldr	r3, [pc, #68]	; (181b4 <bt_gatt_indicate+0x140>)
   18170:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18174:	9301      	str	r3, [sp, #4]
   18176:	2301      	movs	r3, #1
   18178:	aa04      	add	r2, sp, #16
   1817a:	9300      	str	r3, [sp, #0]
   1817c:	462b      	mov	r3, r5
	data.ind_params = params;
   1817e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18180:	f88d 5010 	strb.w	r5, [sp, #16]
   18184:	f7ff fc38 	bl	179f8 <bt_gatt_foreach_attr_type>
	return data.err;
   18188:	9807      	ldr	r0, [sp, #28]
   1818a:	e7b9      	b.n	18100 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1818c:	f06f 000a 	mvn.w	r0, #10
   18190:	e7b6      	b.n	18100 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   18192:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18196:	e7b3      	b.n	18100 <bt_gatt_indicate+0x8c>
   18198:	00035e85 	.word	0x00035e85
   1819c:	00035d55 	.word	0x00035d55
   181a0:	00032679 	.word	0x00032679
   181a4:	00035e8c 	.word	0x00035e8c
   181a8:	00035ea2 	.word	0x00035ea2
   181ac:	200080cc 	.word	0x200080cc
   181b0:	0002d139 	.word	0x0002d139
   181b4:	00018579 	.word	0x00018579

000181b8 <sc_process>:
{
   181b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   181ba:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   181be:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   181c0:	f1a0 0720 	sub.w	r7, r0, #32
   181c4:	4628      	mov	r0, r5
   181c6:	f015 f825 	bl	2d214 <atomic_get>
   181ca:	0783      	lsls	r3, r0, #30
   181cc:	f3c0 0640 	ubfx	r6, r0, #1, #1
   181d0:	d50e      	bpl.n	181f0 <sc_process+0x38>
   181d2:	4919      	ldr	r1, [pc, #100]	; (18238 <sc_process+0x80>)
   181d4:	f240 439a 	movw	r3, #1178	; 0x49a
   181d8:	4a18      	ldr	r2, [pc, #96]	; (1823c <sc_process+0x84>)
   181da:	4819      	ldr	r0, [pc, #100]	; (18240 <sc_process+0x88>)
   181dc:	f012 fa7d 	bl	2a6da <assert_print>
   181e0:	4818      	ldr	r0, [pc, #96]	; (18244 <sc_process+0x8c>)
   181e2:	f012 fa7a 	bl	2a6da <assert_print>
   181e6:	f240 419a 	movw	r1, #1178	; 0x49a
   181ea:	4814      	ldr	r0, [pc, #80]	; (1823c <sc_process+0x84>)
   181ec:	f012 fa6e 	bl	2a6cc <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   181f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   181f4:	f06f 0101 	mvn.w	r1, #1
   181f8:	4628      	mov	r0, r5
   181fa:	9301      	str	r3, [sp, #4]
   181fc:	f015 f818 	bl	2d230 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   18200:	4b11      	ldr	r3, [pc, #68]	; (18248 <sc_process+0x90>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18202:	4639      	mov	r1, r7
	sc->params.attr = &_1_gatt_svc.attrs[2];
   18204:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   18208:	4b10      	ldr	r3, [pc, #64]	; (1824c <sc_process+0x94>)
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1820a:	4630      	mov	r0, r6
	sc->params.func = sc_indicate_rsp;
   1820c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   18210:	ab01      	add	r3, sp, #4
   18212:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   18216:	2304      	movs	r3, #4
	sc->start = 0U;
   18218:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   1821c:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   18220:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   18224:	f7ff ff26 	bl	18074 <bt_gatt_indicate>
   18228:	b918      	cbnz	r0, 18232 <sc_process+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1822a:	2102      	movs	r1, #2
   1822c:	4628      	mov	r0, r5
   1822e:	f014 fff4 	bl	2d21a <atomic_or>
}
   18232:	b003      	add	sp, #12
   18234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18236:	bf00      	nop
   18238:	00035ebf 	.word	0x00035ebf
   1823c:	00035d55 	.word	0x00035d55
   18240:	00032679 	.word	0x00032679
   18244:	00035ef0 	.word	0x00035ef0
   18248:	00032090 	.word	0x00032090
   1824c:	0001782d 	.word	0x0001782d

00018250 <update_ccc>:
{
   18250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18254:	b089      	sub	sp, #36	; 0x24
   18256:	4690      	mov	r8, r2
	struct bt_conn *conn = data->conn;
   18258:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1825a:	4b3b      	ldr	r3, [pc, #236]	; (18348 <update_ccc+0xf8>)
   1825c:	6882      	ldr	r2, [r0, #8]
{
   1825e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18260:	429a      	cmp	r2, r3
{
   18262:	af00      	add	r7, sp, #0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18264:	d11f      	bne.n	182a6 <update_ccc+0x56>
	ccc = attr->user_data;
   18266:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   18268:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1826a:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1826c:	b1db      	cbz	r3, 182a6 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1826e:	4620      	mov	r0, r4
   18270:	7831      	ldrb	r1, [r6, #0]
   18272:	f014 fa1a 	bl	2c6aa <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18276:	b1b0      	cbz	r0, 182a6 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18278:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1827c:	4629      	mov	r1, r5
   1827e:	4620      	mov	r0, r4
   18280:	f015 f8f7 	bl	2d472 <bt_gatt_check_perm>
		if (err) {
   18284:	b330      	cbz	r0, 182d4 <update_ccc+0x84>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18286:	2803      	cmp	r0, #3
   18288:	d112      	bne.n	182b0 <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1828a:	466c      	mov	r4, sp
   1828c:	b088      	sub	sp, #32
   1828e:	466a      	mov	r2, sp
   18290:	4b2e      	ldr	r3, [pc, #184]	; (1834c <update_ccc+0xfc>)
   18292:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18296:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1829a:	f842 0f10 	str.w	r0, [r2, #16]!
   1829e:	482c      	ldr	r0, [pc, #176]	; (18350 <update_ccc+0x100>)
   182a0:	f015 f865 	bl	2d36e <z_log_msg_static_create.constprop.0>
   182a4:	46a5      	mov	sp, r4
}
   182a6:	2001      	movs	r0, #1
   182a8:	3724      	adds	r7, #36	; 0x24
   182aa:	46bd      	mov	sp, r7
   182ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			sec = BT_SECURITY_L2;
   182b0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   182b2:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   182b4:	bf0c      	ite	eq
   182b6:	f04f 0903 	moveq.w	r9, #3
   182ba:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   182be:	f014 f9f2 	bl	2c6a6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   182c2:	4581      	cmp	r9, r0
   182c4:	d906      	bls.n	182d4 <update_ccc+0x84>
				if (data->sec < sec) {
   182c6:	f898 3004 	ldrb.w	r3, [r8, #4]
   182ca:	454b      	cmp	r3, r9
   182cc:	d2eb      	bcs.n	182a6 <update_ccc+0x56>
					data->sec = sec;
   182ce:	f888 9004 	strb.w	r9, [r8, #4]
   182d2:	e7e8      	b.n	182a6 <update_ccc+0x56>
		gatt_ccc_changed(attr, ccc);
   182d4:	4631      	mov	r1, r6
   182d6:	4628      	mov	r0, r5
   182d8:	f014 ff11 	bl	2d0fe <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   182dc:	4b1d      	ldr	r3, [pc, #116]	; (18354 <update_ccc+0x104>)
   182de:	429e      	cmp	r6, r3
   182e0:	d1e1      	bne.n	182a6 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   182e2:	7a20      	ldrb	r0, [r4, #8]
   182e4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   182e8:	f7fe fdca 	bl	16e80 <find_sc_cfg>
	if (!cfg) {
   182ec:	2800      	cmp	r0, #0
   182ee:	d0da      	beq.n	182a6 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   182f0:	8902      	ldrh	r2, [r0, #8]
   182f2:	8943      	ldrh	r3, [r0, #10]
   182f4:	ea52 0103 	orrs.w	r1, r2, r3
   182f8:	d0d5      	beq.n	182a6 <update_ccc+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   182fa:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   182fc:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   182fe:	4620      	mov	r0, r4
   18300:	f7fc fedc 	bl	150bc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18304:	2318      	movs	r3, #24
   18306:	4914      	ldr	r1, [pc, #80]	; (18358 <update_ccc+0x108>)
   18308:	4a14      	ldr	r2, [pc, #80]	; (1835c <update_ccc+0x10c>)
   1830a:	fb03 1300 	mla	r3, r3, r0, r1
   1830e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   18310:	4a13      	ldr	r2, [pc, #76]	; (18360 <update_ccc+0x110>)
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18312:	b200      	sxth	r0, r0
	sc_restore_params[index].func = sc_restore_rsp;
   18314:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   18316:	1d3a      	adds	r2, r7, #4
   18318:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1831a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1831c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18320:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   18324:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18326:	4620      	mov	r0, r4
   18328:	f7ff fea4 	bl	18074 <bt_gatt_indicate>
   1832c:	2800      	cmp	r0, #0
   1832e:	d0ba      	beq.n	182a6 <update_ccc+0x56>
		LOG_ERR("SC restore indication failed");
   18330:	4b0c      	ldr	r3, [pc, #48]	; (18364 <update_ccc+0x114>)
   18332:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18336:	61fb      	str	r3, [r7, #28]
   18338:	2302      	movs	r3, #2
   1833a:	4805      	ldr	r0, [pc, #20]	; (18350 <update_ccc+0x100>)
   1833c:	61bb      	str	r3, [r7, #24]
   1833e:	f107 0218 	add.w	r2, r7, #24
   18342:	f015 f814 	bl	2d36e <z_log_msg_static_create.constprop.0>
   18346:	e7ae      	b.n	182a6 <update_ccc+0x56>
   18348:	000176ed 	.word	0x000176ed
   1834c:	00035f0b 	.word	0x00035f0b
   18350:	000314f4 	.word	0x000314f4
   18354:	20008524 	.word	0x20008524
   18358:	200216e0 	.word	0x200216e0
   1835c:	00032090 	.word	0x00032090
   18360:	0002d393 	.word	0x0002d393
   18364:	00035f1f 	.word	0x00035f1f

00018368 <gatt_notify>:
{
   18368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1836c:	4614      	mov	r4, r2
   1836e:	4688      	mov	r8, r1
   18370:	b087      	sub	sp, #28
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18372:	2294      	movs	r2, #148	; 0x94
   18374:	6861      	ldr	r1, [r4, #4]
{
   18376:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18378:	f015 f87b 	bl	2d472 <bt_gatt_check_perm>
   1837c:	b170      	cbz	r0, 1839c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1837e:	4b2b      	ldr	r3, [pc, #172]	; (1842c <gatt_notify+0xc4>)
   18380:	482b      	ldr	r0, [pc, #172]	; (18430 <gatt_notify+0xc8>)
   18382:	9305      	str	r3, [sp, #20]
   18384:	2302      	movs	r3, #2
   18386:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1838a:	aa04      	add	r2, sp, #16
   1838c:	9304      	str	r3, [sp, #16]
   1838e:	f014 ffee 	bl	2d36e <z_log_msg_static_create.constprop.0>
		return -EPERM;
   18392:	f04f 30ff 	mov.w	r0, #4294967295
}
   18396:	b007      	add	sp, #28
   18398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1839c:	2201      	movs	r2, #1
   1839e:	4630      	mov	r0, r6
   183a0:	6861      	ldr	r1, [r4, #4]
   183a2:	f7ff fd19 	bl	17dd8 <bt_gatt_is_subscribed>
   183a6:	b960      	cbnz	r0, 183c2 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   183a8:	4b22      	ldr	r3, [pc, #136]	; (18434 <gatt_notify+0xcc>)
   183aa:	4821      	ldr	r0, [pc, #132]	; (18430 <gatt_notify+0xc8>)
   183ac:	9305      	str	r3, [sp, #20]
   183ae:	2302      	movs	r3, #2
   183b0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   183b4:	aa04      	add	r2, sp, #16
   183b6:	9304      	str	r3, [sp, #16]
   183b8:	f014 ffd9 	bl	2d36e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   183bc:	f06f 0015 	mvn.w	r0, #21
   183c0:	e7e9      	b.n	18396 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   183c2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   183c4:	211b      	movs	r1, #27
   183c6:	4630      	mov	r0, r6
   183c8:	3202      	adds	r2, #2
   183ca:	f7fe f8c9 	bl	16560 <bt_att_create_pdu>
	if (!buf) {
   183ce:	4605      	mov	r5, r0
   183d0:	b960      	cbnz	r0, 183ec <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   183d2:	4b19      	ldr	r3, [pc, #100]	; (18438 <gatt_notify+0xd0>)
   183d4:	4816      	ldr	r0, [pc, #88]	; (18430 <gatt_notify+0xc8>)
   183d6:	9305      	str	r3, [sp, #20]
   183d8:	2302      	movs	r3, #2
   183da:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   183de:	aa04      	add	r2, sp, #16
   183e0:	9304      	str	r3, [sp, #16]
   183e2:	f014 ffc4 	bl	2d36e <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   183e6:	f06f 000b 	mvn.w	r0, #11
   183ea:	e7d4      	b.n	18396 <gatt_notify+0x2e>
   183ec:	f100 090c 	add.w	r9, r0, #12
   183f0:	2102      	movs	r1, #2
   183f2:	4648      	mov	r0, r9
   183f4:	f003 f9fa 	bl	1b7ec <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   183f8:	4607      	mov	r7, r0
   183fa:	f827 8b02 	strh.w	r8, [r7], #2
   183fe:	89a1      	ldrh	r1, [r4, #12]
   18400:	4648      	mov	r0, r9
   18402:	f003 f9f3 	bl	1b7ec <net_buf_simple_add>
   18406:	89a2      	ldrh	r2, [r4, #12]
   18408:	68a1      	ldr	r1, [r4, #8]
   1840a:	4638      	mov	r0, r7
   1840c:	f018 f8bf 	bl	3058e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   18410:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   18414:	4628      	mov	r0, r5
   18416:	2301      	movs	r3, #1
   18418:	f014 fe67 	bl	2d0ea <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1841c:	4629      	mov	r1, r5
   1841e:	4630      	mov	r0, r6
}
   18420:	b007      	add	sp, #28
   18422:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   18426:	f7fe bc69 	b.w	16cfc <bt_att_send>
   1842a:	bf00      	nop
   1842c:	00035e1d 	.word	0x00035e1d
   18430:	000314f4 	.word	0x000314f4
   18434:	00035e33 	.word	0x00035e33
   18438:	00035f3c 	.word	0x00035f3c

0001843c <bt_gatt_notify_cb>:
{
   1843c:	b530      	push	{r4, r5, lr}
   1843e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   18440:	460c      	mov	r4, r1
{
   18442:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   18444:	b971      	cbnz	r1, 18464 <bt_gatt_notify_cb+0x28>
   18446:	4944      	ldr	r1, [pc, #272]	; (18558 <bt_gatt_notify_cb+0x11c>)
   18448:	f640 232d 	movw	r3, #2605	; 0xa2d
   1844c:	4a43      	ldr	r2, [pc, #268]	; (1855c <bt_gatt_notify_cb+0x120>)
   1844e:	4844      	ldr	r0, [pc, #272]	; (18560 <bt_gatt_notify_cb+0x124>)
   18450:	f012 f943 	bl	2a6da <assert_print>
   18454:	4843      	ldr	r0, [pc, #268]	; (18564 <bt_gatt_notify_cb+0x128>)
   18456:	f012 f940 	bl	2a6da <assert_print>
   1845a:	f640 212d 	movw	r1, #2605	; 0xa2d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1845e:	483f      	ldr	r0, [pc, #252]	; (1855c <bt_gatt_notify_cb+0x120>)
   18460:	f012 f934 	bl	2a6cc <assert_post_action>
   18464:	684b      	ldr	r3, [r1, #4]
   18466:	b973      	cbnz	r3, 18486 <bt_gatt_notify_cb+0x4a>
   18468:	680b      	ldr	r3, [r1, #0]
   1846a:	b963      	cbnz	r3, 18486 <bt_gatt_notify_cb+0x4a>
   1846c:	493e      	ldr	r1, [pc, #248]	; (18568 <bt_gatt_notify_cb+0x12c>)
   1846e:	f640 232e 	movw	r3, #2606	; 0xa2e
   18472:	4a3a      	ldr	r2, [pc, #232]	; (1855c <bt_gatt_notify_cb+0x120>)
   18474:	483a      	ldr	r0, [pc, #232]	; (18560 <bt_gatt_notify_cb+0x124>)
   18476:	f012 f930 	bl	2a6da <assert_print>
   1847a:	483a      	ldr	r0, [pc, #232]	; (18564 <bt_gatt_notify_cb+0x128>)
   1847c:	f012 f92d 	bl	2a6da <assert_print>
   18480:	f640 212e 	movw	r1, #2606	; 0xa2e
   18484:	e7eb      	b.n	1845e <bt_gatt_notify_cb+0x22>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18486:	4839      	ldr	r0, [pc, #228]	; (1856c <bt_gatt_notify_cb+0x130>)
   18488:	f014 fec4 	bl	2d214 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1848c:	0742      	lsls	r2, r0, #29
   1848e:	d55d      	bpl.n	1854c <bt_gatt_notify_cb+0x110>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18490:	b115      	cbz	r5, 18498 <bt_gatt_notify_cb+0x5c>
   18492:	7b6b      	ldrb	r3, [r5, #13]
   18494:	2b07      	cmp	r3, #7
   18496:	d15c      	bne.n	18552 <bt_gatt_notify_cb+0x116>
	data.attr = params->attr;
   18498:	6860      	ldr	r0, [r4, #4]
   1849a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1849c:	f7ff fa64 	bl	17968 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   184a0:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   184a2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   184a6:	b33a      	cbz	r2, 184f8 <bt_gatt_notify_cb+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   184a8:	a905      	add	r1, sp, #20
   184aa:	9102      	str	r1, [sp, #8]
   184ac:	4930      	ldr	r1, [pc, #192]	; (18570 <bt_gatt_notify_cb+0x134>)
	found->attr = NULL;
   184ae:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   184b0:	9101      	str	r1, [sp, #4]
   184b2:	2101      	movs	r1, #1
   184b4:	9100      	str	r1, [sp, #0]
   184b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   184ba:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   184bc:	f7ff fa9c 	bl	179f8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   184c0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   184c2:	b91b      	cbnz	r3, 184cc <bt_gatt_notify_cb+0x90>
			return -ENOENT;
   184c4:	f06f 0001 	mvn.w	r0, #1
}
   184c8:	b00b      	add	sp, #44	; 0x2c
   184ca:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   184cc:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   184ce:	9b05      	ldr	r3, [sp, #20]
   184d0:	a904      	add	r1, sp, #16
   184d2:	6818      	ldr	r0, [r3, #0]
   184d4:	2300      	movs	r3, #0
   184d6:	f88d 3010 	strb.w	r3, [sp, #16]
   184da:	f642 0303 	movw	r3, #10243	; 0x2803
   184de:	f8ad 3012 	strh.w	r3, [sp, #18]
   184e2:	f013 fce6 	bl	2beb2 <bt_uuid_cmp>
   184e6:	b970      	cbnz	r0, 18506 <bt_gatt_notify_cb+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   184e8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   184ea:	68c3      	ldr	r3, [r0, #12]
   184ec:	799b      	ldrb	r3, [r3, #6]
   184ee:	06db      	lsls	r3, r3, #27
   184f0:	d405      	bmi.n	184fe <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   184f2:	f06f 0015 	mvn.w	r0, #21
   184f6:	e7e7      	b.n	184c8 <bt_gatt_notify_cb+0x8c>
		if (!data.handle) {
   184f8:	2800      	cmp	r0, #0
   184fa:	d1e8      	bne.n	184ce <bt_gatt_notify_cb+0x92>
   184fc:	e7e2      	b.n	184c4 <bt_gatt_notify_cb+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   184fe:	f014 ff66 	bl	2d3ce <bt_gatt_attr_value_handle>
   18502:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   18506:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1850a:	b12d      	cbz	r5, 18518 <bt_gatt_notify_cb+0xdc>
		return gatt_notify(conn, data.handle, params);
   1850c:	4601      	mov	r1, r0
   1850e:	4622      	mov	r2, r4
   18510:	4628      	mov	r0, r5
   18512:	f7ff ff29 	bl	18368 <gatt_notify>
   18516:	e7d7      	b.n	184c8 <bt_gatt_notify_cb+0x8c>
	data.err = -ENOTCONN;
   18518:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1851c:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   18520:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   18522:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18524:	f8ad 2012 	strh.w	r2, [sp, #18]
   18528:	aa05      	add	r2, sp, #20
   1852a:	9202      	str	r2, [sp, #8]
   1852c:	4a11      	ldr	r2, [pc, #68]	; (18574 <bt_gatt_notify_cb+0x138>)
	data.type = BT_GATT_CCC_NOTIFY;
   1852e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18532:	e9cd 3200 	strd	r3, r2, [sp]
   18536:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1853a:	462b      	mov	r3, r5
   1853c:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1853e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18540:	f88d 5010 	strb.w	r5, [sp, #16]
   18544:	f7ff fa58 	bl	179f8 <bt_gatt_foreach_attr_type>
	return data.err;
   18548:	9807      	ldr	r0, [sp, #28]
   1854a:	e7bd      	b.n	184c8 <bt_gatt_notify_cb+0x8c>
		return -EAGAIN;
   1854c:	f06f 000a 	mvn.w	r0, #10
   18550:	e7ba      	b.n	184c8 <bt_gatt_notify_cb+0x8c>
		return -ENOTCONN;
   18552:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18556:	e7b7      	b.n	184c8 <bt_gatt_notify_cb+0x8c>
   18558:	00035e85 	.word	0x00035e85
   1855c:	00035d55 	.word	0x00035d55
   18560:	00032679 	.word	0x00032679
   18564:	00035e8c 	.word	0x00035e8c
   18568:	00035ea2 	.word	0x00035ea2
   1856c:	200080cc 	.word	0x200080cc
   18570:	0002d139 	.word	0x0002d139
   18574:	00018579 	.word	0x00018579

00018578 <notify_cb>:
{
   18578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1857c:	4b43      	ldr	r3, [pc, #268]	; (1868c <notify_cb+0x114>)
{
   1857e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18580:	6882      	ldr	r2, [r0, #8]
{
   18582:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18584:	429a      	cmp	r2, r3
{
   18586:	b087      	sub	sp, #28
	if (attr->write != bt_gatt_attr_write_ccc) {
   18588:	d004      	beq.n	18594 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1858a:	2701      	movs	r7, #1
}
   1858c:	4638      	mov	r0, r7
   1858e:	b007      	add	sp, #28
   18590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   18594:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18596:	4b3e      	ldr	r3, [pc, #248]	; (18690 <notify_cb+0x118>)
   18598:	429e      	cmp	r6, r3
   1859a:	d010      	beq.n	185be <notify_cb+0x46>
		if (cfg->value != data->type) {
   1859c:	8932      	ldrh	r2, [r6, #8]
   1859e:	89ab      	ldrh	r3, [r5, #12]
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   185a0:	1c71      	adds	r1, r6, #1
		if (cfg->value != data->type) {
   185a2:	429a      	cmp	r2, r3
   185a4:	d1f1      	bne.n	1858a <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   185a6:	7830      	ldrb	r0, [r6, #0]
   185a8:	f7fc ff38 	bl	1541c <bt_conn_lookup_addr_le>
		if (!conn) {
   185ac:	4604      	mov	r4, r0
   185ae:	2800      	cmp	r0, #0
   185b0:	d0eb      	beq.n	1858a <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   185b2:	7b43      	ldrb	r3, [r0, #13]
   185b4:	2b07      	cmp	r3, #7
   185b6:	d026      	beq.n	18606 <notify_cb+0x8e>
			bt_conn_unref(conn);
   185b8:	f7fc fc54 	bl	14e64 <bt_conn_unref>
			continue;
   185bc:	e7e5      	b.n	1858a <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   185be:	f04f 0800 	mov.w	r8, #0
   185c2:	4c34      	ldr	r4, [pc, #208]	; (18694 <notify_cb+0x11c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   185c4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 18698 <notify_cb+0x120>
   185c8:	4649      	mov	r1, r9
   185ca:	4620      	mov	r0, r4
   185cc:	f014 fe0d 	bl	2d1ea <bt_addr_le_eq>
   185d0:	b978      	cbnz	r0, 185f2 <notify_cb+0x7a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   185d2:	2207      	movs	r2, #7
   185d4:	4621      	mov	r1, r4
   185d6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   185da:	f7fc ff69 	bl	154b0 <bt_conn_lookup_state_le>
			if (!conn) {
   185de:	b978      	cbnz	r0, 18600 <notify_cb+0x88>
				sc = (struct sc_data *)data->ind_params->data;
   185e0:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   185e2:	4621      	mov	r1, r4
				sc = (struct sc_data *)data->ind_params->data;
   185e4:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   185e6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   185ea:	8853      	ldrh	r3, [r2, #2]
   185ec:	8812      	ldrh	r2, [r2, #0]
   185ee:	f7fe fe6f 	bl	172d0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   185f2:	340c      	adds	r4, #12
   185f4:	f1b8 0f00 	cmp.w	r8, #0
   185f8:	d1d0      	bne.n	1859c <notify_cb+0x24>
   185fa:	f04f 0801 	mov.w	r8, #1
   185fe:	e7e3      	b.n	185c8 <notify_cb+0x50>
			bt_conn_unref(conn);
   18600:	f7fc fc30 	bl	14e64 <bt_conn_unref>
   18604:	e7f5      	b.n	185f2 <notify_cb+0x7a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18606:	6973      	ldr	r3, [r6, #20]
   18608:	b123      	cbz	r3, 18614 <notify_cb+0x9c>
   1860a:	4639      	mov	r1, r7
   1860c:	4798      	blx	r3
   1860e:	b908      	cbnz	r0, 18614 <notify_cb+0x9c>
			bt_conn_unref(conn);
   18610:	4620      	mov	r0, r4
   18612:	e7d1      	b.n	185b8 <notify_cb+0x40>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18614:	4639      	mov	r1, r7
   18616:	2294      	movs	r2, #148	; 0x94
   18618:	4620      	mov	r0, r4
   1861a:	f014 ff2a 	bl	2d472 <bt_gatt_check_perm>
   1861e:	4607      	mov	r7, r0
   18620:	b150      	cbz	r0, 18638 <notify_cb+0xc0>
			LOG_WRN("Link is not encrypted");
   18622:	4b1e      	ldr	r3, [pc, #120]	; (1869c <notify_cb+0x124>)
   18624:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18628:	9305      	str	r3, [sp, #20]
   1862a:	2302      	movs	r3, #2
   1862c:	481c      	ldr	r0, [pc, #112]	; (186a0 <notify_cb+0x128>)
   1862e:	aa04      	add	r2, sp, #16
   18630:	9304      	str	r3, [sp, #16]
   18632:	f014 fe9c 	bl	2d36e <z_log_msg_static_create.constprop.0>
   18636:	e7eb      	b.n	18610 <notify_cb+0x98>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   18638:	89ab      	ldrh	r3, [r5, #12]
   1863a:	2b02      	cmp	r3, #2
   1863c:	d114      	bne.n	18668 <notify_cb+0xf0>
   1863e:	8933      	ldrh	r3, [r6, #8]
   18640:	079a      	lsls	r2, r3, #30
   18642:	d405      	bmi.n	18650 <notify_cb+0xd8>
		bt_conn_unref(conn);
   18644:	4620      	mov	r0, r4
   18646:	f7fc fc0d 	bl	14e64 <bt_conn_unref>
		data->err = 0;
   1864a:	2300      	movs	r3, #0
   1864c:	60ab      	str	r3, [r5, #8]
   1864e:	e79c      	b.n	1858a <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18650:	4620      	mov	r0, r4
   18652:	692a      	ldr	r2, [r5, #16]
   18654:	88a9      	ldrh	r1, [r5, #4]
   18656:	f7ff fc89 	bl	17f6c <gatt_indicate>
			if (err == 0) {
   1865a:	4606      	mov	r6, r0
   1865c:	b978      	cbnz	r0, 1867e <notify_cb+0x106>
				data->ind_params->_ref++;
   1865e:	692a      	ldr	r2, [r5, #16]
   18660:	7d93      	ldrb	r3, [r2, #22]
   18662:	3301      	adds	r3, #1
   18664:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18666:	e7ed      	b.n	18644 <notify_cb+0xcc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   18668:	2b01      	cmp	r3, #1
   1866a:	d1eb      	bne.n	18644 <notify_cb+0xcc>
   1866c:	8933      	ldrh	r3, [r6, #8]
   1866e:	07db      	lsls	r3, r3, #31
   18670:	d5e8      	bpl.n	18644 <notify_cb+0xcc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18672:	4620      	mov	r0, r4
   18674:	692a      	ldr	r2, [r5, #16]
   18676:	88a9      	ldrh	r1, [r5, #4]
   18678:	f7ff fe76 	bl	18368 <gatt_notify>
   1867c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1867e:	4620      	mov	r0, r4
   18680:	f7fc fbf0 	bl	14e64 <bt_conn_unref>
		if (err < 0) {
   18684:	2e00      	cmp	r6, #0
   18686:	db81      	blt.n	1858c <notify_cb+0x14>
   18688:	e7df      	b.n	1864a <notify_cb+0xd2>
   1868a:	bf00      	nop
   1868c:	000176ed 	.word	0x000176ed
   18690:	20008524 	.word	0x20008524
   18694:	20021b15 	.word	0x20021b15
   18698:	000345f5 	.word	0x000345f5
   1869c:	00035e1d 	.word	0x00035e1d
   186a0:	000314f4 	.word	0x000314f4

000186a4 <bt_gatt_connected>:
{
   186a4:	b5b0      	push	{r4, r5, r7, lr}
   186a6:	b08e      	sub	sp, #56	; 0x38
	data.sec = BT_SECURITY_L1;
   186a8:	2301      	movs	r3, #1
{
   186aa:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   186ac:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   186b0:	4604      	mov	r4, r0
	data.conn = conn;
   186b2:	6078      	str	r0, [r7, #4]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   186b4:	4629      	mov	r1, r5
   186b6:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   186b8:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   186ba:	f013 fd56 	bl	2c16a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   186be:	b198      	cbz	r0, 186e8 <bt_gatt_connected+0x44>
		if (conn->id) {
   186c0:	7a22      	ldrb	r2, [r4, #8]
   186c2:	b3a2      	cbz	r2, 1872e <bt_gatt_connected+0x8a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   186c4:	2104      	movs	r1, #4
   186c6:	4638      	mov	r0, r7
   186c8:	f011 fdb7 	bl	2a23a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   186cc:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   186ce:	2124      	movs	r1, #36	; 0x24
   186d0:	4a18      	ldr	r2, [pc, #96]	; (18734 <bt_gatt_connected+0x90>)
   186d2:	f107 000c 	add.w	r0, r7, #12
   186d6:	462b      	mov	r3, r5
   186d8:	f7f9 face 	bl	11c78 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   186dc:	f107 020c 	add.w	r2, r7, #12
   186e0:	4610      	mov	r0, r2
   186e2:	4915      	ldr	r1, [pc, #84]	; (18738 <bt_gatt_connected+0x94>)
   186e4:	f7f7 fbde 	bl	fea4 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   186e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   186ec:	2001      	movs	r0, #1
   186ee:	4a13      	ldr	r2, [pc, #76]	; (1873c <bt_gatt_connected+0x98>)
   186f0:	1d3b      	adds	r3, r7, #4
   186f2:	f014 feb3 	bl	2d45c <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   186f6:	4620      	mov	r0, r4
   186f8:	f013 ffd5 	bl	2c6a6 <bt_conn_get_security>
   186fc:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   186fe:	4288      	cmp	r0, r1
   18700:	d212      	bcs.n	18728 <bt_gatt_connected+0x84>
		int err = bt_conn_set_security(conn, data.sec);
   18702:	4620      	mov	r0, r4
   18704:	f013 ffa3 	bl	2c64e <bt_conn_set_security>
		if (err) {
   18708:	b170      	cbz	r0, 18728 <bt_gatt_connected+0x84>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1870a:	466c      	mov	r4, sp
   1870c:	b088      	sub	sp, #32
   1870e:	aa02      	add	r2, sp, #8
   18710:	4b0b      	ldr	r3, [pc, #44]	; (18740 <bt_gatt_connected+0x9c>)
   18712:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18716:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1871a:	2303      	movs	r3, #3
   1871c:	4809      	ldr	r0, [pc, #36]	; (18744 <bt_gatt_connected+0xa0>)
   1871e:	f842 3f10 	str.w	r3, [r2, #16]!
   18722:	f014 fe24 	bl	2d36e <z_log_msg_static_create.constprop.0>
   18726:	46a5      	mov	sp, r4
}
   18728:	3730      	adds	r7, #48	; 0x30
   1872a:	46bd      	mov	sp, r7
   1872c:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1872e:	9200      	str	r2, [sp, #0]
   18730:	e7cd      	b.n	186ce <bt_gatt_connected+0x2a>
   18732:	bf00      	nop
   18734:	00035de9 	.word	0x00035de9
   18738:	00017c89 	.word	0x00017c89
   1873c:	00018251 	.word	0x00018251
   18740:	00035f65 	.word	0x00035f65
   18744:	000314f4 	.word	0x000314f4

00018748 <bt_gatt_att_max_mtu_changed>:
{
   18748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1874a:	4605      	mov	r5, r0
   1874c:	460e      	mov	r6, r1
   1874e:	4617      	mov	r7, r2
	return list->head;
   18750:	4b06      	ldr	r3, [pc, #24]	; (1876c <bt_gatt_att_max_mtu_changed+0x24>)
   18752:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18754:	b14c      	cbz	r4, 1876a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18756:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1875a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1875c:	b11b      	cbz	r3, 18766 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1875e:	463a      	mov	r2, r7
   18760:	4631      	mov	r1, r6
   18762:	4628      	mov	r0, r5
   18764:	4798      	blx	r3
	return node->next;
   18766:	6864      	ldr	r4, [r4, #4]
   18768:	e7f4      	b.n	18754 <bt_gatt_att_max_mtu_changed+0xc>
}
   1876a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1876c:	20021720 	.word	0x20021720

00018770 <bt_gatt_encrypt_change>:
{
   18770:	b507      	push	{r0, r1, r2, lr}
	data.conn = conn;
   18772:	9000      	str	r0, [sp, #0]
	data.sec = BT_SECURITY_L1;
   18774:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18776:	466b      	mov	r3, sp
   18778:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1877c:	4a03      	ldr	r2, [pc, #12]	; (1878c <bt_gatt_encrypt_change+0x1c>)
	data.sec = BT_SECURITY_L1;
   1877e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18782:	f014 fe6b 	bl	2d45c <bt_gatt_foreach_attr>
}
   18786:	b003      	add	sp, #12
   18788:	f85d fb04 	ldr.w	pc, [sp], #4
   1878c:	00018251 	.word	0x00018251

00018790 <bt_gatt_store_ccc>:
	save.count = 0;
   18790:	2300      	movs	r3, #0
{
   18792:	b5f0      	push	{r4, r5, r6, r7, lr}
   18794:	4604      	mov	r4, r0
   18796:	b0c1      	sub	sp, #260	; 0x104
   18798:	af02      	add	r7, sp, #8
   1879a:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1879c:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1879e:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   187a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   187a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   187aa:	2001      	movs	r0, #1
   187ac:	4a1b      	ldr	r2, [pc, #108]	; (1881c <bt_gatt_store_ccc+0x8c>)
   187ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   187b2:	f014 fe53 	bl	2d45c <bt_gatt_foreach_attr>
	if (id) {
   187b6:	b364      	cbz	r4, 18812 <bt_gatt_store_ccc+0x82>
		u8_to_dec(id_str, sizeof(id_str), id);
   187b8:	1d3e      	adds	r6, r7, #4
   187ba:	4622      	mov	r2, r4
   187bc:	2104      	movs	r1, #4
   187be:	4630      	mov	r0, r6
   187c0:	f011 fd3b 	bl	2a23a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   187c4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   187c6:	4a16      	ldr	r2, [pc, #88]	; (18820 <bt_gatt_store_ccc+0x90>)
   187c8:	462b      	mov	r3, r5
   187ca:	2124      	movs	r1, #36	; 0x24
   187cc:	f107 0008 	add.w	r0, r7, #8
   187d0:	f7f9 fa52 	bl	11c78 <bt_settings_encode_key>
	if (save.count) {
   187d4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   187d8:	b1ea      	cbz	r2, 18816 <bt_gatt_store_ccc+0x86>
		len = save.count * sizeof(*save.store);
   187da:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   187dc:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   187e0:	f107 0008 	add.w	r0, r7, #8
   187e4:	f7f7 fafe 	bl	fde4 <settings_save_one>
	if (err) {
   187e8:	4604      	mov	r4, r0
   187ea:	b170      	cbz	r0, 1880a <bt_gatt_store_ccc+0x7a>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   187ec:	466d      	mov	r5, sp
   187ee:	b088      	sub	sp, #32
   187f0:	aa02      	add	r2, sp, #8
   187f2:	4b0c      	ldr	r3, [pc, #48]	; (18824 <bt_gatt_store_ccc+0x94>)
   187f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   187f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   187fc:	2303      	movs	r3, #3
   187fe:	480a      	ldr	r0, [pc, #40]	; (18828 <bt_gatt_store_ccc+0x98>)
   18800:	f842 3f10 	str.w	r3, [r2, #16]!
   18804:	f014 fdb3 	bl	2d36e <z_log_msg_static_create.constprop.0>
   18808:	46ad      	mov	sp, r5
}
   1880a:	4620      	mov	r0, r4
   1880c:	37fc      	adds	r7, #252	; 0xfc
   1880e:	46bd      	mov	sp, r7
   18810:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   18812:	9400      	str	r4, [sp, #0]
   18814:	e7d7      	b.n	187c6 <bt_gatt_store_ccc+0x36>
		str = NULL;
   18816:	4611      	mov	r1, r2
   18818:	e7e2      	b.n	187e0 <bt_gatt_store_ccc+0x50>
   1881a:	bf00      	nop
   1881c:	00017615 	.word	0x00017615
   18820:	00035de9 	.word	0x00035de9
   18824:	00035f91 	.word	0x00035f91
   18828:	000314f4 	.word	0x000314f4

0001882c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18830:	4604      	mov	r4, r0
   18832:	b08c      	sub	sp, #48	; 0x30
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18834:	4603      	mov	r3, r0
   18836:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1883a:	2001      	movs	r0, #1
   1883c:	4a3d      	ldr	r2, [pc, #244]	; (18934 <bt_gatt_disconnected+0x108>)
{
   1883e:	af02      	add	r7, sp, #8
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18840:	f014 fe0c 	bl	2d45c <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   18844:	4620      	mov	r0, r4
   18846:	f7fc fc39 	bl	150bc <bt_conn_index>
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1884a:	4e3b      	ldr	r6, [pc, #236]	; (18938 <bt_gatt_disconnected+0x10c>)
	uint8_t index = bt_conn_index(conn);
   1884c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1884e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   18852:	b120      	cbz	r0, 1885e <bt_gatt_disconnected+0x32>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   18854:	f7fc fb06 	bl	14e64 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   18858:	2300      	movs	r3, #0
   1885a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1885e:	4837      	ldr	r0, [pc, #220]	; (1893c <bt_gatt_disconnected+0x110>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18860:	f104 0590 	add.w	r5, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   18864:	f00d fc66 	bl	26134 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18868:	4629      	mov	r1, r5
   1886a:	7a20      	ldrb	r0, [r4, #8]
   1886c:	f013 fc7d 	bl	2c16a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   18870:	2800      	cmp	r0, #0
   18872:	d038      	beq.n	188e6 <bt_gatt_disconnected+0xba>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   18874:	4629      	mov	r1, r5
   18876:	7a20      	ldrb	r0, [r4, #8]
   18878:	f7ff ff8a 	bl	18790 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1887c:	4620      	mov	r0, r4
   1887e:	f7fe fad1 	bl	16e24 <find_cf_cfg>
	if (!cfg) {
   18882:	4606      	mov	r6, r0
   18884:	2800      	cmp	r0, #0
   18886:	d04e      	beq.n	18926 <bt_gatt_disconnected+0xfa>
		if (conn->id) {
   18888:	7a22      	ldrb	r2, [r4, #8]
		len = 0;
   1888a:	f04f 0801 	mov.w	r8, #1
		str = (char *)cfg->data;
   1888e:	3608      	adds	r6, #8
		if (conn->id) {
   18890:	b162      	cbz	r2, 188ac <bt_gatt_disconnected+0x80>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   18892:	2104      	movs	r1, #4
   18894:	4638      	mov	r0, r7
   18896:	f011 fcd0 	bl	2a23a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1889a:	462b      	mov	r3, r5
   1889c:	2124      	movs	r1, #36	; 0x24
   1889e:	4a28      	ldr	r2, [pc, #160]	; (18940 <bt_gatt_disconnected+0x114>)
   188a0:	9700      	str	r7, [sp, #0]
   188a2:	1d38      	adds	r0, r7, #4
   188a4:	f7f9 f9e8 	bl	11c78 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   188a8:	7a23      	ldrb	r3, [r4, #8]
   188aa:	b93b      	cbnz	r3, 188bc <bt_gatt_disconnected+0x90>
		bt_settings_encode_key(key, sizeof(key), "cf",
   188ac:	2300      	movs	r3, #0
   188ae:	2124      	movs	r1, #36	; 0x24
   188b0:	9300      	str	r3, [sp, #0]
   188b2:	4a23      	ldr	r2, [pc, #140]	; (18940 <bt_gatt_disconnected+0x114>)
   188b4:	462b      	mov	r3, r5
   188b6:	1d38      	adds	r0, r7, #4
   188b8:	f7f9 f9de 	bl	11c78 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   188bc:	4642      	mov	r2, r8
   188be:	4631      	mov	r1, r6
   188c0:	1d38      	adds	r0, r7, #4
   188c2:	f7f7 fa8f 	bl	fde4 <settings_save_one>
	if (err) {
   188c6:	b170      	cbz	r0, 188e6 <bt_gatt_disconnected+0xba>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   188c8:	466e      	mov	r6, sp
   188ca:	b088      	sub	sp, #32
   188cc:	aa02      	add	r2, sp, #8
   188ce:	4b1d      	ldr	r3, [pc, #116]	; (18944 <bt_gatt_disconnected+0x118>)
   188d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   188d4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   188d8:	2303      	movs	r3, #3
   188da:	481b      	ldr	r0, [pc, #108]	; (18948 <bt_gatt_disconnected+0x11c>)
   188dc:	f842 3f10 	str.w	r3, [r2, #16]!
   188e0:	f014 fd45 	bl	2d36e <z_log_msg_static_create.constprop.0>
   188e4:	46b5      	mov	sp, r6
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   188e6:	4629      	mov	r1, r5
   188e8:	7a20      	ldrb	r0, [r4, #8]
   188ea:	f013 fc3e 	bl	2c16a <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   188ee:	b148      	cbz	r0, 18904 <bt_gatt_disconnected+0xd8>
		struct addr_with_id addr_with_id = {
   188f0:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   188f6:	723b      	strb	r3, [r7, #8]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188f8:	2001      	movs	r0, #1
   188fa:	4a14      	ldr	r2, [pc, #80]	; (1894c <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   188fc:	607d      	str	r5, [r7, #4]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   188fe:	1d3b      	adds	r3, r7, #4
   18900:	f014 fdac 	bl	2d45c <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18904:	4620      	mov	r0, r4
   18906:	f7fe fa8d 	bl	16e24 <find_cf_cfg>
	if (!cfg) {
   1890a:	4606      	mov	r6, r0
   1890c:	b138      	cbz	r0, 1891e <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1890e:	4629      	mov	r1, r5
   18910:	7a20      	ldrb	r0, [r4, #8]
   18912:	f013 fc2a 	bl	2c16a <bt_addr_le_is_bonded>
   18916:	b940      	cbnz	r0, 1892a <bt_gatt_disconnected+0xfe>
		clear_cf_cfg(cfg);
   18918:	4630      	mov	r0, r6
   1891a:	f7fe fdb7 	bl	1748c <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1891e:	3728      	adds	r7, #40	; 0x28
   18920:	46bd      	mov	sp, r7
   18922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   18926:	4680      	mov	r8, r0
   18928:	e7c0      	b.n	188ac <bt_gatt_disconnected+0x80>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1892a:	4629      	mov	r1, r5
   1892c:	1c70      	adds	r0, r6, #1
   1892e:	f014 fc8a 	bl	2d246 <bt_addr_le_copy>
}
   18932:	e7f4      	b.n	1891e <bt_gatt_disconnected+0xf2>
   18934:	0001764d 	.word	0x0001764d
   18938:	20009e70 	.word	0x20009e70
   1893c:	20009e78 	.word	0x20009e78
   18940:	00035fdb 	.word	0x00035fdb
   18944:	00035faf 	.word	0x00035faf
   18948:	000314f4 	.word	0x000314f4
   1894c:	000175ed 	.word	0x000175ed

00018950 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   18950:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18952:	4b05      	ldr	r3, [pc, #20]	; (18968 <smp_find+0x18>)
{
   18954:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18956:	4618      	mov	r0, r3
   18958:	f014 fe0c 	bl	2d574 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1895c:	3b04      	subs	r3, #4
   1895e:	2800      	cmp	r0, #0
}
   18960:	bf14      	ite	ne
   18962:	4618      	movne	r0, r3
   18964:	2000      	moveq	r0, #0
   18966:	bd08      	pop	{r3, pc}
   18968:	20009f7c 	.word	0x20009f7c

0001896c <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1896c:	4b08      	ldr	r3, [pc, #32]	; (18990 <latch_auth_cb+0x24>)
   1896e:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18972:	681a      	ldr	r2, [r3, #0]
   18974:	4b07      	ldr	r3, [pc, #28]	; (18994 <latch_auth_cb+0x28>)
   18976:	e8d0 1fef 	ldaex	r1, [r0]
   1897a:	4299      	cmp	r1, r3
   1897c:	d104      	bne.n	18988 <latch_auth_cb+0x1c>
   1897e:	e8c0 2fec 	stlex	ip, r2, [r0]
   18982:	f1bc 0f00 	cmp.w	ip, #0
   18986:	d1f6      	bne.n	18976 <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18988:	e8d0 0faf 	lda	r0, [r0]
}
   1898c:	4770      	bx	lr
   1898e:	bf00      	nop
   18990:	20021600 	.word	0x20021600
   18994:	20009f78 	.word	0x20009f78

00018998 <get_io_capa>:
{
   18998:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1899a:	f7ff ffe7 	bl	1896c <latch_auth_cb>
	if (!smp_auth_cb) {
   1899e:	4603      	mov	r3, r0
   189a0:	b1c8      	cbz	r0, 189d6 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   189a2:	e9d0 1200 	ldrd	r1, r2, [r0]
   189a6:	b921      	cbnz	r1, 189b2 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   189a8:	2a00      	cmp	r2, #0
   189aa:	bf0c      	ite	eq
   189ac:	2003      	moveq	r0, #3
   189ae:	2002      	movne	r0, #2
   189b0:	e010      	b.n	189d4 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   189b2:	b132      	cbz	r2, 189c2 <get_io_capa+0x2a>
   189b4:	6883      	ldr	r3, [r0, #8]
   189b6:	b913      	cbnz	r3, 189be <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   189b8:	4b09      	ldr	r3, [pc, #36]	; (189e0 <get_io_capa+0x48>)
   189ba:	781b      	ldrb	r3, [r3, #0]
   189bc:	b933      	cbnz	r3, 189cc <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   189be:	2004      	movs	r0, #4
   189c0:	e008      	b.n	189d4 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   189c2:	4907      	ldr	r1, [pc, #28]	; (189e0 <get_io_capa+0x48>)
   189c4:	7808      	ldrb	r0, [r1, #0]
   189c6:	b128      	cbz	r0, 189d4 <get_io_capa+0x3c>
   189c8:	689b      	ldr	r3, [r3, #8]
   189ca:	b933      	cbnz	r3, 189da <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   189cc:	3a00      	subs	r2, #0
   189ce:	bf18      	it	ne
   189d0:	2201      	movne	r2, #1
   189d2:	0050      	lsls	r0, r2, #1
}
   189d4:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   189d6:	2003      	movs	r0, #3
   189d8:	e7fc      	b.n	189d4 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   189da:	2001      	movs	r0, #1
   189dc:	e7fa      	b.n	189d4 <get_io_capa+0x3c>
   189de:	bf00      	nop
   189e0:	200223f8 	.word	0x200223f8

000189e4 <get_auth>:
{
   189e4:	b510      	push	{r4, lr}
	if (sc_supported) {
   189e6:	4b0c      	ldr	r3, [pc, #48]	; (18a18 <get_auth+0x34>)
   189e8:	781b      	ldrb	r3, [r3, #0]
   189ea:	b17b      	cbz	r3, 18a0c <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   189ec:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189f0:	f7ff ffd2 	bl	18998 <get_io_capa>
	if (bondable) {
   189f4:	4b09      	ldr	r3, [pc, #36]	; (18a1c <get_auth+0x38>)
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189f6:	2803      	cmp	r0, #3
	if (bondable) {
   189f8:	781b      	ldrb	r3, [r3, #0]
		auth &= ~(BT_SMP_AUTH_MITM);
   189fa:	bf0c      	ite	eq
   189fc:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   18a00:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   18a04:	b12b      	cbz	r3, 18a12 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   18a06:	f044 0001 	orr.w	r0, r4, #1
}
   18a0a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   18a0c:	f001 0407 	and.w	r4, r1, #7
   18a10:	e7ee      	b.n	189f0 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   18a12:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   18a16:	e7f8      	b.n	18a0a <get_auth+0x26>
   18a18:	200223f8 	.word	0x200223f8
   18a1c:	200089f6 	.word	0x200089f6

00018a20 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   18a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   18a22:	4b06      	ldr	r3, [pc, #24]	; (18a3c <bt_smp_pkey_ready.part.0+0x1c>)
   18a24:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18a28:	9305      	str	r3, [sp, #20]
   18a2a:	2302      	movs	r3, #2
   18a2c:	4804      	ldr	r0, [pc, #16]	; (18a40 <bt_smp_pkey_ready.part.0+0x20>)
   18a2e:	aa04      	add	r2, sp, #16
   18a30:	9304      	str	r3, [sp, #16]
   18a32:	f014 fdf7 	bl	2d624 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   18a36:	b007      	add	sp, #28
   18a38:	f85d fb04 	ldr.w	pc, [sp], #4
   18a3c:	00035fec 	.word	0x00035fec
   18a40:	00031544 	.word	0x00031544

00018a44 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   18a44:	b580      	push	{r7, lr}
   18a46:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   18a48:	b088      	sub	sp, #32
   18a4a:	466a      	mov	r2, sp
   18a4c:	4b07      	ldr	r3, [pc, #28]	; (18a6c <bt_smp_accept.part.0+0x28>)
   18a4e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18a52:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18a56:	2303      	movs	r3, #3
   18a58:	4805      	ldr	r0, [pc, #20]	; (18a70 <bt_smp_accept.part.0+0x2c>)
   18a5a:	f842 3f10 	str.w	r3, [r2, #16]!
   18a5e:	f014 fde1 	bl	2d624 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   18a62:	f06f 000b 	mvn.w	r0, #11
   18a66:	46bd      	mov	sp, r7
   18a68:	bd80      	pop	{r7, pc}
   18a6a:	bf00      	nop
   18a6c:	00036005 	.word	0x00036005
   18a70:	00031544 	.word	0x00031544

00018a74 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   18a74:	4b05      	ldr	r3, [pc, #20]	; (18a8c <bt_smp_accept+0x18>)
   18a76:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   18a7a:	b10a      	cbz	r2, 18a80 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18a7c:	f7ff bfe2 	b.w	18a44 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   18a80:	4803      	ldr	r0, [pc, #12]	; (18a90 <bt_smp_accept+0x1c>)
		*chan = &smp->chan.chan;
   18a82:	33ec      	adds	r3, #236	; 0xec
		smp->chan.chan.ops = &ops;
   18a84:	6058      	str	r0, [r3, #4]
}
   18a86:	4610      	mov	r0, r2
		*chan = &smp->chan.chan;
   18a88:	600b      	str	r3, [r1, #0]
}
   18a8a:	4770      	bx	lr
   18a8c:	20009f78 	.word	0x20009f78
   18a90:	00032194 	.word	0x00032194

00018a94 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   18a94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   18a96:	4b07      	ldr	r3, [pc, #28]	; (18ab4 <smp_chan_get.part.0+0x20>)
   18a98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18a9c:	9305      	str	r3, [sp, #20]
   18a9e:	2302      	movs	r3, #2
   18aa0:	4805      	ldr	r0, [pc, #20]	; (18ab8 <smp_chan_get.part.0+0x24>)
   18aa2:	aa04      	add	r2, sp, #16
   18aa4:	9304      	str	r3, [sp, #16]
   18aa6:	f014 fdbd 	bl	2d624 <z_log_msg_static_create.constprop.0>
}
   18aaa:	2000      	movs	r0, #0
   18aac:	b007      	add	sp, #28
   18aae:	f85d fb04 	ldr.w	pc, [sp], #4
   18ab2:	bf00      	nop
   18ab4:	0003602a 	.word	0x0003602a
   18ab8:	00031544 	.word	0x00031544

00018abc <smp_init>:
{
   18abc:	b538      	push	{r3, r4, r5, lr}
   18abe:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   18ac0:	22ec      	movs	r2, #236	; 0xec
   18ac2:	2100      	movs	r1, #0
   18ac4:	f017 fd9d 	bl	30602 <memset>
	if (bt_rand(smp->prnd, 16)) {
   18ac8:	2110      	movs	r1, #16
   18aca:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18ace:	f7fb fd49 	bl	14564 <bt_rand>
   18ad2:	4604      	mov	r4, r0
   18ad4:	b948      	cbnz	r0, 18aea <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   18ad6:	2105      	movs	r1, #5
   18ad8:	4628      	mov	r0, r5
   18ada:	f014 fdb1 	bl	2d640 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18ade:	f7fb fdf5 	bl	146cc <bt_pub_key_get>
   18ae2:	4b03      	ldr	r3, [pc, #12]	; (18af0 <smp_init+0x34>)
   18ae4:	6018      	str	r0, [r3, #0]
}
   18ae6:	4620      	mov	r0, r4
   18ae8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18aea:	2408      	movs	r4, #8
   18aec:	e7fb      	b.n	18ae6 <smp_init+0x2a>
   18aee:	bf00      	nop
   18af0:	20021728 	.word	0x20021728

00018af4 <smp_dhkey_generate>:
{
   18af4:	b530      	push	{r4, r5, lr}
   18af6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18af8:	1d05      	adds	r5, r0, #4
   18afa:	2108      	movs	r1, #8
   18afc:	4628      	mov	r0, r5
{
   18afe:	b087      	sub	sp, #28
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18b00:	f014 fd9e 	bl	2d640 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   18b04:	490b      	ldr	r1, [pc, #44]	; (18b34 <smp_dhkey_generate+0x40>)
   18b06:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18b0a:	f7fb fded 	bl	146e8 <bt_dh_key_gen>
	if (err) {
   18b0e:	b170      	cbz	r0, 18b2e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   18b10:	2108      	movs	r1, #8
   18b12:	4628      	mov	r0, r5
   18b14:	f014 fd55 	bl	2d5c2 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   18b18:	4b07      	ldr	r3, [pc, #28]	; (18b38 <smp_dhkey_generate+0x44>)
   18b1a:	4808      	ldr	r0, [pc, #32]	; (18b3c <smp_dhkey_generate+0x48>)
   18b1c:	9305      	str	r3, [sp, #20]
   18b1e:	2302      	movs	r3, #2
   18b20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b24:	aa04      	add	r2, sp, #16
   18b26:	9304      	str	r3, [sp, #16]
   18b28:	f014 fd7c 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18b2c:	2008      	movs	r0, #8
}
   18b2e:	b007      	add	sp, #28
   18b30:	bd30      	pop	{r4, r5, pc}
   18b32:	bf00      	nop
   18b34:	0002da19 	.word	0x0002da19
   18b38:	00036045 	.word	0x00036045
   18b3c:	00031544 	.word	0x00031544

00018b40 <smp_ident_info>:
{
   18b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b42:	4605      	mov	r5, r0
   18b44:	460b      	mov	r3, r1
   18b46:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18b48:	210d      	movs	r1, #13
   18b4a:	3004      	adds	r0, #4
   18b4c:	f014 fd12 	bl	2d574 <atomic_test_bit>
   18b50:	b368      	cbz	r0, 18bae <smp_ident_info+0x6e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   18b52:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18b54:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   18b58:	2002      	movs	r0, #2
   18b5a:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18b5e:	4632      	mov	r2, r6
   18b60:	7a19      	ldrb	r1, [r3, #8]
   18b62:	f001 fd5b 	bl	1a61c <bt_keys_get_type>
		if (!keys) {
   18b66:	b9b8      	cbnz	r0, 18b98 <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18b68:	4630      	mov	r0, r6
   18b6a:	f7f8 ffaf 	bl	11acc <bt_addr_le_str>
   18b6e:	466c      	mov	r4, sp
   18b70:	b088      	sub	sp, #32
   18b72:	466a      	mov	r2, sp
   18b74:	4b11      	ldr	r3, [pc, #68]	; (18bbc <smp_ident_info+0x7c>)
   18b76:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18b7a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
   18b82:	8393      	strh	r3, [r2, #28]
   18b84:	4b0e      	ldr	r3, [pc, #56]	; (18bc0 <smp_ident_info+0x80>)
   18b86:	480f      	ldr	r0, [pc, #60]	; (18bc4 <smp_ident_info+0x84>)
   18b88:	f842 3f10 	str.w	r3, [r2, #16]!
   18b8c:	f014 fd4a 	bl	2d624 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18b90:	2008      	movs	r0, #8
   18b92:	46a5      	mov	sp, r4
}
   18b94:	46bd      	mov	sp, r7
   18b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18b98:	4622      	mov	r2, r4
   18b9a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
   18b9e:	f104 0110 	add.w	r1, r4, #16
   18ba2:	f852 0b04 	ldr.w	r0, [r2], #4
   18ba6:	428a      	cmp	r2, r1
   18ba8:	f843 0b04 	str.w	r0, [r3], #4
   18bac:	d1f9      	bne.n	18ba2 <smp_ident_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   18bae:	4628      	mov	r0, r5
   18bb0:	2109      	movs	r1, #9
   18bb2:	f014 fd45 	bl	2d640 <atomic_set_bit>
	return 0;
   18bb6:	2000      	movs	r0, #0
   18bb8:	e7ec      	b.n	18b94 <smp_ident_info+0x54>
   18bba:	bf00      	nop
   18bbc:	0003605e 	.word	0x0003605e
   18bc0:	01000003 	.word	0x01000003
   18bc4:	00031544 	.word	0x00031544

00018bc8 <smp_encrypt_info>:
{
   18bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18bca:	4605      	mov	r5, r0
   18bcc:	460b      	mov	r3, r1
   18bce:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   18bd0:	210d      	movs	r1, #13
   18bd2:	3004      	adds	r0, #4
   18bd4:	f014 fcce 	bl	2d574 <atomic_test_bit>
   18bd8:	b368      	cbz	r0, 18c36 <smp_encrypt_info+0x6e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   18bda:	68dc      	ldr	r4, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   18bdc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   18be0:	2004      	movs	r0, #4
   18be2:	f103 0690 	add.w	r6, r3, #144	; 0x90
   18be6:	4632      	mov	r2, r6
   18be8:	7a19      	ldrb	r1, [r3, #8]
   18bea:	f001 fd17 	bl	1a61c <bt_keys_get_type>
		if (!keys) {
   18bee:	b9b8      	cbnz	r0, 18c20 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   18bf0:	4630      	mov	r0, r6
   18bf2:	f7f8 ff6b 	bl	11acc <bt_addr_le_str>
   18bf6:	466c      	mov	r4, sp
   18bf8:	b088      	sub	sp, #32
   18bfa:	466a      	mov	r2, sp
   18bfc:	4b11      	ldr	r3, [pc, #68]	; (18c44 <smp_encrypt_info+0x7c>)
   18bfe:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   18c02:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18c06:	f44f 7300 	mov.w	r3, #512	; 0x200
   18c0a:	8393      	strh	r3, [r2, #28]
   18c0c:	4b0e      	ldr	r3, [pc, #56]	; (18c48 <smp_encrypt_info+0x80>)
   18c0e:	480f      	ldr	r0, [pc, #60]	; (18c4c <smp_encrypt_info+0x84>)
   18c10:	f842 3f10 	str.w	r3, [r2, #16]!
   18c14:	f014 fd06 	bl	2d624 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   18c18:	2008      	movs	r0, #8
   18c1a:	46a5      	mov	sp, r4
}
   18c1c:	46bd      	mov	sp, r7
   18c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c20:	4622      	mov	r2, r4
   18c22:	f100 031a 	add.w	r3, r0, #26
   18c26:	f104 0110 	add.w	r1, r4, #16
   18c2a:	f852 0b04 	ldr.w	r0, [r2], #4
   18c2e:	428a      	cmp	r2, r1
   18c30:	f843 0b04 	str.w	r0, [r3], #4
   18c34:	d1f9      	bne.n	18c2a <smp_encrypt_info+0x62>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   18c36:	4628      	mov	r0, r5
   18c38:	2107      	movs	r1, #7
   18c3a:	f014 fd01 	bl	2d640 <atomic_set_bit>
	return 0;
   18c3e:	2000      	movs	r0, #0
   18c40:	e7ec      	b.n	18c1c <smp_encrypt_info+0x54>
   18c42:	bf00      	nop
   18c44:	0003605e 	.word	0x0003605e
   18c48:	01000003 	.word	0x01000003
   18c4c:	00031544 	.word	0x00031544

00018c50 <smp_send_pairing_confirm>:
{
   18c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c52:	b083      	sub	sp, #12
	switch (smp->method) {
   18c54:	7a04      	ldrb	r4, [r0, #8]
{
   18c56:	4605      	mov	r5, r0
	switch (smp->method) {
   18c58:	2c02      	cmp	r4, #2
{
   18c5a:	af02      	add	r7, sp, #8
	switch (smp->method) {
   18c5c:	d823      	bhi.n	18ca6 <smp_send_pairing_confirm+0x56>
   18c5e:	b144      	cbz	r4, 18c72 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18c60:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18c64:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18c68:	40dc      	lsrs	r4, r3
   18c6a:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18c6e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   18c72:	2103      	movs	r1, #3
   18c74:	4628      	mov	r0, r5
   18c76:	f014 fcf3 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!buf) {
   18c7a:	4606      	mov	r6, r0
   18c7c:	b320      	cbz	r0, 18cc8 <smp_send_pairing_confirm+0x78>
   18c7e:	2110      	movs	r1, #16
   18c80:	300c      	adds	r0, #12
   18c82:	f002 fdb3 	bl	1b7ec <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18c86:	9000      	str	r0, [sp, #0]
   18c88:	4818      	ldr	r0, [pc, #96]	; (18cec <smp_send_pairing_confirm+0x9c>)
   18c8a:	4623      	mov	r3, r4
   18c8c:	6800      	ldr	r0, [r0, #0]
   18c8e:	f105 0227 	add.w	r2, r5, #39	; 0x27
   18c92:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18c96:	f014 ff65 	bl	2db64 <bt_crypto_f4>
   18c9a:	4604      	mov	r4, r0
   18c9c:	b1d0      	cbz	r0, 18cd4 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   18c9e:	4630      	mov	r0, r6
   18ca0:	f002 fc82 	bl	1b5a8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18ca4:	e010      	b.n	18cc8 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   18ca6:	2c03      	cmp	r4, #3
   18ca8:	d012      	beq.n	18cd0 <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18caa:	466d      	mov	r5, sp
   18cac:	b088      	sub	sp, #32
   18cae:	aa02      	add	r2, sp, #8
   18cb0:	4b0f      	ldr	r3, [pc, #60]	; (18cf0 <smp_send_pairing_confirm+0xa0>)
   18cb2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (smp->method) {
   18cb6:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18cba:	2303      	movs	r3, #3
   18cbc:	480d      	ldr	r0, [pc, #52]	; (18cf4 <smp_send_pairing_confirm+0xa4>)
   18cbe:	f842 3f10 	str.w	r3, [r2, #16]!
   18cc2:	f014 fcaf 	bl	2d624 <z_log_msg_static_create.constprop.0>
   18cc6:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   18cc8:	2008      	movs	r0, #8
}
   18cca:	3704      	adds	r7, #4
   18ccc:	46bd      	mov	sp, r7
   18cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   18cd0:	2400      	movs	r4, #0
   18cd2:	e7ce      	b.n	18c72 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   18cd4:	4602      	mov	r2, r0
   18cd6:	4631      	mov	r1, r6
   18cd8:	4628      	mov	r0, r5
   18cda:	f014 fc86 	bl	2d5ea <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18cde:	1d28      	adds	r0, r5, #4
   18ce0:	4621      	mov	r1, r4
   18ce2:	f014 fc6e 	bl	2d5c2 <atomic_clear_bit>
	return 0;
   18ce6:	4620      	mov	r0, r4
   18ce8:	e7ef      	b.n	18cca <smp_send_pairing_confirm+0x7a>
   18cea:	bf00      	nop
   18cec:	20021728 	.word	0x20021728
   18cf0:	00036078 	.word	0x00036078
   18cf4:	00031544 	.word	0x00031544

00018cf8 <smp_public_key_periph>:
{
   18cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cfc:	b086      	sub	sp, #24
   18cfe:	4604      	mov	r4, r0
   18d00:	af00      	add	r7, sp, #0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d02:	f7ff fe33 	bl	1896c <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18d06:	1d25      	adds	r5, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18d08:	4606      	mov	r6, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18d0a:	210e      	movs	r1, #14
   18d0c:	4628      	mov	r0, r5
   18d0e:	f014 fc31 	bl	2d574 <atomic_test_bit>
   18d12:	b9a0      	cbnz	r0, 18d3e <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18d14:	4b54      	ldr	r3, [pc, #336]	; (18e68 <smp_public_key_periph+0x170>)
   18d16:	2220      	movs	r2, #32
   18d18:	6819      	ldr	r1, [r3, #0]
   18d1a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18d1e:	f017 fc26 	bl	3056e <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18d22:	b960      	cbnz	r0, 18d3e <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   18d24:	4b51      	ldr	r3, [pc, #324]	; (18e6c <smp_public_key_periph+0x174>)
   18d26:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18d2a:	617b      	str	r3, [r7, #20]
   18d2c:	2302      	movs	r3, #2
   18d2e:	4850      	ldr	r0, [pc, #320]	; (18e70 <smp_public_key_periph+0x178>)
   18d30:	613b      	str	r3, [r7, #16]
   18d32:	f107 0210 	add.w	r2, r7, #16
   18d36:	f014 fc75 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   18d3a:	2008      	movs	r0, #8
   18d3c:	e034      	b.n	18da8 <smp_public_key_periph+0xb0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18d3e:	210c      	movs	r1, #12
   18d40:	4620      	mov	r0, r4
   18d42:	f014 fc8d 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   18d46:	4680      	mov	r8, r0
   18d48:	2800      	cmp	r0, #0
   18d4a:	d0f6      	beq.n	18d3a <smp_public_key_periph+0x42>
   18d4c:	2140      	movs	r1, #64	; 0x40
   18d4e:	300c      	adds	r0, #12
   18d50:	f002 fd4c 	bl	1b7ec <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18d54:	4b44      	ldr	r3, [pc, #272]	; (18e68 <smp_public_key_periph+0x170>)
   18d56:	4602      	mov	r2, r0
   18d58:	681b      	ldr	r3, [r3, #0]
   18d5a:	4601      	mov	r1, r0
   18d5c:	f103 0020 	add.w	r0, r3, #32
   18d60:	f853 cb04 	ldr.w	ip, [r3], #4
   18d64:	4283      	cmp	r3, r0
   18d66:	f841 cb04 	str.w	ip, [r1], #4
   18d6a:	d1f9      	bne.n	18d60 <smp_public_key_periph+0x68>
   18d6c:	3220      	adds	r2, #32
   18d6e:	f103 0120 	add.w	r1, r3, #32
   18d72:	f853 0b04 	ldr.w	r0, [r3], #4
   18d76:	428b      	cmp	r3, r1
   18d78:	f842 0b04 	str.w	r0, [r2], #4
   18d7c:	d1f9      	bne.n	18d72 <smp_public_key_periph+0x7a>
	smp_send(smp, req_buf, NULL, NULL);
   18d7e:	2200      	movs	r2, #0
   18d80:	4641      	mov	r1, r8
   18d82:	4620      	mov	r0, r4
   18d84:	f014 fc31 	bl	2d5ea <smp_send.constprop.0>
	switch (smp->method) {
   18d88:	7a23      	ldrb	r3, [r4, #8]
   18d8a:	2b05      	cmp	r3, #5
   18d8c:	d85a      	bhi.n	18e44 <smp_public_key_periph+0x14c>
   18d8e:	e8df f003 	tbb	[pc, r3]
   18d92:	3b03      	.short	0x3b03
   18d94:	5659030f 	.word	0x5659030f
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18d98:	2104      	movs	r1, #4
   18d9a:	4620      	mov	r0, r4
   18d9c:	f014 fc50 	bl	2d640 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18da0:	f7ff ff56 	bl	18c50 <smp_send_pairing_confirm>
		if (err) {
   18da4:	2800      	cmp	r0, #0
   18da6:	d03e      	beq.n	18e26 <smp_public_key_periph+0x12e>
}
   18da8:	3718      	adds	r7, #24
   18daa:	46bd      	mov	sp, r7
   18dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18db0:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   18db2:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18db6:	f7ff fdd9 	bl	1896c <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18dba:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18dbc:	4606      	mov	r6, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18dbe:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18dc2:	f7fb fbcf 	bl	14564 <bt_rand>
   18dc6:	2800      	cmp	r0, #0
   18dc8:	d1b7      	bne.n	18d3a <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   18dca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   18dce:	4a29      	ldr	r2, [pc, #164]	; (18e74 <smp_public_key_periph+0x17c>)
	smp->passkey_round = 0U;
   18dd0:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
		smp->passkey %= 1000000;
   18dd4:	fbb3 f1f2 	udiv	r1, r3, r2
   18dd8:	fb02 3311 	mls	r3, r2, r1, r3
   18ddc:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   18de0:	b156      	cbz	r6, 18df8 <smp_public_key_periph+0x100>
   18de2:	6833      	ldr	r3, [r6, #0]
   18de4:	b143      	cbz	r3, 18df8 <smp_public_key_periph+0x100>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18de6:	210b      	movs	r1, #11
   18de8:	4628      	mov	r0, r5
   18dea:	f014 fc29 	bl	2d640 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   18dee:	4640      	mov	r0, r8
   18df0:	6833      	ldr	r3, [r6, #0]
   18df2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18df6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18df8:	2103      	movs	r1, #3
   18dfa:	4620      	mov	r0, r4
   18dfc:	f014 fc20 	bl	2d640 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18e00:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18e02:	f014 fc1d 	bl	2d640 <atomic_set_bit>
		break;
   18e06:	e00e      	b.n	18e26 <smp_public_key_periph+0x12e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18e08:	4620      	mov	r0, r4
   18e0a:	2103      	movs	r1, #3
   18e0c:	f014 fc18 	bl	2d640 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18e10:	210e      	movs	r1, #14
   18e12:	f014 fc15 	bl	2d640 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18e16:	4628      	mov	r0, r5
   18e18:	210a      	movs	r1, #10
   18e1a:	f014 fc11 	bl	2d640 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   18e1e:	6873      	ldr	r3, [r6, #4]
   18e20:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   18e24:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18e26:	4628      	mov	r0, r5
   18e28:	2107      	movs	r1, #7
   18e2a:	f014 fc09 	bl	2d640 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18e2e:	2008      	movs	r0, #8
   18e30:	f7ff fd8e 	bl	18950 <smp_find>
   18e34:	b9b0      	cbnz	r0, 18e64 <smp_public_key_periph+0x16c>
		return smp_dhkey_generate(smp);
   18e36:	4620      	mov	r0, r4
   18e38:	f7ff fe5c 	bl	18af4 <smp_dhkey_generate>
   18e3c:	e7b4      	b.n	18da8 <smp_public_key_periph+0xb0>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18e3e:	2104      	movs	r1, #4
   18e40:	4620      	mov	r0, r4
   18e42:	e7de      	b.n	18e02 <smp_public_key_periph+0x10a>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18e44:	466c      	mov	r4, sp
   18e46:	b088      	sub	sp, #32
   18e48:	466a      	mov	r2, sp
   18e4a:	490b      	ldr	r1, [pc, #44]	; (18e78 <smp_public_key_periph+0x180>)
   18e4c:	4808      	ldr	r0, [pc, #32]	; (18e70 <smp_public_key_periph+0x178>)
	switch (smp->method) {
   18e4e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   18e52:	2303      	movs	r3, #3
   18e54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18e58:	f842 3f10 	str.w	r3, [r2, #16]!
   18e5c:	f014 fbe2 	bl	2d624 <z_log_msg_static_create.constprop.0>
   18e60:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   18e62:	e76a      	b.n	18d3a <smp_public_key_periph+0x42>
	return 0;
   18e64:	2000      	movs	r0, #0
   18e66:	e79f      	b.n	18da8 <smp_public_key_periph+0xb0>
   18e68:	20021728 	.word	0x20021728
   18e6c:	00036094 	.word	0x00036094
   18e70:	00031544 	.word	0x00031544
   18e74:	000f4240 	.word	0x000f4240
   18e78:	00036078 	.word	0x00036078

00018e7c <smp_public_key>:
{
   18e7c:	b530      	push	{r4, r5, lr}
   18e7e:	4604      	mov	r4, r0
   18e80:	460d      	mov	r5, r1
   18e82:	b087      	sub	sp, #28
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18e84:	f7ff fd72 	bl	1896c <latch_auth_cb>
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18e88:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18e8c:	4602      	mov	r2, r0
   18e8e:	68eb      	ldr	r3, [r5, #12]
   18e90:	f103 0120 	add.w	r1, r3, #32
   18e94:	f853 5b04 	ldr.w	r5, [r3], #4
   18e98:	428b      	cmp	r3, r1
   18e9a:	f842 5b04 	str.w	r5, [r2], #4
   18e9e:	d1f9      	bne.n	18e94 <smp_public_key+0x18>
   18ea0:	f104 0277 	add.w	r2, r4, #119	; 0x77
   18ea4:	f103 0120 	add.w	r1, r3, #32
   18ea8:	f853 5b04 	ldr.w	r5, [r3], #4
   18eac:	428b      	cmp	r3, r1
   18eae:	f842 5b04 	str.w	r5, [r2], #4
   18eb2:	d1f9      	bne.n	18ea8 <smp_public_key+0x2c>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18eb4:	f7fb fb74 	bl	145a0 <bt_pub_key_is_debug>
   18eb8:	b940      	cbnz	r0, 18ecc <smp_public_key+0x50>
	if (!sc_public_key) {
   18eba:	4b1c      	ldr	r3, [pc, #112]	; (18f2c <smp_public_key+0xb0>)
   18ebc:	681d      	ldr	r5, [r3, #0]
   18ebe:	bb75      	cbnz	r5, 18f1e <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18ec0:	1d20      	adds	r0, r4, #4
   18ec2:	2106      	movs	r1, #6
   18ec4:	f014 fbbc 	bl	2d640 <atomic_set_bit>
	return 0;
   18ec8:	4628      	mov	r0, r5
		return 0;
   18eca:	e026      	b.n	18f1a <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   18ecc:	4b18      	ldr	r3, [pc, #96]	; (18f30 <smp_public_key+0xb4>)
   18ece:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   18ed2:	9305      	str	r3, [sp, #20]
   18ed4:	2302      	movs	r3, #2
   18ed6:	4817      	ldr	r0, [pc, #92]	; (18f34 <smp_public_key+0xb8>)
   18ed8:	aa04      	add	r2, sp, #16
   18eda:	9304      	str	r3, [sp, #16]
   18edc:	f014 fba2 	bl	2d624 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18ee0:	210e      	movs	r1, #14
   18ee2:	1d20      	adds	r0, r4, #4
   18ee4:	f014 fbac 	bl	2d640 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18ee8:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   18eec:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18ef0:	b933      	cbnz	r3, 18f00 <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18ef2:	7a28      	ldrb	r0, [r5, #8]
   18ef4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   18ef8:	f001 fa8e 	bl	1a418 <bt_keys_get_addr>
   18efc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
	if (!conn->le.keys ||
   18f00:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   18f04:	2b00      	cmp	r3, #0
   18f06:	d0d8      	beq.n	18eba <smp_public_key+0x3e>
   18f08:	89da      	ldrh	r2, [r3, #14]
   18f0a:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18f0e:	2a00      	cmp	r2, #0
   18f10:	d0d3      	beq.n	18eba <smp_public_key+0x3e>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18f12:	7b5b      	ldrb	r3, [r3, #13]
   18f14:	079b      	lsls	r3, r3, #30
   18f16:	d4d0      	bmi.n	18eba <smp_public_key+0x3e>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18f18:	2003      	movs	r0, #3
}
   18f1a:	b007      	add	sp, #28
   18f1c:	bd30      	pop	{r4, r5, pc}
	err = smp_public_key_periph(smp);
   18f1e:	4620      	mov	r0, r4
}
   18f20:	b007      	add	sp, #28
   18f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = smp_public_key_periph(smp);
   18f26:	f7ff bee7 	b.w	18cf8 <smp_public_key_periph>
   18f2a:	bf00      	nop
   18f2c:	20021728 	.word	0x20021728
   18f30:	000360af 	.word	0x000360af
   18f34:	00031544 	.word	0x00031544

00018f38 <smp_pairing_req>:
{
   18f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f3c:	b087      	sub	sp, #28
   18f3e:	460d      	mov	r5, r1
   18f40:	af00      	add	r7, sp, #0
   18f42:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   18f44:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f48:	f7ff fd10 	bl	1896c <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   18f4c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   18f50:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18f52:	f899 3003 	ldrb.w	r3, [r9, #3]
   18f56:	3b07      	subs	r3, #7
   18f58:	2b09      	cmp	r3, #9
   18f5a:	d904      	bls.n	18f66 <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   18f5c:	2006      	movs	r0, #6
}
   18f5e:	371c      	adds	r7, #28
   18f60:	46bd      	mov	sp, r7
   18f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   18f66:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   18f6a:	b15b      	cbz	r3, 18f84 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   18f6c:	1d25      	adds	r5, r4, #4
   18f6e:	210f      	movs	r1, #15
   18f70:	4628      	mov	r0, r5
   18f72:	f014 faff 	bl	2d574 <atomic_test_bit>
   18f76:	b980      	cbnz	r0, 18f9a <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   18f78:	4620      	mov	r0, r4
   18f7a:	f7ff fd9f 	bl	18abc <smp_init>
		if (ret) {
   18f7e:	b160      	cbz	r0, 18f9a <smp_pairing_req+0x62>
			return ret;
   18f80:	b2c0      	uxtb	r0, r0
   18f82:	e7ec      	b.n	18f5e <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18f84:	7a30      	ldrb	r0, [r6, #8]
   18f86:	f106 0190 	add.w	r1, r6, #144	; 0x90
   18f8a:	f001 fa45 	bl	1a418 <bt_keys_get_addr>
   18f8e:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   18f92:	2800      	cmp	r0, #0
   18f94:	d1ea      	bne.n	18f6c <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   18f96:	2008      	movs	r0, #8
   18f98:	e7e1      	b.n	18f5e <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   18f9a:	2301      	movs	r3, #1
   18f9c:	7263      	strb	r3, [r4, #9]
   18f9e:	f8d9 3000 	ldr.w	r3, [r9]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18fa2:	4620      	mov	r0, r4
   18fa4:	f8c4 300a 	str.w	r3, [r4, #10]
   18fa8:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   18fac:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   18fae:	2302      	movs	r3, #2
   18fb0:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   18fb2:	f899 1002 	ldrb.w	r1, [r9, #2]
   18fb6:	f7ff fd15 	bl	189e4 <get_auth>
   18fba:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   18fbc:	4620      	mov	r0, r4
   18fbe:	f7ff fceb 	bl	18998 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18fc2:	4bac      	ldr	r3, [pc, #688]	; (19274 <smp_pairing_req+0x33c>)
	rsp->io_capability = get_io_capa(smp);
   18fc4:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   18fc6:	781b      	ldrb	r3, [r3, #0]
   18fc8:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   18fca:	2310      	movs	r3, #16
   18fcc:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   18fce:	f899 3004 	ldrb.w	r3, [r9, #4]
   18fd2:	f003 0303 	and.w	r3, r3, #3
   18fd6:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   18fd8:	f899 3005 	ldrb.w	r3, [r9, #5]
   18fdc:	f003 0301 	and.w	r3, r3, #1
   18fe0:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   18fe2:	7ce3      	ldrb	r3, [r4, #19]
   18fe4:	071b      	lsls	r3, r3, #28
   18fe6:	d50d      	bpl.n	19004 <smp_pairing_req+0xcc>
   18fe8:	f899 3002 	ldrb.w	r3, [r9, #2]
   18fec:	0718      	lsls	r0, r3, #28
   18fee:	d509      	bpl.n	19004 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   18ff0:	2105      	movs	r1, #5
   18ff2:	4628      	mov	r0, r5
   18ff4:	f014 fb24 	bl	2d640 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   18ff8:	7d63      	ldrb	r3, [r4, #21]
   18ffa:	f003 0302 	and.w	r3, r3, #2
   18ffe:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   19000:	2300      	movs	r3, #0
   19002:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   19004:	7ce3      	ldrb	r3, [r4, #19]
   19006:	0699      	lsls	r1, r3, #26
   19008:	d507      	bpl.n	1901a <smp_pairing_req+0xe2>
   1900a:	f899 3002 	ldrb.w	r3, [r9, #2]
   1900e:	069a      	lsls	r2, r3, #26
   19010:	d503      	bpl.n	1901a <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   19012:	2114      	movs	r1, #20
   19014:	4628      	mov	r0, r5
   19016:	f014 fb13 	bl	2d640 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1901a:	7da3      	ldrb	r3, [r4, #22]
   1901c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   19020:	7d63      	ldrb	r3, [r4, #21]
   19022:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   19026:	7ce3      	ldrb	r3, [r4, #19]
   19028:	07db      	lsls	r3, r3, #31
   1902a:	d507      	bpl.n	1903c <smp_pairing_req+0x104>
   1902c:	f899 3002 	ldrb.w	r3, [r9, #2]
   19030:	07d8      	lsls	r0, r3, #31
   19032:	d503      	bpl.n	1903c <smp_pairing_req+0x104>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   19034:	210d      	movs	r1, #13
   19036:	4628      	mov	r0, r5
   19038:	f014 fb02 	bl	2d640 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1903c:	2103      	movs	r1, #3
   1903e:	4628      	mov	r0, r5
   19040:	f014 fafe 	bl	2d640 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19044:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   19046:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1904a:	f014 fa93 	bl	2d574 <atomic_test_bit>
   1904e:	bb40      	cbnz	r0, 190a2 <smp_pairing_req+0x16a>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   19050:	f1b9 0f04 	cmp.w	r9, #4
   19054:	d845      	bhi.n	190e2 <smp_pairing_req+0x1aa>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19056:	7ae3      	ldrb	r3, [r4, #11]
   19058:	7ca2      	ldrb	r2, [r4, #18]
   1905a:	4013      	ands	r3, r2
   1905c:	07d9      	lsls	r1, r3, #31
   1905e:	d43e      	bmi.n	190de <smp_pairing_req+0x1a6>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19060:	7b21      	ldrb	r1, [r4, #12]
   19062:	7ce3      	ldrb	r3, [r4, #19]
   19064:	4319      	orrs	r1, r3
   19066:	f011 0104 	ands.w	r1, r1, #4
   1906a:	d011      	beq.n	19090 <smp_pairing_req+0x158>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1906c:	4620      	mov	r0, r4
   1906e:	f7ff fc93 	bl	18998 <get_io_capa>
   19072:	4b81      	ldr	r3, [pc, #516]	; (19278 <smp_pairing_req+0x340>)
   19074:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   19078:	4499      	add	r9, r3
   1907a:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1907e:	2904      	cmp	r1, #4
   19080:	d106      	bne.n	19090 <smp_pairing_req+0x158>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   19082:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   19086:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   19088:	2b00      	cmp	r3, #0
   1908a:	bf14      	ite	ne
   1908c:	2101      	movne	r1, #1
   1908e:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   19090:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   19092:	4620      	mov	r0, r4
   19094:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   19098:	f014 fa72 	bl	2d580 <update_keys_check>
   1909c:	bb18      	cbnz	r0, 190e6 <smp_pairing_req+0x1ae>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1909e:	2003      	movs	r0, #3
   190a0:	e75d      	b.n	18f5e <smp_pairing_req+0x26>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   190a2:	7b23      	ldrb	r3, [r4, #12]
   190a4:	7ce0      	ldrb	r0, [r4, #19]
   190a6:	ea03 0200 	and.w	r2, r3, r0
   190aa:	0712      	lsls	r2, r2, #28
   190ac:	d506      	bpl.n	190bc <smp_pairing_req+0x184>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   190ae:	7ae2      	ldrb	r2, [r4, #11]
   190b0:	f894 c012 	ldrb.w	ip, [r4, #18]
   190b4:	ea42 020c 	orr.w	r2, r2, ip
   190b8:	07d2      	lsls	r2, r2, #31
   190ba:	d4e9      	bmi.n	19090 <smp_pairing_req+0x158>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   190bc:	f1b9 0f04 	cmp.w	r9, #4
   190c0:	d80f      	bhi.n	190e2 <smp_pairing_req+0x1aa>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   190c2:	ea43 0100 	orr.w	r1, r3, r0
   190c6:	f011 0104 	ands.w	r1, r1, #4
   190ca:	d0e1      	beq.n	19090 <smp_pairing_req+0x158>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   190cc:	4620      	mov	r0, r4
   190ce:	f7ff fc63 	bl	18998 <get_io_capa>
   190d2:	4b6a      	ldr	r3, [pc, #424]	; (1927c <smp_pairing_req+0x344>)
   190d4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   190d8:	444b      	add	r3, r9
   190da:	5c19      	ldrb	r1, [r3, r0]
   190dc:	e7d8      	b.n	19090 <smp_pairing_req+0x158>
		return LEGACY_OOB;
   190de:	2106      	movs	r1, #6
   190e0:	e7d6      	b.n	19090 <smp_pairing_req+0x158>
		return JUST_WORKS;
   190e2:	2100      	movs	r1, #0
   190e4:	e7d4      	b.n	19090 <smp_pairing_req+0x158>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   190e6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   190ea:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   190ec:	2b03      	cmp	r3, #3
   190ee:	d03e      	beq.n	1916e <smp_pairing_req+0x236>
   190f0:	d82c      	bhi.n	1914c <smp_pairing_req+0x214>
   190f2:	3b01      	subs	r3, #1
   190f4:	2b01      	cmp	r3, #1
   190f6:	f63f af4e 	bhi.w	18f96 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190fa:	2105      	movs	r1, #5
   190fc:	4628      	mov	r0, r5
   190fe:	f014 fa39 	bl	2d574 <atomic_test_bit>
   19102:	2800      	cmp	r0, #0
   19104:	f040 80c4 	bne.w	19290 <smp_pairing_req+0x358>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19108:	4620      	mov	r0, r4
   1910a:	f7ff fc2f 	bl	1896c <latch_auth_cb>
   1910e:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19110:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   19112:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19116:	f7ff fc29 	bl	1896c <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1911a:	f109 0190 	add.w	r1, r9, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1911e:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   19120:	f899 0008 	ldrb.w	r0, [r9, #8]
   19124:	f001 fa3e 	bl	1a5a4 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   19128:	7a23      	ldrb	r3, [r4, #8]
   1912a:	b320      	cbz	r0, 19176 <smp_pairing_req+0x23e>
   1912c:	7b42      	ldrb	r2, [r0, #13]
   1912e:	07d2      	lsls	r2, r2, #31
   19130:	d521      	bpl.n	19176 <smp_pairing_req+0x23e>
   19132:	bb03      	cbnz	r3, 19176 <smp_pairing_req+0x23e>
		LOG_ERR("JustWorks failed, authenticated keys present");
   19134:	4b52      	ldr	r3, [pc, #328]	; (19280 <smp_pairing_req+0x348>)
   19136:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1913a:	617b      	str	r3, [r7, #20]
   1913c:	2302      	movs	r3, #2
   1913e:	4851      	ldr	r0, [pc, #324]	; (19284 <smp_pairing_req+0x34c>)
   19140:	613b      	str	r3, [r7, #16]
   19142:	f107 0210 	add.w	r2, r7, #16
   19146:	f014 fa6d 	bl	2d624 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1914a:	e724      	b.n	18f96 <smp_pairing_req+0x5e>
	switch (sec) {
   1914c:	2b04      	cmp	r3, #4
   1914e:	f47f af22 	bne.w	18f96 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   19152:	7d23      	ldrb	r3, [r4, #20]
   19154:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   19156:	4293      	cmp	r3, r2
   19158:	bf28      	it	cs
   1915a:	4613      	movcs	r3, r2
   1915c:	2b10      	cmp	r3, #16
   1915e:	f47f aefd 	bne.w	18f5c <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19162:	2105      	movs	r1, #5
   19164:	4628      	mov	r0, r5
   19166:	f014 fa05 	bl	2d574 <atomic_test_bit>
   1916a:	2800      	cmp	r0, #0
   1916c:	d097      	beq.n	1909e <smp_pairing_req+0x166>
		if (smp->method == JUST_WORKS) {
   1916e:	7a23      	ldrb	r3, [r4, #8]
   19170:	2b00      	cmp	r3, #0
   19172:	d1c2      	bne.n	190fa <smp_pairing_req+0x1c2>
   19174:	e793      	b.n	1909e <smp_pairing_req+0x166>
	switch (smp->method) {
   19176:	2b06      	cmp	r3, #6
   19178:	d85f      	bhi.n	1923a <smp_pairing_req+0x302>
   1917a:	e8df f003 	tbb	[pc, r3]
   1917e:	5617      	.short	0x5617
   19180:	5e5e5e2f 	.word	0x5e5e5e2f
   19184:	04          	.byte	0x04
   19185:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   19186:	2e00      	cmp	r6, #0
   19188:	d067      	beq.n	1925a <smp_pairing_req+0x322>
   1918a:	68f3      	ldr	r3, [r6, #12]
   1918c:	2b00      	cmp	r3, #0
   1918e:	d064      	beq.n	1925a <smp_pairing_req+0x322>
			struct bt_conn_oob_info info = {
   19190:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19192:	210a      	movs	r1, #10
   19194:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   19196:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19198:	f014 fa52 	bl	2d640 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1919c:	4639      	mov	r1, r7
   1919e:	68f3      	ldr	r3, [r6, #12]
   191a0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   191a4:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   191a6:	7a23      	ldrb	r3, [r4, #8]
   191a8:	2b00      	cmp	r3, #0
   191aa:	d158      	bne.n	1925e <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   191ac:	210f      	movs	r1, #15
   191ae:	4628      	mov	r0, r5
   191b0:	f014 f9e0 	bl	2d574 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   191b4:	2800      	cmp	r0, #0
   191b6:	d152      	bne.n	1925e <smp_pairing_req+0x326>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   191b8:	f1b8 0f00 	cmp.w	r8, #0
   191bc:	d04f      	beq.n	1925e <smp_pairing_req+0x326>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   191be:	f8d8 3014 	ldr.w	r3, [r8, #20]
   191c2:	2b00      	cmp	r3, #0
   191c4:	d04b      	beq.n	1925e <smp_pairing_req+0x326>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   191c6:	4628      	mov	r0, r5
   191c8:	210a      	movs	r1, #10
   191ca:	f014 fa39 	bl	2d640 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   191ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
   191d2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   191d6:	4798      	blx	r3
		return 0;
   191d8:	2000      	movs	r0, #0
   191da:	e6c0      	b.n	18f5e <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   191dc:	2104      	movs	r1, #4
   191de:	4638      	mov	r0, r7
   191e0:	f7fb f9c0 	bl	14564 <bt_rand>
   191e4:	2800      	cmp	r0, #0
   191e6:	f47f aed6 	bne.w	18f96 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   191ea:	683b      	ldr	r3, [r7, #0]
   191ec:	4a26      	ldr	r2, [pc, #152]	; (19288 <smp_pairing_req+0x350>)
   191ee:	fbb3 f1f2 	udiv	r1, r3, r2
   191f2:	fb02 3311 	mls	r3, r2, r1, r3
   191f6:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   191f8:	b14e      	cbz	r6, 1920e <smp_pairing_req+0x2d6>
   191fa:	6833      	ldr	r3, [r6, #0]
   191fc:	b13b      	cbz	r3, 1920e <smp_pairing_req+0x2d6>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   191fe:	210b      	movs	r1, #11
   19200:	4628      	mov	r0, r5
   19202:	f014 fa1d 	bl	2d640 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   19206:	4648      	mov	r0, r9
   19208:	6833      	ldr	r3, [r6, #0]
   1920a:	6839      	ldr	r1, [r7, #0]
   1920c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1920e:	683b      	ldr	r3, [r7, #0]
	dst[1] = val >> 8;
   19210:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   19214:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	sys_put_le16(val >> 16, &dst[2]);
   19218:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1921a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1921e:	0a1b      	lsrs	r3, r3, #8
   19220:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   19224:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   19228:	e7bd      	b.n	191a6 <smp_pairing_req+0x26e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1922a:	4628      	mov	r0, r5
   1922c:	210a      	movs	r1, #10
   1922e:	f014 fa07 	bl	2d640 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   19232:	4648      	mov	r0, r9
   19234:	6873      	ldr	r3, [r6, #4]
   19236:	4798      	blx	r3
	if (ret) {
   19238:	e7b5      	b.n	191a6 <smp_pairing_req+0x26e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1923a:	466c      	mov	r4, sp
   1923c:	b088      	sub	sp, #32
   1923e:	466a      	mov	r2, sp
   19240:	4912      	ldr	r1, [pc, #72]	; (1928c <smp_pairing_req+0x354>)
   19242:	4810      	ldr	r0, [pc, #64]	; (19284 <smp_pairing_req+0x34c>)
	switch (smp->method) {
   19244:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19248:	2303      	movs	r3, #3
   1924a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1924e:	f842 3f10 	str.w	r3, [r2, #16]!
   19252:	f014 f9e7 	bl	2d624 <z_log_msg_static_create.constprop.0>
   19256:	46a5      	mov	sp, r4
	if (ret) {
   19258:	e69d      	b.n	18f96 <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1925a:	2002      	movs	r0, #2
   1925c:	e67f      	b.n	18f5e <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1925e:	2103      	movs	r1, #3
   19260:	4620      	mov	r0, r4
   19262:	f014 f9ed 	bl	2d640 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   19266:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   19268:	f014 f9ea 	bl	2d640 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1926c:	f014 fa17 	bl	2d69e <send_pairing_rsp>
   19270:	e675      	b.n	18f5e <smp_pairing_req+0x26>
   19272:	bf00      	nop
   19274:	200223f9 	.word	0x200223f9
   19278:	00036437 	.word	0x00036437
   1927c:	0003641e 	.word	0x0003641e
   19280:	000360d0 	.word	0x000360d0
   19284:	00031544 	.word	0x00031544
   19288:	000f4240 	.word	0x000f4240
   1928c:	00036078 	.word	0x00036078
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   19290:	7a23      	ldrb	r3, [r4, #8]
   19292:	b993      	cbnz	r3, 192ba <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19294:	210f      	movs	r1, #15
   19296:	4628      	mov	r0, r5
   19298:	f014 f96c 	bl	2d574 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1929c:	b968      	cbnz	r0, 192ba <smp_pairing_req+0x382>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1929e:	f1b8 0f00 	cmp.w	r8, #0
   192a2:	d00a      	beq.n	192ba <smp_pairing_req+0x382>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   192a4:	f8d8 3014 	ldr.w	r3, [r8, #20]
   192a8:	b13b      	cbz	r3, 192ba <smp_pairing_req+0x382>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   192aa:	4628      	mov	r0, r5
   192ac:	210a      	movs	r1, #10
   192ae:	f014 f9c7 	bl	2d640 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   192b2:	4630      	mov	r0, r6
   192b4:	f8d8 3014 	ldr.w	r3, [r8, #20]
   192b8:	e78d      	b.n	191d6 <smp_pairing_req+0x29e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   192ba:	210c      	movs	r1, #12
   192bc:	4620      	mov	r0, r4
   192be:	e7d3      	b.n	19268 <smp_pairing_req+0x330>

000192c0 <compute_and_check_and_send_periph_dhcheck>:
{
   192c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   192c4:	4604      	mov	r4, r0
   192c6:	b096      	sub	sp, #88	; 0x58
   192c8:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   192ca:	f107 0520 	add.w	r5, r7, #32
   192ce:	2210      	movs	r2, #16
   192d0:	2100      	movs	r1, #0
   192d2:	4628      	mov	r0, r5
   192d4:	f017 f995 	bl	30602 <memset>
	switch (smp->method) {
   192d8:	7a23      	ldrb	r3, [r4, #8]
   192da:	2b05      	cmp	r3, #5
   192dc:	d83a      	bhi.n	19354 <compute_and_check_and_send_periph_dhcheck+0x94>
   192de:	e8df f003 	tbb	[pc, r3]
   192e2:	0306      	.short	0x0306
   192e4:	29390603 	.word	0x29390603
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   192e8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   192ec:	623b      	str	r3, [r7, #32]
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192ee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   192f2:	f104 0247 	add.w	r2, r4, #71	; 0x47
   192f6:	f104 08c7 	add.w	r8, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   192fa:	e9cd 8201 	strd	r8, r2, [sp, #4]
   192fe:	f104 0937 	add.w	r9, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   19302:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   19306:	f104 0a27 	add.w	sl, r4, #39	; 0x27
   1930a:	9200      	str	r2, [sp, #0]
   1930c:	4649      	mov	r1, r9
   1930e:	4652      	mov	r2, sl
   19310:	3397      	adds	r3, #151	; 0x97
   19312:	f104 0097 	add.w	r0, r4, #151	; 0x97
   19316:	f001 fb2f 	bl	1a978 <bt_crypto_f5>
   1931a:	b378      	cbz	r0, 1937c <compute_and_check_and_send_periph_dhcheck+0xbc>
		LOG_ERR("Calculate LTK failed");
   1931c:	4b4c      	ldr	r3, [pc, #304]	; (19450 <compute_and_check_and_send_periph_dhcheck+0x190>)
   1931e:	647b      	str	r3, [r7, #68]	; 0x44
   19320:	2302      	movs	r3, #2
   19322:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19326:	484b      	ldr	r0, [pc, #300]	; (19454 <compute_and_check_and_send_periph_dhcheck+0x194>)
   19328:	643b      	str	r3, [r7, #64]	; 0x40
   1932a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1932e:	f014 f979 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   19332:	e01e      	b.n	19372 <compute_and_check_and_send_periph_dhcheck+0xb2>
		if (smp->oobd_remote) {
   19334:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   19338:	2b00      	cmp	r3, #0
   1933a:	d0d8      	beq.n	192ee <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1933c:	462e      	mov	r6, r5
   1933e:	f103 0c10 	add.w	ip, r3, #16
   19342:	4632      	mov	r2, r6
   19344:	6818      	ldr	r0, [r3, #0]
   19346:	6859      	ldr	r1, [r3, #4]
   19348:	3308      	adds	r3, #8
   1934a:	c203      	stmia	r2!, {r0, r1}
   1934c:	4563      	cmp	r3, ip
   1934e:	4616      	mov	r6, r2
   19350:	d1f7      	bne.n	19342 <compute_and_check_and_send_periph_dhcheck+0x82>
   19352:	e7cc      	b.n	192ee <compute_and_check_and_send_periph_dhcheck+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19354:	466c      	mov	r4, sp
   19356:	b088      	sub	sp, #32
   19358:	aa04      	add	r2, sp, #16
   1935a:	493f      	ldr	r1, [pc, #252]	; (19458 <compute_and_check_and_send_periph_dhcheck+0x198>)
   1935c:	483d      	ldr	r0, [pc, #244]	; (19454 <compute_and_check_and_send_periph_dhcheck+0x194>)
	switch (smp->method) {
   1935e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19362:	2303      	movs	r3, #3
   19364:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19368:	f842 3f10 	str.w	r3, [r2, #16]!
   1936c:	f014 f95a 	bl	2d624 <z_log_msg_static_create.constprop.0>
   19370:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19372:	2008      	movs	r0, #8
}
   19374:	3748      	adds	r7, #72	; 0x48
   19376:	46bd      	mov	sp, r7
   19378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1937c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   19380:	f107 0610 	add.w	r6, r7, #16
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   19384:	f103 0297 	add.w	r2, r3, #151	; 0x97
   19388:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1938a:	9301      	str	r3, [sp, #4]
   1938c:	f104 0311 	add.w	r3, r4, #17
   19390:	9202      	str	r2, [sp, #8]
   19392:	9300      	str	r3, [sp, #0]
   19394:	464a      	mov	r2, r9
   19396:	462b      	mov	r3, r5
   19398:	4651      	mov	r1, sl
   1939a:	4640      	mov	r0, r8
   1939c:	9603      	str	r6, [sp, #12]
   1939e:	f014 fc06 	bl	2dbae <bt_crypto_f6>
   193a2:	b108      	cbz	r0, 193a8 <compute_and_check_and_send_periph_dhcheck+0xe8>
		LOG_ERR("Calculate local DHKey check failed");
   193a4:	4b2d      	ldr	r3, [pc, #180]	; (1945c <compute_and_check_and_send_periph_dhcheck+0x19c>)
   193a6:	e7ba      	b.n	1931e <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
   193a8:	7a23      	ldrb	r3, [r4, #8]
   193aa:	2b05      	cmp	r3, #5
   193ac:	d10e      	bne.n	193cc <compute_and_check_and_send_periph_dhcheck+0x10c>
		if (smp->oobd_local) {
   193ae:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   193b2:	b1f9      	cbz	r1, 193f4 <compute_and_check_and_send_periph_dhcheck+0x134>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   193b4:	460b      	mov	r3, r1
   193b6:	46ac      	mov	ip, r5
   193b8:	f101 0e10 	add.w	lr, r1, #16
   193bc:	4662      	mov	r2, ip
   193be:	6818      	ldr	r0, [r3, #0]
   193c0:	6859      	ldr	r1, [r3, #4]
   193c2:	3308      	adds	r3, #8
   193c4:	c203      	stmia	r2!, {r0, r1}
   193c6:	4573      	cmp	r3, lr
   193c8:	4694      	mov	ip, r2
   193ca:	d1f7      	bne.n	193bc <compute_and_check_and_send_periph_dhcheck+0xfc>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   193cc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   193d0:	4649      	mov	r1, r9
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   193d2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   193d6:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   193d8:	9301      	str	r3, [sp, #4]
   193da:	f104 030a 	add.w	r3, r4, #10
   193de:	9202      	str	r2, [sp, #8]
   193e0:	9300      	str	r3, [sp, #0]
   193e2:	4652      	mov	r2, sl
   193e4:	462b      	mov	r3, r5
   193e6:	4640      	mov	r0, r8
   193e8:	9703      	str	r7, [sp, #12]
   193ea:	f014 fbe0 	bl	2dbae <bt_crypto_f6>
   193ee:	b130      	cbz	r0, 193fe <compute_and_check_and_send_periph_dhcheck+0x13e>
		LOG_ERR("Calculate remote DHKey check failed");
   193f0:	4b1b      	ldr	r3, [pc, #108]	; (19460 <compute_and_check_and_send_periph_dhcheck+0x1a0>)
   193f2:	e794      	b.n	1931e <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
   193f4:	2210      	movs	r2, #16
   193f6:	4628      	mov	r0, r5
   193f8:	f017 f903 	bl	30602 <memset>
   193fc:	e7e6      	b.n	193cc <compute_and_check_and_send_periph_dhcheck+0x10c>
	if (memcmp(smp->e, re, 16)) {
   193fe:	2210      	movs	r2, #16
   19400:	4639      	mov	r1, r7
   19402:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   19406:	f017 f8b2 	bl	3056e <memcmp>
   1940a:	b9f8      	cbnz	r0, 1944c <compute_and_check_and_send_periph_dhcheck+0x18c>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1940c:	210d      	movs	r1, #13
   1940e:	4620      	mov	r0, r4
   19410:	f014 f926 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!buf) {
   19414:	4680      	mov	r8, r0
   19416:	2800      	cmp	r0, #0
   19418:	d0ab      	beq.n	19372 <compute_and_check_and_send_periph_dhcheck+0xb2>
   1941a:	2110      	movs	r1, #16
   1941c:	300c      	adds	r0, #12
   1941e:	f002 f9e5 	bl	1b7ec <net_buf_simple_add>
   19422:	4603      	mov	r3, r0
   19424:	4632      	mov	r2, r6
   19426:	ca03      	ldmia	r2!, {r0, r1}
   19428:	42aa      	cmp	r2, r5
   1942a:	6018      	str	r0, [r3, #0]
   1942c:	6059      	str	r1, [r3, #4]
   1942e:	4616      	mov	r6, r2
   19430:	f103 0308 	add.w	r3, r3, #8
   19434:	d1f6      	bne.n	19424 <compute_and_check_and_send_periph_dhcheck+0x164>
	smp_send(smp, buf, NULL, NULL);
   19436:	2200      	movs	r2, #0
   19438:	4641      	mov	r1, r8
   1943a:	4620      	mov	r0, r4
   1943c:	f014 f8d5 	bl	2d5ea <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   19440:	1d20      	adds	r0, r4, #4
   19442:	2101      	movs	r1, #1
   19444:	f014 f8fc 	bl	2d640 <atomic_set_bit>
	return 0;
   19448:	2000      	movs	r0, #0
   1944a:	e793      	b.n	19374 <compute_and_check_and_send_periph_dhcheck+0xb4>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1944c:	200b      	movs	r0, #11
   1944e:	e791      	b.n	19374 <compute_and_check_and_send_periph_dhcheck+0xb4>
   19450:	000360fd 	.word	0x000360fd
   19454:	00031544 	.word	0x00031544
   19458:	00036078 	.word	0x00036078
   1945c:	00036112 	.word	0x00036112
   19460:	00036135 	.word	0x00036135

00019464 <bt_smp_connected>:
{
   19464:	b538      	push	{r3, r4, r5, lr}
   19466:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   19468:	4908      	ldr	r1, [pc, #32]	; (1948c <bt_smp_connected+0x28>)
   1946a:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1946e:	3094      	adds	r0, #148	; 0x94
   19470:	f00c fd3e 	bl	25ef0 <k_work_init_delayable>
	smp_reset(smp);
   19474:	4628      	mov	r0, r5
   19476:	f014 f98c 	bl	2d792 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1947a:	4b05      	ldr	r3, [pc, #20]	; (19490 <bt_smp_connected+0x2c>)
   1947c:	34c4      	adds	r4, #196	; 0xc4
   1947e:	e8d4 2fef 	ldaex	r2, [r4]
   19482:	e8c4 3fe1 	stlex	r1, r3, [r4]
   19486:	2900      	cmp	r1, #0
   19488:	d1f9      	bne.n	1947e <bt_smp_connected+0x1a>
}
   1948a:	bd38      	pop	{r3, r4, r5, pc}
   1948c:	0001a195 	.word	0x0001a195
   19490:	20009f78 	.word	0x20009f78

00019494 <smp_pairing_confirm>:
{
   19494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19496:	1d06      	adds	r6, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   19498:	68cd      	ldr	r5, [r1, #12]
{
   1949a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1949c:	210b      	movs	r1, #11
   1949e:	4630      	mov	r0, r6
{
   194a0:	af00      	add	r7, sp, #0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   194a2:	f014 f88e 	bl	2d5c2 <atomic_clear_bit>
   194a6:	462b      	mov	r3, r5
   194a8:	f104 0217 	add.w	r2, r4, #23
   194ac:	f105 0110 	add.w	r1, r5, #16
   194b0:	f853 0b04 	ldr.w	r0, [r3], #4
   194b4:	428b      	cmp	r3, r1
   194b6:	f842 0b04 	str.w	r0, [r2], #4
   194ba:	d1f9      	bne.n	194b0 <smp_pairing_confirm+0x1c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   194bc:	2105      	movs	r1, #5
   194be:	4630      	mov	r0, r6
   194c0:	f014 f858 	bl	2d574 <atomic_test_bit>
   194c4:	b920      	cbnz	r0, 194d0 <smp_pairing_confirm+0x3c>
		return legacy_pairing_confirm(smp);
   194c6:	4620      	mov	r0, r4
   194c8:	f014 f9d9 	bl	2d87e <legacy_pairing_confirm>
}
   194cc:	46bd      	mov	sp, r7
   194ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   194d0:	7a23      	ldrb	r3, [r4, #8]
   194d2:	2b01      	cmp	r3, #1
   194d4:	d008      	beq.n	194e8 <smp_pairing_confirm+0x54>
   194d6:	2b02      	cmp	r3, #2
   194d8:	d112      	bne.n	19500 <smp_pairing_confirm+0x6c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   194da:	2104      	movs	r1, #4
   194dc:	4620      	mov	r0, r4
   194de:	f014 f8af 	bl	2d640 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   194e2:	f7ff fbb5 	bl	18c50 <smp_send_pairing_confirm>
   194e6:	e7f1      	b.n	194cc <smp_pairing_confirm+0x38>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   194e8:	210a      	movs	r1, #10
   194ea:	4630      	mov	r0, r6
   194ec:	f014 f842 	bl	2d574 <atomic_test_bit>
   194f0:	2800      	cmp	r0, #0
   194f2:	d0f2      	beq.n	194da <smp_pairing_confirm+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   194f4:	4630      	mov	r0, r6
   194f6:	2100      	movs	r1, #0
   194f8:	f014 f8a2 	bl	2d640 <atomic_set_bit>
			return 0;
   194fc:	2000      	movs	r0, #0
   194fe:	e7e5      	b.n	194cc <smp_pairing_confirm+0x38>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19500:	466c      	mov	r4, sp
   19502:	b088      	sub	sp, #32
   19504:	466a      	mov	r2, sp
   19506:	4907      	ldr	r1, [pc, #28]	; (19524 <smp_pairing_confirm+0x90>)
   19508:	4807      	ldr	r0, [pc, #28]	; (19528 <smp_pairing_confirm+0x94>)
	switch (smp->method) {
   1950a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1950e:	2303      	movs	r3, #3
   19510:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19514:	f842 3f10 	str.w	r3, [r2, #16]!
   19518:	f014 f884 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1951c:	2008      	movs	r0, #8
   1951e:	46a5      	mov	sp, r4
   19520:	e7d4      	b.n	194cc <smp_pairing_confirm+0x38>
   19522:	bf00      	nop
   19524:	00036078 	.word	0x00036078
   19528:	00031544 	.word	0x00031544

0001952c <smp_pairing_random>:
{
   1952c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19530:	b08e      	sub	sp, #56	; 0x38
   19532:	4604      	mov	r4, r0
   19534:	af04      	add	r7, sp, #16
   19536:	460e      	mov	r6, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19538:	f7ff fa18 	bl	1896c <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1953c:	f104 0837 	add.w	r8, r4, #55	; 0x37
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19540:	4605      	mov	r5, r0
   19542:	4642      	mov	r2, r8
   19544:	68f3      	ldr	r3, [r6, #12]
   19546:	f103 0110 	add.w	r1, r3, #16
   1954a:	f853 0b04 	ldr.w	r0, [r3], #4
   1954e:	428b      	cmp	r3, r1
   19550:	f842 0b04 	str.w	r0, [r2], #4
   19554:	d1f9      	bne.n	1954a <smp_pairing_random+0x1e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19556:	1d26      	adds	r6, r4, #4
   19558:	2105      	movs	r1, #5
   1955a:	4630      	mov	r0, r6
   1955c:	f014 f80a 	bl	2d574 <atomic_test_bit>
   19560:	2800      	cmp	r0, #0
   19562:	d150      	bne.n	19606 <smp_pairing_random+0xda>
	struct bt_conn *conn = smp->chan.chan.conn;
   19564:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19568:	f104 0547 	add.w	r5, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1956c:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   19570:	3397      	adds	r3, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19572:	9201      	str	r2, [sp, #4]
   19574:	9300      	str	r3, [sp, #0]
   19576:	4641      	mov	r1, r8
   19578:	4628      	mov	r0, r5
   1957a:	9702      	str	r7, [sp, #8]
   1957c:	f104 0310 	add.w	r3, r4, #16
   19580:	f104 0209 	add.w	r2, r4, #9
   19584:	f014 f920 	bl	2d7c8 <smp_c1>
	if (err) {
   19588:	bb18      	cbnz	r0, 195d2 <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1958a:	2210      	movs	r2, #16
   1958c:	4639      	mov	r1, r7
   1958e:	f104 0017 	add.w	r0, r4, #23
   19592:	f016 ffec 	bl	3056e <memcmp>
   19596:	2800      	cmp	r0, #0
   19598:	d176      	bne.n	19688 <smp_pairing_random+0x15c>
	memcpy(out, r2, 8);
   1959a:	463b      	mov	r3, r7
   1959c:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
   195a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return bt_encrypt_le(k, out, out);
   195a4:	463a      	mov	r2, r7
	memcpy(out, r2, 8);
   195a6:	c303      	stmia	r3!, {r0, r1}
	memcpy(out + 8, r1, 8);
   195a8:	f8d4 0027 	ldr.w	r0, [r4, #39]	; 0x27
   195ac:	f8d4 102b 	ldr.w	r1, [r4, #43]	; 0x2b
   195b0:	c303      	stmia	r3!, {r0, r1}
	return bt_encrypt_le(k, out, out);
   195b2:	4639      	mov	r1, r7
   195b4:	4628      	mov	r0, r5
   195b6:	f012 ff9e 	bl	2c4f6 <bt_encrypt_le>
		if (err) {
   195ba:	b178      	cbz	r0, 195dc <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   195bc:	4b63      	ldr	r3, [pc, #396]	; (1974c <smp_pairing_random+0x220>)
		LOG_ERR("Calculate confirm failed");
   195be:	627b      	str	r3, [r7, #36]	; 0x24
   195c0:	2302      	movs	r3, #2
   195c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   195c6:	4862      	ldr	r0, [pc, #392]	; (19750 <smp_pairing_random+0x224>)
   195c8:	623b      	str	r3, [r7, #32]
   195ca:	f107 0220 	add.w	r2, r7, #32
   195ce:	f014 f829 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   195d2:	2008      	movs	r0, #8
}
   195d4:	3728      	adds	r7, #40	; 0x28
   195d6:	46bd      	mov	sp, r7
   195d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195dc:	463b      	mov	r3, r7
   195de:	462a      	mov	r2, r5
   195e0:	f107 0c10 	add.w	ip, r7, #16
   195e4:	461d      	mov	r5, r3
   195e6:	cd03      	ldmia	r5!, {r0, r1}
   195e8:	4565      	cmp	r5, ip
   195ea:	6010      	str	r0, [r2, #0]
   195ec:	6051      	str	r1, [r2, #4]
   195ee:	462b      	mov	r3, r5
   195f0:	f102 0208 	add.w	r2, r2, #8
   195f4:	d1f6      	bne.n	195e4 <smp_pairing_random+0xb8>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   195f6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   195f8:	4630      	mov	r0, r6
   195fa:	f014 f821 	bl	2d640 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   195fe:	4620      	mov	r0, r4
   19600:	f014 f867 	bl	2d6d2 <smp_send_pairing_random>
   19604:	e7e6      	b.n	195d4 <smp_pairing_random+0xa8>
	switch (smp->method) {
   19606:	7a23      	ldrb	r3, [r4, #8]
   19608:	2b05      	cmp	r3, #5
   1960a:	f200 808c 	bhi.w	19726 <smp_pairing_random+0x1fa>
   1960e:	e8df f003 	tbb	[pc, r3]
   19612:	201a      	.short	0x201a
   19614:	618a0320 	.word	0x618a0320
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   19618:	f107 0310 	add.w	r3, r7, #16
   1961c:	494d      	ldr	r1, [pc, #308]	; (19754 <smp_pairing_random+0x228>)
   1961e:	9300      	str	r3, [sp, #0]
   19620:	4642      	mov	r2, r8
   19622:	6809      	ldr	r1, [r1, #0]
   19624:	f104 0327 	add.w	r3, r4, #39	; 0x27
   19628:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1962c:	f001 fa0c 	bl	1aa48 <bt_crypto_g2>
   19630:	2800      	cmp	r0, #0
   19632:	d1ce      	bne.n	195d2 <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19634:	210a      	movs	r1, #10
   19636:	4630      	mov	r0, r6
   19638:	f014 f802 	bl	2d640 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1963c:	68ab      	ldr	r3, [r5, #8]
   1963e:	6939      	ldr	r1, [r7, #16]
   19640:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   19644:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19646:	210d      	movs	r1, #13
   19648:	4620      	mov	r0, r4
   1964a:	f013 fff9 	bl	2d640 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1964e:	2110      	movs	r1, #16
   19650:	e7d2      	b.n	195f8 <smp_pairing_random+0xcc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19652:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   19656:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1965a:	493e      	ldr	r1, [pc, #248]	; (19754 <smp_pairing_random+0x228>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1965c:	40d3      	lsrs	r3, r2
   1965e:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19662:	9700      	str	r7, [sp, #0]
   19664:	4642      	mov	r2, r8
   19666:	6809      	ldr	r1, [r1, #0]
   19668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1966c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   19670:	f014 fa78 	bl	2db64 <bt_crypto_f4>
   19674:	b108      	cbz	r0, 1967a <smp_pairing_random+0x14e>
		LOG_ERR("Calculate confirm failed");
   19676:	4b38      	ldr	r3, [pc, #224]	; (19758 <smp_pairing_random+0x22c>)
   19678:	e7a1      	b.n	195be <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1967a:	2210      	movs	r2, #16
   1967c:	4639      	mov	r1, r7
   1967e:	f104 0017 	add.w	r0, r4, #23
   19682:	f016 ff74 	bl	3056e <memcmp>
   19686:	b108      	cbz	r0, 1968c <smp_pairing_random+0x160>
		return BT_SMP_ERR_CONFIRM_FAILED;
   19688:	2004      	movs	r0, #4
   1968a:	e7a3      	b.n	195d4 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   1968c:	2103      	movs	r1, #3
   1968e:	4620      	mov	r0, r4
   19690:	f013 ffd6 	bl	2d640 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   19694:	f014 f81d 	bl	2d6d2 <smp_send_pairing_random>
		if (err) {
   19698:	2800      	cmp	r0, #0
   1969a:	d19b      	bne.n	195d4 <smp_pairing_random+0xa8>
		smp->passkey_round++;
   1969c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   196a0:	3301      	adds	r3, #1
   196a2:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   196a4:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   196a6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   196aa:	d109      	bne.n	196c0 <smp_pairing_random+0x194>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   196ac:	210d      	movs	r1, #13
   196ae:	4620      	mov	r0, r4
   196b0:	f013 ffc6 	bl	2d640 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   196b4:	2110      	movs	r1, #16
   196b6:	4630      	mov	r0, r6
   196b8:	f013 ffc2 	bl	2d640 <atomic_set_bit>
			return 0;
   196bc:	2000      	movs	r0, #0
   196be:	e789      	b.n	195d4 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   196c0:	2110      	movs	r1, #16
   196c2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196c6:	f7fa ff4d 	bl	14564 <bt_rand>
   196ca:	3800      	subs	r0, #0
   196cc:	bf18      	it	ne
   196ce:	2001      	movne	r0, #1
   196d0:	00c0      	lsls	r0, r0, #3
   196d2:	e77f      	b.n	195d4 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   196d4:	2110      	movs	r1, #16
   196d6:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196da:	f7fa ff43 	bl	14564 <bt_rand>
   196de:	2800      	cmp	r0, #0
   196e0:	f47f af77 	bne.w	195d2 <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   196e4:	b37d      	cbz	r5, 19746 <smp_pairing_random+0x21a>
   196e6:	68eb      	ldr	r3, [r5, #12]
   196e8:	b36b      	cbz	r3, 19746 <smp_pairing_random+0x21a>
			struct bt_conn_oob_info info = {
   196ea:	4b1c      	ldr	r3, [pc, #112]	; (1975c <smp_pairing_random+0x230>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196ec:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   196ee:	881b      	ldrh	r3, [r3, #0]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196f0:	07d2      	lsls	r2, r2, #31
			struct bt_conn_oob_info info = {
   196f2:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196f4:	7ca3      	ldrb	r3, [r4, #18]
   196f6:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196fa:	d412      	bmi.n	19722 <smp_pairing_random+0x1f6>
   196fc:	2b00      	cmp	r3, #0
   196fe:	bf14      	ite	ne
   19700:	2301      	movne	r3, #1
   19702:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   19704:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   19706:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   19708:	4630      	mov	r0, r6
			smp->oobd_remote = NULL;
   1970a:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1970e:	210c      	movs	r1, #12
   19710:	f013 ff96 	bl	2d640 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   19714:	68eb      	ldr	r3, [r5, #12]
   19716:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1971a:	f107 0110 	add.w	r1, r7, #16
   1971e:	4798      	blx	r3
			return 0;
   19720:	e7cc      	b.n	196bc <smp_pairing_random+0x190>
		if (rsp_oob_present) {
   19722:	005b      	lsls	r3, r3, #1
   19724:	e7ee      	b.n	19704 <smp_pairing_random+0x1d8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19726:	466c      	mov	r4, sp
   19728:	b088      	sub	sp, #32
   1972a:	aa04      	add	r2, sp, #16
   1972c:	490c      	ldr	r1, [pc, #48]	; (19760 <smp_pairing_random+0x234>)
   1972e:	4808      	ldr	r0, [pc, #32]	; (19750 <smp_pairing_random+0x224>)
	switch (smp->method) {
   19730:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   19734:	2303      	movs	r3, #3
   19736:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1973a:	f842 3f10 	str.w	r3, [r2, #16]!
   1973e:	f013 ff71 	bl	2d624 <z_log_msg_static_create.constprop.0>
   19742:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   19744:	e745      	b.n	195d2 <smp_pairing_random+0xa6>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   19746:	2002      	movs	r0, #2
   19748:	e744      	b.n	195d4 <smp_pairing_random+0xa8>
   1974a:	bf00      	nop
   1974c:	00036159 	.word	0x00036159
   19750:	00031544 	.word	0x00031544
   19754:	20021728 	.word	0x20021728
   19758:	0003616e 	.word	0x0003616e
   1975c:	00031712 	.word	0x00031712
   19760:	00036078 	.word	0x00036078

00019764 <bt_smp_start_security>:
{
   19764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   19768:	78c6      	ldrb	r6, [r0, #3]
{
   1976a:	4604      	mov	r4, r0
	switch (conn->role) {
   1976c:	2e01      	cmp	r6, #1
   1976e:	d005      	beq.n	1977c <bt_smp_start_security+0x18>
		return -EINVAL;
   19770:	f06f 0415 	mvn.w	r4, #21
}
   19774:	4620      	mov	r0, r4
   19776:	b003      	add	sp, #12
   19778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1977c:	f013 ff55 	bl	2d62a <smp_chan_get>
	if (!smp) {
   19780:	4605      	mov	r5, r0
   19782:	2800      	cmp	r0, #0
   19784:	f000 80ac 	beq.w	198e0 <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19788:	1d07      	adds	r7, r0, #4
   1978a:	2104      	movs	r1, #4
   1978c:	4638      	mov	r0, r7
   1978e:	f013 fef1 	bl	2d574 <atomic_test_bit>
   19792:	2800      	cmp	r0, #0
   19794:	f040 80a7 	bne.w	198e6 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19798:	2103      	movs	r1, #3
   1979a:	4638      	mov	r0, r7
   1979c:	f013 feea 	bl	2d574 <atomic_test_bit>
   197a0:	b110      	cbz	r0, 197a8 <bt_smp_start_security+0x44>
		return -EBUSY;
   197a2:	f06f 040f 	mvn.w	r4, #15
   197a6:	e7e5      	b.n	19774 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   197a8:	4631      	mov	r1, r6
   197aa:	4638      	mov	r0, r7
   197ac:	f013 fee2 	bl	2d574 <atomic_test_bit>
   197b0:	2800      	cmp	r0, #0
   197b2:	d1f6      	bne.n	197a2 <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   197b4:	4628      	mov	r0, r5
   197b6:	f7ff f8d9 	bl	1896c <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   197ba:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   197be:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   197c0:	7a9b      	ldrb	r3, [r3, #10]
   197c2:	2b03      	cmp	r3, #3
   197c4:	d042      	beq.n	1984c <bt_smp_start_security+0xe8>
   197c6:	d832      	bhi.n	1982e <bt_smp_start_security+0xca>
   197c8:	3b01      	subs	r3, #1
   197ca:	2b01      	cmp	r3, #1
   197cc:	d948      	bls.n	19860 <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   197ce:	210b      	movs	r1, #11
   197d0:	1d20      	adds	r0, r4, #4
   197d2:	f013 fecf 	bl	2d574 <atomic_test_bit>
   197d6:	2800      	cmp	r0, #0
   197d8:	d1ca      	bne.n	19770 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   197da:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   197de:	b983      	cbnz	r3, 19802 <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   197e0:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   197e4:	4632      	mov	r2, r6
   197e6:	2020      	movs	r0, #32
   197e8:	7a21      	ldrb	r1, [r4, #8]
   197ea:	f000 fe55 	bl	1a498 <bt_keys_find>
   197ee:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   197f2:	b930      	cbnz	r0, 19802 <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   197f4:	4632      	mov	r2, r6
   197f6:	2004      	movs	r0, #4
   197f8:	7a21      	ldrb	r1, [r4, #8]
   197fa:	f000 fe4d 	bl	1a498 <bt_keys_find>
   197fe:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys ||
   19802:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19806:	2b00      	cmp	r3, #0
   19808:	d0b2      	beq.n	19770 <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1980a:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1980c:	f012 0f24 	tst.w	r2, #36	; 0x24
   19810:	d0ae      	beq.n	19770 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   19812:	7aa1      	ldrb	r1, [r4, #10]
   19814:	2902      	cmp	r1, #2
   19816:	d923      	bls.n	19860 <bt_smp_start_security+0xfc>
   19818:	7b58      	ldrb	r0, [r3, #13]
   1981a:	07c0      	lsls	r0, r0, #31
   1981c:	d5a8      	bpl.n	19770 <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1981e:	2903      	cmp	r1, #3
   19820:	d01e      	beq.n	19860 <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   19822:	0692      	lsls	r2, r2, #26
   19824:	d5a4      	bpl.n	19770 <bt_smp_start_security+0xc>
   19826:	7b1b      	ldrb	r3, [r3, #12]
   19828:	2b10      	cmp	r3, #16
   1982a:	d1a1      	bne.n	19770 <bt_smp_start_security+0xc>
   1982c:	e018      	b.n	19860 <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1982e:	2b04      	cmp	r3, #4
   19830:	d1cd      	bne.n	197ce <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19832:	4628      	mov	r0, r5
   19834:	f7ff f8b0 	bl	18998 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19838:	2803      	cmp	r0, #3
   1983a:	d104      	bne.n	19846 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1983c:	2e00      	cmp	r6, #0
   1983e:	d0c6      	beq.n	197ce <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   19840:	68f3      	ldr	r3, [r6, #12]
   19842:	2b00      	cmp	r3, #0
   19844:	d0c3      	beq.n	197ce <bt_smp_start_security+0x6a>
   19846:	4b29      	ldr	r3, [pc, #164]	; (198ec <bt_smp_start_security+0x188>)
   19848:	781b      	ldrb	r3, [r3, #0]
   1984a:	e007      	b.n	1985c <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1984c:	4628      	mov	r0, r5
   1984e:	f7ff f8a3 	bl	18998 <get_io_capa>
   19852:	2803      	cmp	r0, #3
   19854:	d104      	bne.n	19860 <bt_smp_start_security+0xfc>
   19856:	2e00      	cmp	r6, #0
   19858:	d0b9      	beq.n	197ce <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1985a:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1985c:	2b00      	cmp	r3, #0
   1985e:	d0b6      	beq.n	197ce <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   19860:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19864:	b13b      	cbz	r3, 19876 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   19866:	4628      	mov	r0, r5
   19868:	f7ff f928 	bl	18abc <smp_init>
   1986c:	4680      	mov	r8, r0
   1986e:	b170      	cbz	r0, 1988e <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   19870:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19874:	e77e      	b.n	19774 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19876:	7a20      	ldrb	r0, [r4, #8]
   19878:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1987c:	f000 fdcc 	bl	1a418 <bt_keys_get_addr>
   19880:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   19884:	2800      	cmp	r0, #0
   19886:	d1ee      	bne.n	19866 <bt_smp_start_security+0x102>
			return -ENOMEM;
   19888:	f06f 040b 	mvn.w	r4, #11
   1988c:	e772      	b.n	19774 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1988e:	210b      	movs	r1, #11
   19890:	4628      	mov	r0, r5
   19892:	f013 fee5 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   19896:	4606      	mov	r6, r0
   19898:	2800      	cmp	r0, #0
   1989a:	d0e9      	beq.n	19870 <bt_smp_start_security+0x10c>
   1989c:	2101      	movs	r1, #1
   1989e:	300c      	adds	r0, #12
   198a0:	f001 ffa4 	bl	1b7ec <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   198a4:	2109      	movs	r1, #9
   198a6:	4681      	mov	r9, r0
   198a8:	4628      	mov	r0, r5
   198aa:	f7ff f89b 	bl	189e4 <get_auth>
   198ae:	4643      	mov	r3, r8
   198b0:	f889 0000 	strb.w	r0, [r9]
   198b4:	4632      	mov	r2, r6
   198b6:	4620      	mov	r0, r4
   198b8:	2106      	movs	r1, #6
   198ba:	f8cd 8000 	str.w	r8, [sp]
   198be:	f012 ffab 	bl	2c818 <bt_l2cap_send_cb>
	if (err) {
   198c2:	4604      	mov	r4, r0
   198c4:	b118      	cbz	r0, 198ce <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   198c6:	4630      	mov	r0, r6
   198c8:	f001 fe6e 	bl	1b5a8 <net_buf_unref>
		return err;
   198cc:	e752      	b.n	19774 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   198ce:	4638      	mov	r0, r7
   198d0:	210f      	movs	r1, #15
   198d2:	f013 feb5 	bl	2d640 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   198d6:	2101      	movs	r1, #1
   198d8:	4628      	mov	r0, r5
   198da:	f013 feb1 	bl	2d640 <atomic_set_bit>
	return 0;
   198de:	e749      	b.n	19774 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   198e0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   198e4:	e746      	b.n	19774 <bt_smp_start_security+0x10>
		return -EIO;
   198e6:	f06f 0404 	mvn.w	r4, #4
   198ea:	e743      	b.n	19774 <bt_smp_start_security+0x10>
   198ec:	200223f8 	.word	0x200223f8

000198f0 <smp_pairing_complete>:
{
   198f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198f2:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   198f4:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198f8:	1d04      	adds	r4, r0, #4
	if (!status) {
   198fa:	bb61      	cbnz	r1, 19956 <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198fc:	210d      	movs	r1, #13
   198fe:	4620      	mov	r0, r4
   19900:	f013 fe38 	bl	2d574 <atomic_test_bit>
		if (bond_flag) {
   19904:	4607      	mov	r7, r0
   19906:	b118      	cbz	r0, 19910 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   19908:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   1990c:	f000 ffbe 	bl	1a88c <bt_keys_store>
	return list->head;
   19910:	4b36      	ldr	r3, [pc, #216]	; (199ec <smp_pairing_complete+0xfc>)
   19912:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   19914:	b19b      	cbz	r3, 1993e <smp_pairing_complete+0x4e>
	return node->next;
   19916:	681c      	ldr	r4, [r3, #0]
   19918:	b104      	cbz	r4, 1991c <smp_pairing_complete+0x2c>
   1991a:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1991c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   19920:	b113      	cbz	r3, 19928 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   19922:	4639      	mov	r1, r7
   19924:	4628      	mov	r0, r5
   19926:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   19928:	b14c      	cbz	r4, 1993e <smp_pairing_complete+0x4e>
   1992a:	4623      	mov	r3, r4
   1992c:	68e4      	ldr	r4, [r4, #12]
   1992e:	681b      	ldr	r3, [r3, #0]
   19930:	b11c      	cbz	r4, 1993a <smp_pairing_complete+0x4a>
   19932:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   19934:	2b00      	cmp	r3, #0
   19936:	d1f4      	bne.n	19922 <smp_pairing_complete+0x32>
   19938:	e7f7      	b.n	1992a <smp_pairing_complete+0x3a>
   1993a:	2b00      	cmp	r3, #0
   1993c:	d1f1      	bne.n	19922 <smp_pairing_complete+0x32>
	smp_reset(smp);
   1993e:	4630      	mov	r0, r6
   19940:	f013 ff27 	bl	2d792 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   19944:	7a6a      	ldrb	r2, [r5, #9]
   19946:	7aab      	ldrb	r3, [r5, #10]
   19948:	429a      	cmp	r2, r3
   1994a:	d04d      	beq.n	199e8 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1994c:	4628      	mov	r0, r5
}
   1994e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   19952:	f7ff bf07 	b.w	19764 <bt_smp_start_security>
	switch (smp_err) {
   19956:	3901      	subs	r1, #1
   19958:	b2c9      	uxtb	r1, r1
   1995a:	290e      	cmp	r1, #14
   1995c:	bf96      	itet	ls
   1995e:	4b24      	ldrls	r3, [pc, #144]	; (199f0 <smp_pairing_complete+0x100>)
	if (!status) {
   19960:	2709      	movhi	r7, #9
   19962:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   19964:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   19968:	b143      	cbz	r3, 1997c <smp_pairing_complete+0x8c>
   1996a:	7b1b      	ldrb	r3, [r3, #12]
   1996c:	bb33      	cbnz	r3, 199bc <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1996e:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   19972:	f000 fe77 	bl	1a664 <bt_keys_clear>
			conn->le.keys = NULL;
   19976:	2300      	movs	r3, #0
   19978:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1997c:	2102      	movs	r1, #2
   1997e:	4620      	mov	r0, r4
   19980:	f013 fdf8 	bl	2d574 <atomic_test_bit>
   19984:	b948      	cbnz	r0, 1999a <smp_pairing_complete+0xaa>
	switch (err) {
   19986:	2f07      	cmp	r7, #7
   19988:	bf94      	ite	ls
   1998a:	4b1a      	ldrls	r3, [pc, #104]	; (199f4 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1998c:	211f      	movhi	r1, #31
			bt_conn_security_changed(conn,
   1998e:	463a      	mov	r2, r7
   19990:	4628      	mov	r0, r5
   19992:	bf98      	it	ls
   19994:	5dd9      	ldrbls	r1, [r3, r7]
   19996:	f7fb fce5 	bl	15364 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1999a:	2103      	movs	r1, #3
   1999c:	4620      	mov	r0, r4
   1999e:	f013 fde9 	bl	2d574 <atomic_test_bit>
   199a2:	2800      	cmp	r0, #0
   199a4:	d0cb      	beq.n	1993e <smp_pairing_complete+0x4e>
	return list->head;
   199a6:	4b11      	ldr	r3, [pc, #68]	; (199ec <smp_pairing_complete+0xfc>)
   199a8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   199aa:	2b00      	cmp	r3, #0
   199ac:	d0c7      	beq.n	1993e <smp_pairing_complete+0x4e>
	return node->next;
   199ae:	681c      	ldr	r4, [r3, #0]
   199b0:	b104      	cbz	r4, 199b4 <smp_pairing_complete+0xc4>
   199b2:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   199b4:	f853 3c08 	ldr.w	r3, [r3, #-8]
   199b8:	b94b      	cbnz	r3, 199ce <smp_pairing_complete+0xde>
   199ba:	e00b      	b.n	199d4 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   199bc:	2102      	movs	r1, #2
   199be:	4620      	mov	r0, r4
   199c0:	f013 fdd8 	bl	2d574 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   199c4:	2800      	cmp	r0, #0
   199c6:	d1d2      	bne.n	1996e <smp_pairing_complete+0x7e>
   199c8:	e7d8      	b.n	1997c <smp_pairing_complete+0x8c>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   199ca:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   199cc:	b123      	cbz	r3, 199d8 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   199ce:	4639      	mov	r1, r7
   199d0:	4628      	mov	r0, r5
   199d2:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   199d4:	2c00      	cmp	r4, #0
   199d6:	d0b2      	beq.n	1993e <smp_pairing_complete+0x4e>
   199d8:	4623      	mov	r3, r4
   199da:	68e4      	ldr	r4, [r4, #12]
   199dc:	685b      	ldr	r3, [r3, #4]
   199de:	2c00      	cmp	r4, #0
   199e0:	d1f3      	bne.n	199ca <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   199e2:	2b00      	cmp	r3, #0
   199e4:	d1f3      	bne.n	199ce <smp_pairing_complete+0xde>
   199e6:	e7aa      	b.n	1993e <smp_pairing_complete+0x4e>
}
   199e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199ea:	bf00      	nop
   199ec:	200215f8 	.word	0x200215f8
   199f0:	0003640f 	.word	0x0003640f
   199f4:	000363fe 	.word	0x000363fe

000199f8 <smp_error>:
{
   199f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   199fa:	1d03      	adds	r3, r0, #4
{
   199fc:	4606      	mov	r6, r0
   199fe:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19a00:	4618      	mov	r0, r3
   19a02:	2102      	movs	r1, #2
{
   19a04:	b089      	sub	sp, #36	; 0x24
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   19a06:	f013 fdb5 	bl	2d574 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   19a0a:	4604      	mov	r4, r0
   19a0c:	b120      	cbz	r0, 19a18 <smp_error+0x20>
   19a0e:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   19a12:	fab4 f484 	clz	r4, r4
   19a16:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19a18:	2103      	movs	r1, #3
   19a1a:	4618      	mov	r0, r3
   19a1c:	f013 fdaa 	bl	2d574 <atomic_test_bit>
   19a20:	b1b0      	cbz	r0, 19a50 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   19a22:	4639      	mov	r1, r7
   19a24:	4630      	mov	r0, r6
   19a26:	f7ff ff63 	bl	198f0 <smp_pairing_complete>
	if (remote_already_completed) {
   19a2a:	b1f4      	cbz	r4, 19a6a <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   19a2c:	4b1d      	ldr	r3, [pc, #116]	; (19aa4 <smp_error+0xac>)
   19a2e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19a32:	9307      	str	r3, [sp, #28]
   19a34:	2302      	movs	r3, #2
   19a36:	481c      	ldr	r0, [pc, #112]	; (19aa8 <smp_error+0xb0>)
   19a38:	aa06      	add	r2, sp, #24
   19a3a:	9306      	str	r3, [sp, #24]
   19a3c:	f013 fdf2 	bl	2d624 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   19a40:	2105      	movs	r1, #5
   19a42:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19a46:	f012 fde2 	bl	2c60e <bt_conn_disconnect>
		return 0;
   19a4a:	2000      	movs	r0, #0
}
   19a4c:	b009      	add	sp, #36	; 0x24
   19a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19a50:	2101      	movs	r1, #1
   19a52:	4618      	mov	r0, r3
   19a54:	f013 fd8e 	bl	2d574 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   19a58:	2800      	cmp	r0, #0
   19a5a:	d1e2      	bne.n	19a22 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19a5c:	210f      	movs	r1, #15
   19a5e:	4618      	mov	r0, r3
   19a60:	f013 fd88 	bl	2d574 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   19a64:	2800      	cmp	r0, #0
   19a66:	d1dc      	bne.n	19a22 <smp_error+0x2a>
   19a68:	e7df      	b.n	19a2a <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   19a6a:	2105      	movs	r1, #5
   19a6c:	4630      	mov	r0, r6
   19a6e:	f013 fdf7 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!buf) {
   19a72:	4605      	mov	r5, r0
   19a74:	b190      	cbz	r0, 19a9c <smp_error+0xa4>
   19a76:	2101      	movs	r1, #1
   19a78:	300c      	adds	r0, #12
   19a7a:	f001 feb7 	bl	1b7ec <net_buf_simple_add>
	rsp->reason = reason;
   19a7e:	7007      	strb	r7, [r0, #0]
   19a80:	9400      	str	r4, [sp, #0]
   19a82:	4623      	mov	r3, r4
   19a84:	462a      	mov	r2, r5
   19a86:	2106      	movs	r1, #6
   19a88:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   19a8c:	f012 fec4 	bl	2c818 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   19a90:	2800      	cmp	r0, #0
   19a92:	d0da      	beq.n	19a4a <smp_error+0x52>
		net_buf_unref(buf);
   19a94:	4628      	mov	r0, r5
   19a96:	f001 fd87 	bl	1b5a8 <net_buf_unref>
   19a9a:	e7d6      	b.n	19a4a <smp_error+0x52>
		return -ENOBUFS;
   19a9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19aa0:	e7d4      	b.n	19a4c <smp_error+0x54>
   19aa2:	bf00      	nop
   19aa4:	00036187 	.word	0x00036187
   19aa8:	00031544 	.word	0x00031544

00019aac <bt_smp_recv>:
{
   19aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ab0:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19ab2:	8a0b      	ldrh	r3, [r1, #16]
{
   19ab4:	4680      	mov	r8, r0
   19ab6:	460d      	mov	r5, r1
   19ab8:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   19aba:	b97b      	cbnz	r3, 19adc <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   19abc:	4b44      	ldr	r3, [pc, #272]	; (19bd0 <bt_smp_recv+0x124>)
   19abe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19ac2:	617b      	str	r3, [r7, #20]
   19ac4:	2302      	movs	r3, #2
   19ac6:	4843      	ldr	r0, [pc, #268]	; (19bd4 <bt_smp_recv+0x128>)
   19ac8:	613b      	str	r3, [r7, #16]
   19aca:	f107 0210 	add.w	r2, r7, #16
   19ace:	f013 fda9 	bl	2d624 <z_log_msg_static_create.constprop.0>
}
   19ad2:	2000      	movs	r0, #0
   19ad4:	3718      	adds	r7, #24
   19ad6:	46bd      	mov	sp, r7
   19ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19adc:	2101      	movs	r1, #1
   19ade:	f105 000c 	add.w	r0, r5, #12
   19ae2:	f001 fe65 	bl	1b7b0 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19ae6:	2104      	movs	r1, #4
   19ae8:	4606      	mov	r6, r0
   19aea:	f1a8 00e8 	sub.w	r0, r8, #232	; 0xe8
   19aee:	f013 fd41 	bl	2d574 <atomic_test_bit>
   19af2:	f1a8 04ec 	sub.w	r4, r8, #236	; 0xec
   19af6:	7831      	ldrb	r1, [r6, #0]
   19af8:	b178      	cbz	r0, 19b1a <bt_smp_recv+0x6e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   19afa:	466c      	mov	r4, sp
   19afc:	b088      	sub	sp, #32
   19afe:	466a      	mov	r2, sp
   19b00:	4b35      	ldr	r3, [pc, #212]	; (19bd8 <bt_smp_recv+0x12c>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19b02:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19b06:	2303      	movs	r3, #3
   19b08:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b0c:	4831      	ldr	r0, [pc, #196]	; (19bd4 <bt_smp_recv+0x128>)
   19b0e:	f842 3f10 	str.w	r3, [r2, #16]!
   19b12:	f013 fd87 	bl	2d624 <z_log_msg_static_create.constprop.0>
   19b16:	46a5      	mov	sp, r4
		return 0;
   19b18:	e7db      	b.n	19ad2 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   19b1a:	290e      	cmp	r1, #14
   19b1c:	d904      	bls.n	19b28 <bt_smp_recv+0x7c>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   19b1e:	466c      	mov	r4, sp
   19b20:	b088      	sub	sp, #32
   19b22:	466a      	mov	r2, sp
   19b24:	4b2d      	ldr	r3, [pc, #180]	; (19bdc <bt_smp_recv+0x130>)
   19b26:	e7ec      	b.n	19b02 <bt_smp_recv+0x56>
	if (!handlers[hdr->code].func) {
   19b28:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19be0 <bt_smp_recv+0x134>
   19b2c:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   19b30:	b99b      	cbnz	r3, 19b5a <bt_smp_recv+0xae>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   19b32:	466d      	mov	r5, sp
   19b34:	b088      	sub	sp, #32
   19b36:	466a      	mov	r2, sp
   19b38:	4b2a      	ldr	r3, [pc, #168]	; (19be4 <bt_smp_recv+0x138>)
   19b3a:	4826      	ldr	r0, [pc, #152]	; (19bd4 <bt_smp_recv+0x128>)
   19b3c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19b40:	2303      	movs	r3, #3
   19b42:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b46:	f842 3f10 	str.w	r3, [r2, #16]!
   19b4a:	f013 fd6b 	bl	2d624 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   19b4e:	2107      	movs	r1, #7
   19b50:	46ad      	mov	sp, r5
		smp_error(smp, err);
   19b52:	4620      	mov	r0, r4
   19b54:	f7ff ff50 	bl	199f8 <smp_error>
   19b58:	e7bb      	b.n	19ad2 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19b5a:	4620      	mov	r0, r4
   19b5c:	f013 fe07 	bl	2d76e <atomic_test_and_clear_bit>
   19b60:	7833      	ldrb	r3, [r6, #0]
   19b62:	b998      	cbnz	r0, 19b8c <bt_smp_recv+0xe0>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   19b64:	466d      	mov	r5, sp
   19b66:	b088      	sub	sp, #32
   19b68:	466a      	mov	r2, sp
   19b6a:	491f      	ldr	r1, [pc, #124]	; (19be8 <bt_smp_recv+0x13c>)
   19b6c:	4819      	ldr	r0, [pc, #100]	; (19bd4 <bt_smp_recv+0x128>)
   19b6e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19b72:	2303      	movs	r3, #3
   19b74:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b78:	f842 3f10 	str.w	r3, [r2, #16]!
   19b7c:	f013 fd52 	bl	2d624 <z_log_msg_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19b80:	7833      	ldrb	r3, [r6, #0]
   19b82:	46ad      	mov	sp, r5
   19b84:	2b05      	cmp	r3, #5
   19b86:	d0a4      	beq.n	19ad2 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19b88:	2108      	movs	r1, #8
   19b8a:	e7e2      	b.n	19b52 <bt_smp_recv+0xa6>
	if (buf->len != handlers[hdr->code].expect_len) {
   19b8c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19b90:	8a29      	ldrh	r1, [r5, #16]
   19b92:	7912      	ldrb	r2, [r2, #4]
   19b94:	428a      	cmp	r2, r1
   19b96:	d011      	beq.n	19bbc <bt_smp_recv+0x110>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19b98:	466d      	mov	r5, sp
   19b9a:	b088      	sub	sp, #32
   19b9c:	466a      	mov	r2, sp
   19b9e:	61d3      	str	r3, [r2, #28]
   19ba0:	2304      	movs	r3, #4
   19ba2:	4812      	ldr	r0, [pc, #72]	; (19bec <bt_smp_recv+0x140>)
   19ba4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19ba8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19bac:	4809      	ldr	r0, [pc, #36]	; (19bd4 <bt_smp_recv+0x128>)
   19bae:	f842 3f10 	str.w	r3, [r2, #16]!
   19bb2:	f013 fd37 	bl	2d624 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19bb6:	210a      	movs	r1, #10
   19bb8:	46ad      	mov	sp, r5
   19bba:	e7ca      	b.n	19b52 <bt_smp_recv+0xa6>
	err = handlers[hdr->code].func(smp, buf);
   19bbc:	4629      	mov	r1, r5
   19bbe:	4620      	mov	r0, r4
   19bc0:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   19bc4:	4798      	blx	r3
	if (err) {
   19bc6:	4601      	mov	r1, r0
   19bc8:	2800      	cmp	r0, #0
   19bca:	d082      	beq.n	19ad2 <bt_smp_recv+0x26>
   19bcc:	e7c1      	b.n	19b52 <bt_smp_recv+0xa6>
   19bce:	bf00      	nop
   19bd0:	000361df 	.word	0x000361df
   19bd4:	00031544 	.word	0x00031544
   19bd8:	000361fa 	.word	0x000361fa
   19bdc:	0003622b 	.word	0x0003622b
   19be0:	000321bc 	.word	0x000321bc
   19be4:	0003624d 	.word	0x0003624d
   19be8:	00036267 	.word	0x00036267
   19bec:	00035b33 	.word	0x00035b33

00019bf0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   19bf0:	4b0c      	ldr	r3, [pc, #48]	; (19c24 <bt_smp_pkey_ready+0x34>)
{
   19bf2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   19bf4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   19bf6:	b918      	cbnz	r0, 19c00 <bt_smp_pkey_ready+0x10>
}
   19bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19bfc:	f7fe bf10 	b.w	18a20 <bt_smp_pkey_ready.part.0>
	z_impl_k_sem_give(sem);
   19c00:	4809      	ldr	r0, [pc, #36]	; (19c28 <bt_smp_pkey_ready+0x38>)
   19c02:	f00b fcf1 	bl	255e8 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19c06:	4b09      	ldr	r3, [pc, #36]	; (19c2c <bt_smp_pkey_ready+0x3c>)
		err = smp_public_key_periph(smp);
   19c08:	1f1c      	subs	r4, r3, #4
   19c0a:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   19c0e:	065b      	lsls	r3, r3, #25
   19c10:	d507      	bpl.n	19c22 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   19c12:	4620      	mov	r0, r4
   19c14:	f7ff f870 	bl	18cf8 <smp_public_key_periph>
		if (err) {
   19c18:	4601      	mov	r1, r0
   19c1a:	b110      	cbz	r0, 19c22 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   19c1c:	4620      	mov	r0, r4
   19c1e:	f7ff feeb 	bl	199f8 <smp_error>
}
   19c22:	bd10      	pop	{r4, pc}
   19c24:	20021728 	.word	0x20021728
   19c28:	20008c34 	.word	0x20008c34
   19c2c:	20009f7c 	.word	0x20009f7c

00019c30 <smp_ident_addr_info>:
{
   19c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c34:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19c36:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19c3a:	f8d1 800c 	ldr.w	r8, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19c3e:	f023 0302 	bic.w	r3, r3, #2
   19c42:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	struct bt_conn *conn = smp->chan.chan.conn;
   19c46:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19c4a:	f898 3000 	ldrb.w	r3, [r8]
{
   19c4e:	4604      	mov	r4, r0
   19c50:	af00      	add	r7, sp, #0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19c52:	f106 0990 	add.w	r9, r6, #144	; 0x90
   19c56:	b3ab      	cbz	r3, 19cc4 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19c58:	f898 3006 	ldrb.w	r3, [r8, #6]
   19c5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19c60:	2bc0      	cmp	r3, #192	; 0xc0
   19c62:	d02f      	beq.n	19cc4 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19c64:	4640      	mov	r0, r8
   19c66:	f7f7 ff31 	bl	11acc <bt_addr_le_str>
   19c6a:	466e      	mov	r6, sp
   19c6c:	b088      	sub	sp, #32
   19c6e:	466c      	mov	r4, sp
   19c70:	f44f 7a00 	mov.w	sl, #512	; 0x200
   19c74:	4625      	mov	r5, r4
   19c76:	4b65      	ldr	r3, [pc, #404]	; (19e0c <smp_ident_addr_info+0x1dc>)
   19c78:	f8df 8194 	ldr.w	r8, [pc, #404]	; 19e10 <smp_ident_addr_info+0x1e0>
   19c7c:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19c80:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19c84:	f845 8f10 	str.w	r8, [r5, #16]!
   19c88:	462a      	mov	r2, r5
   19c8a:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19c8e:	4861      	ldr	r0, [pc, #388]	; (19e14 <smp_ident_addr_info+0x1e4>)
   19c90:	f013 fcc8 	bl	2d624 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19c94:	4648      	mov	r0, r9
   19c96:	46b5      	mov	sp, r6
   19c98:	f7f7 ff18 	bl	11acc <bt_addr_le_str>
   19c9c:	46a5      	mov	sp, r4
   19c9e:	4b5e      	ldr	r3, [pc, #376]	; (19e18 <smp_ident_addr_info+0x1e8>)
   19ca0:	462a      	mov	r2, r5
   19ca2:	e9c4 3005 	strd	r3, r0, [r4, #20]
   19ca6:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19caa:	485a      	ldr	r0, [pc, #360]	; (19e14 <smp_ident_addr_info+0x1e4>)
   19cac:	f8a4 a01c 	strh.w	sl, [r4, #28]
   19cb0:	f8c4 8010 	str.w	r8, [r4, #16]
   19cb4:	f013 fcb6 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   19cb8:	200a      	movs	r0, #10
   19cba:	46b5      	mov	sp, r6
}
   19cbc:	3718      	adds	r7, #24
   19cbe:	46bd      	mov	sp, r7
   19cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   19cc4:	2207      	movs	r2, #7
   19cc6:	4641      	mov	r1, r8
   19cc8:	4648      	mov	r0, r9
   19cca:	f016 fc50 	bl	3056e <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   19cce:	b168      	cbz	r0, 19cec <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   19cd0:	4641      	mov	r1, r8
   19cd2:	7a30      	ldrb	r0, [r6, #8]
   19cd4:	f000 fc66 	bl	1a5a4 <bt_keys_find_addr>
		if (keys) {
   19cd8:	4605      	mov	r5, r0
   19cda:	b138      	cbz	r0, 19cec <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   19cdc:	4601      	mov	r1, r0
   19cde:	4620      	mov	r0, r4
   19ce0:	f013 fc4e 	bl	2d580 <update_keys_check>
   19ce4:	b320      	cbz	r0, 19d30 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   19ce6:	4628      	mov	r0, r5
   19ce8:	f000 fcbc 	bl	1a664 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19cec:	210d      	movs	r1, #13
   19cee:	1d20      	adds	r0, r4, #4
   19cf0:	f013 fc40 	bl	2d574 <atomic_test_bit>
   19cf4:	2800      	cmp	r0, #0
   19cf6:	d078      	beq.n	19dea <smp_ident_addr_info+0x1ba>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19cf8:	464a      	mov	r2, r9
   19cfa:	2002      	movs	r0, #2
   19cfc:	7a31      	ldrb	r1, [r6, #8]
   19cfe:	f000 fc8d 	bl	1a61c <bt_keys_get_type>
		if (!keys) {
   19d02:	4605      	mov	r5, r0
   19d04:	b9b0      	cbnz	r0, 19d34 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19d06:	4648      	mov	r0, r9
   19d08:	f7f7 fee0 	bl	11acc <bt_addr_le_str>
   19d0c:	466c      	mov	r4, sp
   19d0e:	b088      	sub	sp, #32
   19d10:	466a      	mov	r2, sp
   19d12:	4b42      	ldr	r3, [pc, #264]	; (19e1c <smp_ident_addr_info+0x1ec>)
   19d14:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19d18:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
   19d20:	8393      	strh	r3, [r2, #28]
   19d22:	4b3b      	ldr	r3, [pc, #236]	; (19e10 <smp_ident_addr_info+0x1e0>)
   19d24:	483b      	ldr	r0, [pc, #236]	; (19e14 <smp_ident_addr_info+0x1e4>)
   19d26:	f842 3f10 	str.w	r3, [r2, #16]!
   19d2a:	f013 fc7b 	bl	2d624 <z_log_msg_static_create.constprop.0>
   19d2e:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   19d30:	2008      	movs	r0, #8
   19d32:	e7c3      	b.n	19cbc <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19d34:	78f3      	ldrb	r3, [r6, #3]
   19d36:	bb9b      	cbnz	r3, 19da0 <smp_ident_addr_info+0x170>
			dst = &conn->le.resp_addr;
   19d38:	f106 039e 	add.w	r3, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19d3c:	781a      	ldrb	r2, [r3, #0]
   19d3e:	2a01      	cmp	r2, #1
   19d40:	d11e      	bne.n	19d80 <smp_ident_addr_info+0x150>
		if (bt_addr_le_is_rpa(dst)) {
   19d42:	799a      	ldrb	r2, [r3, #6]
   19d44:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19d48:	2a40      	cmp	r2, #64	; 0x40
   19d4a:	d119      	bne.n	19d80 <smp_ident_addr_info+0x150>
   19d4c:	f8d3 2001 	ldr.w	r2, [r3, #1]
   19d50:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
   19d54:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   19d58:	87eb      	strh	r3, [r5, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19d5a:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   19d5e:	b17b      	cbz	r3, 19d80 <smp_ident_addr_info+0x150>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   19d60:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   19d64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19d68:	2bc0      	cmp	r3, #192	; 0xc0
   19d6a:	d009      	beq.n	19d80 <smp_ident_addr_info+0x150>
				bt_addr_le_copy(&keys->addr, &req->addr);
   19d6c:	4641      	mov	r1, r8
   19d6e:	1c68      	adds	r0, r5, #1
   19d70:	f013 fc32 	bl	2d5d8 <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   19d74:	4648      	mov	r0, r9
   19d76:	f013 fc2f 	bl	2d5d8 <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   19d7a:	4630      	mov	r0, r6
   19d7c:	f7fb faac 	bl	152d8 <bt_conn_identity_resolved>
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   19d80:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19d84:	079a      	lsls	r2, r3, #30
   19d86:	d50e      	bpl.n	19da6 <smp_ident_addr_info+0x176>
   19d88:	4925      	ldr	r1, [pc, #148]	; (19e20 <smp_ident_addr_info+0x1f0>)
   19d8a:	f640 6363 	movw	r3, #3683	; 0xe63
   19d8e:	4a25      	ldr	r2, [pc, #148]	; (19e24 <smp_ident_addr_info+0x1f4>)
   19d90:	4825      	ldr	r0, [pc, #148]	; (19e28 <smp_ident_addr_info+0x1f8>)
   19d92:	f010 fca2 	bl	2a6da <assert_print>
   19d96:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19d9a:	4822      	ldr	r0, [pc, #136]	; (19e24 <smp_ident_addr_info+0x1f4>)
   19d9c:	f010 fc96 	bl	2a6cc <assert_post_action>
			dst = &conn->le.init_addr;
   19da0:	f106 0397 	add.w	r3, r6, #151	; 0x97
   19da4:	e7ca      	b.n	19d3c <smp_ident_addr_info+0x10c>
	conflict = bt_id_find_conflict(new_bond);
   19da6:	4628      	mov	r0, r5
   19da8:	f7f9 fdf8 	bl	1399c <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   19dac:	b160      	cbz	r0, 19dc8 <smp_ident_addr_info+0x198>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   19dae:	4b1f      	ldr	r3, [pc, #124]	; (19e2c <smp_ident_addr_info+0x1fc>)
   19db0:	4818      	ldr	r0, [pc, #96]	; (19e14 <smp_ident_addr_info+0x1e4>)
   19db2:	617b      	str	r3, [r7, #20]
   19db4:	2302      	movs	r3, #2
   19db6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19dba:	613b      	str	r3, [r7, #16]
   19dbc:	f107 0210 	add.w	r2, r7, #16
   19dc0:	f013 fc30 	bl	2d624 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19dc4:	2003      	movs	r0, #3
   19dc6:	e779      	b.n	19cbc <smp_ident_addr_info+0x8c>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   19dc8:	4628      	mov	r0, r5
   19dca:	f7f9 fde7 	bl	1399c <bt_id_find_conflict>
   19dce:	b148      	cbz	r0, 19de4 <smp_ident_addr_info+0x1b4>
   19dd0:	4917      	ldr	r1, [pc, #92]	; (19e30 <smp_ident_addr_info+0x200>)
   19dd2:	f640 637f 	movw	r3, #3711	; 0xe7f
   19dd6:	4a13      	ldr	r2, [pc, #76]	; (19e24 <smp_ident_addr_info+0x1f4>)
   19dd8:	4813      	ldr	r0, [pc, #76]	; (19e28 <smp_ident_addr_info+0x1f8>)
   19dda:	f010 fc7e 	bl	2a6da <assert_print>
   19dde:	f640 617f 	movw	r1, #3711	; 0xe7f
   19de2:	e7da      	b.n	19d9a <smp_ident_addr_info+0x16a>
	bt_id_add(new_bond);
   19de4:	4628      	mov	r0, r5
   19de6:	f7f9 fde9 	bl	139bc <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19dea:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19dee:	075b      	lsls	r3, r3, #29
   19df0:	d503      	bpl.n	19dfa <smp_ident_addr_info+0x1ca>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19df2:	210a      	movs	r1, #10
   19df4:	4620      	mov	r0, r4
   19df6:	f013 fc23 	bl	2d640 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19dfa:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19dfe:	b109      	cbz	r1, 19e04 <smp_ident_addr_info+0x1d4>
	return 0;
   19e00:	2000      	movs	r0, #0
   19e02:	e75b      	b.n	19cbc <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   19e04:	4620      	mov	r0, r4
   19e06:	f7ff fd73 	bl	198f0 <smp_pairing_complete>
   19e0a:	e7f9      	b.n	19e00 <smp_ident_addr_info+0x1d0>
   19e0c:	00036282 	.word	0x00036282
   19e10:	01000003 	.word	0x01000003
   19e14:	00031544 	.word	0x00031544
   19e18:	00036369 	.word	0x00036369
   19e1c:	0003605e 	.word	0x0003605e
   19e20:	000362c5 	.word	0x000362c5
   19e24:	00036296 	.word	0x00036296
   19e28:	00032679 	.word	0x00032679
   19e2c:	000362e0 	.word	0x000362e0
   19e30:	0003631b 	.word	0x0003631b

00019e34 <smp_central_ident>:
{
   19e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e38:	460b      	mov	r3, r1
   19e3a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19e3c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   19e40:	af00      	add	r7, sp, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19e42:	210d      	movs	r1, #13
   19e44:	3004      	adds	r0, #4
   19e46:	f013 fb95 	bl	2d574 <atomic_test_bit>
   19e4a:	b358      	cbz	r0, 19ea4 <smp_central_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19e4c:	f108 0690 	add.w	r6, r8, #144	; 0x90
   19e50:	4632      	mov	r2, r6
   19e52:	2004      	movs	r0, #4
   19e54:	f898 1008 	ldrb.w	r1, [r8, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   19e58:	68dd      	ldr	r5, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19e5a:	f000 fbdf 	bl	1a61c <bt_keys_get_type>
		if (!keys) {
   19e5e:	b9c0      	cbnz	r0, 19e92 <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   19e60:	4630      	mov	r0, r6
   19e62:	f7f7 fe33 	bl	11acc <bt_addr_le_str>
   19e66:	466c      	mov	r4, sp
   19e68:	b088      	sub	sp, #32
   19e6a:	466a      	mov	r2, sp
   19e6c:	4b1a      	ldr	r3, [pc, #104]	; (19ed8 <smp_central_ident+0xa4>)
   19e6e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   19e72:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19e76:	f44f 7300 	mov.w	r3, #512	; 0x200
   19e7a:	8393      	strh	r3, [r2, #28]
   19e7c:	4b17      	ldr	r3, [pc, #92]	; (19edc <smp_central_ident+0xa8>)
   19e7e:	4818      	ldr	r0, [pc, #96]	; (19ee0 <smp_central_ident+0xac>)
   19e80:	f842 3f10 	str.w	r3, [r2, #16]!
   19e84:	f013 fbce 	bl	2d624 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   19e88:	2008      	movs	r0, #8
   19e8a:	46a5      	mov	sp, r4
}
   19e8c:	46bd      	mov	sp, r7
   19e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e92:	462a      	mov	r2, r5
   19e94:	f832 3b02 	ldrh.w	r3, [r2], #2
   19e98:	8303      	strh	r3, [r0, #24]
   19e9a:	f8d5 3002 	ldr.w	r3, [r5, #2]
   19e9e:	6103      	str	r3, [r0, #16]
   19ea0:	6853      	ldr	r3, [r2, #4]
   19ea2:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19ea4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19ea8:	f023 0201 	bic.w	r2, r3, #1
   19eac:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19eb0:	079a      	lsls	r2, r3, #30
   19eb2:	d508      	bpl.n	19ec6 <smp_central_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19eb4:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19eb6:	4620      	mov	r0, r4
   19eb8:	f013 fbc2 	bl	2d640 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19ebc:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   19ec0:	b129      	cbz	r1, 19ece <smp_central_ident+0x9a>
	return 0;
   19ec2:	2000      	movs	r0, #0
   19ec4:	e7e2      	b.n	19e8c <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19ec6:	075b      	lsls	r3, r3, #29
   19ec8:	d5f8      	bpl.n	19ebc <smp_central_ident+0x88>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19eca:	210a      	movs	r1, #10
   19ecc:	e7f3      	b.n	19eb6 <smp_central_ident+0x82>
		smp_pairing_complete(smp, 0);
   19ece:	4620      	mov	r0, r4
   19ed0:	f7ff fd0e 	bl	198f0 <smp_pairing_complete>
   19ed4:	e7f5      	b.n	19ec2 <smp_central_ident+0x8e>
   19ed6:	bf00      	nop
   19ed8:	0003605e 	.word	0x0003605e
   19edc:	01000003 	.word	0x01000003
   19ee0:	00031544 	.word	0x00031544

00019ee4 <smp_pairing_failed>:
{
   19ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ee8:	460e      	mov	r6, r1
   19eea:	af00      	add	r7, sp, #0
   19eec:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   19eee:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19ef2:	f7fe fd3b 	bl	1896c <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19ef6:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19ef8:	46e9      	mov	r9, sp
   19efa:	b088      	sub	sp, #32
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   19efc:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   19efe:	466a      	mov	r2, sp
   19f00:	7833      	ldrb	r3, [r6, #0]
   19f02:	4914      	ldr	r1, [pc, #80]	; (19f54 <smp_pairing_failed+0x70>)
   19f04:	4814      	ldr	r0, [pc, #80]	; (19f58 <smp_pairing_failed+0x74>)
   19f06:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19f0a:	2303      	movs	r3, #3
   19f0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19f10:	f842 3f10 	str.w	r3, [r2, #16]!
   19f14:	f013 fb86 	bl	2d624 <z_log_msg_static_create.constprop.0>
   19f18:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19f1a:	f104 0904 	add.w	r9, r4, #4
   19f1e:	210a      	movs	r1, #10
   19f20:	4648      	mov	r0, r9
   19f22:	f013 fc24 	bl	2d76e <atomic_test_and_clear_bit>
   19f26:	b140      	cbz	r0, 19f3a <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19f28:	b975      	cbnz	r5, 19f48 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   19f2a:	4620      	mov	r0, r4
   19f2c:	7831      	ldrb	r1, [r6, #0]
   19f2e:	f7ff fcdf 	bl	198f0 <smp_pairing_complete>
}
   19f32:	2000      	movs	r0, #0
   19f34:	46bd      	mov	sp, r7
   19f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   19f3a:	210b      	movs	r1, #11
   19f3c:	4648      	mov	r0, r9
   19f3e:	f013 fc16 	bl	2d76e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19f42:	2800      	cmp	r0, #0
   19f44:	d1f0      	bne.n	19f28 <smp_pairing_failed+0x44>
   19f46:	e7f0      	b.n	19f2a <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   19f48:	692b      	ldr	r3, [r5, #16]
   19f4a:	2b00      	cmp	r3, #0
   19f4c:	d0ed      	beq.n	19f2a <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   19f4e:	4640      	mov	r0, r8
   19f50:	4798      	blx	r3
   19f52:	e7ea      	b.n	19f2a <smp_pairing_failed+0x46>
   19f54:	0003633a 	.word	0x0003633a
   19f58:	00031544 	.word	0x00031544

00019f5c <bt_smp_encrypt_change>:
{
   19f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f60:	b08f      	sub	sp, #60	; 0x3c
	struct bt_conn *conn = chan->conn;
   19f62:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f64:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   19f68:	4604      	mov	r4, r0
   19f6a:	4688      	mov	r8, r1
   19f6c:	af00      	add	r7, sp, #0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f6e:	2101      	movs	r1, #1
   19f70:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->conn;
   19f72:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19f76:	f013 fbfa 	bl	2d76e <atomic_test_and_clear_bit>
   19f7a:	b338      	cbz	r0, 19fcc <bt_smp_encrypt_change+0x70>
	if (hci_status) {
   19f7c:	f1b8 0f00 	cmp.w	r8, #0
   19f80:	d019      	beq.n	19fb6 <bt_smp_encrypt_change+0x5a>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19f82:	2103      	movs	r1, #3
   19f84:	4630      	mov	r0, r6
   19f86:	f013 faf5 	bl	2d574 <atomic_test_bit>
   19f8a:	b1f8      	cbz	r0, 19fcc <bt_smp_encrypt_change+0x70>
			uint8_t smp_err = smp_err_get(
   19f8c:	4640      	mov	r0, r8
   19f8e:	f7f8 fee5 	bl	12d5c <bt_security_err_get>
	switch (auth_err) {
   19f92:	3801      	subs	r0, #1
   19f94:	b2c0      	uxtb	r0, r0
   19f96:	2808      	cmp	r0, #8
			uint8_t smp_err = smp_err_get(
   19f98:	bf8c      	ite	hi
   19f9a:	2400      	movhi	r4, #0
   19f9c:	4b75      	ldrls	r3, [pc, #468]	; (1a174 <bt_smp_encrypt_change+0x218>)
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19f9e:	f04f 0102 	mov.w	r1, #2
   19fa2:	bf98      	it	ls
   19fa4:	5c1c      	ldrbls	r4, [r3, r0]
   19fa6:	4630      	mov	r0, r6
   19fa8:	f013 fb4a 	bl	2d640 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   19fac:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19fae:	4628      	mov	r0, r5
   19fb0:	f7ff fc9e 	bl	198f0 <smp_pairing_complete>
   19fb4:	e00a      	b.n	19fcc <bt_smp_encrypt_change+0x70>
	if (!conn->encrypt) {
   19fb6:	f899 300b 	ldrb.w	r3, [r9, #11]
   19fba:	b13b      	cbz	r3, 19fcc <bt_smp_encrypt_change+0x70>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19fbc:	2103      	movs	r1, #3
   19fbe:	4630      	mov	r0, r6
   19fc0:	f013 fad8 	bl	2d574 <atomic_test_bit>
   19fc4:	b930      	cbnz	r0, 19fd4 <bt_smp_encrypt_change+0x78>
		smp_reset(smp);
   19fc6:	4628      	mov	r0, r5
   19fc8:	f013 fbe3 	bl	2d792 <smp_reset>
}
   19fcc:	373c      	adds	r7, #60	; 0x3c
   19fce:	46bd      	mov	sp, r7
   19fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19fd4:	2105      	movs	r1, #5
   19fd6:	4630      	mov	r0, r6
   19fd8:	f013 facc 	bl	2d574 <atomic_test_bit>
   19fdc:	b1b8      	cbz	r0, 1a00e <bt_smp_encrypt_change+0xb2>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   19fde:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19fe2:	071a      	lsls	r2, r3, #28
   19fe4:	d507      	bpl.n	19ff6 <bt_smp_encrypt_change+0x9a>
   19fe6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   19fea:	071b      	lsls	r3, r3, #28
   19fec:	d503      	bpl.n	19ff6 <bt_smp_encrypt_change+0x9a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   19fee:	2111      	movs	r1, #17
   19ff0:	4630      	mov	r0, r6
   19ff2:	f013 fb25 	bl	2d640 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   19ff6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   19ffa:	f023 0308 	bic.w	r3, r3, #8
   19ffe:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1a002:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1a006:	f023 0308 	bic.w	r3, r3, #8
   1a00a:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1a00e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1a012:	07d8      	lsls	r0, r3, #31
   1a014:	d522      	bpl.n	1a05c <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1a016:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a018:	4628      	mov	r0, r5
   1a01a:	f013 fb11 	bl	2d640 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1a01e:	2102      	movs	r1, #2
   1a020:	4630      	mov	r0, r6
   1a022:	f013 fb0d 	bl	2d640 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1a026:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1a028:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1a02c:	b9f2      	cbnz	r2, 1a06c <bt_smp_encrypt_change+0x110>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1a02e:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1a032:	f7f7 fd4b 	bl	11acc <bt_addr_le_str>
   1a036:	466c      	mov	r4, sp
   1a038:	b088      	sub	sp, #32
   1a03a:	466a      	mov	r2, sp
   1a03c:	4b4e      	ldr	r3, [pc, #312]	; (1a178 <bt_smp_encrypt_change+0x21c>)
   1a03e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a042:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a046:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a04a:	8393      	strh	r3, [r2, #28]
   1a04c:	4b4b      	ldr	r3, [pc, #300]	; (1a17c <bt_smp_encrypt_change+0x220>)
   1a04e:	484c      	ldr	r0, [pc, #304]	; (1a180 <bt_smp_encrypt_change+0x224>)
   1a050:	f842 3f10 	str.w	r3, [r2, #16]!
   1a054:	f013 fae6 	bl	2d624 <z_log_msg_static_create.constprop.0>
   1a058:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1a05a:	e7b7      	b.n	19fcc <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1a05c:	0799      	lsls	r1, r3, #30
   1a05e:	d501      	bpl.n	1a064 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1a060:	2108      	movs	r1, #8
   1a062:	e7d9      	b.n	1a018 <bt_smp_encrypt_change+0xbc>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1a064:	075a      	lsls	r2, r3, #29
   1a066:	d5da      	bpl.n	1a01e <bt_smp_encrypt_change+0xc2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1a068:	210a      	movs	r1, #10
   1a06a:	e7d5      	b.n	1a018 <bt_smp_encrypt_change+0xbc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a06c:	2105      	movs	r1, #5
   1a06e:	f013 fa81 	bl	2d574 <atomic_test_bit>
   1a072:	b9c0      	cbnz	r0, 1a0a6 <bt_smp_encrypt_change+0x14a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1a074:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1a078:	07db      	lsls	r3, r3, #31
   1a07a:	d514      	bpl.n	1a0a6 <bt_smp_encrypt_change+0x14a>
	struct bt_keys *keys = conn->le.keys;
   1a07c:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a07e:	211a      	movs	r1, #26
   1a080:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   1a084:	f8d3 80c0 	ldr.w	r8, [r3, #192]	; 0xc0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1a088:	f7fa fa6c 	bl	14564 <bt_rand>
   1a08c:	4682      	mov	sl, r0
   1a08e:	b178      	cbz	r0, 1a0b0 <bt_smp_encrypt_change+0x154>
			LOG_ERR("Unable to get random bytes");
   1a090:	4b3c      	ldr	r3, [pc, #240]	; (1a184 <bt_smp_encrypt_change+0x228>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a092:	617b      	str	r3, [r7, #20]
   1a094:	2302      	movs	r3, #2
   1a096:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a09a:	4839      	ldr	r0, [pc, #228]	; (1a180 <bt_smp_encrypt_change+0x224>)
   1a09c:	613b      	str	r3, [r7, #16]
   1a09e:	f107 0210 	add.w	r2, r7, #16
   1a0a2:	f013 fabf 	bl	2d624 <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1a0a6:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1a0aa:	2900      	cmp	r1, #0
   1a0ac:	d18e      	bne.n	19fcc <bt_smp_encrypt_change+0x70>
   1a0ae:	e77e      	b.n	19fae <bt_smp_encrypt_change+0x52>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1a0b0:	2106      	movs	r1, #6
   1a0b2:	4628      	mov	r0, r5
   1a0b4:	f013 fad4 	bl	2d660 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a0b8:	4681      	mov	r9, r0
   1a0ba:	b908      	cbnz	r0, 1a0c0 <bt_smp_encrypt_change+0x164>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1a0bc:	4b32      	ldr	r3, [pc, #200]	; (1a188 <bt_smp_encrypt_change+0x22c>)
   1a0be:	e7e8      	b.n	1a092 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
   1a0c0:	2110      	movs	r1, #16
   1a0c2:	300c      	adds	r0, #12
   1a0c4:	f001 fb92 	bl	1b7ec <net_buf_simple_add>
   1a0c8:	f898 200c 	ldrb.w	r2, [r8, #12]
   1a0cc:	f107 011c 	add.w	r1, r7, #28
   1a0d0:	4683      	mov	fp, r0
   1a0d2:	f016 fa5c 	bl	3058e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1a0d6:	f898 000c 	ldrb.w	r0, [r8, #12]
   1a0da:	280f      	cmp	r0, #15
   1a0dc:	d805      	bhi.n	1a0ea <bt_smp_encrypt_change+0x18e>
__ssp_bos_icheck3(memset, void *, int)
   1a0de:	f1c0 0210 	rsb	r2, r0, #16
   1a0e2:	4651      	mov	r1, sl
   1a0e4:	4458      	add	r0, fp
   1a0e6:	f016 fa8c 	bl	30602 <memset>
		smp_send(smp, buf, NULL, NULL);
   1a0ea:	4649      	mov	r1, r9
   1a0ec:	2200      	movs	r2, #0
   1a0ee:	4628      	mov	r0, r5
   1a0f0:	f013 fa7b 	bl	2d5ea <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1a0f4:	2107      	movs	r1, #7
   1a0f6:	4628      	mov	r0, r5
   1a0f8:	f013 fab2 	bl	2d660 <smp_create_pdu.constprop.0>
		if (!buf) {
   1a0fc:	4681      	mov	r9, r0
   1a0fe:	b908      	cbnz	r0, 1a104 <bt_smp_encrypt_change+0x1a8>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1a100:	4b22      	ldr	r3, [pc, #136]	; (1a18c <bt_smp_encrypt_change+0x230>)
   1a102:	e7c6      	b.n	1a092 <bt_smp_encrypt_change+0x136>
   1a104:	210a      	movs	r1, #10
   1a106:	300c      	adds	r0, #12
   1a108:	f001 fb70 	bl	1b7ec <net_buf_simple_add>
   1a10c:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a10e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1a112:	ca03      	ldmia	r2!, {r0, r1}
   1a114:	f8c3 0002 	str.w	r0, [r3, #2]
   1a118:	f8c3 1006 	str.w	r1, [r3, #6]
   1a11c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
		smp_send(smp, buf, smp_ident_sent, NULL);
   1a11e:	4649      	mov	r1, r9
   1a120:	4628      	mov	r0, r5
   1a122:	801a      	strh	r2, [r3, #0]
   1a124:	4a1a      	ldr	r2, [pc, #104]	; (1a190 <bt_smp_encrypt_change+0x234>)
   1a126:	f013 fa60 	bl	2d5ea <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a12a:	4630      	mov	r0, r6
   1a12c:	210d      	movs	r1, #13
   1a12e:	f013 fa21 	bl	2d574 <atomic_test_bit>
   1a132:	f107 062c 	add.w	r6, r7, #44	; 0x2c
   1a136:	2800      	cmp	r0, #0
   1a138:	d0b5      	beq.n	1a0a6 <bt_smp_encrypt_change+0x14a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1a13a:	2101      	movs	r1, #1
   1a13c:	4640      	mov	r0, r8
   1a13e:	f000 fa55 	bl	1a5ec <bt_keys_add_type>
   1a142:	f107 031c 	add.w	r3, r7, #28
   1a146:	f108 0c4a 	add.w	ip, r8, #74	; 0x4a
   1a14a:	461a      	mov	r2, r3
   1a14c:	ca03      	ldmia	r2!, {r0, r1}
   1a14e:	42b2      	cmp	r2, r6
   1a150:	f8cc 0000 	str.w	r0, [ip]
   1a154:	f8cc 1004 	str.w	r1, [ip, #4]
   1a158:	4613      	mov	r3, r2
   1a15a:	f10c 0c08 	add.w	ip, ip, #8
   1a15e:	d1f4      	bne.n	1a14a <bt_smp_encrypt_change+0x1ee>
   1a160:	4633      	mov	r3, r6
   1a162:	cb03      	ldmia	r3!, {r0, r1}
   1a164:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1a166:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
   1a16a:	f8c8 1044 	str.w	r1, [r8, #68]	; 0x44
   1a16e:	f8a8 3048 	strh.w	r3, [r8, #72]	; 0x48
   1a172:	e798      	b.n	1a0a6 <bt_smp_encrypt_change+0x14a>
   1a174:	00036406 	.word	0x00036406
   1a178:	0003635c 	.word	0x0003635c
   1a17c:	01000003 	.word	0x01000003
   1a180:	00031544 	.word	0x00031544
   1a184:	00036371 	.word	0x00036371
   1a188:	0003638c 	.word	0x0003638c
   1a18c:	000363b3 	.word	0x000363b3
   1a190:	0001a1d1 	.word	0x0001a1d1

0001a194 <smp_timeout>:
{
   1a194:	b510      	push	{r4, lr}
   1a196:	4604      	mov	r4, r0
   1a198:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1a19a:	4b0b      	ldr	r3, [pc, #44]	; (1a1c8 <smp_timeout+0x34>)
   1a19c:	aa04      	add	r2, sp, #16
   1a19e:	9305      	str	r3, [sp, #20]
   1a1a0:	2302      	movs	r3, #2
   1a1a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1a6:	4809      	ldr	r0, [pc, #36]	; (1a1cc <smp_timeout+0x38>)
   1a1a8:	9304      	str	r3, [sp, #16]
   1a1aa:	f013 fa3b 	bl	2d624 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1a1ae:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1a1b2:	2108      	movs	r1, #8
   1a1b4:	f7ff fb9c 	bl	198f0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a1b8:	2104      	movs	r1, #4
   1a1ba:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
}
   1a1be:	b006      	add	sp, #24
   1a1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1a1c4:	f013 ba3c 	b.w	2d640 <atomic_set_bit>
   1a1c8:	000363db 	.word	0x000363db
   1a1cc:	00031544 	.word	0x00031544

0001a1d0 <smp_ident_sent>:
{
   1a1d0:	b508      	push	{r3, lr}
	if (!err) {
   1a1d2:	bb1a      	cbnz	r2, 1a21c <smp_ident_sent+0x4c>
	if (conn->type == BT_CONN_TYPE_LE) {
   1a1d4:	7883      	ldrb	r3, [r0, #2]
   1a1d6:	2b01      	cmp	r3, #1
   1a1d8:	d120      	bne.n	1a21c <smp_ident_sent+0x4c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1a1da:	2106      	movs	r1, #6
   1a1dc:	f012 fb35 	bl	2c84a <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1a1e0:	b970      	cbnz	r0, 1a200 <smp_ident_sent+0x30>
   1a1e2:	490f      	ldr	r1, [pc, #60]	; (1a220 <smp_ident_sent+0x50>)
   1a1e4:	f240 2365 	movw	r3, #613	; 0x265
   1a1e8:	4a0e      	ldr	r2, [pc, #56]	; (1a224 <smp_ident_sent+0x54>)
   1a1ea:	480f      	ldr	r0, [pc, #60]	; (1a228 <smp_ident_sent+0x58>)
   1a1ec:	f010 fa75 	bl	2a6da <assert_print>
   1a1f0:	480e      	ldr	r0, [pc, #56]	; (1a22c <smp_ident_sent+0x5c>)
   1a1f2:	f010 fa72 	bl	2a6da <assert_print>
   1a1f6:	f240 2165 	movw	r1, #613	; 0x265
   1a1fa:	480a      	ldr	r0, [pc, #40]	; (1a224 <smp_ident_sent+0x54>)
   1a1fc:	f010 fa66 	bl	2a6cc <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1a200:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1a204:	f023 0301 	bic.w	r3, r3, #1
   1a208:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1a20c:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1a210:	b921      	cbnz	r1, 1a21c <smp_ident_sent+0x4c>
}
   1a212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   1a216:	38ec      	subs	r0, #236	; 0xec
   1a218:	f7ff bb6a 	b.w	198f0 <smp_pairing_complete>
}
   1a21c:	bd08      	pop	{r3, pc}
   1a21e:	bf00      	nop
   1a220:	000359a6 	.word	0x000359a6
   1a224:	00036296 	.word	0x00036296
   1a228:	00032679 	.word	0x00032679
   1a22c:	000363e7 	.word	0x000363e7

0001a230 <bt_smp_update_keys>:
{
   1a230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a234:	af00      	add	r7, sp, #0
   1a236:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1a238:	f013 f9f7 	bl	2d62a <smp_chan_get>
	if (!smp) {
   1a23c:	4605      	mov	r5, r0
   1a23e:	b360      	cbz	r0, 1a29a <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1a240:	1d06      	adds	r6, r0, #4
   1a242:	2103      	movs	r1, #3
   1a244:	4630      	mov	r0, r6
   1a246:	f013 f995 	bl	2d574 <atomic_test_bit>
   1a24a:	b330      	cbz	r0, 1a29a <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1a24c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a250:	b108      	cbz	r0, 1a256 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1a252:	f000 fa07 	bl	1a664 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a256:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1a25a:	4641      	mov	r1, r8
   1a25c:	7a20      	ldrb	r0, [r4, #8]
   1a25e:	f000 f8db 	bl	1a418 <bt_keys_get_addr>
   1a262:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   1a266:	b9d8      	cbnz	r0, 1a2a0 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1a268:	4640      	mov	r0, r8
   1a26a:	f7f7 fc2f 	bl	11acc <bt_addr_le_str>
   1a26e:	466c      	mov	r4, sp
   1a270:	b088      	sub	sp, #32
   1a272:	466a      	mov	r2, sp
   1a274:	4b3a      	ldr	r3, [pc, #232]	; (1a360 <bt_smp_update_keys+0x130>)
   1a276:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a27a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a27e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a282:	8393      	strh	r3, [r2, #28]
   1a284:	4b37      	ldr	r3, [pc, #220]	; (1a364 <bt_smp_update_keys+0x134>)
   1a286:	4838      	ldr	r0, [pc, #224]	; (1a368 <bt_smp_update_keys+0x138>)
   1a288:	f842 3f10 	str.w	r3, [r2, #16]!
   1a28c:	f013 f9ca 	bl	2d624 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a290:	2108      	movs	r1, #8
   1a292:	46a5      	mov	sp, r4
   1a294:	4628      	mov	r0, r5
   1a296:	f7ff fbaf 	bl	199f8 <smp_error>
}
   1a29a:	46bd      	mov	sp, r7
   1a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1a2a0:	210e      	movs	r1, #14
   1a2a2:	4630      	mov	r0, r6
   1a2a4:	f013 f966 	bl	2d574 <atomic_test_bit>
   1a2a8:	b128      	cbz	r0, 1a2b6 <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1a2aa:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a2ae:	7b53      	ldrb	r3, [r2, #13]
   1a2b0:	f043 0302 	orr.w	r3, r3, #2
   1a2b4:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1a2b6:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a2b8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	switch (smp->method) {
   1a2bc:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a2be:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1a2c0:	d83a      	bhi.n	1a338 <bt_smp_update_keys+0x108>
   1a2c2:	2a00      	cmp	r2, #0
   1a2c4:	d03f      	beq.n	1a346 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1a2c6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a2ca:	7b53      	ldrb	r3, [r2, #13]
   1a2cc:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a2d0:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1a2d2:	7d2b      	ldrb	r3, [r5, #20]
   1a2d4:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a2d6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
	return MIN(req->max_key_size, rsp->max_key_size);
   1a2da:	428b      	cmp	r3, r1
   1a2dc:	bf28      	it	cs
   1a2de:	460b      	movcs	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2e0:	4630      	mov	r0, r6
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a2e2:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2e4:	2105      	movs	r1, #5
   1a2e6:	f013 f945 	bl	2d574 <atomic_test_bit>
   1a2ea:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2ee:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a2f0:	b390      	cbz	r0, 1a358 <bt_smp_update_keys+0x128>
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2f2:	f042 0210 	orr.w	r2, r2, #16
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2f6:	210d      	movs	r1, #13
   1a2f8:	4630      	mov	r0, r6
		conn->le.keys->flags |= BT_KEYS_SC;
   1a2fa:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2fc:	f013 f93a 	bl	2d574 <atomic_test_bit>
   1a300:	2800      	cmp	r0, #0
   1a302:	d0ca      	beq.n	1a29a <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1a304:	2120      	movs	r1, #32
   1a306:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   1a30a:	f000 f96f 	bl	1a5ec <bt_keys_add_type>
   1a30e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1a312:	f105 0247 	add.w	r2, r5, #71	; 0x47
   1a316:	331a      	adds	r3, #26
   1a318:	3557      	adds	r5, #87	; 0x57
   1a31a:	f852 1b04 	ldr.w	r1, [r2], #4
   1a31e:	42aa      	cmp	r2, r5
   1a320:	f843 1b04 	str.w	r1, [r3], #4
   1a324:	d1f9      	bne.n	1a31a <bt_smp_update_keys+0xea>
__ssp_bos_icheck3(memset, void *, int)
   1a326:	2300      	movs	r3, #0
   1a328:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a32c:	6113      	str	r3, [r2, #16]
   1a32e:	6153      	str	r3, [r2, #20]
   1a330:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a334:	8313      	strh	r3, [r2, #24]
   1a336:	e7b0      	b.n	1a29a <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1a338:	3a05      	subs	r2, #5
   1a33a:	2a01      	cmp	r2, #1
   1a33c:	d803      	bhi.n	1a346 <bt_smp_update_keys+0x116>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1a33e:	f043 0320 	orr.w	r3, r3, #32
   1a342:	734b      	strb	r3, [r1, #13]
   1a344:	e7bf      	b.n	1a2c6 <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1a346:	f023 0320 	bic.w	r3, r3, #32
   1a34a:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a34c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   1a350:	7b53      	ldrb	r3, [r2, #13]
   1a352:	f023 0301 	bic.w	r3, r3, #1
   1a356:	e7bb      	b.n	1a2d0 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a358:	f022 0210 	bic.w	r2, r2, #16
   1a35c:	735a      	strb	r2, [r3, #13]
   1a35e:	e79c      	b.n	1a29a <bt_smp_update_keys+0x6a>
   1a360:	0003605e 	.word	0x0003605e
   1a364:	01000003 	.word	0x01000003
   1a368:	00031544 	.word	0x00031544

0001a36c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a36c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a36e:	4b07      	ldr	r3, [pc, #28]	; (1a38c <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a370:	4807      	ldr	r0, [pc, #28]	; (1a390 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a372:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1a376:	f003 0306 	and.w	r3, r3, #6
   1a37a:	1f9a      	subs	r2, r3, #6
   1a37c:	4253      	negs	r3, r2
   1a37e:	4153      	adcs	r3, r2
   1a380:	4a04      	ldr	r2, [pc, #16]	; (1a394 <bt_smp_init+0x28>)
   1a382:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a384:	f7fa f918 	bl	145b8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a388:	2000      	movs	r0, #0
   1a38a:	bd08      	pop	{r3, pc}
   1a38c:	20008000 	.word	0x20008000
   1a390:	20008554 	.word	0x20008554
   1a394:	200223f8 	.word	0x200223f8

0001a398 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1a398:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a39a:	b958      	cbnz	r0, 1a3b4 <id_add+0x1c>
   1a39c:	4907      	ldr	r1, [pc, #28]	; (1a3bc <id_add+0x24>)
   1a39e:	4808      	ldr	r0, [pc, #32]	; (1a3c0 <id_add+0x28>)
   1a3a0:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   1a3a4:	4a07      	ldr	r2, [pc, #28]	; (1a3c4 <id_add+0x2c>)
   1a3a6:	f010 f998 	bl	2a6da <assert_print>
   1a3aa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1a3ae:	4805      	ldr	r0, [pc, #20]	; (1a3c4 <id_add+0x2c>)
   1a3b0:	f010 f98c 	bl	2a6cc <assert_post_action>

	bt_id_add(keys);
}
   1a3b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1a3b8:	f7f9 bb00 	b.w	139bc <bt_id_add>
   1a3bc:	00036487 	.word	0x00036487
   1a3c0:	00032679 	.word	0x00032679
   1a3c4:	00036457 	.word	0x00036457

0001a3c8 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a3c8:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3ca:	4c10      	ldr	r4, [pc, #64]	; (1a40c <bt_keys_get_addr.part.0+0x44>)
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a3cc:	4606      	mov	r6, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3ce:	f814 3b01 	ldrb.w	r3, [r4], #1
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1a3d2:	460d      	mov	r5, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3d4:	4283      	cmp	r3, r0
   1a3d6:	d007      	beq.n	1a3e8 <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1a3d8:	2207      	movs	r2, #7
   1a3da:	490d      	ldr	r1, [pc, #52]	; (1a410 <bt_keys_get_addr.part.0+0x48>)
   1a3dc:	480d      	ldr	r0, [pc, #52]	; (1a414 <bt_keys_get_addr.part.0+0x4c>)
   1a3de:	f016 f8c6 	bl	3056e <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1a3e2:	b148      	cbz	r0, 1a3f8 <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1a3e4:	2000      	movs	r0, #0
}
   1a3e6:	bd70      	pop	{r4, r5, r6, pc}
   1a3e8:	2207      	movs	r2, #7
   1a3ea:	4620      	mov	r0, r4
   1a3ec:	f016 f8bf 	bl	3056e <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1a3f0:	2800      	cmp	r0, #0
   1a3f2:	d1f1      	bne.n	1a3d8 <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1a3f4:	4805      	ldr	r0, [pc, #20]	; (1a40c <bt_keys_get_addr.part.0+0x44>)
   1a3f6:	e7f6      	b.n	1a3e6 <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1a3f8:	f804 6c01 	strb.w	r6, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1a3fc:	682b      	ldr	r3, [r5, #0]
   1a3fe:	6023      	str	r3, [r4, #0]
   1a400:	88ab      	ldrh	r3, [r5, #4]
   1a402:	80a3      	strh	r3, [r4, #4]
   1a404:	79ab      	ldrb	r3, [r5, #6]
   1a406:	71a3      	strb	r3, [r4, #6]
		return keys;
   1a408:	e7f4      	b.n	1a3f4 <bt_keys_get_addr.part.0+0x2c>
   1a40a:	bf00      	nop
   1a40c:	2002172c 	.word	0x2002172c
   1a410:	000345f5 	.word	0x000345f5
   1a414:	2002172d 	.word	0x2002172d

0001a418 <bt_keys_get_addr>:
{
   1a418:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a41a:	b949      	cbnz	r1, 1a430 <bt_keys_get_addr+0x18>
   1a41c:	4906      	ldr	r1, [pc, #24]	; (1a438 <bt_keys_get_addr+0x20>)
   1a41e:	4807      	ldr	r0, [pc, #28]	; (1a43c <bt_keys_get_addr+0x24>)
   1a420:	2359      	movs	r3, #89	; 0x59
   1a422:	4a07      	ldr	r2, [pc, #28]	; (1a440 <bt_keys_get_addr+0x28>)
   1a424:	f010 f959 	bl	2a6da <assert_print>
   1a428:	2159      	movs	r1, #89	; 0x59
   1a42a:	4805      	ldr	r0, [pc, #20]	; (1a440 <bt_keys_get_addr+0x28>)
   1a42c:	f010 f94e 	bl	2a6cc <assert_post_action>
}
   1a430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a434:	f7ff bfc8 	b.w	1a3c8 <bt_keys_get_addr.part.0>
   1a438:	0003649b 	.word	0x0003649b
   1a43c:	00032679 	.word	0x00032679
   1a440:	00036457 	.word	0x00036457

0001a444 <bt_keys_foreach_type>:
{
   1a444:	460b      	mov	r3, r1
   1a446:	b510      	push	{r4, lr}
   1a448:	4611      	mov	r1, r2
   1a44a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1a44c:	b963      	cbnz	r3, 1a468 <bt_keys_foreach_type+0x24>
   1a44e:	4909      	ldr	r1, [pc, #36]	; (1a474 <bt_keys_foreach_type+0x30>)
   1a450:	4809      	ldr	r0, [pc, #36]	; (1a478 <bt_keys_foreach_type+0x34>)
   1a452:	23b3      	movs	r3, #179	; 0xb3
   1a454:	4a09      	ldr	r2, [pc, #36]	; (1a47c <bt_keys_foreach_type+0x38>)
   1a456:	f010 f940 	bl	2a6da <assert_print>
   1a45a:	21b3      	movs	r1, #179	; 0xb3
   1a45c:	4807      	ldr	r0, [pc, #28]	; (1a47c <bt_keys_foreach_type+0x38>)
   1a45e:	f010 f935 	bl	2a6cc <assert_post_action>
}
   1a462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1a466:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1a468:	4805      	ldr	r0, [pc, #20]	; (1a480 <bt_keys_foreach_type+0x3c>)
   1a46a:	89c2      	ldrh	r2, [r0, #14]
   1a46c:	4222      	tst	r2, r4
   1a46e:	d1f8      	bne.n	1a462 <bt_keys_foreach_type+0x1e>
}
   1a470:	bd10      	pop	{r4, pc}
   1a472:	bf00      	nop
   1a474:	000364af 	.word	0x000364af
   1a478:	00032679 	.word	0x00032679
   1a47c:	00036457 	.word	0x00036457
   1a480:	2002172c 	.word	0x2002172c

0001a484 <keys_commit>:

static int keys_commit(void)
{
   1a484:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1a486:	2200      	movs	r2, #0
   1a488:	2002      	movs	r0, #2
   1a48a:	4902      	ldr	r1, [pc, #8]	; (1a494 <keys_commit+0x10>)
   1a48c:	f7ff ffda 	bl	1a444 <bt_keys_foreach_type>
	}

	return 0;
}
   1a490:	2000      	movs	r0, #0
   1a492:	bd08      	pop	{r3, pc}
   1a494:	0001a399 	.word	0x0001a399

0001a498 <bt_keys_find>:
{
   1a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a49a:	4605      	mov	r5, r0
   1a49c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a49e:	4614      	mov	r4, r2
   1a4a0:	b9aa      	cbnz	r2, 1a4ce <bt_keys_find+0x36>
   1a4a2:	490f      	ldr	r1, [pc, #60]	; (1a4e0 <bt_keys_find+0x48>)
   1a4a4:	480f      	ldr	r0, [pc, #60]	; (1a4e4 <bt_keys_find+0x4c>)
   1a4a6:	23c0      	movs	r3, #192	; 0xc0
   1a4a8:	4a0f      	ldr	r2, [pc, #60]	; (1a4e8 <bt_keys_find+0x50>)
   1a4aa:	f010 f916 	bl	2a6da <assert_print>
   1a4ae:	21c0      	movs	r1, #192	; 0xc0
   1a4b0:	480d      	ldr	r0, [pc, #52]	; (1a4e8 <bt_keys_find+0x50>)
   1a4b2:	f010 f90b 	bl	2a6cc <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a4b6:	b18a      	cbz	r2, 1a4dc <bt_keys_find+0x44>
   1a4b8:	428e      	cmp	r6, r1
   1a4ba:	d10f      	bne.n	1a4dc <bt_keys_find+0x44>
	return memcmp(a, b, sizeof(*a));
   1a4bc:	2207      	movs	r2, #7
   1a4be:	4621      	mov	r1, r4
   1a4c0:	480a      	ldr	r0, [pc, #40]	; (1a4ec <bt_keys_find+0x54>)
   1a4c2:	f016 f854 	bl	3056e <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4c6:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a4c8:	b918      	cbnz	r0, 1a4d2 <bt_keys_find+0x3a>
			return &key_pool[i];
   1a4ca:	4809      	ldr	r0, [pc, #36]	; (1a4f0 <bt_keys_find+0x58>)
   1a4cc:	e007      	b.n	1a4de <bt_keys_find+0x46>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4ce:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1a4d0:	4f07      	ldr	r7, [pc, #28]	; (1a4f0 <bt_keys_find+0x58>)
   1a4d2:	89fa      	ldrh	r2, [r7, #14]
   1a4d4:	7839      	ldrb	r1, [r7, #0]
   1a4d6:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a4d8:	2b00      	cmp	r3, #0
   1a4da:	d0ec      	beq.n	1a4b6 <bt_keys_find+0x1e>
	return NULL;
   1a4dc:	2000      	movs	r0, #0
}
   1a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a4e0:	0003649b 	.word	0x0003649b
   1a4e4:	00032679 	.word	0x00032679
   1a4e8:	00036457 	.word	0x00036457
   1a4ec:	2002172d 	.word	0x2002172d
   1a4f0:	2002172c 	.word	0x2002172c

0001a4f4 <bt_keys_find_irk>:
{
   1a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4f6:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1a4f8:	460c      	mov	r4, r1
   1a4fa:	b949      	cbnz	r1, 1a510 <bt_keys_find_irk+0x1c>
   1a4fc:	4923      	ldr	r1, [pc, #140]	; (1a58c <bt_keys_find_irk+0x98>)
   1a4fe:	4824      	ldr	r0, [pc, #144]	; (1a590 <bt_keys_find_irk+0x9c>)
   1a500:	23e9      	movs	r3, #233	; 0xe9
   1a502:	4a24      	ldr	r2, [pc, #144]	; (1a594 <bt_keys_find_irk+0xa0>)
   1a504:	f010 f8e9 	bl	2a6da <assert_print>
   1a508:	21e9      	movs	r1, #233	; 0xe9
   1a50a:	4822      	ldr	r0, [pc, #136]	; (1a594 <bt_keys_find_irk+0xa0>)
   1a50c:	f010 f8de 	bl	2a6cc <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1a510:	780b      	ldrb	r3, [r1, #0]
   1a512:	2b01      	cmp	r3, #1
   1a514:	d001      	beq.n	1a51a <bt_keys_find_irk+0x26>
		return NULL;
   1a516:	2000      	movs	r0, #0
}
   1a518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1a51a:	798b      	ldrb	r3, [r1, #6]
   1a51c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a520:	2b40      	cmp	r3, #64	; 0x40
   1a522:	d1f8      	bne.n	1a516 <bt_keys_find_irk+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a524:	2300      	movs	r3, #0
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a526:	4d1c      	ldr	r5, [pc, #112]	; (1a598 <bt_keys_find_irk+0xa4>)
	return memcmp(a, b, sizeof(*a));
   1a528:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1a52c:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1a52e:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a530:	f002 0202 	and.w	r2, r2, #2
   1a534:	b1db      	cbz	r3, 1a56e <bt_keys_find_irk+0x7a>
   1a536:	2300      	movs	r3, #0
   1a538:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1a53a:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1a53c:	f002 0202 	and.w	r2, r2, #2
   1a540:	2b00      	cmp	r3, #0
   1a542:	d1e8      	bne.n	1a516 <bt_keys_find_irk+0x22>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a544:	2a00      	cmp	r2, #0
   1a546:	d0e6      	beq.n	1a516 <bt_keys_find_irk+0x22>
		if (key_pool[i].id != id) {
   1a548:	42b1      	cmp	r1, r6
   1a54a:	d1e4      	bne.n	1a516 <bt_keys_find_irk+0x22>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1a54c:	1c67      	adds	r7, r4, #1
   1a54e:	4639      	mov	r1, r7
   1a550:	4812      	ldr	r0, [pc, #72]	; (1a59c <bt_keys_find_irk+0xa8>)
   1a552:	f011 fc61 	bl	2be18 <bt_rpa_irk_matches>
   1a556:	2301      	movs	r3, #1
   1a558:	2800      	cmp	r0, #0
   1a55a:	d0ed      	beq.n	1a538 <bt_keys_find_irk+0x44>
	memcpy(dst, src, sizeof(*dst));
   1a55c:	f8d4 3001 	ldr.w	r3, [r4, #1]
   1a560:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
   1a564:	f8b4 2005 	ldrh.w	r2, [r4, #5]
   1a568:	4b0d      	ldr	r3, [pc, #52]	; (1a5a0 <bt_keys_find_irk+0xac>)
   1a56a:	809a      	strh	r2, [r3, #4]
}
   1a56c:	e00b      	b.n	1a586 <bt_keys_find_irk+0x92>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1a56e:	2a00      	cmp	r2, #0
   1a570:	d0e2      	beq.n	1a538 <bt_keys_find_irk+0x44>
		if (key_pool[i].id == id &&
   1a572:	42b0      	cmp	r0, r6
   1a574:	d1e0      	bne.n	1a538 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   1a576:	2206      	movs	r2, #6
   1a578:	4639      	mov	r1, r7
   1a57a:	1c60      	adds	r0, r4, #1
   1a57c:	f015 fff7 	bl	3056e <memcmp>
   1a580:	2301      	movs	r3, #1
   1a582:	2800      	cmp	r0, #0
   1a584:	d1d2      	bne.n	1a52c <bt_keys_find_irk+0x38>
			return &key_pool[i];
   1a586:	4804      	ldr	r0, [pc, #16]	; (1a598 <bt_keys_find_irk+0xa4>)
   1a588:	e7c6      	b.n	1a518 <bt_keys_find_irk+0x24>
   1a58a:	bf00      	nop
   1a58c:	0003649b 	.word	0x0003649b
   1a590:	00032679 	.word	0x00032679
   1a594:	00036457 	.word	0x00036457
   1a598:	2002172c 	.word	0x2002172c
   1a59c:	20021756 	.word	0x20021756
   1a5a0:	20021766 	.word	0x20021766

0001a5a4 <bt_keys_find_addr>:
{
   1a5a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1a5a6:	b959      	cbnz	r1, 1a5c0 <bt_keys_find_addr+0x1c>
   1a5a8:	490c      	ldr	r1, [pc, #48]	; (1a5dc <bt_keys_find_addr+0x38>)
   1a5aa:	480d      	ldr	r0, [pc, #52]	; (1a5e0 <bt_keys_find_addr+0x3c>)
   1a5ac:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1a5b0:	4a0c      	ldr	r2, [pc, #48]	; (1a5e4 <bt_keys_find_addr+0x40>)
   1a5b2:	f010 f892 	bl	2a6da <assert_print>
   1a5b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1a5ba:	480a      	ldr	r0, [pc, #40]	; (1a5e4 <bt_keys_find_addr+0x40>)
   1a5bc:	f010 f886 	bl	2a6cc <assert_post_action>
		if (key_pool[i].id == id &&
   1a5c0:	4c09      	ldr	r4, [pc, #36]	; (1a5e8 <bt_keys_find_addr+0x44>)
   1a5c2:	7823      	ldrb	r3, [r4, #0]
   1a5c4:	4283      	cmp	r3, r0
   1a5c6:	d104      	bne.n	1a5d2 <bt_keys_find_addr+0x2e>
	return memcmp(a, b, sizeof(*a));
   1a5c8:	2207      	movs	r2, #7
   1a5ca:	1c60      	adds	r0, r4, #1
   1a5cc:	f015 ffcf 	bl	3056e <memcmp>
   1a5d0:	b108      	cbz	r0, 1a5d6 <bt_keys_find_addr+0x32>
	return NULL;
   1a5d2:	2000      	movs	r0, #0
}
   1a5d4:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1a5d6:	4620      	mov	r0, r4
   1a5d8:	e7fc      	b.n	1a5d4 <bt_keys_find_addr+0x30>
   1a5da:	bf00      	nop
   1a5dc:	0003649b 	.word	0x0003649b
   1a5e0:	00032679 	.word	0x00032679
   1a5e4:	00036457 	.word	0x00036457
   1a5e8:	2002172c 	.word	0x2002172c

0001a5ec <bt_keys_add_type>:
{
   1a5ec:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a5ee:	b958      	cbnz	r0, 1a608 <bt_keys_add_type+0x1c>
   1a5f0:	4907      	ldr	r1, [pc, #28]	; (1a610 <bt_keys_add_type+0x24>)
   1a5f2:	4808      	ldr	r0, [pc, #32]	; (1a614 <bt_keys_add_type+0x28>)
   1a5f4:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1a5f8:	4a07      	ldr	r2, [pc, #28]	; (1a618 <bt_keys_add_type+0x2c>)
   1a5fa:	f010 f86e 	bl	2a6da <assert_print>
   1a5fe:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1a602:	4805      	ldr	r0, [pc, #20]	; (1a618 <bt_keys_add_type+0x2c>)
   1a604:	f010 f862 	bl	2a6cc <assert_post_action>
	keys->keys |= type;
   1a608:	89c3      	ldrh	r3, [r0, #14]
   1a60a:	4319      	orrs	r1, r3
   1a60c:	81c1      	strh	r1, [r0, #14]
}
   1a60e:	bd08      	pop	{r3, pc}
   1a610:	00036487 	.word	0x00036487
   1a614:	00032679 	.word	0x00032679
   1a618:	00036457 	.word	0x00036457

0001a61c <bt_keys_get_type>:
{
   1a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a61e:	4606      	mov	r6, r0
   1a620:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1a622:	4615      	mov	r5, r2
   1a624:	b94a      	cbnz	r2, 1a63a <bt_keys_get_type+0x1e>
   1a626:	490c      	ldr	r1, [pc, #48]	; (1a658 <bt_keys_get_type+0x3c>)
   1a628:	480c      	ldr	r0, [pc, #48]	; (1a65c <bt_keys_get_type+0x40>)
   1a62a:	23d2      	movs	r3, #210	; 0xd2
   1a62c:	4a0c      	ldr	r2, [pc, #48]	; (1a660 <bt_keys_get_type+0x44>)
   1a62e:	f010 f854 	bl	2a6da <assert_print>
   1a632:	21d2      	movs	r1, #210	; 0xd2
   1a634:	480a      	ldr	r0, [pc, #40]	; (1a660 <bt_keys_get_type+0x44>)
   1a636:	f010 f849 	bl	2a6cc <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1a63a:	f7ff ff2d 	bl	1a498 <bt_keys_find>
	if (keys) {
   1a63e:	4604      	mov	r4, r0
   1a640:	b940      	cbnz	r0, 1a654 <bt_keys_get_type+0x38>
	keys = bt_keys_get_addr(id, addr);
   1a642:	4629      	mov	r1, r5
   1a644:	4638      	mov	r0, r7
   1a646:	f7ff fee7 	bl	1a418 <bt_keys_get_addr>
	if (!keys) {
   1a64a:	4604      	mov	r4, r0
   1a64c:	b110      	cbz	r0, 1a654 <bt_keys_get_type+0x38>
	bt_keys_add_type(keys, type);
   1a64e:	4631      	mov	r1, r6
   1a650:	f7ff ffcc 	bl	1a5ec <bt_keys_add_type>
}
   1a654:	4620      	mov	r0, r4
   1a656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a658:	0003649b 	.word	0x0003649b
   1a65c:	00032679 	.word	0x00032679
   1a660:	00036457 	.word	0x00036457

0001a664 <bt_keys_clear>:
{
   1a664:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1a666:	4604      	mov	r4, r0
{
   1a668:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a66a:	b958      	cbnz	r0, 1a684 <bt_keys_clear+0x20>
   1a66c:	4916      	ldr	r1, [pc, #88]	; (1a6c8 <bt_keys_clear+0x64>)
   1a66e:	4817      	ldr	r0, [pc, #92]	; (1a6cc <bt_keys_clear+0x68>)
   1a670:	f240 1331 	movw	r3, #305	; 0x131
   1a674:	4a16      	ldr	r2, [pc, #88]	; (1a6d0 <bt_keys_clear+0x6c>)
   1a676:	f010 f830 	bl	2a6da <assert_print>
   1a67a:	f240 1131 	movw	r1, #305	; 0x131
   1a67e:	4814      	ldr	r0, [pc, #80]	; (1a6d0 <bt_keys_clear+0x6c>)
   1a680:	f010 f824 	bl	2a6cc <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1a684:	7a03      	ldrb	r3, [r0, #8]
   1a686:	075b      	lsls	r3, r3, #29
   1a688:	d501      	bpl.n	1a68e <bt_keys_clear+0x2a>
		bt_id_del(keys);
   1a68a:	f7f9 f9b1 	bl	139f0 <bt_id_del>
		if (keys->id) {
   1a68e:	4625      	mov	r5, r4
   1a690:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a694:	b1b2      	cbz	r2, 1a6c4 <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   1a696:	ae02      	add	r6, sp, #8
   1a698:	2104      	movs	r1, #4
   1a69a:	4630      	mov	r0, r6
   1a69c:	f00f fdcd 	bl	2a23a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a6a0:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a6a2:	462b      	mov	r3, r5
   1a6a4:	2124      	movs	r1, #36	; 0x24
   1a6a6:	4a0b      	ldr	r2, [pc, #44]	; (1a6d4 <bt_keys_clear+0x70>)
   1a6a8:	a803      	add	r0, sp, #12
   1a6aa:	f7f7 fae5 	bl	11c78 <bt_settings_encode_key>
		settings_delete(key);
   1a6ae:	a803      	add	r0, sp, #12
   1a6b0:	f010 fe0d 	bl	2b2ce <settings_delete>
   1a6b4:	225c      	movs	r2, #92	; 0x5c
   1a6b6:	2100      	movs	r1, #0
   1a6b8:	4620      	mov	r0, r4
}
   1a6ba:	b00c      	add	sp, #48	; 0x30
   1a6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a6c0:	f015 bf9f 	b.w	30602 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1a6c4:	9200      	str	r2, [sp, #0]
   1a6c6:	e7ec      	b.n	1a6a2 <bt_keys_clear+0x3e>
   1a6c8:	00036487 	.word	0x00036487
   1a6cc:	00032679 	.word	0x00032679
   1a6d0:	00036457 	.word	0x00036457
   1a6d4:	00036562 	.word	0x00036562

0001a6d8 <keys_set>:
{
   1a6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6da:	b099      	sub	sp, #100	; 0x64
   1a6dc:	4614      	mov	r4, r2
	if (!name) {
   1a6de:	4606      	mov	r6, r0
{
   1a6e0:	af00      	add	r7, sp, #0
	if (!name) {
   1a6e2:	b988      	cbnz	r0, 1a708 <keys_set+0x30>
		LOG_ERR("Insufficient number of arguments");
   1a6e4:	4b60      	ldr	r3, [pc, #384]	; (1a868 <keys_set+0x190>)
   1a6e6:	627b      	str	r3, [r7, #36]	; 0x24
   1a6e8:	2302      	movs	r3, #2
   1a6ea:	623b      	str	r3, [r7, #32]
   1a6ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a6f0:	4603      	mov	r3, r0
   1a6f2:	f107 0220 	add.w	r2, r7, #32
   1a6f6:	485d      	ldr	r0, [pc, #372]	; (1a86c <keys_set+0x194>)
   1a6f8:	f7f4 f8da 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1a6fc:	f06f 0515 	mvn.w	r5, #21
}
   1a700:	4628      	mov	r0, r5
   1a702:	3764      	adds	r7, #100	; 0x64
   1a704:	46bd      	mov	sp, r7
   1a706:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1a708:	2250      	movs	r2, #80	; 0x50
   1a70a:	4618      	mov	r0, r3
   1a70c:	f107 0110 	add.w	r1, r7, #16
   1a710:	47a0      	blx	r4
	if (len < 0) {
   1a712:	1e04      	subs	r4, r0, #0
   1a714:	da10      	bge.n	1a738 <keys_set+0x60>
		LOG_ERR("Failed to read value (err %zd)", len);
   1a716:	466d      	mov	r5, sp
   1a718:	b088      	sub	sp, #32
   1a71a:	466a      	mov	r2, sp
   1a71c:	4b54      	ldr	r3, [pc, #336]	; (1a870 <keys_set+0x198>)
   1a71e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a722:	2303      	movs	r3, #3
   1a724:	f842 3f10 	str.w	r3, [r2, #16]!
   1a728:	2300      	movs	r3, #0
   1a72a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a72e:	484f      	ldr	r0, [pc, #316]	; (1a86c <keys_set+0x194>)
   1a730:	f7f4 f8be 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1a734:	46ad      	mov	sp, r5
		return -EINVAL;
   1a736:	e7e1      	b.n	1a6fc <keys_set+0x24>
	err = bt_settings_decode_key(name, &addr);
   1a738:	4630      	mov	r0, r6
   1a73a:	f107 0108 	add.w	r1, r7, #8
   1a73e:	f011 fb94 	bl	2be6a <bt_settings_decode_key>
	if (err) {
   1a742:	4605      	mov	r5, r0
   1a744:	b198      	cbz	r0, 1a76e <keys_set+0x96>
		LOG_ERR("Unable to decode address %s", name);
   1a746:	466c      	mov	r4, sp
   1a748:	b088      	sub	sp, #32
   1a74a:	466a      	mov	r2, sp
   1a74c:	4b49      	ldr	r3, [pc, #292]	; (1a874 <keys_set+0x19c>)
   1a74e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1a752:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a756:	8393      	strh	r3, [r2, #28]
   1a758:	4b47      	ldr	r3, [pc, #284]	; (1a878 <keys_set+0x1a0>)
   1a75a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a75e:	2300      	movs	r3, #0
   1a760:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a764:	4841      	ldr	r0, [pc, #260]	; (1a86c <keys_set+0x194>)
   1a766:	f7f4 f8a3 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1a76a:	46a5      	mov	sp, r4
			return -EINVAL;
   1a76c:	e7c6      	b.n	1a6fc <keys_set+0x24>
	settings_name_next(name, &next);
   1a76e:	4630      	mov	r0, r6
   1a770:	1d39      	adds	r1, r7, #4
   1a772:	f010 fdd4 	bl	2b31e <settings_name_next>
	if (!next) {
   1a776:	6878      	ldr	r0, [r7, #4]
   1a778:	b188      	cbz	r0, 1a79e <keys_set+0xc6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1a77a:	220a      	movs	r2, #10
   1a77c:	4629      	mov	r1, r5
   1a77e:	f00e fc5b 	bl	29038 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1a782:	b160      	cbz	r0, 1a79e <keys_set+0xc6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1a784:	466c      	mov	r4, sp
   1a786:	b088      	sub	sp, #32
   1a788:	466a      	mov	r2, sp
   1a78a:	4b3c      	ldr	r3, [pc, #240]	; (1a87c <keys_set+0x1a4>)
   1a78c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a790:	2303      	movs	r3, #3
   1a792:	f842 3f10 	str.w	r3, [r2, #16]!
   1a796:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a79a:	462b      	mov	r3, r5
   1a79c:	e7e2      	b.n	1a764 <keys_set+0x8c>
	if (!len) {
   1a79e:	bb1c      	cbnz	r4, 1a7e8 <keys_set+0x110>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1a7a0:	4621      	mov	r1, r4
   1a7a2:	203f      	movs	r0, #63	; 0x3f
   1a7a4:	f107 0208 	add.w	r2, r7, #8
   1a7a8:	f7ff fe76 	bl	1a498 <bt_keys_find>
		if (keys) {
   1a7ac:	b120      	cbz	r0, 1a7b8 <keys_set+0xe0>
   1a7ae:	225c      	movs	r2, #92	; 0x5c
   1a7b0:	4621      	mov	r1, r4
   1a7b2:	f015 ff26 	bl	30602 <memset>
   1a7b6:	e7a3      	b.n	1a700 <keys_set+0x28>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1a7b8:	f107 0008 	add.w	r0, r7, #8
   1a7bc:	f7f7 f986 	bl	11acc <bt_addr_le_str>
   1a7c0:	466e      	mov	r6, sp
   1a7c2:	b088      	sub	sp, #32
   1a7c4:	466a      	mov	r2, sp
   1a7c6:	4b2e      	ldr	r3, [pc, #184]	; (1a880 <keys_set+0x1a8>)
   1a7c8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a7cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a7d0:	8393      	strh	r3, [r2, #28]
   1a7d2:	4b29      	ldr	r3, [pc, #164]	; (1a878 <keys_set+0x1a0>)
   1a7d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7d8:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1a7dc:	4623      	mov	r3, r4
   1a7de:	4823      	ldr	r0, [pc, #140]	; (1a86c <keys_set+0x194>)
   1a7e0:	f7f4 f866 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1a7e4:	46b5      	mov	sp, r6
   1a7e6:	e78b      	b.n	1a700 <keys_set+0x28>
	__ASSERT_NO_MSG(addr != NULL);
   1a7e8:	2000      	movs	r0, #0
   1a7ea:	f107 0108 	add.w	r1, r7, #8
   1a7ee:	f7ff fdeb 	bl	1a3c8 <bt_keys_get_addr.part.0>
	if (!keys) {
   1a7f2:	4606      	mov	r6, r0
   1a7f4:	b9c8      	cbnz	r0, 1a82a <keys_set+0x152>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1a7f6:	f107 0008 	add.w	r0, r7, #8
   1a7fa:	f7f7 f967 	bl	11acc <bt_addr_le_str>
   1a7fe:	466c      	mov	r4, sp
   1a800:	b088      	sub	sp, #32
   1a802:	466a      	mov	r2, sp
   1a804:	4b1f      	ldr	r3, [pc, #124]	; (1a884 <keys_set+0x1ac>)
   1a806:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a80a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a80e:	8393      	strh	r3, [r2, #28]
   1a810:	4b19      	ldr	r3, [pc, #100]	; (1a878 <keys_set+0x1a0>)
   1a812:	f842 3f10 	str.w	r3, [r2, #16]!
   1a816:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a81a:	4633      	mov	r3, r6
   1a81c:	4813      	ldr	r0, [pc, #76]	; (1a86c <keys_set+0x194>)
   1a81e:	f7f4 f847 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1a822:	f06f 050b 	mvn.w	r5, #11
   1a826:	46a5      	mov	sp, r4
   1a828:	e76a      	b.n	1a700 <keys_set+0x28>
	if (len != BT_KEYS_STORAGE_LEN) {
   1a82a:	2c50      	cmp	r4, #80	; 0x50
   1a82c:	d015      	beq.n	1a85a <keys_set+0x182>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1a82e:	466d      	mov	r5, sp
   1a830:	b088      	sub	sp, #32
   1a832:	466a      	mov	r2, sp
   1a834:	4b14      	ldr	r3, [pc, #80]	; (1a888 <keys_set+0x1b0>)
   1a836:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a83a:	2350      	movs	r3, #80	; 0x50
   1a83c:	61d3      	str	r3, [r2, #28]
   1a83e:	2304      	movs	r3, #4
   1a840:	f842 3f10 	str.w	r3, [r2, #16]!
   1a844:	2300      	movs	r3, #0
   1a846:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a84a:	4808      	ldr	r0, [pc, #32]	; (1a86c <keys_set+0x194>)
   1a84c:	f7f4 f830 	bl	e8b0 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1a850:	4630      	mov	r0, r6
   1a852:	46ad      	mov	sp, r5
   1a854:	f7ff ff06 	bl	1a664 <bt_keys_clear>
			return -EINVAL;
   1a858:	e750      	b.n	1a6fc <keys_set+0x24>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a85a:	4622      	mov	r2, r4
   1a85c:	f107 0110 	add.w	r1, r7, #16
   1a860:	300c      	adds	r0, #12
   1a862:	f015 fe94 	bl	3058e <memcpy>
   1a866:	e74b      	b.n	1a700 <keys_set+0x28>
   1a868:	0003464b 	.word	0x0003464b
   1a86c:	0003151c 	.word	0x0003151c
   1a870:	000364c3 	.word	0x000364c3
   1a874:	00035bd7 	.word	0x00035bd7
   1a878:	01000003 	.word	0x01000003
   1a87c:	00035bf3 	.word	0x00035bf3
   1a880:	000364e2 	.word	0x000364e2
   1a884:	00036505 	.word	0x00036505
   1a888:	00036524 	.word	0x00036524

0001a88c <bt_keys_store>:
{
   1a88c:	b5b0      	push	{r4, r5, r7, lr}
   1a88e:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1a890:	4604      	mov	r4, r0
{
   1a892:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   1a894:	b958      	cbnz	r0, 1a8ae <bt_keys_store+0x22>
   1a896:	491c      	ldr	r1, [pc, #112]	; (1a908 <bt_keys_store+0x7c>)
   1a898:	481c      	ldr	r0, [pc, #112]	; (1a90c <bt_keys_store+0x80>)
   1a89a:	f240 1355 	movw	r3, #341	; 0x155
   1a89e:	4a1c      	ldr	r2, [pc, #112]	; (1a910 <bt_keys_store+0x84>)
   1a8a0:	f00f ff1b 	bl	2a6da <assert_print>
   1a8a4:	f240 1155 	movw	r1, #341	; 0x155
   1a8a8:	4819      	ldr	r0, [pc, #100]	; (1a910 <bt_keys_store+0x84>)
   1a8aa:	f00f ff0f 	bl	2a6cc <assert_post_action>
	if (keys->id) {
   1a8ae:	4605      	mov	r5, r0
   1a8b0:	f815 2b01 	ldrb.w	r2, [r5], #1
   1a8b4:	b332      	cbz	r2, 1a904 <bt_keys_store+0x78>
		u8_to_dec(id, sizeof(id), keys->id);
   1a8b6:	2104      	movs	r1, #4
   1a8b8:	4638      	mov	r0, r7
   1a8ba:	f00f fcbe 	bl	2a23a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a8be:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a8c0:	462b      	mov	r3, r5
   1a8c2:	2124      	movs	r1, #36	; 0x24
   1a8c4:	4a13      	ldr	r2, [pc, #76]	; (1a914 <bt_keys_store+0x88>)
   1a8c6:	1d38      	adds	r0, r7, #4
   1a8c8:	f7f7 f9d6 	bl	11c78 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1a8cc:	f104 010c 	add.w	r1, r4, #12
   1a8d0:	2250      	movs	r2, #80	; 0x50
   1a8d2:	1d38      	adds	r0, r7, #4
   1a8d4:	f7f5 fa86 	bl	fde4 <settings_save_one>
	if (err) {
   1a8d8:	4604      	mov	r4, r0
   1a8da:	b178      	cbz	r0, 1a8fc <bt_keys_store+0x70>
		LOG_ERR("Failed to save keys (err %d)", err);
   1a8dc:	466d      	mov	r5, sp
   1a8de:	b088      	sub	sp, #32
   1a8e0:	aa02      	add	r2, sp, #8
   1a8e2:	4b0d      	ldr	r3, [pc, #52]	; (1a918 <bt_keys_store+0x8c>)
   1a8e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a8e8:	2303      	movs	r3, #3
   1a8ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8ee:	2300      	movs	r3, #0
   1a8f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a8f4:	4809      	ldr	r0, [pc, #36]	; (1a91c <bt_keys_store+0x90>)
   1a8f6:	f7f3 ffdb 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1a8fa:	46ad      	mov	sp, r5
}
   1a8fc:	4620      	mov	r0, r4
   1a8fe:	3728      	adds	r7, #40	; 0x28
   1a900:	46bd      	mov	sp, r7
   1a902:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1a904:	9200      	str	r2, [sp, #0]
   1a906:	e7db      	b.n	1a8c0 <bt_keys_store+0x34>
   1a908:	00036487 	.word	0x00036487
   1a90c:	00032679 	.word	0x00032679
   1a910:	00036457 	.word	0x00036457
   1a914:	00036562 	.word	0x00036562
   1a918:	00036542 	.word	0x00036542
   1a91c:	0003151c 	.word	0x0003151c

0001a920 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a920:	4288      	cmp	r0, r1
{
   1a922:	b510      	push	{r4, lr}
   1a924:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1a928:	d911      	bls.n	1a94e <sys_memcpy_swap+0x2e>
   1a92a:	188c      	adds	r4, r1, r2
   1a92c:	42a0      	cmp	r0, r4
   1a92e:	d211      	bcs.n	1a954 <sys_memcpy_swap+0x34>
   1a930:	490d      	ldr	r1, [pc, #52]	; (1a968 <sys_memcpy_swap+0x48>)
   1a932:	f240 2315 	movw	r3, #533	; 0x215
   1a936:	4a0d      	ldr	r2, [pc, #52]	; (1a96c <sys_memcpy_swap+0x4c>)
   1a938:	480d      	ldr	r0, [pc, #52]	; (1a970 <sys_memcpy_swap+0x50>)
   1a93a:	f00f fece 	bl	2a6da <assert_print>
   1a93e:	480d      	ldr	r0, [pc, #52]	; (1a974 <sys_memcpy_swap+0x54>)
   1a940:	f00f fecb 	bl	2a6da <assert_print>
   1a944:	f240 2115 	movw	r1, #533	; 0x215
   1a948:	4808      	ldr	r0, [pc, #32]	; (1a96c <sys_memcpy_swap+0x4c>)
   1a94a:	f00f febf 	bl	2a6cc <assert_post_action>
   1a94e:	d0ef      	beq.n	1a930 <sys_memcpy_swap+0x10>
   1a950:	4299      	cmp	r1, r3
   1a952:	e7ec      	b.n	1a92e <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1a954:	3a01      	subs	r2, #1
   1a956:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1a958:	f811 2901 	ldrb.w	r2, [r1], #-1
   1a95c:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1a960:	4283      	cmp	r3, r0
   1a962:	d1f9      	bne.n	1a958 <sys_memcpy_swap+0x38>
}
   1a964:	bd10      	pop	{r4, pc}
   1a966:	bf00      	nop
   1a968:	000351bc 	.word	0x000351bc
   1a96c:	0003518a 	.word	0x0003518a
   1a970:	00032679 	.word	0x00032679
   1a974:	00035213 	.word	0x00035213

0001a978 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a97c:	b09a      	sub	sp, #104	; 0x68
   1a97e:	4616      	mov	r6, r2
   1a980:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1a984:	aa0c      	add	r2, sp, #48	; 0x30
{
   1a986:	4684      	mov	ip, r0
   1a988:	468a      	mov	sl, r1
   1a98a:	4690      	mov	r8, r2
   1a98c:	461d      	mov	r5, r3
	uint8_t m[53] = {0x00,						 /* counter */
   1a98e:	4b2c      	ldr	r3, [pc, #176]	; (1aa40 <bt_crypto_f5+0xc8>)
   1a990:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1a994:	4614      	mov	r4, r2
   1a996:	6818      	ldr	r0, [r3, #0]
   1a998:	6859      	ldr	r1, [r3, #4]
   1a99a:	3308      	adds	r3, #8
   1a99c:	c403      	stmia	r4!, {r0, r1}
   1a99e:	4573      	cmp	r3, lr
   1a9a0:	4622      	mov	r2, r4
   1a9a2:	d1f7      	bne.n	1a994 <bt_crypto_f5+0x1c>
   1a9a4:	6818      	ldr	r0, [r3, #0]
   1a9a6:	791b      	ldrb	r3, [r3, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1a9a8:	4661      	mov	r1, ip
	uint8_t m[53] = {0x00,						 /* counter */
   1a9aa:	6020      	str	r0, [r4, #0]
   1a9ac:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   1a9ae:	2220      	movs	r2, #32
   1a9b0:	a804      	add	r0, sp, #16
   1a9b2:	f7ff ffb5 	bl	1a920 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1a9b6:	466b      	mov	r3, sp
   1a9b8:	2220      	movs	r2, #32
   1a9ba:	4822      	ldr	r0, [pc, #136]	; (1aa44 <bt_crypto_f5+0xcc>)
   1a9bc:	a904      	add	r1, sp, #16
   1a9be:	f013 f8b3 	bl	2db28 <bt_crypto_aes_cmac>
	if (err) {
   1a9c2:	4604      	mov	r4, r0
   1a9c4:	bbc0      	cbnz	r0, 1aa38 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1a9c6:	2210      	movs	r2, #16
   1a9c8:	4651      	mov	r1, sl
   1a9ca:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1a9ce:	f7ff ffa7 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1a9d2:	2210      	movs	r2, #16
   1a9d4:	4631      	mov	r1, r6
   1a9d6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1a9da:	f7ff ffa1 	bl	1a920 <sys_memcpy_swap>
	m[37] = a1->type;
   1a9de:	4629      	mov	r1, r5
   1a9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a9e4:	2206      	movs	r2, #6
   1a9e6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
	m[37] = a1->type;
   1a9ea:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1a9ee:	f7ff ff97 	bl	1a920 <sys_memcpy_swap>
	m[44] = a2->type;
   1a9f2:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9f4:	2206      	movs	r2, #6
	m[44] = a2->type;
   1a9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1a9fa:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
	m[44] = a2->type;
   1a9fe:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1aa02:	f7ff ff8d 	bl	1a920 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1aa06:	464b      	mov	r3, r9
   1aa08:	2235      	movs	r2, #53	; 0x35
   1aa0a:	4641      	mov	r1, r8
   1aa0c:	4668      	mov	r0, sp
   1aa0e:	f013 f88b 	bl	2db28 <bt_crypto_aes_cmac>
	if (err) {
   1aa12:	4604      	mov	r4, r0
   1aa14:	b980      	cbnz	r0, 1aa38 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1aa16:	4648      	mov	r0, r9
   1aa18:	f013 f878 	bl	2db0c <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1aa1c:	2301      	movs	r3, #1

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1aa1e:	2235      	movs	r2, #53	; 0x35
	m[0] = 0x01;
   1aa20:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1aa24:	4641      	mov	r1, r8
   1aa26:	463b      	mov	r3, r7
   1aa28:	4668      	mov	r0, sp
   1aa2a:	f013 f87d 	bl	2db28 <bt_crypto_aes_cmac>
	if (err) {
   1aa2e:	4604      	mov	r4, r0
   1aa30:	b910      	cbnz	r0, 1aa38 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1aa32:	4638      	mov	r0, r7
   1aa34:	f013 f86a 	bl	2db0c <sys_mem_swap.constprop.0>

	return 0;
}
   1aa38:	4620      	mov	r0, r4
   1aa3a:	b01a      	add	sp, #104	; 0x68
   1aa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aa40:	00031714 	.word	0x00031714
   1aa44:	0003656f 	.word	0x0003656f

0001aa48 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1aa48:	b570      	push	{r4, r5, r6, lr}
   1aa4a:	460e      	mov	r6, r1
   1aa4c:	461d      	mov	r5, r3
   1aa4e:	4614      	mov	r4, r2
   1aa50:	b098      	sub	sp, #96	; 0x60
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1aa52:	4601      	mov	r1, r0
   1aa54:	2220      	movs	r2, #32
   1aa56:	a804      	add	r0, sp, #16
   1aa58:	f7ff ff62 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1aa5c:	2220      	movs	r2, #32
   1aa5e:	4631      	mov	r1, r6
   1aa60:	a80c      	add	r0, sp, #48	; 0x30
   1aa62:	f7ff ff5d 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1aa66:	2210      	movs	r2, #16
   1aa68:	4629      	mov	r1, r5
   1aa6a:	a814      	add	r0, sp, #80	; 0x50
   1aa6c:	f7ff ff58 	bl	1a920 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1aa70:	2210      	movs	r2, #16
   1aa72:	4621      	mov	r1, r4
   1aa74:	4668      	mov	r0, sp
   1aa76:	f7ff ff53 	bl	1a920 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1aa7a:	466b      	mov	r3, sp
   1aa7c:	2250      	movs	r2, #80	; 0x50
   1aa7e:	4618      	mov	r0, r3
   1aa80:	a904      	add	r1, sp, #16
   1aa82:	f013 f851 	bl	2db28 <bt_crypto_aes_cmac>
	if (err) {
   1aa86:	b940      	cbnz	r0, 1aa9a <bt_crypto_g2+0x52>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1aa88:	9b03      	ldr	r3, [sp, #12]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1aa8a:	4a05      	ldr	r2, [pc, #20]	; (1aaa0 <bt_crypto_g2+0x58>)
   1aa8c:	ba1b      	rev	r3, r3
   1aa8e:	fbb3 f1f2 	udiv	r1, r3, r2
   1aa92:	fb02 3311 	mls	r3, r2, r1, r3
   1aa96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1aa98:	6013      	str	r3, [r2, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1aa9a:	b018      	add	sp, #96	; 0x60
   1aa9c:	bd70      	pop	{r4, r5, r6, pc}
   1aa9e:	bf00      	nop
   1aaa0:	000f4240 	.word	0x000f4240

0001aaa4 <registry_find>:
static struct registry_entry *registry_find(int type)
{
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
   1aaa4:	4b08      	ldr	r3, [pc, #32]	; (1aac8 <registry_find+0x24>)
{
   1aaa6:	4602      	mov	r2, r0
		if ((ep->fstp != NULL) && (ep->type == type)) {
   1aaa8:	6859      	ldr	r1, [r3, #4]
   1aaaa:	b111      	cbz	r1, 1aab2 <registry_find+0xe>
   1aaac:	6819      	ldr	r1, [r3, #0]
   1aaae:	4288      	cmp	r0, r1
   1aab0:	d007      	beq.n	1aac2 <registry_find+0x1e>
   1aab2:	68d8      	ldr	r0, [r3, #12]
   1aab4:	b130      	cbz	r0, 1aac4 <registry_find+0x20>
   1aab6:	6899      	ldr	r1, [r3, #8]
		struct registry_entry *ep = &registry[i];
   1aab8:	4804      	ldr	r0, [pc, #16]	; (1aacc <registry_find+0x28>)
   1aaba:	428a      	cmp	r2, r1
   1aabc:	bf18      	it	ne
   1aabe:	2000      	movne	r0, #0
   1aac0:	4770      	bx	lr
   1aac2:	4618      	mov	r0, r3
			return ep;
		}
	}
	return NULL;
}
   1aac4:	4770      	bx	lr
   1aac6:	bf00      	nop
   1aac8:	20021788 	.word	0x20021788
   1aacc:	20021790 	.word	0x20021790

0001aad0 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
   1aad0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
   1aad2:	4804      	ldr	r0, [pc, #16]	; (1aae4 <fs_init+0x14>)
   1aad4:	f015 fb64 	bl	301a0 <z_impl_k_mutex_init>
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1aad8:	4b03      	ldr	r3, [pc, #12]	; (1aae8 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
   1aada:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
   1aadc:	e9c3 3300 	strd	r3, r3, [r3]
   1aae0:	bd08      	pop	{r3, pc}
   1aae2:	bf00      	nop
   1aae4:	20021798 	.word	0x20021798
   1aae8:	200217ac 	.word	0x200217ac

0001aaec <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   1aaec:	4602      	mov	r2, r0
   1aaee:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1aaf0:	4801      	ldr	r0, [pc, #4]	; (1aaf8 <k_mutex_lock.constprop.0.isra.0+0xc>)
   1aaf2:	f00a bb17 	b.w	25124 <z_impl_k_mutex_lock>
   1aaf6:	bf00      	nop
   1aaf8:	20021798 	.word	0x20021798

0001aafc <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   1aafc:	4801      	ldr	r0, [pc, #4]	; (1ab04 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   1aafe:	f00a bbe1 	b.w	252c4 <z_impl_k_mutex_unlock>
   1ab02:	bf00      	nop
   1ab04:	20021798 	.word	0x20021798

0001ab08 <fs_register>:
{
   1ab08:	b538      	push	{r3, r4, r5, lr}
   1ab0a:	4604      	mov	r4, r0
   1ab0c:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
   1ab0e:	f04f 30ff 	mov.w	r0, #4294967295
   1ab12:	f04f 31ff 	mov.w	r1, #4294967295
   1ab16:	f7ff ffe9 	bl	1aaec <k_mutex_lock.constprop.0.isra.0>
	struct registry_entry *ep = registry_find(type);
   1ab1a:	4620      	mov	r0, r4
   1ab1c:	f7ff ffc2 	bl	1aaa4 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   1ab20:	b108      	cbz	r0, 1ab26 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
   1ab22:	6843      	ldr	r3, [r0, #4]
   1ab24:	b97b      	cbnz	r3, 1ab46 <fs_register+0x3e>
		if (ep->fstp == NULL) {
   1ab26:	4b0b      	ldr	r3, [pc, #44]	; (1ab54 <fs_register+0x4c>)
   1ab28:	685a      	ldr	r2, [r3, #4]
   1ab2a:	b112      	cbz	r2, 1ab32 <fs_register+0x2a>
   1ab2c:	68da      	ldr	r2, [r3, #12]
   1ab2e:	b96a      	cbnz	r2, 1ab4c <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
   1ab30:	2201      	movs	r2, #1
			ep->type = type;
   1ab32:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			rv = 0;
   1ab36:	2400      	movs	r4, #0
			ep->fstp = fstp;
   1ab38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ab3c:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
   1ab3e:	f7ff ffdd 	bl	1aafc <k_mutex_unlock.constprop.0.isra.0>
}
   1ab42:	4620      	mov	r0, r4
   1ab44:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
   1ab46:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1ab4a:	e7f8      	b.n	1ab3e <fs_register+0x36>
	int rv = -ENOSPC;
   1ab4c:	f06f 041b 	mvn.w	r4, #27
   1ab50:	e7f5      	b.n	1ab3e <fs_register+0x36>
   1ab52:	bf00      	nop
   1ab54:	20021788 	.word	0x20021788

0001ab58 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
   1ab58:	b138      	cbz	r0, 1ab6a <fs_impl_strip_prefix+0x12>
   1ab5a:	b131      	cbz	r1, 1ab6a <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
   1ab5c:	698b      	ldr	r3, [r1, #24]
   1ab5e:	4418      	add	r0, r3
	return *path ? path : root;
   1ab60:	7802      	ldrb	r2, [r0, #0]
   1ab62:	4b02      	ldr	r3, [pc, #8]	; (1ab6c <fs_impl_strip_prefix+0x14>)
   1ab64:	2a00      	cmp	r2, #0
   1ab66:	bf08      	it	eq
   1ab68:	4618      	moveq	r0, r3
}
   1ab6a:	4770      	bx	lr
   1ab6c:	000338c2 	.word	0x000338c2

0001ab70 <littlefs_init>:
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
   1ab70:	2001      	movs	r0, #1
   1ab72:	4901      	ldr	r1, [pc, #4]	; (1ab78 <littlefs_init+0x8>)
   1ab74:	f7ff bfc8 	b.w	1ab08 <fs_register>
   1ab78:	00032234 	.word	0x00032234

0001ab7c <release_file_data>:
{
   1ab7c:	b510      	push	{r4, lr}
	struct lfs_file_data *fdp = fp->filep;
   1ab7e:	6803      	ldr	r3, [r0, #0]
{
   1ab80:	4604      	mov	r4, r0
	if (fdp->config.buffer) {
   1ab82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1ab84:	b11a      	cbz	r2, 1ab8e <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
   1ab86:	6e19      	ldr	r1, [r3, #96]	; 0x60
   1ab88:	4804      	ldr	r0, [pc, #16]	; (1ab9c <release_file_data+0x20>)
   1ab8a:	f00a f811 	bl	24bb0 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
   1ab8e:	4621      	mov	r1, r4
   1ab90:	4803      	ldr	r0, [pc, #12]	; (1aba0 <release_file_data+0x24>)
   1ab92:	f00a f8f1 	bl	24d78 <k_mem_slab_free>
	fp->filep = NULL;
   1ab96:	2300      	movs	r3, #0
   1ab98:	6023      	str	r3, [r4, #0]
}
   1ab9a:	bd10      	pop	{r4, pc}
   1ab9c:	20008b14 	.word	0x20008b14
   1aba0:	20008a9c 	.word	0x20008a9c

0001aba4 <lfs_to_errno>:
	if (error >= 0) {
   1aba4:	2800      	cmp	r0, #0
   1aba6:	da07      	bge.n	1abb8 <lfs_to_errno+0x14>
	switch (error) {
   1aba8:	3054      	adds	r0, #84	; 0x54
   1abaa:	2852      	cmp	r0, #82	; 0x52
   1abac:	d802      	bhi.n	1abb4 <lfs_to_errno+0x10>
   1abae:	4b03      	ldr	r3, [pc, #12]	; (1abbc <lfs_to_errno+0x18>)
   1abb0:	5618      	ldrsb	r0, [r3, r0]
   1abb2:	4770      	bx	lr
   1abb4:	f06f 0004 	mvn.w	r0, #4
}
   1abb8:	4770      	bx	lr
   1abba:	bf00      	nop
   1abbc:	00036855 	.word	0x00036855

0001abc0 <errno_to_lfs>:
	if (error >= 0) {
   1abc0:	2800      	cmp	r0, #0
   1abc2:	da05      	bge.n	1abd0 <errno_to_lfs+0x10>
	switch (error) {
   1abc4:	305a      	adds	r0, #90	; 0x5a
   1abc6:	2858      	cmp	r0, #88	; 0x58
   1abc8:	d804      	bhi.n	1abd4 <errno_to_lfs+0x14>
   1abca:	4b04      	ldr	r3, [pc, #16]	; (1abdc <errno_to_lfs+0x1c>)
   1abcc:	5618      	ldrsb	r0, [r3, r0]
   1abce:	4770      	bx	lr
		return LFS_ERR_OK;
   1abd0:	2000      	movs	r0, #0
   1abd2:	4770      	bx	lr
	switch (error) {
   1abd4:	f06f 0004 	mvn.w	r0, #4
}
   1abd8:	4770      	bx	lr
   1abda:	bf00      	nop
   1abdc:	000367fc 	.word	0x000367fc

0001abe0 <littlefs_open>:
{
   1abe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct fs_littlefs *fs = fp->mp->fs_data;
   1abe4:	6843      	ldr	r3, [r0, #4]
{
   1abe6:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   1abe8:	691e      	ldr	r6, [r3, #16]
{
   1abea:	4688      	mov	r8, r1
   1abec:	4615      	mov	r5, r2
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
   1abee:	4601      	mov	r1, r0
   1abf0:	2200      	movs	r2, #0
   1abf2:	2300      	movs	r3, #0
   1abf4:	4823      	ldr	r0, [pc, #140]	; (1ac84 <littlefs_open+0xa4>)
   1abf6:	f00a f855 	bl	24ca4 <k_mem_slab_alloc>
   1abfa:	4601      	mov	r1, r0
	if (ret != 0) {
   1abfc:	2800      	cmp	r0, #0
   1abfe:	d13e      	bne.n	1ac7e <littlefs_open+0x9e>
	struct lfs_file_data *fdp = fp->filep;
   1ac00:	6827      	ldr	r7, [r4, #0]
__ssp_bos_icheck3(memset, void *, int)
   1ac02:	2264      	movs	r2, #100	; 0x64
   1ac04:	4638      	mov	r0, r7
   1ac06:	f015 fcfc 	bl	30602 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   1ac0a:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
   1ac0e:	2200      	movs	r2, #0
   1ac10:	2300      	movs	r3, #0
   1ac12:	6a89      	ldr	r1, [r1, #40]	; 0x28
   1ac14:	481c      	ldr	r0, [pc, #112]	; (1ac88 <littlefs_open+0xa8>)
   1ac16:	f015 fa87 	bl	30128 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
   1ac1a:	6638      	str	r0, [r7, #96]	; 0x60
	if (fdp->cache_block == NULL) {
   1ac1c:	b360      	cbz	r0, 1ac78 <littlefs_open+0x98>
	fdp->config.buffer = fdp->cache_block;
   1ac1e:	46b9      	mov	r9, r7
   1ac20:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
   1ac24:	6861      	ldr	r1, [r4, #4]
   1ac26:	4640      	mov	r0, r8
   1ac28:	f7ff ff96 	bl	1ab58 <fs_impl_strip_prefix>
   1ac2c:	4680      	mov	r8, r0
	fs_lock(fs);
   1ac2e:	4630      	mov	r0, r6
   1ac30:	f013 f863 	bl	2dcfa <fs_lock>
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   1ac34:	0129      	lsls	r1, r5, #4
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1ac36:	01ab      	lsls	r3, r5, #6
   1ac38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   1ac3c:	f401 7180 	and.w	r1, r1, #256	; 0x100
   1ac40:	4319      	orrs	r1, r3
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1ac42:	f005 0303 	and.w	r3, r5, #3
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
   1ac46:	430b      	orrs	r3, r1
   1ac48:	4642      	mov	r2, r8
   1ac4a:	4639      	mov	r1, r7
   1ac4c:	f8cd 9000 	str.w	r9, [sp]
   1ac50:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1ac54:	f008 fe18 	bl	23888 <lfs_file_opencfg>
   1ac58:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1ac5a:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1ac5e:	f013 f853 	bl	2dd08 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   1ac62:	2d00      	cmp	r5, #0
   1ac64:	da02      	bge.n	1ac6c <littlefs_open+0x8c>
		release_file_data(fp);
   1ac66:	4620      	mov	r0, r4
   1ac68:	f7ff ff88 	bl	1ab7c <release_file_data>
	return lfs_to_errno(ret);
   1ac6c:	4628      	mov	r0, r5
}
   1ac6e:	b003      	add	sp, #12
   1ac70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return lfs_to_errno(ret);
   1ac74:	f7ff bf96 	b.w	1aba4 <lfs_to_errno>
		ret = -ENOMEM;
   1ac78:	f06f 050b 	mvn.w	r5, #11
   1ac7c:	e7f3      	b.n	1ac66 <littlefs_open+0x86>
}
   1ac7e:	b003      	add	sp, #12
   1ac80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ac84:	20008a9c 	.word	0x20008a9c
   1ac88:	20008b14 	.word	0x20008b14

0001ac8c <littlefs_opendir>:
{
   1ac8c:	b570      	push	{r4, r5, r6, lr}
	struct fs_littlefs *fs = dp->mp->fs_data;
   1ac8e:	6843      	ldr	r3, [r0, #4]
{
   1ac90:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   1ac92:	691e      	ldr	r6, [r3, #16]
{
   1ac94:	460d      	mov	r5, r1
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
   1ac96:	2200      	movs	r2, #0
   1ac98:	4601      	mov	r1, r0
   1ac9a:	2300      	movs	r3, #0
   1ac9c:	4814      	ldr	r0, [pc, #80]	; (1acf0 <littlefs_opendir+0x64>)
   1ac9e:	f00a f801 	bl	24ca4 <k_mem_slab_alloc>
   1aca2:	4601      	mov	r1, r0
   1aca4:	bb08      	cbnz	r0, 1acea <littlefs_opendir+0x5e>
   1aca6:	2234      	movs	r2, #52	; 0x34
   1aca8:	6820      	ldr	r0, [r4, #0]
   1acaa:	f015 fcaa 	bl	30602 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
   1acae:	6861      	ldr	r1, [r4, #4]
   1acb0:	4628      	mov	r0, r5
   1acb2:	f7ff ff51 	bl	1ab58 <fs_impl_strip_prefix>
   1acb6:	4605      	mov	r5, r0
	fs_lock(fs);
   1acb8:	4630      	mov	r0, r6
   1acba:	f013 f81e 	bl	2dcfa <fs_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
   1acbe:	462a      	mov	r2, r5
   1acc0:	6821      	ldr	r1, [r4, #0]
   1acc2:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1acc6:	f008 ffeb 	bl	23ca0 <lfs_dir_open>
   1acca:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1accc:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1acd0:	f013 f81a 	bl	2dd08 <k_mutex_unlock.isra.0>
	if (ret < 0) {
   1acd4:	2d00      	cmp	r5, #0
   1acd6:	da03      	bge.n	1ace0 <littlefs_opendir+0x54>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1acd8:	4621      	mov	r1, r4
   1acda:	4805      	ldr	r0, [pc, #20]	; (1acf0 <littlefs_opendir+0x64>)
   1acdc:	f00a f84c 	bl	24d78 <k_mem_slab_free>
	return lfs_to_errno(ret);
   1ace0:	4628      	mov	r0, r5
}
   1ace2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   1ace6:	f7ff bf5d 	b.w	1aba4 <lfs_to_errno>
}
   1acea:	f06f 000b 	mvn.w	r0, #11
   1acee:	bd70      	pop	{r4, r5, r6, pc}
   1acf0:	20008abc 	.word	0x20008abc

0001acf4 <littlefs_closedir>:
{
   1acf4:	b570      	push	{r4, r5, r6, lr}
   1acf6:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   1acf8:	6843      	ldr	r3, [r0, #4]
   1acfa:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   1acfc:	4630      	mov	r0, r6
   1acfe:	f012 fffc 	bl	2dcfa <fs_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
   1ad02:	6821      	ldr	r1, [r4, #0]
   1ad04:	f106 0074 	add.w	r0, r6, #116	; 0x74
   1ad08:	f014 fe07 	bl	2f91a <lfs_dir_close>
   1ad0c:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   1ad0e:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   1ad12:	f012 fff9 	bl	2dd08 <k_mutex_unlock.isra.0>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
   1ad16:	4621      	mov	r1, r4
   1ad18:	4803      	ldr	r0, [pc, #12]	; (1ad28 <littlefs_closedir+0x34>)
   1ad1a:	f00a f82d 	bl	24d78 <k_mem_slab_free>
	return lfs_to_errno(ret);
   1ad1e:	4628      	mov	r0, r5
}
   1ad20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   1ad24:	f7ff bf3e 	b.w	1aba4 <lfs_to_errno>
   1ad28:	20008abc 	.word	0x20008abc

0001ad2c <littlefs_unmount>:
{
   1ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fs->backend = NULL;
   1ad2e:	2600      	movs	r6, #0
{
   1ad30:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
   1ad32:	6904      	ldr	r4, [r0, #16]
{
   1ad34:	af00      	add	r7, sp, #0
	fs_lock(fs);
   1ad36:	4620      	mov	r0, r4
   1ad38:	f012 ffdf 	bl	2dcfa <fs_lock>
	lfs_unmount(&fs->lfs);
   1ad3c:	f104 0074 	add.w	r0, r4, #116	; 0x74
   1ad40:	f014 fdd4 	bl	2f8ec <lfs_unmount>
		flash_area_close(fs->backend);
   1ad44:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ad48:	f010 fa5b 	bl	2b202 <flash_area_close>
	fs->backend = NULL;
   1ad4c:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
	k_mutex_unlock(&fs->mutex);
   1ad50:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1ad54:	f012 ffd8 	bl	2dd08 <k_mutex_unlock.isra.0>
	LOG_INF("%s unmounted", mountp->mnt_point);
   1ad58:	b088      	sub	sp, #32
   1ad5a:	466a      	mov	r2, sp
   1ad5c:	68eb      	ldr	r3, [r5, #12]
   1ad5e:	4908      	ldr	r1, [pc, #32]	; (1ad80 <littlefs_unmount+0x54>)
   1ad60:	4808      	ldr	r0, [pc, #32]	; (1ad84 <littlefs_unmount+0x58>)
   1ad62:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ad66:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ad6a:	8393      	strh	r3, [r2, #28]
   1ad6c:	4b06      	ldr	r3, [pc, #24]	; (1ad88 <littlefs_unmount+0x5c>)
   1ad6e:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1ad72:	f842 3f10 	str.w	r3, [r2, #16]!
   1ad76:	f012 ffbd 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
}
   1ad7a:	4630      	mov	r0, r6
   1ad7c:	46bd      	mov	sp, r7
   1ad7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad80:	00036589 	.word	0x00036589
   1ad84:	0003158c 	.word	0x0003158c
   1ad88:	01000003 	.word	0x01000003

0001ad8c <littlefs_mount>:
{
   1ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad90:	b08b      	sub	sp, #44	; 0x2c
	struct fs_littlefs *fs = mountp->fs_data;
   1ad92:	6904      	ldr	r4, [r0, #16]
{
   1ad94:	af00      	add	r7, sp, #0
	k_mutex_init(&fs->mutex);
   1ad96:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
{
   1ad9a:	4606      	mov	r6, r0
	k_mutex_init(&fs->mutex);
   1ad9c:	603b      	str	r3, [r7, #0]
	return z_impl_k_mutex_init(mutex);
   1ad9e:	4618      	mov	r0, r3
   1ada0:	f015 f9fe 	bl	301a0 <z_impl_k_mutex_init>
	fs_lock(fs);
   1ada4:	4620      	mov	r0, r4
   1ada6:	f012 ffa8 	bl	2dcfa <fs_lock>
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   1adaa:	466d      	mov	r5, sp
   1adac:	b08a      	sub	sp, #40	; 0x28
   1adae:	466a      	mov	r2, sp
	ret = littlefs_init_fs(fs, (uintptr_t)mountp->storage_dev, mountp->flags);
   1adb0:	f8d6 8014 	ldr.w	r8, [r6, #20]
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
   1adb4:	4bb6      	ldr	r3, [pc, #728]	; (1b090 <littlefs_mount+0x304>)
   1adb6:	2105      	movs	r1, #5
   1adb8:	6153      	str	r3, [r2, #20]
   1adba:	2302      	movs	r3, #2
   1adbc:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1adc0:	6213      	str	r3, [r2, #32]
   1adc2:	2300      	movs	r3, #0
   1adc4:	6253      	str	r3, [r2, #36]	; 0x24
   1adc6:	2306      	movs	r3, #6
   1adc8:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1adcc:	f842 3f10 	str.w	r3, [r2, #16]!
   1add0:	48b0      	ldr	r0, [pc, #704]	; (1b094 <littlefs_mount+0x308>)
   1add2:	f012 ff8f 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
	if (fs->backend) {
   1add6:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1adda:	46ad      	mov	sp, r5
   1addc:	2b00      	cmp	r3, #0
   1adde:	f040 819f 	bne.w	1b120 <littlefs_mount+0x394>
	ret = flash_area_open(area_id, fap);
   1ade2:	f104 01ec 	add.w	r1, r4, #236	; 0xec
   1ade6:	fa5f f088 	uxtb.w	r0, r8
   1adea:	f7f4 ffa3 	bl	fd34 <flash_area_open>
	if ((ret < 0) || (*fap == NULL)) {
   1adee:	2800      	cmp	r0, #0
   1adf0:	db02      	blt.n	1adf8 <littlefs_mount+0x6c>
   1adf2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1adf6:	b9a0      	cbnz	r0, 1ae22 <littlefs_mount+0x96>
		LOG_ERR("can't open flash area %d", area_id);
   1adf8:	466d      	mov	r5, sp
   1adfa:	b088      	sub	sp, #32
   1adfc:	466a      	mov	r2, sp
   1adfe:	4ba6      	ldr	r3, [pc, #664]	; (1b098 <littlefs_mount+0x30c>)
   1ae00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ae04:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1ae08:	2303      	movs	r3, #3
   1ae0a:	f842 3f10 	str.w	r3, [r2, #16]!
		LOG_ERR("can't get flash device: %s",
   1ae0e:	48a1      	ldr	r0, [pc, #644]	; (1b094 <littlefs_mount+0x308>)
   1ae10:	f012 ff70 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
   1ae14:	46ad      	mov	sp, r5
			ret = -EROFS;
   1ae16:	f06f 0512 	mvn.w	r5, #18
		fs->backend = NULL;
   1ae1a:	2300      	movs	r3, #0
   1ae1c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1ae20:	e115      	b.n	1b04e <littlefs_mount+0x2c2>
	dev = flash_area_get_device(*fap);
   1ae22:	f010 fa2d 	bl	2b280 <flash_area_get_device>
	if (dev == NULL) {
   1ae26:	b988      	cbnz	r0, 1ae4c <littlefs_mount+0xc0>
		LOG_ERR("can't get flash device: %s",
   1ae28:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ae2c:	b088      	sub	sp, #32
   1ae2e:	68db      	ldr	r3, [r3, #12]
   1ae30:	466a      	mov	r2, sp
   1ae32:	681b      	ldr	r3, [r3, #0]
   1ae34:	4999      	ldr	r1, [pc, #612]	; (1b09c <littlefs_mount+0x310>)
   1ae36:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ae3a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ae3e:	8393      	strh	r3, [r2, #28]
   1ae40:	4b97      	ldr	r3, [pc, #604]	; (1b0a0 <littlefs_mount+0x314>)
   1ae42:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1ae46:	f842 3f10 	str.w	r3, [r2, #16]!
   1ae4a:	e7e0      	b.n	1ae0e <littlefs_mount+0x82>
	lfs_size_t read_size = lcp->read_size;
   1ae4c:	6963      	ldr	r3, [r4, #20]
	lfs_size_t prog_size = lcp->prog_size;
   1ae4e:	f8d4 9018 	ldr.w	r9, [r4, #24]
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1ae52:	2b00      	cmp	r3, #0
   1ae54:	bf08      	it	eq
   1ae56:	2310      	moveq	r3, #16
	lfs_size_t block_size = lcp->block_size;
   1ae58:	69e5      	ldr	r5, [r4, #28]
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
   1ae5a:	f1b9 0f00 	cmp.w	r9, #0
   1ae5e:	bf08      	it	eq
   1ae60:	f04f 0910 	moveq.w	r9, #16
		LOG_ERR("can't get flash device: %s",
   1ae64:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
   1ae68:	60fb      	str	r3, [r7, #12]
	if (block_size == 0) {
   1ae6a:	b9b5      	cbnz	r5, 1ae9a <littlefs_mount+0x10e>
	struct get_page_ctx ctx = {
   1ae6c:	e9c7 0504 	strd	r0, r5, [r7, #16]
	const struct device *dev = flash_area_get_device(fa);
   1ae70:	f010 fa06 	bl	2b280 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
   1ae74:	498b      	ldr	r1, [pc, #556]	; (1b0a4 <littlefs_mount+0x318>)
   1ae76:	f107 0210 	add.w	r2, r7, #16
   1ae7a:	f013 fa78 	bl	2e36e <flash_page_foreach>
	return ctx.max_size;
   1ae7e:	697d      	ldr	r5, [r7, #20]
	if (block_size == 0) {
   1ae80:	b95d      	cbnz	r5, 1ae9a <littlefs_mount+0x10e>
		__ASSERT_NO_MSG(block_size != 0);
   1ae82:	4989      	ldr	r1, [pc, #548]	; (1b0a8 <littlefs_mount+0x31c>)
   1ae84:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1ae88:	4a88      	ldr	r2, [pc, #544]	; (1b0ac <littlefs_mount+0x320>)
   1ae8a:	4889      	ldr	r0, [pc, #548]	; (1b0b0 <littlefs_mount+0x324>)
   1ae8c:	f00f fc25 	bl	2a6da <assert_print>
   1ae90:	f44f 7133 	mov.w	r1, #716	; 0x2cc
	__ASSERT((block_size % prog_size) == 0,
   1ae94:	4885      	ldr	r0, [pc, #532]	; (1b0ac <littlefs_mount+0x320>)
   1ae96:	f00f fc19 	bl	2a6cc <assert_post_action>
	int32_t block_cycles = lcp->block_cycles;
   1ae9a:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
	if (block_cycles == 0) {
   1ae9e:	f1ba 0f00 	cmp.w	sl, #0
   1aea2:	d05b      	beq.n	1af5c <littlefs_mount+0x1d0>
	if (block_cycles <= 0) {
   1aea4:	dc01      	bgt.n	1aeaa <littlefs_mount+0x11e>
		block_cycles = -1;
   1aea6:	f04f 3aff 	mov.w	sl, #4294967295
		block_count = ((struct flash_area *)fs->backend)->fa_size
   1aeaa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
	lfs_size_t cache_size = lcp->cache_size;
   1aeae:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
			/ block_size;
   1aeb2:	6882      	ldr	r2, [r0, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
   1aeb4:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
			/ block_size;
   1aeb8:	fbb2 f3f5 	udiv	r3, r2, r5
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
   1aebc:	f1b8 0f00 	cmp.w	r8, #0
   1aec0:	bf08      	it	eq
   1aec2:	f04f 0840 	moveq.w	r8, #64	; 0x40
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
   1aec6:	f1bb 0f00 	cmp.w	fp, #0
   1aeca:	bf08      	it	eq
   1aecc:	f04f 0b20 	moveq.w	fp, #32
			/ block_size;
   1aed0:	607b      	str	r3, [r7, #4]
			flash_area_get_device((struct flash_area *)fs->backend);
   1aed2:	f010 f9d5 	bl	2b280 <flash_area_get_device>
		LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
   1aed6:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1aeda:	f8c7 d008 	str.w	sp, [r7, #8]
   1aede:	b08c      	sub	sp, #48	; 0x30
   1aee0:	6851      	ldr	r1, [r2, #4]
   1aee2:	6800      	ldr	r0, [r0, #0]
   1aee4:	466a      	mov	r2, sp
   1aee6:	61d1      	str	r1, [r2, #28]
   1aee8:	f44f 7100 	mov.w	r1, #512	; 0x200
   1aeec:	4b71      	ldr	r3, [pc, #452]	; (1b0b4 <littlefs_mount+0x328>)
   1aeee:	8591      	strh	r1, [r2, #44]	; 0x2c
   1aef0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1aef4:	4970      	ldr	r1, [pc, #448]	; (1b0b8 <littlefs_mount+0x32c>)
   1aef6:	687b      	ldr	r3, [r7, #4]
   1aef8:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
   1aefc:	e9c2 3508 	strd	r3, r5, [r2, #32]
   1af00:	4864      	ldr	r0, [pc, #400]	; (1b094 <littlefs_mount+0x308>)
   1af02:	f842 1f10 	str.w	r1, [r2, #16]!
   1af06:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   1af0a:	f012 fef3 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
   1af0e:	f8d7 d008 	ldr.w	sp, [r7, #8]
		LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
   1af12:	b08a      	sub	sp, #40	; 0x28
   1af14:	466a      	mov	r2, sp
   1af16:	4969      	ldr	r1, [pc, #420]	; (1b0bc <littlefs_mount+0x330>)
   1af18:	68fb      	ldr	r3, [r7, #12]
   1af1a:	6151      	str	r1, [r2, #20]
   1af1c:	2106      	movs	r1, #6
   1af1e:	e9c2 3906 	strd	r3, r9, [r2, #24]
   1af22:	e9c2 8b08 	strd	r8, fp, [r2, #32]
   1af26:	485b      	ldr	r0, [pc, #364]	; (1b094 <littlefs_mount+0x308>)
   1af28:	f842 1f10 	str.w	r1, [r2, #16]!
   1af2c:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   1af30:	f012 fee0 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
	__ASSERT((block_size % prog_size) == 0,
   1af34:	fbb5 f2f9 	udiv	r2, r5, r9
   1af38:	fb09 5212 	mls	r2, r9, r2, r5
   1af3c:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1af40:	b17a      	cbz	r2, 1af62 <littlefs_mount+0x1d6>
   1af42:	495f      	ldr	r1, [pc, #380]	; (1b0c0 <littlefs_mount+0x334>)
   1af44:	f240 3306 	movw	r3, #774	; 0x306
   1af48:	4a58      	ldr	r2, [pc, #352]	; (1b0ac <littlefs_mount+0x320>)
   1af4a:	4859      	ldr	r0, [pc, #356]	; (1b0b0 <littlefs_mount+0x324>)
   1af4c:	f00f fbc5 	bl	2a6da <assert_print>
   1af50:	485c      	ldr	r0, [pc, #368]	; (1b0c4 <littlefs_mount+0x338>)
   1af52:	f00f fbc2 	bl	2a6da <assert_print>
   1af56:	f240 3106 	movw	r1, #774	; 0x306
   1af5a:	e79b      	b.n	1ae94 <littlefs_mount+0x108>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
   1af5c:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1af60:	e7a3      	b.n	1aeaa <littlefs_mount+0x11e>
	__ASSERT((block_size % cache_size) == 0,
   1af62:	fbb5 f2f8 	udiv	r2, r5, r8
   1af66:	fb08 5212 	mls	r2, r8, r2, r5
   1af6a:	b162      	cbz	r2, 1af86 <littlefs_mount+0x1fa>
   1af6c:	4956      	ldr	r1, [pc, #344]	; (1b0c8 <littlefs_mount+0x33c>)
   1af6e:	f44f 7342 	mov.w	r3, #776	; 0x308
   1af72:	4a4e      	ldr	r2, [pc, #312]	; (1b0ac <littlefs_mount+0x320>)
   1af74:	484e      	ldr	r0, [pc, #312]	; (1b0b0 <littlefs_mount+0x324>)
   1af76:	f00f fbb0 	bl	2a6da <assert_print>
   1af7a:	4854      	ldr	r0, [pc, #336]	; (1b0cc <littlefs_mount+0x340>)
   1af7c:	f00f fbad 	bl	2a6da <assert_print>
   1af80:	f44f 7142 	mov.w	r1, #776	; 0x308
   1af84:	e786      	b.n	1ae94 <littlefs_mount+0x108>
	lcp->context = fs->backend;
   1af86:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1af8a:	6022      	str	r2, [r4, #0]
		__ASSERT((((struct flash_area *)fs->backend)->fa_size %
   1af8c:	6892      	ldr	r2, [r2, #8]
   1af8e:	fbb2 f1f5 	udiv	r1, r2, r5
   1af92:	fb05 2211 	mls	r2, r5, r1, r2
   1af96:	b162      	cbz	r2, 1afb2 <littlefs_mount+0x226>
   1af98:	494d      	ldr	r1, [pc, #308]	; (1b0d0 <littlefs_mount+0x344>)
   1af9a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1af9e:	4a43      	ldr	r2, [pc, #268]	; (1b0ac <littlefs_mount+0x320>)
   1afa0:	4843      	ldr	r0, [pc, #268]	; (1b0b0 <littlefs_mount+0x324>)
   1afa2:	f00f fb9a 	bl	2a6da <assert_print>
   1afa6:	484b      	ldr	r0, [pc, #300]	; (1b0d4 <littlefs_mount+0x348>)
   1afa8:	f00f fb97 	bl	2a6da <assert_print>
   1afac:	f44f 7147 	mov.w	r1, #796	; 0x31c
   1afb0:	e770      	b.n	1ae94 <littlefs_mount+0x108>
		lcp->read_size = read_size;
   1afb2:	68fb      	ldr	r3, [r7, #12]
		lcp->read = lfs_api_read;
   1afb4:	4a48      	ldr	r2, [pc, #288]	; (1b0d8 <littlefs_mount+0x34c>)
		lcp->prog_size = prog_size;
   1afb6:	e9c4 3905 	strd	r3, r9, [r4, #20]
		lcp->read = lfs_api_read;
   1afba:	6062      	str	r2, [r4, #4]
		lcp->sync = lfs_api_sync;
   1afbc:	4b47      	ldr	r3, [pc, #284]	; (1b0dc <littlefs_mount+0x350>)
		lcp->prog = lfs_api_prog;
   1afbe:	4a48      	ldr	r2, [pc, #288]	; (1b0e0 <littlefs_mount+0x354>)
		lcp->sync = lfs_api_sync;
   1afc0:	6123      	str	r3, [r4, #16]
		lcp->prog = lfs_api_prog;
   1afc2:	60a2      	str	r2, [r4, #8]
	lcp->block_count = block_count;
   1afc4:	687b      	ldr	r3, [r7, #4]
		lcp->erase = lfs_api_erase;
   1afc6:	4a47      	ldr	r2, [pc, #284]	; (1b0e4 <littlefs_mount+0x358>)
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1afc8:	f104 0974 	add.w	r9, r4, #116	; 0x74
	lcp->block_size = block_size;
   1afcc:	61e5      	str	r5, [r4, #28]
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1afce:	4621      	mov	r1, r4
   1afd0:	4648      	mov	r0, r9
		lcp->lookahead_size = lookahead_size;
   1afd2:	e9c4 8b0a 	strd	r8, fp, [r4, #40]	; 0x28
	lcp->block_cycles = block_cycles;
   1afd6:	e9c4 3a08 	strd	r3, sl, [r4, #32]
		lcp->erase = lfs_api_erase;
   1afda:	60e2      	str	r2, [r4, #12]
	ret = lfs_mount(&fs->lfs, &fs->cfg);
   1afdc:	f008 f9a2 	bl	23324 <lfs_mount>
	if (ret < 0 &&
   1afe0:	1e05      	subs	r5, r0, #0
   1afe2:	f280 8089 	bge.w	1b0f8 <littlefs_mount+0x36c>
   1afe6:	f896 3020 	ldrb.w	r3, [r6, #32]
   1afea:	07da      	lsls	r2, r3, #31
   1afec:	f100 8084 	bmi.w	1b0f8 <littlefs_mount+0x36c>
		LOG_WRN("can't mount (LFS %d); formatting", ret);
   1aff0:	b088      	sub	sp, #32
   1aff2:	466a      	mov	r2, sp
   1aff4:	f04f 0803 	mov.w	r8, #3
   1aff8:	4b3b      	ldr	r3, [pc, #236]	; (1b0e8 <littlefs_mount+0x35c>)
   1affa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1affe:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1b002:	4824      	ldr	r0, [pc, #144]	; (1b094 <littlefs_mount+0x308>)
   1b004:	f842 8f10 	str.w	r8, [r2, #16]!
   1b008:	f012 fe74 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
   1b00c:	f896 3020 	ldrb.w	r3, [r6, #32]
   1b010:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1b014:	079b      	lsls	r3, r3, #30
   1b016:	d422      	bmi.n	1b05e <littlefs_mount+0x2d2>
			ret = lfs_format(&fs->lfs, &fs->cfg);
   1b018:	4621      	mov	r1, r4
   1b01a:	4648      	mov	r0, r9
   1b01c:	f008 f91e 	bl	2325c <lfs_format>
			if (ret < 0) {
   1b020:	1e05      	subs	r5, r0, #0
   1b022:	da2a      	bge.n	1b07a <littlefs_mount+0x2ee>
				LOG_ERR("format failed (LFS %d)", ret);
   1b024:	b088      	sub	sp, #32
   1b026:	466a      	mov	r2, sp
   1b028:	4b30      	ldr	r3, [pc, #192]	; (1b0ec <littlefs_mount+0x360>)
			LOG_ERR("remount after format failed (LFS %d)", ret);
   1b02a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1b02e:	4819      	ldr	r0, [pc, #100]	; (1b094 <littlefs_mount+0x308>)
   1b030:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b034:	f842 8f10 	str.w	r8, [r2, #16]!
   1b038:	f012 fe5c 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
			ret = lfs_to_errno(ret);
   1b03c:	4628      	mov	r0, r5
   1b03e:	f8d7 d008 	ldr.w	sp, [r7, #8]
   1b042:	f7ff fdaf 	bl	1aba4 <lfs_to_errno>
   1b046:	4605      	mov	r5, r0
	if (ret < 0) {
   1b048:	2d00      	cmp	r5, #0
   1b04a:	f6ff aee6 	blt.w	1ae1a <littlefs_mount+0x8e>
	k_mutex_unlock(&fs->mutex);
   1b04e:	6838      	ldr	r0, [r7, #0]
   1b050:	f012 fe5a 	bl	2dd08 <k_mutex_unlock.isra.0>
}
   1b054:	4628      	mov	r0, r5
   1b056:	372c      	adds	r7, #44	; 0x2c
   1b058:	46bd      	mov	sp, r7
   1b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("can not format read-only system");
   1b05e:	4b24      	ldr	r3, [pc, #144]	; (1b0f0 <littlefs_mount+0x364>)
   1b060:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b064:	627b      	str	r3, [r7, #36]	; 0x24
   1b066:	2302      	movs	r3, #2
   1b068:	480a      	ldr	r0, [pc, #40]	; (1b094 <littlefs_mount+0x308>)
   1b06a:	623b      	str	r3, [r7, #32]
   1b06c:	f107 0220 	add.w	r2, r7, #32
   1b070:	f012 fe40 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
			ret = -EROFS;
   1b074:	f06f 051d 	mvn.w	r5, #29
   1b078:	e6cf      	b.n	1ae1a <littlefs_mount+0x8e>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
   1b07a:	4621      	mov	r1, r4
   1b07c:	4648      	mov	r0, r9
   1b07e:	f008 f951 	bl	23324 <lfs_mount>
		if (ret < 0) {
   1b082:	1e05      	subs	r5, r0, #0
   1b084:	da38      	bge.n	1b0f8 <littlefs_mount+0x36c>
			LOG_ERR("remount after format failed (LFS %d)", ret);
   1b086:	b088      	sub	sp, #32
   1b088:	466a      	mov	r2, sp
   1b08a:	4b1a      	ldr	r3, [pc, #104]	; (1b0f4 <littlefs_mount+0x368>)
   1b08c:	e7cd      	b.n	1b02a <littlefs_mount+0x29e>
   1b08e:	bf00      	nop
   1b090:	00036596 	.word	0x00036596
   1b094:	0003158c 	.word	0x0003158c
   1b098:	000365c1 	.word	0x000365c1
   1b09c:	000365da 	.word	0x000365da
   1b0a0:	01000003 	.word	0x01000003
   1b0a4:	0002dc53 	.word	0x0002dc53
   1b0a8:	00036620 	.word	0x00036620
   1b0ac:	000365f5 	.word	0x000365f5
   1b0b0:	00032679 	.word	0x00032679
   1b0b4:	00036630 	.word	0x00036630
   1b0b8:	01000007 	.word	0x01000007
   1b0bc:	00036663 	.word	0x00036663
   1b0c0:	00036688 	.word	0x00036688
   1b0c4:	000366a6 	.word	0x000366a6
   1b0c8:	000366d2 	.word	0x000366d2
   1b0cc:	000366f1 	.word	0x000366f1
   1b0d0:	0003671b 	.word	0x0003671b
   1b0d4:	0003675b 	.word	0x0003675b
   1b0d8:	0002dcaf 	.word	0x0002dcaf
   1b0dc:	0002dc4f 	.word	0x0002dc4f
   1b0e0:	0002dc93 	.word	0x0002dc93
   1b0e4:	0002dc7f 	.word	0x0002dc7f
   1b0e8:	0003678b 	.word	0x0003678b
   1b0ec:	000367da 	.word	0x000367da
   1b0f0:	000367ac 	.word	0x000367ac
   1b0f4:	000367cc 	.word	0x000367cc
	LOG_INF("%s mounted", mountp->mnt_point);
   1b0f8:	68f3      	ldr	r3, [r6, #12]
   1b0fa:	466e      	mov	r6, sp
   1b0fc:	b088      	sub	sp, #32
   1b0fe:	466a      	mov	r2, sp
   1b100:	4909      	ldr	r1, [pc, #36]	; (1b128 <littlefs_mount+0x39c>)
   1b102:	480a      	ldr	r0, [pc, #40]	; (1b12c <littlefs_mount+0x3a0>)
   1b104:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b108:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b10c:	8393      	strh	r3, [r2, #28]
   1b10e:	4b08      	ldr	r3, [pc, #32]	; (1b130 <littlefs_mount+0x3a4>)
   1b110:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   1b114:	f842 3f10 	str.w	r3, [r2, #16]!
   1b118:	f012 fdec 	bl	2dcf4 <z_log_msg_static_create.constprop.0>
   1b11c:	46b5      	mov	sp, r6
   1b11e:	e793      	b.n	1b048 <littlefs_mount+0x2bc>
		return -EBUSY;
   1b120:	f06f 050f 	mvn.w	r5, #15
   1b124:	e679      	b.n	1ae1a <littlefs_mount+0x8e>
   1b126:	bf00      	nop
   1b128:	000367f1 	.word	0x000367f1
   1b12c:	0003158c 	.word	0x0003158c
   1b130:	01000003 	.word	0x01000003

0001b134 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1b134:	2234      	movs	r2, #52	; 0x34
   1b136:	4b02      	ldr	r3, [pc, #8]	; (1b140 <net_buf_pool_get+0xc>)
   1b138:	fb02 3000 	mla	r0, r2, r0, r3
   1b13c:	4770      	bx	lr
   1b13e:	bf00      	nop
   1b140:	20008cd4 	.word	0x20008cd4

0001b144 <net_buf_id>:
int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b144:	2134      	movs	r1, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b146:	7a82      	ldrb	r2, [r0, #10]
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b148:	4b06      	ldr	r3, [pc, #24]	; (1b164 <net_buf_id+0x20>)
   1b14a:	fb01 3302 	mla	r3, r1, r2, r3
   1b14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b154:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b156:	331b      	adds	r3, #27
   1b158:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b15c:	fbb0 f0f3 	udiv	r0, r0, r3
   1b160:	4770      	bx	lr
   1b162:	bf00      	nop
   1b164:	20008cd4 	.word	0x20008cd4

0001b168 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b168:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b16a:	2434      	movs	r4, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b16c:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b16e:	4b09      	ldr	r3, [pc, #36]	; (1b194 <fixed_data_alloc+0x2c>)
   1b170:	fb04 3302 	mla	r3, r4, r2, r3
   1b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c

	*size = MIN(fixed->data_size, *size);
   1b176:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b178:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b17a:	681a      	ldr	r2, [r3, #0]
   1b17c:	4294      	cmp	r4, r2
   1b17e:	bf94      	ite	ls
   1b180:	600c      	strls	r4, [r1, #0]
   1b182:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b184:	e9d3 5400 	ldrd	r5, r4, [r3]
   1b188:	f7ff ffdc 	bl	1b144 <net_buf_id>
}
   1b18c:	fb05 4000 	mla	r0, r5, r0, r4
   1b190:	bd38      	pop	{r3, r4, r5, pc}
   1b192:	bf00      	nop
   1b194:	20008cd4 	.word	0x20008cd4

0001b198 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b19c:	b085      	sub	sp, #20
   1b19e:	9103      	str	r1, [sp, #12]
   1b1a0:	4605      	mov	r5, r0
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b1a2:	4619      	mov	r1, r3
   1b1a4:	4610      	mov	r0, r2
{
   1b1a6:	4692      	mov	sl, r2
   1b1a8:	4699      	mov	r9, r3
   1b1aa:	4690      	mov	r8, r2
   1b1ac:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b1ae:	f015 f8db 	bl	30368 <sys_clock_timeout_end_calc>
   1b1b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b1b6:	b945      	cbnz	r5, 1b1ca <net_buf_alloc_len+0x32>
   1b1b8:	4966      	ldr	r1, [pc, #408]	; (1b354 <net_buf_alloc_len+0x1bc>)
   1b1ba:	23f4      	movs	r3, #244	; 0xf4
   1b1bc:	4a66      	ldr	r2, [pc, #408]	; (1b358 <net_buf_alloc_len+0x1c0>)
   1b1be:	4867      	ldr	r0, [pc, #412]	; (1b35c <net_buf_alloc_len+0x1c4>)
   1b1c0:	f00f fa8b 	bl	2a6da <assert_print>
   1b1c4:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1b1c6:	4864      	ldr	r0, [pc, #400]	; (1b358 <net_buf_alloc_len+0x1c0>)
   1b1c8:	e019      	b.n	1b1fe <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1b1ca:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1b1ce:	f04f 0320 	mov.w	r3, #32
   1b1d2:	f3ef 8b11 	mrs	fp, BASEPRI
   1b1d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b1da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b1de:	4630      	mov	r0, r6
   1b1e0:	f009 ff4a 	bl	25078 <z_spin_lock_valid>
   1b1e4:	b968      	cbnz	r0, 1b202 <net_buf_alloc_len+0x6a>
   1b1e6:	2394      	movs	r3, #148	; 0x94
   1b1e8:	4a5d      	ldr	r2, [pc, #372]	; (1b360 <net_buf_alloc_len+0x1c8>)
   1b1ea:	495e      	ldr	r1, [pc, #376]	; (1b364 <net_buf_alloc_len+0x1cc>)
   1b1ec:	485b      	ldr	r0, [pc, #364]	; (1b35c <net_buf_alloc_len+0x1c4>)
   1b1ee:	f00f fa74 	bl	2a6da <assert_print>
   1b1f2:	4631      	mov	r1, r6
   1b1f4:	485c      	ldr	r0, [pc, #368]	; (1b368 <net_buf_alloc_len+0x1d0>)
   1b1f6:	f00f fa70 	bl	2a6da <assert_print>
   1b1fa:	2194      	movs	r1, #148	; 0x94
   1b1fc:	4858      	ldr	r0, [pc, #352]	; (1b360 <net_buf_alloc_len+0x1c8>)
   1b1fe:	f00f fa65 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   1b202:	4630      	mov	r0, r6
   1b204:	f009 ff54 	bl	250b0 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1b208:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1b20a:	2b00      	cmp	r3, #0
   1b20c:	d070      	beq.n	1b2f0 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1b20e:	8c2a      	ldrh	r2, [r5, #32]
   1b210:	429a      	cmp	r2, r3
   1b212:	d94d      	bls.n	1b2b0 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1b214:	2200      	movs	r2, #0
   1b216:	2300      	movs	r3, #0
   1b218:	4628      	mov	r0, r5
   1b21a:	f00a f97b 	bl	25514 <z_impl_k_queue_get>
			if (buf) {
   1b21e:	4604      	mov	r4, r0
   1b220:	2800      	cmp	r0, #0
   1b222:	d045      	beq.n	1b2b0 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b224:	4630      	mov	r0, r6
   1b226:	f009 ff35 	bl	25094 <z_spin_unlock_valid>
   1b22a:	b958      	cbnz	r0, 1b244 <net_buf_alloc_len+0xac>
   1b22c:	23c2      	movs	r3, #194	; 0xc2
   1b22e:	4a4c      	ldr	r2, [pc, #304]	; (1b360 <net_buf_alloc_len+0x1c8>)
   1b230:	494e      	ldr	r1, [pc, #312]	; (1b36c <net_buf_alloc_len+0x1d4>)
   1b232:	484a      	ldr	r0, [pc, #296]	; (1b35c <net_buf_alloc_len+0x1c4>)
   1b234:	f00f fa51 	bl	2a6da <assert_print>
   1b238:	4631      	mov	r1, r6
   1b23a:	484d      	ldr	r0, [pc, #308]	; (1b370 <net_buf_alloc_len+0x1d8>)
   1b23c:	f00f fa4d 	bl	2a6da <assert_print>
   1b240:	21c2      	movs	r1, #194	; 0xc2
   1b242:	e7db      	b.n	1b1fc <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1b244:	f38b 8811 	msr	BASEPRI, fp
   1b248:	f3bf 8f6f 	isb	sy
	if (size) {
   1b24c:	9d03      	ldr	r5, [sp, #12]
   1b24e:	2d00      	cmp	r5, #0
   1b250:	d074      	beq.n	1b33c <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b252:	ea59 030a 	orrs.w	r3, r9, sl
   1b256:	d012      	beq.n	1b27e <net_buf_alloc_len+0xe6>
   1b258:	f1b9 3fff 	cmp.w	r9, #4294967295
   1b25c:	bf08      	it	eq
   1b25e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1b262:	d00c      	beq.n	1b27e <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1b264:	f00c fcd6 	bl	27c14 <sys_clock_tick_get>
   1b268:	9b01      	ldr	r3, [sp, #4]
   1b26a:	ebb3 0800 	subs.w	r8, r3, r0
   1b26e:	9b02      	ldr	r3, [sp, #8]
   1b270:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1b274:	2f00      	cmp	r7, #0
   1b276:	bfbc      	itt	lt
   1b278:	f04f 0800 	movlt.w	r8, #0
   1b27c:	4647      	movlt	r7, r8
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b27e:	f04f 0934 	mov.w	r9, #52	; 0x34
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b282:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b284:	4e3b      	ldr	r6, [pc, #236]	; (1b374 <net_buf_alloc_len+0x1dc>)
   1b286:	4642      	mov	r2, r8
   1b288:	fb09 6303 	mla	r3, r9, r3, r6
   1b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b28e:	4620      	mov	r0, r4
   1b290:	681b      	ldr	r3, [r3, #0]
   1b292:	a903      	add	r1, sp, #12
   1b294:	f8d3 a000 	ldr.w	sl, [r3]
   1b298:	463b      	mov	r3, r7
   1b29a:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1b29c:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1b29e:	2800      	cmp	r0, #0
   1b2a0:	d13c      	bne.n	1b31c <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1b2a2:	7aa0      	ldrb	r0, [r4, #10]
   1b2a4:	4621      	mov	r1, r4
   1b2a6:	fb00 6009 	mla	r0, r0, r9, r6
   1b2aa:	f014 ffa4 	bl	301f6 <k_queue_prepend>
}
   1b2ae:	e030      	b.n	1b312 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1b2b0:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1b2b2:	4630      	mov	r0, r6
   1b2b4:	1e63      	subs	r3, r4, #1
   1b2b6:	846b      	strh	r3, [r5, #34]	; 0x22
   1b2b8:	f009 feec 	bl	25094 <z_spin_unlock_valid>
   1b2bc:	2800      	cmp	r0, #0
   1b2be:	d0b5      	beq.n	1b22c <net_buf_alloc_len+0x94>
   1b2c0:	f38b 8811 	msr	BASEPRI, fp
   1b2c4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b2c8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b2cc:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b2ce:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b2d0:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b2d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b2d4:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b2d8:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1b2dc:	4b25      	ldr	r3, [pc, #148]	; (1b374 <net_buf_alloc_len+0x1dc>)
   1b2de:	4a26      	ldr	r2, [pc, #152]	; (1b378 <net_buf_alloc_len+0x1e0>)
   1b2e0:	1aeb      	subs	r3, r5, r3
   1b2e2:	109b      	asrs	r3, r3, #2
   1b2e4:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1b2e6:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1b2e8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b2ec:	72e3      	strb	r3, [r4, #11]
		goto success;
   1b2ee:	e7ad      	b.n	1b24c <net_buf_alloc_len+0xb4>
   1b2f0:	4630      	mov	r0, r6
   1b2f2:	f009 fecf 	bl	25094 <z_spin_unlock_valid>
   1b2f6:	2800      	cmp	r0, #0
   1b2f8:	d098      	beq.n	1b22c <net_buf_alloc_len+0x94>
   1b2fa:	f38b 8811 	msr	BASEPRI, fp
   1b2fe:	f3bf 8f6f 	isb	sy
   1b302:	4652      	mov	r2, sl
   1b304:	464b      	mov	r3, r9
   1b306:	4628      	mov	r0, r5
   1b308:	f00a f904 	bl	25514 <z_impl_k_queue_get>
	if (!buf) {
   1b30c:	4604      	mov	r4, r0
   1b30e:	2800      	cmp	r0, #0
   1b310:	d19c      	bne.n	1b24c <net_buf_alloc_len+0xb4>
		return NULL;
   1b312:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b314:	4620      	mov	r0, r4
   1b316:	b005      	add	sp, #20
   1b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1b31c:	9b03      	ldr	r3, [sp, #12]
   1b31e:	429d      	cmp	r5, r3
   1b320:	d90d      	bls.n	1b33e <net_buf_alloc_len+0x1a6>
   1b322:	4916      	ldr	r1, [pc, #88]	; (1b37c <net_buf_alloc_len+0x1e4>)
   1b324:	f240 1355 	movw	r3, #341	; 0x155
   1b328:	4a0b      	ldr	r2, [pc, #44]	; (1b358 <net_buf_alloc_len+0x1c0>)
   1b32a:	480c      	ldr	r0, [pc, #48]	; (1b35c <net_buf_alloc_len+0x1c4>)
   1b32c:	f00f f9d5 	bl	2a6da <assert_print>
   1b330:	4813      	ldr	r0, [pc, #76]	; (1b380 <net_buf_alloc_len+0x1e8>)
   1b332:	f00f f9d2 	bl	2a6da <assert_print>
   1b336:	f240 1155 	movw	r1, #341	; 0x155
   1b33a:	e744      	b.n	1b1c6 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1b33c:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1b33e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1b340:	2201      	movs	r2, #1
	buf->frags = NULL;
   1b342:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1b344:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1b346:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1b348:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1b34a:	6963      	ldr	r3, [r4, #20]
   1b34c:	8262      	strh	r2, [r4, #18]
   1b34e:	60e3      	str	r3, [r4, #12]
}
   1b350:	e7e0      	b.n	1b314 <net_buf_alloc_len+0x17c>
   1b352:	bf00      	nop
   1b354:	00036900 	.word	0x00036900
   1b358:	000368b1 	.word	0x000368b1
   1b35c:	00032679 	.word	0x00032679
   1b360:	0003341a 	.word	0x0003341a
   1b364:	00033473 	.word	0x00033473
   1b368:	00033488 	.word	0x00033488
   1b36c:	00033447 	.word	0x00033447
   1b370:	0003345e 	.word	0x0003345e
   1b374:	20008cd4 	.word	0x20008cd4
   1b378:	c4ec4ec5 	.word	0xc4ec4ec5
   1b37c:	00036905 	.word	0x00036905
   1b380:	00036916 	.word	0x00036916

0001b384 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1b384:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b386:	b958      	cbnz	r0, 1b3a0 <net_buf_simple_reserve+0x1c>
   1b388:	490d      	ldr	r1, [pc, #52]	; (1b3c0 <net_buf_simple_reserve+0x3c>)
   1b38a:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1b38e:	4a0d      	ldr	r2, [pc, #52]	; (1b3c4 <net_buf_simple_reserve+0x40>)
   1b390:	480d      	ldr	r0, [pc, #52]	; (1b3c8 <net_buf_simple_reserve+0x44>)
   1b392:	f00f f9a2 	bl	2a6da <assert_print>
   1b396:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1b39a:	480a      	ldr	r0, [pc, #40]	; (1b3c4 <net_buf_simple_reserve+0x40>)
   1b39c:	f00f f996 	bl	2a6cc <assert_post_action>
   1b3a0:	8883      	ldrh	r3, [r0, #4]
   1b3a2:	b14b      	cbz	r3, 1b3b8 <net_buf_simple_reserve+0x34>
   1b3a4:	4909      	ldr	r1, [pc, #36]	; (1b3cc <net_buf_simple_reserve+0x48>)
   1b3a6:	f240 13b9 	movw	r3, #441	; 0x1b9
   1b3aa:	4a06      	ldr	r2, [pc, #24]	; (1b3c4 <net_buf_simple_reserve+0x40>)
   1b3ac:	4806      	ldr	r0, [pc, #24]	; (1b3c8 <net_buf_simple_reserve+0x44>)
   1b3ae:	f00f f994 	bl	2a6da <assert_print>
   1b3b2:	f240 11b9 	movw	r1, #441	; 0x1b9
   1b3b6:	e7f0      	b.n	1b39a <net_buf_simple_reserve+0x16>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1b3b8:	6883      	ldr	r3, [r0, #8]
   1b3ba:	440b      	add	r3, r1
   1b3bc:	6003      	str	r3, [r0, #0]
}
   1b3be:	bd08      	pop	{r3, pc}
   1b3c0:	00036995 	.word	0x00036995
   1b3c4:	000368b1 	.word	0x000368b1
   1b3c8:	00032679 	.word	0x00032679
   1b3cc:	00036919 	.word	0x00036919

0001b3d0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1b3d0:	b570      	push	{r4, r5, r6, lr}
   1b3d2:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b3d4:	4605      	mov	r5, r0
   1b3d6:	b958      	cbnz	r0, 1b3f0 <net_buf_slist_put+0x20>
   1b3d8:	4928      	ldr	r1, [pc, #160]	; (1b47c <net_buf_slist_put+0xac>)
   1b3da:	f240 13c5 	movw	r3, #453	; 0x1c5
   1b3de:	4a28      	ldr	r2, [pc, #160]	; (1b480 <net_buf_slist_put+0xb0>)
   1b3e0:	4828      	ldr	r0, [pc, #160]	; (1b484 <net_buf_slist_put+0xb4>)
   1b3e2:	f00f f97a 	bl	2a6da <assert_print>
   1b3e6:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1b3ea:	4825      	ldr	r0, [pc, #148]	; (1b480 <net_buf_slist_put+0xb0>)
   1b3ec:	f00f f96e 	bl	2a6cc <assert_post_action>
   1b3f0:	b949      	cbnz	r1, 1b406 <net_buf_slist_put+0x36>
   1b3f2:	4925      	ldr	r1, [pc, #148]	; (1b488 <net_buf_slist_put+0xb8>)
   1b3f4:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   1b3f8:	4a21      	ldr	r2, [pc, #132]	; (1b480 <net_buf_slist_put+0xb0>)
   1b3fa:	4822      	ldr	r0, [pc, #136]	; (1b484 <net_buf_slist_put+0xb4>)
   1b3fc:	f00f f96d 	bl	2a6da <assert_print>
   1b400:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1b404:	e7f1      	b.n	1b3ea <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1b406:	f04f 0320 	mov.w	r3, #32
   1b40a:	f3ef 8611 	mrs	r6, BASEPRI
   1b40e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b412:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b416:	481d      	ldr	r0, [pc, #116]	; (1b48c <net_buf_slist_put+0xbc>)
   1b418:	f009 fe2e 	bl	25078 <z_spin_lock_valid>
   1b41c:	b960      	cbnz	r0, 1b438 <net_buf_slist_put+0x68>
   1b41e:	2394      	movs	r3, #148	; 0x94
   1b420:	4a1b      	ldr	r2, [pc, #108]	; (1b490 <net_buf_slist_put+0xc0>)
   1b422:	491c      	ldr	r1, [pc, #112]	; (1b494 <net_buf_slist_put+0xc4>)
   1b424:	4817      	ldr	r0, [pc, #92]	; (1b484 <net_buf_slist_put+0xb4>)
   1b426:	f00f f958 	bl	2a6da <assert_print>
   1b42a:	4918      	ldr	r1, [pc, #96]	; (1b48c <net_buf_slist_put+0xbc>)
   1b42c:	481a      	ldr	r0, [pc, #104]	; (1b498 <net_buf_slist_put+0xc8>)
   1b42e:	f00f f954 	bl	2a6da <assert_print>
   1b432:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b434:	4816      	ldr	r0, [pc, #88]	; (1b490 <net_buf_slist_put+0xc0>)
   1b436:	e7d9      	b.n	1b3ec <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1b438:	4814      	ldr	r0, [pc, #80]	; (1b48c <net_buf_slist_put+0xbc>)
   1b43a:	f009 fe39 	bl	250b0 <z_spin_lock_set_owner>
	parent->next = child;
   1b43e:	2300      	movs	r3, #0
   1b440:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b442:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1b444:	b98b      	cbnz	r3, 1b46a <net_buf_slist_put+0x9a>
	list->head = node;
   1b446:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b44a:	4810      	ldr	r0, [pc, #64]	; (1b48c <net_buf_slist_put+0xbc>)
   1b44c:	f009 fe22 	bl	25094 <z_spin_unlock_valid>
   1b450:	b970      	cbnz	r0, 1b470 <net_buf_slist_put+0xa0>
   1b452:	23c2      	movs	r3, #194	; 0xc2
   1b454:	4a0e      	ldr	r2, [pc, #56]	; (1b490 <net_buf_slist_put+0xc0>)
   1b456:	4911      	ldr	r1, [pc, #68]	; (1b49c <net_buf_slist_put+0xcc>)
   1b458:	480a      	ldr	r0, [pc, #40]	; (1b484 <net_buf_slist_put+0xb4>)
   1b45a:	f00f f93e 	bl	2a6da <assert_print>
   1b45e:	490b      	ldr	r1, [pc, #44]	; (1b48c <net_buf_slist_put+0xbc>)
   1b460:	480f      	ldr	r0, [pc, #60]	; (1b4a0 <net_buf_slist_put+0xd0>)
   1b462:	f00f f93a 	bl	2a6da <assert_print>
   1b466:	21c2      	movs	r1, #194	; 0xc2
   1b468:	e7e4      	b.n	1b434 <net_buf_slist_put+0x64>
	parent->next = child;
   1b46a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b46c:	606c      	str	r4, [r5, #4]
}
   1b46e:	e7ec      	b.n	1b44a <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1b470:	f386 8811 	msr	BASEPRI, r6
   1b474:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1b478:	bd70      	pop	{r4, r5, r6, pc}
   1b47a:	bf00      	nop
   1b47c:	00034f7b 	.word	0x00034f7b
   1b480:	000368b1 	.word	0x000368b1
   1b484:	00032679 	.word	0x00032679
   1b488:	00036995 	.word	0x00036995
   1b48c:	200217b4 	.word	0x200217b4
   1b490:	0003341a 	.word	0x0003341a
   1b494:	00033473 	.word	0x00033473
   1b498:	00033488 	.word	0x00033488
   1b49c:	00033447 	.word	0x00033447
   1b4a0:	0003345e 	.word	0x0003345e

0001b4a4 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1b4a4:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1b4a6:	4604      	mov	r4, r0
   1b4a8:	b958      	cbnz	r0, 1b4c2 <net_buf_slist_get+0x1e>
   1b4aa:	4923      	ldr	r1, [pc, #140]	; (1b538 <net_buf_slist_get+0x94>)
   1b4ac:	4823      	ldr	r0, [pc, #140]	; (1b53c <net_buf_slist_get+0x98>)
   1b4ae:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1b4b2:	4a23      	ldr	r2, [pc, #140]	; (1b540 <net_buf_slist_get+0x9c>)
   1b4b4:	f00f f911 	bl	2a6da <assert_print>
   1b4b8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1b4bc:	4820      	ldr	r0, [pc, #128]	; (1b540 <net_buf_slist_get+0x9c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b4be:	f00f f905 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   1b4c2:	f04f 0320 	mov.w	r3, #32
   1b4c6:	f3ef 8611 	mrs	r6, BASEPRI
   1b4ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1b4ce:	f3bf 8f6f 	isb	sy
   1b4d2:	481c      	ldr	r0, [pc, #112]	; (1b544 <net_buf_slist_get+0xa0>)
   1b4d4:	f009 fdd0 	bl	25078 <z_spin_lock_valid>
   1b4d8:	b960      	cbnz	r0, 1b4f4 <net_buf_slist_get+0x50>
   1b4da:	2394      	movs	r3, #148	; 0x94
   1b4dc:	4a1a      	ldr	r2, [pc, #104]	; (1b548 <net_buf_slist_get+0xa4>)
   1b4de:	491b      	ldr	r1, [pc, #108]	; (1b54c <net_buf_slist_get+0xa8>)
   1b4e0:	4816      	ldr	r0, [pc, #88]	; (1b53c <net_buf_slist_get+0x98>)
   1b4e2:	f00f f8fa 	bl	2a6da <assert_print>
   1b4e6:	4917      	ldr	r1, [pc, #92]	; (1b544 <net_buf_slist_get+0xa0>)
   1b4e8:	4819      	ldr	r0, [pc, #100]	; (1b550 <net_buf_slist_get+0xac>)
   1b4ea:	f00f f8f6 	bl	2a6da <assert_print>
   1b4ee:	2194      	movs	r1, #148	; 0x94
   1b4f0:	4815      	ldr	r0, [pc, #84]	; (1b548 <net_buf_slist_get+0xa4>)
   1b4f2:	e7e4      	b.n	1b4be <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1b4f4:	4813      	ldr	r0, [pc, #76]	; (1b544 <net_buf_slist_get+0xa0>)
   1b4f6:	f009 fddb 	bl	250b0 <z_spin_lock_set_owner>
	return list->head;
   1b4fa:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1b4fc:	b12d      	cbz	r5, 1b50a <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4fe:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1b500:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b502:	4295      	cmp	r5, r2
	list->head = node;
   1b504:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1b506:	bf08      	it	eq
   1b508:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b50a:	480e      	ldr	r0, [pc, #56]	; (1b544 <net_buf_slist_get+0xa0>)
   1b50c:	f009 fdc2 	bl	25094 <z_spin_unlock_valid>
   1b510:	b958      	cbnz	r0, 1b52a <net_buf_slist_get+0x86>
   1b512:	23c2      	movs	r3, #194	; 0xc2
   1b514:	4a0c      	ldr	r2, [pc, #48]	; (1b548 <net_buf_slist_get+0xa4>)
   1b516:	490f      	ldr	r1, [pc, #60]	; (1b554 <net_buf_slist_get+0xb0>)
   1b518:	4808      	ldr	r0, [pc, #32]	; (1b53c <net_buf_slist_get+0x98>)
   1b51a:	f00f f8de 	bl	2a6da <assert_print>
   1b51e:	4909      	ldr	r1, [pc, #36]	; (1b544 <net_buf_slist_get+0xa0>)
   1b520:	480d      	ldr	r0, [pc, #52]	; (1b558 <net_buf_slist_get+0xb4>)
   1b522:	f00f f8da 	bl	2a6da <assert_print>
   1b526:	21c2      	movs	r1, #194	; 0xc2
   1b528:	e7e2      	b.n	1b4f0 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1b52a:	f386 8811 	msr	BASEPRI, r6
   1b52e:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1b532:	4628      	mov	r0, r5
   1b534:	bd70      	pop	{r4, r5, r6, pc}
   1b536:	bf00      	nop
   1b538:	00034f7b 	.word	0x00034f7b
   1b53c:	00032679 	.word	0x00032679
   1b540:	000368b1 	.word	0x000368b1
   1b544:	200217b4 	.word	0x200217b4
   1b548:	0003341a 	.word	0x0003341a
   1b54c:	00033473 	.word	0x00033473
   1b550:	00033488 	.word	0x00033488
   1b554:	00033447 	.word	0x00033447
   1b558:	0003345e 	.word	0x0003345e

0001b55c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1b55c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1b55e:	b958      	cbnz	r0, 1b578 <net_buf_put+0x1c>
   1b560:	490d      	ldr	r1, [pc, #52]	; (1b598 <net_buf_put+0x3c>)
   1b562:	f240 13df 	movw	r3, #479	; 0x1df
   1b566:	4a0d      	ldr	r2, [pc, #52]	; (1b59c <net_buf_put+0x40>)
   1b568:	480d      	ldr	r0, [pc, #52]	; (1b5a0 <net_buf_put+0x44>)
   1b56a:	f00f f8b6 	bl	2a6da <assert_print>
   1b56e:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1b572:	480a      	ldr	r0, [pc, #40]	; (1b59c <net_buf_put+0x40>)
   1b574:	f00f f8aa 	bl	2a6cc <assert_post_action>
   1b578:	b949      	cbnz	r1, 1b58e <net_buf_put+0x32>
   1b57a:	490a      	ldr	r1, [pc, #40]	; (1b5a4 <net_buf_put+0x48>)
   1b57c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1b580:	4a06      	ldr	r2, [pc, #24]	; (1b59c <net_buf_put+0x40>)
   1b582:	4807      	ldr	r0, [pc, #28]	; (1b5a0 <net_buf_put+0x44>)
   1b584:	f00f f8a9 	bl	2a6da <assert_print>
   1b588:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1b58c:	e7f1      	b.n	1b572 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1b58e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1b592:	f014 be25 	b.w	301e0 <k_queue_append>
   1b596:	bf00      	nop
   1b598:	00036928 	.word	0x00036928
   1b59c:	000368b1 	.word	0x000368b1
   1b5a0:	00032679 	.word	0x00032679
   1b5a4:	00036995 	.word	0x00036995

0001b5a8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1b5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1b5ac:	4605      	mov	r5, r0
   1b5ae:	b328      	cbz	r0, 1b5fc <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1b5b0:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1b5b2:	f04f 0834 	mov.w	r8, #52	; 0x34
   1b5b6:	4e1a      	ldr	r6, [pc, #104]	; (1b620 <net_buf_unref+0x78>)
		struct net_buf *frags = buf->frags;
   1b5b8:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1b5ba:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1b5bc:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1b5be:	3b01      	subs	r3, #1
   1b5c0:	b2db      	uxtb	r3, r3
   1b5c2:	7223      	strb	r3, [r4, #8]
   1b5c4:	b9c3      	cbnz	r3, 1b5f8 <net_buf_unref+0x50>
		if (buf->__buf) {
   1b5c6:	6961      	ldr	r1, [r4, #20]
   1b5c8:	b159      	cbz	r1, 1b5e2 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1b5ca:	7a63      	ldrb	r3, [r4, #9]
   1b5cc:	07db      	lsls	r3, r3, #31
   1b5ce:	d407      	bmi.n	1b5e0 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b5d0:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	fb08 6303 	mla	r3, r8, r3, r6
   1b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b5da:	681b      	ldr	r3, [r3, #0]
   1b5dc:	689b      	ldr	r3, [r3, #8]
   1b5de:	4798      	blx	r3
			buf->__buf = NULL;
   1b5e0:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1b5e2:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1b5e4:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1b5e6:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1b5ea:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1b5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b5ee:	b18b      	cbz	r3, 1b614 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1b5f0:	4620      	mov	r0, r4
   1b5f2:	4798      	blx	r3
	while (buf) {
   1b5f4:	2d00      	cmp	r5, #0
   1b5f6:	d1df      	bne.n	1b5b8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1b5fc:	4909      	ldr	r1, [pc, #36]	; (1b624 <net_buf_unref+0x7c>)
   1b5fe:	480a      	ldr	r0, [pc, #40]	; (1b628 <net_buf_unref+0x80>)
   1b600:	f240 13eb 	movw	r3, #491	; 0x1eb
   1b604:	4a09      	ldr	r2, [pc, #36]	; (1b62c <net_buf_unref+0x84>)
   1b606:	f00f f868 	bl	2a6da <assert_print>
   1b60a:	f240 11eb 	movw	r1, #491	; 0x1eb
   1b60e:	4807      	ldr	r0, [pc, #28]	; (1b62c <net_buf_unref+0x84>)
   1b610:	f00f f85c 	bl	2a6cc <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1b614:	4621      	mov	r1, r4
   1b616:	fb00 6008 	mla	r0, r0, r8, r6
   1b61a:	f014 fdec 	bl	301f6 <k_queue_prepend>
}
   1b61e:	e7e9      	b.n	1b5f4 <net_buf_unref+0x4c>
   1b620:	20008cd4 	.word	0x20008cd4
   1b624:	00036995 	.word	0x00036995
   1b628:	00032679 	.word	0x00032679
   1b62c:	000368b1 	.word	0x000368b1

0001b630 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1b630:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b632:	b958      	cbnz	r0, 1b64c <net_buf_ref+0x1c>
   1b634:	4907      	ldr	r1, [pc, #28]	; (1b654 <net_buf_ref+0x24>)
   1b636:	4808      	ldr	r0, [pc, #32]	; (1b658 <net_buf_ref+0x28>)
   1b638:	f240 231a 	movw	r3, #538	; 0x21a
   1b63c:	4a07      	ldr	r2, [pc, #28]	; (1b65c <net_buf_ref+0x2c>)
   1b63e:	f00f f84c 	bl	2a6da <assert_print>
   1b642:	f240 211a 	movw	r1, #538	; 0x21a
   1b646:	4805      	ldr	r0, [pc, #20]	; (1b65c <net_buf_ref+0x2c>)
   1b648:	f00f f840 	bl	2a6cc <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1b64c:	7a02      	ldrb	r2, [r0, #8]
   1b64e:	3201      	adds	r2, #1
   1b650:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1b652:	bd08      	pop	{r3, pc}
   1b654:	00036995 	.word	0x00036995
   1b658:	00032679 	.word	0x00032679
   1b65c:	000368b1 	.word	0x000368b1

0001b660 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1b660:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1b662:	4603      	mov	r3, r0
   1b664:	b958      	cbnz	r0, 1b67e <net_buf_frag_last+0x1e>
   1b666:	4908      	ldr	r1, [pc, #32]	; (1b688 <net_buf_frag_last+0x28>)
   1b668:	4808      	ldr	r0, [pc, #32]	; (1b68c <net_buf_frag_last+0x2c>)
   1b66a:	f240 2357 	movw	r3, #599	; 0x257
   1b66e:	4a08      	ldr	r2, [pc, #32]	; (1b690 <net_buf_frag_last+0x30>)
   1b670:	f00f f833 	bl	2a6da <assert_print>
   1b674:	f240 2157 	movw	r1, #599	; 0x257
   1b678:	4805      	ldr	r0, [pc, #20]	; (1b690 <net_buf_frag_last+0x30>)
   1b67a:	f00f f827 	bl	2a6cc <assert_post_action>

	while (buf->frags) {
   1b67e:	4618      	mov	r0, r3
   1b680:	685b      	ldr	r3, [r3, #4]
   1b682:	2b00      	cmp	r3, #0
   1b684:	d1fb      	bne.n	1b67e <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1b686:	bd08      	pop	{r3, pc}
   1b688:	00036995 	.word	0x00036995
   1b68c:	00032679 	.word	0x00032679
   1b690:	000368b1 	.word	0x000368b1

0001b694 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1b694:	b570      	push	{r4, r5, r6, lr}
   1b696:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1b698:	4604      	mov	r4, r0
   1b69a:	b958      	cbnz	r0, 1b6b4 <net_buf_frag_insert+0x20>
   1b69c:	490f      	ldr	r1, [pc, #60]	; (1b6dc <net_buf_frag_insert+0x48>)
   1b69e:	f240 2362 	movw	r3, #610	; 0x262
   1b6a2:	4a0f      	ldr	r2, [pc, #60]	; (1b6e0 <net_buf_frag_insert+0x4c>)
   1b6a4:	480f      	ldr	r0, [pc, #60]	; (1b6e4 <net_buf_frag_insert+0x50>)
   1b6a6:	f00f f818 	bl	2a6da <assert_print>
   1b6aa:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1b6ae:	480c      	ldr	r0, [pc, #48]	; (1b6e0 <net_buf_frag_insert+0x4c>)
   1b6b0:	f00f f80c 	bl	2a6cc <assert_post_action>
   1b6b4:	b949      	cbnz	r1, 1b6ca <net_buf_frag_insert+0x36>
   1b6b6:	490c      	ldr	r1, [pc, #48]	; (1b6e8 <net_buf_frag_insert+0x54>)
   1b6b8:	f240 2363 	movw	r3, #611	; 0x263
   1b6bc:	4a08      	ldr	r2, [pc, #32]	; (1b6e0 <net_buf_frag_insert+0x4c>)
   1b6be:	4809      	ldr	r0, [pc, #36]	; (1b6e4 <net_buf_frag_insert+0x50>)
   1b6c0:	f00f f80b 	bl	2a6da <assert_print>
   1b6c4:	f240 2163 	movw	r1, #611	; 0x263
   1b6c8:	e7f1      	b.n	1b6ae <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1b6ca:	6846      	ldr	r6, [r0, #4]
   1b6cc:	b11e      	cbz	r6, 1b6d6 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1b6ce:	4608      	mov	r0, r1
   1b6d0:	f7ff ffc6 	bl	1b660 <net_buf_frag_last>
   1b6d4:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1b6d6:	6065      	str	r5, [r4, #4]
}
   1b6d8:	bd70      	pop	{r4, r5, r6, pc}
   1b6da:	bf00      	nop
   1b6dc:	0003692d 	.word	0x0003692d
   1b6e0:	000368b1 	.word	0x000368b1
   1b6e4:	00032679 	.word	0x00032679
   1b6e8:	00036934 	.word	0x00036934

0001b6ec <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1b6ec:	b538      	push	{r3, r4, r5, lr}
   1b6ee:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1b6f0:	460c      	mov	r4, r1
   1b6f2:	b959      	cbnz	r1, 1b70c <net_buf_frag_add+0x20>
   1b6f4:	490c      	ldr	r1, [pc, #48]	; (1b728 <net_buf_frag_add+0x3c>)
   1b6f6:	480d      	ldr	r0, [pc, #52]	; (1b72c <net_buf_frag_add+0x40>)
   1b6f8:	f240 236e 	movw	r3, #622	; 0x26e
   1b6fc:	4a0c      	ldr	r2, [pc, #48]	; (1b730 <net_buf_frag_add+0x44>)
   1b6fe:	f00e ffec 	bl	2a6da <assert_print>
   1b702:	f240 216e 	movw	r1, #622	; 0x26e
   1b706:	480a      	ldr	r0, [pc, #40]	; (1b730 <net_buf_frag_add+0x44>)
   1b708:	f00e ffe0 	bl	2a6cc <assert_post_action>

	if (!head) {
   1b70c:	b920      	cbnz	r0, 1b718 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1b70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1b712:	4608      	mov	r0, r1
   1b714:	f7ff bf8c 	b.w	1b630 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1b718:	f7ff ffa2 	bl	1b660 <net_buf_frag_last>
   1b71c:	4621      	mov	r1, r4
   1b71e:	f7ff ffb9 	bl	1b694 <net_buf_frag_insert>
}
   1b722:	4628      	mov	r0, r5
   1b724:	bd38      	pop	{r3, r4, r5, pc}
   1b726:	bf00      	nop
   1b728:	00036934 	.word	0x00036934
   1b72c:	00032679 	.word	0x00032679
   1b730:	000368b1 	.word	0x000368b1

0001b734 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1b734:	b508      	push	{r3, lr}
   1b736:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1b738:	6800      	ldr	r0, [r0, #0]
   1b73a:	689a      	ldr	r2, [r3, #8]
   1b73c:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1b73e:	4291      	cmp	r1, r2
   1b740:	d90b      	bls.n	1b75a <net_buf_simple_push+0x26>
   1b742:	4909      	ldr	r1, [pc, #36]	; (1b768 <net_buf_simple_push+0x34>)
   1b744:	4809      	ldr	r0, [pc, #36]	; (1b76c <net_buf_simple_push+0x38>)
   1b746:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1b74a:	4a09      	ldr	r2, [pc, #36]	; (1b770 <net_buf_simple_push+0x3c>)
   1b74c:	f00e ffc5 	bl	2a6da <assert_print>
   1b750:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1b754:	4806      	ldr	r0, [pc, #24]	; (1b770 <net_buf_simple_push+0x3c>)
   1b756:	f00e ffb9 	bl	2a6cc <assert_post_action>
	buf->len += len;
   1b75a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1b75c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1b75e:	4411      	add	r1, r2
	buf->data -= len;
   1b760:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1b762:	8099      	strh	r1, [r3, #4]
}
   1b764:	bd08      	pop	{r3, pc}
   1b766:	bf00      	nop
   1b768:	00036949 	.word	0x00036949
   1b76c:	00032679 	.word	0x00032679
   1b770:	000368b1 	.word	0x000368b1

0001b774 <net_buf_simple_pull>:
{
   1b774:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1b776:	8882      	ldrh	r2, [r0, #4]
{
   1b778:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b77a:	428a      	cmp	r2, r1
   1b77c:	d20b      	bcs.n	1b796 <net_buf_simple_pull+0x22>
   1b77e:	4909      	ldr	r1, [pc, #36]	; (1b7a4 <net_buf_simple_pull+0x30>)
   1b780:	4809      	ldr	r0, [pc, #36]	; (1b7a8 <net_buf_simple_pull+0x34>)
   1b782:	f240 4352 	movw	r3, #1106	; 0x452
   1b786:	4a09      	ldr	r2, [pc, #36]	; (1b7ac <net_buf_simple_pull+0x38>)
   1b788:	f00e ffa7 	bl	2a6da <assert_print>
   1b78c:	f240 4152 	movw	r1, #1106	; 0x452
   1b790:	4806      	ldr	r0, [pc, #24]	; (1b7ac <net_buf_simple_pull+0x38>)
   1b792:	f00e ff9b 	bl	2a6cc <assert_post_action>
	buf->len -= len;
   1b796:	1a52      	subs	r2, r2, r1
   1b798:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1b79a:	6800      	ldr	r0, [r0, #0]
   1b79c:	4408      	add	r0, r1
   1b79e:	6018      	str	r0, [r3, #0]
}
   1b7a0:	bd08      	pop	{r3, pc}
   1b7a2:	bf00      	nop
   1b7a4:	00036939 	.word	0x00036939
   1b7a8:	00032679 	.word	0x00032679
   1b7ac:	000368b1 	.word	0x000368b1

0001b7b0 <net_buf_simple_pull_mem>:
{
   1b7b0:	b508      	push	{r3, lr}
   1b7b2:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1b7b4:	889a      	ldrh	r2, [r3, #4]
	void *data = buf->data;
   1b7b6:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1b7b8:	428a      	cmp	r2, r1
   1b7ba:	d20b      	bcs.n	1b7d4 <net_buf_simple_pull_mem+0x24>
   1b7bc:	4908      	ldr	r1, [pc, #32]	; (1b7e0 <net_buf_simple_pull_mem+0x30>)
   1b7be:	4809      	ldr	r0, [pc, #36]	; (1b7e4 <net_buf_simple_pull_mem+0x34>)
   1b7c0:	f240 435e 	movw	r3, #1118	; 0x45e
   1b7c4:	4a08      	ldr	r2, [pc, #32]	; (1b7e8 <net_buf_simple_pull_mem+0x38>)
   1b7c6:	f00e ff88 	bl	2a6da <assert_print>
   1b7ca:	f240 415e 	movw	r1, #1118	; 0x45e
   1b7ce:	4806      	ldr	r0, [pc, #24]	; (1b7e8 <net_buf_simple_pull_mem+0x38>)
   1b7d0:	f00e ff7c 	bl	2a6cc <assert_post_action>
	buf->len -= len;
   1b7d4:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1b7d6:	4401      	add	r1, r0
	buf->len -= len;
   1b7d8:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1b7da:	6019      	str	r1, [r3, #0]
}
   1b7dc:	bd08      	pop	{r3, pc}
   1b7de:	bf00      	nop
   1b7e0:	00036939 	.word	0x00036939
   1b7e4:	00032679 	.word	0x00032679
   1b7e8:	000368b1 	.word	0x000368b1

0001b7ec <net_buf_simple_add>:
{
   1b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1b7ee:	8885      	ldrh	r5, [r0, #4]
   1b7f0:	6803      	ldr	r3, [r0, #0]
   1b7f2:	460e      	mov	r6, r1
   1b7f4:	4604      	mov	r4, r0
   1b7f6:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1b7f8:	f012 fc15 	bl	2e026 <net_buf_simple_tailroom>
   1b7fc:	42b0      	cmp	r0, r6
   1b7fe:	d20b      	bcs.n	1b818 <net_buf_simple_add+0x2c>
   1b800:	4907      	ldr	r1, [pc, #28]	; (1b820 <net_buf_simple_add+0x34>)
   1b802:	4808      	ldr	r0, [pc, #32]	; (1b824 <net_buf_simple_add+0x38>)
   1b804:	f240 3303 	movw	r3, #771	; 0x303
   1b808:	4a07      	ldr	r2, [pc, #28]	; (1b828 <net_buf_simple_add+0x3c>)
   1b80a:	f00e ff66 	bl	2a6da <assert_print>
   1b80e:	f240 3103 	movw	r1, #771	; 0x303
   1b812:	4805      	ldr	r0, [pc, #20]	; (1b828 <net_buf_simple_add+0x3c>)
   1b814:	f00e ff5a 	bl	2a6cc <assert_post_action>
	buf->len += len;
   1b818:	4435      	add	r5, r6
   1b81a:	80a5      	strh	r5, [r4, #4]
}
   1b81c:	4638      	mov	r0, r7
   1b81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b820:	0003696d 	.word	0x0003696d
   1b824:	00032679 	.word	0x00032679
   1b828:	000368b1 	.word	0x000368b1

0001b82c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1b82c:	b508      	push	{r3, lr}
   1b82e:	4804      	ldr	r0, [pc, #16]	; (1b840 <xoshiro128_initialize+0x14>)
   1b830:	f014 fc63 	bl	300fa <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1b834:	2800      	cmp	r0, #0
}
   1b836:	bf0c      	ite	eq
   1b838:	f06f 0012 	mvneq.w	r0, #18
   1b83c:	2000      	movne	r0, #0
   1b83e:	bd08      	pop	{r3, pc}
   1b840:	00030f9c 	.word	0x00030f9c

0001b844 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1b844:	2813      	cmp	r0, #19
   1b846:	d80e      	bhi.n	1b866 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1b848:	4a08      	ldr	r2, [pc, #32]	; (1b86c <adc_gain_invert+0x28>)
   1b84a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1b84e:	b153      	cbz	r3, 1b866 <adc_gain_invert+0x22>
   1b850:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1b854:	7852      	ldrb	r2, [r2, #1]
   1b856:	b132      	cbz	r2, 1b866 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1b858:	6808      	ldr	r0, [r1, #0]
   1b85a:	4343      	muls	r3, r0
   1b85c:	fb93 f3f2 	sdiv	r3, r3, r2
			rv = 0;
   1b860:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1b862:	600b      	str	r3, [r1, #0]
			rv = 0;
   1b864:	4770      	bx	lr
	int rv = -EINVAL;
   1b866:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1b86a:	4770      	bx	lr
   1b86c:	00036999 	.word	0x00036999

0001b870 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1b870:	2201      	movs	r2, #1
   1b872:	4b05      	ldr	r3, [pc, #20]	; (1b888 <adc_context_start_sampling+0x18>)
   1b874:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1b878:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1b87c:	b109      	cbz	r1, 1b882 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b87e:	60da      	str	r2, [r3, #12]
}
   1b880:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b882:	601a      	str	r2, [r3, #0]
   1b884:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1b886:	4770      	bx	lr
   1b888:	4000e000 	.word	0x4000e000

0001b88c <adc_nrfx_channel_setup>:
{
   1b88c:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1b88e:	7908      	ldrb	r0, [r1, #4]
{
   1b890:	b086      	sub	sp, #24
	uint8_t channel_id = channel_cfg->channel_id;
   1b892:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1b896:	2c07      	cmp	r4, #7
   1b898:	d823      	bhi.n	1b8e2 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->gain) {
   1b89a:	780b      	ldrb	r3, [r1, #0]
   1b89c:	2b0b      	cmp	r3, #11
   1b89e:	d815      	bhi.n	1b8cc <adc_nrfx_channel_setup+0x40>
   1b8a0:	e8df f003 	tbb	[pc, r3]
   1b8a4:	07070707 	.word	0x07070707
   1b8a8:	14140614 	.word	0x14140614
   1b8ac:	1214100e 	.word	0x1214100e
		config.gain = NRF_SAADC_GAIN1_2;
   1b8b0:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1b8b2:	784a      	ldrb	r2, [r1, #1]
   1b8b4:	2a03      	cmp	r2, #3
   1b8b6:	d018      	beq.n	1b8ea <adc_nrfx_channel_setup+0x5e>
   1b8b8:	2a04      	cmp	r2, #4
   1b8ba:	d028      	beq.n	1b90e <adc_nrfx_channel_setup+0x82>
		LOG_ERR("Selected ADC reference is not valid");
   1b8bc:	4b31      	ldr	r3, [pc, #196]	; (1b984 <adc_nrfx_channel_setup+0xf8>)
   1b8be:	e006      	b.n	1b8ce <adc_nrfx_channel_setup+0x42>
		config.gain = NRF_SAADC_GAIN1;
   1b8c0:	2305      	movs	r3, #5
		break;
   1b8c2:	e7f6      	b.n	1b8b2 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1b8c4:	2306      	movs	r3, #6
		break;
   1b8c6:	e7f4      	b.n	1b8b2 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   1b8c8:	2307      	movs	r3, #7
		break;
   1b8ca:	e7f2      	b.n	1b8b2 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   1b8cc:	4b2e      	ldr	r3, [pc, #184]	; (1b988 <adc_nrfx_channel_setup+0xfc>)
   1b8ce:	9305      	str	r3, [sp, #20]
   1b8d0:	2302      	movs	r3, #2
   1b8d2:	9304      	str	r3, [sp, #16]
   1b8d4:	2300      	movs	r3, #0
   1b8d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8da:	482c      	ldr	r0, [pc, #176]	; (1b98c <adc_nrfx_channel_setup+0x100>)
   1b8dc:	aa04      	add	r2, sp, #16
   1b8de:	f7f2 ffe7 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1b8e2:	f06f 0015 	mvn.w	r0, #21
}
   1b8e6:	b006      	add	sp, #24
   1b8e8:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
   1b8ea:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1b8ec:	f244 060a 	movw	r6, #16394	; 0x400a
   1b8f0:	884a      	ldrh	r2, [r1, #2]
   1b8f2:	42b2      	cmp	r2, r6
   1b8f4:	d03f      	beq.n	1b976 <adc_nrfx_channel_setup+0xea>
   1b8f6:	d80c      	bhi.n	1b912 <adc_nrfx_channel_setup+0x86>
   1b8f8:	f244 0603 	movw	r6, #16387	; 0x4003
   1b8fc:	42b2      	cmp	r2, r6
   1b8fe:	d016      	beq.n	1b92e <adc_nrfx_channel_setup+0xa2>
   1b900:	f244 0605 	movw	r6, #16389	; 0x4005
   1b904:	42b2      	cmp	r2, r6
   1b906:	d034      	beq.n	1b972 <adc_nrfx_channel_setup+0xe6>
   1b908:	b3aa      	cbz	r2, 1b976 <adc_nrfx_channel_setup+0xea>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1b90a:	4b21      	ldr	r3, [pc, #132]	; (1b990 <adc_nrfx_channel_setup+0x104>)
   1b90c:	e7df      	b.n	1b8ce <adc_nrfx_channel_setup+0x42>
	nrf_saadc_channel_config_t config = {
   1b90e:	2500      	movs	r5, #0
   1b910:	e7ec      	b.n	1b8ec <adc_nrfx_channel_setup+0x60>
	switch (channel_cfg->acquisition_time) {
   1b912:	f244 0614 	movw	r6, #16404	; 0x4014
   1b916:	42b2      	cmp	r2, r6
   1b918:	d02f      	beq.n	1b97a <adc_nrfx_channel_setup+0xee>
   1b91a:	f244 0628 	movw	r6, #16424	; 0x4028
   1b91e:	42b2      	cmp	r2, r6
   1b920:	d02d      	beq.n	1b97e <adc_nrfx_channel_setup+0xf2>
   1b922:	f244 060f 	movw	r6, #16399	; 0x400f
   1b926:	42b2      	cmp	r2, r6
   1b928:	d1ef      	bne.n	1b90a <adc_nrfx_channel_setup+0x7e>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1b92a:	2203      	movs	r2, #3
   1b92c:	e000      	b.n	1b930 <adc_nrfx_channel_setup+0xa4>
	nrf_saadc_channel_config_t config = {
   1b92e:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b930:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1b934:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b936:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    p_reg->CH[channel].PSELP = pselp;
   1b93a:	2000      	movs	r0, #0
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1b93c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1b940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1b944:	0122      	lsls	r2, r4, #4
   1b946:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b94a:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1b94e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1b952:	0123      	lsls	r3, r4, #4
   1b954:	798a      	ldrb	r2, [r1, #6]
   1b956:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b95a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1b95e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1b962:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1b966:	4b0b      	ldr	r3, [pc, #44]	; (1b994 <adc_nrfx_channel_setup+0x108>)
   1b968:	794a      	ldrb	r2, [r1, #5]
   1b96a:	4423      	add	r3, r4
   1b96c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1b970:	e7b9      	b.n	1b8e6 <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
   1b972:	2201      	movs	r2, #1
   1b974:	e7dc      	b.n	1b930 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1b976:	2202      	movs	r2, #2
   1b978:	e7da      	b.n	1b930 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1b97a:	2204      	movs	r2, #4
   1b97c:	e7d8      	b.n	1b930 <adc_nrfx_channel_setup+0xa4>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1b97e:	2205      	movs	r2, #5
   1b980:	e7d6      	b.n	1b930 <adc_nrfx_channel_setup+0xa4>
   1b982:	bf00      	nop
   1b984:	000369e0 	.word	0x000369e0
   1b988:	000369c1 	.word	0x000369c1
   1b98c:	000314c4 	.word	0x000314c4
   1b990:	00036a04 	.word	0x00036a04
   1b994:	20008168 	.word	0x20008168

0001b998 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b99c:	b088      	sub	sp, #32
   1b99e:	460c      	mov	r4, r1
   1b9a0:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   1b9a2:	f04f 33ff 	mov.w	r3, #4294967295
   1b9a6:	f04f 32ff 	mov.w	r2, #4294967295
   1b9aa:	4876      	ldr	r0, [pc, #472]	; (1bb84 <adc_nrfx_read+0x1ec>)
   1b9ac:	f009 fe60 	bl	25670 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1b9b0:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1b9b2:	1e73      	subs	r3, r6, #1
   1b9b4:	2bfe      	cmp	r3, #254	; 0xfe
   1b9b6:	d90c      	bls.n	1b9d2 <adc_nrfx_read+0x3a>
		LOG_ERR("Invalid selection of channels");
   1b9b8:	4b73      	ldr	r3, [pc, #460]	; (1bb88 <adc_nrfx_read+0x1f0>)
		LOG_ERR(
   1b9ba:	617b      	str	r3, [r7, #20]
   1b9bc:	2302      	movs	r3, #2
   1b9be:	613b      	str	r3, [r7, #16]
   1b9c0:	2300      	movs	r3, #0
   1b9c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b9c6:	4871      	ldr	r0, [pc, #452]	; (1bb8c <adc_nrfx_read+0x1f4>)
   1b9c8:	f107 0210 	add.w	r2, r7, #16
   1b9cc:	f7f2 ff70 	bl	e8b0 <z_impl_z_log_msg_static_create>
	if (error) {
   1b9d0:	e01b      	b.n	1ba0a <adc_nrfx_read+0x72>
   1b9d2:	2100      	movs	r1, #0
	active_channels = 0U;
   1b9d4:	460a      	mov	r2, r1
    p_reg->CH[channel].PSELP = pselp;
   1b9d6:	4d6e      	ldr	r5, [pc, #440]	; (1bb90 <adc_nrfx_read+0x1f8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b9d8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 1bb94 <adc_nrfx_read+0x1fc>
		if (selected_channels & BIT(channel_id)) {
   1b9dc:	fa26 f301 	lsr.w	r3, r6, r1
   1b9e0:	f013 0301 	ands.w	r3, r3, #1
   1b9e4:	d040      	beq.n	1ba68 <adc_nrfx_read+0xd0>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1b9e6:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1b9ea:	b9c3      	cbnz	r3, 1ba1e <adc_nrfx_read+0x86>
				LOG_ERR("Channel %u not configured",
   1b9ec:	466c      	mov	r4, sp
   1b9ee:	b088      	sub	sp, #32
   1b9f0:	aa02      	add	r2, sp, #8
   1b9f2:	4869      	ldr	r0, [pc, #420]	; (1bb98 <adc_nrfx_read+0x200>)
   1b9f4:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b9f8:	2103      	movs	r1, #3
   1b9fa:	f842 1f10 	str.w	r1, [r2, #16]!
   1b9fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ba02:	4862      	ldr	r0, [pc, #392]	; (1bb8c <adc_nrfx_read+0x1f4>)
   1ba04:	f7f2 ff54 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1ba08:	46a5      	mov	sp, r4
		return -EINVAL;
   1ba0a:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1ba0e:	485d      	ldr	r0, [pc, #372]	; (1bb84 <adc_nrfx_read+0x1ec>)
   1ba10:	f009 fdea 	bl	255e8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1ba14:	4620      	mov	r0, r4
   1ba16:	3718      	adds	r7, #24
   1ba18:	46bd      	mov	sp, r7
   1ba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1ba1e:	f894 e011 	ldrb.w	lr, [r4, #17]

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1ba22:	eb05 1801 	add.w	r8, r5, r1, lsl #4
   1ba26:	f1be 0e00 	subs.w	lr, lr, #0
   1ba2a:	bf18      	it	ne
   1ba2c:	f04f 0e01 	movne.w	lr, #1
   1ba30:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
			++active_channels;
   1ba34:	3201      	adds	r2, #1
   1ba36:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   1ba3a:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   1ba3e:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1ba42:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1ba46:	0100      	lsls	r0, r0, #4
   1ba48:	502b      	str	r3, [r5, r0]
   1ba4a:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   1ba4c:	3101      	adds	r1, #1
   1ba4e:	2908      	cmp	r1, #8
   1ba50:	d1c4      	bne.n	1b9dc <adc_nrfx_read+0x44>
	error = set_resolution(sequence);
   1ba52:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   1ba54:	f1a3 0108 	sub.w	r1, r3, #8
   1ba58:	2906      	cmp	r1, #6
   1ba5a:	d816      	bhi.n	1ba8a <adc_nrfx_read+0xf2>
   1ba5c:	e8df f001 	tbb	[pc, r1]
   1ba60:	15221520 	.word	0x15221520
   1ba64:	1509      	.short	0x1509
   1ba66:	13          	.byte	0x13
   1ba67:	00          	.byte	0x00
   1ba68:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1ba6c:	0100      	lsls	r0, r0, #4
   1ba6e:	502b      	str	r3, [r5, r0]
}
   1ba70:	e7ec      	b.n	1ba4c <adc_nrfx_read+0xb4>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1ba72:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1ba74:	4946      	ldr	r1, [pc, #280]	; (1bb90 <adc_nrfx_read+0x1f8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1ba76:	2a01      	cmp	r2, #1
   1ba78:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1ba7c:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1ba7e:	d913      	bls.n	1baa8 <adc_nrfx_read+0x110>
   1ba80:	b1a3      	cbz	r3, 1baac <adc_nrfx_read+0x114>
		LOG_ERR(
   1ba82:	4b46      	ldr	r3, [pc, #280]	; (1bb9c <adc_nrfx_read+0x204>)
   1ba84:	e799      	b.n	1b9ba <adc_nrfx_read+0x22>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1ba86:	2303      	movs	r3, #3
		break;
   1ba88:	e7f4      	b.n	1ba74 <adc_nrfx_read+0xdc>
		LOG_ERR("ADC resolution value %d is not valid",
   1ba8a:	466c      	mov	r4, sp
   1ba8c:	b088      	sub	sp, #32
   1ba8e:	aa02      	add	r2, sp, #8
   1ba90:	4943      	ldr	r1, [pc, #268]	; (1bba0 <adc_nrfx_read+0x208>)
	switch (sequence->oversampling) {
   1ba92:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Oversampling value %d is not valid",
   1ba96:	2303      	movs	r3, #3
   1ba98:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba9c:	2300      	movs	r3, #0
   1ba9e:	e7ae      	b.n	1b9fe <adc_nrfx_read+0x66>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1baa0:	2300      	movs	r3, #0
   1baa2:	e7e7      	b.n	1ba74 <adc_nrfx_read+0xdc>
	switch (sequence->resolution) {
   1baa4:	2301      	movs	r3, #1
   1baa6:	e7e5      	b.n	1ba74 <adc_nrfx_read+0xdc>
	switch (sequence->oversampling) {
   1baa8:	2b08      	cmp	r3, #8
   1baaa:	d81b      	bhi.n	1bae4 <adc_nrfx_read+0x14c>
    p_reg->OVERSAMPLE = oversample;
   1baac:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   1bab0:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1bab2:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1bab4:	b9d9      	cbnz	r1, 1baee <adc_nrfx_read+0x156>
	if (sequence->buffer_size < needed_buffer_size) {
   1bab6:	68e1      	ldr	r1, [r4, #12]
   1bab8:	4299      	cmp	r1, r3
   1baba:	d21c      	bcs.n	1baf6 <adc_nrfx_read+0x15e>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1babc:	466c      	mov	r4, sp
   1babe:	b088      	sub	sp, #32
   1bac0:	aa02      	add	r2, sp, #8
   1bac2:	61d3      	str	r3, [r2, #28]
   1bac4:	2304      	movs	r3, #4
   1bac6:	4837      	ldr	r0, [pc, #220]	; (1bba4 <adc_nrfx_read+0x20c>)
   1bac8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1bacc:	f842 3f10 	str.w	r3, [r2, #16]!
   1bad0:	2300      	movs	r3, #0
   1bad2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bad6:	482d      	ldr	r0, [pc, #180]	; (1bb8c <adc_nrfx_read+0x1f4>)
   1bad8:	f7f2 feea 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1badc:	46a5      	mov	sp, r4
		return -ENOMEM;
   1bade:	f06f 040b 	mvn.w	r4, #11
   1bae2:	e794      	b.n	1ba0e <adc_nrfx_read+0x76>
		LOG_ERR("Oversampling value %d is not valid",
   1bae4:	466c      	mov	r4, sp
   1bae6:	b088      	sub	sp, #32
   1bae8:	aa02      	add	r2, sp, #8
   1baea:	492f      	ldr	r1, [pc, #188]	; (1bba8 <adc_nrfx_read+0x210>)
   1baec:	e7d1      	b.n	1ba92 <adc_nrfx_read+0xfa>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1baee:	8989      	ldrh	r1, [r1, #12]
   1baf0:	fb01 3303 	mla	r3, r1, r3, r3
   1baf4:	e7df      	b.n	1bab6 <adc_nrfx_read+0x11e>
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1baf6:	46a4      	mov	ip, r4
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1baf8:	68a1      	ldr	r1, [r4, #8]
   1bafa:	4b25      	ldr	r3, [pc, #148]	; (1bb90 <adc_nrfx_read+0x1f8>)
   1bafc:	4d2b      	ldr	r5, [pc, #172]	; (1bbac <adc_nrfx_read+0x214>)
   1bafe:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
   1bb02:	f105 0674 	add.w	r6, r5, #116	; 0x74
    p_reg->RESULT.MAXCNT = size;
   1bb06:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   1bb0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bb0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1bb10:	f8dc 3000 	ldr.w	r3, [ip]
   1bb14:	46ac      	mov	ip, r5
   1bb16:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1bb18:	2600      	movs	r6, #0
   1bb1a:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   1bb1c:	6823      	ldr	r3, [r4, #0]
   1bb1e:	b36b      	cbz	r3, 1bb7c <adc_nrfx_read+0x1e4>
		ctx->options = *sequence->options;
   1bb20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bb22:	f105 0488 	add.w	r4, r5, #136	; 0x88
   1bb26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1bb2a:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1bb2c:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1bb30:	b320      	cbz	r0, 1bb7c <adc_nrfx_read+0x1e4>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bb32:	e8dc 3fef 	ldaex	r3, [ip]
   1bb36:	e8cc 6fe2 	stlex	r2, r6, [ip]
   1bb3a:	2a00      	cmp	r2, #0
   1bb3c:	d1f9      	bne.n	1bb32 <adc_nrfx_read+0x19a>
   1bb3e:	491c      	ldr	r1, [pc, #112]	; (1bbb0 <adc_nrfx_read+0x218>)
   1bb40:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1bb44:	468c      	mov	ip, r1
   1bb46:	4631      	mov	r1, r6
   1bb48:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1bb4c:	2300      	movs	r3, #0
   1bb4e:	fbe0 c104 	umlal	ip, r1, r0, r4
   1bb52:	4a18      	ldr	r2, [pc, #96]	; (1bbb4 <adc_nrfx_read+0x21c>)
   1bb54:	4660      	mov	r0, ip
   1bb56:	f7ed f9cb 	bl	8ef0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1bb5a:	2200      	movs	r2, #0
   1bb5c:	e9cd 0100 	strd	r0, r1, [sp]
   1bb60:	2300      	movs	r3, #0
   1bb62:	f105 0008 	add.w	r0, r5, #8
   1bb66:	f00c f951 	bl	27e0c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1bb6a:	f04f 32ff 	mov.w	r2, #4294967295
   1bb6e:	f04f 33ff 	mov.w	r3, #4294967295
   1bb72:	4811      	ldr	r0, [pc, #68]	; (1bbb8 <adc_nrfx_read+0x220>)
   1bb74:	f009 fd7c 	bl	25670 <z_impl_k_sem_take>
	return ctx->status;
   1bb78:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   1bb7a:	e748      	b.n	1ba0e <adc_nrfx_read+0x76>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1bb7c:	480b      	ldr	r0, [pc, #44]	; (1bbac <adc_nrfx_read+0x214>)
   1bb7e:	f7ff fe77 	bl	1b870 <adc_context_start_sampling>
   1bb82:	e7f2      	b.n	1bb6a <adc_nrfx_read+0x1d2>
   1bb84:	200081a8 	.word	0x200081a8
   1bb88:	00036a2f 	.word	0x00036a2f
   1bb8c:	000314c4 	.word	0x000314c4
   1bb90:	4000e000 	.word	0x4000e000
   1bb94:	20008208 	.word	0x20008208
   1bb98:	00036a4d 	.word	0x00036a4d
   1bb9c:	00036a8c 	.word	0x00036a8c
   1bba0:	00036a67 	.word	0x00036a67
   1bba4:	00036ae1 	.word	0x00036ae1
   1bba8:	00036abe 	.word	0x00036abe
   1bbac:	20008168 	.word	0x20008168
   1bbb0:	000f423f 	.word	0x000f423f
   1bbb4:	000f4240 	.word	0x000f4240
   1bbb8:	200081c0 	.word	0x200081c0

0001bbbc <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1bbbc:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bbbe:	2400      	movs	r4, #0
   1bbc0:	4b0d      	ldr	r3, [pc, #52]	; (1bbf8 <init_saadc+0x3c>)
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1bbc2:	200e      	movs	r0, #14
   1bbc4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1bbc8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1bbcc:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1bbd0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1bbd4:	2212      	movs	r2, #18
   1bbd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   1bbda:	f7f4 ff2f 	bl	10a3c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bbde:	4622      	mov	r2, r4
   1bbe0:	2101      	movs	r1, #1
   1bbe2:	200e      	movs	r0, #14
   1bbe4:	f7f4 ff5a 	bl	10a9c <z_arm_irq_priority_set>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   1bbe8:	4804      	ldr	r0, [pc, #16]	; (1bbfc <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1bbea:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1bbec:	b913      	cbnz	r3, 1bbf4 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1bbee:	3040      	adds	r0, #64	; 0x40
   1bbf0:	f009 fcfa 	bl	255e8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1bbf4:	2000      	movs	r0, #0
   1bbf6:	bd10      	pop	{r4, pc}
   1bbf8:	4000e000 	.word	0x4000e000
   1bbfc:	20008168 	.word	0x20008168

0001bc00 <saadc_irq_handler>:
{
   1bc00:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc02:	4b2d      	ldr	r3, [pc, #180]	; (1bcb8 <saadc_irq_handler+0xb8>)
   1bc04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1bc08:	2a00      	cmp	r2, #0
   1bc0a:	d048      	beq.n	1bc9e <saadc_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bc0c:	2200      	movs	r2, #0
   1bc0e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1bc12:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bc16:	2101      	movs	r1, #1
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1bc18:	4c28      	ldr	r4, [pc, #160]	; (1bcbc <saadc_irq_handler+0xbc>)
   1bc1a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1bc1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1bc20:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1bc22:	4625      	mov	r5, r4
   1bc24:	b3b3      	cbz	r3, 1bc94 <saadc_irq_handler+0x94>
		adc_sequence_callback callback = ctx->options.callback;
   1bc26:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1bc2a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1bc2e:	b133      	cbz	r3, 1bc3e <saadc_irq_handler+0x3e>
			action = callback(dev,
   1bc30:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1bc34:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1bc36:	2801      	cmp	r0, #1
   1bc38:	d014      	beq.n	1bc64 <saadc_irq_handler+0x64>
   1bc3a:	2802      	cmp	r0, #2
   1bc3c:	d024      	beq.n	1bc88 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1bc3e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1bc42:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1bc46:	429a      	cmp	r2, r3
   1bc48:	d91e      	bls.n	1bc88 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1bc4a:	3301      	adds	r3, #1
   1bc4c:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1bc50:	4b19      	ldr	r3, [pc, #100]	; (1bcb8 <saadc_irq_handler+0xb8>)
   1bc52:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1bc56:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1bc5a:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1bc5c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1bc60:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1bc64:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1bc68:	b923      	cbnz	r3, 1bc74 <saadc_irq_handler+0x74>
}
   1bc6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1bc6e:	4813      	ldr	r0, [pc, #76]	; (1bcbc <saadc_irq_handler+0xbc>)
   1bc70:	f7ff bdfe 	b.w	1b870 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bc74:	e8d5 3fef 	ldaex	r3, [r5]
   1bc78:	1e5a      	subs	r2, r3, #1
   1bc7a:	e8c5 2fe1 	stlex	r1, r2, [r5]
   1bc7e:	2900      	cmp	r1, #0
   1bc80:	d1f8      	bne.n	1bc74 <saadc_irq_handler+0x74>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1bc82:	2b01      	cmp	r3, #1
   1bc84:	dcf1      	bgt.n	1bc6a <saadc_irq_handler+0x6a>
   1bc86:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1bc88:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1bc8c:	b113      	cbz	r3, 1bc94 <saadc_irq_handler+0x94>
	z_impl_k_timer_stop(timer);
   1bc8e:	480c      	ldr	r0, [pc, #48]	; (1bcc0 <saadc_irq_handler+0xc0>)
   1bc90:	f014 fb98 	bl	303c4 <z_impl_k_timer_stop>
   1bc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_give(sem);
   1bc98:	480a      	ldr	r0, [pc, #40]	; (1bcc4 <saadc_irq_handler+0xc4>)
   1bc9a:	f009 bca5 	b.w	255e8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bc9e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1bca2:	2900      	cmp	r1, #0
   1bca4:	d0ef      	beq.n	1bc86 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bca6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1bcaa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bcae:	2201      	movs	r2, #1
   1bcb0:	609a      	str	r2, [r3, #8]
   1bcb2:	601a      	str	r2, [r3, #0]
   1bcb4:	605a      	str	r2, [r3, #4]
}
   1bcb6:	e7e6      	b.n	1bc86 <saadc_irq_handler+0x86>
   1bcb8:	4000e000 	.word	0x4000e000
   1bcbc:	20008168 	.word	0x20008168
   1bcc0:	20008170 	.word	0x20008170
   1bcc4:	200081c0 	.word	0x200081c0

0001bcc8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcca:	2340      	movs	r3, #64	; 0x40
{
   1bccc:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bcce:	490a      	ldr	r1, [pc, #40]	; (1bcf8 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcd0:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   1bcd2:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcd4:	1149      	asrs	r1, r1, #5
{
   1bcd6:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bcd8:	4623      	mov	r3, r4
   1bcda:	4a08      	ldr	r2, [pc, #32]	; (1bcfc <onoff_start+0x34>)
   1bcdc:	4808      	ldr	r0, [pc, #32]	; (1bd00 <onoff_start+0x38>)
   1bcde:	f012 f9e3 	bl	2e0a8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1bce2:	1e01      	subs	r1, r0, #0
   1bce4:	da05      	bge.n	1bcf2 <onoff_start+0x2a>
		notify(mgr, err);
   1bce6:	4628      	mov	r0, r5
   1bce8:	4623      	mov	r3, r4
	}
}
   1bcea:	b003      	add	sp, #12
   1bcec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1bcf0:	4718      	bx	r3
}
   1bcf2:	b003      	add	sp, #12
   1bcf4:	bd30      	pop	{r4, r5, pc}
   1bcf6:	bf00      	nop
   1bcf8:	200217cc 	.word	0x200217cc
   1bcfc:	0002e117 	.word	0x0002e117
   1bd00:	00030f3c 	.word	0x00030f3c

0001bd04 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd04:	b2c9      	uxtb	r1, r1
   1bd06:	2903      	cmp	r1, #3
{
   1bd08:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd0a:	d909      	bls.n	1bd20 <get_status+0x1c>
   1bd0c:	4909      	ldr	r1, [pc, #36]	; (1bd34 <get_status+0x30>)
   1bd0e:	480a      	ldr	r0, [pc, #40]	; (1bd38 <get_status+0x34>)
   1bd10:	237a      	movs	r3, #122	; 0x7a
   1bd12:	4a0a      	ldr	r2, [pc, #40]	; (1bd3c <get_status+0x38>)
   1bd14:	f00e fce1 	bl	2a6da <assert_print>
   1bd18:	217a      	movs	r1, #122	; 0x7a
   1bd1a:	4808      	ldr	r0, [pc, #32]	; (1bd3c <get_status+0x38>)
   1bd1c:	f00e fcd6 	bl	2a6cc <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1bd20:	220c      	movs	r2, #12
   1bd22:	6903      	ldr	r3, [r0, #16]
   1bd24:	fb01 3302 	mla	r3, r1, r2, r3
   1bd28:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
}
   1bd2c:	f000 0007 	and.w	r0, r0, #7
   1bd30:	bd08      	pop	{r3, pc}
   1bd32:	bf00      	nop
   1bd34:	00036b5b 	.word	0x00036b5b
   1bd38:	00032679 	.word	0x00032679
   1bd3c:	00036b1e 	.word	0x00036b1e

0001bd40 <stop>:
{
   1bd40:	b570      	push	{r4, r5, r6, lr}
   1bd42:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd44:	2903      	cmp	r1, #3
	struct nrf_clock_control_data *data = dev->data;
   1bd46:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bd48:	d90b      	bls.n	1bd62 <stop+0x22>
   1bd4a:	491a      	ldr	r1, [pc, #104]	; (1bdb4 <stop+0x74>)
   1bd4c:	481a      	ldr	r0, [pc, #104]	; (1bdb8 <stop+0x78>)
   1bd4e:	f240 135d 	movw	r3, #349	; 0x15d
   1bd52:	4a1a      	ldr	r2, [pc, #104]	; (1bdbc <stop+0x7c>)
   1bd54:	f00e fcc1 	bl	2a6da <assert_print>
   1bd58:	f240 115d 	movw	r1, #349	; 0x15d
   1bd5c:	4817      	ldr	r0, [pc, #92]	; (1bdbc <stop+0x7c>)
   1bd5e:	f00e fcb5 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   1bd62:	f04f 0420 	mov.w	r4, #32
   1bd66:	f3ef 8511 	mrs	r5, BASEPRI
   1bd6a:	f384 8812 	msr	BASEPRI_MAX, r4
   1bd6e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1bd72:	260c      	movs	r6, #12
   1bd74:	fb06 3401 	mla	r4, r6, r1, r3
   1bd78:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1bd7c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1bd80:	d008      	beq.n	1bd94 <stop+0x54>
   1bd82:	42a2      	cmp	r2, r4
   1bd84:	d006      	beq.n	1bd94 <stop+0x54>
	__asm__ volatile(
   1bd86:	f385 8811 	msr	BASEPRI, r5
   1bd8a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1bd8e:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bd92:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1bd94:	2201      	movs	r2, #1
   1bd96:	4371      	muls	r1, r6
   1bd98:	440b      	add	r3, r1
   1bd9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1bd9e:	f385 8811 	msr	BASEPRI, r5
   1bda2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1bda6:	6843      	ldr	r3, [r0, #4]
   1bda8:	440b      	add	r3, r1
   1bdaa:	685b      	ldr	r3, [r3, #4]
   1bdac:	4798      	blx	r3
	return 0;
   1bdae:	2000      	movs	r0, #0
   1bdb0:	e7ef      	b.n	1bd92 <stop+0x52>
   1bdb2:	bf00      	nop
   1bdb4:	00036b5b 	.word	0x00036b5b
   1bdb8:	00032679 	.word	0x00032679
   1bdbc:	00036b1e 	.word	0x00036b1e

0001bdc0 <onoff_stop>:
{
   1bdc0:	b570      	push	{r4, r5, r6, lr}
   1bdc2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bdc4:	4906      	ldr	r1, [pc, #24]	; (1bde0 <onoff_stop+0x20>)
{
   1bdc6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1bdc8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bdca:	1149      	asrs	r1, r1, #5
   1bdcc:	2240      	movs	r2, #64	; 0x40
   1bdce:	4805      	ldr	r0, [pc, #20]	; (1bde4 <onoff_stop+0x24>)
   1bdd0:	f7ff ffb6 	bl	1bd40 <stop>
	notify(mgr, res);
   1bdd4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bdd6:	4601      	mov	r1, r0
	notify(mgr, res);
   1bdd8:	4620      	mov	r0, r4
}
   1bdda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1bdde:	4718      	bx	r3
   1bde0:	200217cc 	.word	0x200217cc
   1bde4:	00030f3c 	.word	0x00030f3c

0001bde8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1bde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bdec:	2200      	movs	r2, #0
   1bdee:	2101      	movs	r1, #1
{
   1bdf0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bdf2:	2005      	movs	r0, #5
   1bdf4:	f7f4 fe52 	bl	10a9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1bdf8:	4811      	ldr	r0, [pc, #68]	; (1be40 <clk_init+0x58>)
   1bdfa:	f003 f813 	bl	1ee24 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1bdfe:	4b11      	ldr	r3, [pc, #68]	; (1be44 <clk_init+0x5c>)
   1be00:	4298      	cmp	r0, r3
   1be02:	d119      	bne.n	1be38 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1be04:	f003 f832 	bl	1ee6c <nrfx_clock_enable>
   1be08:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1be0a:	f04f 080c 	mov.w	r8, #12
   1be0e:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1be10:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1be48 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
   1be14:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1be16:	4649      	mov	r1, r9
   1be18:	eb05 1044 	add.w	r0, r5, r4, lsl #5
   1be1c:	f00e fc18 	bl	2a650 <onoff_manager_init>
		if (err < 0) {
   1be20:	2800      	cmp	r0, #0
   1be22:	db07      	blt.n	1be34 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1be24:	fb08 5504 	mla	r5, r8, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1be28:	3401      	adds	r4, #1
   1be2a:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1be2c:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1be30:	d1f0      	bne.n	1be14 <clk_init+0x2c>
	}

	return 0;
   1be32:	2000      	movs	r0, #0
}
   1be34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1be38:	f06f 0004 	mvn.w	r0, #4
   1be3c:	e7fa      	b.n	1be34 <clk_init+0x4c>
   1be3e:	bf00      	nop
   1be40:	0001be85 	.word	0x0001be85
   1be44:	0bad0000 	.word	0x0bad0000
   1be48:	00032294 	.word	0x00032294

0001be4c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1be4c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1be4e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1be50:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
   1be52:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1be54:	434b      	muls	r3, r1
   1be56:	4809      	ldr	r0, [pc, #36]	; (1be7c <clkstarted_handle.constprop.0+0x30>)
   1be58:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1be5a:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
   1be5c:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1be60:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1be62:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
   1be66:	f012 f90c 	bl	2e082 <set_on_state>
	if (callback) {
   1be6a:	b12d      	cbz	r5, 1be78 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1be6c:	4632      	mov	r2, r6
   1be6e:	462b      	mov	r3, r5
}
   1be70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1be74:	4802      	ldr	r0, [pc, #8]	; (1be80 <clkstarted_handle.constprop.0+0x34>)
   1be76:	4718      	bx	r3
}
   1be78:	bd70      	pop	{r4, r5, r6, pc}
   1be7a:	bf00      	nop
   1be7c:	200217cc 	.word	0x200217cc
   1be80:	00030f3c 	.word	0x00030f3c

0001be84 <clock_event_handler>:
{
   1be84:	b508      	push	{r3, lr}
	switch (event) {
   1be86:	2805      	cmp	r0, #5
   1be88:	d820      	bhi.n	1becc <clock_event_handler+0x48>
   1be8a:	e8df f000 	tbb	[pc, r0]
   1be8e:	1103      	.short	0x1103
   1be90:	0d0f131f 	.word	0x0d0f131f
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1be94:	4b13      	ldr	r3, [pc, #76]	; (1bee4 <clock_event_handler+0x60>)
   1be96:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   1be9a:	f010 0007 	ands.w	r0, r0, #7
   1be9e:	d11f      	bne.n	1bee0 <clock_event_handler+0x5c>
}
   1bea0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1bea4:	f7ff bfd2 	b.w	1be4c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   1bea8:	2002      	movs	r0, #2
   1beaa:	e7f9      	b.n	1bea0 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   1beac:	2003      	movs	r0, #3
   1beae:	e7f7      	b.n	1bea0 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1beb0:	2001      	movs	r0, #1
   1beb2:	e7f5      	b.n	1bea0 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
   1beb4:	490c      	ldr	r1, [pc, #48]	; (1bee8 <clock_event_handler+0x64>)
   1beb6:	f240 236e 	movw	r3, #622	; 0x26e
   1beba:	4a0c      	ldr	r2, [pc, #48]	; (1beec <clock_event_handler+0x68>)
   1bebc:	480c      	ldr	r0, [pc, #48]	; (1bef0 <clock_event_handler+0x6c>)
   1bebe:	f00e fc0c 	bl	2a6da <assert_print>
   1bec2:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1bec6:	4809      	ldr	r0, [pc, #36]	; (1beec <clock_event_handler+0x68>)
   1bec8:	f00e fc00 	bl	2a6cc <assert_post_action>
   1becc:	4906      	ldr	r1, [pc, #24]	; (1bee8 <clock_event_handler+0x64>)
   1bece:	f240 2372 	movw	r3, #626	; 0x272
   1bed2:	4a06      	ldr	r2, [pc, #24]	; (1beec <clock_event_handler+0x68>)
   1bed4:	4806      	ldr	r0, [pc, #24]	; (1bef0 <clock_event_handler+0x6c>)
   1bed6:	f00e fc00 	bl	2a6da <assert_print>
   1beda:	f240 2172 	movw	r1, #626	; 0x272
   1bede:	e7f2      	b.n	1bec6 <clock_event_handler+0x42>
}
   1bee0:	bd08      	pop	{r3, pc}
   1bee2:	bf00      	nop
   1bee4:	200217cc 	.word	0x200217cc
   1bee8:	00037b56 	.word	0x00037b56
   1beec:	00036b1e 	.word	0x00036b1e
   1bef0:	00032679 	.word	0x00032679

0001bef4 <generic_hfclk_start>:
{
   1bef4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1bef6:	f04f 0320 	mov.w	r3, #32
   1befa:	f3ef 8111 	mrs	r1, BASEPRI
   1befe:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf02:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1bf06:	4a11      	ldr	r2, [pc, #68]	; (1bf4c <generic_hfclk_start+0x58>)
   1bf08:	6813      	ldr	r3, [r2, #0]
   1bf0a:	f043 0002 	orr.w	r0, r3, #2
   1bf0e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1bf10:	07da      	lsls	r2, r3, #31
   1bf12:	d408      	bmi.n	1bf26 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1bf14:	f381 8811 	msr	BASEPRI, r1
   1bf18:	f3bf 8f6f 	isb	sy
}
   1bf1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bf20:	2001      	movs	r0, #1
   1bf22:	f002 bfcd 	b.w	1eec0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bf26:	4b0a      	ldr	r3, [pc, #40]	; (1bf50 <generic_hfclk_start+0x5c>)
   1bf28:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bf2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1bf30:	07d3      	lsls	r3, r2, #31
   1bf32:	d5ef      	bpl.n	1bf14 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1bf34:	4807      	ldr	r0, [pc, #28]	; (1bf54 <generic_hfclk_start+0x60>)
   1bf36:	f012 f8a4 	bl	2e082 <set_on_state>
   1bf3a:	f381 8811 	msr	BASEPRI, r1
   1bf3e:	f3bf 8f6f 	isb	sy
}
   1bf42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1bf46:	2000      	movs	r0, #0
   1bf48:	f7ff bf80 	b.w	1be4c <clkstarted_handle.constprop.0>
   1bf4c:	2002187c 	.word	0x2002187c
   1bf50:	40005000 	.word	0x40005000
   1bf54:	20021854 	.word	0x20021854

0001bf58 <api_blocking_start>:
{
   1bf58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bf5a:	2200      	movs	r2, #0
   1bf5c:	2301      	movs	r3, #1
   1bf5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bf62:	ab04      	add	r3, sp, #16
   1bf64:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bf68:	4a09      	ldr	r2, [pc, #36]	; (1bf90 <api_blocking_start+0x38>)
   1bf6a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bf6c:	f8cd d000 	str.w	sp, [sp]
   1bf70:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bf74:	f012 f8c8 	bl	2e108 <api_start>
	if (err < 0) {
   1bf78:	2800      	cmp	r0, #0
   1bf7a:	db05      	blt.n	1bf88 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1bf7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1bf80:	2300      	movs	r3, #0
   1bf82:	4668      	mov	r0, sp
   1bf84:	f009 fb74 	bl	25670 <z_impl_k_sem_take>
}
   1bf88:	b007      	add	sp, #28
   1bf8a:	f85d fb04 	ldr.w	pc, [sp], #4
   1bf8e:	bf00      	nop
   1bf90:	0002e147 	.word	0x0002e147

0001bf94 <generic_hfclk_stop>:
{
   1bf94:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bf96:	f04f 0320 	mov.w	r3, #32
   1bf9a:	f3ef 8411 	mrs	r4, BASEPRI
   1bf9e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfa2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1bfa6:	4a07      	ldr	r2, [pc, #28]	; (1bfc4 <generic_hfclk_stop+0x30>)
   1bfa8:	6813      	ldr	r3, [r2, #0]
   1bfaa:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1bfae:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1bfb0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1bfb2:	d402      	bmi.n	1bfba <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1bfb4:	2001      	movs	r0, #1
   1bfb6:	f003 f801 	bl	1efbc <nrfx_clock_stop>
	__asm__ volatile(
   1bfba:	f384 8811 	msr	BASEPRI, r4
   1bfbe:	f3bf 8f6f 	isb	sy
}
   1bfc2:	bd10      	pop	{r4, pc}
   1bfc4:	2002187c 	.word	0x2002187c

0001bfc8 <z_nrf_clock_control_lf_on>:
{
   1bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1bfcc:	2201      	movs	r2, #1
   1bfce:	4606      	mov	r6, r0
   1bfd0:	4941      	ldr	r1, [pc, #260]	; (1c0d8 <z_nrf_clock_control_lf_on+0x110>)
   1bfd2:	e8d1 3fef 	ldaex	r3, [r1]
   1bfd6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1bfda:	2800      	cmp	r0, #0
   1bfdc:	d1f9      	bne.n	1bfd2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1bfde:	b9a3      	cbnz	r3, 1c00a <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1bfe0:	493e      	ldr	r1, [pc, #248]	; (1c0dc <z_nrf_clock_control_lf_on+0x114>)
		err = onoff_request(mgr, &cli);
   1bfe2:	483f      	ldr	r0, [pc, #252]	; (1c0e0 <z_nrf_clock_control_lf_on+0x118>)
   1bfe4:	604b      	str	r3, [r1, #4]
   1bfe6:	60cb      	str	r3, [r1, #12]
   1bfe8:	608a      	str	r2, [r1, #8]
   1bfea:	f7f1 f83b 	bl	d064 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1bfee:	2800      	cmp	r0, #0
   1bff0:	da0b      	bge.n	1c00a <z_nrf_clock_control_lf_on+0x42>
   1bff2:	493c      	ldr	r1, [pc, #240]	; (1c0e4 <z_nrf_clock_control_lf_on+0x11c>)
   1bff4:	f44f 730c 	mov.w	r3, #560	; 0x230
   1bff8:	4a3b      	ldr	r2, [pc, #236]	; (1c0e8 <z_nrf_clock_control_lf_on+0x120>)
   1bffa:	483c      	ldr	r0, [pc, #240]	; (1c0ec <z_nrf_clock_control_lf_on+0x124>)
   1bffc:	f00e fb6d 	bl	2a6da <assert_print>
   1c000:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1c004:	4838      	ldr	r0, [pc, #224]	; (1c0e8 <z_nrf_clock_control_lf_on+0x120>)
   1c006:	f00e fb61 	bl	2a6cc <assert_post_action>
	switch (start_mode) {
   1c00a:	b35e      	cbz	r6, 1c064 <z_nrf_clock_control_lf_on+0x9c>
   1c00c:	1e73      	subs	r3, r6, #1
   1c00e:	2b01      	cmp	r3, #1
   1c010:	d858      	bhi.n	1c0c4 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c012:	2e01      	cmp	r6, #1
   1c014:	d106      	bne.n	1c024 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c016:	4b36      	ldr	r3, [pc, #216]	; (1c0f0 <z_nrf_clock_control_lf_on+0x128>)
   1c018:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c01c:	f003 0303 	and.w	r3, r3, #3
   1c020:	2b02      	cmp	r3, #2
   1c022:	d01f      	beq.n	1c064 <z_nrf_clock_control_lf_on+0x9c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c024:	f014 f8a0 	bl	30168 <k_is_in_isr>
   1c028:	4605      	mov	r5, r0
   1c02a:	b9e8      	cbnz	r0, 1c068 <z_nrf_clock_control_lf_on+0xa0>
	return !z_sys_post_kernel;
   1c02c:	4b31      	ldr	r3, [pc, #196]	; (1c0f4 <z_nrf_clock_control_lf_on+0x12c>)
   1c02e:	781b      	ldrb	r3, [r3, #0]
   1c030:	b1d3      	cbz	r3, 1c068 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENCLR = mask;
   1c032:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   1c034:	4607      	mov	r7, r0
   1c036:	4b2e      	ldr	r3, [pc, #184]	; (1c0f0 <z_nrf_clock_control_lf_on+0x128>)
   1c038:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c03c:	4c2c      	ldr	r4, [pc, #176]	; (1c0f0 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c03e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1c0f8 <z_nrf_clock_control_lf_on+0x130>
   1c042:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c046:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c04a:	03d2      	lsls	r2, r2, #15
   1c04c:	d516      	bpl.n	1c07c <z_nrf_clock_control_lf_on+0xb4>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c04e:	f003 0303 	and.w	r3, r3, #3
   1c052:	2b02      	cmp	r3, #2
   1c054:	d001      	beq.n	1c05a <z_nrf_clock_control_lf_on+0x92>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c056:	2e01      	cmp	r6, #1
   1c058:	d110      	bne.n	1c07c <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
   1c05a:	b375      	cbz	r5, 1c0ba <z_nrf_clock_control_lf_on+0xf2>
   1c05c:	f387 8811 	msr	BASEPRI, r7
   1c060:	f3bf 8f6f 	isb	sy
}
   1c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c068:	f04f 0320 	mov.w	r3, #32
   1c06c:	f3ef 8711 	mrs	r7, BASEPRI
   1c070:	f383 8812 	msr	BASEPRI_MAX, r3
   1c074:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c078:	2501      	movs	r5, #1
   1c07a:	e7df      	b.n	1c03c <z_nrf_clock_control_lf_on+0x74>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c07c:	b1c5      	cbz	r5, 1c0b0 <z_nrf_clock_control_lf_on+0xe8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c07e:	4638      	mov	r0, r7
   1c080:	f7f4 fc6c 	bl	1095c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c084:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c088:	b2db      	uxtb	r3, r3
   1c08a:	2b01      	cmp	r3, #1
   1c08c:	d1d9      	bne.n	1c042 <z_nrf_clock_control_lf_on+0x7a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c08e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c092:	2a00      	cmp	r2, #0
   1c094:	d0d5      	beq.n	1c042 <z_nrf_clock_control_lf_on+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c096:	2200      	movs	r2, #0
   1c098:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c09c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c0a0:	2202      	movs	r2, #2
   1c0a2:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
   1c0a6:	2220      	movs	r2, #32
   1c0a8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c0ac:	60a3      	str	r3, [r4, #8]
}
   1c0ae:	e7c8      	b.n	1c042 <z_nrf_clock_control_lf_on+0x7a>
	return z_impl_k_sleep(timeout);
   1c0b0:	2100      	movs	r1, #0
   1c0b2:	2021      	movs	r0, #33	; 0x21
   1c0b4:	f00b f98c 	bl	273d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c0b8:	e7e4      	b.n	1c084 <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
   1c0ba:	2202      	movs	r2, #2
   1c0bc:	4b0c      	ldr	r3, [pc, #48]	; (1c0f0 <z_nrf_clock_control_lf_on+0x128>)
   1c0be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c0c2:	e7cf      	b.n	1c064 <z_nrf_clock_control_lf_on+0x9c>
		__ASSERT_NO_MSG(false);
   1c0c4:	490d      	ldr	r1, [pc, #52]	; (1c0fc <z_nrf_clock_control_lf_on+0x134>)
   1c0c6:	f240 2342 	movw	r3, #578	; 0x242
   1c0ca:	4a07      	ldr	r2, [pc, #28]	; (1c0e8 <z_nrf_clock_control_lf_on+0x120>)
   1c0cc:	4807      	ldr	r0, [pc, #28]	; (1c0ec <z_nrf_clock_control_lf_on+0x124>)
   1c0ce:	f00e fb04 	bl	2a6da <assert_print>
   1c0d2:	f240 2142 	movw	r1, #578	; 0x242
   1c0d6:	e795      	b.n	1c004 <z_nrf_clock_control_lf_on+0x3c>
   1c0d8:	200217c8 	.word	0x200217c8
   1c0dc:	200217b8 	.word	0x200217b8
   1c0e0:	200217ec 	.word	0x200217ec
   1c0e4:	000338c9 	.word	0x000338c9
   1c0e8:	00036b1e 	.word	0x00036b1e
   1c0ec:	00032679 	.word	0x00032679
   1c0f0:	40005000 	.word	0x40005000
   1c0f4:	20022827 	.word	0x20022827
   1c0f8:	e000e100 	.word	0xe000e100
   1c0fc:	00037b56 	.word	0x00037b56

0001c100 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1c100:	b508      	push	{r3, lr}
   1c102:	4807      	ldr	r0, [pc, #28]	; (1c120 <uart_console_init+0x20>)
   1c104:	f013 fff9 	bl	300fa <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1c108:	b138      	cbz	r0, 1c11a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c10a:	4806      	ldr	r0, [pc, #24]	; (1c124 <uart_console_init+0x24>)
   1c10c:	f7f5 fbf4 	bl	118f8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c110:	4804      	ldr	r0, [pc, #16]	; (1c124 <uart_console_init+0x24>)
   1c112:	f7f0 fc25 	bl	c960 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c116:	2000      	movs	r0, #0
}
   1c118:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c11a:	f06f 0012 	mvn.w	r0, #18
   1c11e:	e7fb      	b.n	1c118 <uart_console_init+0x18>
   1c120:	00030fcc 	.word	0x00030fcc
   1c124:	0001c129 	.word	0x0001c129

0001c128 <console_out>:
	if ('\n' == c) {
   1c128:	280a      	cmp	r0, #10
{
   1c12a:	b538      	push	{r3, r4, r5, lr}
   1c12c:	4604      	mov	r4, r0
   1c12e:	4d07      	ldr	r5, [pc, #28]	; (1c14c <console_out+0x24>)
	if ('\n' == c) {
   1c130:	d104      	bne.n	1c13c <console_out+0x14>
	api->poll_out(dev, out_char);
   1c132:	68ab      	ldr	r3, [r5, #8]
   1c134:	210d      	movs	r1, #13
   1c136:	4628      	mov	r0, r5
   1c138:	69db      	ldr	r3, [r3, #28]
   1c13a:	4798      	blx	r3
   1c13c:	68ab      	ldr	r3, [r5, #8]
   1c13e:	4803      	ldr	r0, [pc, #12]	; (1c14c <console_out+0x24>)
   1c140:	69db      	ldr	r3, [r3, #28]
   1c142:	b2e1      	uxtb	r1, r4
   1c144:	4798      	blx	r3
}
   1c146:	4620      	mov	r0, r4
   1c148:	bd38      	pop	{r3, r4, r5, pc}
   1c14a:	bf00      	nop
   1c14c:	00030fcc 	.word	0x00030fcc

0001c150 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c150:	b510      	push	{r4, lr}
	return port->data;
   1c152:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c154:	b961      	cbnz	r1, 1c170 <gpio_nrfx_manage_callback+0x20>
   1c156:	4920      	ldr	r1, [pc, #128]	; (1c1d8 <gpio_nrfx_manage_callback+0x88>)
   1c158:	232a      	movs	r3, #42	; 0x2a
   1c15a:	4a20      	ldr	r2, [pc, #128]	; (1c1dc <gpio_nrfx_manage_callback+0x8c>)
   1c15c:	4820      	ldr	r0, [pc, #128]	; (1c1e0 <gpio_nrfx_manage_callback+0x90>)
   1c15e:	f00e fabc 	bl	2a6da <assert_print>
   1c162:	4820      	ldr	r0, [pc, #128]	; (1c1e4 <gpio_nrfx_manage_callback+0x94>)
   1c164:	f00e fab9 	bl	2a6da <assert_print>
   1c168:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1c16a:	481c      	ldr	r0, [pc, #112]	; (1c1dc <gpio_nrfx_manage_callback+0x8c>)
   1c16c:	f00e faae 	bl	2a6cc <assert_post_action>
   1c170:	6848      	ldr	r0, [r1, #4]
   1c172:	b950      	cbnz	r0, 1c18a <gpio_nrfx_manage_callback+0x3a>
   1c174:	491c      	ldr	r1, [pc, #112]	; (1c1e8 <gpio_nrfx_manage_callback+0x98>)
   1c176:	232b      	movs	r3, #43	; 0x2b
   1c178:	4a18      	ldr	r2, [pc, #96]	; (1c1dc <gpio_nrfx_manage_callback+0x8c>)
   1c17a:	4819      	ldr	r0, [pc, #100]	; (1c1e0 <gpio_nrfx_manage_callback+0x90>)
   1c17c:	f00e faad 	bl	2a6da <assert_print>
   1c180:	481a      	ldr	r0, [pc, #104]	; (1c1ec <gpio_nrfx_manage_callback+0x9c>)
   1c182:	f00e faaa 	bl	2a6da <assert_print>
   1c186:	212b      	movs	r1, #43	; 0x2b
   1c188:	e7ef      	b.n	1c16a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1c18a:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c18c:	b1f8      	cbz	r0, 1c1ce <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c18e:	4288      	cmp	r0, r1
   1c190:	d119      	bne.n	1c1c6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1c192:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c194:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c196:	42a1      	cmp	r1, r4
	list->head = node;
   1c198:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c19a:	d100      	bne.n	1c19e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c19c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c19e:	2000      	movs	r0, #0
   1c1a0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1c1a2:	b12a      	cbz	r2, 1c1b0 <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1c1a4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c1a6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c1a8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c1aa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c1ac:	b902      	cbnz	r2, 1c1b0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c1ae:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c1b0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c1b2:	e010      	b.n	1c1d6 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1b4:	4281      	cmp	r1, r0
   1c1b6:	d106      	bne.n	1c1c6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1c1b8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c1ba:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c1bc:	6898      	ldr	r0, [r3, #8]
   1c1be:	4281      	cmp	r1, r0
   1c1c0:	d1ed      	bne.n	1c19e <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c1c2:	609c      	str	r4, [r3, #8]
}
   1c1c4:	e7eb      	b.n	1c19e <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1c1c6:	4604      	mov	r4, r0
   1c1c8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c1ca:	2800      	cmp	r0, #0
   1c1cc:	d1f2      	bne.n	1c1b4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c1ce:	2a00      	cmp	r2, #0
   1c1d0:	d1e8      	bne.n	1c1a4 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1c1d2:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1c1d6:	bd10      	pop	{r4, pc}
   1c1d8:	00032c6f 	.word	0x00032c6f
   1c1dc:	00036bb9 	.word	0x00036bb9
   1c1e0:	00032679 	.word	0x00032679
   1c1e4:	00036bf5 	.word	0x00036bf5
   1c1e8:	00036c04 	.word	0x00036c04
   1c1ec:	00036c16 	.word	0x00036c16

0001c1f0 <gpio_nrfx_pin_interrupt_configure>:
{
   1c1f0:	b530      	push	{r4, r5, lr}
	return port->config;
   1c1f2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c1f4:	f001 041f 	and.w	r4, r1, #31
   1c1f8:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c1fa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c1fe:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c200:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c204:	d105      	bne.n	1c212 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c206:	4620      	mov	r0, r4
   1c208:	f003 fa22 	bl	1f650 <nrfx_gpiote_trigger_disable>
		return 0;
   1c20c:	2000      	movs	r0, #0
}
   1c20e:	b005      	add	sp, #20
   1c210:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c212:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c214:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c218:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c21c:	d114      	bne.n	1c248 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c21e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c222:	bf0c      	ite	eq
   1c224:	2304      	moveq	r3, #4
   1c226:	2305      	movne	r3, #5
   1c228:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c22c:	2300      	movs	r3, #0
   1c22e:	4620      	mov	r0, r4
   1c230:	4619      	mov	r1, r3
   1c232:	aa02      	add	r2, sp, #8
   1c234:	f003 f816 	bl	1f264 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c238:	4b2a      	ldr	r3, [pc, #168]	; (1c2e4 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c23a:	4298      	cmp	r0, r3
   1c23c:	d14f      	bne.n	1c2de <gpio_nrfx_pin_interrupt_configure+0xee>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c23e:	2101      	movs	r1, #1
   1c240:	4620      	mov	r0, r4
   1c242:	f003 f99b 	bl	1f57c <nrfx_gpiote_trigger_enable>
	return 0;
   1c246:	e7e1      	b.n	1c20c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c248:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c24c:	d024      	beq.n	1c298 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1c24e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c252:	bf14      	ite	ne
   1c254:	2301      	movne	r3, #1
   1c256:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c258:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c25c:	6883      	ldr	r3, [r0, #8]
   1c25e:	40cb      	lsrs	r3, r1
   1c260:	07d8      	lsls	r0, r3, #31
   1c262:	d4e3      	bmi.n	1c22c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c264:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c268:	d1e0      	bne.n	1c22c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1c26a:	0962      	lsrs	r2, r4, #5
   1c26c:	f004 031f 	and.w	r3, r4, #31
   1c270:	d014      	beq.n	1c29c <gpio_nrfx_pin_interrupt_configure+0xac>
   1c272:	2a01      	cmp	r2, #1
   1c274:	d104      	bne.n	1c280 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1c276:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c27a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c27c:	07d1      	lsls	r1, r2, #31
   1c27e:	d414      	bmi.n	1c2aa <gpio_nrfx_pin_interrupt_configure+0xba>
   1c280:	4919      	ldr	r1, [pc, #100]	; (1c2e8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c282:	481a      	ldr	r0, [pc, #104]	; (1c2ec <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1c284:	f240 2347 	movw	r3, #583	; 0x247
   1c288:	4a19      	ldr	r2, [pc, #100]	; (1c2f0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c28a:	f00e fa26 	bl	2a6da <assert_print>
   1c28e:	f240 2147 	movw	r1, #583	; 0x247
   1c292:	4817      	ldr	r0, [pc, #92]	; (1c2f0 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1c294:	f00e fa1a 	bl	2a6cc <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c298:	2303      	movs	r3, #3
   1c29a:	e7dd      	b.n	1c258 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1c29c:	f04f 32ff 	mov.w	r2, #4294967295
   1c2a0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c2a2:	07d2      	lsls	r2, r2, #31
   1c2a4:	d5ec      	bpl.n	1c280 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1c2a6:	4a13      	ldr	r2, [pc, #76]	; (1c2f4 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1c2a8:	e000      	b.n	1c2ac <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1c2aa:	4a13      	ldr	r2, [pc, #76]	; (1c2f8 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c2ac:	3380      	adds	r3, #128	; 0x80
   1c2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c2b2:	07db      	lsls	r3, r3, #31
   1c2b4:	d4ba      	bmi.n	1c22c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c2b6:	f10d 0507 	add.w	r5, sp, #7
   1c2ba:	4629      	mov	r1, r5
   1c2bc:	4620      	mov	r0, r4
   1c2be:	f003 f8f7 	bl	1f4b0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c2c2:	4b0e      	ldr	r3, [pc, #56]	; (1c2fc <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1c2c4:	4298      	cmp	r0, r3
   1c2c6:	d001      	beq.n	1c2cc <gpio_nrfx_pin_interrupt_configure+0xdc>
		trigger_config.p_in_channel = &ch;
   1c2c8:	9503      	str	r5, [sp, #12]
   1c2ca:	e7af      	b.n	1c22c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c2cc:	4628      	mov	r0, r5
   1c2ce:	f003 f94f 	bl	1f570 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c2d2:	4b04      	ldr	r3, [pc, #16]	; (1c2e4 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c2d4:	4298      	cmp	r0, r3
   1c2d6:	d0f7      	beq.n	1c2c8 <gpio_nrfx_pin_interrupt_configure+0xd8>
				return -ENOMEM;
   1c2d8:	f06f 000b 	mvn.w	r0, #11
   1c2dc:	e797      	b.n	1c20e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c2de:	f06f 0015 	mvn.w	r0, #21
   1c2e2:	e794      	b.n	1c20e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c2e4:	0bad0000 	.word	0x0bad0000
   1c2e8:	00036c60 	.word	0x00036c60
   1c2ec:	00032679 	.word	0x00032679
   1c2f0:	00036c2d 	.word	0x00036c2d
   1c2f4:	40842500 	.word	0x40842500
   1c2f8:	40842800 	.word	0x40842800
   1c2fc:	0bad0004 	.word	0x0bad0004

0001c300 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c300:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c302:	f003 f925 	bl	1f550 <nrfx_gpiote_is_init>
   1c306:	4604      	mov	r4, r0
   1c308:	b968      	cbnz	r0, 1c326 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c30a:	f003 f8f9 	bl	1f500 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c30e:	4b08      	ldr	r3, [pc, #32]	; (1c330 <gpio_nrfx_init+0x30>)
   1c310:	4298      	cmp	r0, r3
   1c312:	d10a      	bne.n	1c32a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c314:	4621      	mov	r1, r4
   1c316:	4807      	ldr	r0, [pc, #28]	; (1c334 <gpio_nrfx_init+0x34>)
   1c318:	f003 f8c4 	bl	1f4a4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c31c:	4622      	mov	r2, r4
   1c31e:	2105      	movs	r1, #5
   1c320:	202f      	movs	r0, #47	; 0x2f
   1c322:	f7f4 fbbb 	bl	10a9c <z_arm_irq_priority_set>
		return 0;
   1c326:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c328:	bd10      	pop	{r4, pc}
		return -EIO;
   1c32a:	f06f 0004 	mvn.w	r0, #4
   1c32e:	e7fb      	b.n	1c328 <gpio_nrfx_init+0x28>
   1c330:	0bad0000 	.word	0x0bad0000
   1c334:	0001c339 	.word	0x0001c339

0001c338 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c338:	0942      	lsrs	r2, r0, #5
{
   1c33a:	4603      	mov	r3, r0
   1c33c:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c33e:	d002      	beq.n	1c346 <nrfx_gpio_handler+0xe>
   1c340:	2a01      	cmp	r2, #1
   1c342:	d01e      	beq.n	1c382 <nrfx_gpio_handler+0x4a>
}
   1c344:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c346:	4e14      	ldr	r6, [pc, #80]	; (1c398 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c348:	6932      	ldr	r2, [r6, #16]
   1c34a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c34c:	2900      	cmp	r1, #0
   1c34e:	d0f9      	beq.n	1c344 <nrfx_gpio_handler+0xc>
   1c350:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1c352:	f003 031f 	and.w	r3, r3, #31
	return node->next;
   1c356:	680c      	ldr	r4, [r1, #0]
   1c358:	409d      	lsls	r5, r3
   1c35a:	2900      	cmp	r1, #0
   1c35c:	d0f2      	beq.n	1c344 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1c35e:	688a      	ldr	r2, [r1, #8]
   1c360:	402a      	ands	r2, r5
   1c362:	d012      	beq.n	1c38a <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1c364:	684b      	ldr	r3, [r1, #4]
   1c366:	b973      	cbnz	r3, 1c386 <nrfx_gpio_handler+0x4e>
   1c368:	490c      	ldr	r1, [pc, #48]	; (1c39c <nrfx_gpio_handler+0x64>)
   1c36a:	234d      	movs	r3, #77	; 0x4d
   1c36c:	4a0c      	ldr	r2, [pc, #48]	; (1c3a0 <nrfx_gpio_handler+0x68>)
   1c36e:	480d      	ldr	r0, [pc, #52]	; (1c3a4 <nrfx_gpio_handler+0x6c>)
   1c370:	f00e f9b3 	bl	2a6da <assert_print>
   1c374:	480c      	ldr	r0, [pc, #48]	; (1c3a8 <nrfx_gpio_handler+0x70>)
   1c376:	f00e f9b0 	bl	2a6da <assert_print>
   1c37a:	214d      	movs	r1, #77	; 0x4d
   1c37c:	4808      	ldr	r0, [pc, #32]	; (1c3a0 <nrfx_gpio_handler+0x68>)
   1c37e:	f00e f9a5 	bl	2a6cc <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c382:	4e0a      	ldr	r6, [pc, #40]	; (1c3ac <nrfx_gpio_handler+0x74>)
   1c384:	e7e0      	b.n	1c348 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c386:	4630      	mov	r0, r6
   1c388:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c38a:	b11c      	cbz	r4, 1c394 <nrfx_gpio_handler+0x5c>
   1c38c:	6823      	ldr	r3, [r4, #0]
   1c38e:	4621      	mov	r1, r4
   1c390:	461c      	mov	r4, r3
   1c392:	e7e2      	b.n	1c35a <nrfx_gpio_handler+0x22>
   1c394:	4623      	mov	r3, r4
   1c396:	e7fa      	b.n	1c38e <nrfx_gpio_handler+0x56>
   1c398:	00030f6c 	.word	0x00030f6c
   1c39c:	0003798f 	.word	0x0003798f
   1c3a0:	00036bb9 	.word	0x00036bb9
   1c3a4:	00032679 	.word	0x00032679
   1c3a8:	00036c16 	.word	0x00036c16
   1c3ac:	00030f54 	.word	0x00030f54

0001c3b0 <gpio_nrfx_pin_configure>:
{
   1c3b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c3b4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c3b8:	f001 051f 	and.w	r5, r1, #31
   1c3bc:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   1c3c0:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c3c2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c3c6:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3c8:	4628      	mov	r0, r5
   1c3ca:	f10d 0103 	add.w	r1, sp, #3
   1c3ce:	f003 f86f 	bl	1f4b0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c3d2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c3d6:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c3d8:	d115      	bne.n	1c406 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c3da:	4628      	mov	r0, r5
   1c3dc:	f003 f962 	bl	1f6a4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c3e0:	4b48      	ldr	r3, [pc, #288]	; (1c504 <gpio_nrfx_pin_configure+0x154>)
   1c3e2:	429e      	cmp	r6, r3
   1c3e4:	d170      	bne.n	1c4c8 <gpio_nrfx_pin_configure+0x118>
			err = nrfx_gpiote_channel_free(ch);
   1c3e6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c3ea:	f003 f8bb 	bl	1f564 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c3ee:	42b0      	cmp	r0, r6
   1c3f0:	d06a      	beq.n	1c4c8 <gpio_nrfx_pin_configure+0x118>
   1c3f2:	4945      	ldr	r1, [pc, #276]	; (1c508 <gpio_nrfx_pin_configure+0x158>)
   1c3f4:	236a      	movs	r3, #106	; 0x6a
   1c3f6:	4a45      	ldr	r2, [pc, #276]	; (1c50c <gpio_nrfx_pin_configure+0x15c>)
   1c3f8:	4845      	ldr	r0, [pc, #276]	; (1c510 <gpio_nrfx_pin_configure+0x160>)
   1c3fa:	f00e f96e 	bl	2a6da <assert_print>
   1c3fe:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c400:	4842      	ldr	r0, [pc, #264]	; (1c50c <gpio_nrfx_pin_configure+0x15c>)
   1c402:	f00e f963 	bl	2a6cc <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c406:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c408:	4628      	mov	r0, r5
   1c40a:	4619      	mov	r1, r3
   1c40c:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c40e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c412:	f002 ff27 	bl	1f264 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c416:	4b3b      	ldr	r3, [pc, #236]	; (1c504 <gpio_nrfx_pin_configure+0x154>)
   1c418:	4298      	cmp	r0, r3
   1c41a:	d004      	beq.n	1c426 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1c41c:	f06f 0015 	mvn.w	r0, #21
}
   1c420:	b004      	add	sp, #16
   1c422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c426:	4286      	cmp	r6, r0
   1c428:	d10d      	bne.n	1c446 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1c42a:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c42e:	f003 f899 	bl	1f564 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c432:	42b0      	cmp	r0, r6
   1c434:	d007      	beq.n	1c446 <gpio_nrfx_pin_configure+0x96>
   1c436:	4934      	ldr	r1, [pc, #208]	; (1c508 <gpio_nrfx_pin_configure+0x158>)
   1c438:	237c      	movs	r3, #124	; 0x7c
   1c43a:	4a34      	ldr	r2, [pc, #208]	; (1c50c <gpio_nrfx_pin_configure+0x15c>)
   1c43c:	4834      	ldr	r0, [pc, #208]	; (1c510 <gpio_nrfx_pin_configure+0x160>)
   1c43e:	f00e f94c 	bl	2a6da <assert_print>
   1c442:	217c      	movs	r1, #124	; 0x7c
   1c444:	e7dc      	b.n	1c400 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1c446:	03a6      	lsls	r6, r4, #14
   1c448:	d54c      	bpl.n	1c4e4 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c44a:	f240 3306 	movw	r3, #774	; 0x306
   1c44e:	4023      	ands	r3, r4
   1c450:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c454:	d019      	beq.n	1c48a <gpio_nrfx_pin_configure+0xda>
   1c456:	d80c      	bhi.n	1c472 <gpio_nrfx_pin_configure+0xc2>
   1c458:	2b06      	cmp	r3, #6
   1c45a:	d017      	beq.n	1c48c <gpio_nrfx_pin_configure+0xdc>
   1c45c:	d804      	bhi.n	1c468 <gpio_nrfx_pin_configure+0xb8>
   1c45e:	b1ab      	cbz	r3, 1c48c <gpio_nrfx_pin_configure+0xdc>
   1c460:	2b02      	cmp	r3, #2
   1c462:	d1db      	bne.n	1c41c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1c464:	2304      	movs	r3, #4
   1c466:	e011      	b.n	1c48c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c46c:	d1d6      	bne.n	1c41c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1c46e:	2301      	movs	r3, #1
   1c470:	e00c      	b.n	1c48c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c472:	f240 2202 	movw	r2, #514	; 0x202
   1c476:	4293      	cmp	r3, r2
   1c478:	d028      	beq.n	1c4cc <gpio_nrfx_pin_configure+0x11c>
   1c47a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c47e:	d027      	beq.n	1c4d0 <gpio_nrfx_pin_configure+0x120>
   1c480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c484:	d1ca      	bne.n	1c41c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1c486:	2302      	movs	r3, #2
   1c488:	e000      	b.n	1c48c <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1c48a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c48c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c490:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c494:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c498:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c49a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   1c49e:	bf4c      	ite	mi
   1c4a0:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c4a2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c4a6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c4a8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c4ac:	d512      	bpl.n	1c4d4 <gpio_nrfx_pin_configure+0x124>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c4ae:	2301      	movs	r3, #1
   1c4b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c4b4:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1c4b6:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c4b8:	2200      	movs	r2, #0
   1c4ba:	4628      	mov	r0, r5
   1c4bc:	a901      	add	r1, sp, #4
   1c4be:	f002 ff79 	bl	1f3b4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c4c2:	4b10      	ldr	r3, [pc, #64]	; (1c504 <gpio_nrfx_pin_configure+0x154>)
   1c4c4:	4298      	cmp	r0, r3
   1c4c6:	d1a9      	bne.n	1c41c <gpio_nrfx_pin_configure+0x6c>
   1c4c8:	2000      	movs	r0, #0
   1c4ca:	e7a9      	b.n	1c420 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1c4cc:	2305      	movs	r3, #5
   1c4ce:	e7dd      	b.n	1c48c <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c4d0:	2303      	movs	r3, #3
   1c4d2:	e7db      	b.n	1c48c <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c4d4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c4d6:	bf41      	itttt	mi
   1c4d8:	2301      	movmi	r3, #1
   1c4da:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1c4de:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1c4e0:	60d3      	strmi	r3, [r2, #12]
}
   1c4e2:	e7e9      	b.n	1c4b8 <gpio_nrfx_pin_configure+0x108>
	if (flags & GPIO_PULL_UP) {
   1c4e4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4e6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   1c4ea:	bf4c      	ite	mi
   1c4ec:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
   1c4ee:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4f2:	461a      	mov	r2, r3
   1c4f4:	4628      	mov	r0, r5
   1c4f6:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   1c4f8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c4fc:	f002 feb2 	bl	1f264 <nrfx_gpiote_input_configure>
   1c500:	e7df      	b.n	1c4c2 <gpio_nrfx_pin_configure+0x112>
   1c502:	bf00      	nop
   1c504:	0bad0000 	.word	0x0bad0000
   1c508:	000335e8 	.word	0x000335e8
   1c50c:	00036c83 	.word	0x00036c83
   1c510:	00032679 	.word	0x00032679

0001c514 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1c514:	4603      	mov	r3, r0
   1c516:	b510      	push	{r4, lr}
   1c518:	460a      	mov	r2, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c51a:	7919      	ldrb	r1, [r3, #4]
   1c51c:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   1c51e:	6800      	ldr	r0, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c520:	fa03 f101 	lsl.w	r1, r3, r1
   1c524:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1c526:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c528:	681b      	ldr	r3, [r3, #0]
   1c52a:	4219      	tst	r1, r3
   1c52c:	d10e      	bne.n	1c54c <gpio_pin_set_dt.isra.0+0x38>
   1c52e:	490e      	ldr	r1, [pc, #56]	; (1c568 <gpio_pin_set_dt.isra.0+0x54>)
   1c530:	f240 533d 	movw	r3, #1341	; 0x53d
   1c534:	4a0d      	ldr	r2, [pc, #52]	; (1c56c <gpio_pin_set_dt.isra.0+0x58>)
   1c536:	480e      	ldr	r0, [pc, #56]	; (1c570 <gpio_pin_set_dt.isra.0+0x5c>)
   1c538:	f00e f8cf 	bl	2a6da <assert_print>
   1c53c:	480d      	ldr	r0, [pc, #52]	; (1c574 <gpio_pin_set_dt.isra.0+0x60>)
   1c53e:	f00e f8cc 	bl	2a6da <assert_print>
   1c542:	f240 513d 	movw	r1, #1341	; 0x53d
   1c546:	4809      	ldr	r0, [pc, #36]	; (1c56c <gpio_pin_set_dt.isra.0+0x58>)
   1c548:	f00e f8c0 	bl	2a6cc <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1c54c:	6823      	ldr	r3, [r4, #0]
   1c54e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1c550:	bf18      	it	ne
   1c552:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1c556:	b122      	cbz	r2, 1c562 <gpio_pin_set_dt.isra.0+0x4e>
	return api->port_set_bits_raw(port, pins);
   1c558:	6883      	ldr	r3, [r0, #8]
   1c55a:	68db      	ldr	r3, [r3, #12]
}
   1c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1c560:	4718      	bx	r3
   1c562:	6883      	ldr	r3, [r0, #8]
   1c564:	691b      	ldr	r3, [r3, #16]
   1c566:	e7f9      	b.n	1c55c <gpio_pin_set_dt.isra.0+0x48>
   1c568:	0003263b 	.word	0x0003263b
   1c56c:	0003260a 	.word	0x0003260a
   1c570:	00032679 	.word	0x00032679
   1c574:	00032696 	.word	0x00032696

0001c578 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
   1c578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c57c:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
   1c57e:	6844      	ldr	r4, [r0, #4]
{
   1c580:	af00      	add	r7, sp, #0
	struct spi_nrfx_data *dev_data = dev->data;
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1c582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	struct spi_nrfx_data *dev_data = dev->data;
   1c584:	6905      	ldr	r5, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c586:	2100      	movs	r1, #0
   1c588:	4630      	mov	r0, r6
   1c58a:	1d3a      	adds	r2, r7, #4
   1c58c:	f012 f961 	bl	2e852 <pinctrl_lookup_state>
	if (ret < 0) {
   1c590:	2800      	cmp	r0, #0
   1c592:	db32      	blt.n	1c5fa <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c594:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c596:	6832      	ldr	r2, [r6, #0]
   1c598:	7919      	ldrb	r1, [r3, #4]
   1c59a:	6818      	ldr	r0, [r3, #0]
   1c59c:	f012 f96c 	bl	2e878 <pinctrl_configure_pins>
	if (err < 0) {
   1c5a0:	2800      	cmp	r0, #0
   1c5a2:	db2a      	blt.n	1c5fa <spi_nrfx_init+0x82>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c5a4:	2601      	movs	r6, #1
		return err;
	}
#endif

	dev_config->irq_connect();
   1c5a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c5a8:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c5aa:	68ac      	ldr	r4, [r5, #8]
   1c5ac:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1c5b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1c5b4:	429c      	cmp	r4, r3
   1c5b6:	d304      	bcc.n	1c5c2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1c5b8:	4628      	mov	r0, r5
   1c5ba:	f011 fe2b 	bl	2e214 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   1c5be:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
   1c5c0:	e01b      	b.n	1c5fa <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
   1c5c2:	6820      	ldr	r0, [r4, #0]
   1c5c4:	f013 fd99 	bl	300fa <z_device_is_ready>
   1c5c8:	b9d8      	cbnz	r0, 1c602 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   1c5ca:	6823      	ldr	r3, [r4, #0]
   1c5cc:	6819      	ldr	r1, [r3, #0]
   1c5ce:	7923      	ldrb	r3, [r4, #4]
   1c5d0:	466c      	mov	r4, sp
   1c5d2:	b08a      	sub	sp, #40	; 0x28
   1c5d4:	466a      	mov	r2, sp
   1c5d6:	61d3      	str	r3, [r2, #28]
   1c5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c5dc:	4833      	ldr	r0, [pc, #204]	; (1c6ac <spi_nrfx_init+0x134>)
   1c5de:	8413      	strh	r3, [r2, #32]
   1c5e0:	4b33      	ldr	r3, [pc, #204]	; (1c6b0 <spi_nrfx_init+0x138>)
   1c5e2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1c5e6:	4833      	ldr	r0, [pc, #204]	; (1c6b4 <spi_nrfx_init+0x13c>)
   1c5e8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c5ec:	f842 3f10 	str.w	r3, [r2, #16]!
   1c5f0:	f011 fdeb 	bl	2e1ca <z_log_msg_static_create.constprop.0>
			return -ENODEV;
   1c5f4:	f06f 0012 	mvn.w	r0, #18
   1c5f8:	46a5      	mov	sp, r4
#endif
}
   1c5fa:	370c      	adds	r7, #12
   1c5fc:	46bd      	mov	sp, r7
   1c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
   1c602:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1c604:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   1c606:	88e3      	ldrh	r3, [r4, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c608:	f003 0230 	and.w	r2, r3, #48	; 0x30
   1c60c:	2a30      	cmp	r2, #48	; 0x30
	struct gpio_driver_data *data =
   1c60e:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__unused const struct gpio_driver_config *const cfg =
   1c612:	e9d0 c901 	ldrd	ip, r9, [r0, #4]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1c616:	d10e      	bne.n	1c636 <spi_nrfx_init+0xbe>
   1c618:	4927      	ldr	r1, [pc, #156]	; (1c6b8 <spi_nrfx_init+0x140>)
   1c61a:	f240 23b7 	movw	r3, #695	; 0x2b7
   1c61e:	4a27      	ldr	r2, [pc, #156]	; (1c6bc <spi_nrfx_init+0x144>)
   1c620:	4827      	ldr	r0, [pc, #156]	; (1c6c0 <spi_nrfx_init+0x148>)
   1c622:	f00e f85a 	bl	2a6da <assert_print>
   1c626:	4827      	ldr	r0, [pc, #156]	; (1c6c4 <spi_nrfx_init+0x14c>)
   1c628:	f00e f857 	bl	2a6da <assert_print>
   1c62c:	f240 21b7 	movw	r1, #695	; 0x2b7
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1c630:	4822      	ldr	r0, [pc, #136]	; (1c6bc <spi_nrfx_init+0x144>)
   1c632:	f00e f84b 	bl	2a6cc <assert_post_action>
   1c636:	f003 0206 	and.w	r2, r3, #6
   1c63a:	2a04      	cmp	r2, #4
   1c63c:	d109      	bne.n	1c652 <spi_nrfx_init+0xda>
   1c63e:	4922      	ldr	r1, [pc, #136]	; (1c6c8 <spi_nrfx_init+0x150>)
   1c640:	f240 23bf 	movw	r3, #703	; 0x2bf
   1c644:	4a1d      	ldr	r2, [pc, #116]	; (1c6bc <spi_nrfx_init+0x144>)
   1c646:	481e      	ldr	r0, [pc, #120]	; (1c6c0 <spi_nrfx_init+0x148>)
   1c648:	f00e f847 	bl	2a6da <assert_print>
   1c64c:	f240 21bf 	movw	r1, #703	; 0x2bf
   1c650:	e7ee      	b.n	1c630 <spi_nrfx_init+0xb8>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c652:	f8dc c000 	ldr.w	ip, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1c656:	07da      	lsls	r2, r3, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c658:	fa06 fe01 	lsl.w	lr, r6, r1
	return gpio_pin_configure(spec->port,
   1c65c:	bf54      	ite	pl
   1c65e:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1c662:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c666:	ea1e 0f0c 	tst.w	lr, ip
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1c66a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1c66e:	d10c      	bne.n	1c68a <spi_nrfx_init+0x112>
   1c670:	4916      	ldr	r1, [pc, #88]	; (1c6cc <spi_nrfx_init+0x154>)
   1c672:	f240 23d2 	movw	r3, #722	; 0x2d2
   1c676:	4a11      	ldr	r2, [pc, #68]	; (1c6bc <spi_nrfx_init+0x144>)
   1c678:	4811      	ldr	r0, [pc, #68]	; (1c6c0 <spi_nrfx_init+0x148>)
   1c67a:	f00e f82e 	bl	2a6da <assert_print>
   1c67e:	4814      	ldr	r0, [pc, #80]	; (1c6d0 <spi_nrfx_init+0x158>)
   1c680:	f00e f82b 	bl	2a6da <assert_print>
   1c684:	f240 21d2 	movw	r1, #722	; 0x2d2
   1c688:	e7d2      	b.n	1c630 <spi_nrfx_init+0xb8>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c68a:	f8d8 c000 	ldr.w	ip, [r8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1c68e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1c690:	bf4c      	ite	mi
   1c692:	ea4c 030e 	orrmi.w	r3, ip, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1c696:	ea2c 030e 	bicpl.w	r3, ip, lr
   1c69a:	f8c8 3000 	str.w	r3, [r8]
	return api->pin_configure(port, pin, flags);
   1c69e:	f8d9 3000 	ldr.w	r3, [r9]
   1c6a2:	4798      	blx	r3
		if (ret < 0) {
   1c6a4:	2800      	cmp	r0, #0
   1c6a6:	dba8      	blt.n	1c5fa <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1c6a8:	3408      	adds	r4, #8
   1c6aa:	e77f      	b.n	1c5ac <spi_nrfx_init+0x34>
   1c6ac:	00036cc7 	.word	0x00036cc7
   1c6b0:	01000004 	.word	0x01000004
   1c6b4:	000315f4 	.word	0x000315f4
   1c6b8:	00032912 	.word	0x00032912
   1c6bc:	0003260a 	.word	0x0003260a
   1c6c0:	00032679 	.word	0x00032679
   1c6c4:	0003294b 	.word	0x0003294b
   1c6c8:	00032a0f 	.word	0x00032a0f
   1c6cc:	0003263b 	.word	0x0003263b
   1c6d0:	00032696 	.word	0x00032696

0001c6d4 <transfer_next_chunk>:
{
   1c6d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   1c6d6:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c6d8:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1c6da:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
   1c6dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	if (!ctx->tx_len) {
   1c6de:	b98d      	cbnz	r5, 1c704 <transfer_next_chunk+0x30>
	if (chunk_len > 0) {
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	d137      	bne.n	1c754 <transfer_next_chunk+0x80>
	int error = 0;
   1c6e4:	461d      	mov	r5, r3
	_spi_context_cs_control(ctx, on, false);
   1c6e6:	2200      	movs	r2, #0
   1c6e8:	4620      	mov	r0, r4
   1c6ea:	4611      	mov	r1, r2
   1c6ec:	f011 fd70 	bl	2e1d0 <_spi_context_cs_control>
	ctx->sync_status = status;
   1c6f0:	6425      	str	r5, [r4, #64]	; 0x40
	z_impl_k_sem_give(sem);
   1c6f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1c6f6:	f008 ff77 	bl	255e8 <z_impl_k_sem_give>
	dev_data->busy = false;
   1c6fa:	2300      	movs	r3, #0
   1c6fc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   1c700:	b004      	add	sp, #16
   1c702:	bd70      	pop	{r4, r5, r6, pc}
		const uint8_t *tx_buf = ctx->tx_buf;
   1c704:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
   1c706:	bb0b      	cbnz	r3, 1c74c <transfer_next_chunk+0x78>
	return !!(ctx->tx_buf && ctx->tx_len);
   1c708:	bb39      	cbnz	r1, 1c75a <transfer_next_chunk+0x86>
		if (chunk_len > MAX_CHUNK_LEN) {
   1c70a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c70e:	42aa      	cmp	r2, r5
   1c710:	bf28      	it	cs
   1c712:	462a      	movcs	r2, r5
   1c714:	6d63      	ldr	r3, [r4, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   1c716:	66a2      	str	r2, [r4, #104]	; 0x68
		xfer.p_tx_buffer = tx_buf;
   1c718:	9100      	str	r1, [sp, #0]
   1c71a:	b11b      	cbz	r3, 1c724 <transfer_next_chunk+0x50>
   1c71c:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1c71e:	2b00      	cmp	r3, #0
   1c720:	bf18      	it	ne
   1c722:	4613      	movne	r3, r2
   1c724:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1c726:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c728:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1c72a:	b11b      	cbz	r3, 1c734 <transfer_next_chunk+0x60>
   1c72c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c72e:	2b00      	cmp	r3, #0
   1c730:	bf18      	it	ne
   1c732:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c734:	2200      	movs	r2, #0
   1c736:	4669      	mov	r1, sp
   1c738:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1c73a:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   1c73c:	f003 ff56 	bl	205ec <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   1c740:	4b0d      	ldr	r3, [pc, #52]	; (1c778 <transfer_next_chunk+0xa4>)
   1c742:	4298      	cmp	r0, r3
   1c744:	d0dc      	beq.n	1c700 <transfer_next_chunk+0x2c>
			error = -EIO;
   1c746:	f06f 0504 	mvn.w	r5, #4
   1c74a:	e7cc      	b.n	1c6e6 <transfer_next_chunk+0x12>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1c74c:	429d      	cmp	r5, r3
   1c74e:	bf28      	it	cs
   1c750:	461d      	movcs	r5, r3
   1c752:	e7d9      	b.n	1c708 <transfer_next_chunk+0x34>
		const uint8_t *tx_buf = ctx->tx_buf;
   1c754:	461d      	mov	r5, r3
   1c756:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   1c758:	e7d7      	b.n	1c70a <transfer_next_chunk+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1c75a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   1c75e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1c762:	d0d2      	beq.n	1c70a <transfer_next_chunk+0x36>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   1c764:	2d08      	cmp	r5, #8
   1c766:	bf28      	it	cs
   1c768:	2508      	movcs	r5, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c76a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1c76c:	462a      	mov	r2, r5
   1c76e:	f013 ff0e 	bl	3058e <memcpy>
			tx_buf = dev_data->buffer;
   1c772:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1c774:	e7c9      	b.n	1c70a <transfer_next_chunk+0x36>
   1c776:	bf00      	nop
   1c778:	0bad0000 	.word	0x0bad0000

0001c77c <event_handler>:
{
   1c77c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c77e:	7803      	ldrb	r3, [r0, #0]
{
   1c780:	460c      	mov	r4, r1
   1c782:	b086      	sub	sp, #24
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1c784:	2b00      	cmp	r3, #0
   1c786:	d154      	bne.n	1c832 <event_handler+0xb6>
	if (!ctx->tx_len) {
   1c788:	6d8b      	ldr	r3, [r1, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c78a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   1c78c:	b15b      	cbz	r3, 1c7a6 <event_handler+0x2a>
	if (len > ctx->tx_len) {
   1c78e:	429a      	cmp	r2, r3
   1c790:	d91e      	bls.n	1c7d0 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
   1c792:	4b29      	ldr	r3, [pc, #164]	; (1c838 <event_handler+0xbc>)
   1c794:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c798:	9305      	str	r3, [sp, #20]
   1c79a:	2302      	movs	r3, #2
   1c79c:	4827      	ldr	r0, [pc, #156]	; (1c83c <event_handler+0xc0>)
   1c79e:	aa04      	add	r2, sp, #16
   1c7a0:	9304      	str	r3, [sp, #16]
   1c7a2:	f011 fd12 	bl	2e1ca <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
   1c7a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1c7a8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1c7aa:	b15b      	cbz	r3, 1c7c4 <event_handler+0x48>
	if (len > ctx->rx_len) {
   1c7ac:	429a      	cmp	r2, r3
   1c7ae:	d927      	bls.n	1c800 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
   1c7b0:	4b21      	ldr	r3, [pc, #132]	; (1c838 <event_handler+0xbc>)
   1c7b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c7b6:	9305      	str	r3, [sp, #20]
   1c7b8:	2302      	movs	r3, #2
   1c7ba:	4820      	ldr	r0, [pc, #128]	; (1c83c <event_handler+0xc0>)
   1c7bc:	aa04      	add	r2, sp, #16
   1c7be:	9304      	str	r3, [sp, #16]
   1c7c0:	f011 fd03 	bl	2e1ca <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   1c7c4:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   1c7c6:	b006      	add	sp, #24
   1c7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1c7cc:	f7ff bf82 	b.w	1c6d4 <transfer_next_chunk>
	ctx->tx_len -= len;
   1c7d0:	1a9b      	subs	r3, r3, r2
   1c7d2:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1c7d4:	b973      	cbnz	r3, 1c7f4 <event_handler+0x78>
		++ctx->current_tx;
   1c7d6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
			spi_context_get_next_buf(&ctx->current_tx,
   1c7d8:	f101 0258 	add.w	r2, r1, #88	; 0x58
		++ctx->current_tx;
   1c7dc:	3308      	adds	r3, #8
   1c7de:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   1c7e0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c7e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
		--ctx->tx_count;
   1c7e6:	3b01      	subs	r3, #1
   1c7e8:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1c7ea:	3148      	adds	r1, #72	; 0x48
   1c7ec:	f011 fcda 	bl	2e1a4 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   1c7f0:	6560      	str	r0, [r4, #84]	; 0x54
   1c7f2:	e7d8      	b.n	1c7a6 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
   1c7f4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1c7f6:	2b00      	cmp	r3, #0
   1c7f8:	d0d5      	beq.n	1c7a6 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
   1c7fa:	4413      	add	r3, r2
   1c7fc:	654b      	str	r3, [r1, #84]	; 0x54
   1c7fe:	e7d2      	b.n	1c7a6 <event_handler+0x2a>
	ctx->rx_len -= len;
   1c800:	1a9b      	subs	r3, r3, r2
   1c802:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   1c804:	b97b      	cbnz	r3, 1c826 <event_handler+0xaa>
		++ctx->current_rx;
   1c806:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			spi_context_get_next_buf(&ctx->current_rx,
   1c808:	f104 0260 	add.w	r2, r4, #96	; 0x60
		++ctx->current_rx;
   1c80c:	3308      	adds	r3, #8
   1c80e:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1c810:	6d23      	ldr	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c812:	f104 0150 	add.w	r1, r4, #80	; 0x50
		--ctx->rx_count;
   1c816:	3b01      	subs	r3, #1
   1c818:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   1c81a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1c81e:	f011 fcc1 	bl	2e1a4 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   1c822:	65e0      	str	r0, [r4, #92]	; 0x5c
   1c824:	e7ce      	b.n	1c7c4 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1c826:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1c828:	2b00      	cmp	r3, #0
   1c82a:	d0cb      	beq.n	1c7c4 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
   1c82c:	4413      	add	r3, r2
   1c82e:	65e3      	str	r3, [r4, #92]	; 0x5c
   1c830:	e7c8      	b.n	1c7c4 <event_handler+0x48>
}
   1c832:	b006      	add	sp, #24
   1c834:	bd10      	pop	{r4, pc}
   1c836:	bf00      	nop
   1c838:	00036ceb 	.word	0x00036ceb
   1c83c:	000315f4 	.word	0x000315f4

0001c840 <spi_nrfx_transceive>:
{
   1c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c844:	b08b      	sub	sp, #44	; 0x2c
   1c846:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c848:	888b      	ldrh	r3, [r1, #4]
   1c84a:	af00      	add	r7, sp, #0
   1c84c:	049b      	lsls	r3, r3, #18
   1c84e:	4680      	mov	r8, r0
   1c850:	460e      	mov	r6, r1
	struct spi_nrfx_data *dev_data = dev->data;
   1c852:	6904      	ldr	r4, [r0, #16]
{
   1c854:	60ba      	str	r2, [r7, #8]
   1c856:	d438      	bmi.n	1c8ca <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
   1c858:	f04f 32ff 	mov.w	r2, #4294967295
   1c85c:	f04f 33ff 	mov.w	r3, #4294967295
   1c860:	f104 0010 	add.w	r0, r4, #16
   1c864:	f008 ff04 	bl	25670 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1c868:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c86a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1c86e:	f8d8 9010 	ldr.w	r9, [r8, #16]
	uint32_t max_freq = dev_config->max_freq;
   1c872:	689d      	ldr	r5, [r3, #8]
	const struct spi_nrfx_config *dev_config = dev->config;
   1c874:	60fb      	str	r3, [r7, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   1c876:	f899 306d 	ldrb.w	r3, [r9, #109]	; 0x6d
   1c87a:	607b      	str	r3, [r7, #4]
   1c87c:	b123      	cbz	r3, 1c888 <spi_nrfx_transceive+0x48>
   1c87e:	f8d9 3000 	ldr.w	r3, [r9]
   1c882:	429e      	cmp	r6, r3
   1c884:	f000 80e8 	beq.w	1ca58 <spi_nrfx_transceive+0x218>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   1c888:	f8b6 c004 	ldrh.w	ip, [r6, #4]
   1c88c:	f41c 6f00 	tst.w	ip, #2048	; 0x800
   1c890:	d022      	beq.n	1c8d8 <spi_nrfx_transceive+0x98>
		LOG_ERR("Half-duplex not supported");
   1c892:	4ba8      	ldr	r3, [pc, #672]	; (1cb34 <spi_nrfx_transceive+0x2f4>)
		return -ENOTSUP;
   1c894:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
   1c898:	627b      	str	r3, [r7, #36]	; 0x24
   1c89a:	2302      	movs	r3, #2
   1c89c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c8a0:	48a5      	ldr	r0, [pc, #660]	; (1cb38 <spi_nrfx_transceive+0x2f8>)
   1c8a2:	623b      	str	r3, [r7, #32]
   1c8a4:	f107 0220 	add.w	r2, r7, #32
   1c8a8:	f011 fc8f 	bl	2e1ca <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1c8ac:	6823      	ldr	r3, [r4, #0]
   1c8ae:	889b      	ldrh	r3, [r3, #4]
   1c8b0:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   1c8b4:	d104      	bne.n	1c8c0 <spi_nrfx_transceive+0x80>
		ctx->owner = NULL;
   1c8b6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1c8b8:	f104 0010 	add.w	r0, r4, #16
   1c8bc:	f008 fe94 	bl	255e8 <z_impl_k_sem_give>
}
   1c8c0:	4628      	mov	r0, r5
   1c8c2:	372c      	adds	r7, #44	; 0x2c
   1c8c4:	46bd      	mov	sp, r7
   1c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1c8ca:	69a3      	ldr	r3, [r4, #24]
   1c8cc:	2b00      	cmp	r3, #0
   1c8ce:	d1c3      	bne.n	1c858 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1c8d0:	6863      	ldr	r3, [r4, #4]
   1c8d2:	4299      	cmp	r1, r3
   1c8d4:	d1c0      	bne.n	1c858 <spi_nrfx_transceive+0x18>
   1c8d6:	e7c8      	b.n	1c86a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1c8d8:	f01c 0f01 	tst.w	ip, #1
   1c8dc:	d016      	beq.n	1c90c <spi_nrfx_transceive+0xcc>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   1c8de:	466d      	mov	r5, sp
   1c8e0:	b088      	sub	sp, #32
   1c8e2:	f8d8 3000 	ldr.w	r3, [r8]
   1c8e6:	466a      	mov	r2, sp
   1c8e8:	4994      	ldr	r1, [pc, #592]	; (1cb3c <spi_nrfx_transceive+0x2fc>)
   1c8ea:	4893      	ldr	r0, [pc, #588]	; (1cb38 <spi_nrfx_transceive+0x2f8>)
   1c8ec:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c8f0:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c8f4:	8393      	strh	r3, [r2, #28]
   1c8f6:	4b92      	ldr	r3, [pc, #584]	; (1cb40 <spi_nrfx_transceive+0x300>)
   1c8f8:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1c8fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c900:	f011 fc63 	bl	2e1ca <z_log_msg_static_create.constprop.0>
   1c904:	46ad      	mov	sp, r5
		return -EINVAL;
   1c906:	f06f 0515 	mvn.w	r5, #21
   1c90a:	e7cf      	b.n	1c8ac <spi_nrfx_transceive+0x6c>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1c90c:	f01c 0f08 	tst.w	ip, #8
   1c910:	d00b      	beq.n	1c92a <spi_nrfx_transceive+0xea>
		LOG_ERR("Loopback mode is not supported");
   1c912:	4b8c      	ldr	r3, [pc, #560]	; (1cb44 <spi_nrfx_transceive+0x304>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c914:	627b      	str	r3, [r7, #36]	; 0x24
   1c916:	2302      	movs	r3, #2
   1c918:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c91c:	4886      	ldr	r0, [pc, #536]	; (1cb38 <spi_nrfx_transceive+0x2f8>)
   1c91e:	623b      	str	r3, [r7, #32]
   1c920:	f107 0220 	add.w	r2, r7, #32
   1c924:	f011 fc51 	bl	2e1ca <z_log_msg_static_create.constprop.0>
	if (error == 0) {
   1c928:	e7ed      	b.n	1c906 <spi_nrfx_transceive+0xc6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1c92a:	f3cc 1345 	ubfx	r3, ip, #5, #6
   1c92e:	2b08      	cmp	r3, #8
   1c930:	d001      	beq.n	1c936 <spi_nrfx_transceive+0xf6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   1c932:	4b85      	ldr	r3, [pc, #532]	; (1cb48 <spi_nrfx_transceive+0x308>)
   1c934:	e7ee      	b.n	1c914 <spi_nrfx_transceive+0xd4>
	if (spi_cfg->frequency < 125000) {
   1c936:	6833      	ldr	r3, [r6, #0]
   1c938:	603b      	str	r3, [r7, #0]
   1c93a:	683a      	ldr	r2, [r7, #0]
   1c93c:	4b83      	ldr	r3, [pc, #524]	; (1cb4c <spi_nrfx_transceive+0x30c>)
   1c93e:	429a      	cmp	r2, r3
   1c940:	d801      	bhi.n	1c946 <spi_nrfx_transceive+0x106>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1c942:	4b83      	ldr	r3, [pc, #524]	; (1cb50 <spi_nrfx_transceive+0x310>)
   1c944:	e7e6      	b.n	1c914 <spi_nrfx_transceive+0xd4>
	if (max_freq > 16000000 &&
   1c946:	4b83      	ldr	r3, [pc, #524]	; (1cb54 <spi_nrfx_transceive+0x314>)
   1c948:	429d      	cmp	r5, r3
   1c94a:	d906      	bls.n	1c95a <spi_nrfx_transceive+0x11a>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   1c94c:	4a82      	ldr	r2, [pc, #520]	; (1cb58 <spi_nrfx_transceive+0x318>)
   1c94e:	f8d2 2558 	ldr.w	r2, [r2, #1368]	; 0x558
		max_freq = 16000000;
   1c952:	f012 0f03 	tst.w	r2, #3
   1c956:	bf18      	it	ne
   1c958:	461d      	movne	r5, r3
	config = dev_config->def_config;
   1c95a:	68fb      	ldr	r3, [r7, #12]
   1c95c:	f107 0e10 	add.w	lr, r7, #16
   1c960:	f103 0b0c 	add.w	fp, r3, #12
   1c964:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   1c968:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c96c:	683b      	ldr	r3, [r7, #0]
	config = dev_config->def_config;
   1c96e:	e89b 0003 	ldmia.w	fp, {r0, r1}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c972:	42ab      	cmp	r3, r5
   1c974:	bf28      	it	cs
   1c976:	462b      	movcs	r3, r5
   1c978:	461d      	mov	r5, r3
	if (frequency < 250000) {
   1c97a:	4b78      	ldr	r3, [pc, #480]	; (1cb5c <spi_nrfx_transceive+0x31c>)
	config = dev_config->def_config;
   1c97c:	e88e 0003 	stmia.w	lr, {r0, r1}
	if (frequency < 250000) {
   1c980:	429d      	cmp	r5, r3
   1c982:	d94b      	bls.n	1ca1c <spi_nrfx_transceive+0x1dc>
	} else if (frequency < 500000) {
   1c984:	4b76      	ldr	r3, [pc, #472]	; (1cb60 <spi_nrfx_transceive+0x320>)
   1c986:	429d      	cmp	r5, r3
   1c988:	d94b      	bls.n	1ca22 <spi_nrfx_transceive+0x1e2>
	} else if (frequency < 1000000) {
   1c98a:	4b76      	ldr	r3, [pc, #472]	; (1cb64 <spi_nrfx_transceive+0x324>)
   1c98c:	429d      	cmp	r5, r3
   1c98e:	d94b      	bls.n	1ca28 <spi_nrfx_transceive+0x1e8>
	} else if (frequency < 2000000) {
   1c990:	4b75      	ldr	r3, [pc, #468]	; (1cb68 <spi_nrfx_transceive+0x328>)
   1c992:	429d      	cmp	r5, r3
   1c994:	d94b      	bls.n	1ca2e <spi_nrfx_transceive+0x1ee>
	} else if (frequency < 4000000) {
   1c996:	4b75      	ldr	r3, [pc, #468]	; (1cb6c <spi_nrfx_transceive+0x32c>)
   1c998:	429d      	cmp	r5, r3
   1c99a:	d94b      	bls.n	1ca34 <spi_nrfx_transceive+0x1f4>
	} else if (frequency < 8000000) {
   1c99c:	4b74      	ldr	r3, [pc, #464]	; (1cb70 <spi_nrfx_transceive+0x330>)
   1c99e:	429d      	cmp	r5, r3
   1c9a0:	d34b      	bcc.n	1ca3a <spi_nrfx_transceive+0x1fa>
	} else if (frequency < 16000000) {
   1c9a2:	4b6c      	ldr	r3, [pc, #432]	; (1cb54 <spi_nrfx_transceive+0x314>)
   1c9a4:	429d      	cmp	r5, r3
   1c9a6:	d34b      	bcc.n	1ca40 <spi_nrfx_transceive+0x200>
		return NRF_SPIM_FREQ_16M;
   1c9a8:	4b72      	ldr	r3, [pc, #456]	; (1cb74 <spi_nrfx_transceive+0x334>)
   1c9aa:	429d      	cmp	r5, r3
   1c9ac:	bf2c      	ite	cs
   1c9ae:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
   1c9b2:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c9b6:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   1c9ba:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1c9bc:	f00c 0304 	and.w	r3, ip, #4
   1c9c0:	d041      	beq.n	1ca46 <spi_nrfx_transceive+0x206>
			return NRF_SPIM_MODE_2;
   1c9c2:	2b00      	cmp	r3, #0
   1c9c4:	bf14      	ite	ne
   1c9c6:	2303      	movne	r3, #3
   1c9c8:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   1c9ca:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
   1c9cc:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
   1c9ce:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   1c9d2:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
   1c9d6:	b12b      	cbz	r3, 1c9e4 <spi_nrfx_transceive+0x1a4>
		nrfx_spim_uninit(&dev_config->spim);
   1c9d8:	68f8      	ldr	r0, [r7, #12]
   1c9da:	f003 fd9d 	bl	20518 <nrfx_spim_uninit>
		dev_data->initialized = false;
   1c9de:	2300      	movs	r3, #0
   1c9e0:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
   1c9e4:	464b      	mov	r3, r9
   1c9e6:	4a64      	ldr	r2, [pc, #400]	; (1cb78 <spi_nrfx_transceive+0x338>)
   1c9e8:	68f8      	ldr	r0, [r7, #12]
   1c9ea:	f107 0110 	add.w	r1, r7, #16
   1c9ee:	f003 fc61 	bl	202b4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   1c9f2:	4b62      	ldr	r3, [pc, #392]	; (1cb7c <spi_nrfx_transceive+0x33c>)
   1c9f4:	4298      	cmp	r0, r3
   1c9f6:	d02a      	beq.n	1ca4e <spi_nrfx_transceive+0x20e>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   1c9f8:	466d      	mov	r5, sp
   1c9fa:	b088      	sub	sp, #32
   1c9fc:	466a      	mov	r2, sp
   1c9fe:	4b60      	ldr	r3, [pc, #384]	; (1cb80 <spi_nrfx_transceive+0x340>)
   1ca00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ca04:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ca08:	2303      	movs	r3, #3
   1ca0a:	484b      	ldr	r0, [pc, #300]	; (1cb38 <spi_nrfx_transceive+0x2f8>)
   1ca0c:	f842 3f10 	str.w	r3, [r2, #16]!
   1ca10:	f011 fbdb 	bl	2e1ca <z_log_msg_static_create.constprop.0>
   1ca14:	46ad      	mov	sp, r5
		return -EIO;
   1ca16:	f06f 0504 	mvn.w	r5, #4
   1ca1a:	e747      	b.n	1c8ac <spi_nrfx_transceive+0x6c>
		return NRF_SPIM_FREQ_125K;
   1ca1c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   1ca20:	e7c9      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_250K;
   1ca22:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   1ca26:	e7c6      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_500K;
   1ca28:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1ca2c:	e7c3      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_1M;
   1ca2e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca32:	e7c0      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_2M;
   1ca34:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   1ca38:	e7bd      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_4M;
   1ca3a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1ca3e:	e7ba      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		return NRF_SPIM_FREQ_8M;
   1ca40:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1ca44:	e7b7      	b.n	1c9b6 <spi_nrfx_transceive+0x176>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   1ca46:	3b00      	subs	r3, #0
   1ca48:	bf18      	it	ne
   1ca4a:	2301      	movne	r3, #1
   1ca4c:	e7bd      	b.n	1c9ca <spi_nrfx_transceive+0x18a>
	dev_data->initialized = true;
   1ca4e:	2301      	movs	r3, #1
	ctx->config = spi_cfg;
   1ca50:	f8c9 6000 	str.w	r6, [r9]
	dev_data->initialized = true;
   1ca54:	f889 306d 	strb.w	r3, [r9, #109]	; 0x6d
		dev_data->busy = true;
   1ca58:	2301      	movs	r3, #1
   1ca5a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1ca5e:	68bb      	ldr	r3, [r7, #8]
   1ca60:	2b00      	cmp	r3, #0
   1ca62:	d154      	bne.n	1cb0e <spi_nrfx_transceive+0x2ce>
   1ca64:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1ca66:	2300      	movs	r3, #0
   1ca68:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   1ca6a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   1ca6e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1ca72:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1ca76:	f011 fb95 	bl	2e1a4 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   1ca7a:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1ca7c:	f1ba 0f00 	cmp.w	sl, #0
   1ca80:	d14d      	bne.n	1cb1e <spi_nrfx_transceive+0x2de>
   1ca82:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1ca86:	2300      	movs	r3, #0
   1ca88:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   1ca8a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1ca8e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1ca92:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1ca96:	f011 fb85 	bl	2e1a4 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   1ca9a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   1ca9c:	2101      	movs	r1, #1
   1ca9e:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   1caa0:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   1caa2:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   1caa4:	4620      	mov	r0, r4
   1caa6:	f011 fb93 	bl	2e1d0 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1caaa:	4640      	mov	r0, r8
   1caac:	f7ff fe12 	bl	1c6d4 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1cab0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1cab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   1cab4:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1cab6:	429d      	cmp	r5, r3
   1cab8:	bf38      	it	cc
   1caba:	461d      	movcc	r5, r3
   1cabc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   1cac0:	435d      	muls	r5, r3
			     ctx->config->frequency;
   1cac2:	f858 3b28 	ldr.w	r3, [r8], #40
   1cac6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   1caca:	681b      	ldr	r3, [r3, #0]
   1cacc:	4631      	mov	r1, r6
   1cace:	fbb5 f5f3 	udiv	r5, r5, r3
   1cad2:	f240 30e7 	movw	r0, #999	; 0x3e7
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   1cad6:	35c8      	adds	r5, #200	; 0xc8
   1cad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cadc:	2300      	movs	r3, #0
   1cade:	fbe5 010c 	umlal	r0, r1, r5, ip
   1cae2:	f7ec fa05 	bl	8ef0 <__aeabi_uldivmod>
   1cae6:	4602      	mov	r2, r0
   1cae8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1caea:	4640      	mov	r0, r8
   1caec:	f008 fdc0 	bl	25670 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   1caf0:	b1e8      	cbz	r0, 1cb2e <spi_nrfx_transceive+0x2ee>
		LOG_ERR("Timeout waiting for transfer complete");
   1caf2:	4b24      	ldr	r3, [pc, #144]	; (1cb84 <spi_nrfx_transceive+0x344>)
   1caf4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1caf8:	627b      	str	r3, [r7, #36]	; 0x24
   1cafa:	2302      	movs	r3, #2
   1cafc:	480e      	ldr	r0, [pc, #56]	; (1cb38 <spi_nrfx_transceive+0x2f8>)
   1cafe:	623b      	str	r3, [r7, #32]
   1cb00:	f107 0220 	add.w	r2, r7, #32
   1cb04:	f011 fb61 	bl	2e1ca <z_log_msg_static_create.constprop.0>
		return -ETIMEDOUT;
   1cb08:	f06f 0573 	mvn.w	r5, #115	; 0x73
   1cb0c:	e6ce      	b.n	1c8ac <spi_nrfx_transceive+0x6c>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   1cb0e:	68bb      	ldr	r3, [r7, #8]
   1cb10:	681b      	ldr	r3, [r3, #0]
   1cb12:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   1cb14:	2b00      	cmp	r3, #0
   1cb16:	d0a6      	beq.n	1ca66 <spi_nrfx_transceive+0x226>
   1cb18:	68bb      	ldr	r3, [r7, #8]
   1cb1a:	685b      	ldr	r3, [r3, #4]
   1cb1c:	e7a4      	b.n	1ca68 <spi_nrfx_transceive+0x228>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   1cb1e:	f8da 3000 	ldr.w	r3, [sl]
   1cb22:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   1cb24:	2b00      	cmp	r3, #0
   1cb26:	d0ae      	beq.n	1ca86 <spi_nrfx_transceive+0x246>
   1cb28:	f8da 3004 	ldr.w	r3, [sl, #4]
   1cb2c:	e7ac      	b.n	1ca88 <spi_nrfx_transceive+0x248>
	status = ctx->sync_status;
   1cb2e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   1cb30:	e6bc      	b.n	1c8ac <spi_nrfx_transceive+0x6c>
   1cb32:	bf00      	nop
   1cb34:	00036d09 	.word	0x00036d09
   1cb38:	000315f4 	.word	0x000315f4
   1cb3c:	00036d23 	.word	0x00036d23
   1cb40:	01000003 	.word	0x01000003
   1cb44:	00036d45 	.word	0x00036d45
   1cb48:	00036d64 	.word	0x00036d64
   1cb4c:	0001e847 	.word	0x0001e847
   1cb50:	00036d93 	.word	0x00036d93
   1cb54:	00f42400 	.word	0x00f42400
   1cb58:	40005000 	.word	0x40005000
   1cb5c:	0003d08f 	.word	0x0003d08f
   1cb60:	0007a11f 	.word	0x0007a11f
   1cb64:	000f423f 	.word	0x000f423f
   1cb68:	001e847f 	.word	0x001e847f
   1cb6c:	003d08ff 	.word	0x003d08ff
   1cb70:	007a1200 	.word	0x007a1200
   1cb74:	01e84800 	.word	0x01e84800
   1cb78:	0001c77d 	.word	0x0001c77d
   1cb7c:	0bad0000 	.word	0x0bad0000
   1cb80:	00036dc4 	.word	0x00036dc4
   1cb84:	00036deb 	.word	0x00036deb

0001cb88 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1cb88:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1cb8c:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1cb90:	280a      	cmp	r0, #10
   1cb92:	bf9a      	itte	ls
   1cb94:	4b02      	ldrls	r3, [pc, #8]	; (1cba0 <qspi_get_zephyr_ret_code+0x18>)
   1cb96:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1cb9a:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1cb9e:	4770      	bx	lr
   1cba0:	000325f4 	.word	0x000325f4

0001cba4 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1cba4:	4b02      	ldr	r3, [pc, #8]	; (1cbb0 <qspi_nor_pages_layout+0xc>)
   1cba6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1cba8:	2301      	movs	r3, #1
   1cbaa:	6013      	str	r3, [r2, #0]
}
   1cbac:	4770      	bx	lr
   1cbae:	bf00      	nop
   1cbb0:	000323f8 	.word	0x000323f8

0001cbb4 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1cbb4:	4800      	ldr	r0, [pc, #0]	; (1cbb8 <qspi_flash_get_parameters+0x4>)
   1cbb6:	4770      	bx	lr
   1cbb8:	0003238c 	.word	0x0003238c

0001cbbc <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1cbbc:	4b05      	ldr	r3, [pc, #20]	; (1cbd4 <qspi_wait_for_completion.isra.0+0x18>)
   1cbbe:	4299      	cmp	r1, r3
   1cbc0:	d106      	bne.n	1cbd0 <qspi_wait_for_completion.isra.0+0x14>
   1cbc2:	f04f 32ff 	mov.w	r2, #4294967295
   1cbc6:	f04f 33ff 	mov.w	r3, #4294967295
   1cbca:	3030      	adds	r0, #48	; 0x30
   1cbcc:	f008 bd50 	b.w	25670 <z_impl_k_sem_take>
}
   1cbd0:	4770      	bx	lr
   1cbd2:	bf00      	nop
   1cbd4:	0bad0000 	.word	0x0bad0000

0001cbd8 <qspi_device_init>:
{
   1cbd8:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1cbda:	6905      	ldr	r5, [r0, #16]
{
   1cbdc:	4604      	mov	r4, r0
	if (!qspi_initialized) {
   1cbde:	4e0f      	ldr	r6, [pc, #60]	; (1cc1c <qspi_device_init+0x44>)
	qspi_lock(dev);
   1cbe0:	4628      	mov	r0, r5
   1cbe2:	f011 fb41 	bl	2e268 <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1cbe6:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1cbea:	f011 fb35 	bl	2e258 <k_sem_give>
	if (!qspi_initialized) {
   1cbee:	7833      	ldrb	r3, [r6, #0]
   1cbf0:	b98b      	cbnz	r3, 1cc16 <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1cbf2:	462a      	mov	r2, r5
   1cbf4:	490a      	ldr	r1, [pc, #40]	; (1cc20 <qspi_device_init+0x48>)
   1cbf6:	6860      	ldr	r0, [r4, #4]
   1cbf8:	f003 f8dc 	bl	1fdb4 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1cbfc:	f7ff ffc4 	bl	1cb88 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1cc00:	fab0 f380 	clz	r3, r0
   1cc04:	4605      	mov	r5, r0
   1cc06:	095b      	lsrs	r3, r3, #5
   1cc08:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1cc0a:	6920      	ldr	r0, [r4, #16]
   1cc0c:	3018      	adds	r0, #24
   1cc0e:	f011 fb23 	bl	2e258 <k_sem_give>
}
   1cc12:	4628      	mov	r0, r5
   1cc14:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1cc16:	2500      	movs	r5, #0
   1cc18:	e7f7      	b.n	1cc0a <qspi_device_init+0x32>
   1cc1a:	bf00      	nop
   1cc1c:	20022402 	.word	0x20022402
   1cc20:	0002e25d 	.word	0x0002e25d

0001cc24 <qspi_device_uninit>:
{
   1cc24:	b538      	push	{r3, r4, r5, lr}
   1cc26:	4604      	mov	r4, r0
	qspi_lock(dev);
   1cc28:	6900      	ldr	r0, [r0, #16]
   1cc2a:	f011 fb1d 	bl	2e268 <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1cc2e:	6925      	ldr	r5, [r4, #16]
   1cc30:	2200      	movs	r2, #0
   1cc32:	2300      	movs	r3, #0
   1cc34:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1cc38:	f008 fd1a 	bl	25670 <z_impl_k_sem_take>
	if (last) {
   1cc3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1cc3e:	b94b      	cbnz	r3, 1cc54 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1cc40:	4d0a      	ldr	r5, [pc, #40]	; (1cc6c <qspi_device_uninit+0x48>)
   1cc42:	f003 fa0b 	bl	2005c <nrfx_qspi_mem_busy_check>
   1cc46:	42a8      	cmp	r0, r5
   1cc48:	d10a      	bne.n	1cc60 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1cc4a:	f003 fa29 	bl	200a0 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1cc4e:	2200      	movs	r2, #0
   1cc50:	4b07      	ldr	r3, [pc, #28]	; (1cc70 <qspi_device_uninit+0x4c>)
   1cc52:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1cc54:	6920      	ldr	r0, [r4, #16]
}
   1cc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1cc5a:	3018      	adds	r0, #24
   1cc5c:	f011 bafc 	b.w	2e258 <k_sem_give>
	return z_impl_k_sleep(timeout);
   1cc60:	2100      	movs	r1, #0
   1cc62:	f240 6067 	movw	r0, #1639	; 0x667
   1cc66:	f00a fbb3 	bl	273d0 <z_impl_k_sleep>
   1cc6a:	e7ea      	b.n	1cc42 <qspi_device_uninit+0x1e>
   1cc6c:	0bad0000 	.word	0x0bad0000
   1cc70:	20022402 	.word	0x20022402

0001cc74 <qspi_send_cmd>:
{
   1cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc76:	b083      	sub	sp, #12
	if (cmd->tx_buf) {
   1cc78:	684c      	ldr	r4, [r1, #4]
{
   1cc7a:	4605      	mov	r5, r0
   1cc7c:	af00      	add	r7, sp, #0
	if (cmd->tx_buf) {
   1cc7e:	b174      	cbz	r4, 1cc9e <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   1cc80:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1cc84:	6888      	ldr	r0, [r1, #8]
   1cc86:	b310      	cbz	r0, 1ccce <qspi_send_cmd+0x5a>
		rx_len = cmd->rx_buf->len;
   1cc88:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1cc8c:	b300      	cbz	r0, 1ccd0 <qspi_send_cmd+0x5c>
   1cc8e:	b1fb      	cbz	r3, 1ccd0 <qspi_send_cmd+0x5c>
		if (rx_len != tx_len) {
   1cc90:	4298      	cmp	r0, r3
   1cc92:	d006      	beq.n	1cca2 <qspi_send_cmd+0x2e>
		return -EINVAL;
   1cc94:	f06f 0015 	mvn.w	r0, #21
}
   1cc98:	370c      	adds	r7, #12
   1cc9a:	46bd      	mov	sp, r7
   1cc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1cc9e:	4623      	mov	r3, r4
   1cca0:	e7f0      	b.n	1cc84 <qspi_send_cmd+0x10>
		xfer_len += tx_len;
   1cca2:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1cca4:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1cca6:	7809      	ldrb	r1, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1cca8:	d915      	bls.n	1ccd6 <qspi_send_cmd+0x62>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1ccaa:	466c      	mov	r4, sp
   1ccac:	b088      	sub	sp, #32
   1ccae:	466a      	mov	r2, sp
   1ccb0:	61d3      	str	r3, [r2, #28]
   1ccb2:	2304      	movs	r3, #4
   1ccb4:	4814      	ldr	r0, [pc, #80]	; (1cd08 <qspi_send_cmd+0x94>)
   1ccb6:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1ccba:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccbe:	2300      	movs	r3, #0
   1ccc0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1ccc4:	4811      	ldr	r0, [pc, #68]	; (1cd0c <qspi_send_cmd+0x98>)
   1ccc6:	f7f1 fdf3 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1ccca:	46a5      	mov	sp, r4
		return -EINVAL;
   1cccc:	e7e2      	b.n	1cc94 <qspi_send_cmd+0x20>
	void *rx_buf = NULL;
   1ccce:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1ccd0:	3301      	adds	r3, #1
   1ccd2:	4403      	add	r3, r0
   1ccd4:	e7e6      	b.n	1cca4 <qspi_send_cmd+0x30>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1ccd6:	707b      	strb	r3, [r7, #1]
   1ccd8:	f240 1301 	movw	r3, #257	; 0x101
   1ccdc:	807b      	strh	r3, [r7, #2]
   1ccde:	2300      	movs	r3, #0
	qspi_lock(dev);
   1cce0:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1cce2:	713b      	strb	r3, [r7, #4]
   1cce4:	7039      	strb	r1, [r7, #0]
   1cce6:	717a      	strb	r2, [r7, #5]
	qspi_lock(dev);
   1cce8:	f011 fabe 	bl	2e268 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1ccec:	4621      	mov	r1, r4
   1ccee:	4632      	mov	r2, r6
   1ccf0:	4638      	mov	r0, r7
   1ccf2:	f003 f951 	bl	1ff98 <nrfx_qspi_cinstr_xfer>
   1ccf6:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1ccf8:	6928      	ldr	r0, [r5, #16]
   1ccfa:	3018      	adds	r0, #24
   1ccfc:	f011 faac 	bl	2e258 <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1cd00:	4620      	mov	r0, r4
   1cd02:	f7ff ff41 	bl	1cb88 <qspi_get_zephyr_ret_code>
   1cd06:	e7c7      	b.n	1cc98 <qspi_send_cmd+0x24>
   1cd08:	00036e28 	.word	0x00036e28
   1cd0c:	000315dc 	.word	0x000315dc

0001cd10 <qspi_nor_init>:
{
   1cd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   1cd14:	2202      	movs	r2, #2
   1cd16:	b086      	sub	sp, #24
   1cd18:	4b6a      	ldr	r3, [pc, #424]	; (1cec4 <qspi_nor_init+0x1b4>)
   1cd1a:	af00      	add	r7, sp, #0
   1cd1c:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1cd20:	6843      	ldr	r3, [r0, #4]
{
   1cd22:	4605      	mov	r5, r0
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1cd24:	6a1e      	ldr	r6, [r3, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   1cd26:	2100      	movs	r1, #0
   1cd28:	4630      	mov	r0, r6
   1cd2a:	f107 020c 	add.w	r2, r7, #12
   1cd2e:	f011 fd90 	bl	2e852 <pinctrl_lookup_state>
	if (ret < 0) {
   1cd32:	1e04      	subs	r4, r0, #0
   1cd34:	db3a      	blt.n	1cdac <qspi_nor_init+0x9c>
	return pinctrl_apply_state_direct(config, state);
   1cd36:	68fb      	ldr	r3, [r7, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cd38:	6832      	ldr	r2, [r6, #0]
   1cd3a:	7919      	ldrb	r1, [r3, #4]
   1cd3c:	6818      	ldr	r0, [r3, #0]
   1cd3e:	f011 fd9b 	bl	2e878 <pinctrl_configure_pins>
	if (ret < 0) {
   1cd42:	1e04      	subs	r4, r0, #0
   1cd44:	db32      	blt.n	1cdac <qspi_nor_init+0x9c>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1cd46:	2200      	movs	r2, #0
   1cd48:	2101      	movs	r1, #1
   1cd4a:	202b      	movs	r0, #43	; 0x2b
   1cd4c:	f7f3 fea6 	bl	10a9c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1cd50:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1cd52:	692a      	ldr	r2, [r5, #16]
   1cd54:	4630      	mov	r0, r6
   1cd56:	495c      	ldr	r1, [pc, #368]	; (1cec8 <qspi_nor_init+0x1b8>)
   1cd58:	f003 f82c 	bl	1fdb4 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1cd5c:	f7ff ff14 	bl	1cb88 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1cd60:	1e04      	subs	r4, r0, #0
   1cd62:	db23      	blt.n	1cdac <qspi_nor_init+0x9c>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1cd64:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1cd66:	3b02      	subs	r3, #2
   1cd68:	2b01      	cmp	r3, #1
   1cd6a:	d924      	bls.n	1cdb6 <qspi_nor_init+0xa6>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1cd6c:	f896 800a 	ldrb.w	r8, [r6, #10]
   1cd70:	f1a8 0803 	sub.w	r8, r8, #3
   1cd74:	f1b8 0f01 	cmp.w	r8, #1
   1cd78:	bf8c      	ite	hi
   1cd7a:	f04f 0800 	movhi.w	r8, #0
   1cd7e:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1cd82:	4628      	mov	r0, r5
   1cd84:	f011 fa92 	bl	2e2ac <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1cd88:	1e04      	subs	r4, r0, #0
   1cd8a:	da17      	bge.n	1cdbc <qspi_nor_init+0xac>
			LOG_ERR("RDSR failed: %d", ret);
   1cd8c:	466d      	mov	r5, sp
   1cd8e:	b088      	sub	sp, #32
   1cd90:	466a      	mov	r2, sp
   1cd92:	4b4e      	ldr	r3, [pc, #312]	; (1cecc <qspi_nor_init+0x1bc>)
   1cd94:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1cd98:	2303      	movs	r3, #3
   1cd9a:	f842 3f10 	str.w	r3, [r2, #16]!
   1cd9e:	2300      	movs	r3, #0
   1cda0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cda4:	484a      	ldr	r0, [pc, #296]	; (1ced0 <qspi_nor_init+0x1c0>)
   1cda6:	f7f1 fd83 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1cdaa:	46ad      	mov	sp, r5
}
   1cdac:	4620      	mov	r0, r4
   1cdae:	3718      	adds	r7, #24
   1cdb0:	46bd      	mov	sp, r7
   1cdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1cdb6:	f04f 0801 	mov.w	r8, #1
   1cdba:	e7e2      	b.n	1cd82 <qspi_nor_init+0x72>
		uint8_t sr = (uint8_t)ret;
   1cdbc:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1cdbe:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1cdc2:	45a0      	cmp	r8, r4
   1cdc4:	f107 0604 	add.w	r6, r7, #4
   1cdc8:	d031      	beq.n	1ce2e <qspi_nor_init+0x11e>
	uint8_t sr_array[2] = {0};
   1cdca:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1cdcc:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1cdd0:	803b      	strh	r3, [r7, #0]
		sr_array[0] = sr_val;
   1cdd2:	703a      	strb	r2, [r7, #0]
	const struct qspi_buf sr_buf = {
   1cdd4:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
   1cdd6:	4628      	mov	r0, r5
	struct qspi_cmd cmd = {
   1cdd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	const struct qspi_buf sr_buf = {
   1cddc:	607f      	str	r7, [r7, #4]
	struct qspi_cmd cmd = {
   1cdde:	617b      	str	r3, [r7, #20]
   1cde0:	733a      	strb	r2, [r7, #12]
   1cde2:	613e      	str	r6, [r7, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1cde4:	f107 010c 	add.w	r1, r7, #12
   1cde8:	f7ff ff44 	bl	1cc74 <qspi_send_cmd>
	if (ret == 0) {
   1cdec:	1e04      	subs	r4, r0, #0
   1cdee:	d017      	beq.n	1ce20 <qspi_nor_init+0x110>
		if (ret < 0) {
   1cdf0:	dadc      	bge.n	1cdac <qspi_nor_init+0x9c>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1cdf2:	4a38      	ldr	r2, [pc, #224]	; (1ced4 <qspi_nor_init+0x1c4>)
   1cdf4:	4b38      	ldr	r3, [pc, #224]	; (1ced8 <qspi_nor_init+0x1c8>)
   1cdf6:	466d      	mov	r5, sp
   1cdf8:	b08a      	sub	sp, #40	; 0x28
   1cdfa:	f1b8 0f00 	cmp.w	r8, #0
   1cdfe:	bf18      	it	ne
   1ce00:	4613      	movne	r3, r2
   1ce02:	466a      	mov	r2, sp
   1ce04:	4935      	ldr	r1, [pc, #212]	; (1cedc <qspi_nor_init+0x1cc>)
   1ce06:	61d4      	str	r4, [r2, #28]
   1ce08:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1ce0c:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ce10:	8413      	strh	r3, [r2, #32]
   1ce12:	4b33      	ldr	r3, [pc, #204]	; (1cee0 <qspi_nor_init+0x1d0>)
   1ce14:	f842 3f10 	str.w	r3, [r2, #16]!
   1ce18:	2300      	movs	r3, #0
   1ce1a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ce1e:	e7c1      	b.n	1cda4 <qspi_nor_init+0x94>
		ret = qspi_rdsr(dev, 1);
   1ce20:	4628      	mov	r0, r5
   1ce22:	f011 fa43 	bl	2e2ac <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1ce26:	1e04      	subs	r4, r0, #0
   1ce28:	dbe3      	blt.n	1cdf2 <qspi_nor_init+0xe2>
   1ce2a:	07e3      	lsls	r3, r4, #31
   1ce2c:	d4f8      	bmi.n	1ce20 <qspi_nor_init+0x110>
	qspi_device_uninit(dev);
   1ce2e:	4628      	mov	r0, r5
   1ce30:	f7ff fef8 	bl	1cc24 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1ce34:	2403      	movs	r4, #3
   1ce36:	2300      	movs	r3, #0
   1ce38:	e9c7 4302 	strd	r4, r3, [r7, #8]
   1ce3c:	613b      	str	r3, [r7, #16]
   1ce3e:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
   1ce40:	4628      	mov	r0, r5
	const struct qspi_buf rx_buf = {
   1ce42:	607f      	str	r7, [r7, #4]
	const struct qspi_cmd cmd = {
   1ce44:	733b      	strb	r3, [r7, #12]
   1ce46:	617e      	str	r6, [r7, #20]
	int ret = qspi_device_init(dev);
   1ce48:	f7ff fec6 	bl	1cbd8 <qspi_device_init>
	if (ret == 0) {
   1ce4c:	4602      	mov	r2, r0
   1ce4e:	b128      	cbz	r0, 1ce5c <qspi_nor_init+0x14c>
	qspi_device_uninit(dev);
   1ce50:	4628      	mov	r0, r5
   1ce52:	f7ff fee7 	bl	1cc24 <qspi_device_uninit>
		return -ENODEV;
   1ce56:	f06f 0412 	mvn.w	r4, #18
   1ce5a:	e7a7      	b.n	1cdac <qspi_nor_init+0x9c>
		ret = qspi_send_cmd(dev, &cmd, false);
   1ce5c:	4628      	mov	r0, r5
   1ce5e:	f107 010c 	add.w	r1, r7, #12
   1ce62:	f7ff ff07 	bl	1cc74 <qspi_send_cmd>
   1ce66:	4606      	mov	r6, r0
	qspi_device_uninit(dev);
   1ce68:	4628      	mov	r0, r5
   1ce6a:	f7ff fedb 	bl	1cc24 <qspi_device_uninit>
	if (ret != 0) {
   1ce6e:	2e00      	cmp	r6, #0
   1ce70:	d1f1      	bne.n	1ce56 <qspi_nor_init+0x146>
	const struct qspi_nor_config *qnc = dev->config;
   1ce72:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1ce74:	4622      	mov	r2, r4
   1ce76:	4639      	mov	r1, r7
   1ce78:	f105 001c 	add.w	r0, r5, #28
   1ce7c:	f013 fb77 	bl	3056e <memcmp>
   1ce80:	4604      	mov	r4, r0
   1ce82:	2800      	cmp	r0, #0
   1ce84:	d092      	beq.n	1cdac <qspi_nor_init+0x9c>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1ce86:	466c      	mov	r4, sp
   1ce88:	b08c      	sub	sp, #48	; 0x30
   1ce8a:	466a      	mov	r2, sp
   1ce8c:	f897 8000 	ldrb.w	r8, [r7]
   1ce90:	f897 e001 	ldrb.w	lr, [r7, #1]
   1ce94:	f897 c002 	ldrb.w	ip, [r7, #2]
   1ce98:	7f28      	ldrb	r0, [r5, #28]
   1ce9a:	7f69      	ldrb	r1, [r5, #29]
   1ce9c:	7fab      	ldrb	r3, [r5, #30]
   1ce9e:	62d3      	str	r3, [r2, #44]	; 0x2c
   1cea0:	2308      	movs	r3, #8
   1cea2:	4d10      	ldr	r5, [pc, #64]	; (1cee4 <qspi_nor_init+0x1d4>)
   1cea4:	e9c2 ec07 	strd	lr, ip, [r2, #28]
   1cea8:	e9c2 5805 	strd	r5, r8, [r2, #20]
   1ceac:	e9c2 0109 	strd	r0, r1, [r2, #36]	; 0x24
   1ceb0:	f842 3f10 	str.w	r3, [r2, #16]!
   1ceb4:	f244 0140 	movw	r1, #16448	; 0x4040
   1ceb8:	4633      	mov	r3, r6
   1ceba:	4805      	ldr	r0, [pc, #20]	; (1ced0 <qspi_nor_init+0x1c0>)
   1cebc:	f7f1 fcf8 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1cec0:	46a5      	mov	sp, r4
		return -ENODEV;
   1cec2:	e7c8      	b.n	1ce56 <qspi_nor_init+0x146>
   1cec4:	40005000 	.word	0x40005000
   1cec8:	0002e25d 	.word	0x0002e25d
   1cecc:	00036e51 	.word	0x00036e51
   1ced0:	000315dc 	.word	0x000315dc
   1ced4:	00035566 	.word	0x00035566
   1ced8:	00036e4b 	.word	0x00036e4b
   1cedc:	00036e61 	.word	0x00036e61
   1cee0:	01000004 	.word	0x01000004
   1cee4:	00036e72 	.word	0x00036e72

0001cee8 <qspi_nor_erase.part.0>:
static int qspi_nor_erase(const struct device *dev, off_t addr, size_t size)
   1cee8:	b580      	push	{r7, lr}
   1ceea:	af00      	add	r7, sp, #0
		LOG_ERR("erase error: address or size "
   1ceec:	b088      	sub	sp, #32
   1ceee:	466a      	mov	r2, sp
   1cef0:	4b08      	ldr	r3, [pc, #32]	; (1cf14 <qspi_nor_erase.part.0+0x2c>)
   1cef2:	61d1      	str	r1, [r2, #28]
   1cef4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1cef8:	2304      	movs	r3, #4
   1cefa:	f842 3f10 	str.w	r3, [r2, #16]!
   1cefe:	2300      	movs	r3, #0
   1cf00:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cf04:	4804      	ldr	r0, [pc, #16]	; (1cf18 <qspi_nor_erase.part.0+0x30>)
   1cf06:	f7f1 fcd3 	bl	e8b0 <z_impl_z_log_msg_static_create>
}
   1cf0a:	f06f 0015 	mvn.w	r0, #21
   1cf0e:	46bd      	mov	sp, r7
   1cf10:	bd80      	pop	{r7, pc}
   1cf12:	bf00      	nop
   1cf14:	00036ea4 	.word	0x00036ea4
   1cf18:	000315dc 	.word	0x000315dc

0001cf1c <qspi_nor_erase>:
{
   1cf1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
   1cf20:	1e0b      	subs	r3, r1, #0
{
   1cf22:	4606      	mov	r6, r0
   1cf24:	4615      	mov	r5, r2
	const struct qspi_nor_config *params = dev->config;
   1cf26:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1cf2a:	af00      	add	r7, sp, #0
	if (addr < 0 ||
   1cf2c:	db05      	blt.n	1cf3a <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   1cf2e:	1899      	adds	r1, r3, r2
	if (addr < 0 ||
   1cf30:	f8da 2018 	ldr.w	r2, [sl, #24]
	    (addr + size) > params->size) {
   1cf34:	4699      	mov	r9, r3
	if (addr < 0 ||
   1cf36:	4291      	cmp	r1, r2
   1cf38:	d908      	bls.n	1cf4c <qspi_nor_erase+0x30>
   1cf3a:	4629      	mov	r1, r5
   1cf3c:	4618      	mov	r0, r3
   1cf3e:	f7ff ffd3 	bl	1cee8 <qspi_nor_erase.part.0>
   1cf42:	4604      	mov	r4, r0
}
   1cf44:	4620      	mov	r0, r4
   1cf46:	46bd      	mov	sp, r7
   1cf48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1cf4c:	f3c3 020b 	ubfx	r2, r3, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1cf50:	2d00      	cmp	r5, #0
   1cf52:	f000 8081 	beq.w	1d058 <qspi_nor_erase+0x13c>
   1cf56:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1cf5a:	4313      	orrs	r3, r2
   1cf5c:	d17c      	bne.n	1d058 <qspi_nor_erase+0x13c>
	rv = qspi_device_init(dev);
   1cf5e:	f7ff fe3b 	bl	1cbd8 <qspi_device_init>
	if (rv != 0) {
   1cf62:	4604      	mov	r4, r0
   1cf64:	bb60      	cbnz	r0, 1cfc0 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1cf66:	6930      	ldr	r0, [r6, #16]
   1cf68:	f011 f985 	bl	2e276 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1cf6c:	4621      	mov	r1, r4
   1cf6e:	4630      	mov	r0, r6
   1cf70:	f011 f987 	bl	2e282 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1cf74:	4604      	mov	r4, r0
   1cf76:	bb00      	cbnz	r0, 1cfba <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1cf78:	6930      	ldr	r0, [r6, #16]
   1cf7a:	f011 f975 	bl	2e268 <qspi_lock.isra.0>
		if (size == params->size) {
   1cf7e:	f8da 3018 	ldr.w	r3, [sl, #24]
   1cf82:	42ab      	cmp	r3, r5
   1cf84:	d120      	bne.n	1cfc8 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1cf86:	f011 fe2d 	bl	2ebe4 <nrfx_qspi_chip_erase>
   1cf8a:	46ab      	mov	fp, r5
   1cf8c:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   1cf8e:	4641      	mov	r1, r8
   1cf90:	6930      	ldr	r0, [r6, #16]
   1cf92:	f7ff fe13 	bl	1cbbc <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1cf96:	4b32      	ldr	r3, [pc, #200]	; (1d060 <qspi_nor_erase+0x144>)
   1cf98:	4598      	cmp	r8, r3
   1cf9a:	d147      	bne.n	1d02c <qspi_nor_erase+0x110>
	while (size > 0) {
   1cf9c:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1cfa0:	44d9      	add	r9, fp
	while (size > 0) {
   1cfa2:	d1ec      	bne.n	1cf7e <qspi_nor_erase+0x62>
	k_sem_give(&dev_data->sem);
   1cfa4:	6930      	ldr	r0, [r6, #16]
   1cfa6:	3018      	adds	r0, #24
   1cfa8:	f011 f956 	bl	2e258 <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1cfac:	2101      	movs	r1, #1
   1cfae:	4630      	mov	r0, r6
   1cfb0:	f011 f967 	bl	2e282 <qspi_nor_write_protection_set>
   1cfb4:	2c00      	cmp	r4, #0
   1cfb6:	bf08      	it	eq
   1cfb8:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1cfba:	6930      	ldr	r0, [r6, #16]
   1cfbc:	f011 f94c 	bl	2e258 <k_sem_give>
	qspi_device_uninit(dev);
   1cfc0:	4630      	mov	r0, r6
   1cfc2:	f7ff fe2f 	bl	1cc24 <qspi_device_uninit>
	return rv;
   1cfc6:	e7bd      	b.n	1cf44 <qspi_nor_erase+0x28>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1cfc8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1cfcc:	d30a      	bcc.n	1cfe4 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1cfce:	fa1f f389 	uxth.w	r3, r9
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1cfd2:	b953      	cbnz	r3, 1cfea <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1cfd4:	4649      	mov	r1, r9
   1cfd6:	2001      	movs	r0, #1
   1cfd8:	f003 f8c4 	bl	20164 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1cfdc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1cfe0:	4680      	mov	r8, r0
			adj = QSPI_BLOCK_SIZE;
   1cfe2:	e7d4      	b.n	1cf8e <qspi_nor_erase+0x72>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1cfe4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1cfe8:	d309      	bcc.n	1cffe <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1cfea:	f3c9 000b 	ubfx	r0, r9, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1cfee:	b930      	cbnz	r0, 1cffe <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1cff0:	4649      	mov	r1, r9
   1cff2:	f003 f8b7 	bl	20164 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1cff6:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1cffa:	4680      	mov	r8, r0
			adj = QSPI_SECTOR_SIZE;
   1cffc:	e7c7      	b.n	1cf8e <qspi_nor_erase+0x72>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1cffe:	466c      	mov	r4, sp
   1d000:	b088      	sub	sp, #32
   1d002:	466a      	mov	r2, sp
   1d004:	4b17      	ldr	r3, [pc, #92]	; (1d064 <qspi_nor_erase+0x148>)
   1d006:	61d5      	str	r5, [r2, #28]
   1d008:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1d00c:	2304      	movs	r3, #4
   1d00e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d012:	2300      	movs	r3, #0
   1d014:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d018:	4813      	ldr	r0, [pc, #76]	; (1d068 <qspi_nor_erase+0x14c>)
   1d01a:	f7f1 fc49 	bl	e8b0 <z_impl_z_log_msg_static_create>
		qspi_wait_for_completion(dev, res);
   1d01e:	4913      	ldr	r1, [pc, #76]	; (1d06c <qspi_nor_erase+0x150>)
   1d020:	46a5      	mov	sp, r4
   1d022:	6930      	ldr	r0, [r6, #16]
   1d024:	f7ff fdca 	bl	1cbbc <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
   1d028:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1d06c <qspi_nor_erase+0x150>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1d02c:	466c      	mov	r4, sp
   1d02e:	b088      	sub	sp, #32
   1d030:	466a      	mov	r2, sp
   1d032:	4b0f      	ldr	r3, [pc, #60]	; (1d070 <qspi_nor_erase+0x154>)
   1d034:	61d5      	str	r5, [r2, #28]
   1d036:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1d03a:	2304      	movs	r3, #4
   1d03c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d040:	2300      	movs	r3, #0
   1d042:	4809      	ldr	r0, [pc, #36]	; (1d068 <qspi_nor_erase+0x14c>)
   1d044:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d048:	f7f1 fc32 	bl	e8b0 <z_impl_z_log_msg_static_create>
			rv = qspi_get_zephyr_ret_code(res);
   1d04c:	4640      	mov	r0, r8
   1d04e:	46a5      	mov	sp, r4
   1d050:	f7ff fd9a 	bl	1cb88 <qspi_get_zephyr_ret_code>
   1d054:	4604      	mov	r4, r0
			break;
   1d056:	e7a5      	b.n	1cfa4 <qspi_nor_erase+0x88>
		return -EINVAL;
   1d058:	f06f 0415 	mvn.w	r4, #21
   1d05c:	e772      	b.n	1cf44 <qspi_nor_erase+0x28>
   1d05e:	bf00      	nop
   1d060:	0bad0000 	.word	0x0bad0000
   1d064:	00036eee 	.word	0x00036eee
   1d068:	000315dc 	.word	0x000315dc
   1d06c:	0bad0004 	.word	0x0bad0004
   1d070:	00036f0c 	.word	0x00036f0c

0001d074 <qspi_nor_write>:
{
   1d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d078:	b083      	sub	sp, #12
   1d07a:	4605      	mov	r5, r0
   1d07c:	4688      	mov	r8, r1
   1d07e:	461e      	mov	r6, r3
	if (!src) {
   1d080:	4691      	mov	r9, r2
{
   1d082:	af00      	add	r7, sp, #0
	if (!src) {
   1d084:	b30a      	cbz	r2, 1d0ca <qspi_nor_write+0x56>
	if ((size == 0)
   1d086:	b303      	cbz	r3, 1d0ca <qspi_nor_write+0x56>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1d088:	2b04      	cmp	r3, #4
   1d08a:	d901      	bls.n	1d090 <qspi_nor_write+0x1c>
   1d08c:	07b3      	lsls	r3, r6, #30
   1d08e:	d11c      	bne.n	1d0ca <qspi_nor_write+0x56>
	if ((addr % 4U) != 0) {
   1d090:	f018 0f03 	tst.w	r8, #3
   1d094:	d119      	bne.n	1d0ca <qspi_nor_write+0x56>
	if (addr < 0 ||
   1d096:	f1b8 0f00 	cmp.w	r8, #0
	const struct qspi_nor_config *params = dev->config;
   1d09a:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1d09c:	db04      	blt.n	1d0a8 <qspi_nor_write+0x34>
   1d09e:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1d0a0:	eb08 0306 	add.w	r3, r8, r6
	if (addr < 0 ||
   1d0a4:	4293      	cmp	r3, r2
   1d0a6:	d917      	bls.n	1d0d8 <qspi_nor_write+0x64>
		LOG_ERR("write error: address or size "
   1d0a8:	466c      	mov	r4, sp
   1d0aa:	b088      	sub	sp, #32
   1d0ac:	466a      	mov	r2, sp
   1d0ae:	4b42      	ldr	r3, [pc, #264]	; (1d1b8 <qspi_nor_write+0x144>)
   1d0b0:	61d6      	str	r6, [r2, #28]
   1d0b2:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1d0b6:	2304      	movs	r3, #4
   1d0b8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0bc:	2300      	movs	r3, #0
   1d0be:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d0c2:	483e      	ldr	r0, [pc, #248]	; (1d1bc <qspi_nor_write+0x148>)
   1d0c4:	f7f1 fbf4 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1d0c8:	46a5      	mov	sp, r4
		return -EINVAL;
   1d0ca:	f06f 0415 	mvn.w	r4, #21
}
   1d0ce:	4620      	mov	r0, r4
   1d0d0:	370c      	adds	r7, #12
   1d0d2:	46bd      	mov	sp, r7
   1d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1d0d8:	4628      	mov	r0, r5
   1d0da:	f7ff fd7d 	bl	1cbd8 <qspi_device_init>
	if (rc != 0) {
   1d0de:	4604      	mov	r4, r0
   1d0e0:	2800      	cmp	r0, #0
   1d0e2:	d160      	bne.n	1d1a6 <qspi_nor_write+0x132>
	qspi_trans_lock(dev);
   1d0e4:	6928      	ldr	r0, [r5, #16]
   1d0e6:	f011 f8c6 	bl	2e276 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1d0ea:	4621      	mov	r1, r4
   1d0ec:	4628      	mov	r0, r5
   1d0ee:	f011 f8c8 	bl	2e282 <qspi_nor_write_protection_set>
   1d0f2:	4604      	mov	r4, r0
	qspi_lock(dev);
   1d0f4:	6928      	ldr	r0, [r5, #16]
   1d0f6:	f011 f8b7 	bl	2e268 <qspi_lock.isra.0>
	if (!res) {
   1d0fa:	2c00      	cmp	r4, #0
   1d0fc:	d140      	bne.n	1d180 <qspi_nor_write+0x10c>
		if (size < 4U) {
   1d0fe:	2e03      	cmp	r6, #3
   1d100:	d81c      	bhi.n	1d13c <qspi_nor_write+0xc8>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1d102:	2104      	movs	r1, #4
   1d104:	4642      	mov	r2, r8
   1d106:	1878      	adds	r0, r7, r1
   1d108:	f011 fd69 	bl	2ebde <nrfx_qspi_read>
   1d10c:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1d10e:	4601      	mov	r1, r0
   1d110:	6928      	ldr	r0, [r5, #16]
   1d112:	f7ff fd53 	bl	1cbbc <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1d116:	4b2a      	ldr	r3, [pc, #168]	; (1d1c0 <qspi_nor_write+0x14c>)
   1d118:	429c      	cmp	r4, r3
   1d11a:	d131      	bne.n	1d180 <qspi_nor_write+0x10c>
		memcpy(buf, sptr, slen);
   1d11c:	4632      	mov	r2, r6
   1d11e:	4649      	mov	r1, r9
   1d120:	1d38      	adds	r0, r7, #4
   1d122:	f013 fa34 	bl	3058e <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1d126:	2104      	movs	r1, #4
   1d128:	4642      	mov	r2, r8
   1d12a:	1878      	adds	r0, r7, r1
			res = nrfx_qspi_write(src, size, addr);
   1d12c:	f011 fd54 	bl	2ebd8 <nrfx_qspi_write>
   1d130:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1d132:	4601      	mov	r1, r0
   1d134:	6928      	ldr	r0, [r5, #16]
   1d136:	f7ff fd41 	bl	1cbbc <qspi_wait_for_completion.isra.0>
   1d13a:	e021      	b.n	1d180 <qspi_nor_write+0x10c>
   1d13c:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1d140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d144:	d033      	beq.n	1d1ae <qspi_nor_write+0x13a>
			if (res == NRFX_SUCCESS) {
   1d146:	f8df b078 	ldr.w	fp, [pc, #120]	; 1d1c0 <qspi_nor_write+0x14c>
			size_t len = MIN(slen, sizeof(buf));
   1d14a:	2e04      	cmp	r6, #4
   1d14c:	46b2      	mov	sl, r6
   1d14e:	bf28      	it	cs
   1d150:	f04f 0a04 	movcs.w	sl, #4
			memcpy(buf, sp, len);
   1d154:	4649      	mov	r1, r9
   1d156:	4652      	mov	r2, sl
   1d158:	1d38      	adds	r0, r7, #4
   1d15a:	f013 fa18 	bl	3058e <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1d15e:	2104      	movs	r1, #4
   1d160:	4642      	mov	r2, r8
   1d162:	1878      	adds	r0, r7, r1
   1d164:	f011 fd38 	bl	2ebd8 <nrfx_qspi_write>
   1d168:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1d16a:	4601      	mov	r1, r0
   1d16c:	6928      	ldr	r0, [r5, #16]
   1d16e:	f7ff fd25 	bl	1cbbc <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1d172:	455c      	cmp	r4, fp
   1d174:	d104      	bne.n	1d180 <qspi_nor_write+0x10c>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1d176:	ebb6 060a 	subs.w	r6, r6, sl
				sp += len;
   1d17a:	44d1      	add	r9, sl
				addr += len;
   1d17c:	44d0      	add	r8, sl
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1d17e:	d1e4      	bne.n	1d14a <qspi_nor_write+0xd6>
	k_sem_give(&dev_data->sem);
   1d180:	6928      	ldr	r0, [r5, #16]
   1d182:	3018      	adds	r0, #24
   1d184:	f011 f868 	bl	2e258 <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1d188:	2101      	movs	r1, #1
   1d18a:	4628      	mov	r0, r5
   1d18c:	f011 f879 	bl	2e282 <qspi_nor_write_protection_set>
   1d190:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1d192:	6928      	ldr	r0, [r5, #16]
   1d194:	f011 f860 	bl	2e258 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1d198:	2c00      	cmp	r4, #0
   1d19a:	bf14      	ite	ne
   1d19c:	4620      	movne	r0, r4
   1d19e:	4630      	moveq	r0, r6
   1d1a0:	f7ff fcf2 	bl	1cb88 <qspi_get_zephyr_ret_code>
   1d1a4:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1d1a6:	4628      	mov	r0, r5
   1d1a8:	f7ff fd3c 	bl	1cc24 <qspi_device_uninit>
	return rc;
   1d1ac:	e78f      	b.n	1d0ce <qspi_nor_write+0x5a>
			res = nrfx_qspi_write(src, size, addr);
   1d1ae:	4642      	mov	r2, r8
   1d1b0:	4631      	mov	r1, r6
   1d1b2:	4648      	mov	r0, r9
   1d1b4:	e7ba      	b.n	1d12c <qspi_nor_write+0xb8>
   1d1b6:	bf00      	nop
   1d1b8:	00036f2a 	.word	0x00036f2a
   1d1bc:	000315dc 	.word	0x000315dc
   1d1c0:	0bad0000 	.word	0x0bad0000

0001d1c4 <qspi_nor_read>:
{
   1d1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1c8:	b085      	sub	sp, #20
   1d1ca:	4681      	mov	r9, r0
   1d1cc:	460e      	mov	r6, r1
   1d1ce:	461c      	mov	r4, r3
	if (!dest) {
   1d1d0:	4690      	mov	r8, r2
{
   1d1d2:	af00      	add	r7, sp, #0
	if (!dest) {
   1d1d4:	b1d2      	cbz	r2, 1d20c <qspi_nor_read+0x48>
	if (!size) {
   1d1d6:	2b00      	cmp	r3, #0
   1d1d8:	f000 80ac 	beq.w	1d334 <qspi_nor_read+0x170>
	if (addr < 0 ||
   1d1dc:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1d1de:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1d1e0:	db03      	blt.n	1d1ea <qspi_nor_read+0x26>
   1d1e2:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1d1e4:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1d1e6:	4293      	cmp	r3, r2
   1d1e8:	d917      	bls.n	1d21a <qspi_nor_read+0x56>
		LOG_ERR("read error: address or size "
   1d1ea:	466d      	mov	r5, sp
   1d1ec:	b088      	sub	sp, #32
   1d1ee:	466a      	mov	r2, sp
   1d1f0:	4b51      	ldr	r3, [pc, #324]	; (1d338 <qspi_nor_read+0x174>)
   1d1f2:	61d4      	str	r4, [r2, #28]
   1d1f4:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d1f8:	2304      	movs	r3, #4
   1d1fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1d1fe:	2300      	movs	r3, #0
   1d200:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d204:	484d      	ldr	r0, [pc, #308]	; (1d33c <qspi_nor_read+0x178>)
   1d206:	f7f1 fb53 	bl	e8b0 <z_impl_z_log_msg_static_create>
   1d20a:	46ad      	mov	sp, r5
		return -EINVAL;
   1d20c:	f06f 0515 	mvn.w	r5, #21
}
   1d210:	4628      	mov	r0, r5
   1d212:	3714      	adds	r7, #20
   1d214:	46bd      	mov	sp, r7
   1d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1d21a:	f7ff fcdd 	bl	1cbd8 <qspi_device_init>
	if (rc != 0) {
   1d21e:	4605      	mov	r5, r0
   1d220:	2800      	cmp	r0, #0
   1d222:	f040 8081 	bne.w	1d328 <qspi_nor_read+0x164>
	qspi_lock(dev);
   1d226:	4275      	negs	r5, r6
   1d228:	f005 0503 	and.w	r5, r5, #3
   1d22c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d230:	f011 f81a 	bl	2e268 <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1d234:	42a5      	cmp	r5, r4
   1d236:	bf28      	it	cs
   1d238:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1d23a:	f1d8 0200 	rsbs	r2, r8, #0
   1d23e:	f002 0203 	and.w	r2, r2, #3
   1d242:	f008 0303 	and.w	r3, r8, #3
   1d246:	bf58      	it	pl
   1d248:	4253      	negpl	r3, r2
   1d24a:	425b      	negs	r3, r3
   1d24c:	f003 0303 	and.w	r3, r3, #3
   1d250:	42a3      	cmp	r3, r4
   1d252:	bf28      	it	cs
   1d254:	4623      	movcs	r3, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1d256:	1b62      	subs	r2, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1d258:	1ae4      	subs	r4, r4, r3
   1d25a:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1d25e:	f022 0a03 	bic.w	sl, r2, #3
	if (flash_middle > dest_middle) {
   1d262:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1d264:	bfc8      	it	gt
   1d266:	46a2      	movgt	sl, r4
   1d268:	f002 0b03 	and.w	fp, r2, #3
   1d26c:	bfc8      	it	gt
   1d26e:	eba2 0b04 	subgt.w	fp, r2, r4
	if (flash_middle != 0) {
   1d272:	f1ba 0f00 	cmp.w	sl, #0
   1d276:	d01a      	beq.n	1d2ae <qspi_nor_read+0xea>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1d278:	eb08 0203 	add.w	r2, r8, r3
   1d27c:	e9c7 3200 	strd	r3, r2, [r7]
   1d280:	4651      	mov	r1, sl
   1d282:	1972      	adds	r2, r6, r5
   1d284:	6878      	ldr	r0, [r7, #4]
   1d286:	f011 fcaa 	bl	2ebde <nrfx_qspi_read>
   1d28a:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d28c:	4601      	mov	r1, r0
   1d28e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d292:	f7ff fc93 	bl	1cbbc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d296:	4a2a      	ldr	r2, [pc, #168]	; (1d340 <qspi_nor_read+0x17c>)
   1d298:	4294      	cmp	r4, r2
   1d29a:	d13c      	bne.n	1d316 <qspi_nor_read+0x152>
		if (flash_prefix != dest_prefix) {
   1d29c:	683b      	ldr	r3, [r7, #0]
   1d29e:	429d      	cmp	r5, r3
   1d2a0:	d005      	beq.n	1d2ae <qspi_nor_read+0xea>
__ssp_bos_icheck3(memmove, void *, const void *)
   1d2a2:	4652      	mov	r2, sl
   1d2a4:	6879      	ldr	r1, [r7, #4]
   1d2a6:	eb08 0005 	add.w	r0, r8, r5
   1d2aa:	f013 f990 	bl	305ce <memmove>
	if (flash_prefix != 0) {
   1d2ae:	b1c5      	cbz	r5, 1d2e2 <qspi_nor_read+0x11e>
				     (WORD_SIZE - flash_prefix));
   1d2b0:	f1c5 0304 	rsb	r3, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1d2b4:	1af2      	subs	r2, r6, r3
   1d2b6:	2104      	movs	r1, #4
   1d2b8:	f107 0008 	add.w	r0, r7, #8
   1d2bc:	607b      	str	r3, [r7, #4]
   1d2be:	f011 fc8e 	bl	2ebde <nrfx_qspi_read>
   1d2c2:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d2c4:	4601      	mov	r1, r0
   1d2c6:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2ca:	f7ff fc77 	bl	1cbbc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d2ce:	4a1c      	ldr	r2, [pc, #112]	; (1d340 <qspi_nor_read+0x17c>)
   1d2d0:	4294      	cmp	r4, r2
   1d2d2:	d120      	bne.n	1d316 <qspi_nor_read+0x152>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d2d4:	687b      	ldr	r3, [r7, #4]
   1d2d6:	462a      	mov	r2, r5
   1d2d8:	3308      	adds	r3, #8
   1d2da:	4640      	mov	r0, r8
   1d2dc:	19d9      	adds	r1, r3, r7
   1d2de:	f013 f956 	bl	3058e <memcpy>
	if (flash_suffix != 0) {
   1d2e2:	f1bb 0f00 	cmp.w	fp, #0
   1d2e6:	d023      	beq.n	1d330 <qspi_nor_read+0x16c>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1d2e8:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1d2ea:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1d2ec:	4452      	add	r2, sl
   1d2ee:	1878      	adds	r0, r7, r1
   1d2f0:	f011 fc75 	bl	2ebde <nrfx_qspi_read>
   1d2f4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1d2f6:	4601      	mov	r1, r0
   1d2f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d2fc:	f7ff fc5e 	bl	1cbbc <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1d300:	4b0f      	ldr	r3, [pc, #60]	; (1d340 <qspi_nor_read+0x17c>)
   1d302:	429c      	cmp	r4, r3
   1d304:	d107      	bne.n	1d316 <qspi_nor_read+0x152>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1d306:	eb0a 0005 	add.w	r0, sl, r5
   1d30a:	465a      	mov	r2, fp
   1d30c:	f107 0108 	add.w	r1, r7, #8
   1d310:	4440      	add	r0, r8
   1d312:	f013 f93c 	bl	3058e <memcpy>
	k_sem_give(&dev_data->sem);
   1d316:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1d31a:	3018      	adds	r0, #24
   1d31c:	f010 ff9c 	bl	2e258 <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1d320:	4620      	mov	r0, r4
   1d322:	f7ff fc31 	bl	1cb88 <qspi_get_zephyr_ret_code>
   1d326:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1d328:	4648      	mov	r0, r9
   1d32a:	f7ff fc7b 	bl	1cc24 <qspi_device_uninit>
	return rc;
   1d32e:	e76f      	b.n	1d210 <qspi_nor_read+0x4c>
	return res;
   1d330:	4c03      	ldr	r4, [pc, #12]	; (1d340 <qspi_nor_read+0x17c>)
   1d332:	e7f0      	b.n	1d316 <qspi_nor_read+0x152>
		return 0;
   1d334:	461d      	mov	r5, r3
   1d336:	e76b      	b.n	1d210 <qspi_nor_read+0x4c>
   1d338:	00036f74 	.word	0x00036f74
   1d33c:	000315dc 	.word	0x000315dc
   1d340:	0bad0000 	.word	0x0bad0000

0001d344 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d344:	4b02      	ldr	r3, [pc, #8]	; (1d350 <flash_nrf_pages_layout+0xc>)
   1d346:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d348:	2301      	movs	r3, #1
   1d34a:	6013      	str	r3, [r2, #0]
}
   1d34c:	4770      	bx	lr
   1d34e:	bf00      	nop
   1d350:	20021898 	.word	0x20021898

0001d354 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d354:	4800      	ldr	r0, [pc, #0]	; (1d358 <flash_nrf_get_parameters+0x4>)
   1d356:	4770      	bx	lr
   1d358:	00032414 	.word	0x00032414

0001d35c <flash_nrf_read>:
{
   1d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d360:	460d      	mov	r5, r1
   1d362:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1d364:	4619      	mov	r1, r3
   1d366:	4628      	mov	r0, r5
{
   1d368:	461e      	mov	r6, r3
   1d36a:	4614      	mov	r4, r2
	if (is_regular_addr_valid(addr, len)) {
   1d36c:	f010 ffb9 	bl	2e2e2 <is_regular_addr_valid>
   1d370:	4603      	mov	r3, r0
   1d372:	b9a8      	cbnz	r0, 1d3a0 <flash_nrf_read+0x44>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d374:	46e8      	mov	r8, sp
   1d376:	b088      	sub	sp, #32
   1d378:	466c      	mov	r4, sp
   1d37a:	4a10      	ldr	r2, [pc, #64]	; (1d3bc <flash_nrf_read+0x60>)
   1d37c:	2104      	movs	r1, #4
   1d37e:	e9c4 2505 	strd	r2, r5, [r4, #20]
   1d382:	4622      	mov	r2, r4
   1d384:	61e6      	str	r6, [r4, #28]
   1d386:	f842 1f10 	str.w	r1, [r2, #16]!
   1d38a:	480d      	ldr	r0, [pc, #52]	; (1d3c0 <flash_nrf_read+0x64>)
   1d38c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d390:	f7f1 fa8e 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d394:	f06f 0015 	mvn.w	r0, #21
   1d398:	46c5      	mov	sp, r8
}
   1d39a:	46bd      	mov	sp, r7
   1d39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!len) {
   1d3a0:	b156      	cbz	r6, 1d3b8 <flash_nrf_read+0x5c>
	if (addr < PM_APP_ADDRESS) {
   1d3a2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
		return soc_secure_mem_read(data, (void *)addr, len);
   1d3a6:	4632      	mov	r2, r6
   1d3a8:	4629      	mov	r1, r5
   1d3aa:	4620      	mov	r0, r4
	if (addr < PM_APP_ADDRESS) {
   1d3ac:	da02      	bge.n	1d3b4 <flash_nrf_read+0x58>
		return soc_secure_mem_read(data, (void *)addr, len);
   1d3ae:	f00d fa96 	bl	2a8de <soc_secure_mem_read>
   1d3b2:	e7f2      	b.n	1d39a <flash_nrf_read+0x3e>
   1d3b4:	f013 f8eb 	bl	3058e <memcpy>
		return 0;
   1d3b8:	2000      	movs	r0, #0
   1d3ba:	e7ee      	b.n	1d39a <flash_nrf_read+0x3e>
   1d3bc:	00036fd3 	.word	0x00036fd3
   1d3c0:	0003156c 	.word	0x0003156c

0001d3c4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1d3c4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d3c6:	2201      	movs	r2, #1
   1d3c8:	4806      	ldr	r0, [pc, #24]	; (1d3e4 <nrf_flash_init+0x20>)
   1d3ca:	4611      	mov	r1, r2
   1d3cc:	f012 ff1d 	bl	3020a <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d3d0:	f011 fbfc 	bl	2ebcc <nrfx_nvmc_flash_page_count_get>
   1d3d4:	4c04      	ldr	r4, [pc, #16]	; (1d3e8 <nrf_flash_init+0x24>)
   1d3d6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d3d8:	f011 fbf5 	bl	2ebc6 <nrfx_nvmc_flash_page_size_get>
   1d3dc:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1d3de:	2000      	movs	r0, #0
   1d3e0:	bd10      	pop	{r4, pc}
   1d3e2:	bf00      	nop
   1d3e4:	200218a0 	.word	0x200218a0
   1d3e8:	20021898 	.word	0x20021898

0001d3ec <flash_nrf_erase>:
{
   1d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3f0:	af00      	add	r7, sp, #0
   1d3f2:	460e      	mov	r6, r1
   1d3f4:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3f6:	f011 fbe6 	bl	2ebc6 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d3fa:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d3fc:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   1d3fe:	4630      	mov	r0, r6
   1d400:	f010 ff6f 	bl	2e2e2 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d404:	46b0      	mov	r8, r6
	if (is_regular_addr_valid(addr, size)) {
   1d406:	4603      	mov	r3, r0
   1d408:	b3b8      	cbz	r0, 1d47a <flash_nrf_erase+0x8e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d40a:	fbb6 f3f5 	udiv	r3, r6, r5
   1d40e:	fb05 6313 	mls	r3, r5, r3, r6
   1d412:	b923      	cbnz	r3, 1d41e <flash_nrf_erase+0x32>
   1d414:	fbb4 f3f5 	udiv	r3, r4, r5
   1d418:	fb05 4313 	mls	r3, r5, r3, r4
   1d41c:	b19b      	cbz	r3, 1d446 <flash_nrf_erase+0x5a>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d41e:	466d      	mov	r5, sp
   1d420:	b088      	sub	sp, #32
   1d422:	466a      	mov	r2, sp
   1d424:	4b1a      	ldr	r3, [pc, #104]	; (1d490 <flash_nrf_erase+0xa4>)
   1d426:	61d4      	str	r4, [r2, #28]
   1d428:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d42c:	2304      	movs	r3, #4
   1d42e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d432:	2300      	movs	r3, #0
   1d434:	4817      	ldr	r0, [pc, #92]	; (1d494 <flash_nrf_erase+0xa8>)
   1d436:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d43a:	f7f1 fa39 	bl	e8b0 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1d43e:	f06f 0015 	mvn.w	r0, #21
   1d442:	46ad      	mov	sp, r5
		return -EINVAL;
   1d444:	e002      	b.n	1d44c <flash_nrf_erase+0x60>
		if (!n_pages) {
   1d446:	42ac      	cmp	r4, r5
   1d448:	d203      	bcs.n	1d452 <flash_nrf_erase+0x66>
			return 0;
   1d44a:	2000      	movs	r0, #0
}
   1d44c:	46bd      	mov	sp, r7
   1d44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_sem_take(sem, timeout);
   1d452:	f04f 32ff 	mov.w	r2, #4294967295
   1d456:	f04f 33ff 	mov.w	r3, #4294967295
   1d45a:	480f      	ldr	r0, [pc, #60]	; (1d498 <flash_nrf_erase+0xac>)
   1d45c:	f008 f908 	bl	25670 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d460:	f011 fbb1 	bl	2ebc6 <nrfx_nvmc_flash_page_size_get>
   1d464:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1d466:	4640      	mov	r0, r8
   1d468:	f002 faf4 	bl	1fa54 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   1d46c:	1b64      	subs	r4, r4, r5
   1d46e:	44a8      	add	r8, r5
   1d470:	d1f9      	bne.n	1d466 <flash_nrf_erase+0x7a>
	z_impl_k_sem_give(sem);
   1d472:	4809      	ldr	r0, [pc, #36]	; (1d498 <flash_nrf_erase+0xac>)
   1d474:	f008 f8b8 	bl	255e8 <z_impl_k_sem_give>
}
   1d478:	e7e7      	b.n	1d44a <flash_nrf_erase+0x5e>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d47a:	466d      	mov	r5, sp
   1d47c:	b088      	sub	sp, #32
   1d47e:	466a      	mov	r2, sp
   1d480:	4906      	ldr	r1, [pc, #24]	; (1d49c <flash_nrf_erase+0xb0>)
   1d482:	61d4      	str	r4, [r2, #28]
   1d484:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1d488:	2104      	movs	r1, #4
   1d48a:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   1d48e:	e7d1      	b.n	1d434 <flash_nrf_erase+0x48>
   1d490:	00036ff0 	.word	0x00036ff0
   1d494:	0003156c 	.word	0x0003156c
   1d498:	200218a0 	.word	0x200218a0
   1d49c:	00036fd3 	.word	0x00036fd3

0001d4a0 <flash_nrf_write>:
{
   1d4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4a4:	460e      	mov	r6, r1
   1d4a6:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   1d4a8:	4619      	mov	r1, r3
   1d4aa:	4630      	mov	r0, r6
{
   1d4ac:	461c      	mov	r4, r3
   1d4ae:	4690      	mov	r8, r2
	if (is_regular_addr_valid(addr, len)) {
   1d4b0:	f010 ff17 	bl	2e2e2 <is_regular_addr_valid>
   1d4b4:	4603      	mov	r3, r0
   1d4b6:	b9a0      	cbnz	r0, 1d4e2 <flash_nrf_write+0x42>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d4b8:	466d      	mov	r5, sp
   1d4ba:	b088      	sub	sp, #32
   1d4bc:	466a      	mov	r2, sp
   1d4be:	4920      	ldr	r1, [pc, #128]	; (1d540 <flash_nrf_write+0xa0>)
   1d4c0:	61d4      	str	r4, [r2, #28]
   1d4c2:	e9c2 1605 	strd	r1, r6, [r2, #20]
   1d4c6:	2104      	movs	r1, #4
   1d4c8:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   1d4cc:	481d      	ldr	r0, [pc, #116]	; (1d544 <flash_nrf_write+0xa4>)
   1d4ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d4d2:	f7f1 f9ed 	bl	e8b0 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1d4d6:	f06f 0015 	mvn.w	r0, #21
   1d4da:	46ad      	mov	sp, r5
}
   1d4dc:	46bd      	mov	sp, r7
   1d4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1d4e2:	ea46 0504 	orr.w	r5, r6, r4
   1d4e6:	f015 0503 	ands.w	r5, r5, #3
   1d4ea:	d00b      	beq.n	1d504 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1d4ec:	466d      	mov	r5, sp
   1d4ee:	b088      	sub	sp, #32
   1d4f0:	466a      	mov	r2, sp
   1d4f2:	4b15      	ldr	r3, [pc, #84]	; (1d548 <flash_nrf_write+0xa8>)
   1d4f4:	61d4      	str	r4, [r2, #28]
   1d4f6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d4fa:	2304      	movs	r3, #4
   1d4fc:	f842 3f10 	str.w	r3, [r2, #16]!
   1d500:	2300      	movs	r3, #0
   1d502:	e7e3      	b.n	1d4cc <flash_nrf_write+0x2c>
	if (!len) {
   1d504:	b1a4      	cbz	r4, 1d530 <flash_nrf_write+0x90>
	return z_impl_k_sem_take(sem, timeout);
   1d506:	f04f 32ff 	mov.w	r2, #4294967295
   1d50a:	f04f 33ff 	mov.w	r3, #4294967295
   1d50e:	480f      	ldr	r0, [pc, #60]	; (1d54c <flash_nrf_write+0xac>)
   1d510:	f008 f8ae 	bl	25670 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   1d514:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d518:	42a5      	cmp	r5, r4
   1d51a:	eb05 0006 	add.w	r0, r5, r6
   1d51e:	d109      	bne.n	1d534 <flash_nrf_write+0x94>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d520:	4a0b      	ldr	r2, [pc, #44]	; (1d550 <flash_nrf_write+0xb0>)
   1d522:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d526:	07db      	lsls	r3, r3, #31
   1d528:	d5fb      	bpl.n	1d522 <flash_nrf_write+0x82>
	z_impl_k_sem_give(sem);
   1d52a:	4808      	ldr	r0, [pc, #32]	; (1d54c <flash_nrf_write+0xac>)
   1d52c:	f008 f85c 	bl	255e8 <z_impl_k_sem_give>
	return ret;
   1d530:	2000      	movs	r0, #0
   1d532:	e7d3      	b.n	1d4dc <flash_nrf_write+0x3c>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d534:	f858 1005 	ldr.w	r1, [r8, r5]
   1d538:	f002 fabe 	bl	1fab8 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   1d53c:	3504      	adds	r5, #4
}
   1d53e:	e7eb      	b.n	1d518 <flash_nrf_write+0x78>
   1d540:	00036fd3 	.word	0x00036fd3
   1d544:	0003156c 	.word	0x0003156c
   1d548:	0003700f 	.word	0x0003700f
   1d54c:	200218a0 	.word	0x200218a0
   1d550:	40039000 	.word	0x40039000

0001d554 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1d554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d556:	461d      	mov	r5, r3
	return config->uarte_regs;
   1d558:	6843      	ldr	r3, [r0, #4]
{
   1d55a:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
   1d55c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d55e:	f8d3 c000 	ldr.w	ip, [r3]
   1d562:	f04f 0320 	mov.w	r3, #32
   1d566:	f3ef 8711 	mrs	r7, BASEPRI
   1d56a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d56e:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1d572:	68e3      	ldr	r3, [r4, #12]
   1d574:	68d8      	ldr	r0, [r3, #12]
   1d576:	b138      	cbz	r0, 1d588 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1d578:	f387 8811 	msr	BASEPRI, r7
   1d57c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1d580:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1d584:	b003      	add	sp, #12
   1d586:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1d588:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1d58a:	68e3      	ldr	r3, [r4, #12]
   1d58c:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d58e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d592:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   1d596:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1d59a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d59e:	68e3      	ldr	r3, [r4, #12]
   1d5a0:	d111      	bne.n	1d5c6 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1d5a2:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1d5a4:	68e3      	ldr	r3, [r4, #12]
   1d5a6:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1d5a8:	4621      	mov	r1, r4
   1d5aa:	4630      	mov	r0, r6
   1d5ac:	f011 f881 	bl	2e6b2 <start_tx_locked>
   1d5b0:	f387 8811 	msr	BASEPRI, r7
   1d5b4:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1d5b8:	7ae3      	ldrb	r3, [r4, #11]
   1d5ba:	2b01      	cmp	r3, #1
   1d5bc:	d101      	bne.n	1d5c2 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1d5be:	1c6b      	adds	r3, r5, #1
   1d5c0:	d106      	bne.n	1d5d0 <uarte_nrfx_tx+0x7c>
	return 0;
   1d5c2:	2000      	movs	r0, #0
   1d5c4:	e7de      	b.n	1d584 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1d5c6:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1d5c8:	4620      	mov	r0, r4
   1d5ca:	f010 ffeb 	bl	2e5a4 <setup_tx_cache>
   1d5ce:	e7eb      	b.n	1d5a8 <uarte_nrfx_tx+0x54>
   1d5d0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d5d4:	2100      	movs	r1, #0
   1d5d6:	480a      	ldr	r0, [pc, #40]	; (1d600 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1d5d8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1d5dc:	2300      	movs	r3, #0
   1d5de:	fbc5 0106 	smlal	r0, r1, r5, r6
   1d5e2:	4a08      	ldr	r2, [pc, #32]	; (1d604 <uarte_nrfx_tx+0xb0>)
   1d5e4:	f7eb fc84 	bl	8ef0 <__aeabi_uldivmod>
   1d5e8:	68e4      	ldr	r4, [r4, #12]
   1d5ea:	4602      	mov	r2, r0
   1d5ec:	460b      	mov	r3, r1
   1d5ee:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
   1d5f0:	2000      	movs	r0, #0
   1d5f2:	2100      	movs	r1, #0
   1d5f4:	e9cd 0100 	strd	r0, r1, [sp]
   1d5f8:	4620      	mov	r0, r4
   1d5fa:	f00a fc07 	bl	27e0c <z_impl_k_timer_start>
   1d5fe:	e7e0      	b.n	1d5c2 <uarte_nrfx_tx+0x6e>
   1d600:	000f423f 	.word	0x000f423f
   1d604:	000f4240 	.word	0x000f4240

0001d608 <uarte_nrfx_configure>:
{
   1d608:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1d60a:	794b      	ldrb	r3, [r1, #5]
   1d60c:	2b01      	cmp	r3, #1
   1d60e:	d029      	beq.n	1d664 <uarte_nrfx_configure+0x5c>
   1d610:	2b03      	cmp	r3, #3
   1d612:	d124      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d614:	2710      	movs	r7, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d616:	798b      	ldrb	r3, [r1, #6]
   1d618:	2b03      	cmp	r3, #3
   1d61a:	d120      	bne.n	1d65e <uarte_nrfx_configure+0x56>
	switch (cfg->flow_ctrl) {
   1d61c:	79ce      	ldrb	r6, [r1, #7]
   1d61e:	b10e      	cbz	r6, 1d624 <uarte_nrfx_configure+0x1c>
   1d620:	2e01      	cmp	r6, #1
   1d622:	d11c      	bne.n	1d65e <uarte_nrfx_configure+0x56>
	switch (cfg->parity) {
   1d624:	790a      	ldrb	r2, [r1, #4]
   1d626:	2a01      	cmp	r2, #1
   1d628:	d01e      	beq.n	1d668 <uarte_nrfx_configure+0x60>
   1d62a:	2a02      	cmp	r2, #2
   1d62c:	d020      	beq.n	1d670 <uarte_nrfx_configure+0x68>
   1d62e:	b9b2      	cbnz	r2, 1d65e <uarte_nrfx_configure+0x56>
   1d630:	4614      	mov	r4, r2
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d632:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d634:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1d636:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d63a:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
   1d63e:	d06e      	beq.n	1d71e <uarte_nrfx_configure+0x116>
   1d640:	d833      	bhi.n	1d6aa <uarte_nrfx_configure+0xa2>
   1d642:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d646:	d06d      	beq.n	1d724 <uarte_nrfx_configure+0x11c>
   1d648:	d81c      	bhi.n	1d684 <uarte_nrfx_configure+0x7c>
   1d64a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d64e:	d06b      	beq.n	1d728 <uarte_nrfx_configure+0x120>
   1d650:	d810      	bhi.n	1d674 <uarte_nrfx_configure+0x6c>
   1d652:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d656:	d06a      	beq.n	1d72e <uarte_nrfx_configure+0x126>
   1d658:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d65c:	d06a      	beq.n	1d734 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
   1d65e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d662:	e05b      	b.n	1d71c <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
   1d664:	2700      	movs	r7, #0
   1d666:	e7d6      	b.n	1d616 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1d668:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d66c:	220e      	movs	r2, #14
   1d66e:	e7e0      	b.n	1d632 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1d670:	2400      	movs	r4, #0
   1d672:	e7fb      	b.n	1d66c <uarte_nrfx_configure+0x64>
	switch (baudrate) {
   1d674:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d678:	d05f      	beq.n	1d73a <uarte_nrfx_configure+0x132>
   1d67a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d67e:	d1ee      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d680:	4b38      	ldr	r3, [pc, #224]	; (1d764 <uarte_nrfx_configure+0x15c>)
   1d682:	e03c      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d684:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d688:	d05a      	beq.n	1d740 <uarte_nrfx_configure+0x138>
   1d68a:	d807      	bhi.n	1d69c <uarte_nrfx_configure+0x94>
   1d68c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d690:	d058      	beq.n	1d744 <uarte_nrfx_configure+0x13c>
   1d692:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d696:	d1e2      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d698:	4b33      	ldr	r3, [pc, #204]	; (1d768 <uarte_nrfx_configure+0x160>)
   1d69a:	e030      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d69c:	f647 2512 	movw	r5, #31250	; 0x7a12
   1d6a0:	42ab      	cmp	r3, r5
   1d6a2:	d1dc      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d6a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d6a8:	e029      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6aa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d6ae:	d04b      	beq.n	1d748 <uarte_nrfx_configure+0x140>
   1d6b0:	d813      	bhi.n	1d6da <uarte_nrfx_configure+0xd2>
   1d6b2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d6b6:	d04a      	beq.n	1d74e <uarte_nrfx_configure+0x146>
   1d6b8:	d809      	bhi.n	1d6ce <uarte_nrfx_configure+0xc6>
   1d6ba:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1d6be:	42ab      	cmp	r3, r5
   1d6c0:	d047      	beq.n	1d752 <uarte_nrfx_configure+0x14a>
   1d6c2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d6c6:	d1ca      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d6c8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d6cc:	e017      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6ce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d6d2:	d1c4      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d6d4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d6d8:	e011      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6da:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d6de:	d03b      	beq.n	1d758 <uarte_nrfx_configure+0x150>
   1d6e0:	d808      	bhi.n	1d6f4 <uarte_nrfx_configure+0xec>
   1d6e2:	4d22      	ldr	r5, [pc, #136]	; (1d76c <uarte_nrfx_configure+0x164>)
   1d6e4:	42ab      	cmp	r3, r5
   1d6e6:	d03a      	beq.n	1d75e <uarte_nrfx_configure+0x156>
   1d6e8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d6ec:	d1b7      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d6ee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d6f2:	e004      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d6f4:	4d1e      	ldr	r5, [pc, #120]	; (1d770 <uarte_nrfx_configure+0x168>)
   1d6f6:	42ab      	cmp	r3, r5
   1d6f8:	d1b1      	bne.n	1d65e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d6fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d6fe:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d700:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
   1d704:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
   1d706:	433a      	orrs	r2, r7
   1d708:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1d70a:	4334      	orrs	r4, r6
   1d70c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d70e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1d712:	1d2b      	adds	r3, r5, #4
   1d714:	c903      	ldmia	r1, {r0, r1}
   1d716:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1d71a:	2000      	movs	r0, #0
}
   1d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d71e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d722:	e7ec      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d724:	4b13      	ldr	r3, [pc, #76]	; (1d774 <uarte_nrfx_configure+0x16c>)
   1d726:	e7ea      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d728:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d72c:	e7e7      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
   1d72e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d732:	e7e4      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
   1d734:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d738:	e7e1      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d73a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d73e:	e7de      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d740:	4b0d      	ldr	r3, [pc, #52]	; (1d778 <uarte_nrfx_configure+0x170>)
   1d742:	e7dc      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d744:	4b0d      	ldr	r3, [pc, #52]	; (1d77c <uarte_nrfx_configure+0x174>)
   1d746:	e7da      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d748:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d74c:	e7d7      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d74e:	4b0c      	ldr	r3, [pc, #48]	; (1d780 <uarte_nrfx_configure+0x178>)
   1d750:	e7d5      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d752:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d756:	e7d2      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d758:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d75c:	e7cf      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d75e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d762:	e7cc      	b.n	1d6fe <uarte_nrfx_configure+0xf6>
   1d764:	0013b000 	.word	0x0013b000
   1d768:	004ea000 	.word	0x004ea000
   1d76c:	0003d090 	.word	0x0003d090
   1d770:	000f4240 	.word	0x000f4240
   1d774:	00275000 	.word	0x00275000
   1d778:	0075c000 	.word	0x0075c000
   1d77c:	003af000 	.word	0x003af000
   1d780:	013a9000 	.word	0x013a9000

0001d784 <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d784:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1d786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d78a:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1d78e:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1d790:	f8d9 4000 	ldr.w	r4, [r9]
static int uarte_instance_init(const struct device *dev,
   1d794:	b087      	sub	sp, #28
   1d796:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1d79a:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d79c:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
   1d7a0:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   1d7a2:	466a      	mov	r2, sp
   1d7a4:	4640      	mov	r0, r8
   1d7a6:	f011 f854 	bl	2e852 <pinctrl_lookup_state>
	if (ret < 0) {
   1d7aa:	1e05      	subs	r5, r0, #0
   1d7ac:	db26      	blt.n	1d7fc <uarte_instance_init.constprop.0+0x78>
	return pinctrl_apply_state_direct(config, state);
   1d7ae:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d7b0:	f8d8 2000 	ldr.w	r2, [r8]
   1d7b4:	7919      	ldrb	r1, [r3, #4]
   1d7b6:	6818      	ldr	r0, [r3, #0]
   1d7b8:	f011 f85e 	bl	2e878 <pinctrl_configure_pins>
	if (err < 0) {
   1d7bc:	1e05      	subs	r5, r0, #0
   1d7be:	db1d      	blt.n	1d7fc <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d7c0:	4638      	mov	r0, r7
   1d7c2:	1d31      	adds	r1, r6, #4
   1d7c4:	f7ff ff20 	bl	1d608 <uarte_nrfx_configure>
	if (err) {
   1d7c8:	4605      	mov	r5, r0
   1d7ca:	b9b8      	cbnz	r0, 1d7fc <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d7cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d7d0:	0799      	lsls	r1, r3, #30
   1d7d2:	d533      	bpl.n	1d83c <uarte_instance_init.constprop.0+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d7d4:	f106 001c 	add.w	r0, r6, #28
   1d7d8:	f001 fc62 	bl	1f0a0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d7dc:	4b4f      	ldr	r3, [pc, #316]	; (1d91c <uarte_instance_init.constprop.0+0x198>)
   1d7de:	4298      	cmp	r0, r3
   1d7e0:	d010      	beq.n	1d804 <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1d7e2:	4b4f      	ldr	r3, [pc, #316]	; (1d920 <uarte_instance_init.constprop.0+0x19c>)
   1d7e4:	9305      	str	r3, [sp, #20]
   1d7e6:	2302      	movs	r3, #2
   1d7e8:	9304      	str	r3, [sp, #16]
   1d7ea:	462b      	mov	r3, r5
		return -EIO;
   1d7ec:	f06f 0504 	mvn.w	r5, #4
   1d7f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d7f4:	484b      	ldr	r0, [pc, #300]	; (1d924 <uarte_instance_init.constprop.0+0x1a0>)
   1d7f6:	aa04      	add	r2, sp, #16
   1d7f8:	f7f1 f85a 	bl	e8b0 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1d7fc:	4628      	mov	r0, r5
   1d7fe:	b007      	add	sp, #28
   1d800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d804:	7f33      	ldrb	r3, [r6, #28]
    NRFX_ASSERT(tep);
   1d806:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d80a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1d80e:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   1d812:	d10b      	bne.n	1d82c <uarte_instance_init.constprop.0+0xa8>
   1d814:	4944      	ldr	r1, [pc, #272]	; (1d928 <uarte_instance_init.constprop.0+0x1a4>)
   1d816:	4845      	ldr	r0, [pc, #276]	; (1d92c <uarte_instance_init.constprop.0+0x1a8>)
   1d818:	f240 234e 	movw	r3, #590	; 0x24e
   1d81c:	4a44      	ldr	r2, [pc, #272]	; (1d930 <uarte_instance_init.constprop.0+0x1ac>)
   1d81e:	f00c ff5c 	bl	2a6da <assert_print>
   1d822:	f240 214e 	movw	r1, #590	; 0x24e
   1d826:	4842      	ldr	r0, [pc, #264]	; (1d930 <uarte_instance_init.constprop.0+0x1ac>)
   1d828:	f00c ff50 	bl	2a6cc <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1d82c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d830:	2301      	movs	r3, #1
   1d832:	7f32      	ldrb	r2, [r6, #28]
   1d834:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d836:	4a3f      	ldr	r2, [pc, #252]	; (1d934 <uarte_instance_init.constprop.0+0x1b0>)
   1d838:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d83c:	68f3      	ldr	r3, [r6, #12]
   1d83e:	2b00      	cmp	r3, #0
   1d840:	d059      	beq.n	1d8f6 <uarte_instance_init.constprop.0+0x172>
    p_reg->INTENSET = mask;
   1d842:	2204      	movs	r2, #4
	return config->uarte_regs;
   1d844:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d846:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1d84a:	681b      	ldr	r3, [r3, #0]
   1d84c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d850:	2201      	movs	r2, #1
   1d852:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1d856:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1d85a:	4937      	ldr	r1, [pc, #220]	; (1d938 <uarte_instance_init.constprop.0+0x1b4>)
   1d85c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d860:	2108      	movs	r1, #8
   1d862:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d866:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d86a:	b1a1      	cbz	r1, 1d896 <uarte_instance_init.constprop.0+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d86c:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d86e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d872:	b91a      	cbnz	r2, 1d87c <uarte_instance_init.constprop.0+0xf8>
   1d874:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d878:	2a00      	cmp	r2, #0
   1d87a:	d0f8      	beq.n	1d86e <uarte_instance_init.constprop.0+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d87c:	2200      	movs	r2, #0
   1d87e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d882:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d886:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d88a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d88e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d892:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d896:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d89a:	2200      	movs	r2, #0
   1d89c:	4927      	ldr	r1, [pc, #156]	; (1d93c <uarte_instance_init.constprop.0+0x1b8>)
   1d89e:	3080      	adds	r0, #128	; 0x80
   1d8a0:	f012 fd84 	bl	303ac <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d8a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1d8a8:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d8ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1d8b0:	2200      	movs	r2, #0
   1d8b2:	4923      	ldr	r1, [pc, #140]	; (1d940 <uarte_instance_init.constprop.0+0x1bc>)
   1d8b4:	3020      	adds	r0, #32
   1d8b6:	f012 fd79 	bl	303ac <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d8ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1d8be:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d8c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d8c6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d8c8:	bf5c      	itt	pl
   1d8ca:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d8ce:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d8d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1d8d6:	06db      	lsls	r3, r3, #27
   1d8d8:	bf44      	itt	mi
   1d8da:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d8de:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d8e2:	6973      	ldr	r3, [r6, #20]
   1d8e4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d8e8:	2300      	movs	r3, #0
   1d8ea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d8ee:	2301      	movs	r3, #1
   1d8f0:	60a3      	str	r3, [r4, #8]
   1d8f2:	60e3      	str	r3, [r4, #12]
	return 0;
   1d8f4:	e782      	b.n	1d7fc <uarte_instance_init.constprop.0+0x78>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d8f6:	2308      	movs	r3, #8
   1d8f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d8fc:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d900:	2b00      	cmp	r3, #0
   1d902:	d1de      	bne.n	1d8c2 <uarte_instance_init.constprop.0+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d904:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d908:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d90c:	69b3      	ldr	r3, [r6, #24]
   1d90e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d912:	2301      	movs	r3, #1
   1d914:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d918:	6023      	str	r3, [r4, #0]
}
   1d91a:	e7d2      	b.n	1d8c2 <uarte_instance_init.constprop.0+0x13e>
   1d91c:	0bad0000 	.word	0x0bad0000
   1d920:	0003704e 	.word	0x0003704e
   1d924:	00031604 	.word	0x00031604
   1d928:	00033581 	.word	0x00033581
   1d92c:	00032679 	.word	0x00032679
   1d930:	00033549 	.word	0x00033549
   1d934:	40017000 	.word	0x40017000
   1d938:	000a0210 	.word	0x000a0210
   1d93c:	0002e725 	.word	0x0002e725
   1d940:	0002e7f5 	.word	0x0002e7f5

0001d944 <uarte_nrfx_poll_out>:
{
   1d944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d948:	4604      	mov	r4, r0
   1d94a:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   1d94c:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d94e:	f012 fc0b 	bl	30168 <k_is_in_isr>
   1d952:	b9b0      	cbnz	r0, 1d982 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1d954:	4b2a      	ldr	r3, [pc, #168]	; (1da00 <uarte_nrfx_poll_out+0xbc>)
   1d956:	781b      	ldrb	r3, [r3, #0]
   1d958:	b19b      	cbz	r3, 1d982 <uarte_nrfx_poll_out+0x3e>
{
   1d95a:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d95c:	6860      	ldr	r0, [r4, #4]
   1d95e:	f010 fe98 	bl	2e692 <is_tx_ready.isra.0>
   1d962:	2800      	cmp	r0, #0
   1d964:	d138      	bne.n	1d9d8 <uarte_nrfx_poll_out+0x94>
   1d966:	2001      	movs	r0, #1
   1d968:	f011 f8b0 	bl	2eacc <nrfx_busy_wait>
   1d96c:	3f01      	subs	r7, #1
   1d96e:	d1f5      	bne.n	1d95c <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1d970:	2100      	movs	r1, #0
   1d972:	2021      	movs	r0, #33	; 0x21
   1d974:	f009 fd2c 	bl	273d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d978:	e7ef      	b.n	1d95a <uarte_nrfx_poll_out+0x16>
   1d97a:	f381 8811 	msr	BASEPRI, r1
   1d97e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d982:	f04f 0320 	mov.w	r3, #32
   1d986:	f3ef 8111 	mrs	r1, BASEPRI
   1d98a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d98e:	f3bf 8f6f 	isb	sy
   1d992:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1d996:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
   1d998:	4640      	mov	r0, r8
   1d99a:	f010 fe7a 	bl	2e692 <is_tx_ready.isra.0>
   1d99e:	2800      	cmp	r0, #0
   1d9a0:	d0eb      	beq.n	1d97a <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d9a2:	68eb      	ldr	r3, [r5, #12]
   1d9a4:	b15b      	cbz	r3, 1d9be <uarte_nrfx_poll_out+0x7a>
   1d9a6:	68da      	ldr	r2, [r3, #12]
   1d9a8:	b14a      	cbz	r2, 1d9be <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d9aa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d9ae:	2a00      	cmp	r2, #0
   1d9b0:	da05      	bge.n	1d9be <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d9b2:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d9b6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d9ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d9be:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
   1d9c0:	2201      	movs	r2, #1
	*data->char_out = c;
   1d9c2:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d9c4:	4620      	mov	r0, r4
   1d9c6:	6969      	ldr	r1, [r5, #20]
   1d9c8:	f010 fd0c 	bl	2e3e4 <tx_start>
	__asm__ volatile(
   1d9cc:	f387 8811 	msr	BASEPRI, r7
   1d9d0:	f3bf 8f6f 	isb	sy
}
   1d9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d9d8:	f04f 0320 	mov.w	r3, #32
   1d9dc:	f3ef 8111 	mrs	r1, BASEPRI
   1d9e0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9e4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d9e8:	6860      	ldr	r0, [r4, #4]
   1d9ea:	460f      	mov	r7, r1
   1d9ec:	f010 fe51 	bl	2e692 <is_tx_ready.isra.0>
   1d9f0:	2800      	cmp	r0, #0
   1d9f2:	d1e4      	bne.n	1d9be <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d9f4:	f381 8811 	msr	BASEPRI, r1
   1d9f8:	f3bf 8f6f 	isb	sy
}
   1d9fc:	e7b8      	b.n	1d970 <uarte_nrfx_poll_out+0x2c>
   1d9fe:	bf00      	nop
   1da00:	20022827 	.word	0x20022827

0001da04 <uarte_nrfx_rx_enable>:
{
   1da04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1da08:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
   1da0c:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1da0e:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1da12:	4605      	mov	r5, r0
   1da14:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
   1da16:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1da18:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
   1da1c:	b172      	cbz	r2, 1da3c <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1da1e:	4944      	ldr	r1, [pc, #272]	; (1db30 <uarte_nrfx_rx_enable+0x12c>)
   1da20:	f240 337d 	movw	r3, #893	; 0x37d
   1da24:	4a43      	ldr	r2, [pc, #268]	; (1db34 <uarte_nrfx_rx_enable+0x130>)
   1da26:	4844      	ldr	r0, [pc, #272]	; (1db38 <uarte_nrfx_rx_enable+0x134>)
   1da28:	f00c fe57 	bl	2a6da <assert_print>
   1da2c:	4843      	ldr	r0, [pc, #268]	; (1db3c <uarte_nrfx_rx_enable+0x138>)
   1da2e:	f00c fe54 	bl	2a6da <assert_print>
   1da32:	f240 317d 	movw	r1, #893	; 0x37d
   1da36:	483f      	ldr	r0, [pc, #252]	; (1db34 <uarte_nrfx_rx_enable+0x130>)
   1da38:	f00c fe48 	bl	2a6cc <assert_post_action>
	if (data->async->rx_enabled) {
   1da3c:	68e2      	ldr	r2, [r4, #12]
   1da3e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1da42:	2900      	cmp	r1, #0
   1da44:	d170      	bne.n	1db28 <uarte_nrfx_rx_enable+0x124>
		MAX(timeout / RX_TIMEOUT_DIV,
   1da46:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   1da4a:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1da4c:	bfca      	itet	gt
   1da4e:	2205      	movgt	r2, #5
   1da50:	235c      	movle	r3, #92	; 0x5c
   1da52:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1da56:	68e2      	ldr	r2, [r4, #12]
   1da58:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1da5a:	68e3      	ldr	r3, [r4, #12]
   1da5c:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1da60:	68e3      	ldr	r3, [r4, #12]
   1da62:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1da64:	2300      	movs	r3, #0
   1da66:	68e2      	ldr	r2, [r4, #12]
   1da68:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1da6a:	68e2      	ldr	r2, [r4, #12]
   1da6c:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1da6e:	68e2      	ldr	r2, [r4, #12]
   1da70:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1da72:	f8da 3004 	ldr.w	r3, [sl, #4]
   1da76:	06da      	lsls	r2, r3, #27
   1da78:	d523      	bpl.n	1dac2 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
   1da7a:	68e1      	ldr	r1, [r4, #12]
   1da7c:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1da80:	b1fe      	cbz	r6, 1dac2 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1da82:	42be      	cmp	r6, r7
   1da84:	bf28      	it	cs
   1da86:	463e      	movcs	r6, r7
   1da88:	4640      	mov	r0, r8
   1da8a:	4632      	mov	r2, r6
   1da8c:	31c4      	adds	r1, #196	; 0xc4
   1da8e:	f012 fd7e 	bl	3058e <memcpy>
			if (!len) {
   1da92:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1da94:	44b0      	add	r8, r6
			if (!len) {
   1da96:	d114      	bne.n	1dac2 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
   1da98:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
   1da9a:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   1da9c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1daa0:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
   1daa2:	1b9b      	subs	r3, r3, r6
   1daa4:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1daa8:	f010 fccb 	bl	2e442 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1daac:	68e1      	ldr	r1, [r4, #12]
   1daae:	4628      	mov	r0, r5
   1dab0:	3158      	adds	r1, #88	; 0x58
   1dab2:	f010 fcdf 	bl	2e474 <rx_buf_release>
				notify_rx_disable(dev);
   1dab6:	4628      	mov	r0, r5
   1dab8:	f010 fcf4 	bl	2e4a4 <notify_rx_disable>
	return 0;
   1dabc:	2000      	movs	r0, #0
}
   1dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dac2:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1dac4:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1dac8:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dacc:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1dad0:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
   1dad4:	2201      	movs	r2, #1
   1dad6:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1dada:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
   1dade:	68e3      	ldr	r3, [r4, #12]
   1dae0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dae4:	f8da 3004 	ldr.w	r3, [sl, #4]
   1dae8:	06db      	lsls	r3, r3, #27
   1daea:	d519      	bpl.n	1db20 <uarte_nrfx_rx_enable+0x11c>
	__asm__ volatile(
   1daec:	f04f 0320 	mov.w	r3, #32
   1daf0:	f3ef 8111 	mrs	r1, BASEPRI
   1daf4:	f383 8812 	msr	BASEPRI_MAX, r3
   1daf8:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1dafc:	692b      	ldr	r3, [r5, #16]
   1dafe:	68db      	ldr	r3, [r3, #12]
   1db00:	b12b      	cbz	r3, 1db0e <uarte_nrfx_rx_enable+0x10a>
		data->async->low_power_mask |= mask;
   1db02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1db06:	f042 0202 	orr.w	r2, r2, #2
   1db0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1db0e:	2208      	movs	r2, #8
	return config->uarte_regs;
   1db10:	686b      	ldr	r3, [r5, #4]
   1db12:	681b      	ldr	r3, [r3, #0]
   1db14:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1db18:	f381 8811 	msr	BASEPRI, r1
   1db1c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1db20:	2301      	movs	r3, #1
   1db22:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1db26:	e7c9      	b.n	1dabc <uarte_nrfx_rx_enable+0xb8>
		return -EBUSY;
   1db28:	f06f 000f 	mvn.w	r0, #15
   1db2c:	e7c7      	b.n	1dabe <uarte_nrfx_rx_enable+0xba>
   1db2e:	bf00      	nop
   1db30:	00037b56 	.word	0x00037b56
   1db34:	0003706d 	.word	0x0003706d
   1db38:	00032679 	.word	0x00032679
   1db3c:	000370a1 	.word	0x000370a1

0001db40 <uarte_nrfx_isr_async>:
{
   1db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1db44:	6843      	ldr	r3, [r0, #4]
{
   1db46:	4604      	mov	r4, r0
	return config->uarte_regs;
   1db48:	681d      	ldr	r5, [r3, #0]
{
   1db4a:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db4c:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
   1db50:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
   1db52:	b169      	cbz	r1, 1db70 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db54:	2200      	movs	r2, #0
   1db56:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1db5a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1db5e:	68da      	ldr	r2, [r3, #12]
   1db60:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1db64:	3301      	adds	r3, #1
   1db66:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1db6a:	b008      	add	sp, #32
   1db6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1db70:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1db74:	b323      	cbz	r3, 1dbc0 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1db76:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1db7a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1db7e:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
   1db80:	2214      	movs	r2, #20
	return config->uarte_regs;
   1db82:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
   1db84:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1db86:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1db8a:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
   1db8e:	f012 fd38 	bl	30602 <memset>
   1db92:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db94:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1db96:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1db9a:	f100 8103 	bmi.w	1dda4 <uarte_nrfx_isr_async+0x264>
   1db9e:	07b3      	lsls	r3, r6, #30
   1dba0:	f100 8102 	bmi.w	1dda8 <uarte_nrfx_isr_async+0x268>
   1dba4:	0777      	lsls	r7, r6, #29
   1dba6:	f100 8101 	bmi.w	1ddac <uarte_nrfx_isr_async+0x26c>
   1dbaa:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1dbae:	4620      	mov	r0, r4
   1dbb0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1dbb2:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1dbb6:	f010 fc3d 	bl	2e434 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1dbba:	4620      	mov	r0, r4
   1dbbc:	f010 fcd0 	bl	2e560 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbc0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1dbc4:	b38b      	cbz	r3, 1dc2a <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1dbc6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1dbca:	06d8      	lsls	r0, r3, #27
   1dbcc:	d52d      	bpl.n	1dc2a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbce:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
   1dbd2:	2201      	movs	r2, #1
   1dbd4:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1dbd8:	6926      	ldr	r6, [r4, #16]
   1dbda:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1dbde:	6863      	ldr	r3, [r4, #4]
   1dbe0:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1dbe2:	68f3      	ldr	r3, [r6, #12]
   1dbe4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1dbe8:	68f0      	ldr	r0, [r6, #12]
   1dbea:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1dbec:	f012 fbea 	bl	303c4 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1dbf0:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1dbf2:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1dbf6:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1dbfa:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1dbfe:	68f2      	ldr	r2, [r6, #12]
   1dc00:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1dc02:	1a1b      	subs	r3, r3, r0
   1dc04:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1dc06:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1dc08:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1dc0c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1dc0e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1dc10:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1dc12:	dd02      	ble.n	1dc1a <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1dc14:	4620      	mov	r0, r4
   1dc16:	f010 fc14 	bl	2e442 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1dc1a:	68f1      	ldr	r1, [r6, #12]
   1dc1c:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1dc20:	2b00      	cmp	r3, #0
   1dc22:	f040 80c5 	bne.w	1ddb0 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1dc26:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc2a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1dc2e:	b383      	cbz	r3, 1dc92 <uarte_nrfx_isr_async+0x152>
   1dc30:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1dc34:	bb6e      	cbnz	r6, 1dc92 <uarte_nrfx_isr_async+0x152>
	struct uart_event evt = {
   1dc36:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc38:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
   1dc3c:	4631      	mov	r1, r6
   1dc3e:	a803      	add	r0, sp, #12
   1dc40:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
   1dc44:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
   1dc46:	f012 fcdc 	bl	30602 <memset>
   1dc4a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1dc4c:	a903      	add	r1, sp, #12
   1dc4e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1dc50:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1dc54:	f010 fbee 	bl	2e434 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1dc58:	68fb      	ldr	r3, [r7, #12]
   1dc5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1dc5c:	1c51      	adds	r1, r2, #1
   1dc5e:	d018      	beq.n	1dc92 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1dc60:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1dc62:	68ff      	ldr	r7, [r7, #12]
   1dc64:	498e      	ldr	r1, [pc, #568]	; (1dea0 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1dc66:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1dc68:	468e      	mov	lr, r1
   1dc6a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1dc6e:	4631      	mov	r1, r6
   1dc70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1dc74:	fbcc e100 	smlal	lr, r1, ip, r0
   1dc78:	2300      	movs	r3, #0
   1dc7a:	4670      	mov	r0, lr
   1dc7c:	4a89      	ldr	r2, [pc, #548]	; (1dea4 <uarte_nrfx_isr_async+0x364>)
   1dc7e:	f7eb f937 	bl	8ef0 <__aeabi_uldivmod>
   1dc82:	4602      	mov	r2, r0
   1dc84:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1dc86:	e9cd 0100 	strd	r0, r1, [sp]
   1dc8a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1dc8e:	f00a f8bd 	bl	27e0c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc92:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1dc96:	b333      	cbz	r3, 1dce6 <uarte_nrfx_isr_async+0x1a6>
   1dc98:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1dc9c:	bb1e      	cbnz	r6, 1dce6 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dc9e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1dca2:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   1dca4:	4620      	mov	r0, r4
   1dca6:	68f9      	ldr	r1, [r7, #12]
   1dca8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1dcac:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
   1dcae:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1dcb2:	f010 fbdf 	bl	2e474 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1dcb6:	68f9      	ldr	r1, [r7, #12]
   1dcb8:	4620      	mov	r0, r4
   1dcba:	3164      	adds	r1, #100	; 0x64
   1dcbc:	f010 fbda 	bl	2e474 <rx_buf_release>
	if (data->async->rx_enabled) {
   1dcc0:	68fb      	ldr	r3, [r7, #12]
   1dcc2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1dcc6:	2a00      	cmp	r2, #0
   1dcc8:	f000 80a3 	beq.w	1de12 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1dccc:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dcd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1dcd4:	06d8      	lsls	r0, r3, #27
   1dcd6:	d503      	bpl.n	1dce0 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1dcd8:	2102      	movs	r1, #2
   1dcda:	4620      	mov	r0, r4
   1dcdc:	f010 fcaf 	bl	2e63e <async_uart_release>
	notify_rx_disable(dev);
   1dce0:	4620      	mov	r0, r4
   1dce2:	f010 fbdf 	bl	2e4a4 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dce6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1dcea:	b1db      	cbz	r3, 1dd24 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1dcec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1dcf0:	05d9      	lsls	r1, r3, #23
   1dcf2:	d517      	bpl.n	1dd24 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1dcf4:	6863      	ldr	r3, [r4, #4]
   1dcf6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1dcf8:	f04f 0120 	mov.w	r1, #32
   1dcfc:	f3ef 8211 	mrs	r2, BASEPRI
   1dd00:	f381 8812 	msr	BASEPRI_MAX, r1
   1dd04:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd08:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1dd0c:	b131      	cbz	r1, 1dd1c <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dd0e:	2100      	movs	r1, #0
   1dd10:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1dd14:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dd18:	2101      	movs	r1, #1
   1dd1a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1dd1c:	f382 8811 	msr	BASEPRI, r2
   1dd20:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd24:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1dd28:	2b00      	cmp	r3, #0
   1dd2a:	f43f af1e 	beq.w	1db6a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1dd2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1dd32:	025a      	lsls	r2, r3, #9
   1dd34:	f57f af19 	bpl.w	1db6a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1dd38:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1dd3a:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1dd3c:	e9d3 7300 	ldrd	r7, r3, [r3]
   1dd40:	06db      	lsls	r3, r3, #27
   1dd42:	d46b      	bmi.n	1de1c <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1dd44:	68eb      	ldr	r3, [r5, #12]
   1dd46:	689b      	ldr	r3, [r3, #8]
   1dd48:	2b00      	cmp	r3, #0
   1dd4a:	f43f af0e 	beq.w	1db6a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1dd4e:	f04f 0320 	mov.w	r3, #32
   1dd52:	f3ef 8211 	mrs	r2, BASEPRI
   1dd56:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd5a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1dd5e:	68eb      	ldr	r3, [r5, #12]
   1dd60:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1dd64:	2900      	cmp	r1, #0
   1dd66:	bfac      	ite	ge
   1dd68:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1dd6c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1dd70:	f382 8811 	msr	BASEPRI, r2
   1dd74:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1dd78:	68eb      	ldr	r3, [r5, #12]
   1dd7a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1dd7e:	2a00      	cmp	r2, #0
   1dd80:	d059      	beq.n	1de36 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1dd82:	f04f 0320 	mov.w	r3, #32
   1dd86:	f3ef 8611 	mrs	r6, BASEPRI
   1dd8a:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd8e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1dd92:	4629      	mov	r1, r5
   1dd94:	4620      	mov	r0, r4
   1dd96:	f010 fc8c 	bl	2e6b2 <start_tx_locked>
	__asm__ volatile(
   1dd9a:	f386 8811 	msr	BASEPRI, r6
   1dd9e:	f3bf 8f6f 	isb	sy
				return;
   1dda2:	e6e2      	b.n	1db6a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1dda4:	2601      	movs	r6, #1
   1dda6:	e702      	b.n	1dbae <uarte_nrfx_isr_async+0x6e>
   1dda8:	2602      	movs	r6, #2
   1ddaa:	e700      	b.n	1dbae <uarte_nrfx_isr_async+0x6e>
   1ddac:	2604      	movs	r6, #4
   1ddae:	e6fe      	b.n	1dbae <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	3158      	adds	r1, #88	; 0x58
   1ddb4:	f010 fb5e 	bl	2e474 <rx_buf_release>
	__asm__ volatile(
   1ddb8:	f04f 0320 	mov.w	r3, #32
   1ddbc:	f3ef 8111 	mrs	r1, BASEPRI
   1ddc0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ddc4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1ddc8:	68f3      	ldr	r3, [r6, #12]
   1ddca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1ddcc:	b1f2      	cbz	r2, 1de0c <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1ddce:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1ddd0:	68f3      	ldr	r3, [r6, #12]
   1ddd2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1ddd4:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1ddd6:	2300      	movs	r3, #0
   1ddd8:	68f2      	ldr	r2, [r6, #12]
   1ddda:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1dddc:	68f2      	ldr	r2, [r6, #12]
   1ddde:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1dde0:	68f2      	ldr	r2, [r6, #12]
   1dde2:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dde4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1dde8:	b90b      	cbnz	r3, 1ddee <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ddea:	2301      	movs	r3, #1
   1ddec:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1ddee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1ddf2:	f023 0320 	bic.w	r3, r3, #32
   1ddf6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1ddfa:	f381 8811 	msr	BASEPRI, r1
   1ddfe:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1de02:	2200      	movs	r2, #0
   1de04:	68f3      	ldr	r3, [r6, #12]
   1de06:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1de0a:	e70e      	b.n	1dc2a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de0c:	2301      	movs	r3, #1
   1de0e:	607b      	str	r3, [r7, #4]
}
   1de10:	e7f3      	b.n	1ddfa <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1de12:	4611      	mov	r1, r2
   1de14:	6860      	ldr	r0, [r4, #4]
   1de16:	f010 fbdd 	bl	2e5d4 <rx_flush.isra.0>
   1de1a:	e759      	b.n	1dcd0 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1de1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1de20:	2101      	movs	r1, #1
   1de22:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
   1de26:	4620      	mov	r0, r4
   1de28:	f010 fc09 	bl	2e63e <async_uart_release>
		if (!data->async->tx_size) {
   1de2c:	68eb      	ldr	r3, [r5, #12]
   1de2e:	68db      	ldr	r3, [r3, #12]
   1de30:	2b00      	cmp	r3, #0
   1de32:	d187      	bne.n	1dd44 <uarte_nrfx_isr_async+0x204>
   1de34:	e699      	b.n	1db6a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1de36:	6899      	ldr	r1, [r3, #8]
   1de38:	691a      	ldr	r2, [r3, #16]
   1de3a:	4291      	cmp	r1, r2
   1de3c:	d00c      	beq.n	1de58 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1de3e:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1de40:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1de42:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1de44:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1de46:	d128      	bne.n	1de9a <uarte_nrfx_isr_async+0x35a>
			if (setup_tx_cache(data)) {
   1de48:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
   1de4a:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1de4c:	f010 fbaa 	bl	2e5a4 <setup_tx_cache>
   1de50:	2800      	cmp	r0, #0
   1de52:	d196      	bne.n	1dd82 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1de54:	68eb      	ldr	r3, [r5, #12]
   1de56:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1de58:	68e8      	ldr	r0, [r5, #12]
   1de5a:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1de5c:	f012 fab2 	bl	303c4 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1de60:	2214      	movs	r2, #20
   1de62:	2100      	movs	r1, #0
   1de64:	a803      	add	r0, sp, #12
   1de66:	f012 fbcc 	bl	30602 <memset>
		.data.tx.buf = data->async->tx_buf,
   1de6a:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
   1de6c:	4620      	mov	r0, r4
	struct uart_event evt = {
   1de6e:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
   1de70:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1de72:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1de76:	68db      	ldr	r3, [r3, #12]
   1de78:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1de7a:	bf1c      	itt	ne
   1de7c:	2301      	movne	r3, #1
   1de7e:	f88d 300c 	strbne.w	r3, [sp, #12]
   1de82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1de86:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1de8a:	2300      	movs	r3, #0
   1de8c:	68ea      	ldr	r2, [r5, #12]
   1de8e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1de90:	68ea      	ldr	r2, [r5, #12]
   1de92:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1de94:	f010 face 	bl	2e434 <user_callback>
   1de98:	e667      	b.n	1db6a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1de9a:	4616      	mov	r6, r2
   1de9c:	e7dc      	b.n	1de58 <uarte_nrfx_isr_async+0x318>
   1de9e:	bf00      	nop
   1dea0:	000f423f 	.word	0x000f423f
   1dea4:	000f4240 	.word	0x000f4240

0001dea8 <bt_rpmsg_send>:
		LOG_HEXDUMP_DBG(buf->data, buf->len, "RX buf payload:");
	}
}

static int bt_rpmsg_send(struct net_buf *buf)
{
   1dea8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1deaa:	7e01      	ldrb	r1, [r0, #24]
   1deac:	4604      	mov	r4, r0
	int err;
	uint8_t pkt_indicator;

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1deae:	2902      	cmp	r1, #2
{
   1deb0:	af00      	add	r7, sp, #0
	switch (bt_buf_get_type(buf)) {
   1deb2:	d018      	beq.n	1dee6 <bt_rpmsg_send+0x3e>
   1deb4:	2904      	cmp	r1, #4
   1deb6:	d015      	beq.n	1dee4 <bt_rpmsg_send+0x3c>
   1deb8:	b339      	cbz	r1, 1df0a <bt_rpmsg_send+0x62>
		break;
	case BT_BUF_ISO_OUT:
		pkt_indicator = RPMSG_ISO;
		break;
	default:
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   1deba:	466d      	mov	r5, sp
   1debc:	b088      	sub	sp, #32
   1debe:	466a      	mov	r2, sp
   1dec0:	4b13      	ldr	r3, [pc, #76]	; (1df10 <bt_rpmsg_send+0x68>)
	switch (bt_buf_get_type(buf)) {
   1dec2:	e9c2 3105 	strd	r3, r1, [r2, #20]
	net_buf_push_u8(buf, pkt_indicator);

	LOG_HEXDUMP_DBG(buf->data, buf->len, "Final HCI buffer:");
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
	if (err < 0) {
		LOG_ERR("Failed to send (err %d)", err);
   1dec6:	2303      	movs	r3, #3
   1dec8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1decc:	4811      	ldr	r0, [pc, #68]	; (1df14 <bt_rpmsg_send+0x6c>)
   1dece:	f842 3f10 	str.w	r3, [r2, #16]!
   1ded2:	f010 fc93 	bl	2e7fc <z_log_msg_static_create.constprop.0>
   1ded6:	46ad      	mov	sp, r5
	}

done:
	net_buf_unref(buf);
   1ded8:	4620      	mov	r0, r4
   1deda:	f7fd fb65 	bl	1b5a8 <net_buf_unref>
	return 0;
}
   1dede:	2000      	movs	r0, #0
   1dee0:	46bd      	mov	sp, r7
   1dee2:	bdb0      	pop	{r4, r5, r7, pc}
		pkt_indicator = RPMSG_ISO;
   1dee4:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   1dee6:	f104 000c 	add.w	r0, r4, #12
   1deea:	f010 f889 	bl	2e000 <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   1deee:	8a22      	ldrh	r2, [r4, #16]
   1def0:	68e1      	ldr	r1, [r4, #12]
   1def2:	4809      	ldr	r0, [pc, #36]	; (1df18 <bt_rpmsg_send+0x70>)
   1def4:	f7f1 fba6 	bl	f644 <ipc_service_send>
	if (err < 0) {
   1def8:	2800      	cmp	r0, #0
   1defa:	daed      	bge.n	1ded8 <bt_rpmsg_send+0x30>
		LOG_ERR("Failed to send (err %d)", err);
   1defc:	466d      	mov	r5, sp
   1defe:	b088      	sub	sp, #32
   1df00:	466a      	mov	r2, sp
   1df02:	4b06      	ldr	r3, [pc, #24]	; (1df1c <bt_rpmsg_send+0x74>)
   1df04:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1df08:	e7dd      	b.n	1dec6 <bt_rpmsg_send+0x1e>
	switch (bt_buf_get_type(buf)) {
   1df0a:	2101      	movs	r1, #1
   1df0c:	e7eb      	b.n	1dee6 <bt_rpmsg_send+0x3e>
   1df0e:	bf00      	nop
   1df10:	000370dd 	.word	0x000370dd
   1df14:	00031504 	.word	0x00031504
   1df18:	200218b8 	.word	0x200218b8
   1df1c:	000370ed 	.word	0x000370ed

0001df20 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   1df20:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   1df22:	480c      	ldr	r0, [pc, #48]	; (1df54 <bt_rpmsg_init+0x34>)
{
   1df24:	af00      	add	r7, sp, #0
	err = bt_hci_driver_register(&drv);
   1df26:	f7f5 faa7 	bl	13478 <bt_hci_driver_register>
	if (err < 0) {
   1df2a:	1e04      	subs	r4, r0, #0
   1df2c:	da0e      	bge.n	1df4c <bt_rpmsg_init+0x2c>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   1df2e:	466d      	mov	r5, sp
   1df30:	b088      	sub	sp, #32
   1df32:	466a      	mov	r2, sp
   1df34:	4b08      	ldr	r3, [pc, #32]	; (1df58 <bt_rpmsg_init+0x38>)
   1df36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df3a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1df3e:	2303      	movs	r3, #3
   1df40:	4806      	ldr	r0, [pc, #24]	; (1df5c <bt_rpmsg_init+0x3c>)
   1df42:	f842 3f10 	str.w	r3, [r2, #16]!
   1df46:	f010 fc59 	bl	2e7fc <z_log_msg_static_create.constprop.0>
   1df4a:	46ad      	mov	sp, r5
	}

	return err;
}
   1df4c:	4620      	mov	r0, r4
   1df4e:	46bd      	mov	sp, r7
   1df50:	bdb0      	pop	{r4, r5, r7, pc}
   1df52:	bf00      	nop
   1df54:	000324b8 	.word	0x000324b8
   1df58:	00037105 	.word	0x00037105
   1df5c:	00031504 	.word	0x00031504

0001df60 <hci_ept_bound>:
	z_impl_k_sem_give(sem);
   1df60:	4801      	ldr	r0, [pc, #4]	; (1df68 <hci_ept_bound+0x8>)
   1df62:	f007 bb41 	b.w	255e8 <z_impl_k_sem_give>
   1df66:	bf00      	nop
   1df68:	20008bec 	.word	0x20008bec

0001df6c <bt_rpmsg_open>:
{
   1df6c:	b5b0      	push	{r4, r5, r7, lr}
	err = ipc_service_open_instance(hci_ipc_instance);
   1df6e:	481a      	ldr	r0, [pc, #104]	; (1dfd8 <bt_rpmsg_open+0x6c>)
{
   1df70:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   1df72:	f7f1 fb07 	bl	f584 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   1df76:	4604      	mov	r4, r0
   1df78:	b1a0      	cbz	r0, 1dfa4 <bt_rpmsg_open+0x38>
   1df7a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1df7e:	d011      	beq.n	1dfa4 <bt_rpmsg_open+0x38>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   1df80:	466d      	mov	r5, sp
   1df82:	b088      	sub	sp, #32
   1df84:	466a      	mov	r2, sp
   1df86:	4b15      	ldr	r3, [pc, #84]	; (1dfdc <bt_rpmsg_open+0x70>)
		LOG_ERR("Endpoint binding failed with %d", err);
   1df88:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1df8c:	2303      	movs	r3, #3
   1df8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1df92:	4813      	ldr	r0, [pc, #76]	; (1dfe0 <bt_rpmsg_open+0x74>)
   1df94:	f842 3f10 	str.w	r3, [r2, #16]!
   1df98:	f010 fc30 	bl	2e7fc <z_log_msg_static_create.constprop.0>
   1df9c:	46ad      	mov	sp, r5
}
   1df9e:	4620      	mov	r0, r4
   1dfa0:	46bd      	mov	sp, r7
   1dfa2:	bdb0      	pop	{r4, r5, r7, pc}
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   1dfa4:	4a0f      	ldr	r2, [pc, #60]	; (1dfe4 <bt_rpmsg_open+0x78>)
   1dfa6:	4910      	ldr	r1, [pc, #64]	; (1dfe8 <bt_rpmsg_open+0x7c>)
   1dfa8:	480b      	ldr	r0, [pc, #44]	; (1dfd8 <bt_rpmsg_open+0x6c>)
   1dfaa:	f7f1 fb19 	bl	f5e0 <ipc_service_register_endpoint>
	if (err) {
   1dfae:	4604      	mov	r4, r0
   1dfb0:	b120      	cbz	r0, 1dfbc <bt_rpmsg_open+0x50>
		LOG_ERR("Registering endpoint failed with %d", err);
   1dfb2:	466d      	mov	r5, sp
   1dfb4:	b088      	sub	sp, #32
   1dfb6:	466a      	mov	r2, sp
   1dfb8:	4b0c      	ldr	r3, [pc, #48]	; (1dfec <bt_rpmsg_open+0x80>)
   1dfba:	e7e5      	b.n	1df88 <bt_rpmsg_open+0x1c>
	return z_impl_k_sem_take(sem, timeout);
   1dfbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1dfc0:	2300      	movs	r3, #0
   1dfc2:	480b      	ldr	r0, [pc, #44]	; (1dff0 <bt_rpmsg_open+0x84>)
   1dfc4:	f007 fb54 	bl	25670 <z_impl_k_sem_take>
	if (err) {
   1dfc8:	4604      	mov	r4, r0
   1dfca:	2800      	cmp	r0, #0
   1dfcc:	d0e7      	beq.n	1df9e <bt_rpmsg_open+0x32>
		LOG_ERR("Endpoint binding failed with %d", err);
   1dfce:	466d      	mov	r5, sp
   1dfd0:	b088      	sub	sp, #32
   1dfd2:	466a      	mov	r2, sp
   1dfd4:	4b07      	ldr	r3, [pc, #28]	; (1dff4 <bt_rpmsg_open+0x88>)
   1dfd6:	e7d7      	b.n	1df88 <bt_rpmsg_open+0x1c>
   1dfd8:	00030fe4 	.word	0x00030fe4
   1dfdc:	0003712f 	.word	0x0003712f
   1dfe0:	00031504 	.word	0x00031504
   1dfe4:	20008674 	.word	0x20008674
   1dfe8:	200218b8 	.word	0x200218b8
   1dfec:	0003715f 	.word	0x0003715f
   1dff0:	20008bec 	.word	0x20008bec
   1dff4:	00037183 	.word	0x00037183

0001dff8 <hci_ept_recv>:
{
   1dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dffc:	b089      	sub	sp, #36	; 0x24
	pkt_indicator = *data++;
   1dffe:	f890 8000 	ldrb.w	r8, [r0]
{
   1e002:	4606      	mov	r6, r0
	switch (pkt_indicator) {
   1e004:	f1b8 0f04 	cmp.w	r8, #4
{
   1e008:	460c      	mov	r4, r1
   1e00a:	af00      	add	r7, sp, #0
	remaining -= sizeof(pkt_indicator);
   1e00c:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
   1e010:	d00d      	beq.n	1e02e <hci_ept_recv+0x36>
   1e012:	f1b8 0f05 	cmp.w	r8, #5
   1e016:	f000 80a8 	beq.w	1e16a <hci_ept_recv+0x172>
   1e01a:	f1b8 0f02 	cmp.w	r8, #2
   1e01e:	f040 80cf 	bne.w	1e1c0 <hci_ept_recv+0x1c8>
	if (remaining < sizeof(hdr)) {
   1e022:	2b03      	cmp	r3, #3
   1e024:	d86e      	bhi.n	1e104 <hci_ept_recv+0x10c>
		LOG_ERR("Not enough data for ACL header");
   1e026:	4b6e      	ldr	r3, [pc, #440]	; (1e1e0 <hci_ept_recv+0x1e8>)
		LOG_ERR("No available ACL buffers!");
   1e028:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1e02c:	e005      	b.n	1e03a <hci_ept_recv+0x42>
	if (remaining < sizeof(hdr)) {
   1e02e:	2b01      	cmp	r3, #1
   1e030:	d80e      	bhi.n	1e050 <hci_ept_recv+0x58>
		LOG_ERR("Not enough data for event header");
   1e032:	4b6c      	ldr	r3, [pc, #432]	; (1e1e4 <hci_ept_recv+0x1ec>)
		LOG_ERR("Event payload length is not correct");
   1e034:	61fb      	str	r3, [r7, #28]
   1e036:	2302      	movs	r3, #2
   1e038:	61bb      	str	r3, [r7, #24]
   1e03a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e03e:	486a      	ldr	r0, [pc, #424]	; (1e1e8 <hci_ept_recv+0x1f0>)
   1e040:	f107 0218 	add.w	r2, r7, #24
   1e044:	f010 fbda 	bl	2e7fc <z_log_msg_static_create.constprop.0>
}
   1e048:	3724      	adds	r7, #36	; 0x24
   1e04a:	46bd      	mov	sp, r7
   1e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (evt_type) {
   1e050:	7843      	ldrb	r3, [r0, #1]
   1e052:	2b3e      	cmp	r3, #62	; 0x3e
   1e054:	d13c      	bne.n	1e0d0 <hci_ept_recv+0xd8>
		switch (subevt_type) {
   1e056:	f890 a003 	ldrb.w	sl, [r0, #3]
   1e05a:	f1aa 0302 	sub.w	r3, sl, #2
   1e05e:	f1d3 0a00 	rsbs	sl, r3, #0
   1e062:	eb4a 0a03 	adc.w	sl, sl, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
   1e066:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	remaining -= sizeof(hdr);
   1e06a:	3c03      	subs	r4, #3
	if (remaining != hdr.len) {
   1e06c:	ebb4 2f13 	cmp.w	r4, r3, lsr #8
	memcpy((void *)&hdr, data, sizeof(hdr));
   1e070:	80bb      	strh	r3, [r7, #4]
	if (remaining != hdr.len) {
   1e072:	d133      	bne.n	1e0dc <hci_ept_recv+0xe4>
   1e074:	f1ba 0f00 	cmp.w	sl, #0
   1e078:	d02d      	beq.n	1e0d6 <hci_ept_recv+0xde>
   1e07a:	f04f 0800 	mov.w	r8, #0
   1e07e:	f04f 0900 	mov.w	r9, #0
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1e082:	f04f 0b02 	mov.w	fp, #2
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   1e086:	4642      	mov	r2, r8
   1e088:	464b      	mov	r3, r9
   1e08a:	4651      	mov	r1, sl
   1e08c:	7938      	ldrb	r0, [r7, #4]
   1e08e:	f7f3 ff3d 	bl	11f0c <bt_buf_get_evt>
		if (!buf) {
   1e092:	4605      	mov	r5, r0
   1e094:	b320      	cbz	r0, 1e0e0 <hci_ept_recv+0xe8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e096:	f100 080c 	add.w	r8, r0, #12
   1e09a:	2202      	movs	r2, #2
   1e09c:	1d39      	adds	r1, r7, #4
   1e09e:	4640      	mov	r0, r8
   1e0a0:	f00f ffc9 	bl	2e036 <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   1e0a4:	4640      	mov	r0, r8
   1e0a6:	f00f ffbe 	bl	2e026 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e0aa:	4284      	cmp	r4, r0
   1e0ac:	d926      	bls.n	1e0fc <hci_ept_recv+0x104>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   1e0ae:	466e      	mov	r6, sp
   1e0b0:	b088      	sub	sp, #32
   1e0b2:	466a      	mov	r2, sp
   1e0b4:	4b4d      	ldr	r3, [pc, #308]	; (1e1ec <hci_ept_recv+0x1f4>)
   1e0b6:	61d0      	str	r0, [r2, #28]
   1e0b8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1e0bc:	2304      	movs	r3, #4
   1e0be:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e0c2:	4849      	ldr	r0, [pc, #292]	; (1e1e8 <hci_ept_recv+0x1f0>)
   1e0c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0c8:	f010 fb98 	bl	2e7fc <z_log_msg_static_create.constprop.0>
   1e0cc:	46b5      	mov	sp, r6
   1e0ce:	e038      	b.n	1e142 <hci_ept_recv+0x14a>
			return false;
   1e0d0:	f04f 0a00 	mov.w	sl, #0
   1e0d4:	e7c7      	b.n	1e066 <hci_ept_recv+0x6e>
   1e0d6:	f44f 28a0 	mov.w	r8, #327680	; 0x50000
   1e0da:	e7d0      	b.n	1e07e <hci_ept_recv+0x86>
		LOG_ERR("Event payload length is not correct");
   1e0dc:	4b44      	ldr	r3, [pc, #272]	; (1e1f0 <hci_ept_recv+0x1f8>)
   1e0de:	e7a9      	b.n	1e034 <hci_ept_recv+0x3c>
			if (discardable) {
   1e0e0:	f1ba 0f00 	cmp.w	sl, #0
   1e0e4:	d1b0      	bne.n	1e048 <hci_ept_recv+0x50>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   1e0e6:	4b43      	ldr	r3, [pc, #268]	; (1e1f4 <hci_ept_recv+0x1fc>)
   1e0e8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e0ec:	e9c7 b306 	strd	fp, r3, [r7, #24]
   1e0f0:	483d      	ldr	r0, [pc, #244]	; (1e1e8 <hci_ept_recv+0x1f0>)
   1e0f2:	f107 0218 	add.w	r2, r7, #24
   1e0f6:	f010 fb81 	bl	2e7fc <z_log_msg_static_create.constprop.0>
	} while (!buf);
   1e0fa:	e7c4      	b.n	1e086 <hci_ept_recv+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e0fc:	4622      	mov	r2, r4
   1e0fe:	1cf1      	adds	r1, r6, #3
   1e100:	4640      	mov	r0, r8
   1e102:	e02c      	b.n	1e15e <hci_ept_recv+0x166>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   1e104:	2200      	movs	r2, #0
   1e106:	2300      	movs	r3, #0
   1e108:	2003      	movs	r0, #3
   1e10a:	f7f3 feb1 	bl	11e70 <bt_buf_get_rx>
	if (buf) {
   1e10e:	4605      	mov	r5, r0
   1e110:	b1d8      	cbz	r0, 1e14a <hci_ept_recv+0x152>
   1e112:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1e114:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1e118:	f100 090c 	add.w	r9, r0, #12
   1e11c:	607b      	str	r3, [r7, #4]
   1e11e:	4648      	mov	r0, r9
   1e120:	18b9      	adds	r1, r7, r2
   1e122:	f00f ff88 	bl	2e036 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1e126:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1e128:	3c05      	subs	r4, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   1e12a:	429c      	cmp	r4, r3
   1e12c:	d00f      	beq.n	1e14e <hci_ept_recv+0x156>
		LOG_ERR("ACL payload length is not correct");
   1e12e:	4b32      	ldr	r3, [pc, #200]	; (1e1f8 <hci_ept_recv+0x200>)
   1e130:	e9c7 8306 	strd	r8, r3, [r7, #24]
		LOG_ERR("ISO payload length is not correct");
   1e134:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e138:	482b      	ldr	r0, [pc, #172]	; (1e1e8 <hci_ept_recv+0x1f0>)
   1e13a:	f107 0218 	add.w	r2, r7, #24
   1e13e:	f010 fb5d 	bl	2e7fc <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1e142:	4628      	mov	r0, r5
   1e144:	f7fd fa30 	bl	1b5a8 <net_buf_unref>
	if (buf) {
   1e148:	e77e      	b.n	1e048 <hci_ept_recv+0x50>
		LOG_ERR("No available ACL buffers!");
   1e14a:	4b2c      	ldr	r3, [pc, #176]	; (1e1fc <hci_ept_recv+0x204>)
   1e14c:	e76c      	b.n	1e028 <hci_ept_recv+0x30>
	return net_buf_simple_tailroom(&buf->b);
   1e14e:	4648      	mov	r0, r9
   1e150:	f00f ff69 	bl	2e026 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e154:	4284      	cmp	r4, r0
   1e156:	d8aa      	bhi.n	1e0ae <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e158:	4622      	mov	r2, r4
   1e15a:	4648      	mov	r0, r9
   1e15c:	1d71      	adds	r1, r6, #5
   1e15e:	f00f ff6a 	bl	2e036 <net_buf_simple_add_mem>
		bt_recv(buf);
   1e162:	4628      	mov	r0, r5
   1e164:	f7f5 f954 	bl	13410 <bt_recv>
}
   1e168:	e76e      	b.n	1e048 <hci_ept_recv+0x50>
	if (remaining < sizeof(hdr)) {
   1e16a:	2b03      	cmp	r3, #3
   1e16c:	d801      	bhi.n	1e172 <hci_ept_recv+0x17a>
		LOG_ERR("Not enough data for ISO header");
   1e16e:	4b24      	ldr	r3, [pc, #144]	; (1e200 <hci_ept_recv+0x208>)
   1e170:	e760      	b.n	1e034 <hci_ept_recv+0x3c>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   1e172:	2200      	movs	r2, #0
   1e174:	2300      	movs	r3, #0
   1e176:	4640      	mov	r0, r8
   1e178:	f7f3 fe7a 	bl	11e70 <bt_buf_get_rx>
	if (buf) {
   1e17c:	4605      	mov	r5, r0
   1e17e:	b1a0      	cbz	r0, 1e1aa <hci_ept_recv+0x1b2>
   1e180:	2204      	movs	r2, #4
		memcpy((void *)&hdr, data, sizeof(hdr));
   1e182:	f8d6 3001 	ldr.w	r3, [r6, #1]
   1e186:	f100 080c 	add.w	r8, r0, #12
   1e18a:	607b      	str	r3, [r7, #4]
   1e18c:	4640      	mov	r0, r8
   1e18e:	18b9      	adds	r1, r7, r2
   1e190:	f00f ff51 	bl	2e036 <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1e194:	88fb      	ldrh	r3, [r7, #6]
		remaining -= sizeof(hdr);
   1e196:	3c05      	subs	r4, #5
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   1e198:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1e19c:	429c      	cmp	r4, r3
   1e19e:	d006      	beq.n	1e1ae <hci_ept_recv+0x1b6>
		LOG_ERR("ISO payload length is not correct");
   1e1a0:	4b18      	ldr	r3, [pc, #96]	; (1e204 <hci_ept_recv+0x20c>)
   1e1a2:	61fb      	str	r3, [r7, #28]
   1e1a4:	2302      	movs	r3, #2
   1e1a6:	61bb      	str	r3, [r7, #24]
   1e1a8:	e7c4      	b.n	1e134 <hci_ept_recv+0x13c>
		LOG_ERR("No available ISO buffers!");
   1e1aa:	4b17      	ldr	r3, [pc, #92]	; (1e208 <hci_ept_recv+0x210>)
   1e1ac:	e742      	b.n	1e034 <hci_ept_recv+0x3c>
	return net_buf_simple_tailroom(&buf->b);
   1e1ae:	4640      	mov	r0, r8
   1e1b0:	f00f ff39 	bl	2e026 <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   1e1b4:	4284      	cmp	r4, r0
   1e1b6:	f63f af7a 	bhi.w	1e0ae <hci_ept_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e1ba:	4622      	mov	r2, r4
   1e1bc:	1d71      	adds	r1, r6, #5
   1e1be:	e79f      	b.n	1e100 <hci_ept_recv+0x108>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1e1c0:	466c      	mov	r4, sp
   1e1c2:	b088      	sub	sp, #32
   1e1c4:	466a      	mov	r2, sp
   1e1c6:	4b11      	ldr	r3, [pc, #68]	; (1e20c <hci_ept_recv+0x214>)
   1e1c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	switch (pkt_indicator) {
   1e1cc:	e9c2 3805 	strd	r3, r8, [r2, #20]
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   1e1d0:	2303      	movs	r3, #3
   1e1d2:	4805      	ldr	r0, [pc, #20]	; (1e1e8 <hci_ept_recv+0x1f0>)
   1e1d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1d8:	f010 fb10 	bl	2e7fc <z_log_msg_static_create.constprop.0>
   1e1dc:	46a5      	mov	sp, r4
   1e1de:	e733      	b.n	1e048 <hci_ept_recv+0x50>
   1e1e0:	00037240 	.word	0x00037240
   1e1e4:	000371a3 	.word	0x000371a3
   1e1e8:	00031504 	.word	0x00031504
   1e1ec:	0003721d 	.word	0x0003721d
   1e1f0:	000371c4 	.word	0x000371c4
   1e1f4:	000371e8 	.word	0x000371e8
   1e1f8:	00037279 	.word	0x00037279
   1e1fc:	0003725f 	.word	0x0003725f
   1e200:	0003729b 	.word	0x0003729b
   1e204:	000372d4 	.word	0x000372d4
   1e208:	000372ba 	.word	0x000372ba
   1e20c:	000372f6 	.word	0x000372f6

0001e210 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e210:	2301      	movs	r3, #1
   1e212:	4083      	lsls	r3, r0
{
   1e214:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e216:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e218:	4a0b      	ldr	r2, [pc, #44]	; (1e248 <compare_int_lock+0x38>)
   1e21a:	e8d2 1fef 	ldaex	r1, [r2]
   1e21e:	ea01 0504 	and.w	r5, r1, r4
   1e222:	e8c2 5fe6 	stlex	r6, r5, [r2]
   1e226:	2e00      	cmp	r6, #0
   1e228:	d1f7      	bne.n	1e21a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e22a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e22e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1e230:	4806      	ldr	r0, [pc, #24]	; (1e24c <compare_int_lock+0x3c>)
   1e232:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   1e236:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e23a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e23e:	420b      	tst	r3, r1
}
   1e240:	bf14      	ite	ne
   1e242:	2001      	movne	r0, #1
   1e244:	2000      	moveq	r0, #0
   1e246:	bd70      	pop	{r4, r5, r6, pc}
   1e248:	200218c8 	.word	0x200218c8
   1e24c:	40015000 	.word	0x40015000

0001e250 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e252:	491b      	ldr	r1, [pc, #108]	; (1e2c0 <sys_clock_timeout_handler+0x70>)
{
   1e254:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1e256:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e25a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1e25c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e260:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e264:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1e266:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e26a:	d30f      	bcc.n	1e28c <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e26c:	f009 fc32 	bl	27ad4 <sys_clock_announce>
    return p_reg->CC[ch];
   1e270:	00a3      	lsls	r3, r4, #2
   1e272:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e276:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1e27a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1e27e:	4295      	cmp	r5, r2
   1e280:	d11d      	bne.n	1e2be <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
   1e282:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1e286:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
   1e28a:	e012      	b.n	1e2b2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e28c:	4b0d      	ldr	r3, [pc, #52]	; (1e2c4 <sys_clock_timeout_handler+0x74>)
   1e28e:	681b      	ldr	r3, [r3, #0]
   1e290:	0a1a      	lsrs	r2, r3, #8
   1e292:	061b      	lsls	r3, r3, #24
   1e294:	195e      	adds	r6, r3, r5
   1e296:	4b0c      	ldr	r3, [pc, #48]	; (1e2c8 <sys_clock_timeout_handler+0x78>)
   1e298:	f142 0700 	adc.w	r7, r2, #0
   1e29c:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e2a0:	f009 fc18 	bl	27ad4 <sys_clock_announce>
    return p_reg->CC[ch];
   1e2a4:	4a09      	ldr	r2, [pc, #36]	; (1e2cc <sys_clock_timeout_handler+0x7c>)
   1e2a6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   1e2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
   1e2ae:	429d      	cmp	r5, r3
   1e2b0:	d105      	bne.n	1e2be <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e2b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e2b6:	4a05      	ldr	r2, [pc, #20]	; (1e2cc <sys_clock_timeout_handler+0x7c>)
   1e2b8:	40a3      	lsls	r3, r4
   1e2ba:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e2c0:	2000a150 	.word	0x2000a150
   1e2c4:	200218cc 	.word	0x200218cc
   1e2c8:	2000a158 	.word	0x2000a158
   1e2cc:	40015000 	.word	0x40015000

0001e2d0 <compare_int_unlock>:
	if (key) {
   1e2d0:	b1d9      	cbz	r1, 1e30a <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
   1e2d2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e2d4:	4a0d      	ldr	r2, [pc, #52]	; (1e30c <compare_int_unlock+0x3c>)
   1e2d6:	4083      	lsls	r3, r0
   1e2d8:	e8d2 cfef 	ldaex	ip, [r2]
   1e2dc:	ea4c 0c03 	orr.w	ip, ip, r3
   1e2e0:	e8c2 cfe1 	stlex	r1, ip, [r2]
   1e2e4:	2900      	cmp	r1, #0
   1e2e6:	d1f7      	bne.n	1e2d8 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e2e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   1e2ec:	4a08      	ldr	r2, [pc, #32]	; (1e310 <compare_int_unlock+0x40>)
   1e2ee:	4083      	lsls	r3, r0
   1e2f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2f4:	4b07      	ldr	r3, [pc, #28]	; (1e314 <compare_int_unlock+0x44>)
   1e2f6:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e2fa:	40c3      	lsrs	r3, r0
   1e2fc:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e2fe:	bf42      	ittt	mi
   1e300:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   1e304:	4b04      	ldrmi	r3, [pc, #16]	; (1e318 <compare_int_unlock+0x48>)
   1e306:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1e30a:	4770      	bx	lr
   1e30c:	200218c8 	.word	0x200218c8
   1e310:	40015000 	.word	0x40015000
   1e314:	200218c0 	.word	0x200218c0
   1e318:	e000e100 	.word	0xe000e100

0001e31c <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e31c:	2801      	cmp	r0, #1
{
   1e31e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e320:	d909      	bls.n	1e336 <z_nrf_rtc_timer_compare_evt_address_get+0x1a>
   1e322:	4907      	ldr	r1, [pc, #28]	; (1e340 <z_nrf_rtc_timer_compare_evt_address_get+0x24>)
   1e324:	4807      	ldr	r0, [pc, #28]	; (1e344 <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   1e326:	237c      	movs	r3, #124	; 0x7c
   1e328:	4a07      	ldr	r2, [pc, #28]	; (1e348 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1e32a:	f00c f9d6 	bl	2a6da <assert_print>
   1e32e:	217c      	movs	r1, #124	; 0x7c
   1e330:	4805      	ldr	r0, [pc, #20]	; (1e348 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   1e332:	f00c f9cb 	bl	2a6cc <assert_post_action>
    p_reg->EVTENCLR = mask;
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   1e336:	0083      	lsls	r3, r0, #2
}
   1e338:	4804      	ldr	r0, [pc, #16]	; (1e34c <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   1e33a:	4418      	add	r0, r3
   1e33c:	bd08      	pop	{r3, pc}
   1e33e:	bf00      	nop
   1e340:	00037371 	.word	0x00037371
   1e344:	00032679 	.word	0x00032679
   1e348:	00037340 	.word	0x00037340
   1e34c:	40015140 	.word	0x40015140

0001e350 <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e350:	2801      	cmp	r0, #1
{
   1e352:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e354:	d909      	bls.n	1e36a <z_nrf_rtc_timer_capture_task_address_get+0x1a>
   1e356:	4907      	ldr	r1, [pc, #28]	; (1e374 <z_nrf_rtc_timer_capture_task_address_get+0x24>)
   1e358:	4807      	ldr	r0, [pc, #28]	; (1e378 <z_nrf_rtc_timer_capture_task_address_get+0x28>)
   1e35a:	2383      	movs	r3, #131	; 0x83
   1e35c:	4a07      	ldr	r2, [pc, #28]	; (1e37c <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1e35e:	f00c f9bc 	bl	2a6da <assert_print>
   1e362:	2183      	movs	r1, #131	; 0x83
   1e364:	4805      	ldr	r0, [pc, #20]	; (1e37c <z_nrf_rtc_timer_capture_task_address_get+0x2c>)
   1e366:	f00c f9b1 	bl	2a6cc <assert_post_action>
	return nrf_rtc_task_address_get(RTC, task);
   1e36a:	2800      	cmp	r0, #0
}
   1e36c:	4804      	ldr	r0, [pc, #16]	; (1e380 <z_nrf_rtc_timer_capture_task_address_get+0x30>)
   1e36e:	bf08      	it	eq
   1e370:	2000      	moveq	r0, #0
   1e372:	bd08      	pop	{r3, pc}
   1e374:	00037371 	.word	0x00037371
   1e378:	00032679 	.word	0x00032679
   1e37c:	00037340 	.word	0x00037340
   1e380:	40015044 	.word	0x40015044

0001e384 <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e384:	2801      	cmp	r0, #1
{
   1e386:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   1e388:	d909      	bls.n	1e39e <z_nrf_rtc_timer_compare_read+0x1a>
   1e38a:	4908      	ldr	r1, [pc, #32]	; (1e3ac <z_nrf_rtc_timer_compare_read+0x28>)
   1e38c:	4808      	ldr	r0, [pc, #32]	; (1e3b0 <z_nrf_rtc_timer_compare_read+0x2c>)
   1e38e:	23b9      	movs	r3, #185	; 0xb9
   1e390:	4a08      	ldr	r2, [pc, #32]	; (1e3b4 <z_nrf_rtc_timer_compare_read+0x30>)
   1e392:	f00c f9a2 	bl	2a6da <assert_print>
   1e396:	21b9      	movs	r1, #185	; 0xb9
   1e398:	4806      	ldr	r0, [pc, #24]	; (1e3b4 <z_nrf_rtc_timer_compare_read+0x30>)
   1e39a:	f00c f997 	bl	2a6cc <assert_post_action>
    return p_reg->CC[ch];
   1e39e:	4b06      	ldr	r3, [pc, #24]	; (1e3b8 <z_nrf_rtc_timer_compare_read+0x34>)
   1e3a0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e3a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   1e3a8:	bd08      	pop	{r3, pc}
   1e3aa:	bf00      	nop
   1e3ac:	00037371 	.word	0x00037371
   1e3b0:	00032679 	.word	0x00032679
   1e3b4:	00037340 	.word	0x00037340
   1e3b8:	40015000 	.word	0x40015000

0001e3bc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e3bc:	4b0d      	ldr	r3, [pc, #52]	; (1e3f4 <z_nrf_rtc_timer_read+0x38>)
   1e3be:	6818      	ldr	r0, [r3, #0]
   1e3c0:	0a01      	lsrs	r1, r0, #8
   1e3c2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e3c4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1e3c8:	4b0b      	ldr	r3, [pc, #44]	; (1e3f8 <z_nrf_rtc_timer_read+0x3c>)
   1e3ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1e3ce:	1818      	adds	r0, r3, r0
   1e3d0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e3d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e3d8:	d20a      	bcs.n	1e3f0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1e3da:	4b08      	ldr	r3, [pc, #32]	; (1e3fc <z_nrf_rtc_timer_read+0x40>)
   1e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e3e0:	4290      	cmp	r0, r2
   1e3e2:	eb71 0303 	sbcs.w	r3, r1, r3
   1e3e6:	d203      	bcs.n	1e3f0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1e3e8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e3ec:	f141 0100 	adc.w	r1, r1, #0
}
   1e3f0:	4770      	bx	lr
   1e3f2:	bf00      	nop
   1e3f4:	200218cc 	.word	0x200218cc
   1e3f8:	40015000 	.word	0x40015000
   1e3fc:	2000a158 	.word	0x2000a158

0001e400 <compare_set>:
{
   1e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e404:	b085      	sub	sp, #20
   1e406:	4614      	mov	r4, r2
   1e408:	461d      	mov	r5, r3
   1e40a:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
   1e40c:	f7ff ff00 	bl	1e210 <compare_int_lock>
   1e410:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e412:	f7ff ffd3 	bl	1e3bc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e416:	42a0      	cmp	r0, r4
   1e418:	eb71 0305 	sbcs.w	r3, r1, r5
   1e41c:	f080 8086 	bcs.w	1e52c <compare_set+0x12c>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e420:	4b49      	ldr	r3, [pc, #292]	; (1e548 <compare_set+0x148>)
   1e422:	1a20      	subs	r0, r4, r0
   1e424:	eb65 0101 	sbc.w	r1, r5, r1
   1e428:	4298      	cmp	r0, r3
   1e42a:	f171 0100 	sbcs.w	r1, r1, #0
   1e42e:	f080 8088 	bcs.w	1e542 <compare_set+0x142>
		if (target_time != cc_data[chan].target_time) {
   1e432:	4b46      	ldr	r3, [pc, #280]	; (1e54c <compare_set+0x14c>)
   1e434:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1e438:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e43c:	429d      	cmp	r5, r3
   1e43e:	bf08      	it	eq
   1e440:	4294      	cmpeq	r4, r2
   1e442:	d05e      	beq.n	1e502 <compare_set+0x102>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   1e448:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1e44c:	4616      	mov	r6, r2
	uint32_t tick_inc = 2;
   1e44e:	f04f 0b02 	mov.w	fp, #2
	return (a - b) & COUNTER_MAX;
   1e452:	f06f 0101 	mvn.w	r1, #1
   1e456:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e45a:	f107 0850 	add.w	r8, r7, #80	; 0x50
   1e45e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   1e462:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e466:	40bb      	lsls	r3, r7
   1e468:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e46c:	fa1f f888 	uxth.w	r8, r8
   1e470:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1e474:	9302      	str	r3, [sp, #8]
    return p_reg->CC[ch];
   1e476:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e47a:	4b35      	ldr	r3, [pc, #212]	; (1e550 <compare_set+0x150>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e47c:	f508 38a8 	add.w	r8, r8, #86016	; 0x15000
     return p_reg->COUNTER;
   1e480:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1e484:	eba0 000a 	sub.w	r0, r0, sl
   1e488:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e48c:	f02a 4c7f 	bic.w	ip, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1e490:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1e492:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   1e496:	d107      	bne.n	1e4a8 <compare_set+0xa8>
   1e498:	9203      	str	r2, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1e49a:	2013      	movs	r0, #19
   1e49c:	f011 ff60 	bl	30360 <z_impl_k_busy_wait>
   1e4a0:	f06f 0101 	mvn.w	r1, #1
   1e4a4:	4b2a      	ldr	r3, [pc, #168]	; (1e550 <compare_set+0x150>)
   1e4a6:	9a03      	ldr	r2, [sp, #12]
	return (a - b) & COUNTER_MAX;
   1e4a8:	eba1 000a 	sub.w	r0, r1, sl
   1e4ac:	4430      	add	r0, r6
   1e4ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1e4b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e4b6:	f04f 0000 	mov.w	r0, #0
   1e4ba:	f8c8 0000 	str.w	r0, [r8]
   1e4be:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1e4c2:	9802      	ldr	r0, [sp, #8]
			cc_val = now + tick_inc;
   1e4c4:	bf88      	it	hi
   1e4c6:	eb0a 060b 	addhi.w	r6, sl, fp
   1e4ca:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e4ce:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1e4d2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1e4d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
			tick_inc++;
   1e4da:	bf88      	it	hi
   1e4dc:	f10b 0b01 	addhi.w	fp, fp, #1
	} while ((now2 != now) &&
   1e4e0:	4582      	cmp	sl, r0
   1e4e2:	d006      	beq.n	1e4f2 <compare_set+0xf2>
	return (a - b) & COUNTER_MAX;
   1e4e4:	1a08      	subs	r0, r1, r0
   1e4e6:	4430      	add	r0, r6
   1e4e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1e4ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e4f0:	d81a      	bhi.n	1e528 <compare_set+0x128>
	return (a - b) & COUNTER_MAX;
   1e4f2:	1ab6      	subs	r6, r6, r2
   1e4f4:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1e4f8:	1936      	adds	r6, r6, r4
   1e4fa:	f145 0300 	adc.w	r3, r5, #0
   1e4fe:	4634      	mov	r4, r6
   1e500:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
   1e502:	4912      	ldr	r1, [pc, #72]	; (1e54c <compare_set+0x14c>)
	cc_data[chan].callback = handler;
   1e504:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1e506:	eb01 1207 	add.w	r2, r1, r7, lsl #4
   1e50a:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
   1e50e:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   1e510:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
   1e512:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1e514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e516:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   1e518:	4638      	mov	r0, r7
   1e51a:	9901      	ldr	r1, [sp, #4]
   1e51c:	f7ff fed8 	bl	1e2d0 <compare_int_unlock>
}
   1e520:	4620      	mov	r0, r4
   1e522:	b005      	add	sp, #20
   1e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e528:	4630      	mov	r0, r6
   1e52a:	e7a9      	b.n	1e480 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1e52c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e52e:	4a09      	ldr	r2, [pc, #36]	; (1e554 <compare_set+0x154>)
   1e530:	40bb      	lsls	r3, r7
   1e532:	e8d2 0fef 	ldaex	r0, [r2]
   1e536:	4318      	orrs	r0, r3
   1e538:	e8c2 0fe1 	stlex	r1, r0, [r2]
   1e53c:	2900      	cmp	r1, #0
   1e53e:	d0e0      	beq.n	1e502 <compare_set+0x102>
   1e540:	e7f7      	b.n	1e532 <compare_set+0x132>
			return -EINVAL;
   1e542:	f06f 0415 	mvn.w	r4, #21
   1e546:	e7e7      	b.n	1e518 <compare_set+0x118>
   1e548:	01000001 	.word	0x01000001
   1e54c:	2000a130 	.word	0x2000a130
   1e550:	40015000 	.word	0x40015000
   1e554:	200218c0 	.word	0x200218c0

0001e558 <z_nrf_rtc_timer_set>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e558:	2801      	cmp	r0, #1
{
   1e55a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e55c:	d00b      	beq.n	1e576 <z_nrf_rtc_timer_set+0x1e>
   1e55e:	4908      	ldr	r1, [pc, #32]	; (1e580 <z_nrf_rtc_timer_set+0x28>)
   1e560:	4808      	ldr	r0, [pc, #32]	; (1e584 <z_nrf_rtc_timer_set+0x2c>)
   1e562:	f240 1353 	movw	r3, #339	; 0x153
   1e566:	4a08      	ldr	r2, [pc, #32]	; (1e588 <z_nrf_rtc_timer_set+0x30>)
   1e568:	f00c f8b7 	bl	2a6da <assert_print>
   1e56c:	f240 1153 	movw	r1, #339	; 0x153
   1e570:	4805      	ldr	r0, [pc, #20]	; (1e588 <z_nrf_rtc_timer_set+0x30>)
   1e572:	f00c f8ab 	bl	2a6cc <assert_post_action>
}
   1e576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return compare_set(chan, target_time, handler, user_data);
   1e57a:	f7ff bf41 	b.w	1e400 <compare_set>
   1e57e:	bf00      	nop
   1e580:	0003738d 	.word	0x0003738d
   1e584:	00032679 	.word	0x00032679
   1e588:	00037340 	.word	0x00037340

0001e58c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1e58c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENSET = mask;
   1e58e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    p_reg->PRESCALER = val;
   1e592:	2500      	movs	r5, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e594:	f04f 30ff 	mov.w	r0, #4294967295
   1e598:	f04f 31ff 	mov.w	r1, #4294967295
   1e59c:	4c19      	ldr	r4, [pc, #100]	; (1e604 <sys_clock_driver_init+0x78>)
   1e59e:	4b1a      	ldr	r3, [pc, #104]	; (1e608 <sys_clock_driver_init+0x7c>)
   1e5a0:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1e5a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1e5a8:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
   1e5ac:	e9c3 0106 	strd	r0, r1, [r3, #24]
   1e5b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1e5b4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e5b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e5ba:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1e5be:	4b13      	ldr	r3, [pc, #76]	; (1e60c <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e5c0:	2101      	movs	r1, #1
   1e5c2:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1e5c6:	2015      	movs	r0, #21
   1e5c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e5cc:	462a      	mov	r2, r5
   1e5ce:	f7f2 fa65 	bl	10a9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e5d2:	2015      	movs	r0, #21
   1e5d4:	f7f2 fa32 	bl	10a3c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e5d8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e5da:	2203      	movs	r2, #3
   1e5dc:	60a3      	str	r3, [r4, #8]
   1e5de:	6023      	str	r3, [r4, #0]
   1e5e0:	4b0b      	ldr	r3, [pc, #44]	; (1e610 <sys_clock_driver_init+0x84>)
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_TICKS : (counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5e2:	4628      	mov	r0, r5
	int_mask = BIT_MASK(CHAN_COUNT);
   1e5e4:	601a      	str	r2, [r3, #0]
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e5e6:	4b0b      	ldr	r3, [pc, #44]	; (1e614 <sys_clock_driver_init+0x88>)
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5e8:	4a0b      	ldr	r2, [pc, #44]	; (1e618 <sys_clock_driver_init+0x8c>)
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   1e5ea:	601e      	str	r6, [r3, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e5ec:	4b0b      	ldr	r3, [pc, #44]	; (1e61c <sys_clock_driver_init+0x90>)
   1e5ee:	9501      	str	r5, [sp, #4]
   1e5f0:	9300      	str	r3, [sp, #0]
   1e5f2:	2300      	movs	r3, #0
   1e5f4:	f7ff ff04 	bl	1e400 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e5f8:	4630      	mov	r0, r6
   1e5fa:	f7fd fce5 	bl	1bfc8 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e5fe:	4628      	mov	r0, r5
   1e600:	b002      	add	sp, #8
   1e602:	bd70      	pop	{r4, r5, r6, pc}
   1e604:	40015000 	.word	0x40015000
   1e608:	2000a130 	.word	0x2000a130
   1e60c:	e000e100 	.word	0xe000e100
   1e610:	200218c8 	.word	0x200218c8
   1e614:	200218c4 	.word	0x200218c4
   1e618:	007fffff 	.word	0x007fffff
   1e61c:	0001e251 	.word	0x0001e251

0001e620 <rtc_nrf_isr>:
{
   1e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->INTENSET & mask;
   1e624:	4b3f      	ldr	r3, [pc, #252]	; (1e724 <rtc_nrf_isr+0x104>)
   1e626:	b085      	sub	sp, #20
   1e628:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e62c:	0792      	lsls	r2, r2, #30
   1e62e:	d50b      	bpl.n	1e648 <rtc_nrf_isr+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e630:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1e634:	b142      	cbz	r2, 1e648 <rtc_nrf_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e636:	2200      	movs	r2, #0
   1e638:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   1e63c:	4a3a      	ldr	r2, [pc, #232]	; (1e728 <rtc_nrf_isr+0x108>)
   1e63e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e642:	6813      	ldr	r3, [r2, #0]
   1e644:	3301      	adds	r3, #1
   1e646:	6013      	str	r3, [r2, #0]
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e648:	4d38      	ldr	r5, [pc, #224]	; (1e72c <rtc_nrf_isr+0x10c>)
   1e64a:	2400      	movs	r4, #0
   1e64c:	462f      	mov	r7, r5
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e64e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    return p_reg->INTENSET & mask;
   1e652:	4e34      	ldr	r6, [pc, #208]	; (1e724 <rtc_nrf_isr+0x104>)
	__asm__ volatile(
   1e654:	f04f 0320 	mov.w	r3, #32
   1e658:	f3ef 8211 	mrs	r2, BASEPRI
   1e65c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e660:	f3bf 8f6f 	isb	sy
   1e664:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
   1e668:	fa0b f904 	lsl.w	r9, fp, r4
   1e66c:	ea19 0f03 	tst.w	r9, r3
   1e670:	d10a      	bne.n	1e688 <rtc_nrf_isr+0x68>
	__asm__ volatile(
   1e672:	f382 8811 	msr	BASEPRI, r2
   1e676:	f3bf 8f6f 	isb	sy
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e67a:	3510      	adds	r5, #16
   1e67c:	b114      	cbz	r4, 1e684 <rtc_nrf_isr+0x64>
}
   1e67e:	b005      	add	sp, #20
   1e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e684:	2401      	movs	r4, #1
   1e686:	e7e5      	b.n	1e654 <rtc_nrf_isr+0x34>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e688:	2301      	movs	r3, #1
   1e68a:	40a3      	lsls	r3, r4
   1e68c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e68e:	4928      	ldr	r1, [pc, #160]	; (1e730 <rtc_nrf_isr+0x110>)
   1e690:	e8d1 0fef 	ldaex	r0, [r1]
   1e694:	ea00 0c03 	and.w	ip, r0, r3
   1e698:	e8c1 cfee 	stlex	lr, ip, [r1]
   1e69c:	f1be 0f00 	cmp.w	lr, #0
   1e6a0:	d1f6      	bne.n	1e690 <rtc_nrf_isr+0x70>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e6a2:	4b24      	ldr	r3, [pc, #144]	; (1e734 <rtc_nrf_isr+0x114>)
   1e6a4:	00a1      	lsls	r1, r4, #2
   1e6a6:	b918      	cbnz	r0, 1e6b0 <rtc_nrf_isr+0x90>
   1e6a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1e6ac:	2800      	cmp	r0, #0
   1e6ae:	d0e0      	beq.n	1e672 <rtc_nrf_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e6b0:	f04f 0a00 	mov.w	sl, #0
   1e6b4:	f841 a003 	str.w	sl, [r1, r3]
   1e6b8:	58cb      	ldr	r3, [r1, r3]
   1e6ba:	f382 8811 	msr	BASEPRI, r2
   1e6be:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
   1e6c2:	f7ff fe7b 	bl	1e3bc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   1e6c6:	f04f 0320 	mov.w	r3, #32
   1e6ca:	f3ef 8c11 	mrs	ip, BASEPRI
   1e6ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6d2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   1e6d6:	eb07 1e04 	add.w	lr, r7, r4, lsl #4
   1e6da:	e9de 2302 	ldrd	r2, r3, [lr, #8]
		if (curr_time >= expire_time) {
   1e6de:	4290      	cmp	r0, r2
   1e6e0:	4199      	sbcs	r1, r3
   1e6e2:	d204      	bcs.n	1e6ee <rtc_nrf_isr+0xce>
	__asm__ volatile(
   1e6e4:	f38c 8811 	msr	BASEPRI, ip
   1e6e8:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e6ec:	e7c5      	b.n	1e67a <rtc_nrf_isr+0x5a>
			user_context = cc_data[chan].user_context;
   1e6ee:	e9d5 8100 	ldrd	r8, r1, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6f2:	f04f 30ff 	mov.w	r0, #4294967295
			user_context = cc_data[chan].user_context;
   1e6f6:	9103      	str	r1, [sp, #12]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e6f8:	f04f 31ff 	mov.w	r1, #4294967295
			cc_data[chan].callback = NULL;
   1e6fc:	f8c5 a000 	str.w	sl, [r5]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e700:	e9ce 0102 	strd	r0, r1, [lr, #8]
    p_reg->EVTENCLR = mask;
   1e704:	4907      	ldr	r1, [pc, #28]	; (1e724 <rtc_nrf_isr+0x104>)
   1e706:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
   1e70a:	f38c 8811 	msr	BASEPRI, ip
   1e70e:	f3bf 8f6f 	isb	sy
		if (handler) {
   1e712:	f1b8 0f00 	cmp.w	r8, #0
   1e716:	d0b0      	beq.n	1e67a <rtc_nrf_isr+0x5a>
			handler(chan, expire_time, user_context);
   1e718:	9903      	ldr	r1, [sp, #12]
   1e71a:	4620      	mov	r0, r4
   1e71c:	9100      	str	r1, [sp, #0]
   1e71e:	47c0      	blx	r8
   1e720:	e7ab      	b.n	1e67a <rtc_nrf_isr+0x5a>
   1e722:	bf00      	nop
   1e724:	40015000 	.word	0x40015000
   1e728:	200218cc 	.word	0x200218cc
   1e72c:	2000a130 	.word	0x2000a130
   1e730:	200218c0 	.word	0x200218c0
   1e734:	40015140 	.word	0x40015140

0001e738 <z_nrf_rtc_timer_chan_alloc>:
{
   1e738:	b570      	push	{r4, r5, r6, lr}
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e73a:	2401      	movs	r4, #1
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   1e73c:	4b0c      	ldr	r3, [pc, #48]	; (1e770 <z_nrf_rtc_timer_chan_alloc+0x38>)
   1e73e:	6818      	ldr	r0, [r3, #0]
   1e740:	b190      	cbz	r0, 1e768 <z_nrf_rtc_timer_chan_alloc+0x30>
   1e742:	fab0 f080 	clz	r0, r0
   1e746:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   1e74a:	fa04 f100 	lsl.w	r1, r4, r0
   1e74e:	43c9      	mvns	r1, r1
   1e750:	e8d3 2fef 	ldaex	r2, [r3]
   1e754:	ea02 0501 	and.w	r5, r2, r1
   1e758:	e8c3 5fe6 	stlex	r6, r5, [r3]
   1e75c:	2e00      	cmp	r6, #0
   1e75e:	d1f7      	bne.n	1e750 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   1e760:	40c2      	lsrs	r2, r0
   1e762:	07d2      	lsls	r2, r2, #31
   1e764:	d5eb      	bpl.n	1e73e <z_nrf_rtc_timer_chan_alloc+0x6>
}
   1e766:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1e768:	f06f 000b 	mvn.w	r0, #11
   1e76c:	e7fb      	b.n	1e766 <z_nrf_rtc_timer_chan_alloc+0x2e>
   1e76e:	bf00      	nop
   1e770:	200218c4 	.word	0x200218c4

0001e774 <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e774:	2801      	cmp	r0, #1
{
   1e776:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   1e778:	d00b      	beq.n	1e792 <z_nrf_rtc_timer_chan_free+0x1e>
   1e77a:	490b      	ldr	r1, [pc, #44]	; (1e7a8 <z_nrf_rtc_timer_chan_free+0x34>)
   1e77c:	480b      	ldr	r0, [pc, #44]	; (1e7ac <z_nrf_rtc_timer_chan_free+0x38>)
   1e77e:	f240 2321 	movw	r3, #545	; 0x221
   1e782:	4a0b      	ldr	r2, [pc, #44]	; (1e7b0 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e784:	f00b ffa9 	bl	2a6da <assert_print>
   1e788:	f240 2121 	movw	r1, #545	; 0x221
   1e78c:	4808      	ldr	r0, [pc, #32]	; (1e7b0 <z_nrf_rtc_timer_chan_free+0x3c>)
   1e78e:	f00b ff9d 	bl	2a6cc <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e792:	4b08      	ldr	r3, [pc, #32]	; (1e7b4 <z_nrf_rtc_timer_chan_free+0x40>)
   1e794:	e8d3 1fef 	ldaex	r1, [r3]
   1e798:	f041 0102 	orr.w	r1, r1, #2
   1e79c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1e7a0:	2a00      	cmp	r2, #0
   1e7a2:	d1f7      	bne.n	1e794 <z_nrf_rtc_timer_chan_free+0x20>
}
   1e7a4:	bd08      	pop	{r3, pc}
   1e7a6:	bf00      	nop
   1e7a8:	0003738d 	.word	0x0003738d
   1e7ac:	00032679 	.word	0x00032679
   1e7b0:	00037340 	.word	0x00037340
   1e7b4:	200218c4 	.word	0x200218c4

0001e7b8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e7b8:	1c43      	adds	r3, r0, #1
{
   1e7ba:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e7bc:	d020      	beq.n	1e800 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e7be:	2801      	cmp	r0, #1
   1e7c0:	dd20      	ble.n	1e804 <sys_clock_set_timeout+0x4c>
   1e7c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e7c6:	da1f      	bge.n	1e808 <sys_clock_set_timeout+0x50>
   1e7c8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e7ca:	f7ff fdf7 	bl	1e3bc <z_nrf_rtc_timer_read>
   1e7ce:	4b0f      	ldr	r3, [pc, #60]	; (1e80c <sys_clock_set_timeout+0x54>)
   1e7d0:	e9d3 1300 	ldrd	r1, r3, [r3]
   1e7d4:	1a42      	subs	r2, r0, r1
		ticks = 0;
   1e7d6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1e7da:	bf28      	it	cs
   1e7dc:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
   1e7de:	480c      	ldr	r0, [pc, #48]	; (1e810 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e7e0:	3201      	adds	r2, #1
   1e7e2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
   1e7e4:	4282      	cmp	r2, r0
   1e7e6:	bf28      	it	cs
   1e7e8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
   1e7ea:	2000      	movs	r0, #0
   1e7ec:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e7ee:	4909      	ldr	r1, [pc, #36]	; (1e814 <sys_clock_set_timeout+0x5c>)
   1e7f0:	9001      	str	r0, [sp, #4]
   1e7f2:	9100      	str	r1, [sp, #0]
   1e7f4:	f143 0300 	adc.w	r3, r3, #0
   1e7f8:	f7ff fe02 	bl	1e400 <compare_set>
}
   1e7fc:	b002      	add	sp, #8
   1e7fe:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e800:	4803      	ldr	r0, [pc, #12]	; (1e810 <sys_clock_set_timeout+0x58>)
   1e802:	e7e1      	b.n	1e7c8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e804:	2400      	movs	r4, #0
   1e806:	e7e0      	b.n	1e7ca <sys_clock_set_timeout+0x12>
   1e808:	4c01      	ldr	r4, [pc, #4]	; (1e810 <sys_clock_set_timeout+0x58>)
   1e80a:	e7de      	b.n	1e7ca <sys_clock_set_timeout+0x12>
   1e80c:	2000a150 	.word	0x2000a150
   1e810:	007fffff 	.word	0x007fffff
   1e814:	0001e251 	.word	0x0001e251

0001e818 <sys_clock_elapsed>:
{
   1e818:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e81a:	f7ff fdcf 	bl	1e3bc <z_nrf_rtc_timer_read>
   1e81e:	4b02      	ldr	r3, [pc, #8]	; (1e828 <sys_clock_elapsed+0x10>)
   1e820:	681b      	ldr	r3, [r3, #0]
}
   1e822:	1ac0      	subs	r0, r0, r3
   1e824:	bd08      	pop	{r3, pc}
   1e826:	bf00      	nop
   1e828:	2000a150 	.word	0x2000a150

0001e82c <nrf_gpio_pin_port_decode>:
{
   1e82c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e82e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1e830:	095a      	lsrs	r2, r3, #5
   1e832:	d00d      	beq.n	1e850 <nrf_gpio_pin_port_decode+0x24>
   1e834:	2a01      	cmp	r2, #1
   1e836:	d013      	beq.n	1e860 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e838:	490e      	ldr	r1, [pc, #56]	; (1e874 <nrf_gpio_pin_port_decode+0x48>)
   1e83a:	480f      	ldr	r0, [pc, #60]	; (1e878 <nrf_gpio_pin_port_decode+0x4c>)
   1e83c:	f240 2347 	movw	r3, #583	; 0x247
   1e840:	4a0e      	ldr	r2, [pc, #56]	; (1e87c <nrf_gpio_pin_port_decode+0x50>)
   1e842:	f00b ff4a 	bl	2a6da <assert_print>
   1e846:	f240 2147 	movw	r1, #583	; 0x247
   1e84a:	480c      	ldr	r0, [pc, #48]	; (1e87c <nrf_gpio_pin_port_decode+0x50>)
   1e84c:	f00b ff3e 	bl	2a6cc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1e850:	f04f 32ff 	mov.w	r2, #4294967295
   1e854:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e858:	07d9      	lsls	r1, r3, #31
   1e85a:	d5ed      	bpl.n	1e838 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1e85c:	4808      	ldr	r0, [pc, #32]	; (1e880 <nrf_gpio_pin_port_decode+0x54>)
   1e85e:	e008      	b.n	1e872 <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   1e860:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   1e864:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1e868:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1e86a:	07d2      	lsls	r2, r2, #31
   1e86c:	d5e4      	bpl.n	1e838 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1e86e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1e870:	4804      	ldr	r0, [pc, #16]	; (1e884 <nrf_gpio_pin_port_decode+0x58>)
}
   1e872:	bd08      	pop	{r3, pc}
   1e874:	00036c60 	.word	0x00036c60
   1e878:	00032679 	.word	0x00032679
   1e87c:	00036c2d 	.word	0x00036c2d
   1e880:	40842500 	.word	0x40842500
   1e884:	40842800 	.word	0x40842800

0001e888 <mbox_nrf_init>:

	nrfx_ipc_config_load(&ch_config);
}

static int mbox_nrf_init(const struct device *dev)
{
   1e888:	b510      	push	{r4, lr}
   1e88a:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   1e88c:	6902      	ldr	r2, [r0, #16]
{
   1e88e:	b0a8      	sub	sp, #160	; 0xa0

	data->dev = dev;
   1e890:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   1e894:	4925      	ldr	r1, [pc, #148]	; (1e92c <mbox_nrf_init+0xa4>)
   1e896:	2000      	movs	r0, #0
   1e898:	f001 f806 	bl	1f8a8 <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1e89c:	2200      	movs	r2, #0
   1e89e:	2101      	movs	r1, #1
   1e8a0:	202a      	movs	r0, #42	; 0x2a
   1e8a2:	f7f2 f8fb 	bl	10a9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   1e8a6:	6864      	ldr	r4, [r4, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   1e8a8:	2284      	movs	r2, #132	; 0x84
   1e8aa:	2100      	movs	r1, #0
   1e8ac:	a807      	add	r0, sp, #28
   1e8ae:	f011 fea8 	bl	30602 <memset>
	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   1e8b2:	6863      	ldr	r3, [r4, #4]
   1e8b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e8b8:	d30a      	bcc.n	1e8d0 <mbox_nrf_init+0x48>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   1e8ba:	4b1d      	ldr	r3, [pc, #116]	; (1e930 <mbox_nrf_init+0xa8>)
   1e8bc:	9305      	str	r3, [sp, #20]
   1e8be:	2302      	movs	r3, #2
   1e8c0:	9304      	str	r3, [sp, #16]
   1e8c2:	2300      	movs	r3, #0
   1e8c4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e8c8:	481a      	ldr	r0, [pc, #104]	; (1e934 <mbox_nrf_init+0xac>)
   1e8ca:	aa04      	add	r2, sp, #16
   1e8cc:	f7ef fff0 	bl	e8b0 <z_impl_z_log_msg_static_create>
	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   1e8d0:	6823      	ldr	r3, [r4, #0]
   1e8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1e8d6:	d30a      	bcc.n	1e8ee <mbox_nrf_init+0x66>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   1e8d8:	4b17      	ldr	r3, [pc, #92]	; (1e938 <mbox_nrf_init+0xb0>)
   1e8da:	9305      	str	r3, [sp, #20]
   1e8dc:	2302      	movs	r3, #2
   1e8de:	9304      	str	r3, [sp, #16]
   1e8e0:	2300      	movs	r3, #0
   1e8e2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e8e6:	4813      	ldr	r0, [pc, #76]	; (1e934 <mbox_nrf_init+0xac>)
   1e8e8:	aa04      	add	r2, sp, #16
   1e8ea:	f7ef ffe1 	bl	e8b0 <z_impl_z_log_msg_static_create>
	ch_config.receive_events_enabled = 0;
   1e8ee:	2300      	movs	r3, #0
			ch_config.send_task_config[ch] = BIT(ch);
   1e8f0:	2001      	movs	r0, #1
	ch_config.receive_events_enabled = 0;
   1e8f2:	9327      	str	r3, [sp, #156]	; 0x9c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8f4:	aa07      	add	r2, sp, #28
		if (conf->tx_mask & BIT(ch)) {
   1e8f6:	6861      	ldr	r1, [r4, #4]
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e8f8:	3204      	adds	r2, #4
		if (conf->tx_mask & BIT(ch)) {
   1e8fa:	40d9      	lsrs	r1, r3
   1e8fc:	07c9      	lsls	r1, r1, #31
			ch_config.send_task_config[ch] = BIT(ch);
   1e8fe:	bf44      	itt	mi
   1e900:	fa00 f103 	lslmi.w	r1, r0, r3
   1e904:	f842 1c04 	strmi.w	r1, [r2, #-4]
		if (conf->rx_mask & BIT(ch)) {
   1e908:	6821      	ldr	r1, [r4, #0]
   1e90a:	40d9      	lsrs	r1, r3
   1e90c:	07c9      	lsls	r1, r1, #31
			ch_config.receive_event_config[ch] = BIT(ch);
   1e90e:	bf48      	it	mi
   1e910:	fa00 f103 	lslmi.w	r1, r0, r3
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e914:	f103 0301 	add.w	r3, r3, #1
			ch_config.receive_event_config[ch] = BIT(ch);
   1e918:	bf48      	it	mi
   1e91a:	63d1      	strmi	r1, [r2, #60]	; 0x3c
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   1e91c:	2b10      	cmp	r3, #16
   1e91e:	d1ea      	bne.n	1e8f6 <mbox_nrf_init+0x6e>
	nrfx_ipc_config_load(&ch_config);
   1e920:	a807      	add	r0, sp, #28
   1e922:	f000 ffd9 	bl	1f8d8 <nrfx_ipc_config_load>

	return 0;
}
   1e926:	2000      	movs	r0, #0
   1e928:	b028      	add	sp, #160	; 0xa0
   1e92a:	bd10      	pop	{r4, pc}
   1e92c:	0001ea31 	.word	0x0001ea31
   1e930:	000373a8 	.word	0x000373a8
   1e934:	000315a4 	.word	0x000315a4
   1e938:	000373d4 	.word	0x000373d4

0001e93c <mbox_nrf_set_enabled>:
{
   1e93c:	b530      	push	{r4, r5, lr}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e93e:	290f      	cmp	r1, #15
{
   1e940:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   1e942:	6905      	ldr	r5, [r0, #16]
{
   1e944:	b087      	sub	sp, #28
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1e946:	d842      	bhi.n	1e9ce <mbox_nrf_set_enabled+0x92>
   1e948:	6843      	ldr	r3, [r0, #4]
   1e94a:	681b      	ldr	r3, [r3, #0]
   1e94c:	40cb      	lsrs	r3, r1
   1e94e:	07db      	lsls	r3, r3, #31
   1e950:	d53d      	bpl.n	1e9ce <mbox_nrf_set_enabled+0x92>
	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   1e952:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e956:	40cb      	lsrs	r3, r1
   1e958:	f003 0301 	and.w	r3, r3, #1
   1e95c:	b91a      	cbnz	r2, 1e966 <mbox_nrf_set_enabled+0x2a>
   1e95e:	bb13      	cbnz	r3, 1e9a6 <mbox_nrf_set_enabled+0x6a>
		return -EALREADY;
   1e960:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e964:	e031      	b.n	1e9ca <mbox_nrf_set_enabled+0x8e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   1e966:	2b00      	cmp	r3, #0
   1e968:	d1fa      	bne.n	1e960 <mbox_nrf_set_enabled+0x24>
	if (enable && (data->cb[channel] == NULL)) {
   1e96a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   1e96e:	b94b      	cbnz	r3, 1e984 <mbox_nrf_set_enabled+0x48>
		LOG_WRN("Enabling channel without a registered callback\n");
   1e970:	4a18      	ldr	r2, [pc, #96]	; (1e9d4 <mbox_nrf_set_enabled+0x98>)
   1e972:	9205      	str	r2, [sp, #20]
   1e974:	2202      	movs	r2, #2
   1e976:	9204      	str	r2, [sp, #16]
   1e978:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e97c:	4816      	ldr	r0, [pc, #88]	; (1e9d8 <mbox_nrf_set_enabled+0x9c>)
   1e97e:	aa04      	add	r2, sp, #16
   1e980:	f7ef ff96 	bl	e8b0 <z_impl_z_log_msg_static_create>
	if (enable && data->enabled_mask == 0) {
   1e984:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e988:	b913      	cbnz	r3, 1e990 <mbox_nrf_set_enabled+0x54>
		irq_enable(DT_INST_IRQN(0));
   1e98a:	202a      	movs	r0, #42	; 0x2a
   1e98c:	f7f2 f856 	bl	10a3c <arch_irq_enable>
		data->enabled_mask |= BIT(channel);
   1e990:	2201      	movs	r2, #1
   1e992:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e996:	40a2      	lsls	r2, r4
   1e998:	4313      	orrs	r3, r2
   1e99a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   1e99e:	b2e0      	uxtb	r0, r4
   1e9a0:	f000 ffdc 	bl	1f95c <nrfx_ipc_receive_event_enable>
   1e9a4:	e00a      	b.n	1e9bc <mbox_nrf_set_enabled+0x80>
		nrfx_ipc_receive_event_disable(channel);
   1e9a6:	b2c8      	uxtb	r0, r1
   1e9a8:	f000 fff6 	bl	1f998 <nrfx_ipc_receive_event_disable>
		data->enabled_mask &= ~BIT(channel);
   1e9ac:	2201      	movs	r2, #1
   1e9ae:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e9b2:	40a2      	lsls	r2, r4
   1e9b4:	ea23 0302 	bic.w	r3, r3, r2
   1e9b8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	if (data->enabled_mask == 0) {
   1e9bc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1e9c0:	b913      	cbnz	r3, 1e9c8 <mbox_nrf_set_enabled+0x8c>
		irq_disable(DT_INST_IRQN(0));
   1e9c2:	202a      	movs	r0, #42	; 0x2a
   1e9c4:	f7f2 f848 	bl	10a58 <arch_irq_disable>
	return 0;
   1e9c8:	2000      	movs	r0, #0
}
   1e9ca:	b007      	add	sp, #28
   1e9cc:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1e9ce:	f06f 0015 	mvn.w	r0, #21
   1e9d2:	e7fa      	b.n	1e9ca <mbox_nrf_set_enabled+0x8e>
   1e9d4:	00037400 	.word	0x00037400
   1e9d8:	000315a4 	.word	0x000315a4

0001e9dc <mbox_nrf_send>:
{
   1e9dc:	b530      	push	{r4, r5, lr}
   1e9de:	4605      	mov	r5, r0
   1e9e0:	460c      	mov	r4, r1
   1e9e2:	b087      	sub	sp, #28
	if (msg) {
   1e9e4:	b152      	cbz	r2, 1e9fc <mbox_nrf_send+0x20>
		LOG_WRN("Sending data not supported");
   1e9e6:	4b10      	ldr	r3, [pc, #64]	; (1ea28 <mbox_nrf_send+0x4c>)
   1e9e8:	9305      	str	r3, [sp, #20]
   1e9ea:	2302      	movs	r3, #2
   1e9ec:	9304      	str	r3, [sp, #16]
   1e9ee:	2300      	movs	r3, #0
   1e9f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e9f4:	480d      	ldr	r0, [pc, #52]	; (1ea2c <mbox_nrf_send+0x50>)
   1e9f6:	aa04      	add	r2, sp, #16
   1e9f8:	f7ef ff5a 	bl	e8b0 <z_impl_z_log_msg_static_create>
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   1e9fc:	2c0f      	cmp	r4, #15
   1e9fe:	d80f      	bhi.n	1ea20 <mbox_nrf_send+0x44>
   1ea00:	686b      	ldr	r3, [r5, #4]
   1ea02:	685b      	ldr	r3, [r3, #4]
   1ea04:	40e3      	lsrs	r3, r4
   1ea06:	07db      	lsls	r3, r3, #31
   1ea08:	d50a      	bpl.n	1ea20 <mbox_nrf_send+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea0a:	2301      	movs	r3, #1
	return 0;
   1ea0c:	2000      	movs	r0, #0
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   1ea0e:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea10:	b2e4      	uxtb	r4, r4
   1ea12:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1ea16:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
   1ea1a:	6023      	str	r3, [r4, #0]
}
   1ea1c:	b007      	add	sp, #28
   1ea1e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   1ea20:	f06f 0015 	mvn.w	r0, #21
   1ea24:	e7fa      	b.n	1ea1c <mbox_nrf_send+0x40>
   1ea26:	bf00      	nop
   1ea28:	00037430 	.word	0x00037430
   1ea2c:	000315a4 	.word	0x000315a4

0001ea30 <mbox_dispatcher>:
{
   1ea30:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = data->dev;
   1ea32:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1ea36:	280f      	cmp	r0, #15
{
   1ea38:	4604      	mov	r4, r0
   1ea3a:	460d      	mov	r5, r1
   1ea3c:	6873      	ldr	r3, [r6, #4]
   1ea3e:	b086      	sub	sp, #24
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   1ea40:	d803      	bhi.n	1ea4a <mbox_dispatcher+0x1a>
   1ea42:	681b      	ldr	r3, [r3, #0]
   1ea44:	40c3      	lsrs	r3, r0
   1ea46:	07db      	lsls	r3, r3, #31
   1ea48:	d40a      	bmi.n	1ea60 <mbox_dispatcher+0x30>
		LOG_WRN("RX event on illegal channel");
   1ea4a:	4b15      	ldr	r3, [pc, #84]	; (1eaa0 <mbox_dispatcher+0x70>)
   1ea4c:	9305      	str	r3, [sp, #20]
   1ea4e:	2302      	movs	r3, #2
   1ea50:	9304      	str	r3, [sp, #16]
   1ea52:	2300      	movs	r3, #0
   1ea54:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea58:	4812      	ldr	r0, [pc, #72]	; (1eaa4 <mbox_dispatcher+0x74>)
   1ea5a:	aa04      	add	r2, sp, #16
   1ea5c:	f7ef ff28 	bl	e8b0 <z_impl_z_log_msg_static_create>
	if (!(data->enabled_mask & BIT(channel))) {
   1ea60:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   1ea64:	40e3      	lsrs	r3, r4
   1ea66:	f013 0301 	ands.w	r3, r3, #1
   1ea6a:	d109      	bne.n	1ea80 <mbox_dispatcher+0x50>
		LOG_WRN("RX event on disabled channel");
   1ea6c:	4a0e      	ldr	r2, [pc, #56]	; (1eaa8 <mbox_dispatcher+0x78>)
   1ea6e:	9205      	str	r2, [sp, #20]
   1ea70:	2202      	movs	r2, #2
   1ea72:	9204      	str	r2, [sp, #16]
   1ea74:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ea78:	480a      	ldr	r0, [pc, #40]	; (1eaa4 <mbox_dispatcher+0x74>)
   1ea7a:	aa04      	add	r2, sp, #16
   1ea7c:	f7ef ff18 	bl	e8b0 <z_impl_z_log_msg_static_create>
	if (data->cb[channel] != NULL) {
   1ea80:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   1ea84:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
   1ea88:	b145      	cbz	r5, 1ea9c <mbox_dispatcher+0x6c>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1ea8a:	2300      	movs	r3, #0
   1ea8c:	4621      	mov	r1, r4
   1ea8e:	4630      	mov	r0, r6
   1ea90:	46ac      	mov	ip, r5
   1ea92:	6c12      	ldr	r2, [r2, #64]	; 0x40
}
   1ea94:	b006      	add	sp, #24
   1ea96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   1ea9a:	4760      	bx	ip
}
   1ea9c:	b006      	add	sp, #24
   1ea9e:	bd70      	pop	{r4, r5, r6, pc}
   1eaa0:	0003744b 	.word	0x0003744b
   1eaa4:	000315a4 	.word	0x000315a4
   1eaa8:	00037467 	.word	0x00037467

0001eaac <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1eaac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1eaae:	f7ef fd99 	bl	e5e4 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1eab2:	4b07      	ldr	r3, [pc, #28]	; (1ead0 <k_sys_fatal_error_handler+0x24>)
   1eab4:	9305      	str	r3, [sp, #20]
   1eab6:	2302      	movs	r3, #2
   1eab8:	9304      	str	r3, [sp, #16]
   1eaba:	4806      	ldr	r0, [pc, #24]	; (1ead4 <k_sys_fatal_error_handler+0x28>)
   1eabc:	2300      	movs	r3, #0
   1eabe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1eac2:	aa04      	add	r2, sp, #16
   1eac4:	f7ef fef4 	bl	e8b0 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1eac8:	2000      	movs	r0, #0
   1eaca:	f7f2 fc75 	bl	113b8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1eace:	bf00      	nop
   1ead0:	000374b1 	.word	0x000374b1
   1ead4:	00031564 	.word	0x00031564

0001ead8 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   1ead8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eadc:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   1eade:	4b15      	ldr	r3, [pc, #84]	; (1eb34 <tfm_ns_interface_dispatch+0x5c>)
   1eae0:	4604      	mov	r4, r0
   1eae2:	f893 8000 	ldrb.w	r8, [r3]
   1eae6:	460d      	mov	r5, r1
   1eae8:	4616      	mov	r6, r2
   1eaea:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   1eaec:	f1b8 0f00 	cmp.w	r8, #0
   1eaf0:	d115      	bne.n	1eb1e <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   1eaf2:	4668      	mov	r0, sp
   1eaf4:	f00d f943 	bl	2bd7e <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   1eaf8:	463a      	mov	r2, r7
   1eafa:	4631      	mov	r1, r6
   1eafc:	4628      	mov	r0, r5
   1eafe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1eb00:	47a0      	blx	r4
   1eb02:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   1eb04:	4668      	mov	r0, sp
   1eb06:	f00d f93b 	bl	2bd80 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   1eb0a:	f1b8 0f00 	cmp.w	r8, #0
   1eb0e:	d002      	beq.n	1eb16 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   1eb10:	4809      	ldr	r0, [pc, #36]	; (1eb38 <tfm_ns_interface_dispatch+0x60>)
   1eb12:	f006 fbd7 	bl	252c4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   1eb16:	4620      	mov	r0, r4
   1eb18:	b022      	add	sp, #136	; 0x88
   1eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   1eb1e:	f04f 32ff 	mov.w	r2, #4294967295
   1eb22:	f04f 33ff 	mov.w	r3, #4294967295
   1eb26:	4804      	ldr	r0, [pc, #16]	; (1eb38 <tfm_ns_interface_dispatch+0x60>)
   1eb28:	f006 fafc 	bl	25124 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   1eb2c:	2800      	cmp	r0, #0
   1eb2e:	d0e0      	beq.n	1eaf2 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   1eb30:	241f      	movs	r4, #31
   1eb32:	e7f0      	b.n	1eb16 <tfm_ns_interface_dispatch+0x3e>
   1eb34:	20022827 	.word	0x20022827
   1eb38:	20008b90 	.word	0x20008b90

0001eb3c <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   1eb3c:	b530      	push	{r4, r5, lr}
   1eb3e:	b095      	sub	sp, #84	; 0x54
   1eb40:	4605      	mov	r5, r0
   1eb42:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   1eb44:	2230      	movs	r2, #48	; 0x30
   1eb46:	2100      	movs	r1, #0
   1eb48:	a808      	add	r0, sp, #32
   1eb4a:	f011 fd5a 	bl	30602 <memset>
   1eb4e:	233f      	movs	r3, #63	; 0x3f
   1eb50:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   1eb52:	ab07      	add	r3, sp, #28
   1eb54:	9303      	str	r3, [sp, #12]
   1eb56:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   1eb58:	9406      	str	r4, [sp, #24]
   1eb5a:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   1eb5e:	b154      	cbz	r4, 1eb76 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   1eb60:	2301      	movs	r3, #1
   1eb62:	aa05      	add	r2, sp, #20
   1eb64:	9200      	str	r2, [sp, #0]
   1eb66:	2100      	movs	r1, #0
   1eb68:	4804      	ldr	r0, [pc, #16]	; (1eb7c <psa_generate_random+0x40>)
   1eb6a:	9301      	str	r3, [sp, #4]
   1eb6c:	aa03      	add	r2, sp, #12
   1eb6e:	f000 f807 	bl	1eb80 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   1eb72:	b015      	add	sp, #84	; 0x54
   1eb74:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   1eb76:	4620      	mov	r0, r4
   1eb78:	e7fb      	b.n	1eb72 <psa_generate_random+0x36>
   1eb7a:	bf00      	nop
   1eb7c:	40000100 	.word	0x40000100

0001eb80 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   1eb80:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
   1eb82:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
   1eb86:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
   1eb8a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
   1eb8c:	d20d      	bcs.n	1ebaa <psa_call+0x2a>
        (type < INT16_MIN) ||
   1eb8e:	ea43 0504 	orr.w	r5, r3, r4
   1eb92:	2dff      	cmp	r5, #255	; 0xff
   1eb94:	d809      	bhi.n	1ebaa <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   1eb96:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   1eb9a:	4613      	mov	r3, r2
   1eb9c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   1eba0:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   1eba2:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
   1eba4:	4803      	ldr	r0, [pc, #12]	; (1ebb4 <psa_call+0x34>)
   1eba6:	f7ff bf97 	b.w	1ead8 <tfm_ns_interface_dispatch>
}
   1ebaa:	f06f 0080 	mvn.w	r0, #128	; 0x80
   1ebae:	bc30      	pop	{r4, r5}
   1ebb0:	4770      	bx	lr
   1ebb2:	bf00      	nop
   1ebb4:	00007c21 	.word	0x00007c21

0001ebb8 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   1ebb8:	2300      	movs	r3, #0
{
   1ebba:	b507      	push	{r0, r1, r2, lr}
   1ebbc:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   1ebbe:	9300      	str	r3, [sp, #0]
   1ebc0:	4601      	mov	r1, r0
   1ebc2:	4803      	ldr	r0, [pc, #12]	; (1ebd0 <psa_connect+0x18>)
   1ebc4:	f7ff ff88 	bl	1ead8 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   1ebc8:	b003      	add	sp, #12
   1ebca:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebce:	bf00      	nop
   1ebd0:	00007c19 	.word	0x00007c19

0001ebd4 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   1ebd4:	2300      	movs	r3, #0
{
   1ebd6:	b507      	push	{r0, r1, r2, lr}
   1ebd8:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   1ebda:	461a      	mov	r2, r3
   1ebdc:	9300      	str	r3, [sp, #0]
   1ebde:	4803      	ldr	r0, [pc, #12]	; (1ebec <psa_close+0x18>)
   1ebe0:	f7ff ff7a 	bl	1ead8 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   1ebe4:	b003      	add	sp, #12
   1ebe6:	f85d fb04 	ldr.w	pc, [sp], #4
   1ebea:	bf00      	nop
   1ebec:	00007c11 	.word	0x00007c11

0001ebf0 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   1ebf0:	4b04      	ldr	r3, [pc, #16]	; (1ec04 <SystemCoreClockUpdate+0x14>)
   1ebf2:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   1ebf6:	4b04      	ldr	r3, [pc, #16]	; (1ec08 <SystemCoreClockUpdate+0x18>)
   1ebf8:	f002 0203 	and.w	r2, r2, #3
   1ebfc:	40d3      	lsrs	r3, r2
   1ebfe:	4a03      	ldr	r2, [pc, #12]	; (1ec0c <SystemCoreClockUpdate+0x1c>)
   1ec00:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   1ec02:	4770      	bx	lr
   1ec04:	40005000 	.word	0x40005000
   1ec08:	07a12000 	.word	0x07a12000
   1ec0c:	20008694 	.word	0x20008694

0001ec10 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ec10:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ec12:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1ec14:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1ec16:	fab2 f382 	clz	r3, r2
   1ec1a:	f1c3 031f 	rsb	r3, r3, #31
   1ec1e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ec20:	fa05 f403 	lsl.w	r4, r5, r3
   1ec24:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ec28:	e8d0 6fef 	ldaex	r6, [r0]
   1ec2c:	4296      	cmp	r6, r2
   1ec2e:	d104      	bne.n	1ec3a <nrfx_flag32_alloc+0x2a>
   1ec30:	e8c0 4fec 	stlex	ip, r4, [r0]
   1ec34:	f1bc 0f00 	cmp.w	ip, #0
   1ec38:	d1f6      	bne.n	1ec28 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ec3a:	d1eb      	bne.n	1ec14 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1ec3c:	4801      	ldr	r0, [pc, #4]	; (1ec44 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
   1ec3e:	700b      	strb	r3, [r1, #0]
}
   1ec40:	bd70      	pop	{r4, r5, r6, pc}
   1ec42:	bf00      	nop
   1ec44:	0bad0000 	.word	0x0bad0000

0001ec48 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1ec48:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ec4a:	6803      	ldr	r3, [r0, #0]
   1ec4c:	40cb      	lsrs	r3, r1
   1ec4e:	07db      	lsls	r3, r3, #31
   1ec50:	d410      	bmi.n	1ec74 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ec52:	2301      	movs	r3, #1
   1ec54:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1ec56:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1ec58:	ea43 0102 	orr.w	r1, r3, r2
   1ec5c:	e8d0 4fef 	ldaex	r4, [r0]
   1ec60:	4294      	cmp	r4, r2
   1ec62:	d104      	bne.n	1ec6e <nrfx_flag32_free+0x26>
   1ec64:	e8c0 1fec 	stlex	ip, r1, [r0]
   1ec68:	f1bc 0f00 	cmp.w	ip, #0
   1ec6c:	d1f6      	bne.n	1ec5c <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ec6e:	d1f2      	bne.n	1ec56 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1ec70:	4801      	ldr	r0, [pc, #4]	; (1ec78 <nrfx_flag32_free+0x30>)
}
   1ec72:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ec74:	4801      	ldr	r0, [pc, #4]	; (1ec7c <nrfx_flag32_free+0x34>)
   1ec76:	e7fc      	b.n	1ec72 <nrfx_flag32_free+0x2a>
   1ec78:	0bad0000 	.word	0x0bad0000
   1ec7c:	0bad0004 	.word	0x0bad0004

0001ec80 <clock_stop>:
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    switch (domain)
   1ec80:	2200      	movs	r2, #0
{
   1ec82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ec84:	4b62      	ldr	r3, [pc, #392]	; (1ee10 <clock_stop+0x190>)
    switch (domain)
   1ec86:	2803      	cmp	r0, #3
   1ec88:	d838      	bhi.n	1ecfc <clock_stop+0x7c>
   1ec8a:	e8df f000 	tbb	[pc, r0]
   1ec8e:	0d02      	.short	0x0d02
   1ec90:	2c21      	.short	0x2c21
    p_reg->INTENCLR = mask;
   1ec92:	2102      	movs	r1, #2
   1ec94:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ec9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eca0:	2201      	movs	r2, #1
   1eca2:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1eca4:	2400      	movs	r4, #0
   1eca6:	e009      	b.n	1ecbc <clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1eca8:	2101      	movs	r1, #1
   1ecaa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ecb2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1ecb6:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecba:	6059      	str	r1, [r3, #4]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1ecbc:	2301      	movs	r3, #1
   1ecbe:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
   1ecc2:	2803      	cmp	r0, #3
   1ecc4:	f200 8093 	bhi.w	1edee <clock_stop+0x16e>
   1ecc8:	e8df f000 	tbb	[pc, r0]
   1eccc:	83634322 	.word	0x83634322
    p_reg->INTENCLR = mask;
   1ecd0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ecd4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecd8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ecdc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ece0:	2201      	movs	r2, #1
   1ece2:	625a      	str	r2, [r3, #36]	; 0x24
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1ece4:	e7de      	b.n	1eca4 <clock_stop+0x24>
    p_reg->INTENCLR = mask;
   1ece6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1ecea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ecee:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ecf2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecf6:	2201      	movs	r2, #1
   1ecf8:	61da      	str	r2, [r3, #28]
   1ecfa:	e7d3      	b.n	1eca4 <clock_stop+0x24>
            NRFX_ASSERT(0);
   1ecfc:	4945      	ldr	r1, [pc, #276]	; (1ee14 <clock_stop+0x194>)
   1ecfe:	4846      	ldr	r0, [pc, #280]	; (1ee18 <clock_stop+0x198>)
   1ed00:	23d8      	movs	r3, #216	; 0xd8
   1ed02:	4a46      	ldr	r2, [pc, #280]	; (1ee1c <clock_stop+0x19c>)
   1ed04:	f00b fce9 	bl	2a6da <assert_print>
   1ed08:	21d8      	movs	r1, #216	; 0xd8
   1ed0a:	4844      	ldr	r0, [pc, #272]	; (1ee1c <clock_stop+0x19c>)
            NRFX_ASSERT(0);
   1ed0c:	f00b fcde 	bl	2a6cc <assert_post_action>
    switch (domain)
   1ed10:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed14:	4e3e      	ldr	r6, [pc, #248]	; (1ee10 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed16:	b194      	cbz	r4, 1ed3e <clock_stop+0xbe>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ed18:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ed1c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1ed20:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ed22:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ed26:	03d9      	lsls	r1, r3, #15
   1ed28:	d507      	bpl.n	1ed3a <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1ed2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed2e:	2801      	cmp	r0, #1
   1ed30:	d103      	bne.n	1ed3a <clock_stop+0xba>
   1ed32:	f00f fecb 	bl	2eacc <nrfx_busy_wait>
   1ed36:	3d01      	subs	r5, #1
   1ed38:	d1ed      	bne.n	1ed16 <clock_stop+0x96>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ed3a:	b002      	add	sp, #8
   1ed3c:	bd70      	pop	{r4, r5, r6, pc}
   1ed3e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   1ed42:	03da      	lsls	r2, r3, #15
   1ed44:	d5f9      	bpl.n	1ed3a <clock_stop+0xba>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1ed46:	2001      	movs	r0, #1
   1ed48:	f00f fec0 	bl	2eacc <nrfx_busy_wait>
   1ed4c:	3d01      	subs	r5, #1
   1ed4e:	d1f6      	bne.n	1ed3e <clock_stop+0xbe>
   1ed50:	e7f3      	b.n	1ed3a <clock_stop+0xba>
    switch (domain)
   1ed52:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed56:	4e2e      	ldr	r6, [pc, #184]	; (1ee10 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed58:	b18c      	cbz	r4, 1ed7e <clock_stop+0xfe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ed5a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed5e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1ed62:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ed64:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed68:	03db      	lsls	r3, r3, #15
   1ed6a:	d5e6      	bpl.n	1ed3a <clock_stop+0xba>
   1ed6c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ed70:	2801      	cmp	r0, #1
   1ed72:	d1e2      	bne.n	1ed3a <clock_stop+0xba>
   1ed74:	f00f feaa 	bl	2eacc <nrfx_busy_wait>
   1ed78:	3d01      	subs	r5, #1
   1ed7a:	d1ed      	bne.n	1ed58 <clock_stop+0xd8>
   1ed7c:	e7dd      	b.n	1ed3a <clock_stop+0xba>
   1ed7e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   1ed82:	03d8      	lsls	r0, r3, #15
   1ed84:	d5d9      	bpl.n	1ed3a <clock_stop+0xba>
   1ed86:	2001      	movs	r0, #1
   1ed88:	f00f fea0 	bl	2eacc <nrfx_busy_wait>
   1ed8c:	3d01      	subs	r5, #1
   1ed8e:	d1f6      	bne.n	1ed7e <clock_stop+0xfe>
   1ed90:	e7d3      	b.n	1ed3a <clock_stop+0xba>
    switch (domain)
   1ed92:	f242 7510 	movw	r5, #10000	; 0x2710
   1ed96:	4e1e      	ldr	r6, [pc, #120]	; (1ee10 <clock_stop+0x190>)
            if (p_clk_src != NULL)
   1ed98:	b18c      	cbz	r4, 1edbe <clock_stop+0x13e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   1ed9a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1ed9e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1eda2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   1eda4:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1eda8:	03d9      	lsls	r1, r3, #15
   1edaa:	d5c6      	bpl.n	1ed3a <clock_stop+0xba>
   1edac:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1edb0:	2801      	cmp	r0, #1
   1edb2:	d1c2      	bne.n	1ed3a <clock_stop+0xba>
   1edb4:	f00f fe8a 	bl	2eacc <nrfx_busy_wait>
   1edb8:	3d01      	subs	r5, #1
   1edba:	d1ed      	bne.n	1ed98 <clock_stop+0x118>
   1edbc:	e7bd      	b.n	1ed3a <clock_stop+0xba>
   1edbe:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1edc2:	03da      	lsls	r2, r3, #15
   1edc4:	d5b9      	bpl.n	1ed3a <clock_stop+0xba>
   1edc6:	2001      	movs	r0, #1
   1edc8:	f00f fe80 	bl	2eacc <nrfx_busy_wait>
   1edcc:	3d01      	subs	r5, #1
   1edce:	d1f6      	bne.n	1edbe <clock_stop+0x13e>
   1edd0:	e7b3      	b.n	1ed3a <clock_stop+0xba>
    switch (domain)
   1edd2:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1edd6:	4e0e      	ldr	r6, [pc, #56]	; (1ee10 <clock_stop+0x190>)
   1edd8:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1eddc:	03db      	lsls	r3, r3, #15
   1edde:	d5ac      	bpl.n	1ed3a <clock_stop+0xba>
   1ede0:	b984      	cbnz	r4, 1ee04 <clock_stop+0x184>
   1ede2:	2001      	movs	r0, #1
   1ede4:	f00f fe72 	bl	2eacc <nrfx_busy_wait>
   1ede8:	3d01      	subs	r5, #1
   1edea:	d1f5      	bne.n	1edd8 <clock_stop+0x158>
   1edec:	e7a5      	b.n	1ed3a <clock_stop+0xba>
            NRFX_ASSERT(0);
   1edee:	4909      	ldr	r1, [pc, #36]	; (1ee14 <clock_stop+0x194>)
   1edf0:	4809      	ldr	r0, [pc, #36]	; (1ee18 <clock_stop+0x198>)
   1edf2:	f240 3347 	movw	r3, #839	; 0x347
   1edf6:	4a0a      	ldr	r2, [pc, #40]	; (1ee20 <clock_stop+0x1a0>)
   1edf8:	f00b fc6f 	bl	2a6da <assert_print>
   1edfc:	f240 3147 	movw	r1, #839	; 0x347
   1ee00:	4807      	ldr	r0, [pc, #28]	; (1ee20 <clock_stop+0x1a0>)
   1ee02:	e783      	b.n	1ed0c <clock_stop+0x8c>
   1ee04:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ee08:	2801      	cmp	r0, #1
   1ee0a:	d0eb      	beq.n	1ede4 <clock_stop+0x164>
   1ee0c:	e795      	b.n	1ed3a <clock_stop+0xba>
   1ee0e:	bf00      	nop
   1ee10:	40005000 	.word	0x40005000
   1ee14:	00037b56 	.word	0x00037b56
   1ee18:	00032679 	.word	0x00032679
   1ee1c:	000374ce 	.word	0x000374ce
   1ee20:	0003750b 	.word	0x0003750b

0001ee24 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1ee24:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
   1ee26:	b958      	cbnz	r0, 1ee40 <nrfx_clock_init+0x1c>
   1ee28:	490a      	ldr	r1, [pc, #40]	; (1ee54 <nrfx_clock_init+0x30>)
   1ee2a:	480b      	ldr	r0, [pc, #44]	; (1ee58 <nrfx_clock_init+0x34>)
   1ee2c:	f240 1315 	movw	r3, #277	; 0x115
   1ee30:	4a0a      	ldr	r2, [pc, #40]	; (1ee5c <nrfx_clock_init+0x38>)
   1ee32:	f00b fc52 	bl	2a6da <assert_print>
   1ee36:	f240 1115 	movw	r1, #277	; 0x115
   1ee3a:	4808      	ldr	r0, [pc, #32]	; (1ee5c <nrfx_clock_init+0x38>)
   1ee3c:	f00b fc46 	bl	2a6cc <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1ee40:	4b07      	ldr	r3, [pc, #28]	; (1ee60 <nrfx_clock_init+0x3c>)
   1ee42:	791a      	ldrb	r2, [r3, #4]
   1ee44:	b922      	cbnz	r2, 1ee50 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1ee46:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1ee48:	6018      	str	r0, [r3, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ee4a:	4806      	ldr	r0, [pc, #24]	; (1ee64 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
   1ee4c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ee4e:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1ee50:	4805      	ldr	r0, [pc, #20]	; (1ee68 <nrfx_clock_init+0x44>)
    return err_code;
   1ee52:	e7fc      	b.n	1ee4e <nrfx_clock_init+0x2a>
   1ee54:	0003753f 	.word	0x0003753f
   1ee58:	00032679 	.word	0x00032679
   1ee5c:	000374ce 	.word	0x000374ce
   1ee60:	20021958 	.word	0x20021958
   1ee64:	0bad0000 	.word	0x0bad0000
   1ee68:	0bad000c 	.word	0x0bad000c

0001ee6c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1ee6c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1ee6e:	4b0f      	ldr	r3, [pc, #60]	; (1eeac <nrfx_clock_enable+0x40>)
   1ee70:	791b      	ldrb	r3, [r3, #4]
   1ee72:	b95b      	cbnz	r3, 1ee8c <nrfx_clock_enable+0x20>
   1ee74:	490e      	ldr	r1, [pc, #56]	; (1eeb0 <nrfx_clock_enable+0x44>)
   1ee76:	480f      	ldr	r0, [pc, #60]	; (1eeb4 <nrfx_clock_enable+0x48>)
   1ee78:	f44f 7397 	mov.w	r3, #302	; 0x12e
   1ee7c:	4a0e      	ldr	r2, [pc, #56]	; (1eeb8 <nrfx_clock_enable+0x4c>)
   1ee7e:	f00b fc2c 	bl	2a6da <assert_print>
   1ee82:	f44f 7197 	mov.w	r1, #302	; 0x12e
   1ee86:	480c      	ldr	r0, [pc, #48]	; (1eeb8 <nrfx_clock_enable+0x4c>)
   1ee88:	f00b fc20 	bl	2a6cc <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1ee8c:	2005      	movs	r0, #5
   1ee8e:	f7f1 fdf7 	bl	10a80 <arch_irq_is_enabled>
   1ee92:	b910      	cbnz	r0, 1ee9a <nrfx_clock_enable+0x2e>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1ee94:	2005      	movs	r0, #5
   1ee96:	f7f1 fdd1 	bl	10a3c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ee9a:	2201      	movs	r2, #1
   1ee9c:	4b07      	ldr	r3, [pc, #28]	; (1eebc <nrfx_clock_enable+0x50>)
   1ee9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   1eea2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   1eea6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1eeaa:	bd08      	pop	{r3, pc}
   1eeac:	20021958 	.word	0x20021958
   1eeb0:	0003754d 	.word	0x0003754d
   1eeb4:	00032679 	.word	0x00032679
   1eeb8:	000374ce 	.word	0x000374ce
   1eebc:	40005000 	.word	0x40005000

0001eec0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1eec0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1eec2:	4b38      	ldr	r3, [pc, #224]	; (1efa4 <nrfx_clock_start+0xe4>)
   1eec4:	791b      	ldrb	r3, [r3, #4]
   1eec6:	b95b      	cbnz	r3, 1eee0 <nrfx_clock_start+0x20>
   1eec8:	4937      	ldr	r1, [pc, #220]	; (1efa8 <nrfx_clock_start+0xe8>)
   1eeca:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1eece:	4a37      	ldr	r2, [pc, #220]	; (1efac <nrfx_clock_start+0xec>)
   1eed0:	4837      	ldr	r0, [pc, #220]	; (1efb0 <nrfx_clock_start+0xf0>)
   1eed2:	f00b fc02 	bl	2a6da <assert_print>
   1eed6:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1eeda:	4834      	ldr	r0, [pc, #208]	; (1efac <nrfx_clock_start+0xec>)
   1eedc:	f00b fbf6 	bl	2a6cc <assert_post_action>
    switch (domain)
   1eee0:	4b34      	ldr	r3, [pc, #208]	; (1efb4 <nrfx_clock_start+0xf4>)
   1eee2:	2803      	cmp	r0, #3
   1eee4:	d853      	bhi.n	1ef8e <nrfx_clock_start+0xce>
   1eee6:	e8df f000 	tbb	[pc, r0]
   1eeea:	3002      	.short	0x3002
   1eeec:	463a      	.short	0x463a
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eeee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eef2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1eef6:	03c9      	lsls	r1, r1, #15
   1eef8:	d511      	bpl.n	1ef1e <nrfx_clock_start+0x5e>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1eefa:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1eefe:	2b02      	cmp	r3, #2
   1ef00:	d11c      	bne.n	1ef3c <nrfx_clock_start+0x7c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ef02:	4a2c      	ldr	r2, [pc, #176]	; (1efb4 <nrfx_clock_start+0xf4>)
   1ef04:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef08:	2300      	movs	r3, #0
   1ef0a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   1ef0e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   1ef12:	2302      	movs	r3, #2
   1ef14:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef18:	2301      	movs	r3, #1
   1ef1a:	6093      	str	r3, [r2, #8]
}
   1ef1c:	e00d      	b.n	1ef3a <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1ef1e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1ef22:	07d2      	lsls	r2, r2, #31
   1ef24:	d50f      	bpl.n	1ef46 <nrfx_clock_start+0x86>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1ef26:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
   1ef2a:	f002 0203 	and.w	r2, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ef2e:	3a01      	subs	r2, #1
   1ef30:	2a01      	cmp	r2, #1
   1ef32:	d805      	bhi.n	1ef40 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   1ef34:	2202      	movs	r2, #2
   1ef36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
   1ef3a:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1ef3c:	2b01      	cmp	r3, #1
   1ef3e:	d002      	beq.n	1ef46 <nrfx_clock_start+0x86>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ef40:	2000      	movs	r0, #0
   1ef42:	f7ff fe9d 	bl	1ec80 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1ef46:	2301      	movs	r3, #1
   1ef48:	e7db      	b.n	1ef02 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef4a:	2200      	movs	r2, #0
   1ef4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ef50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ef54:	2201      	movs	r2, #1
   1ef56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef5a:	601a      	str	r2, [r3, #0]
}
   1ef5c:	e7ed      	b.n	1ef3a <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef5e:	2200      	movs	r2, #0
   1ef60:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1ef64:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   1ef68:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ef6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef70:	2201      	movs	r2, #1
   1ef72:	621a      	str	r2, [r3, #32]
}
   1ef74:	e7e1      	b.n	1ef3a <nrfx_clock_start+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef76:	2200      	movs	r2, #0
   1ef78:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1ef7c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   1ef80:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ef84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef88:	2201      	movs	r2, #1
   1ef8a:	619a      	str	r2, [r3, #24]
}
   1ef8c:	e7d5      	b.n	1ef3a <nrfx_clock_start+0x7a>
            NRFX_ASSERT(0);
   1ef8e:	490a      	ldr	r1, [pc, #40]	; (1efb8 <nrfx_clock_start+0xf8>)
   1ef90:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   1ef94:	4a05      	ldr	r2, [pc, #20]	; (1efac <nrfx_clock_start+0xec>)
   1ef96:	4806      	ldr	r0, [pc, #24]	; (1efb0 <nrfx_clock_start+0xf0>)
   1ef98:	f00b fb9f 	bl	2a6da <assert_print>
   1ef9c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   1efa0:	e79b      	b.n	1eeda <nrfx_clock_start+0x1a>
   1efa2:	bf00      	nop
   1efa4:	20021958 	.word	0x20021958
   1efa8:	0003754d 	.word	0x0003754d
   1efac:	000374ce 	.word	0x000374ce
   1efb0:	00032679 	.word	0x00032679
   1efb4:	40005000 	.word	0x40005000
   1efb8:	00037b56 	.word	0x00037b56

0001efbc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1efbc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1efbe:	4b09      	ldr	r3, [pc, #36]	; (1efe4 <nrfx_clock_stop+0x28>)
   1efc0:	791b      	ldrb	r3, [r3, #4]
   1efc2:	b95b      	cbnz	r3, 1efdc <nrfx_clock_stop+0x20>
   1efc4:	4908      	ldr	r1, [pc, #32]	; (1efe8 <nrfx_clock_stop+0x2c>)
   1efc6:	4809      	ldr	r0, [pc, #36]	; (1efec <nrfx_clock_stop+0x30>)
   1efc8:	f240 13ad 	movw	r3, #429	; 0x1ad
   1efcc:	4a08      	ldr	r2, [pc, #32]	; (1eff0 <nrfx_clock_stop+0x34>)
   1efce:	f00b fb84 	bl	2a6da <assert_print>
   1efd2:	f240 11ad 	movw	r1, #429	; 0x1ad
   1efd6:	4806      	ldr	r0, [pc, #24]	; (1eff0 <nrfx_clock_stop+0x34>)
   1efd8:	f00b fb78 	bl	2a6cc <assert_post_action>
    clock_stop(domain);
}
   1efdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
   1efe0:	f7ff be4e 	b.w	1ec80 <clock_stop>
   1efe4:	20021958 	.word	0x20021958
   1efe8:	0003754d 	.word	0x0003754d
   1efec:	00032679 	.word	0x00032679
   1eff0:	000374ce 	.word	0x000374ce

0001eff4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1eff4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1eff6:	4b28      	ldr	r3, [pc, #160]	; (1f098 <nrfx_power_clock_irq_handler+0xa4>)
   1eff8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1effc:	b152      	cbz	r2, 1f014 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1effe:	2000      	movs	r0, #0
   1f000:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   1f004:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1f008:	2201      	movs	r2, #1
   1f00a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f00e:	4b23      	ldr	r3, [pc, #140]	; (1f09c <nrfx_power_clock_irq_handler+0xa8>)
   1f010:	681b      	ldr	r3, [r3, #0]
   1f012:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f014:	4b20      	ldr	r3, [pc, #128]	; (1f098 <nrfx_power_clock_irq_handler+0xa4>)
   1f016:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1f01a:	b18a      	cbz	r2, 1f040 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f01c:	2200      	movs	r2, #0
   1f01e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1f022:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f026:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f02a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f02e:	f002 0203 	and.w	r2, r2, #3
   1f032:	2a01      	cmp	r2, #1
   1f034:	f04f 0102 	mov.w	r1, #2
   1f038:	d126      	bne.n	1f088 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f03a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f03e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f040:	4b15      	ldr	r3, [pc, #84]	; (1f098 <nrfx_power_clock_irq_handler+0xa4>)
   1f042:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   1f046:	b162      	cbz	r2, 1f062 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f048:	2200      	movs	r2, #0
   1f04a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1f04e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   1f052:	f44f 7280 	mov.w	r2, #256	; 0x100
   1f056:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1f05a:	4b10      	ldr	r3, [pc, #64]	; (1f09c <nrfx_power_clock_irq_handler+0xa8>)
   1f05c:	2004      	movs	r0, #4
   1f05e:	681b      	ldr	r3, [r3, #0]
   1f060:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f062:	4b0d      	ldr	r3, [pc, #52]	; (1f098 <nrfx_power_clock_irq_handler+0xa4>)
   1f064:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   1f068:	b1aa      	cbz	r2, 1f096 <nrfx_power_clock_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f06a:	2200      	movs	r2, #0
   1f06c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   1f070:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   1f074:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f078:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1f07c:	4b07      	ldr	r3, [pc, #28]	; (1f09c <nrfx_power_clock_irq_handler+0xa8>)
   1f07e:	2005      	movs	r0, #5
    }
#endif
}
   1f080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1f084:	681b      	ldr	r3, [r3, #0]
   1f086:	4718      	bx	r3
   1f088:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f08c:	4b03      	ldr	r3, [pc, #12]	; (1f09c <nrfx_power_clock_irq_handler+0xa8>)
   1f08e:	2001      	movs	r0, #1
   1f090:	681b      	ldr	r3, [r3, #0]
   1f092:	4798      	blx	r3
   1f094:	e7d4      	b.n	1f040 <nrfx_power_clock_irq_handler+0x4c>
}
   1f096:	bd10      	pop	{r4, pc}
   1f098:	40005000 	.word	0x40005000
   1f09c:	20021958 	.word	0x20021958

0001f0a0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1f0a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   1f0a2:	4801      	ldr	r0, [pc, #4]	; (1f0a8 <nrfx_dppi_channel_alloc+0x8>)
   1f0a4:	f7ff bdb4 	b.w	1ec10 <nrfx_flag32_alloc>
   1f0a8:	20008698 	.word	0x20008698

0001f0ac <nrfx_dppi_channel_free>:
}

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   1f0ac:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1f0ae:	4a04      	ldr	r2, [pc, #16]	; (1f0c0 <nrfx_dppi_channel_free+0x14>)
   1f0b0:	4083      	lsls	r3, r0
{
   1f0b2:	4601      	mov	r1, r0
   1f0b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   1f0b8:	4802      	ldr	r0, [pc, #8]	; (1f0c4 <nrfx_dppi_channel_free+0x18>)
   1f0ba:	f7ff bdc5 	b.w	1ec48 <nrfx_flag32_free>
   1f0be:	bf00      	nop
   1f0c0:	40017000 	.word	0x40017000
   1f0c4:	20008698 	.word	0x20008698

0001f0c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f0c8:	4b03      	ldr	r3, [pc, #12]	; (1f0d8 <pin_in_use_by_te+0x10>)
   1f0ca:	3008      	adds	r0, #8
   1f0cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f0d4:	4770      	bx	lr
   1f0d6:	bf00      	nop
   1f0d8:	2000869c 	.word	0x2000869c

0001f0dc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f0dc:	4b04      	ldr	r3, [pc, #16]	; (1f0f0 <pin_has_trigger+0x14>)
   1f0de:	3008      	adds	r0, #8
   1f0e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0e4:	f010 001c 	ands.w	r0, r0, #28
   1f0e8:	bf18      	it	ne
   1f0ea:	2001      	movne	r0, #1
   1f0ec:	4770      	bx	lr
   1f0ee:	bf00      	nop
   1f0f0:	2000869c 	.word	0x2000869c

0001f0f4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f0f4:	4b03      	ldr	r3, [pc, #12]	; (1f104 <pin_is_output+0x10>)
   1f0f6:	3008      	adds	r0, #8
   1f0f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f0fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f100:	4770      	bx	lr
   1f102:	bf00      	nop
   1f104:	2000869c 	.word	0x2000869c

0001f108 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f108:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f10a:	4c0d      	ldr	r4, [pc, #52]	; (1f140 <call_handler+0x38>)
   1f10c:	f100 0308 	add.w	r3, r0, #8
   1f110:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   1f114:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f116:	05da      	lsls	r2, r3, #23
{
   1f118:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f11a:	d507      	bpl.n	1f12c <call_handler+0x24>
   1f11c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f120:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f124:	6852      	ldr	r2, [r2, #4]
   1f126:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f12a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f12c:	68a3      	ldr	r3, [r4, #8]
   1f12e:	b12b      	cbz	r3, 1f13c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f130:	4631      	mov	r1, r6
   1f132:	4628      	mov	r0, r5
   1f134:	68e2      	ldr	r2, [r4, #12]
    }
}
   1f136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f13a:	4718      	bx	r3
}
   1f13c:	bd70      	pop	{r4, r5, r6, pc}
   1f13e:	bf00      	nop
   1f140:	2000869c 	.word	0x2000869c

0001f144 <release_handler>:
{
   1f144:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f146:	4a18      	ldr	r2, [pc, #96]	; (1f1a8 <release_handler+0x64>)
   1f148:	3008      	adds	r0, #8
   1f14a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f14e:	05d9      	lsls	r1, r3, #23
   1f150:	d51d      	bpl.n	1f18e <release_handler+0x4a>
   1f152:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f156:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f15a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f15e:	2000      	movs	r0, #0
   1f160:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f164:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f168:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f16c:	d003      	beq.n	1f176 <release_handler+0x32>
   1f16e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f172:	4299      	cmp	r1, r3
   1f174:	d00b      	beq.n	1f18e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f176:	3001      	adds	r0, #1
   1f178:	2830      	cmp	r0, #48	; 0x30
   1f17a:	d1f3      	bne.n	1f164 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f17c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f17e:	480b      	ldr	r0, [pc, #44]	; (1f1ac <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1f180:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f184:	f7ff fd60 	bl	1ec48 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f188:	4b09      	ldr	r3, [pc, #36]	; (1f1b0 <release_handler+0x6c>)
   1f18a:	4298      	cmp	r0, r3
   1f18c:	d100      	bne.n	1f190 <release_handler+0x4c>
}
   1f18e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f190:	4908      	ldr	r1, [pc, #32]	; (1f1b4 <release_handler+0x70>)
   1f192:	4809      	ldr	r0, [pc, #36]	; (1f1b8 <release_handler+0x74>)
   1f194:	f44f 7399 	mov.w	r3, #306	; 0x132
   1f198:	4a08      	ldr	r2, [pc, #32]	; (1f1bc <release_handler+0x78>)
   1f19a:	f00b fa9e 	bl	2a6da <assert_print>
   1f19e:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f1a2:	4806      	ldr	r0, [pc, #24]	; (1f1bc <release_handler+0x78>)
   1f1a4:	f00b fa92 	bl	2a6cc <assert_post_action>
   1f1a8:	2000869c 	.word	0x2000869c
   1f1ac:	20008710 	.word	0x20008710
   1f1b0:	0bad0000 	.word	0x0bad0000
   1f1b4:	000335e8 	.word	0x000335e8
   1f1b8:	00032679 	.word	0x00032679
   1f1bc:	00037580 	.word	0x00037580

0001f1c0 <pin_handler_trigger_uninit>:
{
   1f1c0:	b538      	push	{r3, r4, r5, lr}
   1f1c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f1c4:	f7ff ff80 	bl	1f0c8 <pin_in_use_by_te>
   1f1c8:	4c0b      	ldr	r4, [pc, #44]	; (1f1f8 <pin_handler_trigger_uninit+0x38>)
   1f1ca:	f102 0508 	add.w	r5, r2, #8
   1f1ce:	b160      	cbz	r0, 1f1ea <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f1d0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f1d2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f1d6:	0b5b      	lsrs	r3, r3, #13
   1f1d8:	009b      	lsls	r3, r3, #2
   1f1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f1de:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f1e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   1f1e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   1f1ea:	4610      	mov	r0, r2
   1f1ec:	f7ff ffaa 	bl	1f144 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f1f0:	2300      	movs	r3, #0
   1f1f2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f1f6:	bd38      	pop	{r3, r4, r5, pc}
   1f1f8:	2000869c 	.word	0x2000869c

0001f1fc <nrf_gpio_pin_port_decode>:
{
   1f1fc:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f1fe:	6802      	ldr	r2, [r0, #0]
{
   1f200:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f202:	4610      	mov	r0, r2
   1f204:	f00f fc64 	bl	2ead0 <nrf_gpio_pin_present_check>
   1f208:	b958      	cbnz	r0, 1f222 <nrf_gpio_pin_port_decode+0x26>
   1f20a:	4910      	ldr	r1, [pc, #64]	; (1f24c <nrf_gpio_pin_port_decode+0x50>)
   1f20c:	f240 2347 	movw	r3, #583	; 0x247
   1f210:	4a0f      	ldr	r2, [pc, #60]	; (1f250 <nrf_gpio_pin_port_decode+0x54>)
   1f212:	4810      	ldr	r0, [pc, #64]	; (1f254 <nrf_gpio_pin_port_decode+0x58>)
   1f214:	f00b fa61 	bl	2a6da <assert_print>
   1f218:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f21c:	480c      	ldr	r0, [pc, #48]	; (1f250 <nrf_gpio_pin_port_decode+0x54>)
   1f21e:	f00b fa55 	bl	2a6cc <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1f222:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f226:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f228:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f22a:	d00b      	beq.n	1f244 <nrf_gpio_pin_port_decode+0x48>
   1f22c:	2a01      	cmp	r2, #1
   1f22e:	d00b      	beq.n	1f248 <nrf_gpio_pin_port_decode+0x4c>
            NRFX_ASSERT(0);
   1f230:	4909      	ldr	r1, [pc, #36]	; (1f258 <nrf_gpio_pin_port_decode+0x5c>)
   1f232:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1f236:	4a06      	ldr	r2, [pc, #24]	; (1f250 <nrf_gpio_pin_port_decode+0x54>)
   1f238:	4806      	ldr	r0, [pc, #24]	; (1f254 <nrf_gpio_pin_port_decode+0x58>)
   1f23a:	f00b fa4e 	bl	2a6da <assert_print>
   1f23e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f242:	e7eb      	b.n	1f21c <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1f244:	4805      	ldr	r0, [pc, #20]	; (1f25c <nrf_gpio_pin_port_decode+0x60>)
}
   1f246:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f248:	4805      	ldr	r0, [pc, #20]	; (1f260 <nrf_gpio_pin_port_decode+0x64>)
   1f24a:	e7fc      	b.n	1f246 <nrf_gpio_pin_port_decode+0x4a>
   1f24c:	00036c60 	.word	0x00036c60
   1f250:	00036c2d 	.word	0x00036c2d
   1f254:	00032679 	.word	0x00032679
   1f258:	00037b56 	.word	0x00037b56
   1f25c:	40842500 	.word	0x40842500
   1f260:	40842800 	.word	0x40842800

0001f264 <nrfx_gpiote_input_configure>:
{
   1f264:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f266:	4604      	mov	r4, r0
   1f268:	4617      	mov	r7, r2
   1f26a:	461d      	mov	r5, r3
   1f26c:	b085      	sub	sp, #20
    if (p_input_config)
   1f26e:	b1d9      	cbz	r1, 1f2a8 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f270:	f00f fc3f 	bl	2eaf2 <pin_is_task_output>
   1f274:	bb00      	cbnz	r0, 1f2b8 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f276:	460b      	mov	r3, r1
   1f278:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f27c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f280:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f284:	f10d 020f 	add.w	r2, sp, #15
   1f288:	f10d 010e 	add.w	r1, sp, #14
   1f28c:	4620      	mov	r0, r4
   1f28e:	f00f fc3b 	bl	2eb08 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f292:	4a44      	ldr	r2, [pc, #272]	; (1f3a4 <nrfx_gpiote_input_configure+0x140>)
   1f294:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f298:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f29c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f2a0:	f043 0301 	orr.w	r3, r3, #1
   1f2a4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f2a8:	b36f      	cbz	r7, 1f306 <nrfx_gpiote_input_configure+0xa2>
        if (pin_is_output(pin))
   1f2aa:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f2ac:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f2ae:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f2b0:	f7ff ff20 	bl	1f0f4 <pin_is_output>
   1f2b4:	b110      	cbz	r0, 1f2bc <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f2b6:	b1da      	cbz	r2, 1f2f0 <nrfx_gpiote_input_configure+0x8c>
            return NRFX_ERROR_INVALID_PARAM;
   1f2b8:	483b      	ldr	r0, [pc, #236]	; (1f3a8 <nrfx_gpiote_input_configure+0x144>)
   1f2ba:	e026      	b.n	1f30a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f2bc:	4839      	ldr	r0, [pc, #228]	; (1f3a4 <nrfx_gpiote_input_configure+0x140>)
   1f2be:	f104 0c08 	add.w	ip, r4, #8
   1f2c2:	f830 101c 	ldrh.w	r1, [r0, ip, lsl #1]
   1f2c6:	f021 0120 	bic.w	r1, r1, #32
   1f2ca:	04c9      	lsls	r1, r1, #19
   1f2cc:	0cc9      	lsrs	r1, r1, #19
   1f2ce:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
            if (use_evt)
   1f2d2:	b16a      	cbz	r2, 1f2f0 <nrfx_gpiote_input_configure+0x8c>
                if (!edge)
   1f2d4:	2e03      	cmp	r6, #3
   1f2d6:	d8ef      	bhi.n	1f2b8 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f2d8:	687b      	ldr	r3, [r7, #4]
   1f2da:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f2dc:	00ba      	lsls	r2, r7, #2
   1f2de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f2e2:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   1f2e6:	b996      	cbnz	r6, 1f30e <nrfx_gpiote_input_configure+0xaa>
    p_reg->CONFIG[idx] = 0;
   1f2e8:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   1f2ec:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2f0:	4a2c      	ldr	r2, [pc, #176]	; (1f3a4 <nrfx_gpiote_input_configure+0x140>)
   1f2f2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f2f6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f2fa:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f2fe:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f302:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f306:	bb15      	cbnz	r5, 1f34e <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
   1f308:	4828      	ldr	r0, [pc, #160]	; (1f3ac <nrfx_gpiote_input_configure+0x148>)
}
   1f30a:	b005      	add	sp, #20
   1f30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f30e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f312:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f316:	f023 0303 	bic.w	r3, r3, #3
   1f31a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f31e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1f322:	f041 0120 	orr.w	r1, r1, #32
   1f326:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
   1f32a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1f32e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f332:	0223      	lsls	r3, r4, #8
   1f334:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f338:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
   1f33c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1f340:	ea43 030e 	orr.w	r3, r3, lr
   1f344:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   1f348:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
   1f34c:	e7d0      	b.n	1f2f0 <nrfx_gpiote_input_configure+0x8c>
    release_handler(pin);
   1f34e:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f350:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f354:	f7ff fef6 	bl	1f144 <release_handler>
    if (!handler)
   1f358:	2e00      	cmp	r6, #0
   1f35a:	d0d5      	beq.n	1f308 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f35c:	4d11      	ldr	r5, [pc, #68]	; (1f3a4 <nrfx_gpiote_input_configure+0x140>)
   1f35e:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f362:	4296      	cmp	r6, r2
   1f364:	d101      	bne.n	1f36a <nrfx_gpiote_input_configure+0x106>
   1f366:	429f      	cmp	r7, r3
   1f368:	d019      	beq.n	1f39e <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f36a:	4811      	ldr	r0, [pc, #68]	; (1f3b0 <nrfx_gpiote_input_configure+0x14c>)
   1f36c:	f10d 010f 	add.w	r1, sp, #15
   1f370:	f7ff fc4e 	bl	1ec10 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f374:	4b0d      	ldr	r3, [pc, #52]	; (1f3ac <nrfx_gpiote_input_configure+0x148>)
   1f376:	4298      	cmp	r0, r3
   1f378:	d1c7      	bne.n	1f30a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1f37a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   1f37e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f382:	f104 0008 	add.w	r0, r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f386:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f388:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   1f38c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f390:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f398:	f825 3010 	strh.w	r3, [r5, r0, lsl #1]
    return NRFX_SUCCESS;
   1f39c:	e7b4      	b.n	1f308 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f39e:	2200      	movs	r2, #0
   1f3a0:	e7ed      	b.n	1f37e <nrfx_gpiote_input_configure+0x11a>
   1f3a2:	bf00      	nop
   1f3a4:	2000869c 	.word	0x2000869c
   1f3a8:	0bad0004 	.word	0x0bad0004
   1f3ac:	0bad0000 	.word	0x0bad0000
   1f3b0:	20008710 	.word	0x20008710

0001f3b4 <nrfx_gpiote_output_configure>:
{
   1f3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3b6:	4604      	mov	r4, r0
   1f3b8:	4615      	mov	r5, r2
   1f3ba:	b085      	sub	sp, #20
    if (p_config)
   1f3bc:	b321      	cbz	r1, 1f408 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f3be:	f7ff fe99 	bl	1f0f4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f3c2:	b920      	cbnz	r0, 1f3ce <nrfx_gpiote_output_configure+0x1a>
   1f3c4:	4620      	mov	r0, r4
   1f3c6:	f7ff fe7f 	bl	1f0c8 <pin_in_use_by_te>
   1f3ca:	2800      	cmp	r0, #0
   1f3cc:	d161      	bne.n	1f492 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f3ce:	4620      	mov	r0, r4
   1f3d0:	f7ff fe84 	bl	1f0dc <pin_has_trigger>
   1f3d4:	b110      	cbz	r0, 1f3dc <nrfx_gpiote_output_configure+0x28>
   1f3d6:	784b      	ldrb	r3, [r1, #1]
   1f3d8:	2b01      	cmp	r3, #1
   1f3da:	d05a      	beq.n	1f492 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f3dc:	2301      	movs	r3, #1
   1f3de:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f3e2:	2300      	movs	r3, #0
   1f3e4:	1c4a      	adds	r2, r1, #1
   1f3e6:	e9cd 1300 	strd	r1, r3, [sp]
   1f3ea:	4620      	mov	r0, r4
   1f3ec:	1c8b      	adds	r3, r1, #2
   1f3ee:	f10d 010f 	add.w	r1, sp, #15
   1f3f2:	f00f fb89 	bl	2eb08 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f3f6:	4a28      	ldr	r2, [pc, #160]	; (1f498 <nrfx_gpiote_output_configure+0xe4>)
   1f3f8:	f104 0108 	add.w	r1, r4, #8
   1f3fc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f400:	f043 0303 	orr.w	r3, r3, #3
   1f404:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f408:	b915      	cbnz	r5, 1f410 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f40a:	4824      	ldr	r0, [pc, #144]	; (1f49c <nrfx_gpiote_output_configure+0xe8>)
}
   1f40c:	b005      	add	sp, #20
   1f40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f410:	4620      	mov	r0, r4
   1f412:	f7ff fe6f 	bl	1f0f4 <pin_is_output>
        if (pin_is_input(pin))
   1f416:	2800      	cmp	r0, #0
   1f418:	d03b      	beq.n	1f492 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   1f41a:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1f41e:	2300      	movs	r3, #0
   1f420:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f422:	4e1d      	ldr	r6, [pc, #116]	; (1f498 <nrfx_gpiote_output_configure+0xe4>)
   1f424:	f104 0708 	add.w	r7, r4, #8
   1f428:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f42c:	0089      	lsls	r1, r1, #2
   1f42e:	f020 0020 	bic.w	r0, r0, #32
   1f432:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f436:	04c0      	lsls	r0, r0, #19
   1f438:	f501 313c 	add.w	r1, r1, #192512	; 0x2f000
   1f43c:	0cc0      	lsrs	r0, r0, #19
   1f43e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f442:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f446:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f44a:	786a      	ldrb	r2, [r5, #1]
   1f44c:	2a00      	cmp	r2, #0
   1f44e:	d0dc      	beq.n	1f40a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f450:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1f454:	78ad      	ldrb	r5, [r5, #2]
   1f456:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1f45a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f45e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f462:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1f466:	0223      	lsls	r3, r4, #8
   1f468:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f46c:	0412      	lsls	r2, r2, #16
   1f46e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f472:	ea43 030e 	orr.w	r3, r3, lr
   1f476:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f478:	052a      	lsls	r2, r5, #20
   1f47a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f47e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f482:	4313      	orrs	r3, r2
   1f484:	f040 0020 	orr.w	r0, r0, #32
   1f488:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f48c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1f490:	e7bb      	b.n	1f40a <nrfx_gpiote_output_configure+0x56>
{
   1f492:	4803      	ldr	r0, [pc, #12]	; (1f4a0 <nrfx_gpiote_output_configure+0xec>)
   1f494:	e7ba      	b.n	1f40c <nrfx_gpiote_output_configure+0x58>
   1f496:	bf00      	nop
   1f498:	2000869c 	.word	0x2000869c
   1f49c:	0bad0000 	.word	0x0bad0000
   1f4a0:	0bad0004 	.word	0x0bad0004

0001f4a4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f4a4:	4b01      	ldr	r3, [pc, #4]	; (1f4ac <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f4a6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f4aa:	4770      	bx	lr
   1f4ac:	2000869c 	.word	0x2000869c

0001f4b0 <nrfx_gpiote_channel_get>:
{
   1f4b0:	4602      	mov	r2, r0
   1f4b2:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_channel);
   1f4b4:	b959      	cbnz	r1, 1f4ce <nrfx_gpiote_channel_get+0x1e>
   1f4b6:	490c      	ldr	r1, [pc, #48]	; (1f4e8 <nrfx_gpiote_channel_get+0x38>)
   1f4b8:	480c      	ldr	r0, [pc, #48]	; (1f4ec <nrfx_gpiote_channel_get+0x3c>)
   1f4ba:	f240 2335 	movw	r3, #565	; 0x235
   1f4be:	4a0c      	ldr	r2, [pc, #48]	; (1f4f0 <nrfx_gpiote_channel_get+0x40>)
   1f4c0:	f00b f90b 	bl	2a6da <assert_print>
   1f4c4:	f240 2135 	movw	r1, #565	; 0x235
   1f4c8:	4809      	ldr	r0, [pc, #36]	; (1f4f0 <nrfx_gpiote_channel_get+0x40>)
   1f4ca:	f00b f8ff 	bl	2a6cc <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f4ce:	f7ff fdfb 	bl	1f0c8 <pin_in_use_by_te>
   1f4d2:	b138      	cbz	r0, 1f4e4 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f4d4:	4b07      	ldr	r3, [pc, #28]	; (1f4f4 <nrfx_gpiote_channel_get+0x44>)
   1f4d6:	3208      	adds	r2, #8
   1f4d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   1f4dc:	4806      	ldr	r0, [pc, #24]	; (1f4f8 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f4de:	0b5b      	lsrs	r3, r3, #13
   1f4e0:	700b      	strb	r3, [r1, #0]
}
   1f4e2:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f4e4:	4805      	ldr	r0, [pc, #20]	; (1f4fc <nrfx_gpiote_channel_get+0x4c>)
   1f4e6:	e7fc      	b.n	1f4e2 <nrfx_gpiote_channel_get+0x32>
   1f4e8:	000375be 	.word	0x000375be
   1f4ec:	00032679 	.word	0x00032679
   1f4f0:	00037580 	.word	0x00037580
   1f4f4:	2000869c 	.word	0x2000869c
   1f4f8:	0bad0000 	.word	0x0bad0000
   1f4fc:	0bad0004 	.word	0x0bad0004

0001f500 <nrfx_gpiote_init>:
{
   1f500:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f502:	4c0f      	ldr	r4, [pc, #60]	; (1f540 <nrfx_gpiote_init+0x40>)
   1f504:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f508:	b9bd      	cbnz	r5, 1f53a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f50a:	2260      	movs	r2, #96	; 0x60
   1f50c:	4629      	mov	r1, r5
   1f50e:	f104 0010 	add.w	r0, r4, #16
   1f512:	f011 f876 	bl	30602 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1f516:	202f      	movs	r0, #47	; 0x2f
   1f518:	f7f1 fa90 	bl	10a3c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f51c:	4b09      	ldr	r3, [pc, #36]	; (1f544 <nrfx_gpiote_init+0x44>)
    return err_code;
   1f51e:	480a      	ldr	r0, [pc, #40]	; (1f548 <nrfx_gpiote_init+0x48>)
   1f520:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1f524:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1f528:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1f52c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f530:	2301      	movs	r3, #1
   1f532:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f536:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f538:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1f53a:	4804      	ldr	r0, [pc, #16]	; (1f54c <nrfx_gpiote_init+0x4c>)
   1f53c:	e7fc      	b.n	1f538 <nrfx_gpiote_init+0x38>
   1f53e:	bf00      	nop
   1f540:	2000869c 	.word	0x2000869c
   1f544:	4002f000 	.word	0x4002f000
   1f548:	0bad0000 	.word	0x0bad0000
   1f54c:	0bad0005 	.word	0x0bad0005

0001f550 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f550:	4b03      	ldr	r3, [pc, #12]	; (1f560 <nrfx_gpiote_is_init+0x10>)
   1f552:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1f556:	3800      	subs	r0, #0
   1f558:	bf18      	it	ne
   1f55a:	2001      	movne	r0, #1
   1f55c:	4770      	bx	lr
   1f55e:	bf00      	nop
   1f560:	2000869c 	.word	0x2000869c

0001f564 <nrfx_gpiote_channel_free>:
{
   1f564:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f566:	4801      	ldr	r0, [pc, #4]	; (1f56c <nrfx_gpiote_channel_free+0x8>)
   1f568:	f7ff bb6e 	b.w	1ec48 <nrfx_flag32_free>
   1f56c:	2000870c 	.word	0x2000870c

0001f570 <nrfx_gpiote_channel_alloc>:
{
   1f570:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f572:	4801      	ldr	r0, [pc, #4]	; (1f578 <nrfx_gpiote_channel_alloc+0x8>)
   1f574:	f7ff bb4c 	b.w	1ec10 <nrfx_flag32_alloc>
   1f578:	2000870c 	.word	0x2000870c

0001f57c <nrfx_gpiote_trigger_enable>:
{
   1f57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f57e:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1f580:	f7ff fdac 	bl	1f0dc <pin_has_trigger>
   1f584:	b958      	cbnz	r0, 1f59e <nrfx_gpiote_trigger_enable+0x22>
   1f586:	492b      	ldr	r1, [pc, #172]	; (1f634 <nrfx_gpiote_trigger_enable+0xb8>)
   1f588:	f240 33df 	movw	r3, #991	; 0x3df
   1f58c:	4a2a      	ldr	r2, [pc, #168]	; (1f638 <nrfx_gpiote_trigger_enable+0xbc>)
   1f58e:	482b      	ldr	r0, [pc, #172]	; (1f63c <nrfx_gpiote_trigger_enable+0xc0>)
   1f590:	f00b f8a3 	bl	2a6da <assert_print>
   1f594:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1f598:	4827      	ldr	r0, [pc, #156]	; (1f638 <nrfx_gpiote_trigger_enable+0xbc>)
   1f59a:	f00b f897 	bl	2a6cc <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f59e:	4620      	mov	r0, r4
   1f5a0:	f7ff fd92 	bl	1f0c8 <pin_in_use_by_te>
   1f5a4:	4a26      	ldr	r2, [pc, #152]	; (1f640 <nrfx_gpiote_trigger_enable+0xc4>)
   1f5a6:	f104 0508 	add.w	r5, r4, #8
   1f5aa:	b1e0      	cbz	r0, 1f5e6 <nrfx_gpiote_trigger_enable+0x6a>
    return !pin_is_output(pin);
   1f5ac:	4620      	mov	r0, r4
   1f5ae:	f7ff fda1 	bl	1f0f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f5b2:	b9c0      	cbnz	r0, 1f5e6 <nrfx_gpiote_trigger_enable+0x6a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f5b4:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    return ((uint32_t)p_reg + event);
   1f5b8:	4c22      	ldr	r4, [pc, #136]	; (1f644 <nrfx_gpiote_trigger_enable+0xc8>)
   1f5ba:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f5bc:	0093      	lsls	r3, r2, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f5be:	50e0      	str	r0, [r4, r3]
   1f5c0:	58e0      	ldr	r0, [r4, r3]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f5c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f5c6:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f5ca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1f5ce:	f040 0001 	orr.w	r0, r0, #1
   1f5d2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1f5d6:	b121      	cbz	r1, 1f5e2 <nrfx_gpiote_trigger_enable+0x66>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f5d8:	2301      	movs	r3, #1
   1f5da:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1f5dc:	4a1a      	ldr	r2, [pc, #104]	; (1f648 <nrfx_gpiote_trigger_enable+0xcc>)
   1f5de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f5e2:	b003      	add	sp, #12
   1f5e4:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1f5e6:	b949      	cbnz	r1, 1f5fc <nrfx_gpiote_trigger_enable+0x80>
   1f5e8:	4918      	ldr	r1, [pc, #96]	; (1f64c <nrfx_gpiote_trigger_enable+0xd0>)
   1f5ea:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1f5ee:	4a12      	ldr	r2, [pc, #72]	; (1f638 <nrfx_gpiote_trigger_enable+0xbc>)
   1f5f0:	4812      	ldr	r0, [pc, #72]	; (1f63c <nrfx_gpiote_trigger_enable+0xc0>)
   1f5f2:	f00b f872 	bl	2a6da <assert_print>
   1f5f6:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1f5fa:	e7cd      	b.n	1f598 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f5fc:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1f600:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f604:	2b04      	cmp	r3, #4
   1f606:	d011      	beq.n	1f62c <nrfx_gpiote_trigger_enable+0xb0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f608:	2b05      	cmp	r3, #5
   1f60a:	d011      	beq.n	1f630 <nrfx_gpiote_trigger_enable+0xb4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f60c:	a801      	add	r0, sp, #4
   1f60e:	9401      	str	r4, [sp, #4]
   1f610:	f7ff fdf4 	bl	1f1fc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f614:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f616:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f618:	40d9      	lsrs	r1, r3
   1f61a:	f001 0101 	and.w	r1, r1, #1
   1f61e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f620:	4620      	mov	r0, r4
}
   1f622:	b003      	add	sp, #12
   1f624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1f628:	f00f babb 	b.w	2eba2 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f62c:	2103      	movs	r1, #3
   1f62e:	e7f7      	b.n	1f620 <nrfx_gpiote_trigger_enable+0xa4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f630:	2102      	movs	r1, #2
   1f632:	e7f5      	b.n	1f620 <nrfx_gpiote_trigger_enable+0xa4>
   1f634:	000375c8 	.word	0x000375c8
   1f638:	00037580 	.word	0x00037580
   1f63c:	00032679 	.word	0x00032679
   1f640:	2000869c 	.word	0x2000869c
   1f644:	4002f100 	.word	0x4002f100
   1f648:	4002f000 	.word	0x4002f000
   1f64c:	000375dd 	.word	0x000375dd

0001f650 <nrfx_gpiote_trigger_disable>:
{
   1f650:	b508      	push	{r3, lr}
   1f652:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f654:	f7ff fd38 	bl	1f0c8 <pin_in_use_by_te>
   1f658:	b1c8      	cbz	r0, 1f68e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1f65a:	4610      	mov	r0, r2
   1f65c:	f7ff fd4a 	bl	1f0f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f660:	b9a8      	cbnz	r0, 1f68e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f662:	4b0e      	ldr	r3, [pc, #56]	; (1f69c <nrfx_gpiote_trigger_disable+0x4c>)
   1f664:	3208      	adds	r2, #8
   1f666:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f66a:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f66c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f66e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1f670:	490b      	ldr	r1, [pc, #44]	; (1f6a0 <nrfx_gpiote_trigger_disable+0x50>)
   1f672:	009b      	lsls	r3, r3, #2
   1f674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f678:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f67c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   1f680:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f684:	f022 0203 	bic.w	r2, r2, #3
   1f688:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f68c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f68e:	2100      	movs	r1, #0
}
   1f690:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f694:	4610      	mov	r0, r2
   1f696:	f00f ba84 	b.w	2eba2 <nrf_gpio_cfg_sense_set>
   1f69a:	bf00      	nop
   1f69c:	2000869c 	.word	0x2000869c
   1f6a0:	4002f000 	.word	0x4002f000

0001f6a4 <nrfx_gpiote_pin_uninit>:
{
   1f6a4:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f6a6:	4b10      	ldr	r3, [pc, #64]	; (1f6e8 <nrfx_gpiote_pin_uninit+0x44>)
   1f6a8:	f100 0208 	add.w	r2, r0, #8
   1f6ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   1f6b0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1f6b2:	07db      	lsls	r3, r3, #31
   1f6b4:	d516      	bpl.n	1f6e4 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
   1f6b6:	f7ff ffcb 	bl	1f650 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1f6ba:	4620      	mov	r0, r4
   1f6bc:	f7ff fd80 	bl	1f1c0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f6c0:	a801      	add	r0, sp, #4
   1f6c2:	9401      	str	r4, [sp, #4]
   1f6c4:	f7ff fd9a 	bl	1f1fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1f6c8:	9b01      	ldr	r3, [sp, #4]
   1f6ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f6ce:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1f6d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1f6d6:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f6da:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
   1f6de:	4803      	ldr	r0, [pc, #12]	; (1f6ec <nrfx_gpiote_pin_uninit+0x48>)
}
   1f6e0:	b002      	add	sp, #8
   1f6e2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f6e4:	4802      	ldr	r0, [pc, #8]	; (1f6f0 <nrfx_gpiote_pin_uninit+0x4c>)
   1f6e6:	e7fb      	b.n	1f6e0 <nrfx_gpiote_pin_uninit+0x3c>
   1f6e8:	2000869c 	.word	0x2000869c
   1f6ec:	0bad0000 	.word	0x0bad0000
   1f6f0:	0bad0004 	.word	0x0bad0004

0001f6f4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   1f6f8:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1f6fa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f6fc:	4634      	mov	r4, r6
{
   1f6fe:	4b64      	ldr	r3, [pc, #400]	; (1f890 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   1f700:	4864      	ldr	r0, [pc, #400]	; (1f894 <nrfx_gpiote_irq_handler+0x1a0>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f702:	4965      	ldr	r1, [pc, #404]	; (1f898 <nrfx_gpiote_irq_handler+0x1a4>)
{
   1f704:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f706:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1f708:	b135      	cbz	r5, 1f718 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1f70a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1f70e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f710:	bf1e      	ittt	ne
   1f712:	601c      	strne	r4, [r3, #0]
   1f714:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1f716:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f718:	3304      	adds	r3, #4
   1f71a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1f71c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1f720:	d1f1      	bne.n	1f706 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f722:	f8df a170 	ldr.w	sl, [pc, #368]	; 1f894 <nrfx_gpiote_irq_handler+0x1a0>
   1f726:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	f000 8093 	beq.w	1f856 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
   1f730:	f8df 8168 	ldr.w	r8, [pc, #360]	; 1f89c <nrfx_gpiote_irq_handler+0x1a8>
   1f734:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f738:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f73a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f73e:	4b58      	ldr	r3, [pc, #352]	; (1f8a0 <nrfx_gpiote_irq_handler+0x1ac>)
   1f740:	6a1a      	ldr	r2, [r3, #32]
   1f742:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f744:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f746:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
   1f74a:	f10d 0b10 	add.w	fp, sp, #16
   1f74e:	ea4f 1349 	mov.w	r3, r9, lsl #5
   1f752:	9300      	str	r3, [sp, #0]
   1f754:	e04a      	b.n	1f7ec <nrfx_gpiote_irq_handler+0xf8>
                uint32_t pin = NRF_CTZ(latch[i]);
   1f756:	fa94 f4a4 	rbit	r4, r4
   1f75a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1f75e:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f760:	4a50      	ldr	r2, [pc, #320]	; (1f8a4 <nrfx_gpiote_irq_handler+0x1b0>)
                pin += 32 * i;
   1f762:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f764:	f104 0308 	add.w	r3, r4, #8
   1f768:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f76c:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f76e:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   1f770:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1f774:	fa03 f101 	lsl.w	r1, r3, r1
   1f778:	f81b 3000 	ldrb.w	r3, [fp, r0]
   1f77c:	08ba      	lsrs	r2, r7, #2
   1f77e:	ea23 0301 	bic.w	r3, r3, r1
   1f782:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f786:	a803      	add	r0, sp, #12
   1f788:	9201      	str	r2, [sp, #4]
   1f78a:	9403      	str	r4, [sp, #12]
   1f78c:	f7ff fd36 	bl	1f1fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f790:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1f792:	9a01      	ldr	r2, [sp, #4]
   1f794:	3380      	adds	r3, #128	; 0x80
   1f796:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f79a:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1f79e:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1f7a0:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f7a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1f7a6:	d52b      	bpl.n	1f800 <nrfx_gpiote_irq_handler+0x10c>
        call_handler(pin, trigger);
   1f7a8:	4639      	mov	r1, r7
   1f7aa:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f7ac:	b2dd      	uxtb	r5, r3
   1f7ae:	f7ff fcab 	bl	1f108 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7b2:	a803      	add	r0, sp, #12
   1f7b4:	9403      	str	r4, [sp, #12]
   1f7b6:	f7ff fd21 	bl	1f1fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f7ba:	9b03      	ldr	r3, [sp, #12]
   1f7bc:	3380      	adds	r3, #128	; 0x80
   1f7be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f7c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f7c6:	429d      	cmp	r5, r3
   1f7c8:	d107      	bne.n	1f7da <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1f7ca:	2100      	movs	r1, #0
   1f7cc:	4620      	mov	r0, r4
   1f7ce:	f00f f9e8 	bl	2eba2 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1f7d2:	4629      	mov	r1, r5
   1f7d4:	4620      	mov	r0, r4
   1f7d6:	f00f f9e4 	bl	2eba2 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f7da:	a803      	add	r0, sp, #12
   1f7dc:	9403      	str	r4, [sp, #12]
   1f7de:	f7ff fd0d 	bl	1f1fc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f7e2:	2201      	movs	r2, #1
   1f7e4:	9b03      	ldr	r3, [sp, #12]
   1f7e6:	fa02 f303 	lsl.w	r3, r2, r3
   1f7ea:	6203      	str	r3, [r0, #32]
            while (latch[i])
   1f7ec:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
   1f7f0:	2c00      	cmp	r4, #0
   1f7f2:	d1b0      	bne.n	1f756 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1f7f4:	f1b9 0f00 	cmp.w	r9, #0
   1f7f8:	d11d      	bne.n	1f836 <nrfx_gpiote_irq_handler+0x142>
   1f7fa:	f04f 0901 	mov.w	r9, #1
   1f7fe:	e7a6      	b.n	1f74e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f800:	2b02      	cmp	r3, #2
   1f802:	d10c      	bne.n	1f81e <nrfx_gpiote_irq_handler+0x12a>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f804:	2103      	movs	r1, #3
   1f806:	4620      	mov	r0, r4
   1f808:	f00f f9cb 	bl	2eba2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f80c:	f005 0305 	and.w	r3, r5, #5
   1f810:	2b01      	cmp	r3, #1
   1f812:	d1e2      	bne.n	1f7da <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   1f814:	4639      	mov	r1, r7
   1f816:	4620      	mov	r0, r4
   1f818:	f7ff fc76 	bl	1f108 <call_handler>
   1f81c:	e7dd      	b.n	1f7da <nrfx_gpiote_irq_handler+0xe6>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1f81e:	2102      	movs	r1, #2
   1f820:	4620      	mov	r0, r4
   1f822:	9301      	str	r3, [sp, #4]
   1f824:	f00f f9bd 	bl	2eba2 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f828:	2d03      	cmp	r5, #3
   1f82a:	d0f3      	beq.n	1f814 <nrfx_gpiote_irq_handler+0x120>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f82c:	9b01      	ldr	r3, [sp, #4]
   1f82e:	2b03      	cmp	r3, #3
   1f830:	d1d3      	bne.n	1f7da <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f832:	2d02      	cmp	r5, #2
   1f834:	e7ed      	b.n	1f812 <nrfx_gpiote_irq_handler+0x11e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f836:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
   1f83a:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1f83e:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1f842:	4917      	ldr	r1, [pc, #92]	; (1f8a0 <nrfx_gpiote_irq_handler+0x1ac>)
   1f844:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1f846:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
   1f84a:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
   1f84c:	4313      	orrs	r3, r2
   1f84e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1f850:	620a      	str	r2, [r1, #32]
   1f852:	f47f af78 	bne.w	1f746 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   1f856:	2401      	movs	r4, #1
    while (mask)
   1f858:	b916      	cbnz	r6, 1f860 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1f85a:	b007      	add	sp, #28
   1f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1f860:	fa96 f3a6 	rbit	r3, r6
   1f864:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f868:	fa04 f203 	lsl.w	r2, r4, r3
   1f86c:	009b      	lsls	r3, r3, #2
   1f86e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f872:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f876:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f87a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f87e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1f882:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   1f886:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f88a:	f7ff fc3d 	bl	1f108 <call_handler>
   1f88e:	e7e3      	b.n	1f858 <nrfx_gpiote_irq_handler+0x164>
   1f890:	4002f100 	.word	0x4002f100
   1f894:	4002f000 	.word	0x4002f000
   1f898:	4002f120 	.word	0x4002f120
   1f89c:	40842500 	.word	0x40842500
   1f8a0:	40842800 	.word	0x40842800
   1f8a4:	2000869c 	.word	0x2000869c

0001f8a8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1f8a8:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f8aa:	4c08      	ldr	r4, [pc, #32]	; (1f8cc <nrfx_ipc_init+0x24>)
{
   1f8ac:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f8ae:	7923      	ldrb	r3, [r4, #4]
{
   1f8b0:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f8b2:	b943      	cbnz	r3, 1f8c6 <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1f8b4:	202a      	movs	r0, #42	; 0x2a
   1f8b6:	f7f1 f8c1 	bl	10a3c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f8ba:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1f8bc:	4804      	ldr	r0, [pc, #16]	; (1f8d0 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f8be:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   1f8c0:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   1f8c2:	60a5      	str	r5, [r4, #8]
}
   1f8c4:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1f8c6:	4803      	ldr	r0, [pc, #12]	; (1f8d4 <nrfx_ipc_init+0x2c>)
   1f8c8:	e7fc      	b.n	1f8c4 <nrfx_ipc_init+0x1c>
   1f8ca:	bf00      	nop
   1f8cc:	20021960 	.word	0x20021960
   1f8d0:	0bad0000 	.word	0x0bad0000
   1f8d4:	0bad000c 	.word	0x0bad000c

0001f8d8 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1f8d8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   1f8da:	b948      	cbnz	r0, 1f8f0 <nrfx_ipc_config_load+0x18>
   1f8dc:	4919      	ldr	r1, [pc, #100]	; (1f944 <nrfx_ipc_config_load+0x6c>)
   1f8de:	2345      	movs	r3, #69	; 0x45
   1f8e0:	4a19      	ldr	r2, [pc, #100]	; (1f948 <nrfx_ipc_config_load+0x70>)
   1f8e2:	481a      	ldr	r0, [pc, #104]	; (1f94c <nrfx_ipc_config_load+0x74>)
   1f8e4:	f00a fef9 	bl	2a6da <assert_print>
   1f8e8:	2145      	movs	r1, #69	; 0x45
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f8ea:	4817      	ldr	r0, [pc, #92]	; (1f948 <nrfx_ipc_config_load+0x70>)
   1f8ec:	f00a feee 	bl	2a6cc <assert_post_action>
   1f8f0:	4b17      	ldr	r3, [pc, #92]	; (1f950 <nrfx_ipc_config_load+0x78>)
   1f8f2:	791b      	ldrb	r3, [r3, #4]
   1f8f4:	2b01      	cmp	r3, #1
   1f8f6:	d007      	beq.n	1f908 <nrfx_ipc_config_load+0x30>
   1f8f8:	4916      	ldr	r1, [pc, #88]	; (1f954 <nrfx_ipc_config_load+0x7c>)
   1f8fa:	2346      	movs	r3, #70	; 0x46
   1f8fc:	4a12      	ldr	r2, [pc, #72]	; (1f948 <nrfx_ipc_config_load+0x70>)
   1f8fe:	4813      	ldr	r0, [pc, #76]	; (1f94c <nrfx_ipc_config_load+0x74>)
   1f900:	f00a feeb 	bl	2a6da <assert_print>
   1f904:	2146      	movs	r1, #70	; 0x46
   1f906:	e7f0      	b.n	1f8ea <nrfx_ipc_config_load+0x12>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f908:	2300      	movs	r3, #0
    p_reg->SEND_CNF[index] = channels_mask;
   1f90a:	4a13      	ldr	r2, [pc, #76]	; (1f958 <nrfx_ipc_config_load+0x80>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1f90c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f910:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f914:	3301      	adds	r3, #1
   1f916:	2b10      	cmp	r3, #16
   1f918:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   1f91c:	d1f6      	bne.n	1f90c <nrfx_ipc_config_load+0x34>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f91e:	2300      	movs	r3, #0
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1f920:	4a0d      	ldr	r2, [pc, #52]	; (1f958 <nrfx_ipc_config_load+0x80>)
   1f922:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   1f926:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1f92a:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1f92e:	3301      	adds	r3, #1
   1f930:	2b10      	cmp	r3, #16
   1f932:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   1f936:	d1f6      	bne.n	1f926 <nrfx_ipc_config_load+0x4e>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1f938:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
   1f93c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f940:	bd38      	pop	{r3, r4, r5, pc}
   1f942:	bf00      	nop
   1f944:	0003762f 	.word	0x0003762f
   1f948:	000375f4 	.word	0x000375f4
   1f94c:	00032679 	.word	0x00032679
   1f950:	20021960 	.word	0x20021960
   1f954:	00037638 	.word	0x00037638
   1f958:	4002a000 	.word	0x4002a000

0001f95c <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   1f95c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f95e:	4b09      	ldr	r3, [pc, #36]	; (1f984 <nrfx_ipc_receive_event_enable+0x28>)
   1f960:	791b      	ldrb	r3, [r3, #4]
   1f962:	2b01      	cmp	r3, #1
   1f964:	d009      	beq.n	1f97a <nrfx_ipc_receive_event_enable+0x1e>
   1f966:	4908      	ldr	r1, [pc, #32]	; (1f988 <nrfx_ipc_receive_event_enable+0x2c>)
   1f968:	4808      	ldr	r0, [pc, #32]	; (1f98c <nrfx_ipc_receive_event_enable+0x30>)
   1f96a:	236b      	movs	r3, #107	; 0x6b
   1f96c:	4a08      	ldr	r2, [pc, #32]	; (1f990 <nrfx_ipc_receive_event_enable+0x34>)
   1f96e:	f00a feb4 	bl	2a6da <assert_print>
   1f972:	216b      	movs	r1, #107	; 0x6b
   1f974:	4806      	ldr	r0, [pc, #24]	; (1f990 <nrfx_ipc_receive_event_enable+0x34>)
   1f976:	f00a fea9 	bl	2a6cc <assert_post_action>
   1f97a:	4a06      	ldr	r2, [pc, #24]	; (1f994 <nrfx_ipc_receive_event_enable+0x38>)
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1f97c:	4083      	lsls	r3, r0
   1f97e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f982:	bd08      	pop	{r3, pc}
   1f984:	20021960 	.word	0x20021960
   1f988:	00037638 	.word	0x00037638
   1f98c:	00032679 	.word	0x00032679
   1f990:	000375f4 	.word	0x000375f4
   1f994:	4002a000 	.word	0x4002a000

0001f998 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1f998:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1f99a:	4b09      	ldr	r3, [pc, #36]	; (1f9c0 <nrfx_ipc_receive_event_disable+0x28>)
   1f99c:	791b      	ldrb	r3, [r3, #4]
   1f99e:	2b01      	cmp	r3, #1
   1f9a0:	d009      	beq.n	1f9b6 <nrfx_ipc_receive_event_disable+0x1e>
   1f9a2:	4908      	ldr	r1, [pc, #32]	; (1f9c4 <nrfx_ipc_receive_event_disable+0x2c>)
   1f9a4:	4808      	ldr	r0, [pc, #32]	; (1f9c8 <nrfx_ipc_receive_event_disable+0x30>)
   1f9a6:	2371      	movs	r3, #113	; 0x71
   1f9a8:	4a08      	ldr	r2, [pc, #32]	; (1f9cc <nrfx_ipc_receive_event_disable+0x34>)
   1f9aa:	f00a fe96 	bl	2a6da <assert_print>
   1f9ae:	2171      	movs	r1, #113	; 0x71
   1f9b0:	4806      	ldr	r0, [pc, #24]	; (1f9cc <nrfx_ipc_receive_event_disable+0x34>)
   1f9b2:	f00a fe8b 	bl	2a6cc <assert_post_action>
    p_reg->INTENCLR = mask;
   1f9b6:	4a06      	ldr	r2, [pc, #24]	; (1f9d0 <nrfx_ipc_receive_event_disable+0x38>)
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1f9b8:	4083      	lsls	r3, r0
   1f9ba:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   1f9be:	bd08      	pop	{r3, pc}
   1f9c0:	20021960 	.word	0x20021960
   1f9c4:	00037638 	.word	0x00037638
   1f9c8:	00032679 	.word	0x00032679
   1f9cc:	000375f4 	.word	0x000375f4
   1f9d0:	4002a000 	.word	0x4002a000

0001f9d4 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1f9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   1f9d6:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9d8:	2700      	movs	r7, #0
    return p_reg->INTPEND;
   1f9da:	4b12      	ldr	r3, [pc, #72]	; (1fa24 <nrfx_ipc_irq_handler+0x50>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
   1f9dc:	4d12      	ldr	r5, [pc, #72]	; (1fa28 <nrfx_ipc_irq_handler+0x54>)
   1f9de:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
   1f9e2:	b904      	cbnz	r4, 1f9e6 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   1f9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
   1f9e6:	fa94 f0a4 	rbit	r0, r4
   1f9ea:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
   1f9ee:	fa06 f300 	lsl.w	r3, r6, r0
    NRFX_ASSERT(index < IPC_CH_NUM);
   1f9f2:	280f      	cmp	r0, #15
   1f9f4:	ea24 0403 	bic.w	r4, r4, r3
   1f9f8:	dd0b      	ble.n	1fa12 <nrfx_ipc_irq_handler+0x3e>
   1f9fa:	490c      	ldr	r1, [pc, #48]	; (1fa2c <nrfx_ipc_irq_handler+0x58>)
   1f9fc:	480c      	ldr	r0, [pc, #48]	; (1fa30 <nrfx_ipc_irq_handler+0x5c>)
   1f9fe:	f240 13e7 	movw	r3, #487	; 0x1e7
   1fa02:	4a0c      	ldr	r2, [pc, #48]	; (1fa34 <nrfx_ipc_irq_handler+0x60>)
   1fa04:	f00a fe69 	bl	2a6da <assert_print>
   1fa08:	f240 11e7 	movw	r1, #487	; 0x1e7
   1fa0c:	4809      	ldr	r0, [pc, #36]	; (1fa34 <nrfx_ipc_irq_handler+0x60>)
   1fa0e:	f00a fe5d 	bl	2a6cc <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fa12:	4b09      	ldr	r3, [pc, #36]	; (1fa38 <nrfx_ipc_irq_handler+0x64>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1fa14:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fa16:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
   1fa18:	682b      	ldr	r3, [r5, #0]
   1fa1a:	2b00      	cmp	r3, #0
   1fa1c:	d0e1      	beq.n	1f9e2 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   1fa1e:	68a9      	ldr	r1, [r5, #8]
   1fa20:	4798      	blx	r3
   1fa22:	e7de      	b.n	1f9e2 <nrfx_ipc_irq_handler+0xe>
   1fa24:	4002a000 	.word	0x4002a000
   1fa28:	20021960 	.word	0x20021960
   1fa2c:	0003353e 	.word	0x0003353e
   1fa30:	00032679 	.word	0x00032679
   1fa34:	0003350c 	.word	0x0003350c
   1fa38:	4002a100 	.word	0x4002a100

0001fa3c <nvmc_word_write>:
   1fa3c:	4a04      	ldr	r2, [pc, #16]	; (1fa50 <nvmc_word_write+0x14>)
   1fa3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa42:	07db      	lsls	r3, r3, #31
   1fa44:	d5fb      	bpl.n	1fa3e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1fa46:	6001      	str	r1, [r0, #0]
   1fa48:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1fa4c:	4770      	bx	lr
   1fa4e:	bf00      	nop
   1fa50:	40039000 	.word	0x40039000

0001fa54 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa54:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1fa58:	b508      	push	{r3, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fa5a:	d30b      	bcc.n	1fa74 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   1fa5c:	4910      	ldr	r1, [pc, #64]	; (1faa0 <nrfx_nvmc_page_erase+0x4c>)
   1fa5e:	4811      	ldr	r0, [pc, #68]	; (1faa4 <nrfx_nvmc_page_erase+0x50>)
   1fa60:	f44f 7383 	mov.w	r3, #262	; 0x106
   1fa64:	4a10      	ldr	r2, [pc, #64]	; (1faa8 <nrfx_nvmc_page_erase+0x54>)
   1fa66:	f00a fe38 	bl	2a6da <assert_print>
   1fa6a:	f44f 7183 	mov.w	r1, #262	; 0x106
   1fa6e:	480e      	ldr	r0, [pc, #56]	; (1faa8 <nrfx_nvmc_page_erase+0x54>)
   1fa70:	f00a fe2c 	bl	2a6cc <assert_post_action>
    return !(addr % flash_page_size_get());
   1fa74:	f3c0 030b 	ubfx	r3, r0, #0, #12

    if (!is_page_aligned_check(addr))
   1fa78:	b97b      	cbnz	r3, 1fa9a <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   1fa7a:	2202      	movs	r2, #2
   1fa7c:	4b0b      	ldr	r3, [pc, #44]	; (1faac <nrfx_nvmc_page_erase+0x58>)
   1fa7e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   1fa82:	f04f 32ff 	mov.w	r2, #4294967295
   1fa86:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1fa88:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fa8c:	07d2      	lsls	r2, r2, #31
   1fa8e:	d5fb      	bpl.n	1fa88 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   1fa90:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1fa92:	4807      	ldr	r0, [pc, #28]	; (1fab0 <nrfx_nvmc_page_erase+0x5c>)
   1fa94:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   1fa98:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1fa9a:	4806      	ldr	r0, [pc, #24]	; (1fab4 <nrfx_nvmc_page_erase+0x60>)
   1fa9c:	e7fc      	b.n	1fa98 <nrfx_nvmc_page_erase+0x44>
   1fa9e:	bf00      	nop
   1faa0:	000376c1 	.word	0x000376c1
   1faa4:	00032679 	.word	0x00032679
   1faa8:	00037665 	.word	0x00037665
   1faac:	40039000 	.word	0x40039000
   1fab0:	0bad0000 	.word	0x0bad0000
   1fab4:	0bad000a 	.word	0x0bad000a

0001fab8 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fab8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1fabc:	b538      	push	{r3, r4, r5, lr}
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   1fabe:	d30b      	bcc.n	1fad8 <nrfx_nvmc_word_write+0x20>
    NRFX_ASSERT(is_valid_address(addr, true));
   1fac0:	4910      	ldr	r1, [pc, #64]	; (1fb04 <nrfx_nvmc_word_write+0x4c>)
   1fac2:	f44f 73ca 	mov.w	r3, #404	; 0x194
   1fac6:	4a10      	ldr	r2, [pc, #64]	; (1fb08 <nrfx_nvmc_word_write+0x50>)
   1fac8:	4810      	ldr	r0, [pc, #64]	; (1fb0c <nrfx_nvmc_word_write+0x54>)
   1faca:	f00a fe06 	bl	2a6da <assert_print>
   1face:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1fad2:	480d      	ldr	r0, [pc, #52]	; (1fb08 <nrfx_nvmc_word_write+0x50>)
   1fad4:	f00a fdfa 	bl	2a6cc <assert_post_action>
   1fad8:	f010 0403 	ands.w	r4, r0, #3
   1fadc:	d009      	beq.n	1faf2 <nrfx_nvmc_word_write+0x3a>
   1fade:	490c      	ldr	r1, [pc, #48]	; (1fb10 <nrfx_nvmc_word_write+0x58>)
   1fae0:	f240 1395 	movw	r3, #405	; 0x195
   1fae4:	4a08      	ldr	r2, [pc, #32]	; (1fb08 <nrfx_nvmc_word_write+0x50>)
   1fae6:	4809      	ldr	r0, [pc, #36]	; (1fb0c <nrfx_nvmc_word_write+0x54>)
   1fae8:	f00a fdf7 	bl	2a6da <assert_print>
   1faec:	f240 1195 	movw	r1, #405	; 0x195
   1faf0:	e7ef      	b.n	1fad2 <nrfx_nvmc_word_write+0x1a>
   1faf2:	2301      	movs	r3, #1
   1faf4:	4d07      	ldr	r5, [pc, #28]	; (1fb14 <nrfx_nvmc_word_write+0x5c>)
   1faf6:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1fafa:	f7ff ff9f 	bl	1fa3c <nvmc_word_write>
   1fafe:	f8c5 4584 	str.w	r4, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   1fb02:	bd38      	pop	{r3, r4, r5, pc}
   1fb04:	000376db 	.word	0x000376db
   1fb08:	00037665 	.word	0x00037665
   1fb0c:	00032679 	.word	0x00032679
   1fb10:	000376f5 	.word	0x000376f5
   1fb14:	40039000 	.word	0x40039000

0001fb18 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   1fb18:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1fb1a:	4d43      	ldr	r5, [pc, #268]	; (1fc28 <qspi_xfer+0x110>)
   1fb1c:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   1fb20:	b94c      	cbnz	r4, 1fb36 <qspi_xfer+0x1e>
   1fb22:	4942      	ldr	r1, [pc, #264]	; (1fc2c <qspi_xfer+0x114>)
   1fb24:	2368      	movs	r3, #104	; 0x68
   1fb26:	4a42      	ldr	r2, [pc, #264]	; (1fc30 <qspi_xfer+0x118>)
   1fb28:	4842      	ldr	r0, [pc, #264]	; (1fc34 <qspi_xfer+0x11c>)
   1fb2a:	f00a fdd6 	bl	2a6da <assert_print>
   1fb2e:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   1fb30:	483f      	ldr	r0, [pc, #252]	; (1fc30 <qspi_xfer+0x118>)
   1fb32:	f00a fdcb 	bl	2a6cc <assert_post_action>
   1fb36:	b938      	cbnz	r0, 1fb48 <qspi_xfer+0x30>
   1fb38:	493f      	ldr	r1, [pc, #252]	; (1fc38 <qspi_xfer+0x120>)
   1fb3a:	2369      	movs	r3, #105	; 0x69
   1fb3c:	4a3c      	ldr	r2, [pc, #240]	; (1fc30 <qspi_xfer+0x118>)
   1fb3e:	483d      	ldr	r0, [pc, #244]	; (1fc34 <qspi_xfer+0x11c>)
   1fb40:	f00a fdcb 	bl	2a6da <assert_print>
   1fb44:	2169      	movs	r1, #105	; 0x69
   1fb46:	e7f3      	b.n	1fb30 <qspi_xfer+0x18>
   1fb48:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   1fb4c:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   1fb50:	d165      	bne.n	1fc1e <qspi_xfer+0x106>
   1fb52:	0786      	lsls	r6, r0, #30
   1fb54:	d163      	bne.n	1fc1e <qspi_xfer+0x106>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   1fb56:	2c01      	cmp	r4, #1
   1fb58:	d001      	beq.n	1fb5e <qspi_xfer+0x46>
   1fb5a:	429c      	cmp	r4, r3
   1fb5c:	d161      	bne.n	1fc22 <qspi_xfer+0x10a>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   1fb5e:	682c      	ldr	r4, [r5, #0]
   1fb60:	bb04      	cbnz	r4, 1fba4 <qspi_xfer+0x8c>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fb62:	2b02      	cmp	r3, #2
   1fb64:	4b35      	ldr	r3, [pc, #212]	; (1fc3c <qspi_xfer+0x124>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   1fb66:	bf0b      	itete	eq
   1fb68:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   1fb6c:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fb70:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fb74:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1fb78:	bf0b      	itete	eq
   1fb7a:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1fb7e:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   1fb82:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   1fb84:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fb86:	2100      	movs	r1, #0
   1fb88:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fb8c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1fb90:	2201      	movs	r2, #1
   1fb92:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   1fb96:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fb98:	4a28      	ldr	r2, [pc, #160]	; (1fc3c <qspi_xfer+0x124>)
   1fb9a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   1fb9e:	2b00      	cmp	r3, #0
   1fba0:	d0fb      	beq.n	1fb9a <qspi_xfer+0x82>
   1fba2:	e00d      	b.n	1fbc0 <qspi_xfer+0xa8>
        if (m_cb.p_buffer_primary)
   1fba4:	68ae      	ldr	r6, [r5, #8]
   1fba6:	4c25      	ldr	r4, [pc, #148]	; (1fc3c <qspi_xfer+0x124>)
   1fba8:	b166      	cbz	r6, 1fbc4 <qspi_xfer+0xac>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fbaa:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   1fbac:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   1fbae:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   1fbb0:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fbb2:	d12d      	bne.n	1fc10 <qspi_xfer+0xf8>
    p_reg->WRITE.DST = dest_addr;
   1fbb4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fbb8:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   1fbbc:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   1fbc0:	481f      	ldr	r0, [pc, #124]	; (1fc40 <qspi_xfer+0x128>)
}
   1fbc2:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   1fbc4:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   1fbc6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
   1fbca:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   1fbcc:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   1fbce:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
   1fbd0:	bf0c      	ite	eq
   1fbd2:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   1fbd6:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbda:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   1fbde:	bf0b      	itete	eq
   1fbe0:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fbe4:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   1fbe8:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   1fbec:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
   1fbf0:	bf08      	it	eq
   1fbf2:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fbf4:	4911      	ldr	r1, [pc, #68]	; (1fc3c <qspi_xfer+0x124>)
        task = NRF_QSPI_TASK_READSTART;
   1fbf6:	bf18      	it	ne
   1fbf8:	2304      	movne	r3, #4
   1fbfa:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   1fbfe:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fc00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fc04:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
   1fc08:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fc0c:	601a      	str	r2, [r3, #0]
}
   1fc0e:	e7d7      	b.n	1fbc0 <qspi_xfer+0xa8>
    p_reg->READ.SRC = src_addr;
   1fc10:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   1fc14:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   1fc18:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   1fc1c:	e7d0      	b.n	1fbc0 <qspi_xfer+0xa8>
        return NRFX_ERROR_INVALID_ADDR;
   1fc1e:	4809      	ldr	r0, [pc, #36]	; (1fc44 <qspi_xfer+0x12c>)
   1fc20:	e7cf      	b.n	1fbc2 <qspi_xfer+0xaa>
        return NRFX_ERROR_BUSY;
   1fc22:	4809      	ldr	r0, [pc, #36]	; (1fc48 <qspi_xfer+0x130>)
   1fc24:	e7cd      	b.n	1fbc2 <qspi_xfer+0xaa>
   1fc26:	bf00      	nop
   1fc28:	2002196c 	.word	0x2002196c
   1fc2c:	0003775a 	.word	0x0003775a
   1fc30:	0003771e 	.word	0x0003771e
   1fc34:	00032679 	.word	0x00032679
   1fc38:	00037786 	.word	0x00037786
   1fc3c:	4002b000 	.word	0x4002b000
   1fc40:	0bad0000 	.word	0x0bad0000
   1fc44:	0bad000a 	.word	0x0bad000a
   1fc48:	0bad000b 	.word	0x0bad000b

0001fc4c <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   1fc4c:	b538      	push	{r3, r4, r5, lr}
   1fc4e:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fc50:	4d06      	ldr	r5, [pc, #24]	; (1fc6c <qspi_ready_wait+0x20>)
   1fc52:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   1fc56:	b933      	cbnz	r3, 1fc66 <qspi_ready_wait+0x1a>
   1fc58:	200a      	movs	r0, #10
   1fc5a:	f00e ff37 	bl	2eacc <nrfx_busy_wait>
   1fc5e:	3c01      	subs	r4, #1
   1fc60:	d1f7      	bne.n	1fc52 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   1fc62:	4803      	ldr	r0, [pc, #12]	; (1fc70 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   1fc64:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   1fc66:	4803      	ldr	r0, [pc, #12]	; (1fc74 <qspi_ready_wait+0x28>)
   1fc68:	e7fc      	b.n	1fc64 <qspi_ready_wait+0x18>
   1fc6a:	bf00      	nop
   1fc6c:	4002b000 	.word	0x4002b000
   1fc70:	0bad0007 	.word	0x0bad0007
   1fc74:	0bad0000 	.word	0x0bad0000

0001fc78 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   1fc78:	4b08      	ldr	r3, [pc, #32]	; (1fc9c <qspi_event_xfer_handle.constprop.0+0x24>)
   1fc7a:	689a      	ldr	r2, [r3, #8]
   1fc7c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   1fc7e:	691a      	ldr	r2, [r3, #16]
   1fc80:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   1fc82:	699a      	ldr	r2, [r3, #24]
   1fc84:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   1fc86:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   1fc88:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   1fc8a:	b132      	cbz	r2, 1fc9a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   1fc8c:	695a      	ldr	r2, [r3, #20]
   1fc8e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   1fc90:	69da      	ldr	r2, [r3, #28]
   1fc92:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   1fc94:	2200      	movs	r2, #0
   1fc96:	60da      	str	r2, [r3, #12]
   1fc98:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   1fc9a:	4770      	bx	lr
   1fc9c:	2002196c 	.word	0x2002196c

0001fca0 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   1fca0:	b508      	push	{r3, lr}
    switch (port)
   1fca2:	0943      	lsrs	r3, r0, #5
   1fca4:	d00d      	beq.n	1fcc2 <nrf_gpio_cfg.constprop.0+0x22>
   1fca6:	2b01      	cmp	r3, #1
   1fca8:	d01e      	beq.n	1fce8 <nrf_gpio_cfg.constprop.0+0x48>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcaa:	4914      	ldr	r1, [pc, #80]	; (1fcfc <nrf_gpio_cfg.constprop.0+0x5c>)
   1fcac:	4814      	ldr	r0, [pc, #80]	; (1fd00 <nrf_gpio_cfg.constprop.0+0x60>)
   1fcae:	f240 2347 	movw	r3, #583	; 0x247
   1fcb2:	4a14      	ldr	r2, [pc, #80]	; (1fd04 <nrf_gpio_cfg.constprop.0+0x64>)
   1fcb4:	f00a fd11 	bl	2a6da <assert_print>
   1fcb8:	f240 2147 	movw	r1, #583	; 0x247
   1fcbc:	4811      	ldr	r0, [pc, #68]	; (1fd04 <nrf_gpio_cfg.constprop.0+0x64>)
   1fcbe:	f00a fd05 	bl	2a6cc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1fcc2:	f04f 33ff 	mov.w	r3, #4294967295
   1fcc6:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcc8:	07da      	lsls	r2, r3, #31
   1fcca:	d5ee      	bpl.n	1fcaa <nrf_gpio_cfg.constprop.0+0xa>
        case 0: return NRF_P0;
   1fccc:	4a0e      	ldr	r2, [pc, #56]	; (1fd08 <nrf_gpio_cfg.constprop.0+0x68>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   1fcce:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   1fcd2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1fcd6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
   1fcda:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1fcde:	f041 0102 	orr.w	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1fce2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
}
   1fce6:	bd08      	pop	{r3, pc}
    return (mask & (1UL << pin_number)) ? true : false;
   1fce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   1fcec:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fcf0:	40c3      	lsrs	r3, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fcf2:	07db      	lsls	r3, r3, #31
   1fcf4:	d5d9      	bpl.n	1fcaa <nrf_gpio_cfg.constprop.0+0xa>
        case 1: return NRF_P1;
   1fcf6:	4a05      	ldr	r2, [pc, #20]	; (1fd0c <nrf_gpio_cfg.constprop.0+0x6c>)
   1fcf8:	e7e9      	b.n	1fcce <nrf_gpio_cfg.constprop.0+0x2e>
   1fcfa:	bf00      	nop
   1fcfc:	00036c60 	.word	0x00036c60
   1fd00:	00032679 	.word	0x00032679
   1fd04:	00036c2d 	.word	0x00036c2d
   1fd08:	40842500 	.word	0x40842500
   1fd0c:	40842800 	.word	0x40842800

0001fd10 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   1fd10:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   1fd12:	4b0e      	ldr	r3, [pc, #56]	; (1fd4c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   1fd14:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   1fd16:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   1fd1a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   1fd1e:	2807      	cmp	r0, #7
   1fd20:	d813      	bhi.n	1fd4a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   1fd22:	e8df f000 	tbb	[pc, r0]
   1fd26:	0f11      	.short	0x0f11
   1fd28:	080a0b0d 	.word	0x080a0b0d
   1fd2c:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   1fd2e:	0e10      	lsrs	r0, r2, #24
   1fd30:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   1fd32:	0c10      	lsrs	r0, r2, #16
   1fd34:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   1fd36:	0a10      	lsrs	r0, r2, #8
   1fd38:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   1fd3a:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   1fd3c:	0e1a      	lsrs	r2, r3, #24
   1fd3e:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   1fd40:	0c1a      	lsrs	r2, r3, #16
   1fd42:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   1fd44:	0a1a      	lsrs	r2, r3, #8
   1fd46:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   1fd48:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   1fd4a:	bd10      	pop	{r4, pc}
   1fd4c:	4002b000 	.word	0x4002b000

0001fd50 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   1fd50:	3802      	subs	r0, #2
   1fd52:	2807      	cmp	r0, #7
   1fd54:	d81f      	bhi.n	1fd96 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   1fd56:	e8df f000 	tbb	[pc, r0]
   1fd5a:	2729      	.short	0x2729
   1fd5c:	21231125 	.word	0x21231125
   1fd60:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   1fd62:	79cb      	ldrb	r3, [r1, #7]
   1fd64:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   1fd66:	798a      	ldrb	r2, [r1, #6]
   1fd68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   1fd6c:	794a      	ldrb	r2, [r1, #5]
   1fd6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   1fd72:	790a      	ldrb	r2, [r1, #4]
   1fd74:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   1fd76:	4a0e      	ldr	r2, [pc, #56]	; (1fdb0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1fd78:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   1fd7c:	78cb      	ldrb	r3, [r1, #3]
   1fd7e:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   1fd80:	788a      	ldrb	r2, [r1, #2]
   1fd82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   1fd86:	784a      	ldrb	r2, [r1, #1]
   1fd88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   1fd8c:	780a      	ldrb	r2, [r1, #0]
   1fd8e:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   1fd90:	4a07      	ldr	r2, [pc, #28]	; (1fdb0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   1fd92:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   1fd96:	4770      	bx	lr
    switch (length)
   1fd98:	2300      	movs	r3, #0
   1fd9a:	e7e4      	b.n	1fd66 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   1fd9c:	2300      	movs	r3, #0
   1fd9e:	e7e5      	b.n	1fd6c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   1fda0:	2300      	movs	r3, #0
   1fda2:	e7e6      	b.n	1fd72 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   1fda4:	2300      	movs	r3, #0
   1fda6:	e7eb      	b.n	1fd80 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   1fda8:	2300      	movs	r3, #0
   1fdaa:	e7ec      	b.n	1fd86 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   1fdac:	2300      	movs	r3, #0
   1fdae:	e7ed      	b.n	1fd8c <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   1fdb0:	4002b000 	.word	0x4002b000

0001fdb4 <nrfx_qspi_init>:
{
   1fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdb6:	460d      	mov	r5, r1
   1fdb8:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   1fdba:	4604      	mov	r4, r0
   1fdbc:	b958      	cbnz	r0, 1fdd6 <nrfx_qspi_init+0x22>
   1fdbe:	496e      	ldr	r1, [pc, #440]	; (1ff78 <nrfx_qspi_init+0x1c4>)
   1fdc0:	486e      	ldr	r0, [pc, #440]	; (1ff7c <nrfx_qspi_init+0x1c8>)
   1fdc2:	f44f 7388 	mov.w	r3, #272	; 0x110
   1fdc6:	4a6e      	ldr	r2, [pc, #440]	; (1ff80 <nrfx_qspi_init+0x1cc>)
   1fdc8:	f00a fc87 	bl	2a6da <assert_print>
   1fdcc:	f44f 7188 	mov.w	r1, #272	; 0x110
   1fdd0:	486b      	ldr	r0, [pc, #428]	; (1ff80 <nrfx_qspi_init+0x1cc>)
   1fdd2:	f00a fc7b 	bl	2a6cc <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   1fdd6:	4f6b      	ldr	r7, [pc, #428]	; (1ff84 <nrfx_qspi_init+0x1d0>)
   1fdd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1fddc:	2b00      	cmp	r3, #0
   1fdde:	f040 80c6 	bne.w	1ff6e <nrfx_qspi_init+0x1ba>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   1fde2:	7cc2      	ldrb	r2, [r0, #19]
   1fde4:	b112      	cbz	r2, 1fdec <nrfx_qspi_init+0x38>
   1fde6:	7d03      	ldrb	r3, [r0, #20]
   1fde8:	2b00      	cmp	r3, #0
   1fdea:	d170      	bne.n	1fece <nrfx_qspi_init+0x11a>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fdec:	7920      	ldrb	r0, [r4, #4]
   1fdee:	28ff      	cmp	r0, #255	; 0xff
   1fdf0:	f000 80bf 	beq.w	1ff72 <nrfx_qspi_init+0x1be>
   1fdf4:	7963      	ldrb	r3, [r4, #5]
   1fdf6:	2bff      	cmp	r3, #255	; 0xff
   1fdf8:	f000 80bb 	beq.w	1ff72 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fdfc:	79a3      	ldrb	r3, [r4, #6]
   1fdfe:	2bff      	cmp	r3, #255	; 0xff
   1fe00:	f000 80b7 	beq.w	1ff72 <nrfx_qspi_init+0x1be>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   1fe04:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   1fe06:	29ff      	cmp	r1, #255	; 0xff
   1fe08:	f000 80b3 	beq.w	1ff72 <nrfx_qspi_init+0x1be>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1fe0c:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1fe0e:	f8df c178 	ldr.w	ip, [pc, #376]	; 1ff88 <nrfx_qspi_init+0x1d4>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   1fe12:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   1fe16:	4563      	cmp	r3, ip
   1fe18:	f040 80ab 	bne.w	1ff72 <nrfx_qspi_init+0x1be>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   1fe1c:	290e      	cmp	r1, #14
   1fe1e:	f040 80a8 	bne.w	1ff72 <nrfx_qspi_init+0x1be>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe22:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   1fe24:	2bff      	cmp	r3, #255	; 0xff
   1fe26:	d002      	beq.n	1fe2e <nrfx_qspi_init+0x7a>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe28:	2b0f      	cmp	r3, #15
   1fe2a:	f040 80a2 	bne.w	1ff72 <nrfx_qspi_init+0x1be>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe2e:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   1fe30:	2bff      	cmp	r3, #255	; 0xff
   1fe32:	d002      	beq.n	1fe3a <nrfx_qspi_init+0x86>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   1fe34:	2b10      	cmp	r3, #16
   1fe36:	f040 809c 	bne.w	1ff72 <nrfx_qspi_init+0x1be>
    if (!p_config->skip_gpio_cfg)
   1fe3a:	b9d2      	cbnz	r2, 1fe72 <nrfx_qspi_init+0xbe>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   1fe3c:	2103      	movs	r1, #3
   1fe3e:	f7ff ff2f 	bl	1fca0 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   1fe42:	2103      	movs	r1, #3
   1fe44:	7960      	ldrb	r0, [r4, #5]
   1fe46:	f7ff ff2b 	bl	1fca0 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   1fe4a:	2103      	movs	r1, #3
   1fe4c:	79a0      	ldrb	r0, [r4, #6]
   1fe4e:	f7ff ff27 	bl	1fca0 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   1fe52:	79e0      	ldrb	r0, [r4, #7]
   1fe54:	2103      	movs	r1, #3
   1fe56:	f7ff ff23 	bl	1fca0 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fe5a:	7a20      	ldrb	r0, [r4, #8]
   1fe5c:	28ff      	cmp	r0, #255	; 0xff
   1fe5e:	d002      	beq.n	1fe66 <nrfx_qspi_init+0xb2>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   1fe60:	2103      	movs	r1, #3
   1fe62:	f7ff ff1d 	bl	1fca0 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   1fe66:	7a60      	ldrb	r0, [r4, #9]
   1fe68:	28ff      	cmp	r0, #255	; 0xff
   1fe6a:	d002      	beq.n	1fe72 <nrfx_qspi_init+0xbe>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   1fe6c:	2103      	movs	r1, #3
   1fe6e:	f7ff ff17 	bl	1fca0 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   1fe72:	7d23      	ldrb	r3, [r4, #20]
   1fe74:	bb5b      	cbnz	r3, 1fece <nrfx_qspi_init+0x11a>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   1fe76:	7923      	ldrb	r3, [r4, #4]
   1fe78:	2bff      	cmp	r3, #255	; 0xff
   1fe7a:	bf14      	ite	ne
   1fe7c:	461a      	movne	r2, r3
   1fe7e:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe82:	4b42      	ldr	r3, [pc, #264]	; (1ff8c <nrfx_qspi_init+0x1d8>)
   1fe84:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   1fe88:	7962      	ldrb	r2, [r4, #5]
   1fe8a:	2aff      	cmp	r2, #255	; 0xff
   1fe8c:	bf08      	it	eq
   1fe8e:	f04f 32ff 	moveq.w	r2, #4294967295
   1fe92:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   1fe96:	79a2      	ldrb	r2, [r4, #6]
   1fe98:	2aff      	cmp	r2, #255	; 0xff
   1fe9a:	bf08      	it	eq
   1fe9c:	f04f 32ff 	moveq.w	r2, #4294967295
   1fea0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   1fea4:	79e2      	ldrb	r2, [r4, #7]
   1fea6:	2aff      	cmp	r2, #255	; 0xff
   1fea8:	bf08      	it	eq
   1feaa:	f04f 32ff 	moveq.w	r2, #4294967295
   1feae:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   1feb2:	7a22      	ldrb	r2, [r4, #8]
   1feb4:	2aff      	cmp	r2, #255	; 0xff
   1feb6:	bf08      	it	eq
   1feb8:	f04f 32ff 	moveq.w	r2, #4294967295
   1febc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   1fec0:	7a62      	ldrb	r2, [r4, #9]
   1fec2:	2aff      	cmp	r2, #255	; 0xff
   1fec4:	bf08      	it	eq
   1fec6:	f04f 32ff 	moveq.w	r2, #4294967295
   1feca:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   1fece:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
   1fed0:	4a2e      	ldr	r2, [pc, #184]	; (1ff8c <nrfx_qspi_init+0x1d8>)
   1fed2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1fed6:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   1fed8:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   1feda:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   1fedc:	019b      	lsls	r3, r3, #6
   1fede:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   1fee2:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   1fee4:	7b61      	ldrb	r1, [r4, #13]
   1fee6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   1feea:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   1feee:	7c61      	ldrb	r1, [r4, #17]
    return p_reg->IFCONFIG0;
   1fef0:	f8d2 3544 	ldr.w	r3, [r2, #1348]	; 0x544
   1fef4:	bbb1      	cbnz	r1, 1ff64 <nrfx_qspi_init+0x1b0>
        regval |= ((1 << 16) | (1 << 17));
   1fef6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   1fefa:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   1fefe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   1ff02:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ff06:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   1ff0a:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   1ff0c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ff10:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   1ff14:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   1ff16:	7be1      	ldrb	r1, [r4, #15]
   1ff18:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   1ff1c:	7c21      	ldrb	r1, [r4, #16]
   1ff1e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   1ff22:	7c61      	ldrb	r1, [r4, #17]
   1ff24:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   1ff28:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ff2c:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
   1ff2e:	e9c7 5600 	strd	r5, r6, [r7]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   1ff32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   1ff36:	2301      	movs	r3, #1
   1ff38:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   1ff3c:	b115      	cbz	r5, 1ff44 <nrfx_qspi_init+0x190>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   1ff3e:	202b      	movs	r0, #43	; 0x2b
   1ff40:	f7f0 fd7c 	bl	10a3c <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   1ff44:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ff46:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
   1ff48:	e9c7 1102 	strd	r1, r1, [r7, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   1ff4c:	4b0f      	ldr	r3, [pc, #60]	; (1ff8c <nrfx_qspi_init+0x1d8>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   1ff4e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   1ff52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff56:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff5a:	601a      	str	r2, [r3, #0]
}
   1ff5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return qspi_ready_wait();
   1ff60:	f7ff be74 	b.w	1fc4c <qspi_ready_wait>
        regval &= ~(1 << 17);
   1ff64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   1ff68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ff6c:	e7c5      	b.n	1fefa <nrfx_qspi_init+0x146>
        return NRFX_ERROR_INVALID_STATE;
   1ff6e:	4808      	ldr	r0, [pc, #32]	; (1ff90 <nrfx_qspi_init+0x1dc>)
}
   1ff70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ff72:	4808      	ldr	r0, [pc, #32]	; (1ff94 <nrfx_qspi_init+0x1e0>)
   1ff74:	e7fc      	b.n	1ff70 <nrfx_qspi_init+0x1bc>
   1ff76:	bf00      	nop
   1ff78:	0003762f 	.word	0x0003762f
   1ff7c:	00032679 	.word	0x00032679
   1ff80:	0003771e 	.word	0x0003771e
   1ff84:	2002196c 	.word	0x2002196c
   1ff88:	000d1211 	.word	0x000d1211
   1ff8c:	4002b000 	.word	0x4002b000
   1ff90:	0bad0005 	.word	0x0bad0005
   1ff94:	0bad0004 	.word	0x0bad0004

0001ff98 <nrfx_qspi_cinstr_xfer>:
{
   1ff98:	b570      	push	{r4, r5, r6, lr}
   1ff9a:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ff9c:	4a26      	ldr	r2, [pc, #152]	; (20038 <nrfx_qspi_cinstr_xfer+0xa0>)
{
   1ff9e:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   1ffa0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1ffa4:	b95a      	cbnz	r2, 1ffbe <nrfx_qspi_cinstr_xfer+0x26>
   1ffa6:	4925      	ldr	r1, [pc, #148]	; (2003c <nrfx_qspi_cinstr_xfer+0xa4>)
   1ffa8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1ffac:	4a24      	ldr	r2, [pc, #144]	; (20040 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ffae:	4825      	ldr	r0, [pc, #148]	; (20044 <nrfx_qspi_cinstr_xfer+0xac>)
   1ffb0:	f00a fb93 	bl	2a6da <assert_print>
   1ffb4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   1ffb8:	4821      	ldr	r0, [pc, #132]	; (20040 <nrfx_qspi_cinstr_xfer+0xa8>)
   1ffba:	f00a fb87 	bl	2a6cc <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   1ffbe:	2a01      	cmp	r2, #1
   1ffc0:	d137      	bne.n	20032 <nrfx_qspi_cinstr_xfer+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffc2:	2200      	movs	r2, #0
   1ffc4:	4e20      	ldr	r6, [pc, #128]	; (20048 <nrfx_qspi_cinstr_xfer+0xb0>)
   1ffc6:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   1ffca:	b111      	cbz	r1, 1ffd2 <nrfx_qspi_cinstr_xfer+0x3a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   1ffcc:	7840      	ldrb	r0, [r0, #1]
   1ffce:	f7ff febf 	bl	1fd50 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   1ffd2:	2301      	movs	r3, #1
   1ffd4:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffd8:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ffda:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffdc:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ffde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1ffe2:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   1ffe4:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ffe6:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   1ffe8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1ffec:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   1ffee:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   1fff2:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   1fff4:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   1fff8:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   1fffc:	f7ff fe26 	bl	1fc4c <qspi_ready_wait>
   20000:	4b12      	ldr	r3, [pc, #72]	; (2004c <nrfx_qspi_cinstr_xfer+0xb4>)
   20002:	4298      	cmp	r0, r3
   20004:	d10b      	bne.n	2001e <nrfx_qspi_cinstr_xfer+0x86>
        NRFX_ASSERT(p_config->wipwait);
   20006:	792b      	ldrb	r3, [r5, #4]
   20008:	b993      	cbnz	r3, 20030 <nrfx_qspi_cinstr_xfer+0x98>
   2000a:	4911      	ldr	r1, [pc, #68]	; (20050 <nrfx_qspi_cinstr_xfer+0xb8>)
   2000c:	f240 136b 	movw	r3, #363	; 0x16b
   20010:	4a0b      	ldr	r2, [pc, #44]	; (20040 <nrfx_qspi_cinstr_xfer+0xa8>)
   20012:	480c      	ldr	r0, [pc, #48]	; (20044 <nrfx_qspi_cinstr_xfer+0xac>)
   20014:	f00a fb61 	bl	2a6da <assert_print>
   20018:	f240 116b 	movw	r1, #363	; 0x16b
   2001c:	e7cc      	b.n	1ffb8 <nrfx_qspi_cinstr_xfer+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2001e:	2300      	movs	r3, #0
   20020:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   20024:	b11c      	cbz	r4, 2002e <nrfx_qspi_cinstr_xfer+0x96>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   20026:	4621      	mov	r1, r4
   20028:	7868      	ldrb	r0, [r5, #1]
   2002a:	f7ff fe71 	bl	1fd10 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   2002e:	4809      	ldr	r0, [pc, #36]	; (20054 <nrfx_qspi_cinstr_xfer+0xbc>)
}
   20030:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   20032:	4809      	ldr	r0, [pc, #36]	; (20058 <nrfx_qspi_cinstr_xfer+0xc0>)
   20034:	e7fc      	b.n	20030 <nrfx_qspi_cinstr_xfer+0x98>
   20036:	bf00      	nop
   20038:	2002196c 	.word	0x2002196c
   2003c:	0003775a 	.word	0x0003775a
   20040:	0003771e 	.word	0x0003771e
   20044:	00032679 	.word	0x00032679
   20048:	4002b000 	.word	0x4002b000
   2004c:	0bad0007 	.word	0x0bad0007
   20050:	0003779e 	.word	0x0003779e
   20054:	0bad0000 	.word	0x0bad0000
   20058:	0bad000b 	.word	0x0bad000b

0002005c <nrfx_qspi_mem_busy_check>:
{
   2005c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
   2005e:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
   20060:	4a0c      	ldr	r2, [pc, #48]	; (20094 <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   20062:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
   20064:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   20066:	f10d 0207 	add.w	r2, sp, #7
   2006a:	4611      	mov	r1, r2
    uint8_t status_value = 0;
   2006c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   20070:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   20074:	f7ff ff90 	bl	1ff98 <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   20078:	4b07      	ldr	r3, [pc, #28]	; (20098 <nrfx_qspi_mem_busy_check+0x3c>)
   2007a:	4298      	cmp	r0, r3
   2007c:	d106      	bne.n	2008c <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   2007e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   20082:	f013 0f01 	tst.w	r3, #1
   20086:	4b05      	ldr	r3, [pc, #20]	; (2009c <nrfx_qspi_mem_busy_check+0x40>)
   20088:	bf18      	it	ne
   2008a:	4618      	movne	r0, r3
}
   2008c:	b005      	add	sp, #20
   2008e:	f85d fb04 	ldr.w	pc, [sp], #4
   20092:	bf00      	nop
   20094:	01000205 	.word	0x01000205
   20098:	0bad0000 	.word	0x0bad0000
   2009c:	0bad000b 	.word	0x0bad000b

000200a0 <nrfx_qspi_uninit>:
{
   200a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   200a4:	4e29      	ldr	r6, [pc, #164]	; (2014c <nrfx_qspi_uninit+0xac>)
   200a6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   200aa:	b95b      	cbnz	r3, 200c4 <nrfx_qspi_uninit+0x24>
   200ac:	4928      	ldr	r1, [pc, #160]	; (20150 <nrfx_qspi_uninit+0xb0>)
   200ae:	4829      	ldr	r0, [pc, #164]	; (20154 <nrfx_qspi_uninit+0xb4>)
   200b0:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   200b4:	4a28      	ldr	r2, [pc, #160]	; (20158 <nrfx_qspi_uninit+0xb8>)
   200b6:	f00a fb10 	bl	2a6da <assert_print>
   200ba:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   200be:	4826      	ldr	r0, [pc, #152]	; (20158 <nrfx_qspi_uninit+0xb8>)
   200c0:	f00a fb04 	bl	2a6cc <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   200c4:	202b      	movs	r0, #43	; 0x2b
   200c6:	f7f0 fcc7 	bl	10a58 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   200ca:	4b24      	ldr	r3, [pc, #144]	; (2015c <nrfx_qspi_uninit+0xbc>)
   200cc:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   200d0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   200d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
   200d8:	bf04      	itt	eq
   200da:	4a21      	ldreq	r2, [pc, #132]	; (20160 <nrfx_qspi_uninit+0xc0>)
   200dc:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
   200e0:	2201      	movs	r2, #1
   200e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   200e6:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   200e8:	2200      	movs	r2, #0
   200ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   200ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   200f2:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   200f6:	bb22      	cbnz	r2, 20142 <nrfx_qspi_uninit+0xa2>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   200f8:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   200fc:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
   20100:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   20102:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   20106:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   2010a:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   2010e:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
   20112:	f00e fd5e 	bl	2ebd2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   20116:	fa5f f089 	uxtb.w	r0, r9
   2011a:	f00e fd5a 	bl	2ebd2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   2011e:	fa5f f088 	uxtb.w	r0, r8
   20122:	f00e fd56 	bl	2ebd2 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   20126:	b2f8      	uxtb	r0, r7
   20128:	f00e fd53 	bl	2ebd2 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2012c:	b2e8      	uxtb	r0, r5
   2012e:	28ff      	cmp	r0, #255	; 0xff
   20130:	b2e4      	uxtb	r4, r4
   20132:	d001      	beq.n	20138 <nrfx_qspi_uninit+0x98>
        nrf_gpio_cfg_default(pins.io2_pin);
   20134:	f00e fd4d 	bl	2ebd2 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   20138:	2cff      	cmp	r4, #255	; 0xff
   2013a:	d002      	beq.n	20142 <nrfx_qspi_uninit+0xa2>
        nrf_gpio_cfg_default(pins.io3_pin);
   2013c:	4620      	mov	r0, r4
   2013e:	f00e fd48 	bl	2ebd2 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   20142:	2300      	movs	r3, #0
   20144:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   20148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2014c:	2002196c 	.word	0x2002196c
   20150:	0003775a 	.word	0x0003775a
   20154:	00032679 	.word	0x00032679
   20158:	0003771e 	.word	0x0003771e
   2015c:	4002b000 	.word	0x4002b000
   20160:	00030100 	.word	0x00030100

00020164 <nrfx_qspi_erase>:
{
   20164:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   20166:	4a1a      	ldr	r2, [pc, #104]	; (201d0 <nrfx_qspi_erase+0x6c>)
   20168:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   2016c:	b95b      	cbnz	r3, 20186 <nrfx_qspi_erase+0x22>
   2016e:	4919      	ldr	r1, [pc, #100]	; (201d4 <nrfx_qspi_erase+0x70>)
   20170:	4819      	ldr	r0, [pc, #100]	; (201d8 <nrfx_qspi_erase+0x74>)
   20172:	f44f 730a 	mov.w	r3, #552	; 0x228
   20176:	4a19      	ldr	r2, [pc, #100]	; (201dc <nrfx_qspi_erase+0x78>)
   20178:	f00a faaf 	bl	2a6da <assert_print>
   2017c:	f44f 710a 	mov.w	r1, #552	; 0x228
   20180:	4816      	ldr	r0, [pc, #88]	; (201dc <nrfx_qspi_erase+0x78>)
   20182:	f00a faa3 	bl	2a6cc <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   20186:	078c      	lsls	r4, r1, #30
   20188:	d11e      	bne.n	201c8 <nrfx_qspi_erase+0x64>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   2018a:	6814      	ldr	r4, [r2, #0]
   2018c:	b10c      	cbz	r4, 20192 <nrfx_qspi_erase+0x2e>
   2018e:	2b01      	cmp	r3, #1
   20190:	d11c      	bne.n	201cc <nrfx_qspi_erase+0x68>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   20192:	2304      	movs	r3, #4
   20194:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   20198:	4b11      	ldr	r3, [pc, #68]	; (201e0 <nrfx_qspi_erase+0x7c>)
   2019a:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2019e:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   201a0:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201a4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   201a8:	2101      	movs	r1, #1
   201aa:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   201ac:	6810      	ldr	r0, [r2, #0]
   201ae:	b940      	cbnz	r0, 201c2 <nrfx_qspi_erase+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201b0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   201b4:	2900      	cmp	r1, #0
   201b6:	d0fb      	beq.n	201b0 <nrfx_qspi_erase+0x4c>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   201b8:	2301      	movs	r3, #1
   201ba:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   201be:	4809      	ldr	r0, [pc, #36]	; (201e4 <nrfx_qspi_erase+0x80>)
}
   201c0:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   201c2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   201c6:	e7fa      	b.n	201be <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_INVALID_ADDR;
   201c8:	4807      	ldr	r0, [pc, #28]	; (201e8 <nrfx_qspi_erase+0x84>)
   201ca:	e7f9      	b.n	201c0 <nrfx_qspi_erase+0x5c>
        return NRFX_ERROR_BUSY;
   201cc:	4807      	ldr	r0, [pc, #28]	; (201ec <nrfx_qspi_erase+0x88>)
   201ce:	e7f7      	b.n	201c0 <nrfx_qspi_erase+0x5c>
   201d0:	2002196c 	.word	0x2002196c
   201d4:	0003775a 	.word	0x0003775a
   201d8:	00032679 	.word	0x00032679
   201dc:	0003771e 	.word	0x0003771e
   201e0:	4002b000 	.word	0x4002b000
   201e4:	0bad0000 	.word	0x0bad0000
   201e8:	0bad000a 	.word	0x0bad000a
   201ec:	0bad000b 	.word	0x0bad000b

000201f0 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   201f0:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   201f2:	4b17      	ldr	r3, [pc, #92]	; (20250 <nrfx_qspi_irq_handler+0x60>)
   201f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   201f8:	b1e2      	cbz	r2, 20234 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201fa:	2200      	movs	r2, #0
    switch (m_cb.state)
   201fc:	4c15      	ldr	r4, [pc, #84]	; (20254 <nrfx_qspi_irq_handler+0x64>)
   201fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20202:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   20206:	2a03      	cmp	r2, #3
   20208:	d015      	beq.n	20236 <nrfx_qspi_irq_handler+0x46>
   2020a:	2a04      	cmp	r2, #4
   2020c:	d015      	beq.n	2023a <nrfx_qspi_irq_handler+0x4a>
   2020e:	2a02      	cmp	r2, #2
   20210:	d104      	bne.n	2021c <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   20212:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   20214:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   20218:	f7ff fd2e 	bl	1fc78 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   2021c:	68a3      	ldr	r3, [r4, #8]
   2021e:	b913      	cbnz	r3, 20226 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   20220:	2301      	movs	r3, #1
   20222:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   20226:	e9d4 3100 	ldrd	r3, r1, [r4]
   2022a:	2000      	movs	r0, #0
   2022c:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2022e:	2300      	movs	r3, #0
   20230:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   20234:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   20236:	2302      	movs	r3, #2
   20238:	e7ec      	b.n	20214 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   2023a:	2203      	movs	r2, #3
   2023c:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   20240:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   20244:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   20246:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2024a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2024e:	e7e5      	b.n	2021c <nrfx_qspi_irq_handler+0x2c>
   20250:	4002b000 	.word	0x4002b000
   20254:	2002196c 	.word	0x2002196c

00020258 <nrf_gpio_pin_port_decode>:
{
   20258:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2025a:	6803      	ldr	r3, [r0, #0]
    switch (port)
   2025c:	095a      	lsrs	r2, r3, #5
   2025e:	d00d      	beq.n	2027c <nrf_gpio_pin_port_decode+0x24>
   20260:	2a01      	cmp	r2, #1
   20262:	d013      	beq.n	2028c <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20264:	490e      	ldr	r1, [pc, #56]	; (202a0 <nrf_gpio_pin_port_decode+0x48>)
   20266:	480f      	ldr	r0, [pc, #60]	; (202a4 <nrf_gpio_pin_port_decode+0x4c>)
   20268:	f240 2347 	movw	r3, #583	; 0x247
   2026c:	4a0e      	ldr	r2, [pc, #56]	; (202a8 <nrf_gpio_pin_port_decode+0x50>)
   2026e:	f00a fa34 	bl	2a6da <assert_print>
   20272:	f240 2147 	movw	r1, #583	; 0x247
   20276:	480c      	ldr	r0, [pc, #48]	; (202a8 <nrf_gpio_pin_port_decode+0x50>)
   20278:	f00a fa28 	bl	2a6cc <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   2027c:	f04f 32ff 	mov.w	r2, #4294967295
   20280:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20284:	07d9      	lsls	r1, r3, #31
   20286:	d5ed      	bpl.n	20264 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   20288:	4808      	ldr	r0, [pc, #32]	; (202ac <nrf_gpio_pin_port_decode+0x54>)
   2028a:	e008      	b.n	2029e <nrf_gpio_pin_port_decode+0x46>
    return (mask & (1UL << pin_number)) ? true : false;
   2028c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
   20290:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20294:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20296:	07d2      	lsls	r2, r2, #31
   20298:	d5e4      	bpl.n	20264 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   2029a:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   2029c:	4804      	ldr	r0, [pc, #16]	; (202b0 <nrf_gpio_pin_port_decode+0x58>)
}
   2029e:	bd08      	pop	{r3, pc}
   202a0:	00036c60 	.word	0x00036c60
   202a4:	00032679 	.word	0x00032679
   202a8:	00036c2d 	.word	0x00036c2d
   202ac:	40842500 	.word	0x40842500
   202b0:	40842800 	.word	0x40842800

000202b4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   202b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   202b8:	4680      	mov	r8, r0
    NRFX_ASSERT(p_config);
   202ba:	460c      	mov	r4, r1
   202bc:	b959      	cbnz	r1, 202d6 <nrfx_spim_init+0x22>
   202be:	498d      	ldr	r1, [pc, #564]	; (204f4 <nrfx_spim_init+0x240>)
   202c0:	488d      	ldr	r0, [pc, #564]	; (204f8 <nrfx_spim_init+0x244>)
   202c2:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   202c6:	4a8d      	ldr	r2, [pc, #564]	; (204fc <nrfx_spim_init+0x248>)
   202c8:	f00a fa07 	bl	2a6da <assert_print>
   202cc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   202d0:	488a      	ldr	r0, [pc, #552]	; (204fc <nrfx_spim_init+0x248>)
   202d2:	f00a f9fb 	bl	2a6cc <assert_post_action>
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   202d6:	7907      	ldrb	r7, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   202d8:	4d89      	ldr	r5, [pc, #548]	; (20500 <nrfx_spim_init+0x24c>)
   202da:	eb05 1147 	add.w	r1, r5, r7, lsl #5
   202de:	7f09      	ldrb	r1, [r1, #28]
   202e0:	2900      	cmp	r1, #0
   202e2:	f040 8100 	bne.w	204e6 <nrfx_spim_init+0x232>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   202e6:	2f00      	cmp	r7, #0
   202e8:	f040 80ff 	bne.w	204ea <nrfx_spim_init+0x236>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   202ec:	f8d0 9000 	ldr.w	r9, [r0]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202f0:	68a0      	ldr	r0, [r4, #8]
        ((p_config->use_hw_ss) &&
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   202f2:	7be6      	ldrb	r6, [r4, #15]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202f4:	f1b0 6f20 	cmp.w	r0, #167772160	; 0xa000000

#if NRF_SPIM_HAS_32_MHZ_FREQ && defined(NRF5340_XXAA_APPLICATION)
    // Check if dedicated SPIM pins are used, unless both GPIO configuration
    // and pin selection are to be skipped (pin numbers may be not specified
    // in such case).
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   202f8:	7ce1      	ldrb	r1, [r4, #19]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   202fa:	d027      	beq.n	2034c <nrfx_spim_init+0x98>
   202fc:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   20300:	d124      	bne.n	2034c <nrfx_spim_init+0x98>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   20302:	b119      	cbz	r1, 2030c <nrfx_spim_init+0x58>
   20304:	7d20      	ldrb	r0, [r4, #20]
   20306:	2800      	cmp	r0, #0
   20308:	f040 80d5 	bne.w	204b6 <nrfx_spim_init+0x202>
   2030c:	487d      	ldr	r0, [pc, #500]	; (20504 <nrfx_spim_init+0x250>)
   2030e:	4581      	cmp	r9, r0
   20310:	d11c      	bne.n	2034c <nrfx_spim_init+0x98>
            SPIM_MISO_DEDICATED = NRF_GPIO_PIN_MAP(0, 10),
            SPIM_CSN_DEDICATED  = NRF_GPIO_PIN_MAP(0, 11),
            SPIM_DCX_DEDICATED  = NRF_GPIO_PIN_MAP(0, 12),
        };

        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   20312:	7820      	ldrb	r0, [r4, #0]
   20314:	28ff      	cmp	r0, #255	; 0xff
   20316:	d002      	beq.n	2031e <nrfx_spim_init+0x6a>
   20318:	2808      	cmp	r0, #8
   2031a:	f040 80e8 	bne.w	204ee <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   2031e:	78e0      	ldrb	r0, [r4, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   20320:	28ff      	cmp	r0, #255	; 0xff
   20322:	d002      	beq.n	2032a <nrfx_spim_init+0x76>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   20324:	280b      	cmp	r0, #11
   20326:	f040 80e2 	bne.w	204ee <nrfx_spim_init+0x23a>
   2032a:	2eff      	cmp	r6, #255	; 0xff
   2032c:	d002      	beq.n	20334 <nrfx_spim_init+0x80>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   2032e:	2e0c      	cmp	r6, #12
   20330:	f040 80dd 	bne.w	204ee <nrfx_spim_init+0x23a>
#endif
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   20334:	7860      	ldrb	r0, [r4, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   20336:	28ff      	cmp	r0, #255	; 0xff
   20338:	d002      	beq.n	20340 <nrfx_spim_init+0x8c>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2033a:	2809      	cmp	r0, #9
   2033c:	f040 80d7 	bne.w	204ee <nrfx_spim_init+0x23a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   20340:	78a0      	ldrb	r0, [r4, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   20342:	28ff      	cmp	r0, #255	; 0xff
   20344:	d002      	beq.n	2034c <nrfx_spim_init+0x98>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   20346:	280a      	cmp	r0, #10
   20348:	f040 80d1 	bne.w	204ee <nrfx_spim_init+0x23a>
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   2034c:	e9c5 2300 	strd	r2, r3, [r5]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   20350:	7fab      	ldrb	r3, [r5, #30]
   20352:	f361 0300 	bfi	r3, r1, #0, #1
   20356:	77ab      	strb	r3, [r5, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   20358:	7922      	ldrb	r2, [r4, #4]
   2035a:	b2db      	uxtb	r3, r3
   2035c:	f362 0341 	bfi	r3, r2, #1, #1
   20360:	77ab      	strb	r3, [r5, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   20362:	7c62      	ldrb	r2, [r4, #17]
   20364:	b2db      	uxtb	r3, r3
   20366:	f362 0382 	bfi	r3, r2, #2, #1
   2036a:	77ab      	strb	r3, [r5, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   2036c:	78e3      	ldrb	r3, [r4, #3]
   2036e:	77eb      	strb	r3, [r5, #31]
    if (!p_config->skip_gpio_cfg)
   20370:	7ce3      	ldrb	r3, [r4, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   20372:	f8d8 6000 	ldr.w	r6, [r8]
    if (!p_config->skip_gpio_cfg)
   20376:	2b00      	cmp	r3, #0
   20378:	d142      	bne.n	20400 <nrfx_spim_init+0x14c>
                    : NRF_GPIO_PIN_S0S1;
   2037a:	68a3      	ldr	r3, [r4, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   2037c:	7820      	ldrb	r0, [r4, #0]
                    : NRF_GPIO_PIN_S0S1;
   2037e:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   20382:	7b23      	ldrb	r3, [r4, #12]
   20384:	bf08      	it	eq
   20386:	2703      	moveq	r7, #3
   20388:	2b01      	cmp	r3, #1
   2038a:	f200 8096 	bhi.w	204ba <nrfx_spim_init+0x206>
        nrf_gpio_pin_clear(pin_number);
   2038e:	f00e fc2d 	bl	2ebec <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   20392:	2300      	movs	r3, #0
   20394:	9700      	str	r7, [sp, #0]
   20396:	7820      	ldrb	r0, [r4, #0]
   20398:	461a      	mov	r2, r3
   2039a:	2101      	movs	r1, #1
   2039c:	f00e fc4e 	bl	2ec3c <nrf_gpio_cfg.constprop.0>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   203a0:	7860      	ldrb	r0, [r4, #1]
   203a2:	28ff      	cmp	r0, #255	; 0xff
   203a4:	d008      	beq.n	203b8 <nrfx_spim_init+0x104>
   203a6:	f00e fc21 	bl	2ebec <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   203aa:	2201      	movs	r2, #1
   203ac:	9700      	str	r7, [sp, #0]
   203ae:	2300      	movs	r3, #0
   203b0:	4611      	mov	r1, r2
   203b2:	7860      	ldrb	r0, [r4, #1]
   203b4:	f00e fc42 	bl	2ec3c <nrf_gpio_cfg.constprop.0>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   203b8:	78a0      	ldrb	r0, [r4, #2]
   203ba:	28ff      	cmp	r0, #255	; 0xff
   203bc:	d005      	beq.n	203ca <nrfx_spim_init+0x116>
            nrf_gpio_cfg(p_config->miso_pin,
   203be:	2200      	movs	r2, #0
   203c0:	9700      	str	r7, [sp, #0]
   203c2:	4611      	mov	r1, r2
   203c4:	7ba3      	ldrb	r3, [r4, #14]
   203c6:	f00e fc39 	bl	2ec3c <nrf_gpio_cfg.constprop.0>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   203ca:	78e0      	ldrb	r0, [r4, #3]
   203cc:	28ff      	cmp	r0, #255	; 0xff
   203ce:	d00b      	beq.n	203e8 <nrfx_spim_init+0x134>
    if (value == 0)
   203d0:	7923      	ldrb	r3, [r4, #4]
   203d2:	2b00      	cmp	r3, #0
   203d4:	d074      	beq.n	204c0 <nrfx_spim_init+0x20c>
        nrf_gpio_pin_clear(pin_number);
   203d6:	f00e fc09 	bl	2ebec <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   203da:	2201      	movs	r2, #1
   203dc:	9700      	str	r7, [sp, #0]
   203de:	2300      	movs	r3, #0
   203e0:	4611      	mov	r1, r2
   203e2:	78e0      	ldrb	r0, [r4, #3]
   203e4:	f00e fc2a 	bl	2ec3c <nrf_gpio_cfg.constprop.0>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   203e8:	7be0      	ldrb	r0, [r4, #15]
   203ea:	28ff      	cmp	r0, #255	; 0xff
   203ec:	d008      	beq.n	20400 <nrfx_spim_init+0x14c>
        nrf_gpio_pin_set(pin_number);
   203ee:	f00e fc09 	bl	2ec04 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   203f2:	2201      	movs	r2, #1
   203f4:	9700      	str	r7, [sp, #0]
   203f6:	2300      	movs	r3, #0
   203f8:	4611      	mov	r1, r2
   203fa:	7be0      	ldrb	r0, [r4, #15]
   203fc:	f00e fc1e 	bl	2ec3c <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
   20400:	7d23      	ldrb	r3, [r4, #20]
   20402:	bb6b      	cbnz	r3, 20460 <nrfx_spim_init+0x1ac>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   20404:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   20406:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   20408:	2bff      	cmp	r3, #255	; 0xff
   2040a:	bf18      	it	ne
   2040c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   2040e:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   20410:	bf08      	it	eq
   20412:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   20416:	2bff      	cmp	r3, #255	; 0xff
   20418:	bf08      	it	eq
   2041a:	f04f 33ff 	moveq.w	r3, #4294967295
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   2041e:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   20422:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   20426:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2042a:	f898 3004 	ldrb.w	r3, [r8, #4]
   2042e:	b9bb      	cbnz	r3, 20460 <nrfx_spim_init+0x1ac>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   20430:	78e3      	ldrb	r3, [r4, #3]
   20432:	2bff      	cmp	r3, #255	; 0xff
   20434:	d047      	beq.n	204c6 <nrfx_spim_init+0x212>
   20436:	7c62      	ldrb	r2, [r4, #17]
   20438:	2a00      	cmp	r2, #0
   2043a:	d044      	beq.n	204c6 <nrfx_spim_init+0x212>
                                    (p_config->ss_active_high == true
   2043c:	7921      	ldrb	r1, [r4, #4]
                nrf_spim_csn_configure(p_spim,
   2043e:	7ca2      	ldrb	r2, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   20440:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   20444:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   20448:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2044c:	f898 3004 	ldrb.w	r3, [r8, #4]
   20450:	b933      	cbnz	r3, 20460 <nrfx_spim_init+0x1ac>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   20452:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   20454:	2bff      	cmp	r3, #255	; 0xff
   20456:	bf08      	it	eq
   20458:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   2045c:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   20460:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   20462:	f8c9 3560 	str.w	r3, [r9, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   20466:	68a3      	ldr	r3, [r4, #8]
   20468:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   2046c:	7b63      	ldrb	r3, [r4, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2046e:	7b22      	ldrb	r2, [r4, #12]
   20470:	3b00      	subs	r3, #0
   20472:	bf18      	it	ne
   20474:	2301      	movne	r3, #1
    switch (spi_mode)
   20476:	2a02      	cmp	r2, #2
   20478:	d02f      	beq.n	204da <nrfx_spim_init+0x226>
   2047a:	2a03      	cmp	r2, #3
   2047c:	d030      	beq.n	204e0 <nrfx_spim_init+0x22c>
   2047e:	2a01      	cmp	r2, #1
   20480:	d101      	bne.n	20486 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   20482:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   20486:	f8c9 3554 	str.w	r3, [r9, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2048a:	79a3      	ldrb	r3, [r4, #6]
   2048c:	f8c9 35c0 	str.w	r3, [r9, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   20490:	2307      	movs	r3, #7
   20492:	f8c9 3500 	str.w	r3, [r9, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   20496:	682b      	ldr	r3, [r5, #0]
   20498:	b12b      	cbz	r3, 204a6 <nrfx_spim_init+0x1f2>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   2049a:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2049e:	f340 3007 	sbfx	r0, r0, #12, #8
   204a2:	f7f0 facb 	bl	10a3c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   204a6:	2300      	movs	r3, #0
   204a8:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   204aa:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   204ac:	4816      	ldr	r0, [pc, #88]	; (20508 <nrfx_spim_init+0x254>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   204ae:	772b      	strb	r3, [r5, #28]
}
   204b0:	b003      	add	sp, #12
   204b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   204b6:	4601      	mov	r1, r0
   204b8:	e748      	b.n	2034c <nrfx_spim_init+0x98>
   204ba:	f00e fba3 	bl	2ec04 <nrf_gpio_pin_set>
   204be:	e768      	b.n	20392 <nrfx_spim_init+0xde>
   204c0:	f00e fba0 	bl	2ec04 <nrf_gpio_pin_set>
   204c4:	e789      	b.n	203da <nrfx_spim_init+0x126>
    p_reg->PSEL.CSN = pin;
   204c6:	f04f 33ff 	mov.w	r3, #4294967295
   204ca:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   204ce:	2300      	movs	r3, #0
   204d0:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   204d4:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   204d8:	e7b8      	b.n	2044c <nrfx_spim_init+0x198>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   204da:	f043 0304 	orr.w	r3, r3, #4
        break;
   204de:	e7d2      	b.n	20486 <nrfx_spim_init+0x1d2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   204e0:	f043 0306 	orr.w	r3, r3, #6
        break;
   204e4:	e7cf      	b.n	20486 <nrfx_spim_init+0x1d2>
        return err_code;
   204e6:	4809      	ldr	r0, [pc, #36]	; (2050c <nrfx_spim_init+0x258>)
   204e8:	e7e2      	b.n	204b0 <nrfx_spim_init+0x1fc>
        return err_code;
   204ea:	4809      	ldr	r0, [pc, #36]	; (20510 <nrfx_spim_init+0x25c>)
   204ec:	e7e0      	b.n	204b0 <nrfx_spim_init+0x1fc>
            return err_code;
   204ee:	4809      	ldr	r0, [pc, #36]	; (20514 <nrfx_spim_init+0x260>)
   204f0:	e7de      	b.n	204b0 <nrfx_spim_init+0x1fc>
   204f2:	bf00      	nop
   204f4:	0003762f 	.word	0x0003762f
   204f8:	00032679 	.word	0x00032679
   204fc:	000377b0 	.word	0x000377b0
   20500:	200219a0 	.word	0x200219a0
   20504:	4000a000 	.word	0x4000a000
   20508:	0bad0000 	.word	0x0bad0000
   2050c:	0bad0005 	.word	0x0bad0005
   20510:	0bad0003 	.word	0x0bad0003
   20514:	0bad0004 	.word	0x0bad0004

00020518 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   20518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2051c:	4d2e      	ldr	r5, [pc, #184]	; (205d8 <nrfx_spim_uninit+0xc0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2051e:	f890 8004 	ldrb.w	r8, [r0, #4]
{
   20522:	4607      	mov	r7, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   20524:	ea4f 1648 	mov.w	r6, r8, lsl #5
   20528:	eb05 1848 	add.w	r8, r5, r8, lsl #5
   2052c:	f898 301c 	ldrb.w	r3, [r8, #28]
   20530:	b95b      	cbnz	r3, 2054a <nrfx_spim_uninit+0x32>
   20532:	492a      	ldr	r1, [pc, #168]	; (205dc <nrfx_spim_uninit+0xc4>)
   20534:	482a      	ldr	r0, [pc, #168]	; (205e0 <nrfx_spim_uninit+0xc8>)
   20536:	f240 230f 	movw	r3, #527	; 0x20f
   2053a:	4a2a      	ldr	r2, [pc, #168]	; (205e4 <nrfx_spim_uninit+0xcc>)
   2053c:	f00a f8cd 	bl	2a6da <assert_print>
   20540:	f240 210f 	movw	r1, #527	; 0x20f
   20544:	4827      	ldr	r0, [pc, #156]	; (205e4 <nrfx_spim_uninit+0xcc>)
   20546:	f00a f8c1 	bl	2a6cc <assert_post_action>
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   2054a:	59ab      	ldr	r3, [r5, r6]
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2054c:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   2054e:	b1cb      	cbz	r3, 20584 <nrfx_spim_uninit+0x6c>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   20550:	f344 3007 	sbfx	r0, r4, #12, #8
   20554:	f7f0 fa80 	bl	10a58 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   20558:	4b23      	ldr	r3, [pc, #140]	; (205e8 <nrfx_spim_uninit+0xd0>)
   2055a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   2055e:	f898 301d 	ldrb.w	r3, [r8, #29]
   20562:	b17b      	cbz	r3, 20584 <nrfx_spim_uninit+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20564:	2301      	movs	r3, #1
   20566:	f04f 0864 	mov.w	r8, #100	; 0x64
   2056a:	6163      	str	r3, [r4, #20]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2056c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   20570:	b92b      	cbnz	r3, 2057e <nrfx_spim_uninit+0x66>
   20572:	2001      	movs	r0, #1
   20574:	f00e faaa 	bl	2eacc <nrfx_busy_wait>
   20578:	f1b8 0801 	subs.w	r8, r8, #1
   2057c:	d1f6      	bne.n	2056c <nrfx_spim_uninit+0x54>
    p_cb->transfer_in_progress = false;
   2057e:	2200      	movs	r2, #0
   20580:	19ab      	adds	r3, r5, r6
   20582:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   20584:	2300      	movs	r3, #0
   20586:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   2058a:	19ab      	adds	r3, r5, r6
   2058c:	7f9b      	ldrb	r3, [r3, #30]
   2058e:	07db      	lsls	r3, r3, #31
   20590:	d41b      	bmi.n	205ca <nrfx_spim_uninit+0xb2>
    return p_reg->PSEL.SCK;
   20592:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   20596:	f00e fb70 	bl	2ec7a <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   2059a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   2059e:	f00e fb6c 	bl	2ec7a <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   205a2:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   205a6:	f00e fb68 	bl	2ec7a <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   205aa:	793b      	ldrb	r3, [r7, #4]
   205ac:	b91b      	cbnz	r3, 205b6 <nrfx_spim_uninit+0x9e>
    return p_reg->PSELDCX;
   205ae:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   205b2:	f00e fb62 	bl	2ec7a <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   205b6:	19ab      	adds	r3, r5, r6
   205b8:	7fd8      	ldrb	r0, [r3, #31]
   205ba:	28ff      	cmp	r0, #255	; 0xff
   205bc:	d005      	beq.n	205ca <nrfx_spim_uninit+0xb2>
    nrf_gpio_cfg(
   205be:	2300      	movs	r3, #0
   205c0:	2201      	movs	r2, #1
   205c2:	4619      	mov	r1, r3
   205c4:	9300      	str	r3, [sp, #0]
   205c6:	f00e fb39 	bl	2ec3c <nrf_gpio_cfg.constprop.0>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   205ca:	2300      	movs	r3, #0
   205cc:	4435      	add	r5, r6
   205ce:	772b      	strb	r3, [r5, #28]
}
   205d0:	b002      	add	sp, #8
   205d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   205d6:	bf00      	nop
   205d8:	200219a0 	.word	0x200219a0
   205dc:	000377ec 	.word	0x000377ec
   205e0:	00032679 	.word	0x00032679
   205e4:	000377b0 	.word	0x000377b0
   205e8:	00080152 	.word	0x00080152

000205ec <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   205ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205f0:	4e60      	ldr	r6, [pc, #384]	; (20774 <nrfx_spim_xfer+0x188>)
   205f2:	7903      	ldrb	r3, [r0, #4]
{
   205f4:	4615      	mov	r5, r2
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   205f6:	eb06 1843 	add.w	r8, r6, r3, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   205fa:	f898 201c 	ldrb.w	r2, [r8, #28]
{
   205fe:	4607      	mov	r7, r0
   20600:	460c      	mov	r4, r1
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   20602:	b95a      	cbnz	r2, 2061c <nrfx_spim_xfer+0x30>
   20604:	495c      	ldr	r1, [pc, #368]	; (20778 <nrfx_spim_xfer+0x18c>)
   20606:	f240 23de 	movw	r3, #734	; 0x2de
   2060a:	4a5c      	ldr	r2, [pc, #368]	; (2077c <nrfx_spim_xfer+0x190>)
   2060c:	485c      	ldr	r0, [pc, #368]	; (20780 <nrfx_spim_xfer+0x194>)
   2060e:	f00a f864 	bl	2a6da <assert_print>
   20612:	f240 21de 	movw	r1, #734	; 0x2de
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   20616:	4859      	ldr	r0, [pc, #356]	; (2077c <nrfx_spim_xfer+0x190>)
   20618:	f00a f858 	bl	2a6cc <assert_post_action>
   2061c:	680a      	ldr	r2, [r1, #0]
   2061e:	b95a      	cbnz	r2, 20638 <nrfx_spim_xfer+0x4c>
   20620:	684a      	ldr	r2, [r1, #4]
   20622:	b14a      	cbz	r2, 20638 <nrfx_spim_xfer+0x4c>
   20624:	4957      	ldr	r1, [pc, #348]	; (20784 <nrfx_spim_xfer+0x198>)
   20626:	f240 23df 	movw	r3, #735	; 0x2df
   2062a:	4a54      	ldr	r2, [pc, #336]	; (2077c <nrfx_spim_xfer+0x190>)
   2062c:	4854      	ldr	r0, [pc, #336]	; (20780 <nrfx_spim_xfer+0x194>)
   2062e:	f00a f854 	bl	2a6da <assert_print>
   20632:	f240 21df 	movw	r1, #735	; 0x2df
   20636:	e7ee      	b.n	20616 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   20638:	68a2      	ldr	r2, [r4, #8]
   2063a:	b96a      	cbnz	r2, 20658 <nrfx_spim_xfer+0x6c>
   2063c:	68e2      	ldr	r2, [r4, #12]
   2063e:	2a00      	cmp	r2, #0
   20640:	f000 8094 	beq.w	2076c <nrfx_spim_xfer+0x180>
   20644:	4950      	ldr	r1, [pc, #320]	; (20788 <nrfx_spim_xfer+0x19c>)
   20646:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   2064a:	4a4c      	ldr	r2, [pc, #304]	; (2077c <nrfx_spim_xfer+0x190>)
   2064c:	484c      	ldr	r0, [pc, #304]	; (20780 <nrfx_spim_xfer+0x194>)
   2064e:	f00a f844 	bl	2a6da <assert_print>
   20652:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   20656:	e7de      	b.n	20616 <nrfx_spim_xfer+0x2a>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   20658:	b93b      	cbnz	r3, 2066a <nrfx_spim_xfer+0x7e>
   2065a:	68e3      	ldr	r3, [r4, #12]
   2065c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20660:	d203      	bcs.n	2066a <nrfx_spim_xfer+0x7e>
   20662:	6863      	ldr	r3, [r4, #4]
   20664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   20668:	d309      	bcc.n	2067e <nrfx_spim_xfer+0x92>
   2066a:	4948      	ldr	r1, [pc, #288]	; (2078c <nrfx_spim_xfer+0x1a0>)
   2066c:	f240 23e1 	movw	r3, #737	; 0x2e1
   20670:	4a42      	ldr	r2, [pc, #264]	; (2077c <nrfx_spim_xfer+0x190>)
   20672:	4843      	ldr	r0, [pc, #268]	; (20780 <nrfx_spim_xfer+0x194>)
   20674:	f00a f831 	bl	2a6da <assert_print>
   20678:	f240 21e1 	movw	r1, #737	; 0x2e1
   2067c:	e7cb      	b.n	20616 <nrfx_spim_xfer+0x2a>
                                     p_xfer_desc->rx_length,
                                     p_xfer_desc->tx_length));
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2067e:	f015 0908 	ands.w	r9, r5, #8
   20682:	d00f      	beq.n	206a4 <nrfx_spim_xfer+0xb8>
   20684:	7fb3      	ldrb	r3, [r6, #30]
   20686:	075b      	lsls	r3, r3, #29
   20688:	d40c      	bmi.n	206a4 <nrfx_spim_xfer+0xb8>
   2068a:	7ff3      	ldrb	r3, [r6, #31]
   2068c:	2bff      	cmp	r3, #255	; 0xff
   2068e:	d009      	beq.n	206a4 <nrfx_spim_xfer+0xb8>
   20690:	493f      	ldr	r1, [pc, #252]	; (20790 <nrfx_spim_xfer+0x1a4>)
   20692:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   20696:	4a39      	ldr	r2, [pc, #228]	; (2077c <nrfx_spim_xfer+0x190>)
   20698:	4839      	ldr	r0, [pc, #228]	; (20780 <nrfx_spim_xfer+0x194>)
   2069a:	f00a f81e 	bl	2a6da <assert_print>
   2069e:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   206a2:	e7b8      	b.n	20616 <nrfx_spim_xfer+0x2a>
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   206a4:	7f73      	ldrb	r3, [r6, #29]
   206a6:	2b00      	cmp	r3, #0
   206a8:	d15e      	bne.n	20768 <nrfx_spim_xfer+0x17c>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   206aa:	6833      	ldr	r3, [r6, #0]
   206ac:	b123      	cbz	r3, 206b8 <nrfx_spim_xfer+0xcc>
   206ae:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   206b2:	bf04      	itt	eq
   206b4:	2301      	moveq	r3, #1
   206b6:	7773      	strbeq	r3, [r6, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   206b8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 20794 <nrfx_spim_xfer+0x1a8>
   206bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   206c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   206c4:	2101      	movs	r1, #1
   206c6:	4640      	mov	r0, r8
   206c8:	f00e faa8 	bl	2ec1c <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   206cc:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   206ce:	683b      	ldr	r3, [r7, #0]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   206d0:	b121      	cbz	r1, 206dc <nrfx_spim_xfer+0xf0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   206d2:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   206d6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   206da:	d106      	bne.n	206ea <nrfx_spim_xfer+0xfe>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   206dc:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   206de:	b14a      	cbz	r2, 206f4 <nrfx_spim_xfer+0x108>
   206e0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   206e4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   206e8:	d004      	beq.n	206f4 <nrfx_spim_xfer+0x108>
        p_cb->transfer_in_progress = false;
   206ea:	2300      	movs	r3, #0
        return err_code;
   206ec:	482a      	ldr	r0, [pc, #168]	; (20798 <nrfx_spim_xfer+0x1ac>)
        p_cb->transfer_in_progress = false;
   206ee:	7773      	strb	r3, [r6, #29]
}
   206f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   206f4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   206f6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   206fa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   206fe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   20702:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20706:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2070a:	2200      	movs	r2, #0
   2070c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   20710:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   20714:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   20718:	bf18      	it	ne
   2071a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   2071c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   20720:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   20724:	bf18      	it	ne
   20726:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   20728:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!p_cb->handler)
   2072c:	6832      	ldr	r2, [r6, #0]
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2072e:	f1b9 0f00 	cmp.w	r9, #0
   20732:	d006      	beq.n	20742 <nrfx_spim_xfer+0x156>
    if (!p_cb->handler)
   20734:	b96a      	cbnz	r2, 20752 <nrfx_spim_xfer+0x166>
        set_ss_pin_state(p_cb, false);
   20736:	2100      	movs	r1, #0
   20738:	4640      	mov	r0, r8
   2073a:	f00e fa6f 	bl	2ec1c <set_ss_pin_state>
    return err_code;
   2073e:	4817      	ldr	r0, [pc, #92]	; (2079c <nrfx_spim_xfer+0x1b0>)
   20740:	e7d6      	b.n	206f0 <nrfx_spim_xfer+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20742:	2101      	movs	r1, #1
   20744:	6119      	str	r1, [r3, #16]
    if (!p_cb->handler)
   20746:	b922      	cbnz	r2, 20752 <nrfx_spim_xfer+0x166>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20748:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2074c:	2a00      	cmp	r2, #0
   2074e:	d0fb      	beq.n	20748 <nrfx_spim_xfer+0x15c>
   20750:	e7f1      	b.n	20736 <nrfx_spim_xfer+0x14a>
    if (!enable)
   20752:	f015 0f04 	tst.w	r5, #4
   20756:	f04f 0240 	mov.w	r2, #64	; 0x40
   2075a:	d002      	beq.n	20762 <nrfx_spim_xfer+0x176>
    p_reg->INTENCLR = mask;
   2075c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20760:	e7ed      	b.n	2073e <nrfx_spim_xfer+0x152>
    p_reg->INTENSET = mask;
   20762:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20766:	e7ea      	b.n	2073e <nrfx_spim_xfer+0x152>
        return err_code;
   20768:	480d      	ldr	r0, [pc, #52]	; (207a0 <nrfx_spim_xfer+0x1b4>)
   2076a:	e7c1      	b.n	206f0 <nrfx_spim_xfer+0x104>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2076c:	2b00      	cmp	r3, #0
   2076e:	f43f af78 	beq.w	20662 <nrfx_spim_xfer+0x76>
   20772:	e77a      	b.n	2066a <nrfx_spim_xfer+0x7e>
   20774:	200219a0 	.word	0x200219a0
   20778:	000377ec 	.word	0x000377ec
   2077c:	000377b0 	.word	0x000377b0
   20780:	00032679 	.word	0x00032679
   20784:	00037818 	.word	0x00037818
   20788:	0003785f 	.word	0x0003785f
   2078c:	000378a6 	.word	0x000378a6
   20790:	0003794a 	.word	0x0003794a
   20794:	200219ac 	.word	0x200219ac
   20798:	0bad000a 	.word	0x0bad000a
   2079c:	0bad0000 	.word	0x0bad0000
   207a0:	0bad000b 	.word	0x0bad000b

000207a4 <nrfx_spim_4_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   207a4:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   207a6:	4b13      	ldr	r3, [pc, #76]	; (207f4 <nrfx_spim_4_irq_handler+0x50>)
   207a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   207ac:	b302      	cbz	r2, 207f0 <nrfx_spim_4_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   207ae:	2500      	movs	r5, #0
        NRFX_ASSERT(p_cb->handler);
   207b0:	4c11      	ldr	r4, [pc, #68]	; (207f8 <nrfx_spim_4_irq_handler+0x54>)
   207b2:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   207b6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   207ba:	6823      	ldr	r3, [r4, #0]
   207bc:	b95b      	cbnz	r3, 207d6 <nrfx_spim_4_irq_handler+0x32>
   207be:	490f      	ldr	r1, [pc, #60]	; (207fc <nrfx_spim_4_irq_handler+0x58>)
   207c0:	480f      	ldr	r0, [pc, #60]	; (20800 <nrfx_spim_4_irq_handler+0x5c>)
   207c2:	f240 333b 	movw	r3, #827	; 0x33b
   207c6:	4a0f      	ldr	r2, [pc, #60]	; (20804 <nrfx_spim_4_irq_handler+0x60>)
   207c8:	f009 ff87 	bl	2a6da <assert_print>
   207cc:	f240 313b 	movw	r1, #827	; 0x33b
   207d0:	480c      	ldr	r0, [pc, #48]	; (20804 <nrfx_spim_4_irq_handler+0x60>)
   207d2:	f009 ff7b 	bl	2a6cc <assert_post_action>
    set_ss_pin_state(p_cb, false);
   207d6:	4629      	mov	r1, r5
   207d8:	4620      	mov	r0, r4
   207da:	f00e fa1f 	bl	2ec1c <set_ss_pin_state>
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207de:	e9d4 3100 	ldrd	r3, r1, [r4]
    p_cb->transfer_in_progress = false;
   207e2:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   207e4:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207e6:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
}
   207ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   207ee:	4718      	bx	r3
}
   207f0:	bd70      	pop	{r4, r5, r6, pc}
   207f2:	bf00      	nop
   207f4:	4000a000 	.word	0x4000a000
   207f8:	200219a0 	.word	0x200219a0
   207fc:	0003798d 	.word	0x0003798d
   20800:	00032679 	.word	0x00032679
   20804:	000377b0 	.word	0x000377b0

00020808 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   20808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2080c:	460e      	mov	r6, r1
   2080e:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   20810:	4d0c      	ldr	r5, [pc, #48]	; (20844 <metal_generic_dev_open+0x3c>)
   20812:	f855 4f18 	ldr.w	r4, [r5, #24]!
   20816:	42ac      	cmp	r4, r5
   20818:	d103      	bne.n	20822 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   2081a:	f06f 0012 	mvn.w	r0, #18
   2081e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   20822:	4631      	mov	r1, r6
   20824:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   20828:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   2082c:	f7e8 fda1 	bl	9372 <strcmp>
   20830:	b930      	cbnz	r0, 20840 <metal_generic_dev_open+0x38>
			*device = dev;
   20832:	f8c7 8000 	str.w	r8, [r7]
			return metal_generic_dev_sys_open(dev);
   20836:	4640      	mov	r0, r8
}
   20838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   2083c:	f00e bb22 	b.w	2ee84 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   20840:	6824      	ldr	r4, [r4, #0]
   20842:	e7e8      	b.n	20816 <metal_generic_dev_open+0xe>
   20844:	200219c0 	.word	0x200219c0

00020848 <metal_bus_unregister>:
{
   20848:	b510      	push	{r4, lr}
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   2084a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2084e:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   20850:	6a41      	ldr	r1, [r0, #36]	; 0x24
	metal_list_del(&bus->node);
   20852:	f100 0324 	add.w	r3, r0, #36	; 0x24
   20856:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   20858:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   2085c:	6843      	ldr	r3, [r0, #4]
{
   2085e:	4604      	mov	r4, r0
	if (bus->ops.bus_close)
   20860:	b103      	cbz	r3, 20864 <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   20862:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   20864:	4b05      	ldr	r3, [pc, #20]	; (2087c <metal_bus_unregister+0x34>)
   20866:	781a      	ldrb	r2, [r3, #0]
   20868:	2a06      	cmp	r2, #6
   2086a:	d905      	bls.n	20878 <metal_bus_unregister+0x30>
   2086c:	685b      	ldr	r3, [r3, #4]
   2086e:	b11b      	cbz	r3, 20878 <metal_bus_unregister+0x30>
   20870:	2007      	movs	r0, #7
   20872:	6822      	ldr	r2, [r4, #0]
   20874:	4902      	ldr	r1, [pc, #8]	; (20880 <metal_bus_unregister+0x38>)
   20876:	4798      	blx	r3
}
   20878:	2000      	movs	r0, #0
   2087a:	bd10      	pop	{r4, pc}
   2087c:	200219c0 	.word	0x200219c0
   20880:	000379b0 	.word	0x000379b0

00020884 <metal_bus_find>:
{
   20884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20888:	4607      	mov	r7, r0
   2088a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   2088c:	4e0b      	ldr	r6, [pc, #44]	; (208bc <metal_bus_find+0x38>)
   2088e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   20892:	42b4      	cmp	r4, r6
   20894:	d102      	bne.n	2089c <metal_bus_find+0x18>
	return -ENOENT;
   20896:	f06f 0001 	mvn.w	r0, #1
   2089a:	e00a      	b.n	208b2 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   2089c:	4639      	mov	r1, r7
   2089e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   208a2:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   208a6:	f7e8 fd64 	bl	9372 <strcmp>
   208aa:	b920      	cbnz	r0, 208b6 <metal_bus_find+0x32>
   208ac:	b11d      	cbz	r5, 208b6 <metal_bus_find+0x32>
			*result = bus;
   208ae:	f8c5 8000 	str.w	r8, [r5]
}
   208b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   208b6:	6824      	ldr	r4, [r4, #0]
   208b8:	e7eb      	b.n	20892 <metal_bus_find+0xe>
   208ba:	bf00      	nop
   208bc:	200219c0 	.word	0x200219c0

000208c0 <metal_bus_register>:
{
   208c0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   208c2:	4604      	mov	r4, r0
   208c4:	b910      	cbnz	r0, 208cc <metal_bus_register+0xc>
		return -EINVAL;
   208c6:	f06f 0015 	mvn.w	r0, #21
}
   208ca:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   208cc:	6800      	ldr	r0, [r0, #0]
   208ce:	2800      	cmp	r0, #0
   208d0:	d0f9      	beq.n	208c6 <metal_bus_register+0x6>
   208d2:	f7e8 fd58 	bl	9386 <strlen>
   208d6:	2800      	cmp	r0, #0
   208d8:	d0f5      	beq.n	208c6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   208da:	2100      	movs	r1, #0
   208dc:	6820      	ldr	r0, [r4, #0]
   208de:	f7ff ffd1 	bl	20884 <metal_bus_find>
   208e2:	b1c8      	cbz	r0, 20918 <metal_bus_register+0x58>
	metal_list_init(&bus->devices);
   208e4:	f104 031c 	add.w	r3, r4, #28
	list->next = list;
   208e8:	e9c4 3307 	strd	r3, r3, [r4, #28]
	new_node->prev = node->prev;
   208ec:	4b0c      	ldr	r3, [pc, #48]	; (20920 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   208ee:	f104 0224 	add.w	r2, r4, #36	; 0x24
   208f2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   208f4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   208f8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   208fa:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   208fc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   208fe:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   20900:	781a      	ldrb	r2, [r3, #0]
   20902:	2a06      	cmp	r2, #6
   20904:	d901      	bls.n	2090a <metal_bus_register+0x4a>
   20906:	685b      	ldr	r3, [r3, #4]
   20908:	b90b      	cbnz	r3, 2090e <metal_bus_register+0x4e>
	return 0;
   2090a:	2000      	movs	r0, #0
   2090c:	e7dd      	b.n	208ca <metal_bus_register+0xa>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   2090e:	2007      	movs	r0, #7
   20910:	6822      	ldr	r2, [r4, #0]
   20912:	4904      	ldr	r1, [pc, #16]	; (20924 <metal_bus_register+0x64>)
   20914:	4798      	blx	r3
   20916:	e7f8      	b.n	2090a <metal_bus_register+0x4a>
		return -EEXIST;
   20918:	f06f 0010 	mvn.w	r0, #16
   2091c:	e7d5      	b.n	208ca <metal_bus_register+0xa>
   2091e:	bf00      	nop
   20920:	200219c0 	.word	0x200219c0
   20924:	000379b2 	.word	0x000379b2

00020928 <metal_device_close>:
	metal_assert(device && device->bus);
   20928:	4601      	mov	r1, r0
{
   2092a:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   2092c:	b108      	cbz	r0, 20932 <metal_device_close+0xa>
   2092e:	6840      	ldr	r0, [r0, #4]
   20930:	b948      	cbnz	r0, 20946 <metal_device_close+0x1e>
   20932:	4908      	ldr	r1, [pc, #32]	; (20954 <metal_device_close+0x2c>)
   20934:	4808      	ldr	r0, [pc, #32]	; (20958 <metal_device_close+0x30>)
   20936:	2351      	movs	r3, #81	; 0x51
   20938:	4a08      	ldr	r2, [pc, #32]	; (2095c <metal_device_close+0x34>)
   2093a:	f009 fece 	bl	2a6da <assert_print>
   2093e:	2151      	movs	r1, #81	; 0x51
   20940:	4806      	ldr	r0, [pc, #24]	; (2095c <metal_device_close+0x34>)
   20942:	f009 fec3 	bl	2a6cc <assert_post_action>
	if (device->bus->ops.dev_close)
   20946:	68c3      	ldr	r3, [r0, #12]
   20948:	b113      	cbz	r3, 20950 <metal_device_close+0x28>
}
   2094a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->bus->ops.dev_close(device->bus, device);
   2094e:	4718      	bx	r3
}
   20950:	bd10      	pop	{r4, pc}
   20952:	bf00      	nop
   20954:	000379fc 	.word	0x000379fc
   20958:	00032679 	.word	0x00032679
   2095c:	000379c5 	.word	0x000379c5

00020960 <metal_register_generic_device>:
{
   20960:	b510      	push	{r4, lr}
   20962:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   20964:	6800      	ldr	r0, [r0, #0]
   20966:	b910      	cbnz	r0, 2096e <metal_register_generic_device+0xe>
		return -EINVAL;
   20968:	f06f 0015 	mvn.w	r0, #21
}
   2096c:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   2096e:	f7e8 fd0a 	bl	9386 <strlen>
   20972:	2800      	cmp	r0, #0
   20974:	d0f8      	beq.n	20968 <metal_register_generic_device+0x8>
   20976:	68a3      	ldr	r3, [r4, #8]
   20978:	2b01      	cmp	r3, #1
   2097a:	d8f5      	bhi.n	20968 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   2097c:	4b06      	ldr	r3, [pc, #24]	; (20998 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   2097e:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   20982:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   20984:	4b05      	ldr	r3, [pc, #20]	; (2099c <metal_register_generic_device+0x3c>)
   20986:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   20988:	f103 0018 	add.w	r0, r3, #24
   2098c:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   2098e:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   20990:	61d9      	str	r1, [r3, #28]
	return 0;
   20992:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   20994:	6011      	str	r1, [r2, #0]
}
   20996:	e7e9      	b.n	2096c <metal_register_generic_device+0xc>
   20998:	20008718 	.word	0x20008718
   2099c:	200219c0 	.word	0x200219c0

000209a0 <metal_init>:

int metal_init(const struct metal_init_params *params)
{
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   209a0:	4b0e      	ldr	r3, [pc, #56]	; (209dc <metal_init+0x3c>)
{
   209a2:	b510      	push	{r4, lr}
   209a4:	4604      	mov	r4, r0
	memset(&_metal, 0, sizeof(_metal));
   209a6:	2220      	movs	r2, #32
   209a8:	2100      	movs	r1, #0
   209aa:	4618      	mov	r0, r3
   209ac:	f00f fe29 	bl	30602 <memset>

	_metal.common.log_handler   = params->log_handler;
   209b0:	6822      	ldr	r2, [r4, #0]
   209b2:	6042      	str	r2, [r0, #4]
	_metal.common.log_level     = params->log_level;
   209b4:	4602      	mov	r2, r0
   209b6:	7921      	ldrb	r1, [r4, #4]
   209b8:	f802 1b08 	strb.w	r1, [r2], #8
	list->next = list;
   209bc:	e9c0 2202 	strd	r2, r2, [r0, #8]
	list->prev = list;
   209c0:	f100 0210 	add.w	r2, r0, #16
	list->next = list;
   209c4:	e9c0 2204 	strd	r2, r2, [r0, #16]
	list->prev = list;
   209c8:	f100 0218 	add.w	r2, r0, #24
	list->next = list;
   209cc:	e9c0 2206 	strd	r2, r2, [r0, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   209d0:	4620      	mov	r0, r4
	if (error)
		return error;

	return error;
}
   209d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	error = metal_sys_init(params);
   209d6:	f000 b80f 	b.w	209f8 <metal_sys_init>
   209da:	bf00      	nop
   209dc:	200219c0 	.word	0x200219c0

000209e0 <metal_finish>:

void metal_finish(void)
{
   209e0:	b508      	push	{r3, lr}
	metal_sys_finish();
   209e2:	f000 f811 	bl	20a08 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
}
   209e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	memset(&_metal, 0, sizeof(_metal));
   209ea:	2220      	movs	r2, #32
   209ec:	2100      	movs	r1, #0
   209ee:	4801      	ldr	r0, [pc, #4]	; (209f4 <metal_finish+0x14>)
   209f0:	f00f be07 	b.w	30602 <memset>
   209f4:	200219c0 	.word	0x200219c0

000209f8 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   209f8:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   209fa:	4802      	ldr	r0, [pc, #8]	; (20a04 <metal_sys_init+0xc>)
   209fc:	f7ff ff60 	bl	208c0 <metal_bus_register>
	return 0;
}
   20a00:	2000      	movs	r0, #0
   20a02:	bd08      	pop	{r3, pc}
   20a04:	20008718 	.word	0x20008718

00020a08 <metal_sys_finish>:

void metal_sys_finish(void)
{
	metal_bus_unregister(&metal_generic_bus);
   20a08:	4801      	ldr	r0, [pc, #4]	; (20a10 <metal_sys_finish+0x8>)
   20a0a:	f7ff bf1d 	b.w	20848 <metal_bus_unregister>
   20a0e:	bf00      	nop
   20a10:	20008718 	.word	0x20008718

00020a14 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   20a14:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   20a16:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   20a18:	2b06      	cmp	r3, #6
{
   20a1a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   20a1c:	bf88      	it	hi
   20a1e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   20a20:	4b09      	ldr	r3, [pc, #36]	; (20a48 <metal_zephyr_log_handler+0x34>)
{
   20a22:	ac05      	add	r4, sp, #20
   20a24:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   20a28:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   20a2c:	4807      	ldr	r0, [pc, #28]	; (20a4c <metal_zephyr_log_handler+0x38>)
   20a2e:	f009 fc92 	bl	2a356 <printk>

	va_start(args, format);
	vprintk(format, args);
   20a32:	4621      	mov	r1, r4
   20a34:	4628      	mov	r0, r5
	va_start(args, format);
   20a36:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   20a38:	f7eb ff98 	bl	c96c <vprintk>
	va_end(args);
}
   20a3c:	b002      	add	sp, #8
   20a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20a42:	b003      	add	sp, #12
   20a44:	4770      	bx	lr
   20a46:	bf00      	nop
   20a48:	000324f4 	.word	0x000324f4
   20a4c:	0003282c 	.word	0x0003282c

00020a50 <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
   20a50:	4a18      	ldr	r2, [pc, #96]	; (20ab4 <lfs_dir_traverse_filter+0x64>)
   20a52:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
        lfs_tag_t tag, const void *buffer) {
   20a56:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
   20a58:	4c17      	ldr	r4, [pc, #92]	; (20ab8 <lfs_dir_traverse_filter+0x68>)
   20a5a:	bf18      	it	ne
   20a5c:	4614      	movne	r4, r2

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
   20a5e:	6803      	ldr	r3, [r0, #0]
   20a60:	ea83 0501 	eor.w	r5, r3, r1
   20a64:	4225      	tst	r5, r4
   20a66:	d00d      	beq.n	20a84 <lfs_dir_traverse_filter+0x34>
    return ((int32_t)(tag << 22) >> 22) == -1;
   20a68:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
   20a6c:	3401      	adds	r4, #1
   20a6e:	d009      	beq.n	20a84 <lfs_dir_traverse_filter+0x34>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
   20a70:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
   20a74:	4a11      	ldr	r2, [pc, #68]	; (20abc <lfs_dir_traverse_filter+0x6c>)
   20a76:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   20a78:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   20a7c:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
   20a80:	4294      	cmp	r4, r2
   20a82:	d103      	bne.n	20a8c <lfs_dir_traverse_filter+0x3c>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
   20a84:	2300      	movs	r3, #0
   20a86:	6003      	str	r3, [r0, #0]
        return true;
   20a88:	2001      	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
   20a8a:	bd30      	pop	{r4, r5, pc}
    return (tag & 0x70000000) >> 20;
   20a8c:	0d0a      	lsrs	r2, r1, #20
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   20a8e:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
   20a92:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   20a96:	d105      	bne.n	20aa4 <lfs_dir_traverse_filter+0x54>
   20a98:	f3c3 2489 	ubfx	r4, r3, #10, #10
   20a9c:	f3c1 2189 	ubfx	r1, r1, #10, #10
   20aa0:	428c      	cmp	r4, r1
   20aa2:	d201      	bcs.n	20aa8 <lfs_dir_traverse_filter+0x58>
    return false;
   20aa4:	2000      	movs	r0, #0
   20aa6:	e7f0      	b.n	20a8a <lfs_dir_traverse_filter+0x3a>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   20aa8:	b252      	sxtb	r2, r2
   20aaa:	eb03 2382 	add.w	r3, r3, r2, lsl #10
   20aae:	6003      	str	r3, [r0, #0]
   20ab0:	e7f8      	b.n	20aa4 <lfs_dir_traverse_filter+0x54>
   20ab2:	bf00      	nop
   20ab4:	7ffffc00 	.word	0x7ffffc00
   20ab8:	700ffc00 	.word	0x700ffc00
   20abc:	000ffc00 	.word	0x000ffc00

00020ac0 <lfs_fs_preporphans>:
    return LFS_ERR_NOENT;
}
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
   20ac0:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   20ac2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
   20ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
   20ac8:	b96a      	cbnz	r2, 20ae6 <lfs_fs_preporphans+0x26>
   20aca:	2900      	cmp	r1, #0
   20acc:	da0b      	bge.n	20ae6 <lfs_fs_preporphans+0x26>
   20ace:	490c      	ldr	r1, [pc, #48]	; (20b00 <lfs_fs_preporphans+0x40>)
   20ad0:	480c      	ldr	r0, [pc, #48]	; (20b04 <lfs_fs_preporphans+0x44>)
   20ad2:	f241 1354 	movw	r3, #4436	; 0x1154
   20ad6:	4a0c      	ldr	r2, [pc, #48]	; (20b08 <lfs_fs_preporphans+0x48>)
   20ad8:	f009 fdff 	bl	2a6da <assert_print>
   20adc:	f241 1154 	movw	r1, #4436	; 0x1154
   20ae0:	4809      	ldr	r0, [pc, #36]	; (20b08 <lfs_fs_preporphans+0x48>)
   20ae2:	f009 fdf3 	bl	2a6cc <assert_post_action>
    lfs->gstate.tag += orphans;
   20ae6:	4419      	add	r1, r3
    return tag & 0x000003ff;
   20ae8:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
   20aec:	3b00      	subs	r3, #0
   20aee:	bf18      	it	ne
   20af0:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   20af2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   20af6:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
   20afa:	6301      	str	r1, [r0, #48]	; 0x30
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));

    return 0;
}
   20afc:	2000      	movs	r0, #0
   20afe:	bd08      	pop	{r3, pc}
   20b00:	00037ad0 	.word	0x00037ad0
   20b04:	00032679 	.word	0x00032679
   20b08:	00037aaa 	.word	0x00037aaa

00020b0c <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   20b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b10:	4617      	mov	r7, r2
    if (block >= lfs->cfg->block_count ||
   20b12:	6e82      	ldr	r2, [r0, #104]	; 0x68
        void *buffer, lfs_size_t size) {
   20b14:	b087      	sub	sp, #28
   20b16:	468a      	mov	sl, r1
   20b18:	e9dd 4811 	ldrd	r4, r8, [sp, #68]	; 0x44
    if (block >= lfs->cfg->block_count ||
   20b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
        void *buffer, lfs_size_t size) {
   20b1e:	9304      	str	r3, [sp, #16]
    if (block >= lfs->cfg->block_count ||
   20b20:	6a13      	ldr	r3, [r2, #32]
        void *buffer, lfs_size_t size) {
   20b22:	4681      	mov	r9, r0
    if (block >= lfs->cfg->block_count ||
   20b24:	428b      	cmp	r3, r1
        void *buffer, lfs_size_t size) {
   20b26:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   20b28:	f240 80bc 	bls.w	20ca4 <lfs_bd_read+0x198>
   20b2c:	69d2      	ldr	r2, [r2, #28]
            off+size > lfs->cfg->block_size) {
   20b2e:	19a3      	adds	r3, r4, r6
    if (block >= lfs->cfg->block_count ||
   20b30:	4293      	cmp	r3, r2
   20b32:	f200 80b7 	bhi.w	20ca4 <lfs_bd_read+0x198>
	return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment)
{
	return lfs_aligndown(a + alignment-1, alignment);
   20b36:	9b04      	ldr	r3, [sp, #16]
   20b38:	3b01      	subs	r3, #1
   20b3a:	9305      	str	r3, [sp, #20]
    while (size > 0) {
   20b3c:	b30e      	cbz	r6, 20b82 <lfs_bd_read+0x76>
        if (pcache && block == pcache->block &&
   20b3e:	f1ba 0f00 	cmp.w	sl, #0
   20b42:	d03e      	beq.n	20bc2 <lfs_bd_read+0xb6>
   20b44:	f8da 3000 	ldr.w	r3, [sl]
   20b48:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20b4a:	429a      	cmp	r2, r3
   20b4c:	d139      	bne.n	20bc2 <lfs_bd_read+0xb6>
                off < pcache->off + pcache->size) {
   20b4e:	e9da 5301 	ldrd	r5, r3, [sl, #4]
   20b52:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
   20b56:	45a3      	cmp	fp, r4
   20b58:	d933      	bls.n	20bc2 <lfs_bd_read+0xb6>
            if (off >= pcache->off) {
   20b5a:	42a5      	cmp	r5, r4
   20b5c:	d813      	bhi.n	20b86 <lfs_bd_read+0x7a>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   20b5e:	ebab 0b04 	sub.w	fp, fp, r4
	return (a < b) ? a : b;
   20b62:	45b3      	cmp	fp, r6
   20b64:	bf28      	it	cs
   20b66:	46b3      	movcs	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   20b68:	f8da 100c 	ldr.w	r1, [sl, #12]
   20b6c:	1b65      	subs	r5, r4, r5
   20b6e:	4640      	mov	r0, r8
   20b70:	465a      	mov	r2, fp
   20b72:	4429      	add	r1, r5
   20b74:	f00f fd0b 	bl	3058e <memcpy>
    while (size > 0) {
   20b78:	ebb6 060b 	subs.w	r6, r6, fp
                data += diff;
   20b7c:	44d8      	add	r8, fp
                off += diff;
   20b7e:	445c      	add	r4, fp
    while (size > 0) {
   20b80:	d1e0      	bne.n	20b44 <lfs_bd_read+0x38>
    return 0;
   20b82:	2000      	movs	r0, #0
   20b84:	e08b      	b.n	20c9e <lfs_bd_read+0x192>
            diff = lfs_min(diff, pcache->off-off);
   20b86:	1b2d      	subs	r5, r5, r4
   20b88:	42b5      	cmp	r5, r6
   20b8a:	bf28      	it	cs
   20b8c:	4635      	movcs	r5, r6
        if (block == rcache->block &&
   20b8e:	683b      	ldr	r3, [r7, #0]
   20b90:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20b92:	429a      	cmp	r2, r3
   20b94:	d11b      	bne.n	20bce <lfs_bd_read+0xc2>
                off < rcache->off + rcache->size) {
   20b96:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
   20b9a:	440b      	add	r3, r1
        if (block == rcache->block &&
   20b9c:	429c      	cmp	r4, r3
   20b9e:	d216      	bcs.n	20bce <lfs_bd_read+0xc2>
            if (off >= rcache->off) {
   20ba0:	428c      	cmp	r4, r1
   20ba2:	d310      	bcc.n	20bc6 <lfs_bd_read+0xba>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   20ba4:	1b1b      	subs	r3, r3, r4
   20ba6:	429d      	cmp	r5, r3
   20ba8:	bf28      	it	cs
   20baa:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   20bac:	68fb      	ldr	r3, [r7, #12]
   20bae:	1a61      	subs	r1, r4, r1
   20bb0:	4640      	mov	r0, r8
   20bb2:	462a      	mov	r2, r5
   20bb4:	4419      	add	r1, r3
   20bb6:	f00f fcea 	bl	3058e <memcpy>
                data += diff;
   20bba:	44a8      	add	r8, r5
                off += diff;
   20bbc:	442c      	add	r4, r5
                size -= diff;
   20bbe:	1b76      	subs	r6, r6, r5
                continue;
   20bc0:	e7bc      	b.n	20b3c <lfs_bd_read+0x30>
   20bc2:	4635      	mov	r5, r6
   20bc4:	e7e3      	b.n	20b8e <lfs_bd_read+0x82>
            diff = lfs_min(diff, rcache->off-off);
   20bc6:	1b09      	subs	r1, r1, r4
   20bc8:	428d      	cmp	r5, r1
   20bca:	bf28      	it	cs
   20bcc:	460d      	movcs	r5, r1
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   20bce:	9b04      	ldr	r3, [sp, #16]
   20bd0:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
   20bd4:	42b3      	cmp	r3, r6
   20bd6:	d81e      	bhi.n	20c16 <lfs_bd_read+0x10a>
   20bd8:	6943      	ldr	r3, [r0, #20]
   20bda:	fbb4 f2f3 	udiv	r2, r4, r3
   20bde:	fb03 4212 	mls	r2, r3, r2, r4
   20be2:	b9c2      	cbnz	r2, 20c16 <lfs_bd_read+0x10a>
   20be4:	42b3      	cmp	r3, r6
   20be6:	d816      	bhi.n	20c16 <lfs_bd_read+0x10a>
	return a - (a % alignment);
   20be8:	fbb5 f2f3 	udiv	r2, r5, r3
   20bec:	fb03 5312 	mls	r3, r3, r2, r5
   20bf0:	eba5 0b03 	sub.w	fp, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   20bf4:	f8cd b000 	str.w	fp, [sp]
   20bf8:	9303      	str	r3, [sp, #12]
   20bfa:	6843      	ldr	r3, [r0, #4]
   20bfc:	4622      	mov	r2, r4
   20bfe:	469c      	mov	ip, r3
   20c00:	9910      	ldr	r1, [sp, #64]	; 0x40
   20c02:	4643      	mov	r3, r8
   20c04:	47e0      	blx	ip
            if (err) {
   20c06:	2800      	cmp	r0, #0
   20c08:	d149      	bne.n	20c9e <lfs_bd_read+0x192>
            size -= diff;
   20c0a:	9b03      	ldr	r3, [sp, #12]
            data += diff;
   20c0c:	44d8      	add	r8, fp
            size -= diff;
   20c0e:	1b5b      	subs	r3, r3, r5
            off += diff;
   20c10:	445c      	add	r4, fp
            size -= diff;
   20c12:	441e      	add	r6, r3
            continue;
   20c14:	e792      	b.n	20b3c <lfs_bd_read+0x30>
        LFS_ASSERT(block < lfs->cfg->block_count);
   20c16:	6a03      	ldr	r3, [r0, #32]
   20c18:	9a10      	ldr	r2, [sp, #64]	; 0x40
   20c1a:	429a      	cmp	r2, r3
   20c1c:	d309      	bcc.n	20c32 <lfs_bd_read+0x126>
   20c1e:	4923      	ldr	r1, [pc, #140]	; (20cac <lfs_bd_read+0x1a0>)
   20c20:	236f      	movs	r3, #111	; 0x6f
   20c22:	4a23      	ldr	r2, [pc, #140]	; (20cb0 <lfs_bd_read+0x1a4>)
   20c24:	4823      	ldr	r0, [pc, #140]	; (20cb4 <lfs_bd_read+0x1a8>)
   20c26:	f009 fd58 	bl	2a6da <assert_print>
   20c2a:	216f      	movs	r1, #111	; 0x6f
        LFS_ASSERT(err <= 0);
   20c2c:	4820      	ldr	r0, [pc, #128]	; (20cb0 <lfs_bd_read+0x1a4>)
   20c2e:	f009 fd4d 	bl	2a6cc <assert_post_action>
        rcache->block = block;
   20c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
	return lfs_aligndown(a + alignment-1, alignment);
   20c34:	9905      	ldr	r1, [sp, #20]
   20c36:	603b      	str	r3, [r7, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   20c38:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
	return a - (a % alignment);
   20c3c:	695a      	ldr	r2, [r3, #20]
   20c3e:	fbb4 f3f2 	udiv	r3, r4, r2
   20c42:	fb02 4313 	mls	r3, r2, r3, r4
   20c46:	1ae2      	subs	r2, r4, r3
   20c48:	607a      	str	r2, [r7, #4]
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   20c4a:	f8d9 5068 	ldr.w	r5, [r9, #104]	; 0x68
        rcache->size = lfs_min(
   20c4e:	1b1b      	subs	r3, r3, r4
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   20c50:	f8d5 c014 	ldr.w	ip, [r5, #20]
	return lfs_aligndown(a + alignment-1, alignment);
   20c54:	eb01 000c 	add.w	r0, r1, ip
   20c58:	4420      	add	r0, r4
	return a - (a % alignment);
   20c5a:	fbb0 f1fc 	udiv	r1, r0, ip
   20c5e:	fb0c 0111 	mls	r1, ip, r1, r0
   20c62:	1a40      	subs	r0, r0, r1
	return (a < b) ? a : b;
   20c64:	69e9      	ldr	r1, [r5, #28]
        rcache->size = lfs_min(
   20c66:	4288      	cmp	r0, r1
   20c68:	bf94      	ite	ls
   20c6a:	181b      	addls	r3, r3, r0
   20c6c:	185b      	addhi	r3, r3, r1
   20c6e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20c70:	428b      	cmp	r3, r1
   20c72:	bf28      	it	cs
   20c74:	460b      	movcs	r3, r1
   20c76:	60bb      	str	r3, [r7, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   20c78:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
   20c7c:	9300      	str	r3, [sp, #0]
   20c7e:	6845      	ldr	r5, [r0, #4]
   20c80:	68fb      	ldr	r3, [r7, #12]
   20c82:	9910      	ldr	r1, [sp, #64]	; 0x40
   20c84:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
   20c86:	2800      	cmp	r0, #0
   20c88:	dd07      	ble.n	20c9a <lfs_bd_read+0x18e>
   20c8a:	490b      	ldr	r1, [pc, #44]	; (20cb8 <lfs_bd_read+0x1ac>)
   20c8c:	237a      	movs	r3, #122	; 0x7a
   20c8e:	4a08      	ldr	r2, [pc, #32]	; (20cb0 <lfs_bd_read+0x1a4>)
   20c90:	4808      	ldr	r0, [pc, #32]	; (20cb4 <lfs_bd_read+0x1a8>)
   20c92:	f009 fd22 	bl	2a6da <assert_print>
   20c96:	217a      	movs	r1, #122	; 0x7a
   20c98:	e7c8      	b.n	20c2c <lfs_bd_read+0x120>
        if (err) {
   20c9a:	f43f af50 	beq.w	20b3e <lfs_bd_read+0x32>
}
   20c9e:	b007      	add	sp, #28
   20ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
   20ca4:	f06f 0053 	mvn.w	r0, #83	; 0x53
   20ca8:	e7f9      	b.n	20c9e <lfs_bd_read+0x192>
   20caa:	bf00      	nop
   20cac:	00037dbe 	.word	0x00037dbe
   20cb0:	00037aaa 	.word	0x00037aaa
   20cb4:	00032679 	.word	0x00032679
   20cb8:	00037b02 	.word	0x00037b02

00020cbc <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   20cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cc0:	4606      	mov	r6, r0
   20cc2:	b087      	sub	sp, #28
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20cc4:	303c      	adds	r0, #60	; 0x3c
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
   20cc6:	4691      	mov	r9, r2
   20cc8:	460f      	mov	r7, r1
   20cca:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
   20ccc:	e9d1 8303 	ldrd	r8, r3, [r1, #12]
   20cd0:	9305      	str	r3, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20cd2:	f00e f90c 	bl	2eeee <lfs_gstate_hasmovehere>
    return (tag & 0x000ffc00) >> 10;
   20cd6:	f3c9 2b89 	ubfx	fp, r9, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
   20cda:	4604      	mov	r4, r0
   20cdc:	b158      	cbz	r0, 20cf6 <lfs_dir_getslice+0x3a>
   20cde:	f1bb 0f00 	cmp.w	fp, #0
   20ce2:	d078      	beq.n	20dd6 <lfs_dir_getslice+0x11a>
    return (tag & 0x000ffc00) >> 10;
   20ce4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        gdiff -= LFS_MKTAG(0, 1, 0);
   20ce6:	4c3d      	ldr	r4, [pc, #244]	; (20ddc <lfs_dir_getslice+0x120>)
            lfs_tag_id(gmask) != 0 &&
   20ce8:	f3c3 2289 	ubfx	r2, r3, #10, #10
   20cec:	f3ca 2389 	ubfx	r3, sl, #10, #10
        gdiff -= LFS_MKTAG(0, 1, 0);
   20cf0:	429a      	cmp	r2, r3
   20cf2:	bf88      	it	hi
   20cf4:	2400      	movhi	r4, #0
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
   20cf6:	9d05      	ldr	r5, [sp, #20]
   20cf8:	4628      	mov	r0, r5
   20cfa:	f00e f8e0 	bl	2eebe <lfs_tag_dsize>
   20cfe:	1d03      	adds	r3, r0, #4
   20d00:	4543      	cmp	r3, r8
   20d02:	d834      	bhi.n	20d6e <lfs_dir_getslice+0xb2>
        int err = lfs_bd_read(lfs,
   20d04:	2304      	movs	r3, #4
        off -= lfs_tag_dsize(ntag);
   20d06:	eba8 0800 	sub.w	r8, r8, r0
        int err = lfs_bd_read(lfs,
   20d0a:	9303      	str	r3, [sp, #12]
   20d0c:	ab05      	add	r3, sp, #20
   20d0e:	e9cd 8301 	strd	r8, r3, [sp, #4]
   20d12:	683b      	ldr	r3, [r7, #0]
   20d14:	4632      	mov	r2, r6
   20d16:	9300      	str	r3, [sp, #0]
   20d18:	2100      	movs	r1, #0
   20d1a:	2304      	movs	r3, #4
   20d1c:	4630      	mov	r0, r6
   20d1e:	f7ff fef5 	bl	20b0c <lfs_bd_read>
        if (err) {
   20d22:	bb30      	cbnz	r0, 20d72 <lfs_dir_getslice+0xb6>
static inline uint32_t lfs_frombe32(uint32_t a)
{
#if defined(CONFIG_BIG_ENDIAN)
	return a;
#elif !defined(LFS_NO_INTRINSICS)
	return __builtin_bswap32(a);
   20d24:	9b05      	ldr	r3, [sp, #20]
   20d26:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
   20d28:	406b      	eors	r3, r5
   20d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   20d2e:	9305      	str	r3, [sp, #20]
        if (lfs_tag_id(gmask) != 0 &&
   20d30:	f1bb 0f00 	cmp.w	fp, #0
   20d34:	d023      	beq.n	20d7e <lfs_dir_getslice+0xc2>
    return (tag & 0x70000000) >> 20;
   20d36:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
   20d38:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
   20d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20d40:	d11d      	bne.n	20d7e <lfs_dir_getslice+0xc2>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
   20d42:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
   20d46:	f3c3 2089 	ubfx	r0, r3, #10, #10
   20d4a:	f3c5 2189 	ubfx	r1, r5, #10, #10
   20d4e:	4288      	cmp	r0, r1
   20d50:	d315      	bcc.n	20d7e <lfs_dir_getslice+0xc2>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
   20d52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   20d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   20d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   20d5e:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
   20d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   20d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20d6a:	42ab      	cmp	r3, r5
   20d6c:	d104      	bne.n	20d78 <lfs_dir_getslice+0xbc>
                return LFS_ERR_NOENT;
   20d6e:	f06f 0001 	mvn.w	r0, #1
}
   20d72:	b007      	add	sp, #28
   20d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   20d78:	b252      	sxtb	r2, r2
   20d7a:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
   20d7e:	ebaa 0104 	sub.w	r1, sl, r4
   20d82:	4069      	eors	r1, r5
   20d84:	ea11 0109 	ands.w	r1, r1, r9
   20d88:	d1b5      	bne.n	20cf6 <lfs_dir_getslice+0x3a>
    return ((int32_t)(tag << 22) >> 22) == -1;
   20d8a:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
   20d8e:	3301      	adds	r3, #1
   20d90:	d0ed      	beq.n	20d6e <lfs_dir_getslice+0xb2>
	return (a < b) ? a : b;
   20d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
    return tag & 0x000003ff;
   20d94:	f3c5 0909 	ubfx	r9, r5, #0, #10
   20d98:	4599      	cmp	r9, r3
   20d9a:	bf28      	it	cs
   20d9c:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
   20d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20da0:	f8cd 900c 	str.w	r9, [sp, #12]
   20da4:	9302      	str	r3, [sp, #8]
   20da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20da8:	4632      	mov	r2, r6
   20daa:	3304      	adds	r3, #4
   20dac:	4443      	add	r3, r8
   20dae:	9301      	str	r3, [sp, #4]
   20db0:	683b      	ldr	r3, [r7, #0]
   20db2:	4630      	mov	r0, r6
   20db4:	9300      	str	r3, [sp, #0]
   20db6:	464b      	mov	r3, r9
   20db8:	f7ff fea8 	bl	20b0c <lfs_bd_read>
            if (err) {
   20dbc:	2800      	cmp	r0, #0
   20dbe:	d1d8      	bne.n	20d72 <lfs_dir_getslice+0xb6>
__ssp_bos_icheck3(memset, void *, int)
   20dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20dc2:	4601      	mov	r1, r0
   20dc4:	eba3 0209 	sub.w	r2, r3, r9
   20dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20dca:	eb03 0009 	add.w	r0, r3, r9
   20dce:	f00f fc18 	bl	30602 <memset>
            return tag + gdiff;
   20dd2:	1960      	adds	r0, r4, r5
   20dd4:	e7cd      	b.n	20d72 <lfs_dir_getslice+0xb6>
    lfs_stag_t gdiff = 0;
   20dd6:	465c      	mov	r4, fp
   20dd8:	e78d      	b.n	20cf6 <lfs_dir_getslice+0x3a>
   20dda:	bf00      	nop
   20ddc:	fffffc00 	.word	0xfffffc00

00020de0 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
   20de0:	b530      	push	{r4, r5, lr}
   20de2:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   20de4:	ad03      	add	r5, sp, #12
        lfs_gstate_t *gstate) {
   20de6:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
   20de8:	4b08      	ldr	r3, [pc, #32]	; (20e0c <lfs_dir_getgstate+0x2c>)
   20dea:	4a09      	ldr	r2, [pc, #36]	; (20e10 <lfs_dir_getgstate+0x30>)
   20dec:	9500      	str	r5, [sp, #0]
   20dee:	f00e f8d3 	bl	2ef98 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
   20df2:	2800      	cmp	r0, #0
   20df4:	da04      	bge.n	20e00 <lfs_dir_getgstate+0x20>
   20df6:	1c83      	adds	r3, r0, #2
   20df8:	d100      	bne.n	20dfc <lfs_dir_getgstate+0x1c>
    return 0;
   20dfa:	2000      	movs	r0, #0
}
   20dfc:	b007      	add	sp, #28
   20dfe:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
   20e00:	4629      	mov	r1, r5
   20e02:	4620      	mov	r0, r4
   20e04:	f00e f865 	bl	2eed2 <lfs_gstate_xor>
   20e08:	e7f7      	b.n	20dfa <lfs_dir_getgstate+0x1a>
   20e0a:	bf00      	nop
   20e0c:	7ff0000c 	.word	0x7ff0000c
   20e10:	7ff00000 	.word	0x7ff00000

00020e14 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
   20e14:	b5f0      	push	{r4, r5, r6, r7, lr}
        strcpy(info->name, "/");
   20e16:	f103 0c08 	add.w	ip, r3, #8
        uint16_t id, struct lfs_info *info) {
   20e1a:	461c      	mov	r4, r3
    if (id == 0x3ff) {
   20e1c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   20e20:	429a      	cmp	r2, r3
        uint16_t id, struct lfs_info *info) {
   20e22:	4605      	mov	r5, r0
   20e24:	460e      	mov	r6, r1
   20e26:	b085      	sub	sp, #20
    if (id == 0x3ff) {
   20e28:	d107      	bne.n	20e3a <lfs_dir_getinfo+0x26>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   20e2a:	4b1a      	ldr	r3, [pc, #104]	; (20e94 <lfs_dir_getinfo+0x80>)
   20e2c:	881b      	ldrh	r3, [r3, #0]
   20e2e:	8123      	strh	r3, [r4, #8]
        info->type = LFS_TYPE_DIR;
   20e30:	2302      	movs	r3, #2
   20e32:	7023      	strb	r3, [r4, #0]
        return 0;
   20e34:	2000      	movs	r0, #0
}
   20e36:	b005      	add	sp, #20
   20e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
   20e3a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   20e3c:	0297      	lsls	r7, r2, #10
   20e3e:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
   20e40:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   20e44:	f8cd c000 	str.w	ip, [sp]
   20e48:	4a13      	ldr	r2, [pc, #76]	; (20e98 <lfs_dir_getinfo+0x84>)
   20e4a:	f00e f8a5 	bl	2ef98 <lfs_dir_get>
    if (tag < 0) {
   20e4e:	2800      	cmp	r0, #0
   20e50:	dbf1      	blt.n	20e36 <lfs_dir_getinfo+0x22>
    return (tag & 0x7ff00000) >> 20;
   20e52:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   20e54:	ab02      	add	r3, sp, #8
    info->type = lfs_tag_type3(tag);
   20e56:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   20e58:	9300      	str	r3, [sp, #0]
   20e5a:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   20e5e:	4631      	mov	r1, r6
   20e60:	4628      	mov	r0, r5
   20e62:	4a0e      	ldr	r2, [pc, #56]	; (20e9c <lfs_dir_getinfo+0x88>)
   20e64:	f043 0308 	orr.w	r3, r3, #8
   20e68:	f00e f896 	bl	2ef98 <lfs_dir_get>
    if (tag < 0) {
   20e6c:	2800      	cmp	r0, #0
   20e6e:	dbe2      	blt.n	20e36 <lfs_dir_getinfo+0x22>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   20e70:	f240 2302 	movw	r3, #514	; 0x202
   20e74:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   20e78:	ea4f 5210 	mov.w	r2, r0, lsr #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   20e7c:	d102      	bne.n	20e84 <lfs_dir_getinfo+0x70>
        info->size = ctz.size;
   20e7e:	9b03      	ldr	r3, [sp, #12]
   20e80:	6063      	str	r3, [r4, #4]
   20e82:	e7d7      	b.n	20e34 <lfs_dir_getinfo+0x20>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   20e84:	f240 2301 	movw	r3, #513	; 0x201
   20e88:	429a      	cmp	r2, r3
   20e8a:	d1d3      	bne.n	20e34 <lfs_dir_getinfo+0x20>
    return tag & 0x000003ff;
   20e8c:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
   20e90:	6060      	str	r0, [r4, #4]
   20e92:	e7cf      	b.n	20e34 <lfs_dir_getinfo+0x20>
   20e94:	000338c2 	.word	0x000338c2
   20e98:	780ffc00 	.word	0x780ffc00
   20e9c:	700ffc00 	.word	0x700ffc00

00020ea0 <lfs_dir_traverse.constprop.0>:
static int lfs_dir_traverse(lfs_t *lfs,
   20ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned sp = 0;
   20ea4:	2600      	movs	r6, #0
static int lfs_dir_traverse(lfs_t *lfs,
   20ea6:	4689      	mov	r9, r1
    unsigned sp = 0;
   20ea8:	46b0      	mov	r8, r6
static int lfs_dir_traverse(lfs_t *lfs,
   20eaa:	b0ab      	sub	sp, #172	; 0xac
   20eac:	9304      	str	r3, [sp, #16]
   20eae:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	; 0xe0
   20eb2:	f8bd b0dc 	ldrh.w	fp, [sp, #220]	; 0xdc
   20eb6:	f9bd a0e4 	ldrsh.w	sl, [sp, #228]	; 0xe4
   20eba:	9006      	str	r0, [sp, #24]
   20ebc:	9305      	str	r3, [sp, #20]
            if (off+lfs_tag_dsize(ptag) < dir->off) {
   20ebe:	9804      	ldr	r0, [sp, #16]
   20ec0:	f00d fffd 	bl	2eebe <lfs_tag_dsize>
   20ec4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20ec8:	1887      	adds	r7, r0, r2
   20eca:	429f      	cmp	r7, r3
   20ecc:	d23a      	bcs.n	20f44 <lfs_dir_traverse.constprop.0+0xa4>
                int err = lfs_bd_read(lfs,
   20ece:	2304      	movs	r3, #4
   20ed0:	9303      	str	r3, [sp, #12]
   20ed2:	ab09      	add	r3, sp, #36	; 0x24
   20ed4:	e9cd 7301 	strd	r7, r3, [sp, #4]
   20ed8:	9a06      	ldr	r2, [sp, #24]
   20eda:	f8d9 3000 	ldr.w	r3, [r9]
   20ede:	2100      	movs	r1, #0
   20ee0:	9300      	str	r3, [sp, #0]
   20ee2:	4610      	mov	r0, r2
   20ee4:	2304      	movs	r3, #4
   20ee6:	f7ff fe11 	bl	20b0c <lfs_bd_read>
                if (err) {
   20eea:	2800      	cmp	r0, #0
   20eec:	f040 8125 	bne.w	2113a <lfs_dir_traverse.constprop.0+0x29a>
	return __builtin_bswap32(a);
   20ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
   20ef2:	9a04      	ldr	r2, [sp, #16]
   20ef4:	ba1b      	rev	r3, r3
   20ef6:	405a      	eors	r2, r3
   20ef8:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
   20efc:	9309      	str	r3, [sp, #36]	; 0x24
   20efe:	9304      	str	r3, [sp, #16]
                disk.block = dir->pair[0];
   20f00:	f8d9 3000 	ldr.w	r3, [r9]
                buffer = &disk;
   20f04:	ad0a      	add	r5, sp, #40	; 0x28
                disk.block = dir->pair[0];
   20f06:	930a      	str	r3, [sp, #40]	; 0x28
                disk.off = off+sizeof(lfs_tag_t);
   20f08:	1d3b      	adds	r3, r7, #4
   20f0a:	930b      	str	r3, [sp, #44]	; 0x2c
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
   20f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
   20f0e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   20f10:	ea81 0208 	eor.w	r2, r1, r8
   20f14:	401a      	ands	r2, r3
   20f16:	4b8a      	ldr	r3, [pc, #552]	; (21140 <lfs_dir_traverse.constprop.0+0x2a0>)
   20f18:	401a      	ands	r2, r3
   20f1a:	d159      	bne.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
            if (lfs_tag_id(tmask) != 0) {
   20f1c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   20f1e:	f3c3 2389 	ubfx	r3, r3, #10, #10
   20f22:	2b00      	cmp	r3, #0
   20f24:	f000 80af 	beq.w	21086 <lfs_dir_traverse.constprop.0+0x1e6>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
   20f28:	2e02      	cmp	r6, #2
   20f2a:	d91b      	bls.n	20f64 <lfs_dir_traverse.constprop.0+0xc4>
   20f2c:	4985      	ldr	r1, [pc, #532]	; (21144 <lfs_dir_traverse.constprop.0+0x2a4>)
   20f2e:	4886      	ldr	r0, [pc, #536]	; (21148 <lfs_dir_traverse.constprop.0+0x2a8>)
   20f30:	f44f 7355 	mov.w	r3, #852	; 0x354
   20f34:	4a85      	ldr	r2, [pc, #532]	; (2114c <lfs_dir_traverse.constprop.0+0x2ac>)
   20f36:	f009 fbd0 	bl	2a6da <assert_print>
   20f3a:	f44f 7155 	mov.w	r1, #852	; 0x354
   20f3e:	4883      	ldr	r0, [pc, #524]	; (2114c <lfs_dir_traverse.constprop.0+0x2ac>)
   20f40:	f009 fbc4 	bl	2a6cc <assert_post_action>
            } else if (attrcount > 0) {
   20f44:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   20f46:	2b00      	cmp	r3, #0
   20f48:	f340 80f5 	ble.w	21136 <lfs_dir_traverse.constprop.0+0x296>
                tag = attrs[0].tag;
   20f4c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   20f4e:	4617      	mov	r7, r2
   20f50:	681b      	ldr	r3, [r3, #0]
   20f52:	9309      	str	r3, [sp, #36]	; 0x24
                buffer = attrs[0].buffer;
   20f54:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   20f56:	685d      	ldr	r5, [r3, #4]
                attrs += 1;
   20f58:	3308      	adds	r3, #8
   20f5a:	9334      	str	r3, [sp, #208]	; 0xd0
                attrcount -= 1;
   20f5c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   20f5e:	3b01      	subs	r3, #1
   20f60:	9335      	str	r3, [sp, #212]	; 0xd4
   20f62:	e7d3      	b.n	20f0c <lfs_dir_traverse.constprop.0+0x6c>
                stack[sp] = (struct lfs_dir_traverse){
   20f64:	243c      	movs	r4, #60	; 0x3c
   20f66:	4374      	muls	r4, r6
   20f68:	9804      	ldr	r0, [sp, #16]
   20f6a:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   20f6e:	446b      	add	r3, sp
   20f70:	f843 0c70 	str.w	r0, [r3, #-112]
   20f74:	9834      	ldr	r0, [sp, #208]	; 0xd0
   20f76:	f823 bc5c 	strh.w	fp, [r3, #-92]
   20f7a:	f843 0c6c 	str.w	r0, [r3, #-108]
   20f7e:	9835      	ldr	r0, [sp, #212]	; 0xd4
   20f80:	f823 ac58 	strh.w	sl, [r3, #-88]
   20f84:	f843 0c68 	str.w	r0, [r3, #-104]
   20f88:	9836      	ldr	r0, [sp, #216]	; 0xd8
                diff = 0;
   20f8a:	4692      	mov	sl, r2
                stack[sp] = (struct lfs_dir_traverse){
   20f8c:	e943 0819 	strd	r0, r8, [r3, #-100]	; 0x64
                begin = 0;
   20f90:	4693      	mov	fp, r2
                ttag = 0;
   20f92:	4690      	mov	r8, r2
                stack[sp] = (struct lfs_dir_traverse){
   20f94:	9805      	ldr	r0, [sp, #20]
   20f96:	f843 5c48 	str.w	r5, [r3, #-72]
   20f9a:	f823 0c5a 	strh.w	r0, [r3, #-90]
   20f9e:	983a      	ldr	r0, [sp, #232]	; 0xe8
   20fa0:	e943 971e 	strd	r9, r7, [r3, #-120]	; 0x78
   20fa4:	f843 0c54 	str.w	r0, [r3, #-84]
   20fa8:	983b      	ldr	r0, [sp, #236]	; 0xec
                sp += 1;
   20faa:	3601      	adds	r6, #1
                stack[sp] = (struct lfs_dir_traverse){
   20fac:	e943 0114 	strd	r0, r1, [r3, #-80]	; 0x50
   20fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   20fb4:	3b44      	subs	r3, #68	; 0x44
   20fb6:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
   20fba:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   20fbe:	eb0d 0403 	add.w	r4, sp, r3
   20fc2:	f1a4 034c 	sub.w	r3, r4, #76	; 0x4c
   20fc6:	933b      	str	r3, [sp, #236]	; 0xec
                cb = lfs_dir_traverse_filter;
   20fc8:	4b61      	ldr	r3, [pc, #388]	; (21150 <lfs_dir_traverse.constprop.0+0x2b0>)
                tmask = 0;
   20fca:	9236      	str	r2, [sp, #216]	; 0xd8
                cb = lfs_dir_traverse_filter;
   20fcc:	933a      	str	r3, [sp, #232]	; 0xe8
                end = 0;
   20fce:	9205      	str	r2, [sp, #20]
            off = 0;
   20fd0:	463a      	mov	r2, r7
   20fd2:	e774      	b.n	20ebe <lfs_dir_traverse.constprop.0+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
   20fd4:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
   20fd8:	d11c      	bne.n	21014 <lfs_dir_traverse.constprop.0+0x174>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20fda:	2400      	movs	r4, #0
   20fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    return tag & 0x000003ff;
   20fde:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   20fe2:	4294      	cmp	r4, r2
   20fe4:	d2f4      	bcs.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
   20fe6:	68a9      	ldr	r1, [r5, #8]
   20fe8:	f3c3 2389 	ubfx	r3, r3, #10, #10
   20fec:	4453      	add	r3, sl
   20fee:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   20ff2:	782b      	ldrb	r3, [r5, #0]
   20ff4:	686a      	ldr	r2, [r5, #4]
   20ff6:	f503 7340 	add.w	r3, r3, #768	; 0x300
   20ffa:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
   20ffe:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
   21002:	4798      	blx	r3
                if (res < 0) {
   21004:	2800      	cmp	r0, #0
   21006:	f2c0 8098 	blt.w	2113a <lfs_dir_traverse.constprop.0+0x29a>
                if (res) {
   2100a:	f105 050c 	add.w	r5, r5, #12
   2100e:	d1df      	bne.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
   21010:	3401      	adds	r4, #1
   21012:	e7e3      	b.n	20fdc <lfs_dir_traverse.constprop.0+0x13c>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
   21014:	eb03 218a 	add.w	r1, r3, sl, lsl #10
   21018:	462a      	mov	r2, r5
   2101a:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	; 0xe8
   2101e:	4798      	blx	r3
            if (res < 0) {
   21020:	2800      	cmp	r0, #0
   21022:	f2c0 808a 	blt.w	2113a <lfs_dir_traverse.constprop.0+0x29a>
            if (res) {
   21026:	d0d3      	beq.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
    if (sp > 0) {
   21028:	2e00      	cmp	r6, #0
   2102a:	f000 8086 	beq.w	2113a <lfs_dir_traverse.constprop.0+0x29a>
        dir         = stack[sp-1].dir;
   2102e:	233c      	movs	r3, #60	; 0x3c
   21030:	aa2a      	add	r2, sp, #168	; 0xa8
   21032:	3e01      	subs	r6, #1
   21034:	fb03 2306 	mla	r3, r3, r6, r2
        ptag        = stack[sp-1].ptag;
   21038:	f853 2c70 	ldr.w	r2, [r3, #-112]
        disk        = stack[sp-1].disk;
   2103c:	e953 0111 	ldrd	r0, r1, [r3, #-68]	; 0x44
        ptag        = stack[sp-1].ptag;
   21040:	9204      	str	r2, [sp, #16]
        attrs       = stack[sp-1].attrs;
   21042:	f853 2c6c 	ldr.w	r2, [r3, #-108]
        ttag        = stack[sp-1].ttag;
   21046:	f853 8c60 	ldr.w	r8, [r3, #-96]
        attrs       = stack[sp-1].attrs;
   2104a:	9234      	str	r2, [sp, #208]	; 0xd0
        attrcount   = stack[sp-1].attrcount;
   2104c:	f853 2c68 	ldr.w	r2, [r3, #-104]
        begin       = stack[sp-1].begin;
   21050:	f833 bc5c 	ldrh.w	fp, [r3, #-92]
        attrcount   = stack[sp-1].attrcount;
   21054:	9235      	str	r2, [sp, #212]	; 0xd4
        tmask       = stack[sp-1].tmask;
   21056:	f853 2c64 	ldr.w	r2, [r3, #-100]
        diff        = stack[sp-1].diff;
   2105a:	f933 ac58 	ldrsh.w	sl, [r3, #-88]
        tmask       = stack[sp-1].tmask;
   2105e:	9236      	str	r2, [sp, #216]	; 0xd8
        end         = stack[sp-1].end;
   21060:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
        buffer      = stack[sp-1].buffer;
   21064:	f853 5c48 	ldr.w	r5, [r3, #-72]
        end         = stack[sp-1].end;
   21068:	9205      	str	r2, [sp, #20]
        cb          = stack[sp-1].cb;
   2106a:	f853 2c54 	ldr.w	r2, [r3, #-84]
        off         = stack[sp-1].off;
   2106e:	e953 971e 	ldrd	r9, r7, [r3, #-120]	; 0x78
        cb          = stack[sp-1].cb;
   21072:	923a      	str	r2, [sp, #232]	; 0xe8
        data        = stack[sp-1].data;
   21074:	f853 2c50 	ldr.w	r2, [r3, #-80]
   21078:	923b      	str	r2, [sp, #236]	; 0xec
        tag         = stack[sp-1].tag;
   2107a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
   2107e:	9209      	str	r2, [sp, #36]	; 0x24
        disk        = stack[sp-1].disk;
   21080:	aa0a      	add	r2, sp, #40	; 0x28
   21082:	e882 0003 	stmia.w	r2, {r0, r1}
        if (lfs_tag_id(tmask) != 0 &&
   21086:	9a36      	ldr	r2, [sp, #216]	; 0xd8
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   21088:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (lfs_tag_id(tmask) != 0 &&
   2108a:	f3c2 2289 	ubfx	r2, r2, #10, #10
   2108e:	b132      	cbz	r2, 2109e <lfs_dir_traverse.constprop.0+0x1fe>
    return (tag & 0x000ffc00) >> 10;
   21090:	f3c3 2289 	ubfx	r2, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
   21094:	455a      	cmp	r2, fp
   21096:	d39b      	bcc.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
   21098:	9905      	ldr	r1, [sp, #20]
   2109a:	428a      	cmp	r2, r1
   2109c:	d298      	bcs.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
    return (tag & 0x7ff00000) >> 20;
   2109e:	f3c3 520a 	ubfx	r2, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
   210a2:	2a00      	cmp	r2, #0
   210a4:	d094      	beq.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
   210a6:	f240 1101 	movw	r1, #257	; 0x101
   210aa:	428a      	cmp	r2, r1
   210ac:	d192      	bne.n	20fd4 <lfs_dir_traverse.constprop.0+0x134>
            if (cb == lfs_dir_traverse_filter) {
   210ae:	4a28      	ldr	r2, [pc, #160]	; (21150 <lfs_dir_traverse.constprop.0+0x2b0>)
   210b0:	9307      	str	r3, [sp, #28]
   210b2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
   210b4:	4293      	cmp	r3, r2
   210b6:	d08b      	beq.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
            stack[sp] = (struct lfs_dir_traverse){
   210b8:	223c      	movs	r2, #60	; 0x3c
   210ba:	ab2a      	add	r3, sp, #168	; 0xa8
   210bc:	fb02 3406 	mla	r4, r2, r6, r3
   210c0:	2100      	movs	r1, #0
   210c2:	f1a4 0078 	sub.w	r0, r4, #120	; 0x78
   210c6:	f00f fa9c 	bl	30602 <memset>
   210ca:	9b04      	ldr	r3, [sp, #16]
   210cc:	f824 bc5c 	strh.w	fp, [r4, #-92]
   210d0:	f844 3c70 	str.w	r3, [r4, #-112]
   210d4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   210d6:	f824 ac58 	strh.w	sl, [r4, #-88]
   210da:	f844 3c6c 	str.w	r3, [r4, #-108]
   210de:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   210e0:	e944 971e 	strd	r9, r7, [r4, #-120]	; 0x78
   210e4:	f844 3c68 	str.w	r3, [r4, #-104]
   210e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
            dir = buffer;
   210ea:	46a9      	mov	r9, r5
            stack[sp] = (struct lfs_dir_traverse){
   210ec:	e944 3819 	strd	r3, r8, [r4, #-100]	; 0x64
   210f0:	9b05      	ldr	r3, [sp, #20]
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
   210f2:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
            stack[sp] = (struct lfs_dir_traverse){
   210f6:	f824 3c5a 	strh.w	r3, [r4, #-90]
   210fa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
            off = 0;
   210fc:	2700      	movs	r7, #0
            stack[sp] = (struct lfs_dir_traverse){
   210fe:	f844 3c54 	str.w	r3, [r4, #-84]
   21102:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            sp += 1;
   21104:	3601      	adds	r6, #1
            stack[sp] = (struct lfs_dir_traverse){
   21106:	f844 3c50 	str.w	r3, [r4, #-80]
            uint16_t fromid = lfs_tag_size(tag);
   2110a:	9b07      	ldr	r3, [sp, #28]
   2110c:	f3c3 0b09 	ubfx	fp, r3, #0, #10
    return (tag & 0x000ffc00) >> 10;
   21110:	f3c3 2389 	ubfx	r3, r3, #10, #10
            diff = toid-fromid+diff;
   21114:	eba3 030b 	sub.w	r3, r3, fp
   21118:	4453      	add	r3, sl
   2111a:	fa0f fa83 	sxth.w	sl, r3
            attrcount = 0;
   2111e:	2300      	movs	r3, #0
            end = fromid+1;
   21120:	f10b 0201 	add.w	r2, fp, #1
   21124:	9205      	str	r2, [sp, #20]
            attrcount = 0;
   21126:	4a0b      	ldr	r2, [pc, #44]	; (21154 <lfs_dir_traverse.constprop.0+0x2b4>)
            attrs = NULL;
   21128:	9334      	str	r3, [sp, #208]	; 0xd0
            attrcount = 0;
   2112a:	e9cd 3235 	strd	r3, r2, [sp, #212]	; 0xd4
            ptag = 0xffffffff;
   2112e:	f04f 33ff 	mov.w	r3, #4294967295
   21132:	9304      	str	r3, [sp, #16]
   21134:	e74c      	b.n	20fd0 <lfs_dir_traverse.constprop.0+0x130>
                res = 0;
   21136:	2000      	movs	r0, #0
   21138:	e776      	b.n	21028 <lfs_dir_traverse.constprop.0+0x188>
}
   2113a:	b02b      	add	sp, #172	; 0xac
   2113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21140:	7ff00000 	.word	0x7ff00000
   21144:	00037b0b 	.word	0x00037b0b
   21148:	00032679 	.word	0x00032679
   2114c:	00037aaa 	.word	0x00037aaa
   21150:	00020a51 	.word	0x00020a51
   21154:	600ffc00 	.word	0x600ffc00

00021158 <lfs_dir_getread.constprop.0>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2115c:	4698      	mov	r8, r3
   2115e:	b085      	sub	sp, #20
    if (off+size > lfs->cfg->block_size) {
   21160:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21162:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   21164:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if (off+size > lfs->cfg->block_size) {
   21166:	69db      	ldr	r3, [r3, #28]
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   21168:	4615      	mov	r5, r2
    if (off+size > lfs->cfg->block_size) {
   2116a:	19a2      	adds	r2, r4, r6
   2116c:	429a      	cmp	r2, r3
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
   2116e:	4607      	mov	r7, r0
   21170:	468b      	mov	fp, r1
    if (off+size > lfs->cfg->block_size) {
   21172:	d84e      	bhi.n	21212 <lfs_dir_getread.constprop.0+0xba>
        rcache->block = LFS_BLOCK_INLINE;
   21174:	f06f 0a01 	mvn.w	sl, #1
    while (size > 0) {
   21178:	2e00      	cmp	r6, #0
   2117a:	d048      	beq.n	2120e <lfs_dir_getread.constprop.0+0xb6>
	return lfs_aligndown(a + alignment-1, alignment);
   2117c:	f108 39ff 	add.w	r9, r8, #4294967295
        if (rcache->block == LFS_BLOCK_INLINE &&
   21180:	682b      	ldr	r3, [r5, #0]
   21182:	68e8      	ldr	r0, [r5, #12]
   21184:	3302      	adds	r3, #2
   21186:	d118      	bne.n	211ba <lfs_dir_getread.constprop.0+0x62>
                off < rcache->off + rcache->size) {
   21188:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
   2118c:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
   2118e:	42a3      	cmp	r3, r4
   21190:	d913      	bls.n	211ba <lfs_dir_getread.constprop.0+0x62>
            if (off >= rcache->off) {
   21192:	42a1      	cmp	r1, r4
   21194:	d811      	bhi.n	211ba <lfs_dir_getread.constprop.0+0x62>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   21196:	eba3 0904 	sub.w	r9, r3, r4
	return (a < b) ? a : b;
   2119a:	45b1      	cmp	r9, r6
   2119c:	bf28      	it	cs
   2119e:	46b1      	movcs	r9, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   211a0:	1a61      	subs	r1, r4, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   211a2:	4401      	add	r1, r0
   211a4:	464a      	mov	r2, r9
   211a6:	9810      	ldr	r0, [sp, #64]	; 0x40
   211a8:	f00f f9f1 	bl	3058e <memcpy>
                data += diff;
   211ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
                off += diff;
   211ae:	444c      	add	r4, r9
                data += diff;
   211b0:	444b      	add	r3, r9
   211b2:	9310      	str	r3, [sp, #64]	; 0x40
                size -= diff;
   211b4:	eba6 0609 	sub.w	r6, r6, r9
                continue;
   211b8:	e7de      	b.n	21178 <lfs_dir_getread.constprop.0+0x20>
        rcache->block = LFS_BLOCK_INLINE;
   211ba:	f8c5 a000 	str.w	sl, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   211be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	return a - (a % alignment);
   211c0:	695b      	ldr	r3, [r3, #20]
   211c2:	fbb4 f2f3 	udiv	r2, r4, r3
   211c6:	fb03 4212 	mls	r2, r3, r2, r4
   211ca:	1aa2      	subs	r2, r4, r2
   211cc:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   211ce:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
   211d2:	f8dc e014 	ldr.w	lr, [ip, #20]
	return lfs_aligndown(a + alignment-1, alignment);
   211d6:	eb09 030e 	add.w	r3, r9, lr
   211da:	4423      	add	r3, r4
	return a - (a % alignment);
   211dc:	fbb3 f1fe 	udiv	r1, r3, lr
   211e0:	fb0e 3111 	mls	r1, lr, r1, r3
   211e4:	1a5b      	subs	r3, r3, r1
	return (a < b) ? a : b;
   211e6:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
   211ea:	428b      	cmp	r3, r1
   211ec:	bf28      	it	cs
   211ee:	460b      	movcs	r3, r1
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   211f0:	4659      	mov	r1, fp
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   211f2:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   211f4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   211f8:	9200      	str	r2, [sp, #0]
   211fa:	4638      	mov	r0, r7
   211fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   211fe:	4a06      	ldr	r2, [pc, #24]	; (21218 <lfs_dir_getread.constprop.0+0xc0>)
   21200:	f7ff fd5c 	bl	20cbc <lfs_dir_getslice>
        if (err < 0) {
   21204:	2800      	cmp	r0, #0
   21206:	dabb      	bge.n	21180 <lfs_dir_getread.constprop.0+0x28>
}
   21208:	b005      	add	sp, #20
   2120a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   2120e:	4630      	mov	r0, r6
   21210:	e7fa      	b.n	21208 <lfs_dir_getread.constprop.0+0xb0>
        return LFS_ERR_CORRUPT;
   21212:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21216:	e7f7      	b.n	21208 <lfs_dir_getread.constprop.0+0xb0>
   21218:	fff7fc00 	.word	0xfff7fc00

0002121c <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21220:	b093      	sub	sp, #76	; 0x4c
   21222:	af04      	add	r7, sp, #16
   21224:	4615      	mov	r5, r2
   21226:	603b      	str	r3, [r7, #0]
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   21228:	6813      	ldr	r3, [r2, #0]
   2122a:	6e82      	ldr	r2, [r0, #104]	; 0x68
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   2122c:	4680      	mov	r8, r0
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   2122e:	6a12      	ldr	r2, [r2, #32]
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
   21230:	460c      	mov	r4, r1
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
   21232:	4293      	cmp	r3, r2
   21234:	f080 821d 	bcs.w	21672 <lfs_dir_fetchmatch+0x456>
   21238:	6869      	ldr	r1, [r5, #4]
   2123a:	428a      	cmp	r2, r1
   2123c:	f240 8219 	bls.w	21672 <lfs_dir_fetchmatch+0x456>
    uint32_t revs[2] = {0, 0};
   21240:	2100      	movs	r1, #0
        int err = lfs_bd_read(lfs,
   21242:	f04f 0904 	mov.w	r9, #4
   21246:	f107 0220 	add.w	r2, r7, #32
    uint32_t revs[2] = {0, 0};
   2124a:	e9c7 1108 	strd	r1, r1, [r7, #32]
        int err = lfs_bd_read(lfs,
   2124e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   21252:	9300      	str	r3, [sp, #0]
   21254:	4602      	mov	r2, r0
   21256:	464b      	mov	r3, r9
   21258:	f8cd 900c 	str.w	r9, [sp, #12]
   2125c:	f7ff fc56 	bl	20b0c <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   21260:	4606      	mov	r6, r0
   21262:	b118      	cbz	r0, 2126c <lfs_dir_fetchmatch+0x50>
   21264:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21268:	f040 81b5 	bne.w	215d6 <lfs_dir_fetchmatch+0x3ba>
        int err = lfs_bd_read(lfs,
   2126c:	f8cd 900c 	str.w	r9, [sp, #12]
   21270:	f04f 0900 	mov.w	r9, #0
   21274:	f107 0324 	add.w	r3, r7, #36	; 0x24
   21278:	9302      	str	r3, [sp, #8]
   2127a:	f8cd 9004 	str.w	r9, [sp, #4]
   2127e:	686b      	ldr	r3, [r5, #4]
   21280:	4642      	mov	r2, r8
   21282:	9300      	str	r3, [sp, #0]
   21284:	4649      	mov	r1, r9
   21286:	2304      	movs	r3, #4
   21288:	4640      	mov	r0, r8
   2128a:	f7ff fc3f 	bl	20b0c <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
   2128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        if (err && err != LFS_ERR_CORRUPT) {
   21290:	4606      	mov	r6, r0
   21292:	2800      	cmp	r0, #0
   21294:	d04c      	beq.n	21330 <lfs_dir_fetchmatch+0x114>
   21296:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2129a:	f040 819c 	bne.w	215d6 <lfs_dir_fetchmatch+0x3ba>
   2129e:	4649      	mov	r1, r9
    dir->pair[0] = pair[(r+0)%2];
   212a0:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
    lfs_stag_t besttag = -1;
   212a4:	f04f 36ff 	mov.w	r6, #4294967295
    dir->pair[0] = pair[(r+0)%2];
   212a8:	6023      	str	r3, [r4, #0]
    dir->pair[1] = pair[(r+1)%2];
   212aa:	f081 0301 	eor.w	r3, r1, #1
   212ae:	607b      	str	r3, [r7, #4]
   212b0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   212b4:	6063      	str	r3, [r4, #4]
    dir->rev = revs[(r+0)%2];
   212b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   212ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   212be:	f851 3c18 	ldr.w	r3, [r1, #-24]
   212c2:	60a3      	str	r3, [r4, #8]
    dir->off = 0; // nonzero = found some commits
   212c4:	2300      	movs	r3, #0
   212c6:	60e3      	str	r3, [r4, #12]
   212c8:	2302      	movs	r3, #2
   212ca:	60bb      	str	r3, [r7, #8]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   212cc:	f04f 35ff 	mov.w	r5, #4294967295
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212d0:	2204      	movs	r2, #4
   212d2:	4628      	mov	r0, r5
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
   212d4:	e9c7 550a 	strd	r5, r5, [r7, #40]	; 0x28
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212d8:	f104 0108 	add.w	r1, r4, #8
   212dc:	f002 fd8a 	bl	23df4 <lfs_crc>
        bool tempsplit = false;
   212e0:	2300      	movs	r3, #0
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212e2:	46b1      	mov	r9, r6
        lfs_tag_t ptag = 0xffffffff;
   212e4:	46aa      	mov	sl, r5
        uint16_t tempcount = 0;
   212e6:	e9c7 3303 	strd	r3, r3, [r7, #12]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
   212ea:	61b8      	str	r0, [r7, #24]
        lfs_off_t off = 0;
   212ec:	617b      	str	r3, [r7, #20]
            off += lfs_tag_dsize(ptag);
   212ee:	4650      	mov	r0, sl
   212f0:	f00d fde5 	bl	2eebe <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
   212f4:	2204      	movs	r2, #4
            off += lfs_tag_dsize(ptag);
   212f6:	697b      	ldr	r3, [r7, #20]
            int err = lfs_bd_read(lfs,
   212f8:	f107 0b1c 	add.w	fp, r7, #28
            off += lfs_tag_dsize(ptag);
   212fc:	4403      	add	r3, r0
   212fe:	617b      	str	r3, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
   21300:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
            int err = lfs_bd_read(lfs,
   21304:	9203      	str	r2, [sp, #12]
   21306:	f8cd b008 	str.w	fp, [sp, #8]
   2130a:	697a      	ldr	r2, [r7, #20]
   2130c:	2100      	movs	r1, #0
   2130e:	9201      	str	r2, [sp, #4]
   21310:	6822      	ldr	r2, [r4, #0]
   21312:	4640      	mov	r0, r8
   21314:	9200      	str	r2, [sp, #0]
   21316:	69db      	ldr	r3, [r3, #28]
   21318:	4642      	mov	r2, r8
   2131a:	f7ff fbf7 	bl	20b0c <lfs_bd_read>
            if (err) {
   2131e:	4605      	mov	r5, r0
   21320:	b180      	cbz	r0, 21344 <lfs_dir_fetchmatch+0x128>
                if (err == LFS_ERR_CORRUPT) {
   21322:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21326:	f040 8155 	bne.w	215d4 <lfs_dir_fetchmatch+0x3b8>
                    dir->erased = false;
   2132a:	2300      	movs	r3, #0
                        dir->erased = false;
   2132c:	75a3      	strb	r3, [r4, #22]
                        break;
   2132e:	e02d      	b.n	2138c <lfs_dir_fetchmatch+0x170>
	return (int)(unsigned int)(a - b);
   21330:	6a3a      	ldr	r2, [r7, #32]
   21332:	1a9b      	subs	r3, r3, r2
        if (err != LFS_ERR_CORRUPT &&
   21334:	2b00      	cmp	r3, #0
   21336:	bfd4      	ite	le
   21338:	2100      	movle	r1, #0
   2133a:	2101      	movgt	r1, #1
   2133c:	e7b0      	b.n	212a0 <lfs_dir_fetchmatch+0x84>
   2133e:	2301      	movs	r3, #1
   21340:	60bb      	str	r3, [r7, #8]
   21342:	e7c3      	b.n	212cc <lfs_dir_fetchmatch+0xb0>
            crc = lfs_crc(crc, &tag, sizeof(tag));
   21344:	4659      	mov	r1, fp
   21346:	2204      	movs	r2, #4
   21348:	69b8      	ldr	r0, [r7, #24]
   2134a:	f002 fd53 	bl	23df4 <lfs_crc>
	return __builtin_bswap32(a);
   2134e:	69fb      	ldr	r3, [r7, #28]
   21350:	61b8      	str	r0, [r7, #24]
   21352:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
   21354:	ea8a 0b03 	eor.w	fp, sl, r3
            if (!lfs_tag_isvalid(tag)) {
   21358:	f1bb 0f00 	cmp.w	fp, #0
            tag = lfs_frombe32(tag) ^ ptag;
   2135c:	f8c7 b01c 	str.w	fp, [r7, #28]
            if (!lfs_tag_isvalid(tag)) {
   21360:	da3e      	bge.n	213e0 <lfs_dir_fetchmatch+0x1c4>
    return (tag & 0x70000000) >> 20;
   21362:	ea4f 5a1a 	mov.w	sl, sl, lsr #20
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21366:	f40a 6ae0 	and.w	sl, sl, #1792	; 0x700
   2136a:	f5ba 6fa0 	cmp.w	sl, #1280	; 0x500
                        dir->off % lfs->cfg->prog_size == 0);
   2136e:	68e3      	ldr	r3, [r4, #12]
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21370:	d109      	bne.n	21386 <lfs_dir_fetchmatch+0x16a>
                        dir->off % lfs->cfg->prog_size == 0);
   21372:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
   21376:	6992      	ldr	r2, [r2, #24]
   21378:	fbb3 f1f2 	udiv	r1, r3, r2
   2137c:	fb02 3311 	mls	r3, r2, r1, r3
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
   21380:	fab3 f583 	clz	r5, r3
   21384:	096d      	lsrs	r5, r5, #5
   21386:	f005 0501 	and.w	r5, r5, #1
   2138a:	75a5      	strb	r5, [r4, #22]
        if (dir->off > 0) {
   2138c:	68e3      	ldr	r3, [r4, #12]
   2138e:	2b00      	cmp	r3, #0
   21390:	f000 8147 	beq.w	21622 <lfs_dir_fetchmatch+0x406>
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
   21394:	4621      	mov	r1, r4
   21396:	f108 003c 	add.w	r0, r8, #60	; 0x3c
   2139a:	f00d fda8 	bl	2eeee <lfs_gstate_hasmovehere>
   2139e:	2800      	cmp	r0, #0
   213a0:	f000 8131 	beq.w	21606 <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
   213a4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
   213a8:	f3c6 2289 	ubfx	r2, r6, #10, #10
   213ac:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
   213b0:	429a      	cmp	r2, r3
   213b2:	f040 8115 	bne.w	215e0 <lfs_dir_fetchmatch+0x3c4>
            if (id) {
   213b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   213b8:	f046 4300 	orr.w	r3, r6, #2147483648	; 0x80000000
            if (id) {
   213bc:	b13a      	cbz	r2, 213ce <lfs_dir_fetchmatch+0x1b2>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   213be:	8aa1      	ldrh	r1, [r4, #20]
   213c0:	f3c3 2289 	ubfx	r2, r3, #10, #10
	return (a < b) ? a : b;
   213c4:	428a      	cmp	r2, r1
   213c6:	bf28      	it	cs
   213c8:	460a      	movcs	r2, r1
   213ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
   213cc:	800a      	strh	r2, [r1, #0]
            } else if (lfs_tag_id(besttag) < dir->count) {
   213ce:	8aa2      	ldrh	r2, [r4, #20]
   213d0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                return LFS_ERR_NOENT;
   213d4:	429a      	cmp	r2, r3
   213d6:	bf94      	ite	ls
   213d8:	2600      	movls	r6, #0
   213da:	f06f 0601 	mvnhi.w	r6, #1
   213de:	e0fa      	b.n	215d6 <lfs_dir_fetchmatch+0x3ba>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
   213e0:	4658      	mov	r0, fp
   213e2:	f00d fd6c 	bl	2eebe <lfs_tag_dsize>
   213e6:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
   213ea:	697a      	ldr	r2, [r7, #20]
   213ec:	69db      	ldr	r3, [r3, #28]
   213ee:	4410      	add	r0, r2
   213f0:	4298      	cmp	r0, r3
   213f2:	d89a      	bhi.n	2132a <lfs_dir_fetchmatch+0x10e>
    return (tag & 0x70000000) >> 20;
   213f4:	ea4f 521b 	mov.w	r2, fp, lsr #20
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   213f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   213fc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
                err = lfs_bd_read(lfs,
   21400:	6821      	ldr	r1, [r4, #0]
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
   21402:	f040 8090 	bne.w	21526 <lfs_dir_fetchmatch+0x30a>
                err = lfs_bd_read(lfs,
   21406:	2204      	movs	r2, #4
   21408:	9203      	str	r2, [sp, #12]
   2140a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2140e:	9202      	str	r2, [sp, #8]
   21410:	697a      	ldr	r2, [r7, #20]
   21412:	4640      	mov	r0, r8
   21414:	3204      	adds	r2, #4
   21416:	e9cd 1200 	strd	r1, r2, [sp]
   2141a:	4629      	mov	r1, r5
   2141c:	4642      	mov	r2, r8
   2141e:	f7ff fb75 	bl	20b0c <lfs_bd_read>
                if (err) {
   21422:	4605      	mov	r5, r0
   21424:	b130      	cbz	r0, 21434 <lfs_dir_fetchmatch+0x218>
                    if (err == LFS_ERR_CORRUPT) {
   21426:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2142a:	f040 80d3 	bne.w	215d4 <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   2142e:	f04f 0300 	mov.w	r3, #0
   21432:	e77b      	b.n	2132c <lfs_dir_fetchmatch+0x110>
                if (crc != dcrc) {
   21434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   21436:	69bb      	ldr	r3, [r7, #24]
   21438:	429a      	cmp	r2, r3
   2143a:	d1f8      	bne.n	2142e <lfs_dir_fetchmatch+0x212>
    return (tag & 0x0ff00000) >> 20;
   2143c:	69fb      	ldr	r3, [r7, #28]
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   2143e:	2204      	movs	r2, #4
    return (tag & 0x0ff00000) >> 20;
   21440:	0d1b      	lsrs	r3, r3, #20
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   21442:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
   21446:	f107 0118 	add.w	r1, r7, #24
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
   2144a:	ea8b 7bc3 	eor.w	fp, fp, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
   2144e:	f002 fcd1 	bl	23df4 <lfs_crc>
   21452:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
                dir->off = off + lfs_tag_dsize(tag);
   21456:	69f8      	ldr	r0, [r7, #28]
   21458:	f00d fd31 	bl	2eebe <lfs_tag_dsize>
   2145c:	697b      	ldr	r3, [r7, #20]
   2145e:	4418      	add	r0, r3
                dir->count = tempcount;
   21460:	693b      	ldr	r3, [r7, #16]
                dir->etag = ptag;
   21462:	e9c4 0b03 	strd	r0, fp, [r4, #12]
                dir->count = tempcount;
   21466:	82a3      	strh	r3, [r4, #20]
                dir->tail[0] = temptail[0];
   21468:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2146a:	61a3      	str	r3, [r4, #24]
                dir->tail[1] = temptail[1];
   2146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2146e:	61e3      	str	r3, [r4, #28]
                dir->split = tempsplit;
   21470:	68fb      	ldr	r3, [r7, #12]
   21472:	75e3      	strb	r3, [r4, #23]
                crc = 0xffffffff;
   21474:	f04f 33ff 	mov.w	r3, #4294967295
   21478:	61bb      	str	r3, [r7, #24]
                continue;
   2147a:	464b      	mov	r3, r9
   2147c:	464e      	mov	r6, r9
   2147e:	46da      	mov	sl, fp
   21480:	4699      	mov	r9, r3
   21482:	e734      	b.n	212ee <lfs_dir_fetchmatch+0xd2>
                crc = lfs_crc(crc, &dat, 1);
   21484:	2201      	movs	r2, #1
   21486:	69b8      	ldr	r0, [r7, #24]
   21488:	f107 0130 	add.w	r1, r7, #48	; 0x30
   2148c:	f002 fcb2 	bl	23df4 <lfs_crc>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21490:	f10a 0a01 	add.w	sl, sl, #1
                crc = lfs_crc(crc, &dat, 1);
   21494:	61b8      	str	r0, [r7, #24]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21496:	69f8      	ldr	r0, [r7, #28]
   21498:	f00d fd11 	bl	2eebe <lfs_tag_dsize>
   2149c:	4550      	cmp	r0, sl
                err = lfs_bd_read(lfs,
   2149e:	6823      	ldr	r3, [r4, #0]
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   214a0:	d91a      	bls.n	214d8 <lfs_dir_fetchmatch+0x2bc>
                err = lfs_bd_read(lfs,
   214a2:	2101      	movs	r1, #1
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   214a4:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
                err = lfs_bd_read(lfs,
   214a8:	9103      	str	r1, [sp, #12]
   214aa:	f107 0130 	add.w	r1, r7, #48	; 0x30
   214ae:	9102      	str	r1, [sp, #8]
   214b0:	6979      	ldr	r1, [r7, #20]
   214b2:	4640      	mov	r0, r8
   214b4:	4451      	add	r1, sl
   214b6:	e9cd 3100 	strd	r3, r1, [sp]
   214ba:	2100      	movs	r1, #0
   214bc:	69d3      	ldr	r3, [r2, #28]
   214be:	4642      	mov	r2, r8
   214c0:	f7ff fb24 	bl	20b0c <lfs_bd_read>
                if (err) {
   214c4:	4605      	mov	r5, r0
   214c6:	2800      	cmp	r0, #0
   214c8:	d0dc      	beq.n	21484 <lfs_dir_fetchmatch+0x268>
                    if (err == LFS_ERR_CORRUPT) {
   214ca:	f110 0f54 	cmn.w	r0, #84	; 0x54
   214ce:	f040 8081 	bne.w	215d4 <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   214d2:	f04f 0300 	mov.w	r3, #0
   214d6:	75a3      	strb	r3, [r4, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   214d8:	69fb      	ldr	r3, [r7, #28]
                err = lfs_bd_read(lfs,
   214da:	6820      	ldr	r0, [r4, #0]
    return (tag & 0x70000000) >> 20;
   214dc:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
   214de:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
   214e2:	d123      	bne.n	2152c <lfs_dir_fetchmatch+0x310>
                if (lfs_tag_id(tag) >= tempcount) {
   214e4:	693a      	ldr	r2, [r7, #16]
    return (tag & 0x000ffc00) >> 10;
   214e6:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
   214ea:	429a      	cmp	r2, r3
   214ec:	d801      	bhi.n	214f2 <lfs_dir_fetchmatch+0x2d6>
                    tempcount = lfs_tag_id(tag) + 1;
   214ee:	3301      	adds	r3, #1
   214f0:	613b      	str	r3, [r7, #16]
            if ((fmask & tag) == (fmask & ftag)) {
   214f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   214f4:	69f9      	ldr	r1, [r7, #28]
                        dir->pair[0], off+sizeof(tag)});
   214f6:	6823      	ldr	r3, [r4, #0]
            if ((fmask & tag) == (fmask & ftag)) {
   214f8:	ea81 0a02 	eor.w	sl, r1, r2
   214fc:	683a      	ldr	r2, [r7, #0]
   214fe:	ea1a 0a02 	ands.w	sl, sl, r2
   21502:	d151      	bne.n	215a8 <lfs_dir_fetchmatch+0x38c>
                int res = cb(data, tag, &(struct lfs_diskoff){
   21504:	633b      	str	r3, [r7, #48]	; 0x30
                        dir->pair[0], off+sizeof(tag)});
   21506:	697b      	ldr	r3, [r7, #20]
                int res = cb(data, tag, &(struct lfs_diskoff){
   21508:	f107 0230 	add.w	r2, r7, #48	; 0x30
                        dir->pair[0], off+sizeof(tag)});
   2150c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
   2150e:	637b      	str	r3, [r7, #52]	; 0x34
   21510:	e9d7 301a 	ldrd	r3, r0, [r7, #104]	; 0x68
   21514:	4798      	blx	r3
                if (res < 0) {
   21516:	1e05      	subs	r5, r0, #0
   21518:	da43      	bge.n	215a2 <lfs_dir_fetchmatch+0x386>
                    if (res == LFS_ERR_CORRUPT) {
   2151a:	f115 0f54 	cmn.w	r5, #84	; 0x54
   2151e:	d159      	bne.n	215d4 <lfs_dir_fetchmatch+0x3b8>
                        dir->erased = false;
   21520:	f884 a016 	strb.w	sl, [r4, #22]
                        break;
   21524:	e732      	b.n	2138c <lfs_dir_fetchmatch+0x170>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
   21526:	f04f 0a04 	mov.w	sl, #4
   2152a:	e7b4      	b.n	21496 <lfs_dir_fetchmatch+0x27a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
   2152c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   21530:	d11d      	bne.n	2156e <lfs_dir_fetchmatch+0x352>
                tempcount += lfs_tag_splice(tag);
   21532:	6938      	ldr	r0, [r7, #16]
    return (int8_t)lfs_tag_chunk(tag);
   21534:	b251      	sxtb	r1, r2
                tempcount += lfs_tag_splice(tag);
   21536:	fa40 f282 	sxtab	r2, r0, r2
   2153a:	b292      	uxth	r2, r2
   2153c:	613a      	str	r2, [r7, #16]
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
   2153e:	4a4e      	ldr	r2, [pc, #312]	; (21678 <lfs_dir_fetchmatch+0x45c>)
   21540:	ea09 0202 	and.w	r2, r9, r2
   21544:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
   21548:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
   2154c:	4293      	cmp	r3, r2
   2154e:	d102      	bne.n	21556 <lfs_dir_fetchmatch+0x33a>
                    tempbesttag |= 0x80000000;
   21550:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
   21554:	e7cd      	b.n	214f2 <lfs_dir_fetchmatch+0x2d6>
                } else if (tempbesttag != -1 &&
   21556:	f1b9 3fff 	cmp.w	r9, #4294967295
   2155a:	d0ca      	beq.n	214f2 <lfs_dir_fetchmatch+0x2d6>
   2155c:	f3c3 2389 	ubfx	r3, r3, #10, #10
   21560:	f3c9 2289 	ubfx	r2, r9, #10, #10
   21564:	4293      	cmp	r3, r2
   21566:	d8c4      	bhi.n	214f2 <lfs_dir_fetchmatch+0x2d6>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
   21568:	eb09 2981 	add.w	r9, r9, r1, lsl #10
   2156c:	e7c1      	b.n	214f2 <lfs_dir_fetchmatch+0x2d6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
   2156e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
   21572:	d1be      	bne.n	214f2 <lfs_dir_fetchmatch+0x2d6>
                tempsplit = (lfs_tag_chunk(tag) & 1);
   21574:	f002 0301 	and.w	r3, r2, #1
                err = lfs_bd_read(lfs,
   21578:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
   2157a:	60fb      	str	r3, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
   2157c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
                err = lfs_bd_read(lfs,
   21580:	9203      	str	r2, [sp, #12]
   21582:	f107 0228 	add.w	r2, r7, #40	; 0x28
   21586:	9202      	str	r2, [sp, #8]
   21588:	697a      	ldr	r2, [r7, #20]
   2158a:	2100      	movs	r1, #0
   2158c:	3204      	adds	r2, #4
   2158e:	e9cd 0200 	strd	r0, r2, [sp]
   21592:	4642      	mov	r2, r8
   21594:	4640      	mov	r0, r8
   21596:	69db      	ldr	r3, [r3, #28]
   21598:	f7ff fab8 	bl	20b0c <lfs_bd_read>
                    if (err == LFS_ERR_CORRUPT) {
   2159c:	3054      	adds	r0, #84	; 0x54
   2159e:	d1a8      	bne.n	214f2 <lfs_dir_fetchmatch+0x2d6>
   215a0:	e6c3      	b.n	2132a <lfs_dir_fetchmatch+0x10e>
                    tempbesttag = tag;
   215a2:	69fb      	ldr	r3, [r7, #28]
                if (res == LFS_CMP_EQ) {
   215a4:	d103      	bne.n	215ae <lfs_dir_fetchmatch+0x392>
                    tempbesttag = tag;
   215a6:	4699      	mov	r9, r3
   215a8:	464b      	mov	r3, r9
   215aa:	46b1      	mov	r9, r6
   215ac:	e766      	b.n	2147c <lfs_dir_fetchmatch+0x260>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
   215ae:	4a33      	ldr	r2, [pc, #204]	; (2167c <lfs_dir_fetchmatch+0x460>)
   215b0:	ea89 0103 	eor.w	r1, r9, r3
   215b4:	400a      	ands	r2, r1
   215b6:	b152      	cbz	r2, 215ce <lfs_dir_fetchmatch+0x3b2>
                } else if (res == LFS_CMP_GT &&
   215b8:	2d02      	cmp	r5, #2
   215ba:	d1f5      	bne.n	215a8 <lfs_dir_fetchmatch+0x38c>
   215bc:	f3c9 2289 	ubfx	r2, r9, #10, #10
   215c0:	f3c3 2189 	ubfx	r1, r3, #10, #10
   215c4:	428a      	cmp	r2, r1
   215c6:	d3ef      	bcc.n	215a8 <lfs_dir_fetchmatch+0x38c>
                    tempbesttag = tag | 0x80000000;
   215c8:	f043 4900 	orr.w	r9, r3, #2147483648	; 0x80000000
   215cc:	e7ec      	b.n	215a8 <lfs_dir_fetchmatch+0x38c>
                    tempbesttag = -1;
   215ce:	f04f 39ff 	mov.w	r9, #4294967295
   215d2:	e7e9      	b.n	215a8 <lfs_dir_fetchmatch+0x38c>
                return err;
   215d4:	462e      	mov	r6, r5
}
   215d6:	4630      	mov	r0, r6
   215d8:	373c      	adds	r7, #60	; 0x3c
   215da:	46bd      	mov	sp, r7
   215dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                } else if (besttag != -1 &&
   215e0:	1c71      	adds	r1, r6, #1
   215e2:	d10c      	bne.n	215fe <lfs_dir_fetchmatch+0x3e2>
            if (id) {
   215e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   215e6:	b13b      	cbz	r3, 215f8 <lfs_dir_fetchmatch+0x3dc>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   215e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
   215ec:	8aa3      	ldrh	r3, [r4, #20]
   215ee:	4293      	cmp	r3, r2
   215f0:	bf28      	it	cs
   215f2:	4613      	movcs	r3, r2
   215f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   215f6:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
   215f8:	f04f 33ff 	mov.w	r3, #4294967295
   215fc:	e6e7      	b.n	213ce <lfs_dir_fetchmatch+0x1b2>
                } else if (besttag != -1 &&
   215fe:	429a      	cmp	r2, r3
                    besttag -= LFS_MKTAG(0, 1, 0);
   21600:	bf88      	it	hi
   21602:	f5a6 6680 	subhi.w	r6, r6, #1024	; 0x400
            if (id) {
   21606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   21608:	4633      	mov	r3, r6
            if (id) {
   2160a:	b13a      	cbz	r2, 2161c <lfs_dir_fetchmatch+0x400>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
   2160c:	8aa1      	ldrh	r1, [r4, #20]
   2160e:	f3c6 2289 	ubfx	r2, r6, #10, #10
   21612:	428a      	cmp	r2, r1
   21614:	bf28      	it	cs
   21616:	460a      	movcs	r2, r1
   21618:	6e79      	ldr	r1, [r7, #100]	; 0x64
   2161a:	800a      	strh	r2, [r1, #0]
            if (lfs_tag_isvalid(besttag)) {
   2161c:	2e00      	cmp	r6, #0
   2161e:	dada      	bge.n	215d6 <lfs_dir_fetchmatch+0x3ba>
   21620:	e6d5      	b.n	213ce <lfs_dir_fetchmatch+0x1b2>
        dir->rev = revs[(r+1)%2];
   21622:	6878      	ldr	r0, [r7, #4]
   21624:	f107 0238 	add.w	r2, r7, #56	; 0x38
   21628:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   2162c:	f852 2c18 	ldr.w	r2, [r2, #-24]
    pair[0] = pair[1];
   21630:	e9d4 3100 	ldrd	r3, r1, [r4]
        dir->rev = revs[(r+1)%2];
   21634:	60a2      	str	r2, [r4, #8]
    for (int i = 0; i < 2; i++) {
   21636:	68ba      	ldr	r2, [r7, #8]
    pair[1] = t;
   21638:	e9c4 1300 	strd	r1, r3, [r4]
    for (int i = 0; i < 2; i++) {
   2163c:	2a01      	cmp	r2, #1
   2163e:	f47f ae7e 	bne.w	2133e <lfs_dir_fetchmatch+0x122>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
   21642:	466c      	mov	r4, sp
   21644:	b08c      	sub	sp, #48	; 0x30
   21646:	aa04      	add	r2, sp, #16
   21648:	480d      	ldr	r0, [pc, #52]	; (21680 <lfs_dir_fetchmatch+0x464>)
   2164a:	6253      	str	r3, [r2, #36]	; 0x24
   2164c:	6150      	str	r0, [r2, #20]
   2164e:	f44f 7300 	mov.w	r3, #512	; 0x200
   21652:	480c      	ldr	r0, [pc, #48]	; (21684 <lfs_dir_fetchmatch+0x468>)
   21654:	8513      	strh	r3, [r2, #40]	; 0x28
   21656:	6190      	str	r0, [r2, #24]
   21658:	f240 40d2 	movw	r0, #1234	; 0x4d2
   2165c:	4b0a      	ldr	r3, [pc, #40]	; (21688 <lfs_dir_fetchmatch+0x46c>)
   2165e:	e9c2 0107 	strd	r0, r1, [r2, #28]
   21662:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   21666:	4809      	ldr	r0, [pc, #36]	; (2168c <lfs_dir_fetchmatch+0x470>)
   21668:	f842 3f10 	str.w	r3, [r2, #16]!
   2166c:	f00d fd0d 	bl	2f08a <z_log_msg_static_create.constprop.0>
   21670:	46a5      	mov	sp, r4
        return LFS_ERR_CORRUPT;
   21672:	f06f 0653 	mvn.w	r6, #83	; 0x53
   21676:	e7ae      	b.n	215d6 <lfs_dir_fetchmatch+0x3ba>
   21678:	000ffc00 	.word	0x000ffc00
   2167c:	7ffffc00 	.word	0x7ffffc00
   21680:	00037b12 	.word	0x00037b12
   21684:	00037aaa 	.word	0x00037aaa
   21688:	01000006 	.word	0x01000006
   2168c:	0003158c 	.word	0x0003158c

00021690 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
   21690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    parent->tail[1] = 1;
   21694:	2301      	movs	r3, #1
   21696:	2400      	movs	r4, #0
        lfs_mdir_t *parent) {
   21698:	4605      	mov	r5, r0
   2169a:	460e      	mov	r6, r1
   2169c:	4692      	mov	sl, r2
    parent->tail[1] = 1;
   2169e:	e9c2 4306 	strd	r4, r3, [r2, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216a2:	4f17      	ldr	r7, [pc, #92]	; (21700 <lfs_fs_parent+0x70>)
   216a4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21704 <lfs_fs_parent+0x74>
   216a8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 21708 <lfs_fs_parent+0x78>
        lfs_mdir_t *parent) {
   216ac:	b088      	sub	sp, #32
    while (!lfs_pair_isnull(parent->tail)) {
   216ae:	f10a 0218 	add.w	r2, sl, #24
   216b2:	4610      	mov	r0, r2
   216b4:	f00d fbe8 	bl	2ee88 <lfs_pair_isnull>
   216b8:	b110      	cbz	r0, 216c0 <lfs_fs_parent+0x30>
    return LFS_ERR_NOENT;
   216ba:	f06f 0001 	mvn.w	r0, #1
   216be:	e018      	b.n	216f2 <lfs_fs_parent+0x62>
        if (cycle >= lfs->cfg->block_count/2) {
   216c0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   216c2:	6a1b      	ldr	r3, [r3, #32]
   216c4:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   216c8:	d216      	bcs.n	216f8 <lfs_fs_parent+0x68>
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216ca:	6833      	ldr	r3, [r6, #0]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216cc:	4651      	mov	r1, sl
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216ce:	9306      	str	r3, [sp, #24]
   216d0:	6873      	ldr	r3, [r6, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216d2:	e9cd 8000 	strd	r8, r0, [sp]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216d6:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216d8:	ab05      	add	r3, sp, #20
   216da:	e9cd 7302 	strd	r7, r3, [sp, #8]
   216de:	4628      	mov	r0, r5
   216e0:	464b      	mov	r3, r9
        cycle += 1;
   216e2:	3401      	adds	r4, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
   216e4:	9505      	str	r5, [sp, #20]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
   216e6:	f7ff fd99 	bl	2121c <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
   216ea:	2800      	cmp	r0, #0
   216ec:	d0df      	beq.n	216ae <lfs_fs_parent+0x1e>
   216ee:	1c83      	adds	r3, r0, #2
   216f0:	d0dd      	beq.n	216ae <lfs_fs_parent+0x1e>
}
   216f2:	b008      	add	sp, #32
   216f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LFS_ERR_CORRUPT;
   216f8:	f06f 0053 	mvn.w	r0, #83	; 0x53
   216fc:	e7f9      	b.n	216f2 <lfs_fs_parent+0x62>
   216fe:	bf00      	nop
   21700:	0002efb1 	.word	0x0002efb1
   21704:	20000008 	.word	0x20000008
   21708:	7ff003ff 	.word	0x7ff003ff

0002170c <lfs_dir_find>:
        const char **path, uint16_t *id) {
   2170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21710:	b08d      	sub	sp, #52	; 0x34
   21712:	4681      	mov	r9, r0
   21714:	4688      	mov	r8, r1
    const char *name = *path;
   21716:	6816      	ldr	r6, [r2, #0]
        const char **path, uint16_t *id) {
   21718:	9206      	str	r2, [sp, #24]
    if (id) {
   2171a:	9305      	str	r3, [sp, #20]
   2171c:	b11b      	cbz	r3, 21726 <lfs_dir_find+0x1a>
        *id = 0x3ff;
   2171e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   21722:	9a05      	ldr	r2, [sp, #20]
   21724:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
   21726:	f8d9 3020 	ldr.w	r3, [r9, #32]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
   2172a:	4c44      	ldr	r4, [pc, #272]	; (2183c <lfs_dir_find+0x130>)
    dir->tail[0] = lfs->root[0];
   2172c:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
   21730:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   21734:	f8c8 301c 	str.w	r3, [r8, #28]
        name += strspn(name, "/");
   21738:	4630      	mov	r0, r6
   2173a:	4941      	ldr	r1, [pc, #260]	; (21840 <lfs_dir_find+0x134>)
   2173c:	f00f f8e0 	bl	30900 <strspn>
   21740:	1835      	adds	r5, r6, r0
        lfs_size_t namelen = strcspn(name, "/");
   21742:	4628      	mov	r0, r5
   21744:	493e      	ldr	r1, [pc, #248]	; (21840 <lfs_dir_find+0x134>)
   21746:	f00f f899 	bl	3087c <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2174a:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
   2174c:	4607      	mov	r7, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2174e:	eb05 0600 	add.w	r6, r5, r0
   21752:	d123      	bne.n	2179c <lfs_dir_find+0x90>
   21754:	4602      	mov	r2, r0
   21756:	493b      	ldr	r1, [pc, #236]	; (21844 <lfs_dir_find+0x138>)
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   21758:	4628      	mov	r0, r5
   2175a:	f00e ff08 	bl	3056e <memcmp>
   2175e:	2800      	cmp	r0, #0
   21760:	d0ea      	beq.n	21738 <lfs_dir_find+0x2c>
        const char *suffix = name + namelen;
   21762:	46b2      	mov	sl, r6
        int depth = 1;
   21764:	f04f 0b01 	mov.w	fp, #1
            suffix += strspn(suffix, "/");
   21768:	4650      	mov	r0, sl
   2176a:	4935      	ldr	r1, [pc, #212]	; (21840 <lfs_dir_find+0x134>)
   2176c:	f00f f8c8 	bl	30900 <strspn>
   21770:	4482      	add	sl, r0
            sufflen = strcspn(suffix, "/");
   21772:	4650      	mov	r0, sl
   21774:	4932      	ldr	r1, [pc, #200]	; (21840 <lfs_dir_find+0x134>)
   21776:	f00f f881 	bl	3087c <strcspn>
            if (sufflen == 0) {
   2177a:	4602      	mov	r2, r0
   2177c:	b1b8      	cbz	r0, 217ae <lfs_dir_find+0xa2>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
   2177e:	2802      	cmp	r0, #2
   21780:	d111      	bne.n	217a6 <lfs_dir_find+0x9a>
   21782:	9007      	str	r0, [sp, #28]
   21784:	4930      	ldr	r1, [pc, #192]	; (21848 <lfs_dir_find+0x13c>)
   21786:	4650      	mov	r0, sl
   21788:	f00e fef1 	bl	3056e <memcmp>
   2178c:	9a07      	ldr	r2, [sp, #28]
   2178e:	b950      	cbnz	r0, 217a6 <lfs_dir_find+0x9a>
                if (depth == 0) {
   21790:	f1bb 0b01 	subs.w	fp, fp, #1
   21794:	d109      	bne.n	217aa <lfs_dir_find+0x9e>
                    name = suffix + sufflen;
   21796:	f10a 0602 	add.w	r6, sl, #2
                    goto nextname;
   2179a:	e7cd      	b.n	21738 <lfs_dir_find+0x2c>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
   2179c:	2802      	cmp	r0, #2
   2179e:	d1e0      	bne.n	21762 <lfs_dir_find+0x56>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
   217a0:	4602      	mov	r2, r0
   217a2:	4929      	ldr	r1, [pc, #164]	; (21848 <lfs_dir_find+0x13c>)
   217a4:	e7d8      	b.n	21758 <lfs_dir_find+0x4c>
                depth += 1;
   217a6:	f10b 0b01 	add.w	fp, fp, #1
            suffix += sufflen;
   217aa:	4492      	add	sl, r2
            suffix += strspn(suffix, "/");
   217ac:	e7dc      	b.n	21768 <lfs_dir_find+0x5c>
        if (name[0] == '\0') {
   217ae:	782b      	ldrb	r3, [r5, #0]
   217b0:	2b00      	cmp	r3, #0
   217b2:	d03c      	beq.n	2182e <lfs_dir_find+0x122>
        *path = name;
   217b4:	9b06      	ldr	r3, [sp, #24]
   217b6:	601d      	str	r5, [r3, #0]
    return (tag & 0x7ff00000) >> 20;
   217b8:	0d23      	lsrs	r3, r4, #20
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   217ba:	2b02      	cmp	r3, #2
   217bc:	d13b      	bne.n	21836 <lfs_dir_find+0x12a>
        if (lfs_tag_id(tag) != 0x3ff) {
   217be:	f240 33ff 	movw	r3, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   217c2:	f3c4 2489 	ubfx	r4, r4, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
   217c6:	429c      	cmp	r4, r3
   217c8:	f108 0a18 	add.w	sl, r8, #24
   217cc:	d123      	bne.n	21816 <lfs_dir_find+0x10a>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217ce:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
   217d2:	212f      	movs	r1, #47	; 0x2f
   217d4:	4628      	mov	r0, r5
   217d6:	f00f f83c 	bl	30852 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217da:	2800      	cmp	r0, #0
   217dc:	9b05      	ldr	r3, [sp, #20]
   217de:	bf18      	it	ne
   217e0:	2300      	movne	r3, #0
   217e2:	4a1a      	ldr	r2, [pc, #104]	; (2184c <lfs_dir_find+0x140>)
   217e4:	4641      	mov	r1, r8
   217e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   217ea:	4648      	mov	r0, r9
   217ec:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
   217f0:	4652      	mov	r2, sl
   217f2:	f8cd b00c 	str.w	fp, [sp, #12]
   217f6:	9700      	str	r7, [sp, #0]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
   217f8:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
   217fc:	970b      	str	r7, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
   217fe:	f7ff fd0d 	bl	2121c <lfs_dir_fetchmatch>
            if (tag < 0) {
   21802:	1e04      	subs	r4, r0, #0
   21804:	db13      	blt.n	2182e <lfs_dir_find+0x122>
            if (tag) {
   21806:	d197      	bne.n	21738 <lfs_dir_find+0x2c>
            if (!dir->split) {
   21808:	f898 3017 	ldrb.w	r3, [r8, #23]
   2180c:	2b00      	cmp	r3, #0
   2180e:	d1e0      	bne.n	217d2 <lfs_dir_find+0xc6>
                return LFS_ERR_NOENT;
   21810:	f06f 0401 	mvn.w	r4, #1
   21814:	e00b      	b.n	2182e <lfs_dir_find+0x122>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
   21816:	4b0e      	ldr	r3, [pc, #56]	; (21850 <lfs_dir_find+0x144>)
   21818:	4641      	mov	r1, r8
   2181a:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
   2181e:	4648      	mov	r0, r9
   21820:	4a0c      	ldr	r2, [pc, #48]	; (21854 <lfs_dir_find+0x148>)
   21822:	f8cd a000 	str.w	sl, [sp]
   21826:	f00d fbb7 	bl	2ef98 <lfs_dir_get>
            if (res < 0) {
   2182a:	1e04      	subs	r4, r0, #0
   2182c:	dacf      	bge.n	217ce <lfs_dir_find+0xc2>
}
   2182e:	4620      	mov	r0, r4
   21830:	b00d      	add	sp, #52	; 0x34
   21832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
   21836:	f06f 0413 	mvn.w	r4, #19
   2183a:	e7f8      	b.n	2182e <lfs_dir_find+0x122>
   2183c:	002ffc00 	.word	0x002ffc00
   21840:	000338c2 	.word	0x000338c2
   21844:	00037b3d 	.word	0x00037b3d
   21848:	00037b3c 	.word	0x00037b3c
   2184c:	0002f051 	.word	0x0002f051
   21850:	20000008 	.word	0x20000008
   21854:	700ffc00 	.word	0x700ffc00

00021858 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
   21858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2185c:	4690      	mov	r8, r2
    if (file->pos >= file->ctz.size) {
   2185e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   21860:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        void *buffer, lfs_size_t size) {
   21862:	4607      	mov	r7, r0
    if (file->pos >= file->ctz.size) {
   21864:	42b2      	cmp	r2, r6
        void *buffer, lfs_size_t size) {
   21866:	460c      	mov	r4, r1
   21868:	b085      	sub	sp, #20
    if (file->pos >= file->ctz.size) {
   2186a:	d25c      	bcs.n	21926 <lfs_file_flushedread+0xce>
    size = lfs_min(size, file->ctz.size - file->pos);
   2186c:	1ab6      	subs	r6, r6, r2
   2186e:	429e      	cmp	r6, r3
   21870:	bf28      	it	cs
   21872:	461e      	movcs	r6, r3
    nsize = size;
   21874:	46b1      	mov	r9, r6
            int err = lfs_dir_getread(lfs, &file->m,
   21876:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 2192c <lfs_file_flushedread+0xd4>
   2187a:	f101 0a40 	add.w	sl, r1, #64	; 0x40
    while (nsize > 0) {
   2187e:	f1b9 0f00 	cmp.w	r9, #0
   21882:	d101      	bne.n	21888 <lfs_file_flushedread+0x30>
    return size;
   21884:	4630      	mov	r0, r6
   21886:	e018      	b.n	218ba <lfs_file_flushedread+0x62>
        if (!(file->flags & LFS_F_READING) ||
   21888:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2188a:	0351      	lsls	r1, r2, #13
   2188c:	d504      	bpl.n	21898 <lfs_file_flushedread+0x40>
                file->off == lfs->cfg->block_size) {
   2188e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
        if (!(file->flags & LFS_F_READING) ||
   21890:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   21892:	69db      	ldr	r3, [r3, #28]
   21894:	4299      	cmp	r1, r3
   21896:	d11b      	bne.n	218d0 <lfs_file_flushedread+0x78>
            if (!(file->flags & LFS_F_INLINE)) {
   21898:	02d2      	lsls	r2, r2, #11
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2189a:	6b63      	ldr	r3, [r4, #52]	; 0x34
            if (!(file->flags & LFS_F_INLINE)) {
   2189c:	d410      	bmi.n	218c0 <lfs_file_flushedread+0x68>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2189e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   218a2:	9202      	str	r2, [sp, #8]
   218a4:	f104 0238 	add.w	r2, r4, #56	; 0x38
   218a8:	e9cd 3200 	strd	r3, r2, [sp]
   218ac:	4651      	mov	r1, sl
   218ae:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   218b2:	4638      	mov	r0, r7
   218b4:	f00d fc3f 	bl	2f136 <lfs_ctz_find.constprop.0>
                if (err) {
   218b8:	b130      	cbz	r0, 218c8 <lfs_file_flushedread+0x70>
}
   218ba:	b005      	add	sp, #20
   218bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                file->block = LFS_BLOCK_INLINE;
   218c0:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
   218c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
            file->flags |= LFS_F_READING;
   218c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   218ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   218ce:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   218d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   218d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   218d4:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
   218d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   218d8:	1a9d      	subs	r5, r3, r2
   218da:	454d      	cmp	r5, r9
   218dc:	bf28      	it	cs
   218de:	464d      	movcs	r5, r9
        if (file->flags & LFS_F_INLINE) {
   218e0:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
            int err = lfs_dir_getread(lfs, &file->m,
   218e4:	e9cd 8502 	strd	r8, r5, [sp, #8]
   218e8:	9201      	str	r2, [sp, #4]
        if (file->flags & LFS_F_INLINE) {
   218ea:	d015      	beq.n	21918 <lfs_file_flushedread+0xc0>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   218ec:	88a2      	ldrh	r2, [r4, #4]
            int err = lfs_dir_getread(lfs, &file->m,
   218ee:	4638      	mov	r0, r7
   218f0:	ea4b 2282 	orr.w	r2, fp, r2, lsl #10
   218f4:	9200      	str	r2, [sp, #0]
   218f6:	f104 0108 	add.w	r1, r4, #8
   218fa:	4652      	mov	r2, sl
   218fc:	f7ff fc2c 	bl	21158 <lfs_dir_getread.constprop.0>
            if (err) {
   21900:	2800      	cmp	r0, #0
   21902:	d1da      	bne.n	218ba <lfs_file_flushedread+0x62>
        file->pos += diff;
   21904:	6b63      	ldr	r3, [r4, #52]	; 0x34
        data += diff;
   21906:	44a8      	add	r8, r5
        file->pos += diff;
   21908:	442b      	add	r3, r5
   2190a:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   2190c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   2190e:	eba9 0905 	sub.w	r9, r9, r5
        file->off += diff;
   21912:	442b      	add	r3, r5
   21914:	63e3      	str	r3, [r4, #60]	; 0x3c
        nsize -= diff;
   21916:	e7b2      	b.n	2187e <lfs_file_flushedread+0x26>
            int err = lfs_bd_read(lfs,
   21918:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2191a:	4638      	mov	r0, r7
   2191c:	9200      	str	r2, [sp, #0]
   2191e:	4652      	mov	r2, sl
   21920:	f7ff f8f4 	bl	20b0c <lfs_bd_read>
   21924:	e7ec      	b.n	21900 <lfs_file_flushedread+0xa8>
        return 0;
   21926:	2000      	movs	r0, #0
   21928:	e7c7      	b.n	218ba <lfs_file_flushedread+0x62>
   2192a:	bf00      	nop
   2192c:	20100000 	.word	0x20100000

00021930 <lfs_fs_rawtraverse>:
        bool includeorphans) {
   21930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21934:	b091      	sub	sp, #68	; 0x44
   21936:	4604      	mov	r4, r0
   21938:	460d      	mov	r5, r1
   2193a:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
   2193c:	2100      	movs	r1, #0
   2193e:	221c      	movs	r2, #28
   21940:	a808      	add	r0, sp, #32
        bool includeorphans) {
   21942:	9305      	str	r3, [sp, #20]
    lfs_mdir_t dir = {.tail = {0, 1}};
   21944:	f00e fe5d 	bl	30602 <memset>
   21948:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   2194a:	f04f 0800 	mov.w	r8, #0
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   2194e:	f240 2902 	movw	r9, #514	; 0x202
    lfs_mdir_t dir = {.tail = {0, 1}};
   21952:	930f      	str	r3, [sp, #60]	; 0x3c
    while (!lfs_pair_isnull(dir.tail)) {
   21954:	a80e      	add	r0, sp, #56	; 0x38
   21956:	f00d fa97 	bl	2ee88 <lfs_pair_isnull>
   2195a:	b120      	cbz	r0, 21966 <lfs_fs_rawtraverse+0x36>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   2195c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   2195e:	2f00      	cmp	r7, #0
   21960:	d155      	bne.n	21a0e <lfs_fs_rawtraverse+0xde>
    return 0;
   21962:	4638      	mov	r0, r7
   21964:	e041      	b.n	219ea <lfs_fs_rawtraverse+0xba>
        if (cycle >= lfs->cfg->block_count/2) {
   21966:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21968:	6a1b      	ldr	r3, [r3, #32]
   2196a:	ebb8 0f53 	cmp.w	r8, r3, lsr #1
   2196e:	d27b      	bcs.n	21a68 <lfs_fs_rawtraverse+0x138>
            int err = cb(data, dir.tail[i]);
   21970:	4630      	mov	r0, r6
   21972:	990e      	ldr	r1, [sp, #56]	; 0x38
        cycle += 1;
   21974:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
   21978:	47a8      	blx	r5
            if (err) {
   2197a:	2800      	cmp	r0, #0
   2197c:	d135      	bne.n	219ea <lfs_fs_rawtraverse+0xba>
            int err = cb(data, dir.tail[i]);
   2197e:	4630      	mov	r0, r6
   21980:	990f      	ldr	r1, [sp, #60]	; 0x3c
   21982:	47a8      	blx	r5
            if (err) {
   21984:	bb88      	cbnz	r0, 219ea <lfs_fs_rawtraverse+0xba>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
   21986:	4620      	mov	r0, r4
   21988:	aa0e      	add	r2, sp, #56	; 0x38
   2198a:	a908      	add	r1, sp, #32
   2198c:	f00d fb80 	bl	2f090 <lfs_dir_fetch>
        if (err) {
   21990:	bb58      	cbnz	r0, 219ea <lfs_fs_rawtraverse+0xba>
   21992:	4607      	mov	r7, r0
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   21994:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 21a70 <lfs_fs_rawtraverse+0x140>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   21998:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 21a74 <lfs_fs_rawtraverse+0x144>
        for (uint16_t id = 0; id < dir.count; id++) {
   2199c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   219a0:	b2bb      	uxth	r3, r7
   219a2:	429a      	cmp	r2, r3
   219a4:	d9d6      	bls.n	21954 <lfs_fs_rawtraverse+0x24>
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   219a6:	aa06      	add	r2, sp, #24
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
   219a8:	ea0a 2387 	and.w	r3, sl, r7, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
   219ac:	9200      	str	r2, [sp, #0]
   219ae:	4620      	mov	r0, r4
   219b0:	4a31      	ldr	r2, [pc, #196]	; (21a78 <lfs_fs_rawtraverse+0x148>)
   219b2:	ea43 030b 	orr.w	r3, r3, fp
   219b6:	a908      	add	r1, sp, #32
   219b8:	f00d faee 	bl	2ef98 <lfs_dir_get>
            if (tag < 0) {
   219bc:	2800      	cmp	r0, #0
   219be:	da03      	bge.n	219c8 <lfs_fs_rawtraverse+0x98>
                if (tag == LFS_ERR_NOENT) {
   219c0:	1c83      	adds	r3, r0, #2
   219c2:	d112      	bne.n	219ea <lfs_fs_rawtraverse+0xba>
        for (uint16_t id = 0; id < dir.count; id++) {
   219c4:	3701      	adds	r7, #1
   219c6:	e7e9      	b.n	2199c <lfs_fs_rawtraverse+0x6c>
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   219c8:	ebb9 5f10 	cmp.w	r9, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
   219cc:	ea4f 5310 	mov.w	r3, r0, lsr #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
   219d0:	d10e      	bne.n	219f0 <lfs_fs_rawtraverse+0xc0>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
   219d2:	9b07      	ldr	r3, [sp, #28]
   219d4:	4622      	mov	r2, r4
   219d6:	9300      	str	r3, [sp, #0]
   219d8:	2100      	movs	r1, #0
   219da:	4620      	mov	r0, r4
   219dc:	e9cd 5601 	strd	r5, r6, [sp, #4]
   219e0:	9b06      	ldr	r3, [sp, #24]
   219e2:	f00d fbf1 	bl	2f1c8 <lfs_ctz_traverse>
                    if (err) {
   219e6:	2800      	cmp	r0, #0
   219e8:	d0ec      	beq.n	219c4 <lfs_fs_rawtraverse+0x94>
}
   219ea:	b011      	add	sp, #68	; 0x44
   219ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (includeorphans &&
   219f0:	9a05      	ldr	r2, [sp, #20]
   219f2:	2a00      	cmp	r2, #0
   219f4:	d0e6      	beq.n	219c4 <lfs_fs_rawtraverse+0x94>
   219f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   219fa:	d1e3      	bne.n	219c4 <lfs_fs_rawtraverse+0x94>
                    err = cb(data, (&ctz.head)[i]);
   219fc:	4630      	mov	r0, r6
   219fe:	9906      	ldr	r1, [sp, #24]
   21a00:	47a8      	blx	r5
                    if (err) {
   21a02:	2800      	cmp	r0, #0
   21a04:	d1f1      	bne.n	219ea <lfs_fs_rawtraverse+0xba>
                    err = cb(data, (&ctz.head)[i]);
   21a06:	4630      	mov	r0, r6
   21a08:	9907      	ldr	r1, [sp, #28]
   21a0a:	47a8      	blx	r5
   21a0c:	e7eb      	b.n	219e6 <lfs_fs_rawtraverse+0xb6>
        if (f->type != LFS_TYPE_REG) {
   21a0e:	79bb      	ldrb	r3, [r7, #6]
   21a10:	2b01      	cmp	r3, #1
   21a12:	d001      	beq.n	21a18 <lfs_fs_rawtraverse+0xe8>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   21a14:	683f      	ldr	r7, [r7, #0]
   21a16:	e7a2      	b.n	2195e <lfs_fs_rawtraverse+0x2e>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
   21a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a1a:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
   21a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   21a22:	d013      	beq.n	21a4c <lfs_fs_rawtraverse+0x11c>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
   21a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21a26:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
   21a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   21a2e:	d1f1      	bne.n	21a14 <lfs_fs_rawtraverse+0xe4>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   21a30:	e9cd 5601 	strd	r5, r6, [sp, #4]
   21a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21a36:	4622      	mov	r2, r4
   21a38:	9300      	str	r3, [sp, #0]
   21a3a:	4620      	mov	r0, r4
   21a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21a3e:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21a42:	f00d fbc1 	bl	2f1c8 <lfs_ctz_traverse>
            if (err) {
   21a46:	2800      	cmp	r0, #0
   21a48:	d0e4      	beq.n	21a14 <lfs_fs_rawtraverse+0xe4>
   21a4a:	e7ce      	b.n	219ea <lfs_fs_rawtraverse+0xba>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
   21a4c:	e9cd 5601 	strd	r5, r6, [sp, #4]
   21a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21a52:	4622      	mov	r2, r4
   21a54:	9300      	str	r3, [sp, #0]
   21a56:	4620      	mov	r0, r4
   21a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21a5a:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21a5e:	f00d fbb3 	bl	2f1c8 <lfs_ctz_traverse>
            if (err) {
   21a62:	2800      	cmp	r0, #0
   21a64:	d0de      	beq.n	21a24 <lfs_fs_rawtraverse+0xf4>
   21a66:	e7c0      	b.n	219ea <lfs_fs_rawtraverse+0xba>
            return LFS_ERR_CORRUPT;
   21a68:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21a6c:	e7bd      	b.n	219ea <lfs_fs_rawtraverse+0xba>
   21a6e:	bf00      	nop
   21a70:	03fffc00 	.word	0x03fffc00
   21a74:	20000008 	.word	0x20000008
   21a78:	700ffc00 	.word	0x700ffc00

00021a7c <lfs_fs_rawsize>:
    *size += 1;
    return 0;
}

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
    lfs_size_t size = 0;
   21a7c:	2300      	movs	r3, #0
static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
   21a7e:	b507      	push	{r0, r1, r2, lr}
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
   21a80:	4904      	ldr	r1, [pc, #16]	; (21a94 <lfs_fs_rawsize+0x18>)
   21a82:	aa01      	add	r2, sp, #4
    lfs_size_t size = 0;
   21a84:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
   21a86:	f7ff ff53 	bl	21930 <lfs_fs_rawtraverse>
    if (err) {
   21a8a:	b900      	cbnz	r0, 21a8e <lfs_fs_rawsize+0x12>
        return err;
    }

    return size;
   21a8c:	9801      	ldr	r0, [sp, #4]
}
   21a8e:	b003      	add	sp, #12
   21a90:	f85d fb04 	ldr.w	pc, [sp], #4
   21a94:	0002ef63 	.word	0x0002ef63

00021a98 <lfs_bd_erase.isra.0>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   21a98:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->cfg->block_count);
   21a9a:	6a02      	ldr	r2, [r0, #32]
   21a9c:	428a      	cmp	r2, r1
   21a9e:	d80b      	bhi.n	21ab8 <lfs_bd_erase.isra.0+0x20>
   21aa0:	490d      	ldr	r1, [pc, #52]	; (21ad8 <lfs_bd_erase.isra.0+0x40>)
   21aa2:	f240 1303 	movw	r3, #259	; 0x103
   21aa6:	4a0d      	ldr	r2, [pc, #52]	; (21adc <lfs_bd_erase.isra.0+0x44>)
   21aa8:	480d      	ldr	r0, [pc, #52]	; (21ae0 <lfs_bd_erase.isra.0+0x48>)
   21aaa:	f008 fe16 	bl	2a6da <assert_print>
   21aae:	f240 1103 	movw	r1, #259	; 0x103
    LFS_ASSERT(err <= 0);
   21ab2:	480a      	ldr	r0, [pc, #40]	; (21adc <lfs_bd_erase.isra.0+0x44>)
   21ab4:	f008 fe0a 	bl	2a6cc <assert_post_action>
    int err = lfs->cfg->erase(lfs->cfg, block);
   21ab8:	68c3      	ldr	r3, [r0, #12]
   21aba:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   21abc:	2800      	cmp	r0, #0
   21abe:	dd09      	ble.n	21ad4 <lfs_bd_erase.isra.0+0x3c>
   21ac0:	4908      	ldr	r1, [pc, #32]	; (21ae4 <lfs_bd_erase.isra.0+0x4c>)
   21ac2:	f240 1305 	movw	r3, #261	; 0x105
   21ac6:	4a05      	ldr	r2, [pc, #20]	; (21adc <lfs_bd_erase.isra.0+0x44>)
   21ac8:	4805      	ldr	r0, [pc, #20]	; (21ae0 <lfs_bd_erase.isra.0+0x48>)
   21aca:	f008 fe06 	bl	2a6da <assert_print>
   21ace:	f240 1105 	movw	r1, #261	; 0x105
   21ad2:	e7ee      	b.n	21ab2 <lfs_bd_erase.isra.0+0x1a>
}
   21ad4:	bd08      	pop	{r3, pc}
   21ad6:	bf00      	nop
   21ad8:	00037dbe 	.word	0x00037dbe
   21adc:	00037aaa 	.word	0x00037aaa
   21ae0:	00032679 	.word	0x00032679
   21ae4:	00037b02 	.word	0x00037b02

00021ae8 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   21ae8:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
   21aea:	6681      	str	r1, [r0, #104]	; 0x68
    LFS_ASSERT(lfs->cfg->read_size != 0);
   21aec:	694d      	ldr	r5, [r1, #20]
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   21aee:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->read_size != 0);
   21af0:	b95d      	cbnz	r5, 21b0a <lfs_init+0x22>
   21af2:	4988      	ldr	r1, [pc, #544]	; (21d14 <lfs_init+0x22c>)
   21af4:	f640 734e 	movw	r3, #3918	; 0xf4e
   21af8:	4a87      	ldr	r2, [pc, #540]	; (21d18 <lfs_init+0x230>)
   21afa:	4888      	ldr	r0, [pc, #544]	; (21d1c <lfs_init+0x234>)
   21afc:	f008 fded 	bl	2a6da <assert_print>
   21b00:	f640 714e 	movw	r1, #3918	; 0xf4e
    LFS_ASSERT(lfs->cfg->prog_size != 0);
   21b04:	4884      	ldr	r0, [pc, #528]	; (21d18 <lfs_init+0x230>)
   21b06:	f008 fde1 	bl	2a6cc <assert_post_action>
   21b0a:	698a      	ldr	r2, [r1, #24]
   21b0c:	b94a      	cbnz	r2, 21b22 <lfs_init+0x3a>
   21b0e:	4984      	ldr	r1, [pc, #528]	; (21d20 <lfs_init+0x238>)
   21b10:	f640 734f 	movw	r3, #3919	; 0xf4f
   21b14:	4a80      	ldr	r2, [pc, #512]	; (21d18 <lfs_init+0x230>)
   21b16:	4881      	ldr	r0, [pc, #516]	; (21d1c <lfs_init+0x234>)
   21b18:	f008 fddf 	bl	2a6da <assert_print>
   21b1c:	f640 714f 	movw	r1, #3919	; 0xf4f
   21b20:	e7f0      	b.n	21b04 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
   21b22:	6a88      	ldr	r0, [r1, #40]	; 0x28
   21b24:	b948      	cbnz	r0, 21b3a <lfs_init+0x52>
   21b26:	497f      	ldr	r1, [pc, #508]	; (21d24 <lfs_init+0x23c>)
   21b28:	f44f 6375 	mov.w	r3, #3920	; 0xf50
   21b2c:	4a7a      	ldr	r2, [pc, #488]	; (21d18 <lfs_init+0x230>)
   21b2e:	487b      	ldr	r0, [pc, #492]	; (21d1c <lfs_init+0x234>)
   21b30:	f008 fdd3 	bl	2a6da <assert_print>
   21b34:	f44f 6175 	mov.w	r1, #3920	; 0xf50
   21b38:	e7e4      	b.n	21b04 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
   21b3a:	fbb0 f3f5 	udiv	r3, r0, r5
   21b3e:	fb05 0313 	mls	r3, r5, r3, r0
   21b42:	b14b      	cbz	r3, 21b58 <lfs_init+0x70>
   21b44:	4978      	ldr	r1, [pc, #480]	; (21d28 <lfs_init+0x240>)
   21b46:	f640 7354 	movw	r3, #3924	; 0xf54
   21b4a:	4a73      	ldr	r2, [pc, #460]	; (21d18 <lfs_init+0x230>)
   21b4c:	4873      	ldr	r0, [pc, #460]	; (21d1c <lfs_init+0x234>)
   21b4e:	f008 fdc4 	bl	2a6da <assert_print>
   21b52:	f640 7154 	movw	r1, #3924	; 0xf54
   21b56:	e7d5      	b.n	21b04 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
   21b58:	fbb0 f3f2 	udiv	r3, r0, r2
   21b5c:	fb02 0313 	mls	r3, r2, r3, r0
   21b60:	b14b      	cbz	r3, 21b76 <lfs_init+0x8e>
   21b62:	4972      	ldr	r1, [pc, #456]	; (21d2c <lfs_init+0x244>)
   21b64:	f640 7355 	movw	r3, #3925	; 0xf55
   21b68:	4a6b      	ldr	r2, [pc, #428]	; (21d18 <lfs_init+0x230>)
   21b6a:	486c      	ldr	r0, [pc, #432]	; (21d1c <lfs_init+0x234>)
   21b6c:	f008 fdb5 	bl	2a6da <assert_print>
   21b70:	f640 7155 	movw	r1, #3925	; 0xf55
   21b74:	e7c6      	b.n	21b04 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
   21b76:	69ca      	ldr	r2, [r1, #28]
   21b78:	fbb2 f3f0 	udiv	r3, r2, r0
   21b7c:	fb00 2313 	mls	r3, r0, r3, r2
   21b80:	b14b      	cbz	r3, 21b96 <lfs_init+0xae>
   21b82:	496b      	ldr	r1, [pc, #428]	; (21d30 <lfs_init+0x248>)
   21b84:	f640 7356 	movw	r3, #3926	; 0xf56
   21b88:	4a63      	ldr	r2, [pc, #396]	; (21d18 <lfs_init+0x230>)
   21b8a:	4864      	ldr	r0, [pc, #400]	; (21d1c <lfs_init+0x234>)
   21b8c:	f008 fda5 	bl	2a6da <assert_print>
   21b90:	f640 7156 	movw	r1, #3926	; 0xf56
   21b94:	e7b6      	b.n	21b04 <lfs_init+0x1c>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
   21b96:	f04f 33ff 	mov.w	r3, #4294967295
   21b9a:	f1a2 0508 	sub.w	r5, r2, #8
   21b9e:	fbb3 f3f5 	udiv	r3, r3, r5
	return 32 - __builtin_clz(a-1);
   21ba2:	3b01      	subs	r3, #1
   21ba4:	fab3 f383 	clz	r3, r3
   21ba8:	f1c3 0320 	rsb	r3, r3, #32
   21bac:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   21bb0:	d209      	bcs.n	21bc6 <lfs_init+0xde>
   21bb2:	4960      	ldr	r1, [pc, #384]	; (21d34 <lfs_init+0x24c>)
   21bb4:	f640 7359 	movw	r3, #3929	; 0xf59
   21bb8:	4a57      	ldr	r2, [pc, #348]	; (21d18 <lfs_init+0x230>)
   21bba:	4858      	ldr	r0, [pc, #352]	; (21d1c <lfs_init+0x234>)
   21bbc:	f008 fd8d 	bl	2a6da <assert_print>
   21bc0:	f640 7159 	movw	r1, #3929	; 0xf59
   21bc4:	e79e      	b.n	21b04 <lfs_init+0x1c>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
   21bc6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   21bc8:	b94b      	cbnz	r3, 21bde <lfs_init+0xf6>
   21bca:	495b      	ldr	r1, [pc, #364]	; (21d38 <lfs_init+0x250>)
   21bcc:	f640 7362 	movw	r3, #3938	; 0xf62
   21bd0:	4a51      	ldr	r2, [pc, #324]	; (21d18 <lfs_init+0x230>)
   21bd2:	4852      	ldr	r0, [pc, #328]	; (21d1c <lfs_init+0x234>)
   21bd4:	f008 fd81 	bl	2a6da <assert_print>
   21bd8:	f640 7162 	movw	r1, #3938	; 0xf62
   21bdc:	e792      	b.n	21b04 <lfs_init+0x1c>
    if (lfs->cfg->read_buffer) {
   21bde:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   21be0:	b1d3      	cbz	r3, 21c18 <lfs_init+0x130>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   21be2:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
   21be4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   21be8:	b30a      	cbz	r2, 21c2e <lfs_init+0x146>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   21bea:	61e2      	str	r2, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
   21bec:	4621      	mov	r1, r4
   21bee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   21bf0:	f00d fb23 	bl	2f23a <lfs_cache_zero.isra.0>
    lfs_cache_zero(lfs, &lfs->pcache);
   21bf4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   21bf6:	f104 0110 	add.w	r1, r4, #16
   21bfa:	f00d fb1e 	bl	2f23a <lfs_cache_zero.isra.0>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
   21bfe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21c00:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   21c02:	b9d8      	cbnz	r0, 21c3c <lfs_init+0x154>
   21c04:	494d      	ldr	r1, [pc, #308]	; (21d3c <lfs_init+0x254>)
   21c06:	f44f 6378 	mov.w	r3, #3968	; 0xf80
   21c0a:	4a43      	ldr	r2, [pc, #268]	; (21d18 <lfs_init+0x230>)
   21c0c:	4843      	ldr	r0, [pc, #268]	; (21d1c <lfs_init+0x234>)
   21c0e:	f008 fd64 	bl	2a6da <assert_print>
   21c12:	f44f 6178 	mov.w	r1, #3968	; 0xf80
   21c16:	e775      	b.n	21b04 <lfs_init+0x1c>
/* Allocate memory, only used if buffers are not provided to littlefs */
/* Note, memory must be 64-bit aligned */
static inline void *lfs_malloc(size_t size)
{
#ifndef LFS_NO_MALLOC
	return malloc(size);
   21c18:	f006 fd5c 	bl	286d4 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   21c1c:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   21c1e:	2800      	cmp	r0, #0
   21c20:	d1e0      	bne.n	21be4 <lfs_init+0xfc>
    lfs_deinit(lfs);
   21c22:	4620      	mov	r0, r4
   21c24:	f00d f9a2 	bl	2ef6c <lfs_deinit>
    return err;
   21c28:	f06f 000b 	mvn.w	r0, #11
   21c2c:	e071      	b.n	21d12 <lfs_init+0x22a>
   21c2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
   21c30:	f006 fd50 	bl	286d4 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   21c34:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   21c36:	2800      	cmp	r0, #0
   21c38:	d1d8      	bne.n	21bec <lfs_init+0x104>
   21c3a:	e7f2      	b.n	21c22 <lfs_init+0x13a>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
   21c3c:	0741      	lsls	r1, r0, #29
   21c3e:	d102      	bne.n	21c46 <lfs_init+0x15e>
   21c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   21c42:	079a      	lsls	r2, r3, #30
   21c44:	d009      	beq.n	21c5a <lfs_init+0x172>
   21c46:	493e      	ldr	r1, [pc, #248]	; (21d40 <lfs_init+0x258>)
   21c48:	f640 7381 	movw	r3, #3969	; 0xf81
   21c4c:	4a32      	ldr	r2, [pc, #200]	; (21d18 <lfs_init+0x230>)
   21c4e:	4833      	ldr	r0, [pc, #204]	; (21d1c <lfs_init+0x234>)
   21c50:	f008 fd43 	bl	2a6da <assert_print>
   21c54:	f640 7181 	movw	r1, #3969	; 0xf81
   21c58:	e754      	b.n	21b04 <lfs_init+0x1c>
    if (lfs->cfg->lookahead_buffer) {
   21c5a:	b173      	cbz	r3, 21c7a <lfs_init+0x192>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   21c5c:	6663      	str	r3, [r4, #100]	; 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
   21c5e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   21c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   21c62:	2aff      	cmp	r2, #255	; 0xff
   21c64:	d90f      	bls.n	21c86 <lfs_init+0x19e>
   21c66:	4937      	ldr	r1, [pc, #220]	; (21d44 <lfs_init+0x25c>)
   21c68:	f640 738e 	movw	r3, #3982	; 0xf8e
   21c6c:	4a2a      	ldr	r2, [pc, #168]	; (21d18 <lfs_init+0x230>)
   21c6e:	482b      	ldr	r0, [pc, #172]	; (21d1c <lfs_init+0x234>)
   21c70:	f008 fd33 	bl	2a6da <assert_print>
   21c74:	f640 718e 	movw	r1, #3982	; 0xf8e
   21c78:	e744      	b.n	21b04 <lfs_init+0x1c>
   21c7a:	f006 fd2b 	bl	286d4 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   21c7e:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   21c80:	2800      	cmp	r0, #0
   21c82:	d1ec      	bne.n	21c5e <lfs_init+0x176>
   21c84:	e7cd      	b.n	21c22 <lfs_init+0x13a>
        lfs->name_max = LFS_NAME_MAX;
   21c86:	2a00      	cmp	r2, #0
   21c88:	bf08      	it	eq
   21c8a:	22ff      	moveq	r2, #255	; 0xff
   21c8c:	66e2      	str	r2, [r4, #108]	; 0x6c
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
   21c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   21c90:	2a00      	cmp	r2, #0
   21c92:	da09      	bge.n	21ca8 <lfs_init+0x1c0>
   21c94:	492c      	ldr	r1, [pc, #176]	; (21d48 <lfs_init+0x260>)
   21c96:	f640 7394 	movw	r3, #3988	; 0xf94
   21c9a:	4a1f      	ldr	r2, [pc, #124]	; (21d18 <lfs_init+0x230>)
   21c9c:	481f      	ldr	r0, [pc, #124]	; (21d1c <lfs_init+0x234>)
   21c9e:	f008 fd1c 	bl	2a6da <assert_print>
   21ca2:	f640 7194 	movw	r1, #3988	; 0xf94
   21ca6:	e72d      	b.n	21b04 <lfs_init+0x1c>
        lfs->file_max = LFS_FILE_MAX;
   21ca8:	bf08      	it	eq
   21caa:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
   21cae:	f240 31fe 	movw	r1, #1022	; 0x3fe
   21cb2:	6722      	str	r2, [r4, #112]	; 0x70
   21cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   21cb6:	428a      	cmp	r2, r1
   21cb8:	d909      	bls.n	21cce <lfs_init+0x1e6>
   21cba:	4924      	ldr	r1, [pc, #144]	; (21d4c <lfs_init+0x264>)
   21cbc:	f640 739a 	movw	r3, #3994	; 0xf9a
   21cc0:	4a15      	ldr	r2, [pc, #84]	; (21d18 <lfs_init+0x230>)
   21cc2:	4816      	ldr	r0, [pc, #88]	; (21d1c <lfs_init+0x234>)
   21cc4:	f008 fd09 	bl	2a6da <assert_print>
   21cc8:	f640 719a 	movw	r1, #3994	; 0xf9a
   21ccc:	e71a      	b.n	21b04 <lfs_init+0x1c>
        lfs->attr_max = LFS_ATTR_MAX;
   21cce:	2a00      	cmp	r2, #0
   21cd0:	bf08      	it	eq
   21cd2:	460a      	moveq	r2, r1
   21cd4:	6762      	str	r2, [r4, #116]	; 0x74
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
   21cd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   21cd8:	69db      	ldr	r3, [r3, #28]
   21cda:	429a      	cmp	r2, r3
   21cdc:	d909      	bls.n	21cf2 <lfs_init+0x20a>
   21cde:	491c      	ldr	r1, [pc, #112]	; (21d50 <lfs_init+0x268>)
   21ce0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
   21ce4:	4a0c      	ldr	r2, [pc, #48]	; (21d18 <lfs_init+0x230>)
   21ce6:	480d      	ldr	r0, [pc, #52]	; (21d1c <lfs_init+0x234>)
   21ce8:	f008 fcf7 	bl	2a6da <assert_print>
   21cec:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   21cf0:	e708      	b.n	21b04 <lfs_init+0x1c>
    lfs->mlist = NULL;
   21cf2:	2000      	movs	r0, #0
    lfs->root[0] = LFS_BLOCK_NULL;
   21cf4:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->seed = 0;
   21cf8:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
    lfs->root[1] = LFS_BLOCK_NULL;
   21cfc:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->gdisk = (lfs_gstate_t){0};
   21d00:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
    lfs->gstate = (lfs_gstate_t){0};
   21d04:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
    lfs->gdelta = (lfs_gstate_t){0};
   21d08:	e9c4 0012 	strd	r0, r0, [r4, #72]	; 0x48
    lfs->gdisk = (lfs_gstate_t){0};
   21d0c:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   21d0e:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   21d10:	6520      	str	r0, [r4, #80]	; 0x50
}
   21d12:	bd38      	pop	{r3, r4, r5, pc}
   21d14:	00037b3f 	.word	0x00037b3f
   21d18:	00037aaa 	.word	0x00037aaa
   21d1c:	00032679 	.word	0x00032679
   21d20:	00037b58 	.word	0x00037b58
   21d24:	00037b71 	.word	0x00037b71
   21d28:	00037b8b 	.word	0x00037b8b
   21d2c:	00037bbb 	.word	0x00037bbb
   21d30:	00037beb 	.word	0x00037beb
   21d34:	00037c1c 	.word	0x00037c1c
   21d38:	00037c68 	.word	0x00037c68
   21d3c:	00037c84 	.word	0x00037c84
   21d40:	00037ca1 	.word	0x00037ca1
   21d44:	00037cf5 	.word	0x00037cf5
   21d48:	00037d0f 	.word	0x00037d0f
   21d4c:	00037d30 	.word	0x00037d30
   21d50:	00037d4b 	.word	0x00037d4b

00021d54 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21d58:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d5a:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d5c:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d5e:	1ccb      	adds	r3, r1, #3
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   21d60:	4606      	mov	r6, r0
   21d62:	4617      	mov	r7, r2
   21d64:	b085      	sub	sp, #20
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   21d66:	d903      	bls.n	21d70 <lfs_bd_flush+0x1c>
    return 0;
   21d68:	2000      	movs	r0, #0
}
   21d6a:	b005      	add	sp, #20
   21d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
   21d70:	6e80      	ldr	r0, [r0, #104]	; 0x68
   21d72:	6a03      	ldr	r3, [r0, #32]
   21d74:	4299      	cmp	r1, r3
   21d76:	d309      	bcc.n	21d8c <lfs_bd_flush+0x38>
   21d78:	491f      	ldr	r1, [pc, #124]	; (21df8 <lfs_bd_flush+0xa4>)
   21d7a:	23a2      	movs	r3, #162	; 0xa2
   21d7c:	4a1f      	ldr	r2, [pc, #124]	; (21dfc <lfs_bd_flush+0xa8>)
   21d7e:	4820      	ldr	r0, [pc, #128]	; (21e00 <lfs_bd_flush+0xac>)
   21d80:	f008 fcab 	bl	2a6da <assert_print>
   21d84:	21a2      	movs	r1, #162	; 0xa2
        LFS_ASSERT(err <= 0);
   21d86:	481d      	ldr	r0, [pc, #116]	; (21dfc <lfs_bd_flush+0xa8>)
   21d88:	f008 fca0 	bl	2a6cc <assert_post_action>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   21d8c:	6982      	ldr	r2, [r0, #24]
	return lfs_aligndown(a + alignment-1, alignment);
   21d8e:	68ac      	ldr	r4, [r5, #8]
   21d90:	4414      	add	r4, r2
   21d92:	3c01      	subs	r4, #1
	return a - (a % alignment);
   21d94:	fbb4 f3f2 	udiv	r3, r4, r2
   21d98:	fb02 4313 	mls	r3, r2, r3, r4
   21d9c:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   21d9e:	9400      	str	r4, [sp, #0]
   21da0:	f8d0 9008 	ldr.w	r9, [r0, #8]
   21da4:	68eb      	ldr	r3, [r5, #12]
   21da6:	686a      	ldr	r2, [r5, #4]
   21da8:	47c8      	blx	r9
        LFS_ASSERT(err <= 0);
   21daa:	2800      	cmp	r0, #0
   21dac:	dd07      	ble.n	21dbe <lfs_bd_flush+0x6a>
   21dae:	4915      	ldr	r1, [pc, #84]	; (21e04 <lfs_bd_flush+0xb0>)
   21db0:	23a6      	movs	r3, #166	; 0xa6
   21db2:	4a12      	ldr	r2, [pc, #72]	; (21dfc <lfs_bd_flush+0xa8>)
   21db4:	4812      	ldr	r0, [pc, #72]	; (21e00 <lfs_bd_flush+0xac>)
   21db6:	f008 fc90 	bl	2a6da <assert_print>
   21dba:	21a6      	movs	r1, #166	; 0xa6
   21dbc:	e7e3      	b.n	21d86 <lfs_bd_flush+0x32>
        if (err) {
   21dbe:	d1d4      	bne.n	21d6a <lfs_bd_flush+0x16>
        if (validate) {
   21dc0:	f1b8 0f00 	cmp.w	r8, #0
   21dc4:	d104      	bne.n	21dd0 <lfs_bd_flush+0x7c>
        lfs_cache_zero(lfs, pcache);
   21dc6:	4629      	mov	r1, r5
   21dc8:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   21dca:	f00d fa36 	bl	2f23a <lfs_cache_zero.isra.0>
   21dce:	e7cb      	b.n	21d68 <lfs_bd_flush+0x14>
    rcache->block = LFS_BLOCK_NULL;
   21dd0:	f04f 33ff 	mov.w	r3, #4294967295
   21dd4:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
   21dd6:	9402      	str	r4, [sp, #8]
   21dd8:	68eb      	ldr	r3, [r5, #12]
   21dda:	4622      	mov	r2, r4
   21ddc:	9301      	str	r3, [sp, #4]
   21dde:	686b      	ldr	r3, [r5, #4]
   21de0:	4639      	mov	r1, r7
   21de2:	9300      	str	r3, [sp, #0]
   21de4:	4630      	mov	r0, r6
   21de6:	682b      	ldr	r3, [r5, #0]
   21de8:	f00d f900 	bl	2efec <lfs_bd_cmp.constprop.0>
            if (res < 0) {
   21dec:	2800      	cmp	r0, #0
   21dee:	dbbc      	blt.n	21d6a <lfs_bd_flush+0x16>
            if (res != LFS_CMP_EQ) {
   21df0:	d0e9      	beq.n	21dc6 <lfs_bd_flush+0x72>
                return LFS_ERR_CORRUPT;
   21df2:	f06f 0053 	mvn.w	r0, #83	; 0x53
   21df6:	e7b8      	b.n	21d6a <lfs_bd_flush+0x16>
   21df8:	00037d7a 	.word	0x00037d7a
   21dfc:	00037aaa 	.word	0x00037aaa
   21e00:	00032679 	.word	0x00032679
   21e04:	00037b02 	.word	0x00037b02

00021e08 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   21e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e0c:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   21e10:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
   21e14:	4692      	mov	sl, r2
   21e16:	4606      	mov	r6, r0
   21e18:	460c      	mov	r4, r1
   21e1a:	4699      	mov	r9, r3
   21e1c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
   21e1e:	6e82      	ldr	r2, [r0, #104]	; 0x68
   21e20:	d00c      	beq.n	21e3c <lfs_bd_prog+0x34>
   21e22:	6a13      	ldr	r3, [r2, #32]
   21e24:	4543      	cmp	r3, r8
   21e26:	d809      	bhi.n	21e3c <lfs_bd_prog+0x34>
   21e28:	4930      	ldr	r1, [pc, #192]	; (21eec <lfs_bd_prog+0xe4>)
   21e2a:	23d7      	movs	r3, #215	; 0xd7
   21e2c:	4a30      	ldr	r2, [pc, #192]	; (21ef0 <lfs_bd_prog+0xe8>)
   21e2e:	4831      	ldr	r0, [pc, #196]	; (21ef4 <lfs_bd_prog+0xec>)
   21e30:	f008 fc53 	bl	2a6da <assert_print>
   21e34:	21d7      	movs	r1, #215	; 0xd7
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   21e36:	482e      	ldr	r0, [pc, #184]	; (21ef0 <lfs_bd_prog+0xe8>)
   21e38:	f008 fc48 	bl	2a6cc <assert_post_action>
   21e3c:	69d2      	ldr	r2, [r2, #28]
   21e3e:	19eb      	adds	r3, r5, r7
   21e40:	4293      	cmp	r3, r2
   21e42:	d804      	bhi.n	21e4e <lfs_bd_prog+0x46>
        pcache->size = 0;
   21e44:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
   21e48:	b9f7      	cbnz	r7, 21e88 <lfs_bd_prog+0x80>
    return 0;
   21e4a:	4638      	mov	r0, r7
   21e4c:	e04b      	b.n	21ee6 <lfs_bd_prog+0xde>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
   21e4e:	492a      	ldr	r1, [pc, #168]	; (21ef8 <lfs_bd_prog+0xf0>)
   21e50:	23d8      	movs	r3, #216	; 0xd8
   21e52:	4a27      	ldr	r2, [pc, #156]	; (21ef0 <lfs_bd_prog+0xe8>)
   21e54:	4827      	ldr	r0, [pc, #156]	; (21ef4 <lfs_bd_prog+0xec>)
   21e56:	f008 fc40 	bl	2a6da <assert_print>
   21e5a:	21d8      	movs	r1, #216	; 0xd8
   21e5c:	e7eb      	b.n	21e36 <lfs_bd_prog+0x2e>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
   21e5e:	3301      	adds	r3, #1
   21e60:	d007      	beq.n	21e72 <lfs_bd_prog+0x6a>
   21e62:	4926      	ldr	r1, [pc, #152]	; (21efc <lfs_bd_prog+0xf4>)
   21e64:	23f5      	movs	r3, #245	; 0xf5
   21e66:	4a22      	ldr	r2, [pc, #136]	; (21ef0 <lfs_bd_prog+0xe8>)
   21e68:	4822      	ldr	r0, [pc, #136]	; (21ef4 <lfs_bd_prog+0xec>)
   21e6a:	f008 fc36 	bl	2a6da <assert_print>
   21e6e:	21f5      	movs	r1, #245	; 0xf5
   21e70:	e7e1      	b.n	21e36 <lfs_bd_prog+0x2e>
        pcache->block = block;
   21e72:	f8c4 8000 	str.w	r8, [r4]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   21e76:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   21e78:	699a      	ldr	r2, [r3, #24]
   21e7a:	fbb5 f3f2 	udiv	r3, r5, r2
   21e7e:	fb02 5313 	mls	r3, r2, r3, r5
   21e82:	1aeb      	subs	r3, r5, r3
        pcache->size = 0;
   21e84:	e9c4 3b01 	strd	r3, fp, [r4, #4]
        if (block == pcache->block &&
   21e88:	6823      	ldr	r3, [r4, #0]
   21e8a:	4543      	cmp	r3, r8
   21e8c:	d1e7      	bne.n	21e5e <lfs_bd_prog+0x56>
                off >= pcache->off &&
   21e8e:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   21e90:	42a8      	cmp	r0, r5
   21e92:	d8e4      	bhi.n	21e5e <lfs_bd_prog+0x56>
                off < pcache->off + lfs->cfg->cache_size) {
   21e94:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   21e96:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21e98:	4402      	add	r2, r0
                off >= pcache->off &&
   21e9a:	42aa      	cmp	r2, r5
   21e9c:	d9df      	bls.n	21e5e <lfs_bd_prog+0x56>
            lfs_size_t diff = lfs_min(size,
   21e9e:	1b52      	subs	r2, r2, r5
	return (a < b) ? a : b;
   21ea0:	42ba      	cmp	r2, r7
   21ea2:	bf28      	it	cs
   21ea4:	463a      	movcs	r2, r7
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   21ea6:	68e3      	ldr	r3, [r4, #12]
   21ea8:	1a28      	subs	r0, r5, r0
   21eaa:	4418      	add	r0, r3
   21eac:	990e      	ldr	r1, [sp, #56]	; 0x38
   21eae:	9201      	str	r2, [sp, #4]
   21eb0:	f00e fb6d 	bl	3058e <memcpy>
            data += diff;
   21eb4:	9a01      	ldr	r2, [sp, #4]
   21eb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            off += diff;
   21eb8:	4415      	add	r5, r2
            data += diff;
   21eba:	4413      	add	r3, r2
   21ebc:	930e      	str	r3, [sp, #56]	; 0x38
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   21ebe:	6863      	ldr	r3, [r4, #4]
            size -= diff;
   21ec0:	1abf      	subs	r7, r7, r2
	return (a > b) ? a : b;
   21ec2:	68a2      	ldr	r2, [r4, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   21ec4:	1aeb      	subs	r3, r5, r3
   21ec6:	4293      	cmp	r3, r2
   21ec8:	bf38      	it	cc
   21eca:	4613      	movcc	r3, r2
   21ecc:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   21ece:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   21ed0:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21ed2:	429a      	cmp	r2, r3
   21ed4:	d1b8      	bne.n	21e48 <lfs_bd_prog+0x40>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21ed6:	464b      	mov	r3, r9
   21ed8:	4652      	mov	r2, sl
   21eda:	4621      	mov	r1, r4
   21edc:	4630      	mov	r0, r6
   21ede:	f7ff ff39 	bl	21d54 <lfs_bd_flush>
                if (err) {
   21ee2:	2800      	cmp	r0, #0
   21ee4:	d0b0      	beq.n	21e48 <lfs_bd_prog+0x40>
}
   21ee6:	b003      	add	sp, #12
   21ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21eec:	00037da0 	.word	0x00037da0
   21ef0:	00037aaa 	.word	0x00037aaa
   21ef4:	00032679 	.word	0x00032679
   21ef8:	00037ddc 	.word	0x00037ddc
   21efc:	00037dff 	.word	0x00037dff

00021f00 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            lfs->cfg->prog_size);
   21f04:	6e83      	ldr	r3, [r0, #104]	; 0x68
	return lfs_aligndown(a + alignment-1, alignment);
   21f06:	684e      	ldr	r6, [r1, #4]
   21f08:	699a      	ldr	r2, [r3, #24]
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21f0a:	4680      	mov	r8, r0
   21f0c:	4416      	add	r6, r2
   21f0e:	3607      	adds	r6, #7
	return a - (a % alignment);
   21f10:	fbb6 f3f2 	udiv	r3, r6, r2
   21f14:	fb02 6313 	mls	r3, r2, r3, r6
   21f18:	1af6      	subs	r6, r6, r3
    uint32_t crc1 = 0;
   21f1a:	2300      	movs	r3, #0
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   21f1c:	460d      	mov	r5, r1
   21f1e:	b08b      	sub	sp, #44	; 0x2c
    lfs_off_t off1 = 0;
   21f20:	469b      	mov	fp, r3
    uint32_t crc1 = 0;
   21f22:	9305      	str	r3, [sp, #20]
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   21f24:	f1a6 0308 	sub.w	r3, r6, #8
   21f28:	9304      	str	r3, [sp, #16]
    while (commit->off < end) {
   21f2a:	686b      	ldr	r3, [r5, #4]
   21f2c:	42b3      	cmp	r3, r6
   21f2e:	d31d      	bcc.n	21f6c <lfs_dir_commitcrc+0x6c>
    rcache->block = LFS_BLOCK_NULL;
   21f30:	4641      	mov	r1, r8
   21f32:	f04f 33ff 	mov.w	r3, #4294967295
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21f36:	4642      	mov	r2, r8
    rcache->block = LFS_BLOCK_NULL;
   21f38:	f841 3b10 	str.w	r3, [r1], #16
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   21f3c:	4640      	mov	r0, r8
   21f3e:	2300      	movs	r3, #0
   21f40:	f7ff ff08 	bl	21d54 <lfs_bd_flush>
    if (err) {
   21f44:	4604      	mov	r4, r0
   21f46:	2800      	cmp	r0, #0
   21f48:	f040 80bf 	bne.w	220ca <lfs_dir_commitcrc+0x1ca>
    err = lfs->cfg->sync(lfs->cfg);
   21f4c:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
   21f50:	6903      	ldr	r3, [r0, #16]
   21f52:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
   21f54:	1e04      	subs	r4, r0, #0
   21f56:	dd75      	ble.n	22044 <lfs_dir_commitcrc+0x144>
   21f58:	495f      	ldr	r1, [pc, #380]	; (220d8 <lfs_dir_commitcrc+0x1d8>)
   21f5a:	4860      	ldr	r0, [pc, #384]	; (220dc <lfs_dir_commitcrc+0x1dc>)
   21f5c:	23cc      	movs	r3, #204	; 0xcc
   21f5e:	4a60      	ldr	r2, [pc, #384]	; (220e0 <lfs_dir_commitcrc+0x1e0>)
   21f60:	f008 fbbb 	bl	2a6da <assert_print>
   21f64:	21cc      	movs	r1, #204	; 0xcc
   21f66:	485e      	ldr	r0, [pc, #376]	; (220e0 <lfs_dir_commitcrc+0x1e0>)
   21f68:	f008 fbb0 	bl	2a6cc <assert_post_action>
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   21f6c:	f240 32fe 	movw	r2, #1022	; 0x3fe
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   21f70:	f103 0a04 	add.w	sl, r3, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   21f74:	eba6 030a 	sub.w	r3, r6, sl
   21f78:	4293      	cmp	r3, r2
   21f7a:	bf94      	ite	ls
   21f7c:	eb0a 0703 	addls.w	r7, sl, r3
   21f80:	eb0a 0702 	addhi.w	r7, sl, r2
        if (noff < end) {
   21f84:	42b7      	cmp	r7, r6
   21f86:	d203      	bcs.n	21f90 <lfs_dir_commitcrc+0x90>
	return (a < b) ? a : b;
   21f88:	9b04      	ldr	r3, [sp, #16]
   21f8a:	429f      	cmp	r7, r3
   21f8c:	bf28      	it	cs
   21f8e:	461f      	movcs	r7, r3
        lfs_tag_t tag = 0xffffffff;
   21f90:	f04f 33ff 	mov.w	r3, #4294967295
   21f94:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   21f96:	2304      	movs	r3, #4
   21f98:	aa07      	add	r2, sp, #28
   21f9a:	e9cd 7201 	strd	r7, r2, [sp, #4]
   21f9e:	9303      	str	r3, [sp, #12]
   21fa0:	682a      	ldr	r2, [r5, #0]
   21fa2:	2100      	movs	r1, #0
   21fa4:	9200      	str	r2, [sp, #0]
   21fa6:	4640      	mov	r0, r8
   21fa8:	4642      	mov	r2, r8
   21faa:	f7fe fdaf 	bl	20b0c <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   21fae:	4604      	mov	r4, r0
   21fb0:	b118      	cbz	r0, 21fba <lfs_dir_commitcrc+0xba>
   21fb2:	f110 0f54 	cmn.w	r0, #84	; 0x54
   21fb6:	f040 8088 	bne.w	220ca <lfs_dir_commitcrc+0x1ca>
	return __builtin_bswap32(a);
   21fba:	9b07      	ldr	r3, [sp, #28]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21fbc:	eba7 070a 	sub.w	r7, r7, sl
   21fc0:	ba1b      	rev	r3, r3
        bool reset = ~lfs_frombe32(tag) >> 31;
   21fc2:	ea6f 0903 	mvn.w	r9, r3
   21fc6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   21fce:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   21fd2:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fd6:	68ab      	ldr	r3, [r5, #8]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21fd8:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fdc:	ac08      	add	r4, sp, #32
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   21fde:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fe0:	405f      	eors	r7, r3
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fe2:	4621      	mov	r1, r4
   21fe4:	2204      	movs	r2, #4
   21fe6:	68e8      	ldr	r0, [r5, #12]
   21fe8:	ba3f      	rev	r7, r7
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   21fea:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21fec:	f001 ff02 	bl	23df4 <lfs_crc>
        err = lfs_bd_prog(lfs,
   21ff0:	2308      	movs	r3, #8
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   21ff2:	60e8      	str	r0, [r5, #12]
        err = lfs_bd_prog(lfs,
   21ff4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   21ff8:	686b      	ldr	r3, [r5, #4]
        footer[1] = lfs_tole32(commit->crc);
   21ffa:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   21ffc:	9301      	str	r3, [sp, #4]
   21ffe:	682b      	ldr	r3, [r5, #0]
   22000:	4642      	mov	r2, r8
   22002:	9300      	str	r3, [sp, #0]
   22004:	4640      	mov	r0, r8
   22006:	2300      	movs	r3, #0
   22008:	f108 0110 	add.w	r1, r8, #16
   2200c:	f7ff fefc 	bl	21e08 <lfs_bd_prog>
        if (err) {
   22010:	4604      	mov	r4, r0
   22012:	2800      	cmp	r0, #0
   22014:	d159      	bne.n	220ca <lfs_dir_commitcrc+0x1ca>
            off1 = commit->off + sizeof(uint32_t);
   22016:	6869      	ldr	r1, [r5, #4]
        if (off1 == 0) {
   22018:	f1bb 0f00 	cmp.w	fp, #0
   2201c:	d103      	bne.n	22026 <lfs_dir_commitcrc+0x126>
            crc1 = commit->crc;
   2201e:	68eb      	ldr	r3, [r5, #12]
            off1 = commit->off + sizeof(uint32_t);
   22020:	f101 0b04 	add.w	fp, r1, #4
            crc1 = commit->crc;
   22024:	9305      	str	r3, [sp, #20]
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   22026:	9a07      	ldr	r2, [sp, #28]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   22028:	f009 4900 	and.w	r9, r9, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   2202c:	f3c2 0309 	ubfx	r3, r2, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   22030:	3304      	adds	r3, #4
   22032:	440b      	add	r3, r1
   22034:	606b      	str	r3, [r5, #4]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   22036:	f04f 33ff 	mov.w	r3, #4294967295
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   2203a:	ea89 0202 	eor.w	r2, r9, r2
   2203e:	60aa      	str	r2, [r5, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   22040:	60eb      	str	r3, [r5, #12]
   22042:	e772      	b.n	21f2a <lfs_dir_commitcrc+0x2a>
    if (err) {
   22044:	d141      	bne.n	220ca <lfs_dir_commitcrc+0x1ca>
    while (off < end) {
   22046:	46da      	mov	sl, fp
    lfs_off_t off = commit->begin;
   22048:	692f      	ldr	r7, [r5, #16]
    while (off < end) {
   2204a:	42b7      	cmp	r7, r6
   2204c:	d23d      	bcs.n	220ca <lfs_dir_commitcrc+0x1ca>
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2204e:	f10a 0304 	add.w	r3, sl, #4
        uint32_t crc = 0xffffffff;
   22052:	f04f 39ff 	mov.w	r9, #4294967295
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   22056:	9304      	str	r3, [sp, #16]
   22058:	e01a      	b.n	22090 <lfs_dir_commitcrc+0x190>
            if (i == off1 && crc != crc1) {
   2205a:	45bb      	cmp	fp, r7
   2205c:	d102      	bne.n	22064 <lfs_dir_commitcrc+0x164>
   2205e:	9b05      	ldr	r3, [sp, #20]
   22060:	454b      	cmp	r3, r9
   22062:	d12f      	bne.n	220c4 <lfs_dir_commitcrc+0x1c4>
            err = lfs_bd_read(lfs,
   22064:	2301      	movs	r3, #1
   22066:	9303      	str	r3, [sp, #12]
   22068:	ab08      	add	r3, sp, #32
   2206a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   2206e:	682b      	ldr	r3, [r5, #0]
   22070:	4642      	mov	r2, r8
   22072:	9300      	str	r3, [sp, #0]
   22074:	9b04      	ldr	r3, [sp, #16]
   22076:	2100      	movs	r1, #0
   22078:	4640      	mov	r0, r8
   2207a:	1bdb      	subs	r3, r3, r7
   2207c:	f7fe fd46 	bl	20b0c <lfs_bd_read>
            if (err) {
   22080:	bb10      	cbnz	r0, 220c8 <lfs_dir_commitcrc+0x1c8>
            crc = lfs_crc(crc, &dat, 1);
   22082:	4648      	mov	r0, r9
   22084:	2201      	movs	r2, #1
   22086:	a908      	add	r1, sp, #32
   22088:	f001 feb4 	bl	23df4 <lfs_crc>
   2208c:	4681      	mov	r9, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   2208e:	3701      	adds	r7, #1
   22090:	9b04      	ldr	r3, [sp, #16]
   22092:	42bb      	cmp	r3, r7
   22094:	d8e1      	bhi.n	2205a <lfs_dir_commitcrc+0x15a>
        if (crc != 0) {
   22096:	f1b9 0f00 	cmp.w	r9, #0
   2209a:	d11a      	bne.n	220d2 <lfs_dir_commitcrc+0x1d2>
        off = lfs_min(end - noff, 0x3fe) + noff;
   2209c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   220a0:	eba6 020a 	sub.w	r2, r6, sl
   220a4:	429a      	cmp	r2, r3
   220a6:	bf94      	ite	ls
   220a8:	eb0a 0702 	addls.w	r7, sl, r2
   220ac:	eb0a 0703 	addhi.w	r7, sl, r3
        if (off < end) {
   220b0:	42b7      	cmp	r7, r6
   220b2:	d204      	bcs.n	220be <lfs_dir_commitcrc+0x1be>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   220b4:	f1a6 0308 	sub.w	r3, r6, #8
	return (a < b) ? a : b;
   220b8:	429f      	cmp	r7, r3
   220ba:	bf28      	it	cs
   220bc:	461f      	movcs	r7, r3
        noff = off + sizeof(uint32_t);
   220be:	f107 0a04 	add.w	sl, r7, #4
   220c2:	e7c2      	b.n	2204a <lfs_dir_commitcrc+0x14a>
                return LFS_ERR_CORRUPT;
   220c4:	f06f 0053 	mvn.w	r0, #83	; 0x53
   220c8:	4604      	mov	r4, r0
}
   220ca:	4620      	mov	r0, r4
   220cc:	b00b      	add	sp, #44	; 0x2c
   220ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_CORRUPT;
   220d2:	f06f 0453 	mvn.w	r4, #83	; 0x53
   220d6:	e7f8      	b.n	220ca <lfs_dir_commitcrc+0x1ca>
   220d8:	00037b02 	.word	0x00037b02
   220dc:	00032679 	.word	0x00032679
   220e0:	00037aaa 	.word	0x00037aaa

000220e4 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   220e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220e8:	4604      	mov	r4, r0
   220ea:	460d      	mov	r5, r1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   220ec:	2601      	movs	r6, #1
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
   220ee:	af00      	add	r7, sp, #0
        while (lfs->free.i != lfs->free.size) {
   220f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   220f2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   220f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
   220f6:	4299      	cmp	r1, r3
   220f8:	d11d      	bne.n	22136 <lfs_alloc+0x52>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   220fa:	6d61      	ldr	r1, [r4, #84]	; 0x54
   220fc:	440b      	add	r3, r1
        if (lfs->free.ack == 0) {
   220fe:	2a00      	cmp	r2, #0
   22100:	d149      	bne.n	22196 <lfs_alloc+0xb2>
            LFS_ERROR("No more free space %"PRIu32,
   22102:	466c      	mov	r4, sp
   22104:	b08a      	sub	sp, #40	; 0x28
   22106:	466a      	mov	r2, sp
   22108:	4936      	ldr	r1, [pc, #216]	; (221e4 <lfs_alloc+0x100>)
   2210a:	4837      	ldr	r0, [pc, #220]	; (221e8 <lfs_alloc+0x104>)
   2210c:	6151      	str	r1, [r2, #20]
   2210e:	4937      	ldr	r1, [pc, #220]	; (221ec <lfs_alloc+0x108>)
   22110:	6191      	str	r1, [r2, #24]
   22112:	f240 214d 	movw	r1, #589	; 0x24d
   22116:	e9c2 1307 	strd	r1, r3, [r2, #28]
   2211a:	f44f 7300 	mov.w	r3, #512	; 0x200
   2211e:	8493      	strh	r3, [r2, #36]	; 0x24
   22120:	4b33      	ldr	r3, [pc, #204]	; (221f0 <lfs_alloc+0x10c>)
   22122:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   22126:	f842 3f10 	str.w	r3, [r2, #16]!
   2212a:	f00c ffae 	bl	2f08a <z_log_msg_static_create.constprop.0>
            return LFS_ERR_NOSPC;
   2212e:	f06f 001b 	mvn.w	r0, #27
   22132:	46a5      	mov	sp, r4
   22134:	e026      	b.n	22184 <lfs_alloc+0xa0>
            lfs->free.i += 1;
   22136:	1c48      	adds	r0, r1, #1
   22138:	65e0      	str	r0, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
   2213a:	3a01      	subs	r2, #1
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   2213c:	6e60      	ldr	r0, [r4, #100]	; 0x64
            lfs->free.ack -= 1;
   2213e:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
   22140:	ea4f 1c51 	mov.w	ip, r1, lsr #5
   22144:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
   22148:	f001 021f 	and.w	r2, r1, #31
   2214c:	fa06 f202 	lsl.w	r2, r6, r2
   22150:	4202      	tst	r2, r0
   22152:	d1ce      	bne.n	220f2 <lfs_alloc+0xe>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
   22154:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   22156:	6d63      	ldr	r3, [r4, #84]	; 0x54
   22158:	6a12      	ldr	r2, [r2, #32]
   2215a:	440b      	add	r3, r1
   2215c:	fbb3 f1f2 	udiv	r1, r3, r2
   22160:	fb02 3311 	mls	r3, r2, r1, r3
   22164:	602b      	str	r3, [r5, #0]
                            & (1U << (lfs->free.i % 32)))) {
   22166:	2501      	movs	r5, #1
                while (lfs->free.i != lfs->free.size &&
   22168:	6da6      	ldr	r6, [r4, #88]	; 0x58
   2216a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2216c:	42b3      	cmp	r3, r6
   2216e:	d036      	beq.n	221de <lfs_alloc+0xfa>
                        (lfs->free.buffer[lfs->free.i / 32]
   22170:	6e61      	ldr	r1, [r4, #100]	; 0x64
   22172:	095a      	lsrs	r2, r3, #5
                            & (1U << (lfs->free.i % 32)))) {
   22174:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   22178:	f003 001f 	and.w	r0, r3, #31
   2217c:	fa05 f000 	lsl.w	r0, r5, r0
                while (lfs->free.i != lfs->free.size &&
   22180:	4010      	ands	r0, r2
   22182:	d102      	bne.n	2218a <lfs_alloc+0xa6>
}
   22184:	46bd      	mov	sp, r7
   22186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    lfs->free.i += 1;
   2218a:	3301      	adds	r3, #1
   2218c:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
   2218e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   22190:	3b01      	subs	r3, #1
   22192:	6623      	str	r3, [r4, #96]	; 0x60
   22194:	e7e9      	b.n	2216a <lfs_alloc+0x86>
                % lfs->cfg->block_count;
   22196:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        lfs->free.i = 0;
   22198:	f04f 0800 	mov.w	r8, #0
                % lfs->cfg->block_count;
   2219c:	6a08      	ldr	r0, [r1, #32]
   2219e:	fbb3 fcf0 	udiv	ip, r3, r0
   221a2:	fb00 331c 	mls	r3, r0, ip, r3
        lfs->free.off = (lfs->free.off + lfs->free.size)
   221a6:	6563      	str	r3, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   221a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        lfs->free.i = 0;
   221aa:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
   221ae:	00db      	lsls	r3, r3, #3
   221b0:	4293      	cmp	r3, r2
   221b2:	bf94      	ite	ls
   221b4:	65a3      	strls	r3, [r4, #88]	; 0x58
   221b6:	65a2      	strhi	r2, [r4, #88]	; 0x58
__ssp_bos_icheck3(memset, void *, int)
   221b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   221ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
   221bc:	4641      	mov	r1, r8
   221be:	f00e fa20 	bl	30602 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
   221c2:	2301      	movs	r3, #1
   221c4:	4622      	mov	r2, r4
   221c6:	4620      	mov	r0, r4
   221c8:	490a      	ldr	r1, [pc, #40]	; (221f4 <lfs_alloc+0x110>)
   221ca:	f7ff fbb1 	bl	21930 <lfs_fs_rawtraverse>
        if (err) {
   221ce:	2800      	cmp	r0, #0
   221d0:	d08e      	beq.n	220f0 <lfs_alloc+0xc>
    lfs->free.i = 0;
   221d2:	e9c4 8816 	strd	r8, r8, [r4, #88]	; 0x58
    lfs->free.ack = lfs->cfg->block_count;
   221d6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   221d8:	6a1b      	ldr	r3, [r3, #32]
   221da:	6623      	str	r3, [r4, #96]	; 0x60
}
   221dc:	e7d2      	b.n	22184 <lfs_alloc+0xa0>
                return 0;
   221de:	2000      	movs	r0, #0
   221e0:	e7d0      	b.n	22184 <lfs_alloc+0xa0>
   221e2:	bf00      	nop
   221e4:	00037e22 	.word	0x00037e22
   221e8:	0003158c 	.word	0x0003158c
   221ec:	00037aaa 	.word	0x00037aaa
   221f0:	01000005 	.word	0x01000005
   221f4:	0002ef1b 	.word	0x0002ef1b

000221f8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
   221f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221fc:	4604      	mov	r4, r0
   221fe:	460d      	mov	r5, r1
   22200:	b087      	sub	sp, #28
        int err = lfs_alloc(lfs, &nblock);
   22202:	4620      	mov	r0, r4
   22204:	a905      	add	r1, sp, #20
   22206:	f7ff ff6d 	bl	220e4 <lfs_alloc>
        if (err) {
   2220a:	4606      	mov	r6, r0
   2220c:	b958      	cbnz	r0, 22226 <lfs_file_relocate+0x2e>
        err = lfs_bd_erase(lfs, nblock);
   2220e:	f8dd 8014 	ldr.w	r8, [sp, #20]
   22212:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   22214:	4641      	mov	r1, r8
   22216:	f7ff fc3f 	bl	21a98 <lfs_bd_erase.isra.0>
        if (err) {
   2221a:	4606      	mov	r6, r0
   2221c:	2800      	cmp	r0, #0
   2221e:	d053      	beq.n	222c8 <lfs_file_relocate+0xd0>
            if (err == LFS_ERR_CORRUPT) {
   22220:	f110 0f54 	cmn.w	r0, #84	; 0x54
   22224:	d056      	beq.n	222d4 <lfs_file_relocate+0xdc>
}
   22226:	4630      	mov	r0, r6
   22228:	b007      	add	sp, #28
   2222a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
   2222e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   22230:	f10d 0a13 	add.w	sl, sp, #19
   22234:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
                err = lfs_dir_getread(lfs, &file->m,
   22238:	e9cd 7a01 	strd	r7, sl, [sp, #4]
   2223c:	eba3 0307 	sub.w	r3, r3, r7
   22240:	f8cd 900c 	str.w	r9, [sp, #12]
            if (file->flags & LFS_F_INLINE) {
   22244:	d01c      	beq.n	22280 <lfs_file_relocate+0x88>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
   22246:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
   22248:	4924      	ldr	r1, [pc, #144]	; (222dc <lfs_file_relocate+0xe4>)
   2224a:	4620      	mov	r0, r4
   2224c:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   22250:	9200      	str	r2, [sp, #0]
   22252:	f105 0108 	add.w	r1, r5, #8
   22256:	465a      	mov	r2, fp
   22258:	f7fe ff7e 	bl	21158 <lfs_dir_getread.constprop.0>
                if (err) {
   2225c:	b970      	cbnz	r0, 2227c <lfs_file_relocate+0x84>
            err = lfs_bd_prog(lfs,
   2225e:	2301      	movs	r3, #1
   22260:	4622      	mov	r2, r4
   22262:	4620      	mov	r0, r4
   22264:	e9cd a902 	strd	sl, r9, [sp, #8]
   22268:	e9cd 8700 	strd	r8, r7, [sp]
   2226c:	f104 0110 	add.w	r1, r4, #16
   22270:	f7ff fdca 	bl	21e08 <lfs_bd_prog>
            if (err) {
   22274:	b160      	cbz	r0, 22290 <lfs_file_relocate+0x98>
                if (err == LFS_ERR_CORRUPT) {
   22276:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2227a:	d02b      	beq.n	222d4 <lfs_file_relocate+0xdc>
                    return err;
   2227c:	4606      	mov	r6, r0
   2227e:	e7d2      	b.n	22226 <lfs_file_relocate+0x2e>
                err = lfs_bd_read(lfs,
   22280:	6baa      	ldr	r2, [r5, #56]	; 0x38
   22282:	4659      	mov	r1, fp
   22284:	9200      	str	r2, [sp, #0]
   22286:	4620      	mov	r0, r4
   22288:	4622      	mov	r2, r4
   2228a:	f7fe fc3f 	bl	20b0c <lfs_bd_read>
   2228e:	e7e5      	b.n	2225c <lfs_file_relocate+0x64>
        for (lfs_off_t i = 0; i < file->off; i++) {
   22290:	3701      	adds	r7, #1
   22292:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   22294:	42bb      	cmp	r3, r7
   22296:	d8ca      	bhi.n	2222e <lfs_file_relocate+0x36>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
   22298:	6ea3      	ldr	r3, [r4, #104]	; 0x68
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2229a:	69e1      	ldr	r1, [r4, #28]
   2229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2229e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   222a0:	f00e f975 	bl	3058e <memcpy>
        file->cache.block = lfs->pcache.block;
   222a4:	6923      	ldr	r3, [r4, #16]
        lfs_cache_zero(lfs, &lfs->pcache);
   222a6:	f104 0110 	add.w	r1, r4, #16
        file->cache.block = lfs->pcache.block;
   222aa:	642b      	str	r3, [r5, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
   222ac:	6963      	ldr	r3, [r4, #20]
   222ae:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
   222b0:	69a3      	ldr	r3, [r4, #24]
   222b2:	64ab      	str	r3, [r5, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
   222b4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   222b6:	f00c ffc0 	bl	2f23a <lfs_cache_zero.isra.0>
        file->flags |= LFS_F_WRITING;
   222ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->block = nblock;
   222bc:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
   222c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   222c4:	632b      	str	r3, [r5, #48]	; 0x30
        return 0;
   222c6:	e7ae      	b.n	22226 <lfs_file_relocate+0x2e>
        for (lfs_off_t i = 0; i < file->off; i++) {
   222c8:	4607      	mov	r7, r0
   222ca:	f04f 0901 	mov.w	r9, #1
                err = lfs_dir_getread(lfs, &file->m,
   222ce:	f105 0b40 	add.w	fp, r5, #64	; 0x40
   222d2:	e7de      	b.n	22292 <lfs_file_relocate+0x9a>
    rcache->block = LFS_BLOCK_NULL;
   222d4:	f04f 33ff 	mov.w	r3, #4294967295
   222d8:	6123      	str	r3, [r4, #16]
   222da:	e792      	b.n	22202 <lfs_file_relocate+0xa>
   222dc:	20100000 	.word	0x20100000

000222e0 <lfs_file_rawwrite>:
        const void *buffer, lfs_size_t size) {
   222e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   222e4:	461e      	mov	r6, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   222e8:	4617      	mov	r7, r2
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222ea:	079a      	lsls	r2, r3, #30
        const void *buffer, lfs_size_t size) {
   222ec:	4605      	mov	r5, r0
   222ee:	460c      	mov	r4, r1
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   222f0:	d40b      	bmi.n	2230a <lfs_file_rawwrite+0x2a>
   222f2:	4925      	ldr	r1, [pc, #148]	; (22388 <lfs_file_rawwrite+0xa8>)
   222f4:	4825      	ldr	r0, [pc, #148]	; (2238c <lfs_file_rawwrite+0xac>)
   222f6:	f640 535d 	movw	r3, #3421	; 0xd5d
   222fa:	4a25      	ldr	r2, [pc, #148]	; (22390 <lfs_file_rawwrite+0xb0>)
   222fc:	f008 f9ed 	bl	2a6da <assert_print>
   22300:	f640 515d 	movw	r1, #3421	; 0xd5d
   22304:	4822      	ldr	r0, [pc, #136]	; (22390 <lfs_file_rawwrite+0xb0>)
   22306:	f008 f9e1 	bl	2a6cc <assert_post_action>
    if (file->flags & LFS_F_READING) {
   2230a:	035a      	lsls	r2, r3, #13
   2230c:	d419      	bmi.n	22342 <lfs_file_rawwrite+0x62>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   2230e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22310:	050b      	lsls	r3, r1, #20
   22312:	d41d      	bmi.n	22350 <lfs_file_rawwrite+0x70>
    if (file->pos + size > lfs->file_max) {
   22314:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
   22318:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2231a:	eb08 0206 	add.w	r2, r8, r6
   2231e:	429a      	cmp	r2, r3
   22320:	d82f      	bhi.n	22382 <lfs_file_rawwrite+0xa2>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   22322:	f411 3900 	ands.w	r9, r1, #131072	; 0x20000
   22326:	d019      	beq.n	2235c <lfs_file_rawwrite+0x7c>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
   22328:	4633      	mov	r3, r6
   2232a:	463a      	mov	r2, r7
   2232c:	4621      	mov	r1, r4
   2232e:	4628      	mov	r0, r5
   22330:	f00d f846 	bl	2f3c0 <lfs_file_flushedwrite>
    if (nsize < 0) {
   22334:	2800      	cmp	r0, #0
   22336:	db08      	blt.n	2234a <lfs_file_rawwrite+0x6a>
    file->flags &= ~LFS_F_ERRED;
   22338:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2233a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   2233e:	6323      	str	r3, [r4, #48]	; 0x30
    return nsize;
   22340:	e003      	b.n	2234a <lfs_file_rawwrite+0x6a>
        int err = lfs_file_flush(lfs, file);
   22342:	f00d f974 	bl	2f62e <lfs_file_flush>
        if (err) {
   22346:	2800      	cmp	r0, #0
   22348:	d0e1      	beq.n	2230e <lfs_file_rawwrite+0x2e>
}
   2234a:	b003      	add	sp, #12
   2234c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   22350:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22352:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22354:	4293      	cmp	r3, r2
        file->pos = file->ctz.size;
   22356:	bf88      	it	hi
   22358:	6363      	strhi	r3, [r4, #52]	; 0x34
   2235a:	e7db      	b.n	22314 <lfs_file_rawwrite+0x34>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   2235c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2235e:	4598      	cmp	r8, r3
   22360:	d9e2      	bls.n	22328 <lfs_file_rawwrite+0x48>
        file->pos = file->ctz.size;
   22362:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   22364:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22366:	4598      	cmp	r8, r3
   22368:	d9de      	bls.n	22328 <lfs_file_rawwrite+0x48>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
   2236a:	2301      	movs	r3, #1
   2236c:	4621      	mov	r1, r4
   2236e:	4628      	mov	r0, r5
   22370:	f10d 0207 	add.w	r2, sp, #7
   22374:	f88d 9007 	strb.w	r9, [sp, #7]
   22378:	f00d f822 	bl	2f3c0 <lfs_file_flushedwrite>
            if (res < 0) {
   2237c:	2800      	cmp	r0, #0
   2237e:	daf1      	bge.n	22364 <lfs_file_rawwrite+0x84>
   22380:	e7e3      	b.n	2234a <lfs_file_rawwrite+0x6a>
        return LFS_ERR_FBIG;
   22382:	f06f 001a 	mvn.w	r0, #26
   22386:	e7e0      	b.n	2234a <lfs_file_rawwrite+0x6a>
   22388:	00037e3f 	.word	0x00037e3f
   2238c:	00032679 	.word	0x00032679
   22390:	00037aaa 	.word	0x00037aaa

00022394 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   22394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22398:	b099      	sub	sp, #100	; 0x64
   2239a:	af08      	add	r7, sp, #32
   2239c:	e9c7 3201 	strd	r3, r2, [r7, #4]
   223a0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   223a4:	688a      	ldr	r2, [r1, #8]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   223a6:	60fb      	str	r3, [r7, #12]
    return (lfs->cfg->block_cycles > 0
   223a8:	6e83      	ldr	r3, [r0, #104]	; 0x68
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   223aa:	4604      	mov	r4, r0
    return (lfs->cfg->block_cycles > 0
   223ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   223ae:	460d      	mov	r5, r1
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   223b0:	2b00      	cmp	r3, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
   223b2:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   223b6:	f102 0201 	add.w	r2, r2, #1
   223ba:	dd58      	ble.n	2246e <lfs_dir_compact+0xda>
   223bc:	3301      	adds	r3, #1
   223be:	f043 0301 	orr.w	r3, r3, #1
   223c2:	fbb2 f1f3 	udiv	r1, r2, r3
   223c6:	fb03 2311 	mls	r3, r3, r1, r2
   223ca:	2b00      	cmp	r3, #0
   223cc:	d14f      	bne.n	2246e <lfs_dir_compact+0xda>
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   223ce:	2601      	movs	r6, #1
   223d0:	4628      	mov	r0, r5
    dir->rev += 1;
   223d2:	60aa      	str	r2, [r5, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   223d4:	62bb      	str	r3, [r7, #40]	; 0x28
   223d6:	62fe      	str	r6, [r7, #44]	; 0x2c
   223d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   223dc:	f00c fd5e 	bl	2ee9c <lfs_pair_cmp>
   223e0:	b9c8      	cbnz	r0, 22416 <lfs_dir_compact+0x82>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   223e2:	46b0      	mov	r8, r6
    bool relocated = false;
   223e4:	2600      	movs	r6, #0
            struct lfs_commit commit = {
   223e6:	2300      	movs	r3, #0
   223e8:	f04f 32ff 	mov.w	r2, #4294967295
                .block = dir->pair[1],
   223ec:	6869      	ldr	r1, [r5, #4]
            struct lfs_commit commit = {
   223ee:	e9c7 320b 	strd	r3, r2, [r7, #44]	; 0x2c
   223f2:	e9c7 230d 	strd	r2, r3, [r7, #52]	; 0x34
                .end = (lfs->cfg->metadata_max ?
   223f6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
            struct lfs_commit commit = {
   223f8:	62b9      	str	r1, [r7, #40]	; 0x28
                .end = (lfs->cfg->metadata_max ?
   223fa:	6c83      	ldr	r3, [r0, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   223fc:	2b00      	cmp	r3, #0
   223fe:	d03d      	beq.n	2247c <lfs_dir_compact+0xe8>
   22400:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
   22402:	63fb      	str	r3, [r7, #60]	; 0x3c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
   22404:	f7ff fb48 	bl	21a98 <lfs_bd_erase.isra.0>
            if (err) {
   22408:	2800      	cmp	r0, #0
   2240a:	d039      	beq.n	22480 <lfs_dir_compact+0xec>
                if (err == LFS_ERR_CORRUPT) {
   2240c:	f110 0f54 	cmn.w	r0, #84	; 0x54
   22410:	f040 80da 	bne.w	225c8 <lfs_dir_compact+0x234>
                    goto relocate;
   22414:	4646      	mov	r6, r8
    rcache->block = LFS_BLOCK_NULL;
   22416:	f04f 33ff 	mov.w	r3, #4294967295
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2241a:	f04f 0800 	mov.w	r8, #0
   2241e:	f04f 0a01 	mov.w	sl, #1
   22422:	4628      	mov	r0, r5
   22424:	e9c7 8a0a 	strd	r8, sl, [r7, #40]	; 0x28
    rcache->block = LFS_BLOCK_NULL;
   22428:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   2242a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2242e:	f00c fd35 	bl	2ee9c <lfs_pair_cmp>
   22432:	2800      	cmp	r0, #0
   22434:	f040 80cc 	bne.w	225d0 <lfs_dir_compact+0x23c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
   22438:	466c      	mov	r4, sp
   2243a:	b08a      	sub	sp, #40	; 0x28
   2243c:	686b      	ldr	r3, [r5, #4]
   2243e:	aa08      	add	r2, sp, #32
   22440:	496a      	ldr	r1, [pc, #424]	; (225ec <lfs_dir_compact+0x258>)
   22442:	486b      	ldr	r0, [pc, #428]	; (225f0 <lfs_dir_compact+0x25c>)
   22444:	6151      	str	r1, [r2, #20]
   22446:	496b      	ldr	r1, [pc, #428]	; (225f4 <lfs_dir_compact+0x260>)
   22448:	6191      	str	r1, [r2, #24]
   2244a:	f240 7169 	movw	r1, #1897	; 0x769
   2244e:	e9c2 1307 	strd	r1, r3, [r2, #28]
   22452:	f44f 7300 	mov.w	r3, #512	; 0x200
   22456:	8493      	strh	r3, [r2, #36]	; 0x24
   22458:	4b67      	ldr	r3, [pc, #412]	; (225f8 <lfs_dir_compact+0x264>)
   2245a:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   2245e:	f842 3f10 	str.w	r3, [r2, #16]!
   22462:	f00c fe12 	bl	2f08a <z_log_msg_static_create.constprop.0>
   22466:	46a5      	mov	sp, r4
            return LFS_ERR_NOSPC;
   22468:	f06f 001b 	mvn.w	r0, #27
   2246c:	e0ac      	b.n	225c8 <lfs_dir_compact+0x234>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   2246e:	f04f 0800 	mov.w	r8, #0
    dir->rev += 1;
   22472:	60aa      	str	r2, [r5, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
   22474:	e7b6      	b.n	223e4 <lfs_dir_compact+0x50>
        tired = false;
   22476:	4680      	mov	r8, r0
        relocated = true;
   22478:	4656      	mov	r6, sl
   2247a:	e7b4      	b.n	223e6 <lfs_dir_compact+0x52>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   2247c:	69c3      	ldr	r3, [r0, #28]
   2247e:	e7bf      	b.n	22400 <lfs_dir_compact+0x6c>
            err = lfs_dir_commitprog(lfs, &commit,
   22480:	f107 0a28 	add.w	sl, r7, #40	; 0x28
   22484:	2304      	movs	r3, #4
   22486:	4651      	mov	r1, sl
   22488:	4620      	mov	r0, r4
   2248a:	f105 0208 	add.w	r2, r5, #8
   2248e:	f00c fedf 	bl	2f250 <lfs_dir_commitprog>
            if (err) {
   22492:	2800      	cmp	r0, #0
   22494:	d1ba      	bne.n	2240c <lfs_dir_compact+0x78>
            err = lfs_dir_traverse(lfs,
   22496:	f107 0314 	add.w	r3, r7, #20
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2249a:	e9c7 4a05 	strd	r4, sl, [r7, #20]
            err = lfs_dir_traverse(lfs,
   2249e:	9307      	str	r3, [sp, #28]
   224a0:	4b56      	ldr	r3, [pc, #344]	; (225fc <lfs_dir_compact+0x268>)
   224a2:	4602      	mov	r2, r0
   224a4:	9306      	str	r3, [sp, #24]
   224a6:	f1c9 0300 	rsb	r3, r9, #0
   224aa:	b21b      	sxth	r3, r3
   224ac:	9305      	str	r3, [sp, #20]
   224ae:	68fb      	ldr	r3, [r7, #12]
   224b0:	4620      	mov	r0, r4
   224b2:	e9cd 9303 	strd	r9, r3, [sp, #12]
   224b6:	4b52      	ldr	r3, [pc, #328]	; (22600 <lfs_dir_compact+0x26c>)
   224b8:	9302      	str	r3, [sp, #8]
   224ba:	687b      	ldr	r3, [r7, #4]
   224bc:	9301      	str	r3, [sp, #4]
   224be:	68bb      	ldr	r3, [r7, #8]
   224c0:	9300      	str	r3, [sp, #0]
   224c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   224c4:	f04f 33ff 	mov.w	r3, #4294967295
   224c8:	f7fe fcea 	bl	20ea0 <lfs_dir_traverse.constprop.0>
            if (err) {
   224cc:	2800      	cmp	r0, #0
   224ce:	d19d      	bne.n	2240c <lfs_dir_compact+0x78>
            if (!lfs_pair_isnull(dir->tail)) {
   224d0:	f105 0118 	add.w	r1, r5, #24
   224d4:	4608      	mov	r0, r1
   224d6:	f00c fcd7 	bl	2ee88 <lfs_pair_isnull>
   224da:	b960      	cbnz	r0, 224f6 <lfs_dir_compact+0x162>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   224dc:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
   224de:	460b      	mov	r3, r1
   224e0:	4948      	ldr	r1, [pc, #288]	; (22604 <lfs_dir_compact+0x270>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
   224e2:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
   224e6:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
   224ea:	4620      	mov	r0, r4
   224ec:	4651      	mov	r1, sl
   224ee:	f00c fece 	bl	2f28e <lfs_dir_commitattr>
                if (err) {
   224f2:	2800      	cmp	r0, #0
   224f4:	d18a      	bne.n	2240c <lfs_dir_compact+0x78>
            lfs_gstate_t delta = {0};
   224f6:	2300      	movs	r3, #0
   224f8:	e9c7 3307 	strd	r3, r3, [r7, #28]
   224fc:	627b      	str	r3, [r7, #36]	; 0x24
            if (!relocated) {
   224fe:	b95e      	cbnz	r6, 22518 <lfs_dir_compact+0x184>
                lfs_gstate_xor(&delta, &lfs->gdisk);
   22500:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   22504:	f107 001c 	add.w	r0, r7, #28
   22508:	f00c fce3 	bl	2eed2 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
   2250c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   22510:	f107 001c 	add.w	r0, r7, #28
   22514:	f00c fcdd 	bl	2eed2 <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
   22518:	f104 0b48 	add.w	fp, r4, #72	; 0x48
   2251c:	4659      	mov	r1, fp
   2251e:	f107 001c 	add.w	r0, r7, #28
   22522:	f00c fcd6 	bl	2eed2 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   22526:	69fb      	ldr	r3, [r7, #28]
            err = lfs_dir_getgstate(lfs, dir, &delta);
   22528:	4629      	mov	r1, r5
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   2252a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   2252e:	f023 0303 	bic.w	r3, r3, #3
            err = lfs_dir_getgstate(lfs, dir, &delta);
   22532:	4620      	mov	r0, r4
   22534:	f107 021c 	add.w	r2, r7, #28
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   22538:	61fb      	str	r3, [r7, #28]
            err = lfs_dir_getgstate(lfs, dir, &delta);
   2253a:	f7fe fc51 	bl	20de0 <lfs_dir_getgstate>
            if (err) {
   2253e:	2800      	cmp	r0, #0
   22540:	d142      	bne.n	225c8 <lfs_dir_compact+0x234>
        if (((uint32_t*)a)[i] != 0) {
   22542:	e9d7 3207 	ldrd	r3, r2, [r7, #28]
   22546:	4313      	orrs	r3, r2
   22548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2254a:	4313      	orrs	r3, r2
   2254c:	d009      	beq.n	22562 <lfs_dir_compact+0x1ce>
                err = lfs_dir_commitattr(lfs, &commit,
   2254e:	4651      	mov	r1, sl
   22550:	4620      	mov	r0, r4
   22552:	4a2d      	ldr	r2, [pc, #180]	; (22608 <lfs_dir_compact+0x274>)
   22554:	f107 031c 	add.w	r3, r7, #28
   22558:	f00c fe99 	bl	2f28e <lfs_dir_commitattr>
                if (err) {
   2255c:	2800      	cmp	r0, #0
   2255e:	f47f af55 	bne.w	2240c <lfs_dir_compact+0x78>
            err = lfs_dir_commitcrc(lfs, &commit);
   22562:	4651      	mov	r1, sl
   22564:	4620      	mov	r0, r4
   22566:	f7ff fccb 	bl	21f00 <lfs_dir_commitcrc>
            if (err) {
   2256a:	2800      	cmp	r0, #0
   2256c:	f47f af4e 	bne.w	2240c <lfs_dir_compact+0x78>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   22570:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   22572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22574:	699a      	ldr	r2, [r3, #24]
   22576:	fbb1 f3f2 	udiv	r3, r1, r2
   2257a:	fb02 1313 	mls	r3, r2, r3, r1
   2257e:	b15b      	cbz	r3, 22598 <lfs_dir_compact+0x204>
   22580:	4922      	ldr	r1, [pc, #136]	; (2260c <lfs_dir_compact+0x278>)
   22582:	4823      	ldr	r0, [pc, #140]	; (22610 <lfs_dir_compact+0x27c>)
   22584:	f240 7352 	movw	r3, #1874	; 0x752
   22588:	4a1a      	ldr	r2, [pc, #104]	; (225f4 <lfs_dir_compact+0x260>)
   2258a:	f008 f8a6 	bl	2a6da <assert_print>
   2258e:	f240 7152 	movw	r1, #1874	; 0x752
   22592:	4818      	ldr	r0, [pc, #96]	; (225f4 <lfs_dir_compact+0x260>)
   22594:	f008 f89a 	bl	2a6cc <assert_post_action>
    pair[0] = pair[1];
   22598:	e9d5 2000 	ldrd	r2, r0, [r5]
    pair[1] = t;
   2259c:	e9c5 0200 	strd	r0, r2, [r5]
            dir->count = end - begin;
   225a0:	68fa      	ldr	r2, [r7, #12]
            dir->off = commit.off;
   225a2:	60e9      	str	r1, [r5, #12]
            dir->count = end - begin;
   225a4:	eba2 0909 	sub.w	r9, r2, r9
            dir->etag = commit.ptag;
   225a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
            dir->count = end - begin;
   225aa:	f8a5 9014 	strh.w	r9, [r5, #20]
            dir->etag = commit.ptag;
   225ae:	612a      	str	r2, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
   225b0:	64a3      	str	r3, [r4, #72]	; 0x48
   225b2:	e9cb 3301 	strd	r3, r3, [fp, #4]
            if (!relocated) {
   225b6:	b936      	cbnz	r6, 225c6 <lfs_dir_compact+0x232>
                lfs->gdisk = lfs->gstate;
   225b8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   225bc:	3430      	adds	r4, #48	; 0x30
   225be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   225c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
   225c6:	4630      	mov	r0, r6
}
   225c8:	3744      	adds	r7, #68	; 0x44
   225ca:	46bd      	mov	sp, r7
   225cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int err = lfs_alloc(lfs, &dir->pair[1]);
   225d0:	4620      	mov	r0, r4
   225d2:	1d29      	adds	r1, r5, #4
   225d4:	f7ff fd86 	bl	220e4 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
   225d8:	2800      	cmp	r0, #0
   225da:	f43f af4c 	beq.w	22476 <lfs_dir_compact+0xe2>
   225de:	f110 0f1c 	cmn.w	r0, #28
   225e2:	d1f1      	bne.n	225c8 <lfs_dir_compact+0x234>
   225e4:	2e00      	cmp	r6, #0
   225e6:	f43f af3f 	beq.w	22468 <lfs_dir_compact+0xd4>
   225ea:	e6fc      	b.n	223e6 <lfs_dir_compact+0x52>
   225ec:	00037e92 	.word	0x00037e92
   225f0:	0003158c 	.word	0x0003158c
   225f4:	00037aaa 	.word	0x00037aaa
   225f8:	01000005 	.word	0x01000005
   225fc:	0002f339 	.word	0x0002f339
   22600:	400ffc00 	.word	0x400ffc00
   22604:	000ffc08 	.word	0x000ffc08
   22608:	7ffffc0c 	.word	0x7ffffc0c
   2260c:	00037e6c 	.word	0x00037e6c
   22610:	00032679 	.word	0x00032679

00022614 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
   22614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   22618:	f240 4cff 	movw	ip, #1279	; 0x4ff
        lfs_mdir_t *pdir) {
   2261c:	460d      	mov	r5, r1
   2261e:	469b      	mov	fp, r3
    bool hasdelete = false;
   22620:	2100      	movs	r1, #0
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   22622:	f240 4401 	movw	r4, #1025	; 0x401
        lfs_mdir_t *pdir) {
   22626:	b097      	sub	sp, #92	; 0x5c
   22628:	af08      	add	r7, sp, #32
   2262a:	607a      	str	r2, [r7, #4]
   2262c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2262e:	f8d7 8064 	ldr.w	r8, [r7, #100]	; 0x64
   22632:	4606      	mov	r6, r0
   22634:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    for (int i = 0; i < attrcount; i++) {
   22638:	4298      	cmp	r0, r3
   2263a:	f040 809d 	bne.w	22778 <lfs_dir_relocatingcommit+0x164>
    if (hasdelete && dir->count == 0) {
   2263e:	2900      	cmp	r1, #0
   22640:	f040 80ca 	bne.w	227d8 <lfs_dir_relocatingcommit+0x1c4>
    if (dir->erased) {
   22644:	7dab      	ldrb	r3, [r5, #22]
   22646:	2b00      	cmp	r3, #0
   22648:	f040 80ed 	bne.w	22826 <lfs_dir_relocatingcommit+0x212>
    rcache->block = LFS_BLOCK_NULL;
   2264c:	f04f 33ff 	mov.w	r3, #4294967295
   22650:	6133      	str	r3, [r6, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
   22652:	f8b5 9014 	ldrh.w	r9, [r5, #20]
        lfs_size_t split = begin;
   22656:	f04f 0800 	mov.w	r8, #0
        while (end - split > 1) {
   2265a:	eba9 0a08 	sub.w	sl, r9, r8
   2265e:	f1ba 0f01 	cmp.w	sl, #1
   22662:	f200 81a0 	bhi.w	229a6 <lfs_dir_relocatingcommit+0x392>
        if (split == begin) {
   22666:	f1b8 0f00 	cmp.w	r8, #0
   2266a:	d02b      	beq.n	226c4 <lfs_dir_relocatingcommit+0xb0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   2266c:	fa1f f888 	uxth.w	r8, r8
   22670:	e9cd 8901 	strd	r8, r9, [sp, #4]
   22674:	9500      	str	r5, [sp, #0]
   22676:	465a      	mov	r2, fp
   22678:	4629      	mov	r1, r5
   2267a:	4630      	mov	r0, r6
   2267c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2267e:	f00d f841 	bl	2f704 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
   22682:	4604      	mov	r4, r0
   22684:	2800      	cmp	r0, #0
   22686:	f000 818c 	beq.w	229a2 <lfs_dir_relocatingcommit+0x38e>
   2268a:	f110 0f1c 	cmn.w	r0, #28
   2268e:	d16f      	bne.n	22770 <lfs_dir_relocatingcommit+0x15c>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
   22690:	e9d5 1300 	ldrd	r1, r3, [r5]
   22694:	466c      	mov	r4, sp
   22696:	b08c      	sub	sp, #48	; 0x30
   22698:	aa08      	add	r2, sp, #32
   2269a:	48a3      	ldr	r0, [pc, #652]	; (22928 <lfs_dir_relocatingcommit+0x314>)
   2269c:	6253      	str	r3, [r2, #36]	; 0x24
   2269e:	6150      	str	r0, [r2, #20]
   226a0:	f44f 7300 	mov.w	r3, #512	; 0x200
   226a4:	48a1      	ldr	r0, [pc, #644]	; (2292c <lfs_dir_relocatingcommit+0x318>)
   226a6:	8513      	strh	r3, [r2, #40]	; 0x28
   226a8:	6190      	str	r0, [r2, #24]
   226aa:	f240 70b3 	movw	r0, #1971	; 0x7b3
   226ae:	4ba0      	ldr	r3, [pc, #640]	; (22930 <lfs_dir_relocatingcommit+0x31c>)
   226b0:	e9c2 0107 	strd	r0, r1, [r2, #28]
   226b4:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   226b8:	489e      	ldr	r0, [pc, #632]	; (22934 <lfs_dir_relocatingcommit+0x320>)
   226ba:	f842 3f10 	str.w	r3, [r2, #16]!
   226be:	f00c fce4 	bl	2f08a <z_log_msg_static_create.constprop.0>
   226c2:	46a5      	mov	sp, r4
    return (lfs->cfg->block_cycles > 0
   226c4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   226c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
   226c8:	2a00      	cmp	r2, #0
   226ca:	dd45      	ble.n	22758 <lfs_dir_relocatingcommit+0x144>
   226cc:	68ab      	ldr	r3, [r5, #8]
   226ce:	3201      	adds	r2, #1
   226d0:	3301      	adds	r3, #1
   226d2:	f042 0201 	orr.w	r2, r2, #1
   226d6:	fbb3 f1f2 	udiv	r1, r3, r2
   226da:	fb02 3311 	mls	r3, r2, r1, r3
   226de:	2b00      	cmp	r3, #0
   226e0:	d13a      	bne.n	22758 <lfs_dir_relocatingcommit+0x144>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
   226e2:	623b      	str	r3, [r7, #32]
   226e4:	2301      	movs	r3, #1
   226e6:	4628      	mov	r0, r5
   226e8:	627b      	str	r3, [r7, #36]	; 0x24
   226ea:	f107 0120 	add.w	r1, r7, #32
   226ee:	f00c fbd5 	bl	2ee9c <lfs_pair_cmp>
   226f2:	4680      	mov	r8, r0
   226f4:	bb80      	cbnz	r0, 22758 <lfs_dir_relocatingcommit+0x144>
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
   226f6:	4630      	mov	r0, r6
   226f8:	f7ff f9c0 	bl	21a7c <lfs_fs_rawsize>
        if (size < 0) {
   226fc:	1e04      	subs	r4, r0, #0
   226fe:	f2c0 8086 	blt.w	2280e <lfs_dir_relocatingcommit+0x1fa>
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
   22702:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   22704:	6a1b      	ldr	r3, [r3, #32]
   22706:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2270a:	d225      	bcs.n	22758 <lfs_dir_relocatingcommit+0x144>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
   2270c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   22710:	9500      	str	r5, [sp, #0]
   22712:	465a      	mov	r2, fp
   22714:	4629      	mov	r1, r5
   22716:	4630      	mov	r0, r6
   22718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2271a:	f00c fff3 	bl	2f704 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
   2271e:	4604      	mov	r4, r0
   22720:	2800      	cmp	r0, #0
   22722:	f000 817c 	beq.w	22a1e <lfs_dir_relocatingcommit+0x40a>
   22726:	f110 0f1c 	cmn.w	r0, #28
   2272a:	d121      	bne.n	22770 <lfs_dir_relocatingcommit+0x15c>
                LFS_WARN("Unable to expand superblock");
   2272c:	466c      	mov	r4, sp
   2272e:	b08a      	sub	sp, #40	; 0x28
   22730:	aa08      	add	r2, sp, #32
   22732:	4b81      	ldr	r3, [pc, #516]	; (22938 <lfs_dir_relocatingcommit+0x324>)
   22734:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   22738:	6153      	str	r3, [r2, #20]
   2273a:	4b7c      	ldr	r3, [pc, #496]	; (2292c <lfs_dir_relocatingcommit+0x318>)
   2273c:	487d      	ldr	r0, [pc, #500]	; (22934 <lfs_dir_relocatingcommit+0x320>)
   2273e:	6193      	str	r3, [r2, #24]
   22740:	f240 73d1 	movw	r3, #2001	; 0x7d1
   22744:	61d3      	str	r3, [r2, #28]
   22746:	f44f 7300 	mov.w	r3, #512	; 0x200
   2274a:	8413      	strh	r3, [r2, #32]
   2274c:	4b7b      	ldr	r3, [pc, #492]	; (2293c <lfs_dir_relocatingcommit+0x328>)
   2274e:	f842 3f10 	str.w	r3, [r2, #16]!
   22752:	f00c fc9a 	bl	2f08a <z_log_msg_static_create.constprop.0>
   22756:	46a5      	mov	sp, r4
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
   22758:	2300      	movs	r3, #0
   2275a:	e9cd 5300 	strd	r5, r3, [sp]
   2275e:	f8cd 9008 	str.w	r9, [sp, #8]
   22762:	465a      	mov	r2, fp
   22764:	4629      	mov	r1, r5
   22766:	4630      	mov	r0, r6
   22768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2276a:	f7ff fe13 	bl	22394 <lfs_dir_compact>
   2276e:	4604      	mov	r4, r0
    if (state < 0) {
   22770:	2c00      	cmp	r4, #0
   22772:	f280 80fd 	bge.w	22970 <lfs_dir_relocatingcommit+0x35c>
   22776:	e04a      	b.n	2280e <lfs_dir_relocatingcommit+0x1fa>
    return (tag & 0x7ff00000) >> 20;
   22778:	681a      	ldr	r2, [r3, #0]
   2277a:	ea4f 5e12 	mov.w	lr, r2, lsr #20
   2277e:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
   22782:	42a2      	cmp	r2, r4
   22784:	d104      	bne.n	22790 <lfs_dir_relocatingcommit+0x17c>
            dir->count += 1;
   22786:	8aaa      	ldrh	r2, [r5, #20]
   22788:	3201      	adds	r2, #1
   2278a:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
   2278c:	3308      	adds	r3, #8
   2278e:	e753      	b.n	22638 <lfs_dir_relocatingcommit+0x24>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
   22790:	4562      	cmp	r2, ip
   22792:	d111      	bne.n	227b8 <lfs_dir_relocatingcommit+0x1a4>
            LFS_ASSERT(dir->count > 0);
   22794:	8aaa      	ldrh	r2, [r5, #20]
   22796:	b95a      	cbnz	r2, 227b0 <lfs_dir_relocatingcommit+0x19c>
   22798:	4969      	ldr	r1, [pc, #420]	; (22940 <lfs_dir_relocatingcommit+0x32c>)
   2279a:	f240 73e9 	movw	r3, #2025	; 0x7e9
   2279e:	4a63      	ldr	r2, [pc, #396]	; (2292c <lfs_dir_relocatingcommit+0x318>)
   227a0:	4868      	ldr	r0, [pc, #416]	; (22944 <lfs_dir_relocatingcommit+0x330>)
   227a2:	f007 ff9a 	bl	2a6da <assert_print>
   227a6:	f240 71e9 	movw	r1, #2025	; 0x7e9
        LFS_ASSERT(pdir);
   227aa:	4860      	ldr	r0, [pc, #384]	; (2292c <lfs_dir_relocatingcommit+0x318>)
   227ac:	f007 ff8e 	bl	2a6cc <assert_post_action>
            dir->count -= 1;
   227b0:	3a01      	subs	r2, #1
            hasdelete = true;
   227b2:	2101      	movs	r1, #1
            dir->count -= 1;
   227b4:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
   227b6:	e7e9      	b.n	2278c <lfs_dir_relocatingcommit+0x178>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
   227b8:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
   227bc:	f5be 6fc0 	cmp.w	lr, #1536	; 0x600
   227c0:	d1e4      	bne.n	2278c <lfs_dir_relocatingcommit+0x178>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
   227c2:	685a      	ldr	r2, [r3, #4]
   227c4:	6812      	ldr	r2, [r2, #0]
   227c6:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
   227c8:	685a      	ldr	r2, [r3, #4]
   227ca:	6852      	ldr	r2, [r2, #4]
   227cc:	61ea      	str	r2, [r5, #28]
    return (tag & 0x0ff00000) >> 20;
   227ce:	681a      	ldr	r2, [r3, #0]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
   227d0:	f3c2 5200 	ubfx	r2, r2, #20, #1
   227d4:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
   227d6:	e7d9      	b.n	2278c <lfs_dir_relocatingcommit+0x178>
    if (hasdelete && dir->count == 0) {
   227d8:	8aab      	ldrh	r3, [r5, #20]
   227da:	2b00      	cmp	r3, #0
   227dc:	f47f af32 	bne.w	22644 <lfs_dir_relocatingcommit+0x30>
        LFS_ASSERT(pdir);
   227e0:	f1b8 0f00 	cmp.w	r8, #0
   227e4:	d109      	bne.n	227fa <lfs_dir_relocatingcommit+0x1e6>
   227e6:	4958      	ldr	r1, [pc, #352]	; (22948 <lfs_dir_relocatingcommit+0x334>)
   227e8:	f240 73f6 	movw	r3, #2038	; 0x7f6
   227ec:	4a4f      	ldr	r2, [pc, #316]	; (2292c <lfs_dir_relocatingcommit+0x318>)
   227ee:	4855      	ldr	r0, [pc, #340]	; (22944 <lfs_dir_relocatingcommit+0x330>)
   227f0:	f007 ff73 	bl	2a6da <assert_print>
   227f4:	f240 71f6 	movw	r1, #2038	; 0x7f6
   227f8:	e7d7      	b.n	227aa <lfs_dir_relocatingcommit+0x196>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
   227fa:	4642      	mov	r2, r8
   227fc:	4629      	mov	r1, r5
   227fe:	4630      	mov	r0, r6
   22800:	f00c fc53 	bl	2f0aa <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   22804:	4604      	mov	r4, r0
   22806:	b138      	cbz	r0, 22818 <lfs_dir_relocatingcommit+0x204>
   22808:	1c83      	adds	r3, r0, #2
   2280a:	f43f af1b 	beq.w	22644 <lfs_dir_relocatingcommit+0x30>
}
   2280e:	4620      	mov	r0, r4
   22810:	373c      	adds	r7, #60	; 0x3c
   22812:	46bd      	mov	sp, r7
   22814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err != LFS_ERR_NOENT && pdir->split) {
   22818:	f898 3017 	ldrb.w	r3, [r8, #23]
   2281c:	2b00      	cmp	r3, #0
   2281e:	f43f af11 	beq.w	22644 <lfs_dir_relocatingcommit+0x30>
            state = LFS_OK_DROPPED;
   22822:	2402      	movs	r4, #2
   22824:	e0a4      	b.n	22970 <lfs_dir_relocatingcommit+0x35c>
        struct lfs_commit commit = {
   22826:	f04f 31ff 	mov.w	r1, #4294967295
   2282a:	682b      	ldr	r3, [r5, #0]
            .off = dir->off,
   2282c:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
   2282e:	623b      	str	r3, [r7, #32]
   22830:	e9c7 120b 	strd	r1, r2, [r7, #44]	; 0x2c
            .ptag = dir->etag,
   22834:	692b      	ldr	r3, [r5, #16]
            .end = (lfs->cfg->metadata_max ?
   22836:	6eb0      	ldr	r0, [r6, #104]	; 0x68
        struct lfs_commit commit = {
   22838:	627a      	str	r2, [r7, #36]	; 0x24
   2283a:	62bb      	str	r3, [r7, #40]	; 0x28
            .end = (lfs->cfg->metadata_max ?
   2283c:	6c81      	ldr	r1, [r0, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   2283e:	b309      	cbz	r1, 22884 <lfs_dir_relocatingcommit+0x270>
   22840:	3908      	subs	r1, #8
        struct lfs_commit commit = {
   22842:	6379      	str	r1, [r7, #52]	; 0x34
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   22844:	f107 0820 	add.w	r8, r7, #32
        int err = lfs_dir_traverse(lfs,
   22848:	f107 010c 	add.w	r1, r7, #12
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
   2284c:	60fe      	str	r6, [r7, #12]
   2284e:	f8c7 8010 	str.w	r8, [r7, #16]
        int err = lfs_dir_traverse(lfs,
   22852:	9107      	str	r1, [sp, #28]
   22854:	493d      	ldr	r1, [pc, #244]	; (2294c <lfs_dir_relocatingcommit+0x338>)
   22856:	4630      	mov	r0, r6
   22858:	9106      	str	r1, [sp, #24]
   2285a:	2100      	movs	r1, #0
   2285c:	e9cd 1104 	strd	r1, r1, [sp, #16]
   22860:	e9cd 1102 	strd	r1, r1, [sp, #8]
   22864:	6e39      	ldr	r1, [r7, #96]	; 0x60
   22866:	e9cd b100 	strd	fp, r1, [sp]
   2286a:	4629      	mov	r1, r5
   2286c:	f7fe fb18 	bl	20ea0 <lfs_dir_traverse.constprop.0>
        if (err) {
   22870:	4604      	mov	r4, r0
   22872:	b148      	cbz	r0, 22888 <lfs_dir_relocatingcommit+0x274>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
   22874:	f114 0f1c 	cmn.w	r4, #28
   22878:	f43f aee8 	beq.w	2264c <lfs_dir_relocatingcommit+0x38>
   2287c:	f114 0f54 	cmn.w	r4, #84	; 0x54
   22880:	d1c5      	bne.n	2280e <lfs_dir_relocatingcommit+0x1fa>
   22882:	e6e3      	b.n	2264c <lfs_dir_relocatingcommit+0x38>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
   22884:	69c1      	ldr	r1, [r0, #28]
   22886:	e7db      	b.n	22840 <lfs_dir_relocatingcommit+0x22c>
        lfs_gstate_xor(&delta, &lfs->gstate);
   22888:	f106 0930 	add.w	r9, r6, #48	; 0x30
   2288c:	4649      	mov	r1, r9
        lfs_gstate_t delta = {0};
   2288e:	e9c7 0005 	strd	r0, r0, [r7, #20]
   22892:	61f8      	str	r0, [r7, #28]
        lfs_gstate_xor(&delta, &lfs->gstate);
   22894:	f107 0014 	add.w	r0, r7, #20
   22898:	f00c fb1b 	bl	2eed2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
   2289c:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   228a0:	4619      	mov	r1, r3
   228a2:	f107 0014 	add.w	r0, r7, #20
        lfs_gstate_xor(&delta, &lfs->gdelta);
   228a6:	f106 0a48 	add.w	sl, r6, #72	; 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
   228aa:	603b      	str	r3, [r7, #0]
   228ac:	f00c fb11 	bl	2eed2 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
   228b0:	4651      	mov	r1, sl
   228b2:	f107 0014 	add.w	r0, r7, #20
   228b6:	f00c fb0c 	bl	2eed2 <lfs_gstate_xor>
        if (((uint32_t*)a)[i] != 0) {
   228ba:	e9d7 2106 	ldrd	r2, r1, [r7, #24]
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   228be:	697b      	ldr	r3, [r7, #20]
        if (((uint32_t*)a)[i] != 0) {
   228c0:	430a      	orrs	r2, r1
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   228c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   228c6:	f023 0303 	bic.w	r3, r3, #3
        if (((uint32_t*)a)[i] != 0) {
   228ca:	431a      	orrs	r2, r3
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
   228cc:	617b      	str	r3, [r7, #20]
        if (((uint32_t*)a)[i] != 0) {
   228ce:	d012      	beq.n	228f6 <lfs_dir_relocatingcommit+0x2e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
   228d0:	4629      	mov	r1, r5
   228d2:	4630      	mov	r0, r6
   228d4:	f107 0214 	add.w	r2, r7, #20
   228d8:	f7fe fa82 	bl	20de0 <lfs_dir_getgstate>
            if (err) {
   228dc:	4604      	mov	r4, r0
   228de:	2800      	cmp	r0, #0
   228e0:	d195      	bne.n	2280e <lfs_dir_relocatingcommit+0x1fa>
            err = lfs_dir_commitattr(lfs, &commit,
   228e2:	4641      	mov	r1, r8
   228e4:	4630      	mov	r0, r6
   228e6:	4a1a      	ldr	r2, [pc, #104]	; (22950 <lfs_dir_relocatingcommit+0x33c>)
   228e8:	f107 0314 	add.w	r3, r7, #20
   228ec:	f00c fccf 	bl	2f28e <lfs_dir_commitattr>
            if (err) {
   228f0:	4604      	mov	r4, r0
   228f2:	2800      	cmp	r0, #0
   228f4:	d1be      	bne.n	22874 <lfs_dir_relocatingcommit+0x260>
        err = lfs_dir_commitcrc(lfs, &commit);
   228f6:	4641      	mov	r1, r8
   228f8:	4630      	mov	r0, r6
   228fa:	f7ff fb01 	bl	21f00 <lfs_dir_commitcrc>
        if (err) {
   228fe:	4604      	mov	r4, r0
   22900:	2800      	cmp	r0, #0
   22902:	d1b7      	bne.n	22874 <lfs_dir_relocatingcommit+0x260>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
   22904:	6eb2      	ldr	r2, [r6, #104]	; 0x68
   22906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22908:	6991      	ldr	r1, [r2, #24]
   2290a:	fbb3 f2f1 	udiv	r2, r3, r1
   2290e:	fb01 3212 	mls	r2, r1, r2, r3
   22912:	b30a      	cbz	r2, 22958 <lfs_dir_relocatingcommit+0x344>
   22914:	490f      	ldr	r1, [pc, #60]	; (22954 <lfs_dir_relocatingcommit+0x340>)
   22916:	f44f 6304 	mov.w	r3, #2112	; 0x840
   2291a:	4a04      	ldr	r2, [pc, #16]	; (2292c <lfs_dir_relocatingcommit+0x318>)
   2291c:	4809      	ldr	r0, [pc, #36]	; (22944 <lfs_dir_relocatingcommit+0x330>)
   2291e:	f007 fedc 	bl	2a6da <assert_print>
   22922:	f44f 6104 	mov.w	r1, #2112	; 0x840
   22926:	e740      	b.n	227aa <lfs_dir_relocatingcommit+0x196>
   22928:	00037ed3 	.word	0x00037ed3
   2292c:	00037aaa 	.word	0x00037aaa
   22930:	01000006 	.word	0x01000006
   22934:	0003158c 	.word	0x0003158c
   22938:	00037ef7 	.word	0x00037ef7
   2293c:	01000004 	.word	0x01000004
   22940:	00037ebf 	.word	0x00037ebf
   22944:	00032679 	.word	0x00032679
   22948:	00037ece 	.word	0x00037ece
   2294c:	0002f339 	.word	0x0002f339
   22950:	7ffffc0c 	.word	0x7ffffc0c
   22954:	00037e6c 	.word	0x00037e6c
        dir->off = commit.off;
   22958:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
   2295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2295c:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
   2295e:	f106 033c 	add.w	r3, r6, #60	; 0x3c
   22962:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
   22966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
   2296a:	64b4      	str	r4, [r6, #72]	; 0x48
   2296c:	e9ca 4401 	strd	r4, r4, [sl, #4]
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
   22970:	687b      	ldr	r3, [r7, #4]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22972:	f8d6 8028 	ldr.w	r8, [r6, #40]	; 0x28
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
   22976:	681b      	ldr	r3, [r3, #0]
   22978:	623b      	str	r3, [r7, #32]
   2297a:	687b      	ldr	r3, [r7, #4]
   2297c:	685b      	ldr	r3, [r3, #4]
   2297e:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22980:	f1b8 0f00 	cmp.w	r8, #0
   22984:	f43f af43 	beq.w	2280e <lfs_dir_relocatingcommit+0x1fa>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
   22988:	f108 0908 	add.w	r9, r8, #8
   2298c:	4648      	mov	r0, r9
   2298e:	f107 0120 	add.w	r1, r7, #32
   22992:	f00c fa83 	bl	2ee9c <lfs_pair_cmp>
   22996:	4682      	mov	sl, r0
   22998:	2800      	cmp	r0, #0
   2299a:	d042      	beq.n	22a22 <lfs_dir_relocatingcommit+0x40e>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   2299c:	f8d8 8000 	ldr.w	r8, [r8]
   229a0:	e7ee      	b.n	22980 <lfs_dir_relocatingcommit+0x36c>
            end = split;
   229a2:	46c1      	mov	r9, r8
   229a4:	e657      	b.n	22656 <lfs_dir_relocatingcommit+0x42>
            lfs_size_t size = 0;
   229a6:	2300      	movs	r3, #0
   229a8:	623b      	str	r3, [r7, #32]
            int err = lfs_dir_traverse(lfs,
   229aa:	f107 0320 	add.w	r3, r7, #32
   229ae:	9307      	str	r3, [sp, #28]
   229b0:	4b4b      	ldr	r3, [pc, #300]	; (22ae0 <lfs_dir_relocatingcommit+0x4cc>)
   229b2:	fa1f f288 	uxth.w	r2, r8
   229b6:	9306      	str	r3, [sp, #24]
   229b8:	4253      	negs	r3, r2
   229ba:	b21b      	sxth	r3, r3
   229bc:	e9cd 9304 	strd	r9, r3, [sp, #16]
   229c0:	4b48      	ldr	r3, [pc, #288]	; (22ae4 <lfs_dir_relocatingcommit+0x4d0>)
   229c2:	9203      	str	r2, [sp, #12]
   229c4:	9302      	str	r3, [sp, #8]
   229c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   229c8:	2200      	movs	r2, #0
   229ca:	e9cd b300 	strd	fp, r3, [sp]
   229ce:	4629      	mov	r1, r5
   229d0:	f04f 33ff 	mov.w	r3, #4294967295
   229d4:	4630      	mov	r0, r6
   229d6:	f7fe fa63 	bl	20ea0 <lfs_dir_traverse.constprop.0>
            if (err) {
   229da:	4604      	mov	r4, r0
   229dc:	2800      	cmp	r0, #0
   229de:	f47f aec7 	bne.w	22770 <lfs_dir_relocatingcommit+0x15c>
            if (end - split < 0xff
   229e2:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
   229e6:	d815      	bhi.n	22a14 <lfs_dir_relocatingcommit+0x400>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229e8:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   229ea:	69da      	ldr	r2, [r3, #28]
                            (lfs->cfg->metadata_max
   229ec:	6c98      	ldr	r0, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   229ee:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
   229f2:	b190      	cbz	r0, 22a1a <lfs_dir_relocatingcommit+0x406>
   229f4:	0842      	lsrs	r2, r0, #1
                            lfs->cfg->prog_size))) {
   229f6:	6998      	ldr	r0, [r3, #24]
	return lfs_aligndown(a + alignment-1, alignment);
   229f8:	1e43      	subs	r3, r0, #1
   229fa:	4413      	add	r3, r2
	return a - (a % alignment);
   229fc:	fbb3 f2f0 	udiv	r2, r3, r0
   22a00:	fb00 3212 	mls	r2, r0, r2, r3
   22a04:	1a9b      	subs	r3, r3, r2
	return (a < b) ? a : b;
   22a06:	428b      	cmp	r3, r1
   22a08:	bf28      	it	cs
   22a0a:	460b      	movcs	r3, r1
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   22a0c:	6a3a      	ldr	r2, [r7, #32]
   22a0e:	4293      	cmp	r3, r2
   22a10:	f4bf ae29 	bcs.w	22666 <lfs_dir_relocatingcommit+0x52>
            split = split + ((end - split) / 2);
   22a14:	eb08 085a 	add.w	r8, r8, sl, lsr #1
   22a18:	e61f      	b.n	2265a <lfs_dir_relocatingcommit+0x46>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
   22a1a:	0852      	lsrs	r2, r2, #1
   22a1c:	e7eb      	b.n	229f6 <lfs_dir_relocatingcommit+0x3e2>
                end = begin;
   22a1e:	4681      	mov	r9, r0
   22a20:	e69a      	b.n	22758 <lfs_dir_relocatingcommit+0x144>
            d->m = *dir;
   22a22:	46cc      	mov	ip, r9
   22a24:	46ae      	mov	lr, r5
   22a26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22a2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22a2e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22a32:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
   22a36:	687b      	ldr	r3, [r7, #4]
   22a38:	4599      	cmp	r9, r3
   22a3a:	d008      	beq.n	22a4e <lfs_dir_relocatingcommit+0x43a>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a3c:	f240 41ff 	movw	r1, #1279	; 0x4ff
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   22a40:	f240 4001 	movw	r0, #1025	; 0x401
                for (int i = 0; i < attrcount; i++) {
   22a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
                            d->id == lfs_tag_id(attrs[i].tag)) {
   22a46:	f8b8 3004 	ldrh.w	r3, [r8, #4]
                for (int i = 0; i < attrcount; i++) {
   22a4a:	4592      	cmp	sl, r2
   22a4c:	d117      	bne.n	22a7e <lfs_dir_relocatingcommit+0x46a>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a4e:	f108 0a20 	add.w	sl, r8, #32
            while (d->id >= d->m.count && d->m.split) {
   22a52:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   22a56:	f8b8 201c 	ldrh.w	r2, [r8, #28]
   22a5a:	4293      	cmp	r3, r2
   22a5c:	d39e      	bcc.n	2299c <lfs_dir_relocatingcommit+0x388>
   22a5e:	f898 101f 	ldrb.w	r1, [r8, #31]
   22a62:	2900      	cmp	r1, #0
   22a64:	d09a      	beq.n	2299c <lfs_dir_relocatingcommit+0x388>
                d->id -= d->m.count;
   22a66:	1a9b      	subs	r3, r3, r2
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a68:	4649      	mov	r1, r9
   22a6a:	4652      	mov	r2, sl
   22a6c:	4630      	mov	r0, r6
                d->id -= d->m.count;
   22a6e:	f8a8 3004 	strh.w	r3, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a72:	f00c fb0d 	bl	2f090 <lfs_dir_fetch>
                if (err) {
   22a76:	2800      	cmp	r0, #0
   22a78:	d0eb      	beq.n	22a52 <lfs_dir_relocatingcommit+0x43e>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
   22a7a:	4604      	mov	r4, r0
   22a7c:	e6c7      	b.n	2280e <lfs_dir_relocatingcommit+0x1fa>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a7e:	f85b 203a 	ldr.w	r2, [fp, sl, lsl #3]
    return (tag & 0x7ff00000) >> 20;
   22a82:	f3c2 5c0a 	ubfx	ip, r2, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a86:	458c      	cmp	ip, r1
   22a88:	d118      	bne.n	22abc <lfs_dir_relocatingcommit+0x4a8>
    return (tag & 0x000ffc00) >> 10;
   22a8a:	f3c2 2289 	ubfx	r2, r2, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22a8e:	429a      	cmp	r2, r3
   22a90:	d106      	bne.n	22aa0 <lfs_dir_relocatingcommit+0x48c>
                        d->m.pair[0] = LFS_BLOCK_NULL;
   22a92:	f04f 33ff 	mov.w	r3, #4294967295
                        d->m.pair[1] = LFS_BLOCK_NULL;
   22a96:	e9c8 3302 	strd	r3, r3, [r8, #8]
                for (int i = 0; i < attrcount; i++) {
   22a9a:	f10a 0a01 	add.w	sl, sl, #1
   22a9e:	e7d1      	b.n	22a44 <lfs_dir_relocatingcommit+0x430>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
   22aa0:	d2fb      	bcs.n	22a9a <lfs_dir_relocatingcommit+0x486>
                        d->id -= 1;
   22aa2:	3b01      	subs	r3, #1
   22aa4:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
   22aa8:	f898 3006 	ldrb.w	r3, [r8, #6]
   22aac:	2b02      	cmp	r3, #2
   22aae:	d1f4      	bne.n	22a9a <lfs_dir_relocatingcommit+0x486>
                            ((lfs_dir_t*)d)->pos -= 1;
   22ab0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22ab4:	3b01      	subs	r3, #1
                            ((lfs_dir_t*)d)->pos += 1;
   22ab6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   22aba:	e7ee      	b.n	22a9a <lfs_dir_relocatingcommit+0x486>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
   22abc:	4584      	cmp	ip, r0
   22abe:	d1ec      	bne.n	22a9a <lfs_dir_relocatingcommit+0x486>
   22ac0:	f3c2 2289 	ubfx	r2, r2, #10, #10
   22ac4:	429a      	cmp	r2, r3
   22ac6:	d8e8      	bhi.n	22a9a <lfs_dir_relocatingcommit+0x486>
                        d->id += 1;
   22ac8:	3301      	adds	r3, #1
   22aca:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
   22ace:	f898 3006 	ldrb.w	r3, [r8, #6]
   22ad2:	2b02      	cmp	r3, #2
   22ad4:	d1e1      	bne.n	22a9a <lfs_dir_relocatingcommit+0x486>
                            ((lfs_dir_t*)d)->pos += 1;
   22ad6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   22ada:	3301      	adds	r3, #1
   22adc:	e7eb      	b.n	22ab6 <lfs_dir_relocatingcommit+0x4a2>
   22ade:	bf00      	nop
   22ae0:	0002ef4f 	.word	0x0002ef4f
   22ae4:	400ffc00 	.word	0x400ffc00

00022ae8 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
   22ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22aec:	4605      	mov	r5, r0
   22aee:	4688      	mov	r8, r1
   22af0:	4691      	mov	r9, r2
   22af2:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22af4:	6a86      	ldr	r6, [r0, #40]	; 0x28
        const struct lfs_mattr *attrs, int attrcount) {
   22af6:	b09d      	sub	sp, #116	; 0x74
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22af8:	2e00      	cmp	r6, #0
   22afa:	d160      	bne.n	22bbe <lfs_dir_orphaningcommit+0xd6>
    lfs_mdir_t ldir = *dir;
   22afc:	4646      	mov	r6, r8
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22afe:	f8d8 3000 	ldr.w	r3, [r8]
    lfs_mdir_t ldir = *dir;
   22b02:	ac0c      	add	r4, sp, #48	; 0x30
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22b04:	9304      	str	r3, [sp, #16]
   22b06:	f8d8 3004 	ldr.w	r3, [r8, #4]
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22b0a:	af0c      	add	r7, sp, #48	; 0x30
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
   22b0c:	9305      	str	r3, [sp, #20]
    lfs_mdir_t ldir = *dir;
   22b0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22b12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22b16:	ae14      	add	r6, sp, #80	; 0x50
    lfs_mdir_t ldir = *dir;
   22b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
   22b1c:	464b      	mov	r3, r9
   22b1e:	4642      	mov	r2, r8
   22b20:	4639      	mov	r1, r7
   22b22:	4628      	mov	r0, r5
   22b24:	e9cd a600 	strd	sl, r6, [sp]
   22b28:	f7ff fd74 	bl	22614 <lfs_dir_relocatingcommit>
    if (state < 0) {
   22b2c:	1e04      	subs	r4, r0, #0
   22b2e:	db72      	blt.n	22c16 <lfs_dir_orphaningcommit+0x12e>
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
   22b30:	4640      	mov	r0, r8
   22b32:	a904      	add	r1, sp, #16
   22b34:	f00c f9b2 	bl	2ee9c <lfs_pair_cmp>
   22b38:	b948      	cbnz	r0, 22b4e <lfs_dir_orphaningcommit+0x66>
        *dir = ldir;
   22b3a:	46c4      	mov	ip, r8
   22b3c:	46be      	mov	lr, r7
   22b3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22b42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22b46:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22b4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
   22b4e:	2c02      	cmp	r4, #2
   22b50:	d12c      	bne.n	22bac <lfs_dir_orphaningcommit+0xc4>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
   22b52:	4641      	mov	r1, r8
   22b54:	4628      	mov	r0, r5
   22b56:	f105 0248 	add.w	r2, r5, #72	; 0x48
   22b5a:	f7fe f941 	bl	20de0 <lfs_dir_getgstate>
        if (err) {
   22b5e:	4604      	mov	r4, r0
   22b60:	2800      	cmp	r0, #0
   22b62:	d158      	bne.n	22c16 <lfs_dir_orphaningcommit+0x12e>
        lpair[0] = pdir.pair[0];
   22b64:	9b14      	ldr	r3, [sp, #80]	; 0x50
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b66:	f898 2017 	ldrb.w	r2, [r8, #23]
        lpair[0] = pdir.pair[0];
   22b6a:	9304      	str	r3, [sp, #16]
        lpair[1] = pdir.pair[1];
   22b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b6e:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
        lpair[1] = pdir.pair[1];
   22b72:	9305      	str	r3, [sp, #20]
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b74:	4ba6      	ldr	r3, [pc, #664]	; (22e10 <lfs_dir_orphaningcommit+0x328>)
   22b76:	9001      	str	r0, [sp, #4]
   22b78:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22b7c:	9308      	str	r3, [sp, #32]
        lfs_pair_tole32(dir->tail);
   22b7e:	f108 0318 	add.w	r3, r8, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22b82:	9309      	str	r3, [sp, #36]	; 0x24
   22b84:	2301      	movs	r3, #1
   22b86:	4631      	mov	r1, r6
   22b88:	9300      	str	r3, [sp, #0]
   22b8a:	4628      	mov	r0, r5
   22b8c:	ab08      	add	r3, sp, #32
   22b8e:	aa04      	add	r2, sp, #16
   22b90:	f7ff fd40 	bl	22614 <lfs_dir_relocatingcommit>
        if (state < 0) {
   22b94:	1e04      	subs	r4, r0, #0
   22b96:	db3e      	blt.n	22c16 <lfs_dir_orphaningcommit+0x12e>
        ldir = pdir;
   22b98:	46bc      	mov	ip, r7
   22b9a:	46b6      	mov	lr, r6
   22b9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22ba0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22ba4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22ba8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22bac:	2300      	movs	r3, #0
   22bae:	9302      	str	r3, [sp, #8]
    while (state == LFS_OK_RELOCATED) {
   22bb0:	2c01      	cmp	r4, #1
   22bb2:	f040 8124 	bne.w	22dfe <lfs_dir_orphaningcommit+0x316>
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22bb6:	f105 0320 	add.w	r3, r5, #32
   22bba:	9303      	str	r3, [sp, #12]
   22bbc:	e091      	b.n	22ce2 <lfs_dir_orphaningcommit+0x1fa>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   22bbe:	f106 0008 	add.w	r0, r6, #8
   22bc2:	4540      	cmp	r0, r8
   22bc4:	d101      	bne.n	22bca <lfs_dir_orphaningcommit+0xe2>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
   22bc6:	6836      	ldr	r6, [r6, #0]
   22bc8:	e796      	b.n	22af8 <lfs_dir_orphaningcommit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
   22bca:	4641      	mov	r1, r8
   22bcc:	f00c f966 	bl	2ee9c <lfs_pair_cmp>
   22bd0:	2800      	cmp	r0, #0
   22bd2:	d1f8      	bne.n	22bc6 <lfs_dir_orphaningcommit+0xde>
   22bd4:	79b3      	ldrb	r3, [r6, #6]
   22bd6:	2b01      	cmp	r3, #1
   22bd8:	d1f5      	bne.n	22bc6 <lfs_dir_orphaningcommit+0xde>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   22bda:	6b33      	ldr	r3, [r6, #48]	; 0x30
   22bdc:	02da      	lsls	r2, r3, #11
   22bde:	d5f2      	bpl.n	22bc6 <lfs_dir_orphaningcommit+0xde>
                f->ctz.size > lfs->cfg->cache_size) {
   22be0:	6eab      	ldr	r3, [r5, #104]	; 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
   22be2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   22be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22be6:	429a      	cmp	r2, r3
   22be8:	d9ed      	bls.n	22bc6 <lfs_dir_orphaningcommit+0xde>
    file->off = file->pos;
   22bea:	6b73      	ldr	r3, [r6, #52]	; 0x34
    int err = lfs_file_relocate(lfs, file);
   22bec:	4631      	mov	r1, r6
    file->off = file->pos;
   22bee:	63f3      	str	r3, [r6, #60]	; 0x3c
    lfs->free.ack = lfs->cfg->block_count;
   22bf0:	6eab      	ldr	r3, [r5, #104]	; 0x68
    int err = lfs_file_relocate(lfs, file);
   22bf2:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   22bf4:	6a1b      	ldr	r3, [r3, #32]
   22bf6:	662b      	str	r3, [r5, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   22bf8:	f7ff fafe 	bl	221f8 <lfs_file_relocate>
    if (err) {
   22bfc:	4604      	mov	r4, r0
   22bfe:	b950      	cbnz	r0, 22c16 <lfs_dir_orphaningcommit+0x12e>
    file->flags &= ~LFS_F_INLINE;
   22c00:	6b33      	ldr	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   22c02:	4631      	mov	r1, r6
    file->flags &= ~LFS_F_INLINE;
   22c04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
            err = lfs_file_flush(lfs, f);
   22c08:	4628      	mov	r0, r5
    file->flags &= ~LFS_F_INLINE;
   22c0a:	6333      	str	r3, [r6, #48]	; 0x30
            err = lfs_file_flush(lfs, f);
   22c0c:	f00c fd0f 	bl	2f62e <lfs_file_flush>
            if (err) {
   22c10:	4604      	mov	r4, r0
   22c12:	2800      	cmp	r0, #0
   22c14:	d0d7      	beq.n	22bc6 <lfs_dir_orphaningcommit+0xde>
}
   22c16:	4620      	mov	r0, r4
   22c18:	b01d      	add	sp, #116	; 0x74
   22c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
   22c1e:	f10b 0108 	add.w	r1, fp, #8
   22c22:	a804      	add	r0, sp, #16
   22c24:	f00c f93a 	bl	2ee9c <lfs_pair_cmp>
   22c28:	b908      	cbnz	r0, 22c2e <lfs_dir_orphaningcommit+0x146>
                d->m.pair[1] = ldir.pair[1];
   22c2a:	e9cb 4202 	strd	r4, r2, [fp, #8]
            if (d->type == LFS_TYPE_DIR &&
   22c2e:	f89b 1006 	ldrb.w	r1, [fp, #6]
   22c32:	2902      	cmp	r1, #2
   22c34:	d107      	bne.n	22c46 <lfs_dir_orphaningcommit+0x15e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
   22c36:	f10b 012c 	add.w	r1, fp, #44	; 0x2c
   22c3a:	a804      	add	r0, sp, #16
   22c3c:	f00c f92e 	bl	2ee9c <lfs_pair_cmp>
            if (d->type == LFS_TYPE_DIR &&
   22c40:	b908      	cbnz	r0, 22c46 <lfs_dir_orphaningcommit+0x15e>
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
   22c42:	e9cb 420b 	strd	r4, r2, [fp, #44]	; 0x2c
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22c46:	f8db b000 	ldr.w	fp, [fp]
   22c4a:	e055      	b.n	22cf8 <lfs_dir_orphaningcommit+0x210>
            int err = lfs_fs_preporphans(lfs, +1);
   22c4c:	2101      	movs	r1, #1
   22c4e:	4628      	mov	r0, r5
   22c50:	f7fd ff36 	bl	20ac0 <lfs_fs_preporphans>
            if (err) {
   22c54:	4604      	mov	r4, r0
   22c56:	2800      	cmp	r0, #0
   22c58:	d1dd      	bne.n	22c16 <lfs_dir_orphaningcommit+0x12e>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22c5a:	4631      	mov	r1, r6
   22c5c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22c60:	f00c f945 	bl	2eeee <lfs_gstate_hasmovehere>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c64:	e9dd a914 	ldrd	sl, r9, [sp, #80]	; 0x50
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22c68:	b1c0      	cbz	r0, 22c9c <lfs_dir_orphaningcommit+0x1b4>
                moveid = lfs_tag_id(lfs->gstate.tag);
   22c6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
                if (moveid < lfs_tag_id(tag)) {
   22c6c:	f3c8 2389 	ubfx	r3, r8, #10, #10
    return (tag & 0x000ffc00) >> 10;
   22c70:	f3c1 2289 	ubfx	r2, r1, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22c74:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   22c78:	f421 01ff 	bic.w	r1, r1, #8355840	; 0x7f8000
   22c7c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
                if (moveid < lfs_tag_id(tag)) {
   22c80:	429a      	cmp	r2, r3
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22c82:	e9c5 1b0c 	strd	r1, fp, [r5, #48]	; 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22c86:	f8c5 b038 	str.w	fp, [r5, #56]	; 0x38
                if (moveid < lfs_tag_id(tag)) {
   22c8a:	d25d      	bcs.n	22d48 <lfs_dir_orphaningcommit+0x260>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c8c:	e9cd a906 	strd	sl, r9, [sp, #24]
                    tag -= LFS_MKTAG(0, 1, 0);
   22c90:	f5a8 6380 	sub.w	r3, r8, #1024	; 0x400
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22c94:	495f      	ldr	r1, [pc, #380]	; (22e14 <lfs_dir_orphaningcommit+0x32c>)
   22c96:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
   22c9a:	e003      	b.n	22ca4 <lfs_dir_orphaningcommit+0x1bc>
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22c9c:	e9cd a906 	strd	sl, r9, [sp, #24]
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22ca0:	4643      	mov	r3, r8
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22ca2:	2200      	movs	r2, #0
   22ca4:	9208      	str	r2, [sp, #32]
   22ca6:	2200      	movs	r2, #0
   22ca8:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   22cac:	2302      	movs	r3, #2
   22cae:	9201      	str	r2, [sp, #4]
   22cb0:	9300      	str	r3, [sp, #0]
   22cb2:	4631      	mov	r1, r6
   22cb4:	4628      	mov	r0, r5
   22cb6:	ab08      	add	r3, sp, #32
   22cb8:	aa06      	add	r2, sp, #24
   22cba:	970b      	str	r7, [sp, #44]	; 0x2c
   22cbc:	f7ff fcaa 	bl	22614 <lfs_dir_relocatingcommit>
            if (state < 0) {
   22cc0:	1e04      	subs	r4, r0, #0
   22cc2:	dba8      	blt.n	22c16 <lfs_dir_orphaningcommit+0x12e>
            if (state == LFS_OK_RELOCATED) {
   22cc4:	2c01      	cmp	r4, #1
   22cc6:	d147      	bne.n	22d58 <lfs_dir_orphaningcommit+0x270>
                ldir = pdir;
   22cc8:	46bc      	mov	ip, r7
   22cca:	46b6      	mov	lr, r6
   22ccc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22cd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22cd4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22cd8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                lpair[1] = ppair[1];
   22cdc:	e9cd a904 	strd	sl, r9, [sp, #16]
                orphans = true;
   22ce0:	9402      	str	r4, [sp, #8]
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22ce2:	9903      	ldr	r1, [sp, #12]
   22ce4:	a804      	add	r0, sp, #16
   22ce6:	f00c f8d9 	bl	2ee9c <lfs_pair_cmp>
                d->m.pair[1] = ldir.pair[1];
   22cea:	e9dd 420c 	ldrd	r4, r2, [sp, #48]	; 0x30
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
   22cee:	b908      	cbnz	r0, 22cf4 <lfs_dir_orphaningcommit+0x20c>
            lfs->root[1] = ldir.pair[1];
   22cf0:	e9c5 4208 	strd	r4, r2, [r5, #32]
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
   22cf4:	f8d5 b028 	ldr.w	fp, [r5, #40]	; 0x28
   22cf8:	f1bb 0f00 	cmp.w	fp, #0
   22cfc:	d18f      	bne.n	22c1e <lfs_dir_orphaningcommit+0x136>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22cfe:	4632      	mov	r2, r6
   22d00:	4628      	mov	r0, r5
   22d02:	a904      	add	r1, sp, #16
   22d04:	f7fe fcc4 	bl	21690 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
   22d08:	f1b0 0800 	subs.w	r8, r0, #0
   22d0c:	da9e      	bge.n	22c4c <lfs_dir_orphaningcommit+0x164>
   22d0e:	f118 0f02 	cmn.w	r8, #2
   22d12:	d17a      	bne.n	22e0a <lfs_dir_orphaningcommit+0x322>
        bool hasparent = (tag != LFS_ERR_NOENT);
   22d14:	46d9      	mov	r9, fp
        int err = lfs_fs_pred(lfs, lpair, &pdir);
   22d16:	4632      	mov	r2, r6
   22d18:	4628      	mov	r0, r5
   22d1a:	a904      	add	r1, sp, #16
   22d1c:	f00c f9c5 	bl	2f0aa <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
   22d20:	4604      	mov	r4, r0
   22d22:	b1e0      	cbz	r0, 22d5e <lfs_dir_orphaningcommit+0x276>
   22d24:	1c83      	adds	r3, r0, #2
   22d26:	f47f af76 	bne.w	22c16 <lfs_dir_orphaningcommit+0x12e>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
   22d2a:	f118 0f02 	cmn.w	r8, #2
   22d2e:	d066      	beq.n	22dfe <lfs_dir_orphaningcommit+0x316>
   22d30:	4939      	ldr	r1, [pc, #228]	; (22e18 <lfs_dir_orphaningcommit+0x330>)
   22d32:	483a      	ldr	r0, [pc, #232]	; (22e1c <lfs_dir_orphaningcommit+0x334>)
   22d34:	f640 131a 	movw	r3, #2330	; 0x91a
   22d38:	4a39      	ldr	r2, [pc, #228]	; (22e20 <lfs_dir_orphaningcommit+0x338>)
   22d3a:	f007 fcce 	bl	2a6da <assert_print>
   22d3e:	f640 111a 	movw	r1, #2330	; 0x91a
   22d42:	4837      	ldr	r0, [pc, #220]	; (22e20 <lfs_dir_orphaningcommit+0x338>)
   22d44:	f007 fcc2 	bl	2a6cc <assert_post_action>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22d48:	f240 33ff 	movw	r3, #1023	; 0x3ff
   22d4c:	429a      	cmp	r2, r3
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
   22d4e:	e9cd a906 	strd	sl, r9, [sp, #24]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
   22d52:	d0a5      	beq.n	22ca0 <lfs_dir_orphaningcommit+0x1b8>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22d54:	4643      	mov	r3, r8
   22d56:	e79d      	b.n	22c94 <lfs_dir_orphaningcommit+0x1ac>
        bool hasparent = (tag != LFS_ERR_NOENT);
   22d58:	f04f 0901 	mov.w	r9, #1
   22d5c:	e7db      	b.n	22d16 <lfs_dir_orphaningcommit+0x22e>
    return tag & 0x000003ff;
   22d5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   22d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
   22d64:	bb6b      	cbnz	r3, 22dc2 <lfs_dir_orphaningcommit+0x2da>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22d66:	4631      	mov	r1, r6
   22d68:	f105 0030 	add.w	r0, r5, #48	; 0x30
   22d6c:	f00c f8bf 	bl	2eeee <lfs_gstate_hasmovehere>
            lpair[0] = pdir.pair[0];
   22d70:	e9dd 4114 	ldrd	r4, r1, [sp, #80]	; 0x50
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22d74:	bb70      	cbnz	r0, 22dd4 <lfs_dir_orphaningcommit+0x2ec>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22d76:	2300      	movs	r3, #0
   22d78:	9308      	str	r3, [sp, #32]
   22d7a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
            lpair[1] = pdir.pair[1];
   22d7e:	e9cd 4104 	strd	r4, r1, [sp, #16]
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22d82:	4923      	ldr	r1, [pc, #140]	; (22e10 <lfs_dir_orphaningcommit+0x328>)
   22d84:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
   22d88:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
   22d8c:	2200      	movs	r2, #0
   22d8e:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
   22d92:	2302      	movs	r3, #2
   22d94:	9209      	str	r2, [sp, #36]	; 0x24
   22d96:	9201      	str	r2, [sp, #4]
   22d98:	9300      	str	r3, [sp, #0]
   22d9a:	4631      	mov	r1, r6
   22d9c:	4628      	mov	r0, r5
   22d9e:	ab08      	add	r3, sp, #32
   22da0:	aa04      	add	r2, sp, #16
   22da2:	f7ff fc37 	bl	22614 <lfs_dir_relocatingcommit>
            if (state < 0) {
   22da6:	1e04      	subs	r4, r0, #0
   22da8:	f6ff af35 	blt.w	22c16 <lfs_dir_orphaningcommit+0x12e>
            ldir = pdir;
   22dac:	46bc      	mov	ip, r7
   22dae:	46b6      	mov	lr, r6
   22db0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22db8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   22dbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   22dc0:	e6f6      	b.n	22bb0 <lfs_dir_orphaningcommit+0xc8>
                err = lfs_fs_preporphans(lfs, -hasparent);
   22dc2:	4628      	mov	r0, r5
   22dc4:	f1c9 0100 	rsb	r1, r9, #0
   22dc8:	f7fd fe7a 	bl	20ac0 <lfs_fs_preporphans>
                if (err) {
   22dcc:	4604      	mov	r4, r0
   22dce:	2800      	cmp	r0, #0
   22dd0:	d0c9      	beq.n	22d66 <lfs_dir_orphaningcommit+0x27e>
   22dd2:	e720      	b.n	22c16 <lfs_dir_orphaningcommit+0x12e>
                moveid = lfs_tag_id(lfs->gstate.tag);
   22dd4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   22dd6:	f3c2 2389 	ubfx	r3, r2, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22dda:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   22dde:	f422 02ff 	bic.w	r2, r2, #8355840	; 0x7f8000
   22de2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
   22de6:	632a      	str	r2, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22de8:	2200      	movs	r2, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22dea:	e9c5 220d 	strd	r2, r2, [r5, #52]	; 0x34
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
   22dee:	f240 32ff 	movw	r2, #1023	; 0x3ff
   22df2:	4293      	cmp	r3, r2
   22df4:	d0bf      	beq.n	22d76 <lfs_dir_orphaningcommit+0x28e>
   22df6:	4a07      	ldr	r2, [pc, #28]	; (22e14 <lfs_dir_orphaningcommit+0x32c>)
   22df8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   22dfc:	e7bc      	b.n	22d78 <lfs_dir_orphaningcommit+0x290>
    return orphans ? LFS_OK_ORPHANED : 0;
   22dfe:	9b02      	ldr	r3, [sp, #8]
   22e00:	2b00      	cmp	r3, #0
   22e02:	bf0c      	ite	eq
   22e04:	2400      	moveq	r4, #0
   22e06:	2403      	movne	r4, #3
   22e08:	e705      	b.n	22c16 <lfs_dir_orphaningcommit+0x12e>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
   22e0a:	4644      	mov	r4, r8
   22e0c:	e703      	b.n	22c16 <lfs_dir_orphaningcommit+0x12e>
   22e0e:	bf00      	nop
   22e10:	000ffc08 	.word	0x000ffc08
   22e14:	4ff00000 	.word	0x4ff00000
   22e18:	00037f1a 	.word	0x00037f1a
   22e1c:	00032679 	.word	0x00032679
   22e20:	00037aaa 	.word	0x00037aaa

00022e24 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e28:	4604      	mov	r4, r0
    return tag & 0x000003ff;
   22e2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22e2c:	460f      	mov	r7, r1
    return tag & 0x000003ff;
   22e2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
   22e32:	b0a1      	sub	sp, #132	; 0x84
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
   22e34:	2800      	cmp	r0, #0
   22e36:	f000 8095 	beq.w	22f64 <lfs_fs_deorphan+0x140>
    int8_t found = 0;
   22e3a:	2500      	movs	r5, #0
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
   22e3c:	f8df 812c 	ldr.w	r8, [pc, #300]	; 22f6c <lfs_fs_deorphan+0x148>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22e40:	f8df 912c 	ldr.w	r9, [pc, #300]	; 22f70 <lfs_fs_deorphan+0x14c>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
   22e44:	221c      	movs	r2, #28
   22e46:	2100      	movs	r1, #0
   22e48:	a808      	add	r0, sp, #32
   22e4a:	f00d fbda 	bl	30602 <memset>
   22e4e:	2301      	movs	r3, #1
   22e50:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   22e54:	930f      	str	r3, [sp, #60]	; 0x3c
        while (!lfs_pair_isnull(pdir.tail)) {
   22e56:	a80e      	add	r0, sp, #56	; 0x38
   22e58:	f00c f816 	bl	2ee88 <lfs_pair_isnull>
   22e5c:	b160      	cbz	r0, 22e78 <lfs_fs_deorphan+0x54>
   22e5e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    return lfs_fs_preporphans(lfs, -lfs_min(
   22e62:	4620      	mov	r0, r4
   22e64:	42a9      	cmp	r1, r5
   22e66:	bf28      	it	cs
   22e68:	4629      	movcs	r1, r5
   22e6a:	4249      	negs	r1, r1
   22e6c:	b249      	sxtb	r1, r1
}
   22e6e:	b021      	add	sp, #132	; 0x84
   22e70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lfs_fs_preporphans(lfs, -lfs_min(
   22e74:	f7fd be24 	b.w	20ac0 <lfs_fs_preporphans>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
   22e78:	4620      	mov	r0, r4
   22e7a:	aa0e      	add	r2, sp, #56	; 0x38
   22e7c:	a910      	add	r1, sp, #64	; 0x40
   22e7e:	f00c f907 	bl	2f090 <lfs_dir_fetch>
            if (err) {
   22e82:	2800      	cmp	r0, #0
   22e84:	d16e      	bne.n	22f64 <lfs_fs_deorphan+0x140>
            if (!pdir.split) {
   22e86:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   22e8a:	2b00      	cmp	r3, #0
   22e8c:	d15f      	bne.n	22f4e <lfs_fs_deorphan+0x12a>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
   22e8e:	4620      	mov	r0, r4
   22e90:	aa18      	add	r2, sp, #96	; 0x60
   22e92:	a90e      	add	r1, sp, #56	; 0x38
   22e94:	f7fe fbfc 	bl	21690 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
   22e98:	2800      	cmp	r0, #0
   22e9a:	da22      	bge.n	22ee2 <lfs_fs_deorphan+0xbe>
   22e9c:	1c83      	adds	r3, r0, #2
   22e9e:	d161      	bne.n	22f64 <lfs_fs_deorphan+0x140>
                if (tag == LFS_ERR_NOENT && powerloss) {
   22ea0:	2f00      	cmp	r7, #0
   22ea2:	d054      	beq.n	22f4e <lfs_fs_deorphan+0x12a>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
   22ea4:	4620      	mov	r0, r4
   22ea6:	f104 0248 	add.w	r2, r4, #72	; 0x48
   22eaa:	a910      	add	r1, sp, #64	; 0x40
   22eac:	f7fd ff98 	bl	20de0 <lfs_dir_getgstate>
                    if (err) {
   22eb0:	2800      	cmp	r0, #0
   22eb2:	d157      	bne.n	22f64 <lfs_fs_deorphan+0x140>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22eb4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
   22eb8:	4b2e      	ldr	r3, [pc, #184]	; (22f74 <lfs_fs_deorphan+0x150>)
   22eba:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   22ebe:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   22ec2:	9304      	str	r3, [sp, #16]
   22ec4:	ab16      	add	r3, sp, #88	; 0x58
   22ec6:	9305      	str	r3, [sp, #20]
   22ec8:	2301      	movs	r3, #1
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22eca:	4620      	mov	r0, r4
   22ecc:	aa04      	add	r2, sp, #16
   22ece:	a908      	add	r1, sp, #32
   22ed0:	f7ff fe0a 	bl	22ae8 <lfs_dir_orphaningcommit>
                        if (state < 0) {
   22ed4:	2800      	cmp	r0, #0
   22ed6:	db45      	blt.n	22f64 <lfs_fs_deorphan+0x140>
                        found += 1;
   22ed8:	3501      	adds	r5, #1
                        if (state == LFS_OK_ORPHANED) {
   22eda:	2803      	cmp	r0, #3
                        found += 1;
   22edc:	b26d      	sxtb	r5, r5
                        if (state == LFS_OK_ORPHANED) {
   22ede:	d1ba      	bne.n	22e56 <lfs_fs_deorphan+0x32>
   22ee0:	e7b0      	b.n	22e44 <lfs_fs_deorphan+0x20>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
   22ee2:	ae02      	add	r6, sp, #8
   22ee4:	4603      	mov	r3, r0
   22ee6:	4642      	mov	r2, r8
   22ee8:	4620      	mov	r0, r4
   22eea:	9600      	str	r6, [sp, #0]
   22eec:	a918      	add	r1, sp, #96	; 0x60
   22eee:	f00c f853 	bl	2ef98 <lfs_dir_get>
                    if (state < 0) {
   22ef2:	2800      	cmp	r0, #0
   22ef4:	db36      	blt.n	22f64 <lfs_fs_deorphan+0x140>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
   22ef6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
   22efa:	9902      	ldr	r1, [sp, #8]
   22efc:	4299      	cmp	r1, r3
   22efe:	d102      	bne.n	22f06 <lfs_fs_deorphan+0xe2>
   22f00:	9803      	ldr	r0, [sp, #12]
   22f02:	4290      	cmp	r0, r2
   22f04:	d023      	beq.n	22f4e <lfs_fs_deorphan+0x12a>
   22f06:	4291      	cmp	r1, r2
   22f08:	d102      	bne.n	22f10 <lfs_fs_deorphan+0xec>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
   22f0a:	9a03      	ldr	r2, [sp, #12]
   22f0c:	4293      	cmp	r3, r2
   22f0e:	d01e      	beq.n	22f4e <lfs_fs_deorphan+0x12a>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
   22f10:	a908      	add	r1, sp, #32
   22f12:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22f16:	f00b ffea 	bl	2eeee <lfs_gstate_hasmovehere>
   22f1a:	b938      	cbnz	r0, 22f2c <lfs_fs_deorphan+0x108>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22f1c:	2300      	movs	r3, #0
   22f1e:	9304      	str	r3, [sp, #16]
   22f20:	2300      	movs	r3, #0
   22f22:	9607      	str	r6, [sp, #28]
   22f24:	e9cd 3905 	strd	r3, r9, [sp, #20]
   22f28:	2302      	movs	r3, #2
   22f2a:	e7ce      	b.n	22eca <lfs_fs_deorphan+0xa6>
                            moveid = lfs_tag_id(lfs->gstate.tag);
   22f2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f2e:	4b12      	ldr	r3, [pc, #72]	; (22f78 <lfs_fs_deorphan+0x154>)
    return (tag & 0x000ffc00) >> 10;
   22f30:	f3c1 2289 	ubfx	r2, r1, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22f34:	400b      	ands	r3, r1
   22f36:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22f38:	2300      	movs	r3, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22f3a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
   22f3e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   22f42:	429a      	cmp	r2, r3
   22f44:	d0ea      	beq.n	22f1c <lfs_fs_deorphan+0xf8>
   22f46:	4b0d      	ldr	r3, [pc, #52]	; (22f7c <lfs_fs_deorphan+0x158>)
   22f48:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   22f4c:	e7e7      	b.n	22f1e <lfs_fs_deorphan+0xfa>
            pdir = dir;
   22f4e:	ae08      	add	r6, sp, #32
   22f50:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
   22f54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   22f58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22f5a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   22f5e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   22f62:	e778      	b.n	22e56 <lfs_fs_deorphan+0x32>
}
   22f64:	b021      	add	sp, #132	; 0x84
   22f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22f6a:	bf00      	nop
   22f6c:	7ffffc00 	.word	0x7ffffc00
   22f70:	600ffc08 	.word	0x600ffc08
   22f74:	000ffc08 	.word	0x000ffc08
   22f78:	800003ff 	.word	0x800003ff
   22f7c:	4ff00000 	.word	0x4ff00000

00022f80 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f80:	b510      	push	{r4, lr}
    return (tag & 0x70000000) >> 20;
   22f82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f84:	4604      	mov	r4, r0
    return (tag & 0x70000000) >> 20;
   22f86:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   22f88:	f413 6fe0 	tst.w	r3, #1792	; 0x700
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   22f8c:	b08a      	sub	sp, #40	; 0x28
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   22f8e:	d106      	bne.n	22f9e <lfs_fs_forceconsistency+0x1e>
    err = lfs_fs_deorphan(lfs, true);
   22f90:	2101      	movs	r1, #1
   22f92:	4620      	mov	r0, r4
}
   22f94:	b00a      	add	sp, #40	; 0x28
   22f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_fs_deorphan(lfs, true);
   22f9a:	f7ff bf43 	b.w	22e24 <lfs_fs_deorphan>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   22f9e:	f100 0240 	add.w	r2, r0, #64	; 0x40
   22fa2:	a902      	add	r1, sp, #8
   22fa4:	f00c f874 	bl	2f090 <lfs_dir_fetch>
    if (err) {
   22fa8:	b9a8      	cbnz	r0, 22fd6 <lfs_fs_forceconsistency+0x56>
    return (tag & 0x000ffc00) >> 10;
   22faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22fac:	6b21      	ldr	r1, [r4, #48]	; 0x30
    return (tag & 0x000ffc00) >> 10;
   22fae:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22fb2:	4b0a      	ldr	r3, [pc, #40]	; (22fdc <lfs_fs_forceconsistency+0x5c>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   22fb4:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   22fb6:	400b      	ands	r3, r1
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   22fb8:	e9c4 300c 	strd	r3, r0, [r4, #48]	; 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   22fbc:	4b08      	ldr	r3, [pc, #32]	; (22fe0 <lfs_fs_forceconsistency+0x60>)
   22fbe:	a902      	add	r1, sp, #8
   22fc0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   22fc4:	e9cd 3000 	strd	r3, r0, [sp]
   22fc8:	466a      	mov	r2, sp
   22fca:	2301      	movs	r3, #1
   22fcc:	4620      	mov	r0, r4
   22fce:	f00c fc1c 	bl	2f80a <lfs_dir_commit>
    if (err) {
   22fd2:	2800      	cmp	r0, #0
   22fd4:	d0dc      	beq.n	22f90 <lfs_fs_forceconsistency+0x10>
}
   22fd6:	b00a      	add	sp, #40	; 0x28
   22fd8:	bd10      	pop	{r4, pc}
   22fda:	bf00      	nop
   22fdc:	800003ff 	.word	0x800003ff
   22fe0:	4ff00000 	.word	0x4ff00000

00022fe4 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   22fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22fe6:	4614      	mov	r4, r2
   22fe8:	460e      	mov	r6, r1
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   22fea:	f100 0248 	add.w	r2, r0, #72	; 0x48
   22fee:	4621      	mov	r1, r4
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
   22ff0:	4605      	mov	r5, r0
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
   22ff2:	f7fd fef5 	bl	20de0 <lfs_dir_getgstate>
    if (err) {
   22ff6:	b970      	cbnz	r0, 23016 <lfs_dir_drop+0x32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   22ff8:	7de2      	ldrb	r2, [r4, #23]
   22ffa:	4b08      	ldr	r3, [pc, #32]	; (2301c <lfs_dir_drop+0x38>)
   22ffc:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
   23000:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   23004:	9300      	str	r3, [sp, #0]
    lfs_pair_tole32(tail->tail);
   23006:	3418      	adds	r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
   23008:	2301      	movs	r3, #1
   2300a:	466a      	mov	r2, sp
   2300c:	4631      	mov	r1, r6
   2300e:	4628      	mov	r0, r5
   23010:	9401      	str	r4, [sp, #4]
   23012:	f00c fbfa 	bl	2f80a <lfs_dir_commit>
}
   23016:	b002      	add	sp, #8
   23018:	bd70      	pop	{r4, r5, r6, pc}
   2301a:	bf00      	nop
   2301c:	000ffc08 	.word	0x000ffc08

00023020 <lfs_file_rawopencfg>:
        const struct lfs_file_config *cfg) {
   23020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23024:	f013 0f02 	tst.w	r3, #2
        const struct lfs_file_config *cfg) {
   23028:	b08a      	sub	sp, #40	; 0x28
   2302a:	4606      	mov	r6, r0
   2302c:	460d      	mov	r5, r1
   2302e:	4699      	mov	r9, r3
   23030:	9203      	str	r2, [sp, #12]
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23032:	d136      	bne.n	230a2 <lfs_file_rawopencfg+0x82>
    file->pos = 0;
   23034:	f04f 0800 	mov.w	r8, #0
    file->cfg = cfg;
   23038:	9b12      	ldr	r3, [sp, #72]	; 0x48
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   2303a:	f105 0708 	add.w	r7, r5, #8
    file->cfg = cfg;
   2303e:	652b      	str	r3, [r5, #80]	; 0x50
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   23040:	4639      	mov	r1, r7
   23042:	4630      	mov	r0, r6
    file->flags = flags;
   23044:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    file->pos = 0;
   23048:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
    file->off = 0;
   2304c:	f8c5 803c 	str.w	r8, [r5, #60]	; 0x3c
    file->cache.buffer = NULL;
   23050:	f8c5 804c 	str.w	r8, [r5, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
   23054:	1d2b      	adds	r3, r5, #4
   23056:	aa03      	add	r2, sp, #12
   23058:	f7fe fb58 	bl	2170c <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
   2305c:	1e04      	subs	r4, r0, #0
   2305e:	da29      	bge.n	230b4 <lfs_file_rawopencfg+0x94>
   23060:	1ca3      	adds	r3, r4, #2
   23062:	d115      	bne.n	23090 <lfs_file_rawopencfg+0x70>
   23064:	f240 33ff 	movw	r3, #1023	; 0x3ff
   23068:	88aa      	ldrh	r2, [r5, #4]
   2306a:	429a      	cmp	r2, r3
   2306c:	d010      	beq.n	23090 <lfs_file_rawopencfg+0x70>
    file->type = LFS_TYPE_REG;
   2306e:	2301      	movs	r3, #1
   23070:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
   23072:	6ab3      	ldr	r3, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   23074:	f419 7f80 	tst.w	r9, #256	; 0x100
    mlist->next = lfs->mlist;
   23078:	602b      	str	r3, [r5, #0]
    lfs->mlist = mlist;
   2307a:	62b5      	str	r5, [r6, #40]	; 0x28
        if (!(flags & LFS_O_CREAT)) {
   2307c:	d008      	beq.n	23090 <lfs_file_rawopencfg+0x70>
        lfs_size_t nlen = strlen(path);
   2307e:	9c03      	ldr	r4, [sp, #12]
   23080:	4620      	mov	r0, r4
   23082:	f7e6 f980 	bl	9386 <strlen>
        if (nlen > lfs->name_max) {
   23086:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
   23088:	4283      	cmp	r3, r0
   2308a:	d21e      	bcs.n	230ca <lfs_file_rawopencfg+0xaa>
            err = LFS_ERR_NAMETOOLONG;
   2308c:	f06f 0423 	mvn.w	r4, #35	; 0x23
    file->flags |= LFS_F_ERRED;
   23090:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
   23092:	4629      	mov	r1, r5
    file->flags |= LFS_F_ERRED;
   23094:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    lfs_file_rawclose(lfs, file);
   23098:	4630      	mov	r0, r6
    file->flags |= LFS_F_ERRED;
   2309a:	632b      	str	r3, [r5, #48]	; 0x30
    lfs_file_rawclose(lfs, file);
   2309c:	f00c fc0d 	bl	2f8ba <lfs_file_rawclose>
    return err;
   230a0:	e004      	b.n	230ac <lfs_file_rawopencfg+0x8c>
        int err = lfs_fs_forceconsistency(lfs);
   230a2:	f7ff ff6d 	bl	22f80 <lfs_fs_forceconsistency>
        if (err) {
   230a6:	4604      	mov	r4, r0
   230a8:	2800      	cmp	r0, #0
   230aa:	d0c3      	beq.n	23034 <lfs_file_rawopencfg+0x14>
}
   230ac:	4620      	mov	r0, r4
   230ae:	b00a      	add	sp, #40	; 0x28
   230b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    file->type = LFS_TYPE_REG;
   230b4:	2301      	movs	r3, #1
   230b6:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
   230b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   230ba:	f419 7f00 	tst.w	r9, #512	; 0x200
    mlist->next = lfs->mlist;
   230be:	602b      	str	r3, [r5, #0]
    lfs->mlist = mlist;
   230c0:	62b5      	str	r5, [r6, #40]	; 0x28
    } else if (flags & LFS_O_EXCL) {
   230c2:	d03b      	beq.n	2313c <lfs_file_rawopencfg+0x11c>
        err = LFS_ERR_EXIST;
   230c4:	f06f 0410 	mvn.w	r4, #16
   230c8:	e7e2      	b.n	23090 <lfs_file_rawopencfg+0x70>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   230ca:	88ab      	ldrh	r3, [r5, #4]
   230cc:	4a5f      	ldr	r2, [pc, #380]	; (2324c <lfs_file_rawopencfg+0x22c>)
   230ce:	f8df 9180 	ldr.w	r9, [pc, #384]	; 23250 <lfs_file_rawopencfg+0x230>
   230d2:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   230d6:	ea42 2283 	orr.w	r2, r2, r3, lsl #10
   230da:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
   230de:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
   230e2:	e9cd 0406 	strd	r0, r4, [sp, #24]
   230e6:	e9cd 2804 	strd	r2, r8, [sp, #16]
   230ea:	e9cd 3808 	strd	r3, r8, [sp, #32]
   230ee:	4639      	mov	r1, r7
   230f0:	2303      	movs	r3, #3
   230f2:	4630      	mov	r0, r6
   230f4:	aa04      	add	r2, sp, #16
   230f6:	f00c fb88 	bl	2f80a <lfs_dir_commit>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
   230fa:	f110 0f1c 	cmn.w	r0, #28
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   230fe:	4604      	mov	r4, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
   23100:	d0c4      	beq.n	2308c <lfs_file_rawopencfg+0x6c>
        if (err) {
   23102:	2800      	cmp	r0, #0
   23104:	d1c4      	bne.n	23090 <lfs_file_rawopencfg+0x70>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
   23106:	464c      	mov	r4, r9
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   23108:	f04f 0800 	mov.w	r8, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   2310c:	f04f 090c 	mov.w	r9, #12
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23110:	f8df a140 	ldr.w	sl, [pc, #320]	; 23254 <lfs_file_rawopencfg+0x234>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   23114:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   23116:	689a      	ldr	r2, [r3, #8]
   23118:	4542      	cmp	r2, r8
   2311a:	d830      	bhi.n	2317e <lfs_file_rawopencfg+0x15e>
    if (file->cfg->buffer) {
   2311c:	681b      	ldr	r3, [r3, #0]
   2311e:	2b00      	cmp	r3, #0
   23120:	d05d      	beq.n	231de <lfs_file_rawopencfg+0x1be>
        file->cache.buffer = file->cfg->buffer;
   23122:	64eb      	str	r3, [r5, #76]	; 0x4c
    lfs_cache_zero(lfs, &file->cache);
   23124:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   23126:	f105 0140 	add.w	r1, r5, #64	; 0x40
   2312a:	f00c f886 	bl	2f23a <lfs_cache_zero.isra.0>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
   2312e:	f240 2301 	movw	r3, #513	; 0x201
   23132:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
   23136:	d05c      	beq.n	231f2 <lfs_file_rawopencfg+0x1d2>
    return 0;
   23138:	2400      	movs	r4, #0
   2313a:	e7b7      	b.n	230ac <lfs_file_rawopencfg+0x8c>
    return (tag & 0x7ff00000) >> 20;
   2313c:	0d24      	lsrs	r4, r4, #20
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
   2313e:	2c01      	cmp	r4, #1
   23140:	d17e      	bne.n	23240 <lfs_file_rawopencfg+0x220>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23142:	88ab      	ldrh	r3, [r5, #4]
    } else if (flags & LFS_O_TRUNC) {
   23144:	f419 6f80 	tst.w	r9, #1024	; 0x400
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23148:	ea4f 2383 	mov.w	r3, r3, lsl #10
    } else if (flags & LFS_O_TRUNC) {
   2314c:	d008      	beq.n	23160 <lfs_file_rawopencfg+0x140>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   2314e:	f043 5400 	orr.w	r4, r3, #536870912	; 0x20000000
        file->flags |= LFS_F_DIRTY;
   23152:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
   23154:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
   23158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2315c:	632b      	str	r3, [r5, #48]	; 0x30
   2315e:	e7d3      	b.n	23108 <lfs_file_rawopencfg+0xe8>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
   23160:	f105 0228 	add.w	r2, r5, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
   23164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   23168:	9200      	str	r2, [sp, #0]
   2316a:	4639      	mov	r1, r7
   2316c:	4630      	mov	r0, r6
   2316e:	4a3a      	ldr	r2, [pc, #232]	; (23258 <lfs_file_rawopencfg+0x238>)
   23170:	f043 0308 	orr.w	r3, r3, #8
   23174:	f00b ff10 	bl	2ef98 <lfs_dir_get>
        if (tag < 0) {
   23178:	1e04      	subs	r4, r0, #0
   2317a:	dac5      	bge.n	23108 <lfs_file_rawopencfg+0xe8>
   2317c:	e788      	b.n	23090 <lfs_file_rawopencfg+0x70>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
   2317e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   23180:	07d0      	lsls	r0, r2, #31
   23182:	d406      	bmi.n	23192 <lfs_file_rawopencfg+0x172>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23184:	6b2b      	ldr	r3, [r5, #48]	; 0x30
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   23186:	6d2a      	ldr	r2, [r5, #80]	; 0x50
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
   23188:	0799      	lsls	r1, r3, #30
   2318a:	d41d      	bmi.n	231c8 <lfs_file_rawopencfg+0x1a8>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
   2318c:	f108 0801 	add.w	r8, r8, #1
   23190:	e7c0      	b.n	23114 <lfs_file_rawopencfg+0xf4>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   23192:	fb09 f208 	mul.w	r2, r9, r8
   23196:	6858      	ldr	r0, [r3, #4]
   23198:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   2319c:	1881      	adds	r1, r0, r2
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   2319e:	688b      	ldr	r3, [r1, #8]
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   231a0:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   231a2:	6849      	ldr	r1, [r1, #4]
   231a4:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
   231a8:	f502 7240 	add.w	r2, r2, #768	; 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   231ac:	9100      	str	r1, [sp, #0]
   231ae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   231b2:	4639      	mov	r1, r7
   231b4:	4652      	mov	r2, sl
   231b6:	4630      	mov	r0, r6
   231b8:	f00b feee 	bl	2ef98 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
   231bc:	2800      	cmp	r0, #0
   231be:	dae1      	bge.n	23184 <lfs_file_rawopencfg+0x164>
   231c0:	1c83      	adds	r3, r0, #2
   231c2:	d0df      	beq.n	23184 <lfs_file_rawopencfg+0x164>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   231c4:	4604      	mov	r4, r0
   231c6:	e763      	b.n	23090 <lfs_file_rawopencfg+0x70>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
   231c8:	6852      	ldr	r2, [r2, #4]
   231ca:	fb09 2208 	mla	r2, r9, r8, r2
   231ce:	6891      	ldr	r1, [r2, #8]
   231d0:	6f72      	ldr	r2, [r6, #116]	; 0x74
   231d2:	4291      	cmp	r1, r2
   231d4:	d837      	bhi.n	23246 <lfs_file_rawopencfg+0x226>
            file->flags |= LFS_F_DIRTY;
   231d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   231da:	632b      	str	r3, [r5, #48]	; 0x30
   231dc:	e7d6      	b.n	2318c <lfs_file_rawopencfg+0x16c>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
   231de:	6eb3      	ldr	r3, [r6, #104]	; 0x68
	return malloc(size);
   231e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
   231e2:	f005 fa77 	bl	286d4 <malloc>
   231e6:	64e8      	str	r0, [r5, #76]	; 0x4c
        if (!file->cache.buffer) {
   231e8:	2800      	cmp	r0, #0
   231ea:	d19b      	bne.n	23124 <lfs_file_rawopencfg+0x104>
            err = LFS_ERR_NOMEM;
   231ec:	f06f 040b 	mvn.w	r4, #11
   231f0:	e74e      	b.n	23090 <lfs_file_rawopencfg+0x70>
        file->flags |= LFS_F_INLINE;
   231f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        file->ctz.head = LFS_BLOCK_INLINE;
   231f4:	f06f 0201 	mvn.w	r2, #1
        file->flags |= LFS_F_INLINE;
   231f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   231fc:	632b      	str	r3, [r5, #48]	; 0x30
        file->cache.off = 0;
   231fe:	2300      	movs	r3, #0
   23200:	f3c4 0409 	ubfx	r4, r4, #0, #10
        file->ctz.head = LFS_BLOCK_INLINE;
   23204:	62aa      	str	r2, [r5, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
   23206:	62ec      	str	r4, [r5, #44]	; 0x2c
        file->cache.block = file->ctz.head;
   23208:	642a      	str	r2, [r5, #64]	; 0x40
        file->cache.off = 0;
   2320a:	646b      	str	r3, [r5, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
   2320c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2320e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23210:	64aa      	str	r2, [r5, #72]	; 0x48
        if (file->ctz.size > 0) {
   23212:	2c00      	cmp	r4, #0
   23214:	d090      	beq.n	23138 <lfs_file_rawopencfg+0x118>
	return (a < b) ? a : b;
   23216:	f240 33fe 	movw	r3, #1022	; 0x3fe
   2321a:	4293      	cmp	r3, r2
   2321c:	bf28      	it	cs
   2321e:	4613      	movcs	r3, r2
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   23220:	88a9      	ldrh	r1, [r5, #4]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23222:	6cea      	ldr	r2, [r5, #76]	; 0x4c
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
   23224:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
   23228:	9200      	str	r2, [sp, #0]
   2322a:	4639      	mov	r1, r7
   2322c:	4630      	mov	r0, r6
   2322e:	4a0a      	ldr	r2, [pc, #40]	; (23258 <lfs_file_rawopencfg+0x238>)
   23230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   23234:	f00b feb0 	bl	2ef98 <lfs_dir_get>
            if (res < 0) {
   23238:	1e04      	subs	r4, r0, #0
   2323a:	f6bf af7d 	bge.w	23138 <lfs_file_rawopencfg+0x118>
   2323e:	e727      	b.n	23090 <lfs_file_rawopencfg+0x70>
        err = LFS_ERR_ISDIR;
   23240:	f06f 0414 	mvn.w	r4, #20
   23244:	e724      	b.n	23090 <lfs_file_rawopencfg+0x70>
                err = LFS_ERR_NOSPC;
   23246:	f06f 041b 	mvn.w	r4, #27
   2324a:	e721      	b.n	23090 <lfs_file_rawopencfg+0x70>
   2324c:	40100000 	.word	0x40100000
   23250:	20100000 	.word	0x20100000
   23254:	7ffffc00 	.word	0x7ffffc00
   23258:	700ffc00 	.word	0x700ffc00

0002325c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
   2325c:	b530      	push	{r4, r5, lr}
   2325e:	b097      	sub	sp, #92	; 0x5c
   23260:	4605      	mov	r5, r0
        err = lfs_init(lfs, cfg);
   23262:	f7fe fc41 	bl	21ae8 <lfs_init>
        if (err) {
   23266:	4604      	mov	r4, r0
   23268:	2800      	cmp	r0, #0
   2326a:	d14f      	bne.n	2330c <lfs_format+0xb0>
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
   2326c:	6eab      	ldr	r3, [r5, #104]	; 0x68
__ssp_bos_icheck3(memset, void *, int)
   2326e:	4601      	mov	r1, r0
   23270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   23272:	6e68      	ldr	r0, [r5, #100]	; 0x64
   23274:	f00d f9c5 	bl	30602 <memset>
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   23278:	6eab      	ldr	r3, [r5, #104]	; 0x68
        lfs->free.off = 0;
   2327a:	656c      	str	r4, [r5, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
   2327c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2327e:	6a19      	ldr	r1, [r3, #32]
   23280:	00d2      	lsls	r2, r2, #3
   23282:	428a      	cmp	r2, r1
   23284:	bf94      	ite	ls
   23286:	65aa      	strls	r2, [r5, #88]	; 0x58
   23288:	65a9      	strhi	r1, [r5, #88]	; 0x58
        lfs->free.i = 0;
   2328a:	65ec      	str	r4, [r5, #92]	; 0x5c
    lfs->free.ack = lfs->cfg->block_count;
   2328c:	6a1b      	ldr	r3, [r3, #32]
        err = lfs_dir_alloc(lfs, &root);
   2328e:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   23290:	662b      	str	r3, [r5, #96]	; 0x60
        err = lfs_dir_alloc(lfs, &root);
   23292:	a90e      	add	r1, sp, #56	; 0x38
   23294:	f00c f856 	bl	2f344 <lfs_dir_alloc>
        if (err) {
   23298:	4604      	mov	r4, r0
   2329a:	2800      	cmp	r0, #0
   2329c:	d133      	bne.n	23306 <lfs_format+0xaa>
        lfs_superblock_t superblock = {
   2329e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   232a2:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
   232a4:	6eab      	ldr	r3, [r5, #104]	; 0x68
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   232a6:	a90e      	add	r1, sp, #56	; 0x38
        lfs_superblock_t superblock = {
   232a8:	69da      	ldr	r2, [r3, #28]
   232aa:	6a1b      	ldr	r3, [r3, #32]
   232ac:	9203      	str	r2, [sp, #12]
   232ae:	9304      	str	r3, [sp, #16]
   232b0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   232b2:	aa08      	add	r2, sp, #32
        lfs_superblock_t superblock = {
   232b4:	9305      	str	r3, [sp, #20]
   232b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   232b8:	9306      	str	r3, [sp, #24]
   232ba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   232bc:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
   232be:	4b15      	ldr	r3, [pc, #84]	; (23314 <lfs_format+0xb8>)
   232c0:	e9cd 3008 	strd	r3, r0, [sp, #32]
   232c4:	4b14      	ldr	r3, [pc, #80]	; (23318 <lfs_format+0xbc>)
   232c6:	4628      	mov	r0, r5
   232c8:	930a      	str	r3, [sp, #40]	; 0x28
   232ca:	4b14      	ldr	r3, [pc, #80]	; (2331c <lfs_format+0xc0>)
   232cc:	930b      	str	r3, [sp, #44]	; 0x2c
   232ce:	4b14      	ldr	r3, [pc, #80]	; (23320 <lfs_format+0xc4>)
   232d0:	930c      	str	r3, [sp, #48]	; 0x30
   232d2:	ab02      	add	r3, sp, #8
   232d4:	930d      	str	r3, [sp, #52]	; 0x34
   232d6:	2303      	movs	r3, #3
   232d8:	f00c fa97 	bl	2f80a <lfs_dir_commit>
        if (err) {
   232dc:	4604      	mov	r4, r0
   232de:	b990      	cbnz	r0, 23306 <lfs_format+0xaa>
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   232e0:	4603      	mov	r3, r0
   232e2:	4602      	mov	r2, r0
        root.erased = false;
   232e4:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
   232e8:	a90e      	add	r1, sp, #56	; 0x38
   232ea:	4628      	mov	r0, r5
   232ec:	f00c fa8d 	bl	2f80a <lfs_dir_commit>
        if (err) {
   232f0:	4604      	mov	r4, r0
   232f2:	b940      	cbnz	r0, 23306 <lfs_format+0xaa>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
   232f4:	2301      	movs	r3, #1
   232f6:	9000      	str	r0, [sp, #0]
   232f8:	466a      	mov	r2, sp
   232fa:	4628      	mov	r0, r5
   232fc:	a90e      	add	r1, sp, #56	; 0x38
   232fe:	9301      	str	r3, [sp, #4]
   23300:	f00b fec6 	bl	2f090 <lfs_dir_fetch>
   23304:	4604      	mov	r4, r0
    lfs_deinit(lfs);
   23306:	4628      	mov	r0, r5
   23308:	f00b fe30 	bl	2ef6c <lfs_deinit>
    err = lfs_rawformat(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
   2330c:	4620      	mov	r0, r4
   2330e:	b017      	add	sp, #92	; 0x5c
   23310:	bd30      	pop	{r4, r5, pc}
   23312:	bf00      	nop
   23314:	40100000 	.word	0x40100000
   23318:	0ff00008 	.word	0x0ff00008
   2331c:	000368a8 	.word	0x000368a8
   23320:	20100018 	.word	0x20100018

00023324 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
   23324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23328:	b096      	sub	sp, #88	; 0x58
   2332a:	af04      	add	r7, sp, #16
   2332c:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
   2332e:	f7fe fbdb 	bl	21ae8 <lfs_init>
    if (err) {
   23332:	4605      	mov	r5, r0
   23334:	bb90      	cbnz	r0, 2339c <lfs_mount+0x78>
    lfs_mdir_t dir = {.tail = {0, 1}};
   23336:	4601      	mov	r1, r0
   23338:	221c      	movs	r2, #28
   2333a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   2333e:	f00d f960 	bl	30602 <memset>
   23342:	2301      	movs	r3, #1
    lfs_block_t cycle = 0;
   23344:	462e      	mov	r6, r5
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   23346:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 23520 <lfs_mount+0x1fc>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   2334a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 23524 <lfs_mount+0x200>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   2334e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 23528 <lfs_mount+0x204>
    lfs_mdir_t dir = {.tail = {0, 1}};
   23352:	647b      	str	r3, [r7, #68]	; 0x44
    while (!lfs_pair_isnull(dir.tail)) {
   23354:	f107 0040 	add.w	r0, r7, #64	; 0x40
   23358:	f00b fd96 	bl	2ee88 <lfs_pair_isnull>
   2335c:	b318      	cbz	r0, 233a6 <lfs_mount+0x82>
    if (lfs_pair_isnull(lfs->root)) {
   2335e:	f104 0020 	add.w	r0, r4, #32
   23362:	f00b fd91 	bl	2ee88 <lfs_pair_isnull>
   23366:	4603      	mov	r3, r0
   23368:	2800      	cmp	r0, #0
   2336a:	f040 80d5 	bne.w	23518 <lfs_mount+0x1f4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   2336e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   23370:	f104 063c 	add.w	r6, r4, #60	; 0x3c
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
   23374:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   23378:	6322      	str	r2, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
   2337a:	f104 0230 	add.w	r2, r4, #48	; 0x30
   2337e:	ca07      	ldmia	r2, {r0, r1, r2}
   23380:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
   23384:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   23386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   23388:	6a08      	ldr	r0, [r1, #32]
    lfs->free.i = 0;
   2338a:	65e3      	str	r3, [r4, #92]	; 0x5c
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
   2338c:	fbb2 f6f0 	udiv	r6, r2, r0
   23390:	fb00 2216 	mls	r2, r0, r6, r2
    lfs->free.size = 0;
   23394:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    lfs->free.ack = lfs->cfg->block_count;
   23398:	6a0b      	ldr	r3, [r1, #32]
   2339a:	6623      	str	r3, [r4, #96]	; 0x60
    err = lfs_rawmount(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
   2339c:	4628      	mov	r0, r5
   2339e:	3748      	adds	r7, #72	; 0x48
   233a0:	46bd      	mov	sp, r7
   233a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (cycle >= lfs->cfg->block_count/2) {
   233a6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   233a8:	6a1b      	ldr	r3, [r3, #32]
   233aa:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
   233ae:	f080 80b0 	bcs.w	23512 <lfs_mount+0x1ee>
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   233b2:	2308      	movs	r3, #8
   233b4:	60fb      	str	r3, [r7, #12]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   233b6:	1d3b      	adds	r3, r7, #4
                lfs_dir_find_match, &(struct lfs_dir_find_match){
   233b8:	e9c7 4801 	strd	r4, r8, [r7, #4]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
   233bc:	e9cd 9302 	strd	r9, r3, [sp, #8]
   233c0:	4b5a      	ldr	r3, [pc, #360]	; (2352c <lfs_mount+0x208>)
   233c2:	9001      	str	r0, [sp, #4]
   233c4:	9300      	str	r3, [sp, #0]
   233c6:	4620      	mov	r0, r4
   233c8:	4b59      	ldr	r3, [pc, #356]	; (23530 <lfs_mount+0x20c>)
   233ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
   233ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   233d2:	f7fd ff23 	bl	2121c <lfs_dir_fetchmatch>
        if (tag < 0) {
   233d6:	2800      	cmp	r0, #0
        cycle += 1;
   233d8:	f106 0601 	add.w	r6, r6, #1
        if (tag < 0) {
   233dc:	db49      	blt.n	23472 <lfs_mount+0x14e>
        if (tag && !lfs_tag_isdelete(tag)) {
   233de:	f000 808d 	beq.w	234fc <lfs_mount+0x1d8>
    return ((int32_t)(tag << 22) >> 22) == -1;
   233e2:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
   233e6:	3001      	adds	r0, #1
   233e8:	f000 8088 	beq.w	234fc <lfs_mount+0x1d8>
            lfs->root[0] = dir.pair[0];
   233ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233ee:	4620      	mov	r0, r4
            lfs->root[0] = dir.pair[0];
   233f0:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
   233f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233f4:	4a4e      	ldr	r2, [pc, #312]	; (23530 <lfs_mount+0x20c>)
            lfs->root[1] = dir.pair[1];
   233f6:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
   233f8:	f107 0310 	add.w	r3, r7, #16
   233fc:	9300      	str	r3, [sp, #0]
   233fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
   23402:	4653      	mov	r3, sl
   23404:	f00b fdc8 	bl	2ef98 <lfs_dir_get>
            if (tag < 0) {
   23408:	2800      	cmp	r0, #0
   2340a:	db32      	blt.n	23472 <lfs_mount+0x14e>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
   2340c:	693b      	ldr	r3, [r7, #16]
   2340e:	0c19      	lsrs	r1, r3, #16
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   23410:	2902      	cmp	r1, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
   23412:	b29a      	uxth	r2, r3
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
   23414:	d100      	bne.n	23418 <lfs_mount+0xf4>
   23416:	b16a      	cbz	r2, 23434 <lfs_mount+0x110>
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
   23418:	466d      	mov	r5, sp
   2341a:	b08c      	sub	sp, #48	; 0x30
   2341c:	aa04      	add	r2, sp, #16
   2341e:	4845      	ldr	r0, [pc, #276]	; (23534 <lfs_mount+0x210>)
   23420:	b29b      	uxth	r3, r3
   23422:	6150      	str	r0, [r2, #20]
   23424:	4844      	ldr	r0, [pc, #272]	; (23538 <lfs_mount+0x214>)
   23426:	6190      	str	r0, [r2, #24]
   23428:	f241 003b 	movw	r0, #4155	; 0x103b
   2342c:	e9c2 0107 	strd	r0, r1, [r2, #28]
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
   23430:	6253      	str	r3, [r2, #36]	; 0x24
   23432:	e010      	b.n	23456 <lfs_mount+0x132>
            if (superblock.name_max) {
   23434:	69fb      	ldr	r3, [r7, #28]
   23436:	b313      	cbz	r3, 2347e <lfs_mount+0x15a>
                if (superblock.name_max > lfs->name_max) {
   23438:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   2343a:	428b      	cmp	r3, r1
   2343c:	d91e      	bls.n	2347c <lfs_mount+0x158>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
   2343e:	466d      	mov	r5, sp
   23440:	b08c      	sub	sp, #48	; 0x30
   23442:	aa04      	add	r2, sp, #16
   23444:	483d      	ldr	r0, [pc, #244]	; (2353c <lfs_mount+0x218>)
   23446:	6150      	str	r0, [r2, #20]
   23448:	483b      	ldr	r0, [pc, #236]	; (23538 <lfs_mount+0x214>)
   2344a:	6190      	str	r0, [r2, #24]
   2344c:	f241 0044 	movw	r0, #4164	; 0x1044
   23450:	e9c2 0307 	strd	r0, r3, [r2, #28]
   23454:	6251      	str	r1, [r2, #36]	; 0x24
   23456:	f44f 7300 	mov.w	r3, #512	; 0x200
   2345a:	8513      	strh	r3, [r2, #40]	; 0x28
   2345c:	4b38      	ldr	r3, [pc, #224]	; (23540 <lfs_mount+0x21c>)
   2345e:	4839      	ldr	r0, [pc, #228]	; (23544 <lfs_mount+0x220>)
   23460:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   23464:	f842 3f10 	str.w	r3, [r2, #16]!
   23468:	f00b fe0f 	bl	2f08a <z_log_msg_static_create.constprop.0>
                err = LFS_ERR_INVAL;
   2346c:	f06f 0015 	mvn.w	r0, #21
   23470:	46ad      	mov	sp, r5
            goto cleanup;
   23472:	4605      	mov	r5, r0
    lfs_rawunmount(lfs);
   23474:	4620      	mov	r0, r4
   23476:	f00c fa39 	bl	2f8ec <lfs_unmount>
    return err;
   2347a:	e78f      	b.n	2339c <lfs_mount+0x78>
                lfs->name_max = superblock.name_max;
   2347c:	66e3      	str	r3, [r4, #108]	; 0x6c
            if (superblock.file_max) {
   2347e:	6a3b      	ldr	r3, [r7, #32]
   23480:	b16b      	cbz	r3, 2349e <lfs_mount+0x17a>
                if (superblock.file_max > lfs->file_max) {
   23482:	6f21      	ldr	r1, [r4, #112]	; 0x70
   23484:	428b      	cmp	r3, r1
   23486:	d909      	bls.n	2349c <lfs_mount+0x178>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
   23488:	466d      	mov	r5, sp
   2348a:	b08c      	sub	sp, #48	; 0x30
   2348c:	aa04      	add	r2, sp, #16
   2348e:	482e      	ldr	r0, [pc, #184]	; (23548 <lfs_mount+0x224>)
   23490:	6150      	str	r0, [r2, #20]
   23492:	4829      	ldr	r0, [pc, #164]	; (23538 <lfs_mount+0x214>)
   23494:	6190      	str	r0, [r2, #24]
   23496:	f241 004f 	movw	r0, #4175	; 0x104f
   2349a:	e7d9      	b.n	23450 <lfs_mount+0x12c>
                lfs->file_max = superblock.file_max;
   2349c:	6723      	str	r3, [r4, #112]	; 0x70
            if (superblock.attr_max) {
   2349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   234a0:	b16b      	cbz	r3, 234be <lfs_mount+0x19a>
                if (superblock.attr_max > lfs->attr_max) {
   234a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
   234a4:	428b      	cmp	r3, r1
   234a6:	d909      	bls.n	234bc <lfs_mount+0x198>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
   234a8:	466d      	mov	r5, sp
   234aa:	b08c      	sub	sp, #48	; 0x30
   234ac:	aa04      	add	r2, sp, #16
   234ae:	4827      	ldr	r0, [pc, #156]	; (2354c <lfs_mount+0x228>)
   234b0:	6150      	str	r0, [r2, #20]
   234b2:	4821      	ldr	r0, [pc, #132]	; (23538 <lfs_mount+0x214>)
   234b4:	6190      	str	r0, [r2, #24]
   234b6:	f241 005a 	movw	r0, #4186	; 0x105a
   234ba:	e7c9      	b.n	23450 <lfs_mount+0x12c>
                lfs->attr_max = superblock.attr_max;
   234bc:	6763      	str	r3, [r4, #116]	; 0x74
            if (superblock.block_count != lfs->cfg->block_count) {
   234be:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   234c0:	69bb      	ldr	r3, [r7, #24]
   234c2:	6a11      	ldr	r1, [r2, #32]
   234c4:	428b      	cmp	r3, r1
   234c6:	d009      	beq.n	234dc <lfs_mount+0x1b8>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
   234c8:	466d      	mov	r5, sp
   234ca:	b08c      	sub	sp, #48	; 0x30
   234cc:	aa04      	add	r2, sp, #16
   234ce:	4820      	ldr	r0, [pc, #128]	; (23550 <lfs_mount+0x22c>)
   234d0:	6150      	str	r0, [r2, #20]
   234d2:	4819      	ldr	r0, [pc, #100]	; (23538 <lfs_mount+0x214>)
   234d4:	6190      	str	r0, [r2, #24]
   234d6:	f241 0064 	movw	r0, #4196	; 0x1064
   234da:	e7b9      	b.n	23450 <lfs_mount+0x12c>
            if (superblock.block_size != lfs->cfg->block_size) {
   234dc:	69d2      	ldr	r2, [r2, #28]
   234de:	6979      	ldr	r1, [r7, #20]
   234e0:	4291      	cmp	r1, r2
   234e2:	d00b      	beq.n	234fc <lfs_mount+0x1d8>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
   234e4:	466d      	mov	r5, sp
   234e6:	b08c      	sub	sp, #48	; 0x30
   234e8:	aa04      	add	r2, sp, #16
   234ea:	491a      	ldr	r1, [pc, #104]	; (23554 <lfs_mount+0x230>)
   234ec:	6151      	str	r1, [r2, #20]
   234ee:	4912      	ldr	r1, [pc, #72]	; (23538 <lfs_mount+0x214>)
   234f0:	6191      	str	r1, [r2, #24]
   234f2:	f241 016b 	movw	r1, #4203	; 0x106b
   234f6:	e9c2 1307 	strd	r1, r3, [r2, #28]
   234fa:	e799      	b.n	23430 <lfs_mount+0x10c>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
   234fc:	4620      	mov	r0, r4
   234fe:	f104 0230 	add.w	r2, r4, #48	; 0x30
   23502:	f107 0128 	add.w	r1, r7, #40	; 0x28
   23506:	f7fd fc6b 	bl	20de0 <lfs_dir_getgstate>
        if (err) {
   2350a:	2800      	cmp	r0, #0
   2350c:	f43f af22 	beq.w	23354 <lfs_mount+0x30>
   23510:	e7af      	b.n	23472 <lfs_mount+0x14e>
            err = LFS_ERR_CORRUPT;
   23512:	f06f 0053 	mvn.w	r0, #83	; 0x53
   23516:	e7ac      	b.n	23472 <lfs_mount+0x14e>
        err = LFS_ERR_INVAL;
   23518:	f06f 0515 	mvn.w	r5, #21
   2351c:	e7aa      	b.n	23474 <lfs_mount+0x150>
   2351e:	bf00      	nop
   23520:	000368a8 	.word	0x000368a8
   23524:	0002f051 	.word	0x0002f051
   23528:	20100018 	.word	0x20100018
   2352c:	0ff00008 	.word	0x0ff00008
   23530:	7ffffc00 	.word	0x7ffffc00
   23534:	00037f3f 	.word	0x00037f3f
   23538:	00037aaa 	.word	0x00037aaa
   2353c:	00037f5f 	.word	0x00037f5f
   23540:	01000006 	.word	0x01000006
   23544:	0003158c 	.word	0x0003158c
   23548:	00037f85 	.word	0x00037f85
   2354c:	00037fab 	.word	0x00037fab
   23550:	00037fd1 	.word	0x00037fd1
   23554:	00037ff7 	.word	0x00037ff7

00023558 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
   23558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2355a:	b099      	sub	sp, #100	; 0x64
   2355c:	4604      	mov	r4, r0
   2355e:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
   23560:	f7ff fd0e 	bl	22f80 <lfs_fs_forceconsistency>
    if (err) {
   23564:	2800      	cmp	r0, #0
   23566:	d15d      	bne.n	23624 <lfs_remove+0xcc>
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   23568:	4603      	mov	r3, r0
   2356a:	aa03      	add	r2, sp, #12
   2356c:	4620      	mov	r0, r4
   2356e:	a906      	add	r1, sp, #24
   23570:	f7fe f8cc 	bl	2170c <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   23574:	2800      	cmp	r0, #0
   23576:	db55      	blt.n	23624 <lfs_remove+0xcc>
   23578:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   2357c:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
   23580:	4293      	cmp	r3, r2
   23582:	d051      	beq.n	23628 <lfs_remove+0xd0>
    dir.next = lfs->mlist;
   23584:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return (tag & 0x7ff00000) >> 20;
   23586:	0d05      	lsrs	r5, r0, #20
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   23588:	2d02      	cmp	r5, #2
    dir.next = lfs->mlist;
   2358a:	920e      	str	r2, [sp, #56]	; 0x38
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
   2358c:	ea4f 2783 	mov.w	r7, r3, lsl #10
   23590:	ae04      	add	r6, sp, #16
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   23592:	d121      	bne.n	235d8 <lfs_remove+0x80>
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
   23594:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
   23598:	4620      	mov	r0, r4
   2359a:	4a25      	ldr	r2, [pc, #148]	; (23630 <lfs_remove+0xd8>)
   2359c:	9600      	str	r6, [sp, #0]
   2359e:	f043 0308 	orr.w	r3, r3, #8
   235a2:	a906      	add	r1, sp, #24
   235a4:	f00b fcf8 	bl	2ef98 <lfs_dir_get>
        if (res < 0) {
   235a8:	2800      	cmp	r0, #0
   235aa:	db3b      	blt.n	23624 <lfs_remove+0xcc>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
   235ac:	4632      	mov	r2, r6
   235ae:	4620      	mov	r0, r4
   235b0:	a910      	add	r1, sp, #64	; 0x40
   235b2:	f00b fd6d 	bl	2f090 <lfs_dir_fetch>
        if (err) {
   235b6:	2800      	cmp	r0, #0
   235b8:	d134      	bne.n	23624 <lfs_remove+0xcc>
        if (dir.m.count > 0 || dir.m.split) {
   235ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
   235bc:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   235c0:	d12e      	bne.n	23620 <lfs_remove+0xc8>
        err = lfs_fs_preporphans(lfs, +1);
   235c2:	2101      	movs	r1, #1
   235c4:	4620      	mov	r0, r4
   235c6:	f7fd fa7b 	bl	20ac0 <lfs_fs_preporphans>
        if (err) {
   235ca:	bb58      	cbnz	r0, 23624 <lfs_remove+0xcc>
        lfs->mlist = &dir;
   235cc:	ab0e      	add	r3, sp, #56	; 0x38
        dir.type = 0;
   235ce:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
        dir.id = 0;
   235d2:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
        lfs->mlist = &dir;
   235d6:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
   235d8:	2300      	movs	r3, #0
   235da:	f047 479f 	orr.w	r7, r7, #1333788672	; 0x4f800000
   235de:	9305      	str	r3, [sp, #20]
   235e0:	4632      	mov	r2, r6
   235e2:	2301      	movs	r3, #1
   235e4:	4620      	mov	r0, r4
   235e6:	f447 07e0 	orr.w	r7, r7, #7340032	; 0x700000
   235ea:	a906      	add	r1, sp, #24
   235ec:	9704      	str	r7, [sp, #16]
   235ee:	f00c f90c 	bl	2f80a <lfs_dir_commit>
    if (err) {
   235f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        lfs->mlist = dir.next;
   235f4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (err) {
   235f6:	b9a8      	cbnz	r0, 23624 <lfs_remove+0xcc>
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
   235f8:	2d02      	cmp	r5, #2
   235fa:	d113      	bne.n	23624 <lfs_remove+0xcc>
        err = lfs_fs_preporphans(lfs, -1);
   235fc:	f04f 31ff 	mov.w	r1, #4294967295
   23600:	4620      	mov	r0, r4
   23602:	f7fd fa5d 	bl	20ac0 <lfs_fs_preporphans>
        if (err) {
   23606:	b968      	cbnz	r0, 23624 <lfs_remove+0xcc>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
   23608:	4620      	mov	r0, r4
   2360a:	aa06      	add	r2, sp, #24
   2360c:	a910      	add	r1, sp, #64	; 0x40
   2360e:	f00b fd4c 	bl	2f0aa <lfs_fs_pred>
        if (err) {
   23612:	b938      	cbnz	r0, 23624 <lfs_remove+0xcc>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
   23614:	4620      	mov	r0, r4
   23616:	aa10      	add	r2, sp, #64	; 0x40
   23618:	a906      	add	r1, sp, #24
   2361a:	f7ff fce3 	bl	22fe4 <lfs_dir_drop>
        if (err) {
   2361e:	e001      	b.n	23624 <lfs_remove+0xcc>
            return LFS_ERR_NOTEMPTY;
   23620:	f06f 0026 	mvn.w	r0, #38	; 0x26
    err = lfs_rawremove(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23624:	b019      	add	sp, #100	; 0x64
   23626:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
   23628:	f06f 0015 	mvn.w	r0, #21
    return err;
   2362c:	e7fa      	b.n	23624 <lfs_remove+0xcc>
   2362e:	bf00      	nop
   23630:	700ffc00 	.word	0x700ffc00

00023634 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
   23634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23638:	b0af      	sub	sp, #188	; 0xbc
   2363a:	4605      	mov	r5, r0
   2363c:	e9cd 1206 	strd	r1, r2, [sp, #24]
    int err = lfs_fs_forceconsistency(lfs);
   23640:	f7ff fc9e 	bl	22f80 <lfs_fs_forceconsistency>
    if (err) {
   23644:	4603      	mov	r3, r0
   23646:	2800      	cmp	r0, #0
   23648:	f040 8110 	bne.w	2386c <lfs_rename+0x238>
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
   2364c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   23650:	4649      	mov	r1, r9
   23652:	4628      	mov	r0, r5
   23654:	aa06      	add	r2, sp, #24
   23656:	f7fe f859 	bl	2170c <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   2365a:	1e06      	subs	r6, r0, #0
   2365c:	f2c0 8108 	blt.w	23870 <lfs_rename+0x23c>
    return (tag & 0x000ffc00) >> 10;
   23660:	f240 37ff 	movw	r7, #1023	; 0x3ff
   23664:	f3c6 2889 	ubfx	r8, r6, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
   23668:	45b8      	cmp	r8, r7
   2366a:	d105      	bne.n	23678 <lfs_rename+0x44>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
   2366c:	f06f 0415 	mvn.w	r4, #21
    err = lfs_rawrename(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23670:	4620      	mov	r0, r4
   23672:	b02f      	add	sp, #188	; 0xbc
   23674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
   23678:	4628      	mov	r0, r5
   2367a:	f10d 0316 	add.w	r3, sp, #22
   2367e:	aa07      	add	r2, sp, #28
   23680:	a912      	add	r1, sp, #72	; 0x48
   23682:	f7fe f843 	bl	2170c <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   23686:	1e04      	subs	r4, r0, #0
   23688:	db13      	blt.n	236b2 <lfs_rename+0x7e>
   2368a:	f3c4 2389 	ubfx	r3, r4, #10, #10
   2368e:	42bb      	cmp	r3, r7
   23690:	d0ec      	beq.n	2366c <lfs_rename+0x38>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   23692:	4648      	mov	r0, r9
   23694:	a912      	add	r1, sp, #72	; 0x48
   23696:	f00b fc01 	bl	2ee9c <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   2369a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   2369c:	4607      	mov	r7, r0
    prevdir.next = lfs->mlist;
   2369e:	931a      	str	r3, [sp, #104]	; 0x68
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   236a0:	0d33      	lsrs	r3, r6, #20
   236a2:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
    return (tag & 0x7ff00000) >> 20;
   236a6:	ea4f 5214 	mov.w	r2, r4, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
   236aa:	d031      	beq.n	23710 <lfs_rename+0xdc>
        return LFS_ERR_ISDIR;
   236ac:	f06f 0414 	mvn.w	r4, #20
    return err;
   236b0:	e7de      	b.n	23670 <lfs_rename+0x3c>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
   236b2:	1ca1      	adds	r1, r4, #2
   236b4:	d1dc      	bne.n	23670 <lfs_rename+0x3c>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
   236b6:	f8bd a016 	ldrh.w	sl, [sp, #22]
   236ba:	45ba      	cmp	sl, r7
   236bc:	d0d8      	beq.n	23670 <lfs_rename+0x3c>
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   236be:	a912      	add	r1, sp, #72	; 0x48
   236c0:	4648      	mov	r0, r9
   236c2:	f00b fbeb 	bl	2ee9c <lfs_pair_cmp>
    prevdir.next = lfs->mlist;
   236c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
   236c8:	4607      	mov	r7, r0
        lfs_size_t nlen = strlen(newpath);
   236ca:	9807      	ldr	r0, [sp, #28]
    prevdir.next = lfs->mlist;
   236cc:	931a      	str	r3, [sp, #104]	; 0x68
        lfs_size_t nlen = strlen(newpath);
   236ce:	f7e5 fe5a 	bl	9386 <strlen>
        if (nlen > lfs->name_max) {
   236d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   236d4:	4298      	cmp	r0, r3
   236d6:	d902      	bls.n	236de <lfs_rename+0xaa>
            return LFS_ERR_NAMETOOLONG;
   236d8:	f06f 0423 	mvn.w	r4, #35	; 0x23
   236dc:	e7c8      	b.n	23670 <lfs_rename+0x3c>
        if (samepair && newid <= newoldid) {
   236de:	b18f      	cbz	r7, 23704 <lfs_rename+0xd0>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   236e0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   236e2:	4b64      	ldr	r3, [pc, #400]	; (23874 <lfs_rename+0x240>)
   236e4:	4013      	ands	r3, r2
   236e6:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   236ea:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   236ee:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   236f2:	632b      	str	r3, [r5, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   236f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236f6:	1ca2      	adds	r2, r4, #2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   236f8:	636b      	str	r3, [r5, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   236fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   236fc:	63ab      	str	r3, [r5, #56]	; 0x38
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   236fe:	d13b      	bne.n	23778 <lfs_rename+0x144>
   23700:	4642      	mov	r2, r8
   23702:	e003      	b.n	2370c <lfs_rename+0xd8>
        if (samepair && newid <= newoldid) {
   23704:	45d0      	cmp	r8, sl
   23706:	d3fb      	bcc.n	23700 <lfs_rename+0xcc>
            newoldid += 1;
   23708:	f108 0201 	add.w	r2, r8, #1
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   2370c:	2300      	movs	r3, #0
   2370e:	e039      	b.n	23784 <lfs_rename+0x150>
    } else if (samepair && newid == newoldid) {
   23710:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   23714:	b348      	cbz	r0, 2376a <lfs_rename+0x136>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   23716:	2a02      	cmp	r2, #2
   23718:	d1e2      	bne.n	236e0 <lfs_rename+0xac>
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
   2371a:	4a57      	ldr	r2, [pc, #348]	; (23878 <lfs_rename+0x244>)
   2371c:	f10d 0a90 	add.w	sl, sp, #144	; 0x90
   23720:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   23724:	4628      	mov	r0, r5
   23726:	4a55      	ldr	r2, [pc, #340]	; (2387c <lfs_rename+0x248>)
   23728:	f8cd a000 	str.w	sl, [sp]
   2372c:	a912      	add	r1, sp, #72	; 0x48
   2372e:	f00b fc33 	bl	2ef98 <lfs_dir_get>
        if (res < 0) {
   23732:	2800      	cmp	r0, #0
   23734:	db5e      	blt.n	237f4 <lfs_rename+0x1c0>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
   23736:	4652      	mov	r2, sl
   23738:	4628      	mov	r0, r5
   2373a:	a91c      	add	r1, sp, #112	; 0x70
   2373c:	f00b fca8 	bl	2f090 <lfs_dir_fetch>
        if (err) {
   23740:	2800      	cmp	r0, #0
   23742:	d157      	bne.n	237f4 <lfs_rename+0x1c0>
        if (prevdir.m.count > 0 || prevdir.m.split) {
   23744:	9b21      	ldr	r3, [sp, #132]	; 0x84
   23746:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
   2374a:	d151      	bne.n	237f0 <lfs_rename+0x1bc>
        err = lfs_fs_preporphans(lfs, +1);
   2374c:	2101      	movs	r1, #1
   2374e:	4628      	mov	r0, r5
   23750:	f7fd f9b6 	bl	20ac0 <lfs_fs_preporphans>
        if (err) {
   23754:	2800      	cmp	r0, #0
   23756:	d14d      	bne.n	237f4 <lfs_rename+0x1c0>
        lfs->mlist = &prevdir;
   23758:	ab1a      	add	r3, sp, #104	; 0x68
        prevdir.type = 0;
   2375a:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
        prevdir.id = 0;
   2375e:	f8ad 006c 	strh.w	r0, [sp, #108]	; 0x6c
        lfs->mlist = &prevdir;
   23762:	62ab      	str	r3, [r5, #40]	; 0x28
    if (!samepair) {
   23764:	2f00      	cmp	r7, #0
   23766:	d1bb      	bne.n	236e0 <lfs_rename+0xac>
   23768:	e005      	b.n	23776 <lfs_rename+0x142>
    } else if (samepair && newid == newoldid) {
   2376a:	4598      	cmp	r8, r3
   2376c:	d101      	bne.n	23772 <lfs_rename+0x13e>
        return 0;
   2376e:	2400      	movs	r4, #0
   23770:	e77e      	b.n	23670 <lfs_rename+0x3c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   23772:	2a02      	cmp	r2, #2
   23774:	d0d1      	beq.n	2371a <lfs_rename+0xe6>
            return LFS_ERR_NOTEMPTY;
   23776:	2700      	movs	r7, #0
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   23778:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2377c:	4b40      	ldr	r3, [pc, #256]	; (23880 <lfs_rename+0x24c>)
   2377e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   23782:	4642      	mov	r2, r8
   23784:	f04f 0a00 	mov.w	sl, #0
   23788:	9324      	str	r3, [sp, #144]	; 0x90
   2378a:	493e      	ldr	r1, [pc, #248]	; (23884 <lfs_rename+0x250>)
   2378c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   23790:	0d36      	lsrs	r6, r6, #20
   23792:	0536      	lsls	r6, r6, #20
   23794:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
   23798:	ea4f 2b83 	mov.w	fp, r3, lsl #10
   2379c:	ea46 2683 	orr.w	r6, r6, r3, lsl #10
   237a0:	9b07      	ldr	r3, [sp, #28]
   237a2:	e9cd 1a26 	strd	r1, sl, [sp, #152]	; 0x98
   237a6:	4618      	mov	r0, r3
   237a8:	9302      	str	r3, [sp, #8]
   237aa:	9203      	str	r2, [sp, #12]
   237ac:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
   237b0:	f7e5 fde9 	bl	9386 <strlen>
   237b4:	9b02      	ldr	r3, [sp, #8]
   237b6:	4306      	orrs	r6, r0
   237b8:	9329      	str	r3, [sp, #164]	; 0xa4
   237ba:	ea4b 0308 	orr.w	r3, fp, r8
   237be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   237c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   237c6:	e9cd 392a 	strd	r3, r9, [sp, #168]	; 0xa8
   237ca:	9628      	str	r6, [sp, #160]	; 0xa0
   237cc:	b9a7      	cbnz	r7, 237f8 <lfs_rename+0x1c4>
   237ce:	4b2c      	ldr	r3, [pc, #176]	; (23880 <lfs_rename+0x24c>)
   237d0:	9a03      	ldr	r2, [sp, #12]
   237d2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
   237d6:	932c      	str	r3, [sp, #176]	; 0xb0
   237d8:	2300      	movs	r3, #0
   237da:	4628      	mov	r0, r5
   237dc:	932d      	str	r3, [sp, #180]	; 0xb4
   237de:	aa24      	add	r2, sp, #144	; 0x90
   237e0:	2305      	movs	r3, #5
   237e2:	a912      	add	r1, sp, #72	; 0x48
   237e4:	f00c f811 	bl	2f80a <lfs_dir_commit>
    if (err) {
   237e8:	b140      	cbz	r0, 237fc <lfs_rename+0x1c8>
        lfs->mlist = prevdir.next;
   237ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   237ec:	62ab      	str	r3, [r5, #40]	; 0x28
   237ee:	e001      	b.n	237f4 <lfs_rename+0x1c0>
            return LFS_ERR_NOTEMPTY;
   237f0:	f06f 0026 	mvn.w	r0, #38	; 0x26
        return err;
   237f4:	4604      	mov	r4, r0
   237f6:	e73b      	b.n	23670 <lfs_rename+0x3c>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
   237f8:	4653      	mov	r3, sl
   237fa:	e7ec      	b.n	237d6 <lfs_rename+0x1a2>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   237fc:	b1b7      	cbz	r7, 2382c <lfs_rename+0x1f8>
   237fe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
   23800:	0d13      	lsrs	r3, r2, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
   23802:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   23806:	d011      	beq.n	2382c <lfs_rename+0x1f8>
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   23808:	4b1a      	ldr	r3, [pc, #104]	; (23874 <lfs_rename+0x240>)
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
   2380a:	63a8      	str	r0, [r5, #56]	; 0x38
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
   2380c:	4013      	ands	r3, r2
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
   2380e:	e9c5 300c 	strd	r3, r0, [r5, #48]	; 0x30
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
   23812:	4b1b      	ldr	r3, [pc, #108]	; (23880 <lfs_rename+0x24c>)
   23814:	4649      	mov	r1, r9
   23816:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
   2381a:	e9cd 3008 	strd	r3, r0, [sp, #32]
   2381e:	aa08      	add	r2, sp, #32
   23820:	2301      	movs	r3, #1
   23822:	4628      	mov	r0, r5
   23824:	f00b fff1 	bl	2f80a <lfs_dir_commit>
        if (err) {
   23828:	2800      	cmp	r0, #0
   2382a:	d1de      	bne.n	237ea <lfs_rename+0x1b6>
    lfs->mlist = prevdir.next;
   2382c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2382e:	62ab      	str	r3, [r5, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
   23830:	1ca3      	adds	r3, r4, #2
   23832:	d09c      	beq.n	2376e <lfs_rename+0x13a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
   23834:	f3c4 540a 	ubfx	r4, r4, #20, #11
   23838:	2c02      	cmp	r4, #2
   2383a:	d198      	bne.n	2376e <lfs_rename+0x13a>
        err = lfs_fs_preporphans(lfs, -1);
   2383c:	f04f 31ff 	mov.w	r1, #4294967295
   23840:	4628      	mov	r0, r5
   23842:	f7fd f93d 	bl	20ac0 <lfs_fs_preporphans>
        if (err) {
   23846:	4604      	mov	r4, r0
   23848:	2800      	cmp	r0, #0
   2384a:	f47f af11 	bne.w	23670 <lfs_rename+0x3c>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
   2384e:	4628      	mov	r0, r5
   23850:	aa12      	add	r2, sp, #72	; 0x48
   23852:	a91c      	add	r1, sp, #112	; 0x70
   23854:	f00b fc29 	bl	2f0aa <lfs_fs_pred>
        if (err) {
   23858:	4604      	mov	r4, r0
   2385a:	2800      	cmp	r0, #0
   2385c:	f47f af08 	bne.w	23670 <lfs_rename+0x3c>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
   23860:	4628      	mov	r0, r5
   23862:	aa1c      	add	r2, sp, #112	; 0x70
   23864:	a912      	add	r1, sp, #72	; 0x48
   23866:	f7ff fbbd 	bl	22fe4 <lfs_dir_drop>
   2386a:	e7c3      	b.n	237f4 <lfs_rename+0x1c0>
   2386c:	4604      	mov	r4, r0
   2386e:	e6ff      	b.n	23670 <lfs_rename+0x3c>
   23870:	4634      	mov	r4, r6
   23872:	e6fd      	b.n	23670 <lfs_rename+0x3c>
   23874:	800003ff 	.word	0x800003ff
   23878:	20000008 	.word	0x20000008
   2387c:	700ffc00 	.word	0x700ffc00
   23880:	4ff00000 	.word	0x4ff00000
   23884:	40100000 	.word	0x40100000

00023888 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
   23888:	b510      	push	{r4, lr}
   2388a:	4604      	mov	r4, r0
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   2388c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2388e:	f00b fb3c 	bl	2ef0a <lfs_mlist_isopen>
   23892:	b158      	cbz	r0, 238ac <lfs_file_opencfg+0x24>
   23894:	4908      	ldr	r1, [pc, #32]	; (238b8 <lfs_file_opencfg+0x30>)
   23896:	4809      	ldr	r0, [pc, #36]	; (238bc <lfs_file_opencfg+0x34>)
   23898:	f241 5383 	movw	r3, #5507	; 0x1583
   2389c:	4a08      	ldr	r2, [pc, #32]	; (238c0 <lfs_file_opencfg+0x38>)
   2389e:	f006 ff1c 	bl	2a6da <assert_print>
   238a2:	f241 5183 	movw	r1, #5507	; 0x1583
   238a6:	4806      	ldr	r0, [pc, #24]	; (238c0 <lfs_file_opencfg+0x38>)
   238a8:	f006 ff10 	bl	2a6cc <assert_post_action>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
   238ac:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   238ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
   238b2:	f7ff bbb5 	b.w	23020 <lfs_file_rawopencfg>
   238b6:	bf00      	nop
   238b8:	0003801c 	.word	0x0003801c
   238bc:	00032679 	.word	0x00032679
   238c0:	00037aaa 	.word	0x00037aaa

000238c4 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   238c4:	b508      	push	{r3, lr}
   238c6:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   238c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   238ca:	f00b fb1e 	bl	2ef0a <lfs_mlist_isopen>
   238ce:	b958      	cbnz	r0, 238e8 <lfs_file_close+0x24>
   238d0:	4908      	ldr	r1, [pc, #32]	; (238f4 <lfs_file_close+0x30>)
   238d2:	4809      	ldr	r0, [pc, #36]	; (238f8 <lfs_file_close+0x34>)
   238d4:	f241 5392 	movw	r3, #5522	; 0x1592
   238d8:	4a08      	ldr	r2, [pc, #32]	; (238fc <lfs_file_close+0x38>)
   238da:	f006 fefe 	bl	2a6da <assert_print>
   238de:	f241 5192 	movw	r1, #5522	; 0x1592
   238e2:	4806      	ldr	r0, [pc, #24]	; (238fc <lfs_file_close+0x38>)
   238e4:	f006 fef2 	bl	2a6cc <assert_post_action>

    err = lfs_file_rawclose(lfs, file);
   238e8:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   238ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawclose(lfs, file);
   238ee:	f00b bfe4 	b.w	2f8ba <lfs_file_rawclose>
   238f2:	bf00      	nop
   238f4:	0003801d 	.word	0x0003801d
   238f8:	00032679 	.word	0x00032679
   238fc:	00037aaa 	.word	0x00037aaa

00023900 <lfs_file_sync>:

#ifndef LFS_READONLY
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   23900:	b508      	push	{r3, lr}
   23902:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_sync(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23904:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23906:	f00b fb00 	bl	2ef0a <lfs_mlist_isopen>
   2390a:	b958      	cbnz	r0, 23924 <lfs_file_sync+0x24>
   2390c:	4908      	ldr	r1, [pc, #32]	; (23930 <lfs_file_sync+0x30>)
   2390e:	4809      	ldr	r0, [pc, #36]	; (23934 <lfs_file_sync+0x34>)
   23910:	f241 53a2 	movw	r3, #5538	; 0x15a2
   23914:	4a08      	ldr	r2, [pc, #32]	; (23938 <lfs_file_sync+0x38>)
   23916:	f006 fee0 	bl	2a6da <assert_print>
   2391a:	f241 51a2 	movw	r1, #5538	; 0x15a2
   2391e:	4806      	ldr	r0, [pc, #24]	; (23938 <lfs_file_sync+0x38>)
   23920:	f006 fed4 	bl	2a6cc <assert_post_action>

    err = lfs_file_rawsync(lfs, file);
   23924:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_sync -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_rawsync(lfs, file);
   2392a:	f00b bf7c 	b.w	2f826 <lfs_file_rawsync>
   2392e:	bf00      	nop
   23930:	0003801d 	.word	0x0003801d
   23934:	00032679 	.word	0x00032679
   23938:	00037aaa 	.word	0x00037aaa

0002393c <lfs_file_read>:
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
   2393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23940:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23942:	6a80      	ldr	r0, [r0, #40]	; 0x28
        void *buffer, lfs_size_t size) {
   23944:	460d      	mov	r5, r1
   23946:	4616      	mov	r6, r2
   23948:	461f      	mov	r7, r3
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   2394a:	f00b fade 	bl	2ef0a <lfs_mlist_isopen>
   2394e:	b958      	cbnz	r0, 23968 <lfs_file_read+0x2c>
   23950:	4914      	ldr	r1, [pc, #80]	; (239a4 <lfs_file_read+0x68>)
   23952:	f241 53b4 	movw	r3, #5556	; 0x15b4
   23956:	4a14      	ldr	r2, [pc, #80]	; (239a8 <lfs_file_read+0x6c>)
   23958:	4814      	ldr	r0, [pc, #80]	; (239ac <lfs_file_read+0x70>)
   2395a:	f006 febe 	bl	2a6da <assert_print>
   2395e:	f241 51b4 	movw	r1, #5556	; 0x15b4
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
   23962:	4811      	ldr	r0, [pc, #68]	; (239a8 <lfs_file_read+0x6c>)
   23964:	f006 feb2 	bl	2a6cc <assert_post_action>
   23968:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2396a:	07da      	lsls	r2, r3, #31
   2396c:	d409      	bmi.n	23982 <lfs_file_read+0x46>
   2396e:	4910      	ldr	r1, [pc, #64]	; (239b0 <lfs_file_read+0x74>)
   23970:	f640 43f2 	movw	r3, #3314	; 0xcf2
   23974:	4a0c      	ldr	r2, [pc, #48]	; (239a8 <lfs_file_read+0x6c>)
   23976:	480d      	ldr	r0, [pc, #52]	; (239ac <lfs_file_read+0x70>)
   23978:	f006 feaf 	bl	2a6da <assert_print>
   2397c:	f640 41f2 	movw	r1, #3314	; 0xcf2
   23980:	e7ef      	b.n	23962 <lfs_file_read+0x26>
    if (file->flags & LFS_F_WRITING) {
   23982:	039b      	lsls	r3, r3, #14
   23984:	d407      	bmi.n	23996 <lfs_file_read+0x5a>
    return lfs_file_flushedread(lfs, file, buffer, size);
   23986:	463b      	mov	r3, r7
   23988:	4632      	mov	r2, r6
   2398a:	4629      	mov	r1, r5
   2398c:	4620      	mov	r0, r4
    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   2398e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lfs_file_flushedread(lfs, file, buffer, size);
   23992:	f7fd bf61 	b.w	21858 <lfs_file_flushedread>
        int err = lfs_file_flush(lfs, file);
   23996:	4620      	mov	r0, r4
   23998:	f00b fe49 	bl	2f62e <lfs_file_flush>
        if (err) {
   2399c:	2800      	cmp	r0, #0
   2399e:	d0f2      	beq.n	23986 <lfs_file_read+0x4a>
}
   239a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   239a4:	0003801d 	.word	0x0003801d
   239a8:	00037aaa 	.word	0x00037aaa
   239ac:	00032679 	.word	0x00032679
   239b0:	00038053 	.word	0x00038053

000239b4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
   239b4:	b510      	push	{r4, lr}
   239b6:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   239b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   239ba:	f00b faa6 	bl	2ef0a <lfs_mlist_isopen>
   239be:	b958      	cbnz	r0, 239d8 <lfs_file_write+0x24>
   239c0:	4908      	ldr	r1, [pc, #32]	; (239e4 <lfs_file_write+0x30>)
   239c2:	4809      	ldr	r0, [pc, #36]	; (239e8 <lfs_file_write+0x34>)
   239c4:	f241 53c6 	movw	r3, #5574	; 0x15c6
   239c8:	4a08      	ldr	r2, [pc, #32]	; (239ec <lfs_file_write+0x38>)
   239ca:	f006 fe86 	bl	2a6da <assert_print>
   239ce:	f241 51c6 	movw	r1, #5574	; 0x15c6
   239d2:	4806      	ldr	r0, [pc, #24]	; (239ec <lfs_file_write+0x38>)
   239d4:	f006 fe7a 	bl	2a6cc <assert_post_action>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
   239d8:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   239da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
   239de:	f7fe bc7f 	b.w	222e0 <lfs_file_rawwrite>
   239e2:	bf00      	nop
   239e4:	0003801d 	.word	0x0003801d
   239e8:	00032679 	.word	0x00032679
   239ec:	00037aaa 	.word	0x00037aaa

000239f0 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
   239f0:	b510      	push	{r4, lr}
   239f2:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   239f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   239f6:	f00b fa88 	bl	2ef0a <lfs_mlist_isopen>
   239fa:	b958      	cbnz	r0, 23a14 <lfs_file_seek+0x24>
   239fc:	4908      	ldr	r1, [pc, #32]	; (23a20 <lfs_file_seek+0x30>)
   239fe:	4809      	ldr	r0, [pc, #36]	; (23a24 <lfs_file_seek+0x34>)
   23a00:	f241 53d8 	movw	r3, #5592	; 0x15d8
   23a04:	4a08      	ldr	r2, [pc, #32]	; (23a28 <lfs_file_seek+0x38>)
   23a06:	f006 fe68 	bl	2a6da <assert_print>
   23a0a:	f241 51d8 	movw	r1, #5592	; 0x15d8
   23a0e:	4806      	ldr	r0, [pc, #24]	; (23a28 <lfs_file_seek+0x38>)
   23a10:	f006 fe5c 	bl	2a6cc <assert_post_action>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
   23a14:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   23a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
   23a1a:	f00b bead 	b.w	2f778 <lfs_file_rawseek>
   23a1e:	bf00      	nop
   23a20:	0003801d 	.word	0x0003801d
   23a24:	00032679 	.word	0x00032679
   23a28:	00037aaa 	.word	0x00037aaa

00023a2c <lfs_file_truncate>:

#ifndef LFS_READONLY
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   23a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a30:	4605      	mov	r5, r0
   23a32:	b086      	sub	sp, #24
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_truncate(%p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23a34:	6a80      	ldr	r0, [r0, #40]	; 0x28
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   23a36:	460c      	mov	r4, r1
   23a38:	4616      	mov	r6, r2
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23a3a:	f00b fa66 	bl	2ef0a <lfs_mlist_isopen>
   23a3e:	b958      	cbnz	r0, 23a58 <lfs_file_truncate+0x2c>
   23a40:	4933      	ldr	r1, [pc, #204]	; (23b10 <lfs_file_truncate+0xe4>)
   23a42:	f241 53e9 	movw	r3, #5609	; 0x15e9
   23a46:	4a33      	ldr	r2, [pc, #204]	; (23b14 <lfs_file_truncate+0xe8>)
   23a48:	4833      	ldr	r0, [pc, #204]	; (23b18 <lfs_file_truncate+0xec>)
   23a4a:	f006 fe46 	bl	2a6da <assert_print>
   23a4e:	f241 51e9 	movw	r1, #5609	; 0x15e9
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
   23a52:	4830      	ldr	r0, [pc, #192]	; (23b14 <lfs_file_truncate+0xe8>)
   23a54:	f006 fe3a 	bl	2a6cc <assert_post_action>
   23a58:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   23a5a:	0791      	lsls	r1, r2, #30
   23a5c:	d409      	bmi.n	23a72 <lfs_file_truncate+0x46>
   23a5e:	492f      	ldr	r1, [pc, #188]	; (23b1c <lfs_file_truncate+0xf0>)
   23a60:	f640 53c8 	movw	r3, #3528	; 0xdc8
   23a64:	4a2b      	ldr	r2, [pc, #172]	; (23b14 <lfs_file_truncate+0xe8>)
   23a66:	482c      	ldr	r0, [pc, #176]	; (23b18 <lfs_file_truncate+0xec>)
   23a68:	f006 fe37 	bl	2a6da <assert_print>
   23a6c:	f640 51c8 	movw	r1, #3528	; 0xdc8
   23a70:	e7ef      	b.n	23a52 <lfs_file_truncate+0x26>
    if (size > LFS_FILE_MAX) {
   23a72:	2e00      	cmp	r6, #0
   23a74:	db49      	blt.n	23b0a <lfs_file_truncate+0xde>
    if (file->flags & LFS_F_WRITING) {
   23a76:	0392      	lsls	r2, r2, #14
    lfs_off_t pos = file->pos;
   23a78:	6b67      	ldr	r7, [r4, #52]	; 0x34
        return lfs_max(file->pos, file->ctz.size);
   23a7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (file->flags & LFS_F_WRITING) {
   23a7c:	d502      	bpl.n	23a84 <lfs_file_truncate+0x58>
	return (a > b) ? a : b;
   23a7e:	42bb      	cmp	r3, r7
   23a80:	bf38      	it	cc
   23a82:	463b      	movcc	r3, r7
    if (size < oldsize) {
   23a84:	429e      	cmp	r6, r3
   23a86:	d224      	bcs.n	23ad2 <lfs_file_truncate+0xa6>
        int err = lfs_file_flush(lfs, file);
   23a88:	4621      	mov	r1, r4
   23a8a:	4628      	mov	r0, r5
   23a8c:	f00b fdcf 	bl	2f62e <lfs_file_flush>
        if (err) {
   23a90:	bbc0      	cbnz	r0, 23b04 <lfs_file_truncate+0xd8>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   23a92:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   23a96:	9302      	str	r3, [sp, #8]
   23a98:	f104 0338 	add.w	r3, r4, #56	; 0x38
   23a9c:	e9cd 6300 	strd	r6, r3, [sp]
   23aa0:	4628      	mov	r0, r5
   23aa2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   23aa6:	f104 0140 	add.w	r1, r4, #64	; 0x40
   23aaa:	f00b fb44 	bl	2f136 <lfs_ctz_find.constprop.0>
        if (err) {
   23aae:	bb48      	cbnz	r0, 23b04 <lfs_file_truncate+0xd8>
        file->ctz.head = file->block;
   23ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        file->pos = size;
   23ab2:	6366      	str	r6, [r4, #52]	; 0x34
        file->ctz.size = size;
   23ab4:	e9c4 360a 	strd	r3, r6, [r4, #40]	; 0x28
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   23ab8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23aba:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   23abe:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_rawseek(lfs, file, pos, LFS_SEEK_SET);
   23ac0:	2300      	movs	r3, #0
   23ac2:	463a      	mov	r2, r7
   23ac4:	4621      	mov	r1, r4
   23ac6:	4628      	mov	r0, r5
   23ac8:	f00b fe56 	bl	2f778 <lfs_file_rawseek>
    if (res < 0) {
   23acc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   23ad0:	e018      	b.n	23b04 <lfs_file_truncate+0xd8>
    } else if (size > oldsize) {
   23ad2:	d9f5      	bls.n	23ac0 <lfs_file_truncate+0x94>
        lfs_soff_t res = lfs_file_rawseek(lfs, file, 0, LFS_SEEK_END);
   23ad4:	2302      	movs	r3, #2
   23ad6:	2200      	movs	r2, #0
   23ad8:	4621      	mov	r1, r4
   23ada:	4628      	mov	r0, r5
   23adc:	f00b fe4c 	bl	2f778 <lfs_file_rawseek>
        if (res < 0) {
   23ae0:	2800      	cmp	r0, #0
   23ae2:	db0f      	blt.n	23b04 <lfs_file_truncate+0xd8>
            res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
   23ae4:	f04f 0800 	mov.w	r8, #0
        while (file->pos < size) {
   23ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23aea:	429e      	cmp	r6, r3
   23aec:	d9e8      	bls.n	23ac0 <lfs_file_truncate+0x94>
            res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
   23aee:	2301      	movs	r3, #1
   23af0:	4621      	mov	r1, r4
   23af2:	4628      	mov	r0, r5
   23af4:	f10d 0217 	add.w	r2, sp, #23
   23af8:	f88d 8017 	strb.w	r8, [sp, #23]
   23afc:	f7fe fbf0 	bl	222e0 <lfs_file_rawwrite>
            if (res < 0) {
   23b00:	2800      	cmp	r0, #0
   23b02:	daf1      	bge.n	23ae8 <lfs_file_truncate+0xbc>
    err = lfs_file_rawtruncate(lfs, file, size);

    LFS_TRACE("lfs_file_truncate -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23b04:	b006      	add	sp, #24
   23b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_INVAL;
   23b0a:	f06f 0015 	mvn.w	r0, #21
    return err;
   23b0e:	e7f9      	b.n	23b04 <lfs_file_truncate+0xd8>
   23b10:	0003801d 	.word	0x0003801d
   23b14:	00037aaa 	.word	0x00037aaa
   23b18:	00032679 	.word	0x00032679
   23b1c:	00037e3f 	.word	0x00037e3f

00023b20 <lfs_file_tell>:
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
   23b20:	b508      	push	{r3, lr}
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
   23b22:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23b24:	f00b f9f1 	bl	2ef0a <lfs_mlist_isopen>
   23b28:	b958      	cbnz	r0, 23b42 <lfs_file_tell+0x22>
   23b2a:	4907      	ldr	r1, [pc, #28]	; (23b48 <lfs_file_tell+0x28>)
   23b2c:	4807      	ldr	r0, [pc, #28]	; (23b4c <lfs_file_tell+0x2c>)
   23b2e:	f241 53f9 	movw	r3, #5625	; 0x15f9
   23b32:	4a07      	ldr	r2, [pc, #28]	; (23b50 <lfs_file_tell+0x30>)
   23b34:	f006 fdd1 	bl	2a6da <assert_print>
   23b38:	f241 51f9 	movw	r1, #5625	; 0x15f9
   23b3c:	4804      	ldr	r0, [pc, #16]	; (23b50 <lfs_file_tell+0x30>)
   23b3e:	f006 fdc5 	bl	2a6cc <assert_post_action>
    lfs_soff_t res = lfs_file_rawtell(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
   23b42:	6b48      	ldr	r0, [r1, #52]	; 0x34
   23b44:	bd08      	pop	{r3, pc}
   23b46:	bf00      	nop
   23b48:	0003801d 	.word	0x0003801d
   23b4c:	00032679 	.word	0x00032679
   23b50:	00037aaa 	.word	0x00037aaa

00023b54 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
   23b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23b58:	b0a6      	sub	sp, #152	; 0x98
   23b5a:	4605      	mov	r5, r0
   23b5c:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
   23b5e:	f7ff fa0f 	bl	22f80 <lfs_fs_forceconsistency>
    if (err) {
   23b62:	b980      	cbnz	r0, 23b86 <lfs_mkdir+0x32>
    cwd.next = lfs->mlist;
   23b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   23b66:	4628      	mov	r0, r5
    cwd.next = lfs->mlist;
   23b68:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
   23b6a:	aa01      	add	r2, sp, #4
   23b6c:	f10d 0302 	add.w	r3, sp, #2
   23b70:	a91e      	add	r1, sp, #120	; 0x78
   23b72:	f7fd fdcb 	bl	2170c <lfs_dir_find>
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
   23b76:	1c83      	adds	r3, r0, #2
   23b78:	d108      	bne.n	23b8c <lfs_mkdir+0x38>
   23b7a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   23b7e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
   23b82:	429f      	cmp	r7, r3
   23b84:	d107      	bne.n	23b96 <lfs_mkdir+0x42>
    err = lfs_rawmkdir(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23b86:	b026      	add	sp, #152	; 0x98
   23b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (err < 0) ? err : LFS_ERR_EXIST;
   23b8c:	2800      	cmp	r0, #0
   23b8e:	bfa8      	it	ge
   23b90:	f06f 0010 	mvnge.w	r0, #16
   23b94:	e7f7      	b.n	23b86 <lfs_mkdir+0x32>
    lfs_size_t nlen = strlen(path);
   23b96:	f8dd 8004 	ldr.w	r8, [sp, #4]
   23b9a:	4640      	mov	r0, r8
   23b9c:	f7e5 fbf3 	bl	9386 <strlen>
    if (nlen > lfs->name_max) {
   23ba0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    lfs_size_t nlen = strlen(path);
   23ba2:	4606      	mov	r6, r0
    if (nlen > lfs->name_max) {
   23ba4:	4298      	cmp	r0, r3
   23ba6:	d871      	bhi.n	23c8c <lfs_mkdir+0x138>
    lfs->free.ack = lfs->cfg->block_count;
   23ba8:	6eab      	ldr	r3, [r5, #104]	; 0x68
    err = lfs_dir_alloc(lfs, &dir);
   23baa:	ac04      	add	r4, sp, #16
    lfs->free.ack = lfs->cfg->block_count;
   23bac:	6a1b      	ldr	r3, [r3, #32]
    err = lfs_dir_alloc(lfs, &dir);
   23bae:	4621      	mov	r1, r4
   23bb0:	4628      	mov	r0, r5
    lfs->free.ack = lfs->cfg->block_count;
   23bb2:	662b      	str	r3, [r5, #96]	; 0x60
    err = lfs_dir_alloc(lfs, &dir);
   23bb4:	f00b fbc6 	bl	2f344 <lfs_dir_alloc>
    if (err) {
   23bb8:	2800      	cmp	r0, #0
   23bba:	d1e4      	bne.n	23b86 <lfs_mkdir+0x32>
    lfs_mdir_t pred = cwd.m;
   23bbc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   23bc0:	f10d 0e78 	add.w	lr, sp, #120	; 0x78
   23bc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   23bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   23bcc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   23bd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
   23bd4:	f10d 0a48 	add.w	sl, sp, #72	; 0x48
   23bd8:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   23bdc:	2b00      	cmp	r3, #0
   23bde:	d14d      	bne.n	23c7c <lfs_mkdir+0x128>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
   23be0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 23c94 <lfs_mkdir+0x140>
   23be4:	2301      	movs	r3, #1
   23be6:	4621      	mov	r1, r4
   23be8:	4628      	mov	r0, r5
   23bea:	aa02      	add	r2, sp, #8
   23bec:	e9cd 9a02 	strd	r9, sl, [sp, #8]
   23bf0:	f00b fe0b 	bl	2f80a <lfs_dir_commit>
    if (err) {
   23bf4:	2800      	cmp	r0, #0
   23bf6:	d1c6      	bne.n	23b86 <lfs_mkdir+0x32>
    if (cwd.m.split) {
   23bf8:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   23bfc:	b1f3      	cbz	r3, 23c3c <lfs_mkdir+0xe8>
        err = lfs_fs_preporphans(lfs, +1);
   23bfe:	2101      	movs	r1, #1
   23c00:	4628      	mov	r0, r5
   23c02:	f7fc ff5d 	bl	20ac0 <lfs_fs_preporphans>
        if (err) {
   23c06:	2800      	cmp	r0, #0
   23c08:	d1bd      	bne.n	23b86 <lfs_mkdir+0x32>
        lfs->mlist = &cwd;
   23c0a:	ab1c      	add	r3, sp, #112	; 0x70
        cwd.type = 0;
   23c0c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
        cwd.id = 0;
   23c10:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
   23c14:	62ab      	str	r3, [r5, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
   23c16:	4628      	mov	r0, r5
   23c18:	2301      	movs	r3, #1
   23c1a:	aa14      	add	r2, sp, #80	; 0x50
   23c1c:	a90c      	add	r1, sp, #48	; 0x30
   23c1e:	e9cd 9414 	strd	r9, r4, [sp, #80]	; 0x50
   23c22:	f00b fdf2 	bl	2f80a <lfs_dir_commit>
        if (err) {
   23c26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
            lfs->mlist = cwd.next;
   23c28:	62ab      	str	r3, [r5, #40]	; 0x28
        if (err) {
   23c2a:	2800      	cmp	r0, #0
   23c2c:	d1ab      	bne.n	23b86 <lfs_mkdir+0x32>
        err = lfs_fs_preporphans(lfs, -1);
   23c2e:	f04f 31ff 	mov.w	r1, #4294967295
   23c32:	4628      	mov	r0, r5
   23c34:	f7fc ff44 	bl	20ac0 <lfs_fs_preporphans>
        if (err) {
   23c38:	2800      	cmp	r0, #0
   23c3a:	d1a4      	bne.n	23b86 <lfs_mkdir+0x32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
   23c3c:	4b16      	ldr	r3, [pc, #88]	; (23c98 <lfs_mkdir+0x144>)
   23c3e:	ea46 2687 	orr.w	r6, r6, r7, lsl #10
   23c42:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
   23c46:	9314      	str	r3, [sp, #80]	; 0x50
   23c48:	2300      	movs	r3, #0
   23c4a:	9315      	str	r3, [sp, #84]	; 0x54
   23c4c:	4b13      	ldr	r3, [pc, #76]	; (23c9c <lfs_mkdir+0x148>)
   23c4e:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
   23c52:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
   23c56:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
   23c5a:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
   23c5e:	4628      	mov	r0, r5
   23c60:	2b00      	cmp	r3, #0
   23c62:	4b0c      	ldr	r3, [pc, #48]	; (23c94 <lfs_mkdir+0x140>)
   23c64:	bf18      	it	ne
   23c66:	2300      	movne	r3, #0
   23c68:	aa14      	add	r2, sp, #80	; 0x50
   23c6a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
   23c6e:	a91e      	add	r1, sp, #120	; 0x78
   23c70:	2304      	movs	r3, #4
   23c72:	e9cd 6816 	strd	r6, r8, [sp, #88]	; 0x58
   23c76:	f00b fdc8 	bl	2f80a <lfs_dir_commit>
    if (err) {
   23c7a:	e784      	b.n	23b86 <lfs_mkdir+0x32>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
   23c7c:	4652      	mov	r2, sl
   23c7e:	4628      	mov	r0, r5
   23c80:	a90c      	add	r1, sp, #48	; 0x30
   23c82:	f00b fa05 	bl	2f090 <lfs_dir_fetch>
        if (err) {
   23c86:	2800      	cmp	r0, #0
   23c88:	d0a6      	beq.n	23bd8 <lfs_mkdir+0x84>
   23c8a:	e77c      	b.n	23b86 <lfs_mkdir+0x32>
        return LFS_ERR_NAMETOOLONG;
   23c8c:	f06f 0023 	mvn.w	r0, #35	; 0x23
    return err;
   23c90:	e779      	b.n	23b86 <lfs_mkdir+0x32>
   23c92:	bf00      	nop
   23c94:	600ffc08 	.word	0x600ffc08
   23c98:	40100000 	.word	0x40100000
   23c9c:	20000008 	.word	0x20000008

00023ca0 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   23ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ca2:	4605      	mov	r5, r0
   23ca4:	b087      	sub	sp, #28
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
   23ca6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   23ca8:	f00b f92f 	bl	2ef0a <lfs_mlist_isopen>
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
   23cac:	460c      	mov	r4, r1
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
   23cae:	4603      	mov	r3, r0
   23cb0:	b158      	cbz	r0, 23cca <lfs_dir_open+0x2a>
   23cb2:	4923      	ldr	r1, [pc, #140]	; (23d40 <lfs_dir_open+0xa0>)
   23cb4:	4823      	ldr	r0, [pc, #140]	; (23d44 <lfs_dir_open+0xa4>)
   23cb6:	f241 6335 	movw	r3, #5685	; 0x1635
   23cba:	4a23      	ldr	r2, [pc, #140]	; (23d48 <lfs_dir_open+0xa8>)
   23cbc:	f006 fd0d 	bl	2a6da <assert_print>
   23cc0:	f241 6135 	movw	r1, #5685	; 0x1635
   23cc4:	4820      	ldr	r0, [pc, #128]	; (23d48 <lfs_dir_open+0xa8>)
   23cc6:	f006 fd01 	bl	2a6cc <assert_post_action>
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
   23cca:	f101 0608 	add.w	r6, r1, #8
   23cce:	9203      	str	r2, [sp, #12]
   23cd0:	4631      	mov	r1, r6
   23cd2:	4628      	mov	r0, r5
   23cd4:	aa03      	add	r2, sp, #12
   23cd6:	f7fd fd19 	bl	2170c <lfs_dir_find>
    if (tag < 0) {
   23cda:	2800      	cmp	r0, #0
   23cdc:	db2a      	blt.n	23d34 <lfs_dir_open+0x94>
    return (tag & 0x7ff00000) >> 20;
   23cde:	0d03      	lsrs	r3, r0, #20
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
   23ce0:	2b02      	cmp	r3, #2
   23ce2:	d129      	bne.n	23d38 <lfs_dir_open+0x98>
    if (lfs_tag_id(tag) == 0x3ff) {
   23ce4:	f240 32ff 	movw	r2, #1023	; 0x3ff
    return (tag & 0x000ffc00) >> 10;
   23ce8:	f3c0 2389 	ubfx	r3, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
   23cec:	4293      	cmp	r3, r2
   23cee:	af04      	add	r7, sp, #16
   23cf0:	d115      	bne.n	23d1e <lfs_dir_open+0x7e>
        pair[0] = lfs->root[0];
   23cf2:	6a2b      	ldr	r3, [r5, #32]
   23cf4:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
   23cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23cf8:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
   23cfa:	463a      	mov	r2, r7
   23cfc:	4631      	mov	r1, r6
   23cfe:	4628      	mov	r0, r5
   23d00:	f00b f9c6 	bl	2f090 <lfs_dir_fetch>
    if (err) {
   23d04:	b9b0      	cbnz	r0, 23d34 <lfs_dir_open+0x94>
    dir->head[0] = dir->m.pair[0];
   23d06:	68a3      	ldr	r3, [r4, #8]
    dir->id = 0;
   23d08:	80a0      	strh	r0, [r4, #4]
    dir->head[0] = dir->m.pair[0];
   23d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
   23d0c:	68e3      	ldr	r3, [r4, #12]
    dir->pos = 0;
   23d0e:	62a0      	str	r0, [r4, #40]	; 0x28
    dir->head[1] = dir->m.pair[1];
   23d10:	6323      	str	r3, [r4, #48]	; 0x30
    dir->type = LFS_TYPE_DIR;
   23d12:	2302      	movs	r3, #2
   23d14:	71a3      	strb	r3, [r4, #6]
    mlist->next = lfs->mlist;
   23d16:	6aab      	ldr	r3, [r5, #40]	; 0x28
   23d18:	6023      	str	r3, [r4, #0]
    lfs->mlist = mlist;
   23d1a:	62ac      	str	r4, [r5, #40]	; 0x28
    return 0;
   23d1c:	e00a      	b.n	23d34 <lfs_dir_open+0x94>
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
   23d1e:	4a0b      	ldr	r2, [pc, #44]	; (23d4c <lfs_dir_open+0xac>)
   23d20:	4631      	mov	r1, r6
   23d22:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
   23d26:	4628      	mov	r0, r5
   23d28:	4a09      	ldr	r2, [pc, #36]	; (23d50 <lfs_dir_open+0xb0>)
   23d2a:	9700      	str	r7, [sp, #0]
   23d2c:	f00b f934 	bl	2ef98 <lfs_dir_get>
        if (res < 0) {
   23d30:	2800      	cmp	r0, #0
   23d32:	dae2      	bge.n	23cfa <lfs_dir_open+0x5a>
    err = lfs_dir_rawopen(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23d34:	b007      	add	sp, #28
   23d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LFS_ERR_NOTDIR;
   23d38:	f06f 0013 	mvn.w	r0, #19
    return err;
   23d3c:	e7fa      	b.n	23d34 <lfs_dir_open+0x94>
   23d3e:	bf00      	nop
   23d40:	00038080 	.word	0x00038080
   23d44:	00032679 	.word	0x00032679
   23d48:	00037aaa 	.word	0x00037aaa
   23d4c:	20000008 	.word	0x20000008
   23d50:	700ffc00 	.word	0x700ffc00

00023d54 <lfs_dir_read>:
    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
   23d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d58:	4690      	mov	r8, r2
   23d5a:	460c      	mov	r4, r1
   23d5c:	4605      	mov	r5, r0
   23d5e:	f44f 7284 	mov.w	r2, #264	; 0x108
   23d62:	2100      	movs	r1, #0
   23d64:	4640      	mov	r0, r8
   23d66:	f00c fc4c 	bl	30602 <memset>
    if (dir->pos == 0) {
   23d6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d6c:	b963      	cbnz	r3, 23d88 <lfs_dir_read+0x34>
        info->type = LFS_TYPE_DIR;
   23d6e:	2302      	movs	r3, #2
   23d70:	f888 3000 	strb.w	r3, [r8]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   23d74:	4b1d      	ldr	r3, [pc, #116]	; (23dec <lfs_dir_read+0x98>)
   23d76:	881b      	ldrh	r3, [r3, #0]
   23d78:	f8a8 3008 	strh.w	r3, [r8, #8]
        return true;
   23d7c:	2001      	movs	r0, #1
        dir->pos += 1;
   23d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23d80:	3301      	adds	r3, #1
   23d82:	62a3      	str	r3, [r4, #40]	; 0x28
    err = lfs_dir_rawread(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
   23d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (dir->pos == 1) {
   23d88:	2b01      	cmp	r3, #1
   23d8a:	d01d      	beq.n	23dc8 <lfs_dir_read+0x74>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   23d8c:	f104 0720 	add.w	r7, r4, #32
   23d90:	f104 0608 	add.w	r6, r4, #8
        if (dir->id == dir->m.count) {
   23d94:	88a2      	ldrh	r2, [r4, #4]
   23d96:	8ba3      	ldrh	r3, [r4, #28]
   23d98:	429a      	cmp	r2, r3
   23d9a:	d10a      	bne.n	23db2 <lfs_dir_read+0x5e>
            if (!dir->m.split) {
   23d9c:	7fe0      	ldrb	r0, [r4, #31]
   23d9e:	2800      	cmp	r0, #0
   23da0:	d0f0      	beq.n	23d84 <lfs_dir_read+0x30>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
   23da2:	463a      	mov	r2, r7
   23da4:	4631      	mov	r1, r6
   23da6:	4628      	mov	r0, r5
   23da8:	f00b f972 	bl	2f090 <lfs_dir_fetch>
            if (err) {
   23dac:	2800      	cmp	r0, #0
   23dae:	d1e9      	bne.n	23d84 <lfs_dir_read+0x30>
            dir->id = 0;
   23db0:	80a0      	strh	r0, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
   23db2:	4643      	mov	r3, r8
   23db4:	4631      	mov	r1, r6
   23db6:	4628      	mov	r0, r5
   23db8:	88a2      	ldrh	r2, [r4, #4]
   23dba:	f7fd f82b 	bl	20e14 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
   23dbe:	b970      	cbnz	r0, 23dde <lfs_dir_read+0x8a>
        dir->id += 1;
   23dc0:	88a3      	ldrh	r3, [r4, #4]
   23dc2:	3301      	adds	r3, #1
   23dc4:	80a3      	strh	r3, [r4, #4]
    dir->pos += 1;
   23dc6:	e7d9      	b.n	23d7c <lfs_dir_read+0x28>
        info->type = LFS_TYPE_DIR;
   23dc8:	4643      	mov	r3, r8
   23dca:	2202      	movs	r2, #2
   23dcc:	f803 2b08 	strb.w	r2, [r3], #8
   23dd0:	4a07      	ldr	r2, [pc, #28]	; (23df0 <lfs_dir_read+0x9c>)
   23dd2:	8811      	ldrh	r1, [r2, #0]
   23dd4:	7892      	ldrb	r2, [r2, #2]
   23dd6:	f8a8 1008 	strh.w	r1, [r8, #8]
   23dda:	709a      	strb	r2, [r3, #2]
   23ddc:	e7ce      	b.n	23d7c <lfs_dir_read+0x28>
        if (err && err != LFS_ERR_NOENT) {
   23dde:	1c83      	adds	r3, r0, #2
   23de0:	d1d0      	bne.n	23d84 <lfs_dir_read+0x30>
        dir->id += 1;
   23de2:	88a3      	ldrh	r3, [r4, #4]
   23de4:	3301      	adds	r3, #1
   23de6:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
   23de8:	e7d4      	b.n	23d94 <lfs_dir_read+0x40>
   23dea:	bf00      	nop
   23dec:	00037b3d 	.word	0x00037b3d
   23df0:	00037b3c 	.word	0x00037b3c

00023df4 <lfs_crc>:
 * use for LittleFS.
 */

/* Software CRC implementation with small lookup table */
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size)
{
   23df4:	b530      	push	{r4, r5, lr}
	};

	const uint8_t *data = buffer;

	for (size_t i = 0; i < size; i++) {
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   23df6:	4d0c      	ldr	r5, [pc, #48]	; (23e28 <lfs_crc+0x34>)
   23df8:	440a      	add	r2, r1
	for (size_t i = 0; i < size; i++) {
   23dfa:	4291      	cmp	r1, r2
   23dfc:	d100      	bne.n	23e00 <lfs_crc+0xc>
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
	}

	return crc;
}
   23dfe:	bd30      	pop	{r4, r5, pc}
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
   23e00:	f811 3b01 	ldrb.w	r3, [r1], #1
   23e04:	ea83 0400 	eor.w	r4, r3, r0
   23e08:	f004 040f 	and.w	r4, r4, #15
   23e0c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
   23e10:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
		crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
   23e14:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   23e18:	f003 030f 	and.w	r3, r3, #15
   23e1c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   23e20:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < size; i++) {
   23e24:	e7e9      	b.n	23dfa <lfs_crc+0x6>
   23e26:	bf00      	nop
   23e28:	00032514 	.word	0x00032514

00023e2c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   23e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e30:	469a      	mov	sl, r3
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   23e32:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   23e34:	4606      	mov	r6, r0
	if (nvqs > num_vrings)
   23e36:	4293      	cmp	r3, r2
{
   23e38:	4617      	mov	r7, r2
   23e3a:	b087      	sub	sp, #28
	if (nvqs > num_vrings)
   23e3c:	d341      	bcc.n	23ec2 <virtio_create_virtqueues+0x96>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   23e3e:	2500      	movs	r5, #0
		vring_info = &vdev->vrings_info[i];
   23e40:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   23e44:	42bd      	cmp	r5, r7
   23e46:	d103      	bne.n	23e50 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   23e48:	2000      	movs	r0, #0
}
   23e4a:	b007      	add	sp, #28
   23e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   23e50:	fb0b f805 	mul.w	r8, fp, r5
   23e54:	f8d6 902c 	ldr.w	r9, [r6, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23e58:	69b2      	ldr	r2, [r6, #24]
		vring_info = &vdev->vrings_info[i];
   23e5a:	eb09 0408 	add.w	r4, r9, r8
		vring_alloc = &vring_info->info;
   23e5e:	1d23      	adds	r3, r4, #4
   23e60:	9305      	str	r3, [sp, #20]
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   23e62:	b9ca      	cbnz	r2, 23e98 <virtio_create_virtqueues+0x6c>
			struct metal_io_region *io = vring_info->io;
   23e64:	6960      	ldr	r0, [r4, #20]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   23e66:	6861      	ldr	r1, [r4, #4]
   23e68:	6803      	ldr	r3, [r0, #0]
			metal_io_block_set(io, offset, 0,
   23e6a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   23e6e:	1ac9      	subs	r1, r1, r3
						      vring_alloc->align));
   23e70:	68a3      	ldr	r3, [r4, #8]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   23e72:	f10c 0e03 	add.w	lr, ip, #3
	size = (size + align - 1) & ~(align - 1);
   23e76:	1e5c      	subs	r4, r3, #1
   23e78:	eb04 140c 	add.w	r4, r4, ip, lsl #4
   23e7c:	425b      	negs	r3, r3
   23e7e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   23e82:	401c      	ands	r4, r3
	size += sizeof(struct vring_used) +
   23e84:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
			metal_io_block_set(io, offset, 0,
   23e88:	6884      	ldr	r4, [r0, #8]
   23e8a:	3306      	adds	r3, #6
   23e8c:	42a1      	cmp	r1, r4
   23e8e:	bf28      	it	cs
   23e90:	f04f 31ff 	movcs.w	r1, #4294967295
   23e94:	f00a ffc2 	bl	2ee1c <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23e98:	f859 3008 	ldr.w	r3, [r9, r8]
   23e9c:	4630      	mov	r0, r6
   23e9e:	9302      	str	r3, [sp, #8]
				       callbacks[i], vdev->func->notify,
   23ea0:	6a33      	ldr	r3, [r6, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   23ea2:	b2a9      	uxth	r1, r5
   23ea4:	6a1b      	ldr	r3, [r3, #32]
   23ea6:	9301      	str	r3, [sp, #4]
   23ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23eaa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   23eae:	9300      	str	r3, [sp, #0]
   23eb0:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   23eb4:	9b05      	ldr	r3, [sp, #20]
   23eb6:	f00b fd82 	bl	2f9be <virtqueue_create>
		if (ret)
   23eba:	2800      	cmp	r0, #0
   23ebc:	d1c5      	bne.n	23e4a <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   23ebe:	3501      	adds	r5, #1
   23ec0:	e7c0      	b.n	23e44 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   23ec2:	4801      	ldr	r0, [pc, #4]	; (23ec8 <virtio_create_virtqueues+0x9c>)
   23ec4:	e7c1      	b.n	23e4a <virtio_create_virtqueues+0x1e>
   23ec6:	bf00      	nop
   23ec8:	fffff440 	.word	0xfffff440

00023ecc <virtqueue_free>:
 *
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
   23ecc:	b510      	push	{r4, lr}
	if (vq) {
   23ece:	4604      	mov	r4, r0
   23ed0:	b190      	cbz	r0, 23ef8 <virtqueue_free+0x2c>
		if (vq->vq_free_cnt != vq->vq_nentries) {
   23ed2:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   23ed4:	8943      	ldrh	r3, [r0, #10]
   23ed6:	429a      	cmp	r2, r3
   23ed8:	d009      	beq.n	23eee <virtqueue_free+0x22>
			metal_log(METAL_LOG_WARNING,
   23eda:	4b08      	ldr	r3, [pc, #32]	; (23efc <virtqueue_free+0x30>)
   23edc:	781a      	ldrb	r2, [r3, #0]
   23ede:	2a03      	cmp	r2, #3
   23ee0:	d905      	bls.n	23eee <virtqueue_free+0x22>
   23ee2:	685b      	ldr	r3, [r3, #4]
   23ee4:	b11b      	cbz	r3, 23eee <virtqueue_free+0x22>
   23ee6:	6842      	ldr	r2, [r0, #4]
   23ee8:	4905      	ldr	r1, [pc, #20]	; (23f00 <virtqueue_free+0x34>)
   23eea:	2004      	movs	r0, #4
   23eec:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   23eee:	4620      	mov	r0, r4
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   23ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ef4:	f00c bb21 	b.w	3053a <k_free>
   23ef8:	bd10      	pop	{r4, pc}
   23efa:	bf00      	nop
   23efc:	200219c0 	.word	0x200219c0
   23f00:	000380b6 	.word	0x000380b6

00023f04 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   23f04:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   23f06:	8944      	ldrh	r4, [r0, #10]
   23f08:	428c      	cmp	r4, r1
   23f0a:	d912      	bls.n	23f32 <virtqueue_add_consumed_buffer+0x2e>
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   23f0c:	6a03      	ldr	r3, [r0, #32]
   23f0e:	3c01      	subs	r4, #1
   23f10:	885d      	ldrh	r5, [r3, #2]
   23f12:	402c      	ands	r4, r5
   23f14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
   23f18:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   23f1a:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   23f1c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   23f20:	6a02      	ldr	r2, [r0, #32]
   23f22:	8853      	ldrh	r3, [r2, #2]
   23f24:	3301      	adds	r3, #1
   23f26:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   23f28:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   23f2a:	3301      	adds	r3, #1
   23f2c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   23f2e:	2000      	movs	r0, #0
}
   23f30:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   23f32:	4801      	ldr	r0, [pc, #4]	; (23f38 <virtqueue_add_consumed_buffer+0x34>)
   23f34:	e7fc      	b.n	23f30 <virtqueue_add_consumed_buffer+0x2c>
   23f36:	bf00      	nop
   23f38:	fffff441 	.word	0xfffff441

00023f3c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   23f3c:	b470      	push	{r4, r5, r6}
   23f3e:	9e03      	ldr	r6, [sp, #12]
   23f40:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   23f42:	b158      	cbz	r0, 23f5c <rpmsg_send_offchannel_raw+0x20>
   23f44:	6a00      	ldr	r0, [r0, #32]
   23f46:	b148      	cbz	r0, 23f5c <rpmsg_send_offchannel_raw+0x20>
   23f48:	b143      	cbz	r3, 23f5c <rpmsg_send_offchannel_raw+0x20>
   23f4a:	3401      	adds	r4, #1
   23f4c:	d006      	beq.n	23f5c <rpmsg_send_offchannel_raw+0x20>
   23f4e:	2e00      	cmp	r6, #0
   23f50:	db04      	blt.n	23f5c <rpmsg_send_offchannel_raw+0x20>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   23f52:	6f84      	ldr	r4, [r0, #120]	; 0x78
   23f54:	b114      	cbz	r4, 23f5c <rpmsg_send_offchannel_raw+0x20>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23f56:	46a4      	mov	ip, r4
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   23f58:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   23f5a:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   23f5c:	4801      	ldr	r0, [pc, #4]	; (23f64 <rpmsg_send_offchannel_raw+0x28>)
}
   23f5e:	bc70      	pop	{r4, r5, r6}
   23f60:	4770      	bx	lr
   23f62:	bf00      	nop
   23f64:	fffff82d 	.word	0xfffff82d

00023f68 <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   23f68:	b470      	push	{r4, r5, r6}
   23f6a:	9e03      	ldr	r6, [sp, #12]
   23f6c:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   23f6e:	b160      	cbz	r0, 23f8a <rpmsg_send_offchannel_nocopy+0x22>
   23f70:	6a00      	ldr	r0, [r0, #32]
   23f72:	b150      	cbz	r0, 23f8a <rpmsg_send_offchannel_nocopy+0x22>
   23f74:	b14b      	cbz	r3, 23f8a <rpmsg_send_offchannel_nocopy+0x22>
   23f76:	3401      	adds	r4, #1
   23f78:	d007      	beq.n	23f8a <rpmsg_send_offchannel_nocopy+0x22>
   23f7a:	2e00      	cmp	r6, #0
   23f7c:	db05      	blt.n	23f8a <rpmsg_send_offchannel_nocopy+0x22>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   23f7e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
   23f82:	b114      	cbz	r4, 23f8a <rpmsg_send_offchannel_nocopy+0x22>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23f84:	46a4      	mov	ip, r4
							data, len);

	return RPMSG_ERR_PARAM;
}
   23f86:	bc70      	pop	{r4, r5, r6}
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   23f88:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   23f8a:	4801      	ldr	r0, [pc, #4]	; (23f90 <rpmsg_send_offchannel_nocopy+0x28>)
}
   23f8c:	bc70      	pop	{r4, r5, r6}
   23f8e:	4770      	bx	lr
   23f90:	fffff82d 	.word	0xfffff82d

00023f94 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   23f94:	b570      	push	{r4, r5, r6, lr}
   23f96:	460c      	mov	r4, r1
   23f98:	4611      	mov	r1, r2
   23f9a:	4605      	mov	r5, r0
   23f9c:	461e      	mov	r6, r3
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   23f9e:	4b0c      	ldr	r3, [pc, #48]	; (23fd0 <rpmsg_register_endpoint+0x3c>)
   23fa0:	2220      	movs	r2, #32
   23fa2:	2900      	cmp	r1, #0
   23fa4:	bf08      	it	eq
   23fa6:	4619      	moveq	r1, r3
   23fa8:	4620      	mov	r0, r4
   23faa:	f00c fc8a 	bl	308c2 <strncpy>
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
	ept->addr = src;
	ept->dest_addr = dest;
   23fae:	9b04      	ldr	r3, [sp, #16]
	ept->addr = src;
   23fb0:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   23fb2:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   23fb4:	9b05      	ldr	r3, [sp, #20]
	ept->ns_unbind_cb = ns_unbind_cb;
	ept->rdev = rdev;
   23fb6:	6225      	str	r5, [r4, #32]
	ept->cb = cb;
   23fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   23fba:	9b06      	ldr	r3, [sp, #24]
   23fbc:	6323      	str	r3, [r4, #48]	; 0x30
	new_node->prev = node->prev;
   23fbe:	686a      	ldr	r2, [r5, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   23fc0:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->next = node;
   23fc4:	e9c4 520d 	strd	r5, r2, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   23fc8:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   23fca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23fcc:	6013      	str	r3, [r2, #0]
}
   23fce:	bd70      	pop	{r4, r5, r6, pc}
   23fd0:	00036918 	.word	0x00036918

00023fd4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   23fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23fd8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   23fdc:	460d      	mov	r5, r1
   23fde:	4692      	mov	sl, r2
   23fe0:	461f      	mov	r7, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   23fe2:	4606      	mov	r6, r0
   23fe4:	2800      	cmp	r0, #0
   23fe6:	d06c      	beq.n	240c2 <rpmsg_create_ept+0xee>
   23fe8:	2900      	cmp	r1, #0
   23fea:	d06a      	beq.n	240c2 <rpmsg_create_ept+0xee>
   23fec:	f1b9 0f00 	cmp.w	r9, #0
   23ff0:	d067      	beq.n	240c2 <rpmsg_create_ept+0xee>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   23ff2:	f101 0858 	add.w	r8, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   23ff6:	4640      	mov	r0, r8
   23ff8:	f00b fe4a 	bl	2fc90 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   23ffc:	1c78      	adds	r0, r7, #1
   23ffe:	d140      	bne.n	24082 <rpmsg_create_ept+0xae>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   24000:	6cac      	ldr	r4, [r5, #72]	; 0x48
   24002:	f105 0348 	add.w	r3, r5, #72	; 0x48
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24006:	f014 0401 	ands.w	r4, r4, #1
   2400a:	d00b      	beq.n	24024 <rpmsg_create_ept+0x50>
	for (bit = start;
   2400c:	2400      	movs	r4, #0
	     bit++)
   2400e:	3401      	adds	r4, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24010:	2c80      	cmp	r4, #128	; 0x80
   24012:	d054      	beq.n	240be <rpmsg_create_ept+0xea>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24014:	0962      	lsrs	r2, r4, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   24016:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2401a:	f004 011f 	and.w	r1, r4, #31
   2401e:	40ca      	lsrs	r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   24020:	07d1      	lsls	r1, r2, #31
   24022:	d4f4      	bmi.n	2400e <rpmsg_create_ept+0x3a>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24024:	2101      	movs	r1, #1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24026:	0960      	lsrs	r0, r4, #5
   24028:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   2402c:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   24030:	f004 041f 	and.w	r4, r4, #31
   24034:	40a1      	lsls	r1, r4
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   24036:	430a      	orrs	r2, r1
   24038:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		 * 1.Trust the author of predefined service
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   2403c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2403e:	4652      	mov	r2, sl
   24040:	e9cd 9301 	strd	r9, r3, [sp, #4]
   24044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24046:	4631      	mov	r1, r6
   24048:	9300      	str	r3, [sp, #0]
   2404a:	4628      	mov	r0, r5
   2404c:	463b      	mov	r3, r7
   2404e:	f7ff ffa1 	bl	23f94 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   24052:	4640      	mov	r0, r8
   24054:	f001 fac8 	bl	255e8 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   24058:	7834      	ldrb	r4, [r6, #0]
   2405a:	b174      	cbz	r4, 2407a <rpmsg_create_ept+0xa6>
   2405c:	f895 4090 	ldrb.w	r4, [r5, #144]	; 0x90
   24060:	b15c      	cbz	r4, 2407a <rpmsg_create_ept+0xa6>
   24062:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   24064:	3301      	adds	r3, #1
   24066:	d12e      	bne.n	240c6 <rpmsg_create_ept+0xf2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   24068:	2100      	movs	r1, #0
   2406a:	4630      	mov	r0, r6
   2406c:	f00b fe3f 	bl	2fcee <rpmsg_send_ns_message>

	if (status)
   24070:	4604      	mov	r4, r0
   24072:	b110      	cbz	r0, 2407a <rpmsg_create_ept+0xa6>
		rpmsg_unregister_endpoint(ept);
   24074:	4630      	mov	r0, r6
   24076:	f00b fe11 	bl	2fc9c <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   2407a:	4620      	mov	r0, r4
   2407c:	b004      	add	sp, #16
   2407e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   24082:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   24086:	d3d9      	bcc.n	2403c <rpmsg_create_ept+0x68>
	addr -= RPMSG_RESERVED_ADDRESSES;
   24088:	f5a7 6380 	sub.w	r3, r7, #1024	; 0x400
	if (addr >= 0 && addr < size)
   2408c:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   2408e:	f105 0148 	add.w	r1, r5, #72	; 0x48
	if (addr >= 0 && addr < size)
   24092:	d80f      	bhi.n	240b4 <rpmsg_create_ept+0xe0>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   24094:	0958      	lsrs	r0, r3, #5
   24096:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   2409a:	f003 031f 	and.w	r3, r3, #31
   2409e:	fa24 f203 	lsr.w	r2, r4, r3
		if (!status) {
   240a2:	07d2      	lsls	r2, r2, #31
   240a4:	d40b      	bmi.n	240be <rpmsg_create_ept+0xea>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   240a6:	2201      	movs	r2, #1
   240a8:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   240ac:	4323      	orrs	r3, r4
   240ae:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
   240b2:	e7c3      	b.n	2403c <rpmsg_create_ept+0x68>
   240b4:	4c05      	ldr	r4, [pc, #20]	; (240cc <rpmsg_create_ept+0xf8>)
   240b6:	4640      	mov	r0, r8
   240b8:	f001 fa96 	bl	255e8 <z_impl_k_sem_give>
}
   240bc:	e7dd      	b.n	2407a <rpmsg_create_ept+0xa6>
			status = RPMSG_ERR_ADDR;
   240be:	4c04      	ldr	r4, [pc, #16]	; (240d0 <rpmsg_create_ept+0xfc>)
   240c0:	e7f9      	b.n	240b6 <rpmsg_create_ept+0xe2>
		return RPMSG_ERR_PARAM;
   240c2:	4c02      	ldr	r4, [pc, #8]	; (240cc <rpmsg_create_ept+0xf8>)
   240c4:	e7d9      	b.n	2407a <rpmsg_create_ept+0xa6>
   240c6:	2400      	movs	r4, #0
   240c8:	e7d7      	b.n	2407a <rpmsg_create_ept+0xa6>
   240ca:	bf00      	nop
   240cc:	fffff82d 	.word	0xfffff82d
   240d0:	fffff829 	.word	0xfffff829

000240d4 <rpmsg_virtio_send_offchannel_nocopy>:
}

static int rpmsg_virtio_send_offchannel_nocopy(struct rpmsg_device *rdev,
					       uint32_t src, uint32_t dst,
					       const void *data, int len)
{
   240d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int status;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	hdr = RPMSG_LOCATE_HDR(data);
   240d8:	f1a3 0810 	sub.w	r8, r3, #16
	/* The reserved field contains buffer index */
	idx = hdr->reserved;
   240dc:	f853 7c08 	ldr.w	r7, [r3, #-8]

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
	rp_hdr.src = src;
	rp_hdr.len = len;
	rp_hdr.reserved = 0;
   240e0:	2300      	movs	r3, #0
{
   240e2:	b088      	sub	sp, #32
	rp_hdr.reserved = 0;
   240e4:	9306      	str	r3, [sp, #24]
	rp_hdr.flags = 0;
   240e6:	f8ad 301e 	strh.w	r3, [sp, #30]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   240ea:	2310      	movs	r3, #16
	rp_hdr.src = src;
   240ec:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   240f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   240f2:	4604      	mov	r4, r0
	io = rvdev->shbuf_io;
   240f4:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	rp_hdr.len = len;
   240f8:	f8ad 501c 	strh.w	r5, [sp, #28]
   240fc:	6801      	ldr	r1, [r0, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   240fe:	6886      	ldr	r6, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   24100:	eba8 0101 	sub.w	r1, r8, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   24104:	42b1      	cmp	r1, r6
   24106:	bf28      	it	cs
   24108:	f04f 31ff 	movcs.w	r1, #4294967295
   2410c:	eb0d 0203 	add.w	r2, sp, r3
   24110:	f00a fe4a 	bl	2eda8 <metal_io_block_write>
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   24114:	2810      	cmp	r0, #16
	idx = hdr->reserved;
   24116:	b2bf      	uxth	r7, r7
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   24118:	d00b      	beq.n	24132 <rpmsg_virtio_send_offchannel_nocopy+0x5e>
   2411a:	4924      	ldr	r1, [pc, #144]	; (241ac <rpmsg_virtio_send_offchannel_nocopy+0xd8>)
   2411c:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   24120:	4a23      	ldr	r2, [pc, #140]	; (241b0 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   24122:	4824      	ldr	r0, [pc, #144]	; (241b4 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   24124:	f006 fad9 	bl	2a6da <assert_print>
   24128:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
#endif /*!VIRTIO_DEVICE_ONLY*/
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   2412c:	4820      	ldr	r0, [pc, #128]	; (241b0 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   2412e:	f006 facd 	bl	2a6cc <assert_post_action>
	metal_mutex_acquire(&rdev->lock);
   24132:	f104 0658 	add.w	r6, r4, #88	; 0x58
   24136:	4630      	mov	r0, r6
   24138:	f00b fe69 	bl	2fe0e <__metal_mutex_acquire>
}

static inline unsigned int
rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->role;
   2413c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   24140:	699b      	ldr	r3, [r3, #24]
   24142:	b9d3      	cbnz	r3, 2417a <rpmsg_virtio_send_offchannel_nocopy+0xa6>
		buff_len = rvdev->config.h2r_buf_size;
   24144:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24148:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   2414c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24150:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24152:	b9cb      	cbnz	r3, 24188 <rpmsg_virtio_send_offchannel_nocopy+0xb4>
		vqbuf.len = len;
   24154:	e9cd 8202 	strd	r8, r2, [sp, #8]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   24158:	f8cd 8000 	str.w	r8, [sp]
   2415c:	2201      	movs	r2, #1
   2415e:	a902      	add	r1, sp, #8
   24160:	f00b fc5a 	bl	2fa18 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   24164:	b1b0      	cbz	r0, 24194 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
   24166:	4914      	ldr	r1, [pc, #80]	; (241b8 <rpmsg_virtio_send_offchannel_nocopy+0xe4>)
   24168:	f240 13b9 	movw	r3, #441	; 0x1b9
   2416c:	4a10      	ldr	r2, [pc, #64]	; (241b0 <rpmsg_virtio_send_offchannel_nocopy+0xdc>)
   2416e:	4811      	ldr	r0, [pc, #68]	; (241b4 <rpmsg_virtio_send_offchannel_nocopy+0xe0>)
   24170:	f006 fab3 	bl	2a6da <assert_print>
   24174:	f240 11b9 	movw	r1, #441	; 0x1b9
   24178:	e7d8      	b.n	2412c <rpmsg_virtio_send_offchannel_nocopy+0x58>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   2417a:	4639      	mov	r1, r7
   2417c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24180:	f00b fce0 	bl	2fb44 <virtqueue_get_buffer_length>
   24184:	4602      	mov	r2, r0
   24186:	e7df      	b.n	24148 <rpmsg_virtio_send_offchannel_nocopy+0x74>
	if (role == RPMSG_REMOTE) {
   24188:	2b01      	cmp	r3, #1
   2418a:	d103      	bne.n	24194 <rpmsg_virtio_send_offchannel_nocopy+0xc0>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   2418c:	4639      	mov	r1, r7
   2418e:	f7ff feb9 	bl	23f04 <virtqueue_add_consumed_buffer>
   24192:	e7e7      	b.n	24164 <rpmsg_virtio_send_offchannel_nocopy+0x90>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   24194:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24198:	f00b fd2b 	bl	2fbf2 <virtqueue_kick>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   2419c:	4630      	mov	r0, r6
   2419e:	f00b fe34 	bl	2fe0a <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return len;
}
   241a2:	4628      	mov	r0, r5
   241a4:	b008      	add	sp, #32
   241a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   241aa:	bf00      	nop
   241ac:	0003811b 	.word	0x0003811b
   241b0:	000380d8 	.word	0x000380d8
   241b4:	00032679 	.word	0x00032679
   241b8:	00038134 	.word	0x00038134

000241bc <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   241bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct virtio_device *vdev = vq->vq_dev;
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   241c0:	6803      	ldr	r3, [r0, #0]
   241c2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   241c4:	f107 0658 	add.w	r6, r7, #88	; 0x58
   241c8:	4630      	mov	r0, r6
   241ca:	f00b fe20 	bl	2fe0e <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   241ce:	4638      	mov	r0, r7
   241d0:	f10d 020a 	add.w	r2, sp, #10
   241d4:	a903      	add	r1, sp, #12
   241d6:	f00b fe8d 	bl	2fef4 <rpmsg_virtio_get_rx_buffer>
   241da:	4604      	mov	r4, r0
   241dc:	4630      	mov	r0, r6
   241de:	f00b fe14 	bl	2fe0a <k_sem_give>

	metal_mutex_release(&rdev->lock);

	while (rp_hdr) {
   241e2:	2c00      	cmp	r4, #0
   241e4:	d04f      	beq.n	24286 <rpmsg_virtio_rx_callback+0xca>
		rp_hdr->reserved = idx;
   241e6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   241ea:	4630      	mov	r0, r6
   241ec:	60a3      	str	r3, [r4, #8]
   241ee:	f00b fe0e 	bl	2fe0e <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   241f2:	f04f 33ff 	mov.w	r3, #4294967295
   241f6:	2100      	movs	r1, #0
   241f8:	4638      	mov	r0, r7
   241fa:	6862      	ldr	r2, [r4, #4]
   241fc:	f00b fdab 	bl	2fd56 <rpmsg_get_endpoint>
   24200:	4605      	mov	r5, r0
   24202:	4630      	mov	r0, r6
   24204:	f00b fe01 	bl	2fe0a <k_sem_give>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
		metal_mutex_release(&rdev->lock);

		if (ept) {
   24208:	b1ed      	cbz	r5, 24246 <rpmsg_virtio_rx_callback+0x8a>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   2420a:	6aab      	ldr	r3, [r5, #40]	; 0x28
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2420c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   2420e:	3301      	adds	r3, #1
				ept->dest_addr = rp_hdr->src;
   24210:	bf08      	it	eq
   24212:	6823      	ldreq	r3, [r4, #0]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   24214:	4628      	mov	r0, r5
				ept->dest_addr = rp_hdr->src;
   24216:	bf08      	it	eq
   24218:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   2421a:	6823      	ldr	r3, [r4, #0]
   2421c:	89a2      	ldrh	r2, [r4, #12]
   2421e:	9100      	str	r1, [sp, #0]
   24220:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   24224:	f104 0110 	add.w	r1, r4, #16
   24228:	47c0      	blx	r8
					 rp_hdr->len, rp_hdr->src, ept->priv);

			RPMSG_ASSERT(status >= 0,
   2422a:	2800      	cmp	r0, #0
   2422c:	da0b      	bge.n	24246 <rpmsg_virtio_rx_callback+0x8a>
   2422e:	4917      	ldr	r1, [pc, #92]	; (2428c <rpmsg_virtio_rx_callback+0xd0>)
   24230:	4817      	ldr	r0, [pc, #92]	; (24290 <rpmsg_virtio_rx_callback+0xd4>)
   24232:	f240 2343 	movw	r3, #579	; 0x243
   24236:	4a17      	ldr	r2, [pc, #92]	; (24294 <rpmsg_virtio_rx_callback+0xd8>)
   24238:	f006 fa4f 	bl	2a6da <assert_print>
   2423c:	f240 2143 	movw	r1, #579	; 0x243
   24240:	4814      	ldr	r0, [pc, #80]	; (24294 <rpmsg_virtio_rx_callback+0xd8>)
   24242:	f006 fa43 	bl	2a6cc <assert_post_action>
   24246:	4630      	mov	r0, r6
   24248:	f00b fde1 	bl	2fe0e <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   2424c:	68a3      	ldr	r3, [r4, #8]
   2424e:	2b00      	cmp	r3, #0
   24250:	db06      	blt.n	24260 <rpmsg_virtio_rx_callback+0xa4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   24252:	4621      	mov	r1, r4
   24254:	4638      	mov	r0, r7
   24256:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2425a:	9a03      	ldr	r2, [sp, #12]
   2425c:	f00b fe61 	bl	2ff22 <rpmsg_virtio_return_buffer>
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   24260:	4638      	mov	r0, r7
   24262:	f10d 020a 	add.w	r2, sp, #10
   24266:	a903      	add	r1, sp, #12
   24268:	f00b fe44 	bl	2fef4 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   2426c:	4604      	mov	r4, r0
   2426e:	b118      	cbz	r0, 24278 <rpmsg_virtio_rx_callback+0xbc>
   24270:	4630      	mov	r0, r6
   24272:	f00b fdca 	bl	2fe0a <k_sem_give>
	while (rp_hdr) {
   24276:	e7b6      	b.n	241e6 <rpmsg_virtio_rx_callback+0x2a>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   24278:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   2427c:	f00b fcb9 	bl	2fbf2 <virtqueue_kick>
   24280:	4630      	mov	r0, r6
   24282:	f00b fdc2 	bl	2fe0a <k_sem_give>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   24286:	b004      	add	sp, #16
   24288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2428c:	00038140 	.word	0x00038140
   24290:	00032679 	.word	0x00032679
   24294:	000380d8 	.word	0x000380d8

00024298 <rpmsg_virtio_send_offchannel_raw>:
{
   24298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2429c:	b085      	sub	sp, #20
   2429e:	460f      	mov	r7, r1
   242a0:	4690      	mov	r8, r2
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   242a2:	a903      	add	r1, sp, #12
   242a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
{
   242a6:	4606      	mov	r6, r0
   242a8:	4699      	mov	r9, r3
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   242aa:	f00b fe85 	bl	2ffb8 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   242ae:	4604      	mov	r4, r0
   242b0:	b350      	cbz	r0, 24308 <rpmsg_virtio_send_offchannel_raw+0x70>
	if (len > (int)buff_len)
   242b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   242b4:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   242b6:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
   242ba:	429d      	cmp	r5, r3
   242bc:	bfa8      	it	ge
   242be:	461d      	movge	r5, r3
   242c0:	6801      	ldr	r1, [r0, #0]
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   242c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
   242c6:	1a61      	subs	r1, r4, r1
   242c8:	4561      	cmp	r1, ip
   242ca:	bf28      	it	cs
   242cc:	f04f 31ff 	movcs.w	r1, #4294967295
   242d0:	462b      	mov	r3, r5
   242d2:	464a      	mov	r2, r9
   242d4:	f00a fd68 	bl	2eda8 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   242d8:	4285      	cmp	r5, r0
   242da:	d00b      	beq.n	242f4 <rpmsg_virtio_send_offchannel_raw+0x5c>
   242dc:	490b      	ldr	r1, [pc, #44]	; (2430c <rpmsg_virtio_send_offchannel_raw+0x74>)
   242de:	480c      	ldr	r0, [pc, #48]	; (24310 <rpmsg_virtio_send_offchannel_raw+0x78>)
   242e0:	f240 2303 	movw	r3, #515	; 0x203
   242e4:	4a0b      	ldr	r2, [pc, #44]	; (24314 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   242e6:	f006 f9f8 	bl	2a6da <assert_print>
   242ea:	f240 2103 	movw	r1, #515	; 0x203
   242ee:	4809      	ldr	r0, [pc, #36]	; (24314 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   242f0:	f006 f9ec 	bl	2a6cc <assert_post_action>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   242f4:	4623      	mov	r3, r4
   242f6:	4642      	mov	r2, r8
   242f8:	4639      	mov	r1, r7
   242fa:	4630      	mov	r0, r6
   242fc:	9500      	str	r5, [sp, #0]
   242fe:	f7ff fee9 	bl	240d4 <rpmsg_virtio_send_offchannel_nocopy>
}
   24302:	b005      	add	sp, #20
   24304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return RPMSG_ERR_NO_BUFF;
   24308:	4803      	ldr	r0, [pc, #12]	; (24318 <rpmsg_virtio_send_offchannel_raw+0x80>)
   2430a:	e7fa      	b.n	24302 <rpmsg_virtio_send_offchannel_raw+0x6a>
   2430c:	0003814c 	.word	0x0003814c
   24310:	00032679 	.word	0x00032679
   24314:	000380d8 	.word	0x000380d8
   24318:	fffff82e 	.word	0xfffff82e

0002431c <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   2431c:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   2431e:	4604      	mov	r4, r0
   24320:	b1e0      	cbz	r0, 2435c <rpmsg_virtio_get_buffer_size+0x40>
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   24322:	f100 0558 	add.w	r5, r0, #88	; 0x58
   24326:	4628      	mov	r0, r5
   24328:	f00b fd71 	bl	2fe0e <__metal_mutex_acquire>
   2432c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24330:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_HOST) {
   24332:	b953      	cbnz	r3, 2434a <rpmsg_virtio_get_buffer_size+0x2e>
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   24334:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
   24338:	3c10      	subs	r4, #16
	if (length <= 0) {
   2433a:	2c00      	cmp	r4, #0
   2433c:	dc00      	bgt.n	24340 <rpmsg_virtio_get_buffer_size+0x24>
		length = RPMSG_ERR_NO_BUFF;
   2433e:	4c08      	ldr	r4, [pc, #32]	; (24360 <rpmsg_virtio_get_buffer_size+0x44>)
   24340:	4628      	mov	r0, r5
   24342:	f00b fd62 	bl	2fe0a <k_sem_give>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
	metal_mutex_release(&rdev->lock);
	return size;
}
   24346:	4620      	mov	r0, r4
   24348:	bd38      	pop	{r3, r4, r5, pc}
	if (role == RPMSG_REMOTE) {
   2434a:	2b01      	cmp	r3, #1
   2434c:	d1f7      	bne.n	2433e <rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   2434e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24352:	f00b fc85 	bl	2fc60 <virtqueue_get_desc_size>
   24356:	f1a0 0410 	sub.w	r4, r0, #16
   2435a:	e7ee      	b.n	2433a <rpmsg_virtio_get_buffer_size+0x1e>
		return RPMSG_ERR_PARAM;
   2435c:	4c01      	ldr	r4, [pc, #4]	; (24364 <rpmsg_virtio_get_buffer_size+0x48>)
   2435e:	e7f2      	b.n	24346 <rpmsg_virtio_get_buffer_size+0x2a>
   24360:	fffff82e 	.word	0xfffff82e
   24364:	fffff82d 	.word	0xfffff82d

00024368 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   24368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2436c:	b08a      	sub	sp, #40	; 0x28
   2436e:	460d      	mov	r5, r1
   24370:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	; 0x48
   24374:	4690      	mov	r8, r2
   24376:	461e      	mov	r6, r3
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   24378:	4604      	mov	r4, r0
   2437a:	b920      	cbnz	r0, 24386 <rpmsg_init_vdev_with_config+0x1e>
		return RPMSG_ERR_PARAM;
   2437c:	4f81      	ldr	r7, [pc, #516]	; (24584 <rpmsg_init_vdev_with_config+0x21c>)
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   2437e:	4638      	mov	r0, r7
   24380:	b00a      	add	sp, #40	; 0x28
   24382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!rvdev || !vdev || !shm_io)
   24386:	2900      	cmp	r1, #0
   24388:	d0f8      	beq.n	2437c <rpmsg_init_vdev_with_config+0x14>
   2438a:	2b00      	cmp	r3, #0
   2438c:	d0f6      	beq.n	2437c <rpmsg_init_vdev_with_config+0x14>
__ssp_bos_icheck3(memset, void *, int)
   2438e:	2294      	movs	r2, #148	; 0x94
   24390:	2100      	movs	r1, #0
   24392:	f00c f936 	bl	30602 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24396:	2201      	movs	r2, #1
   24398:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2439c:	4611      	mov	r1, r2
   2439e:	f00b ff34 	bl	3020a <z_impl_k_sem_init>
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   243a2:	4b79      	ldr	r3, [pc, #484]	; (24588 <rpmsg_init_vdev_with_config+0x220>)
	rvdev->vdev = vdev;
   243a4:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   243a8:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   243ac:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   243ae:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   243b0:	4b76      	ldr	r3, [pc, #472]	; (2458c <rpmsg_init_vdev_with_config+0x224>)
   243b2:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   243b4:	4b76      	ldr	r3, [pc, #472]	; (24590 <rpmsg_init_vdev_with_config+0x228>)
   243b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   243ba:	4b76      	ldr	r3, [pc, #472]	; (24594 <rpmsg_init_vdev_with_config+0x22c>)
   243bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   243c0:	4b75      	ldr	r3, [pc, #468]	; (24598 <rpmsg_init_vdev_with_config+0x230>)
   243c2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   243c6:	4b75      	ldr	r3, [pc, #468]	; (2459c <rpmsg_init_vdev_with_config+0x234>)
   243c8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   243cc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   243d0:	f8d3 8018 	ldr.w	r8, [r3, #24]
	if (role == RPMSG_HOST) {
   243d4:	f1b8 0f00 	cmp.w	r8, #0
   243d8:	d16e      	bne.n	244b8 <rpmsg_init_vdev_with_config+0x150>
		if (config == NULL) {
   243da:	2f00      	cmp	r7, #0
   243dc:	d0ce      	beq.n	2437c <rpmsg_init_vdev_with_config+0x14>
		rvdev->config = *config;
   243de:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   243e2:	f104 0394 	add.w	r3, r4, #148	; 0x94
   243e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	vdev->features = rpmsg_virtio_get_features(rvdev);
   243ea:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   243ee:	6a03      	ldr	r3, [r0, #32]
   243f0:	689b      	ldr	r3, [r3, #8]
   243f2:	4798      	blx	r3
   243f4:	2300      	movs	r3, #0
   243f6:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   243f8:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   243fc:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   243fe:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
	if (role == RPMSG_HOST) {
   24402:	f1b8 0f00 	cmp.w	r8, #0
   24406:	d16d      	bne.n	244e4 <rpmsg_init_vdev_with_config+0x17c>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   24408:	7a3b      	ldrb	r3, [r7, #8]
   2440a:	2b00      	cmp	r3, #0
   2440c:	d068      	beq.n	244e0 <rpmsg_init_vdev_with_config+0x178>
   2440e:	f109 030c 	add.w	r3, r9, #12
   24412:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   24416:	f1b9 0f00 	cmp.w	r9, #0
   2441a:	d0af      	beq.n	2437c <rpmsg_init_vdev_with_config+0x14>
		if (!shpool->size || !rvdev->shpool->size)
   2441c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   24420:	2a00      	cmp	r2, #0
   24422:	f000 80ad 	beq.w	24580 <rpmsg_init_vdev_with_config+0x218>
   24426:	689b      	ldr	r3, [r3, #8]
   24428:	2b00      	cmp	r3, #0
   2442a:	f000 80a9 	beq.w	24580 <rpmsg_init_vdev_with_config+0x218>
		vq_names[0] = "rx_vq";
   2442e:	4b5c      	ldr	r3, [pc, #368]	; (245a0 <rpmsg_init_vdev_with_config+0x238>)
   24430:	9304      	str	r3, [sp, #16]
		vq_names[1] = "tx_vq";
   24432:	4b5c      	ldr	r3, [pc, #368]	; (245a4 <rpmsg_init_vdev_with_config+0x23c>)
   24434:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_rx_callback;
   24436:	4b5c      	ldr	r3, [pc, #368]	; (245a8 <rpmsg_init_vdev_with_config+0x240>)
   24438:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   2443a:	4b5c      	ldr	r3, [pc, #368]	; (245ac <rpmsg_init_vdev_with_config+0x244>)
   2443c:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   2443e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24440:	681b      	ldr	r3, [r3, #0]
   24442:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   24446:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24448:	699b      	ldr	r3, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   2444a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	metal_list_init(&rvdev->reclaimer);
   2444e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->next = list;
   24452:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   24456:	ab06      	add	r3, sp, #24
	rvdev->shbuf_io = shm_io;
   24458:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   2445c:	9300      	str	r3, [sp, #0]
   2445e:	2202      	movs	r2, #2
   24460:	2100      	movs	r1, #0
   24462:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   24466:	ab04      	add	r3, sp, #16
   24468:	f7ff fce0 	bl	23e2c <virtio_create_virtqueues>
	if (status != RPMSG_SUCCESS)
   2446c:	4607      	mov	r7, r0
   2446e:	2800      	cmp	r0, #0
   24470:	d185      	bne.n	2437e <rpmsg_init_vdev_with_config+0x16>
	virtqueue_disable_cb(rvdev->svq);
   24472:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   24476:	f00b fb8e 	bl	2fb96 <virtqueue_disable_cb>
		vq = vdev->vrings_info[i].vq;
   2447a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2447c:	681b      	ldr	r3, [r3, #0]
		vq->shm_io = shm_io;
   2447e:	629e      	str	r6, [r3, #40]	; 0x28
		vq = vdev->vrings_info[i].vq;
   24480:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24482:	699b      	ldr	r3, [r3, #24]
		vq->shm_io = shm_io;
   24484:	629e      	str	r6, [r3, #40]	; 0x28
	if (role == RPMSG_HOST) {
   24486:	f1b8 0f00 	cmp.w	r8, #0
   2448a:	d161      	bne.n	24550 <rpmsg_init_vdev_with_config+0x1e8>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   2448c:	46c2      	mov	sl, r8
		vqbuf.len = rvdev->config.r2h_buf_size;
   2448e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24492:	9309      	str	r3, [sp, #36]	; 0x24
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24494:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   24498:	895b      	ldrh	r3, [r3, #10]
   2449a:	4553      	cmp	r3, sl
   2449c:	d834      	bhi.n	24508 <rpmsg_init_vdev_with_config+0x1a0>
	if (rdev->support_ns) {
   2449e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   244a2:	e9c4 4400 	strd	r4, r4, [r4]
   244a6:	2b00      	cmp	r3, #0
   244a8:	d159      	bne.n	2455e <rpmsg_init_vdev_with_config+0x1f6>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   244aa:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   244ae:	2104      	movs	r1, #4
   244b0:	6a03      	ldr	r3, [r0, #32]
   244b2:	685b      	ldr	r3, [r3, #4]
   244b4:	4798      	blx	r3
}
   244b6:	e762      	b.n	2437e <rpmsg_init_vdev_with_config+0x16>
	if (role == RPMSG_REMOTE) {
   244b8:	f1b8 0f01 	cmp.w	r8, #1
   244bc:	d195      	bne.n	243ea <rpmsg_init_vdev_with_config+0x82>
		status = rpmsg_virtio_get_status(rvdev);
   244be:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	return rvdev->vdev->func->get_status(rvdev->vdev);
   244c2:	6a03      	ldr	r3, [r0, #32]
   244c4:	681b      	ldr	r3, [r3, #0]
   244c6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   244c8:	0642      	lsls	r2, r0, #25
   244ca:	d506      	bpl.n	244da <rpmsg_init_vdev_with_config+0x172>
			rpmsg_virtio_set_status(rvdev, 0);
   244cc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   244d0:	2100      	movs	r1, #0
   244d2:	6a03      	ldr	r3, [r0, #32]
   244d4:	685b      	ldr	r3, [r3, #4]
   244d6:	4798      	blx	r3
}
   244d8:	e7f1      	b.n	244be <rpmsg_init_vdev_with_config+0x156>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   244da:	0743      	lsls	r3, r0, #29
   244dc:	d5ef      	bpl.n	244be <rpmsg_init_vdev_with_config+0x156>
   244de:	e784      	b.n	243ea <rpmsg_init_vdev_with_config+0x82>
   244e0:	464b      	mov	r3, r9
   244e2:	e796      	b.n	24412 <rpmsg_init_vdev_with_config+0xaa>
	if (role == RPMSG_REMOTE) {
   244e4:	f1b8 0f01 	cmp.w	r8, #1
   244e8:	d1b1      	bne.n	2444e <rpmsg_init_vdev_with_config+0xe6>
		vq_names[0] = "tx_vq";
   244ea:	4b2e      	ldr	r3, [pc, #184]	; (245a4 <rpmsg_init_vdev_with_config+0x23c>)
   244ec:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
   244ee:	4b2c      	ldr	r3, [pc, #176]	; (245a0 <rpmsg_init_vdev_with_config+0x238>)
   244f0:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
   244f2:	4b2e      	ldr	r3, [pc, #184]	; (245ac <rpmsg_init_vdev_with_config+0x244>)
   244f4:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   244f6:	4b2c      	ldr	r3, [pc, #176]	; (245a8 <rpmsg_init_vdev_with_config+0x240>)
   244f8:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   244fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   244fc:	699b      	ldr	r3, [r3, #24]
   244fe:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   24502:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24504:	681b      	ldr	r3, [r3, #0]
   24506:	e7a0      	b.n	2444a <rpmsg_init_vdev_with_config+0xe2>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   24508:	4648      	mov	r0, r9
   2450a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   2450e:	f00b fd44 	bl	2ff9a <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   24512:	4605      	mov	r5, r0
   24514:	b1c8      	cbz	r0, 2454a <rpmsg_init_vdev_with_config+0x1e2>
   24516:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   24518:	9008      	str	r0, [sp, #32]
   2451a:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2451c:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   2451e:	2200      	movs	r2, #0
   24520:	4281      	cmp	r1, r0
   24522:	bf28      	it	cs
   24524:	f04f 31ff 	movcs.w	r1, #4294967295
   24528:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2452c:	4630      	mov	r0, r6
   2452e:	f00a fc75 	bl	2ee1c <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   24532:	9500      	str	r5, [sp, #0]
   24534:	2301      	movs	r3, #1
   24536:	2200      	movs	r2, #0
   24538:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2453c:	a908      	add	r1, sp, #32
   2453e:	f00b fa6b 	bl	2fa18 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   24542:	b918      	cbnz	r0, 2454c <rpmsg_init_vdev_with_config+0x1e4>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   24544:	f10a 0a01 	add.w	sl, sl, #1
   24548:	e7a4      	b.n	24494 <rpmsg_init_vdev_with_config+0x12c>
				return RPMSG_ERR_NO_BUFF;
   2454a:	4819      	ldr	r0, [pc, #100]	; (245b0 <rpmsg_init_vdev_with_config+0x248>)
   2454c:	4607      	mov	r7, r0
   2454e:	e716      	b.n	2437e <rpmsg_init_vdev_with_config+0x16>
	if (rdev->support_ns) {
   24550:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   24554:	e9c4 4400 	strd	r4, r4, [r4]
   24558:	2b00      	cmp	r3, #0
   2455a:	f43f af10 	beq.w	2437e <rpmsg_init_vdev_with_config+0x16>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   2455e:	2300      	movs	r3, #0
   24560:	9302      	str	r3, [sp, #8]
   24562:	4b14      	ldr	r3, [pc, #80]	; (245b4 <rpmsg_init_vdev_with_config+0x24c>)
   24564:	4620      	mov	r0, r4
   24566:	9301      	str	r3, [sp, #4]
   24568:	2335      	movs	r3, #53	; 0x35
   2456a:	4a13      	ldr	r2, [pc, #76]	; (245b8 <rpmsg_init_vdev_with_config+0x250>)
   2456c:	9300      	str	r3, [sp, #0]
   2456e:	f104 0108 	add.w	r1, r4, #8
   24572:	f7ff fd0f 	bl	23f94 <rpmsg_register_endpoint>
	if (role == RPMSG_HOST)
   24576:	f1b8 0f00 	cmp.w	r8, #0
   2457a:	f47f af00 	bne.w	2437e <rpmsg_init_vdev_with_config+0x16>
   2457e:	e794      	b.n	244aa <rpmsg_init_vdev_with_config+0x142>
			return RPMSG_ERR_NO_BUFF;
   24580:	4f0b      	ldr	r7, [pc, #44]	; (245b0 <rpmsg_init_vdev_with_config+0x248>)
   24582:	e6fc      	b.n	2437e <rpmsg_init_vdev_with_config+0x16>
   24584:	fffff82d 	.word	0xfffff82d
   24588:	00024299 	.word	0x00024299
   2458c:	0002fdfb 	.word	0x0002fdfb
   24590:	0002ff5b 	.word	0x0002ff5b
   24594:	0002ffb9 	.word	0x0002ffb9
   24598:	000240d5 	.word	0x000240d5
   2459c:	0002fe1b 	.word	0x0002fe1b
   245a0:	0003815a 	.word	0x0003815a
   245a4:	00038160 	.word	0x00038160
   245a8:	000241bd 	.word	0x000241bd
   245ac:	0002fe09 	.word	0x0002fe09
   245b0:	fffff82e 	.word	0xfffff82e
   245b4:	0002fe5d 	.word	0x0002fe5d
   245b8:	00038166 	.word	0x00038166

000245bc <rpmsg_init_vdev>:
{
   245bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   245be:	4605      	mov	r5, r0
   245c0:	460e      	mov	r6, r1
   245c2:	4617      	mov	r7, r2
   245c4:	b087      	sub	sp, #28
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   245c6:	4a07      	ldr	r2, [pc, #28]	; (245e4 <rpmsg_init_vdev+0x28>)
   245c8:	ac03      	add	r4, sp, #12
   245ca:	ca07      	ldmia	r2, {r0, r1, r2}
   245cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   245d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   245d2:	4631      	mov	r1, r6
   245d4:	9200      	str	r2, [sp, #0]
   245d6:	4628      	mov	r0, r5
   245d8:	463a      	mov	r2, r7
   245da:	9401      	str	r4, [sp, #4]
   245dc:	f7ff fec4 	bl	24368 <rpmsg_init_vdev_with_config>
}
   245e0:	b007      	add	sp, #28
   245e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   245e4:	000316e8 	.word	0x000316e8

000245e8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   245e8:	2203      	movs	r2, #3
   245ea:	4b11      	ldr	r3, [pc, #68]	; (24630 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   245ec:	4911      	ldr	r1, [pc, #68]	; (24634 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   245ee:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   245f0:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   245f2:	4a11      	ldr	r2, [pc, #68]	; (24638 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   245f4:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   245f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   245f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   245fc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   245fe:	2200      	movs	r2, #0
   24600:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   24602:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24604:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   24606:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   24608:	490c      	ldr	r1, [pc, #48]	; (2463c <_DoInit+0x54>)
   2460a:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   2460c:	2110      	movs	r1, #16
   2460e:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   24610:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   24612:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   24614:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   24616:	4a0a      	ldr	r2, [pc, #40]	; (24640 <_DoInit+0x58>)
   24618:	6812      	ldr	r2, [r2, #0]
   2461a:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   2461e:	4a09      	ldr	r2, [pc, #36]	; (24644 <_DoInit+0x5c>)
   24620:	6810      	ldr	r0, [r2, #0]
   24622:	8892      	ldrh	r2, [r2, #4]
   24624:	6018      	str	r0, [r3, #0]
   24626:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   24628:	2220      	movs	r2, #32
   2462a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   2462c:	4770      	bx	lr
   2462e:	bf00      	nop
   24630:	200219e0 	.word	0x200219e0
   24634:	00038169 	.word	0x00038169
   24638:	20022427 	.word	0x20022427
   2463c:	20022417 	.word	0x20022417
   24640:	00038172 	.word	0x00038172
   24644:	00038176 	.word	0x00038176

00024648 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2464c:	f04f 0b18 	mov.w	fp, #24
   24650:	4f20      	ldr	r7, [pc, #128]	; (246d4 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24652:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   24654:	fb0b 7200 	mla	r2, fp, r0, r7
   24658:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2465a:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2465c:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2465e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   24660:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   24662:	d831      	bhi.n	246c8 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   24664:	f8d2 a020 	ldr.w	sl, [r2, #32]
   24668:	ebaa 0905 	sub.w	r9, sl, r5
   2466c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   24670:	4294      	cmp	r4, r2
   24672:	d811      	bhi.n	24698 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24674:	2318      	movs	r3, #24
   24676:	fb06 3303 	mla	r3, r6, r3, r3
   2467a:	443b      	add	r3, r7
   2467c:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2467e:	4622      	mov	r2, r4
   24680:	4641      	mov	r1, r8
   24682:	4428      	add	r0, r5
   24684:	f00b ff83 	bl	3058e <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   24688:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2468a:	2318      	movs	r3, #24
      return 1;
   2468c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2468e:	fb03 7306 	mla	r3, r3, r6, r7
   24692:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   24694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   24698:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   2469a:	429c      	cmp	r4, r3
   2469c:	d818      	bhi.n	246d0 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2469e:	fb00 bb0b 	mla	fp, r0, fp, fp
   246a2:	44bb      	add	fp, r7
   246a4:	f8db 0004 	ldr.w	r0, [fp, #4]
   246a8:	464a      	mov	r2, r9
   246aa:	4428      	add	r0, r5
   246ac:	442c      	add	r4, r5
   246ae:	f00b ff6e 	bl	3058e <memcpy>
      if (NumBytes) {
   246b2:	ebb4 040a 	subs.w	r4, r4, sl
   246b6:	d0e8      	beq.n	2468a <SEGGER_RTT_WriteSkipNoLock+0x42>
   246b8:	4622      	mov	r2, r4
   246ba:	f8db 0004 	ldr.w	r0, [fp, #4]
   246be:	eb08 0109 	add.w	r1, r8, r9
   246c2:	f00b ff64 	bl	3058e <memcpy>
      return 1;
   246c6:	e7e0      	b.n	2468a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   246c8:	3b01      	subs	r3, #1
   246ca:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   246cc:	42a3      	cmp	r3, r4
   246ce:	d2d1      	bcs.n	24674 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   246d0:	2000      	movs	r0, #0
   246d2:	e7df      	b.n	24694 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   246d4:	200219e0 	.word	0x200219e0

000246d8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   246d8:	2218      	movs	r2, #24
   246da:	4b03      	ldr	r3, [pc, #12]	; (246e8 <SEGGER_RTT_HasDataUp+0x10>)
   246dc:	fb02 3300 	mla	r3, r2, r0, r3
   246e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   246e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   246e4:	1a80      	subs	r0, r0, r2
   246e6:	4770      	bx	lr
   246e8:	200219e0 	.word	0x200219e0

000246ec <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   246ec:	f04f 32ff 	mov.w	r2, #4294967295
   246f0:	f04f 33ff 	mov.w	r3, #4294967295
   246f4:	4801      	ldr	r0, [pc, #4]	; (246fc <zephyr_rtt_mutex_lock+0x10>)
   246f6:	f000 bd15 	b.w	25124 <z_impl_k_mutex_lock>
   246fa:	bf00      	nop
   246fc:	20008b68 	.word	0x20008b68

00024700 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   24700:	4801      	ldr	r0, [pc, #4]	; (24708 <zephyr_rtt_mutex_unlock+0x8>)
   24702:	f000 bddf 	b.w	252c4 <z_impl_k_mutex_unlock>
   24706:	bf00      	nop
   24708:	20008b68 	.word	0x20008b68

0002470c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2470c:	4b01      	ldr	r3, [pc, #4]	; (24714 <z_impl_z_errno+0x8>)
   2470e:	6898      	ldr	r0, [r3, #8]
}
   24710:	3064      	adds	r0, #100	; 0x64
   24712:	4770      	bx	lr
   24714:	20021a88 	.word	0x20021a88

00024718 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2471c:	b086      	sub	sp, #24
   2471e:	4604      	mov	r4, r0
   24720:	460e      	mov	r6, r1
   24722:	af00      	add	r7, sp, #0
	__asm__ volatile(
   24724:	f04f 0320 	mov.w	r3, #32
   24728:	f3ef 8811 	mrs	r8, BASEPRI
   2472c:	f383 8812 	msr	BASEPRI_MAX, r3
   24730:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   24734:	f002 fe80 	bl	27438 <z_impl_z_current_get>
   24738:	2c04      	cmp	r4, #4
   2473a:	bf98      	it	ls
   2473c:	4b34      	ldrls	r3, [pc, #208]	; (24810 <z_fatal_error+0xf8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2473e:	46e9      	mov	r9, sp
   24740:	b08a      	sub	sp, #40	; 0x28
   24742:	4605      	mov	r5, r0
   24744:	466a      	mov	r2, sp
   24746:	bf94      	ite	ls
   24748:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   2474c:	4b31      	ldrhi	r3, [pc, #196]	; (24814 <z_fatal_error+0xfc>)
   2474e:	61d3      	str	r3, [r2, #28]
   24750:	f240 3301 	movw	r3, #769	; 0x301
   24754:	f04f 0a00 	mov.w	sl, #0
   24758:	8493      	strh	r3, [r2, #36]	; 0x24
   2475a:	492f      	ldr	r1, [pc, #188]	; (24818 <z_fatal_error+0x100>)
   2475c:	4b2f      	ldr	r3, [pc, #188]	; (2481c <z_fatal_error+0x104>)
   2475e:	e9c2 1405 	strd	r1, r4, [r2, #20]
   24762:	f8c2 a020 	str.w	sl, [r2, #32]
   24766:	f842 3f10 	str.w	r3, [r2, #16]!
   2476a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   2476e:	4653      	mov	r3, sl
   24770:	482b      	ldr	r0, [pc, #172]	; (24820 <z_fatal_error+0x108>)
   24772:	f7ea f89d 	bl	e8b0 <z_impl_z_log_msg_static_create>
   24776:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24778:	b17e      	cbz	r6, 2479a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2477a:	69f3      	ldr	r3, [r6, #28]
   2477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   24780:	b15b      	cbz	r3, 2479a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
   24782:	4b28      	ldr	r3, [pc, #160]	; (24824 <z_fatal_error+0x10c>)
   24784:	617b      	str	r3, [r7, #20]
   24786:	2302      	movs	r3, #2
   24788:	613b      	str	r3, [r7, #16]
   2478a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2478e:	4653      	mov	r3, sl
   24790:	4823      	ldr	r0, [pc, #140]	; (24820 <z_fatal_error+0x108>)
   24792:	f107 0210 	add.w	r2, r7, #16
   24796:	f7ea f88b 	bl	e8b0 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2479a:	b12d      	cbz	r5, 247a8 <z_fatal_error+0x90>
   2479c:	4628      	mov	r0, r5
   2479e:	f00b fcec 	bl	3017a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   247a2:	b108      	cbz	r0, 247a8 <z_fatal_error+0x90>
   247a4:	7803      	ldrb	r3, [r0, #0]
   247a6:	b903      	cbnz	r3, 247aa <z_fatal_error+0x92>
		thread_name = "unknown";
   247a8:	481f      	ldr	r0, [pc, #124]	; (24828 <z_fatal_error+0x110>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   247aa:	46e9      	mov	r9, sp
   247ac:	b08a      	sub	sp, #40	; 0x28
   247ae:	466a      	mov	r2, sp
   247b0:	4b1e      	ldr	r3, [pc, #120]	; (2482c <z_fatal_error+0x114>)
   247b2:	61d0      	str	r0, [r2, #28]
   247b4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   247b8:	f240 3301 	movw	r3, #769	; 0x301
   247bc:	8413      	strh	r3, [r2, #32]
   247be:	4b1c      	ldr	r3, [pc, #112]	; (24830 <z_fatal_error+0x118>)
   247c0:	f842 3f10 	str.w	r3, [r2, #16]!
   247c4:	2300      	movs	r3, #0
   247c6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   247ca:	4815      	ldr	r0, [pc, #84]	; (24820 <z_fatal_error+0x108>)
   247cc:	f7ea f870 	bl	e8b0 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   247d0:	4631      	mov	r1, r6
   247d2:	46cd      	mov	sp, r9
   247d4:	4620      	mov	r0, r4
   247d6:	f7fa f969 	bl	1eaac <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   247da:	2c04      	cmp	r4, #4
   247dc:	d10c      	bne.n	247f8 <z_fatal_error+0xe0>
   247de:	4915      	ldr	r1, [pc, #84]	; (24834 <z_fatal_error+0x11c>)
   247e0:	2393      	movs	r3, #147	; 0x93
   247e2:	4a15      	ldr	r2, [pc, #84]	; (24838 <z_fatal_error+0x120>)
   247e4:	4815      	ldr	r0, [pc, #84]	; (2483c <z_fatal_error+0x124>)
   247e6:	f005 ff78 	bl	2a6da <assert_print>
   247ea:	4815      	ldr	r0, [pc, #84]	; (24840 <z_fatal_error+0x128>)
   247ec:	f005 ff75 	bl	2a6da <assert_print>
   247f0:	2193      	movs	r1, #147	; 0x93
   247f2:	4811      	ldr	r0, [pc, #68]	; (24838 <z_fatal_error+0x120>)
   247f4:	f005 ff6a 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   247f8:	f388 8811 	msr	BASEPRI, r8
   247fc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   24800:	4628      	mov	r0, r5
   24802:	f7ec fe23 	bl	1144c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24806:	3718      	adds	r7, #24
   24808:	46bd      	mov	sp, r7
   2480a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2480e:	bf00      	nop
   24810:	00032558 	.word	0x00032558
   24814:	0003817d 	.word	0x0003817d
   24818:	00038193 	.word	0x00038193
   2481c:	01000005 	.word	0x01000005
   24820:	000315c4 	.word	0x000315c4
   24824:	000381bb 	.word	0x000381bb
   24828:	0003818b 	.word	0x0003818b
   2482c:	000381dc 	.word	0x000381dc
   24830:	01000004 	.word	0x01000004
   24834:	00038216 	.word	0x00038216
   24838:	000381f4 	.word	0x000381f4
   2483c:	00032679 	.word	0x00032679
   24840:	00038233 	.word	0x00038233

00024844 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24844:	4b0f      	ldr	r3, [pc, #60]	; (24884 <z_sys_init_run_level+0x40>)
{
   24846:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24848:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2484c:	3001      	adds	r0, #1
   2484e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24852:	42a6      	cmp	r6, r4
   24854:	d800      	bhi.n	24858 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   24856:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24858:	e9d4 3500 	ldrd	r3, r5, [r4]
   2485c:	4628      	mov	r0, r5
   2485e:	4798      	blx	r3
		if (dev != NULL) {
   24860:	b16d      	cbz	r5, 2487e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   24862:	b138      	cbz	r0, 24874 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24864:	2800      	cmp	r0, #0
   24866:	bfb8      	it	lt
   24868:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
   2486a:	28ff      	cmp	r0, #255	; 0xff
   2486c:	bfa8      	it	ge
   2486e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   24870:	68eb      	ldr	r3, [r5, #12]
   24872:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24874:	68ea      	ldr	r2, [r5, #12]
   24876:	7853      	ldrb	r3, [r2, #1]
   24878:	f043 0301 	orr.w	r3, r3, #1
   2487c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2487e:	3408      	adds	r4, #8
   24880:	e7e7      	b.n	24852 <z_sys_init_run_level+0xe>
   24882:	bf00      	nop
   24884:	0003256c 	.word	0x0003256c

00024888 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   24888:	2201      	movs	r2, #1
{
   2488a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2488c:	4b09      	ldr	r3, [pc, #36]	; (248b4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2488e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   24890:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   24892:	f7ff ffd7 	bl	24844 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   24896:	f003 fed7 	bl	28648 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2489a:	2004      	movs	r0, #4
   2489c:	f7ff ffd2 	bl	24844 <z_sys_init_run_level>

	z_init_static_threads();
   248a0:	f000 fb66 	bl	24f70 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   248a4:	f7e7 f82c 	bl	b900 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   248a8:	4a03      	ldr	r2, [pc, #12]	; (248b8 <bg_thread_main+0x30>)
   248aa:	7b13      	ldrb	r3, [r2, #12]
   248ac:	f023 0301 	bic.w	r3, r3, #1
   248b0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   248b2:	bd08      	pop	{r3, pc}
   248b4:	20022827 	.word	0x20022827
   248b8:	2000a1e8 	.word	0x2000a1e8

000248bc <z_bss_zero>:
{
   248bc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   248be:	4803      	ldr	r0, [pc, #12]	; (248cc <z_bss_zero+0x10>)
   248c0:	4a03      	ldr	r2, [pc, #12]	; (248d0 <z_bss_zero+0x14>)
   248c2:	2100      	movs	r1, #0
   248c4:	1a12      	subs	r2, r2, r0
   248c6:	f00b fc23 	bl	30110 <z_early_memset>
}
   248ca:	bd08      	pop	{r3, pc}
   248cc:	20008e40 	.word	0x20008e40
   248d0:	20022828 	.word	0x20022828

000248d4 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   248d4:	2388      	movs	r3, #136	; 0x88
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   248d6:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   248d8:	4e13      	ldr	r6, [pc, #76]	; (24928 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   248da:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   248dc:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   248e0:	2300      	movs	r3, #0
{
   248e2:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   248e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   248e8:	220f      	movs	r2, #15
   248ea:	9301      	str	r3, [sp, #4]
   248ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248f0:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   248f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248f6:	4d0d      	ldr	r5, [pc, #52]	; (2492c <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   248f8:	490d      	ldr	r1, [pc, #52]	; (24930 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   248fa:	fb03 5500 	mla	r5, r3, r0, r5
{
   248fe:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   24900:	fb02 1100 	mla	r1, r2, r0, r1
   24904:	4b0b      	ldr	r3, [pc, #44]	; (24934 <z_init_cpu+0x60>)
   24906:	4630      	mov	r0, r6
   24908:	9500      	str	r5, [sp, #0]
   2490a:	f000 fa97 	bl	24e3c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2490e:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
   24910:	752c      	strb	r4, [r5, #20]
   24912:	f023 0304 	bic.w	r3, r3, #4
   24916:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   24918:	4b07      	ldr	r3, [pc, #28]	; (24938 <z_init_cpu+0x64>)
   2491a:	3401      	adds	r4, #1
   2491c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   24920:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   24922:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   24924:	b006      	add	sp, #24
   24926:	bd70      	pop	{r4, r5, r6, pc}
   24928:	2000a160 	.word	0x2000a160
   2492c:	20021a88 	.word	0x20021a88
   24930:	20033eb0 	.word	0x20033eb0
   24934:	000250c1 	.word	0x000250c1
   24938:	200336b0 	.word	0x200336b0

0002493c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2493c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   2493e:	2000      	movs	r0, #0
{
   24940:	b0a8      	sub	sp, #160	; 0xa0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   24942:	f7ff ff7f 	bl	24844 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   24946:	4b2f      	ldr	r3, [pc, #188]	; (24a04 <z_cstart+0xc8>)
	uint32_t msp =
   24948:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2494c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   24950:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24954:	2400      	movs	r4, #0
   24956:	23e0      	movs	r3, #224	; 0xe0
   24958:	4d2b      	ldr	r5, [pc, #172]	; (24a08 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   2495a:	4e2c      	ldr	r6, [pc, #176]	; (24a0c <z_cstart+0xd0>)
   2495c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   24960:	77ec      	strb	r4, [r5, #31]
   24962:	762c      	strb	r4, [r5, #24]
   24964:	766c      	strb	r4, [r5, #25]
   24966:	76ac      	strb	r4, [r5, #26]
   24968:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2496c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2496e:	4f28      	ldr	r7, [pc, #160]	; (24a10 <z_cstart+0xd4>)
   24970:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24974:	626b      	str	r3, [r5, #36]	; 0x24
   24976:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2497a:	f7ec fccb 	bl	11314 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2497e:	f7eb ffd9 	bl	10934 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24982:	f04f 33ff 	mov.w	r3, #4294967295
   24986:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24988:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2498a:	f7ec ff3f 	bl	1180c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2498e:	f7ec fd73 	bl	11478 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   24992:	f7e9 fd83 	bl	e49c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24996:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2499a:	ad06      	add	r5, sp, #24
   2499c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2499e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   249a2:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   249a6:	f003 fe31 	bl	2860c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   249aa:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   249ac:	f00b fba4 	bl	300f8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   249b0:	2001      	movs	r0, #1
   249b2:	f7ff ff47 	bl	24844 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   249b6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   249b8:	4d16      	ldr	r5, [pc, #88]	; (24a14 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   249ba:	f7ff ff43 	bl	24844 <z_sys_init_run_level>
	z_sched_init();
   249be:	f002 fbc1 	bl	27144 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   249c2:	4b15      	ldr	r3, [pc, #84]	; (24a18 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   249c4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   249c6:	9305      	str	r3, [sp, #20]
   249c8:	2301      	movs	r3, #1
   249ca:	4914      	ldr	r1, [pc, #80]	; (24a1c <z_cstart+0xe0>)
   249cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   249d0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   249d4:	4628      	mov	r0, r5
   249d6:	463b      	mov	r3, r7
   249d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   249dc:	9400      	str	r4, [sp, #0]
   249de:	f000 fa2d 	bl	24e3c <z_setup_new_thread>
   249e2:	4606      	mov	r6, r0
   249e4:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
   249e6:	4628      	mov	r0, r5
   249e8:	f022 0204 	bic.w	r2, r2, #4
   249ec:	736a      	strb	r2, [r5, #13]
   249ee:	f001 fd81 	bl	264f4 <z_ready_thread>
	z_init_cpu(0);
   249f2:	4620      	mov	r0, r4
   249f4:	f7ff ff6e 	bl	248d4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   249f8:	463a      	mov	r2, r7
   249fa:	4631      	mov	r1, r6
   249fc:	4628      	mov	r0, r5
   249fe:	f7ec f919 	bl	10c34 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   24a02:	bf00      	nop
   24a04:	200336b0 	.word	0x200336b0
   24a08:	e000ed00 	.word	0xe000ed00
   24a0c:	20021a88 	.word	0x20021a88
   24a10:	00024889 	.word	0x00024889
   24a14:	2000a1e8 	.word	0x2000a1e8
   24a18:	000382b2 	.word	0x000382b2
   24a1c:	20033ff0 	.word	0x20033ff0

00024a20 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   24a20:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24a22:	4c0d      	ldr	r4, [pc, #52]	; (24a58 <statics_init+0x38>)
   24a24:	4d0d      	ldr	r5, [pc, #52]	; (24a5c <statics_init+0x3c>)
   24a26:	42ac      	cmp	r4, r5
   24a28:	d913      	bls.n	24a52 <statics_init+0x32>
   24a2a:	490d      	ldr	r1, [pc, #52]	; (24a60 <statics_init+0x40>)
   24a2c:	2318      	movs	r3, #24
   24a2e:	4a0d      	ldr	r2, [pc, #52]	; (24a64 <statics_init+0x44>)
   24a30:	480d      	ldr	r0, [pc, #52]	; (24a68 <statics_init+0x48>)
   24a32:	f005 fe52 	bl	2a6da <assert_print>
   24a36:	480d      	ldr	r0, [pc, #52]	; (24a6c <statics_init+0x4c>)
   24a38:	f005 fe4f 	bl	2a6da <assert_print>
   24a3c:	2118      	movs	r1, #24
   24a3e:	4809      	ldr	r0, [pc, #36]	; (24a64 <statics_init+0x44>)
   24a40:	f005 fe44 	bl	2a6cc <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24a44:	4620      	mov	r0, r4
   24a46:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24a4a:	f00b fb65 	bl	30118 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24a4e:	3418      	adds	r4, #24
   24a50:	e7e9      	b.n	24a26 <statics_init+0x6>
   24a52:	d3f7      	bcc.n	24a44 <statics_init+0x24>
		}
	}
	return 0;
}
   24a54:	2000      	movs	r0, #0
   24a56:	bd38      	pop	{r3, r4, r5, pc}
   24a58:	20008afc 	.word	0x20008afc
   24a5c:	20008b2c 	.word	0x20008b2c
   24a60:	000382dc 	.word	0x000382dc
   24a64:	000382ba 	.word	0x000382ba
   24a68:	00032679 	.word	0x00032679
   24a6c:	00033719 	.word	0x00033719

00024a70 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a74:	b085      	sub	sp, #20
   24a76:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   24a7a:	4680      	mov	r8, r0
   24a7c:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a7e:	4648      	mov	r0, r9
   24a80:	4659      	mov	r1, fp
{
   24a82:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a84:	f00b fc70 	bl	30368 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a88:	f1bb 3fff 	cmp.w	fp, #4294967295
   24a8c:	bf08      	it	eq
   24a8e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a92:	4606      	mov	r6, r0
   24a94:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24a96:	bf04      	itt	eq
   24a98:	f04f 36ff 	moveq.w	r6, #4294967295
   24a9c:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24aa0:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   24aa4:	f04f 0320 	mov.w	r3, #32
   24aa8:	f3ef 8511 	mrs	r5, BASEPRI
   24aac:	f383 8812 	msr	BASEPRI_MAX, r3
   24ab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ab4:	4620      	mov	r0, r4
   24ab6:	f000 fadf 	bl	25078 <z_spin_lock_valid>
   24aba:	b960      	cbnz	r0, 24ad6 <k_heap_aligned_alloc+0x66>
   24abc:	2394      	movs	r3, #148	; 0x94
   24abe:	4a33      	ldr	r2, [pc, #204]	; (24b8c <k_heap_aligned_alloc+0x11c>)
   24ac0:	4933      	ldr	r1, [pc, #204]	; (24b90 <k_heap_aligned_alloc+0x120>)
   24ac2:	4834      	ldr	r0, [pc, #208]	; (24b94 <k_heap_aligned_alloc+0x124>)
   24ac4:	f005 fe09 	bl	2a6da <assert_print>
   24ac8:	4621      	mov	r1, r4
   24aca:	4833      	ldr	r0, [pc, #204]	; (24b98 <k_heap_aligned_alloc+0x128>)
   24acc:	f005 fe05 	bl	2a6da <assert_print>
   24ad0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ad2:	482e      	ldr	r0, [pc, #184]	; (24b8c <k_heap_aligned_alloc+0x11c>)
   24ad4:	e031      	b.n	24b3a <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   24ad6:	4620      	mov	r0, r4
   24ad8:	f000 faea 	bl	250b0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24adc:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24ae0:	b113      	cbz	r3, 24ae8 <k_heap_aligned_alloc+0x78>
   24ae2:	ea5b 0909 	orrs.w	r9, fp, r9
   24ae6:	d11d      	bne.n	24b24 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24ae8:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24aec:	4652      	mov	r2, sl
   24aee:	4640      	mov	r0, r8
   24af0:	9903      	ldr	r1, [sp, #12]
   24af2:	f7e7 ffa5 	bl	ca40 <sys_heap_aligned_alloc>
   24af6:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   24af8:	f003 f88c 	bl	27c14 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24afc:	f1b9 0f00 	cmp.w	r9, #0
   24b00:	d01d      	beq.n	24b3e <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b02:	4620      	mov	r0, r4
   24b04:	f000 fac6 	bl	25094 <z_spin_unlock_valid>
   24b08:	2800      	cmp	r0, #0
   24b0a:	d137      	bne.n	24b7c <k_heap_aligned_alloc+0x10c>
   24b0c:	23c2      	movs	r3, #194	; 0xc2
   24b0e:	4a1f      	ldr	r2, [pc, #124]	; (24b8c <k_heap_aligned_alloc+0x11c>)
   24b10:	4922      	ldr	r1, [pc, #136]	; (24b9c <k_heap_aligned_alloc+0x12c>)
   24b12:	4820      	ldr	r0, [pc, #128]	; (24b94 <k_heap_aligned_alloc+0x124>)
   24b14:	f005 fde1 	bl	2a6da <assert_print>
   24b18:	4621      	mov	r1, r4
   24b1a:	4821      	ldr	r0, [pc, #132]	; (24ba0 <k_heap_aligned_alloc+0x130>)
   24b1c:	f005 fddd 	bl	2a6da <assert_print>
   24b20:	21c2      	movs	r1, #194	; 0xc2
   24b22:	e7d6      	b.n	24ad2 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24b24:	491f      	ldr	r1, [pc, #124]	; (24ba4 <k_heap_aligned_alloc+0x134>)
   24b26:	234c      	movs	r3, #76	; 0x4c
   24b28:	4a1f      	ldr	r2, [pc, #124]	; (24ba8 <k_heap_aligned_alloc+0x138>)
   24b2a:	481a      	ldr	r0, [pc, #104]	; (24b94 <k_heap_aligned_alloc+0x124>)
   24b2c:	f005 fdd5 	bl	2a6da <assert_print>
   24b30:	481e      	ldr	r0, [pc, #120]	; (24bac <k_heap_aligned_alloc+0x13c>)
   24b32:	f005 fdd2 	bl	2a6da <assert_print>
   24b36:	214c      	movs	r1, #76	; 0x4c
   24b38:	481b      	ldr	r0, [pc, #108]	; (24ba8 <k_heap_aligned_alloc+0x138>)
   24b3a:	f005 fdc7 	bl	2a6cc <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   24b3e:	1a30      	subs	r0, r6, r0
   24b40:	eb67 0101 	sbc.w	r1, r7, r1
   24b44:	2801      	cmp	r0, #1
   24b46:	f171 0300 	sbcs.w	r3, r1, #0
   24b4a:	dbda      	blt.n	24b02 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24b4c:	e9cd 0100 	strd	r0, r1, [sp]
   24b50:	465a      	mov	r2, fp
   24b52:	4629      	mov	r1, r5
   24b54:	4620      	mov	r0, r4
   24b56:	f002 f827 	bl	26ba8 <z_pend_curr>
   24b5a:	f04f 0320 	mov.w	r3, #32
   24b5e:	f3ef 8511 	mrs	r5, BASEPRI
   24b62:	f383 8812 	msr	BASEPRI_MAX, r3
   24b66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b6a:	4620      	mov	r0, r4
   24b6c:	f000 fa84 	bl	25078 <z_spin_lock_valid>
   24b70:	2800      	cmp	r0, #0
   24b72:	d0a3      	beq.n	24abc <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   24b74:	4620      	mov	r0, r4
   24b76:	f000 fa9b 	bl	250b0 <z_spin_lock_set_owner>
	return k;
   24b7a:	e7b7      	b.n	24aec <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   24b7c:	f385 8811 	msr	BASEPRI, r5
   24b80:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24b84:	4648      	mov	r0, r9
   24b86:	b005      	add	sp, #20
   24b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b8c:	0003341a 	.word	0x0003341a
   24b90:	00033473 	.word	0x00033473
   24b94:	00032679 	.word	0x00032679
   24b98:	00033488 	.word	0x00033488
   24b9c:	00033447 	.word	0x00033447
   24ba0:	0003345e 	.word	0x0003345e
   24ba4:	000382f2 	.word	0x000382f2
   24ba8:	000382ba 	.word	0x000382ba
   24bac:	00036916 	.word	0x00036916

00024bb0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bb2:	4605      	mov	r5, r0
   24bb4:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24bb6:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   24bba:	f04f 0320 	mov.w	r3, #32
   24bbe:	f3ef 8711 	mrs	r7, BASEPRI
   24bc2:	f383 8812 	msr	BASEPRI_MAX, r3
   24bc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24bca:	4620      	mov	r0, r4
   24bcc:	f000 fa54 	bl	25078 <z_spin_lock_valid>
   24bd0:	b968      	cbnz	r0, 24bee <k_heap_free+0x3e>
   24bd2:	2394      	movs	r3, #148	; 0x94
   24bd4:	4a19      	ldr	r2, [pc, #100]	; (24c3c <k_heap_free+0x8c>)
   24bd6:	491a      	ldr	r1, [pc, #104]	; (24c40 <k_heap_free+0x90>)
   24bd8:	481a      	ldr	r0, [pc, #104]	; (24c44 <k_heap_free+0x94>)
   24bda:	f005 fd7e 	bl	2a6da <assert_print>
   24bde:	4621      	mov	r1, r4
   24be0:	4819      	ldr	r0, [pc, #100]	; (24c48 <k_heap_free+0x98>)
   24be2:	f005 fd7a 	bl	2a6da <assert_print>
   24be6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24be8:	4814      	ldr	r0, [pc, #80]	; (24c3c <k_heap_free+0x8c>)
   24bea:	f005 fd6f 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   24bee:	4620      	mov	r0, r4
   24bf0:	f000 fa5e 	bl	250b0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   24bf4:	4628      	mov	r0, r5
   24bf6:	4631      	mov	r1, r6
   24bf8:	f7e7 fedc 	bl	c9b4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24bfc:	f105 000c 	add.w	r0, r5, #12
   24c00:	f00b fb98 	bl	30334 <z_unpend_all>
   24c04:	b128      	cbz	r0, 24c12 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   24c06:	4639      	mov	r1, r7
   24c08:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   24c0e:	f001 bcfd 	b.w	2660c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c12:	4620      	mov	r0, r4
   24c14:	f000 fa3e 	bl	25094 <z_spin_unlock_valid>
   24c18:	b958      	cbnz	r0, 24c32 <k_heap_free+0x82>
   24c1a:	23c2      	movs	r3, #194	; 0xc2
   24c1c:	4a07      	ldr	r2, [pc, #28]	; (24c3c <k_heap_free+0x8c>)
   24c1e:	490b      	ldr	r1, [pc, #44]	; (24c4c <k_heap_free+0x9c>)
   24c20:	4808      	ldr	r0, [pc, #32]	; (24c44 <k_heap_free+0x94>)
   24c22:	f005 fd5a 	bl	2a6da <assert_print>
   24c26:	4621      	mov	r1, r4
   24c28:	4809      	ldr	r0, [pc, #36]	; (24c50 <k_heap_free+0xa0>)
   24c2a:	f005 fd56 	bl	2a6da <assert_print>
   24c2e:	21c2      	movs	r1, #194	; 0xc2
   24c30:	e7da      	b.n	24be8 <k_heap_free+0x38>
	__asm__ volatile(
   24c32:	f387 8811 	msr	BASEPRI, r7
   24c36:	f3bf 8f6f 	isb	sy
}
   24c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c3c:	0003341a 	.word	0x0003341a
   24c40:	00033473 	.word	0x00033473
   24c44:	00032679 	.word	0x00032679
   24c48:	00033488 	.word	0x00033488
   24c4c:	00033447 	.word	0x00033447
   24c50:	0003345e 	.word	0x0003345e

00024c54 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
   24c54:	2000      	movs	r0, #0
{
   24c56:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c58:	4c0c      	ldr	r4, [pc, #48]	; (24c8c <init_mem_slab_module+0x38>)
   24c5a:	4d0d      	ldr	r5, [pc, #52]	; (24c90 <init_mem_slab_module+0x3c>)
   24c5c:	42ac      	cmp	r4, r5
   24c5e:	d913      	bls.n	24c88 <init_mem_slab_module+0x34>
   24c60:	490c      	ldr	r1, [pc, #48]	; (24c94 <init_mem_slab_module+0x40>)
   24c62:	233d      	movs	r3, #61	; 0x3d
   24c64:	4a0c      	ldr	r2, [pc, #48]	; (24c98 <init_mem_slab_module+0x44>)
   24c66:	480d      	ldr	r0, [pc, #52]	; (24c9c <init_mem_slab_module+0x48>)
   24c68:	f005 fd37 	bl	2a6da <assert_print>
   24c6c:	480c      	ldr	r0, [pc, #48]	; (24ca0 <init_mem_slab_module+0x4c>)
   24c6e:	f005 fd34 	bl	2a6da <assert_print>
   24c72:	213d      	movs	r1, #61	; 0x3d
   24c74:	4808      	ldr	r0, [pc, #32]	; (24c98 <init_mem_slab_module+0x44>)
   24c76:	f005 fd29 	bl	2a6cc <assert_post_action>
		rc = create_free_list(slab);
   24c7a:	4620      	mov	r0, r4
   24c7c:	f00b fa5e 	bl	3013c <create_free_list>
		if (rc < 0) {
   24c80:	2800      	cmp	r0, #0
   24c82:	db02      	blt.n	24c8a <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c84:	3420      	adds	r4, #32
   24c86:	e7e9      	b.n	24c5c <init_mem_slab_module+0x8>
   24c88:	d3f7      	bcc.n	24c7a <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   24c8a:	bd38      	pop	{r3, r4, r5, pc}
   24c8c:	20008a5c 	.word	0x20008a5c
   24c90:	20008afc 	.word	0x20008afc
   24c94:	0003835d 	.word	0x0003835d
   24c98:	00038338 	.word	0x00038338
   24c9c:	00032679 	.word	0x00032679
   24ca0:	00033719 	.word	0x00033719

00024ca4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24ca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24ca8:	4604      	mov	r4, r0
   24caa:	460e      	mov	r6, r1
   24cac:	4690      	mov	r8, r2
   24cae:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24cb0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24cb4:	f04f 0320 	mov.w	r3, #32
   24cb8:	f3ef 8911 	mrs	r9, BASEPRI
   24cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   24cc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cc4:	4628      	mov	r0, r5
   24cc6:	f000 f9d7 	bl	25078 <z_spin_lock_valid>
   24cca:	b968      	cbnz	r0, 24ce8 <k_mem_slab_alloc+0x44>
   24ccc:	2394      	movs	r3, #148	; 0x94
   24cce:	4a23      	ldr	r2, [pc, #140]	; (24d5c <k_mem_slab_alloc+0xb8>)
   24cd0:	4923      	ldr	r1, [pc, #140]	; (24d60 <k_mem_slab_alloc+0xbc>)
   24cd2:	4824      	ldr	r0, [pc, #144]	; (24d64 <k_mem_slab_alloc+0xc0>)
   24cd4:	f005 fd01 	bl	2a6da <assert_print>
   24cd8:	4629      	mov	r1, r5
   24cda:	4823      	ldr	r0, [pc, #140]	; (24d68 <k_mem_slab_alloc+0xc4>)
   24cdc:	f005 fcfd 	bl	2a6da <assert_print>
   24ce0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ce2:	481e      	ldr	r0, [pc, #120]	; (24d5c <k_mem_slab_alloc+0xb8>)
   24ce4:	f005 fcf2 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   24ce8:	4628      	mov	r0, r5
   24cea:	f000 f9e1 	bl	250b0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24cee:	69a3      	ldr	r3, [r4, #24]
   24cf0:	b1b3      	cbz	r3, 24d20 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   24cf2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   24cf4:	681b      	ldr	r3, [r3, #0]
   24cf6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   24cf8:	69e3      	ldr	r3, [r4, #28]
   24cfa:	3301      	adds	r3, #1
   24cfc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24cfe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d00:	4628      	mov	r0, r5
   24d02:	f000 f9c7 	bl	25094 <z_spin_unlock_valid>
   24d06:	bb18      	cbnz	r0, 24d50 <k_mem_slab_alloc+0xac>
   24d08:	23c2      	movs	r3, #194	; 0xc2
   24d0a:	4a14      	ldr	r2, [pc, #80]	; (24d5c <k_mem_slab_alloc+0xb8>)
   24d0c:	4917      	ldr	r1, [pc, #92]	; (24d6c <k_mem_slab_alloc+0xc8>)
   24d0e:	4815      	ldr	r0, [pc, #84]	; (24d64 <k_mem_slab_alloc+0xc0>)
   24d10:	f005 fce3 	bl	2a6da <assert_print>
   24d14:	4629      	mov	r1, r5
   24d16:	4816      	ldr	r0, [pc, #88]	; (24d70 <k_mem_slab_alloc+0xcc>)
   24d18:	f005 fcdf 	bl	2a6da <assert_print>
   24d1c:	21c2      	movs	r1, #194	; 0xc2
   24d1e:	e7e0      	b.n	24ce2 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24d20:	ea58 0207 	orrs.w	r2, r8, r7
   24d24:	d103      	bne.n	24d2e <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
		result = -ENOMEM;
   24d26:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   24d2a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   24d2c:	e7e8      	b.n	24d00 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24d2e:	4622      	mov	r2, r4
   24d30:	4649      	mov	r1, r9
   24d32:	4628      	mov	r0, r5
   24d34:	e9cd 8700 	strd	r8, r7, [sp]
   24d38:	f001 ff36 	bl	26ba8 <z_pend_curr>
		if (result == 0) {
   24d3c:	4604      	mov	r4, r0
   24d3e:	b918      	cbnz	r0, 24d48 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   24d40:	4b0c      	ldr	r3, [pc, #48]	; (24d74 <k_mem_slab_alloc+0xd0>)
   24d42:	689b      	ldr	r3, [r3, #8]
   24d44:	695b      	ldr	r3, [r3, #20]
   24d46:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   24d48:	4620      	mov	r0, r4
   24d4a:	b003      	add	sp, #12
   24d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   24d50:	f389 8811 	msr	BASEPRI, r9
   24d54:	f3bf 8f6f 	isb	sy
	return result;
   24d58:	e7f6      	b.n	24d48 <k_mem_slab_alloc+0xa4>
   24d5a:	bf00      	nop
   24d5c:	0003341a 	.word	0x0003341a
   24d60:	00033473 	.word	0x00033473
   24d64:	00032679 	.word	0x00032679
   24d68:	00033488 	.word	0x00033488
   24d6c:	00033447 	.word	0x00033447
   24d70:	0003345e 	.word	0x0003345e
   24d74:	20021a88 	.word	0x20021a88

00024d78 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d7c:	4604      	mov	r4, r0
   24d7e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24d80:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24d84:	f04f 0320 	mov.w	r3, #32
   24d88:	f3ef 8711 	mrs	r7, BASEPRI
   24d8c:	f383 8812 	msr	BASEPRI_MAX, r3
   24d90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d94:	4628      	mov	r0, r5
   24d96:	f000 f96f 	bl	25078 <z_spin_lock_valid>
   24d9a:	b968      	cbnz	r0, 24db8 <k_mem_slab_free+0x40>
   24d9c:	2394      	movs	r3, #148	; 0x94
   24d9e:	4a21      	ldr	r2, [pc, #132]	; (24e24 <k_mem_slab_free+0xac>)
   24da0:	4921      	ldr	r1, [pc, #132]	; (24e28 <k_mem_slab_free+0xb0>)
   24da2:	4822      	ldr	r0, [pc, #136]	; (24e2c <k_mem_slab_free+0xb4>)
   24da4:	f005 fc99 	bl	2a6da <assert_print>
   24da8:	4629      	mov	r1, r5
   24daa:	4821      	ldr	r0, [pc, #132]	; (24e30 <k_mem_slab_free+0xb8>)
   24dac:	f005 fc95 	bl	2a6da <assert_print>
   24db0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24db2:	481c      	ldr	r0, [pc, #112]	; (24e24 <k_mem_slab_free+0xac>)
   24db4:	f005 fc8a 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   24db8:	4628      	mov	r0, r5
   24dba:	f000 f979 	bl	250b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24dbe:	f8d4 8018 	ldr.w	r8, [r4, #24]
   24dc2:	f1b8 0f00 	cmp.w	r8, #0
   24dc6:	d10f      	bne.n	24de8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24dc8:	4620      	mov	r0, r4
   24dca:	f002 f96b 	bl	270a4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24dce:	b158      	cbz	r0, 24de8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24dd0:	6832      	ldr	r2, [r6, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   24dd2:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24dd6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   24dd8:	f001 fb8c 	bl	264f4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24ddc:	4639      	mov	r1, r7
   24dde:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   24de4:	f001 bc12 	b.w	2660c <z_reschedule>
	**(char ***) mem = slab->free_list;
   24de8:	6833      	ldr	r3, [r6, #0]
   24dea:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dec:	4628      	mov	r0, r5
   24dee:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24df0:	6833      	ldr	r3, [r6, #0]
   24df2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   24df4:	69e3      	ldr	r3, [r4, #28]
   24df6:	3b01      	subs	r3, #1
   24df8:	61e3      	str	r3, [r4, #28]
   24dfa:	f000 f94b 	bl	25094 <z_spin_unlock_valid>
   24dfe:	b958      	cbnz	r0, 24e18 <k_mem_slab_free+0xa0>
   24e00:	23c2      	movs	r3, #194	; 0xc2
   24e02:	4a08      	ldr	r2, [pc, #32]	; (24e24 <k_mem_slab_free+0xac>)
   24e04:	490b      	ldr	r1, [pc, #44]	; (24e34 <k_mem_slab_free+0xbc>)
   24e06:	4809      	ldr	r0, [pc, #36]	; (24e2c <k_mem_slab_free+0xb4>)
   24e08:	f005 fc67 	bl	2a6da <assert_print>
   24e0c:	4629      	mov	r1, r5
   24e0e:	480a      	ldr	r0, [pc, #40]	; (24e38 <k_mem_slab_free+0xc0>)
   24e10:	f005 fc63 	bl	2a6da <assert_print>
   24e14:	21c2      	movs	r1, #194	; 0xc2
   24e16:	e7cc      	b.n	24db2 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   24e18:	f387 8811 	msr	BASEPRI, r7
   24e1c:	f3bf 8f6f 	isb	sy
}
   24e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e24:	0003341a 	.word	0x0003341a
   24e28:	00033473 	.word	0x00033473
   24e2c:	00032679 	.word	0x00032679
   24e30:	00033488 	.word	0x00033488
   24e34:	00033447 	.word	0x00033447
   24e38:	0003345e 	.word	0x0003345e

00024e3c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   24e3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   24e40:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   24e42:	2e0f      	cmp	r6, #15
   24e44:	d12a      	bne.n	24e9c <z_setup_new_thread+0x60>
   24e46:	4821      	ldr	r0, [pc, #132]	; (24ecc <z_setup_new_thread+0x90>)
   24e48:	4283      	cmp	r3, r0
   24e4a:	d12b      	bne.n	24ea4 <z_setup_new_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24e4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24e50:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   24e54:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   24e56:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   24e58:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24e5a:	2004      	movs	r0, #4
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24e5c:	3207      	adds	r2, #7
   24e5e:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   24e62:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68

	thread_base->prio = priority;
   24e66:	73a6      	strb	r6, [r4, #14]
	stack_ptr = (char *)stack + stack_obj_size;
   24e68:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->thread_state = (uint8_t)initial_state;
   24e6c:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   24e6e:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->pended_on = NULL;
   24e72:	60a5      	str	r5, [r4, #8]

	thread_base->sched_locked = 0U;
   24e74:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   24e76:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24e78:	9202      	str	r2, [sp, #8]
   24e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24e7c:	4620      	mov	r0, r4
   24e7e:	9201      	str	r2, [sp, #4]
   24e80:	9a08      	ldr	r2, [sp, #32]
   24e82:	9200      	str	r2, [sp, #0]
   24e84:	4632      	mov	r2, r6
   24e86:	f7eb feb5 	bl	10bf4 <arch_new_thread>
	if (!_current) {
   24e8a:	4b11      	ldr	r3, [pc, #68]	; (24ed0 <z_setup_new_thread+0x94>)
	new_thread->init_data = NULL;
   24e8c:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   24e8e:	689b      	ldr	r3, [r3, #8]
   24e90:	b103      	cbz	r3, 24e94 <z_setup_new_thread+0x58>
	new_thread->resource_pool = _current->resource_pool;
   24e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   24e94:	4630      	mov	r0, r6
   24e96:	6763      	str	r3, [r4, #116]	; 0x74
   24e98:	b004      	add	sp, #16
   24e9a:	bd70      	pop	{r4, r5, r6, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24e9c:	f106 0010 	add.w	r0, r6, #16
   24ea0:	281e      	cmp	r0, #30
   24ea2:	d9d3      	bls.n	24e4c <z_setup_new_thread+0x10>
   24ea4:	f44f 7306 	mov.w	r3, #536	; 0x218
   24ea8:	4a0a      	ldr	r2, [pc, #40]	; (24ed4 <z_setup_new_thread+0x98>)
   24eaa:	490b      	ldr	r1, [pc, #44]	; (24ed8 <z_setup_new_thread+0x9c>)
   24eac:	480b      	ldr	r0, [pc, #44]	; (24edc <z_setup_new_thread+0xa0>)
   24eae:	f005 fc14 	bl	2a6da <assert_print>
   24eb2:	4631      	mov	r1, r6
   24eb4:	480a      	ldr	r0, [pc, #40]	; (24ee0 <z_setup_new_thread+0xa4>)
   24eb6:	f06f 030f 	mvn.w	r3, #15
   24eba:	220e      	movs	r2, #14
   24ebc:	f005 fc0d 	bl	2a6da <assert_print>
   24ec0:	f44f 7106 	mov.w	r1, #536	; 0x218
   24ec4:	4803      	ldr	r0, [pc, #12]	; (24ed4 <z_setup_new_thread+0x98>)
   24ec6:	f005 fc01 	bl	2a6cc <assert_post_action>
   24eca:	bf00      	nop
   24ecc:	000250c1 	.word	0x000250c1
   24ed0:	20021a88 	.word	0x20021a88
   24ed4:	0003837a 	.word	0x0003837a
   24ed8:	0003839d 	.word	0x0003839d
   24edc:	00032679 	.word	0x00032679
   24ee0:	0003841d 	.word	0x0003841d

00024ee4 <z_impl_k_thread_create>:
{
   24ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ee6:	b087      	sub	sp, #28
   24ee8:	4604      	mov	r4, r0
   24eea:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   24eee:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   24ef2:	b175      	cbz	r5, 24f12 <z_impl_k_thread_create+0x2e>
   24ef4:	4919      	ldr	r1, [pc, #100]	; (24f5c <z_impl_k_thread_create+0x78>)
   24ef6:	f240 2387 	movw	r3, #647	; 0x287
   24efa:	4a19      	ldr	r2, [pc, #100]	; (24f60 <z_impl_k_thread_create+0x7c>)
   24efc:	4819      	ldr	r0, [pc, #100]	; (24f64 <z_impl_k_thread_create+0x80>)
   24efe:	f005 fbec 	bl	2a6da <assert_print>
   24f02:	4819      	ldr	r0, [pc, #100]	; (24f68 <z_impl_k_thread_create+0x84>)
   24f04:	f005 fbe9 	bl	2a6da <assert_print>
   24f08:	f240 2187 	movw	r1, #647	; 0x287
   24f0c:	4814      	ldr	r0, [pc, #80]	; (24f60 <z_impl_k_thread_create+0x7c>)
   24f0e:	f005 fbdd 	bl	2a6cc <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24f12:	9505      	str	r5, [sp, #20]
   24f14:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24f16:	9504      	str	r5, [sp, #16]
   24f18:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24f1a:	9503      	str	r5, [sp, #12]
   24f1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24f1e:	9502      	str	r5, [sp, #8]
   24f20:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   24f22:	9501      	str	r5, [sp, #4]
   24f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24f26:	9500      	str	r5, [sp, #0]
   24f28:	f7ff ff88 	bl	24e3c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24f2c:	f1b6 3fff 	cmp.w	r6, #4294967295
   24f30:	bf08      	it	eq
   24f32:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   24f36:	d005      	beq.n	24f44 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24f38:	ea56 0307 	orrs.w	r3, r6, r7
   24f3c:	d105      	bne.n	24f4a <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   24f3e:	4620      	mov	r0, r4
   24f40:	f001 fba6 	bl	26690 <z_sched_start>
}
   24f44:	4620      	mov	r0, r4
   24f46:	b007      	add	sp, #28
   24f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24f4a:	463a      	mov	r2, r7
   24f4c:	4633      	mov	r3, r6
   24f4e:	4907      	ldr	r1, [pc, #28]	; (24f6c <z_impl_k_thread_create+0x88>)
   24f50:	f104 0018 	add.w	r0, r4, #24
   24f54:	f002 fc16 	bl	27784 <z_add_timeout>
   24f58:	e7f4      	b.n	24f44 <z_impl_k_thread_create+0x60>
   24f5a:	bf00      	nop
   24f5c:	0003844e 	.word	0x0003844e
   24f60:	0003837a 	.word	0x0003837a
   24f64:	00032679 	.word	0x00032679
   24f68:	00038460 	.word	0x00038460
   24f6c:	00026f5d 	.word	0x00026f5d

00024f70 <z_init_static_threads>:
{
   24f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f74:	4c39      	ldr	r4, [pc, #228]	; (2505c <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   24f76:	4d3a      	ldr	r5, [pc, #232]	; (25060 <z_init_static_threads+0xf0>)
{
   24f78:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   24f7a:	42ac      	cmp	r4, r5
   24f7c:	4626      	mov	r6, r4
   24f7e:	d92a      	bls.n	24fd6 <z_init_static_threads+0x66>
   24f80:	4938      	ldr	r1, [pc, #224]	; (25064 <z_init_static_threads+0xf4>)
   24f82:	f240 23ee 	movw	r3, #750	; 0x2ee
   24f86:	4a38      	ldr	r2, [pc, #224]	; (25068 <z_init_static_threads+0xf8>)
   24f88:	4838      	ldr	r0, [pc, #224]	; (2506c <z_init_static_threads+0xfc>)
   24f8a:	f005 fba6 	bl	2a6da <assert_print>
   24f8e:	4838      	ldr	r0, [pc, #224]	; (25070 <z_init_static_threads+0x100>)
   24f90:	f005 fba3 	bl	2a6da <assert_print>
   24f94:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   24f98:	4833      	ldr	r0, [pc, #204]	; (25068 <z_init_static_threads+0xf8>)
   24f9a:	f005 fb97 	bl	2a6cc <assert_post_action>
		z_setup_new_thread(
   24f9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24fa2:	9305      	str	r3, [sp, #20]
   24fa4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24fa8:	9304      	str	r3, [sp, #16]
   24faa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   24fae:	9303      	str	r3, [sp, #12]
   24fb0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24fb4:	9302      	str	r3, [sp, #8]
   24fb6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   24fba:	9301      	str	r3, [sp, #4]
   24fbc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24fc0:	9300      	str	r3, [sp, #0]
   24fc2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24fc6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   24fca:	f7ff ff37 	bl	24e3c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   24fce:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24fd2:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24fd4:	e7d1      	b.n	24f7a <z_init_static_threads+0xa>
   24fd6:	42ae      	cmp	r6, r5
   24fd8:	f104 0430 	add.w	r4, r4, #48	; 0x30
   24fdc:	d3df      	bcc.n	24f9e <z_init_static_threads+0x2e>
	k_sched_lock();
   24fde:	f001 fba9 	bl	26734 <k_sched_lock>
   24fe2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   24fe6:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   24fea:	4c1c      	ldr	r4, [pc, #112]	; (2505c <z_init_static_threads+0xec>)
   24fec:	f8df 9084 	ldr.w	r9, [pc, #132]	; 25074 <z_init_static_threads+0x104>
   24ff0:	42ac      	cmp	r4, r5
   24ff2:	d92c      	bls.n	2504e <z_init_static_threads+0xde>
   24ff4:	491b      	ldr	r1, [pc, #108]	; (25064 <z_init_static_threads+0xf4>)
   24ff6:	f240 330d 	movw	r3, #781	; 0x30d
   24ffa:	4a1b      	ldr	r2, [pc, #108]	; (25068 <z_init_static_threads+0xf8>)
   24ffc:	481b      	ldr	r0, [pc, #108]	; (2506c <z_init_static_threads+0xfc>)
   24ffe:	f005 fb6c 	bl	2a6da <assert_print>
   25002:	481b      	ldr	r0, [pc, #108]	; (25070 <z_init_static_threads+0x100>)
   25004:	f005 fb69 	bl	2a6da <assert_print>
   25008:	f240 310d 	movw	r1, #781	; 0x30d
   2500c:	e7c4      	b.n	24f98 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2500e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25010:	1c5a      	adds	r2, r3, #1
   25012:	d00d      	beq.n	25030 <z_init_static_threads+0xc0>
   25014:	2100      	movs	r1, #0
   25016:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   25018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2501c:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25020:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   25024:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25028:	d104      	bne.n	25034 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   2502a:	4640      	mov	r0, r8
   2502c:	f001 fb30 	bl	26690 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   25030:	3430      	adds	r4, #48	; 0x30
   25032:	e7dd      	b.n	24ff0 <z_init_static_threads+0x80>
   25034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25038:	2300      	movs	r3, #0
   2503a:	f7e3 ff59 	bl	8ef0 <__aeabi_uldivmod>
   2503e:	4602      	mov	r2, r0
   25040:	460b      	mov	r3, r1
   25042:	f108 0018 	add.w	r0, r8, #24
   25046:	4649      	mov	r1, r9
   25048:	f002 fb9c 	bl	27784 <z_add_timeout>
   2504c:	e7f0      	b.n	25030 <z_init_static_threads+0xc0>
   2504e:	d3de      	bcc.n	2500e <z_init_static_threads+0x9e>
}
   25050:	b007      	add	sp, #28
   25052:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   25056:	f001 bbd9 	b.w	2680c <k_sched_unlock>
   2505a:	bf00      	nop
   2505c:	0003129c 	.word	0x0003129c
   25060:	000313ec 	.word	0x000313ec
   25064:	00038485 	.word	0x00038485
   25068:	0003837a 	.word	0x0003837a
   2506c:	00032679 	.word	0x00032679
   25070:	00033719 	.word	0x00033719
   25074:	00026f5d 	.word	0x00026f5d

00025078 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   25078:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2507a:	b138      	cbz	r0, 2508c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2507c:	4b04      	ldr	r3, [pc, #16]	; (25090 <z_spin_lock_valid+0x18>)
   2507e:	f000 0003 	and.w	r0, r0, #3
   25082:	7d1b      	ldrb	r3, [r3, #20]
   25084:	1ac0      	subs	r0, r0, r3
   25086:	bf18      	it	ne
   25088:	2001      	movne	r0, #1
   2508a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2508c:	2001      	movs	r0, #1
}
   2508e:	4770      	bx	lr
   25090:	20021a88 	.word	0x20021a88

00025094 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25094:	4a05      	ldr	r2, [pc, #20]	; (250ac <z_spin_unlock_valid+0x18>)
{
   25096:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   25098:	7d11      	ldrb	r1, [r2, #20]
   2509a:	6892      	ldr	r2, [r2, #8]
   2509c:	430a      	orrs	r2, r1
   2509e:	6801      	ldr	r1, [r0, #0]
   250a0:	2000      	movs	r0, #0
   250a2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   250a4:	bf04      	itt	eq
   250a6:	6018      	streq	r0, [r3, #0]
	return true;
   250a8:	2001      	moveq	r0, #1
}
   250aa:	4770      	bx	lr
   250ac:	20021a88 	.word	0x20021a88

000250b0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   250b0:	4b02      	ldr	r3, [pc, #8]	; (250bc <z_spin_lock_set_owner+0xc>)
   250b2:	7d1a      	ldrb	r2, [r3, #20]
   250b4:	689b      	ldr	r3, [r3, #8]
   250b6:	4313      	orrs	r3, r2
   250b8:	6003      	str	r3, [r0, #0]
}
   250ba:	4770      	bx	lr
   250bc:	20021a88 	.word	0x20021a88

000250c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   250c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   250c2:	4c13      	ldr	r4, [pc, #76]	; (25110 <idle+0x50>)
   250c4:	68a3      	ldr	r3, [r4, #8]
   250c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   250ca:	2b00      	cmp	r3, #0
   250cc:	db10      	blt.n	250f0 <idle+0x30>
   250ce:	4d11      	ldr	r5, [pc, #68]	; (25114 <idle+0x54>)
	__asm__ volatile(
   250d0:	f04f 0220 	mov.w	r2, #32
   250d4:	f3ef 8311 	mrs	r3, BASEPRI
   250d8:	f382 8812 	msr	BASEPRI_MAX, r2
   250dc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   250e0:	f002 fc62 	bl	279a8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250e4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   250e6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   250e8:	b963      	cbnz	r3, 25104 <idle+0x44>
	arch_cpu_idle();
   250ea:	f7eb fc29 	bl	10940 <arch_cpu_idle>
}
   250ee:	e7ef      	b.n	250d0 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   250f0:	4909      	ldr	r1, [pc, #36]	; (25118 <idle+0x58>)
   250f2:	480a      	ldr	r0, [pc, #40]	; (2511c <idle+0x5c>)
   250f4:	2327      	movs	r3, #39	; 0x27
   250f6:	4a0a      	ldr	r2, [pc, #40]	; (25120 <idle+0x60>)
   250f8:	f005 faef 	bl	2a6da <assert_print>
   250fc:	2127      	movs	r1, #39	; 0x27
   250fe:	4808      	ldr	r0, [pc, #32]	; (25120 <idle+0x60>)
   25100:	f005 fae4 	bl	2a6cc <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   25104:	f7eb f954 	bl	103b0 <pm_system_suspend>
   25108:	2800      	cmp	r0, #0
   2510a:	d1e1      	bne.n	250d0 <idle+0x10>
   2510c:	e7ed      	b.n	250ea <idle+0x2a>
   2510e:	bf00      	nop
   25110:	20021a88 	.word	0x20021a88
   25114:	20022827 	.word	0x20022827
   25118:	000384d3 	.word	0x000384d3
   2511c:	00032679 	.word	0x00032679
   25120:	000384b2 	.word	0x000384b2

00025124 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   25124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25128:	4604      	mov	r4, r0
   2512a:	4617      	mov	r7, r2
   2512c:	461e      	mov	r6, r3
   2512e:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   25132:	b165      	cbz	r5, 2514e <z_impl_k_mutex_lock+0x2a>
   25134:	4958      	ldr	r1, [pc, #352]	; (25298 <z_impl_k_mutex_lock+0x174>)
   25136:	2365      	movs	r3, #101	; 0x65
   25138:	4a58      	ldr	r2, [pc, #352]	; (2529c <z_impl_k_mutex_lock+0x178>)
   2513a:	4859      	ldr	r0, [pc, #356]	; (252a0 <z_impl_k_mutex_lock+0x17c>)
   2513c:	f005 facd 	bl	2a6da <assert_print>
   25140:	4858      	ldr	r0, [pc, #352]	; (252a4 <z_impl_k_mutex_lock+0x180>)
   25142:	f005 faca 	bl	2a6da <assert_print>
   25146:	2165      	movs	r1, #101	; 0x65
   25148:	4854      	ldr	r0, [pc, #336]	; (2529c <z_impl_k_mutex_lock+0x178>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2514a:	f005 fabf 	bl	2a6cc <assert_post_action>
   2514e:	f04f 0320 	mov.w	r3, #32
   25152:	f3ef 8811 	mrs	r8, BASEPRI
   25156:	f383 8812 	msr	BASEPRI_MAX, r3
   2515a:	f3bf 8f6f 	isb	sy
   2515e:	4852      	ldr	r0, [pc, #328]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25160:	f7ff ff8a 	bl	25078 <z_spin_lock_valid>
   25164:	b960      	cbnz	r0, 25180 <z_impl_k_mutex_lock+0x5c>
   25166:	2394      	movs	r3, #148	; 0x94
   25168:	4a50      	ldr	r2, [pc, #320]	; (252ac <z_impl_k_mutex_lock+0x188>)
   2516a:	4951      	ldr	r1, [pc, #324]	; (252b0 <z_impl_k_mutex_lock+0x18c>)
   2516c:	484c      	ldr	r0, [pc, #304]	; (252a0 <z_impl_k_mutex_lock+0x17c>)
   2516e:	f005 fab4 	bl	2a6da <assert_print>
   25172:	494d      	ldr	r1, [pc, #308]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25174:	484f      	ldr	r0, [pc, #316]	; (252b4 <z_impl_k_mutex_lock+0x190>)
   25176:	f005 fab0 	bl	2a6da <assert_print>
   2517a:	2194      	movs	r1, #148	; 0x94
   2517c:	484b      	ldr	r0, [pc, #300]	; (252ac <z_impl_k_mutex_lock+0x188>)
   2517e:	e7e4      	b.n	2514a <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   25180:	4849      	ldr	r0, [pc, #292]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25182:	f7ff ff95 	bl	250b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25186:	68e3      	ldr	r3, [r4, #12]
   25188:	4a4b      	ldr	r2, [pc, #300]	; (252b8 <z_impl_k_mutex_lock+0x194>)
   2518a:	b19b      	cbz	r3, 251b4 <z_impl_k_mutex_lock+0x90>
   2518c:	68a0      	ldr	r0, [r4, #8]
   2518e:	6891      	ldr	r1, [r2, #8]
   25190:	4288      	cmp	r0, r1
   25192:	d027      	beq.n	251e4 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   25194:	ea57 0306 	orrs.w	r3, r7, r6
   25198:	d12c      	bne.n	251f4 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2519a:	4843      	ldr	r0, [pc, #268]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   2519c:	f7ff ff7a 	bl	25094 <z_spin_unlock_valid>
   251a0:	b1a0      	cbz	r0, 251cc <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   251a2:	f388 8811 	msr	BASEPRI, r8
   251a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   251aa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   251ae:	b002      	add	sp, #8
   251b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   251b4:	6891      	ldr	r1, [r2, #8]
   251b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   251ba:	3301      	adds	r3, #1
   251bc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   251be:	6893      	ldr	r3, [r2, #8]
   251c0:	4839      	ldr	r0, [pc, #228]	; (252a8 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   251c2:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   251c4:	60a3      	str	r3, [r4, #8]
   251c6:	f7ff ff65 	bl	25094 <z_spin_unlock_valid>
   251ca:	b968      	cbnz	r0, 251e8 <z_impl_k_mutex_lock+0xc4>
   251cc:	23c2      	movs	r3, #194	; 0xc2
   251ce:	4a37      	ldr	r2, [pc, #220]	; (252ac <z_impl_k_mutex_lock+0x188>)
   251d0:	493a      	ldr	r1, [pc, #232]	; (252bc <z_impl_k_mutex_lock+0x198>)
   251d2:	4833      	ldr	r0, [pc, #204]	; (252a0 <z_impl_k_mutex_lock+0x17c>)
   251d4:	f005 fa81 	bl	2a6da <assert_print>
   251d8:	4933      	ldr	r1, [pc, #204]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   251da:	4839      	ldr	r0, [pc, #228]	; (252c0 <z_impl_k_mutex_lock+0x19c>)
   251dc:	f005 fa7d 	bl	2a6da <assert_print>
   251e0:	21c2      	movs	r1, #194	; 0xc2
   251e2:	e7cb      	b.n	2517c <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   251e4:	6921      	ldr	r1, [r4, #16]
   251e6:	e7e8      	b.n	251ba <z_impl_k_mutex_lock+0x96>
   251e8:	f388 8811 	msr	BASEPRI, r8
   251ec:	f3bf 8f6f 	isb	sy
		return 0;
   251f0:	2000      	movs	r0, #0
   251f2:	e7dc      	b.n	251ae <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   251f4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   251f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   251fc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   25200:	4299      	cmp	r1, r3
   25202:	bfa8      	it	ge
   25204:	4619      	movge	r1, r3
   25206:	4291      	cmp	r1, r2
   25208:	bfb8      	it	lt
   2520a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2520c:	428b      	cmp	r3, r1
   2520e:	dd02      	ble.n	25216 <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   25210:	f00a ffbe 	bl	30190 <adjust_owner_prio.isra.0>
   25214:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   25216:	4622      	mov	r2, r4
   25218:	4641      	mov	r1, r8
   2521a:	e9cd 7600 	strd	r7, r6, [sp]
   2521e:	4822      	ldr	r0, [pc, #136]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25220:	f001 fcc2 	bl	26ba8 <z_pend_curr>
	if (got_mutex == 0) {
   25224:	2800      	cmp	r0, #0
   25226:	d0e3      	beq.n	251f0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   25228:	f04f 0320 	mov.w	r3, #32
   2522c:	f3ef 8611 	mrs	r6, BASEPRI
   25230:	f383 8812 	msr	BASEPRI_MAX, r3
   25234:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25238:	481b      	ldr	r0, [pc, #108]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   2523a:	f7ff ff1d 	bl	25078 <z_spin_lock_valid>
   2523e:	2800      	cmp	r0, #0
   25240:	d091      	beq.n	25166 <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   25242:	4819      	ldr	r0, [pc, #100]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25244:	f7ff ff34 	bl	250b0 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   25248:	68a0      	ldr	r0, [r4, #8]
   2524a:	b1c0      	cbz	r0, 2527e <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2524c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2524e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25250:	429c      	cmp	r4, r3
   25252:	d00a      	beq.n	2526a <z_impl_k_mutex_lock+0x146>
   25254:	b14b      	cbz	r3, 2526a <z_impl_k_mutex_lock+0x146>
   25256:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2525a:	4299      	cmp	r1, r3
   2525c:	bfa8      	it	ge
   2525e:	4619      	movge	r1, r3
   25260:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25264:	4299      	cmp	r1, r3
   25266:	bfb8      	it	lt
   25268:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2526a:	f00a ff91 	bl	30190 <adjust_owner_prio.isra.0>
   2526e:	b130      	cbz	r0, 2527e <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   25270:	4631      	mov	r1, r6
   25272:	480d      	ldr	r0, [pc, #52]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25274:	f001 f9ca 	bl	2660c <z_reschedule>
	return -EAGAIN;
   25278:	f06f 000a 	mvn.w	r0, #10
   2527c:	e797      	b.n	251ae <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   2527e:	2d00      	cmp	r5, #0
   25280:	d1f6      	bne.n	25270 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25282:	4809      	ldr	r0, [pc, #36]	; (252a8 <z_impl_k_mutex_lock+0x184>)
   25284:	f7ff ff06 	bl	25094 <z_spin_unlock_valid>
   25288:	2800      	cmp	r0, #0
   2528a:	d09f      	beq.n	251cc <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   2528c:	f386 8811 	msr	BASEPRI, r6
   25290:	f3bf 8f6f 	isb	sy
   25294:	e7f0      	b.n	25278 <z_impl_k_mutex_lock+0x154>
   25296:	bf00      	nop
   25298:	0003844e 	.word	0x0003844e
   2529c:	000384fb 	.word	0x000384fb
   252a0:	00032679 	.word	0x00032679
   252a4:	0003851d 	.word	0x0003851d
   252a8:	20021ab0 	.word	0x20021ab0
   252ac:	0003341a 	.word	0x0003341a
   252b0:	00033473 	.word	0x00033473
   252b4:	00033488 	.word	0x00033488
   252b8:	20021a88 	.word	0x20021a88
   252bc:	00033447 	.word	0x00033447
   252c0:	0003345e 	.word	0x0003345e

000252c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   252c4:	b570      	push	{r4, r5, r6, lr}
   252c6:	4604      	mov	r4, r0
   252c8:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   252cc:	b166      	cbz	r6, 252e8 <z_impl_k_mutex_unlock+0x24>
   252ce:	4938      	ldr	r1, [pc, #224]	; (253b0 <z_impl_k_mutex_unlock+0xec>)
   252d0:	23cd      	movs	r3, #205	; 0xcd
   252d2:	4a38      	ldr	r2, [pc, #224]	; (253b4 <z_impl_k_mutex_unlock+0xf0>)
   252d4:	4838      	ldr	r0, [pc, #224]	; (253b8 <z_impl_k_mutex_unlock+0xf4>)
   252d6:	f005 fa00 	bl	2a6da <assert_print>
   252da:	4838      	ldr	r0, [pc, #224]	; (253bc <z_impl_k_mutex_unlock+0xf8>)
   252dc:	f005 f9fd 	bl	2a6da <assert_print>
   252e0:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   252e2:	4834      	ldr	r0, [pc, #208]	; (253b4 <z_impl_k_mutex_unlock+0xf0>)
   252e4:	f005 f9f2 	bl	2a6cc <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   252e8:	6883      	ldr	r3, [r0, #8]
   252ea:	2b00      	cmp	r3, #0
   252ec:	d059      	beq.n	253a2 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   252ee:	4a34      	ldr	r2, [pc, #208]	; (253c0 <z_impl_k_mutex_unlock+0xfc>)
   252f0:	6892      	ldr	r2, [r2, #8]
   252f2:	4293      	cmp	r3, r2
   252f4:	d158      	bne.n	253a8 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   252f6:	68c3      	ldr	r3, [r0, #12]
   252f8:	b93b      	cbnz	r3, 2530a <z_impl_k_mutex_unlock+0x46>
   252fa:	4932      	ldr	r1, [pc, #200]	; (253c4 <z_impl_k_mutex_unlock+0x100>)
   252fc:	23e5      	movs	r3, #229	; 0xe5
   252fe:	4a2d      	ldr	r2, [pc, #180]	; (253b4 <z_impl_k_mutex_unlock+0xf0>)
   25300:	482d      	ldr	r0, [pc, #180]	; (253b8 <z_impl_k_mutex_unlock+0xf4>)
   25302:	f005 f9ea 	bl	2a6da <assert_print>
   25306:	21e5      	movs	r1, #229	; 0xe5
   25308:	e7eb      	b.n	252e2 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2530a:	2b01      	cmp	r3, #1
   2530c:	d003      	beq.n	25316 <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   2530e:	3b01      	subs	r3, #1
   25310:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   25312:	2000      	movs	r0, #0
}
   25314:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   25316:	f04f 0320 	mov.w	r3, #32
   2531a:	f3ef 8511 	mrs	r5, BASEPRI
   2531e:	f383 8812 	msr	BASEPRI_MAX, r3
   25322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25326:	4828      	ldr	r0, [pc, #160]	; (253c8 <z_impl_k_mutex_unlock+0x104>)
   25328:	f7ff fea6 	bl	25078 <z_spin_lock_valid>
   2532c:	b960      	cbnz	r0, 25348 <z_impl_k_mutex_unlock+0x84>
   2532e:	2394      	movs	r3, #148	; 0x94
   25330:	4a26      	ldr	r2, [pc, #152]	; (253cc <z_impl_k_mutex_unlock+0x108>)
   25332:	4927      	ldr	r1, [pc, #156]	; (253d0 <z_impl_k_mutex_unlock+0x10c>)
   25334:	4820      	ldr	r0, [pc, #128]	; (253b8 <z_impl_k_mutex_unlock+0xf4>)
   25336:	f005 f9d0 	bl	2a6da <assert_print>
   2533a:	4923      	ldr	r1, [pc, #140]	; (253c8 <z_impl_k_mutex_unlock+0x104>)
   2533c:	4825      	ldr	r0, [pc, #148]	; (253d4 <z_impl_k_mutex_unlock+0x110>)
   2533e:	f005 f9cc 	bl	2a6da <assert_print>
   25342:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25344:	4821      	ldr	r0, [pc, #132]	; (253cc <z_impl_k_mutex_unlock+0x108>)
   25346:	e7cd      	b.n	252e4 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   25348:	481f      	ldr	r0, [pc, #124]	; (253c8 <z_impl_k_mutex_unlock+0x104>)
   2534a:	f7ff feb1 	bl	250b0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2534e:	6921      	ldr	r1, [r4, #16]
   25350:	68a0      	ldr	r0, [r4, #8]
   25352:	f00a ff1d 	bl	30190 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25356:	4620      	mov	r0, r4
   25358:	f001 fea4 	bl	270a4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   2535c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2535e:	b150      	cbz	r0, 25376 <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   25360:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25364:	6122      	str	r2, [r4, #16]
   25366:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   25368:	f001 f8c4 	bl	264f4 <z_ready_thread>
		z_reschedule(&lock, key);
   2536c:	4629      	mov	r1, r5
   2536e:	4816      	ldr	r0, [pc, #88]	; (253c8 <z_impl_k_mutex_unlock+0x104>)
   25370:	f001 f94c 	bl	2660c <z_reschedule>
   25374:	e7cd      	b.n	25312 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   25376:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25378:	4813      	ldr	r0, [pc, #76]	; (253c8 <z_impl_k_mutex_unlock+0x104>)
   2537a:	f7ff fe8b 	bl	25094 <z_spin_unlock_valid>
   2537e:	b958      	cbnz	r0, 25398 <z_impl_k_mutex_unlock+0xd4>
   25380:	23c2      	movs	r3, #194	; 0xc2
   25382:	4a12      	ldr	r2, [pc, #72]	; (253cc <z_impl_k_mutex_unlock+0x108>)
   25384:	4914      	ldr	r1, [pc, #80]	; (253d8 <z_impl_k_mutex_unlock+0x114>)
   25386:	480c      	ldr	r0, [pc, #48]	; (253b8 <z_impl_k_mutex_unlock+0xf4>)
   25388:	f005 f9a7 	bl	2a6da <assert_print>
   2538c:	490e      	ldr	r1, [pc, #56]	; (253c8 <z_impl_k_mutex_unlock+0x104>)
   2538e:	4813      	ldr	r0, [pc, #76]	; (253dc <z_impl_k_mutex_unlock+0x118>)
   25390:	f005 f9a3 	bl	2a6da <assert_print>
   25394:	21c2      	movs	r1, #194	; 0xc2
   25396:	e7d5      	b.n	25344 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   25398:	f385 8811 	msr	BASEPRI, r5
   2539c:	f3bf 8f6f 	isb	sy
   253a0:	e7b7      	b.n	25312 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   253a2:	f06f 0015 	mvn.w	r0, #21
   253a6:	e7b5      	b.n	25314 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   253a8:	f04f 30ff 	mov.w	r0, #4294967295
   253ac:	e7b2      	b.n	25314 <z_impl_k_mutex_unlock+0x50>
   253ae:	bf00      	nop
   253b0:	0003844e 	.word	0x0003844e
   253b4:	000384fb 	.word	0x000384fb
   253b8:	00032679 	.word	0x00032679
   253bc:	0003851d 	.word	0x0003851d
   253c0:	20021a88 	.word	0x20021a88
   253c4:	00038542 	.word	0x00038542
   253c8:	20021ab0 	.word	0x20021ab0
   253cc:	0003341a 	.word	0x0003341a
   253d0:	00033473 	.word	0x00033473
   253d4:	00033488 	.word	0x00033488
   253d8:	00033447 	.word	0x00033447
   253dc:	0003345e 	.word	0x0003345e

000253e0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   253e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   253e4:	4604      	mov	r4, r0
   253e6:	460e      	mov	r6, r1
   253e8:	4690      	mov	r8, r2
   253ea:	4699      	mov	r9, r3
   253ec:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   253f0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   253f4:	f04f 0320 	mov.w	r3, #32
   253f8:	f3ef 8711 	mrs	r7, BASEPRI
   253fc:	f383 8812 	msr	BASEPRI_MAX, r3
   25400:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25404:	4628      	mov	r0, r5
   25406:	f7ff fe37 	bl	25078 <z_spin_lock_valid>
   2540a:	b968      	cbnz	r0, 25428 <queue_insert+0x48>
   2540c:	2394      	movs	r3, #148	; 0x94
   2540e:	4a3b      	ldr	r2, [pc, #236]	; (254fc <queue_insert+0x11c>)
   25410:	493b      	ldr	r1, [pc, #236]	; (25500 <queue_insert+0x120>)
   25412:	483c      	ldr	r0, [pc, #240]	; (25504 <queue_insert+0x124>)
   25414:	f005 f961 	bl	2a6da <assert_print>
   25418:	4629      	mov	r1, r5
   2541a:	483b      	ldr	r0, [pc, #236]	; (25508 <queue_insert+0x128>)
   2541c:	f005 f95d 	bl	2a6da <assert_print>
   25420:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25422:	4836      	ldr	r0, [pc, #216]	; (254fc <queue_insert+0x11c>)
   25424:	f005 f952 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   25428:	4628      	mov	r0, r5
   2542a:	f7ff fe41 	bl	250b0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   2542e:	f1ba 0f00 	cmp.w	sl, #0
   25432:	d000      	beq.n	25436 <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   25434:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25436:	f104 000c 	add.w	r0, r4, #12
   2543a:	f001 fe33 	bl	270a4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2543e:	b158      	cbz	r0, 25458 <queue_insert+0x78>
   25440:	2300      	movs	r3, #0
   25442:	f8c0 8014 	str.w	r8, [r0, #20]
   25446:	67c3      	str	r3, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   25448:	f001 f854 	bl	264f4 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2544c:	4628      	mov	r0, r5
   2544e:	4639      	mov	r1, r7
   25450:	f001 f8dc 	bl	2660c <z_reschedule>
		return 0;
   25454:	2000      	movs	r0, #0
   25456:	e01c      	b.n	25492 <queue_insert+0xb2>
	if (alloc) {
   25458:	f1b9 0f00 	cmp.w	r9, #0
   2545c:	d02b      	beq.n	254b6 <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   2545e:	2108      	movs	r1, #8
   25460:	f003 f8da 	bl	28618 <z_thread_aligned_alloc>
		if (anode == NULL) {
   25464:	b9b8      	cbnz	r0, 25496 <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25466:	4628      	mov	r0, r5
   25468:	f7ff fe14 	bl	25094 <z_spin_unlock_valid>
   2546c:	b958      	cbnz	r0, 25486 <queue_insert+0xa6>
   2546e:	23c2      	movs	r3, #194	; 0xc2
   25470:	4a22      	ldr	r2, [pc, #136]	; (254fc <queue_insert+0x11c>)
   25472:	4926      	ldr	r1, [pc, #152]	; (2550c <queue_insert+0x12c>)
   25474:	4823      	ldr	r0, [pc, #140]	; (25504 <queue_insert+0x124>)
   25476:	f005 f930 	bl	2a6da <assert_print>
   2547a:	4629      	mov	r1, r5
   2547c:	4824      	ldr	r0, [pc, #144]	; (25510 <queue_insert+0x130>)
   2547e:	f005 f92c 	bl	2a6da <assert_print>
   25482:	21c2      	movs	r1, #194	; 0xc2
   25484:	e7cd      	b.n	25422 <queue_insert+0x42>
	__asm__ volatile(
   25486:	f387 8811 	msr	BASEPRI, r7
   2548a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2548e:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   25492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25496:	2201      	movs	r2, #1
		anode->data = data;
   25498:	f8c0 8004 	str.w	r8, [r0, #4]
   2549c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2549e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   254a0:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   254a4:	b95e      	cbnz	r6, 254be <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   254a6:	6822      	ldr	r2, [r4, #0]
   254a8:	430a      	orrs	r2, r1
   254aa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   254ac:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   254ae:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   254b0:	b96a      	cbnz	r2, 254ce <queue_insert+0xee>
	list->tail = node;
   254b2:	6060      	str	r0, [r4, #4]
}
   254b4:	e00b      	b.n	254ce <queue_insert+0xee>
}
   254b6:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   254b8:	f8c8 9000 	str.w	r9, [r8]
}
   254bc:	e7ef      	b.n	2549e <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   254be:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   254c0:	2a03      	cmp	r2, #3
   254c2:	d810      	bhi.n	254e6 <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   254c4:	6001      	str	r1, [r0, #0]
	return list->tail;
   254c6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   254c8:	b939      	cbnz	r1, 254da <queue_insert+0xfa>
	list->head = node;
   254ca:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   254ce:	2104      	movs	r1, #4
   254d0:	f104 0014 	add.w	r0, r4, #20
   254d4:	f00b f81e 	bl	30514 <z_handle_obj_poll_events>
   254d8:	e7b8      	b.n	2544c <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   254da:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   254dc:	f002 0203 	and.w	r2, r2, #3
   254e0:	4302      	orrs	r2, r0
   254e2:	600a      	str	r2, [r1, #0]
   254e4:	e7e5      	b.n	254b2 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   254e6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   254ea:	430a      	orrs	r2, r1
   254ec:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   254ee:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   254f0:	f002 0203 	and.w	r2, r2, #3
   254f4:	ea40 0302 	orr.w	r3, r0, r2
   254f8:	6033      	str	r3, [r6, #0]
}
   254fa:	e7e8      	b.n	254ce <queue_insert+0xee>
   254fc:	0003341a 	.word	0x0003341a
   25500:	00033473 	.word	0x00033473
   25504:	00032679 	.word	0x00032679
   25508:	00033488 	.word	0x00033488
   2550c:	00033447 	.word	0x00033447
   25510:	0003345e 	.word	0x0003345e

00025514 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25518:	4606      	mov	r6, r0
   2551a:	4691      	mov	r9, r2
   2551c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2551e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25522:	f04f 0320 	mov.w	r3, #32
   25526:	f3ef 8811 	mrs	r8, BASEPRI
   2552a:	f383 8812 	msr	BASEPRI_MAX, r3
   2552e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25532:	4628      	mov	r0, r5
   25534:	f7ff fda0 	bl	25078 <z_spin_lock_valid>
   25538:	b968      	cbnz	r0, 25556 <z_impl_k_queue_get+0x42>
   2553a:	2394      	movs	r3, #148	; 0x94
   2553c:	4a23      	ldr	r2, [pc, #140]	; (255cc <z_impl_k_queue_get+0xb8>)
   2553e:	4924      	ldr	r1, [pc, #144]	; (255d0 <z_impl_k_queue_get+0xbc>)
   25540:	4824      	ldr	r0, [pc, #144]	; (255d4 <z_impl_k_queue_get+0xc0>)
   25542:	f005 f8ca 	bl	2a6da <assert_print>
   25546:	4629      	mov	r1, r5
   25548:	4823      	ldr	r0, [pc, #140]	; (255d8 <z_impl_k_queue_get+0xc4>)
   2554a:	f005 f8c6 	bl	2a6da <assert_print>
   2554e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25550:	481e      	ldr	r0, [pc, #120]	; (255cc <z_impl_k_queue_get+0xb8>)
   25552:	f005 f8bb 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   25556:	4628      	mov	r0, r5
   25558:	f7ff fdaa 	bl	250b0 <z_spin_lock_set_owner>
	return list->head;
   2555c:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2555e:	b1ec      	cbz	r4, 2559c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25560:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25562:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25564:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25568:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2556a:	4620      	mov	r0, r4
   2556c:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   25570:	6033      	str	r3, [r6, #0]
	list->tail = node;
   25572:	bf08      	it	eq
   25574:	6073      	streq	r3, [r6, #4]
   25576:	f00a fe1a 	bl	301ae <z_queue_node_peek>
   2557a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2557c:	4628      	mov	r0, r5
   2557e:	f7ff fd89 	bl	25094 <z_spin_unlock_valid>
   25582:	b9d8      	cbnz	r0, 255bc <z_impl_k_queue_get+0xa8>
   25584:	23c2      	movs	r3, #194	; 0xc2
   25586:	4a11      	ldr	r2, [pc, #68]	; (255cc <z_impl_k_queue_get+0xb8>)
   25588:	4914      	ldr	r1, [pc, #80]	; (255dc <z_impl_k_queue_get+0xc8>)
   2558a:	4812      	ldr	r0, [pc, #72]	; (255d4 <z_impl_k_queue_get+0xc0>)
   2558c:	f005 f8a5 	bl	2a6da <assert_print>
   25590:	4629      	mov	r1, r5
   25592:	4813      	ldr	r0, [pc, #76]	; (255e0 <z_impl_k_queue_get+0xcc>)
   25594:	f005 f8a1 	bl	2a6da <assert_print>
   25598:	21c2      	movs	r1, #194	; 0xc2
   2559a:	e7d9      	b.n	25550 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2559c:	ea59 0307 	orrs.w	r3, r9, r7
   255a0:	d0ec      	beq.n	2557c <z_impl_k_queue_get+0x68>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   255a2:	4641      	mov	r1, r8
   255a4:	4628      	mov	r0, r5
   255a6:	e9cd 9700 	strd	r9, r7, [sp]
   255aa:	f106 020c 	add.w	r2, r6, #12
   255ae:	f001 fafb 	bl	26ba8 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   255b2:	b938      	cbnz	r0, 255c4 <z_impl_k_queue_get+0xb0>
   255b4:	4b0b      	ldr	r3, [pc, #44]	; (255e4 <z_impl_k_queue_get+0xd0>)
   255b6:	689b      	ldr	r3, [r3, #8]
   255b8:	695c      	ldr	r4, [r3, #20]
   255ba:	e003      	b.n	255c4 <z_impl_k_queue_get+0xb0>
	__asm__ volatile(
   255bc:	f388 8811 	msr	BASEPRI, r8
   255c0:	f3bf 8f6f 	isb	sy
}
   255c4:	4620      	mov	r0, r4
   255c6:	b003      	add	sp, #12
   255c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   255cc:	0003341a 	.word	0x0003341a
   255d0:	00033473 	.word	0x00033473
   255d4:	00032679 	.word	0x00032679
   255d8:	00033488 	.word	0x00033488
   255dc:	00033447 	.word	0x00033447
   255e0:	0003345e 	.word	0x0003345e
   255e4:	20021a88 	.word	0x20021a88

000255e8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   255e8:	b538      	push	{r3, r4, r5, lr}
   255ea:	4604      	mov	r4, r0
	__asm__ volatile(
   255ec:	f04f 0320 	mov.w	r3, #32
   255f0:	f3ef 8511 	mrs	r5, BASEPRI
   255f4:	f383 8812 	msr	BASEPRI_MAX, r3
   255f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255fc:	4817      	ldr	r0, [pc, #92]	; (2565c <z_impl_k_sem_give+0x74>)
   255fe:	f7ff fd3b 	bl	25078 <z_spin_lock_valid>
   25602:	b968      	cbnz	r0, 25620 <z_impl_k_sem_give+0x38>
   25604:	2394      	movs	r3, #148	; 0x94
   25606:	4a16      	ldr	r2, [pc, #88]	; (25660 <z_impl_k_sem_give+0x78>)
   25608:	4916      	ldr	r1, [pc, #88]	; (25664 <z_impl_k_sem_give+0x7c>)
   2560a:	4817      	ldr	r0, [pc, #92]	; (25668 <z_impl_k_sem_give+0x80>)
   2560c:	f005 f865 	bl	2a6da <assert_print>
   25610:	4912      	ldr	r1, [pc, #72]	; (2565c <z_impl_k_sem_give+0x74>)
   25612:	4816      	ldr	r0, [pc, #88]	; (2566c <z_impl_k_sem_give+0x84>)
   25614:	f005 f861 	bl	2a6da <assert_print>
   25618:	2194      	movs	r1, #148	; 0x94
   2561a:	4811      	ldr	r0, [pc, #68]	; (25660 <z_impl_k_sem_give+0x78>)
   2561c:	f005 f856 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   25620:	480e      	ldr	r0, [pc, #56]	; (2565c <z_impl_k_sem_give+0x74>)
   25622:	f7ff fd45 	bl	250b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25626:	4620      	mov	r0, r4
   25628:	f001 fd3c 	bl	270a4 <z_unpend_first_thread>

	if (thread != NULL) {
   2562c:	b148      	cbz	r0, 25642 <z_impl_k_sem_give+0x5a>
   2562e:	2200      	movs	r2, #0
   25630:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25632:	f000 ff5f 	bl	264f4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25636:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2563c:	4807      	ldr	r0, [pc, #28]	; (2565c <z_impl_k_sem_give+0x74>)
   2563e:	f000 bfe5 	b.w	2660c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25642:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25646:	429a      	cmp	r2, r3
   25648:	bf18      	it	ne
   2564a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2564c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2564e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25650:	f104 0010 	add.w	r0, r4, #16
   25654:	f00a ff5e 	bl	30514 <z_handle_obj_poll_events>
}
   25658:	e7ed      	b.n	25636 <z_impl_k_sem_give+0x4e>
   2565a:	bf00      	nop
   2565c:	20021ab4 	.word	0x20021ab4
   25660:	0003341a 	.word	0x0003341a
   25664:	00033473 	.word	0x00033473
   25668:	00032679 	.word	0x00032679
   2566c:	00033488 	.word	0x00033488

00025670 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25672:	4604      	mov	r4, r0
   25674:	4616      	mov	r6, r2
   25676:	461d      	mov	r5, r3
   25678:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2567c:	b17b      	cbz	r3, 2569e <z_impl_k_sem_take+0x2e>
   2567e:	ea52 0305 	orrs.w	r3, r2, r5
   25682:	d00c      	beq.n	2569e <z_impl_k_sem_take+0x2e>
   25684:	492d      	ldr	r1, [pc, #180]	; (2573c <z_impl_k_sem_take+0xcc>)
   25686:	2379      	movs	r3, #121	; 0x79
   25688:	4a2d      	ldr	r2, [pc, #180]	; (25740 <z_impl_k_sem_take+0xd0>)
   2568a:	482e      	ldr	r0, [pc, #184]	; (25744 <z_impl_k_sem_take+0xd4>)
   2568c:	f005 f825 	bl	2a6da <assert_print>
   25690:	482d      	ldr	r0, [pc, #180]	; (25748 <z_impl_k_sem_take+0xd8>)
   25692:	f005 f822 	bl	2a6da <assert_print>
   25696:	2179      	movs	r1, #121	; 0x79
   25698:	4829      	ldr	r0, [pc, #164]	; (25740 <z_impl_k_sem_take+0xd0>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2569a:	f005 f817 	bl	2a6cc <assert_post_action>
   2569e:	f04f 0320 	mov.w	r3, #32
   256a2:	f3ef 8711 	mrs	r7, BASEPRI
   256a6:	f383 8812 	msr	BASEPRI_MAX, r3
   256aa:	f3bf 8f6f 	isb	sy
   256ae:	4827      	ldr	r0, [pc, #156]	; (2574c <z_impl_k_sem_take+0xdc>)
   256b0:	f7ff fce2 	bl	25078 <z_spin_lock_valid>
   256b4:	b960      	cbnz	r0, 256d0 <z_impl_k_sem_take+0x60>
   256b6:	2394      	movs	r3, #148	; 0x94
   256b8:	4a25      	ldr	r2, [pc, #148]	; (25750 <z_impl_k_sem_take+0xe0>)
   256ba:	4926      	ldr	r1, [pc, #152]	; (25754 <z_impl_k_sem_take+0xe4>)
   256bc:	4821      	ldr	r0, [pc, #132]	; (25744 <z_impl_k_sem_take+0xd4>)
   256be:	f005 f80c 	bl	2a6da <assert_print>
   256c2:	4922      	ldr	r1, [pc, #136]	; (2574c <z_impl_k_sem_take+0xdc>)
   256c4:	4824      	ldr	r0, [pc, #144]	; (25758 <z_impl_k_sem_take+0xe8>)
   256c6:	f005 f808 	bl	2a6da <assert_print>
   256ca:	2194      	movs	r1, #148	; 0x94
   256cc:	4820      	ldr	r0, [pc, #128]	; (25750 <z_impl_k_sem_take+0xe0>)
   256ce:	e7e4      	b.n	2569a <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   256d0:	481e      	ldr	r0, [pc, #120]	; (2574c <z_impl_k_sem_take+0xdc>)
   256d2:	f7ff fced 	bl	250b0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   256d6:	68a3      	ldr	r3, [r4, #8]
   256d8:	b1c3      	cbz	r3, 2570c <z_impl_k_sem_take+0x9c>
		sem->count--;
   256da:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   256dc:	481b      	ldr	r0, [pc, #108]	; (2574c <z_impl_k_sem_take+0xdc>)
   256de:	60a3      	str	r3, [r4, #8]
   256e0:	f7ff fcd8 	bl	25094 <z_spin_unlock_valid>
   256e4:	b958      	cbnz	r0, 256fe <z_impl_k_sem_take+0x8e>
   256e6:	23c2      	movs	r3, #194	; 0xc2
   256e8:	4a19      	ldr	r2, [pc, #100]	; (25750 <z_impl_k_sem_take+0xe0>)
   256ea:	491c      	ldr	r1, [pc, #112]	; (2575c <z_impl_k_sem_take+0xec>)
   256ec:	4815      	ldr	r0, [pc, #84]	; (25744 <z_impl_k_sem_take+0xd4>)
   256ee:	f004 fff4 	bl	2a6da <assert_print>
   256f2:	4916      	ldr	r1, [pc, #88]	; (2574c <z_impl_k_sem_take+0xdc>)
   256f4:	481a      	ldr	r0, [pc, #104]	; (25760 <z_impl_k_sem_take+0xf0>)
   256f6:	f004 fff0 	bl	2a6da <assert_print>
   256fa:	21c2      	movs	r1, #194	; 0xc2
   256fc:	e7e6      	b.n	256cc <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   256fe:	f387 8811 	msr	BASEPRI, r7
   25702:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25706:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25708:	b003      	add	sp, #12
   2570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2570c:	ea56 0305 	orrs.w	r3, r6, r5
   25710:	d10b      	bne.n	2572a <z_impl_k_sem_take+0xba>
   25712:	480e      	ldr	r0, [pc, #56]	; (2574c <z_impl_k_sem_take+0xdc>)
   25714:	f7ff fcbe 	bl	25094 <z_spin_unlock_valid>
   25718:	2800      	cmp	r0, #0
   2571a:	d0e4      	beq.n	256e6 <z_impl_k_sem_take+0x76>
   2571c:	f387 8811 	msr	BASEPRI, r7
   25720:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25724:	f06f 000f 	mvn.w	r0, #15
   25728:	e7ee      	b.n	25708 <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2572a:	4622      	mov	r2, r4
   2572c:	4639      	mov	r1, r7
   2572e:	e9cd 6500 	strd	r6, r5, [sp]
   25732:	4806      	ldr	r0, [pc, #24]	; (2574c <z_impl_k_sem_take+0xdc>)
   25734:	f001 fa38 	bl	26ba8 <z_pend_curr>
	return ret;
   25738:	e7e6      	b.n	25708 <z_impl_k_sem_take+0x98>
   2573a:	bf00      	nop
   2573c:	00038579 	.word	0x00038579
   25740:	00038559 	.word	0x00038559
   25744:	00032679 	.word	0x00032679
   25748:	00036916 	.word	0x00036916
   2574c:	20021ab4 	.word	0x20021ab4
   25750:	0003341a 	.word	0x0003341a
   25754:	00033473 	.word	0x00033473
   25758:	00033488 	.word	0x00033488
   2575c:	00033447 	.word	0x00033447
   25760:	0003345e 	.word	0x0003345e

00025764 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25766:	2400      	movs	r4, #0
   25768:	4b08      	ldr	r3, [pc, #32]	; (2578c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2576a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   2576e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   25770:	ab02      	add	r3, sp, #8
   25772:	9300      	str	r3, [sp, #0]
   25774:	4906      	ldr	r1, [pc, #24]	; (25790 <k_sys_work_q_init+0x2c>)
   25776:	f04f 33ff 	mov.w	r3, #4294967295
   2577a:	4806      	ldr	r0, [pc, #24]	; (25794 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2577c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25780:	f000 fac0 	bl	25d04 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25784:	4620      	mov	r0, r4
   25786:	b004      	add	sp, #16
   25788:	bd10      	pop	{r4, pc}
   2578a:	bf00      	nop
   2578c:	000385c7 	.word	0x000385c7
   25790:	200343f0 	.word	0x200343f0
   25794:	2000a270 	.word	0x2000a270

00025798 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2579c:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2579e:	4e6e      	ldr	r6, [pc, #440]	; (25958 <work_queue_main+0x1c0>)
	return list->head;
   257a0:	4f6e      	ldr	r7, [pc, #440]	; (2595c <work_queue_main+0x1c4>)
   257a2:	b085      	sub	sp, #20
	__asm__ volatile(
   257a4:	f04f 0320 	mov.w	r3, #32
   257a8:	f3ef 8811 	mrs	r8, BASEPRI
   257ac:	f383 8812 	msr	BASEPRI_MAX, r3
   257b0:	f3bf 8f6f 	isb	sy
   257b4:	4630      	mov	r0, r6
   257b6:	f7ff fc5f 	bl	25078 <z_spin_lock_valid>
   257ba:	b968      	cbnz	r0, 257d8 <work_queue_main+0x40>
   257bc:	2394      	movs	r3, #148	; 0x94
   257be:	4a68      	ldr	r2, [pc, #416]	; (25960 <work_queue_main+0x1c8>)
   257c0:	4968      	ldr	r1, [pc, #416]	; (25964 <work_queue_main+0x1cc>)
   257c2:	4869      	ldr	r0, [pc, #420]	; (25968 <work_queue_main+0x1d0>)
   257c4:	f004 ff89 	bl	2a6da <assert_print>
   257c8:	4963      	ldr	r1, [pc, #396]	; (25958 <work_queue_main+0x1c0>)
   257ca:	4868      	ldr	r0, [pc, #416]	; (2596c <work_queue_main+0x1d4>)
   257cc:	f004 ff85 	bl	2a6da <assert_print>
   257d0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257d2:	4863      	ldr	r0, [pc, #396]	; (25960 <work_queue_main+0x1c8>)
   257d4:	f004 ff7a 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   257d8:	4630      	mov	r0, r6
   257da:	f7ff fc69 	bl	250b0 <z_spin_lock_set_owner>
   257de:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
Z_GENLIST_GET(slist, snode)
   257e2:	b9ad      	cbnz	r5, 25810 <work_queue_main+0x78>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   257e4:	2102      	movs	r1, #2
   257e6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   257ea:	f00a fd1e 	bl	3022a <flag_test_and_clear>
   257ee:	2800      	cmp	r0, #0
   257f0:	d135      	bne.n	2585e <work_queue_main+0xc6>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   257f2:	2300      	movs	r3, #0
   257f4:	f04f 32ff 	mov.w	r2, #4294967295
   257f8:	9302      	str	r3, [sp, #8]
   257fa:	f04f 33ff 	mov.w	r3, #4294967295
   257fe:	4641      	mov	r1, r8
   25800:	e9cd 2300 	strd	r2, r3, [sp]
   25804:	4630      	mov	r0, r6
   25806:	f104 0290 	add.w	r2, r4, #144	; 0x90
   2580a:	f001 ff41 	bl	27690 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   2580e:	e7c9      	b.n	257a4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25810:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
	return node->next;
   25814:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25816:	4295      	cmp	r5, r2
	list->tail = node;
   25818:	bf08      	it	eq
   2581a:	f8c4 308c 	streq.w	r3, [r4, #140]	; 0x8c
	list->head = node;
   2581e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	*flagp |= BIT(bit);
   25822:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25826:	4630      	mov	r0, r6
   25828:	f043 0302 	orr.w	r3, r3, #2
   2582c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	*flagp &= ~BIT(bit);
   25830:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   25832:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   25836:	f023 0304 	bic.w	r3, r3, #4
   2583a:	f043 0301 	orr.w	r3, r3, #1
   2583e:	60eb      	str	r3, [r5, #12]
   25840:	f7ff fc28 	bl	25094 <z_spin_unlock_valid>
   25844:	b9a8      	cbnz	r0, 25872 <work_queue_main+0xda>
   25846:	23c2      	movs	r3, #194	; 0xc2
   25848:	4a45      	ldr	r2, [pc, #276]	; (25960 <work_queue_main+0x1c8>)
   2584a:	4949      	ldr	r1, [pc, #292]	; (25970 <work_queue_main+0x1d8>)
   2584c:	4846      	ldr	r0, [pc, #280]	; (25968 <work_queue_main+0x1d0>)
   2584e:	f004 ff44 	bl	2a6da <assert_print>
   25852:	4941      	ldr	r1, [pc, #260]	; (25958 <work_queue_main+0x1c0>)
   25854:	4847      	ldr	r0, [pc, #284]	; (25974 <work_queue_main+0x1dc>)
   25856:	f004 ff40 	bl	2a6da <assert_print>
   2585a:	21c2      	movs	r1, #194	; 0xc2
   2585c:	e7b9      	b.n	257d2 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2585e:	f104 0598 	add.w	r5, r4, #152	; 0x98
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   25862:	2200      	movs	r2, #0
   25864:	2101      	movs	r1, #1
   25866:	4628      	mov	r0, r5
   25868:	f001 feb4 	bl	275d4 <z_sched_wake>
   2586c:	2800      	cmp	r0, #0
   2586e:	d1f8      	bne.n	25862 <work_queue_main+0xca>
   25870:	e7bf      	b.n	257f2 <work_queue_main+0x5a>
	__asm__ volatile(
   25872:	f388 8811 	msr	BASEPRI, r8
   25876:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   2587a:	f1b9 0f00 	cmp.w	r9, #0
   2587e:	d10a      	bne.n	25896 <work_queue_main+0xfe>
   25880:	493d      	ldr	r1, [pc, #244]	; (25978 <work_queue_main+0x1e0>)
   25882:	4839      	ldr	r0, [pc, #228]	; (25968 <work_queue_main+0x1d0>)
   25884:	f240 239b 	movw	r3, #667	; 0x29b
   25888:	4a3c      	ldr	r2, [pc, #240]	; (2597c <work_queue_main+0x1e4>)
   2588a:	f004 ff26 	bl	2a6da <assert_print>
   2588e:	f240 219b 	movw	r1, #667	; 0x29b
   25892:	483a      	ldr	r0, [pc, #232]	; (2597c <work_queue_main+0x1e4>)
   25894:	e79e      	b.n	257d4 <work_queue_main+0x3c>
		handler(work);
   25896:	4628      	mov	r0, r5
   25898:	47c8      	blx	r9
	__asm__ volatile(
   2589a:	f04f 0320 	mov.w	r3, #32
   2589e:	f3ef 8a11 	mrs	sl, BASEPRI
   258a2:	f383 8812 	msr	BASEPRI_MAX, r3
   258a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258aa:	4630      	mov	r0, r6
   258ac:	f7ff fbe4 	bl	25078 <z_spin_lock_valid>
   258b0:	2800      	cmp	r0, #0
   258b2:	d083      	beq.n	257bc <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   258b4:	4630      	mov	r0, r6
   258b6:	f7ff fbfb 	bl	250b0 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   258ba:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   258bc:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   258be:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   258c2:	d417      	bmi.n	258f4 <work_queue_main+0x15c>
	*flagp &= ~BIT(bit);
   258c4:	60ea      	str	r2, [r5, #12]
   258c6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258ca:	4630      	mov	r0, r6
   258cc:	f023 0302 	bic.w	r3, r3, #2
   258d0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	return (*flagp & BIT(bit)) != 0U;
   258d4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   258d8:	f7ff fbdc 	bl	25094 <z_spin_unlock_valid>
   258dc:	2800      	cmp	r0, #0
   258de:	d0b2      	beq.n	25846 <work_queue_main+0xae>
	__asm__ volatile(
   258e0:	f38a 8811 	msr	BASEPRI, sl
   258e4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   258e8:	2d00      	cmp	r5, #0
   258ea:	f47f af5b 	bne.w	257a4 <work_queue_main+0xc>
	z_impl_k_yield();
   258ee:	f001 fc35 	bl	2715c <z_impl_k_yield>
}
   258f2:	e757      	b.n	257a4 <work_queue_main+0xc>
	return list->head;
   258f4:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   258f6:	f023 0303 	bic.w	r3, r3, #3
   258fa:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   258fc:	2800      	cmp	r0, #0
   258fe:	d0e2      	beq.n	258c6 <work_queue_main+0x12e>
	return node->next;
   25900:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   25904:	46c3      	mov	fp, r8
	return node->next;
   25906:	f8d0 9000 	ldr.w	r9, [r0]
   2590a:	2800      	cmp	r0, #0
   2590c:	d0db      	beq.n	258c6 <work_queue_main+0x12e>
		if (wc->work == work) {
   2590e:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   25910:	4602      	mov	r2, r0
		if (wc->work == work) {
   25912:	429d      	cmp	r5, r3
   25914:	d10d      	bne.n	25932 <work_queue_main+0x19a>
   25916:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25918:	f1b8 0f00 	cmp.w	r8, #0
   2591c:	d112      	bne.n	25944 <work_queue_main+0x1ac>
   2591e:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   25920:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   25922:	4283      	cmp	r3, r0
   25924:	d100      	bne.n	25928 <work_queue_main+0x190>
	list->tail = node;
   25926:	607a      	str	r2, [r7, #4]
	parent->next = child;
   25928:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   2592c:	f7ff fe5c 	bl	255e8 <z_impl_k_sem_give>
}
   25930:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25932:	f1b9 0f00 	cmp.w	r9, #0
   25936:	d00d      	beq.n	25954 <work_queue_main+0x1bc>
	return node->next;
   25938:	f8d9 3000 	ldr.w	r3, [r9]
   2593c:	4648      	mov	r0, r9
   2593e:	4690      	mov	r8, r2
   25940:	4699      	mov	r9, r3
   25942:	e7e2      	b.n	2590a <work_queue_main+0x172>
	parent->next = child;
   25944:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25948:	687b      	ldr	r3, [r7, #4]
   2594a:	4283      	cmp	r3, r0
	list->tail = node;
   2594c:	bf08      	it	eq
   2594e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   25952:	e7e9      	b.n	25928 <work_queue_main+0x190>
   25954:	464b      	mov	r3, r9
   25956:	e7f1      	b.n	2593c <work_queue_main+0x1a4>
   25958:	20021ac0 	.word	0x20021ac0
   2595c:	20021ab8 	.word	0x20021ab8
   25960:	0003341a 	.word	0x0003341a
   25964:	00033473 	.word	0x00033473
   25968:	00032679 	.word	0x00032679
   2596c:	00033488 	.word	0x00033488
   25970:	00033447 	.word	0x00033447
   25974:	0003345e 	.word	0x0003345e
   25978:	000385f1 	.word	0x000385f1
   2597c:	000385d0 	.word	0x000385d0

00025980 <cancel_sync_locked>:
{
   25980:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25982:	68c3      	ldr	r3, [r0, #12]
{
   25984:	4605      	mov	r5, r0
	return (*flagp & BIT(bit)) != 0U;
   25986:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2598a:	079b      	lsls	r3, r3, #30
{
   2598c:	460c      	mov	r4, r1
	if (ret) {
   2598e:	d50d      	bpl.n	259ac <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   25990:	2201      	movs	r2, #1
   25992:	2100      	movs	r1, #0
   25994:	f104 0008 	add.w	r0, r4, #8
   25998:	f00a fc37 	bl	3020a <z_impl_k_sem_init>
	parent->next = child;
   2599c:	2300      	movs	r3, #0
   2599e:	6023      	str	r3, [r4, #0]
	return list->tail;
   259a0:	4b05      	ldr	r3, [pc, #20]	; (259b8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   259a2:	6065      	str	r5, [r4, #4]
   259a4:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   259a6:	b91a      	cbnz	r2, 259b0 <cancel_sync_locked+0x30>
	list->head = node;
   259a8:	e9c3 4400 	strd	r4, r4, [r3]
}
   259ac:	4630      	mov	r0, r6
   259ae:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   259b0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   259b2:	605c      	str	r4, [r3, #4]
}
   259b4:	e7fa      	b.n	259ac <cancel_sync_locked+0x2c>
   259b6:	bf00      	nop
   259b8:	20021ab8 	.word	0x20021ab8

000259bc <submit_to_queue_locked>:
{
   259bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   259be:	68c3      	ldr	r3, [r0, #12]
{
   259c0:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   259c2:	079a      	lsls	r2, r3, #30
{
   259c4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   259c6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   259ca:	d439      	bmi.n	25a40 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   259cc:	075b      	lsls	r3, r3, #29
   259ce:	d425      	bmi.n	25a1c <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   259d0:	680b      	ldr	r3, [r1, #0]
   259d2:	b90b      	cbnz	r3, 259d8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   259d4:	6883      	ldr	r3, [r0, #8]
   259d6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   259d8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   259da:	07dd      	lsls	r5, r3, #31
   259dc:	d521      	bpl.n	25a22 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   259de:	68a3      	ldr	r3, [r4, #8]
   259e0:	b95b      	cbnz	r3, 259fa <submit_to_queue_locked+0x3e>
   259e2:	4928      	ldr	r1, [pc, #160]	; (25a84 <submit_to_queue_locked+0xc8>)
   259e4:	4828      	ldr	r0, [pc, #160]	; (25a88 <submit_to_queue_locked+0xcc>)
   259e6:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   259ea:	4a28      	ldr	r2, [pc, #160]	; (25a8c <submit_to_queue_locked+0xd0>)
   259ec:	f004 fe75 	bl	2a6da <assert_print>
   259f0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   259f4:	4825      	ldr	r0, [pc, #148]	; (25a8c <submit_to_queue_locked+0xd0>)
   259f6:	f004 fe69 	bl	2a6cc <assert_post_action>
			ret = 2;
   259fa:	2602      	movs	r6, #2
			*queuep = work->queue;
   259fc:	603b      	str	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   259fe:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   25a00:	2d00      	cmp	r5, #0
   25a02:	d03c      	beq.n	25a7e <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25a04:	4b22      	ldr	r3, [pc, #136]	; (25a90 <submit_to_queue_locked+0xd4>)
   25a06:	689b      	ldr	r3, [r3, #8]
   25a08:	42ab      	cmp	r3, r5
   25a0a:	d00c      	beq.n	25a26 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   25a0c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25a10:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25a12:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25a16:	d416      	bmi.n	25a46 <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   25a18:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   25a1c:	2300      	movs	r3, #0
   25a1e:	603b      	str	r3, [r7, #0]
	return ret;
   25a20:	e027      	b.n	25a72 <submit_to_queue_locked+0xb6>
		ret = 1;
   25a22:	2601      	movs	r6, #1
   25a24:	e7eb      	b.n	259fe <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25a26:	f00a fb9f 	bl	30168 <k_is_in_isr>
   25a2a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   25a2e:	2800      	cmp	r0, #0
   25a30:	d1ee      	bne.n	25a10 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25a32:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25a34:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25a38:	d5ee      	bpl.n	25a18 <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   25a3a:	b152      	cbz	r2, 25a52 <submit_to_queue_locked+0x96>
   25a3c:	075b      	lsls	r3, r3, #29
   25a3e:	d408      	bmi.n	25a52 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   25a40:	f06f 060f 	mvn.w	r6, #15
   25a44:	e7ea      	b.n	25a1c <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   25a46:	2a00      	cmp	r2, #0
   25a48:	d1fa      	bne.n	25a40 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   25a4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25a4e:	2b00      	cmp	r3, #0
   25a50:	d1f6      	bne.n	25a40 <submit_to_queue_locked+0x84>
	parent->next = child;
   25a52:	2300      	movs	r3, #0
   25a54:	6023      	str	r3, [r4, #0]
	return list->tail;
   25a56:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
Z_GENLIST_APPEND(slist, snode)
   25a5a:	b963      	cbnz	r3, 25a76 <submit_to_queue_locked+0xba>
	list->head = node;
   25a5c:	e9c5 4422 	strd	r4, r4, [r5, #136]	; 0x88
		(void)notify_queue_locked(queue);
   25a60:	4628      	mov	r0, r5
   25a62:	f00a fbfb 	bl	3025c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25a66:	68e3      	ldr	r3, [r4, #12]
   25a68:	f043 0304 	orr.w	r3, r3, #4
   25a6c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25a6e:	683b      	ldr	r3, [r7, #0]
   25a70:	60a3      	str	r3, [r4, #8]
}
   25a72:	4630      	mov	r0, r6
   25a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25a76:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25a78:	f8c5 408c 	str.w	r4, [r5, #140]	; 0x8c
}
   25a7c:	e7f0      	b.n	25a60 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   25a7e:	f06f 0615 	mvn.w	r6, #21
   25a82:	e7cb      	b.n	25a1c <submit_to_queue_locked+0x60>
   25a84:	00038608 	.word	0x00038608
   25a88:	00032679 	.word	0x00032679
   25a8c:	000385d0 	.word	0x000385d0
   25a90:	20021a88 	.word	0x20021a88

00025a94 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   25a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25a96:	4604      	mov	r4, r0
	__asm__ volatile(
   25a98:	f04f 0320 	mov.w	r3, #32
   25a9c:	f3ef 8511 	mrs	r5, BASEPRI
   25aa0:	f383 8812 	msr	BASEPRI_MAX, r3
   25aa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25aa8:	481c      	ldr	r0, [pc, #112]	; (25b1c <work_timeout+0x88>)
   25aaa:	f7ff fae5 	bl	25078 <z_spin_lock_valid>
   25aae:	b968      	cbnz	r0, 25acc <work_timeout+0x38>
   25ab0:	2394      	movs	r3, #148	; 0x94
   25ab2:	4a1b      	ldr	r2, [pc, #108]	; (25b20 <work_timeout+0x8c>)
   25ab4:	491b      	ldr	r1, [pc, #108]	; (25b24 <work_timeout+0x90>)
   25ab6:	481c      	ldr	r0, [pc, #112]	; (25b28 <work_timeout+0x94>)
   25ab8:	f004 fe0f 	bl	2a6da <assert_print>
   25abc:	4917      	ldr	r1, [pc, #92]	; (25b1c <work_timeout+0x88>)
   25abe:	481b      	ldr	r0, [pc, #108]	; (25b2c <work_timeout+0x98>)
   25ac0:	f004 fe0b 	bl	2a6da <assert_print>
   25ac4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ac6:	4816      	ldr	r0, [pc, #88]	; (25b20 <work_timeout+0x8c>)
   25ac8:	f004 fe00 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   25acc:	4813      	ldr	r0, [pc, #76]	; (25b1c <work_timeout+0x88>)
   25ace:	f7ff faef 	bl	250b0 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   25ad2:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25ad4:	2103      	movs	r1, #3
   25ad6:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   25ad8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25ada:	f1a4 0610 	sub.w	r6, r4, #16
   25ade:	f00a fba4 	bl	3022a <flag_test_and_clear>
   25ae2:	b128      	cbz	r0, 25af0 <work_timeout+0x5c>
		queue = dw->queue;
   25ae4:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   25ae6:	4630      	mov	r0, r6
   25ae8:	a901      	add	r1, sp, #4
		queue = dw->queue;
   25aea:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25aec:	f7ff ff66 	bl	259bc <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25af0:	480a      	ldr	r0, [pc, #40]	; (25b1c <work_timeout+0x88>)
   25af2:	f7ff facf 	bl	25094 <z_spin_unlock_valid>
   25af6:	b958      	cbnz	r0, 25b10 <work_timeout+0x7c>
   25af8:	23c2      	movs	r3, #194	; 0xc2
   25afa:	4a09      	ldr	r2, [pc, #36]	; (25b20 <work_timeout+0x8c>)
   25afc:	490c      	ldr	r1, [pc, #48]	; (25b30 <work_timeout+0x9c>)
   25afe:	480a      	ldr	r0, [pc, #40]	; (25b28 <work_timeout+0x94>)
   25b00:	f004 fdeb 	bl	2a6da <assert_print>
   25b04:	4905      	ldr	r1, [pc, #20]	; (25b1c <work_timeout+0x88>)
   25b06:	480b      	ldr	r0, [pc, #44]	; (25b34 <work_timeout+0xa0>)
   25b08:	f004 fde7 	bl	2a6da <assert_print>
   25b0c:	21c2      	movs	r1, #194	; 0xc2
   25b0e:	e7da      	b.n	25ac6 <work_timeout+0x32>
	__asm__ volatile(
   25b10:	f385 8811 	msr	BASEPRI, r5
   25b14:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   25b18:	b002      	add	sp, #8
   25b1a:	bd70      	pop	{r4, r5, r6, pc}
   25b1c:	20021ac0 	.word	0x20021ac0
   25b20:	0003341a 	.word	0x0003341a
   25b24:	00033473 	.word	0x00033473
   25b28:	00032679 	.word	0x00032679
   25b2c:	00033488 	.word	0x00033488
   25b30:	00033447 	.word	0x00033447
   25b34:	0003345e 	.word	0x0003345e

00025b38 <k_work_init>:
{
   25b38:	b538      	push	{r3, r4, r5, lr}
   25b3a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   25b3c:	4604      	mov	r4, r0
   25b3e:	b948      	cbnz	r0, 25b54 <k_work_init+0x1c>
   25b40:	490c      	ldr	r1, [pc, #48]	; (25b74 <k_work_init+0x3c>)
   25b42:	2389      	movs	r3, #137	; 0x89
   25b44:	4a0c      	ldr	r2, [pc, #48]	; (25b78 <k_work_init+0x40>)
   25b46:	480d      	ldr	r0, [pc, #52]	; (25b7c <k_work_init+0x44>)
   25b48:	f004 fdc7 	bl	2a6da <assert_print>
   25b4c:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   25b4e:	480a      	ldr	r0, [pc, #40]	; (25b78 <k_work_init+0x40>)
   25b50:	f004 fdbc 	bl	2a6cc <assert_post_action>
   25b54:	b939      	cbnz	r1, 25b66 <k_work_init+0x2e>
   25b56:	490a      	ldr	r1, [pc, #40]	; (25b80 <k_work_init+0x48>)
   25b58:	238a      	movs	r3, #138	; 0x8a
   25b5a:	4a07      	ldr	r2, [pc, #28]	; (25b78 <k_work_init+0x40>)
   25b5c:	4807      	ldr	r0, [pc, #28]	; (25b7c <k_work_init+0x44>)
   25b5e:	f004 fdbc 	bl	2a6da <assert_print>
   25b62:	218a      	movs	r1, #138	; 0x8a
   25b64:	e7f3      	b.n	25b4e <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   25b66:	2210      	movs	r2, #16
   25b68:	2100      	movs	r1, #0
   25b6a:	f00a fd4a 	bl	30602 <memset>
   25b6e:	6065      	str	r5, [r4, #4]
}
   25b70:	bd38      	pop	{r3, r4, r5, pc}
   25b72:	bf00      	nop
   25b74:	000386a7 	.word	0x000386a7
   25b78:	000385d0 	.word	0x000385d0
   25b7c:	00032679 	.word	0x00032679
   25b80:	000385f1 	.word	0x000385f1

00025b84 <k_work_busy_get>:
{
   25b84:	b538      	push	{r3, r4, r5, lr}
   25b86:	4604      	mov	r4, r0
	__asm__ volatile(
   25b88:	f04f 0320 	mov.w	r3, #32
   25b8c:	f3ef 8511 	mrs	r5, BASEPRI
   25b90:	f383 8812 	msr	BASEPRI_MAX, r3
   25b94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b98:	4816      	ldr	r0, [pc, #88]	; (25bf4 <k_work_busy_get+0x70>)
   25b9a:	f7ff fa6d 	bl	25078 <z_spin_lock_valid>
   25b9e:	b968      	cbnz	r0, 25bbc <k_work_busy_get+0x38>
   25ba0:	2394      	movs	r3, #148	; 0x94
   25ba2:	4a15      	ldr	r2, [pc, #84]	; (25bf8 <k_work_busy_get+0x74>)
   25ba4:	4915      	ldr	r1, [pc, #84]	; (25bfc <k_work_busy_get+0x78>)
   25ba6:	4816      	ldr	r0, [pc, #88]	; (25c00 <k_work_busy_get+0x7c>)
   25ba8:	f004 fd97 	bl	2a6da <assert_print>
   25bac:	4911      	ldr	r1, [pc, #68]	; (25bf4 <k_work_busy_get+0x70>)
   25bae:	4815      	ldr	r0, [pc, #84]	; (25c04 <k_work_busy_get+0x80>)
   25bb0:	f004 fd93 	bl	2a6da <assert_print>
   25bb4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bb6:	4810      	ldr	r0, [pc, #64]	; (25bf8 <k_work_busy_get+0x74>)
   25bb8:	f004 fd88 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   25bbc:	480d      	ldr	r0, [pc, #52]	; (25bf4 <k_work_busy_get+0x70>)
   25bbe:	f7ff fa77 	bl	250b0 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   25bc2:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bc4:	480b      	ldr	r0, [pc, #44]	; (25bf4 <k_work_busy_get+0x70>)
   25bc6:	f004 040f 	and.w	r4, r4, #15
   25bca:	f7ff fa63 	bl	25094 <z_spin_unlock_valid>
   25bce:	b958      	cbnz	r0, 25be8 <k_work_busy_get+0x64>
   25bd0:	23c2      	movs	r3, #194	; 0xc2
   25bd2:	4a09      	ldr	r2, [pc, #36]	; (25bf8 <k_work_busy_get+0x74>)
   25bd4:	490c      	ldr	r1, [pc, #48]	; (25c08 <k_work_busy_get+0x84>)
   25bd6:	480a      	ldr	r0, [pc, #40]	; (25c00 <k_work_busy_get+0x7c>)
   25bd8:	f004 fd7f 	bl	2a6da <assert_print>
   25bdc:	4905      	ldr	r1, [pc, #20]	; (25bf4 <k_work_busy_get+0x70>)
   25bde:	480b      	ldr	r0, [pc, #44]	; (25c0c <k_work_busy_get+0x88>)
   25be0:	f004 fd7b 	bl	2a6da <assert_print>
   25be4:	21c2      	movs	r1, #194	; 0xc2
   25be6:	e7e6      	b.n	25bb6 <k_work_busy_get+0x32>
	__asm__ volatile(
   25be8:	f385 8811 	msr	BASEPRI, r5
   25bec:	f3bf 8f6f 	isb	sy
}
   25bf0:	4620      	mov	r0, r4
   25bf2:	bd38      	pop	{r3, r4, r5, pc}
   25bf4:	20021ac0 	.word	0x20021ac0
   25bf8:	0003341a 	.word	0x0003341a
   25bfc:	00033473 	.word	0x00033473
   25c00:	00032679 	.word	0x00032679
   25c04:	00033488 	.word	0x00033488
   25c08:	00033447 	.word	0x00033447
   25c0c:	0003345e 	.word	0x0003345e

00025c10 <z_work_submit_to_queue>:
{
   25c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   25c12:	460c      	mov	r4, r1
{
   25c14:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   25c16:	b959      	cbnz	r1, 25c30 <z_work_submit_to_queue+0x20>
   25c18:	4921      	ldr	r1, [pc, #132]	; (25ca0 <z_work_submit_to_queue+0x90>)
   25c1a:	4822      	ldr	r0, [pc, #136]	; (25ca4 <z_work_submit_to_queue+0x94>)
   25c1c:	f44f 73ba 	mov.w	r3, #372	; 0x174
   25c20:	4a21      	ldr	r2, [pc, #132]	; (25ca8 <z_work_submit_to_queue+0x98>)
   25c22:	f004 fd5a 	bl	2a6da <assert_print>
   25c26:	f44f 71ba 	mov.w	r1, #372	; 0x174
   25c2a:	481f      	ldr	r0, [pc, #124]	; (25ca8 <z_work_submit_to_queue+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c2c:	f004 fd4e 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   25c30:	f04f 0320 	mov.w	r3, #32
   25c34:	f3ef 8511 	mrs	r5, BASEPRI
   25c38:	f383 8812 	msr	BASEPRI_MAX, r3
   25c3c:	f3bf 8f6f 	isb	sy
   25c40:	481a      	ldr	r0, [pc, #104]	; (25cac <z_work_submit_to_queue+0x9c>)
   25c42:	f7ff fa19 	bl	25078 <z_spin_lock_valid>
   25c46:	b960      	cbnz	r0, 25c62 <z_work_submit_to_queue+0x52>
   25c48:	2394      	movs	r3, #148	; 0x94
   25c4a:	4a19      	ldr	r2, [pc, #100]	; (25cb0 <z_work_submit_to_queue+0xa0>)
   25c4c:	4919      	ldr	r1, [pc, #100]	; (25cb4 <z_work_submit_to_queue+0xa4>)
   25c4e:	4815      	ldr	r0, [pc, #84]	; (25ca4 <z_work_submit_to_queue+0x94>)
   25c50:	f004 fd43 	bl	2a6da <assert_print>
   25c54:	4915      	ldr	r1, [pc, #84]	; (25cac <z_work_submit_to_queue+0x9c>)
   25c56:	4818      	ldr	r0, [pc, #96]	; (25cb8 <z_work_submit_to_queue+0xa8>)
   25c58:	f004 fd3f 	bl	2a6da <assert_print>
   25c5c:	2194      	movs	r1, #148	; 0x94
   25c5e:	4814      	ldr	r0, [pc, #80]	; (25cb0 <z_work_submit_to_queue+0xa0>)
   25c60:	e7e4      	b.n	25c2c <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   25c62:	4812      	ldr	r0, [pc, #72]	; (25cac <z_work_submit_to_queue+0x9c>)
   25c64:	f7ff fa24 	bl	250b0 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25c68:	4620      	mov	r0, r4
   25c6a:	a901      	add	r1, sp, #4
   25c6c:	f7ff fea6 	bl	259bc <submit_to_queue_locked>
   25c70:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c72:	480e      	ldr	r0, [pc, #56]	; (25cac <z_work_submit_to_queue+0x9c>)
   25c74:	f7ff fa0e 	bl	25094 <z_spin_unlock_valid>
   25c78:	b958      	cbnz	r0, 25c92 <z_work_submit_to_queue+0x82>
   25c7a:	23c2      	movs	r3, #194	; 0xc2
   25c7c:	4a0c      	ldr	r2, [pc, #48]	; (25cb0 <z_work_submit_to_queue+0xa0>)
   25c7e:	490f      	ldr	r1, [pc, #60]	; (25cbc <z_work_submit_to_queue+0xac>)
   25c80:	4808      	ldr	r0, [pc, #32]	; (25ca4 <z_work_submit_to_queue+0x94>)
   25c82:	f004 fd2a 	bl	2a6da <assert_print>
   25c86:	4909      	ldr	r1, [pc, #36]	; (25cac <z_work_submit_to_queue+0x9c>)
   25c88:	480d      	ldr	r0, [pc, #52]	; (25cc0 <z_work_submit_to_queue+0xb0>)
   25c8a:	f004 fd26 	bl	2a6da <assert_print>
   25c8e:	21c2      	movs	r1, #194	; 0xc2
   25c90:	e7e5      	b.n	25c5e <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   25c92:	f385 8811 	msr	BASEPRI, r5
   25c96:	f3bf 8f6f 	isb	sy
}
   25c9a:	4620      	mov	r0, r4
   25c9c:	b003      	add	sp, #12
   25c9e:	bd30      	pop	{r4, r5, pc}
   25ca0:	000386a7 	.word	0x000386a7
   25ca4:	00032679 	.word	0x00032679
   25ca8:	000385d0 	.word	0x000385d0
   25cac:	20021ac0 	.word	0x20021ac0
   25cb0:	0003341a 	.word	0x0003341a
   25cb4:	00033473 	.word	0x00033473
   25cb8:	00033488 	.word	0x00033488
   25cbc:	00033447 	.word	0x00033447
   25cc0:	0003345e 	.word	0x0003345e

00025cc4 <k_work_submit>:
{
   25cc4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   25cc6:	4801      	ldr	r0, [pc, #4]	; (25ccc <k_work_submit+0x8>)
   25cc8:	f00a bb02 	b.w	302d0 <k_work_submit_to_queue>
   25ccc:	2000a270 	.word	0x2000a270

00025cd0 <k_work_queue_init>:
{
   25cd0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   25cd2:	b958      	cbnz	r0, 25cec <k_work_queue_init+0x1c>
   25cd4:	4908      	ldr	r1, [pc, #32]	; (25cf8 <k_work_queue_init+0x28>)
   25cd6:	4809      	ldr	r0, [pc, #36]	; (25cfc <k_work_queue_init+0x2c>)
   25cd8:	f240 23b9 	movw	r3, #697	; 0x2b9
   25cdc:	4a08      	ldr	r2, [pc, #32]	; (25d00 <k_work_queue_init+0x30>)
   25cde:	f004 fcfc 	bl	2a6da <assert_print>
   25ce2:	f240 21b9 	movw	r1, #697	; 0x2b9
   25ce6:	4806      	ldr	r0, [pc, #24]	; (25d00 <k_work_queue_init+0x30>)
   25ce8:	f004 fcf0 	bl	2a6cc <assert_post_action>
	*queue = (struct k_work_q) {
   25cec:	22a8      	movs	r2, #168	; 0xa8
   25cee:	2100      	movs	r1, #0
   25cf0:	f00a fc87 	bl	30602 <memset>
}
   25cf4:	bd08      	pop	{r3, pc}
   25cf6:	bf00      	nop
   25cf8:	0003860e 	.word	0x0003860e
   25cfc:	00032679 	.word	0x00032679
   25d00:	000385d0 	.word	0x000385d0

00025d04 <k_work_queue_start>:
{
   25d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d06:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   25d08:	4604      	mov	r4, r0
{
   25d0a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   25d0c:	b958      	cbnz	r0, 25d26 <k_work_queue_start+0x22>
   25d0e:	492b      	ldr	r1, [pc, #172]	; (25dbc <k_work_queue_start+0xb8>)
   25d10:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   25d14:	4a2a      	ldr	r2, [pc, #168]	; (25dc0 <k_work_queue_start+0xbc>)
   25d16:	482b      	ldr	r0, [pc, #172]	; (25dc4 <k_work_queue_start+0xc0>)
   25d18:	f004 fcdf 	bl	2a6da <assert_print>
   25d1c:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   25d20:	4827      	ldr	r0, [pc, #156]	; (25dc0 <k_work_queue_start+0xbc>)
   25d22:	f004 fcd3 	bl	2a6cc <assert_post_action>
   25d26:	b949      	cbnz	r1, 25d3c <k_work_queue_start+0x38>
   25d28:	4927      	ldr	r1, [pc, #156]	; (25dc8 <k_work_queue_start+0xc4>)
   25d2a:	f240 23c9 	movw	r3, #713	; 0x2c9
   25d2e:	4a24      	ldr	r2, [pc, #144]	; (25dc0 <k_work_queue_start+0xbc>)
   25d30:	4824      	ldr	r0, [pc, #144]	; (25dc4 <k_work_queue_start+0xc0>)
   25d32:	f004 fcd2 	bl	2a6da <assert_print>
   25d36:	f240 21c9 	movw	r1, #713	; 0x2c9
   25d3a:	e7f1      	b.n	25d20 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   25d3c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   25d40:	f010 0001 	ands.w	r0, r0, #1
   25d44:	d009      	beq.n	25d5a <k_work_queue_start+0x56>
   25d46:	4921      	ldr	r1, [pc, #132]	; (25dcc <k_work_queue_start+0xc8>)
   25d48:	f240 23ca 	movw	r3, #714	; 0x2ca
   25d4c:	4a1c      	ldr	r2, [pc, #112]	; (25dc0 <k_work_queue_start+0xbc>)
   25d4e:	481d      	ldr	r0, [pc, #116]	; (25dc4 <k_work_queue_start+0xc0>)
   25d50:	f004 fcc3 	bl	2a6da <assert_print>
   25d54:	f240 21ca 	movw	r1, #714	; 0x2ca
   25d58:	e7e2      	b.n	25d20 <k_work_queue_start+0x1c>
	list->tail = NULL;
   25d5a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   25d5e:	f104 0090 	add.w	r0, r4, #144	; 0x90
	list->tail = (sys_dnode_t *)list;
   25d62:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
   25d66:	f104 0098 	add.w	r0, r4, #152	; 0x98
   25d6a:	e9c4 0026 	strd	r0, r0, [r4, #152]	; 0x98
	if ((cfg != NULL) && cfg->no_yield) {
   25d6e:	b31d      	cbz	r5, 25db8 <k_work_queue_start+0xb4>
   25d70:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   25d72:	2800      	cmp	r0, #0
   25d74:	f240 1001 	movw	r0, #257	; 0x101
   25d78:	bf08      	it	eq
   25d7a:	2001      	moveq	r0, #1
	*flagp = flags;
   25d7c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25d80:	2000      	movs	r0, #0
   25d82:	f04f 36ff 	mov.w	r6, #4294967295
   25d86:	f04f 37ff 	mov.w	r7, #4294967295
   25d8a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25d8e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25d92:	e9cd 6706 	strd	r6, r7, [sp, #24]
   25d96:	4620      	mov	r0, r4
   25d98:	4b0d      	ldr	r3, [pc, #52]	; (25dd0 <k_work_queue_start+0xcc>)
   25d9a:	9400      	str	r4, [sp, #0]
   25d9c:	f7ff f8a2 	bl	24ee4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   25da0:	b125      	cbz	r5, 25dac <k_work_queue_start+0xa8>
   25da2:	6829      	ldr	r1, [r5, #0]
   25da4:	b111      	cbz	r1, 25dac <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   25da6:	4620      	mov	r0, r4
   25da8:	f00a f9e4 	bl	30174 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25dac:	4620      	mov	r0, r4
}
   25dae:	b009      	add	sp, #36	; 0x24
   25db0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25db4:	f00a b9e3 	b.w	3017e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25db8:	2001      	movs	r0, #1
   25dba:	e7df      	b.n	25d7c <k_work_queue_start+0x78>
   25dbc:	00038666 	.word	0x00038666
   25dc0:	000385d0 	.word	0x000385d0
   25dc4:	00032679 	.word	0x00032679
   25dc8:	0003866c 	.word	0x0003866c
   25dcc:	00038672 	.word	0x00038672
   25dd0:	00025799 	.word	0x00025799

00025dd4 <k_work_queue_drain>:
{
   25dd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   25dd6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(queue);
   25dd8:	4604      	mov	r4, r0
   25dda:	b958      	cbnz	r0, 25df4 <k_work_queue_drain+0x20>
   25ddc:	493a      	ldr	r1, [pc, #232]	; (25ec8 <k_work_queue_drain+0xf4>)
   25dde:	f240 23ed 	movw	r3, #749	; 0x2ed
   25de2:	4a3a      	ldr	r2, [pc, #232]	; (25ecc <k_work_queue_drain+0xf8>)
   25de4:	483a      	ldr	r0, [pc, #232]	; (25ed0 <k_work_queue_drain+0xfc>)
   25de6:	f004 fc78 	bl	2a6da <assert_print>
   25dea:	f240 21ed 	movw	r1, #749	; 0x2ed
	__ASSERT_NO_MSG(!k_is_in_isr());
   25dee:	4837      	ldr	r0, [pc, #220]	; (25ecc <k_work_queue_drain+0xf8>)
   25df0:	f004 fc6c 	bl	2a6cc <assert_post_action>
   25df4:	f00a f9b8 	bl	30168 <k_is_in_isr>
   25df8:	b148      	cbz	r0, 25e0e <k_work_queue_drain+0x3a>
   25dfa:	4936      	ldr	r1, [pc, #216]	; (25ed4 <k_work_queue_drain+0x100>)
   25dfc:	f240 23ee 	movw	r3, #750	; 0x2ee
   25e00:	4a32      	ldr	r2, [pc, #200]	; (25ecc <k_work_queue_drain+0xf8>)
   25e02:	4833      	ldr	r0, [pc, #204]	; (25ed0 <k_work_queue_drain+0xfc>)
   25e04:	f004 fc69 	bl	2a6da <assert_print>
   25e08:	f240 21ee 	movw	r1, #750	; 0x2ee
   25e0c:	e7ef      	b.n	25dee <k_work_queue_drain+0x1a>
	__asm__ volatile(
   25e0e:	f04f 0320 	mov.w	r3, #32
   25e12:	f3ef 8611 	mrs	r6, BASEPRI
   25e16:	f383 8812 	msr	BASEPRI_MAX, r3
   25e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e1e:	482e      	ldr	r0, [pc, #184]	; (25ed8 <k_work_queue_drain+0x104>)
   25e20:	f7ff f92a 	bl	25078 <z_spin_lock_valid>
   25e24:	b960      	cbnz	r0, 25e40 <k_work_queue_drain+0x6c>
   25e26:	2394      	movs	r3, #148	; 0x94
   25e28:	4a2c      	ldr	r2, [pc, #176]	; (25edc <k_work_queue_drain+0x108>)
   25e2a:	492d      	ldr	r1, [pc, #180]	; (25ee0 <k_work_queue_drain+0x10c>)
   25e2c:	4828      	ldr	r0, [pc, #160]	; (25ed0 <k_work_queue_drain+0xfc>)
   25e2e:	f004 fc54 	bl	2a6da <assert_print>
   25e32:	4929      	ldr	r1, [pc, #164]	; (25ed8 <k_work_queue_drain+0x104>)
   25e34:	482b      	ldr	r0, [pc, #172]	; (25ee4 <k_work_queue_drain+0x110>)
   25e36:	f004 fc50 	bl	2a6da <assert_print>
   25e3a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e3c:	4827      	ldr	r0, [pc, #156]	; (25edc <k_work_queue_drain+0x108>)
   25e3e:	e7d7      	b.n	25df0 <k_work_queue_drain+0x1c>
	z_spin_lock_set_owner(l);
   25e40:	4825      	ldr	r0, [pc, #148]	; (25ed8 <k_work_queue_drain+0x104>)
   25e42:	f7ff f935 	bl	250b0 <z_spin_lock_set_owner>
	return *flagp;
   25e46:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	if (((flags_get(&queue->flags)
   25e4a:	f013 0f06 	tst.w	r3, #6
   25e4e:	d11d      	bne.n	25e8c <k_work_queue_drain+0xb8>
	    || plug
   25e50:	b1b5      	cbz	r5, 25e80 <k_work_queue_drain+0xac>
	*flagp |= BIT(bit);
   25e52:	f043 030c 	orr.w	r3, r3, #12
   25e56:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		notify_queue_locked(queue);
   25e5a:	4620      	mov	r0, r4
   25e5c:	f00a f9fe 	bl	3025c <notify_queue_locked.isra.0>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   25e60:	2300      	movs	r3, #0
   25e62:	f04f 32ff 	mov.w	r2, #4294967295
   25e66:	9302      	str	r3, [sp, #8]
   25e68:	f04f 33ff 	mov.w	r3, #4294967295
   25e6c:	4631      	mov	r1, r6
   25e6e:	e9cd 2300 	strd	r2, r3, [sp]
   25e72:	4819      	ldr	r0, [pc, #100]	; (25ed8 <k_work_queue_drain+0x104>)
   25e74:	f104 0298 	add.w	r2, r4, #152	; 0x98
   25e78:	f001 fc0a 	bl	27690 <z_sched_wait>
}
   25e7c:	b004      	add	sp, #16
   25e7e:	bd70      	pop	{r4, r5, r6, pc}
	    || !sys_slist_is_empty(&queue->pending)) {
   25e80:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
   25e84:	b14d      	cbz	r5, 25e9a <k_work_queue_drain+0xc6>
	*flagp |= BIT(bit);
   25e86:	f043 0304 	orr.w	r3, r3, #4
   25e8a:	e7e4      	b.n	25e56 <k_work_queue_drain+0x82>
   25e8c:	f043 0204 	orr.w	r2, r3, #4
   25e90:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
		if (plug) {
   25e94:	2d00      	cmp	r5, #0
   25e96:	d0e0      	beq.n	25e5a <k_work_queue_drain+0x86>
   25e98:	e7db      	b.n	25e52 <k_work_queue_drain+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e9a:	480f      	ldr	r0, [pc, #60]	; (25ed8 <k_work_queue_drain+0x104>)
   25e9c:	f7ff f8fa 	bl	25094 <z_spin_unlock_valid>
   25ea0:	b958      	cbnz	r0, 25eba <k_work_queue_drain+0xe6>
   25ea2:	23c2      	movs	r3, #194	; 0xc2
   25ea4:	4a0d      	ldr	r2, [pc, #52]	; (25edc <k_work_queue_drain+0x108>)
   25ea6:	4910      	ldr	r1, [pc, #64]	; (25ee8 <k_work_queue_drain+0x114>)
   25ea8:	4809      	ldr	r0, [pc, #36]	; (25ed0 <k_work_queue_drain+0xfc>)
   25eaa:	f004 fc16 	bl	2a6da <assert_print>
   25eae:	490a      	ldr	r1, [pc, #40]	; (25ed8 <k_work_queue_drain+0x104>)
   25eb0:	480e      	ldr	r0, [pc, #56]	; (25eec <k_work_queue_drain+0x118>)
   25eb2:	f004 fc12 	bl	2a6da <assert_print>
   25eb6:	21c2      	movs	r1, #194	; 0xc2
   25eb8:	e7c0      	b.n	25e3c <k_work_queue_drain+0x68>
	__asm__ volatile(
   25eba:	f386 8811 	msr	BASEPRI, r6
   25ebe:	f3bf 8f6f 	isb	sy
	int ret = 0;
   25ec2:	4628      	mov	r0, r5
	return ret;
   25ec4:	e7da      	b.n	25e7c <k_work_queue_drain+0xa8>
   25ec6:	bf00      	nop
   25ec8:	00038666 	.word	0x00038666
   25ecc:	000385d0 	.word	0x000385d0
   25ed0:	00032679 	.word	0x00032679
   25ed4:	0003564d 	.word	0x0003564d
   25ed8:	20021ac0 	.word	0x20021ac0
   25edc:	0003341a 	.word	0x0003341a
   25ee0:	00033473 	.word	0x00033473
   25ee4:	00033488 	.word	0x00033488
   25ee8:	00033447 	.word	0x00033447
   25eec:	0003345e 	.word	0x0003345e

00025ef0 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   25ef0:	b538      	push	{r3, r4, r5, lr}
   25ef2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25ef4:	4604      	mov	r4, r0
   25ef6:	b958      	cbnz	r0, 25f10 <k_work_init_delayable+0x20>
   25ef8:	490f      	ldr	r1, [pc, #60]	; (25f38 <k_work_init_delayable+0x48>)
   25efa:	f44f 7350 	mov.w	r3, #832	; 0x340
   25efe:	4a0f      	ldr	r2, [pc, #60]	; (25f3c <k_work_init_delayable+0x4c>)
   25f00:	480f      	ldr	r0, [pc, #60]	; (25f40 <k_work_init_delayable+0x50>)
   25f02:	f004 fbea 	bl	2a6da <assert_print>
   25f06:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   25f0a:	480c      	ldr	r0, [pc, #48]	; (25f3c <k_work_init_delayable+0x4c>)
   25f0c:	f004 fbde 	bl	2a6cc <assert_post_action>
   25f10:	b949      	cbnz	r1, 25f26 <k_work_init_delayable+0x36>
   25f12:	490c      	ldr	r1, [pc, #48]	; (25f44 <k_work_init_delayable+0x54>)
   25f14:	f240 3341 	movw	r3, #833	; 0x341
   25f18:	4a08      	ldr	r2, [pc, #32]	; (25f3c <k_work_init_delayable+0x4c>)
   25f1a:	4809      	ldr	r0, [pc, #36]	; (25f40 <k_work_init_delayable+0x50>)
   25f1c:	f004 fbdd 	bl	2a6da <assert_print>
   25f20:	f240 3141 	movw	r1, #833	; 0x341
   25f24:	e7f1      	b.n	25f0a <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   25f26:	2230      	movs	r2, #48	; 0x30
   25f28:	2100      	movs	r1, #0
   25f2a:	f00a fb6a 	bl	30602 <memset>
   25f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
   25f32:	6065      	str	r5, [r4, #4]
   25f34:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   25f36:	bd38      	pop	{r3, r4, r5, pc}
   25f38:	000386a6 	.word	0x000386a6
   25f3c:	000385d0 	.word	0x000385d0
   25f40:	00032679 	.word	0x00032679
   25f44:	000385f1 	.word	0x000385f1

00025f48 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f4a:	4616      	mov	r6, r2
   25f4c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25f4e:	460c      	mov	r4, r1
{
   25f50:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   25f52:	b959      	cbnz	r1, 25f6c <k_work_schedule_for_queue+0x24>
   25f54:	492d      	ldr	r1, [pc, #180]	; (2600c <k_work_schedule_for_queue+0xc4>)
   25f56:	482e      	ldr	r0, [pc, #184]	; (26010 <k_work_schedule_for_queue+0xc8>)
   25f58:	f240 33b7 	movw	r3, #951	; 0x3b7
   25f5c:	4a2d      	ldr	r2, [pc, #180]	; (26014 <k_work_schedule_for_queue+0xcc>)
   25f5e:	f004 fbbc 	bl	2a6da <assert_print>
   25f62:	f240 31b7 	movw	r1, #951	; 0x3b7
   25f66:	482b      	ldr	r0, [pc, #172]	; (26014 <k_work_schedule_for_queue+0xcc>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f68:	f004 fbb0 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   25f6c:	f04f 0320 	mov.w	r3, #32
   25f70:	f3ef 8711 	mrs	r7, BASEPRI
   25f74:	f383 8812 	msr	BASEPRI_MAX, r3
   25f78:	f3bf 8f6f 	isb	sy
   25f7c:	4826      	ldr	r0, [pc, #152]	; (26018 <k_work_schedule_for_queue+0xd0>)
   25f7e:	f7ff f87b 	bl	25078 <z_spin_lock_valid>
   25f82:	b960      	cbnz	r0, 25f9e <k_work_schedule_for_queue+0x56>
   25f84:	2394      	movs	r3, #148	; 0x94
   25f86:	4a25      	ldr	r2, [pc, #148]	; (2601c <k_work_schedule_for_queue+0xd4>)
   25f88:	4925      	ldr	r1, [pc, #148]	; (26020 <k_work_schedule_for_queue+0xd8>)
   25f8a:	4821      	ldr	r0, [pc, #132]	; (26010 <k_work_schedule_for_queue+0xc8>)
   25f8c:	f004 fba5 	bl	2a6da <assert_print>
   25f90:	4921      	ldr	r1, [pc, #132]	; (26018 <k_work_schedule_for_queue+0xd0>)
   25f92:	4824      	ldr	r0, [pc, #144]	; (26024 <k_work_schedule_for_queue+0xdc>)
   25f94:	f004 fba1 	bl	2a6da <assert_print>
   25f98:	2194      	movs	r1, #148	; 0x94
   25f9a:	4820      	ldr	r0, [pc, #128]	; (2601c <k_work_schedule_for_queue+0xd4>)
   25f9c:	e7e4      	b.n	25f68 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   25f9e:	481e      	ldr	r0, [pc, #120]	; (26018 <k_work_schedule_for_queue+0xd0>)
   25fa0:	f7ff f886 	bl	250b0 <z_spin_lock_set_owner>
	return *flagp;
   25fa4:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25fa6:	f013 0f0e 	tst.w	r3, #14
   25faa:	d125      	bne.n	25ff8 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25fac:	ea55 0206 	orrs.w	r2, r5, r6
   25fb0:	d114      	bne.n	25fdc <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   25fb2:	4620      	mov	r0, r4
   25fb4:	a901      	add	r1, sp, #4
   25fb6:	f7ff fd01 	bl	259bc <submit_to_queue_locked>
   25fba:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fbc:	4816      	ldr	r0, [pc, #88]	; (26018 <k_work_schedule_for_queue+0xd0>)
   25fbe:	f7ff f869 	bl	25094 <z_spin_unlock_valid>
   25fc2:	b9d8      	cbnz	r0, 25ffc <k_work_schedule_for_queue+0xb4>
   25fc4:	23c2      	movs	r3, #194	; 0xc2
   25fc6:	4a15      	ldr	r2, [pc, #84]	; (2601c <k_work_schedule_for_queue+0xd4>)
   25fc8:	4917      	ldr	r1, [pc, #92]	; (26028 <k_work_schedule_for_queue+0xe0>)
   25fca:	4811      	ldr	r0, [pc, #68]	; (26010 <k_work_schedule_for_queue+0xc8>)
   25fcc:	f004 fb85 	bl	2a6da <assert_print>
   25fd0:	4911      	ldr	r1, [pc, #68]	; (26018 <k_work_schedule_for_queue+0xd0>)
   25fd2:	4816      	ldr	r0, [pc, #88]	; (2602c <k_work_schedule_for_queue+0xe4>)
   25fd4:	f004 fb81 	bl	2a6da <assert_print>
   25fd8:	21c2      	movs	r1, #194	; 0xc2
   25fda:	e7de      	b.n	25f9a <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   25fdc:	f043 0308 	orr.w	r3, r3, #8
   25fe0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25fe2:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25fe4:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   25fe8:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25fea:	4632      	mov	r2, r6
   25fec:	462b      	mov	r3, r5
   25fee:	4910      	ldr	r1, [pc, #64]	; (26030 <k_work_schedule_for_queue+0xe8>)
   25ff0:	f001 fbc8 	bl	27784 <z_add_timeout>
	return ret;
   25ff4:	2401      	movs	r4, #1
   25ff6:	e7e1      	b.n	25fbc <k_work_schedule_for_queue+0x74>
	int ret = 0;
   25ff8:	2400      	movs	r4, #0
   25ffa:	e7df      	b.n	25fbc <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   25ffc:	f387 8811 	msr	BASEPRI, r7
   26000:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26004:	4620      	mov	r0, r4
   26006:	b003      	add	sp, #12
   26008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2600a:	bf00      	nop
   2600c:	000386a6 	.word	0x000386a6
   26010:	00032679 	.word	0x00032679
   26014:	000385d0 	.word	0x000385d0
   26018:	20021ac0 	.word	0x20021ac0
   2601c:	0003341a 	.word	0x0003341a
   26020:	00033473 	.word	0x00033473
   26024:	00033488 	.word	0x00033488
   26028:	00033447 	.word	0x00033447
   2602c:	0003345e 	.word	0x0003345e
   26030:	00025a95 	.word	0x00025a95

00026034 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26034:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26036:	4801      	ldr	r0, [pc, #4]	; (2603c <k_work_schedule+0x8>)
   26038:	f7ff bf86 	b.w	25f48 <k_work_schedule_for_queue>
   2603c:	2000a270 	.word	0x2000a270

00026040 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   26040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26042:	4616      	mov	r6, r2
   26044:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   26046:	460c      	mov	r4, r1
{
   26048:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   2604a:	b959      	cbnz	r1, 26064 <k_work_reschedule_for_queue+0x24>
   2604c:	492c      	ldr	r1, [pc, #176]	; (26100 <k_work_reschedule_for_queue+0xc0>)
   2604e:	482d      	ldr	r0, [pc, #180]	; (26104 <k_work_reschedule_for_queue+0xc4>)
   26050:	f240 33db 	movw	r3, #987	; 0x3db
   26054:	4a2c      	ldr	r2, [pc, #176]	; (26108 <k_work_reschedule_for_queue+0xc8>)
   26056:	f004 fb40 	bl	2a6da <assert_print>
   2605a:	f240 31db 	movw	r1, #987	; 0x3db
   2605e:	482a      	ldr	r0, [pc, #168]	; (26108 <k_work_reschedule_for_queue+0xc8>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26060:	f004 fb34 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   26064:	f04f 0320 	mov.w	r3, #32
   26068:	f3ef 8711 	mrs	r7, BASEPRI
   2606c:	f383 8812 	msr	BASEPRI_MAX, r3
   26070:	f3bf 8f6f 	isb	sy
   26074:	4825      	ldr	r0, [pc, #148]	; (2610c <k_work_reschedule_for_queue+0xcc>)
   26076:	f7fe ffff 	bl	25078 <z_spin_lock_valid>
   2607a:	b960      	cbnz	r0, 26096 <k_work_reschedule_for_queue+0x56>
   2607c:	2394      	movs	r3, #148	; 0x94
   2607e:	4a24      	ldr	r2, [pc, #144]	; (26110 <k_work_reschedule_for_queue+0xd0>)
   26080:	4924      	ldr	r1, [pc, #144]	; (26114 <k_work_reschedule_for_queue+0xd4>)
   26082:	4820      	ldr	r0, [pc, #128]	; (26104 <k_work_reschedule_for_queue+0xc4>)
   26084:	f004 fb29 	bl	2a6da <assert_print>
   26088:	4920      	ldr	r1, [pc, #128]	; (2610c <k_work_reschedule_for_queue+0xcc>)
   2608a:	4823      	ldr	r0, [pc, #140]	; (26118 <k_work_reschedule_for_queue+0xd8>)
   2608c:	f004 fb25 	bl	2a6da <assert_print>
   26090:	2194      	movs	r1, #148	; 0x94
   26092:	481f      	ldr	r0, [pc, #124]	; (26110 <k_work_reschedule_for_queue+0xd0>)
   26094:	e7e4      	b.n	26060 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   26096:	481d      	ldr	r0, [pc, #116]	; (2610c <k_work_reschedule_for_queue+0xcc>)
   26098:	f7ff f80a 	bl	250b0 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2609c:	4620      	mov	r0, r4
   2609e:	f00a f8cf 	bl	30240 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   260a2:	ea55 0306 	orrs.w	r3, r5, r6
   260a6:	d114      	bne.n	260d2 <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   260a8:	4620      	mov	r0, r4
   260aa:	a901      	add	r1, sp, #4
   260ac:	f7ff fc86 	bl	259bc <submit_to_queue_locked>
   260b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260b2:	4816      	ldr	r0, [pc, #88]	; (2610c <k_work_reschedule_for_queue+0xcc>)
   260b4:	f7fe ffee 	bl	25094 <z_spin_unlock_valid>
   260b8:	b9d0      	cbnz	r0, 260f0 <k_work_reschedule_for_queue+0xb0>
   260ba:	23c2      	movs	r3, #194	; 0xc2
   260bc:	4a14      	ldr	r2, [pc, #80]	; (26110 <k_work_reschedule_for_queue+0xd0>)
   260be:	4917      	ldr	r1, [pc, #92]	; (2611c <k_work_reschedule_for_queue+0xdc>)
   260c0:	4810      	ldr	r0, [pc, #64]	; (26104 <k_work_reschedule_for_queue+0xc4>)
   260c2:	f004 fb0a 	bl	2a6da <assert_print>
   260c6:	4911      	ldr	r1, [pc, #68]	; (2610c <k_work_reschedule_for_queue+0xcc>)
   260c8:	4815      	ldr	r0, [pc, #84]	; (26120 <k_work_reschedule_for_queue+0xe0>)
   260ca:	f004 fb06 	bl	2a6da <assert_print>
   260ce:	21c2      	movs	r1, #194	; 0xc2
   260d0:	e7df      	b.n	26092 <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   260d2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   260d4:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   260d8:	f043 0308 	orr.w	r3, r3, #8
   260dc:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   260de:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   260e0:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   260e2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   260e4:	490f      	ldr	r1, [pc, #60]	; (26124 <k_work_reschedule_for_queue+0xe4>)
   260e6:	462b      	mov	r3, r5
   260e8:	f001 fb4c 	bl	27784 <z_add_timeout>
	return ret;
   260ec:	2401      	movs	r4, #1
   260ee:	e7e0      	b.n	260b2 <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   260f0:	f387 8811 	msr	BASEPRI, r7
   260f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   260f8:	4620      	mov	r0, r4
   260fa:	b003      	add	sp, #12
   260fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   260fe:	bf00      	nop
   26100:	000386a6 	.word	0x000386a6
   26104:	00032679 	.word	0x00032679
   26108:	000385d0 	.word	0x000385d0
   2610c:	20021ac0 	.word	0x20021ac0
   26110:	0003341a 	.word	0x0003341a
   26114:	00033473 	.word	0x00033473
   26118:	00033488 	.word	0x00033488
   2611c:	00033447 	.word	0x00033447
   26120:	0003345e 	.word	0x0003345e
   26124:	00025a95 	.word	0x00025a95

00026128 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26128:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2612a:	4801      	ldr	r0, [pc, #4]	; (26130 <k_work_reschedule+0x8>)
   2612c:	f7ff bf88 	b.w	26040 <k_work_reschedule_for_queue>
   26130:	2000a270 	.word	0x2000a270

00026134 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   26134:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   26136:	4604      	mov	r4, r0
   26138:	b958      	cbnz	r0, 26152 <k_work_cancel_delayable+0x1e>
   2613a:	4922      	ldr	r1, [pc, #136]	; (261c4 <k_work_cancel_delayable+0x90>)
   2613c:	4822      	ldr	r0, [pc, #136]	; (261c8 <k_work_cancel_delayable+0x94>)
   2613e:	f240 33fd 	movw	r3, #1021	; 0x3fd
   26142:	4a22      	ldr	r2, [pc, #136]	; (261cc <k_work_cancel_delayable+0x98>)
   26144:	f004 fac9 	bl	2a6da <assert_print>
   26148:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2614c:	481f      	ldr	r0, [pc, #124]	; (261cc <k_work_cancel_delayable+0x98>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2614e:	f004 fabd 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   26152:	f04f 0320 	mov.w	r3, #32
   26156:	f3ef 8511 	mrs	r5, BASEPRI
   2615a:	f383 8812 	msr	BASEPRI_MAX, r3
   2615e:	f3bf 8f6f 	isb	sy
   26162:	481b      	ldr	r0, [pc, #108]	; (261d0 <k_work_cancel_delayable+0x9c>)
   26164:	f7fe ff88 	bl	25078 <z_spin_lock_valid>
   26168:	b960      	cbnz	r0, 26184 <k_work_cancel_delayable+0x50>
   2616a:	2394      	movs	r3, #148	; 0x94
   2616c:	4a19      	ldr	r2, [pc, #100]	; (261d4 <k_work_cancel_delayable+0xa0>)
   2616e:	491a      	ldr	r1, [pc, #104]	; (261d8 <k_work_cancel_delayable+0xa4>)
   26170:	4815      	ldr	r0, [pc, #84]	; (261c8 <k_work_cancel_delayable+0x94>)
   26172:	f004 fab2 	bl	2a6da <assert_print>
   26176:	4916      	ldr	r1, [pc, #88]	; (261d0 <k_work_cancel_delayable+0x9c>)
   26178:	4818      	ldr	r0, [pc, #96]	; (261dc <k_work_cancel_delayable+0xa8>)
   2617a:	f004 faae 	bl	2a6da <assert_print>
   2617e:	2194      	movs	r1, #148	; 0x94
   26180:	4814      	ldr	r0, [pc, #80]	; (261d4 <k_work_cancel_delayable+0xa0>)
   26182:	e7e4      	b.n	2614e <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   26184:	4812      	ldr	r0, [pc, #72]	; (261d0 <k_work_cancel_delayable+0x9c>)
   26186:	f7fe ff93 	bl	250b0 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2618a:	4620      	mov	r0, r4
   2618c:	f00a f858 	bl	30240 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26190:	4620      	mov	r0, r4
   26192:	f00a f86a 	bl	3026a <cancel_async_locked>
   26196:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26198:	480d      	ldr	r0, [pc, #52]	; (261d0 <k_work_cancel_delayable+0x9c>)
   2619a:	f7fe ff7b 	bl	25094 <z_spin_unlock_valid>
   2619e:	b958      	cbnz	r0, 261b8 <k_work_cancel_delayable+0x84>
   261a0:	23c2      	movs	r3, #194	; 0xc2
   261a2:	4a0c      	ldr	r2, [pc, #48]	; (261d4 <k_work_cancel_delayable+0xa0>)
   261a4:	490e      	ldr	r1, [pc, #56]	; (261e0 <k_work_cancel_delayable+0xac>)
   261a6:	4808      	ldr	r0, [pc, #32]	; (261c8 <k_work_cancel_delayable+0x94>)
   261a8:	f004 fa97 	bl	2a6da <assert_print>
   261ac:	4908      	ldr	r1, [pc, #32]	; (261d0 <k_work_cancel_delayable+0x9c>)
   261ae:	480d      	ldr	r0, [pc, #52]	; (261e4 <k_work_cancel_delayable+0xb0>)
   261b0:	f004 fa93 	bl	2a6da <assert_print>
   261b4:	21c2      	movs	r1, #194	; 0xc2
   261b6:	e7e3      	b.n	26180 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   261b8:	f385 8811 	msr	BASEPRI, r5
   261bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   261c0:	4620      	mov	r0, r4
   261c2:	bd38      	pop	{r3, r4, r5, pc}
   261c4:	000386a6 	.word	0x000386a6
   261c8:	00032679 	.word	0x00032679
   261cc:	000385d0 	.word	0x000385d0
   261d0:	20021ac0 	.word	0x20021ac0
   261d4:	0003341a 	.word	0x0003341a
   261d8:	00033473 	.word	0x00033473
   261dc:	00033488 	.word	0x00033488
   261e0:	00033447 	.word	0x00033447
   261e4:	0003345e 	.word	0x0003345e

000261e8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   261e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261ec:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   261ee:	4605      	mov	r5, r0
   261f0:	b958      	cbnz	r0, 2620a <k_work_cancel_delayable_sync+0x22>
   261f2:	493a      	ldr	r1, [pc, #232]	; (262dc <k_work_cancel_delayable_sync+0xf4>)
   261f4:	f240 430e 	movw	r3, #1038	; 0x40e
   261f8:	4a39      	ldr	r2, [pc, #228]	; (262e0 <k_work_cancel_delayable_sync+0xf8>)
   261fa:	483a      	ldr	r0, [pc, #232]	; (262e4 <k_work_cancel_delayable_sync+0xfc>)
   261fc:	f004 fa6d 	bl	2a6da <assert_print>
   26200:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   26204:	4836      	ldr	r0, [pc, #216]	; (262e0 <k_work_cancel_delayable_sync+0xf8>)
   26206:	f004 fa61 	bl	2a6cc <assert_post_action>
   2620a:	b949      	cbnz	r1, 26220 <k_work_cancel_delayable_sync+0x38>
   2620c:	4936      	ldr	r1, [pc, #216]	; (262e8 <k_work_cancel_delayable_sync+0x100>)
   2620e:	f240 430f 	movw	r3, #1039	; 0x40f
   26212:	4a33      	ldr	r2, [pc, #204]	; (262e0 <k_work_cancel_delayable_sync+0xf8>)
   26214:	4833      	ldr	r0, [pc, #204]	; (262e4 <k_work_cancel_delayable_sync+0xfc>)
   26216:	f004 fa60 	bl	2a6da <assert_print>
   2621a:	f240 410f 	movw	r1, #1039	; 0x40f
   2621e:	e7f1      	b.n	26204 <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   26220:	f009 ffa2 	bl	30168 <k_is_in_isr>
   26224:	4604      	mov	r4, r0
   26226:	b148      	cbz	r0, 2623c <k_work_cancel_delayable_sync+0x54>
   26228:	4930      	ldr	r1, [pc, #192]	; (262ec <k_work_cancel_delayable_sync+0x104>)
   2622a:	f44f 6382 	mov.w	r3, #1040	; 0x410
   2622e:	4a2c      	ldr	r2, [pc, #176]	; (262e0 <k_work_cancel_delayable_sync+0xf8>)
   26230:	482c      	ldr	r0, [pc, #176]	; (262e4 <k_work_cancel_delayable_sync+0xfc>)
   26232:	f004 fa52 	bl	2a6da <assert_print>
   26236:	f44f 6182 	mov.w	r1, #1040	; 0x410
   2623a:	e7e3      	b.n	26204 <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   2623c:	f04f 0320 	mov.w	r3, #32
   26240:	f3ef 8811 	mrs	r8, BASEPRI
   26244:	f383 8812 	msr	BASEPRI_MAX, r3
   26248:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2624c:	4828      	ldr	r0, [pc, #160]	; (262f0 <k_work_cancel_delayable_sync+0x108>)
   2624e:	f7fe ff13 	bl	25078 <z_spin_lock_valid>
   26252:	b960      	cbnz	r0, 2626e <k_work_cancel_delayable_sync+0x86>
   26254:	2394      	movs	r3, #148	; 0x94
   26256:	4a27      	ldr	r2, [pc, #156]	; (262f4 <k_work_cancel_delayable_sync+0x10c>)
   26258:	4927      	ldr	r1, [pc, #156]	; (262f8 <k_work_cancel_delayable_sync+0x110>)
   2625a:	4822      	ldr	r0, [pc, #136]	; (262e4 <k_work_cancel_delayable_sync+0xfc>)
   2625c:	f004 fa3d 	bl	2a6da <assert_print>
   26260:	4923      	ldr	r1, [pc, #140]	; (262f0 <k_work_cancel_delayable_sync+0x108>)
   26262:	4826      	ldr	r0, [pc, #152]	; (262fc <k_work_cancel_delayable_sync+0x114>)
   26264:	f004 fa39 	bl	2a6da <assert_print>
   26268:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2626a:	4822      	ldr	r0, [pc, #136]	; (262f4 <k_work_cancel_delayable_sync+0x10c>)
   2626c:	e7cb      	b.n	26206 <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   2626e:	4820      	ldr	r0, [pc, #128]	; (262f0 <k_work_cancel_delayable_sync+0x108>)
   26270:	f7fe ff1e 	bl	250b0 <z_spin_lock_set_owner>
	return *flagp;
   26274:	68eb      	ldr	r3, [r5, #12]
   26276:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2627a:	2b00      	cmp	r3, #0
   2627c:	bf14      	ite	ne
   2627e:	2701      	movne	r7, #1
   26280:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   26282:	d00a      	beq.n	2629a <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   26284:	4628      	mov	r0, r5
   26286:	f009 ffdb 	bl	30240 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2628a:	4628      	mov	r0, r5
   2628c:	f009 ffed 	bl	3026a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   26290:	4631      	mov	r1, r6
   26292:	4628      	mov	r0, r5
   26294:	f7ff fb74 	bl	25980 <cancel_sync_locked>
   26298:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2629a:	4815      	ldr	r0, [pc, #84]	; (262f0 <k_work_cancel_delayable_sync+0x108>)
   2629c:	f7fe fefa 	bl	25094 <z_spin_unlock_valid>
   262a0:	b958      	cbnz	r0, 262ba <k_work_cancel_delayable_sync+0xd2>
   262a2:	23c2      	movs	r3, #194	; 0xc2
   262a4:	4a13      	ldr	r2, [pc, #76]	; (262f4 <k_work_cancel_delayable_sync+0x10c>)
   262a6:	4916      	ldr	r1, [pc, #88]	; (26300 <k_work_cancel_delayable_sync+0x118>)
   262a8:	480e      	ldr	r0, [pc, #56]	; (262e4 <k_work_cancel_delayable_sync+0xfc>)
   262aa:	f004 fa16 	bl	2a6da <assert_print>
   262ae:	4910      	ldr	r1, [pc, #64]	; (262f0 <k_work_cancel_delayable_sync+0x108>)
   262b0:	4814      	ldr	r0, [pc, #80]	; (26304 <k_work_cancel_delayable_sync+0x11c>)
   262b2:	f004 fa12 	bl	2a6da <assert_print>
   262b6:	21c2      	movs	r1, #194	; 0xc2
   262b8:	e7d7      	b.n	2626a <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   262ba:	f388 8811 	msr	BASEPRI, r8
   262be:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   262c2:	b13c      	cbz	r4, 262d4 <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   262c4:	f04f 32ff 	mov.w	r2, #4294967295
   262c8:	f04f 33ff 	mov.w	r3, #4294967295
   262cc:	f106 0008 	add.w	r0, r6, #8
   262d0:	f7ff f9ce 	bl	25670 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   262d4:	4638      	mov	r0, r7
   262d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   262da:	bf00      	nop
   262dc:	000386a6 	.word	0x000386a6
   262e0:	000385d0 	.word	0x000385d0
   262e4:	00032679 	.word	0x00032679
   262e8:	00038652 	.word	0x00038652
   262ec:	0003564d 	.word	0x0003564d
   262f0:	20021ac0 	.word	0x20021ac0
   262f4:	0003341a 	.word	0x0003341a
   262f8:	00033473 	.word	0x00033473
   262fc:	00033488 	.word	0x00033488
   26300:	00033447 	.word	0x00033447
   26304:	0003345e 	.word	0x0003345e

00026308 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   26308:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2630a:	4d07      	ldr	r5, [pc, #28]	; (26328 <z_reset_time_slice+0x20>)
   2630c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2630e:	b154      	cbz	r4, 26326 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   26310:	f7f8 fa82 	bl	1e818 <sys_clock_elapsed>
   26314:	4b05      	ldr	r3, [pc, #20]	; (2632c <z_reset_time_slice+0x24>)
   26316:	4404      	add	r4, r0
   26318:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2631a:	6828      	ldr	r0, [r5, #0]
   2631c:	2100      	movs	r1, #0
	}
}
   2631e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   26322:	f001 bb87 	b.w	27a34 <z_set_timeout_expiry>
}
   26326:	bd38      	pop	{r3, r4, r5, pc}
   26328:	20021acc 	.word	0x20021acc
   2632c:	20021a88 	.word	0x20021a88

00026330 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   26330:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   26332:	4d14      	ldr	r5, [pc, #80]	; (26384 <update_cache+0x54>)
   26334:	462b      	mov	r3, r5
   26336:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2633a:	429c      	cmp	r4, r3
   2633c:	d000      	beq.n	26340 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2633e:	b904      	cbnz	r4, 26342 <update_cache+0x12>
   26340:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   26342:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   26344:	b9a8      	cbnz	r0, 26372 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   26346:	b963      	cbnz	r3, 26362 <update_cache+0x32>
   26348:	490f      	ldr	r1, [pc, #60]	; (26388 <update_cache+0x58>)
   2634a:	2389      	movs	r3, #137	; 0x89
   2634c:	4a0f      	ldr	r2, [pc, #60]	; (2638c <update_cache+0x5c>)
   2634e:	4810      	ldr	r0, [pc, #64]	; (26390 <update_cache+0x60>)
   26350:	f004 f9c3 	bl	2a6da <assert_print>
   26354:	480f      	ldr	r0, [pc, #60]	; (26394 <update_cache+0x64>)
   26356:	f004 f9c0 	bl	2a6da <assert_print>
   2635a:	2189      	movs	r1, #137	; 0x89
   2635c:	480b      	ldr	r0, [pc, #44]	; (2638c <update_cache+0x5c>)
   2635e:	f004 f9b5 	bl	2a6cc <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   26362:	7b5a      	ldrb	r2, [r3, #13]
   26364:	06d2      	lsls	r2, r2, #27
   26366:	d104      	bne.n	26372 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26368:	69a2      	ldr	r2, [r4, #24]
   2636a:	b912      	cbnz	r2, 26372 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   2636c:	89da      	ldrh	r2, [r3, #14]
   2636e:	2a7f      	cmp	r2, #127	; 0x7f
   26370:	d805      	bhi.n	2637e <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   26372:	429c      	cmp	r4, r3
   26374:	d002      	beq.n	2637c <update_cache+0x4c>
			z_reset_time_slice(thread);
   26376:	4620      	mov	r0, r4
   26378:	f7ff ffc6 	bl	26308 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   2637c:	4623      	mov	r3, r4
   2637e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   26380:	bd38      	pop	{r3, r4, r5, pc}
   26382:	bf00      	nop
   26384:	20021a88 	.word	0x20021a88
   26388:	000386dd 	.word	0x000386dd
   2638c:	000386bb 	.word	0x000386bb
   26390:	00032679 	.word	0x00032679
   26394:	00036916 	.word	0x00036916

00026398 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   26398:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2639a:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2639e:	7b42      	ldrb	r2, [r0, #13]
   263a0:	2b00      	cmp	r3, #0
   263a2:	db38      	blt.n	26416 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   263a4:	06d3      	lsls	r3, r2, #27
   263a6:	d136      	bne.n	26416 <ready_thread+0x7e>
	return node->next != NULL;
   263a8:	6983      	ldr	r3, [r0, #24]
   263aa:	2b00      	cmp	r3, #0
   263ac:	d133      	bne.n	26416 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   263ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
   263b2:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   263b4:	4a18      	ldr	r2, [pc, #96]	; (26418 <ready_thread+0x80>)
   263b6:	4290      	cmp	r0, r2
   263b8:	d109      	bne.n	263ce <ready_thread+0x36>
   263ba:	4918      	ldr	r1, [pc, #96]	; (2641c <ready_thread+0x84>)
   263bc:	4818      	ldr	r0, [pc, #96]	; (26420 <ready_thread+0x88>)
   263be:	23ba      	movs	r3, #186	; 0xba
   263c0:	4a18      	ldr	r2, [pc, #96]	; (26424 <ready_thread+0x8c>)
   263c2:	f004 f98a 	bl	2a6da <assert_print>
   263c6:	21ba      	movs	r1, #186	; 0xba
   263c8:	4816      	ldr	r0, [pc, #88]	; (26424 <ready_thread+0x8c>)
   263ca:	f004 f97f 	bl	2a6cc <assert_post_action>
	return list->head == list;
   263ce:	4916      	ldr	r1, [pc, #88]	; (26428 <ready_thread+0x90>)
   263d0:	460a      	mov	r2, r1
   263d2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   263d6:	4294      	cmp	r4, r2
   263d8:	bf18      	it	ne
   263da:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   263dc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   263de:	b923      	cbnz	r3, 263ea <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   263e0:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   263e4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   263e6:	6248      	str	r0, [r1, #36]	; 0x24
}
   263e8:	e00c      	b.n	26404 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   263ea:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   263ee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   263f2:	42b5      	cmp	r5, r6
   263f4:	d00b      	beq.n	2640e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   263f6:	42ae      	cmp	r6, r5
   263f8:	dd09      	ble.n	2640e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   263fa:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   263fc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   26400:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   26402:	6058      	str	r0, [r3, #4]
		SYS_PORT_TRACING_OBJ_FUNC(k_thread, sched_ready, thread);

		queue_thread(thread);
		update_cache(0);
   26404:	2000      	movs	r0, #0
		flag_ipi();
	}
}
   26406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2640a:	f7ff bf91 	b.w	26330 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2640e:	42a3      	cmp	r3, r4
   26410:	d0e6      	beq.n	263e0 <ready_thread+0x48>
   26412:	681b      	ldr	r3, [r3, #0]
   26414:	e7e3      	b.n	263de <ready_thread+0x46>
}
   26416:	bd70      	pop	{r4, r5, r6, pc}
   26418:	2000a160 	.word	0x2000a160
   2641c:	00038704 	.word	0x00038704
   26420:	00032679 	.word	0x00032679
   26424:	000386bb 	.word	0x000386bb
   26428:	20021a88 	.word	0x20021a88

0002642c <k_sched_time_slice_set>:
{
   2642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2642e:	4604      	mov	r4, r0
   26430:	460d      	mov	r5, r1
	__asm__ volatile(
   26432:	f04f 0320 	mov.w	r3, #32
   26436:	f3ef 8711 	mrs	r7, BASEPRI
   2643a:	f383 8812 	msr	BASEPRI_MAX, r3
   2643e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26442:	4822      	ldr	r0, [pc, #136]	; (264cc <k_sched_time_slice_set+0xa0>)
   26444:	f7fe fe18 	bl	25078 <z_spin_lock_valid>
   26448:	b968      	cbnz	r0, 26466 <k_sched_time_slice_set+0x3a>
   2644a:	2394      	movs	r3, #148	; 0x94
   2644c:	4a20      	ldr	r2, [pc, #128]	; (264d0 <k_sched_time_slice_set+0xa4>)
   2644e:	4921      	ldr	r1, [pc, #132]	; (264d4 <k_sched_time_slice_set+0xa8>)
   26450:	4821      	ldr	r0, [pc, #132]	; (264d8 <k_sched_time_slice_set+0xac>)
   26452:	f004 f942 	bl	2a6da <assert_print>
   26456:	491d      	ldr	r1, [pc, #116]	; (264cc <k_sched_time_slice_set+0xa0>)
   26458:	4820      	ldr	r0, [pc, #128]	; (264dc <k_sched_time_slice_set+0xb0>)
   2645a:	f004 f93e 	bl	2a6da <assert_print>
   2645e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26460:	481b      	ldr	r0, [pc, #108]	; (264d0 <k_sched_time_slice_set+0xa4>)
   26462:	f004 f933 	bl	2a6cc <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26466:	2600      	movs	r6, #0
	z_spin_lock_set_owner(l);
   26468:	4818      	ldr	r0, [pc, #96]	; (264cc <k_sched_time_slice_set+0xa0>)
   2646a:	f7fe fe21 	bl	250b0 <z_spin_lock_set_owner>
   2646e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   26472:	f240 30e7 	movw	r0, #999	; 0x3e7
   26476:	4631      	mov	r1, r6
   26478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2647c:	2300      	movs	r3, #0
   2647e:	fbe4 010c 	umlal	r0, r1, r4, ip
   26482:	f7e2 fd35 	bl	8ef0 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26486:	42b4      	cmp	r4, r6
   26488:	dd02      	ble.n	26490 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
   2648a:	2802      	cmp	r0, #2
   2648c:	bfb8      	it	lt
   2648e:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26490:	4a13      	ldr	r2, [pc, #76]	; (264e0 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
   26492:	4b14      	ldr	r3, [pc, #80]	; (264e4 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   26494:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   26496:	4a14      	ldr	r2, [pc, #80]	; (264e8 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
   26498:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   2649a:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2649c:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   2649e:	f7ff ff33 	bl	26308 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264a2:	480a      	ldr	r0, [pc, #40]	; (264cc <k_sched_time_slice_set+0xa0>)
   264a4:	f7fe fdf6 	bl	25094 <z_spin_unlock_valid>
   264a8:	b958      	cbnz	r0, 264c2 <k_sched_time_slice_set+0x96>
   264aa:	23c2      	movs	r3, #194	; 0xc2
   264ac:	4a08      	ldr	r2, [pc, #32]	; (264d0 <k_sched_time_slice_set+0xa4>)
   264ae:	490f      	ldr	r1, [pc, #60]	; (264ec <k_sched_time_slice_set+0xc0>)
   264b0:	4809      	ldr	r0, [pc, #36]	; (264d8 <k_sched_time_slice_set+0xac>)
   264b2:	f004 f912 	bl	2a6da <assert_print>
   264b6:	4905      	ldr	r1, [pc, #20]	; (264cc <k_sched_time_slice_set+0xa0>)
   264b8:	480d      	ldr	r0, [pc, #52]	; (264f0 <k_sched_time_slice_set+0xc4>)
   264ba:	f004 f90e 	bl	2a6da <assert_print>
   264be:	21c2      	movs	r1, #194	; 0xc2
   264c0:	e7ce      	b.n	26460 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
   264c2:	f387 8811 	msr	BASEPRI, r7
   264c6:	f3bf 8f6f 	isb	sy
}
   264ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   264cc:	20021ad0 	.word	0x20021ad0
   264d0:	0003341a 	.word	0x0003341a
   264d4:	00033473 	.word	0x00033473
   264d8:	00032679 	.word	0x00032679
   264dc:	00033488 	.word	0x00033488
   264e0:	20021acc 	.word	0x20021acc
   264e4:	20021a88 	.word	0x20021a88
   264e8:	20021ac8 	.word	0x20021ac8
   264ec:	00033447 	.word	0x00033447
   264f0:	0003345e 	.word	0x0003345e

000264f4 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   264f4:	b538      	push	{r3, r4, r5, lr}
   264f6:	4604      	mov	r4, r0
	__asm__ volatile(
   264f8:	f04f 0320 	mov.w	r3, #32
   264fc:	f3ef 8511 	mrs	r5, BASEPRI
   26500:	f383 8812 	msr	BASEPRI_MAX, r3
   26504:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26508:	4816      	ldr	r0, [pc, #88]	; (26564 <z_ready_thread+0x70>)
   2650a:	f7fe fdb5 	bl	25078 <z_spin_lock_valid>
   2650e:	b968      	cbnz	r0, 2652c <z_ready_thread+0x38>
   26510:	2394      	movs	r3, #148	; 0x94
   26512:	4a15      	ldr	r2, [pc, #84]	; (26568 <z_ready_thread+0x74>)
   26514:	4915      	ldr	r1, [pc, #84]	; (2656c <z_ready_thread+0x78>)
   26516:	4816      	ldr	r0, [pc, #88]	; (26570 <z_ready_thread+0x7c>)
   26518:	f004 f8df 	bl	2a6da <assert_print>
   2651c:	4911      	ldr	r1, [pc, #68]	; (26564 <z_ready_thread+0x70>)
   2651e:	4815      	ldr	r0, [pc, #84]	; (26574 <z_ready_thread+0x80>)
   26520:	f004 f8db 	bl	2a6da <assert_print>
   26524:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26526:	4810      	ldr	r0, [pc, #64]	; (26568 <z_ready_thread+0x74>)
   26528:	f004 f8d0 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   2652c:	480d      	ldr	r0, [pc, #52]	; (26564 <z_ready_thread+0x70>)
   2652e:	f7fe fdbf 	bl	250b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   26532:	4620      	mov	r0, r4
   26534:	f7ff ff30 	bl	26398 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26538:	480a      	ldr	r0, [pc, #40]	; (26564 <z_ready_thread+0x70>)
   2653a:	f7fe fdab 	bl	25094 <z_spin_unlock_valid>
   2653e:	b958      	cbnz	r0, 26558 <z_ready_thread+0x64>
   26540:	23c2      	movs	r3, #194	; 0xc2
   26542:	4a09      	ldr	r2, [pc, #36]	; (26568 <z_ready_thread+0x74>)
   26544:	490c      	ldr	r1, [pc, #48]	; (26578 <z_ready_thread+0x84>)
   26546:	480a      	ldr	r0, [pc, #40]	; (26570 <z_ready_thread+0x7c>)
   26548:	f004 f8c7 	bl	2a6da <assert_print>
   2654c:	4905      	ldr	r1, [pc, #20]	; (26564 <z_ready_thread+0x70>)
   2654e:	480b      	ldr	r0, [pc, #44]	; (2657c <z_ready_thread+0x88>)
   26550:	f004 f8c3 	bl	2a6da <assert_print>
   26554:	21c2      	movs	r1, #194	; 0xc2
   26556:	e7e6      	b.n	26526 <z_ready_thread+0x32>
	__asm__ volatile(
   26558:	f385 8811 	msr	BASEPRI, r5
   2655c:	f3bf 8f6f 	isb	sy
		}
	}
}
   26560:	bd38      	pop	{r3, r4, r5, pc}
   26562:	bf00      	nop
   26564:	20021ad0 	.word	0x20021ad0
   26568:	0003341a 	.word	0x0003341a
   2656c:	00033473 	.word	0x00033473
   26570:	00032679 	.word	0x00032679
   26574:	00033488 	.word	0x00033488
   26578:	00033447 	.word	0x00033447
   2657c:	0003345e 	.word	0x0003345e

00026580 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   26580:	b538      	push	{r3, r4, r5, lr}
   26582:	4604      	mov	r4, r0
	__asm__ volatile(
   26584:	f04f 0320 	mov.w	r3, #32
   26588:	f3ef 8511 	mrs	r5, BASEPRI
   2658c:	f383 8812 	msr	BASEPRI_MAX, r3
   26590:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26594:	4816      	ldr	r0, [pc, #88]	; (265f0 <z_unpend_thread_no_timeout+0x70>)
   26596:	f7fe fd6f 	bl	25078 <z_spin_lock_valid>
   2659a:	b968      	cbnz	r0, 265b8 <z_unpend_thread_no_timeout+0x38>
   2659c:	2394      	movs	r3, #148	; 0x94
   2659e:	4a15      	ldr	r2, [pc, #84]	; (265f4 <z_unpend_thread_no_timeout+0x74>)
   265a0:	4915      	ldr	r1, [pc, #84]	; (265f8 <z_unpend_thread_no_timeout+0x78>)
   265a2:	4816      	ldr	r0, [pc, #88]	; (265fc <z_unpend_thread_no_timeout+0x7c>)
   265a4:	f004 f899 	bl	2a6da <assert_print>
   265a8:	4911      	ldr	r1, [pc, #68]	; (265f0 <z_unpend_thread_no_timeout+0x70>)
   265aa:	4815      	ldr	r0, [pc, #84]	; (26600 <z_unpend_thread_no_timeout+0x80>)
   265ac:	f004 f895 	bl	2a6da <assert_print>
   265b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265b2:	4810      	ldr	r0, [pc, #64]	; (265f4 <z_unpend_thread_no_timeout+0x74>)
   265b4:	f004 f88a 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   265b8:	480d      	ldr	r0, [pc, #52]	; (265f0 <z_unpend_thread_no_timeout+0x70>)
   265ba:	f7fe fd79 	bl	250b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   265be:	4620      	mov	r0, r4
   265c0:	f000 fc62 	bl	26e88 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265c4:	480a      	ldr	r0, [pc, #40]	; (265f0 <z_unpend_thread_no_timeout+0x70>)
   265c6:	f7fe fd65 	bl	25094 <z_spin_unlock_valid>
   265ca:	b958      	cbnz	r0, 265e4 <z_unpend_thread_no_timeout+0x64>
   265cc:	23c2      	movs	r3, #194	; 0xc2
   265ce:	4a09      	ldr	r2, [pc, #36]	; (265f4 <z_unpend_thread_no_timeout+0x74>)
   265d0:	490c      	ldr	r1, [pc, #48]	; (26604 <z_unpend_thread_no_timeout+0x84>)
   265d2:	480a      	ldr	r0, [pc, #40]	; (265fc <z_unpend_thread_no_timeout+0x7c>)
   265d4:	f004 f881 	bl	2a6da <assert_print>
   265d8:	4905      	ldr	r1, [pc, #20]	; (265f0 <z_unpend_thread_no_timeout+0x70>)
   265da:	480b      	ldr	r0, [pc, #44]	; (26608 <z_unpend_thread_no_timeout+0x88>)
   265dc:	f004 f87d 	bl	2a6da <assert_print>
   265e0:	21c2      	movs	r1, #194	; 0xc2
   265e2:	e7e6      	b.n	265b2 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   265e4:	f385 8811 	msr	BASEPRI, r5
   265e8:	f3bf 8f6f 	isb	sy
	}
}
   265ec:	bd38      	pop	{r3, r4, r5, pc}
   265ee:	bf00      	nop
   265f0:	20021ad0 	.word	0x20021ad0
   265f4:	0003341a 	.word	0x0003341a
   265f8:	00033473 	.word	0x00033473
   265fc:	00032679 	.word	0x00032679
   26600:	00033488 	.word	0x00033488
   26604:	00033447 	.word	0x00033447
   26608:	0003345e 	.word	0x0003345e

0002660c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   2660c:	b570      	push	{r4, r5, r6, lr}
   2660e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26610:	460d      	mov	r5, r1
   26612:	b9e9      	cbnz	r1, 26650 <z_reschedule+0x44>
   26614:	f3ef 8605 	mrs	r6, IPSR
   26618:	b9d6      	cbnz	r6, 26650 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   2661a:	4b18      	ldr	r3, [pc, #96]	; (2667c <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   2661c:	69da      	ldr	r2, [r3, #28]
   2661e:	689b      	ldr	r3, [r3, #8]
   26620:	429a      	cmp	r2, r3
   26622:	d015      	beq.n	26650 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26624:	f7fe fd36 	bl	25094 <z_spin_unlock_valid>
   26628:	b968      	cbnz	r0, 26646 <z_reschedule+0x3a>
   2662a:	23e1      	movs	r3, #225	; 0xe1
   2662c:	4a14      	ldr	r2, [pc, #80]	; (26680 <z_reschedule+0x74>)
   2662e:	4915      	ldr	r1, [pc, #84]	; (26684 <z_reschedule+0x78>)
   26630:	4815      	ldr	r0, [pc, #84]	; (26688 <z_reschedule+0x7c>)
   26632:	f004 f852 	bl	2a6da <assert_print>
   26636:	4621      	mov	r1, r4
   26638:	4814      	ldr	r0, [pc, #80]	; (2668c <z_reschedule+0x80>)
   2663a:	f004 f84e 	bl	2a6da <assert_print>
   2663e:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26640:	480f      	ldr	r0, [pc, #60]	; (26680 <z_reschedule+0x74>)
   26642:	f004 f843 	bl	2a6cc <assert_post_action>
	ret = arch_swap(key);
   26646:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   26648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2664c:	f7ea ba78 	b.w	10b40 <arch_swap>
   26650:	4620      	mov	r0, r4
   26652:	f7fe fd1f 	bl	25094 <z_spin_unlock_valid>
   26656:	b958      	cbnz	r0, 26670 <z_reschedule+0x64>
   26658:	23c2      	movs	r3, #194	; 0xc2
   2665a:	4a09      	ldr	r2, [pc, #36]	; (26680 <z_reschedule+0x74>)
   2665c:	4909      	ldr	r1, [pc, #36]	; (26684 <z_reschedule+0x78>)
   2665e:	480a      	ldr	r0, [pc, #40]	; (26688 <z_reschedule+0x7c>)
   26660:	f004 f83b 	bl	2a6da <assert_print>
   26664:	4621      	mov	r1, r4
   26666:	4809      	ldr	r0, [pc, #36]	; (2668c <z_reschedule+0x80>)
   26668:	f004 f837 	bl	2a6da <assert_print>
   2666c:	21c2      	movs	r1, #194	; 0xc2
   2666e:	e7e7      	b.n	26640 <z_reschedule+0x34>
   26670:	f385 8811 	msr	BASEPRI, r5
   26674:	f3bf 8f6f 	isb	sy
   26678:	bd70      	pop	{r4, r5, r6, pc}
   2667a:	bf00      	nop
   2667c:	20021a88 	.word	0x20021a88
   26680:	0003341a 	.word	0x0003341a
   26684:	00033447 	.word	0x00033447
   26688:	00032679 	.word	0x00032679
   2668c:	0003345e 	.word	0x0003345e

00026690 <z_sched_start>:
{
   26690:	b538      	push	{r3, r4, r5, lr}
   26692:	4604      	mov	r4, r0
	__asm__ volatile(
   26694:	f04f 0320 	mov.w	r3, #32
   26698:	f3ef 8511 	mrs	r5, BASEPRI
   2669c:	f383 8812 	msr	BASEPRI_MAX, r3
   266a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   266a4:	481c      	ldr	r0, [pc, #112]	; (26718 <z_sched_start+0x88>)
   266a6:	f7fe fce7 	bl	25078 <z_spin_lock_valid>
   266aa:	b968      	cbnz	r0, 266c8 <z_sched_start+0x38>
   266ac:	2394      	movs	r3, #148	; 0x94
   266ae:	4a1b      	ldr	r2, [pc, #108]	; (2671c <z_sched_start+0x8c>)
   266b0:	491b      	ldr	r1, [pc, #108]	; (26720 <z_sched_start+0x90>)
   266b2:	481c      	ldr	r0, [pc, #112]	; (26724 <z_sched_start+0x94>)
   266b4:	f004 f811 	bl	2a6da <assert_print>
   266b8:	4917      	ldr	r1, [pc, #92]	; (26718 <z_sched_start+0x88>)
   266ba:	481b      	ldr	r0, [pc, #108]	; (26728 <z_sched_start+0x98>)
   266bc:	f004 f80d 	bl	2a6da <assert_print>
   266c0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266c2:	4816      	ldr	r0, [pc, #88]	; (2671c <z_sched_start+0x8c>)
   266c4:	f004 f802 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   266c8:	4813      	ldr	r0, [pc, #76]	; (26718 <z_sched_start+0x88>)
   266ca:	f7fe fcf1 	bl	250b0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   266ce:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   266d0:	075a      	lsls	r2, r3, #29
   266d2:	d414      	bmi.n	266fe <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266d4:	4810      	ldr	r0, [pc, #64]	; (26718 <z_sched_start+0x88>)
   266d6:	f7fe fcdd 	bl	25094 <z_spin_unlock_valid>
   266da:	b958      	cbnz	r0, 266f4 <z_sched_start+0x64>
   266dc:	23c2      	movs	r3, #194	; 0xc2
   266de:	4a0f      	ldr	r2, [pc, #60]	; (2671c <z_sched_start+0x8c>)
   266e0:	4912      	ldr	r1, [pc, #72]	; (2672c <z_sched_start+0x9c>)
   266e2:	4810      	ldr	r0, [pc, #64]	; (26724 <z_sched_start+0x94>)
   266e4:	f003 fff9 	bl	2a6da <assert_print>
   266e8:	490b      	ldr	r1, [pc, #44]	; (26718 <z_sched_start+0x88>)
   266ea:	4811      	ldr	r0, [pc, #68]	; (26730 <z_sched_start+0xa0>)
   266ec:	f003 fff5 	bl	2a6da <assert_print>
   266f0:	21c2      	movs	r1, #194	; 0xc2
   266f2:	e7e6      	b.n	266c2 <z_sched_start+0x32>
	__asm__ volatile(
   266f4:	f385 8811 	msr	BASEPRI, r5
   266f8:	f3bf 8f6f 	isb	sy
}
   266fc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   266fe:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   26702:	4620      	mov	r0, r4
   26704:	7363      	strb	r3, [r4, #13]
   26706:	f7ff fe47 	bl	26398 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2670a:	4629      	mov	r1, r5
}
   2670c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   26710:	4801      	ldr	r0, [pc, #4]	; (26718 <z_sched_start+0x88>)
   26712:	f7ff bf7b 	b.w	2660c <z_reschedule>
   26716:	bf00      	nop
   26718:	20021ad0 	.word	0x20021ad0
   2671c:	0003341a 	.word	0x0003341a
   26720:	00033473 	.word	0x00033473
   26724:	00032679 	.word	0x00032679
   26728:	00033488 	.word	0x00033488
   2672c:	00033447 	.word	0x00033447
   26730:	0003345e 	.word	0x0003345e

00026734 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   26734:	b510      	push	{r4, lr}
	__asm__ volatile(
   26736:	f04f 0320 	mov.w	r3, #32
   2673a:	f3ef 8411 	mrs	r4, BASEPRI
   2673e:	f383 8812 	msr	BASEPRI_MAX, r3
   26742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26746:	4825      	ldr	r0, [pc, #148]	; (267dc <k_sched_lock+0xa8>)
   26748:	f7fe fc96 	bl	25078 <z_spin_lock_valid>
   2674c:	b960      	cbnz	r0, 26768 <k_sched_lock+0x34>
   2674e:	2394      	movs	r3, #148	; 0x94
   26750:	4a23      	ldr	r2, [pc, #140]	; (267e0 <k_sched_lock+0xac>)
   26752:	4924      	ldr	r1, [pc, #144]	; (267e4 <k_sched_lock+0xb0>)
   26754:	4824      	ldr	r0, [pc, #144]	; (267e8 <k_sched_lock+0xb4>)
   26756:	f003 ffc0 	bl	2a6da <assert_print>
   2675a:	4920      	ldr	r1, [pc, #128]	; (267dc <k_sched_lock+0xa8>)
   2675c:	4823      	ldr	r0, [pc, #140]	; (267ec <k_sched_lock+0xb8>)
   2675e:	f003 ffbc 	bl	2a6da <assert_print>
   26762:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26764:	481e      	ldr	r0, [pc, #120]	; (267e0 <k_sched_lock+0xac>)
   26766:	e010      	b.n	2678a <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   26768:	481c      	ldr	r0, [pc, #112]	; (267dc <k_sched_lock+0xa8>)
   2676a:	f7fe fca1 	bl	250b0 <z_spin_lock_set_owner>
   2676e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26772:	b163      	cbz	r3, 2678e <k_sched_lock+0x5a>
   26774:	491e      	ldr	r1, [pc, #120]	; (267f0 <k_sched_lock+0xbc>)
   26776:	23fd      	movs	r3, #253	; 0xfd
   26778:	4a1e      	ldr	r2, [pc, #120]	; (267f4 <k_sched_lock+0xc0>)
   2677a:	481b      	ldr	r0, [pc, #108]	; (267e8 <k_sched_lock+0xb4>)
   2677c:	f003 ffad 	bl	2a6da <assert_print>
   26780:	481d      	ldr	r0, [pc, #116]	; (267f8 <k_sched_lock+0xc4>)
   26782:	f003 ffaa 	bl	2a6da <assert_print>
   26786:	21fd      	movs	r1, #253	; 0xfd
   26788:	481a      	ldr	r0, [pc, #104]	; (267f4 <k_sched_lock+0xc0>)
   2678a:	f003 ff9f 	bl	2a6cc <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   2678e:	4b1b      	ldr	r3, [pc, #108]	; (267fc <k_sched_lock+0xc8>)
   26790:	689a      	ldr	r2, [r3, #8]
   26792:	7bd3      	ldrb	r3, [r2, #15]
   26794:	2b01      	cmp	r3, #1
   26796:	d10a      	bne.n	267ae <k_sched_lock+0x7a>
   26798:	4919      	ldr	r1, [pc, #100]	; (26800 <k_sched_lock+0xcc>)
   2679a:	23fe      	movs	r3, #254	; 0xfe
   2679c:	4a15      	ldr	r2, [pc, #84]	; (267f4 <k_sched_lock+0xc0>)
   2679e:	4812      	ldr	r0, [pc, #72]	; (267e8 <k_sched_lock+0xb4>)
   267a0:	f003 ff9b 	bl	2a6da <assert_print>
   267a4:	4814      	ldr	r0, [pc, #80]	; (267f8 <k_sched_lock+0xc4>)
   267a6:	f003 ff98 	bl	2a6da <assert_print>
   267aa:	21fe      	movs	r1, #254	; 0xfe
   267ac:	e7ec      	b.n	26788 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   267ae:	3b01      	subs	r3, #1
   267b0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   267b2:	480a      	ldr	r0, [pc, #40]	; (267dc <k_sched_lock+0xa8>)
   267b4:	f7fe fc6e 	bl	25094 <z_spin_unlock_valid>
   267b8:	b958      	cbnz	r0, 267d2 <k_sched_lock+0x9e>
   267ba:	23c2      	movs	r3, #194	; 0xc2
   267bc:	4a08      	ldr	r2, [pc, #32]	; (267e0 <k_sched_lock+0xac>)
   267be:	4911      	ldr	r1, [pc, #68]	; (26804 <k_sched_lock+0xd0>)
   267c0:	4809      	ldr	r0, [pc, #36]	; (267e8 <k_sched_lock+0xb4>)
   267c2:	f003 ff8a 	bl	2a6da <assert_print>
   267c6:	4905      	ldr	r1, [pc, #20]	; (267dc <k_sched_lock+0xa8>)
   267c8:	480f      	ldr	r0, [pc, #60]	; (26808 <k_sched_lock+0xd4>)
   267ca:	f003 ff86 	bl	2a6da <assert_print>
   267ce:	21c2      	movs	r1, #194	; 0xc2
   267d0:	e7c8      	b.n	26764 <k_sched_lock+0x30>
	__asm__ volatile(
   267d2:	f384 8811 	msr	BASEPRI, r4
   267d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   267da:	bd10      	pop	{r4, pc}
   267dc:	20021ad0 	.word	0x20021ad0
   267e0:	0003341a 	.word	0x0003341a
   267e4:	00033473 	.word	0x00033473
   267e8:	00032679 	.word	0x00032679
   267ec:	00033488 	.word	0x00033488
   267f0:	0003844e 	.word	0x0003844e
   267f4:	00038725 	.word	0x00038725
   267f8:	00036916 	.word	0x00036916
   267fc:	20021a88 	.word	0x20021a88
   26800:	00038750 	.word	0x00038750
   26804:	00033447 	.word	0x00033447
   26808:	0003345e 	.word	0x0003345e

0002680c <k_sched_unlock>:

void k_sched_unlock(void)
{
   2680c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2680e:	f04f 0320 	mov.w	r3, #32
   26812:	f3ef 8411 	mrs	r4, BASEPRI
   26816:	f383 8812 	msr	BASEPRI_MAX, r3
   2681a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2681e:	4829      	ldr	r0, [pc, #164]	; (268c4 <k_sched_unlock+0xb8>)
   26820:	f7fe fc2a 	bl	25078 <z_spin_lock_valid>
   26824:	b960      	cbnz	r0, 26840 <k_sched_unlock+0x34>
   26826:	2394      	movs	r3, #148	; 0x94
   26828:	4a27      	ldr	r2, [pc, #156]	; (268c8 <k_sched_unlock+0xbc>)
   2682a:	4928      	ldr	r1, [pc, #160]	; (268cc <k_sched_unlock+0xc0>)
   2682c:	4828      	ldr	r0, [pc, #160]	; (268d0 <k_sched_unlock+0xc4>)
   2682e:	f003 ff54 	bl	2a6da <assert_print>
   26832:	4924      	ldr	r1, [pc, #144]	; (268c4 <k_sched_unlock+0xb8>)
   26834:	4827      	ldr	r0, [pc, #156]	; (268d4 <k_sched_unlock+0xc8>)
   26836:	f003 ff50 	bl	2a6da <assert_print>
   2683a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2683c:	4822      	ldr	r0, [pc, #136]	; (268c8 <k_sched_unlock+0xbc>)
   2683e:	e013      	b.n	26868 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   26840:	4820      	ldr	r0, [pc, #128]	; (268c4 <k_sched_unlock+0xb8>)
   26842:	f7fe fc35 	bl	250b0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   26846:	4b24      	ldr	r3, [pc, #144]	; (268d8 <k_sched_unlock+0xcc>)
   26848:	689a      	ldr	r2, [r3, #8]
   2684a:	7bd3      	ldrb	r3, [r2, #15]
   2684c:	b973      	cbnz	r3, 2686c <k_sched_unlock+0x60>
   2684e:	4923      	ldr	r1, [pc, #140]	; (268dc <k_sched_unlock+0xd0>)
   26850:	f240 33e7 	movw	r3, #999	; 0x3e7
   26854:	4a22      	ldr	r2, [pc, #136]	; (268e0 <k_sched_unlock+0xd4>)
   26856:	481e      	ldr	r0, [pc, #120]	; (268d0 <k_sched_unlock+0xc4>)
   26858:	f003 ff3f 	bl	2a6da <assert_print>
   2685c:	4821      	ldr	r0, [pc, #132]	; (268e4 <k_sched_unlock+0xd8>)
   2685e:	f003 ff3c 	bl	2a6da <assert_print>
   26862:	f240 31e7 	movw	r1, #999	; 0x3e7
   26866:	481e      	ldr	r0, [pc, #120]	; (268e0 <k_sched_unlock+0xd4>)
   26868:	f003 ff30 	bl	2a6cc <assert_post_action>
   2686c:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   26870:	b160      	cbz	r0, 2688c <k_sched_unlock+0x80>
   26872:	491d      	ldr	r1, [pc, #116]	; (268e8 <k_sched_unlock+0xdc>)
   26874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26878:	4a19      	ldr	r2, [pc, #100]	; (268e0 <k_sched_unlock+0xd4>)
   2687a:	4815      	ldr	r0, [pc, #84]	; (268d0 <k_sched_unlock+0xc4>)
   2687c:	f003 ff2d 	bl	2a6da <assert_print>
   26880:	4818      	ldr	r0, [pc, #96]	; (268e4 <k_sched_unlock+0xd8>)
   26882:	f003 ff2a 	bl	2a6da <assert_print>
   26886:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2688a:	e7ec      	b.n	26866 <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   2688c:	3301      	adds	r3, #1
   2688e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   26890:	f7ff fd4e 	bl	26330 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26894:	480b      	ldr	r0, [pc, #44]	; (268c4 <k_sched_unlock+0xb8>)
   26896:	f7fe fbfd 	bl	25094 <z_spin_unlock_valid>
   2689a:	b958      	cbnz	r0, 268b4 <k_sched_unlock+0xa8>
   2689c:	23c2      	movs	r3, #194	; 0xc2
   2689e:	4a0a      	ldr	r2, [pc, #40]	; (268c8 <k_sched_unlock+0xbc>)
   268a0:	4912      	ldr	r1, [pc, #72]	; (268ec <k_sched_unlock+0xe0>)
   268a2:	480b      	ldr	r0, [pc, #44]	; (268d0 <k_sched_unlock+0xc4>)
   268a4:	f003 ff19 	bl	2a6da <assert_print>
   268a8:	4906      	ldr	r1, [pc, #24]	; (268c4 <k_sched_unlock+0xb8>)
   268aa:	4811      	ldr	r0, [pc, #68]	; (268f0 <k_sched_unlock+0xe4>)
   268ac:	f003 ff15 	bl	2a6da <assert_print>
   268b0:	21c2      	movs	r1, #194	; 0xc2
   268b2:	e7c3      	b.n	2683c <k_sched_unlock+0x30>
	__asm__ volatile(
   268b4:	f384 8811 	msr	BASEPRI, r4
   268b8:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   268bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   268c0:	f009 bd2e 	b.w	30320 <z_reschedule_unlocked>
   268c4:	20021ad0 	.word	0x20021ad0
   268c8:	0003341a 	.word	0x0003341a
   268cc:	00033473 	.word	0x00033473
   268d0:	00032679 	.word	0x00032679
   268d4:	00033488 	.word	0x00033488
   268d8:	20021a88 	.word	0x20021a88
   268dc:	00038781 	.word	0x00038781
   268e0:	000386bb 	.word	0x000386bb
   268e4:	00036916 	.word	0x00036916
   268e8:	0003844e 	.word	0x0003844e
   268ec:	00033447 	.word	0x00033447
   268f0:	0003345e 	.word	0x0003345e

000268f4 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   268f4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   268f6:	4b0b      	ldr	r3, [pc, #44]	; (26924 <z_priq_dumb_remove+0x30>)
   268f8:	4299      	cmp	r1, r3
   268fa:	d10b      	bne.n	26914 <z_priq_dumb_remove+0x20>
   268fc:	490a      	ldr	r1, [pc, #40]	; (26928 <z_priq_dumb_remove+0x34>)
   268fe:	480b      	ldr	r0, [pc, #44]	; (2692c <z_priq_dumb_remove+0x38>)
   26900:	f240 4373 	movw	r3, #1139	; 0x473
   26904:	4a0a      	ldr	r2, [pc, #40]	; (26930 <z_priq_dumb_remove+0x3c>)
   26906:	f003 fee8 	bl	2a6da <assert_print>
   2690a:	f240 4173 	movw	r1, #1139	; 0x473
   2690e:	4808      	ldr	r0, [pc, #32]	; (26930 <z_priq_dumb_remove+0x3c>)
   26910:	f003 fedc 	bl	2a6cc <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   26914:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   26918:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2691a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2691c:	2300      	movs	r3, #0
	node->prev = NULL;
   2691e:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   26922:	bd08      	pop	{r3, pc}
   26924:	2000a160 	.word	0x2000a160
   26928:	00038704 	.word	0x00038704
   2692c:	00032679 	.word	0x00032679
   26930:	000386bb 	.word	0x000386bb

00026934 <move_thread_to_end_of_prio_q>:
{
   26934:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   26936:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2693a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2693c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2693e:	7b43      	ldrb	r3, [r0, #13]
   26940:	da06      	bge.n	26950 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26946:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26948:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2694a:	481d      	ldr	r0, [pc, #116]	; (269c0 <move_thread_to_end_of_prio_q+0x8c>)
   2694c:	f7ff ffd2 	bl	268f4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26950:	7b63      	ldrb	r3, [r4, #13]
   26952:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26956:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26958:	4b1a      	ldr	r3, [pc, #104]	; (269c4 <move_thread_to_end_of_prio_q+0x90>)
   2695a:	429c      	cmp	r4, r3
   2695c:	d109      	bne.n	26972 <move_thread_to_end_of_prio_q+0x3e>
   2695e:	491a      	ldr	r1, [pc, #104]	; (269c8 <move_thread_to_end_of_prio_q+0x94>)
   26960:	481a      	ldr	r0, [pc, #104]	; (269cc <move_thread_to_end_of_prio_q+0x98>)
   26962:	23ba      	movs	r3, #186	; 0xba
   26964:	4a1a      	ldr	r2, [pc, #104]	; (269d0 <move_thread_to_end_of_prio_q+0x9c>)
   26966:	f003 feb8 	bl	2a6da <assert_print>
   2696a:	21ba      	movs	r1, #186	; 0xba
   2696c:	4818      	ldr	r0, [pc, #96]	; (269d0 <move_thread_to_end_of_prio_q+0x9c>)
   2696e:	f003 fead 	bl	2a6cc <assert_post_action>
	return list->head == list;
   26972:	4a18      	ldr	r2, [pc, #96]	; (269d4 <move_thread_to_end_of_prio_q+0xa0>)
   26974:	4611      	mov	r1, r2
   26976:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node == list->tail) ? NULL : node->next;
   2697a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2697c:	428b      	cmp	r3, r1
   2697e:	bf08      	it	eq
   26980:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26982:	b923      	cbnz	r3, 2698e <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   26984:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   26988:	6004      	str	r4, [r0, #0]
	list->tail = node;
   2698a:	6254      	str	r4, [r2, #36]	; 0x24
}
   2698c:	e00c      	b.n	269a8 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   2698e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26992:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   26996:	42b5      	cmp	r5, r6
   26998:	d00e      	beq.n	269b8 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2699a:	42ae      	cmp	r6, r5
   2699c:	dd0c      	ble.n	269b8 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   2699e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   269a0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   269a4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   269a6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   269a8:	6890      	ldr	r0, [r2, #8]
   269aa:	1b03      	subs	r3, r0, r4
   269ac:	4258      	negs	r0, r3
   269ae:	4158      	adcs	r0, r3
}
   269b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   269b4:	f7ff bcbc 	b.w	26330 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   269b8:	4298      	cmp	r0, r3
   269ba:	d0e3      	beq.n	26984 <move_thread_to_end_of_prio_q+0x50>
   269bc:	681b      	ldr	r3, [r3, #0]
   269be:	e7e0      	b.n	26982 <move_thread_to_end_of_prio_q+0x4e>
   269c0:	20021aa8 	.word	0x20021aa8
   269c4:	2000a160 	.word	0x2000a160
   269c8:	00038704 	.word	0x00038704
   269cc:	00032679 	.word	0x00032679
   269d0:	000386bb 	.word	0x000386bb
   269d4:	20021a88 	.word	0x20021a88

000269d8 <z_time_slice>:
{
   269d8:	b570      	push	{r4, r5, r6, lr}
   269da:	4605      	mov	r5, r0
	__asm__ volatile(
   269dc:	f04f 0320 	mov.w	r3, #32
   269e0:	f3ef 8611 	mrs	r6, BASEPRI
   269e4:	f383 8812 	msr	BASEPRI_MAX, r3
   269e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269ec:	4829      	ldr	r0, [pc, #164]	; (26a94 <z_time_slice+0xbc>)
   269ee:	f7fe fb43 	bl	25078 <z_spin_lock_valid>
   269f2:	b968      	cbnz	r0, 26a10 <z_time_slice+0x38>
   269f4:	2394      	movs	r3, #148	; 0x94
   269f6:	4a28      	ldr	r2, [pc, #160]	; (26a98 <z_time_slice+0xc0>)
   269f8:	4928      	ldr	r1, [pc, #160]	; (26a9c <z_time_slice+0xc4>)
   269fa:	4829      	ldr	r0, [pc, #164]	; (26aa0 <z_time_slice+0xc8>)
   269fc:	f003 fe6d 	bl	2a6da <assert_print>
   26a00:	4924      	ldr	r1, [pc, #144]	; (26a94 <z_time_slice+0xbc>)
   26a02:	4828      	ldr	r0, [pc, #160]	; (26aa4 <z_time_slice+0xcc>)
   26a04:	f003 fe69 	bl	2a6da <assert_print>
   26a08:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a0a:	4823      	ldr	r0, [pc, #140]	; (26a98 <z_time_slice+0xc0>)
   26a0c:	f003 fe5e 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   26a10:	4820      	ldr	r0, [pc, #128]	; (26a94 <z_time_slice+0xbc>)
   26a12:	f7fe fb4d 	bl	250b0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   26a16:	4b24      	ldr	r3, [pc, #144]	; (26aa8 <z_time_slice+0xd0>)
   26a18:	4a24      	ldr	r2, [pc, #144]	; (26aac <z_time_slice+0xd4>)
   26a1a:	689c      	ldr	r4, [r3, #8]
   26a1c:	6811      	ldr	r1, [r2, #0]
   26a1e:	428c      	cmp	r4, r1
   26a20:	d112      	bne.n	26a48 <z_time_slice+0x70>
		z_reset_time_slice(_current);
   26a22:	4620      	mov	r0, r4
   26a24:	f7ff fc70 	bl	26308 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a28:	481a      	ldr	r0, [pc, #104]	; (26a94 <z_time_slice+0xbc>)
   26a2a:	f7fe fb33 	bl	25094 <z_spin_unlock_valid>
   26a2e:	bb58      	cbnz	r0, 26a88 <z_time_slice+0xb0>
   26a30:	23c2      	movs	r3, #194	; 0xc2
   26a32:	4a19      	ldr	r2, [pc, #100]	; (26a98 <z_time_slice+0xc0>)
   26a34:	491e      	ldr	r1, [pc, #120]	; (26ab0 <z_time_slice+0xd8>)
   26a36:	481a      	ldr	r0, [pc, #104]	; (26aa0 <z_time_slice+0xc8>)
   26a38:	f003 fe4f 	bl	2a6da <assert_print>
   26a3c:	4915      	ldr	r1, [pc, #84]	; (26a94 <z_time_slice+0xbc>)
   26a3e:	481d      	ldr	r0, [pc, #116]	; (26ab4 <z_time_slice+0xdc>)
   26a40:	f003 fe4b 	bl	2a6da <assert_print>
   26a44:	21c2      	movs	r1, #194	; 0xc2
   26a46:	e7e0      	b.n	26a0a <z_time_slice+0x32>
	pending_current = NULL;
   26a48:	2100      	movs	r1, #0
   26a4a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   26a4c:	4a1a      	ldr	r2, [pc, #104]	; (26ab8 <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
   26a4e:	6812      	ldr	r2, [r2, #0]
   26a50:	b1c2      	cbz	r2, 26a84 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   26a52:	89e2      	ldrh	r2, [r4, #14]
   26a54:	2a7f      	cmp	r2, #127	; 0x7f
   26a56:	d815      	bhi.n	26a84 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
   26a58:	7b62      	ldrb	r2, [r4, #13]
   26a5a:	06d2      	lsls	r2, r2, #27
   26a5c:	d112      	bne.n	26a84 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26a5e:	4a17      	ldr	r2, [pc, #92]	; (26abc <z_time_slice+0xe4>)
   26a60:	f994 100e 	ldrsb.w	r1, [r4, #14]
   26a64:	6812      	ldr	r2, [r2, #0]
   26a66:	4291      	cmp	r1, r2
   26a68:	db0c      	blt.n	26a84 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
   26a6a:	4a15      	ldr	r2, [pc, #84]	; (26ac0 <z_time_slice+0xe8>)
   26a6c:	4294      	cmp	r4, r2
   26a6e:	d009      	beq.n	26a84 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
   26a70:	691a      	ldr	r2, [r3, #16]
   26a72:	42aa      	cmp	r2, r5
   26a74:	dc03      	bgt.n	26a7e <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
   26a76:	4620      	mov	r0, r4
   26a78:	f7ff ff5c 	bl	26934 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   26a7c:	e7d1      	b.n	26a22 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
   26a7e:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   26a80:	611a      	str	r2, [r3, #16]
   26a82:	e7d1      	b.n	26a28 <z_time_slice+0x50>
   26a84:	2200      	movs	r2, #0
   26a86:	e7fb      	b.n	26a80 <z_time_slice+0xa8>
	__asm__ volatile(
   26a88:	f386 8811 	msr	BASEPRI, r6
   26a8c:	f3bf 8f6f 	isb	sy
}
   26a90:	bd70      	pop	{r4, r5, r6, pc}
   26a92:	bf00      	nop
   26a94:	20021ad0 	.word	0x20021ad0
   26a98:	0003341a 	.word	0x0003341a
   26a9c:	00033473 	.word	0x00033473
   26aa0:	00032679 	.word	0x00032679
   26aa4:	00033488 	.word	0x00033488
   26aa8:	20021a88 	.word	0x20021a88
   26aac:	20021ac4 	.word	0x20021ac4
   26ab0:	00033447 	.word	0x00033447
   26ab4:	0003345e 	.word	0x0003345e
   26ab8:	20021acc 	.word	0x20021acc
   26abc:	20021ac8 	.word	0x20021ac8
   26ac0:	2000a160 	.word	0x2000a160

00026ac4 <unready_thread>:
{
   26ac4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   26ac6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   26aca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26acc:	2a00      	cmp	r2, #0
   26ace:	7b43      	ldrb	r3, [r0, #13]
   26ad0:	da06      	bge.n	26ae0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26ad6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ad8:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26ada:	4806      	ldr	r0, [pc, #24]	; (26af4 <unready_thread+0x30>)
   26adc:	f7ff ff0a 	bl	268f4 <z_priq_dumb_remove>
	update_cache(thread == _current);
   26ae0:	4b05      	ldr	r3, [pc, #20]	; (26af8 <unready_thread+0x34>)
   26ae2:	6898      	ldr	r0, [r3, #8]
   26ae4:	1b03      	subs	r3, r0, r4
   26ae6:	4258      	negs	r0, r3
   26ae8:	4158      	adcs	r0, r3
}
   26aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   26aee:	f7ff bc1f 	b.w	26330 <update_cache>
   26af2:	bf00      	nop
   26af4:	20021aa8 	.word	0x20021aa8
   26af8:	20021a88 	.word	0x20021a88

00026afc <add_to_waitq_locked>:
{
   26afc:	b538      	push	{r3, r4, r5, lr}
   26afe:	4604      	mov	r4, r0
   26b00:	460d      	mov	r5, r1
	unready_thread(thread);
   26b02:	f7ff ffdf 	bl	26ac4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26b06:	7b63      	ldrb	r3, [r4, #13]
   26b08:	f043 0302 	orr.w	r3, r3, #2
   26b0c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26b0e:	b34d      	cbz	r5, 26b64 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26b10:	4b15      	ldr	r3, [pc, #84]	; (26b68 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   26b12:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26b14:	429c      	cmp	r4, r3
   26b16:	d109      	bne.n	26b2c <add_to_waitq_locked+0x30>
   26b18:	4914      	ldr	r1, [pc, #80]	; (26b6c <add_to_waitq_locked+0x70>)
   26b1a:	4815      	ldr	r0, [pc, #84]	; (26b70 <add_to_waitq_locked+0x74>)
   26b1c:	23ba      	movs	r3, #186	; 0xba
   26b1e:	4a15      	ldr	r2, [pc, #84]	; (26b74 <add_to_waitq_locked+0x78>)
   26b20:	f003 fddb 	bl	2a6da <assert_print>
   26b24:	21ba      	movs	r1, #186	; 0xba
   26b26:	4813      	ldr	r0, [pc, #76]	; (26b74 <add_to_waitq_locked+0x78>)
   26b28:	f003 fdd0 	bl	2a6cc <assert_post_action>
	return list->head == list;
   26b2c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b2e:	429d      	cmp	r5, r3
   26b30:	d109      	bne.n	26b46 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   26b32:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26b34:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   26b38:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26b3a:	606c      	str	r4, [r5, #4]
}
   26b3c:	e012      	b.n	26b64 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   26b3e:	686a      	ldr	r2, [r5, #4]
   26b40:	4293      	cmp	r3, r2
   26b42:	d0f6      	beq.n	26b32 <add_to_waitq_locked+0x36>
   26b44:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26b46:	2b00      	cmp	r3, #0
   26b48:	d0f3      	beq.n	26b32 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   26b4a:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26b4e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   26b52:	428a      	cmp	r2, r1
   26b54:	d0f3      	beq.n	26b3e <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26b56:	4291      	cmp	r1, r2
   26b58:	ddf1      	ble.n	26b3e <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   26b5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26b5c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26b60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26b62:	605c      	str	r4, [r3, #4]
}
   26b64:	bd38      	pop	{r3, r4, r5, pc}
   26b66:	bf00      	nop
   26b68:	2000a160 	.word	0x2000a160
   26b6c:	00038704 	.word	0x00038704
   26b70:	00032679 	.word	0x00032679
   26b74:	000386bb 	.word	0x000386bb

00026b78 <pend_locked>:
{
   26b78:	b570      	push	{r4, r5, r6, lr}
   26b7a:	4615      	mov	r5, r2
   26b7c:	461c      	mov	r4, r3
   26b7e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   26b80:	f7ff ffbc 	bl	26afc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26b84:	f1b4 3fff 	cmp.w	r4, #4294967295
   26b88:	bf08      	it	eq
   26b8a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   26b8e:	d008      	beq.n	26ba2 <pend_locked+0x2a>
   26b90:	462a      	mov	r2, r5
   26b92:	4623      	mov	r3, r4
   26b94:	f106 0018 	add.w	r0, r6, #24
   26b98:	4902      	ldr	r1, [pc, #8]	; (26ba4 <pend_locked+0x2c>)
}
   26b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26b9e:	f000 bdf1 	b.w	27784 <z_add_timeout>
   26ba2:	bd70      	pop	{r4, r5, r6, pc}
   26ba4:	00026f5d 	.word	0x00026f5d

00026ba8 <z_pend_curr>:
{
   26ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26bac:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
	pending_current = _current;
   26bb0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 26c68 <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26bb4:	4c2d      	ldr	r4, [pc, #180]	; (26c6c <z_pend_curr+0xc4>)
{
   26bb6:	4617      	mov	r7, r2
	pending_current = _current;
   26bb8:	4b2d      	ldr	r3, [pc, #180]	; (26c70 <z_pend_curr+0xc8>)
   26bba:	f8da 2008 	ldr.w	r2, [sl, #8]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26bbe:	42a0      	cmp	r0, r4
{
   26bc0:	4605      	mov	r5, r0
   26bc2:	460e      	mov	r6, r1
	pending_current = _current;
   26bc4:	601a      	str	r2, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   26bc6:	d10b      	bne.n	26be0 <z_pend_curr+0x38>
   26bc8:	492a      	ldr	r1, [pc, #168]	; (26c74 <z_pend_curr+0xcc>)
   26bca:	482b      	ldr	r0, [pc, #172]	; (26c78 <z_pend_curr+0xd0>)
   26bcc:	f240 334e 	movw	r3, #846	; 0x34e
   26bd0:	4a2a      	ldr	r2, [pc, #168]	; (26c7c <z_pend_curr+0xd4>)
   26bd2:	f003 fd82 	bl	2a6da <assert_print>
   26bd6:	f240 314e 	movw	r1, #846	; 0x34e
   26bda:	4828      	ldr	r0, [pc, #160]	; (26c7c <z_pend_curr+0xd4>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26bdc:	f003 fd76 	bl	2a6cc <assert_post_action>
	__asm__ volatile(
   26be0:	f04f 0220 	mov.w	r2, #32
   26be4:	f3ef 8311 	mrs	r3, BASEPRI
   26be8:	f382 8812 	msr	BASEPRI_MAX, r2
   26bec:	f3bf 8f6f 	isb	sy
   26bf0:	4620      	mov	r0, r4
   26bf2:	f7fe fa41 	bl	25078 <z_spin_lock_valid>
   26bf6:	b960      	cbnz	r0, 26c12 <z_pend_curr+0x6a>
   26bf8:	2394      	movs	r3, #148	; 0x94
   26bfa:	4a21      	ldr	r2, [pc, #132]	; (26c80 <z_pend_curr+0xd8>)
   26bfc:	4921      	ldr	r1, [pc, #132]	; (26c84 <z_pend_curr+0xdc>)
   26bfe:	481e      	ldr	r0, [pc, #120]	; (26c78 <z_pend_curr+0xd0>)
   26c00:	f003 fd6b 	bl	2a6da <assert_print>
   26c04:	4621      	mov	r1, r4
   26c06:	4820      	ldr	r0, [pc, #128]	; (26c88 <z_pend_curr+0xe0>)
   26c08:	f003 fd67 	bl	2a6da <assert_print>
   26c0c:	2194      	movs	r1, #148	; 0x94
   26c0e:	481c      	ldr	r0, [pc, #112]	; (26c80 <z_pend_curr+0xd8>)
   26c10:	e7e4      	b.n	26bdc <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   26c12:	4620      	mov	r0, r4
   26c14:	f7fe fa4c 	bl	250b0 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   26c18:	f8da 0008 	ldr.w	r0, [sl, #8]
   26c1c:	4642      	mov	r2, r8
   26c1e:	464b      	mov	r3, r9
   26c20:	4639      	mov	r1, r7
   26c22:	f7ff ffa9 	bl	26b78 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c26:	4628      	mov	r0, r5
   26c28:	f7fe fa34 	bl	25094 <z_spin_unlock_valid>
   26c2c:	b958      	cbnz	r0, 26c46 <z_pend_curr+0x9e>
   26c2e:	4917      	ldr	r1, [pc, #92]	; (26c8c <z_pend_curr+0xe4>)
   26c30:	23e1      	movs	r3, #225	; 0xe1
   26c32:	4a13      	ldr	r2, [pc, #76]	; (26c80 <z_pend_curr+0xd8>)
   26c34:	4810      	ldr	r0, [pc, #64]	; (26c78 <z_pend_curr+0xd0>)
   26c36:	f003 fd50 	bl	2a6da <assert_print>
   26c3a:	4629      	mov	r1, r5
   26c3c:	4814      	ldr	r0, [pc, #80]	; (26c90 <z_pend_curr+0xe8>)
   26c3e:	f003 fd4c 	bl	2a6da <assert_print>
   26c42:	21e1      	movs	r1, #225	; 0xe1
   26c44:	e7e3      	b.n	26c0e <z_pend_curr+0x66>
   26c46:	4620      	mov	r0, r4
   26c48:	f7fe fa24 	bl	25094 <z_spin_unlock_valid>
   26c4c:	b938      	cbnz	r0, 26c5e <z_pend_curr+0xb6>
   26c4e:	490f      	ldr	r1, [pc, #60]	; (26c8c <z_pend_curr+0xe4>)
   26c50:	23e1      	movs	r3, #225	; 0xe1
   26c52:	4a0b      	ldr	r2, [pc, #44]	; (26c80 <z_pend_curr+0xd8>)
   26c54:	4808      	ldr	r0, [pc, #32]	; (26c78 <z_pend_curr+0xd0>)
   26c56:	f003 fd40 	bl	2a6da <assert_print>
   26c5a:	4621      	mov	r1, r4
   26c5c:	e7ee      	b.n	26c3c <z_pend_curr+0x94>
   26c5e:	4630      	mov	r0, r6
}
   26c60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c64:	f7e9 bf6c 	b.w	10b40 <arch_swap>
   26c68:	20021a88 	.word	0x20021a88
   26c6c:	20021ad0 	.word	0x20021ad0
   26c70:	20021ac4 	.word	0x20021ac4
   26c74:	000387b2 	.word	0x000387b2
   26c78:	00032679 	.word	0x00032679
   26c7c:	000386bb 	.word	0x000386bb
   26c80:	0003341a 	.word	0x0003341a
   26c84:	00033473 	.word	0x00033473
   26c88:	00033488 	.word	0x00033488
   26c8c:	00033447 	.word	0x00033447
   26c90:	0003345e 	.word	0x0003345e

00026c94 <z_set_prio>:
{
   26c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c98:	4604      	mov	r4, r0
   26c9a:	460e      	mov	r6, r1
   26c9c:	f04f 0320 	mov.w	r3, #32
   26ca0:	f3ef 8911 	mrs	r9, BASEPRI
   26ca4:	f383 8812 	msr	BASEPRI_MAX, r3
   26ca8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26cac:	4837      	ldr	r0, [pc, #220]	; (26d8c <z_set_prio+0xf8>)
   26cae:	f7fe f9e3 	bl	25078 <z_spin_lock_valid>
   26cb2:	4607      	mov	r7, r0
   26cb4:	b960      	cbnz	r0, 26cd0 <z_set_prio+0x3c>
   26cb6:	2394      	movs	r3, #148	; 0x94
   26cb8:	4a35      	ldr	r2, [pc, #212]	; (26d90 <z_set_prio+0xfc>)
   26cba:	4936      	ldr	r1, [pc, #216]	; (26d94 <z_set_prio+0x100>)
   26cbc:	4836      	ldr	r0, [pc, #216]	; (26d98 <z_set_prio+0x104>)
   26cbe:	f003 fd0c 	bl	2a6da <assert_print>
   26cc2:	4932      	ldr	r1, [pc, #200]	; (26d8c <z_set_prio+0xf8>)
   26cc4:	4835      	ldr	r0, [pc, #212]	; (26d9c <z_set_prio+0x108>)
   26cc6:	f003 fd08 	bl	2a6da <assert_print>
   26cca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ccc:	4830      	ldr	r0, [pc, #192]	; (26d90 <z_set_prio+0xfc>)
   26cce:	e021      	b.n	26d14 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   26cd0:	482e      	ldr	r0, [pc, #184]	; (26d8c <z_set_prio+0xf8>)
   26cd2:	f7fe f9ed 	bl	250b0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   26cd6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26cd8:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26cda:	06da      	lsls	r2, r3, #27
   26cdc:	d11c      	bne.n	26d18 <z_set_prio+0x84>
	return node->next != NULL;
   26cde:	69a5      	ldr	r5, [r4, #24]
   26ce0:	b9d5      	cbnz	r5, 26d18 <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   26ce2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 26da0 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26cea:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26cec:	4621      	mov	r1, r4
   26cee:	4640      	mov	r0, r8
   26cf0:	f7ff fe00 	bl	268f4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26cf4:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   26cf6:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   26cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26cfc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26cfe:	4b29      	ldr	r3, [pc, #164]	; (26da4 <z_set_prio+0x110>)
   26d00:	429c      	cmp	r4, r3
   26d02:	d11b      	bne.n	26d3c <z_set_prio+0xa8>
   26d04:	4928      	ldr	r1, [pc, #160]	; (26da8 <z_set_prio+0x114>)
   26d06:	4824      	ldr	r0, [pc, #144]	; (26d98 <z_set_prio+0x104>)
   26d08:	23ba      	movs	r3, #186	; 0xba
   26d0a:	4a28      	ldr	r2, [pc, #160]	; (26dac <z_set_prio+0x118>)
   26d0c:	f003 fce5 	bl	2a6da <assert_print>
   26d10:	21ba      	movs	r1, #186	; 0xba
   26d12:	4826      	ldr	r0, [pc, #152]	; (26dac <z_set_prio+0x118>)
   26d14:	f003 fcda 	bl	2a6cc <assert_post_action>
   26d18:	2700      	movs	r7, #0
			thread->base.prio = prio;
   26d1a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d1c:	481b      	ldr	r0, [pc, #108]	; (26d8c <z_set_prio+0xf8>)
   26d1e:	f7fe f9b9 	bl	25094 <z_spin_unlock_valid>
   26d22:	bb58      	cbnz	r0, 26d7c <z_set_prio+0xe8>
   26d24:	23c2      	movs	r3, #194	; 0xc2
   26d26:	4a1a      	ldr	r2, [pc, #104]	; (26d90 <z_set_prio+0xfc>)
   26d28:	4921      	ldr	r1, [pc, #132]	; (26db0 <z_set_prio+0x11c>)
   26d2a:	481b      	ldr	r0, [pc, #108]	; (26d98 <z_set_prio+0x104>)
   26d2c:	f003 fcd5 	bl	2a6da <assert_print>
   26d30:	4916      	ldr	r1, [pc, #88]	; (26d8c <z_set_prio+0xf8>)
   26d32:	4820      	ldr	r0, [pc, #128]	; (26db4 <z_set_prio+0x120>)
   26d34:	f003 fcd1 	bl	2a6da <assert_print>
   26d38:	21c2      	movs	r1, #194	; 0xc2
   26d3a:	e7c7      	b.n	26ccc <z_set_prio+0x38>
	return list->head == list;
   26d3c:	4643      	mov	r3, r8
   26d3e:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26d42:	4542      	cmp	r2, r8
   26d44:	bf18      	it	ne
   26d46:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   26d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26d4a:	b925      	cbnz	r5, 26d56 <z_set_prio+0xc2>
	node->prev = tail;
   26d4c:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   26d50:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26d52:	625c      	str	r4, [r3, #36]	; 0x24
}
   26d54:	e00a      	b.n	26d6c <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   26d56:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   26d5a:	428e      	cmp	r6, r1
   26d5c:	d00a      	beq.n	26d74 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26d5e:	42b1      	cmp	r1, r6
   26d60:	dd08      	ble.n	26d74 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   26d62:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   26d64:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   26d68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26d6a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   26d6c:	2001      	movs	r0, #1
   26d6e:	f7ff fadf 	bl	26330 <update_cache>
   26d72:	e7d3      	b.n	26d1c <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   26d74:	42aa      	cmp	r2, r5
   26d76:	d0e9      	beq.n	26d4c <z_set_prio+0xb8>
   26d78:	682d      	ldr	r5, [r5, #0]
   26d7a:	e7e6      	b.n	26d4a <z_set_prio+0xb6>
	__asm__ volatile(
   26d7c:	f389 8811 	msr	BASEPRI, r9
   26d80:	f3bf 8f6f 	isb	sy
}
   26d84:	4638      	mov	r0, r7
   26d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26d8a:	bf00      	nop
   26d8c:	20021ad0 	.word	0x20021ad0
   26d90:	0003341a 	.word	0x0003341a
   26d94:	00033473 	.word	0x00033473
   26d98:	00032679 	.word	0x00032679
   26d9c:	00033488 	.word	0x00033488
   26da0:	20021aa8 	.word	0x20021aa8
   26da4:	2000a160 	.word	0x2000a160
   26da8:	00038704 	.word	0x00038704
   26dac:	000386bb 	.word	0x000386bb
   26db0:	00033447 	.word	0x00033447
   26db4:	0003345e 	.word	0x0003345e

00026db8 <z_impl_k_thread_suspend>:
{
   26db8:	b570      	push	{r4, r5, r6, lr}
   26dba:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26dbc:	3018      	adds	r0, #24
   26dbe:	f000 fda7 	bl	27910 <z_abort_timeout>
	__asm__ volatile(
   26dc2:	f04f 0320 	mov.w	r3, #32
   26dc6:	f3ef 8611 	mrs	r6, BASEPRI
   26dca:	f383 8812 	msr	BASEPRI_MAX, r3
   26dce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26dd2:	4824      	ldr	r0, [pc, #144]	; (26e64 <z_impl_k_thread_suspend+0xac>)
   26dd4:	f7fe f950 	bl	25078 <z_spin_lock_valid>
   26dd8:	b968      	cbnz	r0, 26df6 <z_impl_k_thread_suspend+0x3e>
   26dda:	2394      	movs	r3, #148	; 0x94
   26ddc:	4a22      	ldr	r2, [pc, #136]	; (26e68 <z_impl_k_thread_suspend+0xb0>)
   26dde:	4923      	ldr	r1, [pc, #140]	; (26e6c <z_impl_k_thread_suspend+0xb4>)
   26de0:	4823      	ldr	r0, [pc, #140]	; (26e70 <z_impl_k_thread_suspend+0xb8>)
   26de2:	f003 fc7a 	bl	2a6da <assert_print>
   26de6:	491f      	ldr	r1, [pc, #124]	; (26e64 <z_impl_k_thread_suspend+0xac>)
   26de8:	4822      	ldr	r0, [pc, #136]	; (26e74 <z_impl_k_thread_suspend+0xbc>)
   26dea:	f003 fc76 	bl	2a6da <assert_print>
   26dee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26df0:	481d      	ldr	r0, [pc, #116]	; (26e68 <z_impl_k_thread_suspend+0xb0>)
   26df2:	f003 fc6b 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   26df6:	481b      	ldr	r0, [pc, #108]	; (26e64 <z_impl_k_thread_suspend+0xac>)
   26df8:	f7fe f95a 	bl	250b0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   26dfc:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   26e00:	7b63      	ldrb	r3, [r4, #13]
   26e02:	2a00      	cmp	r2, #0
   26e04:	da06      	bge.n	26e14 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   26e0a:	4621      	mov	r1, r4
   26e0c:	481a      	ldr	r0, [pc, #104]	; (26e78 <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26e0e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26e10:	f7ff fd70 	bl	268f4 <z_priq_dumb_remove>
		update_cache(thread == _current);
   26e14:	4d19      	ldr	r5, [pc, #100]	; (26e7c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   26e16:	7b63      	ldrb	r3, [r4, #13]
   26e18:	68a8      	ldr	r0, [r5, #8]
   26e1a:	f043 0310 	orr.w	r3, r3, #16
   26e1e:	7363      	strb	r3, [r4, #13]
   26e20:	1b03      	subs	r3, r0, r4
   26e22:	4258      	negs	r0, r3
   26e24:	4158      	adcs	r0, r3
   26e26:	f7ff fa83 	bl	26330 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26e2a:	480e      	ldr	r0, [pc, #56]	; (26e64 <z_impl_k_thread_suspend+0xac>)
   26e2c:	f7fe f932 	bl	25094 <z_spin_unlock_valid>
   26e30:	b958      	cbnz	r0, 26e4a <z_impl_k_thread_suspend+0x92>
   26e32:	23c2      	movs	r3, #194	; 0xc2
   26e34:	4a0c      	ldr	r2, [pc, #48]	; (26e68 <z_impl_k_thread_suspend+0xb0>)
   26e36:	4912      	ldr	r1, [pc, #72]	; (26e80 <z_impl_k_thread_suspend+0xc8>)
   26e38:	480d      	ldr	r0, [pc, #52]	; (26e70 <z_impl_k_thread_suspend+0xb8>)
   26e3a:	f003 fc4e 	bl	2a6da <assert_print>
   26e3e:	4909      	ldr	r1, [pc, #36]	; (26e64 <z_impl_k_thread_suspend+0xac>)
   26e40:	4810      	ldr	r0, [pc, #64]	; (26e84 <z_impl_k_thread_suspend+0xcc>)
   26e42:	f003 fc4a 	bl	2a6da <assert_print>
   26e46:	21c2      	movs	r1, #194	; 0xc2
   26e48:	e7d2      	b.n	26df0 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   26e4a:	f386 8811 	msr	BASEPRI, r6
   26e4e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26e52:	68ab      	ldr	r3, [r5, #8]
   26e54:	42a3      	cmp	r3, r4
   26e56:	d103      	bne.n	26e60 <z_impl_k_thread_suspend+0xa8>
}
   26e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   26e5c:	f009 ba60 	b.w	30320 <z_reschedule_unlocked>
}
   26e60:	bd70      	pop	{r4, r5, r6, pc}
   26e62:	bf00      	nop
   26e64:	20021ad0 	.word	0x20021ad0
   26e68:	0003341a 	.word	0x0003341a
   26e6c:	00033473 	.word	0x00033473
   26e70:	00032679 	.word	0x00032679
   26e74:	00033488 	.word	0x00033488
   26e78:	20021aa8 	.word	0x20021aa8
   26e7c:	20021a88 	.word	0x20021a88
   26e80:	00033447 	.word	0x00033447
   26e84:	0003345e 	.word	0x0003345e

00026e88 <unpend_thread_no_timeout>:
{
   26e88:	b510      	push	{r4, lr}
   26e8a:	4604      	mov	r4, r0
   26e8c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   26e8e:	b958      	cbnz	r0, 26ea8 <unpend_thread_no_timeout+0x20>
   26e90:	490a      	ldr	r1, [pc, #40]	; (26ebc <unpend_thread_no_timeout+0x34>)
   26e92:	480b      	ldr	r0, [pc, #44]	; (26ec0 <unpend_thread_no_timeout+0x38>)
   26e94:	f240 23d6 	movw	r3, #726	; 0x2d6
   26e98:	4a0a      	ldr	r2, [pc, #40]	; (26ec4 <unpend_thread_no_timeout+0x3c>)
   26e9a:	f003 fc1e 	bl	2a6da <assert_print>
   26e9e:	f240 21d6 	movw	r1, #726	; 0x2d6
   26ea2:	4808      	ldr	r0, [pc, #32]	; (26ec4 <unpend_thread_no_timeout+0x3c>)
   26ea4:	f003 fc12 	bl	2a6cc <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26ea8:	4621      	mov	r1, r4
   26eaa:	f7ff fd23 	bl	268f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26eae:	7b63      	ldrb	r3, [r4, #13]
   26eb0:	f023 0302 	bic.w	r3, r3, #2
   26eb4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26eb6:	2300      	movs	r3, #0
   26eb8:	60a3      	str	r3, [r4, #8]
}
   26eba:	bd10      	pop	{r4, pc}
   26ebc:	000387e9 	.word	0x000387e9
   26ec0:	00032679 	.word	0x00032679
   26ec4:	000386bb 	.word	0x000386bb

00026ec8 <z_unpend_thread>:
{
   26ec8:	b538      	push	{r3, r4, r5, lr}
   26eca:	4604      	mov	r4, r0
	__asm__ volatile(
   26ecc:	f04f 0320 	mov.w	r3, #32
   26ed0:	f3ef 8511 	mrs	r5, BASEPRI
   26ed4:	f383 8812 	msr	BASEPRI_MAX, r3
   26ed8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26edc:	4818      	ldr	r0, [pc, #96]	; (26f40 <z_unpend_thread+0x78>)
   26ede:	f7fe f8cb 	bl	25078 <z_spin_lock_valid>
   26ee2:	b968      	cbnz	r0, 26f00 <z_unpend_thread+0x38>
   26ee4:	2394      	movs	r3, #148	; 0x94
   26ee6:	4a17      	ldr	r2, [pc, #92]	; (26f44 <z_unpend_thread+0x7c>)
   26ee8:	4917      	ldr	r1, [pc, #92]	; (26f48 <z_unpend_thread+0x80>)
   26eea:	4818      	ldr	r0, [pc, #96]	; (26f4c <z_unpend_thread+0x84>)
   26eec:	f003 fbf5 	bl	2a6da <assert_print>
   26ef0:	4913      	ldr	r1, [pc, #76]	; (26f40 <z_unpend_thread+0x78>)
   26ef2:	4817      	ldr	r0, [pc, #92]	; (26f50 <z_unpend_thread+0x88>)
   26ef4:	f003 fbf1 	bl	2a6da <assert_print>
   26ef8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26efa:	4812      	ldr	r0, [pc, #72]	; (26f44 <z_unpend_thread+0x7c>)
   26efc:	f003 fbe6 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   26f00:	480f      	ldr	r0, [pc, #60]	; (26f40 <z_unpend_thread+0x78>)
   26f02:	f7fe f8d5 	bl	250b0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   26f06:	4620      	mov	r0, r4
   26f08:	f7ff ffbe 	bl	26e88 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f0c:	480c      	ldr	r0, [pc, #48]	; (26f40 <z_unpend_thread+0x78>)
   26f0e:	f7fe f8c1 	bl	25094 <z_spin_unlock_valid>
   26f12:	b958      	cbnz	r0, 26f2c <z_unpend_thread+0x64>
   26f14:	23c2      	movs	r3, #194	; 0xc2
   26f16:	4a0b      	ldr	r2, [pc, #44]	; (26f44 <z_unpend_thread+0x7c>)
   26f18:	490e      	ldr	r1, [pc, #56]	; (26f54 <z_unpend_thread+0x8c>)
   26f1a:	480c      	ldr	r0, [pc, #48]	; (26f4c <z_unpend_thread+0x84>)
   26f1c:	f003 fbdd 	bl	2a6da <assert_print>
   26f20:	4907      	ldr	r1, [pc, #28]	; (26f40 <z_unpend_thread+0x78>)
   26f22:	480d      	ldr	r0, [pc, #52]	; (26f58 <z_unpend_thread+0x90>)
   26f24:	f003 fbd9 	bl	2a6da <assert_print>
   26f28:	21c2      	movs	r1, #194	; 0xc2
   26f2a:	e7e6      	b.n	26efa <z_unpend_thread+0x32>
	__asm__ volatile(
   26f2c:	f385 8811 	msr	BASEPRI, r5
   26f30:	f3bf 8f6f 	isb	sy
   26f34:	f104 0018 	add.w	r0, r4, #24
}
   26f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26f3c:	f000 bce8 	b.w	27910 <z_abort_timeout>
   26f40:	20021ad0 	.word	0x20021ad0
   26f44:	0003341a 	.word	0x0003341a
   26f48:	00033473 	.word	0x00033473
   26f4c:	00032679 	.word	0x00032679
   26f50:	00033488 	.word	0x00033488
   26f54:	00033447 	.word	0x00033447
   26f58:	0003345e 	.word	0x0003345e

00026f5c <z_thread_timeout>:
{
   26f5c:	b570      	push	{r4, r5, r6, lr}
   26f5e:	4604      	mov	r4, r0
	__asm__ volatile(
   26f60:	f04f 0320 	mov.w	r3, #32
   26f64:	f3ef 8611 	mrs	r6, BASEPRI
   26f68:	f383 8812 	msr	BASEPRI_MAX, r3
   26f6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f70:	481f      	ldr	r0, [pc, #124]	; (26ff0 <z_thread_timeout+0x94>)
   26f72:	f7fe f881 	bl	25078 <z_spin_lock_valid>
   26f76:	b968      	cbnz	r0, 26f94 <z_thread_timeout+0x38>
   26f78:	2394      	movs	r3, #148	; 0x94
   26f7a:	4a1e      	ldr	r2, [pc, #120]	; (26ff4 <z_thread_timeout+0x98>)
   26f7c:	491e      	ldr	r1, [pc, #120]	; (26ff8 <z_thread_timeout+0x9c>)
   26f7e:	481f      	ldr	r0, [pc, #124]	; (26ffc <z_thread_timeout+0xa0>)
   26f80:	f003 fbab 	bl	2a6da <assert_print>
   26f84:	491a      	ldr	r1, [pc, #104]	; (26ff0 <z_thread_timeout+0x94>)
   26f86:	481e      	ldr	r0, [pc, #120]	; (27000 <z_thread_timeout+0xa4>)
   26f88:	f003 fba7 	bl	2a6da <assert_print>
   26f8c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f8e:	4819      	ldr	r0, [pc, #100]	; (26ff4 <z_thread_timeout+0x98>)
   26f90:	f003 fb9c 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   26f94:	4816      	ldr	r0, [pc, #88]	; (26ff0 <z_thread_timeout+0x94>)
   26f96:	f7fe f88b 	bl	250b0 <z_spin_lock_set_owner>
		if (!killed) {
   26f9a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26f9e:	f013 0f28 	tst.w	r3, #40	; 0x28
   26fa2:	d110      	bne.n	26fc6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   26fa4:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   26fa8:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   26fac:	b113      	cbz	r3, 26fb4 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   26fae:	4628      	mov	r0, r5
   26fb0:	f7ff ff6a 	bl	26e88 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26fb4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   26fb8:	4628      	mov	r0, r5
   26fba:	f023 0314 	bic.w	r3, r3, #20
   26fbe:	f804 3c0b 	strb.w	r3, [r4, #-11]
   26fc2:	f7ff f9e9 	bl	26398 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26fc6:	480a      	ldr	r0, [pc, #40]	; (26ff0 <z_thread_timeout+0x94>)
   26fc8:	f7fe f864 	bl	25094 <z_spin_unlock_valid>
   26fcc:	b958      	cbnz	r0, 26fe6 <z_thread_timeout+0x8a>
   26fce:	23c2      	movs	r3, #194	; 0xc2
   26fd0:	4a08      	ldr	r2, [pc, #32]	; (26ff4 <z_thread_timeout+0x98>)
   26fd2:	490c      	ldr	r1, [pc, #48]	; (27004 <z_thread_timeout+0xa8>)
   26fd4:	4809      	ldr	r0, [pc, #36]	; (26ffc <z_thread_timeout+0xa0>)
   26fd6:	f003 fb80 	bl	2a6da <assert_print>
   26fda:	4905      	ldr	r1, [pc, #20]	; (26ff0 <z_thread_timeout+0x94>)
   26fdc:	480a      	ldr	r0, [pc, #40]	; (27008 <z_thread_timeout+0xac>)
   26fde:	f003 fb7c 	bl	2a6da <assert_print>
   26fe2:	21c2      	movs	r1, #194	; 0xc2
   26fe4:	e7d3      	b.n	26f8e <z_thread_timeout+0x32>
	__asm__ volatile(
   26fe6:	f386 8811 	msr	BASEPRI, r6
   26fea:	f3bf 8f6f 	isb	sy
}
   26fee:	bd70      	pop	{r4, r5, r6, pc}
   26ff0:	20021ad0 	.word	0x20021ad0
   26ff4:	0003341a 	.word	0x0003341a
   26ff8:	00033473 	.word	0x00033473
   26ffc:	00032679 	.word	0x00032679
   27000:	00033488 	.word	0x00033488
   27004:	00033447 	.word	0x00033447
   27008:	0003345e 	.word	0x0003345e

0002700c <z_unpend1_no_timeout>:
{
   2700c:	b570      	push	{r4, r5, r6, lr}
   2700e:	4605      	mov	r5, r0
	__asm__ volatile(
   27010:	f04f 0320 	mov.w	r3, #32
   27014:	f3ef 8611 	mrs	r6, BASEPRI
   27018:	f383 8812 	msr	BASEPRI_MAX, r3
   2701c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27020:	4819      	ldr	r0, [pc, #100]	; (27088 <z_unpend1_no_timeout+0x7c>)
   27022:	f7fe f829 	bl	25078 <z_spin_lock_valid>
   27026:	b968      	cbnz	r0, 27044 <z_unpend1_no_timeout+0x38>
   27028:	2394      	movs	r3, #148	; 0x94
   2702a:	4a18      	ldr	r2, [pc, #96]	; (2708c <z_unpend1_no_timeout+0x80>)
   2702c:	4918      	ldr	r1, [pc, #96]	; (27090 <z_unpend1_no_timeout+0x84>)
   2702e:	4819      	ldr	r0, [pc, #100]	; (27094 <z_unpend1_no_timeout+0x88>)
   27030:	f003 fb53 	bl	2a6da <assert_print>
   27034:	4914      	ldr	r1, [pc, #80]	; (27088 <z_unpend1_no_timeout+0x7c>)
   27036:	4818      	ldr	r0, [pc, #96]	; (27098 <z_unpend1_no_timeout+0x8c>)
   27038:	f003 fb4f 	bl	2a6da <assert_print>
   2703c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2703e:	4813      	ldr	r0, [pc, #76]	; (2708c <z_unpend1_no_timeout+0x80>)
   27040:	f003 fb44 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27044:	4810      	ldr	r0, [pc, #64]	; (27088 <z_unpend1_no_timeout+0x7c>)
   27046:	f7fe f833 	bl	250b0 <z_spin_lock_set_owner>
	return list->head == list;
   2704a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2704c:	42a5      	cmp	r5, r4
   2704e:	d013      	beq.n	27078 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   27050:	b114      	cbz	r4, 27058 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   27052:	4620      	mov	r0, r4
   27054:	f7ff ff18 	bl	26e88 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27058:	480b      	ldr	r0, [pc, #44]	; (27088 <z_unpend1_no_timeout+0x7c>)
   2705a:	f7fe f81b 	bl	25094 <z_spin_unlock_valid>
   2705e:	b968      	cbnz	r0, 2707c <z_unpend1_no_timeout+0x70>
   27060:	23c2      	movs	r3, #194	; 0xc2
   27062:	4a0a      	ldr	r2, [pc, #40]	; (2708c <z_unpend1_no_timeout+0x80>)
   27064:	490d      	ldr	r1, [pc, #52]	; (2709c <z_unpend1_no_timeout+0x90>)
   27066:	480b      	ldr	r0, [pc, #44]	; (27094 <z_unpend1_no_timeout+0x88>)
   27068:	f003 fb37 	bl	2a6da <assert_print>
   2706c:	4906      	ldr	r1, [pc, #24]	; (27088 <z_unpend1_no_timeout+0x7c>)
   2706e:	480c      	ldr	r0, [pc, #48]	; (270a0 <z_unpend1_no_timeout+0x94>)
   27070:	f003 fb33 	bl	2a6da <assert_print>
   27074:	21c2      	movs	r1, #194	; 0xc2
   27076:	e7e2      	b.n	2703e <z_unpend1_no_timeout+0x32>
   27078:	2400      	movs	r4, #0
   2707a:	e7ed      	b.n	27058 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   2707c:	f386 8811 	msr	BASEPRI, r6
   27080:	f3bf 8f6f 	isb	sy
}
   27084:	4620      	mov	r0, r4
   27086:	bd70      	pop	{r4, r5, r6, pc}
   27088:	20021ad0 	.word	0x20021ad0
   2708c:	0003341a 	.word	0x0003341a
   27090:	00033473 	.word	0x00033473
   27094:	00032679 	.word	0x00032679
   27098:	00033488 	.word	0x00033488
   2709c:	00033447 	.word	0x00033447
   270a0:	0003345e 	.word	0x0003345e

000270a4 <z_unpend_first_thread>:
{
   270a4:	b570      	push	{r4, r5, r6, lr}
   270a6:	4605      	mov	r5, r0
	__asm__ volatile(
   270a8:	f04f 0320 	mov.w	r3, #32
   270ac:	f3ef 8611 	mrs	r6, BASEPRI
   270b0:	f383 8812 	msr	BASEPRI_MAX, r3
   270b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270b8:	481b      	ldr	r0, [pc, #108]	; (27128 <z_unpend_first_thread+0x84>)
   270ba:	f7fd ffdd 	bl	25078 <z_spin_lock_valid>
   270be:	b968      	cbnz	r0, 270dc <z_unpend_first_thread+0x38>
   270c0:	2394      	movs	r3, #148	; 0x94
   270c2:	4a1a      	ldr	r2, [pc, #104]	; (2712c <z_unpend_first_thread+0x88>)
   270c4:	491a      	ldr	r1, [pc, #104]	; (27130 <z_unpend_first_thread+0x8c>)
   270c6:	481b      	ldr	r0, [pc, #108]	; (27134 <z_unpend_first_thread+0x90>)
   270c8:	f003 fb07 	bl	2a6da <assert_print>
   270cc:	4916      	ldr	r1, [pc, #88]	; (27128 <z_unpend_first_thread+0x84>)
   270ce:	481a      	ldr	r0, [pc, #104]	; (27138 <z_unpend_first_thread+0x94>)
   270d0:	f003 fb03 	bl	2a6da <assert_print>
   270d4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270d6:	4815      	ldr	r0, [pc, #84]	; (2712c <z_unpend_first_thread+0x88>)
   270d8:	f003 faf8 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   270dc:	4812      	ldr	r0, [pc, #72]	; (27128 <z_unpend_first_thread+0x84>)
   270de:	f7fd ffe7 	bl	250b0 <z_spin_lock_set_owner>
	return list->head == list;
   270e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   270e4:	42a5      	cmp	r5, r4
   270e6:	d017      	beq.n	27118 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   270e8:	b134      	cbz	r4, 270f8 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   270ea:	4620      	mov	r0, r4
   270ec:	f7ff fecc 	bl	26e88 <unpend_thread_no_timeout>
   270f0:	f104 0018 	add.w	r0, r4, #24
   270f4:	f000 fc0c 	bl	27910 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270f8:	480b      	ldr	r0, [pc, #44]	; (27128 <z_unpend_first_thread+0x84>)
   270fa:	f7fd ffcb 	bl	25094 <z_spin_unlock_valid>
   270fe:	b968      	cbnz	r0, 2711c <z_unpend_first_thread+0x78>
   27100:	23c2      	movs	r3, #194	; 0xc2
   27102:	4a0a      	ldr	r2, [pc, #40]	; (2712c <z_unpend_first_thread+0x88>)
   27104:	490d      	ldr	r1, [pc, #52]	; (2713c <z_unpend_first_thread+0x98>)
   27106:	480b      	ldr	r0, [pc, #44]	; (27134 <z_unpend_first_thread+0x90>)
   27108:	f003 fae7 	bl	2a6da <assert_print>
   2710c:	4906      	ldr	r1, [pc, #24]	; (27128 <z_unpend_first_thread+0x84>)
   2710e:	480c      	ldr	r0, [pc, #48]	; (27140 <z_unpend_first_thread+0x9c>)
   27110:	f003 fae3 	bl	2a6da <assert_print>
   27114:	21c2      	movs	r1, #194	; 0xc2
   27116:	e7de      	b.n	270d6 <z_unpend_first_thread+0x32>
   27118:	2400      	movs	r4, #0
   2711a:	e7ed      	b.n	270f8 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   2711c:	f386 8811 	msr	BASEPRI, r6
   27120:	f3bf 8f6f 	isb	sy
}
   27124:	4620      	mov	r0, r4
   27126:	bd70      	pop	{r4, r5, r6, pc}
   27128:	20021ad0 	.word	0x20021ad0
   2712c:	0003341a 	.word	0x0003341a
   27130:	00033473 	.word	0x00033473
   27134:	00032679 	.word	0x00032679
   27138:	00033488 	.word	0x00033488
   2713c:	00033447 	.word	0x00033447
   27140:	0003345e 	.word	0x0003345e

00027144 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   27144:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   27146:	4b04      	ldr	r3, [pc, #16]	; (27158 <z_sched_init+0x14>)
   27148:	4608      	mov	r0, r1
   2714a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   2714e:	e9c3 2208 	strd	r2, r2, [r3, #32]
   27152:	f7ff b96b 	b.w	2642c <k_sched_time_slice_set>
   27156:	bf00      	nop
   27158:	20021a88 	.word	0x20021a88

0002715c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2715e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27162:	b16b      	cbz	r3, 27180 <z_impl_k_yield+0x24>
   27164:	493c      	ldr	r1, [pc, #240]	; (27258 <z_impl_k_yield+0xfc>)
   27166:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   2716a:	4a3c      	ldr	r2, [pc, #240]	; (2725c <z_impl_k_yield+0x100>)
   2716c:	483c      	ldr	r0, [pc, #240]	; (27260 <z_impl_k_yield+0x104>)
   2716e:	f003 fab4 	bl	2a6da <assert_print>
   27172:	483c      	ldr	r0, [pc, #240]	; (27264 <z_impl_k_yield+0x108>)
   27174:	f003 fab1 	bl	2a6da <assert_print>
   27178:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2717c:	4837      	ldr	r0, [pc, #220]	; (2725c <z_impl_k_yield+0x100>)
   2717e:	e017      	b.n	271b0 <z_impl_k_yield+0x54>
	__asm__ volatile(
   27180:	f04f 0320 	mov.w	r3, #32
   27184:	f3ef 8611 	mrs	r6, BASEPRI
   27188:	f383 8812 	msr	BASEPRI_MAX, r3
   2718c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27190:	4835      	ldr	r0, [pc, #212]	; (27268 <z_impl_k_yield+0x10c>)
   27192:	f7fd ff71 	bl	25078 <z_spin_lock_valid>
   27196:	b968      	cbnz	r0, 271b4 <z_impl_k_yield+0x58>
   27198:	2394      	movs	r3, #148	; 0x94
   2719a:	4a34      	ldr	r2, [pc, #208]	; (2726c <z_impl_k_yield+0x110>)
   2719c:	4934      	ldr	r1, [pc, #208]	; (27270 <z_impl_k_yield+0x114>)
   2719e:	4830      	ldr	r0, [pc, #192]	; (27260 <z_impl_k_yield+0x104>)
   271a0:	f003 fa9b 	bl	2a6da <assert_print>
   271a4:	4930      	ldr	r1, [pc, #192]	; (27268 <z_impl_k_yield+0x10c>)
   271a6:	4833      	ldr	r0, [pc, #204]	; (27274 <z_impl_k_yield+0x118>)
   271a8:	f003 fa97 	bl	2a6da <assert_print>
   271ac:	2194      	movs	r1, #148	; 0x94
   271ae:	482f      	ldr	r0, [pc, #188]	; (2726c <z_impl_k_yield+0x110>)
   271b0:	f003 fa8c 	bl	2a6cc <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   271b4:	4c30      	ldr	r4, [pc, #192]	; (27278 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   271b6:	482c      	ldr	r0, [pc, #176]	; (27268 <z_impl_k_yield+0x10c>)
   271b8:	f7fd ff7a 	bl	250b0 <z_spin_lock_set_owner>
   271bc:	68a1      	ldr	r1, [r4, #8]
	_priq_run_remove(thread_runq(thread), thread);
   271be:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   271c2:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   271c4:	4628      	mov	r0, r5
	thread->base.thread_state &= ~_THREAD_QUEUED;
   271c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   271ca:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   271cc:	f7ff fb92 	bl	268f4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   271d0:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   271d2:	7b5a      	ldrb	r2, [r3, #13]
   271d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   271d8:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   271da:	4a28      	ldr	r2, [pc, #160]	; (2727c <z_impl_k_yield+0x120>)
   271dc:	4293      	cmp	r3, r2
   271de:	d107      	bne.n	271f0 <z_impl_k_yield+0x94>
   271e0:	4927      	ldr	r1, [pc, #156]	; (27280 <z_impl_k_yield+0x124>)
   271e2:	23ba      	movs	r3, #186	; 0xba
   271e4:	4a1d      	ldr	r2, [pc, #116]	; (2725c <z_impl_k_yield+0x100>)
   271e6:	481e      	ldr	r0, [pc, #120]	; (27260 <z_impl_k_yield+0x104>)
   271e8:	f003 fa77 	bl	2a6da <assert_print>
   271ec:	21ba      	movs	r1, #186	; 0xba
   271ee:	e7c5      	b.n	2717c <z_impl_k_yield+0x20>
	return list->head == list;
   271f0:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   271f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   271f4:	42aa      	cmp	r2, r5
   271f6:	bf08      	it	eq
   271f8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   271fa:	b922      	cbnz	r2, 27206 <z_impl_k_yield+0xaa>
	node->prev = tail;
   271fc:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   27200:	600b      	str	r3, [r1, #0]
	list->tail = node;
   27202:	6263      	str	r3, [r4, #36]	; 0x24
}
   27204:	e00c      	b.n	27220 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   27206:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2720a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2720e:	42b8      	cmp	r0, r7
   27210:	d019      	beq.n	27246 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   27212:	4287      	cmp	r7, r0
   27214:	dd17      	ble.n	27246 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   27216:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   27218:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2721c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2721e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   27220:	2001      	movs	r0, #1
   27222:	f7ff f885 	bl	26330 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27226:	4810      	ldr	r0, [pc, #64]	; (27268 <z_impl_k_yield+0x10c>)
   27228:	f7fd ff34 	bl	25094 <z_spin_unlock_valid>
   2722c:	b978      	cbnz	r0, 2724e <z_impl_k_yield+0xf2>
   2722e:	23e1      	movs	r3, #225	; 0xe1
   27230:	4a0e      	ldr	r2, [pc, #56]	; (2726c <z_impl_k_yield+0x110>)
   27232:	4914      	ldr	r1, [pc, #80]	; (27284 <z_impl_k_yield+0x128>)
   27234:	480a      	ldr	r0, [pc, #40]	; (27260 <z_impl_k_yield+0x104>)
   27236:	f003 fa50 	bl	2a6da <assert_print>
   2723a:	490b      	ldr	r1, [pc, #44]	; (27268 <z_impl_k_yield+0x10c>)
   2723c:	4812      	ldr	r0, [pc, #72]	; (27288 <z_impl_k_yield+0x12c>)
   2723e:	f003 fa4c 	bl	2a6da <assert_print>
   27242:	21e1      	movs	r1, #225	; 0xe1
   27244:	e7b3      	b.n	271ae <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   27246:	428a      	cmp	r2, r1
   27248:	d0d8      	beq.n	271fc <z_impl_k_yield+0xa0>
   2724a:	6812      	ldr	r2, [r2, #0]
   2724c:	e7d5      	b.n	271fa <z_impl_k_yield+0x9e>
   2724e:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   27250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   27254:	f7e9 bc74 	b.w	10b40 <arch_swap>
   27258:	0003844e 	.word	0x0003844e
   2725c:	000386bb 	.word	0x000386bb
   27260:	00032679 	.word	0x00032679
   27264:	00036916 	.word	0x00036916
   27268:	20021ad0 	.word	0x20021ad0
   2726c:	0003341a 	.word	0x0003341a
   27270:	00033473 	.word	0x00033473
   27274:	00033488 	.word	0x00033488
   27278:	20021a88 	.word	0x20021a88
   2727c:	2000a160 	.word	0x2000a160
   27280:	00038704 	.word	0x00038704
   27284:	00033447 	.word	0x00033447
   27288:	0003345e 	.word	0x0003345e

0002728c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27290:	4605      	mov	r5, r0
   27292:	460e      	mov	r6, r1
   27294:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27298:	b16b      	cbz	r3, 272b6 <z_tick_sleep+0x2a>
   2729a:	493f      	ldr	r1, [pc, #252]	; (27398 <z_tick_sleep+0x10c>)
   2729c:	f240 538c 	movw	r3, #1420	; 0x58c
   272a0:	4a3e      	ldr	r2, [pc, #248]	; (2739c <z_tick_sleep+0x110>)
   272a2:	483f      	ldr	r0, [pc, #252]	; (273a0 <z_tick_sleep+0x114>)
   272a4:	f003 fa19 	bl	2a6da <assert_print>
   272a8:	483e      	ldr	r0, [pc, #248]	; (273a4 <z_tick_sleep+0x118>)
   272aa:	f003 fa16 	bl	2a6da <assert_print>
   272ae:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   272b2:	483a      	ldr	r0, [pc, #232]	; (2739c <z_tick_sleep+0x110>)
   272b4:	e025      	b.n	27302 <z_tick_sleep+0x76>
	if (ticks == 0) {
   272b6:	ea50 0301 	orrs.w	r3, r0, r1
   272ba:	d103      	bne.n	272c4 <z_tick_sleep+0x38>
	z_impl_k_yield();
   272bc:	f7ff ff4e 	bl	2715c <z_impl_k_yield>
		return 0;
   272c0:	2000      	movs	r0, #0
   272c2:	e066      	b.n	27392 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   272c4:	1c82      	adds	r2, r0, #2
   272c6:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   272ca:	db1c      	blt.n	27306 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   272cc:	f009 f842 	bl	30354 <sys_clock_tick_get_32>
   272d0:	182c      	adds	r4, r5, r0
   272d2:	f04f 0320 	mov.w	r3, #32
   272d6:	f3ef 8811 	mrs	r8, BASEPRI
   272da:	f383 8812 	msr	BASEPRI_MAX, r3
   272de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272e2:	4831      	ldr	r0, [pc, #196]	; (273a8 <z_tick_sleep+0x11c>)
   272e4:	f7fd fec8 	bl	25078 <z_spin_lock_valid>
   272e8:	b988      	cbnz	r0, 2730e <z_tick_sleep+0x82>
   272ea:	2394      	movs	r3, #148	; 0x94
   272ec:	4a2f      	ldr	r2, [pc, #188]	; (273ac <z_tick_sleep+0x120>)
   272ee:	4930      	ldr	r1, [pc, #192]	; (273b0 <z_tick_sleep+0x124>)
   272f0:	482b      	ldr	r0, [pc, #172]	; (273a0 <z_tick_sleep+0x114>)
   272f2:	f003 f9f2 	bl	2a6da <assert_print>
   272f6:	492c      	ldr	r1, [pc, #176]	; (273a8 <z_tick_sleep+0x11c>)
   272f8:	482e      	ldr	r0, [pc, #184]	; (273b4 <z_tick_sleep+0x128>)
   272fa:	f003 f9ee 	bl	2a6da <assert_print>
   272fe:	2194      	movs	r1, #148	; 0x94
   27300:	482a      	ldr	r0, [pc, #168]	; (273ac <z_tick_sleep+0x120>)
   27302:	f003 f9e3 	bl	2a6cc <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   27306:	f06f 0401 	mvn.w	r4, #1
   2730a:	1a24      	subs	r4, r4, r0
   2730c:	e7e1      	b.n	272d2 <z_tick_sleep+0x46>
	pending_current = _current;
   2730e:	4f2a      	ldr	r7, [pc, #168]	; (273b8 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   27310:	4825      	ldr	r0, [pc, #148]	; (273a8 <z_tick_sleep+0x11c>)
   27312:	f7fd fecd 	bl	250b0 <z_spin_lock_set_owner>
   27316:	68b8      	ldr	r0, [r7, #8]
   27318:	4b28      	ldr	r3, [pc, #160]	; (273bc <z_tick_sleep+0x130>)
   2731a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2731c:	f7ff fbd2 	bl	26ac4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27320:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27322:	462a      	mov	r2, r5
   27324:	4633      	mov	r3, r6
   27326:	3018      	adds	r0, #24
   27328:	4925      	ldr	r1, [pc, #148]	; (273c0 <z_tick_sleep+0x134>)
   2732a:	f000 fa2b 	bl	27784 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2732e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27330:	481d      	ldr	r0, [pc, #116]	; (273a8 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27332:	7b53      	ldrb	r3, [r2, #13]
   27334:	f043 0310 	orr.w	r3, r3, #16
   27338:	7353      	strb	r3, [r2, #13]
   2733a:	f7fd feab 	bl	25094 <z_spin_unlock_valid>
   2733e:	b958      	cbnz	r0, 27358 <z_tick_sleep+0xcc>
   27340:	23e1      	movs	r3, #225	; 0xe1
   27342:	4a1a      	ldr	r2, [pc, #104]	; (273ac <z_tick_sleep+0x120>)
   27344:	491f      	ldr	r1, [pc, #124]	; (273c4 <z_tick_sleep+0x138>)
   27346:	4816      	ldr	r0, [pc, #88]	; (273a0 <z_tick_sleep+0x114>)
   27348:	f003 f9c7 	bl	2a6da <assert_print>
   2734c:	4916      	ldr	r1, [pc, #88]	; (273a8 <z_tick_sleep+0x11c>)
   2734e:	481e      	ldr	r0, [pc, #120]	; (273c8 <z_tick_sleep+0x13c>)
   27350:	f003 f9c3 	bl	2a6da <assert_print>
   27354:	21e1      	movs	r1, #225	; 0xe1
   27356:	e7d3      	b.n	27300 <z_tick_sleep+0x74>
   27358:	4640      	mov	r0, r8
   2735a:	f7e9 fbf1 	bl	10b40 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2735e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27360:	7b5b      	ldrb	r3, [r3, #13]
   27362:	06db      	lsls	r3, r3, #27
   27364:	d50c      	bpl.n	27380 <z_tick_sleep+0xf4>
   27366:	4919      	ldr	r1, [pc, #100]	; (273cc <z_tick_sleep+0x140>)
   27368:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   2736c:	4a0b      	ldr	r2, [pc, #44]	; (2739c <z_tick_sleep+0x110>)
   2736e:	480c      	ldr	r0, [pc, #48]	; (273a0 <z_tick_sleep+0x114>)
   27370:	f003 f9b3 	bl	2a6da <assert_print>
   27374:	480b      	ldr	r0, [pc, #44]	; (273a4 <z_tick_sleep+0x118>)
   27376:	f003 f9b0 	bl	2a6da <assert_print>
   2737a:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   2737e:	e798      	b.n	272b2 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27380:	f008 ffe8 	bl	30354 <sys_clock_tick_get_32>
   27384:	1a20      	subs	r0, r4, r0
   27386:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2738a:	2801      	cmp	r0, #1
   2738c:	f173 0300 	sbcs.w	r3, r3, #0
   27390:	db96      	blt.n	272c0 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   27392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27396:	bf00      	nop
   27398:	0003844e 	.word	0x0003844e
   2739c:	000386bb 	.word	0x000386bb
   273a0:	00032679 	.word	0x00032679
   273a4:	00036916 	.word	0x00036916
   273a8:	20021ad0 	.word	0x20021ad0
   273ac:	0003341a 	.word	0x0003341a
   273b0:	00033473 	.word	0x00033473
   273b4:	00033488 	.word	0x00033488
   273b8:	20021a88 	.word	0x20021a88
   273bc:	20021ac4 	.word	0x20021ac4
   273c0:	00026f5d 	.word	0x00026f5d
   273c4:	00033447 	.word	0x00033447
   273c8:	0003345e 	.word	0x0003345e
   273cc:	00038800 	.word	0x00038800

000273d0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   273d0:	b508      	push	{r3, lr}
   273d2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   273d6:	b173      	cbz	r3, 273f6 <z_impl_k_sleep+0x26>
   273d8:	4912      	ldr	r1, [pc, #72]	; (27424 <z_impl_k_sleep+0x54>)
   273da:	f240 53b7 	movw	r3, #1463	; 0x5b7
   273de:	4a12      	ldr	r2, [pc, #72]	; (27428 <z_impl_k_sleep+0x58>)
   273e0:	4812      	ldr	r0, [pc, #72]	; (2742c <z_impl_k_sleep+0x5c>)
   273e2:	f003 f97a 	bl	2a6da <assert_print>
   273e6:	4812      	ldr	r0, [pc, #72]	; (27430 <z_impl_k_sleep+0x60>)
   273e8:	f003 f977 	bl	2a6da <assert_print>
   273ec:	f240 51b7 	movw	r1, #1463	; 0x5b7
   273f0:	480d      	ldr	r0, [pc, #52]	; (27428 <z_impl_k_sleep+0x58>)
   273f2:	f003 f96b 	bl	2a6cc <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   273f6:	f1b1 3fff 	cmp.w	r1, #4294967295
   273fa:	bf08      	it	eq
   273fc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   27400:	d106      	bne.n	27410 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   27402:	4b0c      	ldr	r3, [pc, #48]	; (27434 <z_impl_k_sleep+0x64>)
   27404:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   27406:	f7ff fcd7 	bl	26db8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2740a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2740e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   27410:	f7ff ff3c 	bl	2728c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   27414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27418:	fb80 0303 	smull	r0, r3, r0, r3
   2741c:	0bc0      	lsrs	r0, r0, #15
   2741e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   27422:	e7f4      	b.n	2740e <z_impl_k_sleep+0x3e>
   27424:	0003844e 	.word	0x0003844e
   27428:	000386bb 	.word	0x000386bb
   2742c:	00032679 	.word	0x00032679
   27430:	00036916 	.word	0x00036916
   27434:	20021a88 	.word	0x20021a88

00027438 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   27438:	4b01      	ldr	r3, [pc, #4]	; (27440 <z_impl_z_current_get+0x8>)
   2743a:	6898      	ldr	r0, [r3, #8]
   2743c:	4770      	bx	lr
   2743e:	bf00      	nop
   27440:	20021a88 	.word	0x20021a88

00027444 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   27444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27448:	4604      	mov	r4, r0
   2744a:	f04f 0320 	mov.w	r3, #32
   2744e:	f3ef 8611 	mrs	r6, BASEPRI
   27452:	f383 8812 	msr	BASEPRI_MAX, r3
   27456:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2745a:	4851      	ldr	r0, [pc, #324]	; (275a0 <z_thread_abort+0x15c>)
   2745c:	f7fd fe0c 	bl	25078 <z_spin_lock_valid>
   27460:	b968      	cbnz	r0, 2747e <z_thread_abort+0x3a>
   27462:	2394      	movs	r3, #148	; 0x94
   27464:	4a4f      	ldr	r2, [pc, #316]	; (275a4 <z_thread_abort+0x160>)
   27466:	4950      	ldr	r1, [pc, #320]	; (275a8 <z_thread_abort+0x164>)
   27468:	4850      	ldr	r0, [pc, #320]	; (275ac <z_thread_abort+0x168>)
   2746a:	f003 f936 	bl	2a6da <assert_print>
   2746e:	494c      	ldr	r1, [pc, #304]	; (275a0 <z_thread_abort+0x15c>)
   27470:	484f      	ldr	r0, [pc, #316]	; (275b0 <z_thread_abort+0x16c>)
   27472:	f003 f932 	bl	2a6da <assert_print>
   27476:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27478:	484a      	ldr	r0, [pc, #296]	; (275a4 <z_thread_abort+0x160>)
   2747a:	f003 f927 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   2747e:	4848      	ldr	r0, [pc, #288]	; (275a0 <z_thread_abort+0x15c>)
   27480:	f7fd fe16 	bl	250b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   27484:	7b23      	ldrb	r3, [r4, #12]
   27486:	07d9      	lsls	r1, r3, #31
   27488:	d522      	bpl.n	274d0 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2748a:	4845      	ldr	r0, [pc, #276]	; (275a0 <z_thread_abort+0x15c>)
   2748c:	f7fd fe02 	bl	25094 <z_spin_unlock_valid>
   27490:	b958      	cbnz	r0, 274aa <z_thread_abort+0x66>
   27492:	23c2      	movs	r3, #194	; 0xc2
   27494:	4a43      	ldr	r2, [pc, #268]	; (275a4 <z_thread_abort+0x160>)
   27496:	4947      	ldr	r1, [pc, #284]	; (275b4 <z_thread_abort+0x170>)
   27498:	4844      	ldr	r0, [pc, #272]	; (275ac <z_thread_abort+0x168>)
   2749a:	f003 f91e 	bl	2a6da <assert_print>
   2749e:	4940      	ldr	r1, [pc, #256]	; (275a0 <z_thread_abort+0x15c>)
   274a0:	4845      	ldr	r0, [pc, #276]	; (275b8 <z_thread_abort+0x174>)
   274a2:	f003 f91a 	bl	2a6da <assert_print>
   274a6:	21c2      	movs	r1, #194	; 0xc2
   274a8:	e7e6      	b.n	27478 <z_thread_abort+0x34>
	__asm__ volatile(
   274aa:	f386 8811 	msr	BASEPRI, r6
   274ae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   274b2:	f240 63c3 	movw	r3, #1731	; 0x6c3
   274b6:	4a41      	ldr	r2, [pc, #260]	; (275bc <z_thread_abort+0x178>)
   274b8:	4941      	ldr	r1, [pc, #260]	; (275c0 <z_thread_abort+0x17c>)
   274ba:	483c      	ldr	r0, [pc, #240]	; (275ac <z_thread_abort+0x168>)
   274bc:	f003 f90d 	bl	2a6da <assert_print>
   274c0:	4621      	mov	r1, r4
   274c2:	4840      	ldr	r0, [pc, #256]	; (275c4 <z_thread_abort+0x180>)
   274c4:	f003 f909 	bl	2a6da <assert_print>
   274c8:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   274cc:	483b      	ldr	r0, [pc, #236]	; (275bc <z_thread_abort+0x178>)
   274ce:	e7d4      	b.n	2747a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   274d0:	7b63      	ldrb	r3, [r4, #13]
   274d2:	071a      	lsls	r2, r3, #28
   274d4:	d50a      	bpl.n	274ec <z_thread_abort+0xa8>
   274d6:	4832      	ldr	r0, [pc, #200]	; (275a0 <z_thread_abort+0x15c>)
   274d8:	f7fd fddc 	bl	25094 <z_spin_unlock_valid>
   274dc:	2800      	cmp	r0, #0
   274de:	d0d8      	beq.n	27492 <z_thread_abort+0x4e>
   274e0:	f386 8811 	msr	BASEPRI, r6
   274e4:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   274e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274ec:	f023 0220 	bic.w	r2, r3, #32
   274f0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   274f4:	09d2      	lsrs	r2, r2, #7
   274f6:	d12c      	bne.n	27552 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274f8:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   274fa:	68a3      	ldr	r3, [r4, #8]
   274fc:	b113      	cbz	r3, 27504 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   274fe:	4620      	mov	r0, r4
   27500:	f7ff fcc2 	bl	26e88 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   27504:	f104 0018 	add.w	r0, r4, #24
   27508:	f000 fa02 	bl	27910 <z_abort_timeout>
   2750c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   27510:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   27514:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27516:	42bd      	cmp	r5, r7
   27518:	d000      	beq.n	2751c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2751a:	bb25      	cbnz	r5, 27566 <z_thread_abort+0x122>
		update_cache(1);
   2751c:	2001      	movs	r0, #1
   2751e:	f7fe ff07 	bl	26330 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   27522:	4b29      	ldr	r3, [pc, #164]	; (275c8 <z_thread_abort+0x184>)
   27524:	689b      	ldr	r3, [r3, #8]
   27526:	42a3      	cmp	r3, r4
   27528:	d1d5      	bne.n	274d6 <z_thread_abort+0x92>
   2752a:	f3ef 8305 	mrs	r3, IPSR
   2752e:	2b00      	cmp	r3, #0
   27530:	d1d1      	bne.n	274d6 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27532:	481b      	ldr	r0, [pc, #108]	; (275a0 <z_thread_abort+0x15c>)
   27534:	f7fd fdae 	bl	25094 <z_spin_unlock_valid>
   27538:	bb10      	cbnz	r0, 27580 <z_thread_abort+0x13c>
   2753a:	23e1      	movs	r3, #225	; 0xe1
   2753c:	4a19      	ldr	r2, [pc, #100]	; (275a4 <z_thread_abort+0x160>)
   2753e:	491d      	ldr	r1, [pc, #116]	; (275b4 <z_thread_abort+0x170>)
   27540:	481a      	ldr	r0, [pc, #104]	; (275ac <z_thread_abort+0x168>)
   27542:	f003 f8ca 	bl	2a6da <assert_print>
   27546:	4916      	ldr	r1, [pc, #88]	; (275a0 <z_thread_abort+0x15c>)
   27548:	481b      	ldr	r0, [pc, #108]	; (275b8 <z_thread_abort+0x174>)
   2754a:	f003 f8c6 	bl	2a6da <assert_print>
   2754e:	21e1      	movs	r1, #225	; 0xe1
   27550:	e792      	b.n	27478 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27552:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27556:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2755a:	4621      	mov	r1, r4
   2755c:	481b      	ldr	r0, [pc, #108]	; (275cc <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2755e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27560:	f7ff f9c8 	bl	268f4 <z_priq_dumb_remove>
}
   27564:	e7c9      	b.n	274fa <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   27566:	4628      	mov	r0, r5
   27568:	f7ff fc8e 	bl	26e88 <unpend_thread_no_timeout>
   2756c:	f105 0018 	add.w	r0, r5, #24
   27570:	f000 f9ce 	bl	27910 <z_abort_timeout>
		ready_thread(thread);
   27574:	4628      	mov	r0, r5
   27576:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2757a:	f7fe ff0d 	bl	26398 <ready_thread>
   2757e:	e7c9      	b.n	27514 <z_thread_abort+0xd0>
   27580:	4630      	mov	r0, r6
   27582:	f7e9 fadd 	bl	10b40 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27586:	490e      	ldr	r1, [pc, #56]	; (275c0 <z_thread_abort+0x17c>)
   27588:	f240 63f2 	movw	r3, #1778	; 0x6f2
   2758c:	4a0b      	ldr	r2, [pc, #44]	; (275bc <z_thread_abort+0x178>)
   2758e:	4807      	ldr	r0, [pc, #28]	; (275ac <z_thread_abort+0x168>)
   27590:	f003 f8a3 	bl	2a6da <assert_print>
   27594:	480e      	ldr	r0, [pc, #56]	; (275d0 <z_thread_abort+0x18c>)
   27596:	f003 f8a0 	bl	2a6da <assert_print>
   2759a:	f240 61f2 	movw	r1, #1778	; 0x6f2
   2759e:	e795      	b.n	274cc <z_thread_abort+0x88>
   275a0:	20021ad0 	.word	0x20021ad0
   275a4:	0003341a 	.word	0x0003341a
   275a8:	00033473 	.word	0x00033473
   275ac:	00032679 	.word	0x00032679
   275b0:	00033488 	.word	0x00033488
   275b4:	00033447 	.word	0x00033447
   275b8:	0003345e 	.word	0x0003345e
   275bc:	000386bb 	.word	0x000386bb
   275c0:	00037b56 	.word	0x00037b56
   275c4:	00038840 	.word	0x00038840
   275c8:	20021a88 	.word	0x20021a88
   275cc:	20021aa8 	.word	0x20021aa8
   275d0:	0003885f 	.word	0x0003885f

000275d4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   275d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   275d8:	4606      	mov	r6, r0
   275da:	4688      	mov	r8, r1
   275dc:	4617      	mov	r7, r2
	__asm__ volatile(
   275de:	f04f 0320 	mov.w	r3, #32
   275e2:	f3ef 8911 	mrs	r9, BASEPRI
   275e6:	f383 8812 	msr	BASEPRI_MAX, r3
   275ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275ee:	4821      	ldr	r0, [pc, #132]	; (27674 <z_sched_wake+0xa0>)
   275f0:	f7fd fd42 	bl	25078 <z_spin_lock_valid>
   275f4:	4605      	mov	r5, r0
   275f6:	b968      	cbnz	r0, 27614 <z_sched_wake+0x40>
   275f8:	2394      	movs	r3, #148	; 0x94
   275fa:	4a1f      	ldr	r2, [pc, #124]	; (27678 <z_sched_wake+0xa4>)
   275fc:	491f      	ldr	r1, [pc, #124]	; (2767c <z_sched_wake+0xa8>)
   275fe:	4820      	ldr	r0, [pc, #128]	; (27680 <z_sched_wake+0xac>)
   27600:	f003 f86b 	bl	2a6da <assert_print>
   27604:	491b      	ldr	r1, [pc, #108]	; (27674 <z_sched_wake+0xa0>)
   27606:	481f      	ldr	r0, [pc, #124]	; (27684 <z_sched_wake+0xb0>)
   27608:	f003 f867 	bl	2a6da <assert_print>
   2760c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2760e:	481a      	ldr	r0, [pc, #104]	; (27678 <z_sched_wake+0xa4>)
   27610:	f003 f85c 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27614:	4817      	ldr	r0, [pc, #92]	; (27674 <z_sched_wake+0xa0>)
   27616:	f7fd fd4b 	bl	250b0 <z_spin_lock_set_owner>
	return list->head == list;
   2761a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2761c:	42a6      	cmp	r6, r4
   2761e:	d01d      	beq.n	2765c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   27620:	b1f4      	cbz	r4, 27660 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27622:	4620      	mov	r0, r4
   27624:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   27628:	6167      	str	r7, [r4, #20]
   2762a:	f7ff fc2d 	bl	26e88 <unpend_thread_no_timeout>
   2762e:	f104 0018 	add.w	r0, r4, #24
   27632:	f000 f96d 	bl	27910 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   27636:	4620      	mov	r0, r4
   27638:	f7fe feae 	bl	26398 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2763c:	480d      	ldr	r0, [pc, #52]	; (27674 <z_sched_wake+0xa0>)
   2763e:	f7fd fd29 	bl	25094 <z_spin_unlock_valid>
   27642:	b978      	cbnz	r0, 27664 <z_sched_wake+0x90>
   27644:	23c2      	movs	r3, #194	; 0xc2
   27646:	4a0c      	ldr	r2, [pc, #48]	; (27678 <z_sched_wake+0xa4>)
   27648:	490f      	ldr	r1, [pc, #60]	; (27688 <z_sched_wake+0xb4>)
   2764a:	480d      	ldr	r0, [pc, #52]	; (27680 <z_sched_wake+0xac>)
   2764c:	f003 f845 	bl	2a6da <assert_print>
   27650:	4908      	ldr	r1, [pc, #32]	; (27674 <z_sched_wake+0xa0>)
   27652:	480e      	ldr	r0, [pc, #56]	; (2768c <z_sched_wake+0xb8>)
   27654:	f003 f841 	bl	2a6da <assert_print>
   27658:	21c2      	movs	r1, #194	; 0xc2
   2765a:	e7d8      	b.n	2760e <z_sched_wake+0x3a>
	bool ret = false;
   2765c:	2500      	movs	r5, #0
   2765e:	e7ed      	b.n	2763c <z_sched_wake+0x68>
   27660:	4625      	mov	r5, r4
   27662:	e7eb      	b.n	2763c <z_sched_wake+0x68>
	__asm__ volatile(
   27664:	f389 8811 	msr	BASEPRI, r9
   27668:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   2766c:	4628      	mov	r0, r5
   2766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27672:	bf00      	nop
   27674:	20021ad0 	.word	0x20021ad0
   27678:	0003341a 	.word	0x0003341a
   2767c:	00033473 	.word	0x00033473
   27680:	00032679 	.word	0x00032679
   27684:	00033488 	.word	0x00033488
   27688:	00033447 	.word	0x00033447
   2768c:	0003345e 	.word	0x0003345e

00027690 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27690:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27692:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   27696:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27698:	e9cd 6700 	strd	r6, r7, [sp]
   2769c:	f7ff fa84 	bl	26ba8 <z_pend_curr>

	if (data != NULL) {
   276a0:	b11c      	cbz	r4, 276aa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   276a2:	4b03      	ldr	r3, [pc, #12]	; (276b0 <z_sched_wait+0x20>)
   276a4:	689b      	ldr	r3, [r3, #8]
   276a6:	695b      	ldr	r3, [r3, #20]
   276a8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   276aa:	b002      	add	sp, #8
   276ac:	bdd0      	pop	{r4, r6, r7, pc}
   276ae:	bf00      	nop
   276b0:	20021a88 	.word	0x20021a88

000276b4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   276b4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   276b6:	4806      	ldr	r0, [pc, #24]	; (276d0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   276b8:	4a06      	ldr	r2, [pc, #24]	; (276d4 <z_data_copy+0x20>)
   276ba:	4907      	ldr	r1, [pc, #28]	; (276d8 <z_data_copy+0x24>)
   276bc:	1a12      	subs	r2, r2, r0
   276be:	f008 fd29 	bl	30114 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   276c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   276c6:	4a05      	ldr	r2, [pc, #20]	; (276dc <z_data_copy+0x28>)
   276c8:	4905      	ldr	r1, [pc, #20]	; (276e0 <z_data_copy+0x2c>)
   276ca:	4806      	ldr	r0, [pc, #24]	; (276e4 <z_data_copy+0x30>)
   276cc:	f008 bd22 	b.w	30114 <z_early_memcpy>
   276d0:	20008000 	.word	0x20008000
   276d4:	20008e40 	.word	0x20008e40
   276d8:	00038e80 	.word	0x00038e80
   276dc:	00000000 	.word	0x00000000
   276e0:	00038e80 	.word	0x00038e80
   276e4:	20008000 	.word	0x20008000

000276e8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   276e8:	4b03      	ldr	r3, [pc, #12]	; (276f8 <elapsed+0x10>)
   276ea:	681b      	ldr	r3, [r3, #0]
   276ec:	b90b      	cbnz	r3, 276f2 <elapsed+0xa>
   276ee:	f7f7 b893 	b.w	1e818 <sys_clock_elapsed>
}
   276f2:	2000      	movs	r0, #0
   276f4:	4770      	bx	lr
   276f6:	bf00      	nop
   276f8:	20021ad4 	.word	0x20021ad4

000276fc <next_timeout>:

static int32_t next_timeout(void)
{
   276fc:	b510      	push	{r4, lr}
	return list->head == list;
   276fe:	4b11      	ldr	r3, [pc, #68]	; (27744 <next_timeout+0x48>)
   27700:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27702:	429c      	cmp	r4, r3
   27704:	d10a      	bne.n	2771c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   27706:	f7ff ffef 	bl	276e8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2770a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2770e:	4b0e      	ldr	r3, [pc, #56]	; (27748 <next_timeout+0x4c>)
   27710:	691b      	ldr	r3, [r3, #16]
   27712:	b113      	cbz	r3, 2771a <next_timeout+0x1e>
   27714:	4298      	cmp	r0, r3
   27716:	bfa8      	it	ge
   27718:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2771a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2771c:	f7ff ffe4 	bl	276e8 <elapsed>
	if ((to == NULL) ||
   27720:	2c00      	cmp	r4, #0
   27722:	d0f2      	beq.n	2770a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   27724:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   27728:	1a1b      	subs	r3, r3, r0
   2772a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2772e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27732:	f172 0100 	sbcs.w	r1, r2, #0
   27736:	dae8      	bge.n	2770a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   27738:	2a00      	cmp	r2, #0
   2773a:	bfac      	ite	ge
   2773c:	4618      	movge	r0, r3
   2773e:	2000      	movlt	r0, #0
   27740:	e7e5      	b.n	2770e <next_timeout+0x12>
   27742:	bf00      	nop
   27744:	20008744 	.word	0x20008744
   27748:	20021a88 	.word	0x20021a88

0002774c <remove_timeout>:
{
   2774c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2774e:	b170      	cbz	r0, 2776e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   27750:	4b0b      	ldr	r3, [pc, #44]	; (27780 <remove_timeout+0x34>)
   27752:	685b      	ldr	r3, [r3, #4]
   27754:	4298      	cmp	r0, r3
   27756:	d00a      	beq.n	2776e <remove_timeout+0x22>
   27758:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2775a:	b143      	cbz	r3, 2776e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2775c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   27760:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   27764:	1912      	adds	r2, r2, r4
   27766:	eb41 0105 	adc.w	r1, r1, r5
   2776a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   2776e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27772:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27774:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27776:	2300      	movs	r3, #0
	node->prev = NULL;
   27778:	e9c0 3300 	strd	r3, r3, [r0]
}
   2777c:	bd30      	pop	{r4, r5, pc}
   2777e:	bf00      	nop
   27780:	20008744 	.word	0x20008744

00027784 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27784:	f1b3 3fff 	cmp.w	r3, #4294967295
   27788:	bf08      	it	eq
   2778a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2778e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27792:	4604      	mov	r4, r0
   27794:	4692      	mov	sl, r2
   27796:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27798:	f000 809e 	beq.w	278d8 <z_add_timeout+0x154>
	return node->next != NULL;
   2779c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2779e:	b166      	cbz	r6, 277ba <z_add_timeout+0x36>
   277a0:	494e      	ldr	r1, [pc, #312]	; (278dc <z_add_timeout+0x158>)
   277a2:	2363      	movs	r3, #99	; 0x63
   277a4:	4a4e      	ldr	r2, [pc, #312]	; (278e0 <z_add_timeout+0x15c>)
   277a6:	484f      	ldr	r0, [pc, #316]	; (278e4 <z_add_timeout+0x160>)
   277a8:	f002 ff97 	bl	2a6da <assert_print>
   277ac:	484e      	ldr	r0, [pc, #312]	; (278e8 <z_add_timeout+0x164>)
   277ae:	f002 ff94 	bl	2a6da <assert_print>
   277b2:	2163      	movs	r1, #99	; 0x63
   277b4:	484a      	ldr	r0, [pc, #296]	; (278e0 <z_add_timeout+0x15c>)
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   277b6:	f002 ff89 	bl	2a6cc <assert_post_action>
	to->fn = fn;
   277ba:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   277bc:	f04f 0320 	mov.w	r3, #32
   277c0:	f3ef 8711 	mrs	r7, BASEPRI
   277c4:	f383 8812 	msr	BASEPRI_MAX, r3
   277c8:	f3bf 8f6f 	isb	sy
   277cc:	4847      	ldr	r0, [pc, #284]	; (278ec <z_add_timeout+0x168>)
   277ce:	f7fd fc53 	bl	25078 <z_spin_lock_valid>
   277d2:	b960      	cbnz	r0, 277ee <z_add_timeout+0x6a>
   277d4:	2394      	movs	r3, #148	; 0x94
   277d6:	4a46      	ldr	r2, [pc, #280]	; (278f0 <z_add_timeout+0x16c>)
   277d8:	4946      	ldr	r1, [pc, #280]	; (278f4 <z_add_timeout+0x170>)
   277da:	4842      	ldr	r0, [pc, #264]	; (278e4 <z_add_timeout+0x160>)
   277dc:	f002 ff7d 	bl	2a6da <assert_print>
   277e0:	4942      	ldr	r1, [pc, #264]	; (278ec <z_add_timeout+0x168>)
   277e2:	4845      	ldr	r0, [pc, #276]	; (278f8 <z_add_timeout+0x174>)
   277e4:	f002 ff79 	bl	2a6da <assert_print>
   277e8:	2194      	movs	r1, #148	; 0x94
   277ea:	4841      	ldr	r0, [pc, #260]	; (278f0 <z_add_timeout+0x16c>)
   277ec:	e7e3      	b.n	277b6 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   277ee:	483f      	ldr	r0, [pc, #252]	; (278ec <z_add_timeout+0x168>)
   277f0:	f7fd fc5e 	bl	250b0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   277f4:	f1ba 3fff 	cmp.w	sl, #4294967295
   277f8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   277fc:	da23      	bge.n	27846 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   277fe:	f06f 0301 	mvn.w	r3, #1
   27802:	493e      	ldr	r1, [pc, #248]	; (278fc <z_add_timeout+0x178>)
   27804:	e9d1 2000 	ldrd	r2, r0, [r1]
   27808:	1a9b      	subs	r3, r3, r2
   2780a:	f04f 32ff 	mov.w	r2, #4294967295
   2780e:	eb62 0000 	sbc.w	r0, r2, r0
   27812:	ebb3 030a 	subs.w	r3, r3, sl
   27816:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   2781a:	2b01      	cmp	r3, #1
   2781c:	f170 0200 	sbcs.w	r2, r0, #0
   27820:	da01      	bge.n	27826 <z_add_timeout+0xa2>
   27822:	2301      	movs	r3, #1
   27824:	4630      	mov	r0, r6
   27826:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2782a:	4b35      	ldr	r3, [pc, #212]	; (27900 <z_add_timeout+0x17c>)
   2782c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2782e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27832:	429a      	cmp	r2, r3
   27834:	bf18      	it	ne
   27836:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   27838:	b986      	cbnz	r6, 2785c <z_add_timeout+0xd8>
	node->prev = tail;
   2783a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2783e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   27842:	605c      	str	r4, [r3, #4]
}
   27844:	e01c      	b.n	27880 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   27846:	f7ff ff4f 	bl	276e8 <elapsed>
   2784a:	f11a 0801 	adds.w	r8, sl, #1
   2784e:	f145 0500 	adc.w	r5, r5, #0
   27852:	eb18 0300 	adds.w	r3, r8, r0
   27856:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2785a:	e7e4      	b.n	27826 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   2785c:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   27860:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   27864:	428a      	cmp	r2, r1
   27866:	eb70 0e05 	sbcs.w	lr, r0, r5
   2786a:	da28      	bge.n	278be <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
   2786c:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   2786e:	6872      	ldr	r2, [r6, #4]
   27870:	eb65 0500 	sbc.w	r5, r5, r0
   27874:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   27878:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   2787c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2787e:	6074      	str	r4, [r6, #4]
	return list->head == list;
   27880:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27882:	429a      	cmp	r2, r3
   27884:	d00b      	beq.n	2789e <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   27886:	4294      	cmp	r4, r2
   27888:	d109      	bne.n	2789e <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2788a:	f7ff ff37 	bl	276fc <next_timeout>

			if (next_time == 0 ||
   2788e:	b118      	cbz	r0, 27898 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   27890:	4b1c      	ldr	r3, [pc, #112]	; (27904 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   27892:	691b      	ldr	r3, [r3, #16]
   27894:	4283      	cmp	r3, r0
   27896:	d002      	beq.n	2789e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   27898:	2100      	movs	r1, #0
   2789a:	f7f6 ff8d 	bl	1e7b8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2789e:	4813      	ldr	r0, [pc, #76]	; (278ec <z_add_timeout+0x168>)
   278a0:	f7fd fbf8 	bl	25094 <z_spin_unlock_valid>
   278a4:	b9a0      	cbnz	r0, 278d0 <z_add_timeout+0x14c>
   278a6:	23c2      	movs	r3, #194	; 0xc2
   278a8:	4a11      	ldr	r2, [pc, #68]	; (278f0 <z_add_timeout+0x16c>)
   278aa:	4917      	ldr	r1, [pc, #92]	; (27908 <z_add_timeout+0x184>)
   278ac:	480d      	ldr	r0, [pc, #52]	; (278e4 <z_add_timeout+0x160>)
   278ae:	f002 ff14 	bl	2a6da <assert_print>
   278b2:	490e      	ldr	r1, [pc, #56]	; (278ec <z_add_timeout+0x168>)
   278b4:	4815      	ldr	r0, [pc, #84]	; (2790c <z_add_timeout+0x188>)
   278b6:	f002 ff10 	bl	2a6da <assert_print>
   278ba:	21c2      	movs	r1, #194	; 0xc2
   278bc:	e795      	b.n	277ea <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   278be:	1a52      	subs	r2, r2, r1
   278c0:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   278c4:	4566      	cmp	r6, ip
   278c6:	e9c4 2004 	strd	r2, r0, [r4, #16]
   278ca:	d0b6      	beq.n	2783a <z_add_timeout+0xb6>
   278cc:	6836      	ldr	r6, [r6, #0]
   278ce:	e7b3      	b.n	27838 <z_add_timeout+0xb4>
	__asm__ volatile(
   278d0:	f387 8811 	msr	BASEPRI, r7
   278d4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   278d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   278dc:	000388a5 	.word	0x000388a5
   278e0:	00038881 	.word	0x00038881
   278e4:	00032679 	.word	0x00032679
   278e8:	00036916 	.word	0x00036916
   278ec:	20021ad8 	.word	0x20021ad8
   278f0:	0003341a 	.word	0x0003341a
   278f4:	00033473 	.word	0x00033473
   278f8:	00033488 	.word	0x00033488
   278fc:	2000a318 	.word	0x2000a318
   27900:	20008744 	.word	0x20008744
   27904:	20021a88 	.word	0x20021a88
   27908:	00033447 	.word	0x00033447
   2790c:	0003345e 	.word	0x0003345e

00027910 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   27910:	b538      	push	{r3, r4, r5, lr}
   27912:	4604      	mov	r4, r0
	__asm__ volatile(
   27914:	f04f 0320 	mov.w	r3, #32
   27918:	f3ef 8511 	mrs	r5, BASEPRI
   2791c:	f383 8812 	msr	BASEPRI_MAX, r3
   27920:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27924:	4819      	ldr	r0, [pc, #100]	; (2798c <z_abort_timeout+0x7c>)
   27926:	f7fd fba7 	bl	25078 <z_spin_lock_valid>
   2792a:	b968      	cbnz	r0, 27948 <z_abort_timeout+0x38>
   2792c:	2394      	movs	r3, #148	; 0x94
   2792e:	4a18      	ldr	r2, [pc, #96]	; (27990 <z_abort_timeout+0x80>)
   27930:	4918      	ldr	r1, [pc, #96]	; (27994 <z_abort_timeout+0x84>)
   27932:	4819      	ldr	r0, [pc, #100]	; (27998 <z_abort_timeout+0x88>)
   27934:	f002 fed1 	bl	2a6da <assert_print>
   27938:	4914      	ldr	r1, [pc, #80]	; (2798c <z_abort_timeout+0x7c>)
   2793a:	4818      	ldr	r0, [pc, #96]	; (2799c <z_abort_timeout+0x8c>)
   2793c:	f002 fecd 	bl	2a6da <assert_print>
   27940:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27942:	4813      	ldr	r0, [pc, #76]	; (27990 <z_abort_timeout+0x80>)
   27944:	f002 fec2 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27948:	4810      	ldr	r0, [pc, #64]	; (2798c <z_abort_timeout+0x7c>)
   2794a:	f7fd fbb1 	bl	250b0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   2794e:	6823      	ldr	r3, [r4, #0]
   27950:	b19b      	cbz	r3, 2797a <z_abort_timeout+0x6a>
			remove_timeout(to);
   27952:	4620      	mov	r0, r4
   27954:	f7ff fefa 	bl	2774c <remove_timeout>
			ret = 0;
   27958:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2795a:	480c      	ldr	r0, [pc, #48]	; (2798c <z_abort_timeout+0x7c>)
   2795c:	f7fd fb9a 	bl	25094 <z_spin_unlock_valid>
   27960:	b970      	cbnz	r0, 27980 <z_abort_timeout+0x70>
   27962:	23c2      	movs	r3, #194	; 0xc2
   27964:	4a0a      	ldr	r2, [pc, #40]	; (27990 <z_abort_timeout+0x80>)
   27966:	490e      	ldr	r1, [pc, #56]	; (279a0 <z_abort_timeout+0x90>)
   27968:	480b      	ldr	r0, [pc, #44]	; (27998 <z_abort_timeout+0x88>)
   2796a:	f002 feb6 	bl	2a6da <assert_print>
   2796e:	4907      	ldr	r1, [pc, #28]	; (2798c <z_abort_timeout+0x7c>)
   27970:	480c      	ldr	r0, [pc, #48]	; (279a4 <z_abort_timeout+0x94>)
   27972:	f002 feb2 	bl	2a6da <assert_print>
   27976:	21c2      	movs	r1, #194	; 0xc2
   27978:	e7e3      	b.n	27942 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   2797a:	f06f 0415 	mvn.w	r4, #21
   2797e:	e7ec      	b.n	2795a <z_abort_timeout+0x4a>
	__asm__ volatile(
   27980:	f385 8811 	msr	BASEPRI, r5
   27984:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27988:	4620      	mov	r0, r4
   2798a:	bd38      	pop	{r3, r4, r5, pc}
   2798c:	20021ad8 	.word	0x20021ad8
   27990:	0003341a 	.word	0x0003341a
   27994:	00033473 	.word	0x00033473
   27998:	00032679 	.word	0x00032679
   2799c:	00033488 	.word	0x00033488
   279a0:	00033447 	.word	0x00033447
   279a4:	0003345e 	.word	0x0003345e

000279a8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   279a8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   279aa:	f04f 0320 	mov.w	r3, #32
   279ae:	f3ef 8511 	mrs	r5, BASEPRI
   279b2:	f383 8812 	msr	BASEPRI_MAX, r3
   279b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   279ba:	4817      	ldr	r0, [pc, #92]	; (27a18 <z_get_next_timeout_expiry+0x70>)
   279bc:	f7fd fb5c 	bl	25078 <z_spin_lock_valid>
   279c0:	b968      	cbnz	r0, 279de <z_get_next_timeout_expiry+0x36>
   279c2:	2394      	movs	r3, #148	; 0x94
   279c4:	4a15      	ldr	r2, [pc, #84]	; (27a1c <z_get_next_timeout_expiry+0x74>)
   279c6:	4916      	ldr	r1, [pc, #88]	; (27a20 <z_get_next_timeout_expiry+0x78>)
   279c8:	4816      	ldr	r0, [pc, #88]	; (27a24 <z_get_next_timeout_expiry+0x7c>)
   279ca:	f002 fe86 	bl	2a6da <assert_print>
   279ce:	4912      	ldr	r1, [pc, #72]	; (27a18 <z_get_next_timeout_expiry+0x70>)
   279d0:	4815      	ldr	r0, [pc, #84]	; (27a28 <z_get_next_timeout_expiry+0x80>)
   279d2:	f002 fe82 	bl	2a6da <assert_print>
   279d6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279d8:	4810      	ldr	r0, [pc, #64]	; (27a1c <z_get_next_timeout_expiry+0x74>)
   279da:	f002 fe77 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   279de:	480e      	ldr	r0, [pc, #56]	; (27a18 <z_get_next_timeout_expiry+0x70>)
   279e0:	f7fd fb66 	bl	250b0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   279e4:	f7ff fe8a 	bl	276fc <next_timeout>
   279e8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   279ea:	480b      	ldr	r0, [pc, #44]	; (27a18 <z_get_next_timeout_expiry+0x70>)
   279ec:	f7fd fb52 	bl	25094 <z_spin_unlock_valid>
   279f0:	b958      	cbnz	r0, 27a0a <z_get_next_timeout_expiry+0x62>
   279f2:	23c2      	movs	r3, #194	; 0xc2
   279f4:	4a09      	ldr	r2, [pc, #36]	; (27a1c <z_get_next_timeout_expiry+0x74>)
   279f6:	490d      	ldr	r1, [pc, #52]	; (27a2c <z_get_next_timeout_expiry+0x84>)
   279f8:	480a      	ldr	r0, [pc, #40]	; (27a24 <z_get_next_timeout_expiry+0x7c>)
   279fa:	f002 fe6e 	bl	2a6da <assert_print>
   279fe:	4906      	ldr	r1, [pc, #24]	; (27a18 <z_get_next_timeout_expiry+0x70>)
   27a00:	480b      	ldr	r0, [pc, #44]	; (27a30 <z_get_next_timeout_expiry+0x88>)
   27a02:	f002 fe6a 	bl	2a6da <assert_print>
   27a06:	21c2      	movs	r1, #194	; 0xc2
   27a08:	e7e6      	b.n	279d8 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   27a0a:	f385 8811 	msr	BASEPRI, r5
   27a0e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   27a12:	4620      	mov	r0, r4
   27a14:	bd38      	pop	{r3, r4, r5, pc}
   27a16:	bf00      	nop
   27a18:	20021ad8 	.word	0x20021ad8
   27a1c:	0003341a 	.word	0x0003341a
   27a20:	00033473 	.word	0x00033473
   27a24:	00032679 	.word	0x00032679
   27a28:	00033488 	.word	0x00033488
   27a2c:	00033447 	.word	0x00033447
   27a30:	0003345e 	.word	0x0003345e

00027a34 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   27a34:	b570      	push	{r4, r5, r6, lr}
   27a36:	4604      	mov	r4, r0
   27a38:	460d      	mov	r5, r1
	__asm__ volatile(
   27a3a:	f04f 0320 	mov.w	r3, #32
   27a3e:	f3ef 8611 	mrs	r6, BASEPRI
   27a42:	f383 8812 	msr	BASEPRI_MAX, r3
   27a46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a4a:	481b      	ldr	r0, [pc, #108]	; (27ab8 <z_set_timeout_expiry+0x84>)
   27a4c:	f7fd fb14 	bl	25078 <z_spin_lock_valid>
   27a50:	b968      	cbnz	r0, 27a6e <z_set_timeout_expiry+0x3a>
   27a52:	2394      	movs	r3, #148	; 0x94
   27a54:	4a19      	ldr	r2, [pc, #100]	; (27abc <z_set_timeout_expiry+0x88>)
   27a56:	491a      	ldr	r1, [pc, #104]	; (27ac0 <z_set_timeout_expiry+0x8c>)
   27a58:	481a      	ldr	r0, [pc, #104]	; (27ac4 <z_set_timeout_expiry+0x90>)
   27a5a:	f002 fe3e 	bl	2a6da <assert_print>
   27a5e:	4916      	ldr	r1, [pc, #88]	; (27ab8 <z_set_timeout_expiry+0x84>)
   27a60:	4819      	ldr	r0, [pc, #100]	; (27ac8 <z_set_timeout_expiry+0x94>)
   27a62:	f002 fe3a 	bl	2a6da <assert_print>
   27a66:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a68:	4814      	ldr	r0, [pc, #80]	; (27abc <z_set_timeout_expiry+0x88>)
   27a6a:	f002 fe2f 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27a6e:	4812      	ldr	r0, [pc, #72]	; (27ab8 <z_set_timeout_expiry+0x84>)
   27a70:	f7fd fb1e 	bl	250b0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   27a74:	f7ff fe42 	bl	276fc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   27a78:	2801      	cmp	r0, #1
   27a7a:	dd07      	ble.n	27a8c <z_set_timeout_expiry+0x58>
   27a7c:	42a0      	cmp	r0, r4
   27a7e:	db05      	blt.n	27a8c <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27a80:	42a0      	cmp	r0, r4
   27a82:	4629      	mov	r1, r5
   27a84:	bfa8      	it	ge
   27a86:	4620      	movge	r0, r4
   27a88:	f7f6 fe96 	bl	1e7b8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a8c:	480a      	ldr	r0, [pc, #40]	; (27ab8 <z_set_timeout_expiry+0x84>)
   27a8e:	f7fd fb01 	bl	25094 <z_spin_unlock_valid>
   27a92:	b958      	cbnz	r0, 27aac <z_set_timeout_expiry+0x78>
   27a94:	23c2      	movs	r3, #194	; 0xc2
   27a96:	4a09      	ldr	r2, [pc, #36]	; (27abc <z_set_timeout_expiry+0x88>)
   27a98:	490c      	ldr	r1, [pc, #48]	; (27acc <z_set_timeout_expiry+0x98>)
   27a9a:	480a      	ldr	r0, [pc, #40]	; (27ac4 <z_set_timeout_expiry+0x90>)
   27a9c:	f002 fe1d 	bl	2a6da <assert_print>
   27aa0:	4905      	ldr	r1, [pc, #20]	; (27ab8 <z_set_timeout_expiry+0x84>)
   27aa2:	480b      	ldr	r0, [pc, #44]	; (27ad0 <z_set_timeout_expiry+0x9c>)
   27aa4:	f002 fe19 	bl	2a6da <assert_print>
   27aa8:	21c2      	movs	r1, #194	; 0xc2
   27aaa:	e7dd      	b.n	27a68 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
   27aac:	f386 8811 	msr	BASEPRI, r6
   27ab0:	f3bf 8f6f 	isb	sy
		}
	}
}
   27ab4:	bd70      	pop	{r4, r5, r6, pc}
   27ab6:	bf00      	nop
   27ab8:	20021ad8 	.word	0x20021ad8
   27abc:	0003341a 	.word	0x0003341a
   27ac0:	00033473 	.word	0x00033473
   27ac4:	00032679 	.word	0x00032679
   27ac8:	00033488 	.word	0x00033488
   27acc:	00033447 	.word	0x00033447
   27ad0:	0003345e 	.word	0x0003345e

00027ad4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   27ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27ad8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   27ada:	f7fe ff7d 	bl	269d8 <z_time_slice>
	__asm__ volatile(
   27ade:	f04f 0320 	mov.w	r3, #32
   27ae2:	f3ef 8711 	mrs	r7, BASEPRI
   27ae6:	f383 8812 	msr	BASEPRI_MAX, r3
   27aea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27aee:	483f      	ldr	r0, [pc, #252]	; (27bec <sys_clock_announce+0x118>)
   27af0:	f7fd fac2 	bl	25078 <z_spin_lock_valid>
   27af4:	b968      	cbnz	r0, 27b12 <sys_clock_announce+0x3e>
   27af6:	2394      	movs	r3, #148	; 0x94
   27af8:	4a3d      	ldr	r2, [pc, #244]	; (27bf0 <sys_clock_announce+0x11c>)
   27afa:	493e      	ldr	r1, [pc, #248]	; (27bf4 <sys_clock_announce+0x120>)
   27afc:	483e      	ldr	r0, [pc, #248]	; (27bf8 <sys_clock_announce+0x124>)
   27afe:	f002 fdec 	bl	2a6da <assert_print>
   27b02:	493a      	ldr	r1, [pc, #232]	; (27bec <sys_clock_announce+0x118>)
   27b04:	483d      	ldr	r0, [pc, #244]	; (27bfc <sys_clock_announce+0x128>)
   27b06:	f002 fde8 	bl	2a6da <assert_print>
   27b0a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b0c:	4838      	ldr	r0, [pc, #224]	; (27bf0 <sys_clock_announce+0x11c>)
   27b0e:	f002 fddd 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27b12:	4836      	ldr	r0, [pc, #216]	; (27bec <sys_clock_announce+0x118>)
   27b14:	f7fd facc 	bl	250b0 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   27b18:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 27c00 <sys_clock_announce+0x12c>
	return list->head == list;
   27b1c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 27c04 <sys_clock_announce+0x130>
   27b20:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   27b24:	4a38      	ldr	r2, [pc, #224]	; (27c08 <sys_clock_announce+0x134>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b26:	454d      	cmp	r5, r9
	announce_remaining = ticks;
   27b28:	f8c8 4000 	str.w	r4, [r8]
	return list->head == list;
   27b2c:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
   27b30:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b34:	d00b      	beq.n	27b4e <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   27b36:	b155      	cbz	r5, 27b4e <sys_clock_announce+0x7a>
   27b38:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   27b3c:	42b4      	cmp	r4, r6
   27b3e:	eb71 0e00 	sbcs.w	lr, r1, r0
   27b42:	da1c      	bge.n	27b7e <sys_clock_announce+0xaa>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   27b44:	1b36      	subs	r6, r6, r4
   27b46:	eb60 0001 	sbc.w	r0, r0, r1
   27b4a:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   27b4e:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
   27b50:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   27b54:	eb4c 0101 	adc.w	r1, ip, r1
   27b58:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   27b5c:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   27b60:	f7ff fdcc 	bl	276fc <next_timeout>
   27b64:	4621      	mov	r1, r4
   27b66:	f7f6 fe27 	bl	1e7b8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27b6a:	4820      	ldr	r0, [pc, #128]	; (27bec <sys_clock_announce+0x118>)
   27b6c:	f7fd fa92 	bl	25094 <z_spin_unlock_valid>
   27b70:	b1a8      	cbz	r0, 27b9e <sys_clock_announce+0xca>
	__asm__ volatile(
   27b72:	f387 8811 	msr	BASEPRI, r7
   27b76:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   27b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   27b7e:	18f3      	adds	r3, r6, r3
   27b80:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   27b84:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   27b88:	2200      	movs	r2, #0
   27b8a:	2300      	movs	r3, #0
		remove_timeout(t);
   27b8c:	4628      	mov	r0, r5
		t->dticks = 0;
   27b8e:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   27b92:	f7ff fddb 	bl	2774c <remove_timeout>
   27b96:	4815      	ldr	r0, [pc, #84]	; (27bec <sys_clock_announce+0x118>)
   27b98:	f7fd fa7c 	bl	25094 <z_spin_unlock_valid>
   27b9c:	b958      	cbnz	r0, 27bb6 <sys_clock_announce+0xe2>
   27b9e:	23c2      	movs	r3, #194	; 0xc2
   27ba0:	4a13      	ldr	r2, [pc, #76]	; (27bf0 <sys_clock_announce+0x11c>)
   27ba2:	491a      	ldr	r1, [pc, #104]	; (27c0c <sys_clock_announce+0x138>)
   27ba4:	4814      	ldr	r0, [pc, #80]	; (27bf8 <sys_clock_announce+0x124>)
   27ba6:	f002 fd98 	bl	2a6da <assert_print>
   27baa:	4910      	ldr	r1, [pc, #64]	; (27bec <sys_clock_announce+0x118>)
   27bac:	4818      	ldr	r0, [pc, #96]	; (27c10 <sys_clock_announce+0x13c>)
   27bae:	f002 fd94 	bl	2a6da <assert_print>
   27bb2:	21c2      	movs	r1, #194	; 0xc2
   27bb4:	e7aa      	b.n	27b0c <sys_clock_announce+0x38>
   27bb6:	f387 8811 	msr	BASEPRI, r7
   27bba:	f3bf 8f6f 	isb	sy
		t->fn(t);
   27bbe:	4628      	mov	r0, r5
   27bc0:	68ab      	ldr	r3, [r5, #8]
   27bc2:	4798      	blx	r3
	__asm__ volatile(
   27bc4:	f04f 0320 	mov.w	r3, #32
   27bc8:	f3ef 8711 	mrs	r7, BASEPRI
   27bcc:	f383 8812 	msr	BASEPRI_MAX, r3
   27bd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27bd4:	4805      	ldr	r0, [pc, #20]	; (27bec <sys_clock_announce+0x118>)
   27bd6:	f7fd fa4f 	bl	25078 <z_spin_lock_valid>
   27bda:	2800      	cmp	r0, #0
   27bdc:	d08b      	beq.n	27af6 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   27bde:	4803      	ldr	r0, [pc, #12]	; (27bec <sys_clock_announce+0x118>)
   27be0:	f7fd fa66 	bl	250b0 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   27be4:	f8d8 4000 	ldr.w	r4, [r8]
   27be8:	1ba4      	subs	r4, r4, r6
   27bea:	e799      	b.n	27b20 <sys_clock_announce+0x4c>
   27bec:	20021ad8 	.word	0x20021ad8
   27bf0:	0003341a 	.word	0x0003341a
   27bf4:	00033473 	.word	0x00033473
   27bf8:	00032679 	.word	0x00032679
   27bfc:	00033488 	.word	0x00033488
   27c00:	20021ad4 	.word	0x20021ad4
   27c04:	20008744 	.word	0x20008744
   27c08:	2000a318 	.word	0x2000a318
   27c0c:	00033447 	.word	0x00033447
   27c10:	0003345e 	.word	0x0003345e

00027c14 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   27c14:	b570      	push	{r4, r5, r6, lr}
   27c16:	f04f 0320 	mov.w	r3, #32
   27c1a:	f3ef 8611 	mrs	r6, BASEPRI
   27c1e:	f383 8812 	msr	BASEPRI_MAX, r3
   27c22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c26:	481a      	ldr	r0, [pc, #104]	; (27c90 <sys_clock_tick_get+0x7c>)
   27c28:	f7fd fa26 	bl	25078 <z_spin_lock_valid>
   27c2c:	b968      	cbnz	r0, 27c4a <sys_clock_tick_get+0x36>
   27c2e:	2394      	movs	r3, #148	; 0x94
   27c30:	4a18      	ldr	r2, [pc, #96]	; (27c94 <sys_clock_tick_get+0x80>)
   27c32:	4919      	ldr	r1, [pc, #100]	; (27c98 <sys_clock_tick_get+0x84>)
   27c34:	4819      	ldr	r0, [pc, #100]	; (27c9c <sys_clock_tick_get+0x88>)
   27c36:	f002 fd50 	bl	2a6da <assert_print>
   27c3a:	4915      	ldr	r1, [pc, #84]	; (27c90 <sys_clock_tick_get+0x7c>)
   27c3c:	4818      	ldr	r0, [pc, #96]	; (27ca0 <sys_clock_tick_get+0x8c>)
   27c3e:	f002 fd4c 	bl	2a6da <assert_print>
   27c42:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c44:	4813      	ldr	r0, [pc, #76]	; (27c94 <sys_clock_tick_get+0x80>)
   27c46:	f002 fd41 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27c4a:	4811      	ldr	r0, [pc, #68]	; (27c90 <sys_clock_tick_get+0x7c>)
   27c4c:	f7fd fa30 	bl	250b0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   27c50:	f7ff fd4a 	bl	276e8 <elapsed>
   27c54:	4a13      	ldr	r2, [pc, #76]	; (27ca4 <sys_clock_tick_get+0x90>)
   27c56:	e9d2 4500 	ldrd	r4, r5, [r2]
   27c5a:	1904      	adds	r4, r0, r4
   27c5c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c60:	480b      	ldr	r0, [pc, #44]	; (27c90 <sys_clock_tick_get+0x7c>)
   27c62:	f7fd fa17 	bl	25094 <z_spin_unlock_valid>
   27c66:	b958      	cbnz	r0, 27c80 <sys_clock_tick_get+0x6c>
   27c68:	23c2      	movs	r3, #194	; 0xc2
   27c6a:	4a0a      	ldr	r2, [pc, #40]	; (27c94 <sys_clock_tick_get+0x80>)
   27c6c:	490e      	ldr	r1, [pc, #56]	; (27ca8 <sys_clock_tick_get+0x94>)
   27c6e:	480b      	ldr	r0, [pc, #44]	; (27c9c <sys_clock_tick_get+0x88>)
   27c70:	f002 fd33 	bl	2a6da <assert_print>
   27c74:	4906      	ldr	r1, [pc, #24]	; (27c90 <sys_clock_tick_get+0x7c>)
   27c76:	480d      	ldr	r0, [pc, #52]	; (27cac <sys_clock_tick_get+0x98>)
   27c78:	f002 fd2f 	bl	2a6da <assert_print>
   27c7c:	21c2      	movs	r1, #194	; 0xc2
   27c7e:	e7e1      	b.n	27c44 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   27c80:	f386 8811 	msr	BASEPRI, r6
   27c84:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   27c88:	4620      	mov	r0, r4
   27c8a:	4629      	mov	r1, r5
   27c8c:	bd70      	pop	{r4, r5, r6, pc}
   27c8e:	bf00      	nop
   27c90:	20021ad8 	.word	0x20021ad8
   27c94:	0003341a 	.word	0x0003341a
   27c98:	00033473 	.word	0x00033473
   27c9c:	00032679 	.word	0x00032679
   27ca0:	00033488 	.word	0x00033488
   27ca4:	2000a318 	.word	0x2000a318
   27ca8:	00033447 	.word	0x00033447
   27cac:	0003345e 	.word	0x0003345e

00027cb0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27cb0:	b570      	push	{r4, r5, r6, lr}
   27cb2:	4604      	mov	r4, r0
	__asm__ volatile(
   27cb4:	f04f 0320 	mov.w	r3, #32
   27cb8:	f3ef 8511 	mrs	r5, BASEPRI
   27cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   27cc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27cc4:	4849      	ldr	r0, [pc, #292]	; (27dec <z_timer_expiration_handler+0x13c>)
   27cc6:	f7fd f9d7 	bl	25078 <z_spin_lock_valid>
   27cca:	b968      	cbnz	r0, 27ce8 <z_timer_expiration_handler+0x38>
   27ccc:	2394      	movs	r3, #148	; 0x94
   27cce:	4a48      	ldr	r2, [pc, #288]	; (27df0 <z_timer_expiration_handler+0x140>)
   27cd0:	4948      	ldr	r1, [pc, #288]	; (27df4 <z_timer_expiration_handler+0x144>)
   27cd2:	4849      	ldr	r0, [pc, #292]	; (27df8 <z_timer_expiration_handler+0x148>)
   27cd4:	f002 fd01 	bl	2a6da <assert_print>
   27cd8:	4944      	ldr	r1, [pc, #272]	; (27dec <z_timer_expiration_handler+0x13c>)
   27cda:	4848      	ldr	r0, [pc, #288]	; (27dfc <z_timer_expiration_handler+0x14c>)
   27cdc:	f002 fcfd 	bl	2a6da <assert_print>
   27ce0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ce2:	4843      	ldr	r0, [pc, #268]	; (27df0 <z_timer_expiration_handler+0x140>)
   27ce4:	f002 fcf2 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   27ce8:	4840      	ldr	r0, [pc, #256]	; (27dec <z_timer_expiration_handler+0x13c>)
   27cea:	f7fd f9e1 	bl	250b0 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27cee:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27cf2:	3301      	adds	r3, #1
   27cf4:	f142 0200 	adc.w	r2, r2, #0
   27cf8:	2b02      	cmp	r3, #2
   27cfa:	f172 0200 	sbcs.w	r2, r2, #0
   27cfe:	d322      	bcc.n	27d46 <z_timer_expiration_handler+0x96>
	return z_impl_k_uptime_ticks();
   27d00:	f008 fb2c 	bl	3035c <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27d04:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   27d08:	3001      	adds	r0, #1
   27d0a:	f141 0100 	adc.w	r1, r1, #0
   27d0e:	18c0      	adds	r0, r0, r3
   27d10:	eb41 0102 	adc.w	r1, r1, r2
   27d14:	2801      	cmp	r0, #1
   27d16:	f171 0100 	sbcs.w	r1, r1, #0
   27d1a:	db29      	blt.n	27d70 <z_timer_expiration_handler+0xc0>
   27d1c:	f008 fb1e 	bl	3035c <z_impl_k_uptime_ticks>
   27d20:	3001      	adds	r0, #1
   27d22:	f141 0300 	adc.w	r3, r1, #0
   27d26:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   27d2a:	1880      	adds	r0, r0, r2
   27d2c:	f06f 0201 	mvn.w	r2, #1
   27d30:	eb43 0301 	adc.w	r3, r3, r1
   27d34:	f04f 31ff 	mov.w	r1, #4294967295
   27d38:	1a12      	subs	r2, r2, r0
   27d3a:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27d3e:	4620      	mov	r0, r4
   27d40:	492f      	ldr	r1, [pc, #188]	; (27e00 <z_timer_expiration_handler+0x150>)
   27d42:	f7ff fd1f 	bl	27784 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   27d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27d48:	3301      	adds	r3, #1
   27d4a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27d4c:	6a23      	ldr	r3, [r4, #32]
   27d4e:	b35b      	cbz	r3, 27da8 <z_timer_expiration_handler+0xf8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27d50:	4826      	ldr	r0, [pc, #152]	; (27dec <z_timer_expiration_handler+0x13c>)
   27d52:	f7fd f99f 	bl	25094 <z_spin_unlock_valid>
   27d56:	b980      	cbnz	r0, 27d7a <z_timer_expiration_handler+0xca>
   27d58:	23c2      	movs	r3, #194	; 0xc2
   27d5a:	4a25      	ldr	r2, [pc, #148]	; (27df0 <z_timer_expiration_handler+0x140>)
   27d5c:	4929      	ldr	r1, [pc, #164]	; (27e04 <z_timer_expiration_handler+0x154>)
   27d5e:	4826      	ldr	r0, [pc, #152]	; (27df8 <z_timer_expiration_handler+0x148>)
   27d60:	f002 fcbb 	bl	2a6da <assert_print>
   27d64:	4921      	ldr	r1, [pc, #132]	; (27dec <z_timer_expiration_handler+0x13c>)
   27d66:	4828      	ldr	r0, [pc, #160]	; (27e08 <z_timer_expiration_handler+0x158>)
   27d68:	f002 fcb7 	bl	2a6da <assert_print>
   27d6c:	21c2      	movs	r1, #194	; 0xc2
   27d6e:	e7b8      	b.n	27ce2 <z_timer_expiration_handler+0x32>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   27d70:	f06f 0201 	mvn.w	r2, #1
   27d74:	f04f 33ff 	mov.w	r3, #4294967295
   27d78:	e7e1      	b.n	27d3e <z_timer_expiration_handler+0x8e>
	__asm__ volatile(
   27d7a:	f385 8811 	msr	BASEPRI, r5
   27d7e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27d82:	4620      	mov	r0, r4
   27d84:	6a23      	ldr	r3, [r4, #32]
   27d86:	4798      	blx	r3
	__asm__ volatile(
   27d88:	f04f 0320 	mov.w	r3, #32
   27d8c:	f3ef 8511 	mrs	r5, BASEPRI
   27d90:	f383 8812 	msr	BASEPRI_MAX, r3
   27d94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d98:	4814      	ldr	r0, [pc, #80]	; (27dec <z_timer_expiration_handler+0x13c>)
   27d9a:	f7fd f96d 	bl	25078 <z_spin_lock_valid>
   27d9e:	2800      	cmp	r0, #0
   27da0:	d094      	beq.n	27ccc <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   27da2:	4812      	ldr	r0, [pc, #72]	; (27dec <z_timer_expiration_handler+0x13c>)
   27da4:	f7fd f984 	bl	250b0 <z_spin_lock_set_owner>
	return list->head == list;
   27da8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27dac:	42a6      	cmp	r6, r4
   27dae:	d000      	beq.n	27db2 <z_timer_expiration_handler+0x102>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   27db0:	b94e      	cbnz	r6, 27dc6 <z_timer_expiration_handler+0x116>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27db2:	480e      	ldr	r0, [pc, #56]	; (27dec <z_timer_expiration_handler+0x13c>)
   27db4:	f7fd f96e 	bl	25094 <z_spin_unlock_valid>
   27db8:	2800      	cmp	r0, #0
   27dba:	d0cd      	beq.n	27d58 <z_timer_expiration_handler+0xa8>
	__asm__ volatile(
   27dbc:	f385 8811 	msr	BASEPRI, r5
   27dc0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   27dc4:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   27dc6:	4630      	mov	r0, r6
   27dc8:	f7fe fbda 	bl	26580 <z_unpend_thread_no_timeout>
   27dcc:	2300      	movs	r3, #0
   27dce:	4807      	ldr	r0, [pc, #28]	; (27dec <z_timer_expiration_handler+0x13c>)
   27dd0:	67f3      	str	r3, [r6, #124]	; 0x7c
   27dd2:	f7fd f95f 	bl	25094 <z_spin_unlock_valid>
   27dd6:	2800      	cmp	r0, #0
   27dd8:	d0be      	beq.n	27d58 <z_timer_expiration_handler+0xa8>
   27dda:	f385 8811 	msr	BASEPRI, r5
   27dde:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   27de2:	4630      	mov	r0, r6
}
   27de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   27de8:	f7fe bb84 	b.w	264f4 <z_ready_thread>
   27dec:	20021adc 	.word	0x20021adc
   27df0:	0003341a 	.word	0x0003341a
   27df4:	00033473 	.word	0x00033473
   27df8:	00032679 	.word	0x00032679
   27dfc:	00033488 	.word	0x00033488
   27e00:	00027cb1 	.word	0x00027cb1
   27e04:	00033447 	.word	0x00033447
   27e08:	0003345e 	.word	0x0003345e

00027e0c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
   27e10:	bf08      	it	eq
   27e12:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27e1a:	4619      	mov	r1, r3
   27e1c:	4605      	mov	r5, r0
   27e1e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   27e22:	4614      	mov	r4, r2
   27e24:	4691      	mov	r9, r2
   27e26:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27e28:	d037      	beq.n	27e9a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   27e2a:	f1b0 3fff 	cmp.w	r0, #4294967295
   27e2e:	bf08      	it	eq
   27e30:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   27e34:	4637      	mov	r7, r6
   27e36:	4682      	mov	sl, r0
   27e38:	d011      	beq.n	27e5e <z_impl_k_timer_start+0x52>
   27e3a:	ea50 0306 	orrs.w	r3, r0, r6
   27e3e:	d00e      	beq.n	27e5e <z_impl_k_timer_start+0x52>
   27e40:	1c72      	adds	r2, r6, #1
   27e42:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   27e46:	db0a      	blt.n	27e5e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   27e48:	2e02      	cmp	r6, #2
   27e4a:	4684      	mov	ip, r0
   27e4c:	f170 0000 	sbcs.w	r0, r0, #0
   27e50:	bfbc      	itt	lt
   27e52:	2702      	movlt	r7, #2
   27e54:	f04f 0c00 	movlt.w	ip, #0
   27e58:	3f01      	subs	r7, #1
   27e5a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   27e5e:	1c63      	adds	r3, r4, #1
   27e60:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   27e64:	db0a      	blt.n	27e7c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27e66:	2c01      	cmp	r4, #1
   27e68:	f171 0300 	sbcs.w	r3, r1, #0
   27e6c:	4622      	mov	r2, r4
   27e6e:	bfbc      	itt	lt
   27e70:	2201      	movlt	r2, #1
   27e72:	2100      	movlt	r1, #0
   27e74:	f112 39ff 	adds.w	r9, r2, #4294967295
   27e78:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   27e7c:	4628      	mov	r0, r5
   27e7e:	f7ff fd47 	bl	27910 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   27e82:	2300      	movs	r3, #0
	timer->period = period;
   27e84:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   27e88:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e8a:	464a      	mov	r2, r9
   27e8c:	4643      	mov	r3, r8
   27e8e:	4628      	mov	r0, r5
		     duration);
}
   27e90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27e94:	4902      	ldr	r1, [pc, #8]	; (27ea0 <z_impl_k_timer_start+0x94>)
   27e96:	f7ff bc75 	b.w	27784 <z_add_timeout>
}
   27e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27e9e:	bf00      	nop
   27ea0:	00027cb1 	.word	0x00027cb1

00027ea4 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   27ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   27ea8:	2600      	movs	r6, #0
{
   27eaa:	4688      	mov	r8, r1
   27eac:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   27eae:	4604      	mov	r4, r0
	int events_registered = 0;
   27eb0:	4637      	mov	r7, r6
	event->poller = NULL;
   27eb2:	46b2      	mov	sl, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27eb4:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 28074 <register_events+0x1d0>
{
   27eb8:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   27eba:	4546      	cmp	r6, r8
   27ebc:	db03      	blt.n	27ec6 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   27ebe:	4638      	mov	r0, r7
   27ec0:	b003      	add	sp, #12
   27ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   27ec6:	f04f 0320 	mov.w	r3, #32
   27eca:	f3ef 8b11 	mrs	fp, BASEPRI
   27ece:	f383 8812 	msr	BASEPRI_MAX, r3
   27ed2:	f3bf 8f6f 	isb	sy
   27ed6:	4648      	mov	r0, r9
   27ed8:	f7fd f8ce 	bl	25078 <z_spin_lock_valid>
   27edc:	b960      	cbnz	r0, 27ef8 <register_events+0x54>
   27ede:	2394      	movs	r3, #148	; 0x94
   27ee0:	4a65      	ldr	r2, [pc, #404]	; (28078 <register_events+0x1d4>)
   27ee2:	4966      	ldr	r1, [pc, #408]	; (2807c <register_events+0x1d8>)
   27ee4:	4866      	ldr	r0, [pc, #408]	; (28080 <register_events+0x1dc>)
   27ee6:	f002 fbf8 	bl	2a6da <assert_print>
   27eea:	4962      	ldr	r1, [pc, #392]	; (28074 <register_events+0x1d0>)
   27eec:	4865      	ldr	r0, [pc, #404]	; (28084 <register_events+0x1e0>)
   27eee:	f002 fbf4 	bl	2a6da <assert_print>
   27ef2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ef4:	4860      	ldr	r0, [pc, #384]	; (28078 <register_events+0x1d4>)
   27ef6:	e060      	b.n	27fba <register_events+0x116>
	z_spin_lock_set_owner(l);
   27ef8:	4648      	mov	r0, r9
   27efa:	f7fd f8d9 	bl	250b0 <z_spin_lock_set_owner>
	switch (event->type) {
   27efe:	7b63      	ldrb	r3, [r4, #13]
   27f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27f04:	2b08      	cmp	r3, #8
   27f06:	d84a      	bhi.n	27f9e <register_events+0xfa>
   27f08:	e8df f003 	tbb	[pc, r3]
   27f0c:	49053d2b 	.word	0x49053d2b
   27f10:	49494927 	.word	0x49494927
   27f14:	43          	.byte	0x43
   27f15:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   27f16:	6923      	ldr	r3, [r4, #16]
   27f18:	689b      	ldr	r3, [r3, #8]
   27f1a:	b313      	cbz	r3, 27f62 <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27f1c:	2302      	movs	r3, #2
	event->state |= state;
   27f1e:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   27f20:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   27f24:	f3c2 3186 	ubfx	r1, r2, #14, #7
   27f28:	430b      	orrs	r3, r1
   27f2a:	f363 3294 	bfi	r2, r3, #14, #7
   27f2e:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   27f30:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27f34:	4648      	mov	r0, r9
   27f36:	f7fd f8ad 	bl	25094 <z_spin_unlock_valid>
   27f3a:	3414      	adds	r4, #20
   27f3c:	2800      	cmp	r0, #0
   27f3e:	f040 8092 	bne.w	28066 <register_events+0x1c2>
   27f42:	23c2      	movs	r3, #194	; 0xc2
   27f44:	4a4c      	ldr	r2, [pc, #304]	; (28078 <register_events+0x1d4>)
   27f46:	4950      	ldr	r1, [pc, #320]	; (28088 <register_events+0x1e4>)
   27f48:	484d      	ldr	r0, [pc, #308]	; (28080 <register_events+0x1dc>)
   27f4a:	f002 fbc6 	bl	2a6da <assert_print>
   27f4e:	4949      	ldr	r1, [pc, #292]	; (28074 <register_events+0x1d0>)
   27f50:	484e      	ldr	r0, [pc, #312]	; (2808c <register_events+0x1e8>)
   27f52:	f002 fbc2 	bl	2a6da <assert_print>
   27f56:	21c2      	movs	r1, #194	; 0xc2
   27f58:	e7cc      	b.n	27ef4 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   27f5a:	6923      	ldr	r3, [r4, #16]
   27f5c:	681b      	ldr	r3, [r3, #0]
   27f5e:	2b00      	cmp	r3, #0
   27f60:	d12d      	bne.n	27fbe <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   27f62:	9b01      	ldr	r3, [sp, #4]
   27f64:	2b00      	cmp	r3, #0
   27f66:	d1e5      	bne.n	27f34 <register_events+0x90>
   27f68:	782b      	ldrb	r3, [r5, #0]
   27f6a:	2b00      	cmp	r3, #0
   27f6c:	d0e2      	beq.n	27f34 <register_events+0x90>
	switch (event->type) {
   27f6e:	7b63      	ldrb	r3, [r4, #13]
   27f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27f74:	2b08      	cmp	r3, #8
   27f76:	d86b      	bhi.n	28050 <register_events+0x1ac>
   27f78:	e8df f003 	tbb	[pc, r3]
   27f7c:	6a234935 	.word	0x6a234935
   27f80:	6a6a6a38 	.word	0x6a6a6a38
   27f84:	59          	.byte	0x59
   27f85:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   27f86:	6923      	ldr	r3, [r4, #16]
   27f88:	689b      	ldr	r3, [r3, #8]
   27f8a:	2b00      	cmp	r3, #0
   27f8c:	d0e9      	beq.n	27f62 <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   27f8e:	2301      	movs	r3, #1
   27f90:	e7c5      	b.n	27f1e <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   27f92:	6923      	ldr	r3, [r4, #16]
   27f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27f96:	2b00      	cmp	r3, #0
   27f98:	d0e3      	beq.n	27f62 <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27f9a:	2310      	movs	r3, #16
   27f9c:	e7bf      	b.n	27f1e <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   27f9e:	2363      	movs	r3, #99	; 0x63
   27fa0:	4a3b      	ldr	r2, [pc, #236]	; (28090 <register_events+0x1ec>)
   27fa2:	493c      	ldr	r1, [pc, #240]	; (28094 <register_events+0x1f0>)
   27fa4:	4836      	ldr	r0, [pc, #216]	; (28080 <register_events+0x1dc>)
   27fa6:	f002 fb98 	bl	2a6da <assert_print>
   27faa:	7b61      	ldrb	r1, [r4, #13]
   27fac:	483a      	ldr	r0, [pc, #232]	; (28098 <register_events+0x1f4>)
   27fae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   27fb2:	f002 fb92 	bl	2a6da <assert_print>
   27fb6:	2163      	movs	r1, #99	; 0x63
   27fb8:	4835      	ldr	r0, [pc, #212]	; (28090 <register_events+0x1ec>)
   27fba:	f002 fb87 	bl	2a6cc <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27fbe:	2304      	movs	r3, #4
   27fc0:	e7ad      	b.n	27f1e <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27fc2:	6920      	ldr	r0, [r4, #16]
   27fc4:	b950      	cbnz	r0, 27fdc <register_events+0x138>
   27fc6:	4935      	ldr	r1, [pc, #212]	; (2809c <register_events+0x1f8>)
   27fc8:	238d      	movs	r3, #141	; 0x8d
   27fca:	4a31      	ldr	r2, [pc, #196]	; (28090 <register_events+0x1ec>)
   27fcc:	482c      	ldr	r0, [pc, #176]	; (28080 <register_events+0x1dc>)
   27fce:	f002 fb84 	bl	2a6da <assert_print>
   27fd2:	4833      	ldr	r0, [pc, #204]	; (280a0 <register_events+0x1fc>)
   27fd4:	f002 fb81 	bl	2a6da <assert_print>
   27fd8:	218d      	movs	r1, #141	; 0x8d
   27fda:	e7ed      	b.n	27fb8 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   27fdc:	462a      	mov	r2, r5
   27fde:	4621      	mov	r1, r4
   27fe0:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   27fe2:	f008 fa0c 	bl	303fe <add_event>
	event->poller = poller;
   27fe6:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   27fe8:	3701      	adds	r7, #1
   27fea:	e7a3      	b.n	27f34 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27fec:	6920      	ldr	r0, [r4, #16]
   27fee:	b950      	cbnz	r0, 28006 <register_events+0x162>
   27ff0:	492c      	ldr	r1, [pc, #176]	; (280a4 <register_events+0x200>)
   27ff2:	2391      	movs	r3, #145	; 0x91
   27ff4:	4a26      	ldr	r2, [pc, #152]	; (28090 <register_events+0x1ec>)
   27ff6:	4822      	ldr	r0, [pc, #136]	; (28080 <register_events+0x1dc>)
   27ff8:	f002 fb6f 	bl	2a6da <assert_print>
   27ffc:	482a      	ldr	r0, [pc, #168]	; (280a8 <register_events+0x204>)
   27ffe:	f002 fb6c 	bl	2a6da <assert_print>
   28002:	2191      	movs	r1, #145	; 0x91
   28004:	e7d8      	b.n	27fb8 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   28006:	462a      	mov	r2, r5
   28008:	4621      	mov	r1, r4
   2800a:	3014      	adds	r0, #20
   2800c:	e7e9      	b.n	27fe2 <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2800e:	6920      	ldr	r0, [r4, #16]
   28010:	b950      	cbnz	r0, 28028 <register_events+0x184>
   28012:	4926      	ldr	r1, [pc, #152]	; (280ac <register_events+0x208>)
   28014:	2395      	movs	r3, #149	; 0x95
   28016:	4a1e      	ldr	r2, [pc, #120]	; (28090 <register_events+0x1ec>)
   28018:	4819      	ldr	r0, [pc, #100]	; (28080 <register_events+0x1dc>)
   2801a:	f002 fb5e 	bl	2a6da <assert_print>
   2801e:	4824      	ldr	r0, [pc, #144]	; (280b0 <register_events+0x20c>)
   28020:	f002 fb5b 	bl	2a6da <assert_print>
   28024:	2195      	movs	r1, #149	; 0x95
   28026:	e7c7      	b.n	27fb8 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   28028:	462a      	mov	r2, r5
   2802a:	4621      	mov	r1, r4
   2802c:	e7d9      	b.n	27fe2 <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2802e:	6920      	ldr	r0, [r4, #16]
   28030:	b950      	cbnz	r0, 28048 <register_events+0x1a4>
   28032:	4920      	ldr	r1, [pc, #128]	; (280b4 <register_events+0x210>)
   28034:	2399      	movs	r3, #153	; 0x99
   28036:	4a16      	ldr	r2, [pc, #88]	; (28090 <register_events+0x1ec>)
   28038:	4811      	ldr	r0, [pc, #68]	; (28080 <register_events+0x1dc>)
   2803a:	f002 fb4e 	bl	2a6da <assert_print>
   2803e:	481e      	ldr	r0, [pc, #120]	; (280b8 <register_events+0x214>)
   28040:	f002 fb4b 	bl	2a6da <assert_print>
   28044:	2199      	movs	r1, #153	; 0x99
   28046:	e7b7      	b.n	27fb8 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   28048:	462a      	mov	r2, r5
   2804a:	4621      	mov	r1, r4
   2804c:	3028      	adds	r0, #40	; 0x28
   2804e:	e7c8      	b.n	27fe2 <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   28050:	4910      	ldr	r1, [pc, #64]	; (28094 <register_events+0x1f0>)
   28052:	23a6      	movs	r3, #166	; 0xa6
   28054:	4a0e      	ldr	r2, [pc, #56]	; (28090 <register_events+0x1ec>)
   28056:	480a      	ldr	r0, [pc, #40]	; (28080 <register_events+0x1dc>)
   28058:	f002 fb3f 	bl	2a6da <assert_print>
   2805c:	4817      	ldr	r0, [pc, #92]	; (280bc <register_events+0x218>)
   2805e:	f002 fb3c 	bl	2a6da <assert_print>
   28062:	21a6      	movs	r1, #166	; 0xa6
   28064:	e7a8      	b.n	27fb8 <register_events+0x114>
	__asm__ volatile(
   28066:	f38b 8811 	msr	BASEPRI, fp
   2806a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2806e:	3601      	adds	r6, #1
   28070:	e723      	b.n	27eba <register_events+0x16>
   28072:	bf00      	nop
   28074:	20021ae0 	.word	0x20021ae0
   28078:	0003341a 	.word	0x0003341a
   2807c:	00033473 	.word	0x00033473
   28080:	00032679 	.word	0x00032679
   28084:	00033488 	.word	0x00033488
   28088:	00033447 	.word	0x00033447
   2808c:	0003345e 	.word	0x0003345e
   28090:	000388c5 	.word	0x000388c5
   28094:	00037b56 	.word	0x00037b56
   28098:	000388e6 	.word	0x000388e6
   2809c:	00038903 	.word	0x00038903
   280a0:	0003891d 	.word	0x0003891d
   280a4:	00038932 	.word	0x00038932
   280a8:	0003894e 	.word	0x0003894e
   280ac:	0003895f 	.word	0x0003895f
   280b0:	0003897c 	.word	0x0003897c
   280b4:	00038993 	.word	0x00038993
   280b8:	000389ae 	.word	0x000389ae
   280bc:	000389c7 	.word	0x000389c7

000280c0 <clear_event_registrations>:
{
   280c0:	2314      	movs	r3, #20
   280c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280c6:	4615      	mov	r5, r2
	while (num_events--) {
   280c8:	460c      	mov	r4, r1
	event->poller = NULL;
   280ca:	2600      	movs	r6, #0
   280cc:	fb03 0001 	mla	r0, r3, r1, r0
   280d0:	4f4b      	ldr	r7, [pc, #300]	; (28200 <clear_event_registrations+0x140>)
	while (num_events--) {
   280d2:	b90c      	cbnz	r4, 280d8 <clear_event_registrations+0x18>
}
   280d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   280d8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   280dc:	f1a0 0814 	sub.w	r8, r0, #20
   280e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	event->poller = NULL;
   280e4:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   280e8:	2b08      	cmp	r3, #8
   280ea:	d842      	bhi.n	28172 <clear_event_registrations+0xb2>
   280ec:	e8df f003 	tbb	[pc, r3]
   280f0:	41052555 	.word	0x41052555
   280f4:	41414116 	.word	0x41414116
   280f8:	33          	.byte	0x33
   280f9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   280fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
   280fe:	2b00      	cmp	r3, #0
   28100:	d142      	bne.n	28188 <clear_event_registrations+0xc8>
   28102:	4940      	ldr	r1, [pc, #256]	; (28204 <clear_event_registrations+0x144>)
   28104:	23b6      	movs	r3, #182	; 0xb6
   28106:	4a40      	ldr	r2, [pc, #256]	; (28208 <clear_event_registrations+0x148>)
   28108:	4840      	ldr	r0, [pc, #256]	; (2820c <clear_event_registrations+0x14c>)
   2810a:	f002 fae6 	bl	2a6da <assert_print>
   2810e:	4840      	ldr	r0, [pc, #256]	; (28210 <clear_event_registrations+0x150>)
   28110:	f002 fae3 	bl	2a6da <assert_print>
   28114:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   28116:	483c      	ldr	r0, [pc, #240]	; (28208 <clear_event_registrations+0x148>)
   28118:	f002 fad8 	bl	2a6cc <assert_post_action>
   2811c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   28120:	2b00      	cmp	r3, #0
   28122:	d131      	bne.n	28188 <clear_event_registrations+0xc8>
   28124:	493b      	ldr	r1, [pc, #236]	; (28214 <clear_event_registrations+0x154>)
   28126:	23ba      	movs	r3, #186	; 0xba
   28128:	4a37      	ldr	r2, [pc, #220]	; (28208 <clear_event_registrations+0x148>)
   2812a:	4838      	ldr	r0, [pc, #224]	; (2820c <clear_event_registrations+0x14c>)
   2812c:	f002 fad5 	bl	2a6da <assert_print>
   28130:	4839      	ldr	r0, [pc, #228]	; (28218 <clear_event_registrations+0x158>)
   28132:	f002 fad2 	bl	2a6da <assert_print>
   28136:	21ba      	movs	r1, #186	; 0xba
   28138:	e7ed      	b.n	28116 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   2813a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2813e:	bb1b      	cbnz	r3, 28188 <clear_event_registrations+0xc8>
   28140:	4936      	ldr	r1, [pc, #216]	; (2821c <clear_event_registrations+0x15c>)
   28142:	23be      	movs	r3, #190	; 0xbe
   28144:	4a30      	ldr	r2, [pc, #192]	; (28208 <clear_event_registrations+0x148>)
   28146:	4831      	ldr	r0, [pc, #196]	; (2820c <clear_event_registrations+0x14c>)
   28148:	f002 fac7 	bl	2a6da <assert_print>
   2814c:	4834      	ldr	r0, [pc, #208]	; (28220 <clear_event_registrations+0x160>)
   2814e:	f002 fac4 	bl	2a6da <assert_print>
   28152:	21be      	movs	r1, #190	; 0xbe
   28154:	e7df      	b.n	28116 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28156:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2815a:	b9ab      	cbnz	r3, 28188 <clear_event_registrations+0xc8>
   2815c:	4931      	ldr	r1, [pc, #196]	; (28224 <clear_event_registrations+0x164>)
   2815e:	23c2      	movs	r3, #194	; 0xc2
   28160:	4a29      	ldr	r2, [pc, #164]	; (28208 <clear_event_registrations+0x148>)
   28162:	482a      	ldr	r0, [pc, #168]	; (2820c <clear_event_registrations+0x14c>)
   28164:	f002 fab9 	bl	2a6da <assert_print>
   28168:	482f      	ldr	r0, [pc, #188]	; (28228 <clear_event_registrations+0x168>)
   2816a:	f002 fab6 	bl	2a6da <assert_print>
   2816e:	21c2      	movs	r1, #194	; 0xc2
   28170:	e7d1      	b.n	28116 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   28172:	492e      	ldr	r1, [pc, #184]	; (2822c <clear_event_registrations+0x16c>)
   28174:	23cf      	movs	r3, #207	; 0xcf
   28176:	4a24      	ldr	r2, [pc, #144]	; (28208 <clear_event_registrations+0x148>)
   28178:	4824      	ldr	r0, [pc, #144]	; (2820c <clear_event_registrations+0x14c>)
   2817a:	f002 faae 	bl	2a6da <assert_print>
   2817e:	482c      	ldr	r0, [pc, #176]	; (28230 <clear_event_registrations+0x170>)
   28180:	f002 faab 	bl	2a6da <assert_print>
   28184:	21cf      	movs	r1, #207	; 0xcf
   28186:	e7c6      	b.n	28116 <clear_event_registrations+0x56>
	return node->next != NULL;
   28188:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2818c:	b12b      	cbz	r3, 2819a <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   2818e:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   28192:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28194:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   28196:	e940 6605 	strd	r6, r6, [r0, #-20]
   2819a:	4638      	mov	r0, r7
   2819c:	f7fc ff7a 	bl	25094 <z_spin_unlock_valid>
   281a0:	b960      	cbnz	r0, 281bc <clear_event_registrations+0xfc>
   281a2:	23c2      	movs	r3, #194	; 0xc2
   281a4:	4a23      	ldr	r2, [pc, #140]	; (28234 <clear_event_registrations+0x174>)
   281a6:	4924      	ldr	r1, [pc, #144]	; (28238 <clear_event_registrations+0x178>)
   281a8:	4818      	ldr	r0, [pc, #96]	; (2820c <clear_event_registrations+0x14c>)
   281aa:	f002 fa96 	bl	2a6da <assert_print>
   281ae:	4914      	ldr	r1, [pc, #80]	; (28200 <clear_event_registrations+0x140>)
   281b0:	4822      	ldr	r0, [pc, #136]	; (2823c <clear_event_registrations+0x17c>)
   281b2:	f002 fa92 	bl	2a6da <assert_print>
   281b6:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   281b8:	481e      	ldr	r0, [pc, #120]	; (28234 <clear_event_registrations+0x174>)
   281ba:	e7ad      	b.n	28118 <clear_event_registrations+0x58>
   281bc:	f385 8811 	msr	BASEPRI, r5
   281c0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   281c4:	f04f 0320 	mov.w	r3, #32
   281c8:	f3ef 8511 	mrs	r5, BASEPRI
   281cc:	f383 8812 	msr	BASEPRI_MAX, r3
   281d0:	f3bf 8f6f 	isb	sy
   281d4:	4638      	mov	r0, r7
   281d6:	f7fc ff4f 	bl	25078 <z_spin_lock_valid>
   281da:	3c01      	subs	r4, #1
   281dc:	b958      	cbnz	r0, 281f6 <clear_event_registrations+0x136>
   281de:	2394      	movs	r3, #148	; 0x94
   281e0:	4a14      	ldr	r2, [pc, #80]	; (28234 <clear_event_registrations+0x174>)
   281e2:	4917      	ldr	r1, [pc, #92]	; (28240 <clear_event_registrations+0x180>)
   281e4:	4809      	ldr	r0, [pc, #36]	; (2820c <clear_event_registrations+0x14c>)
   281e6:	f002 fa78 	bl	2a6da <assert_print>
   281ea:	4905      	ldr	r1, [pc, #20]	; (28200 <clear_event_registrations+0x140>)
   281ec:	4815      	ldr	r0, [pc, #84]	; (28244 <clear_event_registrations+0x184>)
   281ee:	f002 fa74 	bl	2a6da <assert_print>
   281f2:	2194      	movs	r1, #148	; 0x94
   281f4:	e7e0      	b.n	281b8 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   281f6:	4638      	mov	r0, r7
   281f8:	f7fc ff5a 	bl	250b0 <z_spin_lock_set_owner>
	return k;
   281fc:	4640      	mov	r0, r8
   281fe:	e768      	b.n	280d2 <clear_event_registrations+0x12>
   28200:	20021ae0 	.word	0x20021ae0
   28204:	00038903 	.word	0x00038903
   28208:	000388c5 	.word	0x000388c5
   2820c:	00032679 	.word	0x00032679
   28210:	0003891d 	.word	0x0003891d
   28214:	00038932 	.word	0x00038932
   28218:	0003894e 	.word	0x0003894e
   2821c:	0003895f 	.word	0x0003895f
   28220:	0003897c 	.word	0x0003897c
   28224:	00038993 	.word	0x00038993
   28228:	000389ae 	.word	0x000389ae
   2822c:	00037b56 	.word	0x00037b56
   28230:	000389c7 	.word	0x000389c7
   28234:	0003341a 	.word	0x0003341a
   28238:	00033447 	.word	0x00033447
   2823c:	0003345e 	.word	0x0003345e
   28240:	00033473 	.word	0x00033473
   28244:	00033488 	.word	0x00033488

00028248 <k_poll_event_init>:
{
   28248:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2824a:	b162      	cbz	r2, 28266 <k_poll_event_init+0x1e>
   2824c:	4917      	ldr	r1, [pc, #92]	; (282ac <k_poll_event_init+0x64>)
   2824e:	232d      	movs	r3, #45	; 0x2d
   28250:	4a17      	ldr	r2, [pc, #92]	; (282b0 <k_poll_event_init+0x68>)
   28252:	4818      	ldr	r0, [pc, #96]	; (282b4 <k_poll_event_init+0x6c>)
   28254:	f002 fa41 	bl	2a6da <assert_print>
   28258:	4817      	ldr	r0, [pc, #92]	; (282b8 <k_poll_event_init+0x70>)
   2825a:	f002 fa3e 	bl	2a6da <assert_print>
   2825e:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28260:	4813      	ldr	r0, [pc, #76]	; (282b0 <k_poll_event_init+0x68>)
   28262:	f002 fa33 	bl	2a6cc <assert_post_action>
   28266:	293f      	cmp	r1, #63	; 0x3f
   28268:	d90a      	bls.n	28280 <k_poll_event_init+0x38>
   2826a:	4914      	ldr	r1, [pc, #80]	; (282bc <k_poll_event_init+0x74>)
   2826c:	232f      	movs	r3, #47	; 0x2f
   2826e:	4a10      	ldr	r2, [pc, #64]	; (282b0 <k_poll_event_init+0x68>)
   28270:	4810      	ldr	r0, [pc, #64]	; (282b4 <k_poll_event_init+0x6c>)
   28272:	f002 fa32 	bl	2a6da <assert_print>
   28276:	4812      	ldr	r0, [pc, #72]	; (282c0 <k_poll_event_init+0x78>)
   28278:	f002 fa2f 	bl	2a6da <assert_print>
   2827c:	212f      	movs	r1, #47	; 0x2f
   2827e:	e7ef      	b.n	28260 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   28280:	b953      	cbnz	r3, 28298 <k_poll_event_init+0x50>
   28282:	4910      	ldr	r1, [pc, #64]	; (282c4 <k_poll_event_init+0x7c>)
   28284:	2330      	movs	r3, #48	; 0x30
   28286:	4a0a      	ldr	r2, [pc, #40]	; (282b0 <k_poll_event_init+0x68>)
   28288:	480a      	ldr	r0, [pc, #40]	; (282b4 <k_poll_event_init+0x6c>)
   2828a:	f002 fa26 	bl	2a6da <assert_print>
   2828e:	480e      	ldr	r0, [pc, #56]	; (282c8 <k_poll_event_init+0x80>)
   28290:	f002 fa23 	bl	2a6da <assert_print>
   28294:	2130      	movs	r1, #48	; 0x30
   28296:	e7e3      	b.n	28260 <k_poll_event_init+0x18>
	event->poller = NULL;
   28298:	6082      	str	r2, [r0, #8]
	event->type = type;
   2829a:	0209      	lsls	r1, r1, #8
   2829c:	7b02      	ldrb	r2, [r0, #12]
   2829e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   282a2:	4311      	orrs	r1, r2
	event->obj = obj;
   282a4:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   282a8:	bd08      	pop	{r3, pc}
   282aa:	bf00      	nop
   282ac:	000389dd 	.word	0x000389dd
   282b0:	000388c5 	.word	0x000388c5
   282b4:	00032679 	.word	0x00032679
   282b8:	000389fd 	.word	0x000389fd
   282bc:	00038a23 	.word	0x00038a23
   282c0:	00038a47 	.word	0x00038a47
   282c4:	00038a57 	.word	0x00038a57
   282c8:	00038a6a 	.word	0x00038a6a

000282cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   282cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282d0:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   282d2:	4b5c      	ldr	r3, [pc, #368]	; (28444 <z_impl_k_poll+0x178>)
{
   282d4:	4617      	mov	r7, r2
	struct z_poller *poller = &_current->poller;
   282d6:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   282da:	2301      	movs	r3, #1
{
   282dc:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   282de:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   282e2:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   282e6:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   282ea:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   282ee:	f1bb 0f00 	cmp.w	fp, #0
   282f2:	d00e      	beq.n	28312 <z_impl_k_poll+0x46>
   282f4:	4954      	ldr	r1, [pc, #336]	; (28448 <z_impl_k_poll+0x17c>)
   282f6:	f240 132d 	movw	r3, #301	; 0x12d
   282fa:	4a54      	ldr	r2, [pc, #336]	; (2844c <z_impl_k_poll+0x180>)
   282fc:	4854      	ldr	r0, [pc, #336]	; (28450 <z_impl_k_poll+0x184>)
   282fe:	f002 f9ec 	bl	2a6da <assert_print>
   28302:	4854      	ldr	r0, [pc, #336]	; (28454 <z_impl_k_poll+0x188>)
   28304:	f002 f9e9 	bl	2a6da <assert_print>
   28308:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   2830c:	484f      	ldr	r0, [pc, #316]	; (2844c <z_impl_k_poll+0x180>)
   2830e:	f002 f9dd 	bl	2a6cc <assert_post_action>
   28312:	b960      	cbnz	r0, 2832e <z_impl_k_poll+0x62>
   28314:	4950      	ldr	r1, [pc, #320]	; (28458 <z_impl_k_poll+0x18c>)
   28316:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2831a:	4a4c      	ldr	r2, [pc, #304]	; (2844c <z_impl_k_poll+0x180>)
   2831c:	484c      	ldr	r0, [pc, #304]	; (28450 <z_impl_k_poll+0x184>)
   2831e:	f002 f9dc 	bl	2a6da <assert_print>
   28322:	484e      	ldr	r0, [pc, #312]	; (2845c <z_impl_k_poll+0x190>)
   28324:	f002 f9d9 	bl	2a6da <assert_print>
   28328:	f44f 7197 	mov.w	r1, #302	; 0x12e
   2832c:	e7ee      	b.n	2830c <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   2832e:	2900      	cmp	r1, #0
   28330:	da0c      	bge.n	2834c <z_impl_k_poll+0x80>
   28332:	494b      	ldr	r1, [pc, #300]	; (28460 <z_impl_k_poll+0x194>)
   28334:	f240 132f 	movw	r3, #303	; 0x12f
   28338:	4a44      	ldr	r2, [pc, #272]	; (2844c <z_impl_k_poll+0x180>)
   2833a:	4845      	ldr	r0, [pc, #276]	; (28450 <z_impl_k_poll+0x184>)
   2833c:	f002 f9cd 	bl	2a6da <assert_print>
   28340:	4848      	ldr	r0, [pc, #288]	; (28464 <z_impl_k_poll+0x198>)
   28342:	f002 f9ca 	bl	2a6da <assert_print>
   28346:	f240 112f 	movw	r1, #303	; 0x12f
   2834a:	e7df      	b.n	2830c <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2834c:	ea57 0306 	orrs.w	r3, r7, r6
   28350:	bf0c      	ite	eq
   28352:	2301      	moveq	r3, #1
   28354:	2300      	movne	r3, #0
   28356:	f7ff fda5 	bl	27ea4 <register_events>
   2835a:	4681      	mov	r9, r0
   2835c:	f04f 0320 	mov.w	r3, #32
   28360:	f3ef 8a11 	mrs	sl, BASEPRI
   28364:	f383 8812 	msr	BASEPRI_MAX, r3
   28368:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2836c:	483e      	ldr	r0, [pc, #248]	; (28468 <z_impl_k_poll+0x19c>)
   2836e:	f7fc fe83 	bl	25078 <z_spin_lock_valid>
   28372:	b960      	cbnz	r0, 2838e <z_impl_k_poll+0xc2>
   28374:	2394      	movs	r3, #148	; 0x94
   28376:	4a3d      	ldr	r2, [pc, #244]	; (2846c <z_impl_k_poll+0x1a0>)
   28378:	493d      	ldr	r1, [pc, #244]	; (28470 <z_impl_k_poll+0x1a4>)
   2837a:	4835      	ldr	r0, [pc, #212]	; (28450 <z_impl_k_poll+0x184>)
   2837c:	f002 f9ad 	bl	2a6da <assert_print>
   28380:	4939      	ldr	r1, [pc, #228]	; (28468 <z_impl_k_poll+0x19c>)
   28382:	483c      	ldr	r0, [pc, #240]	; (28474 <z_impl_k_poll+0x1a8>)
   28384:	f002 f9a9 	bl	2a6da <assert_print>
   28388:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2838a:	4838      	ldr	r0, [pc, #224]	; (2846c <z_impl_k_poll+0x1a0>)
   2838c:	e7bf      	b.n	2830e <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   2838e:	4836      	ldr	r0, [pc, #216]	; (28468 <z_impl_k_poll+0x19c>)
   28390:	f7fc fe8e 	bl	250b0 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   28394:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   28398:	b9e4      	cbnz	r4, 283d4 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   2839a:	4628      	mov	r0, r5
   2839c:	4652      	mov	r2, sl
   2839e:	4649      	mov	r1, r9
   283a0:	f7ff fe8e 	bl	280c0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   283a4:	4830      	ldr	r0, [pc, #192]	; (28468 <z_impl_k_poll+0x19c>)
   283a6:	f7fc fe75 	bl	25094 <z_spin_unlock_valid>
   283aa:	b958      	cbnz	r0, 283c4 <z_impl_k_poll+0xf8>
   283ac:	23c2      	movs	r3, #194	; 0xc2
   283ae:	4a2f      	ldr	r2, [pc, #188]	; (2846c <z_impl_k_poll+0x1a0>)
   283b0:	4931      	ldr	r1, [pc, #196]	; (28478 <z_impl_k_poll+0x1ac>)
   283b2:	4827      	ldr	r0, [pc, #156]	; (28450 <z_impl_k_poll+0x184>)
   283b4:	f002 f991 	bl	2a6da <assert_print>
   283b8:	492b      	ldr	r1, [pc, #172]	; (28468 <z_impl_k_poll+0x19c>)
   283ba:	4830      	ldr	r0, [pc, #192]	; (2847c <z_impl_k_poll+0x1b0>)
   283bc:	f002 f98d 	bl	2a6da <assert_print>
   283c0:	21c2      	movs	r1, #194	; 0xc2
   283c2:	e7e2      	b.n	2838a <z_impl_k_poll+0xbe>
	__asm__ volatile(
   283c4:	f38a 8811 	msr	BASEPRI, sl
   283c8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   283cc:	4620      	mov	r0, r4
   283ce:	b003      	add	sp, #12
   283d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   283d4:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   283d8:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   283dc:	d10b      	bne.n	283f6 <z_impl_k_poll+0x12a>
   283de:	4822      	ldr	r0, [pc, #136]	; (28468 <z_impl_k_poll+0x19c>)
   283e0:	f7fc fe58 	bl	25094 <z_spin_unlock_valid>
   283e4:	2800      	cmp	r0, #0
   283e6:	d0e1      	beq.n	283ac <z_impl_k_poll+0xe0>
   283e8:	f38a 8811 	msr	BASEPRI, sl
   283ec:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   283f0:	f06f 040a 	mvn.w	r4, #10
   283f4:	e7ea      	b.n	283cc <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   283f6:	4651      	mov	r1, sl
   283f8:	e9cd 7600 	strd	r7, r6, [sp]
   283fc:	4a20      	ldr	r2, [pc, #128]	; (28480 <z_impl_k_poll+0x1b4>)
   283fe:	481a      	ldr	r0, [pc, #104]	; (28468 <z_impl_k_poll+0x19c>)
   28400:	f7fe fbd2 	bl	26ba8 <z_pend_curr>
   28404:	4604      	mov	r4, r0
	__asm__ volatile(
   28406:	f04f 0320 	mov.w	r3, #32
   2840a:	f3ef 8611 	mrs	r6, BASEPRI
   2840e:	f383 8812 	msr	BASEPRI_MAX, r3
   28412:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28416:	4814      	ldr	r0, [pc, #80]	; (28468 <z_impl_k_poll+0x19c>)
   28418:	f7fc fe2e 	bl	25078 <z_spin_lock_valid>
   2841c:	2800      	cmp	r0, #0
   2841e:	d0a9      	beq.n	28374 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   28420:	4811      	ldr	r0, [pc, #68]	; (28468 <z_impl_k_poll+0x19c>)
   28422:	f7fc fe45 	bl	250b0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   28426:	4628      	mov	r0, r5
   28428:	4632      	mov	r2, r6
   2842a:	4649      	mov	r1, r9
   2842c:	f7ff fe48 	bl	280c0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28430:	480d      	ldr	r0, [pc, #52]	; (28468 <z_impl_k_poll+0x19c>)
   28432:	f7fc fe2f 	bl	25094 <z_spin_unlock_valid>
   28436:	2800      	cmp	r0, #0
   28438:	d0b8      	beq.n	283ac <z_impl_k_poll+0xe0>
	__asm__ volatile(
   2843a:	f386 8811 	msr	BASEPRI, r6
   2843e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   28442:	e7c3      	b.n	283cc <z_impl_k_poll+0x100>
   28444:	20021a88 	.word	0x20021a88
   28448:	0003844e 	.word	0x0003844e
   2844c:	000388c5 	.word	0x000388c5
   28450:	00032679 	.word	0x00032679
   28454:	00036916 	.word	0x00036916
   28458:	00038a84 	.word	0x00038a84
   2845c:	00038a9a 	.word	0x00038a9a
   28460:	00038aa9 	.word	0x00038aa9
   28464:	00038ab9 	.word	0x00038ab9
   28468:	20021ae0 	.word	0x20021ae0
   2846c:	0003341a 	.word	0x0003341a
   28470:	00033473 	.word	0x00033473
   28474:	00033488 	.word	0x00033488
   28478:	00033447 	.word	0x00033447
   2847c:	0003345e 	.word	0x0003345e
   28480:	2000874c 	.word	0x2000874c

00028484 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   28484:	b570      	push	{r4, r5, r6, lr}
   28486:	4604      	mov	r4, r0
   28488:	460d      	mov	r5, r1
	__asm__ volatile(
   2848a:	f04f 0320 	mov.w	r3, #32
   2848e:	f3ef 8611 	mrs	r6, BASEPRI
   28492:	f383 8812 	msr	BASEPRI_MAX, r3
   28496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2849a:	4820      	ldr	r0, [pc, #128]	; (2851c <z_impl_k_poll_signal_raise+0x98>)
   2849c:	f7fc fdec 	bl	25078 <z_spin_lock_valid>
   284a0:	b968      	cbnz	r0, 284be <z_impl_k_poll_signal_raise+0x3a>
   284a2:	2394      	movs	r3, #148	; 0x94
   284a4:	4a1e      	ldr	r2, [pc, #120]	; (28520 <z_impl_k_poll_signal_raise+0x9c>)
   284a6:	491f      	ldr	r1, [pc, #124]	; (28524 <z_impl_k_poll_signal_raise+0xa0>)
   284a8:	481f      	ldr	r0, [pc, #124]	; (28528 <z_impl_k_poll_signal_raise+0xa4>)
   284aa:	f002 f916 	bl	2a6da <assert_print>
   284ae:	491b      	ldr	r1, [pc, #108]	; (2851c <z_impl_k_poll_signal_raise+0x98>)
   284b0:	481e      	ldr	r0, [pc, #120]	; (2852c <z_impl_k_poll_signal_raise+0xa8>)
   284b2:	f002 f912 	bl	2a6da <assert_print>
   284b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284b8:	4819      	ldr	r0, [pc, #100]	; (28520 <z_impl_k_poll_signal_raise+0x9c>)
   284ba:	f002 f907 	bl	2a6cc <assert_post_action>
	z_spin_lock_set_owner(l);
   284be:	4817      	ldr	r0, [pc, #92]	; (2851c <z_impl_k_poll_signal_raise+0x98>)
   284c0:	f7fc fdf6 	bl	250b0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   284c4:	2101      	movs	r1, #1
	return list->head == list;
   284c6:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   284c8:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   284ca:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   284cc:	60a1      	str	r1, [r4, #8]
   284ce:	d10f      	bne.n	284f0 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   284d0:	4812      	ldr	r0, [pc, #72]	; (2851c <z_impl_k_poll_signal_raise+0x98>)
   284d2:	f7fc fddf 	bl	25094 <z_spin_unlock_valid>
   284d6:	b9d8      	cbnz	r0, 28510 <z_impl_k_poll_signal_raise+0x8c>
   284d8:	23c2      	movs	r3, #194	; 0xc2
   284da:	4a11      	ldr	r2, [pc, #68]	; (28520 <z_impl_k_poll_signal_raise+0x9c>)
   284dc:	4914      	ldr	r1, [pc, #80]	; (28530 <z_impl_k_poll_signal_raise+0xac>)
   284de:	4812      	ldr	r0, [pc, #72]	; (28528 <z_impl_k_poll_signal_raise+0xa4>)
   284e0:	f002 f8fb 	bl	2a6da <assert_print>
   284e4:	490d      	ldr	r1, [pc, #52]	; (2851c <z_impl_k_poll_signal_raise+0x98>)
   284e6:	4813      	ldr	r0, [pc, #76]	; (28534 <z_impl_k_poll_signal_raise+0xb0>)
   284e8:	f002 f8f7 	bl	2a6da <assert_print>
   284ec:	21c2      	movs	r1, #194	; 0xc2
   284ee:	e7e3      	b.n	284b8 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   284f0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   284f4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   284f6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   284f8:	2300      	movs	r3, #0
	node->prev = NULL;
   284fa:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   284fe:	f007 ffaf 	bl	30460 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   28502:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   28504:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   28506:	4805      	ldr	r0, [pc, #20]	; (2851c <z_impl_k_poll_signal_raise+0x98>)
   28508:	f7fe f880 	bl	2660c <z_reschedule>
	return rc;
}
   2850c:	4620      	mov	r0, r4
   2850e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   28510:	f386 8811 	msr	BASEPRI, r6
   28514:	f3bf 8f6f 	isb	sy
		return 0;
   28518:	2400      	movs	r4, #0
   2851a:	e7f7      	b.n	2850c <z_impl_k_poll_signal_raise+0x88>
   2851c:	20021ae0 	.word	0x20021ae0
   28520:	0003341a 	.word	0x0003341a
   28524:	00033473 	.word	0x00033473
   28528:	00032679 	.word	0x00032679
   2852c:	00033488 	.word	0x00033488
   28530:	00033447 	.word	0x00033447
   28534:	0003345e 	.word	0x0003345e

00028538 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   28538:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   2853a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   2853e:	4606      	mov	r6, r0
   28540:	460d      	mov	r5, r1
   28542:	d220      	bcs.n	28586 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28544:	f04f 0800 	mov.w	r8, #0
   28548:	f04f 0900 	mov.w	r9, #0
   2854c:	f041 0104 	orr.w	r1, r1, #4
   28550:	e9cd 8900 	strd	r8, r9, [sp]
   28554:	f7fc fa8c 	bl	24a70 <k_heap_aligned_alloc>
	if (mem == NULL) {
   28558:	4604      	mov	r4, r0
   2855a:	b1a0      	cbz	r0, 28586 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   2855c:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   28560:	b195      	cbz	r5, 28588 <z_heap_aligned_alloc+0x50>
   28562:	1e6b      	subs	r3, r5, #1
   28564:	421c      	tst	r4, r3
   28566:	d00f      	beq.n	28588 <z_heap_aligned_alloc+0x50>
   28568:	2325      	movs	r3, #37	; 0x25
   2856a:	4a09      	ldr	r2, [pc, #36]	; (28590 <z_heap_aligned_alloc+0x58>)
   2856c:	4909      	ldr	r1, [pc, #36]	; (28594 <z_heap_aligned_alloc+0x5c>)
   2856e:	480a      	ldr	r0, [pc, #40]	; (28598 <z_heap_aligned_alloc+0x60>)
   28570:	f002 f8b3 	bl	2a6da <assert_print>
   28574:	4621      	mov	r1, r4
   28576:	4809      	ldr	r0, [pc, #36]	; (2859c <z_heap_aligned_alloc+0x64>)
   28578:	462a      	mov	r2, r5
   2857a:	f002 f8ae 	bl	2a6da <assert_print>
   2857e:	2125      	movs	r1, #37	; 0x25
   28580:	4803      	ldr	r0, [pc, #12]	; (28590 <z_heap_aligned_alloc+0x58>)
   28582:	f002 f8a3 	bl	2a6cc <assert_post_action>
		return NULL;
   28586:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   28588:	4620      	mov	r0, r4
   2858a:	b002      	add	sp, #8
   2858c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   28590:	00038ac6 	.word	0x00038ac6
   28594:	00038aea 	.word	0x00038aea
   28598:	00032679 	.word	0x00032679
   2859c:	00038b1c 	.word	0x00038b1c

000285a0 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   285a0:	2803      	cmp	r0, #3
{
   285a2:	460a      	mov	r2, r1
   285a4:	b508      	push	{r3, lr}
	__ASSERT(align / sizeof(void *) >= 1
   285a6:	d901      	bls.n	285ac <k_aligned_alloc+0xc>
   285a8:	0783      	lsls	r3, r0, #30
   285aa:	d00c      	beq.n	285c6 <k_aligned_alloc+0x26>
   285ac:	4910      	ldr	r1, [pc, #64]	; (285f0 <k_aligned_alloc+0x50>)
   285ae:	2342      	movs	r3, #66	; 0x42
   285b0:	4a10      	ldr	r2, [pc, #64]	; (285f4 <k_aligned_alloc+0x54>)
   285b2:	4811      	ldr	r0, [pc, #68]	; (285f8 <k_aligned_alloc+0x58>)
   285b4:	f002 f891 	bl	2a6da <assert_print>
   285b8:	4810      	ldr	r0, [pc, #64]	; (285fc <k_aligned_alloc+0x5c>)
   285ba:	f002 f88e 	bl	2a6da <assert_print>
   285be:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   285c0:	480c      	ldr	r0, [pc, #48]	; (285f4 <k_aligned_alloc+0x54>)
   285c2:	f002 f883 	bl	2a6cc <assert_post_action>
   285c6:	1e43      	subs	r3, r0, #1
   285c8:	4203      	tst	r3, r0
   285ca:	d00a      	beq.n	285e2 <k_aligned_alloc+0x42>
   285cc:	490c      	ldr	r1, [pc, #48]	; (28600 <k_aligned_alloc+0x60>)
   285ce:	2346      	movs	r3, #70	; 0x46
   285d0:	4a08      	ldr	r2, [pc, #32]	; (285f4 <k_aligned_alloc+0x54>)
   285d2:	4809      	ldr	r0, [pc, #36]	; (285f8 <k_aligned_alloc+0x58>)
   285d4:	f002 f881 	bl	2a6da <assert_print>
   285d8:	480a      	ldr	r0, [pc, #40]	; (28604 <k_aligned_alloc+0x64>)
   285da:	f002 f87e 	bl	2a6da <assert_print>
   285de:	2146      	movs	r1, #70	; 0x46
   285e0:	e7ee      	b.n	285c0 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   285e2:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   285e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   285e8:	4807      	ldr	r0, [pc, #28]	; (28608 <k_aligned_alloc+0x68>)
   285ea:	f7ff bfa5 	b.w	28538 <z_heap_aligned_alloc>
   285ee:	bf00      	nop
   285f0:	00038b44 	.word	0x00038b44
   285f4:	00038ac6 	.word	0x00038ac6
   285f8:	00032679 	.word	0x00032679
   285fc:	00038b81 	.word	0x00038b81
   28600:	00033284 	.word	0x00033284
   28604:	0003329f 	.word	0x0003329f
   28608:	20008afc 	.word	0x20008afc

0002860c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2860c:	4b01      	ldr	r3, [pc, #4]	; (28614 <k_thread_system_pool_assign+0x8>)
   2860e:	6743      	str	r3, [r0, #116]	; 0x74
}
   28610:	4770      	bx	lr
   28612:	bf00      	nop
   28614:	20008afc 	.word	0x20008afc

00028618 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   28618:	b538      	push	{r3, r4, r5, lr}
   2861a:	4604      	mov	r4, r0
   2861c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2861e:	f007 fda3 	bl	30168 <k_is_in_isr>
   28622:	b920      	cbnz	r0, 2862e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28624:	4b06      	ldr	r3, [pc, #24]	; (28640 <z_thread_aligned_alloc+0x28>)
   28626:	689b      	ldr	r3, [r3, #8]
   28628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2862a:	b90b      	cbnz	r3, 28630 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2862c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2862e:	4b05      	ldr	r3, [pc, #20]	; (28644 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   28630:	462a      	mov	r2, r5
   28632:	4621      	mov	r1, r4
   28634:	4618      	mov	r0, r3
}
   28636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2863a:	f7ff bf7d 	b.w	28538 <z_heap_aligned_alloc>
   2863e:	bf00      	nop
   28640:	20021a88 	.word	0x20021a88
   28644:	20008afc 	.word	0x20008afc

00028648 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   28648:	4801      	ldr	r0, [pc, #4]	; (28650 <boot_banner+0x8>)
   2864a:	f001 be84 	b.w	2a356 <printk>
   2864e:	bf00      	nop
   28650:	00038bae 	.word	0x00038bae

00028654 <log>:
   28654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28656:	4604      	mov	r4, r0
   28658:	460d      	mov	r5, r1
   2865a:	f7e1 f975 	bl	9948 <__ieee754_log>
   2865e:	4b17      	ldr	r3, [pc, #92]	; (286bc <log+0x68>)
   28660:	4606      	mov	r6, r0
   28662:	460f      	mov	r7, r1
   28664:	f993 3000 	ldrsb.w	r3, [r3]
   28668:	3301      	adds	r3, #1
   2866a:	d01a      	beq.n	286a2 <log+0x4e>
   2866c:	4622      	mov	r2, r4
   2866e:	462b      	mov	r3, r5
   28670:	4620      	mov	r0, r4
   28672:	4629      	mov	r1, r5
   28674:	f7e0 fcde 	bl	9034 <__aeabi_dcmpun>
   28678:	b998      	cbnz	r0, 286a2 <log+0x4e>
   2867a:	2200      	movs	r2, #0
   2867c:	2300      	movs	r3, #0
   2867e:	4620      	mov	r0, r4
   28680:	4629      	mov	r1, r5
   28682:	f7e0 fccd 	bl	9020 <__aeabi_dcmpgt>
   28686:	b960      	cbnz	r0, 286a2 <log+0x4e>
   28688:	2200      	movs	r2, #0
   2868a:	2300      	movs	r3, #0
   2868c:	4620      	mov	r0, r4
   2868e:	4629      	mov	r1, r5
   28690:	f7e0 fc9e 	bl	8fd0 <__aeabi_dcmpeq>
   28694:	b140      	cbz	r0, 286a8 <log+0x54>
   28696:	f003 fbbd 	bl	2be14 <__errno>
   2869a:	2600      	movs	r6, #0
   2869c:	2322      	movs	r3, #34	; 0x22
   2869e:	4f08      	ldr	r7, [pc, #32]	; (286c0 <log+0x6c>)
   286a0:	6003      	str	r3, [r0, #0]
   286a2:	4630      	mov	r0, r6
   286a4:	4639      	mov	r1, r7
   286a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   286a8:	f003 fbb4 	bl	2be14 <__errno>
   286ac:	2321      	movs	r3, #33	; 0x21
   286ae:	6003      	str	r3, [r0, #0]
   286b0:	4804      	ldr	r0, [pc, #16]	; (286c4 <log+0x70>)
   286b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   286b6:	f000 b807 	b.w	286c8 <nan>
   286ba:	bf00      	nop
   286bc:	200089f7 	.word	0x200089f7
   286c0:	fff00000 	.word	0xfff00000
   286c4:	00036918 	.word	0x00036918

000286c8 <nan>:
   286c8:	2000      	movs	r0, #0
   286ca:	4901      	ldr	r1, [pc, #4]	; (286d0 <nan+0x8>)
   286cc:	4770      	bx	lr
   286ce:	bf00      	nop
   286d0:	7ff80000 	.word	0x7ff80000

000286d4 <malloc>:
   286d4:	4b02      	ldr	r3, [pc, #8]	; (286e0 <malloc+0xc>)
   286d6:	4601      	mov	r1, r0
   286d8:	6818      	ldr	r0, [r3, #0]
   286da:	f000 b855 	b.w	28788 <_malloc_r>
   286de:	bf00      	nop
   286e0:	20008754 	.word	0x20008754

000286e4 <free>:
   286e4:	4b02      	ldr	r3, [pc, #8]	; (286f0 <free+0xc>)
   286e6:	4601      	mov	r1, r0
   286e8:	6818      	ldr	r0, [r3, #0]
   286ea:	f000 b803 	b.w	286f4 <_free_r>
   286ee:	bf00      	nop
   286f0:	20008754 	.word	0x20008754

000286f4 <_free_r>:
   286f4:	b538      	push	{r3, r4, r5, lr}
   286f6:	4605      	mov	r5, r0
   286f8:	2900      	cmp	r1, #0
   286fa:	d041      	beq.n	28780 <_free_r+0x8c>
   286fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   28700:	1f0c      	subs	r4, r1, #4
   28702:	2b00      	cmp	r3, #0
   28704:	bfb8      	it	lt
   28706:	18e4      	addlt	r4, r4, r3
   28708:	f000 fd94 	bl	29234 <__malloc_lock>
   2870c:	4a1d      	ldr	r2, [pc, #116]	; (28784 <_free_r+0x90>)
   2870e:	6813      	ldr	r3, [r2, #0]
   28710:	b933      	cbnz	r3, 28720 <_free_r+0x2c>
   28712:	6063      	str	r3, [r4, #4]
   28714:	6014      	str	r4, [r2, #0]
   28716:	4628      	mov	r0, r5
   28718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2871c:	f000 bd90 	b.w	29240 <__malloc_unlock>
   28720:	42a3      	cmp	r3, r4
   28722:	d908      	bls.n	28736 <_free_r+0x42>
   28724:	6820      	ldr	r0, [r4, #0]
   28726:	1821      	adds	r1, r4, r0
   28728:	428b      	cmp	r3, r1
   2872a:	bf01      	itttt	eq
   2872c:	6819      	ldreq	r1, [r3, #0]
   2872e:	685b      	ldreq	r3, [r3, #4]
   28730:	1809      	addeq	r1, r1, r0
   28732:	6021      	streq	r1, [r4, #0]
   28734:	e7ed      	b.n	28712 <_free_r+0x1e>
   28736:	461a      	mov	r2, r3
   28738:	685b      	ldr	r3, [r3, #4]
   2873a:	b10b      	cbz	r3, 28740 <_free_r+0x4c>
   2873c:	42a3      	cmp	r3, r4
   2873e:	d9fa      	bls.n	28736 <_free_r+0x42>
   28740:	6811      	ldr	r1, [r2, #0]
   28742:	1850      	adds	r0, r2, r1
   28744:	42a0      	cmp	r0, r4
   28746:	d10b      	bne.n	28760 <_free_r+0x6c>
   28748:	6820      	ldr	r0, [r4, #0]
   2874a:	4401      	add	r1, r0
   2874c:	1850      	adds	r0, r2, r1
   2874e:	6011      	str	r1, [r2, #0]
   28750:	4283      	cmp	r3, r0
   28752:	d1e0      	bne.n	28716 <_free_r+0x22>
   28754:	6818      	ldr	r0, [r3, #0]
   28756:	685b      	ldr	r3, [r3, #4]
   28758:	4408      	add	r0, r1
   2875a:	6053      	str	r3, [r2, #4]
   2875c:	6010      	str	r0, [r2, #0]
   2875e:	e7da      	b.n	28716 <_free_r+0x22>
   28760:	d902      	bls.n	28768 <_free_r+0x74>
   28762:	230c      	movs	r3, #12
   28764:	602b      	str	r3, [r5, #0]
   28766:	e7d6      	b.n	28716 <_free_r+0x22>
   28768:	6820      	ldr	r0, [r4, #0]
   2876a:	1821      	adds	r1, r4, r0
   2876c:	428b      	cmp	r3, r1
   2876e:	bf02      	ittt	eq
   28770:	6819      	ldreq	r1, [r3, #0]
   28772:	685b      	ldreq	r3, [r3, #4]
   28774:	1809      	addeq	r1, r1, r0
   28776:	6063      	str	r3, [r4, #4]
   28778:	bf08      	it	eq
   2877a:	6021      	streq	r1, [r4, #0]
   2877c:	6054      	str	r4, [r2, #4]
   2877e:	e7ca      	b.n	28716 <_free_r+0x22>
   28780:	bd38      	pop	{r3, r4, r5, pc}
   28782:	bf00      	nop
   28784:	20021ae8 	.word	0x20021ae8

00028788 <_malloc_r>:
   28788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2878a:	1ccd      	adds	r5, r1, #3
   2878c:	4606      	mov	r6, r0
   2878e:	f025 0503 	bic.w	r5, r5, #3
   28792:	3508      	adds	r5, #8
   28794:	2d0c      	cmp	r5, #12
   28796:	bf38      	it	cc
   28798:	250c      	movcc	r5, #12
   2879a:	2d00      	cmp	r5, #0
   2879c:	db01      	blt.n	287a2 <_malloc_r+0x1a>
   2879e:	42a9      	cmp	r1, r5
   287a0:	d903      	bls.n	287aa <_malloc_r+0x22>
   287a2:	230c      	movs	r3, #12
   287a4:	6033      	str	r3, [r6, #0]
   287a6:	2000      	movs	r0, #0
   287a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   287aa:	f000 fd43 	bl	29234 <__malloc_lock>
   287ae:	4921      	ldr	r1, [pc, #132]	; (28834 <_malloc_r+0xac>)
   287b0:	680a      	ldr	r2, [r1, #0]
   287b2:	4614      	mov	r4, r2
   287b4:	b99c      	cbnz	r4, 287de <_malloc_r+0x56>
   287b6:	4f20      	ldr	r7, [pc, #128]	; (28838 <_malloc_r+0xb0>)
   287b8:	683b      	ldr	r3, [r7, #0]
   287ba:	b923      	cbnz	r3, 287c6 <_malloc_r+0x3e>
   287bc:	4621      	mov	r1, r4
   287be:	4630      	mov	r0, r6
   287c0:	f000 fbb8 	bl	28f34 <_sbrk_r>
   287c4:	6038      	str	r0, [r7, #0]
   287c6:	4629      	mov	r1, r5
   287c8:	4630      	mov	r0, r6
   287ca:	f000 fbb3 	bl	28f34 <_sbrk_r>
   287ce:	1c43      	adds	r3, r0, #1
   287d0:	d123      	bne.n	2881a <_malloc_r+0x92>
   287d2:	230c      	movs	r3, #12
   287d4:	4630      	mov	r0, r6
   287d6:	6033      	str	r3, [r6, #0]
   287d8:	f000 fd32 	bl	29240 <__malloc_unlock>
   287dc:	e7e3      	b.n	287a6 <_malloc_r+0x1e>
   287de:	6823      	ldr	r3, [r4, #0]
   287e0:	1b5b      	subs	r3, r3, r5
   287e2:	d417      	bmi.n	28814 <_malloc_r+0x8c>
   287e4:	2b0b      	cmp	r3, #11
   287e6:	d903      	bls.n	287f0 <_malloc_r+0x68>
   287e8:	6023      	str	r3, [r4, #0]
   287ea:	441c      	add	r4, r3
   287ec:	6025      	str	r5, [r4, #0]
   287ee:	e004      	b.n	287fa <_malloc_r+0x72>
   287f0:	6863      	ldr	r3, [r4, #4]
   287f2:	42a2      	cmp	r2, r4
   287f4:	bf0c      	ite	eq
   287f6:	600b      	streq	r3, [r1, #0]
   287f8:	6053      	strne	r3, [r2, #4]
   287fa:	4630      	mov	r0, r6
   287fc:	f000 fd20 	bl	29240 <__malloc_unlock>
   28800:	f104 000b 	add.w	r0, r4, #11
   28804:	1d23      	adds	r3, r4, #4
   28806:	f020 0007 	bic.w	r0, r0, #7
   2880a:	1ac2      	subs	r2, r0, r3
   2880c:	bf1c      	itt	ne
   2880e:	1a1b      	subne	r3, r3, r0
   28810:	50a3      	strne	r3, [r4, r2]
   28812:	e7c9      	b.n	287a8 <_malloc_r+0x20>
   28814:	4622      	mov	r2, r4
   28816:	6864      	ldr	r4, [r4, #4]
   28818:	e7cc      	b.n	287b4 <_malloc_r+0x2c>
   2881a:	1cc4      	adds	r4, r0, #3
   2881c:	f024 0403 	bic.w	r4, r4, #3
   28820:	42a0      	cmp	r0, r4
   28822:	d0e3      	beq.n	287ec <_malloc_r+0x64>
   28824:	1a21      	subs	r1, r4, r0
   28826:	4630      	mov	r0, r6
   28828:	f000 fb84 	bl	28f34 <_sbrk_r>
   2882c:	3001      	adds	r0, #1
   2882e:	d1dd      	bne.n	287ec <_malloc_r+0x64>
   28830:	e7cf      	b.n	287d2 <_malloc_r+0x4a>
   28832:	bf00      	nop
   28834:	20021ae8 	.word	0x20021ae8
   28838:	20021ae4 	.word	0x20021ae4

0002883c <_printf_float>:
   2883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28840:	b091      	sub	sp, #68	; 0x44
   28842:	460c      	mov	r4, r1
   28844:	4616      	mov	r6, r2
   28846:	461f      	mov	r7, r3
   28848:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   2884c:	4605      	mov	r5, r0
   2884e:	f000 fced 	bl	2922c <_localeconv_r>
   28852:	6803      	ldr	r3, [r0, #0]
   28854:	4618      	mov	r0, r3
   28856:	9308      	str	r3, [sp, #32]
   28858:	f7e0 fd95 	bl	9386 <strlen>
   2885c:	2300      	movs	r3, #0
   2885e:	9009      	str	r0, [sp, #36]	; 0x24
   28860:	930e      	str	r3, [sp, #56]	; 0x38
   28862:	f8d8 3000 	ldr.w	r3, [r8]
   28866:	f894 a018 	ldrb.w	sl, [r4, #24]
   2886a:	3307      	adds	r3, #7
   2886c:	f8d4 b000 	ldr.w	fp, [r4]
   28870:	f023 0307 	bic.w	r3, r3, #7
   28874:	f103 0208 	add.w	r2, r3, #8
   28878:	f8c8 2000 	str.w	r2, [r8]
   2887c:	f04f 32ff 	mov.w	r2, #4294967295
   28880:	e9d3 8900 	ldrd	r8, r9, [r3]
   28884:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   28888:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   2888c:	930b      	str	r3, [sp, #44]	; 0x2c
   2888e:	4b9d      	ldr	r3, [pc, #628]	; (28b04 <_printf_float+0x2c8>)
   28890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   28894:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
   28898:	f7e0 fbcc 	bl	9034 <__aeabi_dcmpun>
   2889c:	bb70      	cbnz	r0, 288fc <_printf_float+0xc0>
   2889e:	f04f 32ff 	mov.w	r2, #4294967295
   288a2:	4b98      	ldr	r3, [pc, #608]	; (28b04 <_printf_float+0x2c8>)
   288a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   288a8:	f7e0 fba6 	bl	8ff8 <__aeabi_dcmple>
   288ac:	bb30      	cbnz	r0, 288fc <_printf_float+0xc0>
   288ae:	2200      	movs	r2, #0
   288b0:	2300      	movs	r3, #0
   288b2:	4640      	mov	r0, r8
   288b4:	4649      	mov	r1, r9
   288b6:	f7e0 fb95 	bl	8fe4 <__aeabi_dcmplt>
   288ba:	b110      	cbz	r0, 288c2 <_printf_float+0x86>
   288bc:	232d      	movs	r3, #45	; 0x2d
   288be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   288c2:	4a91      	ldr	r2, [pc, #580]	; (28b08 <_printf_float+0x2cc>)
   288c4:	4b91      	ldr	r3, [pc, #580]	; (28b0c <_printf_float+0x2d0>)
   288c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   288ca:	bf94      	ite	ls
   288cc:	4690      	movls	r8, r2
   288ce:	4698      	movhi	r8, r3
   288d0:	2303      	movs	r3, #3
   288d2:	f04f 0900 	mov.w	r9, #0
   288d6:	6123      	str	r3, [r4, #16]
   288d8:	f02b 0304 	bic.w	r3, fp, #4
   288dc:	6023      	str	r3, [r4, #0]
   288de:	4633      	mov	r3, r6
   288e0:	aa0f      	add	r2, sp, #60	; 0x3c
   288e2:	4621      	mov	r1, r4
   288e4:	4628      	mov	r0, r5
   288e6:	9700      	str	r7, [sp, #0]
   288e8:	f007 ff41 	bl	3076e <_printf_common>
   288ec:	3001      	adds	r0, #1
   288ee:	f040 8099 	bne.w	28a24 <_printf_float+0x1e8>
   288f2:	f04f 30ff 	mov.w	r0, #4294967295
   288f6:	b011      	add	sp, #68	; 0x44
   288f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288fc:	4642      	mov	r2, r8
   288fe:	464b      	mov	r3, r9
   28900:	4640      	mov	r0, r8
   28902:	4649      	mov	r1, r9
   28904:	f7e0 fb96 	bl	9034 <__aeabi_dcmpun>
   28908:	b140      	cbz	r0, 2891c <_printf_float+0xe0>
   2890a:	464b      	mov	r3, r9
   2890c:	4a80      	ldr	r2, [pc, #512]	; (28b10 <_printf_float+0x2d4>)
   2890e:	2b00      	cmp	r3, #0
   28910:	bfbc      	itt	lt
   28912:	232d      	movlt	r3, #45	; 0x2d
   28914:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   28918:	4b7e      	ldr	r3, [pc, #504]	; (28b14 <_printf_float+0x2d8>)
   2891a:	e7d4      	b.n	288c6 <_printf_float+0x8a>
   2891c:	6863      	ldr	r3, [r4, #4]
   2891e:	1c5a      	adds	r2, r3, #1
   28920:	d129      	bne.n	28976 <_printf_float+0x13a>
   28922:	2306      	movs	r3, #6
   28924:	6063      	str	r3, [r4, #4]
   28926:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   2892a:	2200      	movs	r2, #0
   2892c:	4628      	mov	r0, r5
   2892e:	6023      	str	r3, [r4, #0]
   28930:	9206      	str	r2, [sp, #24]
   28932:	aa0e      	add	r2, sp, #56	; 0x38
   28934:	e9cd a204 	strd	sl, r2, [sp, #16]
   28938:	aa0d      	add	r2, sp, #52	; 0x34
   2893a:	9203      	str	r2, [sp, #12]
   2893c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   28940:	e9cd 3201 	strd	r3, r2, [sp, #4]
   28944:	6863      	ldr	r3, [r4, #4]
   28946:	4642      	mov	r2, r8
   28948:	9300      	str	r3, [sp, #0]
   2894a:	464b      	mov	r3, r9
   2894c:	f007 fe6f 	bl	3062e <__cvt>
   28950:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
   28954:	4680      	mov	r8, r0
   28956:	990d      	ldr	r1, [sp, #52]	; 0x34
   28958:	d115      	bne.n	28986 <_printf_float+0x14a>
   2895a:	1ccb      	adds	r3, r1, #3
   2895c:	db3b      	blt.n	289d6 <_printf_float+0x19a>
   2895e:	6863      	ldr	r3, [r4, #4]
   28960:	4299      	cmp	r1, r3
   28962:	dc38      	bgt.n	289d6 <_printf_float+0x19a>
   28964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28966:	4299      	cmp	r1, r3
   28968:	db55      	blt.n	28a16 <_printf_float+0x1da>
   2896a:	6823      	ldr	r3, [r4, #0]
   2896c:	6121      	str	r1, [r4, #16]
   2896e:	07d8      	lsls	r0, r3, #31
   28970:	d545      	bpl.n	289fe <_printf_float+0x1c2>
   28972:	1c4b      	adds	r3, r1, #1
   28974:	e042      	b.n	289fc <_printf_float+0x1c0>
   28976:	f00a 02df 	and.w	r2, sl, #223	; 0xdf
   2897a:	2a47      	cmp	r2, #71	; 0x47
   2897c:	d1d3      	bne.n	28926 <_printf_float+0xea>
   2897e:	2b00      	cmp	r3, #0
   28980:	d1d1      	bne.n	28926 <_printf_float+0xea>
   28982:	2301      	movs	r3, #1
   28984:	e7ce      	b.n	28924 <_printf_float+0xe8>
   28986:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   2898a:	d107      	bne.n	2899c <_printf_float+0x160>
   2898c:	1cc8      	adds	r0, r1, #3
   2898e:	db25      	blt.n	289dc <_printf_float+0x1a0>
   28990:	6863      	ldr	r3, [r4, #4]
   28992:	428b      	cmp	r3, r1
   28994:	db22      	blt.n	289dc <_printf_float+0x1a0>
   28996:	f04f 0a67 	mov.w	sl, #103	; 0x67
   2899a:	e7e3      	b.n	28964 <_printf_float+0x128>
   2899c:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   289a0:	d81f      	bhi.n	289e2 <_printf_float+0x1a6>
   289a2:	3901      	subs	r1, #1
   289a4:	4652      	mov	r2, sl
   289a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   289aa:	910d      	str	r1, [sp, #52]	; 0x34
   289ac:	f007 fea6 	bl	306fc <__exponent>
   289b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   289b2:	4681      	mov	r9, r0
   289b4:	1813      	adds	r3, r2, r0
   289b6:	2a01      	cmp	r2, #1
   289b8:	6123      	str	r3, [r4, #16]
   289ba:	dc02      	bgt.n	289c2 <_printf_float+0x186>
   289bc:	6822      	ldr	r2, [r4, #0]
   289be:	07d2      	lsls	r2, r2, #31
   289c0:	d501      	bpl.n	289c6 <_printf_float+0x18a>
   289c2:	3301      	adds	r3, #1
   289c4:	6123      	str	r3, [r4, #16]
   289c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   289ca:	2b00      	cmp	r3, #0
   289cc:	d087      	beq.n	288de <_printf_float+0xa2>
   289ce:	232d      	movs	r3, #45	; 0x2d
   289d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   289d4:	e783      	b.n	288de <_printf_float+0xa2>
   289d6:	f04f 0a65 	mov.w	sl, #101	; 0x65
   289da:	e7e2      	b.n	289a2 <_printf_float+0x166>
   289dc:	f04f 0a45 	mov.w	sl, #69	; 0x45
   289e0:	e7df      	b.n	289a2 <_printf_float+0x166>
   289e2:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   289e6:	d1bd      	bne.n	28964 <_printf_float+0x128>
   289e8:	2900      	cmp	r1, #0
   289ea:	6863      	ldr	r3, [r4, #4]
   289ec:	dd0b      	ble.n	28a06 <_printf_float+0x1ca>
   289ee:	6121      	str	r1, [r4, #16]
   289f0:	b913      	cbnz	r3, 289f8 <_printf_float+0x1bc>
   289f2:	6822      	ldr	r2, [r4, #0]
   289f4:	07d0      	lsls	r0, r2, #31
   289f6:	d502      	bpl.n	289fe <_printf_float+0x1c2>
   289f8:	3301      	adds	r3, #1
   289fa:	440b      	add	r3, r1
   289fc:	6123      	str	r3, [r4, #16]
   289fe:	f04f 0900 	mov.w	r9, #0
   28a02:	65a1      	str	r1, [r4, #88]	; 0x58
   28a04:	e7df      	b.n	289c6 <_printf_float+0x18a>
   28a06:	b913      	cbnz	r3, 28a0e <_printf_float+0x1d2>
   28a08:	6822      	ldr	r2, [r4, #0]
   28a0a:	07d2      	lsls	r2, r2, #31
   28a0c:	d501      	bpl.n	28a12 <_printf_float+0x1d6>
   28a0e:	3302      	adds	r3, #2
   28a10:	e7f4      	b.n	289fc <_printf_float+0x1c0>
   28a12:	2301      	movs	r3, #1
   28a14:	e7f2      	b.n	289fc <_printf_float+0x1c0>
   28a16:	2900      	cmp	r1, #0
   28a18:	bfd4      	ite	le
   28a1a:	f1c1 0202 	rsble	r2, r1, #2
   28a1e:	2201      	movgt	r2, #1
   28a20:	4413      	add	r3, r2
   28a22:	e7eb      	b.n	289fc <_printf_float+0x1c0>
   28a24:	6823      	ldr	r3, [r4, #0]
   28a26:	055a      	lsls	r2, r3, #21
   28a28:	d407      	bmi.n	28a3a <_printf_float+0x1fe>
   28a2a:	6923      	ldr	r3, [r4, #16]
   28a2c:	4642      	mov	r2, r8
   28a2e:	4631      	mov	r1, r6
   28a30:	4628      	mov	r0, r5
   28a32:	47b8      	blx	r7
   28a34:	3001      	adds	r0, #1
   28a36:	d12b      	bne.n	28a90 <_printf_float+0x254>
   28a38:	e75b      	b.n	288f2 <_printf_float+0xb6>
   28a3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   28a3e:	f240 80dc 	bls.w	28bfa <_printf_float+0x3be>
   28a42:	2200      	movs	r2, #0
   28a44:	2300      	movs	r3, #0
   28a46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28a4a:	f7e0 fac1 	bl	8fd0 <__aeabi_dcmpeq>
   28a4e:	2800      	cmp	r0, #0
   28a50:	d033      	beq.n	28aba <_printf_float+0x27e>
   28a52:	2301      	movs	r3, #1
   28a54:	4a30      	ldr	r2, [pc, #192]	; (28b18 <_printf_float+0x2dc>)
   28a56:	4631      	mov	r1, r6
   28a58:	4628      	mov	r0, r5
   28a5a:	47b8      	blx	r7
   28a5c:	3001      	adds	r0, #1
   28a5e:	f43f af48 	beq.w	288f2 <_printf_float+0xb6>
   28a62:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	; 0x34
   28a66:	4543      	cmp	r3, r8
   28a68:	db02      	blt.n	28a70 <_printf_float+0x234>
   28a6a:	6823      	ldr	r3, [r4, #0]
   28a6c:	07d8      	lsls	r0, r3, #31
   28a6e:	d50f      	bpl.n	28a90 <_printf_float+0x254>
   28a70:	4631      	mov	r1, r6
   28a72:	4628      	mov	r0, r5
   28a74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28a78:	47b8      	blx	r7
   28a7a:	3001      	adds	r0, #1
   28a7c:	f43f af39 	beq.w	288f2 <_printf_float+0xb6>
   28a80:	f04f 0900 	mov.w	r9, #0
   28a84:	f108 38ff 	add.w	r8, r8, #4294967295
   28a88:	f104 0a1a 	add.w	sl, r4, #26
   28a8c:	45c8      	cmp	r8, r9
   28a8e:	dc09      	bgt.n	28aa4 <_printf_float+0x268>
   28a90:	6823      	ldr	r3, [r4, #0]
   28a92:	079b      	lsls	r3, r3, #30
   28a94:	f100 8102 	bmi.w	28c9c <_printf_float+0x460>
   28a98:	68e0      	ldr	r0, [r4, #12]
   28a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28a9c:	4298      	cmp	r0, r3
   28a9e:	bfb8      	it	lt
   28aa0:	4618      	movlt	r0, r3
   28aa2:	e728      	b.n	288f6 <_printf_float+0xba>
   28aa4:	2301      	movs	r3, #1
   28aa6:	4652      	mov	r2, sl
   28aa8:	4631      	mov	r1, r6
   28aaa:	4628      	mov	r0, r5
   28aac:	47b8      	blx	r7
   28aae:	3001      	adds	r0, #1
   28ab0:	f43f af1f 	beq.w	288f2 <_printf_float+0xb6>
   28ab4:	f109 0901 	add.w	r9, r9, #1
   28ab8:	e7e8      	b.n	28a8c <_printf_float+0x250>
   28aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28abc:	2b00      	cmp	r3, #0
   28abe:	dc38      	bgt.n	28b32 <_printf_float+0x2f6>
   28ac0:	2301      	movs	r3, #1
   28ac2:	4a15      	ldr	r2, [pc, #84]	; (28b18 <_printf_float+0x2dc>)
   28ac4:	4631      	mov	r1, r6
   28ac6:	4628      	mov	r0, r5
   28ac8:	47b8      	blx	r7
   28aca:	3001      	adds	r0, #1
   28acc:	f43f af11 	beq.w	288f2 <_printf_float+0xb6>
   28ad0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	; 0x34
   28ad4:	ea59 0303 	orrs.w	r3, r9, r3
   28ad8:	d102      	bne.n	28ae0 <_printf_float+0x2a4>
   28ada:	6823      	ldr	r3, [r4, #0]
   28adc:	07d9      	lsls	r1, r3, #31
   28ade:	d5d7      	bpl.n	28a90 <_printf_float+0x254>
   28ae0:	4631      	mov	r1, r6
   28ae2:	4628      	mov	r0, r5
   28ae4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28ae8:	47b8      	blx	r7
   28aea:	3001      	adds	r0, #1
   28aec:	f43f af01 	beq.w	288f2 <_printf_float+0xb6>
   28af0:	f04f 0a00 	mov.w	sl, #0
   28af4:	f104 0b1a 	add.w	fp, r4, #26
   28af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28afa:	425b      	negs	r3, r3
   28afc:	4553      	cmp	r3, sl
   28afe:	dc0d      	bgt.n	28b1c <_printf_float+0x2e0>
   28b00:	464b      	mov	r3, r9
   28b02:	e793      	b.n	28a2c <_printf_float+0x1f0>
   28b04:	7fefffff 	.word	0x7fefffff
   28b08:	00038ce1 	.word	0x00038ce1
   28b0c:	0003391d 	.word	0x0003391d
   28b10:	00038ce5 	.word	0x00038ce5
   28b14:	00038ce9 	.word	0x00038ce9
   28b18:	00037b56 	.word	0x00037b56
   28b1c:	2301      	movs	r3, #1
   28b1e:	465a      	mov	r2, fp
   28b20:	4631      	mov	r1, r6
   28b22:	4628      	mov	r0, r5
   28b24:	47b8      	blx	r7
   28b26:	3001      	adds	r0, #1
   28b28:	f43f aee3 	beq.w	288f2 <_printf_float+0xb6>
   28b2c:	f10a 0a01 	add.w	sl, sl, #1
   28b30:	e7e2      	b.n	28af8 <_printf_float+0x2bc>
   28b32:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28b34:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28b38:	4553      	cmp	r3, sl
   28b3a:	bfa8      	it	ge
   28b3c:	4653      	movge	r3, sl
   28b3e:	2b00      	cmp	r3, #0
   28b40:	4699      	mov	r9, r3
   28b42:	dc36      	bgt.n	28bb2 <_printf_float+0x376>
   28b44:	f04f 0b00 	mov.w	fp, #0
   28b48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   28b4c:	f104 021a 	add.w	r2, r4, #26
   28b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28b52:	930a      	str	r3, [sp, #40]	; 0x28
   28b54:	eba3 0309 	sub.w	r3, r3, r9
   28b58:	455b      	cmp	r3, fp
   28b5a:	dc31      	bgt.n	28bc0 <_printf_float+0x384>
   28b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b5e:	459a      	cmp	sl, r3
   28b60:	dc3a      	bgt.n	28bd8 <_printf_float+0x39c>
   28b62:	6823      	ldr	r3, [r4, #0]
   28b64:	07da      	lsls	r2, r3, #31
   28b66:	d437      	bmi.n	28bd8 <_printf_float+0x39c>
   28b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b6a:	ebaa 0903 	sub.w	r9, sl, r3
   28b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28b70:	ebaa 0303 	sub.w	r3, sl, r3
   28b74:	4599      	cmp	r9, r3
   28b76:	bfa8      	it	ge
   28b78:	4699      	movge	r9, r3
   28b7a:	f1b9 0f00 	cmp.w	r9, #0
   28b7e:	dc33      	bgt.n	28be8 <_printf_float+0x3ac>
   28b80:	f04f 0800 	mov.w	r8, #0
   28b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   28b88:	f104 0b1a 	add.w	fp, r4, #26
   28b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28b8e:	ebaa 0303 	sub.w	r3, sl, r3
   28b92:	eba3 0309 	sub.w	r3, r3, r9
   28b96:	4543      	cmp	r3, r8
   28b98:	f77f af7a 	ble.w	28a90 <_printf_float+0x254>
   28b9c:	2301      	movs	r3, #1
   28b9e:	465a      	mov	r2, fp
   28ba0:	4631      	mov	r1, r6
   28ba2:	4628      	mov	r0, r5
   28ba4:	47b8      	blx	r7
   28ba6:	3001      	adds	r0, #1
   28ba8:	f43f aea3 	beq.w	288f2 <_printf_float+0xb6>
   28bac:	f108 0801 	add.w	r8, r8, #1
   28bb0:	e7ec      	b.n	28b8c <_printf_float+0x350>
   28bb2:	4642      	mov	r2, r8
   28bb4:	4631      	mov	r1, r6
   28bb6:	4628      	mov	r0, r5
   28bb8:	47b8      	blx	r7
   28bba:	3001      	adds	r0, #1
   28bbc:	d1c2      	bne.n	28b44 <_printf_float+0x308>
   28bbe:	e698      	b.n	288f2 <_printf_float+0xb6>
   28bc0:	2301      	movs	r3, #1
   28bc2:	4631      	mov	r1, r6
   28bc4:	4628      	mov	r0, r5
   28bc6:	920a      	str	r2, [sp, #40]	; 0x28
   28bc8:	47b8      	blx	r7
   28bca:	3001      	adds	r0, #1
   28bcc:	f43f ae91 	beq.w	288f2 <_printf_float+0xb6>
   28bd0:	f10b 0b01 	add.w	fp, fp, #1
   28bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28bd6:	e7bb      	b.n	28b50 <_printf_float+0x314>
   28bd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28bdc:	4631      	mov	r1, r6
   28bde:	4628      	mov	r0, r5
   28be0:	47b8      	blx	r7
   28be2:	3001      	adds	r0, #1
   28be4:	d1c0      	bne.n	28b68 <_printf_float+0x32c>
   28be6:	e684      	b.n	288f2 <_printf_float+0xb6>
   28be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28bea:	464b      	mov	r3, r9
   28bec:	4631      	mov	r1, r6
   28bee:	4628      	mov	r0, r5
   28bf0:	4442      	add	r2, r8
   28bf2:	47b8      	blx	r7
   28bf4:	3001      	adds	r0, #1
   28bf6:	d1c3      	bne.n	28b80 <_printf_float+0x344>
   28bf8:	e67b      	b.n	288f2 <_printf_float+0xb6>
   28bfa:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   28bfe:	f1ba 0f01 	cmp.w	sl, #1
   28c02:	dc01      	bgt.n	28c08 <_printf_float+0x3cc>
   28c04:	07db      	lsls	r3, r3, #31
   28c06:	d536      	bpl.n	28c76 <_printf_float+0x43a>
   28c08:	2301      	movs	r3, #1
   28c0a:	4642      	mov	r2, r8
   28c0c:	4631      	mov	r1, r6
   28c0e:	4628      	mov	r0, r5
   28c10:	47b8      	blx	r7
   28c12:	3001      	adds	r0, #1
   28c14:	f43f ae6d 	beq.w	288f2 <_printf_float+0xb6>
   28c18:	4631      	mov	r1, r6
   28c1a:	4628      	mov	r0, r5
   28c1c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   28c20:	47b8      	blx	r7
   28c22:	3001      	adds	r0, #1
   28c24:	f43f ae65 	beq.w	288f2 <_printf_float+0xb6>
   28c28:	2200      	movs	r2, #0
   28c2a:	2300      	movs	r3, #0
   28c2c:	f10a 3aff 	add.w	sl, sl, #4294967295
   28c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   28c34:	f7e0 f9cc 	bl	8fd0 <__aeabi_dcmpeq>
   28c38:	b9c0      	cbnz	r0, 28c6c <_printf_float+0x430>
   28c3a:	4653      	mov	r3, sl
   28c3c:	f108 0201 	add.w	r2, r8, #1
   28c40:	4631      	mov	r1, r6
   28c42:	4628      	mov	r0, r5
   28c44:	47b8      	blx	r7
   28c46:	3001      	adds	r0, #1
   28c48:	d10c      	bne.n	28c64 <_printf_float+0x428>
   28c4a:	e652      	b.n	288f2 <_printf_float+0xb6>
   28c4c:	2301      	movs	r3, #1
   28c4e:	465a      	mov	r2, fp
   28c50:	4631      	mov	r1, r6
   28c52:	4628      	mov	r0, r5
   28c54:	47b8      	blx	r7
   28c56:	3001      	adds	r0, #1
   28c58:	f43f ae4b 	beq.w	288f2 <_printf_float+0xb6>
   28c5c:	f108 0801 	add.w	r8, r8, #1
   28c60:	45d0      	cmp	r8, sl
   28c62:	dbf3      	blt.n	28c4c <_printf_float+0x410>
   28c64:	464b      	mov	r3, r9
   28c66:	f104 0250 	add.w	r2, r4, #80	; 0x50
   28c6a:	e6e0      	b.n	28a2e <_printf_float+0x1f2>
   28c6c:	f04f 0800 	mov.w	r8, #0
   28c70:	f104 0b1a 	add.w	fp, r4, #26
   28c74:	e7f4      	b.n	28c60 <_printf_float+0x424>
   28c76:	2301      	movs	r3, #1
   28c78:	4642      	mov	r2, r8
   28c7a:	e7e1      	b.n	28c40 <_printf_float+0x404>
   28c7c:	2301      	movs	r3, #1
   28c7e:	464a      	mov	r2, r9
   28c80:	4631      	mov	r1, r6
   28c82:	4628      	mov	r0, r5
   28c84:	47b8      	blx	r7
   28c86:	3001      	adds	r0, #1
   28c88:	f43f ae33 	beq.w	288f2 <_printf_float+0xb6>
   28c8c:	f108 0801 	add.w	r8, r8, #1
   28c90:	68e3      	ldr	r3, [r4, #12]
   28c92:	990f      	ldr	r1, [sp, #60]	; 0x3c
   28c94:	1a5b      	subs	r3, r3, r1
   28c96:	4543      	cmp	r3, r8
   28c98:	dcf0      	bgt.n	28c7c <_printf_float+0x440>
   28c9a:	e6fd      	b.n	28a98 <_printf_float+0x25c>
   28c9c:	f04f 0800 	mov.w	r8, #0
   28ca0:	f104 0919 	add.w	r9, r4, #25
   28ca4:	e7f4      	b.n	28c90 <_printf_float+0x454>
   28ca6:	bf00      	nop

00028ca8 <_printf_i>:
   28ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   28cac:	7e0f      	ldrb	r7, [r1, #24]
   28cae:	4691      	mov	r9, r2
   28cb0:	4680      	mov	r8, r0
   28cb2:	460c      	mov	r4, r1
   28cb4:	2f78      	cmp	r7, #120	; 0x78
   28cb6:	469a      	mov	sl, r3
   28cb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   28cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
   28cbe:	d807      	bhi.n	28cd0 <_printf_i+0x28>
   28cc0:	2f62      	cmp	r7, #98	; 0x62
   28cc2:	d80a      	bhi.n	28cda <_printf_i+0x32>
   28cc4:	2f00      	cmp	r7, #0
   28cc6:	f000 80e0 	beq.w	28e8a <_printf_i+0x1e2>
   28cca:	2f58      	cmp	r7, #88	; 0x58
   28ccc:	f000 80bb 	beq.w	28e46 <_printf_i+0x19e>
   28cd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   28cd8:	e03a      	b.n	28d50 <_printf_i+0xa8>
   28cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   28cde:	2b15      	cmp	r3, #21
   28ce0:	d8f6      	bhi.n	28cd0 <_printf_i+0x28>
   28ce2:	a101      	add	r1, pc, #4	; (adr r1, 28ce8 <_printf_i+0x40>)
   28ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   28ce8:	00028d41 	.word	0x00028d41
   28cec:	00028d55 	.word	0x00028d55
   28cf0:	00028cd1 	.word	0x00028cd1
   28cf4:	00028cd1 	.word	0x00028cd1
   28cf8:	00028cd1 	.word	0x00028cd1
   28cfc:	00028cd1 	.word	0x00028cd1
   28d00:	00028d55 	.word	0x00028d55
   28d04:	00028cd1 	.word	0x00028cd1
   28d08:	00028cd1 	.word	0x00028cd1
   28d0c:	00028cd1 	.word	0x00028cd1
   28d10:	00028cd1 	.word	0x00028cd1
   28d14:	00028e71 	.word	0x00028e71
   28d18:	00028de5 	.word	0x00028de5
   28d1c:	00028e27 	.word	0x00028e27
   28d20:	00028cd1 	.word	0x00028cd1
   28d24:	00028cd1 	.word	0x00028cd1
   28d28:	00028e93 	.word	0x00028e93
   28d2c:	00028cd1 	.word	0x00028cd1
   28d30:	00028de5 	.word	0x00028de5
   28d34:	00028cd1 	.word	0x00028cd1
   28d38:	00028cd1 	.word	0x00028cd1
   28d3c:	00028e2f 	.word	0x00028e2f
   28d40:	682b      	ldr	r3, [r5, #0]
   28d42:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28d46:	1d1a      	adds	r2, r3, #4
   28d48:	681b      	ldr	r3, [r3, #0]
   28d4a:	602a      	str	r2, [r5, #0]
   28d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   28d50:	2301      	movs	r3, #1
   28d52:	e0ab      	b.n	28eac <_printf_i+0x204>
   28d54:	6823      	ldr	r3, [r4, #0]
   28d56:	6829      	ldr	r1, [r5, #0]
   28d58:	061f      	lsls	r7, r3, #24
   28d5a:	f101 0004 	add.w	r0, r1, #4
   28d5e:	6028      	str	r0, [r5, #0]
   28d60:	d501      	bpl.n	28d66 <_printf_i+0xbe>
   28d62:	680d      	ldr	r5, [r1, #0]
   28d64:	e003      	b.n	28d6e <_printf_i+0xc6>
   28d66:	065e      	lsls	r6, r3, #25
   28d68:	d5fb      	bpl.n	28d62 <_printf_i+0xba>
   28d6a:	f9b1 5000 	ldrsh.w	r5, [r1]
   28d6e:	2d00      	cmp	r5, #0
   28d70:	6861      	ldr	r1, [r4, #4]
   28d72:	da7a      	bge.n	28e6a <_printf_i+0x1c2>
   28d74:	202d      	movs	r0, #45	; 0x2d
   28d76:	2900      	cmp	r1, #0
   28d78:	60a1      	str	r1, [r4, #8]
   28d7a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   28d7e:	da2d      	bge.n	28ddc <_printf_i+0x134>
   28d80:	426d      	negs	r5, r5
   28d82:	485e      	ldr	r0, [pc, #376]	; (28efc <_printf_i+0x254>)
   28d84:	230a      	movs	r3, #10
   28d86:	4616      	mov	r6, r2
   28d88:	fbb5 f1f3 	udiv	r1, r5, r3
   28d8c:	fb03 5711 	mls	r7, r3, r1, r5
   28d90:	5dc7      	ldrb	r7, [r0, r7]
   28d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
   28d96:	462f      	mov	r7, r5
   28d98:	460d      	mov	r5, r1
   28d9a:	42bb      	cmp	r3, r7
   28d9c:	d9f4      	bls.n	28d88 <_printf_i+0xe0>
   28d9e:	2b08      	cmp	r3, #8
   28da0:	d10b      	bne.n	28dba <_printf_i+0x112>
   28da2:	6823      	ldr	r3, [r4, #0]
   28da4:	07df      	lsls	r7, r3, #31
   28da6:	d508      	bpl.n	28dba <_printf_i+0x112>
   28da8:	6923      	ldr	r3, [r4, #16]
   28daa:	6861      	ldr	r1, [r4, #4]
   28dac:	4299      	cmp	r1, r3
   28dae:	bfde      	ittt	le
   28db0:	2330      	movle	r3, #48	; 0x30
   28db2:	f806 3c01 	strble.w	r3, [r6, #-1]
   28db6:	f106 36ff 	addle.w	r6, r6, #4294967295
   28dba:	1b92      	subs	r2, r2, r6
   28dbc:	6122      	str	r2, [r4, #16]
   28dbe:	464b      	mov	r3, r9
   28dc0:	aa03      	add	r2, sp, #12
   28dc2:	4621      	mov	r1, r4
   28dc4:	4640      	mov	r0, r8
   28dc6:	f8cd a000 	str.w	sl, [sp]
   28dca:	f007 fcd0 	bl	3076e <_printf_common>
   28dce:	3001      	adds	r0, #1
   28dd0:	d171      	bne.n	28eb6 <_printf_i+0x20e>
   28dd2:	f04f 30ff 	mov.w	r0, #4294967295
   28dd6:	b004      	add	sp, #16
   28dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28ddc:	f023 0304 	bic.w	r3, r3, #4
   28de0:	6023      	str	r3, [r4, #0]
   28de2:	e7cd      	b.n	28d80 <_printf_i+0xd8>
   28de4:	682b      	ldr	r3, [r5, #0]
   28de6:	6820      	ldr	r0, [r4, #0]
   28de8:	1d19      	adds	r1, r3, #4
   28dea:	6029      	str	r1, [r5, #0]
   28dec:	0605      	lsls	r5, r0, #24
   28dee:	d501      	bpl.n	28df4 <_printf_i+0x14c>
   28df0:	681d      	ldr	r5, [r3, #0]
   28df2:	e002      	b.n	28dfa <_printf_i+0x152>
   28df4:	0641      	lsls	r1, r0, #25
   28df6:	d5fb      	bpl.n	28df0 <_printf_i+0x148>
   28df8:	881d      	ldrh	r5, [r3, #0]
   28dfa:	2f6f      	cmp	r7, #111	; 0x6f
   28dfc:	483f      	ldr	r0, [pc, #252]	; (28efc <_printf_i+0x254>)
   28dfe:	bf14      	ite	ne
   28e00:	230a      	movne	r3, #10
   28e02:	2308      	moveq	r3, #8
   28e04:	2100      	movs	r1, #0
   28e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   28e0a:	6866      	ldr	r6, [r4, #4]
   28e0c:	2e00      	cmp	r6, #0
   28e0e:	60a6      	str	r6, [r4, #8]
   28e10:	dbb9      	blt.n	28d86 <_printf_i+0xde>
   28e12:	6821      	ldr	r1, [r4, #0]
   28e14:	f021 0104 	bic.w	r1, r1, #4
   28e18:	6021      	str	r1, [r4, #0]
   28e1a:	2d00      	cmp	r5, #0
   28e1c:	d1b3      	bne.n	28d86 <_printf_i+0xde>
   28e1e:	2e00      	cmp	r6, #0
   28e20:	d1b1      	bne.n	28d86 <_printf_i+0xde>
   28e22:	4616      	mov	r6, r2
   28e24:	e7bb      	b.n	28d9e <_printf_i+0xf6>
   28e26:	6823      	ldr	r3, [r4, #0]
   28e28:	f043 0320 	orr.w	r3, r3, #32
   28e2c:	6023      	str	r3, [r4, #0]
   28e2e:	2778      	movs	r7, #120	; 0x78
   28e30:	4833      	ldr	r0, [pc, #204]	; (28f00 <_printf_i+0x258>)
   28e32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   28e36:	6829      	ldr	r1, [r5, #0]
   28e38:	6823      	ldr	r3, [r4, #0]
   28e3a:	1d0e      	adds	r6, r1, #4
   28e3c:	602e      	str	r6, [r5, #0]
   28e3e:	061e      	lsls	r6, r3, #24
   28e40:	d503      	bpl.n	28e4a <_printf_i+0x1a2>
   28e42:	680d      	ldr	r5, [r1, #0]
   28e44:	e004      	b.n	28e50 <_printf_i+0x1a8>
   28e46:	482d      	ldr	r0, [pc, #180]	; (28efc <_printf_i+0x254>)
   28e48:	e7f3      	b.n	28e32 <_printf_i+0x18a>
   28e4a:	065d      	lsls	r5, r3, #25
   28e4c:	d5f9      	bpl.n	28e42 <_printf_i+0x19a>
   28e4e:	880d      	ldrh	r5, [r1, #0]
   28e50:	07d9      	lsls	r1, r3, #31
   28e52:	bf44      	itt	mi
   28e54:	f043 0320 	orrmi.w	r3, r3, #32
   28e58:	6023      	strmi	r3, [r4, #0]
   28e5a:	b10d      	cbz	r5, 28e60 <_printf_i+0x1b8>
   28e5c:	2310      	movs	r3, #16
   28e5e:	e7d1      	b.n	28e04 <_printf_i+0x15c>
   28e60:	6823      	ldr	r3, [r4, #0]
   28e62:	f023 0320 	bic.w	r3, r3, #32
   28e66:	6023      	str	r3, [r4, #0]
   28e68:	e7f8      	b.n	28e5c <_printf_i+0x1b4>
   28e6a:	4824      	ldr	r0, [pc, #144]	; (28efc <_printf_i+0x254>)
   28e6c:	230a      	movs	r3, #10
   28e6e:	e7cc      	b.n	28e0a <_printf_i+0x162>
   28e70:	682b      	ldr	r3, [r5, #0]
   28e72:	6826      	ldr	r6, [r4, #0]
   28e74:	1d18      	adds	r0, r3, #4
   28e76:	6961      	ldr	r1, [r4, #20]
   28e78:	6028      	str	r0, [r5, #0]
   28e7a:	0635      	lsls	r5, r6, #24
   28e7c:	681b      	ldr	r3, [r3, #0]
   28e7e:	d501      	bpl.n	28e84 <_printf_i+0x1dc>
   28e80:	6019      	str	r1, [r3, #0]
   28e82:	e002      	b.n	28e8a <_printf_i+0x1e2>
   28e84:	0670      	lsls	r0, r6, #25
   28e86:	d5fb      	bpl.n	28e80 <_printf_i+0x1d8>
   28e88:	8019      	strh	r1, [r3, #0]
   28e8a:	2300      	movs	r3, #0
   28e8c:	4616      	mov	r6, r2
   28e8e:	6123      	str	r3, [r4, #16]
   28e90:	e795      	b.n	28dbe <_printf_i+0x116>
   28e92:	682b      	ldr	r3, [r5, #0]
   28e94:	2100      	movs	r1, #0
   28e96:	1d1a      	adds	r2, r3, #4
   28e98:	602a      	str	r2, [r5, #0]
   28e9a:	681e      	ldr	r6, [r3, #0]
   28e9c:	6862      	ldr	r2, [r4, #4]
   28e9e:	4630      	mov	r0, r6
   28ea0:	f007 fb57 	bl	30552 <memchr>
   28ea4:	b108      	cbz	r0, 28eaa <_printf_i+0x202>
   28ea6:	1b80      	subs	r0, r0, r6
   28ea8:	6060      	str	r0, [r4, #4]
   28eaa:	6863      	ldr	r3, [r4, #4]
   28eac:	6123      	str	r3, [r4, #16]
   28eae:	2300      	movs	r3, #0
   28eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   28eb4:	e783      	b.n	28dbe <_printf_i+0x116>
   28eb6:	6923      	ldr	r3, [r4, #16]
   28eb8:	4632      	mov	r2, r6
   28eba:	4649      	mov	r1, r9
   28ebc:	4640      	mov	r0, r8
   28ebe:	47d0      	blx	sl
   28ec0:	3001      	adds	r0, #1
   28ec2:	d086      	beq.n	28dd2 <_printf_i+0x12a>
   28ec4:	6823      	ldr	r3, [r4, #0]
   28ec6:	079b      	lsls	r3, r3, #30
   28ec8:	d414      	bmi.n	28ef4 <_printf_i+0x24c>
   28eca:	68e0      	ldr	r0, [r4, #12]
   28ecc:	9b03      	ldr	r3, [sp, #12]
   28ece:	4298      	cmp	r0, r3
   28ed0:	bfb8      	it	lt
   28ed2:	4618      	movlt	r0, r3
   28ed4:	e77f      	b.n	28dd6 <_printf_i+0x12e>
   28ed6:	2301      	movs	r3, #1
   28ed8:	4632      	mov	r2, r6
   28eda:	4649      	mov	r1, r9
   28edc:	4640      	mov	r0, r8
   28ede:	47d0      	blx	sl
   28ee0:	3001      	adds	r0, #1
   28ee2:	f43f af76 	beq.w	28dd2 <_printf_i+0x12a>
   28ee6:	3501      	adds	r5, #1
   28ee8:	68e3      	ldr	r3, [r4, #12]
   28eea:	9903      	ldr	r1, [sp, #12]
   28eec:	1a5b      	subs	r3, r3, r1
   28eee:	42ab      	cmp	r3, r5
   28ef0:	dcf1      	bgt.n	28ed6 <_printf_i+0x22e>
   28ef2:	e7ea      	b.n	28eca <_printf_i+0x222>
   28ef4:	2500      	movs	r5, #0
   28ef6:	f104 0619 	add.w	r6, r4, #25
   28efa:	e7f5      	b.n	28ee8 <_printf_i+0x240>
   28efc:	00038ced 	.word	0x00038ced
   28f00:	00038cfe 	.word	0x00038cfe

00028f04 <iprintf>:
   28f04:	b40f      	push	{r0, r1, r2, r3}
   28f06:	4b0a      	ldr	r3, [pc, #40]	; (28f30 <iprintf+0x2c>)
   28f08:	b513      	push	{r0, r1, r4, lr}
   28f0a:	681c      	ldr	r4, [r3, #0]
   28f0c:	b124      	cbz	r4, 28f18 <iprintf+0x14>
   28f0e:	69a3      	ldr	r3, [r4, #24]
   28f10:	b913      	cbnz	r3, 28f18 <iprintf+0x14>
   28f12:	4620      	mov	r0, r4
   28f14:	f000 f8fa 	bl	2910c <__sinit>
   28f18:	ab05      	add	r3, sp, #20
   28f1a:	9a04      	ldr	r2, [sp, #16]
   28f1c:	68a1      	ldr	r1, [r4, #8]
   28f1e:	4620      	mov	r0, r4
   28f20:	9301      	str	r3, [sp, #4]
   28f22:	f000 fcb1 	bl	29888 <_vfiprintf_r>
   28f26:	b002      	add	sp, #8
   28f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28f2c:	b004      	add	sp, #16
   28f2e:	4770      	bx	lr
   28f30:	20008754 	.word	0x20008754

00028f34 <_sbrk_r>:
   28f34:	b538      	push	{r3, r4, r5, lr}
   28f36:	2300      	movs	r3, #0
   28f38:	4d05      	ldr	r5, [pc, #20]	; (28f50 <_sbrk_r+0x1c>)
   28f3a:	4604      	mov	r4, r0
   28f3c:	4608      	mov	r0, r1
   28f3e:	602b      	str	r3, [r5, #0]
   28f40:	f7e8 fd14 	bl	1196c <_sbrk>
   28f44:	1c43      	adds	r3, r0, #1
   28f46:	d102      	bne.n	28f4e <_sbrk_r+0x1a>
   28f48:	682b      	ldr	r3, [r5, #0]
   28f4a:	b103      	cbz	r3, 28f4e <_sbrk_r+0x1a>
   28f4c:	6023      	str	r3, [r4, #0]
   28f4e:	bd38      	pop	{r3, r4, r5, pc}
   28f50:	20021aec 	.word	0x20021aec

00028f54 <_strtoul_l.constprop.0>:
   28f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f58:	4686      	mov	lr, r0
   28f5a:	460d      	mov	r5, r1
   28f5c:	4e35      	ldr	r6, [pc, #212]	; (29034 <_strtoul_l.constprop.0+0xe0>)
   28f5e:	4628      	mov	r0, r5
   28f60:	f815 4b01 	ldrb.w	r4, [r5], #1
   28f64:	5d37      	ldrb	r7, [r6, r4]
   28f66:	f017 0708 	ands.w	r7, r7, #8
   28f6a:	d1f8      	bne.n	28f5e <_strtoul_l.constprop.0+0xa>
   28f6c:	2c2d      	cmp	r4, #45	; 0x2d
   28f6e:	d126      	bne.n	28fbe <_strtoul_l.constprop.0+0x6a>
   28f70:	782c      	ldrb	r4, [r5, #0]
   28f72:	2701      	movs	r7, #1
   28f74:	1c85      	adds	r5, r0, #2
   28f76:	bb3b      	cbnz	r3, 28fc8 <_strtoul_l.constprop.0+0x74>
   28f78:	2c30      	cmp	r4, #48	; 0x30
   28f7a:	d032      	beq.n	28fe2 <_strtoul_l.constprop.0+0x8e>
   28f7c:	230a      	movs	r3, #10
   28f7e:	f04f 38ff 	mov.w	r8, #4294967295
   28f82:	2600      	movs	r6, #0
   28f84:	fbb8 f8f3 	udiv	r8, r8, r3
   28f88:	fb03 f908 	mul.w	r9, r3, r8
   28f8c:	4630      	mov	r0, r6
   28f8e:	ea6f 0909 	mvn.w	r9, r9
   28f92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   28f96:	f1bc 0f09 	cmp.w	ip, #9
   28f9a:	d829      	bhi.n	28ff0 <_strtoul_l.constprop.0+0x9c>
   28f9c:	4664      	mov	r4, ip
   28f9e:	42a3      	cmp	r3, r4
   28fa0:	dd37      	ble.n	29012 <_strtoul_l.constprop.0+0xbe>
   28fa2:	f1b6 3fff 	cmp.w	r6, #4294967295
   28fa6:	d007      	beq.n	28fb8 <_strtoul_l.constprop.0+0x64>
   28fa8:	4580      	cmp	r8, r0
   28faa:	d32f      	bcc.n	2900c <_strtoul_l.constprop.0+0xb8>
   28fac:	d101      	bne.n	28fb2 <_strtoul_l.constprop.0+0x5e>
   28fae:	45a1      	cmp	r9, r4
   28fb0:	db2c      	blt.n	2900c <_strtoul_l.constprop.0+0xb8>
   28fb2:	fb00 4003 	mla	r0, r0, r3, r4
   28fb6:	2601      	movs	r6, #1
   28fb8:	f815 4b01 	ldrb.w	r4, [r5], #1
   28fbc:	e7e9      	b.n	28f92 <_strtoul_l.constprop.0+0x3e>
   28fbe:	2c2b      	cmp	r4, #43	; 0x2b
   28fc0:	bf04      	itt	eq
   28fc2:	782c      	ldrbeq	r4, [r5, #0]
   28fc4:	1c85      	addeq	r5, r0, #2
   28fc6:	e7d6      	b.n	28f76 <_strtoul_l.constprop.0+0x22>
   28fc8:	2b10      	cmp	r3, #16
   28fca:	d1d8      	bne.n	28f7e <_strtoul_l.constprop.0+0x2a>
   28fcc:	2c30      	cmp	r4, #48	; 0x30
   28fce:	d1d6      	bne.n	28f7e <_strtoul_l.constprop.0+0x2a>
   28fd0:	7828      	ldrb	r0, [r5, #0]
   28fd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   28fd6:	2858      	cmp	r0, #88	; 0x58
   28fd8:	d1d1      	bne.n	28f7e <_strtoul_l.constprop.0+0x2a>
   28fda:	786c      	ldrb	r4, [r5, #1]
   28fdc:	2310      	movs	r3, #16
   28fde:	3502      	adds	r5, #2
   28fe0:	e7cd      	b.n	28f7e <_strtoul_l.constprop.0+0x2a>
   28fe2:	782b      	ldrb	r3, [r5, #0]
   28fe4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   28fe8:	2b58      	cmp	r3, #88	; 0x58
   28fea:	d0f6      	beq.n	28fda <_strtoul_l.constprop.0+0x86>
   28fec:	2308      	movs	r3, #8
   28fee:	e7c6      	b.n	28f7e <_strtoul_l.constprop.0+0x2a>
   28ff0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   28ff4:	f1bc 0f19 	cmp.w	ip, #25
   28ff8:	d801      	bhi.n	28ffe <_strtoul_l.constprop.0+0xaa>
   28ffa:	3c37      	subs	r4, #55	; 0x37
   28ffc:	e7cf      	b.n	28f9e <_strtoul_l.constprop.0+0x4a>
   28ffe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   29002:	f1bc 0f19 	cmp.w	ip, #25
   29006:	d804      	bhi.n	29012 <_strtoul_l.constprop.0+0xbe>
   29008:	3c57      	subs	r4, #87	; 0x57
   2900a:	e7c8      	b.n	28f9e <_strtoul_l.constprop.0+0x4a>
   2900c:	f04f 36ff 	mov.w	r6, #4294967295
   29010:	e7d2      	b.n	28fb8 <_strtoul_l.constprop.0+0x64>
   29012:	1c73      	adds	r3, r6, #1
   29014:	d106      	bne.n	29024 <_strtoul_l.constprop.0+0xd0>
   29016:	2322      	movs	r3, #34	; 0x22
   29018:	4630      	mov	r0, r6
   2901a:	f8ce 3000 	str.w	r3, [lr]
   2901e:	b932      	cbnz	r2, 2902e <_strtoul_l.constprop.0+0xda>
   29020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29024:	b107      	cbz	r7, 29028 <_strtoul_l.constprop.0+0xd4>
   29026:	4240      	negs	r0, r0
   29028:	2a00      	cmp	r2, #0
   2902a:	d0f9      	beq.n	29020 <_strtoul_l.constprop.0+0xcc>
   2902c:	b106      	cbz	r6, 29030 <_strtoul_l.constprop.0+0xdc>
   2902e:	1e69      	subs	r1, r5, #1
   29030:	6011      	str	r1, [r2, #0]
   29032:	e7f5      	b.n	29020 <_strtoul_l.constprop.0+0xcc>
   29034:	00038be1 	.word	0x00038be1

00029038 <strtoul>:
   29038:	4613      	mov	r3, r2
   2903a:	460a      	mov	r2, r1
   2903c:	4601      	mov	r1, r0
   2903e:	4802      	ldr	r0, [pc, #8]	; (29048 <strtoul+0x10>)
   29040:	6800      	ldr	r0, [r0, #0]
   29042:	f7ff bf87 	b.w	28f54 <_strtoul_l.constprop.0>
   29046:	bf00      	nop
   29048:	20008754 	.word	0x20008754

0002904c <__assert_func>:
   2904c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2904e:	4614      	mov	r4, r2
   29050:	461a      	mov	r2, r3
   29052:	4b09      	ldr	r3, [pc, #36]	; (29078 <__assert_func+0x2c>)
   29054:	4605      	mov	r5, r0
   29056:	681b      	ldr	r3, [r3, #0]
   29058:	68d8      	ldr	r0, [r3, #12]
   2905a:	b954      	cbnz	r4, 29072 <__assert_func+0x26>
   2905c:	4b07      	ldr	r3, [pc, #28]	; (2907c <__assert_func+0x30>)
   2905e:	461c      	mov	r4, r3
   29060:	9100      	str	r1, [sp, #0]
   29062:	4907      	ldr	r1, [pc, #28]	; (29080 <__assert_func+0x34>)
   29064:	e9cd 3401 	strd	r3, r4, [sp, #4]
   29068:	462b      	mov	r3, r5
   2906a:	f000 f8cd 	bl	29208 <fiprintf>
   2906e:	f007 fded 	bl	30c4c <abort>
   29072:	4b04      	ldr	r3, [pc, #16]	; (29084 <__assert_func+0x38>)
   29074:	e7f4      	b.n	29060 <__assert_func+0x14>
   29076:	bf00      	nop
   29078:	20008754 	.word	0x20008754
   2907c:	00036918 	.word	0x00036918
   29080:	00038d1c 	.word	0x00038d1c
   29084:	00038d0f 	.word	0x00038d0f

00029088 <std>:
   29088:	2300      	movs	r3, #0
   2908a:	b510      	push	{r4, lr}
   2908c:	4604      	mov	r4, r0
   2908e:	6083      	str	r3, [r0, #8]
   29090:	8181      	strh	r1, [r0, #12]
   29092:	4619      	mov	r1, r3
   29094:	6643      	str	r3, [r0, #100]	; 0x64
   29096:	81c2      	strh	r2, [r0, #14]
   29098:	2208      	movs	r2, #8
   2909a:	6183      	str	r3, [r0, #24]
   2909c:	e9c0 3300 	strd	r3, r3, [r0]
   290a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   290a4:	305c      	adds	r0, #92	; 0x5c
   290a6:	f007 faac 	bl	30602 <memset>
   290aa:	4b05      	ldr	r3, [pc, #20]	; (290c0 <std+0x38>)
   290ac:	6224      	str	r4, [r4, #32]
   290ae:	6263      	str	r3, [r4, #36]	; 0x24
   290b0:	4b04      	ldr	r3, [pc, #16]	; (290c4 <std+0x3c>)
   290b2:	62a3      	str	r3, [r4, #40]	; 0x28
   290b4:	4b04      	ldr	r3, [pc, #16]	; (290c8 <std+0x40>)
   290b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   290b8:	4b04      	ldr	r3, [pc, #16]	; (290cc <std+0x44>)
   290ba:	6323      	str	r3, [r4, #48]	; 0x30
   290bc:	bd10      	pop	{r4, pc}
   290be:	bf00      	nop
   290c0:	00030bc7 	.word	0x00030bc7
   290c4:	00030be9 	.word	0x00030be9
   290c8:	00030c21 	.word	0x00030c21
   290cc:	00030c45 	.word	0x00030c45

000290d0 <_cleanup_r>:
   290d0:	4901      	ldr	r1, [pc, #4]	; (290d8 <_cleanup_r+0x8>)
   290d2:	f007 bcc8 	b.w	30a66 <_fwalk_reent>
   290d6:	bf00      	nop
   290d8:	00029ca1 	.word	0x00029ca1

000290dc <__sfp_lock_acquire>:
   290dc:	4801      	ldr	r0, [pc, #4]	; (290e4 <__sfp_lock_acquire+0x8>)
   290de:	f7e8 bc89 	b.w	119f4 <__retarget_lock_acquire_recursive>
   290e2:	bf00      	nop
   290e4:	20008b40 	.word	0x20008b40

000290e8 <__sfp_lock_release>:
   290e8:	4801      	ldr	r0, [pc, #4]	; (290f0 <__sfp_lock_release+0x8>)
   290ea:	f7e8 bc9f 	b.w	11a2c <__retarget_lock_release_recursive>
   290ee:	bf00      	nop
   290f0:	20008b40 	.word	0x20008b40

000290f4 <__sinit_lock_acquire>:
   290f4:	4801      	ldr	r0, [pc, #4]	; (290fc <__sinit_lock_acquire+0x8>)
   290f6:	f7e8 bc7d 	b.w	119f4 <__retarget_lock_acquire_recursive>
   290fa:	bf00      	nop
   290fc:	20008b54 	.word	0x20008b54

00029100 <__sinit_lock_release>:
   29100:	4801      	ldr	r0, [pc, #4]	; (29108 <__sinit_lock_release+0x8>)
   29102:	f7e8 bc93 	b.w	11a2c <__retarget_lock_release_recursive>
   29106:	bf00      	nop
   29108:	20008b54 	.word	0x20008b54

0002910c <__sinit>:
   2910c:	b510      	push	{r4, lr}
   2910e:	4604      	mov	r4, r0
   29110:	f7ff fff0 	bl	290f4 <__sinit_lock_acquire>
   29114:	69a3      	ldr	r3, [r4, #24]
   29116:	b11b      	cbz	r3, 29120 <__sinit+0x14>
   29118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2911c:	f7ff bff0 	b.w	29100 <__sinit_lock_release>
   29120:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   29124:	6523      	str	r3, [r4, #80]	; 0x50
   29126:	4620      	mov	r0, r4
   29128:	4b12      	ldr	r3, [pc, #72]	; (29174 <__sinit+0x68>)
   2912a:	4a13      	ldr	r2, [pc, #76]	; (29178 <__sinit+0x6c>)
   2912c:	681b      	ldr	r3, [r3, #0]
   2912e:	62a2      	str	r2, [r4, #40]	; 0x28
   29130:	42a3      	cmp	r3, r4
   29132:	bf04      	itt	eq
   29134:	2301      	moveq	r3, #1
   29136:	61a3      	streq	r3, [r4, #24]
   29138:	f000 f820 	bl	2917c <__sfp>
   2913c:	6060      	str	r0, [r4, #4]
   2913e:	4620      	mov	r0, r4
   29140:	f000 f81c 	bl	2917c <__sfp>
   29144:	60a0      	str	r0, [r4, #8]
   29146:	4620      	mov	r0, r4
   29148:	f000 f818 	bl	2917c <__sfp>
   2914c:	2200      	movs	r2, #0
   2914e:	2104      	movs	r1, #4
   29150:	60e0      	str	r0, [r4, #12]
   29152:	6860      	ldr	r0, [r4, #4]
   29154:	f7ff ff98 	bl	29088 <std>
   29158:	2201      	movs	r2, #1
   2915a:	2109      	movs	r1, #9
   2915c:	68a0      	ldr	r0, [r4, #8]
   2915e:	f7ff ff93 	bl	29088 <std>
   29162:	2202      	movs	r2, #2
   29164:	2112      	movs	r1, #18
   29166:	68e0      	ldr	r0, [r4, #12]
   29168:	f7ff ff8e 	bl	29088 <std>
   2916c:	2301      	movs	r3, #1
   2916e:	61a3      	str	r3, [r4, #24]
   29170:	e7d2      	b.n	29118 <__sinit+0xc>
   29172:	bf00      	nop
   29174:	00032584 	.word	0x00032584
   29178:	000290d1 	.word	0x000290d1

0002917c <__sfp>:
   2917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2917e:	4607      	mov	r7, r0
   29180:	f7ff ffac 	bl	290dc <__sfp_lock_acquire>
   29184:	4b1e      	ldr	r3, [pc, #120]	; (29200 <__sfp+0x84>)
   29186:	681e      	ldr	r6, [r3, #0]
   29188:	69b3      	ldr	r3, [r6, #24]
   2918a:	b913      	cbnz	r3, 29192 <__sfp+0x16>
   2918c:	4630      	mov	r0, r6
   2918e:	f7ff ffbd 	bl	2910c <__sinit>
   29192:	3648      	adds	r6, #72	; 0x48
   29194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   29198:	3b01      	subs	r3, #1
   2919a:	d503      	bpl.n	291a4 <__sfp+0x28>
   2919c:	6833      	ldr	r3, [r6, #0]
   2919e:	b30b      	cbz	r3, 291e4 <__sfp+0x68>
   291a0:	6836      	ldr	r6, [r6, #0]
   291a2:	e7f7      	b.n	29194 <__sfp+0x18>
   291a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   291a8:	b9d5      	cbnz	r5, 291e0 <__sfp+0x64>
   291aa:	4b16      	ldr	r3, [pc, #88]	; (29204 <__sfp+0x88>)
   291ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
   291b0:	6665      	str	r5, [r4, #100]	; 0x64
   291b2:	60e3      	str	r3, [r4, #12]
   291b4:	f7e8 fbee 	bl	11994 <__retarget_lock_init_recursive>
   291b8:	f7ff ff96 	bl	290e8 <__sfp_lock_release>
   291bc:	2208      	movs	r2, #8
   291be:	4629      	mov	r1, r5
   291c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   291c4:	6025      	str	r5, [r4, #0]
   291c6:	61a5      	str	r5, [r4, #24]
   291c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   291cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   291d0:	f007 fa17 	bl	30602 <memset>
   291d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   291d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   291dc:	4620      	mov	r0, r4
   291de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291e0:	3468      	adds	r4, #104	; 0x68
   291e2:	e7d9      	b.n	29198 <__sfp+0x1c>
   291e4:	2104      	movs	r1, #4
   291e6:	4638      	mov	r0, r7
   291e8:	f007 fc27 	bl	30a3a <__sfmoreglue>
   291ec:	4604      	mov	r4, r0
   291ee:	6030      	str	r0, [r6, #0]
   291f0:	2800      	cmp	r0, #0
   291f2:	d1d5      	bne.n	291a0 <__sfp+0x24>
   291f4:	f7ff ff78 	bl	290e8 <__sfp_lock_release>
   291f8:	230c      	movs	r3, #12
   291fa:	603b      	str	r3, [r7, #0]
   291fc:	e7ee      	b.n	291dc <__sfp+0x60>
   291fe:	bf00      	nop
   29200:	00032584 	.word	0x00032584
   29204:	ffff0001 	.word	0xffff0001

00029208 <fiprintf>:
   29208:	b40e      	push	{r1, r2, r3}
   2920a:	b503      	push	{r0, r1, lr}
   2920c:	ab03      	add	r3, sp, #12
   2920e:	4601      	mov	r1, r0
   29210:	4805      	ldr	r0, [pc, #20]	; (29228 <fiprintf+0x20>)
   29212:	f853 2b04 	ldr.w	r2, [r3], #4
   29216:	6800      	ldr	r0, [r0, #0]
   29218:	9301      	str	r3, [sp, #4]
   2921a:	f000 fb35 	bl	29888 <_vfiprintf_r>
   2921e:	b002      	add	sp, #8
   29220:	f85d eb04 	ldr.w	lr, [sp], #4
   29224:	b003      	add	sp, #12
   29226:	4770      	bx	lr
   29228:	20008754 	.word	0x20008754

0002922c <_localeconv_r>:
   2922c:	4800      	ldr	r0, [pc, #0]	; (29230 <_localeconv_r+0x4>)
   2922e:	4770      	bx	lr
   29230:	200088a8 	.word	0x200088a8

00029234 <__malloc_lock>:
   29234:	4801      	ldr	r0, [pc, #4]	; (2923c <__malloc_lock+0x8>)
   29236:	f7e8 bbdd 	b.w	119f4 <__retarget_lock_acquire_recursive>
   2923a:	bf00      	nop
   2923c:	20008b2c 	.word	0x20008b2c

00029240 <__malloc_unlock>:
   29240:	4801      	ldr	r0, [pc, #4]	; (29248 <__malloc_unlock+0x8>)
   29242:	f7e8 bbf3 	b.w	11a2c <__retarget_lock_release_recursive>
   29246:	bf00      	nop
   29248:	20008b2c 	.word	0x20008b2c

0002924c <_Balloc>:
   2924c:	b570      	push	{r4, r5, r6, lr}
   2924e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   29250:	4604      	mov	r4, r0
   29252:	460d      	mov	r5, r1
   29254:	b976      	cbnz	r6, 29274 <_Balloc+0x28>
   29256:	2010      	movs	r0, #16
   29258:	f7ff fa3c 	bl	286d4 <malloc>
   2925c:	4602      	mov	r2, r0
   2925e:	6260      	str	r0, [r4, #36]	; 0x24
   29260:	b920      	cbnz	r0, 2926c <_Balloc+0x20>
   29262:	4b18      	ldr	r3, [pc, #96]	; (292c4 <_Balloc+0x78>)
   29264:	2166      	movs	r1, #102	; 0x66
   29266:	4818      	ldr	r0, [pc, #96]	; (292c8 <_Balloc+0x7c>)
   29268:	f7ff fef0 	bl	2904c <__assert_func>
   2926c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   29270:	6006      	str	r6, [r0, #0]
   29272:	60c6      	str	r6, [r0, #12]
   29274:	6a66      	ldr	r6, [r4, #36]	; 0x24
   29276:	68f3      	ldr	r3, [r6, #12]
   29278:	b183      	cbz	r3, 2929c <_Balloc+0x50>
   2927a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2927c:	68db      	ldr	r3, [r3, #12]
   2927e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   29282:	b9b8      	cbnz	r0, 292b4 <_Balloc+0x68>
   29284:	2101      	movs	r1, #1
   29286:	4620      	mov	r0, r4
   29288:	fa01 f605 	lsl.w	r6, r1, r5
   2928c:	1d72      	adds	r2, r6, #5
   2928e:	0092      	lsls	r2, r2, #2
   29290:	f007 f9bf 	bl	30612 <_calloc_r>
   29294:	b160      	cbz	r0, 292b0 <_Balloc+0x64>
   29296:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2929a:	e00e      	b.n	292ba <_Balloc+0x6e>
   2929c:	2221      	movs	r2, #33	; 0x21
   2929e:	2104      	movs	r1, #4
   292a0:	4620      	mov	r0, r4
   292a2:	f007 f9b6 	bl	30612 <_calloc_r>
   292a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   292a8:	60f0      	str	r0, [r6, #12]
   292aa:	68db      	ldr	r3, [r3, #12]
   292ac:	2b00      	cmp	r3, #0
   292ae:	d1e4      	bne.n	2927a <_Balloc+0x2e>
   292b0:	2000      	movs	r0, #0
   292b2:	bd70      	pop	{r4, r5, r6, pc}
   292b4:	6802      	ldr	r2, [r0, #0]
   292b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   292ba:	2300      	movs	r3, #0
   292bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   292c0:	e7f7      	b.n	292b2 <_Balloc+0x66>
   292c2:	bf00      	nop
   292c4:	00038d58 	.word	0x00038d58
   292c8:	00038df4 	.word	0x00038df4

000292cc <_Bfree>:
   292cc:	b570      	push	{r4, r5, r6, lr}
   292ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   292d0:	4605      	mov	r5, r0
   292d2:	460c      	mov	r4, r1
   292d4:	b976      	cbnz	r6, 292f4 <_Bfree+0x28>
   292d6:	2010      	movs	r0, #16
   292d8:	f7ff f9fc 	bl	286d4 <malloc>
   292dc:	4602      	mov	r2, r0
   292de:	6268      	str	r0, [r5, #36]	; 0x24
   292e0:	b920      	cbnz	r0, 292ec <_Bfree+0x20>
   292e2:	4b09      	ldr	r3, [pc, #36]	; (29308 <_Bfree+0x3c>)
   292e4:	218a      	movs	r1, #138	; 0x8a
   292e6:	4809      	ldr	r0, [pc, #36]	; (2930c <_Bfree+0x40>)
   292e8:	f7ff feb0 	bl	2904c <__assert_func>
   292ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   292f0:	6006      	str	r6, [r0, #0]
   292f2:	60c6      	str	r6, [r0, #12]
   292f4:	b13c      	cbz	r4, 29306 <_Bfree+0x3a>
   292f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   292f8:	6862      	ldr	r2, [r4, #4]
   292fa:	68db      	ldr	r3, [r3, #12]
   292fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   29300:	6021      	str	r1, [r4, #0]
   29302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   29306:	bd70      	pop	{r4, r5, r6, pc}
   29308:	00038d58 	.word	0x00038d58
   2930c:	00038df4 	.word	0x00038df4

00029310 <__multadd>:
   29310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29314:	f101 0c14 	add.w	ip, r1, #20
   29318:	4607      	mov	r7, r0
   2931a:	460c      	mov	r4, r1
   2931c:	461e      	mov	r6, r3
   2931e:	690d      	ldr	r5, [r1, #16]
   29320:	2000      	movs	r0, #0
   29322:	f8dc 3000 	ldr.w	r3, [ip]
   29326:	3001      	adds	r0, #1
   29328:	b299      	uxth	r1, r3
   2932a:	4285      	cmp	r5, r0
   2932c:	fb02 6101 	mla	r1, r2, r1, r6
   29330:	ea4f 4613 	mov.w	r6, r3, lsr #16
   29334:	ea4f 4311 	mov.w	r3, r1, lsr #16
   29338:	b289      	uxth	r1, r1
   2933a:	fb02 3306 	mla	r3, r2, r6, r3
   2933e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   29342:	ea4f 4613 	mov.w	r6, r3, lsr #16
   29346:	f84c 1b04 	str.w	r1, [ip], #4
   2934a:	dcea      	bgt.n	29322 <__multadd+0x12>
   2934c:	b30e      	cbz	r6, 29392 <__multadd+0x82>
   2934e:	68a3      	ldr	r3, [r4, #8]
   29350:	42ab      	cmp	r3, r5
   29352:	dc19      	bgt.n	29388 <__multadd+0x78>
   29354:	6861      	ldr	r1, [r4, #4]
   29356:	4638      	mov	r0, r7
   29358:	3101      	adds	r1, #1
   2935a:	f7ff ff77 	bl	2924c <_Balloc>
   2935e:	4680      	mov	r8, r0
   29360:	b928      	cbnz	r0, 2936e <__multadd+0x5e>
   29362:	4602      	mov	r2, r0
   29364:	4b0c      	ldr	r3, [pc, #48]	; (29398 <__multadd+0x88>)
   29366:	21b5      	movs	r1, #181	; 0xb5
   29368:	480c      	ldr	r0, [pc, #48]	; (2939c <__multadd+0x8c>)
   2936a:	f7ff fe6f 	bl	2904c <__assert_func>
   2936e:	6922      	ldr	r2, [r4, #16]
   29370:	f104 010c 	add.w	r1, r4, #12
   29374:	300c      	adds	r0, #12
   29376:	3202      	adds	r2, #2
   29378:	0092      	lsls	r2, r2, #2
   2937a:	f007 f908 	bl	3058e <memcpy>
   2937e:	4621      	mov	r1, r4
   29380:	4644      	mov	r4, r8
   29382:	4638      	mov	r0, r7
   29384:	f7ff ffa2 	bl	292cc <_Bfree>
   29388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2938c:	3501      	adds	r5, #1
   2938e:	615e      	str	r6, [r3, #20]
   29390:	6125      	str	r5, [r4, #16]
   29392:	4620      	mov	r0, r4
   29394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29398:	00038de3 	.word	0x00038de3
   2939c:	00038df4 	.word	0x00038df4

000293a0 <__i2b>:
   293a0:	b510      	push	{r4, lr}
   293a2:	460c      	mov	r4, r1
   293a4:	2101      	movs	r1, #1
   293a6:	f7ff ff51 	bl	2924c <_Balloc>
   293aa:	4602      	mov	r2, r0
   293ac:	b928      	cbnz	r0, 293ba <__i2b+0x1a>
   293ae:	4b05      	ldr	r3, [pc, #20]	; (293c4 <__i2b+0x24>)
   293b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
   293b4:	4804      	ldr	r0, [pc, #16]	; (293c8 <__i2b+0x28>)
   293b6:	f7ff fe49 	bl	2904c <__assert_func>
   293ba:	2301      	movs	r3, #1
   293bc:	6144      	str	r4, [r0, #20]
   293be:	6103      	str	r3, [r0, #16]
   293c0:	bd10      	pop	{r4, pc}
   293c2:	bf00      	nop
   293c4:	00038de3 	.word	0x00038de3
   293c8:	00038df4 	.word	0x00038df4

000293cc <__multiply>:
   293cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293d0:	4614      	mov	r4, r2
   293d2:	690a      	ldr	r2, [r1, #16]
   293d4:	460f      	mov	r7, r1
   293d6:	b085      	sub	sp, #20
   293d8:	6923      	ldr	r3, [r4, #16]
   293da:	429a      	cmp	r2, r3
   293dc:	bfa2      	ittt	ge
   293de:	4623      	movge	r3, r4
   293e0:	460c      	movge	r4, r1
   293e2:	461f      	movge	r7, r3
   293e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
   293e8:	68a3      	ldr	r3, [r4, #8]
   293ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
   293ee:	6861      	ldr	r1, [r4, #4]
   293f0:	eb0a 0609 	add.w	r6, sl, r9
   293f4:	42b3      	cmp	r3, r6
   293f6:	bfb8      	it	lt
   293f8:	3101      	addlt	r1, #1
   293fa:	f7ff ff27 	bl	2924c <_Balloc>
   293fe:	b930      	cbnz	r0, 2940e <__multiply+0x42>
   29400:	4602      	mov	r2, r0
   29402:	4b45      	ldr	r3, [pc, #276]	; (29518 <__multiply+0x14c>)
   29404:	f240 115d 	movw	r1, #349	; 0x15d
   29408:	4844      	ldr	r0, [pc, #272]	; (2951c <__multiply+0x150>)
   2940a:	f7ff fe1f 	bl	2904c <__assert_func>
   2940e:	f100 0514 	add.w	r5, r0, #20
   29412:	2200      	movs	r2, #0
   29414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   29418:	462b      	mov	r3, r5
   2941a:	4543      	cmp	r3, r8
   2941c:	d321      	bcc.n	29462 <__multiply+0x96>
   2941e:	f107 0114 	add.w	r1, r7, #20
   29422:	f104 0214 	add.w	r2, r4, #20
   29426:	f104 0715 	add.w	r7, r4, #21
   2942a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2942e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
   29432:	9302      	str	r3, [sp, #8]
   29434:	1b13      	subs	r3, r2, r4
   29436:	3b15      	subs	r3, #21
   29438:	f023 0303 	bic.w	r3, r3, #3
   2943c:	3304      	adds	r3, #4
   2943e:	42ba      	cmp	r2, r7
   29440:	bf38      	it	cc
   29442:	2304      	movcc	r3, #4
   29444:	9301      	str	r3, [sp, #4]
   29446:	9b02      	ldr	r3, [sp, #8]
   29448:	9103      	str	r1, [sp, #12]
   2944a:	428b      	cmp	r3, r1
   2944c:	d80c      	bhi.n	29468 <__multiply+0x9c>
   2944e:	2e00      	cmp	r6, #0
   29450:	dd03      	ble.n	2945a <__multiply+0x8e>
   29452:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   29456:	2b00      	cmp	r3, #0
   29458:	d05b      	beq.n	29512 <__multiply+0x146>
   2945a:	6106      	str	r6, [r0, #16]
   2945c:	b005      	add	sp, #20
   2945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29462:	f843 2b04 	str.w	r2, [r3], #4
   29466:	e7d8      	b.n	2941a <__multiply+0x4e>
   29468:	f8b1 a000 	ldrh.w	sl, [r1]
   2946c:	f1ba 0f00 	cmp.w	sl, #0
   29470:	d024      	beq.n	294bc <__multiply+0xf0>
   29472:	f104 0e14 	add.w	lr, r4, #20
   29476:	46a9      	mov	r9, r5
   29478:	f04f 0c00 	mov.w	ip, #0
   2947c:	f85e 7b04 	ldr.w	r7, [lr], #4
   29480:	f8d9 3000 	ldr.w	r3, [r9]
   29484:	fa1f fb87 	uxth.w	fp, r7
   29488:	4572      	cmp	r2, lr
   2948a:	b29b      	uxth	r3, r3
   2948c:	ea4f 4717 	mov.w	r7, r7, lsr #16
   29490:	fb0a 330b 	mla	r3, sl, fp, r3
   29494:	4463      	add	r3, ip
   29496:	f8d9 c000 	ldr.w	ip, [r9]
   2949a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2949e:	fb0a c707 	mla	r7, sl, r7, ip
   294a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   294a6:	b29b      	uxth	r3, r3
   294a8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   294ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   294b0:	f849 3b04 	str.w	r3, [r9], #4
   294b4:	d8e2      	bhi.n	2947c <__multiply+0xb0>
   294b6:	9b01      	ldr	r3, [sp, #4]
   294b8:	f845 c003 	str.w	ip, [r5, r3]
   294bc:	9b03      	ldr	r3, [sp, #12]
   294be:	3104      	adds	r1, #4
   294c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   294c4:	f1b9 0f00 	cmp.w	r9, #0
   294c8:	d021      	beq.n	2950e <__multiply+0x142>
   294ca:	682b      	ldr	r3, [r5, #0]
   294cc:	f104 0c14 	add.w	ip, r4, #20
   294d0:	46ae      	mov	lr, r5
   294d2:	f04f 0a00 	mov.w	sl, #0
   294d6:	f8bc b000 	ldrh.w	fp, [ip]
   294da:	b29b      	uxth	r3, r3
   294dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
   294e0:	fb09 770b 	mla	r7, r9, fp, r7
   294e4:	4457      	add	r7, sl
   294e6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   294ea:	f84e 3b04 	str.w	r3, [lr], #4
   294ee:	f85c 3b04 	ldr.w	r3, [ip], #4
   294f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   294f6:	f8be 3000 	ldrh.w	r3, [lr]
   294fa:	4562      	cmp	r2, ip
   294fc:	fb09 330a 	mla	r3, r9, sl, r3
   29500:	eb03 4317 	add.w	r3, r3, r7, lsr #16
   29504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   29508:	d8e5      	bhi.n	294d6 <__multiply+0x10a>
   2950a:	9f01      	ldr	r7, [sp, #4]
   2950c:	51eb      	str	r3, [r5, r7]
   2950e:	3504      	adds	r5, #4
   29510:	e799      	b.n	29446 <__multiply+0x7a>
   29512:	3e01      	subs	r6, #1
   29514:	e79b      	b.n	2944e <__multiply+0x82>
   29516:	bf00      	nop
   29518:	00038de3 	.word	0x00038de3
   2951c:	00038df4 	.word	0x00038df4

00029520 <__pow5mult>:
   29520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29524:	4615      	mov	r5, r2
   29526:	f012 0203 	ands.w	r2, r2, #3
   2952a:	4607      	mov	r7, r0
   2952c:	460e      	mov	r6, r1
   2952e:	d007      	beq.n	29540 <__pow5mult+0x20>
   29530:	3a01      	subs	r2, #1
   29532:	4c25      	ldr	r4, [pc, #148]	; (295c8 <__pow5mult+0xa8>)
   29534:	2300      	movs	r3, #0
   29536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2953a:	f7ff fee9 	bl	29310 <__multadd>
   2953e:	4606      	mov	r6, r0
   29540:	10ad      	asrs	r5, r5, #2
   29542:	d03d      	beq.n	295c0 <__pow5mult+0xa0>
   29544:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   29546:	b97c      	cbnz	r4, 29568 <__pow5mult+0x48>
   29548:	2010      	movs	r0, #16
   2954a:	f7ff f8c3 	bl	286d4 <malloc>
   2954e:	4602      	mov	r2, r0
   29550:	6278      	str	r0, [r7, #36]	; 0x24
   29552:	b928      	cbnz	r0, 29560 <__pow5mult+0x40>
   29554:	4b1d      	ldr	r3, [pc, #116]	; (295cc <__pow5mult+0xac>)
   29556:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2955a:	481d      	ldr	r0, [pc, #116]	; (295d0 <__pow5mult+0xb0>)
   2955c:	f7ff fd76 	bl	2904c <__assert_func>
   29560:	e9c0 4401 	strd	r4, r4, [r0, #4]
   29564:	6004      	str	r4, [r0, #0]
   29566:	60c4      	str	r4, [r0, #12]
   29568:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
   2956c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   29570:	b94c      	cbnz	r4, 29586 <__pow5mult+0x66>
   29572:	f240 2171 	movw	r1, #625	; 0x271
   29576:	4638      	mov	r0, r7
   29578:	f7ff ff12 	bl	293a0 <__i2b>
   2957c:	2300      	movs	r3, #0
   2957e:	4604      	mov	r4, r0
   29580:	f8c8 0008 	str.w	r0, [r8, #8]
   29584:	6003      	str	r3, [r0, #0]
   29586:	f04f 0900 	mov.w	r9, #0
   2958a:	07eb      	lsls	r3, r5, #31
   2958c:	d50a      	bpl.n	295a4 <__pow5mult+0x84>
   2958e:	4631      	mov	r1, r6
   29590:	4622      	mov	r2, r4
   29592:	4638      	mov	r0, r7
   29594:	f7ff ff1a 	bl	293cc <__multiply>
   29598:	4680      	mov	r8, r0
   2959a:	4631      	mov	r1, r6
   2959c:	4638      	mov	r0, r7
   2959e:	4646      	mov	r6, r8
   295a0:	f7ff fe94 	bl	292cc <_Bfree>
   295a4:	106d      	asrs	r5, r5, #1
   295a6:	d00b      	beq.n	295c0 <__pow5mult+0xa0>
   295a8:	6820      	ldr	r0, [r4, #0]
   295aa:	b938      	cbnz	r0, 295bc <__pow5mult+0x9c>
   295ac:	4622      	mov	r2, r4
   295ae:	4621      	mov	r1, r4
   295b0:	4638      	mov	r0, r7
   295b2:	f7ff ff0b 	bl	293cc <__multiply>
   295b6:	6020      	str	r0, [r4, #0]
   295b8:	f8c0 9000 	str.w	r9, [r0]
   295bc:	4604      	mov	r4, r0
   295be:	e7e4      	b.n	2958a <__pow5mult+0x6a>
   295c0:	4630      	mov	r0, r6
   295c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   295c6:	bf00      	nop
   295c8:	000325e8 	.word	0x000325e8
   295cc:	00038d58 	.word	0x00038d58
   295d0:	00038df4 	.word	0x00038df4

000295d4 <__lshift>:
   295d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   295d8:	460c      	mov	r4, r1
   295da:	4607      	mov	r7, r0
   295dc:	4691      	mov	r9, r2
   295de:	ea4f 1a62 	mov.w	sl, r2, asr #5
   295e2:	6923      	ldr	r3, [r4, #16]
   295e4:	6849      	ldr	r1, [r1, #4]
   295e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   295ea:	68a3      	ldr	r3, [r4, #8]
   295ec:	f108 0601 	add.w	r6, r8, #1
   295f0:	42b3      	cmp	r3, r6
   295f2:	db0b      	blt.n	2960c <__lshift+0x38>
   295f4:	4638      	mov	r0, r7
   295f6:	f7ff fe29 	bl	2924c <_Balloc>
   295fa:	4605      	mov	r5, r0
   295fc:	b948      	cbnz	r0, 29612 <__lshift+0x3e>
   295fe:	4602      	mov	r2, r0
   29600:	4b28      	ldr	r3, [pc, #160]	; (296a4 <__lshift+0xd0>)
   29602:	f240 11d9 	movw	r1, #473	; 0x1d9
   29606:	4828      	ldr	r0, [pc, #160]	; (296a8 <__lshift+0xd4>)
   29608:	f7ff fd20 	bl	2904c <__assert_func>
   2960c:	3101      	adds	r1, #1
   2960e:	005b      	lsls	r3, r3, #1
   29610:	e7ee      	b.n	295f0 <__lshift+0x1c>
   29612:	2300      	movs	r3, #0
   29614:	f100 0114 	add.w	r1, r0, #20
   29618:	f100 0210 	add.w	r2, r0, #16
   2961c:	4618      	mov	r0, r3
   2961e:	4553      	cmp	r3, sl
   29620:	db33      	blt.n	2968a <__lshift+0xb6>
   29622:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   29626:	f104 0314 	add.w	r3, r4, #20
   2962a:	6920      	ldr	r0, [r4, #16]
   2962c:	f019 091f 	ands.w	r9, r9, #31
   29630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   29634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   29638:	d02b      	beq.n	29692 <__lshift+0xbe>
   2963a:	f1c9 0e20 	rsb	lr, r9, #32
   2963e:	468a      	mov	sl, r1
   29640:	2200      	movs	r2, #0
   29642:	6818      	ldr	r0, [r3, #0]
   29644:	fa00 f009 	lsl.w	r0, r0, r9
   29648:	4310      	orrs	r0, r2
   2964a:	f84a 0b04 	str.w	r0, [sl], #4
   2964e:	f853 2b04 	ldr.w	r2, [r3], #4
   29652:	459c      	cmp	ip, r3
   29654:	fa22 f20e 	lsr.w	r2, r2, lr
   29658:	d8f3      	bhi.n	29642 <__lshift+0x6e>
   2965a:	ebac 0304 	sub.w	r3, ip, r4
   2965e:	f104 0015 	add.w	r0, r4, #21
   29662:	3b15      	subs	r3, #21
   29664:	f023 0303 	bic.w	r3, r3, #3
   29668:	3304      	adds	r3, #4
   2966a:	4584      	cmp	ip, r0
   2966c:	bf38      	it	cc
   2966e:	2304      	movcc	r3, #4
   29670:	50ca      	str	r2, [r1, r3]
   29672:	b10a      	cbz	r2, 29678 <__lshift+0xa4>
   29674:	f108 0602 	add.w	r6, r8, #2
   29678:	3e01      	subs	r6, #1
   2967a:	4638      	mov	r0, r7
   2967c:	4621      	mov	r1, r4
   2967e:	612e      	str	r6, [r5, #16]
   29680:	f7ff fe24 	bl	292cc <_Bfree>
   29684:	4628      	mov	r0, r5
   29686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2968a:	3301      	adds	r3, #1
   2968c:	f842 0f04 	str.w	r0, [r2, #4]!
   29690:	e7c5      	b.n	2961e <__lshift+0x4a>
   29692:	3904      	subs	r1, #4
   29694:	f853 2b04 	ldr.w	r2, [r3], #4
   29698:	459c      	cmp	ip, r3
   2969a:	f841 2f04 	str.w	r2, [r1, #4]!
   2969e:	d8f9      	bhi.n	29694 <__lshift+0xc0>
   296a0:	e7ea      	b.n	29678 <__lshift+0xa4>
   296a2:	bf00      	nop
   296a4:	00038de3 	.word	0x00038de3
   296a8:	00038df4 	.word	0x00038df4

000296ac <__mdiff>:
   296ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   296b0:	4689      	mov	r9, r1
   296b2:	4606      	mov	r6, r0
   296b4:	4611      	mov	r1, r2
   296b6:	4614      	mov	r4, r2
   296b8:	4648      	mov	r0, r9
   296ba:	f007 fa42 	bl	30b42 <__mcmp>
   296be:	1e05      	subs	r5, r0, #0
   296c0:	d112      	bne.n	296e8 <__mdiff+0x3c>
   296c2:	4629      	mov	r1, r5
   296c4:	4630      	mov	r0, r6
   296c6:	f7ff fdc1 	bl	2924c <_Balloc>
   296ca:	4602      	mov	r2, r0
   296cc:	b928      	cbnz	r0, 296da <__mdiff+0x2e>
   296ce:	4b40      	ldr	r3, [pc, #256]	; (297d0 <__mdiff+0x124>)
   296d0:	f240 2132 	movw	r1, #562	; 0x232
   296d4:	483f      	ldr	r0, [pc, #252]	; (297d4 <__mdiff+0x128>)
   296d6:	f7ff fcb9 	bl	2904c <__assert_func>
   296da:	2301      	movs	r3, #1
   296dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   296e0:	4610      	mov	r0, r2
   296e2:	b003      	add	sp, #12
   296e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296e8:	bfbc      	itt	lt
   296ea:	464b      	movlt	r3, r9
   296ec:	46a1      	movlt	r9, r4
   296ee:	4630      	mov	r0, r6
   296f0:	bfb8      	it	lt
   296f2:	2501      	movlt	r5, #1
   296f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   296f8:	bfb4      	ite	lt
   296fa:	461c      	movlt	r4, r3
   296fc:	2500      	movge	r5, #0
   296fe:	f7ff fda5 	bl	2924c <_Balloc>
   29702:	4602      	mov	r2, r0
   29704:	b918      	cbnz	r0, 2970e <__mdiff+0x62>
   29706:	4b32      	ldr	r3, [pc, #200]	; (297d0 <__mdiff+0x124>)
   29708:	f44f 7110 	mov.w	r1, #576	; 0x240
   2970c:	e7e2      	b.n	296d4 <__mdiff+0x28>
   2970e:	f8d9 7010 	ldr.w	r7, [r9, #16]
   29712:	f104 0e14 	add.w	lr, r4, #20
   29716:	6926      	ldr	r6, [r4, #16]
   29718:	f100 0b14 	add.w	fp, r0, #20
   2971c:	60c5      	str	r5, [r0, #12]
   2971e:	f109 0514 	add.w	r5, r9, #20
   29722:	f109 0310 	add.w	r3, r9, #16
   29726:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
   2972a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
   2972e:	46d9      	mov	r9, fp
   29730:	f04f 0c00 	mov.w	ip, #0
   29734:	9301      	str	r3, [sp, #4]
   29736:	9b01      	ldr	r3, [sp, #4]
   29738:	f85e 0b04 	ldr.w	r0, [lr], #4
   2973c:	f853 af04 	ldr.w	sl, [r3, #4]!
   29740:	b281      	uxth	r1, r0
   29742:	4576      	cmp	r6, lr
   29744:	9301      	str	r3, [sp, #4]
   29746:	fa1f f38a 	uxth.w	r3, sl
   2974a:	ea4f 4010 	mov.w	r0, r0, lsr #16
   2974e:	eba3 0301 	sub.w	r3, r3, r1
   29752:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
   29756:	4463      	add	r3, ip
   29758:	eb00 4023 	add.w	r0, r0, r3, asr #16
   2975c:	b29b      	uxth	r3, r3
   2975e:	ea4f 4c20 	mov.w	ip, r0, asr #16
   29762:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   29766:	f849 3b04 	str.w	r3, [r9], #4
   2976a:	d8e4      	bhi.n	29736 <__mdiff+0x8a>
   2976c:	1b33      	subs	r3, r6, r4
   2976e:	3415      	adds	r4, #21
   29770:	3b15      	subs	r3, #21
   29772:	f023 0303 	bic.w	r3, r3, #3
   29776:	3304      	adds	r3, #4
   29778:	42a6      	cmp	r6, r4
   2977a:	bf38      	it	cc
   2977c:	2304      	movcc	r3, #4
   2977e:	441d      	add	r5, r3
   29780:	445b      	add	r3, fp
   29782:	462c      	mov	r4, r5
   29784:	461e      	mov	r6, r3
   29786:	4544      	cmp	r4, r8
   29788:	d30e      	bcc.n	297a8 <__mdiff+0xfc>
   2978a:	f108 0103 	add.w	r1, r8, #3
   2978e:	1b49      	subs	r1, r1, r5
   29790:	3d03      	subs	r5, #3
   29792:	f021 0103 	bic.w	r1, r1, #3
   29796:	45a8      	cmp	r8, r5
   29798:	bf38      	it	cc
   2979a:	2100      	movcc	r1, #0
   2979c:	440b      	add	r3, r1
   2979e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   297a2:	b199      	cbz	r1, 297cc <__mdiff+0x120>
   297a4:	6117      	str	r7, [r2, #16]
   297a6:	e79b      	b.n	296e0 <__mdiff+0x34>
   297a8:	f854 1b04 	ldr.w	r1, [r4], #4
   297ac:	46e6      	mov	lr, ip
   297ae:	fa1f fc81 	uxth.w	ip, r1
   297b2:	0c08      	lsrs	r0, r1, #16
   297b4:	4471      	add	r1, lr
   297b6:	44f4      	add	ip, lr
   297b8:	b289      	uxth	r1, r1
   297ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
   297be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   297c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
   297c6:	f846 1b04 	str.w	r1, [r6], #4
   297ca:	e7dc      	b.n	29786 <__mdiff+0xda>
   297cc:	3f01      	subs	r7, #1
   297ce:	e7e6      	b.n	2979e <__mdiff+0xf2>
   297d0:	00038de3 	.word	0x00038de3
   297d4:	00038df4 	.word	0x00038df4

000297d8 <__d2b>:
   297d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   297dc:	2101      	movs	r1, #1
   297de:	4690      	mov	r8, r2
   297e0:	4699      	mov	r9, r3
   297e2:	9e08      	ldr	r6, [sp, #32]
   297e4:	f7ff fd32 	bl	2924c <_Balloc>
   297e8:	4604      	mov	r4, r0
   297ea:	b930      	cbnz	r0, 297fa <__d2b+0x22>
   297ec:	4602      	mov	r2, r0
   297ee:	4b24      	ldr	r3, [pc, #144]	; (29880 <__d2b+0xa8>)
   297f0:	f240 310a 	movw	r1, #778	; 0x30a
   297f4:	4823      	ldr	r0, [pc, #140]	; (29884 <__d2b+0xac>)
   297f6:	f7ff fc29 	bl	2904c <__assert_func>
   297fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
   297fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
   29802:	b10d      	cbz	r5, 29808 <__d2b+0x30>
   29804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   29808:	9301      	str	r3, [sp, #4]
   2980a:	f1b8 0300 	subs.w	r3, r8, #0
   2980e:	d024      	beq.n	2985a <__d2b+0x82>
   29810:	4668      	mov	r0, sp
   29812:	9300      	str	r3, [sp, #0]
   29814:	f007 f968 	bl	30ae8 <__lo0bits>
   29818:	e9dd 1200 	ldrd	r1, r2, [sp]
   2981c:	b1d8      	cbz	r0, 29856 <__d2b+0x7e>
   2981e:	f1c0 0320 	rsb	r3, r0, #32
   29822:	fa02 f303 	lsl.w	r3, r2, r3
   29826:	40c2      	lsrs	r2, r0
   29828:	430b      	orrs	r3, r1
   2982a:	9201      	str	r2, [sp, #4]
   2982c:	6163      	str	r3, [r4, #20]
   2982e:	9b01      	ldr	r3, [sp, #4]
   29830:	2b00      	cmp	r3, #0
   29832:	61a3      	str	r3, [r4, #24]
   29834:	bf0c      	ite	eq
   29836:	2201      	moveq	r2, #1
   29838:	2202      	movne	r2, #2
   2983a:	6122      	str	r2, [r4, #16]
   2983c:	b1ad      	cbz	r5, 2986a <__d2b+0x92>
   2983e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   29842:	4405      	add	r5, r0
   29844:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   29848:	6035      	str	r5, [r6, #0]
   2984a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2984c:	6018      	str	r0, [r3, #0]
   2984e:	4620      	mov	r0, r4
   29850:	b002      	add	sp, #8
   29852:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   29856:	6161      	str	r1, [r4, #20]
   29858:	e7e9      	b.n	2982e <__d2b+0x56>
   2985a:	a801      	add	r0, sp, #4
   2985c:	f007 f944 	bl	30ae8 <__lo0bits>
   29860:	9b01      	ldr	r3, [sp, #4]
   29862:	3020      	adds	r0, #32
   29864:	2201      	movs	r2, #1
   29866:	6163      	str	r3, [r4, #20]
   29868:	e7e7      	b.n	2983a <__d2b+0x62>
   2986a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2986e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   29872:	6030      	str	r0, [r6, #0]
   29874:	6918      	ldr	r0, [r3, #16]
   29876:	f007 f915 	bl	30aa4 <__hi0bits>
   2987a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2987e:	e7e4      	b.n	2984a <__d2b+0x72>
   29880:	00038de3 	.word	0x00038de3
   29884:	00038df4 	.word	0x00038df4

00029888 <_vfiprintf_r>:
   29888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2988c:	460d      	mov	r5, r1
   2988e:	b09d      	sub	sp, #116	; 0x74
   29890:	4614      	mov	r4, r2
   29892:	4698      	mov	r8, r3
   29894:	4606      	mov	r6, r0
   29896:	b118      	cbz	r0, 298a0 <_vfiprintf_r+0x18>
   29898:	6983      	ldr	r3, [r0, #24]
   2989a:	b90b      	cbnz	r3, 298a0 <_vfiprintf_r+0x18>
   2989c:	f7ff fc36 	bl	2910c <__sinit>
   298a0:	4b87      	ldr	r3, [pc, #540]	; (29ac0 <_vfiprintf_r+0x238>)
   298a2:	429d      	cmp	r5, r3
   298a4:	d11b      	bne.n	298de <_vfiprintf_r+0x56>
   298a6:	6875      	ldr	r5, [r6, #4]
   298a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   298aa:	07d9      	lsls	r1, r3, #31
   298ac:	d405      	bmi.n	298ba <_vfiprintf_r+0x32>
   298ae:	89ab      	ldrh	r3, [r5, #12]
   298b0:	059a      	lsls	r2, r3, #22
   298b2:	d402      	bmi.n	298ba <_vfiprintf_r+0x32>
   298b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   298b6:	f7e8 f89d 	bl	119f4 <__retarget_lock_acquire_recursive>
   298ba:	89ab      	ldrh	r3, [r5, #12]
   298bc:	071b      	lsls	r3, r3, #28
   298be:	d501      	bpl.n	298c4 <_vfiprintf_r+0x3c>
   298c0:	692b      	ldr	r3, [r5, #16]
   298c2:	b9eb      	cbnz	r3, 29900 <_vfiprintf_r+0x78>
   298c4:	4629      	mov	r1, r5
   298c6:	4630      	mov	r0, r6
   298c8:	f000 f96e 	bl	29ba8 <__swsetup_r>
   298cc:	b1c0      	cbz	r0, 29900 <_vfiprintf_r+0x78>
   298ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   298d0:	07dc      	lsls	r4, r3, #31
   298d2:	d50e      	bpl.n	298f2 <_vfiprintf_r+0x6a>
   298d4:	f04f 30ff 	mov.w	r0, #4294967295
   298d8:	b01d      	add	sp, #116	; 0x74
   298da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298de:	4b79      	ldr	r3, [pc, #484]	; (29ac4 <_vfiprintf_r+0x23c>)
   298e0:	429d      	cmp	r5, r3
   298e2:	d101      	bne.n	298e8 <_vfiprintf_r+0x60>
   298e4:	68b5      	ldr	r5, [r6, #8]
   298e6:	e7df      	b.n	298a8 <_vfiprintf_r+0x20>
   298e8:	4b77      	ldr	r3, [pc, #476]	; (29ac8 <_vfiprintf_r+0x240>)
   298ea:	429d      	cmp	r5, r3
   298ec:	bf08      	it	eq
   298ee:	68f5      	ldreq	r5, [r6, #12]
   298f0:	e7da      	b.n	298a8 <_vfiprintf_r+0x20>
   298f2:	89ab      	ldrh	r3, [r5, #12]
   298f4:	0598      	lsls	r0, r3, #22
   298f6:	d4ed      	bmi.n	298d4 <_vfiprintf_r+0x4c>
   298f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   298fa:	f7e8 f897 	bl	11a2c <__retarget_lock_release_recursive>
   298fe:	e7e9      	b.n	298d4 <_vfiprintf_r+0x4c>
   29900:	2300      	movs	r3, #0
   29902:	f8cd 800c 	str.w	r8, [sp, #12]
   29906:	f04f 0901 	mov.w	r9, #1
   2990a:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 29acc <_vfiprintf_r+0x244>
   2990e:	9309      	str	r3, [sp, #36]	; 0x24
   29910:	2320      	movs	r3, #32
   29912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   29916:	2330      	movs	r3, #48	; 0x30
   29918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2991c:	4623      	mov	r3, r4
   2991e:	469a      	mov	sl, r3
   29920:	f813 2b01 	ldrb.w	r2, [r3], #1
   29924:	b10a      	cbz	r2, 2992a <_vfiprintf_r+0xa2>
   29926:	2a25      	cmp	r2, #37	; 0x25
   29928:	d1f9      	bne.n	2991e <_vfiprintf_r+0x96>
   2992a:	ebba 0b04 	subs.w	fp, sl, r4
   2992e:	d00b      	beq.n	29948 <_vfiprintf_r+0xc0>
   29930:	465b      	mov	r3, fp
   29932:	4622      	mov	r2, r4
   29934:	4629      	mov	r1, r5
   29936:	4630      	mov	r0, r6
   29938:	f007 f933 	bl	30ba2 <__sfputs_r>
   2993c:	3001      	adds	r0, #1
   2993e:	f000 80a6 	beq.w	29a8e <_vfiprintf_r+0x206>
   29942:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29944:	445a      	add	r2, fp
   29946:	9209      	str	r2, [sp, #36]	; 0x24
   29948:	f89a 3000 	ldrb.w	r3, [sl]
   2994c:	2b00      	cmp	r3, #0
   2994e:	f000 809e 	beq.w	29a8e <_vfiprintf_r+0x206>
   29952:	2300      	movs	r3, #0
   29954:	f04f 32ff 	mov.w	r2, #4294967295
   29958:	f10a 0a01 	add.w	sl, sl, #1
   2995c:	9304      	str	r3, [sp, #16]
   2995e:	9307      	str	r3, [sp, #28]
   29960:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   29964:	931a      	str	r3, [sp, #104]	; 0x68
   29966:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2996a:	4654      	mov	r4, sl
   2996c:	2205      	movs	r2, #5
   2996e:	4857      	ldr	r0, [pc, #348]	; (29acc <_vfiprintf_r+0x244>)
   29970:	f814 1b01 	ldrb.w	r1, [r4], #1
   29974:	f006 fded 	bl	30552 <memchr>
   29978:	9b04      	ldr	r3, [sp, #16]
   2997a:	b9d0      	cbnz	r0, 299b2 <_vfiprintf_r+0x12a>
   2997c:	06d9      	lsls	r1, r3, #27
   2997e:	bf44      	itt	mi
   29980:	2220      	movmi	r2, #32
   29982:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   29986:	071a      	lsls	r2, r3, #28
   29988:	bf44      	itt	mi
   2998a:	222b      	movmi	r2, #43	; 0x2b
   2998c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   29990:	f89a 2000 	ldrb.w	r2, [sl]
   29994:	2a2a      	cmp	r2, #42	; 0x2a
   29996:	d014      	beq.n	299c2 <_vfiprintf_r+0x13a>
   29998:	9a07      	ldr	r2, [sp, #28]
   2999a:	4654      	mov	r4, sl
   2999c:	2000      	movs	r0, #0
   2999e:	f04f 0c0a 	mov.w	ip, #10
   299a2:	4621      	mov	r1, r4
   299a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   299a8:	3b30      	subs	r3, #48	; 0x30
   299aa:	2b09      	cmp	r3, #9
   299ac:	d94a      	bls.n	29a44 <_vfiprintf_r+0x1bc>
   299ae:	b970      	cbnz	r0, 299ce <_vfiprintf_r+0x146>
   299b0:	e014      	b.n	299dc <_vfiprintf_r+0x154>
   299b2:	eba0 0008 	sub.w	r0, r0, r8
   299b6:	46a2      	mov	sl, r4
   299b8:	fa09 f000 	lsl.w	r0, r9, r0
   299bc:	4318      	orrs	r0, r3
   299be:	9004      	str	r0, [sp, #16]
   299c0:	e7d3      	b.n	2996a <_vfiprintf_r+0xe2>
   299c2:	9a03      	ldr	r2, [sp, #12]
   299c4:	1d11      	adds	r1, r2, #4
   299c6:	6812      	ldr	r2, [r2, #0]
   299c8:	2a00      	cmp	r2, #0
   299ca:	9103      	str	r1, [sp, #12]
   299cc:	db01      	blt.n	299d2 <_vfiprintf_r+0x14a>
   299ce:	9207      	str	r2, [sp, #28]
   299d0:	e004      	b.n	299dc <_vfiprintf_r+0x154>
   299d2:	4252      	negs	r2, r2
   299d4:	f043 0302 	orr.w	r3, r3, #2
   299d8:	9207      	str	r2, [sp, #28]
   299da:	9304      	str	r3, [sp, #16]
   299dc:	7823      	ldrb	r3, [r4, #0]
   299de:	2b2e      	cmp	r3, #46	; 0x2e
   299e0:	d10a      	bne.n	299f8 <_vfiprintf_r+0x170>
   299e2:	7863      	ldrb	r3, [r4, #1]
   299e4:	2b2a      	cmp	r3, #42	; 0x2a
   299e6:	d132      	bne.n	29a4e <_vfiprintf_r+0x1c6>
   299e8:	9b03      	ldr	r3, [sp, #12]
   299ea:	3402      	adds	r4, #2
   299ec:	1d1a      	adds	r2, r3, #4
   299ee:	681b      	ldr	r3, [r3, #0]
   299f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
   299f4:	9203      	str	r2, [sp, #12]
   299f6:	9305      	str	r3, [sp, #20]
   299f8:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 29ad0 <_vfiprintf_r+0x248>
   299fc:	2203      	movs	r2, #3
   299fe:	7821      	ldrb	r1, [r4, #0]
   29a00:	4650      	mov	r0, sl
   29a02:	f006 fda6 	bl	30552 <memchr>
   29a06:	b138      	cbz	r0, 29a18 <_vfiprintf_r+0x190>
   29a08:	eba0 000a 	sub.w	r0, r0, sl
   29a0c:	2240      	movs	r2, #64	; 0x40
   29a0e:	9b04      	ldr	r3, [sp, #16]
   29a10:	3401      	adds	r4, #1
   29a12:	4082      	lsls	r2, r0
   29a14:	4313      	orrs	r3, r2
   29a16:	9304      	str	r3, [sp, #16]
   29a18:	f814 1b01 	ldrb.w	r1, [r4], #1
   29a1c:	2206      	movs	r2, #6
   29a1e:	482d      	ldr	r0, [pc, #180]	; (29ad4 <_vfiprintf_r+0x24c>)
   29a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   29a24:	f006 fd95 	bl	30552 <memchr>
   29a28:	2800      	cmp	r0, #0
   29a2a:	d03f      	beq.n	29aac <_vfiprintf_r+0x224>
   29a2c:	4b2a      	ldr	r3, [pc, #168]	; (29ad8 <_vfiprintf_r+0x250>)
   29a2e:	bb1b      	cbnz	r3, 29a78 <_vfiprintf_r+0x1f0>
   29a30:	9b03      	ldr	r3, [sp, #12]
   29a32:	3307      	adds	r3, #7
   29a34:	f023 0307 	bic.w	r3, r3, #7
   29a38:	3308      	adds	r3, #8
   29a3a:	9303      	str	r3, [sp, #12]
   29a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29a3e:	443b      	add	r3, r7
   29a40:	9309      	str	r3, [sp, #36]	; 0x24
   29a42:	e76b      	b.n	2991c <_vfiprintf_r+0x94>
   29a44:	fb0c 3202 	mla	r2, ip, r2, r3
   29a48:	460c      	mov	r4, r1
   29a4a:	2001      	movs	r0, #1
   29a4c:	e7a9      	b.n	299a2 <_vfiprintf_r+0x11a>
   29a4e:	2300      	movs	r3, #0
   29a50:	3401      	adds	r4, #1
   29a52:	f04f 0c0a 	mov.w	ip, #10
   29a56:	4619      	mov	r1, r3
   29a58:	9305      	str	r3, [sp, #20]
   29a5a:	4620      	mov	r0, r4
   29a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
   29a60:	3a30      	subs	r2, #48	; 0x30
   29a62:	2a09      	cmp	r2, #9
   29a64:	d903      	bls.n	29a6e <_vfiprintf_r+0x1e6>
   29a66:	2b00      	cmp	r3, #0
   29a68:	d0c6      	beq.n	299f8 <_vfiprintf_r+0x170>
   29a6a:	9105      	str	r1, [sp, #20]
   29a6c:	e7c4      	b.n	299f8 <_vfiprintf_r+0x170>
   29a6e:	fb0c 2101 	mla	r1, ip, r1, r2
   29a72:	4604      	mov	r4, r0
   29a74:	2301      	movs	r3, #1
   29a76:	e7f0      	b.n	29a5a <_vfiprintf_r+0x1d2>
   29a78:	ab03      	add	r3, sp, #12
   29a7a:	462a      	mov	r2, r5
   29a7c:	a904      	add	r1, sp, #16
   29a7e:	4630      	mov	r0, r6
   29a80:	9300      	str	r3, [sp, #0]
   29a82:	4b16      	ldr	r3, [pc, #88]	; (29adc <_vfiprintf_r+0x254>)
   29a84:	f7fe feda 	bl	2883c <_printf_float>
   29a88:	4607      	mov	r7, r0
   29a8a:	1c78      	adds	r0, r7, #1
   29a8c:	d1d6      	bne.n	29a3c <_vfiprintf_r+0x1b4>
   29a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   29a90:	07d9      	lsls	r1, r3, #31
   29a92:	d405      	bmi.n	29aa0 <_vfiprintf_r+0x218>
   29a94:	89ab      	ldrh	r3, [r5, #12]
   29a96:	059a      	lsls	r2, r3, #22
   29a98:	d402      	bmi.n	29aa0 <_vfiprintf_r+0x218>
   29a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   29a9c:	f7e7 ffc6 	bl	11a2c <__retarget_lock_release_recursive>
   29aa0:	89ab      	ldrh	r3, [r5, #12]
   29aa2:	065b      	lsls	r3, r3, #25
   29aa4:	f53f af16 	bmi.w	298d4 <_vfiprintf_r+0x4c>
   29aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
   29aaa:	e715      	b.n	298d8 <_vfiprintf_r+0x50>
   29aac:	ab03      	add	r3, sp, #12
   29aae:	462a      	mov	r2, r5
   29ab0:	a904      	add	r1, sp, #16
   29ab2:	4630      	mov	r0, r6
   29ab4:	9300      	str	r3, [sp, #0]
   29ab6:	4b09      	ldr	r3, [pc, #36]	; (29adc <_vfiprintf_r+0x254>)
   29ab8:	f7ff f8f6 	bl	28ca8 <_printf_i>
   29abc:	e7e4      	b.n	29a88 <_vfiprintf_r+0x200>
   29abe:	bf00      	nop
   29ac0:	000325c8 	.word	0x000325c8
   29ac4:	000325a8 	.word	0x000325a8
   29ac8:	00032588 	.word	0x00032588
   29acc:	00038e69 	.word	0x00038e69
   29ad0:	00038e6f 	.word	0x00038e6f
   29ad4:	00038e73 	.word	0x00038e73
   29ad8:	0002883d 	.word	0x0002883d
   29adc:	00030ba3 	.word	0x00030ba3

00029ae0 <__swbuf_r>:
   29ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29ae2:	460e      	mov	r6, r1
   29ae4:	4614      	mov	r4, r2
   29ae6:	4605      	mov	r5, r0
   29ae8:	b118      	cbz	r0, 29af2 <__swbuf_r+0x12>
   29aea:	6983      	ldr	r3, [r0, #24]
   29aec:	b90b      	cbnz	r3, 29af2 <__swbuf_r+0x12>
   29aee:	f7ff fb0d 	bl	2910c <__sinit>
   29af2:	4b21      	ldr	r3, [pc, #132]	; (29b78 <__swbuf_r+0x98>)
   29af4:	429c      	cmp	r4, r3
   29af6:	d110      	bne.n	29b1a <__swbuf_r+0x3a>
   29af8:	686c      	ldr	r4, [r5, #4]
   29afa:	69a3      	ldr	r3, [r4, #24]
   29afc:	60a3      	str	r3, [r4, #8]
   29afe:	89a3      	ldrh	r3, [r4, #12]
   29b00:	071a      	lsls	r2, r3, #28
   29b02:	d501      	bpl.n	29b08 <__swbuf_r+0x28>
   29b04:	6923      	ldr	r3, [r4, #16]
   29b06:	b993      	cbnz	r3, 29b2e <__swbuf_r+0x4e>
   29b08:	4621      	mov	r1, r4
   29b0a:	4628      	mov	r0, r5
   29b0c:	f000 f84c 	bl	29ba8 <__swsetup_r>
   29b10:	b168      	cbz	r0, 29b2e <__swbuf_r+0x4e>
   29b12:	f04f 37ff 	mov.w	r7, #4294967295
   29b16:	4638      	mov	r0, r7
   29b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29b1a:	4b18      	ldr	r3, [pc, #96]	; (29b7c <__swbuf_r+0x9c>)
   29b1c:	429c      	cmp	r4, r3
   29b1e:	d101      	bne.n	29b24 <__swbuf_r+0x44>
   29b20:	68ac      	ldr	r4, [r5, #8]
   29b22:	e7ea      	b.n	29afa <__swbuf_r+0x1a>
   29b24:	4b16      	ldr	r3, [pc, #88]	; (29b80 <__swbuf_r+0xa0>)
   29b26:	429c      	cmp	r4, r3
   29b28:	bf08      	it	eq
   29b2a:	68ec      	ldreq	r4, [r5, #12]
   29b2c:	e7e5      	b.n	29afa <__swbuf_r+0x1a>
   29b2e:	6923      	ldr	r3, [r4, #16]
   29b30:	b2f6      	uxtb	r6, r6
   29b32:	6820      	ldr	r0, [r4, #0]
   29b34:	4637      	mov	r7, r6
   29b36:	1ac0      	subs	r0, r0, r3
   29b38:	6963      	ldr	r3, [r4, #20]
   29b3a:	4283      	cmp	r3, r0
   29b3c:	dc05      	bgt.n	29b4a <__swbuf_r+0x6a>
   29b3e:	4621      	mov	r1, r4
   29b40:	4628      	mov	r0, r5
   29b42:	f000 f8ad 	bl	29ca0 <_fflush_r>
   29b46:	2800      	cmp	r0, #0
   29b48:	d1e3      	bne.n	29b12 <__swbuf_r+0x32>
   29b4a:	68a3      	ldr	r3, [r4, #8]
   29b4c:	3001      	adds	r0, #1
   29b4e:	3b01      	subs	r3, #1
   29b50:	60a3      	str	r3, [r4, #8]
   29b52:	6823      	ldr	r3, [r4, #0]
   29b54:	1c5a      	adds	r2, r3, #1
   29b56:	6022      	str	r2, [r4, #0]
   29b58:	701e      	strb	r6, [r3, #0]
   29b5a:	6963      	ldr	r3, [r4, #20]
   29b5c:	4283      	cmp	r3, r0
   29b5e:	d004      	beq.n	29b6a <__swbuf_r+0x8a>
   29b60:	89a3      	ldrh	r3, [r4, #12]
   29b62:	07db      	lsls	r3, r3, #31
   29b64:	d5d7      	bpl.n	29b16 <__swbuf_r+0x36>
   29b66:	2e0a      	cmp	r6, #10
   29b68:	d1d5      	bne.n	29b16 <__swbuf_r+0x36>
   29b6a:	4621      	mov	r1, r4
   29b6c:	4628      	mov	r0, r5
   29b6e:	f000 f897 	bl	29ca0 <_fflush_r>
   29b72:	2800      	cmp	r0, #0
   29b74:	d0cf      	beq.n	29b16 <__swbuf_r+0x36>
   29b76:	e7cc      	b.n	29b12 <__swbuf_r+0x32>
   29b78:	000325c8 	.word	0x000325c8
   29b7c:	000325a8 	.word	0x000325a8
   29b80:	00032588 	.word	0x00032588

00029b84 <_write_r>:
   29b84:	b538      	push	{r3, r4, r5, lr}
   29b86:	4604      	mov	r4, r0
   29b88:	4d06      	ldr	r5, [pc, #24]	; (29ba4 <_write_r+0x20>)
   29b8a:	4608      	mov	r0, r1
   29b8c:	4611      	mov	r1, r2
   29b8e:	2200      	movs	r2, #0
   29b90:	602a      	str	r2, [r5, #0]
   29b92:	461a      	mov	r2, r3
   29b94:	f002 f927 	bl	2bde6 <_write>
   29b98:	1c43      	adds	r3, r0, #1
   29b9a:	d102      	bne.n	29ba2 <_write_r+0x1e>
   29b9c:	682b      	ldr	r3, [r5, #0]
   29b9e:	b103      	cbz	r3, 29ba2 <_write_r+0x1e>
   29ba0:	6023      	str	r3, [r4, #0]
   29ba2:	bd38      	pop	{r3, r4, r5, pc}
   29ba4:	20021aec 	.word	0x20021aec

00029ba8 <__swsetup_r>:
   29ba8:	4b31      	ldr	r3, [pc, #196]	; (29c70 <__swsetup_r+0xc8>)
   29baa:	b570      	push	{r4, r5, r6, lr}
   29bac:	681d      	ldr	r5, [r3, #0]
   29bae:	4606      	mov	r6, r0
   29bb0:	460c      	mov	r4, r1
   29bb2:	b125      	cbz	r5, 29bbe <__swsetup_r+0x16>
   29bb4:	69ab      	ldr	r3, [r5, #24]
   29bb6:	b913      	cbnz	r3, 29bbe <__swsetup_r+0x16>
   29bb8:	4628      	mov	r0, r5
   29bba:	f7ff faa7 	bl	2910c <__sinit>
   29bbe:	4b2d      	ldr	r3, [pc, #180]	; (29c74 <__swsetup_r+0xcc>)
   29bc0:	429c      	cmp	r4, r3
   29bc2:	d10e      	bne.n	29be2 <__swsetup_r+0x3a>
   29bc4:	686c      	ldr	r4, [r5, #4]
   29bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29bca:	071a      	lsls	r2, r3, #28
   29bcc:	d42c      	bmi.n	29c28 <__swsetup_r+0x80>
   29bce:	06dd      	lsls	r5, r3, #27
   29bd0:	d411      	bmi.n	29bf6 <__swsetup_r+0x4e>
   29bd2:	2209      	movs	r2, #9
   29bd4:	6032      	str	r2, [r6, #0]
   29bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29bda:	f04f 30ff 	mov.w	r0, #4294967295
   29bde:	81a3      	strh	r3, [r4, #12]
   29be0:	e03d      	b.n	29c5e <__swsetup_r+0xb6>
   29be2:	4b25      	ldr	r3, [pc, #148]	; (29c78 <__swsetup_r+0xd0>)
   29be4:	429c      	cmp	r4, r3
   29be6:	d101      	bne.n	29bec <__swsetup_r+0x44>
   29be8:	68ac      	ldr	r4, [r5, #8]
   29bea:	e7ec      	b.n	29bc6 <__swsetup_r+0x1e>
   29bec:	4b23      	ldr	r3, [pc, #140]	; (29c7c <__swsetup_r+0xd4>)
   29bee:	429c      	cmp	r4, r3
   29bf0:	bf08      	it	eq
   29bf2:	68ec      	ldreq	r4, [r5, #12]
   29bf4:	e7e7      	b.n	29bc6 <__swsetup_r+0x1e>
   29bf6:	0758      	lsls	r0, r3, #29
   29bf8:	d512      	bpl.n	29c20 <__swsetup_r+0x78>
   29bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29bfc:	b141      	cbz	r1, 29c10 <__swsetup_r+0x68>
   29bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   29c02:	4299      	cmp	r1, r3
   29c04:	d002      	beq.n	29c0c <__swsetup_r+0x64>
   29c06:	4630      	mov	r0, r6
   29c08:	f7fe fd74 	bl	286f4 <_free_r>
   29c0c:	2300      	movs	r3, #0
   29c0e:	6363      	str	r3, [r4, #52]	; 0x34
   29c10:	89a3      	ldrh	r3, [r4, #12]
   29c12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   29c16:	81a3      	strh	r3, [r4, #12]
   29c18:	2300      	movs	r3, #0
   29c1a:	6063      	str	r3, [r4, #4]
   29c1c:	6923      	ldr	r3, [r4, #16]
   29c1e:	6023      	str	r3, [r4, #0]
   29c20:	89a3      	ldrh	r3, [r4, #12]
   29c22:	f043 0308 	orr.w	r3, r3, #8
   29c26:	81a3      	strh	r3, [r4, #12]
   29c28:	6923      	ldr	r3, [r4, #16]
   29c2a:	b94b      	cbnz	r3, 29c40 <__swsetup_r+0x98>
   29c2c:	89a3      	ldrh	r3, [r4, #12]
   29c2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
   29c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   29c36:	d003      	beq.n	29c40 <__swsetup_r+0x98>
   29c38:	4621      	mov	r1, r4
   29c3a:	4630      	mov	r0, r6
   29c3c:	f000 f87e 	bl	29d3c <__smakebuf_r>
   29c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29c44:	f013 0201 	ands.w	r2, r3, #1
   29c48:	d00a      	beq.n	29c60 <__swsetup_r+0xb8>
   29c4a:	2200      	movs	r2, #0
   29c4c:	60a2      	str	r2, [r4, #8]
   29c4e:	6962      	ldr	r2, [r4, #20]
   29c50:	4252      	negs	r2, r2
   29c52:	61a2      	str	r2, [r4, #24]
   29c54:	6922      	ldr	r2, [r4, #16]
   29c56:	b942      	cbnz	r2, 29c6a <__swsetup_r+0xc2>
   29c58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   29c5c:	d1bb      	bne.n	29bd6 <__swsetup_r+0x2e>
   29c5e:	bd70      	pop	{r4, r5, r6, pc}
   29c60:	0799      	lsls	r1, r3, #30
   29c62:	bf58      	it	pl
   29c64:	6962      	ldrpl	r2, [r4, #20]
   29c66:	60a2      	str	r2, [r4, #8]
   29c68:	e7f4      	b.n	29c54 <__swsetup_r+0xac>
   29c6a:	2000      	movs	r0, #0
   29c6c:	e7f7      	b.n	29c5e <__swsetup_r+0xb6>
   29c6e:	bf00      	nop
   29c70:	20008754 	.word	0x20008754
   29c74:	000325c8 	.word	0x000325c8
   29c78:	000325a8 	.word	0x000325a8
   29c7c:	00032588 	.word	0x00032588

00029c80 <_close_r>:
   29c80:	b538      	push	{r3, r4, r5, lr}
   29c82:	2300      	movs	r3, #0
   29c84:	4d05      	ldr	r5, [pc, #20]	; (29c9c <_close_r+0x1c>)
   29c86:	4604      	mov	r4, r0
   29c88:	4608      	mov	r0, r1
   29c8a:	602b      	str	r3, [r5, #0]
   29c8c:	f002 f8af 	bl	2bdee <_close>
   29c90:	1c43      	adds	r3, r0, #1
   29c92:	d102      	bne.n	29c9a <_close_r+0x1a>
   29c94:	682b      	ldr	r3, [r5, #0]
   29c96:	b103      	cbz	r3, 29c9a <_close_r+0x1a>
   29c98:	6023      	str	r3, [r4, #0]
   29c9a:	bd38      	pop	{r3, r4, r5, pc}
   29c9c:	20021aec 	.word	0x20021aec

00029ca0 <_fflush_r>:
   29ca0:	b538      	push	{r3, r4, r5, lr}
   29ca2:	690b      	ldr	r3, [r1, #16]
   29ca4:	4605      	mov	r5, r0
   29ca6:	460c      	mov	r4, r1
   29ca8:	b913      	cbnz	r3, 29cb0 <_fflush_r+0x10>
   29caa:	2500      	movs	r5, #0
   29cac:	4628      	mov	r0, r5
   29cae:	bd38      	pop	{r3, r4, r5, pc}
   29cb0:	b118      	cbz	r0, 29cba <_fflush_r+0x1a>
   29cb2:	6983      	ldr	r3, [r0, #24]
   29cb4:	b90b      	cbnz	r3, 29cba <_fflush_r+0x1a>
   29cb6:	f7ff fa29 	bl	2910c <__sinit>
   29cba:	4b14      	ldr	r3, [pc, #80]	; (29d0c <_fflush_r+0x6c>)
   29cbc:	429c      	cmp	r4, r3
   29cbe:	d11b      	bne.n	29cf8 <_fflush_r+0x58>
   29cc0:	686c      	ldr	r4, [r5, #4]
   29cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29cc6:	2b00      	cmp	r3, #0
   29cc8:	d0ef      	beq.n	29caa <_fflush_r+0xa>
   29cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
   29ccc:	07d0      	lsls	r0, r2, #31
   29cce:	d404      	bmi.n	29cda <_fflush_r+0x3a>
   29cd0:	0599      	lsls	r1, r3, #22
   29cd2:	d402      	bmi.n	29cda <_fflush_r+0x3a>
   29cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29cd6:	f7e7 fe8d 	bl	119f4 <__retarget_lock_acquire_recursive>
   29cda:	4628      	mov	r0, r5
   29cdc:	4621      	mov	r1, r4
   29cde:	f006 ffbc 	bl	30c5a <__sflush_r>
   29ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   29ce4:	4605      	mov	r5, r0
   29ce6:	07da      	lsls	r2, r3, #31
   29ce8:	d4e0      	bmi.n	29cac <_fflush_r+0xc>
   29cea:	89a3      	ldrh	r3, [r4, #12]
   29cec:	059b      	lsls	r3, r3, #22
   29cee:	d4dd      	bmi.n	29cac <_fflush_r+0xc>
   29cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29cf2:	f7e7 fe9b 	bl	11a2c <__retarget_lock_release_recursive>
   29cf6:	e7d9      	b.n	29cac <_fflush_r+0xc>
   29cf8:	4b05      	ldr	r3, [pc, #20]	; (29d10 <_fflush_r+0x70>)
   29cfa:	429c      	cmp	r4, r3
   29cfc:	d101      	bne.n	29d02 <_fflush_r+0x62>
   29cfe:	68ac      	ldr	r4, [r5, #8]
   29d00:	e7df      	b.n	29cc2 <_fflush_r+0x22>
   29d02:	4b04      	ldr	r3, [pc, #16]	; (29d14 <_fflush_r+0x74>)
   29d04:	429c      	cmp	r4, r3
   29d06:	bf08      	it	eq
   29d08:	68ec      	ldreq	r4, [r5, #12]
   29d0a:	e7da      	b.n	29cc2 <_fflush_r+0x22>
   29d0c:	000325c8 	.word	0x000325c8
   29d10:	000325a8 	.word	0x000325a8
   29d14:	00032588 	.word	0x00032588

00029d18 <_lseek_r>:
   29d18:	b538      	push	{r3, r4, r5, lr}
   29d1a:	4604      	mov	r4, r0
   29d1c:	4d06      	ldr	r5, [pc, #24]	; (29d38 <_lseek_r+0x20>)
   29d1e:	4608      	mov	r0, r1
   29d20:	4611      	mov	r1, r2
   29d22:	2200      	movs	r2, #0
   29d24:	602a      	str	r2, [r5, #0]
   29d26:	461a      	mov	r2, r3
   29d28:	f002 f864 	bl	2bdf4 <_lseek>
   29d2c:	1c43      	adds	r3, r0, #1
   29d2e:	d102      	bne.n	29d36 <_lseek_r+0x1e>
   29d30:	682b      	ldr	r3, [r5, #0]
   29d32:	b103      	cbz	r3, 29d36 <_lseek_r+0x1e>
   29d34:	6023      	str	r3, [r4, #0]
   29d36:	bd38      	pop	{r3, r4, r5, pc}
   29d38:	20021aec 	.word	0x20021aec

00029d3c <__smakebuf_r>:
   29d3c:	898b      	ldrh	r3, [r1, #12]
   29d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29d40:	079d      	lsls	r5, r3, #30
   29d42:	4606      	mov	r6, r0
   29d44:	460c      	mov	r4, r1
   29d46:	d507      	bpl.n	29d58 <__smakebuf_r+0x1c>
   29d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
   29d4c:	6023      	str	r3, [r4, #0]
   29d4e:	6123      	str	r3, [r4, #16]
   29d50:	2301      	movs	r3, #1
   29d52:	6163      	str	r3, [r4, #20]
   29d54:	b003      	add	sp, #12
   29d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d58:	ab01      	add	r3, sp, #4
   29d5a:	466a      	mov	r2, sp
   29d5c:	f006 fffc 	bl	30d58 <__swhatbuf_r>
   29d60:	9f00      	ldr	r7, [sp, #0]
   29d62:	4605      	mov	r5, r0
   29d64:	4630      	mov	r0, r6
   29d66:	4639      	mov	r1, r7
   29d68:	f7fe fd0e 	bl	28788 <_malloc_r>
   29d6c:	b948      	cbnz	r0, 29d82 <__smakebuf_r+0x46>
   29d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29d72:	059a      	lsls	r2, r3, #22
   29d74:	d4ee      	bmi.n	29d54 <__smakebuf_r+0x18>
   29d76:	f023 0303 	bic.w	r3, r3, #3
   29d7a:	f043 0302 	orr.w	r3, r3, #2
   29d7e:	81a3      	strh	r3, [r4, #12]
   29d80:	e7e2      	b.n	29d48 <__smakebuf_r+0xc>
   29d82:	4b0d      	ldr	r3, [pc, #52]	; (29db8 <__smakebuf_r+0x7c>)
   29d84:	62b3      	str	r3, [r6, #40]	; 0x28
   29d86:	89a3      	ldrh	r3, [r4, #12]
   29d88:	6020      	str	r0, [r4, #0]
   29d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   29d8e:	81a3      	strh	r3, [r4, #12]
   29d90:	9b01      	ldr	r3, [sp, #4]
   29d92:	e9c4 0704 	strd	r0, r7, [r4, #16]
   29d96:	b15b      	cbz	r3, 29db0 <__smakebuf_r+0x74>
   29d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29d9c:	4630      	mov	r0, r6
   29d9e:	f000 f84b 	bl	29e38 <_isatty_r>
   29da2:	b128      	cbz	r0, 29db0 <__smakebuf_r+0x74>
   29da4:	89a3      	ldrh	r3, [r4, #12]
   29da6:	f023 0303 	bic.w	r3, r3, #3
   29daa:	f043 0301 	orr.w	r3, r3, #1
   29dae:	81a3      	strh	r3, [r4, #12]
   29db0:	89a3      	ldrh	r3, [r4, #12]
   29db2:	431d      	orrs	r5, r3
   29db4:	81a5      	strh	r5, [r4, #12]
   29db6:	e7cd      	b.n	29d54 <__smakebuf_r+0x18>
   29db8:	000290d1 	.word	0x000290d1

00029dbc <_read_r>:
   29dbc:	b538      	push	{r3, r4, r5, lr}
   29dbe:	4604      	mov	r4, r0
   29dc0:	4d06      	ldr	r5, [pc, #24]	; (29ddc <_read_r+0x20>)
   29dc2:	4608      	mov	r0, r1
   29dc4:	4611      	mov	r1, r2
   29dc6:	2200      	movs	r2, #0
   29dc8:	602a      	str	r2, [r5, #0]
   29dca:	461a      	mov	r2, r3
   29dcc:	f002 f807 	bl	2bdde <_read>
   29dd0:	1c43      	adds	r3, r0, #1
   29dd2:	d102      	bne.n	29dda <_read_r+0x1e>
   29dd4:	682b      	ldr	r3, [r5, #0]
   29dd6:	b103      	cbz	r3, 29dda <_read_r+0x1e>
   29dd8:	6023      	str	r3, [r4, #0]
   29dda:	bd38      	pop	{r3, r4, r5, pc}
   29ddc:	20021aec 	.word	0x20021aec

00029de0 <raise>:
   29de0:	4b02      	ldr	r3, [pc, #8]	; (29dec <raise+0xc>)
   29de2:	4601      	mov	r1, r0
   29de4:	6818      	ldr	r0, [r3, #0]
   29de6:	f006 bfee 	b.w	30dc6 <_raise_r>
   29dea:	bf00      	nop
   29dec:	20008754 	.word	0x20008754

00029df0 <_kill_r>:
   29df0:	b538      	push	{r3, r4, r5, lr}
   29df2:	2300      	movs	r3, #0
   29df4:	4d06      	ldr	r5, [pc, #24]	; (29e10 <_kill_r+0x20>)
   29df6:	4604      	mov	r4, r0
   29df8:	4608      	mov	r0, r1
   29dfa:	4611      	mov	r1, r2
   29dfc:	602b      	str	r3, [r5, #0]
   29dfe:	f002 f800 	bl	2be02 <_kill>
   29e02:	1c43      	adds	r3, r0, #1
   29e04:	d102      	bne.n	29e0c <_kill_r+0x1c>
   29e06:	682b      	ldr	r3, [r5, #0]
   29e08:	b103      	cbz	r3, 29e0c <_kill_r+0x1c>
   29e0a:	6023      	str	r3, [r4, #0]
   29e0c:	bd38      	pop	{r3, r4, r5, pc}
   29e0e:	bf00      	nop
   29e10:	20021aec 	.word	0x20021aec

00029e14 <_fstat_r>:
   29e14:	b538      	push	{r3, r4, r5, lr}
   29e16:	2300      	movs	r3, #0
   29e18:	4d06      	ldr	r5, [pc, #24]	; (29e34 <_fstat_r+0x20>)
   29e1a:	4604      	mov	r4, r0
   29e1c:	4608      	mov	r0, r1
   29e1e:	4611      	mov	r1, r2
   29e20:	602b      	str	r3, [r5, #0]
   29e22:	f001 fff2 	bl	2be0a <_fstat>
   29e26:	1c43      	adds	r3, r0, #1
   29e28:	d102      	bne.n	29e30 <_fstat_r+0x1c>
   29e2a:	682b      	ldr	r3, [r5, #0]
   29e2c:	b103      	cbz	r3, 29e30 <_fstat_r+0x1c>
   29e2e:	6023      	str	r3, [r4, #0]
   29e30:	bd38      	pop	{r3, r4, r5, pc}
   29e32:	bf00      	nop
   29e34:	20021aec 	.word	0x20021aec

00029e38 <_isatty_r>:
   29e38:	b538      	push	{r3, r4, r5, lr}
   29e3a:	2300      	movs	r3, #0
   29e3c:	4d05      	ldr	r5, [pc, #20]	; (29e54 <_isatty_r+0x1c>)
   29e3e:	4604      	mov	r4, r0
   29e40:	4608      	mov	r0, r1
   29e42:	602b      	str	r3, [r5, #0]
   29e44:	f001 ffd8 	bl	2bdf8 <_isatty>
   29e48:	1c43      	adds	r3, r0, #1
   29e4a:	d102      	bne.n	29e52 <_isatty_r+0x1a>
   29e4c:	682b      	ldr	r3, [r5, #0]
   29e4e:	b103      	cbz	r3, 29e52 <_isatty_r+0x1a>
   29e50:	6023      	str	r3, [r4, #0]
   29e52:	bd38      	pop	{r3, r4, r5, pc}
   29e54:	20021aec 	.word	0x20021aec

00029e58 <ubxlib_preinit>:
{
    irq_unlock(gIrqLockKey);
}

static int ubxlib_preinit(const struct device *arg)
{
   29e58:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   29e5a:	f7fd faed 	bl	27438 <z_impl_z_current_get>
    ARG_UNUSED(arg);

    k_thread_system_pool_assign(k_current_get());
   29e5e:	f7fe fbd5 	bl	2860c <k_thread_system_pool_assign>
    return 0;
}
   29e62:	2000      	movs	r0, #0
   29e64:	bd08      	pop	{r3, pc}

00029e66 <uart_cb_2>:
}
   29e66:	4770      	bx	lr

00029e68 <z_log_msg_static_create.constprop.0>:
   29e68:	2300      	movs	r3, #0
   29e6a:	f7e4 bd21 	b.w	e8b0 <z_impl_z_log_msg_static_create>

00029e6e <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   29e6e:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   29e70:	6883      	ldr	r3, [r0, #8]
   29e72:	2228      	movs	r2, #40	; 0x28
   29e74:	68dc      	ldr	r4, [r3, #12]
   29e76:	2332      	movs	r3, #50	; 0x32
   29e78:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   29e7a:	bc10      	pop	{r4}
   29e7c:	4760      	bx	ip

00029e7e <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   29e7e:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   29e80:	6883      	ldr	r3, [r0, #8]
   29e82:	685c      	ldr	r4, [r3, #4]
   29e84:	f04f 33ff 	mov.w	r3, #4294967295
   29e88:	46a4      	mov	ip, r4
}
   29e8a:	bc10      	pop	{r4}
   29e8c:	4760      	bx	ip

00029e8e <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   29e8e:	f7fb bbef 	b.w	25670 <z_impl_k_sem_take>

00029e92 <gpio_add_callback.isra.0>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   29e92:	6883      	ldr	r3, [r0, #8]
   29e94:	69db      	ldr	r3, [r3, #28]
   29e96:	b10b      	cbz	r3, 29e9c <gpio_add_callback.isra.0+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   29e98:	2201      	movs	r2, #1
   29e9a:	4718      	bx	r3
}
   29e9c:	4770      	bx	lr

00029e9e <send_protobuf>:
void send_protobuf(void){
   29e9e:	b510      	push	{r4, lr}
   29ea0:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
    buf_proto=send_array_dd_v0(); 
   29ea4:	f20d 74d4 	addw	r4, sp, #2004	; 0x7d4
   29ea8:	4620      	mov	r0, r4
   29eaa:	f7e1 ff01 	bl	bcb0 <send_array_dd_v0>
    send_bluetooth(buf_proto);
   29eae:	f20d 71e4 	addw	r1, sp, #2020	; 0x7e4
   29eb2:	f240 72cc 	movw	r2, #1996	; 0x7cc
   29eb6:	4668      	mov	r0, sp
   29eb8:	f006 fb69 	bl	3058e <memcpy>
   29ebc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29ec0:	f7e1 fb74 	bl	b5ac <send_bluetooth>
}
   29ec4:	f50d 6d7b 	add.w	sp, sp, #4016	; 0xfb0
   29ec8:	bd10      	pop	{r4, pc}

00029eca <error>:
{
   29eca:	b508      	push	{r3, lr}
	turn_off_all_leds();
   29ecc:	f7e1 fcce 	bl	b86c <turn_off_all_leds>
	return z_impl_k_sleep(timeout);
   29ed0:	2100      	movs	r1, #0
   29ed2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29ed6:	f7fd fa7b 	bl	273d0 <z_impl_k_sleep>
	while (true) {
   29eda:	e7f9      	b.n	29ed0 <error+0x6>

00029edc <load_descriptor_values>:
 */

#include "includes\Protobuf\pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
   29edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
   29ede:	6806      	ldr	r6, [r0, #0]
   29ee0:	8902      	ldrh	r2, [r0, #8]
   29ee2:	8a33      	ldrh	r3, [r6, #16]
   29ee4:	429a      	cmp	r2, r3
   29ee6:	d271      	bcs.n	29fcc <load_descriptor_values+0xf0>
        return false;

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29ee8:	6831      	ldr	r1, [r6, #0]
   29eea:	8942      	ldrh	r2, [r0, #10]
   29eec:	0093      	lsls	r3, r2, #2
   29eee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);

    switch(word0 & 3)
   29ef2:	f002 0103 	and.w	r1, r2, #3
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29ef6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    switch(word0 & 3)
   29efa:	2901      	cmp	r1, #1
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
   29efc:	7584      	strb	r4, [r0, #22]
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29efe:	f3c2 0585 	ubfx	r5, r2, #2, #6
    switch(word0 & 3)
   29f02:	d01f      	beq.n	29f44 <load_descriptor_values+0x68>
   29f04:	2902      	cmp	r1, #2
   29f06:	d02a      	beq.n	29f5e <load_descriptor_values+0x82>
   29f08:	2900      	cmp	r1, #0
   29f0a:	d135      	bne.n	29f78 <load_descriptor_values+0x9c>
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
            data_offset = (word0 >> 16) & 0xFF;
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
            break;
   29f0c:	f04f 0c01 	mov.w	ip, #1
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
   29f10:	f3c2 6303 	ubfx	r3, r2, #24, #4
            data_offset = (word0 >> 16) & 0xFF;
   29f14:	f3c2 4707 	ubfx	r7, r2, #16, #8
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
   29f18:	0f12      	lsrs	r2, r2, #28
   29f1a:	8242      	strh	r2, [r0, #18]
            iter->data_size = (pb_size_t)word3;
            break;
        }
    }

    if (!iter->message)
   29f1c:	6842      	ldr	r2, [r0, #4]
            iter->array_size = 1;
   29f1e:	f8a0 c014 	strh.w	ip, [r0, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
   29f22:	8205      	strh	r5, [r0, #16]
    if (!iter->message)
   29f24:	2a00      	cmp	r2, #0
   29f26:	d134      	bne.n	29f92 <load_descriptor_values+0xb6>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
   29f28:	6182      	str	r2, [r0, #24]
        iter->pSize = NULL;
   29f2a:	6202      	str	r2, [r0, #32]
        {
            iter->pData = iter->pField;
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
   29f2c:	f004 040e 	and.w	r4, r4, #14
   29f30:	2c08      	cmp	r4, #8
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
   29f32:	bf11      	iteee	ne
   29f34:	2300      	movne	r3, #0
   29f36:	89c2      	ldrheq	r2, [r0, #14]
   29f38:	6873      	ldreq	r3, [r6, #4]
   29f3a:	f853 3022 	ldreq.w	r3, [r3, r2, lsl #2]
   29f3e:	6243      	str	r3, [r0, #36]	; 0x24
    else
    {
        iter->submsg_desc = NULL;
    }

    return true;
   29f40:	2001      	movs	r0, #1
}
   29f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f44:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
   29f46:	f3c2 4c0b 	ubfx	ip, r2, #16, #12
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f4a:	4419      	add	r1, r3
   29f4c:	6849      	ldr	r1, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
   29f4e:	0f0b      	lsrs	r3, r1, #28
   29f50:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
            data_offset = word1 & 0xFFFF;
   29f54:	b28f      	uxth	r7, r1
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
   29f56:	0f13      	lsrs	r3, r2, #28
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
   29f58:	f3c1 420b 	ubfx	r2, r1, #16, #12
            break;
   29f5c:	e7dd      	b.n	29f1a <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f5e:	6831      	ldr	r1, [r6, #0]
            iter->array_size = (pb_size_t)(word0 >> 16);
   29f60:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f64:	4419      	add	r1, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29f66:	e9d1 3701 	ldrd	r3, r7, [r1, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f6a:	0a1a      	lsrs	r2, r3, #8
   29f6c:	ea45 1282 	orr.w	r2, r5, r2, lsl #6
   29f70:	b295      	uxth	r5, r2
            size_offset = (int_least8_t)(word1 & 0xFF);
   29f72:	b25b      	sxtb	r3, r3
            iter->data_size = (pb_size_t)word3;
   29f74:	898a      	ldrh	r2, [r1, #12]
            break;
   29f76:	e7d0      	b.n	29f1a <load_descriptor_values+0x3e>
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
   29f78:	6832      	ldr	r2, [r6, #0]
   29f7a:	441a      	add	r2, r3
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
   29f7c:	e9d2 3701 	ldrd	r3, r7, [r2, #4]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f80:	0a19      	lsrs	r1, r3, #8
   29f82:	ea45 1181 	orr.w	r1, r5, r1, lsl #6
            iter->array_size = (pb_size_t)word4;
   29f86:	f8b2 c010 	ldrh.w	ip, [r2, #16]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
   29f8a:	b28d      	uxth	r5, r1
            iter->data_size = (pb_size_t)word3;
   29f8c:	8992      	ldrh	r2, [r2, #12]
            size_offset = (int_least8_t)(word1 & 0xFF);
   29f8e:	b25b      	sxtb	r3, r3
            break;
   29f90:	e7c3      	b.n	29f1a <load_descriptor_values+0x3e>
        iter->pField = (char*)iter->message + data_offset;
   29f92:	443a      	add	r2, r7
   29f94:	6182      	str	r2, [r0, #24]
        if (size_offset)
   29f96:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
   29f9a:	b123      	cbz	r3, 29fa6 <load_descriptor_values+0xca>
            iter->pSize = (char*)iter->pField - size_offset;
   29f9c:	1ad3      	subs	r3, r2, r3
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29f9e:	2980      	cmp	r1, #128	; 0x80
            iter->pSize = (char*)iter->pField - size_offset;
   29fa0:	6203      	str	r3, [r0, #32]
        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
   29fa2:	d109      	bne.n	29fb8 <load_descriptor_values+0xdc>
   29fa4:	e00f      	b.n	29fc6 <load_descriptor_values+0xea>
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
   29fa6:	f004 0530 	and.w	r5, r4, #48	; 0x30
   29faa:	2d20      	cmp	r5, #32
   29fac:	d1f7      	bne.n	29f9e <load_descriptor_values+0xc2>
   29fae:	2c3f      	cmp	r4, #63	; 0x3f
   29fb0:	d804      	bhi.n	29fbc <load_descriptor_values+0xe0>
            iter->pSize = &iter->array_size;
   29fb2:	f100 0314 	add.w	r3, r0, #20
            iter->pSize = NULL;
   29fb6:	6203      	str	r3, [r0, #32]
            iter->pData = iter->pField;
   29fb8:	61c2      	str	r2, [r0, #28]
   29fba:	e7b7      	b.n	29f2c <load_descriptor_values+0x50>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
   29fbc:	2980      	cmp	r1, #128	; 0x80
   29fbe:	d1fa      	bne.n	29fb6 <load_descriptor_values+0xda>
            iter->pSize = &iter->array_size;
   29fc0:	f100 0314 	add.w	r3, r0, #20
   29fc4:	6203      	str	r3, [r0, #32]
            iter->pData = *(void**)iter->pField;
   29fc6:	6813      	ldr	r3, [r2, #0]
   29fc8:	61c3      	str	r3, [r0, #28]
   29fca:	e7af      	b.n	29f2c <load_descriptor_values+0x50>
        return false;
   29fcc:	2000      	movs	r0, #0
   29fce:	e7b8      	b.n	29f42 <load_descriptor_values+0x66>

00029fd0 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
    iter->index++;
   29fd0:	8903      	ldrh	r3, [r0, #8]
{
   29fd2:	b510      	push	{r4, lr}
    iter->index++;
   29fd4:	3301      	adds	r3, #1
   29fd6:	b29b      	uxth	r3, r3

    if (iter->index >= iter->descriptor->field_count)
   29fd8:	6801      	ldr	r1, [r0, #0]
    iter->index++;
   29fda:	8103      	strh	r3, [r0, #8]
    if (iter->index >= iter->descriptor->field_count)
   29fdc:	8a0a      	ldrh	r2, [r1, #16]
   29fde:	429a      	cmp	r2, r3
   29fe0:	d803      	bhi.n	29fea <advance_iterator+0x1a>
    {
        /* Restart */
        iter->index = 0;
   29fe2:	2300      	movs	r3, #0
        iter->field_info_index = 0;
        iter->submessage_index = 0;
        iter->required_field_index = 0;
   29fe4:	e9c0 3302 	strd	r3, r3, [r0, #8]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
   29fe8:	bd10      	pop	{r4, pc}
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29fea:	2401      	movs	r4, #1
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
   29fec:	680b      	ldr	r3, [r1, #0]
   29fee:	8942      	ldrh	r2, [r0, #10]
   29ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
   29ff4:	0a0b      	lsrs	r3, r1, #8
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
   29ff6:	f001 0103 	and.w	r1, r1, #3
   29ffa:	fa04 f101 	lsl.w	r1, r4, r1
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
   29ffe:	440a      	add	r2, r1
   2a000:	8142      	strh	r2, [r0, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
   2a002:	8982      	ldrh	r2, [r0, #12]
   2a004:	f003 0130 	and.w	r1, r3, #48	; 0x30
   2a008:	2900      	cmp	r1, #0
   2a00a:	bf08      	it	eq
   2a00c:	3201      	addeq	r2, #1
   2a00e:	8182      	strh	r2, [r0, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
   2a010:	89c2      	ldrh	r2, [r0, #14]
   2a012:	f003 030e 	and.w	r3, r3, #14
   2a016:	2b08      	cmp	r3, #8
   2a018:	bf08      	it	eq
   2a01a:	3201      	addeq	r2, #1
   2a01c:	81c2      	strh	r2, [r0, #14]
}
   2a01e:	e7e3      	b.n	29fe8 <advance_iterator+0x18>

0002a020 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
   2a020:	b570      	push	{r4, r5, r6, lr}
   2a022:	4604      	mov	r4, r0
   2a024:	460e      	mov	r6, r1
   2a026:	4615      	mov	r5, r2
__ssp_bos_icheck3(memset, void *, int)
   2a028:	2100      	movs	r1, #0
   2a02a:	2220      	movs	r2, #32
   2a02c:	3008      	adds	r0, #8
   2a02e:	f006 fae8 	bl	30602 <memset>
    memset(iter, 0, sizeof(*iter));

    iter->descriptor = desc;
    iter->message = message;
   2a032:	e9c4 6500 	strd	r6, r5, [r4]

    return load_descriptor_values(iter);
   2a036:	4620      	mov	r0, r4
}
   2a038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return load_descriptor_values(iter);
   2a03c:	f7ff bf4e 	b.w	29edc <load_descriptor_values>

0002a040 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
   2a040:	b538      	push	{r3, r4, r5, lr}
   2a042:	460c      	mov	r4, r1
   2a044:	4605      	mov	r5, r0
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
   2a046:	680b      	ldr	r3, [r1, #0]
   2a048:	6899      	ldr	r1, [r3, #8]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
   2a04a:	680b      	ldr	r3, [r1, #0]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
   2a04c:	681b      	ldr	r3, [r3, #0]
   2a04e:	0a1b      	lsrs	r3, r3, #8
   2a050:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a054:	2b80      	cmp	r3, #128	; 0x80
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a056:	bf14      	ite	ne
   2a058:	6862      	ldrne	r2, [r4, #4]
        status = pb_field_iter_begin(iter, msg, &extension->dest);
   2a05a:	1d22      	addeq	r2, r4, #4
    }

    iter->pSize = &extension->found;
   2a05c:	340c      	adds	r4, #12
        status = pb_field_iter_begin(iter, msg, extension->dest);
   2a05e:	f7ff ffdf 	bl	2a020 <pb_field_iter_begin>
    iter->pSize = &extension->found;
   2a062:	622c      	str	r4, [r5, #32]
    return status;
}
   2a064:	bd38      	pop	{r3, r4, r5, pc}

0002a066 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
   2a066:	b510      	push	{r4, lr}
   2a068:	4604      	mov	r4, r0
    advance_iterator(iter);
   2a06a:	f7ff ffb1 	bl	29fd0 <advance_iterator>
    (void)load_descriptor_values(iter);
   2a06e:	f7ff ff35 	bl	29edc <load_descriptor_values>
    return iter->index != 0;
   2a072:	8920      	ldrh	r0, [r4, #8]
}
   2a074:	3800      	subs	r0, #0
   2a076:	bf18      	it	ne
   2a078:	2001      	movne	r0, #1
   2a07a:	bd10      	pop	{r4, pc}

0002a07c <pb_field_iter_begin_const>:
    return t.p1;
}

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
   2a07c:	f7ff bfd0 	b.w	2a020 <pb_field_iter_begin>

0002a080 <pb_field_iter_begin_extension_const>:
}

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
   2a080:	f7ff bfde 	b.w	2a040 <pb_field_iter_begin_extension>

0002a084 <pb_default_field_callback>:
}

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
   2a084:	b410      	push	{r4}
   2a086:	460b      	mov	r3, r1
   2a088:	4611      	mov	r1, r2
    if (field->data_size == sizeof(pb_callback_t))
   2a08a:	8a52      	ldrh	r2, [r2, #18]
   2a08c:	2a08      	cmp	r2, #8
   2a08e:	d10e      	bne.n	2a0ae <pb_default_field_callback+0x2a>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
   2a090:	69ca      	ldr	r2, [r1, #28]

        if (pCallback != NULL)
   2a092:	b162      	cbz	r2, 2a0ae <pb_default_field_callback+0x2a>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
   2a094:	b128      	cbz	r0, 2a0a2 <pb_default_field_callback+0x1e>
   2a096:	6814      	ldr	r4, [r2, #0]
   2a098:	b11c      	cbz	r4, 2a0a2 <pb_default_field_callback+0x1e>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
   2a09a:	3204      	adds	r2, #4
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a09c:	4623      	mov	r3, r4
        }
    }

    return true; /* Success, but didn't do anything */

}
   2a09e:	bc10      	pop	{r4}
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a0a0:	4718      	bx	r3
            if (ostream != NULL && pCallback->funcs.encode != NULL)
   2a0a2:	b123      	cbz	r3, 2a0ae <pb_default_field_callback+0x2a>
   2a0a4:	6814      	ldr	r4, [r2, #0]
   2a0a6:	b114      	cbz	r4, 2a0ae <pb_default_field_callback+0x2a>
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
   2a0a8:	4618      	mov	r0, r3
   2a0aa:	3204      	adds	r2, #4
   2a0ac:	e7f6      	b.n	2a09c <pb_default_field_callback+0x18>
}
   2a0ae:	2001      	movs	r0, #1
   2a0b0:	bc10      	pop	{r4}
   2a0b2:	4770      	bx	lr

0002a0b4 <buf_write>:
{
   2a0b4:	4603      	mov	r3, r0
   2a0b6:	b510      	push	{r4, lr}
    pb_byte_t *dest = (pb_byte_t*)stream->state;
   2a0b8:	6840      	ldr	r0, [r0, #4]
    stream->state = dest + count;
   2a0ba:	1884      	adds	r4, r0, r2
   2a0bc:	605c      	str	r4, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a0be:	f006 fa66 	bl	3058e <memcpy>
}
   2a0c2:	2001      	movs	r0, #1
   2a0c4:	bd10      	pop	{r4, pc}

0002a0c6 <pb_encode_varint>:
{
   2a0c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value <= 0x7F)
   2a0c8:	2a80      	cmp	r2, #128	; 0x80
{
   2a0ca:	b085      	sub	sp, #20
    if (value <= 0x7F)
   2a0cc:	f173 0100 	sbcs.w	r1, r3, #0
{
   2a0d0:	4606      	mov	r6, r0
        pb_byte_t byte = (pb_byte_t)value;
   2a0d2:	b2d4      	uxtb	r4, r2
   2a0d4:	a901      	add	r1, sp, #4
    if (value <= 0x7F)
   2a0d6:	d206      	bcs.n	2a0e6 <pb_encode_varint+0x20>
        return pb_write(stream, &byte, 1);
   2a0d8:	2201      	movs	r2, #1
        pb_byte_t byte = (pb_byte_t)value;
   2a0da:	f88d 4004 	strb.w	r4, [sp, #4]
    return pb_write(stream, buffer, i);
   2a0de:	f7e1 ff57 	bl	bf90 <pb_write>
}
   2a0e2:	b005      	add	sp, #20
   2a0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    low >>= 7;
   2a0e6:	09d5      	lsrs	r5, r2, #7
   2a0e8:	4608      	mov	r0, r1
    size_t i = 0;
   2a0ea:	2200      	movs	r2, #0
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
   2a0ec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a0f0:	ea53 0c05 	orrs.w	ip, r3, r5
   2a0f4:	4617      	mov	r7, r2
        buffer[i++] = byte;
   2a0f6:	f102 0201 	add.w	r2, r2, #1
    while (i < 4 && (low != 0 || high != 0))
   2a0fa:	d108      	bne.n	2a10e <pb_encode_varint+0x48>
   2a0fc:	463a      	mov	r2, r7
    buffer[i++] = byte;
   2a0fe:	f102 0310 	add.w	r3, r2, #16
   2a102:	446b      	add	r3, sp
    return pb_write(stream, buffer, i);
   2a104:	4630      	mov	r0, r6
    buffer[i++] = byte;
   2a106:	f803 4c0c 	strb.w	r4, [r3, #-12]
    return pb_write(stream, buffer, i);
   2a10a:	3201      	adds	r2, #1
   2a10c:	e7e7      	b.n	2a0de <pb_encode_varint+0x18>
        byte |= 0x80;
   2a10e:	f064 047f 	orn	r4, r4, #127	; 0x7f
    while (i < 4 && (low != 0 || high != 0))
   2a112:	2a04      	cmp	r2, #4
        buffer[i++] = byte;
   2a114:	f800 4b01 	strb.w	r4, [r0], #1
        byte = (pb_byte_t)(low & 0x7F);
   2a118:	f005 047f 	and.w	r4, r5, #127	; 0x7f
        low >>= 7;
   2a11c:	ea4f 15d5 	mov.w	r5, r5, lsr #7
    while (i < 4 && (low != 0 || high != 0))
   2a120:	d1e6      	bne.n	2a0f0 <pb_encode_varint+0x2a>
    if (high)
   2a122:	2b00      	cmp	r3, #0
   2a124:	d0eb      	beq.n	2a0fe <pb_encode_varint+0x38>
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
   2a126:	0118      	lsls	r0, r3, #4
   2a128:	f000 0070 	and.w	r0, r0, #112	; 0x70
   2a12c:	4304      	orrs	r4, r0
        high >>= 3;
   2a12e:	08db      	lsrs	r3, r3, #3
        while (high)
   2a130:	2b00      	cmp	r3, #0
   2a132:	d0e4      	beq.n	2a0fe <pb_encode_varint+0x38>
            byte |= 0x80;
   2a134:	f064 047f 	orn	r4, r4, #127	; 0x7f
            buffer[i++] = byte;
   2a138:	5454      	strb	r4, [r2, r1]
            byte = (pb_byte_t)(high & 0x7F);
   2a13a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
            high >>= 7;
   2a13e:	3201      	adds	r2, #1
   2a140:	09db      	lsrs	r3, r3, #7
   2a142:	e7f5      	b.n	2a130 <pb_encode_varint+0x6a>

0002a144 <pb_encode_svarint>:
    if (value < 0)
   2a144:	1892      	adds	r2, r2, r2
   2a146:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
   2a14a:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
   2a14e:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
   2a152:	f7ff bfb8 	b.w	2a0c6 <pb_encode_varint>

0002a156 <pb_encode_fixed32>:
    return pb_write(stream, (const pb_byte_t*)value, 4);
   2a156:	2204      	movs	r2, #4
   2a158:	f7e1 bf1a 	b.w	bf90 <pb_write>

0002a15c <pb_encode_fixed64>:
    return pb_write(stream, (const pb_byte_t*)value, 8);
   2a15c:	2208      	movs	r2, #8
   2a15e:	f7e1 bf17 	b.w	bf90 <pb_write>

0002a162 <pb_encode_tag>:
{
   2a162:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
   2a164:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
   2a168:	0f5b      	lsrs	r3, r3, #29
   2a16a:	f7ff bfac 	b.w	2a0c6 <pb_encode_varint>

0002a16e <pb_encode_string>:
{
   2a16e:	b570      	push	{r4, r5, r6, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a170:	2300      	movs	r3, #0
{
   2a172:	4604      	mov	r4, r0
   2a174:	460d      	mov	r5, r1
   2a176:	4616      	mov	r6, r2
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
   2a178:	f7ff ffa5 	bl	2a0c6 <pb_encode_varint>
   2a17c:	b130      	cbz	r0, 2a18c <pb_encode_string+0x1e>
    return pb_write(stream, buffer, size);
   2a17e:	4632      	mov	r2, r6
   2a180:	4629      	mov	r1, r5
   2a182:	4620      	mov	r0, r4
}
   2a184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_write(stream, buffer, size);
   2a188:	f7e1 bf02 	b.w	bf90 <pb_write>
}
   2a18c:	bd70      	pop	{r4, r5, r6, pc}

0002a18e <cbpprintf_external>:
{
   2a18e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a192:	4606      	mov	r6, r0
   2a194:	460d      	mov	r5, r1
   2a196:	4617      	mov	r7, r2
	if (buf == NULL) {
   2a198:	4698      	mov	r8, r3
   2a19a:	b32b      	cbz	r3, 2a1e8 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
   2a19c:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a1a0:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2a1a4:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a1a8:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2a1aa:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a1ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2a1b0:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2a1b4:	441c      	add	r4, r3
   2a1b6:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2a1b8:	45ca      	cmp	sl, r9
   2a1ba:	d309      	bcc.n	2a1d0 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   2a1bc:	4639      	mov	r1, r7
   2a1be:	4630      	mov	r0, r6
   2a1c0:	46ac      	mov	ip, r5
   2a1c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a1c6:	f108 0308 	add.w	r3, r8, #8
}
   2a1ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   2a1ce:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2a1d0:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
   2a1d4:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
   2a1d8:	4620      	mov	r0, r4
		*ps = s;
   2a1da:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   2a1de:	f7df f8d2 	bl	9386 <strlen>
   2a1e2:	3001      	adds	r0, #1
   2a1e4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2a1e6:	e7e7      	b.n	2a1b8 <cbpprintf_external+0x2a>
}
   2a1e8:	f06f 0015 	mvn.w	r0, #21
   2a1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a1f0 <is_ptr>:
{
   2a1f0:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2a1f2:	2500      	movs	r5, #0
{
   2a1f4:	4602      	mov	r2, r0
	bool mod = false;
   2a1f6:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   2a1f8:	4614      	mov	r4, r2
   2a1fa:	f814 3b01 	ldrb.w	r3, [r4], #1
   2a1fe:	b90b      	cbnz	r3, 2a204 <is_ptr+0x14>
					return false;
   2a200:	4618      	mov	r0, r3
   2a202:	e009      	b.n	2a218 <is_ptr+0x28>
		if (mod) {
   2a204:	b198      	cbz	r0, 2a22e <is_ptr+0x3e>
			if (cnt == n) {
   2a206:	428d      	cmp	r5, r1
   2a208:	d107      	bne.n	2a21a <is_ptr+0x2a>
				if (c == 'p') {
   2a20a:	2b70      	cmp	r3, #112	; 0x70
   2a20c:	d004      	beq.n	2a218 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   2a20e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2a212:	2a3a      	cmp	r2, #58	; 0x3a
   2a214:	d80b      	bhi.n	2a22e <is_ptr+0x3e>
					return false;
   2a216:	2000      	movs	r0, #0
}
   2a218:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   2a21a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   2a21e:	2e3a      	cmp	r6, #58	; 0x3a
   2a220:	d805      	bhi.n	2a22e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2a222:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2a224:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2a226:	1c94      	adds	r4, r2, #2
   2a228:	2b00      	cmp	r3, #0
   2a22a:	d0e9      	beq.n	2a200 <is_ptr+0x10>
   2a22c:	2000      	movs	r0, #0
		if (c == '%') {
   2a22e:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
   2a230:	4622      	mov	r2, r4
			mod = !mod;
   2a232:	bf08      	it	eq
   2a234:	f080 0001 	eoreq.w	r0, r0, #1
   2a238:	e7de      	b.n	2a1f8 <is_ptr+0x8>

0002a23a <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2a23a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2a23c:	2364      	movs	r3, #100	; 0x64
{
   2a23e:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2a240:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2a242:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2a244:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2a246:	b969      	cbnz	r1, 2a264 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   2a248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2a24a:	429a      	cmp	r2, r3
   2a24c:	fbb2 f4f3 	udiv	r4, r2, r3
   2a250:	d20c      	bcs.n	2a26c <u8_to_dec+0x32>
   2a252:	2b01      	cmp	r3, #1
   2a254:	d00a      	beq.n	2a26c <u8_to_dec+0x32>
   2a256:	b948      	cbnz	r0, 2a26c <u8_to_dec+0x32>
		value -= digit * divisor;
   2a258:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2a25c:	240a      	movs	r4, #10
   2a25e:	fbb3 f3f4 	udiv	r3, r3, r4
   2a262:	b2d2      	uxtb	r2, r2
	while (buflen > 0 && divisor > 0) {
   2a264:	3e01      	subs	r6, #1
   2a266:	d1f0      	bne.n	2a24a <u8_to_dec+0x10>
		*buf = '\0';
   2a268:	702e      	strb	r6, [r5, #0]
	return num_digits;
   2a26a:	e7ed      	b.n	2a248 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   2a26c:	3430      	adds	r4, #48	; 0x30
   2a26e:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2a272:	fbb2 f4f3 	udiv	r4, r2, r3
   2a276:	fb03 2214 	mls	r2, r3, r4, r2
		divisor /= 10;
   2a27a:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2a27e:	3901      	subs	r1, #1
			num_digits++;
   2a280:	3001      	adds	r0, #1
			buflen--;
   2a282:	b2c9      	uxtb	r1, r1
			num_digits++;
   2a284:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2a286:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a288:	b2db      	uxtb	r3, r3
   2a28a:	e7dc      	b.n	2a246 <u8_to_dec+0xc>

0002a28c <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2a28c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a290:	b2db      	uxtb	r3, r3
   2a292:	2b09      	cmp	r3, #9
   2a294:	d802      	bhi.n	2a29c <char2hex+0x10>
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2a296:	2000      	movs	r0, #0
		*x = c - '0';
   2a298:	700b      	strb	r3, [r1, #0]
   2a29a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2a29c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2a2a0:	2b05      	cmp	r3, #5
   2a2a2:	d802      	bhi.n	2a2aa <char2hex+0x1e>
		*x = c - 'a' + 10;
   2a2a4:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2a2a6:	b2c3      	uxtb	r3, r0
   2a2a8:	e7f5      	b.n	2a296 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2a2aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2a2ae:	2b05      	cmp	r3, #5
   2a2b0:	d801      	bhi.n	2a2b6 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2a2b2:	3837      	subs	r0, #55	; 0x37
   2a2b4:	e7f7      	b.n	2a2a6 <char2hex+0x1a>
		return -EINVAL;
   2a2b6:	f06f 0015 	mvn.w	r0, #21
}
   2a2ba:	4770      	bx	lr

0002a2bc <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2a2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a2be:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2a2c0:	f001 0001 	and.w	r0, r1, #1
   2a2c4:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2a2c8:	429e      	cmp	r6, r3
   2a2ca:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2a2ce:	d903      	bls.n	2a2d8 <hex2bin+0x1c>
		return 0;
   2a2d0:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2a2d2:	4630      	mov	r0, r6
   2a2d4:	b003      	add	sp, #12
   2a2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2a2d8:	b158      	cbz	r0, 2a2f2 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2a2da:	7828      	ldrb	r0, [r5, #0]
   2a2dc:	f10d 0107 	add.w	r1, sp, #7
   2a2e0:	f7ff ffd4 	bl	2a28c <char2hex>
   2a2e4:	2800      	cmp	r0, #0
   2a2e6:	dbf3      	blt.n	2a2d0 <hex2bin+0x14>
		buf[0] = dec;
   2a2e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2a2ec:	3501      	adds	r5, #1
		buf[0] = dec;
   2a2ee:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a2f2:	3501      	adds	r5, #1
   2a2f4:	4417      	add	r7, r2
   2a2f6:	42ba      	cmp	r2, r7
   2a2f8:	d0eb      	beq.n	2a2d2 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2a2fa:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2a2fe:	f10d 0107 	add.w	r1, sp, #7
   2a302:	f7ff ffc3 	bl	2a28c <char2hex>
   2a306:	2800      	cmp	r0, #0
   2a308:	dbe2      	blt.n	2a2d0 <hex2bin+0x14>
		buf[i] = dec << 4;
   2a30a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2a30e:	0124      	lsls	r4, r4, #4
   2a310:	b2e4      	uxtb	r4, r4
   2a312:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a314:	f815 0b02 	ldrb.w	r0, [r5], #2
   2a318:	f7ff ffb8 	bl	2a28c <char2hex>
   2a31c:	2800      	cmp	r0, #0
   2a31e:	dbd7      	blt.n	2a2d0 <hex2bin+0x14>
		buf[i] += dec;
   2a320:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a324:	441c      	add	r4, r3
   2a326:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a32a:	e7e4      	b.n	2a2f6 <hex2bin+0x3a>

0002a32c <arch_printk_char_out>:
}
   2a32c:	2000      	movs	r0, #0
   2a32e:	4770      	bx	lr

0002a330 <str_out>:
{
   2a330:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a332:	688a      	ldr	r2, [r1, #8]
   2a334:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a336:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a338:	b114      	cbz	r4, 2a340 <str_out+0x10>
   2a33a:	684b      	ldr	r3, [r1, #4]
   2a33c:	4293      	cmp	r3, r2
   2a33e:	dc01      	bgt.n	2a344 <str_out+0x14>
		ctx->count++;
   2a340:	608d      	str	r5, [r1, #8]
}
   2a342:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a344:	3b01      	subs	r3, #1
   2a346:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a348:	bf08      	it	eq
   2a34a:	2200      	moveq	r2, #0
   2a34c:	608d      	str	r5, [r1, #8]
   2a34e:	bf0c      	ite	eq
   2a350:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a352:	54a0      	strbne	r0, [r4, r2]
   2a354:	e7f5      	b.n	2a342 <str_out+0x12>

0002a356 <printk>:
{
   2a356:	b40f      	push	{r0, r1, r2, r3}
   2a358:	b507      	push	{r0, r1, r2, lr}
   2a35a:	a904      	add	r1, sp, #16
   2a35c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a360:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a362:	f7e2 fb03 	bl	c96c <vprintk>
}
   2a366:	b003      	add	sp, #12
   2a368:	f85d eb04 	ldr.w	lr, [sp], #4
   2a36c:	b004      	add	sp, #16
   2a36e:	4770      	bx	lr

0002a370 <snprintk>:
{
   2a370:	b40c      	push	{r2, r3}
   2a372:	b507      	push	{r0, r1, r2, lr}
   2a374:	ab04      	add	r3, sp, #16
   2a376:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a37a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a37c:	f7e2 fb04 	bl	c988 <vsnprintk>
}
   2a380:	b003      	add	sp, #12
   2a382:	f85d eb04 	ldr.w	lr, [sp], #4
   2a386:	b002      	add	sp, #8
   2a388:	4770      	bx	lr

0002a38a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a38a:	4604      	mov	r4, r0
   2a38c:	b508      	push	{r3, lr}
   2a38e:	4608      	mov	r0, r1
   2a390:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a392:	461a      	mov	r2, r3
   2a394:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a396:	f7fd f84f 	bl	27438 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a39a:	f7e7 f857 	bl	1144c <z_impl_k_thread_abort>

0002a39e <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2a39e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a3a2:	8840      	ldrh	r0, [r0, #2]
}
   2a3a4:	0840      	lsrs	r0, r0, #1
   2a3a6:	4770      	bx	lr

0002a3a8 <free_list_add>:
{
   2a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a3aa:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a3ac:	f7ff fff7 	bl	2a39e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a3b0:	fab0 f080 	clz	r0, r0
   2a3b4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a3b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2a3bc:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2a3c0:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   2a3c2:	1d17      	adds	r7, r2, #4
{
   2a3c4:	460c      	mov	r4, r1
   2a3c6:	3206      	adds	r2, #6
   2a3c8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a3ca:	b956      	cbnz	r6, 2a3e2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a3cc:	2101      	movs	r1, #1
   2a3ce:	fa01 f000 	lsl.w	r0, r1, r0
   2a3d2:	68d9      	ldr	r1, [r3, #12]
   2a3d4:	4301      	orrs	r1, r0
   2a3d6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a3d8:	f8cc 4010 	str.w	r4, [ip, #16]
   2a3dc:	53dd      	strh	r5, [r3, r7]
   2a3de:	529d      	strh	r5, [r3, r2]
}
   2a3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a3e2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a3e4:	3104      	adds	r1, #4
   2a3e6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a3e8:	53d8      	strh	r0, [r3, r7]
   2a3ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a3ee:	529e      	strh	r6, [r3, r2]
   2a3f0:	80c5      	strh	r5, [r0, #6]
   2a3f2:	525d      	strh	r5, [r3, r1]
   2a3f4:	e7f4      	b.n	2a3e0 <free_list_add+0x38>

0002a3f6 <free_list_remove_bidx>:
{
   2a3f6:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a3f8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a3fc:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a3fe:	4299      	cmp	r1, r3
   2a400:	f102 0104 	add.w	r1, r2, #4
   2a404:	d10a      	bne.n	2a41c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a406:	2301      	movs	r3, #1
   2a408:	fa03 f202 	lsl.w	r2, r3, r2
   2a40c:	68c3      	ldr	r3, [r0, #12]
   2a40e:	ea23 0302 	bic.w	r3, r3, r2
   2a412:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a414:	2300      	movs	r3, #0
   2a416:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a41a:	bd10      	pop	{r4, pc}
   2a41c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a41e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a422:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a426:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a42a:	80cb      	strh	r3, [r1, #6]
   2a42c:	8082      	strh	r2, [r0, #4]
}
   2a42e:	e7f4      	b.n	2a41a <free_list_remove_bidx+0x24>

0002a430 <free_list_remove>:
{
   2a430:	b508      	push	{r3, lr}
   2a432:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a434:	f7ff ffb3 	bl	2a39e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a438:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a43c:	4618      	mov	r0, r3
}
   2a43e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a442:	f1c2 021f 	rsb	r2, r2, #31
   2a446:	f7ff bfd6 	b.w	2a3f6 <free_list_remove_bidx>

0002a44a <alloc_chunk>:
{
   2a44a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a44e:	fab1 f581 	clz	r5, r1
   2a452:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2a456:	eb00 0889 	add.w	r8, r0, r9, lsl #2
   2a45a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a45e:	4603      	mov	r3, r0
   2a460:	460e      	mov	r6, r1
	if (b->next) {
   2a462:	b1c2      	cbz	r2, 2a496 <alloc_chunk+0x4c>
   2a464:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2a466:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a46a:	4618      	mov	r0, r3
   2a46c:	4621      	mov	r1, r4
   2a46e:	f7ff ff96 	bl	2a39e <chunk_size>
   2a472:	42b0      	cmp	r0, r6
   2a474:	d306      	bcc.n	2a484 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a476:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2a478:	4618      	mov	r0, r3
   2a47a:	f7ff ffbc 	bl	2a3f6 <free_list_remove_bidx>
}
   2a47e:	4620      	mov	r0, r4
   2a480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a484:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2a488:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
   2a48a:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2a48c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a490:	d001      	beq.n	2a496 <alloc_chunk+0x4c>
   2a492:	4282      	cmp	r2, r0
   2a494:	d1e7      	bne.n	2a466 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a496:	f04f 34ff 	mov.w	r4, #4294967295
   2a49a:	f1c5 0220 	rsb	r2, r5, #32
   2a49e:	4094      	lsls	r4, r2
   2a4a0:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a4a2:	4014      	ands	r4, r2
   2a4a4:	d0eb      	beq.n	2a47e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a4a6:	fa94 f2a4 	rbit	r2, r4
   2a4aa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a4ae:	1d11      	adds	r1, r2, #4
   2a4b0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a4b4:	4621      	mov	r1, r4
   2a4b6:	e7df      	b.n	2a478 <alloc_chunk+0x2e>

0002a4b8 <merge_chunks>:
{
   2a4b8:	b538      	push	{r3, r4, r5, lr}
   2a4ba:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a4bc:	f7ff ff6f 	bl	2a39e <chunk_size>
{
   2a4c0:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a4c2:	4604      	mov	r4, r0
   2a4c4:	4611      	mov	r1, r2
   2a4c6:	4618      	mov	r0, r3
   2a4c8:	f7ff ff69 	bl	2a39e <chunk_size>
   2a4cc:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4ce:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a4d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a4d4:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a4d6:	4618      	mov	r0, r3
   2a4d8:	f7ff ff61 	bl	2a39e <chunk_size>
	void *cmem = &buf[c];
   2a4dc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a4de:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a4e2:	bd38      	pop	{r3, r4, r5, pc}

0002a4e4 <split_chunks>:
{
   2a4e4:	b538      	push	{r3, r4, r5, lr}
   2a4e6:	460c      	mov	r4, r1
   2a4e8:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a4ea:	f7ff ff58 	bl	2a39e <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2a4ee:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a4f0:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2a4f2:	4405      	add	r5, r0
   2a4f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a4f8:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a4fa:	8060      	strh	r0, [r4, #2]
   2a4fc:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a500:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a502:	8044      	strh	r4, [r0, #2]
   2a504:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a508:	4618      	mov	r0, r3
   2a50a:	4611      	mov	r1, r2
   2a50c:	f7ff ff47 	bl	2a39e <chunk_size>
	void *cmem = &buf[c];
   2a510:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a512:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a516:	bd38      	pop	{r3, r4, r5, pc}

0002a518 <free_chunk>:
{
   2a518:	b538      	push	{r3, r4, r5, lr}
   2a51a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a51c:	f7ff ff3f 	bl	2a39e <chunk_size>
   2a520:	460c      	mov	r4, r1
   2a522:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a524:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a528:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a52a:	07da      	lsls	r2, r3, #31
   2a52c:	d40a      	bmi.n	2a544 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a52e:	4628      	mov	r0, r5
   2a530:	f7ff ff7e 	bl	2a430 <free_list_remove>
	return c + chunk_size(h, c);
   2a534:	4621      	mov	r1, r4
   2a536:	4628      	mov	r0, r5
   2a538:	f7ff ff31 	bl	2a39e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a53c:	1822      	adds	r2, r4, r0
   2a53e:	4628      	mov	r0, r5
   2a540:	f7ff ffba 	bl	2a4b8 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a544:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a548:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a54a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a54e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a550:	07db      	lsls	r3, r3, #31
   2a552:	d40c      	bmi.n	2a56e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a554:	4628      	mov	r0, r5
   2a556:	f7ff ff6b 	bl	2a430 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a55a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a55e:	4622      	mov	r2, r4
   2a560:	1a61      	subs	r1, r4, r1
   2a562:	4628      	mov	r0, r5
   2a564:	f7ff ffa8 	bl	2a4b8 <merge_chunks>
   2a568:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a56c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a56e:	4621      	mov	r1, r4
   2a570:	4628      	mov	r0, r5
}
   2a572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a576:	f7ff bf17 	b.w	2a3a8 <free_list_add>

0002a57a <sys_heap_alloc>:
{
   2a57a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a57c:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a57e:	b909      	cbnz	r1, 2a584 <sys_heap_alloc+0xa>
		return NULL;
   2a580:	2000      	movs	r0, #0
}
   2a582:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a584:	68ab      	ldr	r3, [r5, #8]
   2a586:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a58a:	d9f9      	bls.n	2a580 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a58c:	310b      	adds	r1, #11
   2a58e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a590:	4621      	mov	r1, r4
   2a592:	4628      	mov	r0, r5
   2a594:	f7ff ff59 	bl	2a44a <alloc_chunk>
	if (c == 0U) {
   2a598:	4606      	mov	r6, r0
   2a59a:	2800      	cmp	r0, #0
   2a59c:	d0f0      	beq.n	2a580 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a59e:	4601      	mov	r1, r0
   2a5a0:	4628      	mov	r0, r5
   2a5a2:	f7ff fefc 	bl	2a39e <chunk_size>
   2a5a6:	42a0      	cmp	r0, r4
   2a5a8:	d907      	bls.n	2a5ba <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a5aa:	4628      	mov	r0, r5
   2a5ac:	1932      	adds	r2, r6, r4
   2a5ae:	f7ff ff99 	bl	2a4e4 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a5b2:	4611      	mov	r1, r2
   2a5b4:	4628      	mov	r0, r5
   2a5b6:	f7ff fef7 	bl	2a3a8 <free_list_add>
	void *cmem = &buf[c];
   2a5ba:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a5be:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a5c0:	8853      	ldrh	r3, [r2, #2]
   2a5c2:	3004      	adds	r0, #4
   2a5c4:	f043 0301 	orr.w	r3, r3, #1
   2a5c8:	8053      	strh	r3, [r2, #2]
	return mem;
   2a5ca:	e7da      	b.n	2a582 <sys_heap_alloc+0x8>

0002a5cc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a5cc:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2a5ce:	f013 0307 	ands.w	r3, r3, #7
   2a5d2:	d105      	bne.n	2a5e0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a5d4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a5d6:	2b00      	cmp	r3, #0
   2a5d8:	bf0c      	ite	eq
   2a5da:	2000      	moveq	r0, #0
   2a5dc:	2003      	movne	r0, #3
   2a5de:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a5e0:	2b02      	cmp	r3, #2
   2a5e2:	d105      	bne.n	2a5f0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a5e4:	8bc0      	ldrh	r0, [r0, #30]
   2a5e6:	fab0 f080 	clz	r0, r0
   2a5ea:	0940      	lsrs	r0, r0, #5
   2a5ec:	0080      	lsls	r0, r0, #2
   2a5ee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a5f0:	2b01      	cmp	r3, #1
   2a5f2:	d105      	bne.n	2a600 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a5f4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a5f6:	2b00      	cmp	r3, #0
   2a5f8:	bf0c      	ite	eq
   2a5fa:	2000      	moveq	r0, #0
   2a5fc:	2005      	movne	r0, #5
   2a5fe:	4770      	bx	lr
	int evt = EVT_NOP;
   2a600:	2000      	movs	r0, #0
}
   2a602:	4770      	bx	lr

0002a604 <validate_args>:
{
   2a604:	b510      	push	{r4, lr}
   2a606:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a608:	b100      	cbz	r0, 2a60c <validate_args+0x8>
   2a60a:	b911      	cbnz	r1, 2a612 <validate_args+0xe>
		return -EINVAL;
   2a60c:	f06f 0015 	mvn.w	r0, #21
}
   2a610:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a612:	1d08      	adds	r0, r1, #4
   2a614:	f000 f82f 	bl	2a676 <sys_notify_validate>
	if ((rv == 0)
   2a618:	2800      	cmp	r0, #0
   2a61a:	d1f9      	bne.n	2a610 <validate_args+0xc>
	    && ((cli->notify.flags
   2a61c:	68a3      	ldr	r3, [r4, #8]
   2a61e:	2b03      	cmp	r3, #3
   2a620:	d9f6      	bls.n	2a610 <validate_args+0xc>
   2a622:	e7f3      	b.n	2a60c <validate_args+0x8>

0002a624 <notify_one>:
{
   2a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a628:	460d      	mov	r5, r1
   2a62a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a62c:	4619      	mov	r1, r3
   2a62e:	1d28      	adds	r0, r5, #4
{
   2a630:	4690      	mov	r8, r2
   2a632:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2a634:	f7e2 fdae 	bl	d194 <sys_notify_finalize>
	if (cb) {
   2a638:	4604      	mov	r4, r0
   2a63a:	b138      	cbz	r0, 2a64c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2a63c:	4633      	mov	r3, r6
   2a63e:	4642      	mov	r2, r8
   2a640:	4629      	mov	r1, r5
   2a642:	4638      	mov	r0, r7
   2a644:	46a4      	mov	ip, r4
}
   2a646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2a64a:	4760      	bx	ip
}
   2a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a650 <onoff_manager_init>:
{
   2a650:	b538      	push	{r3, r4, r5, lr}
   2a652:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2a654:	4605      	mov	r5, r0
   2a656:	b158      	cbz	r0, 2a670 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2a658:	b151      	cbz	r1, 2a670 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2a65a:	680b      	ldr	r3, [r1, #0]
   2a65c:	b143      	cbz	r3, 2a670 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2a65e:	684b      	ldr	r3, [r1, #4]
   2a660:	b133      	cbz	r3, 2a670 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a662:	2220      	movs	r2, #32
   2a664:	2100      	movs	r1, #0
   2a666:	f005 ffcc 	bl	30602 <memset>
	return 0;
   2a66a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2a66c:	612c      	str	r4, [r5, #16]
}
   2a66e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2a670:	f06f 0015 	mvn.w	r0, #21
   2a674:	e7fb      	b.n	2a66e <onoff_manager_init+0x1e>

0002a676 <sys_notify_validate>:
	if (notify == NULL) {
   2a676:	4603      	mov	r3, r0
   2a678:	b140      	cbz	r0, 2a68c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2a67a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2a67c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2a680:	2a02      	cmp	r2, #2
   2a682:	d006      	beq.n	2a692 <sys_notify_validate+0x1c>
   2a684:	2a03      	cmp	r2, #3
   2a686:	d004      	beq.n	2a692 <sys_notify_validate+0x1c>
   2a688:	2a01      	cmp	r2, #1
   2a68a:	d005      	beq.n	2a698 <sys_notify_validate+0x22>
   2a68c:	f06f 0015 	mvn.w	r0, #21
}
   2a690:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2a692:	681a      	ldr	r2, [r3, #0]
   2a694:	2a00      	cmp	r2, #0
   2a696:	d0f9      	beq.n	2a68c <sys_notify_validate+0x16>
		notify->result = 0;
   2a698:	2000      	movs	r0, #0
   2a69a:	6098      	str	r0, [r3, #8]
   2a69c:	4770      	bx	lr

0002a69e <outs>:
{
   2a69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a6a2:	4607      	mov	r7, r0
   2a6a4:	4688      	mov	r8, r1
   2a6a6:	4615      	mov	r5, r2
   2a6a8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a6aa:	4614      	mov	r4, r2
   2a6ac:	42b4      	cmp	r4, r6
   2a6ae:	d305      	bcc.n	2a6bc <outs+0x1e>
   2a6b0:	b10e      	cbz	r6, 2a6b6 <outs+0x18>
	return (int)count;
   2a6b2:	1b60      	subs	r0, r4, r5
   2a6b4:	e008      	b.n	2a6c8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a6b6:	7823      	ldrb	r3, [r4, #0]
   2a6b8:	2b00      	cmp	r3, #0
   2a6ba:	d0fa      	beq.n	2a6b2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2a6bc:	4641      	mov	r1, r8
   2a6be:	f814 0b01 	ldrb.w	r0, [r4], #1
   2a6c2:	47b8      	blx	r7
		if (rc < 0) {
   2a6c4:	2800      	cmp	r0, #0
   2a6c6:	daf1      	bge.n	2a6ac <outs+0xe>
}
   2a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a6cc <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2a6cc:	4040      	eors	r0, r0
   2a6ce:	f380 8811 	msr	BASEPRI, r0
   2a6d2:	f04f 0004 	mov.w	r0, #4
   2a6d6:	df02      	svc	2
}
   2a6d8:	4770      	bx	lr

0002a6da <assert_print>:

void assert_print(const char *fmt, ...)
{
   2a6da:	b40f      	push	{r0, r1, r2, r3}
   2a6dc:	b507      	push	{r0, r1, r2, lr}
   2a6de:	a904      	add	r1, sp, #16
   2a6e0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a6e4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2a6e6:	f7e2 f941 	bl	c96c <vprintk>

	va_end(ap);
}
   2a6ea:	b003      	add	sp, #12
   2a6ec:	f85d eb04 	ldr.w	lr, [sp], #4
   2a6f0:	b004      	add	sp, #16
   2a6f2:	4770      	bx	lr

0002a6f4 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2a6f4:	68c3      	ldr	r3, [r0, #12]
   2a6f6:	6802      	ldr	r2, [r0, #0]
   2a6f8:	4293      	cmp	r3, r2
   2a6fa:	d904      	bls.n	2a706 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   2a6fc:	3b01      	subs	r3, #1
   2a6fe:	1a9a      	subs	r2, r3, r2
		return false;
   2a700:	2000      	movs	r0, #0
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a702:	600a      	str	r2, [r1, #0]
}
   2a704:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a706:	6a40      	ldr	r0, [r0, #36]	; 0x24
	} else if (!buffer->rd_idx) {
   2a708:	b913      	cbnz	r3, 2a710 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2a70a:	3801      	subs	r0, #1
   2a70c:	1a82      	subs	r2, r0, r2
		return false;
   2a70e:	e7f7      	b.n	2a700 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   2a710:	1a82      	subs	r2, r0, r2
	return true;
   2a712:	2001      	movs	r0, #1
   2a714:	e7f5      	b.n	2a702 <free_space+0xe>

0002a716 <get_usage>:
{
   2a716:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2a718:	a901      	add	r1, sp, #4
{
   2a71a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2a71c:	f7ff ffea 	bl	2a6f4 <free_space>
   2a720:	b120      	cbz	r0, 2a72c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2a722:	9b01      	ldr	r3, [sp, #4]
   2a724:	68e2      	ldr	r2, [r4, #12]
   2a726:	3b01      	subs	r3, #1
   2a728:	4413      	add	r3, r2
   2a72a:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2a72c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2a72e:	9b01      	ldr	r3, [sp, #4]
   2a730:	1ac0      	subs	r0, r0, r3
}
   2a732:	3801      	subs	r0, #1
   2a734:	b002      	add	sp, #8
   2a736:	bd10      	pop	{r4, pc}

0002a738 <idx_inc>:
{
   2a738:	b510      	push	{r4, lr}
   2a73a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2a73c:	1888      	adds	r0, r1, r2
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2a73e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   2a740:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2a742:	07d2      	lsls	r2, r2, #31
   2a744:	d502      	bpl.n	2a74c <idx_inc+0x14>
		return i & (buffer->size - 1);
   2a746:	3b01      	subs	r3, #1
   2a748:	4018      	ands	r0, r3
}
   2a74a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2a74c:	4298      	cmp	r0, r3
   2a74e:	bf28      	it	cs
   2a750:	1ac0      	subcs	r0, r0, r3
   2a752:	e7fa      	b.n	2a74a <idx_inc+0x12>

0002a754 <add_skip_item>:
{
   2a754:	b538      	push	{r3, r4, r5, lr}
   2a756:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a758:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   2a75a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a75c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2a75e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2a762:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a766:	6801      	ldr	r1, [r0, #0]
   2a768:	462a      	mov	r2, r5
{
   2a76a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a76c:	f7ff ffe4 	bl	2a738 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2a770:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2a772:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2a774:	462a      	mov	r2, r5
   2a776:	4620      	mov	r0, r4
   2a778:	f7ff ffde 	bl	2a738 <idx_inc>
   2a77c:	6060      	str	r0, [r4, #4]
}
   2a77e:	bd38      	pop	{r3, r4, r5, pc}

0002a780 <max_utilization_update>:
{
   2a780:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2a782:	6903      	ldr	r3, [r0, #16]
{
   2a784:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2a786:	075b      	lsls	r3, r3, #29
   2a788:	d506      	bpl.n	2a798 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2a78a:	6a85      	ldr	r5, [r0, #40]	; 0x28
   2a78c:	f7ff ffc3 	bl	2a716 <get_usage>
   2a790:	4285      	cmp	r5, r0
   2a792:	bf2c      	ite	cs
   2a794:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2a796:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   2a798:	bd38      	pop	{r3, r4, r5, pc}

0002a79a <drop_item_locked>:
{
   2a79a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a79e:	461f      	mov	r7, r3
	*user_packet = false;
   2a7a0:	2300      	movs	r3, #0
   2a7a2:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2a7a4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2a7a8:	f8d0 9020 	ldr.w	r9, [r0, #32]
{
   2a7ac:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
   2a7ae:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
   2a7b2:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
   2a7b4:	f003 0303 	and.w	r3, r3, #3
   2a7b8:	2b02      	cmp	r3, #2
{
   2a7ba:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2a7bc:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2a7c0:	d103      	bne.n	2a7ca <drop_item_locked+0x30>
		return item->skip.len;
   2a7c2:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2a7c6:	08ad      	lsrs	r5, r5, #2
   2a7c8:	d12e      	bne.n	2a828 <drop_item_locked+0x8e>
   2a7ca:	4630      	mov	r0, r6
   2a7cc:	69e3      	ldr	r3, [r4, #28]
   2a7ce:	4798      	blx	r3
   2a7d0:	4605      	mov	r5, r0
	} else if (allow_drop) {
   2a7d2:	f1b8 0f00 	cmp.w	r8, #0
   2a7d6:	d038      	beq.n	2a84a <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   2a7d8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2a7dc:	079b      	lsls	r3, r3, #30
   2a7de:	d531      	bpl.n	2a844 <drop_item_locked+0xaa>
			add_skip_item(buffer, free_wlen + 1);
   2a7e0:	4620      	mov	r0, r4
   2a7e2:	f10b 0101 	add.w	r1, fp, #1
   2a7e6:	f7ff ffb5 	bl	2a754 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2a7ea:	6861      	ldr	r1, [r4, #4]
   2a7ec:	462a      	mov	r2, r5
   2a7ee:	4620      	mov	r0, r4
   2a7f0:	f7ff ffa2 	bl	2a738 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7f4:	6821      	ldr	r1, [r4, #0]
   2a7f6:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2a7f8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a7fa:	4620      	mov	r0, r4
   2a7fc:	f7ff ff9c 	bl	2a738 <idx_inc>
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a800:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2a802:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a804:	68e1      	ldr	r1, [r4, #12]
   2a806:	4620      	mov	r0, r4
   2a808:	f7ff ff96 	bl	2a738 <idx_inc>
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2a80c:	6a23      	ldr	r3, [r4, #32]
	if (item->hdr.busy && !item->hdr.valid) {
   2a80e:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   2a812:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2a816:	f002 0203 	and.w	r2, r2, #3
   2a81a:	2a02      	cmp	r2, #2
   2a81c:	d10e      	bne.n	2a83c <drop_item_locked+0xa2>
		return item->skip.len;
   2a81e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			if (skip_wlen) {
   2a822:	089b      	lsrs	r3, r3, #2
   2a824:	d00a      	beq.n	2a83c <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   2a826:	441d      	add	r5, r3
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2a828:	68e1      	ldr	r1, [r4, #12]
   2a82a:	462a      	mov	r2, r5
   2a82c:	4620      	mov	r0, r4
   2a82e:	f7ff ff83 	bl	2a738 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2a832:	e9c4 0002 	strd	r0, r0, [r4, #8]
}
   2a836:	4630      	mov	r0, r6
   2a838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   2a83c:	4630      	mov	r0, r6
   2a83e:	69e3      	ldr	r3, [r4, #28]
   2a840:	4798      	blx	r3
   2a842:	4405      	add	r5, r0
			*user_packet = true;
   2a844:	2301      	movs	r3, #1
   2a846:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   2a848:	e7ee      	b.n	2a828 <drop_item_locked+0x8e>
		item = NULL;
   2a84a:	4646      	mov	r6, r8
	return item;
   2a84c:	e7f3      	b.n	2a836 <drop_item_locked+0x9c>

0002a84e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2a84e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2a852:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2a854:	bf88      	it	hi
   2a856:	6a42      	ldrhi	r2, [r0, #36]	; 0x24
   2a858:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2a85a:	1e18      	subs	r0, r3, #0
   2a85c:	bf18      	it	ne
   2a85e:	2001      	movne	r0, #1
   2a860:	4770      	bx	lr

0002a862 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2a862:	4770      	bx	lr

0002a864 <nordicsemi_nrf53_init>:
{
   2a864:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a866:	f04f 0320 	mov.w	r3, #32
   2a86a:	f3ef 8511 	mrs	r5, BASEPRI
   2a86e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a872:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   2a876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   2a87a:	2401      	movs	r4, #1
   2a87c:	2202      	movs	r2, #2
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   2a87e:	4621      	mov	r1, r4
   2a880:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
   2a884:	2021      	movs	r0, #33	; 0x21
   2a886:	f8c3 4704 	str.w	r4, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   2a88a:	f8c3 4904 	str.w	r4, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   2a88e:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
   2a892:	f7e3 fc79 	bl	e188 <soc_secure_gpio_pin_mcu_select>
   2a896:	4621      	mov	r1, r4
   2a898:	2020      	movs	r0, #32
   2a89a:	f7e3 fc75 	bl	e188 <soc_secure_gpio_pin_mcu_select>
   2a89e:	4621      	mov	r1, r4
   2a8a0:	200b      	movs	r0, #11
   2a8a2:	f7e3 fc71 	bl	e188 <soc_secure_gpio_pin_mcu_select>
   2a8a6:	4621      	mov	r1, r4
   2a8a8:	200a      	movs	r0, #10
   2a8aa:	f7e3 fc6d 	bl	e188 <soc_secure_gpio_pin_mcu_select>
	__asm__ volatile(
   2a8ae:	f385 8811 	msr	BASEPRI, r5
   2a8b2:	f3bf 8f6f 	isb	sy
}
   2a8b6:	2000      	movs	r0, #0
   2a8b8:	bd38      	pop	{r3, r4, r5, pc}

0002a8ba <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2a8ba:	2806      	cmp	r0, #6
   2a8bc:	d108      	bne.n	2a8d0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2a8be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2a8c2:	2201      	movs	r2, #1
   2a8c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a8c8:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a8cc:	bf20      	wfe
    while (true)
   2a8ce:	e7fd      	b.n	2a8cc <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2a8d0:	4770      	bx	lr

0002a8d2 <pm_state_exit_post_ops>:
   2a8d2:	2300      	movs	r3, #0
   2a8d4:	f383 8811 	msr	BASEPRI, r3
   2a8d8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a8dc:	4770      	bx	lr

0002a8de <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2a8de:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2a8e0:	ab01      	add	r3, sp, #4
   2a8e2:	f004 f8bf 	bl	2ea64 <tfm_platform_mem_read>

	switch (status) {
   2a8e6:	2802      	cmp	r0, #2
   2a8e8:	d00a      	beq.n	2a900 <soc_secure_mem_read+0x22>
   2a8ea:	2803      	cmp	r0, #3
   2a8ec:	d00b      	beq.n	2a906 <soc_secure_mem_read+0x28>
   2a8ee:	b968      	cbnz	r0, 2a90c <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2a8f0:	9801      	ldr	r0, [sp, #4]
   2a8f2:	3800      	subs	r0, #0
   2a8f4:	bf18      	it	ne
   2a8f6:	2001      	movne	r0, #1
   2a8f8:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2a8fa:	b003      	add	sp, #12
   2a8fc:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2a900:	f06f 0015 	mvn.w	r0, #21
   2a904:	e7f9      	b.n	2a8fa <soc_secure_mem_read+0x1c>
	switch (status) {
   2a906:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a90a:	e7f6      	b.n	2a8fa <soc_secure_mem_read+0x1c>
		return -EPERM;
   2a90c:	f04f 30ff 	mov.w	r0, #4294967295
   2a910:	e7f3      	b.n	2a8fa <soc_secure_mem_read+0x1c>

0002a912 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   2a912:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   2a914:	075b      	lsls	r3, r3, #29
   2a916:	d40b      	bmi.n	2a930 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2a918:	6803      	ldr	r3, [r0, #0]
   2a91a:	8842      	ldrh	r2, [r0, #2]
   2a91c:	f3c3 2349 	ubfx	r3, r3, #9, #10
   2a920:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   2a924:	1898      	adds	r0, r3, r2
   2a926:	3017      	adds	r0, #23
   2a928:	f020 0007 	bic.w	r0, r0, #7
   2a92c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2a92e:	4770      	bx	lr
	return 0;
   2a930:	2000      	movs	r0, #0
}
   2a932:	4770      	bx	lr

0002a934 <dummy_timestamp>:
}
   2a934:	2000      	movs	r0, #0
   2a936:	4770      	bx	lr

0002a938 <default_get_timestamp>:
   2a938:	f003 bf87 	b.w	2e84a <sys_clock_cycle_get_32>

0002a93c <atomic_inc>:
{
   2a93c:	4603      	mov	r3, r0
}
   2a93e:	e8d3 0fef 	ldaex	r0, [r3]
   2a942:	1c42      	adds	r2, r0, #1
   2a944:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2a948:	2900      	cmp	r1, #0
   2a94a:	d1f8      	bne.n	2a93e <atomic_inc+0x2>
   2a94c:	4770      	bx	lr

0002a94e <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2a94e:	2001      	movs	r0, #1
   2a950:	f7e3 bd44 	b.w	e3dc <z_log_dropped>

0002a954 <z_log_get_tag>:
}
   2a954:	2000      	movs	r0, #0
   2a956:	4770      	bx	lr

0002a958 <z_cbprintf_cpy>:
{
   2a958:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2a95a:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2a95e:	1b9b      	subs	r3, r3, r6
   2a960:	428b      	cmp	r3, r1
{
   2a962:	460c      	mov	r4, r1
   2a964:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2a966:	d30a      	bcc.n	2a97e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2a968:	6813      	ldr	r3, [r2, #0]
   2a96a:	460a      	mov	r2, r1
   2a96c:	4601      	mov	r1, r0
   2a96e:	1998      	adds	r0, r3, r6
   2a970:	f005 fe0d 	bl	3058e <memcpy>
	return len;
   2a974:	4620      	mov	r0, r4
	desc->off += len;
   2a976:	68ab      	ldr	r3, [r5, #8]
   2a978:	4423      	add	r3, r4
   2a97a:	60ab      	str	r3, [r5, #8]
}
   2a97c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2a97e:	f06f 001b 	mvn.w	r0, #27
   2a982:	e7fb      	b.n	2a97c <z_cbprintf_cpy+0x24>

0002a984 <z_log_msg_finalize>:
{
   2a984:	b570      	push	{r4, r5, r6, lr}
   2a986:	460e      	mov	r6, r1
   2a988:	4615      	mov	r5, r2
   2a98a:	4619      	mov	r1, r3
	if (!msg) {
   2a98c:	4604      	mov	r4, r0
   2a98e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2a992:	b918      	cbnz	r0, 2a99c <z_log_msg_finalize+0x18>
}
   2a994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2a998:	f7e3 bd20 	b.w	e3dc <z_log_dropped>
	if (data) {
   2a99c:	b12b      	cbz	r3, 2a9aa <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   2a99e:	3010      	adds	r0, #16
   2a9a0:	f3c5 2349 	ubfx	r3, r5, #9, #10
   2a9a4:	4418      	add	r0, r3
   2a9a6:	f005 fdf2 	bl	3058e <memcpy>
	msg->hdr.source = source;
   2a9aa:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2a9ae:	4620      	mov	r0, r4
}
   2a9b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   2a9b4:	f7e3 bf36 	b.w	e824 <z_log_msg_commit>

0002a9b8 <buffer_write>:
{
   2a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a9ba:	4606      	mov	r6, r0
   2a9bc:	460d      	mov	r5, r1
   2a9be:	4614      	mov	r4, r2
   2a9c0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2a9c2:	4621      	mov	r1, r4
   2a9c4:	4628      	mov	r0, r5
   2a9c6:	463a      	mov	r2, r7
   2a9c8:	47b0      	blx	r6
	} while (len != 0);
   2a9ca:	1a24      	subs	r4, r4, r0
		buf += processed;
   2a9cc:	4405      	add	r5, r0
	} while (len != 0);
   2a9ce:	d1f8      	bne.n	2a9c2 <buffer_write+0xa>
}
   2a9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a9d2 <cbvprintf>:
{
   2a9d2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2a9d4:	2400      	movs	r4, #0
   2a9d6:	9400      	str	r4, [sp, #0]
   2a9d8:	f7e2 fc80 	bl	d2dc <z_cbvprintf_impl>
}
   2a9dc:	b002      	add	sp, #8
   2a9de:	bd10      	pop	{r4, pc}

0002a9e0 <log_output_flush>:
{
   2a9e0:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2a9e2:	6842      	ldr	r2, [r0, #4]
{
   2a9e4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2a9e6:	e9d2 2300 	ldrd	r2, r3, [r2]
   2a9ea:	6881      	ldr	r1, [r0, #8]
   2a9ec:	6800      	ldr	r0, [r0, #0]
   2a9ee:	f7ff ffe3 	bl	2a9b8 <buffer_write>
	output->control_block->offset = 0;
   2a9f2:	2200      	movs	r2, #0
   2a9f4:	6863      	ldr	r3, [r4, #4]
   2a9f6:	601a      	str	r2, [r3, #0]
}
   2a9f8:	bd10      	pop	{r4, pc}

0002a9fa <cr_out_func>:
	if (c == '\n') {
   2a9fa:	280a      	cmp	r0, #10
{
   2a9fc:	b538      	push	{r3, r4, r5, lr}
   2a9fe:	4604      	mov	r4, r0
   2aa00:	460d      	mov	r5, r1
	if (c == '\n') {
   2aa02:	d102      	bne.n	2aa0a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2aa04:	200d      	movs	r0, #13
   2aa06:	f7e3 ffd9 	bl	e9bc <out_func>
	out_func(c, ctx);
   2aa0a:	4629      	mov	r1, r5
   2aa0c:	4620      	mov	r0, r4
   2aa0e:	f7e3 ffd5 	bl	e9bc <out_func>
}
   2aa12:	2000      	movs	r0, #0
   2aa14:	bd38      	pop	{r3, r4, r5, pc}

0002aa16 <nvs_flash_rd>:
{
   2aa16:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2aa18:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aa1a:	8984      	ldrh	r4, [r0, #12]
   2aa1c:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2aa1e:	fa16 f181 	uxtah	r1, r6, r1
   2aa22:	fb05 1104 	mla	r1, r5, r4, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   2aa26:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return api->read(dev, offset, data, len);
   2aa28:	6884      	ldr	r4, [r0, #8]
   2aa2a:	6824      	ldr	r4, [r4, #0]
   2aa2c:	46a4      	mov	ip, r4
}
   2aa2e:	bc70      	pop	{r4, r5, r6}
   2aa30:	4760      	bx	ip

0002aa32 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2aa32:	680b      	ldr	r3, [r1, #0]
   2aa34:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2aa38:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2aa3a:	89c0      	ldrh	r0, [r0, #14]
   2aa3c:	0c1a      	lsrs	r2, r3, #16
   2aa3e:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2aa42:	bf04      	itt	eq
   2aa44:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2aa48:	600b      	streq	r3, [r1, #0]
}
   2aa4a:	4770      	bx	lr

0002aa4c <nvs_flash_block_cmp>:
{
   2aa4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aa50:	4681      	mov	r9, r0
   2aa52:	460e      	mov	r6, r1
   2aa54:	4617      	mov	r7, r2
   2aa56:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aa5a:	b089      	sub	sp, #36	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aa5c:	681d      	ldr	r5, [r3, #0]
   2aa5e:	426d      	negs	r5, r5
	block_size =
   2aa60:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2aa64:	b91c      	cbnz	r4, 2aa6e <nvs_flash_block_cmp+0x22>
	return 0;
   2aa66:	4620      	mov	r0, r4
}
   2aa68:	b009      	add	sp, #36	; 0x24
   2aa6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aa6e:	42ac      	cmp	r4, r5
   2aa70:	46a0      	mov	r8, r4
   2aa72:	bf28      	it	cs
   2aa74:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2aa76:	466a      	mov	r2, sp
   2aa78:	4643      	mov	r3, r8
   2aa7a:	4631      	mov	r1, r6
   2aa7c:	4648      	mov	r0, r9
   2aa7e:	f7ff ffca 	bl	2aa16 <nvs_flash_rd>
		if (rc) {
   2aa82:	2800      	cmp	r0, #0
   2aa84:	d1f0      	bne.n	2aa68 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2aa86:	4642      	mov	r2, r8
   2aa88:	4669      	mov	r1, sp
   2aa8a:	4638      	mov	r0, r7
   2aa8c:	f005 fd6f 	bl	3056e <memcmp>
		if (rc) {
   2aa90:	b920      	cbnz	r0, 2aa9c <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2aa92:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aa96:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2aa98:	4447      	add	r7, r8
   2aa9a:	e7e3      	b.n	2aa64 <nvs_flash_block_cmp+0x18>
			return 1;
   2aa9c:	2001      	movs	r0, #1
   2aa9e:	e7e3      	b.n	2aa68 <nvs_flash_block_cmp+0x1c>

0002aaa0 <nvs_ate_crc8_update>:
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aaa0:	4601      	mov	r1, r0
{
   2aaa2:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aaa4:	2207      	movs	r2, #7
{
   2aaa6:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2aaa8:	20ff      	movs	r0, #255	; 0xff
   2aaaa:	f7e2 fb9f 	bl	d1ec <crc8_ccitt>
	entry->crc8 = crc8;
   2aaae:	71e0      	strb	r0, [r4, #7]
}
   2aab0:	bd10      	pop	{r4, pc}

0002aab2 <nvs_flash_cmp_const>:
{
   2aab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aab6:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aab8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   2aaba:	b088      	sub	sp, #32
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aabc:	681d      	ldr	r5, [r3, #0]
{
   2aabe:	4607      	mov	r7, r0
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2aac0:	426d      	negs	r5, r5
	block_size =
   2aac2:	f005 0520 	and.w	r5, r5, #32
{
   2aac6:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2aac8:	4668      	mov	r0, sp
{
   2aaca:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2aacc:	462a      	mov	r2, r5
   2aace:	f005 fd98 	bl	30602 <memset>
	while (len) {
   2aad2:	b91c      	cbnz	r4, 2aadc <nvs_flash_cmp_const+0x2a>
	return 0;
   2aad4:	4620      	mov	r0, r4
}
   2aad6:	b008      	add	sp, #32
   2aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2aadc:	42ac      	cmp	r4, r5
   2aade:	46a0      	mov	r8, r4
   2aae0:	bf28      	it	cs
   2aae2:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2aae4:	466a      	mov	r2, sp
   2aae6:	4643      	mov	r3, r8
   2aae8:	4631      	mov	r1, r6
   2aaea:	4638      	mov	r0, r7
   2aaec:	f7ff ffae 	bl	2aa4c <nvs_flash_block_cmp>
		if (rc) {
   2aaf0:	2800      	cmp	r0, #0
   2aaf2:	d1f0      	bne.n	2aad6 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2aaf4:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2aaf8:	4446      	add	r6, r8
   2aafa:	e7ea      	b.n	2aad2 <nvs_flash_cmp_const+0x20>

0002aafc <nvs_flash_erase_sector>:
{
   2aafc:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2aafe:	8982      	ldrh	r2, [r0, #12]
   2ab00:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2ab02:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ab04:	0c09      	lsrs	r1, r1, #16
{
   2ab06:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ab08:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2ab0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	addr &= ADDR_SECT_MASK;
   2ab0e:	042d      	lsls	r5, r5, #16
	rc = api->erase(dev, offset, size);
   2ab10:	6883      	ldr	r3, [r0, #8]
   2ab12:	689b      	ldr	r3, [r3, #8]
   2ab14:	4798      	blx	r3
	if (rc) {
   2ab16:	b950      	cbnz	r0, 2ab2e <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2ab18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2ab1a:	4629      	mov	r1, r5
   2ab1c:	4620      	mov	r0, r4
   2ab1e:	89a3      	ldrh	r3, [r4, #12]
   2ab20:	7912      	ldrb	r2, [r2, #4]
   2ab22:	f7ff ffc6 	bl	2aab2 <nvs_flash_cmp_const>
		rc = -ENXIO;
   2ab26:	2800      	cmp	r0, #0
   2ab28:	bf18      	it	ne
   2ab2a:	f06f 0005 	mvnne.w	r0, #5
}
   2ab2e:	bd38      	pop	{r3, r4, r5, pc}

0002ab30 <z_log_msg_static_create.constprop.0>:
   2ab30:	2300      	movs	r3, #0
   2ab32:	f7e3 bebd 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002ab36 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2ab36:	7803      	ldrb	r3, [r0, #0]
   2ab38:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2ab3a:	bf81      	itttt	hi
   2ab3c:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2ab40:	18c9      	addhi	r1, r1, r3
   2ab42:	425b      	neghi	r3, r3
   2ab44:	4019      	andhi	r1, r3
}
   2ab46:	4608      	mov	r0, r1
   2ab48:	4770      	bx	lr

0002ab4a <nvs_ate_valid>:
{
   2ab4a:	b570      	push	{r4, r5, r6, lr}
   2ab4c:	460c      	mov	r4, r1
   2ab4e:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab50:	2108      	movs	r1, #8
   2ab52:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ab54:	f7ff ffef 	bl	2ab36 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab58:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab5a:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ab5c:	4621      	mov	r1, r4
   2ab5e:	20ff      	movs	r0, #255	; 0xff
   2ab60:	f7e2 fb44 	bl	d1ec <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2ab64:	79e3      	ldrb	r3, [r4, #7]
   2ab66:	4283      	cmp	r3, r0
   2ab68:	d107      	bne.n	2ab7a <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2ab6a:	89aa      	ldrh	r2, [r5, #12]
   2ab6c:	8863      	ldrh	r3, [r4, #2]
   2ab6e:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2ab70:	4283      	cmp	r3, r0
   2ab72:	bf2c      	ite	cs
   2ab74:	2000      	movcs	r0, #0
   2ab76:	2001      	movcc	r0, #1
}
   2ab78:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2ab7a:	2000      	movs	r0, #0
   2ab7c:	e7fc      	b.n	2ab78 <nvs_ate_valid+0x2e>

0002ab7e <nvs_close_ate_valid>:
{
   2ab7e:	b538      	push	{r3, r4, r5, lr}
   2ab80:	4605      	mov	r5, r0
   2ab82:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2ab84:	f7ff ffe1 	bl	2ab4a <nvs_ate_valid>
   2ab88:	b1a0      	cbz	r0, 2abb4 <nvs_close_ate_valid+0x36>
   2ab8a:	88a0      	ldrh	r0, [r4, #4]
   2ab8c:	b998      	cbnz	r0, 2abb6 <nvs_close_ate_valid+0x38>
   2ab8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ab92:	8822      	ldrh	r2, [r4, #0]
   2ab94:	429a      	cmp	r2, r3
   2ab96:	d10d      	bne.n	2abb4 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab98:	2108      	movs	r1, #8
   2ab9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2ab9c:	f7ff ffcb 	bl	2ab36 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2aba0:	8862      	ldrh	r2, [r4, #2]
   2aba2:	89ab      	ldrh	r3, [r5, #12]
   2aba4:	1a9b      	subs	r3, r3, r2
   2aba6:	fbb3 f2f0 	udiv	r2, r3, r0
   2abaa:	fb02 3010 	mls	r0, r2, r0, r3
   2abae:	fab0 f080 	clz	r0, r0
   2abb2:	0940      	lsrs	r0, r0, #5
}
   2abb4:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2abb6:	2000      	movs	r0, #0
   2abb8:	e7fc      	b.n	2abb4 <nvs_close_ate_valid+0x36>

0002abba <nvs_prev_ate>:
{
   2abba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2abbc:	4604      	mov	r4, r0
   2abbe:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2abc0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2abc2:	2108      	movs	r1, #8
   2abc4:	f7ff ffb7 	bl	2ab36 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abc8:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2abca:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abcc:	6829      	ldr	r1, [r5, #0]
   2abce:	4620      	mov	r0, r4
   2abd0:	f7ff ff21 	bl	2aa16 <nvs_flash_rd>
	if (rc) {
   2abd4:	4606      	mov	r6, r0
   2abd6:	2800      	cmp	r0, #0
   2abd8:	d136      	bne.n	2ac48 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2abda:	682b      	ldr	r3, [r5, #0]
   2abdc:	443b      	add	r3, r7
   2abde:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2abe0:	89a2      	ldrh	r2, [r4, #12]
   2abe2:	b299      	uxth	r1, r3
   2abe4:	1bd2      	subs	r2, r2, r7
   2abe6:	4291      	cmp	r1, r2
   2abe8:	d12e      	bne.n	2ac48 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2abea:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2abec:	bf09      	itett	eq
   2abee:	89e2      	ldrheq	r2, [r4, #14]
		*addr -= (1 << ADDR_SECT_SHIFT);
   2abf0:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2abf4:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2abf8:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2abfc:	4620      	mov	r0, r4
   2abfe:	2308      	movs	r3, #8
   2ac00:	466a      	mov	r2, sp
   2ac02:	6029      	str	r1, [r5, #0]
   2ac04:	f7ff ff07 	bl	2aa16 <nvs_flash_rd>
	if (rc) {
   2ac08:	b9e8      	cbnz	r0, 2ac46 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2ac0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ac0c:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ac0e:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2ac10:	f813 1b01 	ldrb.w	r1, [r3], #1
   2ac14:	428a      	cmp	r2, r1
   2ac16:	d10c      	bne.n	2ac32 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ac18:	3001      	adds	r0, #1
   2ac1a:	2808      	cmp	r0, #8
   2ac1c:	d1f8      	bne.n	2ac10 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2ac1e:	6863      	ldr	r3, [r4, #4]
   2ac20:	e005      	b.n	2ac2e <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2ac22:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2ac24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2ac28:	0c1b      	lsrs	r3, r3, #16
   2ac2a:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2ac2c:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2ac2e:	602b      	str	r3, [r5, #0]
		return 0;
   2ac30:	e00a      	b.n	2ac48 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ac32:	4669      	mov	r1, sp
   2ac34:	4620      	mov	r0, r4
   2ac36:	f7ff ffa2 	bl	2ab7e <nvs_close_ate_valid>
   2ac3a:	2800      	cmp	r0, #0
   2ac3c:	d1f1      	bne.n	2ac22 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2ac3e:	4629      	mov	r1, r5
   2ac40:	4620      	mov	r0, r4
   2ac42:	f7e4 f94b 	bl	eedc <nvs_recover_last_ate>
   2ac46:	4606      	mov	r6, r0
}
   2ac48:	4630      	mov	r0, r6
   2ac4a:	b003      	add	sp, #12
   2ac4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac4e <nvs_flash_al_wrt>:
{
   2ac4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac52:	4607      	mov	r7, r0
   2ac54:	4690      	mov	r8, r2
	if (!len) {
   2ac56:	461e      	mov	r6, r3
{
   2ac58:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   2ac5a:	b91b      	cbnz	r3, 2ac64 <nvs_flash_al_wrt+0x16>
		return 0;
   2ac5c:	2000      	movs	r0, #0
}
   2ac5e:	b009      	add	sp, #36	; 0x24
   2ac60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2ac64:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac66:	8983      	ldrh	r3, [r0, #12]
   2ac68:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ac6a:	fa14 f181 	uxtah	r1, r4, r1
   2ac6e:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ac74:	681d      	ldr	r5, [r3, #0]
   2ac76:	426d      	negs	r5, r5
	if (blen > 0) {
   2ac78:	4035      	ands	r5, r6
   2ac7a:	d00c      	beq.n	2ac96 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ac7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ac7e:	6883      	ldr	r3, [r0, #8]
   2ac80:	4621      	mov	r1, r4
   2ac82:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2ac86:	462b      	mov	r3, r5
   2ac88:	47c8      	blx	r9
		if (rc) {
   2ac8a:	2800      	cmp	r0, #0
   2ac8c:	d1e7      	bne.n	2ac5e <nvs_flash_al_wrt+0x10>
	if (len) {
   2ac8e:	1b76      	subs	r6, r6, r5
   2ac90:	d0e4      	beq.n	2ac5c <nvs_flash_al_wrt+0xe>
		offset += blen;
   2ac92:	442c      	add	r4, r5
		data8 += blen;
   2ac94:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2ac96:	2320      	movs	r3, #32
   2ac98:	4632      	mov	r2, r6
   2ac9a:	4641      	mov	r1, r8
   2ac9c:	4668      	mov	r0, sp
   2ac9e:	f005 fc83 	bl	305a8 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2aca2:	6afd      	ldr	r5, [r7, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   2aca4:	eb0d 0006 	add.w	r0, sp, r6
   2aca8:	682a      	ldr	r2, [r5, #0]
   2acaa:	7929      	ldrb	r1, [r5, #4]
   2acac:	1b92      	subs	r2, r2, r6
   2acae:	f005 fca8 	bl	30602 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   2acb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   2acb4:	682b      	ldr	r3, [r5, #0]
   2acb6:	6882      	ldr	r2, [r0, #8]
   2acb8:	4621      	mov	r1, r4
   2acba:	6855      	ldr	r5, [r2, #4]
   2acbc:	466a      	mov	r2, sp
   2acbe:	47a8      	blx	r5
	return rc;
   2acc0:	e7cd      	b.n	2ac5e <nvs_flash_al_wrt+0x10>

0002acc2 <nvs_flash_ate_wrt>:
{
   2acc2:	b510      	push	{r4, lr}
   2acc4:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2acc6:	2308      	movs	r3, #8
   2acc8:	6841      	ldr	r1, [r0, #4]
{
   2acca:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2accc:	f7ff ffbf 	bl	2ac4e <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2acd0:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2acd2:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2acd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2acd6:	f7ff ff2e 	bl	2ab36 <nvs_al_size.isra.0>
   2acda:	6863      	ldr	r3, [r4, #4]
   2acdc:	1a1b      	subs	r3, r3, r0
   2acde:	6063      	str	r3, [r4, #4]
}
   2ace0:	4610      	mov	r0, r2
   2ace2:	bd10      	pop	{r4, pc}

0002ace4 <nvs_add_gc_done_ate>:
	gc_done_ate.id = 0xffff;
   2ace4:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   2ace8:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2acea:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2acee:	2300      	movs	r3, #0
{
   2acf0:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2acf2:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2acf6:	6883      	ldr	r3, [r0, #8]
	nvs_ate_crc8_update(&gc_done_ate);
   2acf8:	4668      	mov	r0, sp
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2acfa:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2acfe:	f7ff fecf 	bl	2aaa0 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2ad02:	4669      	mov	r1, sp
   2ad04:	4620      	mov	r0, r4
   2ad06:	f7ff ffdc 	bl	2acc2 <nvs_flash_ate_wrt>
}
   2ad0a:	b002      	add	sp, #8
   2ad0c:	bd10      	pop	{r4, pc}

0002ad0e <nvs_gc>:
{
   2ad0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad12:	2108      	movs	r1, #8
{
   2ad14:	b095      	sub	sp, #84	; 0x54
   2ad16:	4604      	mov	r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ad1a:	f7ff ff0c 	bl	2ab36 <nvs_al_size.isra.0>
   2ad1e:	4605      	mov	r5, r0
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ad20:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &sec_addr);
   2ad22:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ad24:	0c1b      	lsrs	r3, r3, #16
   2ad26:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &sec_addr);
   2ad28:	a903      	add	r1, sp, #12
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ad2a:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2ad2c:	f7ff fe81 	bl	2aa32 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ad30:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2ad34:	89a6      	ldrh	r6, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad36:	aa06      	add	r2, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ad38:	445e      	add	r6, fp
   2ad3a:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad3c:	2308      	movs	r3, #8
   2ad3e:	4631      	mov	r1, r6
   2ad40:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ad42:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad44:	f7ff fe67 	bl	2aa16 <nvs_flash_rd>
	if (rc < 0) {
   2ad48:	1e02      	subs	r2, r0, #0
   2ad4a:	f2c0 80a9 	blt.w	2aea0 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2ad4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ad50:	aa06      	add	r2, sp, #24
   2ad52:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad54:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2ad56:	f812 0b01 	ldrb.w	r0, [r2], #1
   2ad5a:	4281      	cmp	r1, r0
   2ad5c:	f040 808f 	bne.w	2ae7e <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad60:	3301      	adds	r3, #1
   2ad62:	2b08      	cmp	r3, #8
   2ad64:	d1f7      	bne.n	2ad56 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2ad66:	68a3      	ldr	r3, [r4, #8]
   2ad68:	6862      	ldr	r2, [r4, #4]
   2ad6a:	442b      	add	r3, r5
   2ad6c:	429a      	cmp	r2, r3
   2ad6e:	d27e      	bcs.n	2ae6e <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2ad70:	4659      	mov	r1, fp
   2ad72:	4620      	mov	r0, r4
   2ad74:	f7ff fec2 	bl	2aafc <nvs_flash_erase_sector>
   2ad78:	4602      	mov	r2, r0
	if (rc) {
   2ad7a:	e091      	b.n	2aea0 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2ad7c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2ad80:	0c36      	lsrs	r6, r6, #16
   2ad82:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2ad84:	441e      	add	r6, r3
   2ad86:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2ad88:	aa08      	add	r2, sp, #32
   2ad8a:	4620      	mov	r0, r4
   2ad8c:	a904      	add	r1, sp, #16
		gc_prev_addr = gc_addr;
   2ad8e:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2ad92:	f7ff ff12 	bl	2abba <nvs_prev_ate>
		if (rc) {
   2ad96:	4602      	mov	r2, r0
   2ad98:	2800      	cmp	r0, #0
   2ad9a:	f040 8081 	bne.w	2aea0 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2ad9e:	4620      	mov	r0, r4
   2ada0:	a908      	add	r1, sp, #32
   2ada2:	f7ff fed2 	bl	2ab4a <nvs_ate_valid>
   2ada6:	b918      	cbnz	r0, 2adb0 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2ada8:	9b01      	ldr	r3, [sp, #4]
   2adaa:	459a      	cmp	sl, r3
   2adac:	d1ec      	bne.n	2ad88 <nvs_gc+0x7a>
   2adae:	e7da      	b.n	2ad66 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2adb0:	6863      	ldr	r3, [r4, #4]
   2adb2:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2adb4:	aa0a      	add	r2, sp, #40	; 0x28
   2adb6:	4620      	mov	r0, r4
   2adb8:	a905      	add	r1, sp, #20
			wlk_prev_addr = wlk_addr;
   2adba:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2adbc:	f7ff fefd 	bl	2abba <nvs_prev_ate>
			if (rc) {
   2adc0:	4602      	mov	r2, r0
   2adc2:	2800      	cmp	r0, #0
   2adc4:	d16c      	bne.n	2aea0 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2adc6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2adca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2adce:	429a      	cmp	r2, r3
   2add0:	d027      	beq.n	2ae22 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2add2:	6862      	ldr	r2, [r4, #4]
   2add4:	9b05      	ldr	r3, [sp, #20]
   2add6:	429a      	cmp	r2, r3
   2add8:	d1ec      	bne.n	2adb4 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2adda:	4556      	cmp	r6, sl
   2addc:	d1e4      	bne.n	2ada8 <nvs_gc+0x9a>
   2adde:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2ade2:	2b00      	cmp	r3, #0
   2ade4:	d0e0      	beq.n	2ada8 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2ade6:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2adea:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2adee:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2adf0:	441f      	add	r7, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2adf2:	68a3      	ldr	r3, [r4, #8]
			nvs_ate_crc8_update(&gc_ate);
   2adf4:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2adf6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2adfa:	f7ff fe51 	bl	2aaa0 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2adfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2ae00:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ae04:	681e      	ldr	r6, [r3, #0]
   2ae06:	4276      	negs	r6, r6
	block_size =
   2ae08:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2ae0c:	f1b9 0f00 	cmp.w	r9, #0
   2ae10:	d10e      	bne.n	2ae30 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2ae12:	4620      	mov	r0, r4
   2ae14:	a908      	add	r1, sp, #32
   2ae16:	f7ff ff54 	bl	2acc2 <nvs_flash_ate_wrt>
			if (rc) {
   2ae1a:	4602      	mov	r2, r0
   2ae1c:	2800      	cmp	r0, #0
   2ae1e:	d0c3      	beq.n	2ada8 <nvs_gc+0x9a>
   2ae20:	e03e      	b.n	2aea0 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2ae22:	4620      	mov	r0, r4
   2ae24:	a90a      	add	r1, sp, #40	; 0x28
   2ae26:	f7ff fe90 	bl	2ab4a <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2ae2a:	2800      	cmp	r0, #0
   2ae2c:	d0d1      	beq.n	2add2 <nvs_gc+0xc4>
   2ae2e:	e7d4      	b.n	2adda <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2ae30:	454e      	cmp	r6, r9
   2ae32:	46b0      	mov	r8, r6
   2ae34:	bf28      	it	cs
   2ae36:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2ae38:	aa0c      	add	r2, sp, #48	; 0x30
   2ae3a:	4643      	mov	r3, r8
   2ae3c:	4639      	mov	r1, r7
   2ae3e:	4620      	mov	r0, r4
   2ae40:	f7ff fde9 	bl	2aa16 <nvs_flash_rd>
		if (rc) {
   2ae44:	4602      	mov	r2, r0
   2ae46:	bb58      	cbnz	r0, 2aea0 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2ae48:	4643      	mov	r3, r8
   2ae4a:	68a1      	ldr	r1, [r4, #8]
   2ae4c:	aa0c      	add	r2, sp, #48	; 0x30
   2ae4e:	4620      	mov	r0, r4
   2ae50:	f7ff fefd 	bl	2ac4e <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2ae54:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2ae56:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2ae58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae5a:	f7ff fe6c 	bl	2ab36 <nvs_al_size.isra.0>
   2ae5e:	68a3      	ldr	r3, [r4, #8]
   2ae60:	4403      	add	r3, r0
   2ae62:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2ae64:	b9e2      	cbnz	r2, 2aea0 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2ae66:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2ae6a:	4447      	add	r7, r8
   2ae6c:	e7ce      	b.n	2ae0c <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2ae6e:	4620      	mov	r0, r4
   2ae70:	f7ff ff38 	bl	2ace4 <nvs_add_gc_done_ate>
		if (rc) {
   2ae74:	4602      	mov	r2, r0
   2ae76:	2800      	cmp	r0, #0
   2ae78:	f43f af7a 	beq.w	2ad70 <nvs_gc+0x62>
   2ae7c:	e010      	b.n	2aea0 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2ae7e:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ae80:	4620      	mov	r0, r4
   2ae82:	a906      	add	r1, sp, #24
	stop_addr = gc_addr - ate_size;
   2ae84:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ae86:	f7ff fe7a 	bl	2ab7e <nvs_close_ate_valid>
   2ae8a:	2800      	cmp	r0, #0
   2ae8c:	f47f af76 	bne.w	2ad7c <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2ae90:	4620      	mov	r0, r4
   2ae92:	a904      	add	r1, sp, #16
   2ae94:	f7e4 f822 	bl	eedc <nvs_recover_last_ate>
		if (rc) {
   2ae98:	4602      	mov	r2, r0
   2ae9a:	2800      	cmp	r0, #0
   2ae9c:	f43f af74 	beq.w	2ad88 <nvs_gc+0x7a>
}
   2aea0:	4610      	mov	r0, r2
   2aea2:	b015      	add	sp, #84	; 0x54
   2aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002aea8 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2aea8:	2300      	movs	r3, #0
   2aeaa:	461a      	mov	r2, r3
   2aeac:	f7e4 ba20 	b.w	f2f0 <nvs_write>

0002aeb0 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2aeb0:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2aeb2:	2400      	movs	r4, #0
   2aeb4:	9400      	str	r4, [sp, #0]
   2aeb6:	f7e4 faf7 	bl	f4a8 <nvs_read_hist>
	return rc;
}
   2aeba:	b002      	add	sp, #8
   2aebc:	bd10      	pop	{r4, pc}

0002aebe <z_log_msg_static_create.constprop.0>:
   2aebe:	2300      	movs	r3, #0
   2aec0:	f7e3 bcf6 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002aec4 <get_tx_buffer_size>:
	return data->tx_buffer_size;
   2aec4:	6903      	ldr	r3, [r0, #16]
}
   2aec6:	f8d3 0370 	ldr.w	r0, [r3, #880]	; 0x370
   2aeca:	4770      	bx	lr

0002aecc <drop_tx_buffer>:
}
   2aecc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2aed0:	4770      	bx	lr

0002aed2 <release_rx_buffer>:
{
   2aed2:	4608      	mov	r0, r1
   2aed4:	b508      	push	{r3, lr}
   2aed6:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aed8:	b118      	cbz	r0, 2aee2 <release_rx_buffer+0x10>
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   2aeda:	f004 ff29 	bl	2fd30 <rpmsg_release_rx_buffer>
	return 0;
   2aede:	2000      	movs	r0, #0
}
   2aee0:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aee2:	f06f 0001 	mvn.w	r0, #1
   2aee6:	e7fb      	b.n	2aee0 <release_rx_buffer+0xe>

0002aee8 <hold_rx_buffer>:
{
   2aee8:	4608      	mov	r0, r1
   2aeea:	b508      	push	{r3, lr}
   2aeec:	4611      	mov	r1, r2
	if (!rpmsg_ept) {
   2aeee:	b118      	cbz	r0, 2aef8 <hold_rx_buffer+0x10>
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   2aef0:	f004 ff16 	bl	2fd20 <rpmsg_hold_rx_buffer>
	return 0;
   2aef4:	2000      	movs	r0, #0
}
   2aef6:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2aef8:	f06f 0001 	mvn.w	r0, #1
   2aefc:	e7fb      	b.n	2aef6 <hold_rx_buffer+0xe>

0002aefe <send_nocopy>:
{
   2aefe:	b513      	push	{r0, r1, r4, lr}
   2af00:	4604      	mov	r4, r0
   2af02:	4608      	mov	r0, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2af04:	6921      	ldr	r1, [r4, #16]
   2af06:	f501 715b 	add.w	r1, r1, #876	; 0x36c
   2af0a:	e8d1 1faf 	lda	r1, [r1]
	if (atomic_get(&data->state) != STATE_INITED) {
   2af0e:	2902      	cmp	r1, #2
   2af10:	d109      	bne.n	2af26 <send_nocopy+0x28>
	if (len == 0) {
   2af12:	b15b      	cbz	r3, 2af2c <send_nocopy+0x2e>
	if (!rpmsg_ept) {
   2af14:	b168      	cbz	r0, 2af32 <send_nocopy+0x34>
				    const void *data, int len)
{
	if (!ept)
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   2af16:	9300      	str	r3, [sp, #0]
   2af18:	4613      	mov	r3, r2
   2af1a:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
   2af1e:	f7f9 f823 	bl	23f68 <rpmsg_send_offchannel_nocopy>
}
   2af22:	b002      	add	sp, #8
   2af24:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2af26:	f06f 000f 	mvn.w	r0, #15
   2af2a:	e7fa      	b.n	2af22 <send_nocopy+0x24>
		return -EBADMSG;
   2af2c:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   2af30:	e7f7      	b.n	2af22 <send_nocopy+0x24>
		return -ENOENT;
   2af32:	f06f 0001 	mvn.w	r0, #1
   2af36:	e7f4      	b.n	2af22 <send_nocopy+0x24>

0002af38 <get_tx_buffer>:
{
   2af38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2af3c:	461c      	mov	r4, r3
   2af3e:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   2af42:	4616      	mov	r6, r2
   2af44:	4698      	mov	r8, r3
	if (!rpmsg_ept) {
   2af46:	460f      	mov	r7, r1
	struct backend_data_t *data = instance->data;
   2af48:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   2af4a:	b339      	cbz	r1, 2af9c <get_tx_buffer+0x64>
	if (!r_data || !size) {
   2af4c:	b34a      	cbz	r2, 2afa2 <get_tx_buffer+0x6a>
   2af4e:	b344      	cbz	r4, 2afa2 <get_tx_buffer+0x6a>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   2af50:	1c6a      	adds	r2, r5, #1
   2af52:	f143 0300 	adc.w	r3, r3, #0
   2af56:	2a02      	cmp	r2, #2
   2af58:	f173 0300 	sbcs.w	r3, r3, #0
   2af5c:	d224      	bcs.n	2afa8 <get_tx_buffer+0x70>
	if ((*size) && (*size > data->tx_buffer_size)) {
   2af5e:	6822      	ldr	r2, [r4, #0]
   2af60:	b142      	cbz	r2, 2af74 <get_tx_buffer+0x3c>
   2af62:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
   2af66:	429a      	cmp	r2, r3
   2af68:	d904      	bls.n	2af74 <get_tx_buffer+0x3c>
		return -ENOMEM;
   2af6a:	f06f 000b 	mvn.w	r0, #11
		*size = data->tx_buffer_size;
   2af6e:	6023      	str	r3, [r4, #0]
}
   2af70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   2af74:	ea05 0908 	and.w	r9, r5, r8
   2af78:	f109 0301 	add.w	r3, r9, #1
   2af7c:	425a      	negs	r2, r3
   2af7e:	415a      	adcs	r2, r3
   2af80:	4621      	mov	r1, r4
   2af82:	4638      	mov	r0, r7
   2af84:	f004 fedd 	bl	2fd42 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   2af88:	b988      	cbnz	r0, 2afae <get_tx_buffer+0x76>
   2af8a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2af8e:	bf08      	it	eq
   2af90:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   2af94:	d0f0      	beq.n	2af78 <get_tx_buffer+0x40>
		return -ENOBUFS;
   2af96:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2af9a:	e7e9      	b.n	2af70 <get_tx_buffer+0x38>
		return -ENOENT;
   2af9c:	f06f 0001 	mvn.w	r0, #1
   2afa0:	e7e6      	b.n	2af70 <get_tx_buffer+0x38>
		return -EINVAL;
   2afa2:	f06f 0015 	mvn.w	r0, #21
   2afa6:	e7e3      	b.n	2af70 <get_tx_buffer+0x38>
		return -ENOTSUP;
   2afa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2afac:	e7e0      	b.n	2af70 <get_tx_buffer+0x38>
	(*r_data) = payload;
   2afae:	6030      	str	r0, [r6, #0]
	return 0;
   2afb0:	2000      	movs	r0, #0
   2afb2:	e7dd      	b.n	2af70 <get_tx_buffer+0x38>

0002afb4 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2afb4:	f004 bf0a 	b.w	2fdcc <rpmsg_destroy_ept>

0002afb8 <get_ept_slot_with_name>:
{
   2afb8:	b538      	push	{r3, r4, r5, lr}
   2afba:	460d      	mov	r5, r1
   2afbc:	4604      	mov	r4, r0
		if (strcmp(name, rpmsg_ept->name) == 0) {
   2afbe:	f100 0140 	add.w	r1, r0, #64	; 0x40
   2afc2:	4628      	mov	r0, r5
   2afc4:	f7de f9d5 	bl	9372 <strcmp>
   2afc8:	b130      	cbz	r0, 2afd8 <get_ept_slot_with_name+0x20>
   2afca:	4628      	mov	r0, r5
   2afcc:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2afd0:	f7de f9cf 	bl	9372 <strcmp>
   2afd4:	b920      	cbnz	r0, 2afe0 <get_ept_slot_with_name+0x28>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   2afd6:	2001      	movs	r0, #1
			return &rpmsg_inst->endpoint[i];
   2afd8:	2370      	movs	r3, #112	; 0x70
   2afda:	fb03 4000 	mla	r0, r3, r0, r4
}
   2afde:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   2afe0:	2000      	movs	r0, #0
   2afe2:	e7fc      	b.n	2afde <get_ept_slot_with_name+0x26>

0002afe4 <mbox_callback>:
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   2afe4:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   2afe8:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   2afec:	f005 b970 	b.w	302d0 <k_work_submit_to_queue>

0002aff0 <mbox_callback_process>:
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2aff0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
	virtqueue_notification(data->vr.vq[vq_id]);
   2aff4:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   2aff8:	3b00      	subs	r3, #0
   2affa:	bf18      	it	ne
   2affc:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   2affe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2b002:	f8d0 029c 	ldr.w	r0, [r0, #668]	; 0x29c
   2b006:	f004 be3d 	b.w	2fc84 <virtqueue_notification>

0002b00a <virtio_notify_cb>:
	if (conf->mbox_tx.dev) {
   2b00a:	68cb      	ldr	r3, [r1, #12]
   2b00c:	b133      	cbz	r3, 2b01c <virtio_notify_cb+0x12>
		(const struct mbox_driver_api *)channel->dev->api;
   2b00e:	68c8      	ldr	r0, [r1, #12]
	if (api->send == NULL) {
   2b010:	6883      	ldr	r3, [r0, #8]
   2b012:	681b      	ldr	r3, [r3, #0]
   2b014:	b113      	cbz	r3, 2b01c <virtio_notify_cb+0x12>
	return api->send(channel->dev, channel->id, msg);
   2b016:	2200      	movs	r2, #0
   2b018:	6909      	ldr	r1, [r1, #16]
   2b01a:	4718      	bx	r3
}
   2b01c:	4770      	bx	lr

0002b01e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2b01e:	f7fa b951 	b.w	252c4 <z_impl_k_mutex_unlock>

0002b022 <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b022:	e8d0 3fef 	ldaex	r3, [r0]
   2b026:	e8c0 1fe2 	stlex	r2, r1, [r0]
   2b02a:	2a00      	cmp	r2, #0
   2b02c:	d1f9      	bne.n	2b022 <atomic_set.isra.0>
}
   2b02e:	4770      	bx	lr

0002b030 <backend_init>:
{
   2b030:	b510      	push	{r4, lr}
	data->role = conf->role;
   2b032:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   2b034:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   2b036:	681b      	ldr	r3, [r3, #0]
   2b038:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
	return z_impl_k_mutex_init(mutex);
   2b03c:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2b040:	f005 f8ae 	bl	301a0 <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   2b044:	2100      	movs	r1, #0
   2b046:	f504 705b 	add.w	r0, r4, #876	; 0x36c
   2b04a:	f7ff ffea 	bl	2b022 <atomic_set.isra.0>
}
   2b04e:	4608      	mov	r0, r1
   2b050:	bd10      	pop	{r4, pc}

0002b052 <ns_bind_cb>:
{
   2b052:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b056:	4617      	mov	r7, r2
	if (name == NULL || name[0] == '\0') {
   2b058:	460d      	mov	r5, r1
   2b05a:	b379      	cbz	r1, 2b0bc <ns_bind_cb+0x6a>
   2b05c:	780b      	ldrb	r3, [r1, #0]
   2b05e:	b36b      	cbz	r3, 2b0bc <ns_bind_cb+0x6a>
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   2b060:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
   2b064:	f5a4 78ce 	sub.w	r8, r4, #412	; 0x19c
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   2b068:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2b06a:	f04f 32ff 	mov.w	r2, #4294967295
   2b06e:	f04f 33ff 	mov.w	r3, #4294967295
   2b072:	4620      	mov	r0, r4
   2b074:	f7fa f856 	bl	25124 <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   2b078:	462a      	mov	r2, r5
   2b07a:	4640      	mov	r0, r8
   2b07c:	a901      	add	r1, sp, #4
   2b07e:	f7e4 fb4b 	bl	f718 <get_ept>
	if (rpmsg_ept == NULL) {
   2b082:	9e01      	ldr	r6, [sp, #4]
   2b084:	b92e      	cbnz	r6, 2b092 <ns_bind_cb+0x40>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b086:	4620      	mov	r0, r4
}
   2b088:	b002      	add	sp, #8
   2b08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b08e:	f7ff bfc6 	b.w	2b01e <k_mutex_unlock.isra.0>
	if (ept_cached) {
   2b092:	b158      	cbz	r0, 2b0ac <ns_bind_cb+0x5a>
		k_mutex_unlock(&rpmsg_inst->mtx);
   2b094:	4620      	mov	r0, r4
   2b096:	f7ff ffc2 	bl	2b01e <k_mutex_unlock.isra.0>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b09a:	463b      	mov	r3, r7
   2b09c:	462a      	mov	r2, r5
   2b09e:	4631      	mov	r1, r6
   2b0a0:	4640      	mov	r0, r8
}
   2b0a2:	b002      	add	sp, #8
   2b0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   2b0a8:	f7e4 bb14 	b.w	f6d4 <advertise_ept>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b0ac:	2220      	movs	r2, #32
   2b0ae:	4629      	mov	r1, r5
   2b0b0:	f106 0040 	add.w	r0, r6, #64	; 0x40
   2b0b4:	f005 fc05 	bl	308c2 <strncpy>
		rpmsg_ept->dest = dest;
   2b0b8:	6637      	str	r7, [r6, #96]	; 0x60
   2b0ba:	e7e4      	b.n	2b086 <ns_bind_cb+0x34>
}
   2b0bc:	b002      	add	sp, #8
   2b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b0c2 <ept_cb>:
{
   2b0c2:	b510      	push	{r4, lr}
   2b0c4:	4608      	mov	r0, r1
   2b0c6:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   2b0c8:	4611      	mov	r1, r2
   2b0ca:	b952      	cbnz	r2, 2b0e2 <ept_cb+0x20>
		if (!ept->bound) {
   2b0cc:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   2b0d0:	b92a      	cbnz	r2, 2b0de <ept_cb+0x1c>
			ept->bound = true;
   2b0d2:	2201      	movs	r2, #1
			bound_cb(ept);
   2b0d4:	4618      	mov	r0, r3
			ept->bound = true;
   2b0d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   2b0da:	f7e4 fc6f 	bl	f9bc <bound_cb>
}
   2b0de:	2000      	movs	r0, #0
   2b0e0:	bd10      	pop	{r4, pc}
	if (ept->cb->received) {
   2b0e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   2b0e4:	6854      	ldr	r4, [r2, #4]
   2b0e6:	2c00      	cmp	r4, #0
   2b0e8:	d0f9      	beq.n	2b0de <ept_cb+0x1c>
		ept->cb->received(data, len, ept->priv);
   2b0ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   2b0ec:	47a0      	blx	r4
   2b0ee:	e7f6      	b.n	2b0de <ept_cb+0x1c>

0002b0f0 <deregister_ept>:
{
   2b0f0:	b510      	push	{r4, lr}
   2b0f2:	460c      	mov	r4, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b0f4:	6903      	ldr	r3, [r0, #16]
   2b0f6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   2b0fa:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&data->state) != STATE_INITED) {
   2b0fe:	2b02      	cmp	r3, #2
   2b100:	d10a      	bne.n	2b118 <deregister_ept+0x28>
	if (!rpmsg_ept) {
   2b102:	b161      	cbz	r1, 2b11e <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   2b104:	4608      	mov	r0, r1
   2b106:	f004 fe61 	bl	2fdcc <rpmsg_destroy_ept>
__ssp_bos_icheck3(memset, void *, int)
   2b10a:	2270      	movs	r2, #112	; 0x70
   2b10c:	2100      	movs	r1, #0
   2b10e:	4620      	mov	r0, r4
   2b110:	f005 fa77 	bl	30602 <memset>
	return 0;
   2b114:	2000      	movs	r0, #0
}
   2b116:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2b118:	f06f 000f 	mvn.w	r0, #15
   2b11c:	e7fb      	b.n	2b116 <deregister_ept+0x26>
		return -ENOENT;
   2b11e:	f06f 0001 	mvn.w	r0, #1
   2b122:	e7f8      	b.n	2b116 <deregister_ept+0x26>

0002b124 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   2b124:	f004 be52 	b.w	2fdcc <rpmsg_destroy_ept>

0002b128 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
   2b128:	b538      	push	{r3, r4, r5, lr}
   2b12a:	460d      	mov	r5, r1
	if (!instance) {
   2b12c:	4604      	mov	r4, r0
   2b12e:	b160      	cbz	r0, 2b14a <ipc_rpmsg_deinit+0x22>
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   2b130:	30e0      	adds	r0, #224	; 0xe0
   2b132:	f004 ffcc 	bl	300ce <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   2b136:	b10d      	cbz	r5, 2b13c <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   2b138:	2000      	movs	r0, #0
}
   2b13a:	bd38      	pop	{r3, r4, r5, pc}
   2b13c:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
   2b140:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
   2b144:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
   2b148:	e7f6      	b.n	2b138 <ipc_rpmsg_deinit+0x10>
		return -EINVAL;
   2b14a:	f06f 0015 	mvn.w	r0, #21
   2b14e:	e7f4      	b.n	2b13a <ipc_rpmsg_deinit+0x12>

0002b150 <virtio_notify>:
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   2b150:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   2b152:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2b156:	b113      	cbz	r3, 2b15e <virtio_notify+0xe>
		vr->notify_cb(vq, vr->priv);
   2b158:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   2b15c:	4718      	bx	r3
}
   2b15e:	4770      	bx	lr

0002b160 <virtio_set_features>:
}
   2b160:	4770      	bx	lr

0002b162 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   2b162:	6983      	ldr	r3, [r0, #24]
   2b164:	b913      	cbnz	r3, 2b16c <virtio_set_status+0xa>
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   2b166:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b16a:	7019      	strb	r1, [r3, #0]
}
   2b16c:	4770      	bx	lr

0002b16e <virtio_get_features>:
}
   2b16e:	2001      	movs	r0, #1
   2b170:	4770      	bx	lr

0002b172 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   2b172:	6983      	ldr	r3, [r0, #24]
   2b174:	2b01      	cmp	r3, #1
   2b176:	d104      	bne.n	2b182 <virtio_get_status+0x10>
	return *(volatile uint8_t *)addr;
   2b178:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
   2b17c:	7818      	ldrb	r0, [r3, #0]
   2b17e:	b2c0      	uxtb	r0, r0
   2b180:	4770      	bx	lr
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   2b182:	2004      	movs	r0, #4
}
   2b184:	4770      	bx	lr

0002b186 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   2b186:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   2b188:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   2b18a:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   2b18c:	4620      	mov	r0, r4
   2b18e:	f005 f9db 	bl	30548 <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   2b192:	4605      	mov	r5, r0
   2b194:	b118      	cbz	r0, 2b19e <virtqueue_allocate+0x18>
   2b196:	4622      	mov	r2, r4
   2b198:	2100      	movs	r1, #0
   2b19a:	f005 fa32 	bl	30602 <memset>
		memset(vqs, 0x00, vq_size);
	}

	return vqs;
}
   2b19e:	4628      	mov	r0, r5
   2b1a0:	bd38      	pop	{r3, r4, r5, pc}

0002b1a2 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   2b1a2:	b538      	push	{r3, r4, r5, lr}
   2b1a4:	4604      	mov	r4, r0
   2b1a6:	2230      	movs	r2, #48	; 0x30
   2b1a8:	2100      	movs	r1, #0
   2b1aa:	f005 fa2a 	bl	30602 <memset>
   2b1ae:	2218      	movs	r2, #24
   2b1b0:	2100      	movs	r1, #0
   2b1b2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   2b1b6:	f005 fa24 	bl	30602 <memset>
   2b1ba:	2218      	movs	r2, #24
   2b1bc:	2100      	movs	r1, #0
   2b1be:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   2b1c2:	f005 fa1e 	bl	30602 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   2b1c6:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   2b1ca:	f7f8 fe7f 	bl	23ecc <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   2b1ce:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2b1d2:	f7f8 fe7b 	bl	23ecc <virtqueue_free>
	vr->shm_io = 0;
   2b1d6:	2300      	movs	r3, #0
	metal_device_close(&vr->shm_device);
   2b1d8:	f104 0034 	add.w	r0, r4, #52	; 0x34
	vr->shm_io = 0;
   2b1dc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   2b1e0:	f7f5 fba2 	bl	20928 <metal_device_close>
	metal_finish();
   2b1e4:	f7f5 fbfc 	bl	209e0 <metal_finish>
	if (io->ops.close)
   2b1e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	err = libmetal_teardown(vr);
	if (err != 0) {
		return err;
	}

	metal_io_finish(vr->shm_device.regions);
   2b1ea:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2b1ee:	b10b      	cbz	r3, 2b1f4 <ipc_static_vrings_deinit+0x52>
		(*io->ops.close)(io);
   2b1f0:	4628      	mov	r0, r5
   2b1f2:	4798      	blx	r3
   2b1f4:	2238      	movs	r2, #56	; 0x38
   2b1f6:	2100      	movs	r1, #0
   2b1f8:	4628      	mov	r0, r5
   2b1fa:	f005 fa02 	bl	30602 <memset>

	return 0;
}
   2b1fe:	2000      	movs	r0, #0
   2b200:	bd38      	pop	{r3, r4, r5, pc}

0002b202 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2b202:	4770      	bx	lr

0002b204 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   2b204:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   2b206:	b430      	push	{r4, r5}
   2b208:	4604      	mov	r4, r0
   2b20a:	4618      	mov	r0, r3
   2b20c:	db0b      	blt.n	2b226 <flash_area_read+0x22>
   2b20e:	68a5      	ldr	r5, [r4, #8]
   2b210:	4408      	add	r0, r1
   2b212:	42a8      	cmp	r0, r5
   2b214:	d807      	bhi.n	2b226 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   2b216:	68e0      	ldr	r0, [r4, #12]
   2b218:	6864      	ldr	r4, [r4, #4]
   2b21a:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   2b21c:	6884      	ldr	r4, [r0, #8]
   2b21e:	6824      	ldr	r4, [r4, #0]
   2b220:	46a4      	mov	ip, r4
}
   2b222:	bc30      	pop	{r4, r5}
   2b224:	4760      	bx	ip
   2b226:	f06f 0015 	mvn.w	r0, #21
   2b22a:	bc30      	pop	{r4, r5}
   2b22c:	4770      	bx	lr

0002b22e <flash_area_write>:
   2b22e:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   2b230:	b430      	push	{r4, r5}
   2b232:	4604      	mov	r4, r0
   2b234:	4618      	mov	r0, r3
   2b236:	db0b      	blt.n	2b250 <flash_area_write+0x22>
   2b238:	68a5      	ldr	r5, [r4, #8]
   2b23a:	4408      	add	r0, r1
   2b23c:	42a8      	cmp	r0, r5
   2b23e:	d807      	bhi.n	2b250 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   2b240:	68e0      	ldr	r0, [r4, #12]
   2b242:	6864      	ldr	r4, [r4, #4]
   2b244:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   2b246:	6884      	ldr	r4, [r0, #8]
   2b248:	6864      	ldr	r4, [r4, #4]
   2b24a:	46a4      	mov	ip, r4
}
   2b24c:	bc30      	pop	{r4, r5}
   2b24e:	4760      	bx	ip
   2b250:	f06f 0015 	mvn.w	r0, #21
   2b254:	bc30      	pop	{r4, r5}
   2b256:	4770      	bx	lr

0002b258 <flash_area_erase>:
   2b258:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   2b25a:	4603      	mov	r3, r0
   2b25c:	b410      	push	{r4}
   2b25e:	4610      	mov	r0, r2
   2b260:	db0a      	blt.n	2b278 <flash_area_erase+0x20>
   2b262:	689c      	ldr	r4, [r3, #8]
   2b264:	4408      	add	r0, r1
   2b266:	42a0      	cmp	r0, r4
   2b268:	d806      	bhi.n	2b278 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   2b26a:	68d8      	ldr	r0, [r3, #12]
   2b26c:	685b      	ldr	r3, [r3, #4]
   2b26e:	4419      	add	r1, r3
	rc = api->erase(dev, offset, size);
   2b270:	6883      	ldr	r3, [r0, #8]
}
   2b272:	bc10      	pop	{r4}
   2b274:	689b      	ldr	r3, [r3, #8]
   2b276:	4718      	bx	r3
   2b278:	f06f 0015 	mvn.w	r0, #21
   2b27c:	bc10      	pop	{r4}
   2b27e:	4770      	bx	lr

0002b280 <flash_area_get_device>:
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return fa->fa_dev;
}
   2b280:	68c0      	ldr	r0, [r0, #12]
   2b282:	4770      	bx	lr

0002b284 <get_sectors_cb>:
{
   2b284:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2b286:	684c      	ldr	r4, [r1, #4]
   2b288:	6803      	ldr	r3, [r0, #0]
   2b28a:	42a3      	cmp	r3, r4
   2b28c:	d201      	bcs.n	2b292 <get_sectors_cb+0xe>
		*bail_value = true;
   2b28e:	2001      	movs	r0, #1
}
   2b290:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2b292:	688a      	ldr	r2, [r1, #8]
   2b294:	4422      	add	r2, r4
   2b296:	4293      	cmp	r3, r2
   2b298:	d301      	bcc.n	2b29e <get_sectors_cb+0x1a>
		*bail_value = false;
   2b29a:	2000      	movs	r0, #0
   2b29c:	e7f8      	b.n	2b290 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2b29e:	694e      	ldr	r6, [r1, #20]
   2b2a0:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2b2a4:	42b5      	cmp	r5, r6
   2b2a6:	d303      	bcc.n	2b2b0 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2b2a8:	f06f 030b 	mvn.w	r3, #11
   2b2ac:	618b      	str	r3, [r1, #24]
		return true;
   2b2ae:	e7f4      	b.n	2b29a <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2b2b0:	1b1b      	subs	r3, r3, r4
   2b2b2:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2b2b6:	6843      	ldr	r3, [r0, #4]
   2b2b8:	6908      	ldr	r0, [r1, #16]
   2b2ba:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2b2be:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2b2c0:	690b      	ldr	r3, [r1, #16]
   2b2c2:	3301      	adds	r3, #1
   2b2c4:	610b      	str	r3, [r1, #16]
	return true;
   2b2c6:	e7e2      	b.n	2b28e <get_sectors_cb+0xa>

0002b2c8 <settings_load>:
	return settings_load_subtree(NULL);
   2b2c8:	2000      	movs	r0, #0
   2b2ca:	f7e4 bdc5 	b.w	fe58 <settings_load_subtree>

0002b2ce <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2b2ce:	2200      	movs	r2, #0
   2b2d0:	4611      	mov	r1, r2
   2b2d2:	f7e4 bd87 	b.w	fde4 <settings_save_one>

0002b2d6 <settings_name_steq>:
{
   2b2d6:	4603      	mov	r3, r0
   2b2d8:	b510      	push	{r4, lr}
   2b2da:	4608      	mov	r0, r1
	if (next) {
   2b2dc:	b10a      	cbz	r2, 2b2e2 <settings_name_steq+0xc>
		*next = NULL;
   2b2de:	2100      	movs	r1, #0
   2b2e0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2b2e2:	b153      	cbz	r3, 2b2fa <settings_name_steq+0x24>
   2b2e4:	b1d0      	cbz	r0, 2b31c <settings_name_steq+0x46>
   2b2e6:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2b2e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b2ec:	b180      	cbz	r0, 2b310 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2b2ee:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b2f2:	42a0      	cmp	r0, r4
   2b2f4:	d101      	bne.n	2b2fa <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b2f6:	283d      	cmp	r0, #61	; 0x3d
   2b2f8:	d1f6      	bne.n	2b2e8 <settings_name_steq+0x12>
		return 0;
   2b2fa:	2000      	movs	r0, #0
   2b2fc:	e00e      	b.n	2b31c <settings_name_steq+0x46>
			*next = name + 1;
   2b2fe:	3301      	adds	r3, #1
   2b300:	6013      	str	r3, [r2, #0]
   2b302:	e00a      	b.n	2b31a <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2b304:	283d      	cmp	r0, #61	; 0x3d
   2b306:	d008      	beq.n	2b31a <settings_name_steq+0x44>
   2b308:	fab0 f080 	clz	r0, r0
   2b30c:	0940      	lsrs	r0, r0, #5
   2b30e:	e005      	b.n	2b31c <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2b310:	7818      	ldrb	r0, [r3, #0]
   2b312:	282f      	cmp	r0, #47	; 0x2f
   2b314:	d1f6      	bne.n	2b304 <settings_name_steq+0x2e>
		if (next) {
   2b316:	2a00      	cmp	r2, #0
   2b318:	d1f1      	bne.n	2b2fe <settings_name_steq+0x28>
		return 1;
   2b31a:	2001      	movs	r0, #1
}
   2b31c:	bd10      	pop	{r4, pc}

0002b31e <settings_name_next>:
{
   2b31e:	b510      	push	{r4, lr}
	if (next) {
   2b320:	b109      	cbz	r1, 2b326 <settings_name_next+0x8>
		*next = NULL;
   2b322:	2300      	movs	r3, #0
   2b324:	600b      	str	r3, [r1, #0]
	if (!name) {
   2b326:	b158      	cbz	r0, 2b340 <settings_name_next+0x22>
   2b328:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2b32a:	781a      	ldrb	r2, [r3, #0]
   2b32c:	461c      	mov	r4, r3
   2b32e:	3301      	adds	r3, #1
   2b330:	b12a      	cbz	r2, 2b33e <settings_name_next+0x20>
   2b332:	2a3d      	cmp	r2, #61	; 0x3d
   2b334:	d003      	beq.n	2b33e <settings_name_next+0x20>
   2b336:	2a2f      	cmp	r2, #47	; 0x2f
   2b338:	d1f7      	bne.n	2b32a <settings_name_next+0xc>
		if (next) {
   2b33a:	b101      	cbz	r1, 2b33e <settings_name_next+0x20>
			*next = name + 1;
   2b33c:	600b      	str	r3, [r1, #0]
   2b33e:	1a20      	subs	r0, r4, r0
}
   2b340:	bd10      	pop	{r4, pc}

0002b342 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2b342:	3008      	adds	r0, #8
   2b344:	4770      	bx	lr

0002b346 <settings_nvs_read_fn>:
{
   2b346:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b348:	4613      	mov	r3, r2
{
   2b34a:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b34c:	460a      	mov	r2, r1
   2b34e:	8881      	ldrh	r1, [r0, #4]
   2b350:	6800      	ldr	r0, [r0, #0]
   2b352:	f7ff fdad 	bl	2aeb0 <nvs_read>
}
   2b356:	42a0      	cmp	r0, r4
   2b358:	bfa8      	it	ge
   2b35a:	4620      	movge	r0, r4
   2b35c:	bd10      	pop	{r4, pc}

0002b35e <settings_nvs_save>:
{
   2b35e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b362:	b097      	sub	sp, #92	; 0x5c
   2b364:	4604      	mov	r4, r0
   2b366:	469a      	mov	sl, r3
	if (!name) {
   2b368:	4689      	mov	r9, r1
{
   2b36a:	9201      	str	r2, [sp, #4]
	if (!name) {
   2b36c:	2900      	cmp	r1, #0
   2b36e:	d07e      	beq.n	2b46e <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2b370:	b1da      	cbz	r2, 2b3aa <settings_nvs_save+0x4c>
   2b372:	faba f78a 	clz	r7, sl
   2b376:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2b378:	8f25      	ldrh	r5, [r4, #56]	; 0x38
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b37a:	f104 0b08 	add.w	fp, r4, #8
	name_id = cf->last_name_id + 1;
   2b37e:	3501      	adds	r5, #1
   2b380:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2b382:	46a8      	mov	r8, r5
		name_id--;
   2b384:	1e6e      	subs	r6, r5, #1
   2b386:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2b388:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2b38c:	d029      	beq.n	2b3e2 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b38e:	234a      	movs	r3, #74	; 0x4a
   2b390:	4631      	mov	r1, r6
   2b392:	4658      	mov	r0, fp
   2b394:	aa03      	add	r2, sp, #12
   2b396:	f7ff fd8b 	bl	2aeb0 <nvs_read>
		if (rc < 0) {
   2b39a:	2800      	cmp	r0, #0
   2b39c:	da07      	bge.n	2b3ae <settings_nvs_save+0x50>
		name_id--;
   2b39e:	f110 0f02 	cmn.w	r0, #2
   2b3a2:	bf08      	it	eq
   2b3a4:	46b0      	moveq	r8, r6
   2b3a6:	4635      	mov	r5, r6
   2b3a8:	e7ec      	b.n	2b384 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2b3aa:	2701      	movs	r7, #1
   2b3ac:	e7e4      	b.n	2b378 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2b3ae:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2b3b2:	eb0d 0003 	add.w	r0, sp, r3
   2b3b6:	2300      	movs	r3, #0
		if (strcmp(name, rdname)) {
   2b3b8:	a903      	add	r1, sp, #12
		rdname[rc] = '\0';
   2b3ba:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2b3be:	4648      	mov	r0, r9
   2b3c0:	f7dd ffd7 	bl	9372 <strcmp>
   2b3c4:	2800      	cmp	r0, #0
   2b3c6:	d1ee      	bne.n	2b3a6 <settings_nvs_save+0x48>
		if (!delete) {
   2b3c8:	b32f      	cbz	r7, 2b416 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2b3ca:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b3cc:	42b3      	cmp	r3, r6
   2b3ce:	d00b      	beq.n	2b3e8 <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2b3d0:	4631      	mov	r1, r6
   2b3d2:	4658      	mov	r0, fp
   2b3d4:	f7ff fd68 	bl	2aea8 <nvs_delete>
		if (rc >= 0) {
   2b3d8:	2800      	cmp	r0, #0
   2b3da:	da12      	bge.n	2b402 <settings_nvs_save+0xa4>
}
   2b3dc:	b017      	add	sp, #92	; 0x5c
   2b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2b3e2:	b3b7      	cbz	r7, 2b452 <settings_nvs_save+0xf4>
			return 0;
   2b3e4:	2000      	movs	r0, #0
   2b3e6:	e7f9      	b.n	2b3dc <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2b3e8:	4622      	mov	r2, r4
   2b3ea:	1e73      	subs	r3, r6, #1
   2b3ec:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2b3f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b3f4:	2302      	movs	r3, #2
   2b3f6:	4658      	mov	r0, fp
   2b3f8:	f7e3 ff7a 	bl	f2f0 <nvs_write>
			if (rc < 0) {
   2b3fc:	2800      	cmp	r0, #0
   2b3fe:	dae7      	bge.n	2b3d0 <settings_nvs_save+0x72>
   2b400:	e7ec      	b.n	2b3dc <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2b402:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2b406:	313f      	adds	r1, #63	; 0x3f
   2b408:	4658      	mov	r0, fp
   2b40a:	b289      	uxth	r1, r1
   2b40c:	f7ff fd4c 	bl	2aea8 <nvs_delete>
	if (rc < 0) {
   2b410:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b414:	e7e2      	b.n	2b3dc <settings_nvs_save+0x7e>
		name_id--;
   2b416:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2b418:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2b41c:	d02a      	beq.n	2b474 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2b41e:	f104 0508 	add.w	r5, r4, #8
   2b422:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2b426:	4653      	mov	r3, sl
   2b428:	4628      	mov	r0, r5
   2b42a:	9a01      	ldr	r2, [sp, #4]
   2b42c:	b289      	uxth	r1, r1
   2b42e:	f7e3 ff5f 	bl	f2f0 <nvs_write>
	if (rc < 0) {
   2b432:	2800      	cmp	r0, #0
   2b434:	dbd2      	blt.n	2b3dc <settings_nvs_save+0x7e>
	if (write_name) {
   2b436:	b977      	cbnz	r7, 2b456 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2b438:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b43a:	4543      	cmp	r3, r8
   2b43c:	d2d2      	bcs.n	2b3e4 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2b43e:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b440:	2302      	movs	r3, #2
   2b442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b446:	4628      	mov	r0, r5
		cf->last_name_id = write_name_id;
   2b448:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b44c:	f7e3 ff50 	bl	f2f0 <nvs_write>
   2b450:	e7de      	b.n	2b410 <settings_nvs_save+0xb2>
	write_name = true;
   2b452:	2701      	movs	r7, #1
   2b454:	e7e0      	b.n	2b418 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2b456:	4648      	mov	r0, r9
   2b458:	f7dd ff95 	bl	9386 <strlen>
   2b45c:	464a      	mov	r2, r9
   2b45e:	4603      	mov	r3, r0
   2b460:	4641      	mov	r1, r8
   2b462:	4628      	mov	r0, r5
   2b464:	f7e3 ff44 	bl	f2f0 <nvs_write>
		if (rc < 0) {
   2b468:	2800      	cmp	r0, #0
   2b46a:	dae5      	bge.n	2b438 <settings_nvs_save+0xda>
   2b46c:	e7b6      	b.n	2b3dc <settings_nvs_save+0x7e>
		return -EINVAL;
   2b46e:	f06f 0015 	mvn.w	r0, #21
   2b472:	e7b3      	b.n	2b3dc <settings_nvs_save+0x7e>
		return -ENOMEM;
   2b474:	f06f 000b 	mvn.w	r0, #11
   2b478:	e7b0      	b.n	2b3dc <settings_nvs_save+0x7e>

0002b47a <settings_nvs_backend_init>:
{
   2b47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b47c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
   2b47e:	4604      	mov	r4, r0
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b480:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   2b482:	b1c3      	cbz	r3, 2b4b6 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2b484:	f100 0608 	add.w	r6, r0, #8
   2b488:	4630      	mov	r0, r6
   2b48a:	f7e3 fd59 	bl	ef40 <nvs_mount>
	if (rc) {
   2b48e:	4605      	mov	r5, r0
   2b490:	b970      	cbnz	r0, 2b4b0 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2b492:	2302      	movs	r3, #2
   2b494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b498:	4630      	mov	r0, r6
   2b49a:	f10d 0206 	add.w	r2, sp, #6
   2b49e:	f7ff fd07 	bl	2aeb0 <nvs_read>
	if (rc < 0) {
   2b4a2:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2b4a4:	bfb4      	ite	lt
   2b4a6:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2b4aa:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2b4ae:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2b4b0:	4628      	mov	r0, r5
   2b4b2:	b002      	add	sp, #8
   2b4b4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b4b6:	f06f 0512 	mvn.w	r5, #18
   2b4ba:	e7f9      	b.n	2b4b0 <settings_nvs_backend_init+0x36>

0002b4bc <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b4bc:	b538      	push	{r3, r4, r5, lr}
   2b4be:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b4c0:	42ab      	cmp	r3, r5
{
   2b4c2:	4611      	mov	r1, r2
   2b4c4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b4c6:	d804      	bhi.n	2b4d2 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b4c8:	461a      	mov	r2, r3
   2b4ca:	f005 f860 	bl	3058e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b4ce:	4620      	mov	r0, r4
   2b4d0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b4d2:	2400      	movs	r4, #0
   2b4d4:	e7fb      	b.n	2b4ce <_copy+0x12>

0002b4d6 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2b4d6:	f005 b894 	b.w	30602 <memset>

0002b4da <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b4da:	09c3      	lsrs	r3, r0, #7
   2b4dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b4e0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b4e4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b4e8:	b2c0      	uxtb	r0, r0
   2b4ea:	4770      	bx	lr

0002b4ec <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b4ec:	78cb      	ldrb	r3, [r1, #3]
   2b4ee:	7802      	ldrb	r2, [r0, #0]
   2b4f0:	4053      	eors	r3, r2
   2b4f2:	7003      	strb	r3, [r0, #0]
   2b4f4:	884b      	ldrh	r3, [r1, #2]
   2b4f6:	7842      	ldrb	r2, [r0, #1]
   2b4f8:	4053      	eors	r3, r2
   2b4fa:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b4fc:	680a      	ldr	r2, [r1, #0]
   2b4fe:	7883      	ldrb	r3, [r0, #2]
   2b500:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b504:	7083      	strb	r3, [r0, #2]
   2b506:	680a      	ldr	r2, [r1, #0]
   2b508:	78c3      	ldrb	r3, [r0, #3]
   2b50a:	4053      	eors	r3, r2
   2b50c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b50e:	79cb      	ldrb	r3, [r1, #7]
   2b510:	7902      	ldrb	r2, [r0, #4]
   2b512:	4053      	eors	r3, r2
   2b514:	7103      	strb	r3, [r0, #4]
   2b516:	88cb      	ldrh	r3, [r1, #6]
   2b518:	7942      	ldrb	r2, [r0, #5]
   2b51a:	4053      	eors	r3, r2
   2b51c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b51e:	684a      	ldr	r2, [r1, #4]
   2b520:	7983      	ldrb	r3, [r0, #6]
   2b522:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b526:	7183      	strb	r3, [r0, #6]
   2b528:	684a      	ldr	r2, [r1, #4]
   2b52a:	79c3      	ldrb	r3, [r0, #7]
   2b52c:	4053      	eors	r3, r2
   2b52e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b530:	7acb      	ldrb	r3, [r1, #11]
   2b532:	7a02      	ldrb	r2, [r0, #8]
   2b534:	4053      	eors	r3, r2
   2b536:	7203      	strb	r3, [r0, #8]
   2b538:	7a42      	ldrb	r2, [r0, #9]
   2b53a:	894b      	ldrh	r3, [r1, #10]
   2b53c:	4053      	eors	r3, r2
   2b53e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b540:	688a      	ldr	r2, [r1, #8]
   2b542:	7a83      	ldrb	r3, [r0, #10]
   2b544:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b548:	7283      	strb	r3, [r0, #10]
   2b54a:	688a      	ldr	r2, [r1, #8]
   2b54c:	7ac3      	ldrb	r3, [r0, #11]
   2b54e:	4053      	eors	r3, r2
   2b550:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b552:	7bcb      	ldrb	r3, [r1, #15]
   2b554:	7b02      	ldrb	r2, [r0, #12]
   2b556:	4053      	eors	r3, r2
   2b558:	7303      	strb	r3, [r0, #12]
   2b55a:	89cb      	ldrh	r3, [r1, #14]
   2b55c:	7b42      	ldrb	r2, [r0, #13]
   2b55e:	4053      	eors	r3, r2
   2b560:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b562:	68ca      	ldr	r2, [r1, #12]
   2b564:	7b83      	ldrb	r3, [r0, #14]
   2b566:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b56a:	7383      	strb	r3, [r0, #14]
   2b56c:	68ca      	ldr	r2, [r1, #12]
   2b56e:	7bc3      	ldrb	r3, [r0, #15]
   2b570:	4053      	eors	r3, r2
   2b572:	73c3      	strb	r3, [r0, #15]
}
   2b574:	4770      	bx	lr

0002b576 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b576:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b578:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b57a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b57c:	f88d 2000 	strb.w	r2, [sp]
   2b580:	7942      	ldrb	r2, [r0, #5]
   2b582:	f88d 2001 	strb.w	r2, [sp, #1]
   2b586:	7a82      	ldrb	r2, [r0, #10]
   2b588:	f88d 2002 	strb.w	r2, [sp, #2]
   2b58c:	7bc2      	ldrb	r2, [r0, #15]
   2b58e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b592:	7902      	ldrb	r2, [r0, #4]
   2b594:	f88d 2004 	strb.w	r2, [sp, #4]
   2b598:	7a42      	ldrb	r2, [r0, #9]
   2b59a:	f88d 2005 	strb.w	r2, [sp, #5]
   2b59e:	7b82      	ldrb	r2, [r0, #14]
   2b5a0:	f88d 2006 	strb.w	r2, [sp, #6]
   2b5a4:	78c2      	ldrb	r2, [r0, #3]
   2b5a6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b5aa:	7a02      	ldrb	r2, [r0, #8]
   2b5ac:	f88d 2008 	strb.w	r2, [sp, #8]
   2b5b0:	7b42      	ldrb	r2, [r0, #13]
   2b5b2:	f88d 2009 	strb.w	r2, [sp, #9]
   2b5b6:	7882      	ldrb	r2, [r0, #2]
   2b5b8:	f88d 200a 	strb.w	r2, [sp, #10]
   2b5bc:	79c2      	ldrb	r2, [r0, #7]
   2b5be:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b5c2:	7b02      	ldrb	r2, [r0, #12]
   2b5c4:	f88d 200c 	strb.w	r2, [sp, #12]
   2b5c8:	7842      	ldrb	r2, [r0, #1]
   2b5ca:	f88d 200d 	strb.w	r2, [sp, #13]
   2b5ce:	7982      	ldrb	r2, [r0, #6]
   2b5d0:	f88d 200e 	strb.w	r2, [sp, #14]
   2b5d4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b5d8:	2310      	movs	r3, #16
   2b5da:	466a      	mov	r2, sp
   2b5dc:	4619      	mov	r1, r3
   2b5de:	f7ff ff6d 	bl	2b4bc <_copy>
}
   2b5e2:	b005      	add	sp, #20
   2b5e4:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5e8 <mult_row_column>:
{
   2b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5ea:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5ec:	7808      	ldrb	r0, [r1, #0]
{
   2b5ee:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5f0:	f7ff ff73 	bl	2b4da <_double_byte>
   2b5f4:	4605      	mov	r5, r0
   2b5f6:	7860      	ldrb	r0, [r4, #1]
   2b5f8:	f7ff ff6f 	bl	2b4da <_double_byte>
   2b5fc:	78a2      	ldrb	r2, [r4, #2]
   2b5fe:	7863      	ldrb	r3, [r4, #1]
   2b600:	4053      	eors	r3, r2
   2b602:	78e2      	ldrb	r2, [r4, #3]
   2b604:	4053      	eors	r3, r2
   2b606:	405d      	eors	r5, r3
   2b608:	4068      	eors	r0, r5
   2b60a:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b60c:	7860      	ldrb	r0, [r4, #1]
   2b60e:	7827      	ldrb	r7, [r4, #0]
   2b610:	f7ff ff63 	bl	2b4da <_double_byte>
   2b614:	4605      	mov	r5, r0
   2b616:	78a0      	ldrb	r0, [r4, #2]
   2b618:	f7ff ff5f 	bl	2b4da <_double_byte>
   2b61c:	78a3      	ldrb	r3, [r4, #2]
   2b61e:	405f      	eors	r7, r3
   2b620:	78e3      	ldrb	r3, [r4, #3]
   2b622:	405f      	eors	r7, r3
   2b624:	407d      	eors	r5, r7
   2b626:	4068      	eors	r0, r5
   2b628:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b62a:	7863      	ldrb	r3, [r4, #1]
   2b62c:	7827      	ldrb	r7, [r4, #0]
   2b62e:	78a0      	ldrb	r0, [r4, #2]
   2b630:	405f      	eors	r7, r3
   2b632:	f7ff ff52 	bl	2b4da <_double_byte>
   2b636:	4605      	mov	r5, r0
   2b638:	78e0      	ldrb	r0, [r4, #3]
   2b63a:	f7ff ff4e 	bl	2b4da <_double_byte>
   2b63e:	78e3      	ldrb	r3, [r4, #3]
   2b640:	405f      	eors	r7, r3
   2b642:	407d      	eors	r5, r7
   2b644:	4068      	eors	r0, r5
   2b646:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b648:	7820      	ldrb	r0, [r4, #0]
   2b64a:	f7ff ff46 	bl	2b4da <_double_byte>
   2b64e:	7862      	ldrb	r2, [r4, #1]
   2b650:	7823      	ldrb	r3, [r4, #0]
   2b652:	4053      	eors	r3, r2
   2b654:	78a2      	ldrb	r2, [r4, #2]
   2b656:	4053      	eors	r3, r2
   2b658:	ea80 0503 	eor.w	r5, r0, r3
   2b65c:	78e0      	ldrb	r0, [r4, #3]
   2b65e:	f7ff ff3c 	bl	2b4da <_double_byte>
   2b662:	b2ed      	uxtb	r5, r5
   2b664:	4045      	eors	r5, r0
   2b666:	70f5      	strb	r5, [r6, #3]
}
   2b668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b66a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b66a:	b570      	push	{r4, r5, r6, lr}
   2b66c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b66e:	4605      	mov	r5, r0
{
   2b670:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   2b672:	2800      	cmp	r0, #0
   2b674:	d049      	beq.n	2b70a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b676:	2900      	cmp	r1, #0
   2b678:	d049      	beq.n	2b70e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b67a:	2a00      	cmp	r2, #0
   2b67c:	d049      	beq.n	2b712 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b67e:	2310      	movs	r3, #16
   2b680:	460a      	mov	r2, r1
   2b682:	4668      	mov	r0, sp
   2b684:	4619      	mov	r1, r3
   2b686:	f7ff ff19 	bl	2b4bc <_copy>
	add_round_key(state, s->words);
   2b68a:	4621      	mov	r1, r4
   2b68c:	4668      	mov	r0, sp
   2b68e:	f7ff ff2d 	bl	2b4ec <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b692:	3410      	adds	r4, #16
   2b694:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b698:	4668      	mov	r0, sp
   2b69a:	f7e4 ffd5 	bl	10648 <sub_bytes>
		shift_rows(state);
   2b69e:	4668      	mov	r0, sp
   2b6a0:	f7ff ff69 	bl	2b576 <shift_rows>
	mult_row_column(t, s);
   2b6a4:	4669      	mov	r1, sp
   2b6a6:	a804      	add	r0, sp, #16
   2b6a8:	f7ff ff9e 	bl	2b5e8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b6ac:	a901      	add	r1, sp, #4
   2b6ae:	a805      	add	r0, sp, #20
   2b6b0:	f7ff ff9a 	bl	2b5e8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b6b4:	a902      	add	r1, sp, #8
   2b6b6:	a806      	add	r0, sp, #24
   2b6b8:	f7ff ff96 	bl	2b5e8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b6bc:	a903      	add	r1, sp, #12
   2b6be:	a807      	add	r0, sp, #28
   2b6c0:	f7ff ff92 	bl	2b5e8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b6c4:	2310      	movs	r3, #16
   2b6c6:	4668      	mov	r0, sp
   2b6c8:	4619      	mov	r1, r3
   2b6ca:	eb0d 0203 	add.w	r2, sp, r3
   2b6ce:	f7ff fef5 	bl	2b4bc <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b6d2:	4621      	mov	r1, r4
   2b6d4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b6d6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b6d8:	f7ff ff08 	bl	2b4ec <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b6dc:	42b4      	cmp	r4, r6
   2b6de:	d1db      	bne.n	2b698 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b6e0:	f7e4 ffb2 	bl	10648 <sub_bytes>
	shift_rows(state);
   2b6e4:	4668      	mov	r0, sp
   2b6e6:	f7ff ff46 	bl	2b576 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b6ea:	4621      	mov	r1, r4
   2b6ec:	4668      	mov	r0, sp
   2b6ee:	f7ff fefd 	bl	2b4ec <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b6f2:	2310      	movs	r3, #16
   2b6f4:	466a      	mov	r2, sp
   2b6f6:	4619      	mov	r1, r3
   2b6f8:	4628      	mov	r0, r5
   2b6fa:	f7ff fedf 	bl	2b4bc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b6fe:	4668      	mov	r0, sp
   2b700:	2210      	movs	r2, #16
   2b702:	2100      	movs	r1, #0
   2b704:	f7ff fee7 	bl	2b4d6 <_set>

	return TC_CRYPTO_SUCCESS;
   2b708:	2001      	movs	r0, #1
}
   2b70a:	b008      	add	sp, #32
   2b70c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b70e:	4608      	mov	r0, r1
   2b710:	e7fb      	b.n	2b70a <tc_aes_encrypt+0xa0>
   2b712:	4610      	mov	r0, r2
   2b714:	e7f9      	b.n	2b70a <tc_aes_encrypt+0xa0>

0002b716 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b716:	460a      	mov	r2, r1
{
   2b718:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b71a:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   2b71e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b720:	2b00      	cmp	r3, #0
   2b722:	bfac      	ite	ge
   2b724:	2300      	movge	r3, #0
   2b726:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b728:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b72c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b730:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b732:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b736:	d002      	beq.n	2b73e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b738:	7813      	ldrb	r3, [r2, #0]
   2b73a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b73c:	e7f4      	b.n	2b728 <gf_double+0x12>
	}
}
   2b73e:	bd10      	pop	{r4, pc}

0002b740 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b740:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b742:	b120      	cbz	r0, 2b74e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b744:	2258      	movs	r2, #88	; 0x58
   2b746:	2100      	movs	r1, #0
   2b748:	f7ff fec5 	bl	2b4d6 <_set>
   2b74c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b74e:	bd08      	pop	{r3, pc}

0002b750 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b750:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b752:	4604      	mov	r4, r0
   2b754:	b188      	cbz	r0, 2b77a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b756:	2210      	movs	r2, #16
   2b758:	2100      	movs	r1, #0
   2b75a:	f7ff febc 	bl	2b4d6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b75e:	2210      	movs	r2, #16
   2b760:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b764:	2100      	movs	r1, #0
   2b766:	f7ff feb6 	bl	2b4d6 <_set>
	s->leftover_offset = 0;
   2b76a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b76c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   2b76e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   2b770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b774:	2001      	movs	r0, #1
   2b776:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   2b77a:	bd10      	pop	{r4, pc}

0002b77c <tc_cmac_setup>:
{
   2b77c:	b570      	push	{r4, r5, r6, lr}
   2b77e:	4604      	mov	r4, r0
   2b780:	460d      	mov	r5, r1
   2b782:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b784:	b310      	cbz	r0, 2b7cc <tc_cmac_setup+0x50>
   2b786:	b311      	cbz	r1, 2b7ce <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b788:	2258      	movs	r2, #88	; 0x58
   2b78a:	2100      	movs	r1, #0
   2b78c:	f7ff fea3 	bl	2b4d6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b790:	4629      	mov	r1, r5
   2b792:	4630      	mov	r0, r6
	s->sched = sched;
   2b794:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b796:	f7e4 ff63 	bl	10660 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b79a:	2210      	movs	r2, #16
   2b79c:	2100      	movs	r1, #0
   2b79e:	4620      	mov	r0, r4
   2b7a0:	f7ff fe99 	bl	2b4d6 <_set>
	gf_double (s->K1, s->iv);
   2b7a4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b7a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b7aa:	4621      	mov	r1, r4
   2b7ac:	4620      	mov	r0, r4
   2b7ae:	f7ff ff5c 	bl	2b66a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b7b2:	4621      	mov	r1, r4
   2b7b4:	4628      	mov	r0, r5
   2b7b6:	f7ff ffae 	bl	2b716 <gf_double>
	gf_double (s->K2, s->K1);
   2b7ba:	4629      	mov	r1, r5
   2b7bc:	f104 0020 	add.w	r0, r4, #32
   2b7c0:	f7ff ffa9 	bl	2b716 <gf_double>
	tc_cmac_init(s);
   2b7c4:	4620      	mov	r0, r4
   2b7c6:	f7ff ffc3 	bl	2b750 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b7ca:	2001      	movs	r0, #1
}
   2b7cc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b7ce:	4608      	mov	r0, r1
   2b7d0:	e7fc      	b.n	2b7cc <tc_cmac_setup+0x50>

0002b7d2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7d6:	460e      	mov	r6, r1
   2b7d8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b7da:	4604      	mov	r4, r0
   2b7dc:	2800      	cmp	r0, #0
   2b7de:	d060      	beq.n	2b8a2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b7e0:	b1fa      	cbz	r2, 2b822 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b7e2:	2900      	cmp	r1, #0
   2b7e4:	d05d      	beq.n	2b8a2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b7e6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b7ea:	ea53 0102 	orrs.w	r1, r3, r2
   2b7ee:	d058      	beq.n	2b8a2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b7f0:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b7f2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b7f6:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b7fa:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b7fe:	f1b8 0f00 	cmp.w	r8, #0
   2b802:	d02c      	beq.n	2b85e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b804:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b808:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b80c:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b80e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b810:	d20a      	bcs.n	2b828 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b812:	462b      	mov	r3, r5
   2b814:	4632      	mov	r2, r6
   2b816:	4629      	mov	r1, r5
   2b818:	f7ff fe50 	bl	2b4bc <_copy>
			s->leftover_offset += data_length;
   2b81c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b81e:	442b      	add	r3, r5
   2b820:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b822:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b828:	463b      	mov	r3, r7
   2b82a:	4632      	mov	r2, r6
   2b82c:	4639      	mov	r1, r7
   2b82e:	f7ff fe45 	bl	2b4bc <_copy>
		s->leftover_offset = 0;
   2b832:	2300      	movs	r3, #0
   2b834:	3d10      	subs	r5, #16
   2b836:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b838:	4445      	add	r5, r8
		data += remaining_space;
   2b83a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b83c:	1e63      	subs	r3, r4, #1
   2b83e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b842:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b846:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b84a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b84c:	ea82 0200 	eor.w	r2, r2, r0
   2b850:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b852:	d1f6      	bne.n	2b842 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b854:	4621      	mov	r1, r4
   2b856:	4620      	mov	r0, r4
   2b858:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b85a:	f7ff ff06 	bl	2b66a <tc_aes_encrypt>
   2b85e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b862:	2d10      	cmp	r5, #16
   2b864:	d80a      	bhi.n	2b87c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b866:	2d00      	cmp	r5, #0
   2b868:	d0db      	beq.n	2b822 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b86a:	462b      	mov	r3, r5
   2b86c:	4632      	mov	r2, r6
   2b86e:	4629      	mov	r1, r5
   2b870:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b874:	f7ff fe22 	bl	2b4bc <_copy>
		s->leftover_offset = data_length;
   2b878:	6465      	str	r5, [r4, #68]	; 0x44
   2b87a:	e7d2      	b.n	2b822 <tc_cmac_update+0x50>
   2b87c:	1e63      	subs	r3, r4, #1
   2b87e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b880:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b888:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b88a:	ea82 0200 	eor.w	r2, r2, r0
   2b88e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b890:	d1f6      	bne.n	2b880 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b892:	4621      	mov	r1, r4
   2b894:	4620      	mov	r0, r4
   2b896:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b898:	f7ff fee7 	bl	2b66a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b89c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b89e:	3d10      	subs	r5, #16
   2b8a0:	e7df      	b.n	2b862 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b8a2:	2000      	movs	r0, #0
   2b8a4:	e7be      	b.n	2b824 <tc_cmac_update+0x52>

0002b8a6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b8a6:	b570      	push	{r4, r5, r6, lr}
   2b8a8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b8aa:	4605      	mov	r5, r0
   2b8ac:	b1f0      	cbz	r0, 2b8ec <tc_cmac_final+0x46>
   2b8ae:	b371      	cbz	r1, 2b90e <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b8b0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b8b2:	2a10      	cmp	r2, #16
   2b8b4:	d11b      	bne.n	2b8ee <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b8b6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8b8:	1e63      	subs	r3, r4, #1
   2b8ba:	3901      	subs	r1, #1
   2b8bc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b8c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b8c4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8c8:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b8ca:	ea82 0206 	eor.w	r2, r2, r6
   2b8ce:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   2b8d2:	ea82 0206 	eor.w	r2, r2, r6
   2b8d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8d8:	d1f2      	bne.n	2b8c0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b8da:	4621      	mov	r1, r4
   2b8dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b8de:	4628      	mov	r0, r5
   2b8e0:	f7ff fec3 	bl	2b66a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b8e4:	4620      	mov	r0, r4
   2b8e6:	f7ff ff2b 	bl	2b740 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b8ea:	2001      	movs	r0, #1
}
   2b8ec:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b8ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b8f2:	2100      	movs	r1, #0
   2b8f4:	f1c2 0210 	rsb	r2, r2, #16
   2b8f8:	4420      	add	r0, r4
   2b8fa:	f7ff fdec 	bl	2b4d6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b8fe:	2280      	movs	r2, #128	; 0x80
   2b900:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   2b902:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b906:	4423      	add	r3, r4
   2b908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b90c:	e7d4      	b.n	2b8b8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b90e:	4608      	mov	r0, r1
   2b910:	e7ec      	b.n	2b8ec <tc_cmac_final+0x46>

0002b912 <tc_sha256_update>:
{
   2b912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b914:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   2b916:	b110      	cbz	r0, 2b91e <tc_sha256_update+0xc>
   2b918:	b1f9      	cbz	r1, 2b95a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   2b91a:	b90a      	cbnz	r2, 2b920 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   2b91c:	2001      	movs	r0, #1
}
   2b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   2b920:	2700      	movs	r7, #0
   2b922:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   2b924:	f100 0628 	add.w	r6, r0, #40	; 0x28
		s->leftover[s->leftover_offset++] = *(data++);
   2b928:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2b92a:	1c5a      	adds	r2, r3, #1
   2b92c:	6682      	str	r2, [r0, #104]	; 0x68
   2b92e:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b932:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b934:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   2b936:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   2b93a:	d90b      	bls.n	2b954 <tc_sha256_update+0x42>
			compress(s->iv, s->leftover);
   2b93c:	4631      	mov	r1, r6
   2b93e:	f7e4 fee3 	bl	10708 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   2b942:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   2b946:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   2b94a:	f142 0200 	adc.w	r2, r2, #0
   2b94e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   2b952:	6687      	str	r7, [r0, #104]	; 0x68
	while (datalen-- > 0) {
   2b954:	42a5      	cmp	r5, r4
   2b956:	d1e7      	bne.n	2b928 <tc_sha256_update+0x16>
   2b958:	e7e0      	b.n	2b91c <tc_sha256_update+0xa>
		return TC_CRYPTO_FAIL;
   2b95a:	4608      	mov	r0, r1
   2b95c:	e7df      	b.n	2b91e <tc_sha256_update+0xc>

0002b95e <tc_sha256_final>:
{
   2b95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b960:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   2b962:	4605      	mov	r5, r0
   2b964:	2800      	cmp	r0, #0
   2b966:	d054      	beq.n	2ba12 <tc_sha256_final+0xb4>
   2b968:	2900      	cmp	r1, #0
   2b96a:	d053      	beq.n	2ba14 <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   2b96c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   2b96e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   2b972:	00d8      	lsls	r0, r3, #3
   2b974:	1812      	adds	r2, r2, r0
   2b976:	f141 0100 	adc.w	r1, r1, #0
   2b97a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b97e:	2280      	movs	r2, #128	; 0x80
   2b980:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b982:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b984:	4423      	add	r3, r4
   2b986:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   2b988:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   2b98c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   2b990:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   2b994:	d90a      	bls.n	2b9ac <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   2b996:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   2b99a:	4639      	mov	r1, r7
   2b99c:	4430      	add	r0, r6
   2b99e:	f7ff fd9a 	bl	2b4d6 <_set>
		compress(s->iv, s->leftover);
   2b9a2:	4631      	mov	r1, r6
   2b9a4:	4620      	mov	r0, r4
   2b9a6:	f7e4 feaf 	bl	10708 <compress>
		s->leftover_offset = 0;
   2b9aa:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   2b9ac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2b9ae:	2100      	movs	r1, #0
   2b9b0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   2b9b4:	4430      	add	r0, r6
   2b9b6:	f7ff fd8e 	bl	2b4d6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b9ba:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   2b9bc:	4631      	mov	r1, r6
   2b9be:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   2b9c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   2b9c2:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b9c4:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   2b9c6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   2b9ca:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b9ce:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   2b9d0:	0e1b      	lsrs	r3, r3, #24
   2b9d2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   2b9d6:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   2b9d8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   2b9dc:	f7e4 fe94 	bl	10708 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9e0:	1d2b      	adds	r3, r5, #4
   2b9e2:	1f21      	subs	r1, r4, #4
   2b9e4:	3524      	adds	r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   2b9e6:	f851 2f04 	ldr.w	r2, [r1, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2b9ea:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   2b9ec:	0e10      	lsrs	r0, r2, #24
   2b9ee:	f803 0c08 	strb.w	r0, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   2b9f2:	0c10      	lsrs	r0, r2, #16
   2b9f4:	f803 0c07 	strb.w	r0, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   2b9f8:	0a10      	lsrs	r0, r2, #8
   2b9fa:	f803 0c06 	strb.w	r0, [r3, #-6]
		*digest++ = (uint8_t)(t);
   2b9fe:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   2ba02:	42ab      	cmp	r3, r5
   2ba04:	d1ef      	bne.n	2b9e6 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   2ba06:	4620      	mov	r0, r4
   2ba08:	2270      	movs	r2, #112	; 0x70
   2ba0a:	2100      	movs	r1, #0
   2ba0c:	f7ff fd63 	bl	2b4d6 <_set>
	return TC_CRYPTO_SUCCESS;
   2ba10:	2001      	movs	r0, #1
}
   2ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2ba14:	4608      	mov	r0, r1
   2ba16:	e7fc      	b.n	2ba12 <tc_sha256_final+0xb4>

0002ba18 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   2ba18:	b530      	push	{r4, r5, lr}
   2ba1a:	1e43      	subs	r3, r0, #1
   2ba1c:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   2ba1e:	42a9      	cmp	r1, r5
   2ba20:	d106      	bne.n	2ba30 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ba22:	2136      	movs	r1, #54	; 0x36
   2ba24:	245c      	movs	r4, #92	; 0x5c
   2ba26:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ba28:	1a13      	subs	r3, r2, r0
   2ba2a:	2b3f      	cmp	r3, #63	; 0x3f
   2ba2c:	d90c      	bls.n	2ba48 <rekey+0x30>
	}
}
   2ba2e:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   2ba30:	780c      	ldrb	r4, [r1, #0]
   2ba32:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   2ba36:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   2ba3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ba3e:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   2ba42:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   2ba46:	e7ea      	b.n	2ba1e <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   2ba48:	f802 1b01 	strb.w	r1, [r2], #1
   2ba4c:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   2ba50:	e7ea      	b.n	2ba28 <rekey+0x10>

0002ba52 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   2ba52:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba54:	460e      	mov	r6, r1
   2ba56:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   2ba58:	4605      	mov	r5, r0
{
   2ba5a:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   2ba5c:	b1b8      	cbz	r0, 2ba8e <tc_hmac_set_key+0x3c>
   2ba5e:	b341      	cbz	r1, 2bab2 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   2ba60:	b34a      	cbz	r2, 2bab6 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ba62:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   2ba64:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   2ba68:	d813      	bhi.n	2ba92 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   2ba6a:	a810      	add	r0, sp, #64	; 0x40
   2ba6c:	f7e4 ff36 	bl	108dc <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   2ba70:	4622      	mov	r2, r4
   2ba72:	4669      	mov	r1, sp
   2ba74:	a810      	add	r0, sp, #64	; 0x40
   2ba76:	f7ff ff4c 	bl	2b912 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   2ba7a:	a910      	add	r1, sp, #64	; 0x40
   2ba7c:	a834      	add	r0, sp, #208	; 0xd0
   2ba7e:	f7ff ff6e 	bl	2b95e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   2ba82:	4622      	mov	r2, r4
   2ba84:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   2ba86:	4638      	mov	r0, r7
   2ba88:	f7ff ffc6 	bl	2ba18 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   2ba8c:	2001      	movs	r0, #1
}
   2ba8e:	b04d      	add	sp, #308	; 0x134
   2ba90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   2ba92:	f7e4 ff23 	bl	108dc <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ba96:	4622      	mov	r2, r4
   2ba98:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2ba9a:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   2ba9e:	4628      	mov	r0, r5
   2baa0:	f7ff ff37 	bl	2b912 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   2baa4:	4629      	mov	r1, r5
   2baa6:	4620      	mov	r0, r4
   2baa8:	f7ff ff59 	bl	2b95e <tc_sha256_final>
		rekey(ctx->key,
   2baac:	2220      	movs	r2, #32
   2baae:	4621      	mov	r1, r4
   2bab0:	e7e9      	b.n	2ba86 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   2bab2:	4608      	mov	r0, r1
   2bab4:	e7eb      	b.n	2ba8e <tc_hmac_set_key+0x3c>
   2bab6:	4610      	mov	r0, r2
   2bab8:	e7e9      	b.n	2ba8e <tc_hmac_set_key+0x3c>

0002baba <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   2baba:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2babc:	4604      	mov	r4, r0
   2babe:	b140      	cbz	r0, 2bad2 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   2bac0:	f7e4 ff0c 	bl	108dc <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   2bac4:	2240      	movs	r2, #64	; 0x40
   2bac6:	4620      	mov	r0, r4
   2bac8:	f104 0170 	add.w	r1, r4, #112	; 0x70
   2bacc:	f7ff ff21 	bl	2b912 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2bad0:	2001      	movs	r0, #1
}
   2bad2:	bd10      	pop	{r4, pc}

0002bad4 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   2bad4:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   2bad6:	b110      	cbz	r0, 2bade <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   2bad8:	f7ff ff1b 	bl	2b912 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   2badc:	2001      	movs	r0, #1
}
   2bade:	bd08      	pop	{r3, pc}

0002bae0 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   2bae0:	b570      	push	{r4, r5, r6, lr}
   2bae2:	460e      	mov	r6, r1
   2bae4:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2bae6:	4605      	mov	r5, r0
   2bae8:	b1f0      	cbz	r0, 2bb28 <tc_hmac_final+0x48>
   2baea:	2920      	cmp	r1, #32
   2baec:	d11c      	bne.n	2bb28 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   2baee:	b1ea      	cbz	r2, 2bb2c <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   2baf0:	4611      	mov	r1, r2
   2baf2:	f7ff ff34 	bl	2b95e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   2baf6:	4620      	mov	r0, r4
   2baf8:	f7e4 fef0 	bl	108dc <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   2bafc:	2240      	movs	r2, #64	; 0x40
   2bafe:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   2bb02:	4620      	mov	r0, r4
   2bb04:	f7ff ff05 	bl	2b912 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   2bb08:	4632      	mov	r2, r6
   2bb0a:	4629      	mov	r1, r5
   2bb0c:	4620      	mov	r0, r4
   2bb0e:	f7ff ff00 	bl	2b912 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   2bb12:	4621      	mov	r1, r4
   2bb14:	4628      	mov	r0, r5
   2bb16:	f7ff ff22 	bl	2b95e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   2bb1a:	4620      	mov	r0, r4
   2bb1c:	22f0      	movs	r2, #240	; 0xf0
   2bb1e:	2100      	movs	r1, #0
   2bb20:	f7ff fcd9 	bl	2b4d6 <_set>

	return TC_CRYPTO_SUCCESS;
   2bb24:	2001      	movs	r0, #1
}
   2bb26:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2bb28:	2000      	movs	r0, #0
   2bb2a:	e7fc      	b.n	2bb26 <tc_hmac_final+0x46>
   2bb2c:	4610      	mov	r0, r2
   2bb2e:	e7fa      	b.n	2bb26 <tc_hmac_final+0x46>

0002bb30 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   2bb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb34:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   2bb36:	f04f 0b01 	mov.w	fp, #1
{
   2bb3a:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   2bb3c:	2300      	movs	r3, #0
{
   2bb3e:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb40:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   2bb44:	4631      	mov	r1, r6
{
   2bb46:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb48:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   2bb4a:	f88d 3006 	strb.w	r3, [sp, #6]
{
   2bb4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   2bb52:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb56:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bb5a:	f7ff ff7a 	bl	2ba52 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   2bb5e:	4620      	mov	r0, r4
   2bb60:	f7ff ffab 	bl	2baba <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bb64:	2220      	movs	r2, #32
   2bb66:	4629      	mov	r1, r5
   2bb68:	4620      	mov	r0, r4
   2bb6a:	f7ff ffb3 	bl	2bad4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   2bb6e:	465a      	mov	r2, fp
   2bb70:	4620      	mov	r0, r4
   2bb72:	f10d 0106 	add.w	r1, sp, #6
   2bb76:	f7ff ffad 	bl	2bad4 <tc_hmac_update>

	if (data && datalen)
   2bb7a:	f1b8 0f00 	cmp.w	r8, #0
   2bb7e:	d007      	beq.n	2bb90 <update+0x60>
   2bb80:	f1b9 0f00 	cmp.w	r9, #0
   2bb84:	d004      	beq.n	2bb90 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   2bb86:	464a      	mov	r2, r9
   2bb88:	4641      	mov	r1, r8
   2bb8a:	4620      	mov	r0, r4
   2bb8c:	f7ff ffa2 	bl	2bad4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bb90:	b13f      	cbz	r7, 2bba2 <update+0x72>
   2bb92:	f1ba 0f00 	cmp.w	sl, #0
   2bb96:	d004      	beq.n	2bba2 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bb98:	4652      	mov	r2, sl
   2bb9a:	4639      	mov	r1, r7
   2bb9c:	4620      	mov	r0, r4
   2bb9e:	f7ff ff99 	bl	2bad4 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bba2:	4622      	mov	r2, r4
   2bba4:	2120      	movs	r1, #32
   2bba6:	4630      	mov	r0, r6
   2bba8:	f7ff ff9a 	bl	2bae0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bbac:	2220      	movs	r2, #32
   2bbae:	4631      	mov	r1, r6
   2bbb0:	4620      	mov	r0, r4
   2bbb2:	f7ff ff4e 	bl	2ba52 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bbb6:	4620      	mov	r0, r4
   2bbb8:	f7ff ff7f 	bl	2baba <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bbbc:	2220      	movs	r2, #32
   2bbbe:	4629      	mov	r1, r5
   2bbc0:	4620      	mov	r0, r4
   2bbc2:	f7ff ff87 	bl	2bad4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bbc6:	4622      	mov	r2, r4
   2bbc8:	2120      	movs	r1, #32
   2bbca:	4628      	mov	r0, r5
   2bbcc:	f7ff ff88 	bl	2bae0 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   2bbd0:	f1b8 0f00 	cmp.w	r8, #0
   2bbd4:	d03a      	beq.n	2bc4c <update+0x11c>
   2bbd6:	f1b9 0f00 	cmp.w	r9, #0
   2bbda:	d037      	beq.n	2bc4c <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bbdc:	2220      	movs	r2, #32
   2bbde:	4631      	mov	r1, r6
   2bbe0:	4620      	mov	r0, r4
   2bbe2:	f7ff ff36 	bl	2ba52 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   2bbe6:	4620      	mov	r0, r4
   2bbe8:	f7ff ff67 	bl	2baba <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bbec:	2220      	movs	r2, #32
   2bbee:	4629      	mov	r1, r5
   2bbf0:	4620      	mov	r0, r4
   2bbf2:	f7ff ff6f 	bl	2bad4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   2bbf6:	2201      	movs	r2, #1
   2bbf8:	f10d 0107 	add.w	r1, sp, #7
   2bbfc:	4620      	mov	r0, r4
   2bbfe:	f7ff ff69 	bl	2bad4 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   2bc02:	464a      	mov	r2, r9
   2bc04:	4641      	mov	r1, r8
   2bc06:	4620      	mov	r0, r4
   2bc08:	f7ff ff64 	bl	2bad4 <tc_hmac_update>
	if (additional_data && additional_datalen)
   2bc0c:	b13f      	cbz	r7, 2bc1e <update+0xee>
   2bc0e:	f1ba 0f00 	cmp.w	sl, #0
   2bc12:	d004      	beq.n	2bc1e <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   2bc14:	4652      	mov	r2, sl
   2bc16:	4639      	mov	r1, r7
   2bc18:	4620      	mov	r0, r4
   2bc1a:	f7ff ff5b 	bl	2bad4 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   2bc1e:	4622      	mov	r2, r4
   2bc20:	2120      	movs	r1, #32
   2bc22:	4630      	mov	r0, r6
   2bc24:	f7ff ff5c 	bl	2bae0 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bc28:	2220      	movs	r2, #32
   2bc2a:	4631      	mov	r1, r6
   2bc2c:	4620      	mov	r0, r4
   2bc2e:	f7ff ff10 	bl	2ba52 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   2bc32:	4620      	mov	r0, r4
   2bc34:	f7ff ff41 	bl	2baba <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bc38:	2220      	movs	r2, #32
   2bc3a:	4629      	mov	r1, r5
   2bc3c:	4620      	mov	r0, r4
   2bc3e:	f7ff ff49 	bl	2bad4 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bc42:	4622      	mov	r2, r4
   2bc44:	2120      	movs	r1, #32
   2bc46:	4628      	mov	r0, r5
   2bc48:	f7ff ff4a 	bl	2bae0 <tc_hmac_final>
}
   2bc4c:	b003      	add	sp, #12
   2bc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc52 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   2bc52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc54:	460c      	mov	r4, r1
   2bc56:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bc58:	4605      	mov	r5, r0
   2bc5a:	b1b0      	cbz	r0, 2bc8a <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   2bc5c:	b1b9      	cbz	r1, 2bc8e <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   2bc5e:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   2bc60:	2220      	movs	r2, #32
   2bc62:	2100      	movs	r1, #0
   2bc64:	30f0      	adds	r0, #240	; 0xf0
   2bc66:	f7ff fc36 	bl	2b4d6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   2bc6a:	2220      	movs	r2, #32
   2bc6c:	2101      	movs	r1, #1
   2bc6e:	f505 7088 	add.w	r0, r5, #272	; 0x110
   2bc72:	f7ff fc30 	bl	2b4d6 <_set>
	update(prng, personalization, plen, 0, 0);
   2bc76:	4628      	mov	r0, r5
   2bc78:	4633      	mov	r3, r6
   2bc7a:	463a      	mov	r2, r7
   2bc7c:	4621      	mov	r1, r4
   2bc7e:	9600      	str	r6, [sp, #0]
   2bc80:	f7ff ff56 	bl	2bb30 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   2bc84:	2001      	movs	r0, #1
	prng->countdown = 0;
   2bc86:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   2bc8a:	b003      	add	sp, #12
   2bc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2bc8e:	4608      	mov	r0, r1
   2bc90:	e7fb      	b.n	2bc8a <tc_hmac_prng_init+0x38>

0002bc92 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   2bc92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bc94:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   2bc96:	4605      	mov	r5, r0
   2bc98:	b180      	cbz	r0, 2bcbc <tc_hmac_prng_reseed+0x2a>
   2bc9a:	b179      	cbz	r1, 2bcbc <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   2bc9c:	2a1f      	cmp	r2, #31
   2bc9e:	d90d      	bls.n	2bcbc <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   2bca0:	b153      	cbz	r3, 2bcb8 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   2bca2:	b16c      	cbz	r4, 2bcc0 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   2bca4:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   2bca6:	f7ff ff43 	bl	2bb30 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   2bcaa:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   2bcae:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   2bcb0:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   2bcb4:	b003      	add	sp, #12
   2bcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   2bcb8:	9300      	str	r3, [sp, #0]
   2bcba:	e7f4      	b.n	2bca6 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   2bcbc:	2000      	movs	r0, #0
   2bcbe:	e7f9      	b.n	2bcb4 <tc_hmac_prng_reseed+0x22>
   2bcc0:	4620      	mov	r0, r4
   2bcc2:	e7f7      	b.n	2bcb4 <tc_hmac_prng_reseed+0x22>

0002bcc4 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   2bcc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bcc8:	460d      	mov	r5, r1
   2bcca:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   2bccc:	4680      	mov	r8, r0
   2bcce:	b3d8      	cbz	r0, 2bd48 <tc_hmac_prng_generate+0x84>
   2bcd0:	b3d2      	cbz	r2, 2bd48 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   2bcd2:	1e4b      	subs	r3, r1, #1
   2bcd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   2bcd8:	d236      	bcs.n	2bd48 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   2bcda:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   2bcde:	b3ab      	cbz	r3, 2bd4c <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   2bce0:	3b01      	subs	r3, #1
   2bce2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bce6:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bcea:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   2bcee:	2220      	movs	r2, #32
   2bcf0:	4649      	mov	r1, r9
   2bcf2:	4620      	mov	r0, r4
   2bcf4:	f7ff fead 	bl	2ba52 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   2bcf8:	4620      	mov	r0, r4
   2bcfa:	f7ff fede 	bl	2baba <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   2bcfe:	2220      	movs	r2, #32
   2bd00:	4639      	mov	r1, r7
   2bd02:	4620      	mov	r0, r4
   2bd04:	f7ff fee6 	bl	2bad4 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   2bd08:	4622      	mov	r2, r4
   2bd0a:	2120      	movs	r1, #32
   2bd0c:	4638      	mov	r0, r7
   2bd0e:	f7ff fee7 	bl	2bae0 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   2bd12:	2d20      	cmp	r5, #32
   2bd14:	462e      	mov	r6, r5
   2bd16:	bf28      	it	cs
   2bd18:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   2bd1a:	4640      	mov	r0, r8
   2bd1c:	4633      	mov	r3, r6
   2bd1e:	463a      	mov	r2, r7
   2bd20:	4631      	mov	r1, r6
   2bd22:	f7ff fbcb 	bl	2b4bc <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   2bd26:	2d20      	cmp	r5, #32
   2bd28:	bf38      	it	cc
   2bd2a:	2520      	movcc	r5, #32
	while (outlen != 0) {
   2bd2c:	3d20      	subs	r5, #32
		out += bufferlen;
   2bd2e:	44b0      	add	r8, r6
	while (outlen != 0) {
   2bd30:	d1dd      	bne.n	2bcee <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   2bd32:	4620      	mov	r0, r4
   2bd34:	462b      	mov	r3, r5
   2bd36:	462a      	mov	r2, r5
   2bd38:	4629      	mov	r1, r5
   2bd3a:	9500      	str	r5, [sp, #0]
   2bd3c:	f7ff fef8 	bl	2bb30 <update>

	return TC_CRYPTO_SUCCESS;
   2bd40:	2001      	movs	r0, #1
}
   2bd42:	b003      	add	sp, #12
   2bd44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2bd48:	2000      	movs	r0, #0
   2bd4a:	e7fa      	b.n	2bd42 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   2bd4c:	f04f 30ff 	mov.w	r0, #4294967295
   2bd50:	e7f7      	b.n	2bd42 <tc_hmac_prng_generate+0x7e>

0002bd52 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2bd52:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2bd54:	6800      	ldr	r0, [r0, #0]
   2bd56:	f7e4 be0b 	b.w	10970 <z_arm_fatal_error>

0002bd5a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2bd5a:	2100      	movs	r1, #0
   2bd5c:	2001      	movs	r0, #1
   2bd5e:	f7e4 be07 	b.w	10970 <z_arm_fatal_error>

0002bd62 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2bd62:	b508      	push	{r3, lr}
	handler();
   2bd64:	f7e4 fecc 	bl	10b00 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2bd68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2bd6c:	f7e4 bf96 	b.w	10c9c <z_arm_exc_exit>

0002bd70 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2bd70:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2bd72:	f383 880b 	msr	PSPLIM, r3
}
   2bd76:	4770      	bx	lr

0002bd78 <z_log_msg_static_create.constprop.0>:
   2bd78:	2300      	movs	r3, #0
   2bd7a:	f7e2 bd99 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002bd7e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2bd7e:	4770      	bx	lr

0002bd80 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
   2bd80:	4770      	bx	lr

0002bd82 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2bd82:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   2bd86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2bd8a:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   2bd8c:	bf08      	it	eq
   2bd8e:	f06f 0015 	mvneq.w	r0, #21
   2bd92:	4770      	bx	lr

0002bd94 <mpu_configure_region>:
{
   2bd94:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   2bd96:	890a      	ldrh	r2, [r1, #8]
   2bd98:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   2bd9a:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
   2bd9c:	684c      	ldr	r4, [r1, #4]
   2bd9e:	f002 021f 	and.w	r2, r2, #31
{
   2bda2:	b085      	sub	sp, #20
   2bda4:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   2bda8:	9300      	str	r3, [sp, #0]
   2bdaa:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2bdae:	f023 031f 	bic.w	r3, r3, #31
   2bdb2:	1e62      	subs	r2, r4, #1
   2bdb4:	4413      	add	r3, r2
   2bdb6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2bdba:	2807      	cmp	r0, #7
   2bdbc:	9303      	str	r3, [sp, #12]
   2bdbe:	d904      	bls.n	2bdca <mpu_configure_region+0x36>
}
   2bdc0:	b005      	add	sp, #20
   2bdc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2bdc6:	f7e5 bb8d 	b.w	114e4 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
   2bdca:	4669      	mov	r1, sp
   2bdcc:	f7e5 fb70 	bl	114b0 <region_init>
}
   2bdd0:	b005      	add	sp, #20
   2bdd2:	bd30      	pop	{r4, r5, pc}

0002bdd4 <_stdout_hook_default>:
}
   2bdd4:	f04f 30ff 	mov.w	r0, #4294967295
   2bdd8:	4770      	bx	lr

0002bdda <_stdin_hook_default>:
}
   2bdda:	2000      	movs	r0, #0
   2bddc:	4770      	bx	lr

0002bdde <_read>:
{
   2bdde:	4608      	mov	r0, r1
   2bde0:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   2bde2:	f7e5 bd8f 	b.w	11904 <z_impl_zephyr_read_stdin>

0002bde6 <_write>:
{
   2bde6:	4608      	mov	r0, r1
   2bde8:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2bdea:	f7e5 bd9f 	b.w	1192c <z_impl_zephyr_write_stdout>

0002bdee <_close>:
int _close(int file)
   2bdee:	f04f 30ff 	mov.w	r0, #4294967295
   2bdf2:	4770      	bx	lr

0002bdf4 <_lseek>:
}
   2bdf4:	2000      	movs	r0, #0
   2bdf6:	4770      	bx	lr

0002bdf8 <_isatty>:
}
   2bdf8:	2802      	cmp	r0, #2
   2bdfa:	bfcc      	ite	gt
   2bdfc:	2000      	movgt	r0, #0
   2bdfe:	2001      	movle	r0, #1
   2be00:	4770      	bx	lr

0002be02 <_kill>:
}
   2be02:	2000      	movs	r0, #0
   2be04:	4770      	bx	lr

0002be06 <_getpid>:
}
   2be06:	2000      	movs	r0, #0
   2be08:	4770      	bx	lr

0002be0a <_fstat>:
	st->st_mode = S_IFCHR;
   2be0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2be0e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2be10:	604b      	str	r3, [r1, #4]
}
   2be12:	4770      	bx	lr

0002be14 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2be14:	f7f8 bc7a 	b.w	2470c <z_impl_z_errno>

0002be18 <bt_rpa_irk_matches>:
	return 0;
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2be18:	b530      	push	{r4, r5, lr}
   2be1a:	4605      	mov	r5, r0
	memcpy(res, r, 3);
   2be1c:	f8b1 2003 	ldrh.w	r2, [r1, #3]
{
   2be20:	b087      	sub	sp, #28
	memcpy(res, r, 3);
   2be22:	794b      	ldrb	r3, [r1, #5]
   2be24:	f8ad 2008 	strh.w	r2, [sp, #8]
{
   2be28:	460c      	mov	r4, r1
	(void)memset(res + 3, 0, 13);
   2be2a:	220d      	movs	r2, #13
   2be2c:	2100      	movs	r1, #0
   2be2e:	f10d 000b 	add.w	r0, sp, #11
	memcpy(res, r, 3);
   2be32:	f88d 300a 	strb.w	r3, [sp, #10]
	(void)memset(res + 3, 0, 13);
   2be36:	f004 fbe4 	bl	30602 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2be3a:	aa02      	add	r2, sp, #8
   2be3c:	4611      	mov	r1, r2
   2be3e:	4628      	mov	r0, r5
   2be40:	f000 fb59 	bl	2c4f6 <bt_encrypt_le>
	if (err) {
   2be44:	b110      	cbz	r0, 2be4c <bt_rpa_irk_matches+0x34>

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
	if (err) {
		return false;
   2be46:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   2be48:	b007      	add	sp, #28
   2be4a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   2be4c:	9b02      	ldr	r3, [sp, #8]
	return !memcmp(addr->val, hash, 3);
   2be4e:	2203      	movs	r2, #3
	memcpy(out, res, 3);
   2be50:	f8ad 3004 	strh.w	r3, [sp, #4]
	return !memcmp(addr->val, hash, 3);
   2be54:	4620      	mov	r0, r4
	memcpy(out, res, 3);
   2be56:	0c1b      	lsrs	r3, r3, #16
	return !memcmp(addr->val, hash, 3);
   2be58:	a901      	add	r1, sp, #4
	memcpy(out, res, 3);
   2be5a:	f88d 3006 	strb.w	r3, [sp, #6]
	return !memcmp(addr->val, hash, 3);
   2be5e:	f004 fb86 	bl	3056e <memcmp>
   2be62:	fab0 f080 	clz	r0, r0
   2be66:	0940      	lsrs	r0, r0, #5
   2be68:	e7ee      	b.n	2be48 <bt_rpa_irk_matches+0x30>

0002be6a <bt_settings_decode_key>:
{
   2be6a:	b570      	push	{r4, r5, r6, lr}
   2be6c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2be6e:	2100      	movs	r1, #0
{
   2be70:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2be72:	f7ff fa54 	bl	2b31e <settings_name_next>
   2be76:	280d      	cmp	r0, #13
   2be78:	d118      	bne.n	2beac <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2be7a:	7b23      	ldrb	r3, [r4, #12]
   2be7c:	2b30      	cmp	r3, #48	; 0x30
   2be7e:	d013      	beq.n	2bea8 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2be80:	2b31      	cmp	r3, #49	; 0x31
   2be82:	d113      	bne.n	2beac <bt_settings_decode_key+0x42>
   2be84:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2be86:	f805 3b06 	strb.w	r3, [r5], #6
   2be8a:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be8e:	462a      	mov	r2, r5
   2be90:	4620      	mov	r0, r4
   2be92:	2301      	movs	r3, #1
   2be94:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2be96:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2be98:	f7fe fa10 	bl	2a2bc <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2be9c:	42b4      	cmp	r4, r6
   2be9e:	f105 35ff 	add.w	r5, r5, #4294967295
   2bea2:	d1f4      	bne.n	2be8e <bt_settings_decode_key+0x24>
	return 0;
   2bea4:	2000      	movs	r0, #0
}
   2bea6:	bd70      	pop	{r4, r5, r6, pc}
   2bea8:	2300      	movs	r3, #0
   2beaa:	e7ec      	b.n	2be86 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2beac:	f06f 0015 	mvn.w	r0, #21
   2beb0:	e7f9      	b.n	2bea6 <bt_settings_decode_key+0x3c>

0002beb2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2beb2:	b510      	push	{r4, lr}
   2beb4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2beb6:	7801      	ldrb	r1, [r0, #0]
   2beb8:	7822      	ldrb	r2, [r4, #0]
{
   2beba:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2bebc:	428a      	cmp	r2, r1
   2bebe:	d00f      	beq.n	2bee0 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2bec0:	4669      	mov	r1, sp
   2bec2:	f7e5 ff99 	bl	11df8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2bec6:	4620      	mov	r0, r4
   2bec8:	a905      	add	r1, sp, #20
   2beca:	f7e5 ff95 	bl	11df8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2bece:	2210      	movs	r2, #16
   2bed0:	f10d 0115 	add.w	r1, sp, #21
   2bed4:	f10d 0001 	add.w	r0, sp, #1
   2bed8:	f004 fb49 	bl	3056e <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2bedc:	b00a      	add	sp, #40	; 0x28
   2bede:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2bee0:	2a01      	cmp	r2, #1
   2bee2:	d006      	beq.n	2bef2 <bt_uuid_cmp+0x40>
   2bee4:	2a02      	cmp	r2, #2
   2bee6:	d007      	beq.n	2bef8 <bt_uuid_cmp+0x46>
   2bee8:	b972      	cbnz	r2, 2bf08 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2beea:	8840      	ldrh	r0, [r0, #2]
   2beec:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2beee:	1ac0      	subs	r0, r0, r3
   2bef0:	e7f4      	b.n	2bedc <bt_uuid_cmp+0x2a>
   2bef2:	6840      	ldr	r0, [r0, #4]
   2bef4:	6863      	ldr	r3, [r4, #4]
   2bef6:	e7fa      	b.n	2beee <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bef8:	2210      	movs	r2, #16
   2befa:	1c61      	adds	r1, r4, #1
   2befc:	3001      	adds	r0, #1
}
   2befe:	b00a      	add	sp, #40	; 0x28
   2bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bf04:	f004 bb33 	b.w	3056e <memcmp>
	switch (u1->type) {
   2bf08:	f06f 0015 	mvn.w	r0, #21
   2bf0c:	e7e6      	b.n	2bedc <bt_uuid_cmp+0x2a>

0002bf0e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2bf0e:	2a04      	cmp	r2, #4
   2bf10:	d00a      	beq.n	2bf28 <bt_uuid_create+0x1a>
   2bf12:	2a10      	cmp	r2, #16
   2bf14:	d00d      	beq.n	2bf32 <bt_uuid_create+0x24>
   2bf16:	2a02      	cmp	r2, #2
   2bf18:	f04f 0300 	mov.w	r3, #0
   2bf1c:	d115      	bne.n	2bf4a <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2bf1e:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2bf20:	880b      	ldrh	r3, [r1, #0]
   2bf22:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2bf24:	2001      	movs	r0, #1
   2bf26:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2bf28:	2301      	movs	r3, #1
   2bf2a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2bf2c:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2bf2e:	6043      	str	r3, [r0, #4]
		break;
   2bf30:	e7f8      	b.n	2bf24 <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2bf32:	2302      	movs	r3, #2
   2bf34:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bf38:	f101 0310 	add.w	r3, r1, #16
   2bf3c:	f851 2b04 	ldr.w	r2, [r1], #4
   2bf40:	4299      	cmp	r1, r3
   2bf42:	f840 2b04 	str.w	r2, [r0], #4
   2bf46:	d1f9      	bne.n	2bf3c <bt_uuid_create+0x2e>
   2bf48:	e7ec      	b.n	2bf24 <bt_uuid_create+0x16>
	switch (data_len) {
   2bf4a:	4618      	mov	r0, r3
}
   2bf4c:	4770      	bx	lr

0002bf4e <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2bf4e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2bf50:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2bf52:	2106      	movs	r1, #6
{
   2bf54:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2bf56:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2bf5a:	f7e8 fb03 	bl	14564 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2bf5e:	b918      	cbnz	r0, 2bf68 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2bf60:	79a3      	ldrb	r3, [r4, #6]
   2bf62:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2bf66:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2bf68:	bd10      	pop	{r4, pc}

0002bf6a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2bf6a:	280f      	cmp	r0, #15
   2bf6c:	d807      	bhi.n	2bf7e <bt_hci_evt_get_flags+0x14>
   2bf6e:	280d      	cmp	r0, #13
   2bf70:	d80b      	bhi.n	2bf8a <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2bf72:	2805      	cmp	r0, #5
   2bf74:	bf08      	it	eq
   2bf76:	2003      	moveq	r0, #3
   2bf78:	bf18      	it	ne
   2bf7a:	2002      	movne	r0, #2
   2bf7c:	4770      	bx	lr
	switch (evt) {
   2bf7e:	2813      	cmp	r0, #19
   2bf80:	d003      	beq.n	2bf8a <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2bf82:	281a      	cmp	r0, #26
   2bf84:	bf08      	it	eq
   2bf86:	2001      	moveq	r0, #1
   2bf88:	e7f6      	b.n	2bf78 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2bf8a:	2001      	movs	r0, #1
	}
}
   2bf8c:	4770      	bx	lr

0002bf8e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2bf8e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2bf92:	b183      	cbz	r3, 2bfb6 <update_sec_level+0x28>
   2bf94:	7b5a      	ldrb	r2, [r3, #13]
   2bf96:	07d1      	lsls	r1, r2, #31
   2bf98:	d50d      	bpl.n	2bfb6 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bf9a:	06d2      	lsls	r2, r2, #27
   2bf9c:	d50d      	bpl.n	2bfba <update_sec_level+0x2c>
   2bf9e:	7b1b      	ldrb	r3, [r3, #12]
   2bfa0:	2b10      	cmp	r3, #16
   2bfa2:	bf14      	ite	ne
   2bfa4:	2303      	movne	r3, #3
   2bfa6:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2bfa8:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2bfaa:	7a80      	ldrb	r0, [r0, #10]
}
   2bfac:	4298      	cmp	r0, r3
   2bfae:	bf8c      	ite	hi
   2bfb0:	2000      	movhi	r0, #0
   2bfb2:	2001      	movls	r0, #1
   2bfb4:	4770      	bx	lr
   2bfb6:	2302      	movs	r3, #2
   2bfb8:	e7f6      	b.n	2bfa8 <update_sec_level+0x1a>
   2bfba:	2303      	movs	r3, #3
   2bfbc:	e7f4      	b.n	2bfa8 <update_sec_level+0x1a>

0002bfbe <hci_vendor_event>:
}
   2bfbe:	4770      	bx	lr

0002bfc0 <atomic_or>:
{
   2bfc0:	4603      	mov	r3, r0
   2bfc2:	b510      	push	{r4, lr}
}
   2bfc4:	e8d3 0fef 	ldaex	r0, [r3]
   2bfc8:	ea40 0201 	orr.w	r2, r0, r1
   2bfcc:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2bfd0:	2c00      	cmp	r4, #0
   2bfd2:	d1f7      	bne.n	2bfc4 <atomic_or+0x4>
   2bfd4:	bd10      	pop	{r4, pc}

0002bfd6 <bt_addr_copy>:
   2bfd6:	680b      	ldr	r3, [r1, #0]
   2bfd8:	6003      	str	r3, [r0, #0]
   2bfda:	888b      	ldrh	r3, [r1, #4]
   2bfdc:	8083      	strh	r3, [r0, #4]
}
   2bfde:	4770      	bx	lr

0002bfe0 <bt_addr_le_copy>:
   2bfe0:	680b      	ldr	r3, [r1, #0]
   2bfe2:	6003      	str	r3, [r0, #0]
   2bfe4:	888b      	ldrh	r3, [r1, #4]
   2bfe6:	8083      	strh	r3, [r0, #4]
   2bfe8:	798b      	ldrb	r3, [r1, #6]
   2bfea:	7183      	strb	r3, [r0, #6]
}
   2bfec:	4770      	bx	lr

0002bfee <z_log_msg_static_create.constprop.0>:
   2bfee:	2300      	movs	r3, #0
   2bff0:	f7e2 bc5e 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002bff4 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bff4:	e8d0 3fef 	ldaex	r3, [r0]
   2bff8:	400b      	ands	r3, r1
   2bffa:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2bffe:	2a00      	cmp	r2, #0
   2c000:	d1f8      	bne.n	2bff4 <atomic_and.isra.0>
}
   2c002:	4770      	bx	lr

0002c004 <sys_put_le64>:
	dst[1] = val >> 8;
   2c004:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2c008:	7053      	strb	r3, [r2, #1]
	dst[0] = val;
   2c00a:	2300      	movs	r3, #0
   2c00c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2c00e:	0e00      	lsrs	r0, r0, #24
   2c010:	70d0      	strb	r0, [r2, #3]
   2c012:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2c016:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2c018:	7093      	strb	r3, [r2, #2]
   2c01a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2c01c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2c01e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2c020:	71d1      	strb	r1, [r2, #7]
}
   2c022:	4770      	bx	lr

0002c024 <bt_hci_disconnect>:
{
   2c024:	b570      	push	{r4, r5, r6, lr}
   2c026:	4606      	mov	r6, r0
   2c028:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2c02a:	f240 4006 	movw	r0, #1030	; 0x406
   2c02e:	2103      	movs	r1, #3
   2c030:	f7e6 fbd2 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c034:	4604      	mov	r4, r0
   2c036:	b168      	cbz	r0, 2c054 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2c038:	2103      	movs	r1, #3
   2c03a:	300c      	adds	r0, #12
   2c03c:	f7ef fbd6 	bl	1b7ec <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2c040:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2c042:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c044:	4621      	mov	r1, r4
}
   2c046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2c04a:	2200      	movs	r2, #0
   2c04c:	f240 4006 	movw	r0, #1030	; 0x406
   2c050:	f7e6 bc10 	b.w	12874 <bt_hci_cmd_send_sync>
}
   2c054:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c058:	bd70      	pop	{r4, r5, r6, pc}

0002c05a <bt_le_set_data_len>:
{
   2c05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c05c:	4607      	mov	r7, r0
   2c05e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c060:	f242 0022 	movw	r0, #8226	; 0x2022
   2c064:	2106      	movs	r1, #6
{
   2c066:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2c068:	f7e6 fbb6 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c06c:	4604      	mov	r4, r0
   2c06e:	b178      	cbz	r0, 2c090 <bt_le_set_data_len+0x36>
   2c070:	2106      	movs	r1, #6
   2c072:	300c      	adds	r0, #12
   2c074:	f7ef fbba 	bl	1b7ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c078:	883b      	ldrh	r3, [r7, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2c07a:	8046      	strh	r6, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c07c:	8003      	strh	r3, [r0, #0]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2c07e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c080:	4621      	mov	r1, r4
}
   2c082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2c086:	2200      	movs	r2, #0
   2c088:	f242 0022 	movw	r0, #8226	; 0x2022
   2c08c:	f7e6 bbf2 	b.w	12874 <bt_hci_cmd_send_sync>
}
   2c090:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c096 <bt_le_set_phy>:
{
   2c096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c09a:	4681      	mov	r9, r0
   2c09c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c09e:	f242 0032 	movw	r0, #8242	; 0x2032
   2c0a2:	2107      	movs	r1, #7
{
   2c0a4:	4617      	mov	r7, r2
   2c0a6:	461e      	mov	r6, r3
   2c0a8:	f89d a020 	ldrb.w	sl, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2c0ac:	f7e6 fb94 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c0b0:	4605      	mov	r5, r0
   2c0b2:	b1a0      	cbz	r0, 2c0de <bt_le_set_phy+0x48>
   2c0b4:	2107      	movs	r1, #7
   2c0b6:	300c      	adds	r0, #12
   2c0b8:	f7ef fb98 	bl	1b7ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c0bc:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   2c0c0:	f880 8002 	strb.w	r8, [r0, #2]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c0c4:	8003      	strh	r3, [r0, #0]
	cp->tx_phys = pref_tx_phy;
   2c0c6:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2c0c8:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2c0ca:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c0ce:	4629      	mov	r1, r5
}
   2c0d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2c0d4:	2200      	movs	r2, #0
   2c0d6:	f242 0032 	movw	r0, #8242	; 0x2032
   2c0da:	f7e6 bbcb 	b.w	12874 <bt_hci_cmd_send_sync>
}
   2c0de:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c0e6 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2c0e6:	68c0      	ldr	r0, [r0, #12]
   2c0e8:	f7e6 bc94 	b.w	12a14 <bt_hci_le_enh_conn_complete>

0002c0ec <bt_le_conn_params_valid>:
{
   2c0ec:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2c0ee:	8803      	ldrh	r3, [r0, #0]
   2c0f0:	8842      	ldrh	r2, [r0, #2]
   2c0f2:	4293      	cmp	r3, r2
   2c0f4:	d819      	bhi.n	2c12a <bt_le_conn_params_valid+0x3e>
   2c0f6:	2b05      	cmp	r3, #5
   2c0f8:	d917      	bls.n	2c12a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2c0fa:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2c0fe:	d814      	bhi.n	2c12a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2c100:	8883      	ldrh	r3, [r0, #4]
   2c102:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2c106:	d210      	bcs.n	2c12a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c108:	f640 4476 	movw	r4, #3190	; 0xc76
   2c10c:	88c0      	ldrh	r0, [r0, #6]
   2c10e:	f1a0 010a 	sub.w	r1, r0, #10
   2c112:	b289      	uxth	r1, r1
   2c114:	42a1      	cmp	r1, r4
   2c116:	d808      	bhi.n	2c12a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2c118:	3301      	adds	r3, #1
   2c11a:	b29b      	uxth	r3, r3
   2c11c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2c11e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2c122:	bf34      	ite	cc
   2c124:	2001      	movcc	r0, #1
   2c126:	2000      	movcs	r0, #0
}
   2c128:	bd10      	pop	{r4, pc}
		return false;
   2c12a:	2000      	movs	r0, #0
   2c12c:	e7fc      	b.n	2c128 <bt_le_conn_params_valid+0x3c>

0002c12e <le_conn_param_neg_reply>:
{
   2c12e:	b570      	push	{r4, r5, r6, lr}
   2c130:	4606      	mov	r6, r0
   2c132:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2c134:	f242 0021 	movw	r0, #8225	; 0x2021
   2c138:	2103      	movs	r1, #3
   2c13a:	f7e6 fb4d 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c13e:	4604      	mov	r4, r0
   2c140:	b918      	cbnz	r0, 2c14a <le_conn_param_neg_reply+0x1c>
}
   2c142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c146:	f7e5 bf59 	b.w	11ffc <le_conn_param_neg_reply.part.0>
   2c14a:	2103      	movs	r1, #3
   2c14c:	300c      	adds	r0, #12
   2c14e:	f7ef fb4d 	bl	1b7ec <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2c152:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2c154:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c156:	4621      	mov	r1, r4
}
   2c158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2c15c:	f242 0021 	movw	r0, #8225	; 0x2021
   2c160:	f7e6 bebe 	b.w	12ee0 <bt_hci_cmd_send>

0002c164 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2c164:	f240 3041 	movw	r0, #833	; 0x341
   2c168:	4770      	bx	lr

0002c16a <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2c16a:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2c16c:	f7ee fa1a 	bl	1a5a4 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2c170:	b118      	cbz	r0, 2c17a <bt_addr_le_is_bonded+0x10>
   2c172:	89c0      	ldrh	r0, [r0, #14]
   2c174:	3800      	subs	r0, #0
   2c176:	bf18      	it	ne
   2c178:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2c17a:	bd08      	pop	{r3, pc}

0002c17c <bt_addr_le_eq>:
	return memcmp(a, b, sizeof(*a));
   2c17c:	2207      	movs	r2, #7
{
   2c17e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c180:	f004 f9f5 	bl	3056e <memcmp>
}
   2c184:	fab0 f080 	clz	r0, r0
   2c188:	0940      	lsrs	r0, r0, #5
   2c18a:	bd08      	pop	{r3, pc}

0002c18c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c18c:	e8d0 0faf 	lda	r0, [r0]
}
   2c190:	4770      	bx	lr

0002c192 <bt_addr_copy>:
   2c192:	680b      	ldr	r3, [r1, #0]
   2c194:	6003      	str	r3, [r0, #0]
   2c196:	888b      	ldrh	r3, [r1, #4]
   2c198:	8083      	strh	r3, [r0, #4]
}
   2c19a:	4770      	bx	lr

0002c19c <bt_addr_le_copy>:
   2c19c:	680b      	ldr	r3, [r1, #0]
   2c19e:	6003      	str	r3, [r0, #0]
   2c1a0:	888b      	ldrh	r3, [r1, #4]
   2c1a2:	8083      	strh	r3, [r0, #4]
   2c1a4:	798b      	ldrb	r3, [r1, #6]
   2c1a6:	7183      	strb	r3, [r0, #6]
}
   2c1a8:	4770      	bx	lr

0002c1aa <hci_id_add>:
{
   2c1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c1ac:	460f      	mov	r7, r1
   2c1ae:	4614      	mov	r4, r2
	if (id >= CONFIG_BT_ID_MAX) {
   2c1b0:	bb30      	cbnz	r0, 2c200 <hci_id_add+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2c1b2:	2127      	movs	r1, #39	; 0x27
   2c1b4:	f242 0027 	movw	r0, #8231	; 0x2027
   2c1b8:	f7e6 fb0e 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c1bc:	4605      	mov	r5, r0
   2c1be:	b310      	cbz	r0, 2c206 <hci_id_add+0x5c>
   2c1c0:	2127      	movs	r1, #39	; 0x27
   2c1c2:	300c      	adds	r0, #12
   2c1c4:	f7ef fb12 	bl	1b7ec <net_buf_simple_add>
   2c1c8:	4622      	mov	r2, r4
   2c1ca:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2c1cc:	4639      	mov	r1, r7
   2c1ce:	f7ff ffe5 	bl	2c19c <bt_addr_le_copy>
   2c1d2:	1dc3      	adds	r3, r0, #7
   2c1d4:	f104 0110 	add.w	r1, r4, #16
   2c1d8:	f852 0b04 	ldr.w	r0, [r2], #4
   2c1dc:	428a      	cmp	r2, r1
   2c1de:	f843 0b04 	str.w	r0, [r3], #4
   2c1e2:	d1f9      	bne.n	2c1d8 <hci_id_add+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   2c1e4:	2210      	movs	r2, #16
   2c1e6:	2100      	movs	r1, #0
   2c1e8:	f106 0017 	add.w	r0, r6, #23
   2c1ec:	f004 fa09 	bl	30602 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c1f0:	4629      	mov	r1, r5
}
   2c1f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2c1f6:	2200      	movs	r2, #0
   2c1f8:	f242 0027 	movw	r0, #8231	; 0x2027
   2c1fc:	f7e6 bb3a 	b.w	12874 <bt_hci_cmd_send_sync>
		return -EINVAL;
   2c200:	f06f 0015 	mvn.w	r0, #21
}
   2c204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   2c206:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c20a:	e7fb      	b.n	2c204 <hci_id_add+0x5a>

0002c20c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c20c:	7a03      	ldrb	r3, [r0, #8]
{
   2c20e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c210:	075b      	lsls	r3, r3, #29
   2c212:	d505      	bpl.n	2c220 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2c214:	4601      	mov	r1, r0
   2c216:	322a      	adds	r2, #42	; 0x2a
   2c218:	f811 0b01 	ldrb.w	r0, [r1], #1
   2c21c:	f7ff bfc5 	b.w	2c1aa <hci_id_add>
}
   2c220:	4770      	bx	lr

0002c222 <z_log_msg_static_create.constprop.0>:
   2c222:	2300      	movs	r3, #0
   2c224:	f7e2 bb44 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002c228 <addr_res_enable>:
{
   2c228:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c22a:	2101      	movs	r1, #1
{
   2c22c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2c22e:	f242 002d 	movw	r0, #8237	; 0x202d
   2c232:	f7e6 fad1 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c236:	4604      	mov	r4, r0
   2c238:	b158      	cbz	r0, 2c252 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2c23a:	4629      	mov	r1, r5
   2c23c:	300c      	adds	r0, #12
   2c23e:	f001 ff06 	bl	2e04e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c242:	4621      	mov	r1, r4
}
   2c244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2c248:	2200      	movs	r2, #0
   2c24a:	f242 002d 	movw	r0, #8237	; 0x202d
   2c24e:	f7e6 bb11 	b.w	12874 <bt_hci_cmd_send_sync>
}
   2c252:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c256:	bd38      	pop	{r3, r4, r5, pc}

0002c258 <adv_unpause_enabled>:
{
   2c258:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c25a:	f100 0310 	add.w	r3, r0, #16
   2c25e:	e8d3 2fef 	ldaex	r2, [r3]
   2c262:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2c266:	e8c3 1fe4 	stlex	r4, r1, [r3]
   2c26a:	2c00      	cmp	r4, #0
   2c26c:	d1f7      	bne.n	2c25e <adv_unpause_enabled+0x6>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2c26e:	0413      	lsls	r3, r2, #16
   2c270:	d503      	bpl.n	2c27a <adv_unpause_enabled+0x22>
		bt_le_adv_set_enable(adv, true);
   2c272:	2101      	movs	r1, #1
}
   2c274:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   2c276:	f000 b939 	b.w	2c4ec <bt_le_adv_set_enable>
}
   2c27a:	bc10      	pop	{r4}
   2c27c:	4770      	bx	lr

0002c27e <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c27e:	f100 0210 	add.w	r2, r0, #16
{
   2c282:	b508      	push	{r3, lr}
   2c284:	4603      	mov	r3, r0
   2c286:	4610      	mov	r0, r2
   2c288:	f7ff ff80 	bl	2c18c <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c28c:	0601      	lsls	r1, r0, #24
   2c28e:	d50d      	bpl.n	2c2ac <adv_pause_enabled+0x2e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c290:	e8d2 0fef 	ldaex	r0, [r2]
   2c294:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   2c298:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2c29c:	2900      	cmp	r1, #0
   2c29e:	d1f7      	bne.n	2c290 <adv_pause_enabled+0x12>
		bt_le_adv_set_enable(adv, false);
   2c2a0:	4618      	mov	r0, r3
}
   2c2a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2c2a6:	2100      	movs	r1, #0
   2c2a8:	f000 b920 	b.w	2c4ec <bt_le_adv_set_enable>
}
   2c2ac:	bd08      	pop	{r3, pc}

0002c2ae <bt_lookup_id_addr>:
{
   2c2ae:	b510      	push	{r4, lr}
   2c2b0:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2c2b2:	b930      	cbnz	r0, 2c2c2 <bt_lookup_id_addr+0x14>
   2c2b4:	b119      	cbz	r1, 2c2be <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2c2b6:	f7ee f91d 	bl	1a4f4 <bt_keys_find_irk>
		if (keys) {
   2c2ba:	b100      	cbz	r0, 2c2be <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2c2bc:	1c44      	adds	r4, r0, #1
}
   2c2be:	4620      	mov	r0, r4
   2c2c0:	bd10      	pop	{r4, pc}
		return NULL;
   2c2c2:	2400      	movs	r4, #0
   2c2c4:	e7fb      	b.n	2c2be <bt_lookup_id_addr+0x10>

0002c2c6 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   2c2c6:	b118      	cbz	r0, 2c2d0 <bt_id_set_adv_random_addr+0xa>
   2c2c8:	b111      	cbz	r1, 2c2d0 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   2c2ca:	4608      	mov	r0, r1
   2c2cc:	f7e7 ba0a 	b.w	136e4 <set_random_address>
}
   2c2d0:	f06f 0015 	mvn.w	r0, #21
   2c2d4:	4770      	bx	lr

0002c2d6 <bt_id_set_adv_private_addr>:
{
   2c2d6:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   2c2d8:	4604      	mov	r4, r0
   2c2da:	b180      	cbz	r0, 2c2fe <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2c2dc:	2106      	movs	r1, #6
   2c2de:	4668      	mov	r0, sp
   2c2e0:	f7e8 f940 	bl	14564 <bt_rand>
	if (err) {
   2c2e4:	b948      	cbnz	r0, 2c2fa <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   2c2e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2ea:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2c2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2f0:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   2c2f2:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2c2f6:	f7ff ffe6 	bl	2c2c6 <bt_id_set_adv_random_addr>
}
   2c2fa:	b002      	add	sp, #8
   2c2fc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2c2fe:	f06f 0015 	mvn.w	r0, #21
   2c302:	e7fa      	b.n	2c2fa <bt_id_set_adv_private_addr+0x24>

0002c304 <bt_id_adv_random_addr_check>:
}
   2c304:	3800      	subs	r0, #0
   2c306:	bf18      	it	ne
   2c308:	2001      	movne	r0, #1
   2c30a:	4770      	bx	lr

0002c30c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2c30c:	7a03      	ldrb	r3, [r0, #8]
   2c30e:	07d9      	lsls	r1, r3, #31
   2c310:	d504      	bpl.n	2c31c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2c312:	f023 0301 	bic.w	r3, r3, #1
   2c316:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2c318:	f7e7 bb50 	b.w	139bc <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2c31c:	0799      	lsls	r1, r3, #30
   2c31e:	d504      	bpl.n	2c32a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2c320:	f023 0302 	bic.w	r3, r3, #2
   2c324:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2c326:	f7e7 bb63 	b.w	139f0 <bt_id_del>
}
   2c32a:	4770      	bx	lr

0002c32c <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   2c32c:	2000      	movs	r0, #0
   2c32e:	4770      	bx	lr

0002c330 <get_adv_channel_map>:
{
   2c330:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2c332:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2c336:	bf0c      	ite	eq
   2c338:	2007      	moveq	r0, #7
   2c33a:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2c33c:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2c33e:	bf48      	it	mi
   2c340:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2c344:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2c346:	bf48      	it	mi
   2c348:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2c34c:	4770      	bx	lr

0002c34e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c34e:	e8d0 0faf 	lda	r0, [r0]
}
   2c352:	4770      	bx	lr

0002c354 <atomic_and>:
{
   2c354:	4603      	mov	r3, r0
   2c356:	b510      	push	{r4, lr}
}
   2c358:	e8d3 0fef 	ldaex	r0, [r3]
   2c35c:	ea00 0201 	and.w	r2, r0, r1
   2c360:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c364:	2c00      	cmp	r4, #0
   2c366:	d1f7      	bne.n	2c358 <atomic_and+0x4>
   2c368:	bd10      	pop	{r4, pc}

0002c36a <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c36a:	680b      	ldr	r3, [r1, #0]
   2c36c:	6003      	str	r3, [r0, #0]
   2c36e:	888b      	ldrh	r3, [r1, #4]
   2c370:	8083      	strh	r3, [r0, #4]
   2c372:	798b      	ldrb	r3, [r1, #6]
   2c374:	7183      	strb	r3, [r0, #6]
   2c376:	4770      	bx	lr

0002c378 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c378:	2301      	movs	r3, #1
{
   2c37a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c37c:	fa03 f101 	lsl.w	r1, r3, r1
{
   2c380:	4604      	mov	r4, r0
	if (val) {
   2c382:	b142      	cbz	r2, 2c396 <atomic_set_bit_to+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c384:	e8d4 3fef 	ldaex	r3, [r4]
   2c388:	430b      	orrs	r3, r1
   2c38a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2c38e:	2a00      	cmp	r2, #0
   2c390:	d1f8      	bne.n	2c384 <atomic_set_bit_to+0xc>
	}
}
   2c392:	bc10      	pop	{r4}
   2c394:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c396:	43c9      	mvns	r1, r1
}
   2c398:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c39a:	f7ff bfdb 	b.w	2c354 <atomic_and>

0002c39e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c39e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c3a2:	b087      	sub	sp, #28
   2c3a4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2c3a8:	4605      	mov	r5, r0
   2c3aa:	460c      	mov	r4, r1
   2c3ac:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2c3ae:	2100      	movs	r1, #0
   2c3b0:	2210      	movs	r2, #16
   2c3b2:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2c3b4:	461f      	mov	r7, r3
   2c3b6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2c3ba:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
   2c3be:	f004 f920 	bl	30602 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2c3c2:	b9ce      	cbnz	r6, 2c3f8 <le_adv_update.constprop.0+0x5a>
		d[0].len = ad_len;
   2c3c4:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2c3c8:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2c3ca:	f242 0008 	movw	r0, #8200	; 0x2008
   2c3ce:	a902      	add	r1, sp, #8
   2c3d0:	f7e7 fd4a 	bl	13e68 <hci_set_ad>
		if (err) {
   2c3d4:	4604      	mov	r4, r0
   2c3d6:	b958      	cbnz	r0, 2c3f0 <le_adv_update.constprop.0+0x52>
	if (scannable) {
   2c3d8:	f1ba 0f00 	cmp.w	sl, #0
   2c3dc:	d13a      	bne.n	2c454 <le_adv_update.constprop.0+0xb6>
   2c3de:	3510      	adds	r5, #16
   2c3e0:	e8d5 3fef 	ldaex	r3, [r5]
   2c3e4:	f043 0304 	orr.w	r3, r3, #4
   2c3e8:	e8c5 3fe2 	stlex	r2, r3, [r5]
   2c3ec:	2a00      	cmp	r2, #0
   2c3ee:	d1f7      	bne.n	2c3e0 <le_adv_update.constprop.0+0x42>
}
   2c3f0:	4620      	mov	r0, r4
   2c3f2:	b007      	add	sp, #28
   2c3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   2c3f8:	f7e7 f922 	bl	13640 <bt_get_name>
   2c3fc:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2c3fe:	b9e4      	cbnz	r4, 2c43a <le_adv_update.constprop.0+0x9c>
   2c400:	bb37      	cbnz	r7, 2c450 <le_adv_update.constprop.0+0xb2>
		data = (struct bt_data)BT_DATA(
   2c402:	4658      	mov	r0, fp
   2c404:	f7dc ffbf 	bl	9386 <strlen>
   2c408:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   2c40a:	2e01      	cmp	r6, #1
		d[0].data = ad;
   2c40c:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   2c410:	f88d 3000 	strb.w	r3, [sp]
   2c414:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   2c418:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   2c41c:	d1d4      	bne.n	2c3c8 <le_adv_update.constprop.0+0x2a>
			d_len = 2;
   2c41e:	2202      	movs	r2, #2
			d[1].data = &data;
   2c420:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2c424:	9605      	str	r6, [sp, #20]
			d_len = 2;
   2c426:	e7d0      	b.n	2c3ca <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c428:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2c42c:	3a08      	subs	r2, #8
   2c42e:	2a01      	cmp	r2, #1
   2c430:	d924      	bls.n	2c47c <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2c432:	3301      	adds	r3, #1
   2c434:	4598      	cmp	r8, r3
   2c436:	d1f7      	bne.n	2c428 <le_adv_update.constprop.0+0x8a>
   2c438:	e7e2      	b.n	2c400 <le_adv_update.constprop.0+0x62>
   2c43a:	2300      	movs	r3, #0
   2c43c:	e7fa      	b.n	2c434 <le_adv_update.constprop.0+0x96>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2c43e:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2c442:	3a08      	subs	r2, #8
   2c444:	2a01      	cmp	r2, #1
   2c446:	d919      	bls.n	2c47c <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
   2c448:	3301      	adds	r3, #1
   2c44a:	4599      	cmp	r9, r3
   2c44c:	d1f7      	bne.n	2c43e <le_adv_update.constprop.0+0xa0>
   2c44e:	e7d8      	b.n	2c402 <le_adv_update.constprop.0+0x64>
   2c450:	2300      	movs	r3, #0
   2c452:	e7fa      	b.n	2c44a <le_adv_update.constprop.0+0xac>
		d[0].data = sd;
   2c454:	2201      	movs	r2, #1
		if (name_type == ADV_NAME_TYPE_SD) {
   2c456:	2e02      	cmp	r6, #2
			d[1].len = 1;
   2c458:	bf08      	it	eq
   2c45a:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c45c:	f242 0009 	movw	r0, #8201	; 0x2009
			d_len = 2;
   2c460:	bf08      	it	eq
   2c462:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c464:	a902      	add	r1, sp, #8
			d[1].data = &data;
   2c466:	bf08      	it	eq
   2c468:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2c46c:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2c470:	f7e7 fcfa 	bl	13e68 <hci_set_ad>
		if (err) {
   2c474:	2800      	cmp	r0, #0
   2c476:	d0b2      	beq.n	2c3de <le_adv_update.constprop.0+0x40>
   2c478:	4604      	mov	r4, r0
   2c47a:	e7b9      	b.n	2c3f0 <le_adv_update.constprop.0+0x52>
			return -EINVAL;
   2c47c:	f06f 0415 	mvn.w	r4, #21
   2c480:	e7b6      	b.n	2c3f0 <le_adv_update.constprop.0+0x52>

0002c482 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2c482:	6843      	ldr	r3, [r0, #4]
   2c484:	f013 0008 	ands.w	r0, r3, #8
   2c488:	d00a      	beq.n	2c4a0 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2c48a:	035a      	lsls	r2, r3, #13
   2c48c:	d407      	bmi.n	2c49e <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2c48e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2c492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2c496:	bf14      	ite	ne
   2c498:	2002      	movne	r0, #2
   2c49a:	2001      	moveq	r0, #1
   2c49c:	4770      	bx	lr
   2c49e:	2001      	movs	r0, #1
}
   2c4a0:	4770      	bx	lr

0002c4a2 <bt_le_adv_set_enable_legacy>:
{
   2c4a2:	b570      	push	{r4, r5, r6, lr}
   2c4a4:	4606      	mov	r6, r0
   2c4a6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c4a8:	f242 000a 	movw	r0, #8202	; 0x200a
   2c4ac:	2101      	movs	r1, #1
{
   2c4ae:	b086      	sub	sp, #24
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2c4b0:	f7e6 f992 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c4b4:	4604      	mov	r4, r0
   2c4b6:	b1b0      	cbz	r0, 2c4e6 <bt_le_adv_set_enable_legacy+0x44>
   2c4b8:	300c      	adds	r0, #12
	if (enable) {
   2c4ba:	b195      	cbz	r5, 2c4e2 <bt_le_adv_set_enable_legacy+0x40>
   2c4bc:	2101      	movs	r1, #1
   2c4be:	f001 fdc6 	bl	2e04e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2c4c2:	4620      	mov	r0, r4
   2c4c4:	f106 0210 	add.w	r2, r6, #16
   2c4c8:	a903      	add	r1, sp, #12
   2c4ca:	2307      	movs	r3, #7
   2c4cc:	9500      	str	r5, [sp, #0]
   2c4ce:	f7e6 f971 	bl	127b4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2c4d2:	2200      	movs	r2, #0
   2c4d4:	4621      	mov	r1, r4
   2c4d6:	f242 000a 	movw	r0, #8202	; 0x200a
   2c4da:	f7e6 f9cb 	bl	12874 <bt_hci_cmd_send_sync>
}
   2c4de:	b006      	add	sp, #24
   2c4e0:	bd70      	pop	{r4, r5, r6, pc}
   2c4e2:	4629      	mov	r1, r5
   2c4e4:	e7eb      	b.n	2c4be <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2c4e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c4ea:	e7f8      	b.n	2c4de <bt_le_adv_set_enable_legacy+0x3c>

0002c4ec <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c4ec:	f7ff bfd9 	b.w	2c4a2 <bt_le_adv_set_enable_legacy>

0002c4f0 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2c4f0:	3018      	adds	r0, #24
   2c4f2:	f7f9 be1f 	b.w	26134 <k_work_cancel_delayable>

0002c4f6 <bt_encrypt_le>:
}
#endif /* CONFIG_BT_HOST_CRYPTO_PRNG */

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   2c4f6:	b530      	push	{r4, r5, lr}
   2c4f8:	460d      	mov	r5, r1
   2c4fa:	4614      	mov	r4, r2
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2c4fc:	4601      	mov	r1, r0
{
   2c4fe:	b0b1      	sub	sp, #196	; 0xc4
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   2c500:	b310      	cbz	r0, 2c548 <bt_encrypt_le+0x52>
   2c502:	b30d      	cbz	r5, 2c548 <bt_encrypt_le+0x52>
   2c504:	b302      	cbz	r2, 2c548 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   2c506:	4668      	mov	r0, sp
   2c508:	f7e7 ffa2 	bl	14450 <sys_memcpy_swap.constprop.0>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2c50c:	4669      	mov	r1, sp
   2c50e:	a804      	add	r0, sp, #16
   2c510:	f7e4 f8a6 	bl	10660 <tc_aes128_set_encrypt_key>
   2c514:	b1c0      	cbz	r0, 2c548 <bt_encrypt_le+0x52>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   2c516:	4629      	mov	r1, r5
   2c518:	4668      	mov	r0, sp
   2c51a:	f7e7 ff99 	bl	14450 <sys_memcpy_swap.constprop.0>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2c51e:	4669      	mov	r1, sp
   2c520:	4620      	mov	r0, r4
   2c522:	aa04      	add	r2, sp, #16
   2c524:	f7ff f8a1 	bl	2b66a <tc_aes_encrypt>
   2c528:	b170      	cbz	r0, 2c548 <bt_encrypt_le+0x52>
   2c52a:	1e63      	subs	r3, r4, #1
   2c52c:	f104 0210 	add.w	r2, r4, #16
   2c530:	3407      	adds	r4, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c532:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c536:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2c53a:	42a3      	cmp	r3, r4
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c53c:	7018      	strb	r0, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c53e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2c540:	d1f7      	bne.n	2c532 <bt_encrypt_le+0x3c>

	sys_mem_swap(enc_data, 16);

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   2c542:	2000      	movs	r0, #0
}
   2c544:	b031      	add	sp, #196	; 0xc4
   2c546:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c548:	f06f 0015 	mvn.w	r0, #21
   2c54c:	e7fa      	b.n	2c544 <bt_encrypt_le+0x4e>

0002c54e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c54e:	2200      	movs	r2, #0
	return list->head;
   2c550:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c552:	b90b      	cbnz	r3, 2c558 <sys_slist_find_and_remove+0xa>
   2c554:	4618      	mov	r0, r3
   2c556:	4770      	bx	lr
   2c558:	428b      	cmp	r3, r1
   2c55a:	d110      	bne.n	2c57e <sys_slist_find_and_remove+0x30>
	return node->next;
   2c55c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c55e:	b942      	cbnz	r2, 2c572 <sys_slist_find_and_remove+0x24>
   2c560:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2c562:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c564:	4291      	cmp	r1, r2
   2c566:	d100      	bne.n	2c56a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2c568:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2c56a:	2300      	movs	r3, #0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c56c:	2001      	movs	r0, #1
	parent->next = child;
   2c56e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c570:	4770      	bx	lr
	parent->next = child;
   2c572:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c574:	6843      	ldr	r3, [r0, #4]
   2c576:	4299      	cmp	r1, r3
	list->tail = node;
   2c578:	bf08      	it	eq
   2c57a:	6042      	streq	r2, [r0, #4]
}
   2c57c:	e7f5      	b.n	2c56a <sys_slist_find_and_remove+0x1c>
	return node->next;
   2c57e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c580:	681b      	ldr	r3, [r3, #0]
   2c582:	e7e6      	b.n	2c552 <sys_slist_find_and_remove+0x4>

0002c584 <atomic_and>:
{
   2c584:	4603      	mov	r3, r0
   2c586:	b510      	push	{r4, lr}
}
   2c588:	e8d3 0fef 	ldaex	r0, [r3]
   2c58c:	ea00 0201 	and.w	r2, r0, r1
   2c590:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2c594:	2c00      	cmp	r4, #0
   2c596:	d1f7      	bne.n	2c588 <atomic_and+0x4>
   2c598:	bd10      	pop	{r4, pc}

0002c59a <z_log_msg_static_create.constprop.0>:
   2c59a:	2300      	movs	r3, #0
   2c59c:	f7e2 b988 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002c5a0 <tx_complete_work>:
	tx_notify(conn);
   2c5a0:	3828      	subs	r0, #40	; 0x28
   2c5a2:	f7e8 b977 	b.w	14894 <tx_notify>

0002c5a6 <bt_conn_reset_rx_state>:
{
   2c5a6:	b510      	push	{r4, lr}
   2c5a8:	4604      	mov	r4, r0
	if (!conn->rx) {
   2c5aa:	6900      	ldr	r0, [r0, #16]
   2c5ac:	b118      	cbz	r0, 2c5b6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2c5ae:	f7ee fffb 	bl	1b5a8 <net_buf_unref>
	conn->rx = NULL;
   2c5b2:	2300      	movs	r3, #0
   2c5b4:	6123      	str	r3, [r4, #16]
}
   2c5b6:	bd10      	pop	{r4, pc}

0002c5b8 <conn_lookup_handle>:
{
   2c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c5bc:	4607      	mov	r7, r0
   2c5be:	460e      	mov	r6, r1
   2c5c0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2c5c2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c5c4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2c5c8:	42b4      	cmp	r4, r6
   2c5ca:	d103      	bne.n	2c5d4 <conn_lookup_handle+0x1c>
	return NULL;
   2c5cc:	2300      	movs	r3, #0
}
   2c5ce:	4618      	mov	r0, r3
   2c5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2c5d4:	fb09 7004 	mla	r0, r9, r4, r7
   2c5d8:	f7e8 fc1c 	bl	14e14 <bt_conn_ref>
   2c5dc:	4603      	mov	r3, r0
		if (!conn) {
   2c5de:	b158      	cbz	r0, 2c5f8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2c5e0:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2c5e2:	2d01      	cmp	r5, #1
   2c5e4:	d002      	beq.n	2c5ec <conn_lookup_handle+0x34>
   2c5e6:	3d07      	subs	r5, #7
   2c5e8:	2d01      	cmp	r5, #1
   2c5ea:	d803      	bhi.n	2c5f4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2c5ec:	881a      	ldrh	r2, [r3, #0]
   2c5ee:	4542      	cmp	r2, r8
   2c5f0:	d0ed      	beq.n	2c5ce <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2c5f2:	4618      	mov	r0, r3
   2c5f4:	f7e8 fc36 	bl	14e64 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2c5f8:	3401      	adds	r4, #1
   2c5fa:	e7e5      	b.n	2c5c8 <conn_lookup_handle+0x10>

0002c5fc <bt_conn_connected>:
{
   2c5fc:	b510      	push	{r4, lr}
   2c5fe:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2c600:	f7e9 f97c 	bl	158fc <bt_l2cap_connected>
	notify_connected(conn);
   2c604:	4620      	mov	r0, r4
}
   2c606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2c60a:	f7e8 b90d 	b.w	14828 <notify_connected>

0002c60e <bt_conn_disconnect>:
{
   2c60e:	b510      	push	{r4, lr}
	switch (conn->state) {
   2c610:	7b43      	ldrb	r3, [r0, #13]
{
   2c612:	4604      	mov	r4, r0
	switch (conn->state) {
   2c614:	3b02      	subs	r3, #2
   2c616:	2b06      	cmp	r3, #6
   2c618:	d816      	bhi.n	2c648 <bt_conn_disconnect+0x3a>
   2c61a:	e8df f003 	tbb	[pc, r3]
   2c61e:	1504      	.short	0x1504
   2c620:	0b091515 	.word	0x0b091515
   2c624:	09          	.byte	0x09
   2c625:	00          	.byte	0x00
		conn->err = reason;
   2c626:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c628:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c62a:	4620      	mov	r0, r4
   2c62c:	f7e8 fc52 	bl	14ed4 <bt_conn_set_state>
{
   2c630:	2000      	movs	r0, #0
}
   2c632:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   2c634:	8800      	ldrh	r0, [r0, #0]
   2c636:	f7ff fcf5 	bl	2c024 <bt_hci_disconnect>
	if (err) {
   2c63a:	2800      	cmp	r0, #0
   2c63c:	d1f9      	bne.n	2c632 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   2c63e:	7b63      	ldrb	r3, [r4, #13]
   2c640:	2b07      	cmp	r3, #7
   2c642:	d1f5      	bne.n	2c630 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c644:	2108      	movs	r1, #8
   2c646:	e7f0      	b.n	2c62a <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2c648:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c64c:	e7f1      	b.n	2c632 <bt_conn_disconnect+0x24>

0002c64e <bt_conn_set_security>:
{
   2c64e:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2c650:	7b43      	ldrb	r3, [r0, #13]
{
   2c652:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2c654:	2b07      	cmp	r3, #7
{
   2c656:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2c658:	d122      	bne.n	2c6a0 <bt_conn_set_security+0x52>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2c65a:	7a43      	ldrb	r3, [r0, #9]
   2c65c:	428b      	cmp	r3, r1
   2c65e:	d215      	bcs.n	2c68c <bt_conn_set_security+0x3e>
   2c660:	7a83      	ldrb	r3, [r0, #10]
   2c662:	428b      	cmp	r3, r1
   2c664:	d212      	bcs.n	2c68c <bt_conn_set_security+0x3e>
	if (val) {
   2c666:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2c668:	f100 0004 	add.w	r0, r0, #4
   2c66c:	d510      	bpl.n	2c690 <bt_conn_set_security+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c66e:	e8d0 3fef 	ldaex	r3, [r0]
   2c672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2c676:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2c67a:	2a00      	cmp	r2, #0
   2c67c:	d1f7      	bne.n	2c66e <bt_conn_set_security+0x20>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c67e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		return bt_smp_start_security(conn);
   2c682:	4620      	mov	r0, r4
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c684:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2c686:	f7ed f86d 	bl	19764 <bt_smp_start_security>
	if (err) {
   2c68a:	b930      	cbnz	r0, 2c69a <bt_conn_set_security+0x4c>
		return -ENOTCONN;
   2c68c:	2000      	movs	r0, #0
}
   2c68e:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c690:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2c694:	f7ff ff76 	bl	2c584 <atomic_and>
   2c698:	e7f1      	b.n	2c67e <bt_conn_set_security+0x30>
		conn->required_sec_level = conn->sec_level;
   2c69a:	7a63      	ldrb	r3, [r4, #9]
   2c69c:	72a3      	strb	r3, [r4, #10]
   2c69e:	e7f6      	b.n	2c68e <bt_conn_set_security+0x40>
		return -ENOTCONN;
   2c6a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c6a4:	e7f3      	b.n	2c68e <bt_conn_set_security+0x40>

0002c6a6 <bt_conn_get_security>:
}
   2c6a6:	7a40      	ldrb	r0, [r0, #9]
   2c6a8:	4770      	bx	lr

0002c6aa <bt_conn_is_peer_addr_le>:
{
   2c6aa:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2c6ac:	7a03      	ldrb	r3, [r0, #8]
{
   2c6ae:	4604      	mov	r4, r0
	if (id != conn->id) {
   2c6b0:	428b      	cmp	r3, r1
{
   2c6b2:	4615      	mov	r5, r2
	if (id != conn->id) {
   2c6b4:	d115      	bne.n	2c6e2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2c6b6:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c6ba:	2207      	movs	r2, #7
   2c6bc:	4628      	mov	r0, r5
   2c6be:	f003 ff56 	bl	3056e <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2c6c2:	b180      	cbz	r0, 2c6e6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c6c4:	78e3      	ldrb	r3, [r4, #3]
   2c6c6:	2207      	movs	r2, #7
   2c6c8:	b943      	cbnz	r3, 2c6dc <bt_conn_is_peer_addr_le+0x32>
   2c6ca:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2c6ce:	4628      	mov	r0, r5
   2c6d0:	f003 ff4d 	bl	3056e <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2c6d4:	fab0 f080 	clz	r0, r0
   2c6d8:	0940      	lsrs	r0, r0, #5
}
   2c6da:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2c6dc:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2c6e0:	e7f5      	b.n	2c6ce <bt_conn_is_peer_addr_le+0x24>
		return false;
   2c6e2:	2000      	movs	r0, #0
   2c6e4:	e7f9      	b.n	2c6da <bt_conn_is_peer_addr_le+0x30>
		return true;
   2c6e6:	2001      	movs	r0, #1
   2c6e8:	e7f7      	b.n	2c6da <bt_conn_is_peer_addr_le+0x30>

0002c6ea <bt_conn_get_dst>:
}
   2c6ea:	3090      	adds	r0, #144	; 0x90
   2c6ec:	4770      	bx	lr

0002c6ee <bt_conn_le_conn_update>:
{
   2c6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c6f0:	4607      	mov	r7, r0
   2c6f2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2c6f4:	f242 0013 	movw	r0, #8211	; 0x2013
   2c6f8:	210e      	movs	r1, #14
   2c6fa:	f7e6 f86d 	bl	127d8 <bt_hci_cmd_create>
	if (!buf) {
   2c6fe:	4606      	mov	r6, r0
   2c700:	b1d0      	cbz	r0, 2c738 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2c702:	210e      	movs	r1, #14
   2c704:	300c      	adds	r0, #12
   2c706:	f7ef f871 	bl	1b7ec <net_buf_simple_add>
   2c70a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2c70c:	220e      	movs	r2, #14
   2c70e:	2100      	movs	r1, #0
   2c710:	f003 ff77 	bl	30602 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c714:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c716:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c718:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c71a:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c71c:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c71e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c720:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c722:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c726:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2c728:	88ab      	ldrh	r3, [r5, #4]
   2c72a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2c72c:	88eb      	ldrh	r3, [r5, #6]
   2c72e:	8123      	strh	r3, [r4, #8]
}
   2c730:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c734:	f7e6 b89e 	b.w	12874 <bt_hci_cmd_send_sync>
}
   2c738:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c73e <l2cap_connected>:
}
   2c73e:	4770      	bx	lr

0002c740 <z_log_msg_static_create.constprop.0>:
   2c740:	2300      	movs	r3, #0
   2c742:	f7e2 b8b5 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002c746 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2c746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c748:	4605      	mov	r5, r0
   2c74a:	460f      	mov	r7, r1
   2c74c:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   2c74e:	2300      	movs	r3, #0
   2c750:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2c754:	2104      	movs	r1, #4
   2c756:	2000      	movs	r0, #0
   2c758:	f7e8 fcd6 	bl	15108 <bt_conn_create_pdu_timeout>
	if (!buf) {
   2c75c:	4604      	mov	r4, r0
   2c75e:	b920      	cbnz	r0, 2c76a <l2cap_create_le_sig_pdu.constprop.0+0x24>
   2c760:	4628      	mov	r0, r5
}
   2c762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c766:	f7e9 b88d 	b.w	15884 <l2cap_create_le_sig_pdu.part.0>
   2c76a:	2104      	movs	r1, #4
   2c76c:	300c      	adds	r0, #12
   2c76e:	f7ef f83d 	bl	1b7ec <net_buf_simple_add>
	hdr->code = code;
   2c772:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2c774:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2c776:	8046      	strh	r6, [r0, #2]
}
   2c778:	4620      	mov	r0, r4
   2c77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c77c <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2c77c:	4770      	bx	lr

0002c77e <bt_l2cap_chan_del>:
{
   2c77e:	b570      	push	{r4, r5, r6, lr}
   2c780:	4604      	mov	r4, r0
	if (!chan->conn) {
   2c782:	e9d0 3500 	ldrd	r3, r5, [r0]
   2c786:	b123      	cbz	r3, 2c792 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2c788:	686b      	ldr	r3, [r5, #4]
   2c78a:	b103      	cbz	r3, 2c78e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2c78c:	4798      	blx	r3
	chan->conn = NULL;
   2c78e:	2300      	movs	r3, #0
   2c790:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2c792:	68e3      	ldr	r3, [r4, #12]
   2c794:	b10b      	cbz	r3, 2c79a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2c796:	4620      	mov	r0, r4
   2c798:	4798      	blx	r3
	if (ops->released) {
   2c79a:	6a2b      	ldr	r3, [r5, #32]
   2c79c:	b11b      	cbz	r3, 2c7a6 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2c79e:	4620      	mov	r0, r4
}
   2c7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2c7a4:	4718      	bx	r3
}
   2c7a6:	bd70      	pop	{r4, r5, r6, pc}

0002c7a8 <bt_l2cap_disconnected>:
{
   2c7a8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c7aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7ac:	b130      	cbz	r0, 2c7bc <bt_l2cap_disconnected+0x14>
	return node->next;
   2c7ae:	f850 4908 	ldr.w	r4, [r0], #-8
   2c7b2:	b104      	cbz	r4, 2c7b6 <bt_l2cap_disconnected+0xe>
   2c7b4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2c7b6:	f7ff ffe2 	bl	2c77e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7ba:	b904      	cbnz	r4, 2c7be <bt_l2cap_disconnected+0x16>
}
   2c7bc:	bd38      	pop	{r3, r4, r5, pc}
   2c7be:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7c0:	b12d      	cbz	r5, 2c7ce <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2c7c2:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7c4:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2c7c6:	f7ff ffda 	bl	2c77e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7ca:	462c      	mov	r4, r5
   2c7cc:	e7f7      	b.n	2c7be <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2c7ce:	4620      	mov	r0, r4
}
   2c7d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2c7d4:	f7ff bfd3 	b.w	2c77e <bt_l2cap_chan_del>

0002c7d8 <bt_l2cap_security_changed>:
{
   2c7d8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c7da:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2c7dc:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7de:	b1bb      	cbz	r3, 2c810 <bt_l2cap_security_changed+0x38>
   2c7e0:	4618      	mov	r0, r3
	return node->next;
   2c7e2:	f850 4908 	ldr.w	r4, [r0], #-8
   2c7e6:	b104      	cbz	r4, 2c7ea <bt_l2cap_security_changed+0x12>
   2c7e8:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c7ea:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2c7ee:	689b      	ldr	r3, [r3, #8]
   2c7f0:	b10b      	cbz	r3, 2c7f6 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2c7f2:	4629      	mov	r1, r5
   2c7f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c7f6:	b15c      	cbz	r4, 2c810 <bt_l2cap_security_changed+0x38>
   2c7f8:	4620      	mov	r0, r4
   2c7fa:	68a4      	ldr	r4, [r4, #8]
   2c7fc:	6843      	ldr	r3, [r0, #4]
   2c7fe:	b124      	cbz	r4, 2c80a <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2c800:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c802:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c804:	2b00      	cmp	r3, #0
   2c806:	d1f4      	bne.n	2c7f2 <bt_l2cap_security_changed+0x1a>
   2c808:	e7f6      	b.n	2c7f8 <bt_l2cap_security_changed+0x20>
   2c80a:	689b      	ldr	r3, [r3, #8]
   2c80c:	2b00      	cmp	r3, #0
   2c80e:	d1f0      	bne.n	2c7f2 <bt_l2cap_security_changed+0x1a>
}
   2c810:	bd38      	pop	{r3, r4, r5, pc}

0002c812 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2c812:	3104      	adds	r1, #4
   2c814:	f7e8 bc78 	b.w	15108 <bt_conn_create_pdu_timeout>

0002c818 <bt_l2cap_send_cb>:
{
   2c818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c81c:	4614      	mov	r4, r2
   2c81e:	4605      	mov	r5, r0
   2c820:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2c822:	f102 000c 	add.w	r0, r2, #12
   2c826:	2104      	movs	r1, #4
   2c828:	461e      	mov	r6, r3
   2c82a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c82e:	f7ee ff81 	bl	1b734 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c832:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2c834:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c836:	3a04      	subs	r2, #4
   2c838:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c83a:	4643      	mov	r3, r8
   2c83c:	4632      	mov	r2, r6
   2c83e:	4621      	mov	r1, r4
   2c840:	4628      	mov	r0, r5
}
   2c842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c846:	f7e8 ba45 	b.w	14cd4 <bt_conn_send_cb>

0002c84a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2c84a:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c84c:	b128      	cbz	r0, 2c85a <bt_l2cap_le_lookup_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c84e:	8b83      	ldrh	r3, [r0, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c850:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c852:	428b      	cmp	r3, r1
   2c854:	d001      	beq.n	2c85a <bt_l2cap_le_lookup_tx_cid+0x10>
	return node->next;
   2c856:	6880      	ldr	r0, [r0, #8]
   2c858:	e7f8      	b.n	2c84c <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2c85a:	4770      	bx	lr

0002c85c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2c85c:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c85e:	b128      	cbz	r0, 2c86c <bt_l2cap_le_lookup_rx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c860:	8983      	ldrh	r3, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c862:	3808      	subs	r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c864:	428b      	cmp	r3, r1
   2c866:	d001      	beq.n	2c86c <bt_l2cap_le_lookup_rx_cid+0x10>
	return node->next;
   2c868:	6880      	ldr	r0, [r0, #8]
   2c86a:	e7f8      	b.n	2c85e <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2c86c:	4770      	bx	lr

0002c86e <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2c86e:	4770      	bx	lr

0002c870 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2c870:	4603      	mov	r3, r0
	return list->head;
   2c872:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c874:	b128      	cbz	r0, 2c882 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c876:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c878:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c87a:	4288      	cmp	r0, r1
	list->head = node;
   2c87c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2c87e:	bf08      	it	eq
   2c880:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c882:	4770      	bx	lr

0002c884 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2c884:	4603      	mov	r3, r0
	size_t bytes = 0;
   2c886:	2000      	movs	r0, #0

	while (buf) {
   2c888:	b903      	cbnz	r3, 2c88c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2c88a:	4770      	bx	lr
		bytes += buf->len;
   2c88c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2c88e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2c890:	4410      	add	r0, r2
		buf = buf->frags;
   2c892:	e7f9      	b.n	2c888 <net_buf_frags_len+0x4>

0002c894 <attr_read_type_cb>:
{
   2c894:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2c896:	68d4      	ldr	r4, [r2, #12]
   2c898:	3102      	adds	r1, #2
   2c89a:	7823      	ldrb	r3, [r4, #0]
   2c89c:	b913      	cbnz	r3, 2c8a4 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2c89e:	7021      	strb	r1, [r4, #0]
	return true;
   2c8a0:	2001      	movs	r0, #1
}
   2c8a2:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2c8a4:	428b      	cmp	r3, r1
   2c8a6:	d0fb      	beq.n	2c8a0 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2c8a8:	8a03      	ldrh	r3, [r0, #16]
   2c8aa:	3b02      	subs	r3, #2
   2c8ac:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2c8ae:	2000      	movs	r0, #0
   2c8b0:	6110      	str	r0, [r2, #16]
		return false;
   2c8b2:	e7f6      	b.n	2c8a2 <attr_read_type_cb+0xe>

0002c8b4 <att_prepare_write_req>:
}
   2c8b4:	2006      	movs	r0, #6
   2c8b6:	4770      	bx	lr

0002c8b8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c8b8:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c8bc:	4108      	asrs	r0, r1
}
   2c8be:	f000 0001 	and.w	r0, r0, #1
   2c8c2:	4770      	bx	lr

0002c8c4 <write_cb>:
{
   2c8c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c8c6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c8c8:	4601      	mov	r1, r0
{
   2c8ca:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c8cc:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c8d0:	6820      	ldr	r0, [r4, #0]
   2c8d2:	f000 fdce 	bl	2d472 <bt_gatt_check_perm>
   2c8d6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c8d8:	bb00      	cbnz	r0, 2c91c <write_cb+0x58>
	if (!data->req) {
   2c8da:	7a23      	ldrb	r3, [r4, #8]
   2c8dc:	b1b3      	cbz	r3, 2c90c <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c8de:	f1a3 0218 	sub.w	r2, r3, #24
   2c8e2:	4253      	negs	r3, r2
   2c8e4:	4153      	adcs	r3, r2
   2c8e6:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c8e8:	9301      	str	r3, [sp, #4]
   2c8ea:	8a63      	ldrh	r3, [r4, #18]
   2c8ec:	4629      	mov	r1, r5
   2c8ee:	9300      	str	r3, [sp, #0]
   2c8f0:	68ae      	ldr	r6, [r5, #8]
   2c8f2:	8a23      	ldrh	r3, [r4, #16]
   2c8f4:	68e2      	ldr	r2, [r4, #12]
   2c8f6:	6820      	ldr	r0, [r4, #0]
   2c8f8:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2c8fa:	2800      	cmp	r0, #0
   2c8fc:	db08      	blt.n	2c910 <write_cb+0x4c>
   2c8fe:	8a23      	ldrh	r3, [r4, #16]
   2c900:	4298      	cmp	r0, r3
   2c902:	d10e      	bne.n	2c922 <write_cb+0x5e>
	data->err = 0U;
   2c904:	2300      	movs	r3, #0
	return BT_GATT_ITER_CONTINUE;
   2c906:	2001      	movs	r0, #1
	data->err = 0U;
   2c908:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c90a:	e008      	b.n	2c91e <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c90c:	2302      	movs	r3, #2
   2c90e:	e7eb      	b.n	2c8e8 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2c910:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2c914:	d305      	bcc.n	2c922 <write_cb+0x5e>
		return -err;
   2c916:	4240      	negs	r0, r0
   2c918:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2c91a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2c91c:	2000      	movs	r0, #0
}
   2c91e:	b002      	add	sp, #8
   2c920:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2c922:	200e      	movs	r0, #14
   2c924:	e7f9      	b.n	2c91a <write_cb+0x56>

0002c926 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2c926:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c928:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c92c:	2300      	movs	r3, #0
   2c92e:	461a      	mov	r2, r3
   2c930:	9300      	str	r3, [sp, #0]
   2c932:	f7eb f861 	bl	179f8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2c936:	b005      	add	sp, #20
   2c938:	f85d fb04 	ldr.w	pc, [sp], #4

0002c93c <att_chan_mtu_updated>:
{
   2c93c:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2c93e:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2c940:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c942:	b352      	cbz	r2, 2c99a <att_chan_mtu_updated+0x5e>
	return node->next;
   2c944:	6813      	ldr	r3, [r2, #0]
   2c946:	b103      	cbz	r3, 2c94a <att_chan_mtu_updated+0xe>
   2c948:	3bf0      	subs	r3, #240	; 0xf0
   2c94a:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2c94e:	2200      	movs	r2, #0
   2c950:	4611      	mov	r1, r2
   2c952:	e000      	b.n	2c956 <att_chan_mtu_updated+0x1a>
   2c954:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   2c956:	4284      	cmp	r4, r0
   2c958:	d007      	beq.n	2c96a <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c95a:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c95c:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c95e:	42b1      	cmp	r1, r6
   2c960:	bf38      	it	cc
   2c962:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c964:	42a2      	cmp	r2, r4
   2c966:	bf38      	it	cc
   2c968:	4622      	movcc	r2, r4
   2c96a:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c96c:	b12b      	cbz	r3, 2c97a <att_chan_mtu_updated+0x3e>
   2c96e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c972:	2b00      	cmp	r3, #0
   2c974:	d1ee      	bne.n	2c954 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2c976:	4284      	cmp	r4, r0
   2c978:	d1ef      	bne.n	2c95a <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c97a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c97c:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c97e:	428b      	cmp	r3, r1
   2c980:	d801      	bhi.n	2c986 <att_chan_mtu_updated+0x4a>
   2c982:	4290      	cmp	r0, r2
   2c984:	d90b      	bls.n	2c99e <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c986:	4282      	cmp	r2, r0
   2c988:	bf38      	it	cc
   2c98a:	4602      	movcc	r2, r0
   2c98c:	4299      	cmp	r1, r3
   2c98e:	6828      	ldr	r0, [r5, #0]
   2c990:	bf38      	it	cc
   2c992:	4619      	movcc	r1, r3
}
   2c994:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c996:	f7eb bed7 	b.w	18748 <bt_gatt_att_max_mtu_changed>
   2c99a:	4611      	mov	r1, r2
   2c99c:	e7ed      	b.n	2c97a <att_chan_mtu_updated+0x3e>
}
   2c99e:	bc70      	pop	{r4, r5, r6}
   2c9a0:	4770      	bx	lr

0002c9a2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2c9a2:	68d0      	ldr	r0, [r2, #12]
   2c9a4:	3104      	adds	r1, #4
   2c9a6:	7803      	ldrb	r3, [r0, #0]
   2c9a8:	b913      	cbnz	r3, 2c9b0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2c9aa:	7001      	strb	r1, [r0, #0]
	return true;
   2c9ac:	2001      	movs	r0, #1
   2c9ae:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2c9b0:	428b      	cmp	r3, r1
   2c9b2:	d0fb      	beq.n	2c9ac <attr_read_group_cb+0xa>
		data->group = NULL;
   2c9b4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2c9b6:	6891      	ldr	r1, [r2, #8]
   2c9b8:	8a0b      	ldrh	r3, [r1, #16]
   2c9ba:	3b04      	subs	r3, #4
   2c9bc:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2c9be:	6110      	str	r0, [r2, #16]
}
   2c9c0:	4770      	bx	lr

0002c9c2 <find_info_cb>:
{
   2c9c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2c9c4:	6893      	ldr	r3, [r2, #8]
{
   2c9c6:	4605      	mov	r5, r0
   2c9c8:	460f      	mov	r7, r1
   2c9ca:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2c9cc:	6816      	ldr	r6, [r2, #0]
	if (!data->rsp) {
   2c9ce:	b963      	cbnz	r3, 2c9ea <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2c9d0:	6850      	ldr	r0, [r2, #4]
   2c9d2:	2101      	movs	r1, #1
   2c9d4:	300c      	adds	r0, #12
   2c9d6:	f7ee ff09 	bl	1b7ec <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c9da:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c9dc:	682b      	ldr	r3, [r5, #0]
   2c9de:	781b      	ldrb	r3, [r3, #0]
   2c9e0:	2b00      	cmp	r3, #0
   2c9e2:	bf14      	ite	ne
   2c9e4:	2302      	movne	r3, #2
   2c9e6:	2301      	moveq	r3, #1
   2c9e8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2c9ea:	68a3      	ldr	r3, [r4, #8]
   2c9ec:	781b      	ldrb	r3, [r3, #0]
   2c9ee:	2b01      	cmp	r3, #1
   2c9f0:	d003      	beq.n	2c9fa <find_info_cb+0x38>
   2c9f2:	2b02      	cmp	r3, #2
   2c9f4:	d019      	beq.n	2ca2a <find_info_cb+0x68>
   2c9f6:	2000      	movs	r0, #0
   2c9f8:	e016      	b.n	2ca28 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c9fa:	682b      	ldr	r3, [r5, #0]
   2c9fc:	781b      	ldrb	r3, [r3, #0]
   2c9fe:	2b00      	cmp	r3, #0
   2ca00:	d1f9      	bne.n	2c9f6 <find_info_cb+0x34>
   2ca02:	6860      	ldr	r0, [r4, #4]
   2ca04:	2104      	movs	r1, #4
   2ca06:	300c      	adds	r0, #12
   2ca08:	f7ee fef0 	bl	1b7ec <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2ca0c:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2ca0e:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2ca10:	682a      	ldr	r2, [r5, #0]
   2ca12:	68e3      	ldr	r3, [r4, #12]
   2ca14:	8852      	ldrh	r2, [r2, #2]
   2ca16:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2ca18:	6863      	ldr	r3, [r4, #4]
   2ca1a:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2ca1c:	8a1b      	ldrh	r3, [r3, #16]
   2ca1e:	1ac0      	subs	r0, r0, r3
   2ca20:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2ca22:	bf94      	ite	ls
   2ca24:	2000      	movls	r0, #0
   2ca26:	2001      	movhi	r0, #1
}
   2ca28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ca2a:	682b      	ldr	r3, [r5, #0]
   2ca2c:	781b      	ldrb	r3, [r3, #0]
   2ca2e:	2b02      	cmp	r3, #2
   2ca30:	d1e1      	bne.n	2c9f6 <find_info_cb+0x34>
   2ca32:	6860      	ldr	r0, [r4, #4]
   2ca34:	2112      	movs	r1, #18
   2ca36:	300c      	adds	r0, #12
   2ca38:	f7ee fed8 	bl	1b7ec <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2ca3c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2ca3e:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ca40:	682b      	ldr	r3, [r5, #0]
   2ca42:	68e2      	ldr	r2, [r4, #12]
   2ca44:	1c59      	adds	r1, r3, #1
   2ca46:	3202      	adds	r2, #2
   2ca48:	3311      	adds	r3, #17
   2ca4a:	f851 0b04 	ldr.w	r0, [r1], #4
   2ca4e:	4299      	cmp	r1, r3
   2ca50:	f842 0b04 	str.w	r0, [r2], #4
   2ca54:	d1f9      	bne.n	2ca4a <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2ca56:	6863      	ldr	r3, [r4, #4]
   2ca58:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   2ca5a:	8a1b      	ldrh	r3, [r3, #16]
   2ca5c:	1ac0      	subs	r0, r0, r3
   2ca5e:	2812      	cmp	r0, #18
   2ca60:	e7df      	b.n	2ca22 <find_info_cb+0x60>

0002ca62 <z_log_msg_static_create.constprop.0>:
   2ca62:	2300      	movs	r3, #0
   2ca64:	f7e1 bf24 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002ca68 <chan_req_send>:
{
   2ca68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca6a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca6c:	6888      	ldr	r0, [r1, #8]
   2ca6e:	f7ff ff09 	bl	2c884 <net_buf_frags_len>
   2ca72:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
{
   2ca74:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ca76:	4283      	cmp	r3, r0
   2ca78:	d30d      	bcc.n	2ca96 <chan_req_send+0x2e>
	req->buf = NULL;
   2ca7a:	2600      	movs	r6, #0
	chan->req = req;
   2ca7c:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2ca80:	688f      	ldr	r7, [r1, #8]
	return chan_send(chan, buf);
   2ca82:	4628      	mov	r0, r5
	req->buf = NULL;
   2ca84:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2ca86:	4639      	mov	r1, r7
   2ca88:	f7e9 f9a2 	bl	15dd0 <chan_send>
	if (err) {
   2ca8c:	b110      	cbz	r0, 2ca94 <chan_req_send+0x2c>
		req->buf = buf;
   2ca8e:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2ca90:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ca96:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ca9a:	e7fb      	b.n	2ca94 <chan_req_send+0x2c>

0002ca9c <process_queue>:
{
   2ca9c:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2ca9e:	2200      	movs	r2, #0
{
   2caa0:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2caa2:	2300      	movs	r3, #0
   2caa4:	4608      	mov	r0, r1
{
   2caa6:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2caa8:	f001 faa8 	bl	2dffc <net_buf_get>
	if (buf) {
   2caac:	4605      	mov	r5, r0
   2caae:	b158      	cbz	r0, 2cac8 <process_queue+0x2c>
	return chan_send(chan, buf);
   2cab0:	4601      	mov	r1, r0
   2cab2:	4620      	mov	r0, r4
   2cab4:	f7e9 f98c 	bl	15dd0 <chan_send>
		if (err) {
   2cab8:	4604      	mov	r4, r0
   2caba:	b118      	cbz	r0, 2cac4 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2cabc:	4629      	mov	r1, r5
   2cabe:	4630      	mov	r0, r6
   2cac0:	f003 fb99 	bl	301f6 <k_queue_prepend>
}
   2cac4:	4620      	mov	r0, r4
   2cac6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2cac8:	f06f 0401 	mvn.w	r4, #1
   2cacc:	e7fa      	b.n	2cac4 <process_queue+0x28>

0002cace <bt_att_chan_send_rsp>:
{
   2cace:	b538      	push	{r3, r4, r5, lr}
   2cad0:	4604      	mov	r4, r0
   2cad2:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2cad4:	f7e9 f97c 	bl	15dd0 <chan_send>
	if (err) {
   2cad8:	b130      	cbz	r0, 2cae8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2cada:	4629      	mov	r1, r5
   2cadc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2cae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2cae4:	f7ee bd3a 	b.w	1b55c <net_buf_put>
}
   2cae8:	bd38      	pop	{r3, r4, r5, pc}

0002caea <att_chan_read>:
{
   2caea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2caee:	4680      	mov	r8, r0
   2caf0:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2caf2:	4610      	mov	r0, r2
{
   2caf4:	4699      	mov	r9, r3
   2caf6:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2caf8:	f7ff fec4 	bl	2c884 <net_buf_frags_len>
   2cafc:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
{
   2cb00:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2cb02:	4283      	cmp	r3, r0
   2cb04:	d97a      	bls.n	2cbfc <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2cb06:	f8d8 3004 	ldr.w	r3, [r8, #4]
	frag = net_buf_frag_last(buf);
   2cb0a:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   2cb0c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2cb0e:	f7ee fda7 	bl	1b660 <net_buf_frag_last>
	size_t len, total = 0;
   2cb12:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2cb16:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2cb18:	4630      	mov	r0, r6
   2cb1a:	f7ff feb3 	bl	2c884 <net_buf_frags_len>
   2cb1e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2cb22:	f105 070c 	add.w	r7, r5, #12
   2cb26:	1a24      	subs	r4, r4, r0
   2cb28:	4638      	mov	r0, r7
   2cb2a:	f001 fa7c 	bl	2e026 <net_buf_simple_tailroom>
   2cb2e:	4284      	cmp	r4, r0
   2cb30:	d211      	bcs.n	2cb56 <att_chan_read+0x6c>
   2cb32:	4630      	mov	r0, r6
   2cb34:	f7ff fea6 	bl	2c884 <net_buf_frags_len>
   2cb38:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb3c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2cb3e:	bb34      	cbnz	r4, 2cb8e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2cb40:	7ab0      	ldrb	r0, [r6, #10]
   2cb42:	f7ee faf7 	bl	1b134 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2cb46:	2200      	movs	r2, #0
   2cb48:	2300      	movs	r3, #0
   2cb4a:	f001 fa52 	bl	2dff2 <net_buf_alloc_fixed>
			if (!frag) {
   2cb4e:	4605      	mov	r5, r0
   2cb50:	b930      	cbnz	r0, 2cb60 <att_chan_read+0x76>
	return total;
   2cb52:	4657      	mov	r7, sl
   2cb54:	e02c      	b.n	2cbb0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2cb56:	4638      	mov	r0, r7
   2cb58:	f001 fa65 	bl	2e026 <net_buf_simple_tailroom>
   2cb5c:	4604      	mov	r4, r0
   2cb5e:	e7ee      	b.n	2cb3e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2cb60:	4601      	mov	r1, r0
   2cb62:	4630      	mov	r0, r6
   2cb64:	f7ee fdc2 	bl	1b6ec <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2cb68:	4630      	mov	r0, r6
   2cb6a:	f7ff fe8b 	bl	2c884 <net_buf_frags_len>
   2cb6e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb72:	f105 070c 	add.w	r7, r5, #12
   2cb76:	1a24      	subs	r4, r4, r0
   2cb78:	4638      	mov	r0, r7
   2cb7a:	f001 fa54 	bl	2e026 <net_buf_simple_tailroom>
   2cb7e:	4284      	cmp	r4, r0
   2cb80:	d21a      	bcs.n	2cbb8 <att_chan_read+0xce>
   2cb82:	4630      	mov	r0, r6
   2cb84:	f7ff fe7e 	bl	2c884 <net_buf_frags_len>
   2cb88:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2cb8c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2cb8e:	68e9      	ldr	r1, [r5, #12]
   2cb90:	8a2a      	ldrh	r2, [r5, #16]
   2cb92:	f8cd 9000 	str.w	r9, [sp]
   2cb96:	f8db 7004 	ldr.w	r7, [fp, #4]
   2cb9a:	440a      	add	r2, r1
   2cb9c:	9803      	ldr	r0, [sp, #12]
   2cb9e:	4659      	mov	r1, fp
   2cba0:	b2a3      	uxth	r3, r4
   2cba2:	47b8      	blx	r7
		if (read < 0) {
   2cba4:	1e07      	subs	r7, r0, #0
   2cba6:	da0c      	bge.n	2cbc2 <att_chan_read+0xd8>
				return total;
   2cba8:	f1ba 0f00 	cmp.w	sl, #0
   2cbac:	bf18      	it	ne
   2cbae:	4657      	movne	r7, sl
}
   2cbb0:	4638      	mov	r0, r7
   2cbb2:	b005      	add	sp, #20
   2cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbb8:	4638      	mov	r0, r7
   2cbba:	f001 fa34 	bl	2e026 <net_buf_simple_tailroom>
   2cbbe:	4604      	mov	r4, r0
   2cbc0:	e7e5      	b.n	2cb8e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2cbc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cbc4:	b993      	cbnz	r3, 2cbec <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2cbc6:	4639      	mov	r1, r7
   2cbc8:	f105 000c 	add.w	r0, r5, #12
   2cbcc:	f7ee fe0e 	bl	1b7ec <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cbd0:	4630      	mov	r0, r6
   2cbd2:	f7ff fe57 	bl	2c884 <net_buf_frags_len>
   2cbd6:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2cbda:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cbdc:	4283      	cmp	r3, r0
		total += read;
   2cbde:	44ba      	add	sl, r7
		offset += read;
   2cbe0:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2cbe4:	d9b5      	bls.n	2cb52 <att_chan_read+0x68>
   2cbe6:	42a7      	cmp	r7, r4
   2cbe8:	d096      	beq.n	2cb18 <att_chan_read+0x2e>
   2cbea:	e7b2      	b.n	2cb52 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2cbec:	4639      	mov	r1, r7
   2cbee:	4628      	mov	r0, r5
   2cbf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2cbf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cbf4:	4798      	blx	r3
   2cbf6:	2800      	cmp	r0, #0
   2cbf8:	d1e5      	bne.n	2cbc6 <att_chan_read+0xdc>
   2cbfa:	e7aa      	b.n	2cb52 <att_chan_read+0x68>
		return 0;
   2cbfc:	2700      	movs	r7, #0
   2cbfe:	e7d7      	b.n	2cbb0 <att_chan_read+0xc6>

0002cc00 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cc00:	2200      	movs	r2, #0
	return list->head;
   2cc02:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cc04:	b903      	cbnz	r3, 2cc08 <sys_slist_find_and_remove.isra.0+0x8>
   2cc06:	4770      	bx	lr
   2cc08:	428b      	cmp	r3, r1
   2cc0a:	d10f      	bne.n	2cc2c <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2cc0c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc0e:	b93a      	cbnz	r2, 2cc20 <sys_slist_find_and_remove.isra.0+0x20>
   2cc10:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2cc12:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc14:	4291      	cmp	r1, r2
   2cc16:	d100      	bne.n	2cc1a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2cc18:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2cc1a:	2300      	movs	r3, #0
   2cc1c:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc1e:	4770      	bx	lr
	parent->next = child;
   2cc20:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc22:	6843      	ldr	r3, [r0, #4]
   2cc24:	4299      	cmp	r1, r3
	list->tail = node;
   2cc26:	bf08      	it	eq
   2cc28:	6042      	streq	r2, [r0, #4]
}
   2cc2a:	e7f6      	b.n	2cc1a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2cc2c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cc2e:	681b      	ldr	r3, [r3, #0]
   2cc30:	e7e8      	b.n	2cc04 <sys_slist_find_and_remove.isra.0+0x4>

0002cc32 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2cc32:	2006      	movs	r0, #6
   2cc34:	4770      	bx	lr

0002cc36 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cc36:	2301      	movs	r3, #1
{
   2cc38:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cc3a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cc3e:	e8d0 3fef 	ldaex	r3, [r0]
   2cc42:	ea43 0201 	orr.w	r2, r3, r1
   2cc46:	e8c0 2fe4 	stlex	r4, r2, [r0]
   2cc4a:	2c00      	cmp	r4, #0
   2cc4c:	d1f7      	bne.n	2cc3e <atomic_test_and_set_bit+0x8>
	return (old & mask) != 0;
   2cc4e:	4219      	tst	r1, r3
}
   2cc50:	bf14      	ite	ne
   2cc52:	2001      	movne	r0, #1
   2cc54:	2000      	moveq	r0, #0
   2cc56:	bd10      	pop	{r4, pc}

0002cc58 <read_cb>:
{
   2cc58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	data->err = 0x00;
   2cc5a:	2300      	movs	r3, #0
{
   2cc5c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = data->chan;
   2cc5e:	6816      	ldr	r6, [r2, #0]
{
   2cc60:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2cc62:	6870      	ldr	r0, [r6, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc64:	4629      	mov	r1, r5
	data->err = 0x00;
   2cc66:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2cc68:	2295      	movs	r2, #149	; 0x95
   2cc6a:	f000 fc02 	bl	2d472 <bt_gatt_check_perm>
   2cc6e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2cc70:	b980      	cbnz	r0, 2cc94 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2cc72:	e9cd 0000 	strd	r0, r0, [sp]
   2cc76:	4629      	mov	r1, r5
   2cc78:	4630      	mov	r0, r6
   2cc7a:	88a3      	ldrh	r3, [r4, #4]
   2cc7c:	68a2      	ldr	r2, [r4, #8]
   2cc7e:	f7ff ff34 	bl	2caea <att_chan_read>
	if (ret < 0) {
   2cc82:	2800      	cmp	r0, #0
   2cc84:	da09      	bge.n	2cc9a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2cc86:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2cc8a:	bf32      	itee	cc
   2cc8c:	200e      	movcc	r0, #14
		return -err;
   2cc8e:	4240      	negcs	r0, r0
   2cc90:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(ret);
   2cc92:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2cc94:	2000      	movs	r0, #0
}
   2cc96:	b002      	add	sp, #8
   2cc98:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2cc9a:	2001      	movs	r0, #1
   2cc9c:	e7fb      	b.n	2cc96 <read_cb+0x3e>

0002cc9e <read_vl_cb>:
{
   2cc9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = 0x00;
   2cca2:	2300      	movs	r3, #0
{
   2cca4:	4606      	mov	r6, r0
	struct bt_att_chan *chan = data->chan;
   2cca6:	f8d2 8000 	ldr.w	r8, [r2]
{
   2ccaa:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   2ccac:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ccb0:	4631      	mov	r1, r6
	data->err = 0x00;
   2ccb2:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ccb4:	2295      	movs	r2, #149	; 0x95
   2ccb6:	f000 fbdc 	bl	2d472 <bt_gatt_check_perm>
   2ccba:	4605      	mov	r5, r0
   2ccbc:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2ccbe:	b9e0      	cbnz	r0, 2ccfa <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2ccc0:	68a0      	ldr	r0, [r4, #8]
   2ccc2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2ccc6:	8a02      	ldrh	r2, [r0, #16]
   2ccc8:	1a9b      	subs	r3, r3, r2
   2ccca:	2b01      	cmp	r3, #1
   2cccc:	dd15      	ble.n	2ccfa <read_vl_cb+0x5c>
   2ccce:	2102      	movs	r1, #2
   2ccd0:	300c      	adds	r0, #12
   2ccd2:	f7ee fd8b 	bl	1b7ec <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ccd6:	e9cd 5500 	strd	r5, r5, [sp]
   2ccda:	4607      	mov	r7, r0
   2ccdc:	88a3      	ldrh	r3, [r4, #4]
   2ccde:	4631      	mov	r1, r6
   2cce0:	4640      	mov	r0, r8
   2cce2:	68a2      	ldr	r2, [r4, #8]
   2cce4:	f7ff ff01 	bl	2caea <att_chan_read>
	if (read < 0) {
   2cce8:	1e03      	subs	r3, r0, #0
   2ccea:	da0a      	bge.n	2cd02 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2ccec:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   2ccf0:	bf32      	itee	cc
   2ccf2:	230e      	movcc	r3, #14
		return -err;
   2ccf4:	425b      	negcs	r3, r3
   2ccf6:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(read);
   2ccf8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2ccfa:	2000      	movs	r0, #0
}
   2ccfc:	b002      	add	sp, #8
   2ccfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return BT_GATT_ITER_CONTINUE;
   2cd02:	2001      	movs	r0, #1
	rsp->len = read;
   2cd04:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2cd06:	e7f9      	b.n	2ccfc <read_vl_cb+0x5e>

0002cd08 <bt_att_sent>:
{
   2cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cd0a:	4605      	mov	r5, r0
	struct bt_att *att = chan->att;
   2cd0c:	f850 4c04 	ldr.w	r4, [r0, #-4]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2cd10:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cd12:	f100 0394 	add.w	r3, r0, #148	; 0x94
   2cd16:	e8d3 1fef 	ldaex	r1, [r3]
   2cd1a:	f021 0110 	bic.w	r1, r1, #16
   2cd1e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cd22:	2a00      	cmp	r2, #0
   2cd24:	d1f7      	bne.n	2cd16 <bt_att_sent+0xe>
	if (!att) {
   2cd26:	b30c      	cbz	r4, 2cd6c <bt_att_sent+0x64>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2cd28:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2cd2c:	b98b      	cbnz	r3, 2cd52 <bt_att_sent+0x4a>
   2cd2e:	6863      	ldr	r3, [r4, #4]
   2cd30:	b17b      	cbz	r3, 2cd52 <bt_att_sent+0x4a>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2cd32:	1d20      	adds	r0, r4, #4
   2cd34:	f7ff fd9c 	bl	2c870 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cd38:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2cd3a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2cd3c:	4638      	mov	r0, r7
   2cd3e:	f7ff fe93 	bl	2ca68 <chan_req_send>
   2cd42:	2800      	cmp	r0, #0
   2cd44:	da12      	bge.n	2cd6c <bt_att_sent+0x64>
	return list->head;
   2cd46:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2cd48:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cd4a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2cd4c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cd4e:	b903      	cbnz	r3, 2cd52 <bt_att_sent+0x4a>
	list->tail = node;
   2cd50:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2cd52:	4638      	mov	r0, r7
   2cd54:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   2cd58:	f7ff fea0 	bl	2ca9c <process_queue>
	if (!err) {
   2cd5c:	b130      	cbz	r0, 2cd6c <bt_att_sent+0x64>
	(void)process_queue(chan, &att->tx_queue);
   2cd5e:	4638      	mov	r0, r7
   2cd60:	f104 010c 	add.w	r1, r4, #12
}
   2cd64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2cd68:	f7ff be98 	b.w	2ca9c <process_queue>
}
   2cd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cd6e <att_req_send_process>:
{
   2cd6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2cd72:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2cd74:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cd76:	2c00      	cmp	r4, #0
   2cd78:	d03b      	beq.n	2cdf2 <att_req_send_process+0x84>
	return node->next;
   2cd7a:	f854 69f0 	ldr.w	r6, [r4], #-240
   2cd7e:	b106      	cbz	r6, 2cd82 <att_req_send_process+0x14>
   2cd80:	3ef0      	subs	r6, #240	; 0xf0
{
   2cd82:	2300      	movs	r3, #0
		req = get_first_req_matching_chan(&att->reqs, chan);
   2cd84:	f108 0704 	add.w	r7, r8, #4
{
   2cd88:	461d      	mov	r5, r3
   2cd8a:	e013      	b.n	2cdb4 <att_req_send_process+0x46>
		if (!req && prev &&
   2cd8c:	b1c3      	cbz	r3, 2cdc0 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2cd8e:	2103      	movs	r1, #3
   2cd90:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2cd94:	f7ff fd90 	bl	2c8b8 <atomic_test_bit>
   2cd98:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2cd9a:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2cd9e:	f7ff fd8b 	bl	2c8b8 <atomic_test_bit>
		if (!req && prev &&
   2cda2:	4282      	cmp	r2, r0
   2cda4:	d10c      	bne.n	2cdc0 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cda6:	b326      	cbz	r6, 2cdf2 <att_req_send_process+0x84>
   2cda8:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2cdac:	b102      	cbz	r2, 2cdb0 <att_req_send_process+0x42>
   2cdae:	3af0      	subs	r2, #240	; 0xf0
{
   2cdb0:	4634      	mov	r4, r6
   2cdb2:	4616      	mov	r6, r2
		if (chan->req) {
   2cdb4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2cdb8:	2a00      	cmp	r2, #0
   2cdba:	d1f4      	bne.n	2cda6 <att_req_send_process+0x38>
		if (!req && prev &&
   2cdbc:	2d00      	cmp	r5, #0
   2cdbe:	d0e5      	beq.n	2cd8c <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2cdc0:	4638      	mov	r0, r7
   2cdc2:	f7ff fd55 	bl	2c870 <sys_slist_get>
	if (node) {
   2cdc6:	4605      	mov	r5, r0
   2cdc8:	b908      	cbnz	r0, 2cdce <att_req_send_process+0x60>
   2cdca:	4623      	mov	r3, r4
   2cdcc:	e7eb      	b.n	2cda6 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2cdce:	4601      	mov	r1, r0
   2cdd0:	4620      	mov	r0, r4
   2cdd2:	f7e9 f871 	bl	15eb8 <bt_att_chan_req_send>
   2cdd6:	2800      	cmp	r0, #0
   2cdd8:	da0b      	bge.n	2cdf2 <att_req_send_process+0x84>
	return list->head;
   2cdda:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2cdde:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2cde0:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2cde4:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cde8:	2b00      	cmp	r3, #0
   2cdea:	d1ee      	bne.n	2cdca <att_req_send_process+0x5c>
	list->tail = node;
   2cdec:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2cdf0:	e7eb      	b.n	2cdca <att_req_send_process+0x5c>
}
   2cdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cdf6 <bt_att_status>:
{
   2cdf6:	b538      	push	{r3, r4, r5, lr}
   2cdf8:	4605      	mov	r5, r0
   2cdfa:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2cdfc:	2100      	movs	r1, #0
   2cdfe:	f7ff fd5b 	bl	2c8b8 <atomic_test_bit>
   2ce02:	b1c0      	cbz	r0, 2ce36 <bt_att_status+0x40>
	if (!chan->att) {
   2ce04:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2ce08:	b1a8      	cbz	r0, 2ce36 <bt_att_status+0x40>
	if (chan->req) {
   2ce0a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2ce0e:	b993      	cbnz	r3, 2ce36 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2ce10:	3004      	adds	r0, #4
   2ce12:	f7ff fd2d 	bl	2c870 <sys_slist_get>
	if (!node) {
   2ce16:	4604      	mov	r4, r0
   2ce18:	b168      	cbz	r0, 2ce36 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2ce1a:	4601      	mov	r1, r0
   2ce1c:	1f28      	subs	r0, r5, #4
   2ce1e:	f7e9 f84b 	bl	15eb8 <bt_att_chan_req_send>
   2ce22:	2800      	cmp	r0, #0
   2ce24:	da07      	bge.n	2ce36 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2ce26:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2ce2a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2ce2c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2ce2e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2ce30:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2ce32:	b902      	cbnz	r2, 2ce36 <bt_att_status+0x40>
	list->tail = node;
   2ce34:	609c      	str	r4, [r3, #8]
}
   2ce36:	bd38      	pop	{r3, r4, r5, pc}

0002ce38 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2ce38:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2ce3a:	6883      	ldr	r3, [r0, #8]
   2ce3c:	699b      	ldr	r3, [r3, #24]
   2ce3e:	b10b      	cbz	r3, 2ce44 <att_sent+0xc>
		chan->ops->sent(chan);
   2ce40:	3004      	adds	r0, #4
   2ce42:	4718      	bx	r3
}
   2ce44:	4770      	bx	lr

0002ce46 <att_tx_complete>:
{
   2ce46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ce4a:	4606      	mov	r6, r0
   2ce4c:	460d      	mov	r5, r1
	if (!err) {
   2ce4e:	4614      	mov	r4, r2
   2ce50:	b122      	cbz	r2, 2ce5c <att_tx_complete+0x16>
}
   2ce52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2ce56:	4608      	mov	r0, r1
   2ce58:	f7e8 beda 	b.w	15c10 <tx_meta_data_free>
		att_sent(conn, user_data);
   2ce5c:	f7ff ffec 	bl	2ce38 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2ce60:	68af      	ldr	r7, [r5, #8]
	tx_meta_data_free(data);
   2ce62:	4628      	mov	r0, r5
	uint16_t attr_count = data->attr_count;
   2ce64:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2ce68:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2ce6c:	f7e8 fed0 	bl	15c10 <tx_meta_data_free>
	if (!err && func) {
   2ce70:	b92f      	cbnz	r7, 2ce7e <att_tx_complete+0x38>
}
   2ce72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2ce76:	4649      	mov	r1, r9
   2ce78:	4630      	mov	r0, r6
   2ce7a:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2ce7c:	3401      	adds	r4, #1
   2ce7e:	b2a3      	uxth	r3, r4
   2ce80:	4543      	cmp	r3, r8
   2ce82:	d3f8      	bcc.n	2ce76 <att_tx_complete+0x30>
   2ce84:	e7f5      	b.n	2ce72 <att_tx_complete+0x2c>

0002ce86 <att_req_sent>:
{
   2ce86:	b510      	push	{r4, lr}
   2ce88:	460c      	mov	r4, r1
	if (!err) {
   2ce8a:	b90a      	cbnz	r2, 2ce90 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2ce8c:	f7ff ffd4 	bl	2ce38 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2ce90:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2ce92:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2ce96:	b12b      	cbz	r3, 2cea4 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2ce98:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ce9c:	2300      	movs	r3, #0
   2ce9e:	30c0      	adds	r0, #192	; 0xc0
   2cea0:	f7f9 f942 	bl	26128 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2cea4:	4620      	mov	r0, r4
}
   2cea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2ceaa:	f7e8 beb1 	b.w	15c10 <tx_meta_data_free>

0002ceae <att_cfm_sent>:
{
   2ceae:	b510      	push	{r4, lr}
   2ceb0:	460c      	mov	r4, r1
	if (!err) {
   2ceb2:	b90a      	cbnz	r2, 2ceb8 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2ceb4:	f7ff ffc0 	bl	2ce38 <att_sent>
   2ceb8:	6823      	ldr	r3, [r4, #0]
   2ceba:	3398      	adds	r3, #152	; 0x98
   2cebc:	e8d3 1fef 	ldaex	r1, [r3]
   2cec0:	f021 0102 	bic.w	r1, r1, #2
   2cec4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cec8:	2a00      	cmp	r2, #0
   2ceca:	d1f7      	bne.n	2cebc <att_cfm_sent+0xe>
	tx_meta_data_free(data);
   2cecc:	4620      	mov	r0, r4
}
   2cece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ced2:	f7e8 be9d 	b.w	15c10 <tx_meta_data_free>

0002ced6 <att_rsp_sent>:
{
   2ced6:	b510      	push	{r4, lr}
   2ced8:	460c      	mov	r4, r1
	if (!err) {
   2ceda:	b90a      	cbnz	r2, 2cee0 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2cedc:	f7ff ffac 	bl	2ce38 <att_sent>
   2cee0:	6823      	ldr	r3, [r4, #0]
   2cee2:	3398      	adds	r3, #152	; 0x98
   2cee4:	e8d3 1fef 	ldaex	r1, [r3]
   2cee8:	f021 0101 	bic.w	r1, r1, #1
   2ceec:	e8c3 1fe2 	stlex	r2, r1, [r3]
   2cef0:	2a00      	cmp	r2, #0
   2cef2:	d1f7      	bne.n	2cee4 <att_rsp_sent+0xe>
	tx_meta_data_free(data);
   2cef4:	4620      	mov	r0, r4
}
   2cef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2cefa:	f7e8 be89 	b.w	15c10 <tx_meta_data_free>

0002cefe <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cf02:	4688      	mov	r8, r1
   2cf04:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cf06:	2101      	movs	r1, #1
   2cf08:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2cf0a:	4605      	mov	r5, r0
   2cf0c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2cf0e:	f7e9 f9a9 	bl	16264 <bt_att_chan_create_pdu>
	if (!buf) {
   2cf12:	4604      	mov	r4, r0
   2cf14:	b170      	cbz	r0, 2cf34 <send_err_rsp.part.0+0x36>
   2cf16:	2104      	movs	r1, #4
   2cf18:	300c      	adds	r0, #12
   2cf1a:	f7ee fc67 	bl	1b7ec <net_buf_simple_add>
	rsp->request = req;
   2cf1e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2cf22:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2cf26:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2cf28:	4621      	mov	r1, r4
   2cf2a:	4628      	mov	r0, r5
}
   2cf2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2cf30:	f7ff bdcd 	b.w	2cace <bt_att_chan_send_rsp>
}
   2cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cf38 <att_write_req>:
{
   2cf38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf3a:	460c      	mov	r4, r1
   2cf3c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2cf3e:	f101 000c 	add.w	r0, r1, #12
   2cf42:	f001 f864 	bl	2e00e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2cf46:	8a22      	ldrh	r2, [r4, #16]
   2cf48:	4603      	mov	r3, r0
   2cf4a:	9201      	str	r2, [sp, #4]
   2cf4c:	68e2      	ldr	r2, [r4, #12]
   2cf4e:	2112      	movs	r1, #18
   2cf50:	9200      	str	r2, [sp, #0]
   2cf52:	4628      	mov	r0, r5
   2cf54:	2213      	movs	r2, #19
   2cf56:	f7e9 fa9f 	bl	16498 <att_write_rsp.constprop.0>
}
   2cf5a:	b003      	add	sp, #12
   2cf5c:	bd30      	pop	{r4, r5, pc}

0002cf5e <att_write_cmd>:
{
   2cf5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cf60:	460c      	mov	r4, r1
   2cf62:	4605      	mov	r5, r0
   2cf64:	f101 000c 	add.w	r0, r1, #12
   2cf68:	f001 f851 	bl	2e00e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2cf6c:	8a22      	ldrh	r2, [r4, #16]
   2cf6e:	4603      	mov	r3, r0
   2cf70:	9201      	str	r2, [sp, #4]
   2cf72:	68e2      	ldr	r2, [r4, #12]
   2cf74:	4628      	mov	r0, r5
   2cf76:	9200      	str	r2, [sp, #0]
   2cf78:	2200      	movs	r2, #0
   2cf7a:	4611      	mov	r1, r2
   2cf7c:	f7e9 fa8c 	bl	16498 <att_write_rsp.constprop.0>
}
   2cf80:	b003      	add	sp, #12
   2cf82:	bd30      	pop	{r4, r5, pc}

0002cf84 <att_read_blob_req>:
{
   2cf84:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2cf86:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2cf88:	210c      	movs	r1, #12
   2cf8a:	8813      	ldrh	r3, [r2, #0]
   2cf8c:	8852      	ldrh	r2, [r2, #2]
   2cf8e:	9200      	str	r2, [sp, #0]
   2cf90:	220d      	movs	r2, #13
   2cf92:	f7e9 fc45 	bl	16820 <att_read_rsp>
}
   2cf96:	b003      	add	sp, #12
   2cf98:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf9c <att_read_req>:
{
   2cf9c:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cf9e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   2cfa0:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cfa2:	210a      	movs	r1, #10
   2cfa4:	881b      	ldrh	r3, [r3, #0]
   2cfa6:	9200      	str	r2, [sp, #0]
   2cfa8:	220b      	movs	r2, #11
   2cfaa:	f7e9 fc39 	bl	16820 <att_read_rsp>
}
   2cfae:	b003      	add	sp, #12
   2cfb0:	f85d fb04 	ldr.w	pc, [sp], #4

0002cfb4 <att_mtu_req>:
{
   2cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cfb6:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2cfb8:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2cfbc:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cfbe:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2cfc0:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cfc2:	f7ff fc79 	bl	2c8b8 <atomic_test_bit>
   2cfc6:	4604      	mov	r4, r0
   2cfc8:	b9f0      	cbnz	r0, 2d008 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2cfca:	68db      	ldr	r3, [r3, #12]
   2cfcc:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2cfce:	2e16      	cmp	r6, #22
   2cfd0:	d91c      	bls.n	2d00c <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2cfd2:	4638      	mov	r0, r7
   2cfd4:	2202      	movs	r2, #2
   2cfd6:	f7e9 fac3 	bl	16560 <bt_att_create_pdu>
	if (!pdu) {
   2cfda:	4607      	mov	r7, r0
   2cfdc:	b1c0      	cbz	r0, 2d010 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   2cfde:	2102      	movs	r1, #2
   2cfe0:	300c      	adds	r0, #12
   2cfe2:	f7ee fc03 	bl	1b7ec <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cfe6:	2341      	movs	r3, #65	; 0x41
	bt_att_chan_send_rsp(chan, pdu);
   2cfe8:	4639      	mov	r1, r7
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cfea:	7003      	strb	r3, [r0, #0]
   2cfec:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2cfee:	4628      	mov	r0, r5
   2cff0:	f7ff fd6d 	bl	2cace <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cff4:	2e41      	cmp	r6, #65	; 0x41
   2cff6:	bf28      	it	cs
   2cff8:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   2cffa:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cffc:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cffe:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2d000:	f7ff fc9c 	bl	2c93c <att_chan_mtu_updated>
	return 0;
   2d004:	4620      	mov	r0, r4
}
   2d006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2d008:	2006      	movs	r0, #6
   2d00a:	e7fc      	b.n	2d006 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   2d00c:	2004      	movs	r0, #4
   2d00e:	e7fa      	b.n	2d006 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2d010:	200e      	movs	r0, #14
   2d012:	e7f8      	b.n	2d006 <att_mtu_req+0x52>

0002d014 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2d014:	8a0a      	ldrh	r2, [r1, #16]
   2d016:	2300      	movs	r3, #0
   2d018:	68c9      	ldr	r1, [r1, #12]
   2d01a:	f7e9 bdab 	b.w	16b74 <att_handle_rsp>

0002d01e <bt_att_encrypt_change>:
{
   2d01e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d020:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2d022:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2d026:	4604      	mov	r4, r0
	struct bt_conn *conn = le_chan->chan.conn;
   2d028:	f856 5904 	ldr.w	r5, [r6], #-4
	if (!att_chan->att) {
   2d02c:	2b00      	cmp	r3, #0
   2d02e:	d038      	beq.n	2d0a2 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2d030:	b141      	cbz	r1, 2d044 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2d032:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2d036:	2b00      	cmp	r3, #0
   2d038:	d033      	beq.n	2d0a2 <bt_att_encrypt_change+0x84>
   2d03a:	7c1b      	ldrb	r3, [r3, #16]
   2d03c:	07da      	lsls	r2, r3, #31
   2d03e:	d530      	bpl.n	2d0a2 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2d040:	2305      	movs	r3, #5
   2d042:	e021      	b.n	2d088 <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2d044:	4628      	mov	r0, r5
   2d046:	f7eb fb93 	bl	18770 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2d04a:	7a6b      	ldrb	r3, [r5, #9]
   2d04c:	2b01      	cmp	r3, #1
   2d04e:	d028      	beq.n	2d0a2 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2d050:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2d054:	b32d      	cbz	r5, 2d0a2 <bt_att_encrypt_change+0x84>
   2d056:	7c2b      	ldrb	r3, [r5, #16]
   2d058:	07db      	lsls	r3, r3, #31
   2d05a:	d522      	bpl.n	2d0a2 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2d05c:	68eb      	ldr	r3, [r5, #12]
   2d05e:	2b00      	cmp	r3, #0
   2d060:	d0ee      	beq.n	2d040 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2d062:	4630      	mov	r0, r6
   2d064:	696a      	ldr	r2, [r5, #20]
   2d066:	7c69      	ldrb	r1, [r5, #17]
   2d068:	f7e9 f8fc 	bl	16264 <bt_att_chan_create_pdu>
	if (!buf) {
   2d06c:	4604      	mov	r4, r0
   2d06e:	b150      	cbz	r0, 2d086 <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2d070:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2d074:	68eb      	ldr	r3, [r5, #12]
   2d076:	4798      	blx	r3
   2d078:	b168      	cbz	r0, 2d096 <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2d07a:	69a0      	ldr	r0, [r4, #24]
   2d07c:	f7e8 fdc8 	bl	15c10 <tx_meta_data_free>
		net_buf_unref(buf);
   2d080:	4620      	mov	r0, r4
   2d082:	f7ee fa91 	bl	1b5a8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2d086:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2d088:	2200      	movs	r2, #0
   2d08a:	4630      	mov	r0, r6
}
   2d08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2d090:	4611      	mov	r1, r2
   2d092:	f7e9 bd6f 	b.w	16b74 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2d096:	4621      	mov	r1, r4
   2d098:	4630      	mov	r0, r6
   2d09a:	f7e8 fe99 	bl	15dd0 <chan_send>
   2d09e:	2800      	cmp	r0, #0
   2d0a0:	d1eb      	bne.n	2d07a <bt_att_encrypt_change+0x5c>
}
   2d0a2:	bd70      	pop	{r4, r5, r6, pc}

0002d0a4 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2d0a4:	2001      	movs	r0, #1
   2d0a6:	4770      	bx	lr

0002d0a8 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2d0a8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2d0aa:	f7e8 ff47 	bl	15f3c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2d0ae:	b178      	cbz	r0, 2d0d0 <bt_att_clear_out_of_sync_sent+0x28>
	return list->head;
   2d0b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2d0b2:	b16b      	cbz	r3, 2d0d0 <bt_att_clear_out_of_sync_sent+0x28>
   2d0b4:	3bf0      	subs	r3, #240	; 0xf0
   2d0b6:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2d0ba:	e8d2 0fef 	ldaex	r0, [r2]
   2d0be:	f020 0020 	bic.w	r0, r0, #32
   2d0c2:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2d0c6:	2900      	cmp	r1, #0
   2d0c8:	d1f7      	bne.n	2d0ba <bt_att_clear_out_of_sync_sent+0x12>
	return node->next;
   2d0ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2d0ce:	e7f0      	b.n	2d0b2 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2d0d0:	bd08      	pop	{r3, pc}

0002d0d2 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2d0d2:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2d0d4:	2104      	movs	r1, #4
   2d0d6:	f7ff fbc1 	bl	2c85c <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2d0da:	b128      	cbz	r0, 2d0e8 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2d0dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2d0e0:	2105      	movs	r1, #5
   2d0e2:	3094      	adds	r0, #148	; 0x94
   2d0e4:	f7ff bbe8 	b.w	2c8b8 <atomic_test_bit>
}
   2d0e8:	bd08      	pop	{r3, pc}

0002d0ea <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2d0ea:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2d0ec:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2d0f0:	2201      	movs	r2, #1
	data->chan_opt = chan_opt;
   2d0f2:	7403      	strb	r3, [r0, #16]
	data->attr_count = 1;
   2d0f4:	8082      	strh	r2, [r0, #4]
}
   2d0f6:	4770      	bx	lr

0002d0f8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2d0f8:	6010      	str	r0, [r2, #0]
}
   2d0fa:	2000      	movs	r0, #0
   2d0fc:	4770      	bx	lr

0002d0fe <gatt_ccc_changed>:
{
   2d0fe:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2d100:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2d102:	895a      	ldrh	r2, [r3, #10]
   2d104:	428a      	cmp	r2, r1
   2d106:	d003      	beq.n	2d110 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2d108:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2d10a:	68db      	ldr	r3, [r3, #12]
   2d10c:	b103      	cbz	r3, 2d110 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2d10e:	4718      	bx	r3
}
   2d110:	4770      	bx	lr

0002d112 <gatt_indicate_rsp>:
{
   2d112:	b510      	push	{r4, lr}
   2d114:	9c02      	ldr	r4, [sp, #8]
   2d116:	460a      	mov	r2, r1
	if (params->func) {
   2d118:	68a3      	ldr	r3, [r4, #8]
   2d11a:	b10b      	cbz	r3, 2d120 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2d11c:	4621      	mov	r1, r4
   2d11e:	4798      	blx	r3
	params->_ref--;
   2d120:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d122:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2d124:	3b01      	subs	r3, #1
   2d126:	b2db      	uxtb	r3, r3
   2d128:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2d12a:	b122      	cbz	r2, 2d136 <gatt_indicate_rsp+0x24>
   2d12c:	b91b      	cbnz	r3, 2d136 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2d12e:	4620      	mov	r0, r4
}
   2d130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2d134:	4710      	bx	r2
}
   2d136:	bd10      	pop	{r4, pc}

0002d138 <match_uuid>:
	data->attr = attr;
   2d138:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2d13a:	8091      	strh	r1, [r2, #4]
}
   2d13c:	2000      	movs	r0, #0
   2d13e:	4770      	bx	lr

0002d140 <ccc_set_cb>:
}
   2d140:	2000      	movs	r0, #0
   2d142:	4770      	bx	lr

0002d144 <gen_hash_m>:
{
   2d144:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d146:	6807      	ldr	r7, [r0, #0]
{
   2d148:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d14a:	783d      	ldrb	r5, [r7, #0]
{
   2d14c:	4614      	mov	r4, r2
   2d14e:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2d150:	b9dd      	cbnz	r5, 2d18a <gen_hash_m+0x46>
	switch (u16->val) {
   2d152:	887b      	ldrh	r3, [r7, #2]
   2d154:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2d158:	d004      	beq.n	2d164 <gen_hash_m+0x20>
   2d15a:	d810      	bhi.n	2d17e <gen_hash_m+0x3a>
   2d15c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2d160:	2b03      	cmp	r3, #3
   2d162:	d812      	bhi.n	2d18a <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2d164:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d168:	2202      	movs	r2, #2
   2d16a:	4620      	mov	r0, r4
   2d16c:	f10d 010a 	add.w	r1, sp, #10
   2d170:	f7fe fb2f 	bl	2b7d2 <tc_cmac_update>
   2d174:	b968      	cbnz	r0, 2d192 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2d176:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2d17a:	65a2      	str	r2, [r4, #88]	; 0x58
   2d17c:	e006      	b.n	2d18c <gen_hash_m+0x48>
	switch (u16->val) {
   2d17e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2d182:	33ff      	adds	r3, #255	; 0xff
   2d184:	b29b      	uxth	r3, r3
   2d186:	2b04      	cmp	r3, #4
   2d188:	d91e      	bls.n	2d1c8 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2d18a:	2501      	movs	r5, #1
}
   2d18c:	4628      	mov	r0, r5
   2d18e:	b009      	add	sp, #36	; 0x24
   2d190:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2d192:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d194:	2202      	movs	r2, #2
   2d196:	4620      	mov	r0, r4
   2d198:	f10d 010a 	add.w	r1, sp, #10
		value = sys_cpu_to_le16(u16->val);
   2d19c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1a0:	f7fe fb17 	bl	2b7d2 <tc_cmac_update>
   2d1a4:	2800      	cmp	r0, #0
   2d1a6:	d0e6      	beq.n	2d176 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2d1a8:	2000      	movs	r0, #0
   2d1aa:	9000      	str	r0, [sp, #0]
   2d1ac:	aa03      	add	r2, sp, #12
   2d1ae:	2313      	movs	r3, #19
   2d1b0:	4631      	mov	r1, r6
   2d1b2:	6877      	ldr	r7, [r6, #4]
   2d1b4:	47b8      	blx	r7
		if (len < 0) {
   2d1b6:	1e02      	subs	r2, r0, #0
   2d1b8:	dbdf      	blt.n	2d17a <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2d1ba:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1bc:	4620      	mov	r0, r4
   2d1be:	f7fe fb08 	bl	2b7d2 <tc_cmac_update>
   2d1c2:	2800      	cmp	r0, #0
   2d1c4:	d1e1      	bne.n	2d18a <gen_hash_m+0x46>
   2d1c6:	e7d6      	b.n	2d176 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2d1c8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1cc:	2202      	movs	r2, #2
   2d1ce:	4620      	mov	r0, r4
   2d1d0:	f10d 010a 	add.w	r1, sp, #10
   2d1d4:	f7fe fafd 	bl	2b7d2 <tc_cmac_update>
   2d1d8:	2800      	cmp	r0, #0
   2d1da:	d0cc      	beq.n	2d176 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2d1dc:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1de:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   2d1e0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2d1e4:	f10d 010a 	add.w	r1, sp, #10
   2d1e8:	e7e8      	b.n	2d1bc <gen_hash_m+0x78>

0002d1ea <bt_addr_le_eq>:
   2d1ea:	2207      	movs	r2, #7
{
   2d1ec:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2d1ee:	f003 f9be 	bl	3056e <memcmp>
}
   2d1f2:	fab0 f080 	clz	r0, r0
   2d1f6:	0940      	lsrs	r0, r0, #5
   2d1f8:	bd08      	pop	{r3, pc}

0002d1fa <ccc_find_cfg>:
{
   2d1fa:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2d1fc:	7803      	ldrb	r3, [r0, #0]
{
   2d1fe:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2d200:	4293      	cmp	r3, r2
   2d202:	d105      	bne.n	2d210 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2d204:	3001      	adds	r0, #1
   2d206:	f7ff fff0 	bl	2d1ea <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2d20a:	b108      	cbz	r0, 2d210 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2d20c:	4620      	mov	r0, r4
}
   2d20e:	bd10      	pop	{r4, pc}
	return NULL;
   2d210:	2000      	movs	r0, #0
   2d212:	e7fc      	b.n	2d20e <ccc_find_cfg+0x14>

0002d214 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d214:	e8d0 0faf 	lda	r0, [r0]
}
   2d218:	4770      	bx	lr

0002d21a <atomic_or>:
{
   2d21a:	4603      	mov	r3, r0
   2d21c:	b510      	push	{r4, lr}
}
   2d21e:	e8d3 0fef 	ldaex	r0, [r3]
   2d222:	ea40 0201 	orr.w	r2, r0, r1
   2d226:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d22a:	2c00      	cmp	r4, #0
   2d22c:	d1f7      	bne.n	2d21e <atomic_or+0x4>
   2d22e:	bd10      	pop	{r4, pc}

0002d230 <atomic_and>:
{
   2d230:	4603      	mov	r3, r0
   2d232:	b510      	push	{r4, lr}
}
   2d234:	e8d3 0fef 	ldaex	r0, [r3]
   2d238:	ea00 0201 	and.w	r2, r0, r1
   2d23c:	e8c3 2fe4 	stlex	r4, r2, [r3]
   2d240:	2c00      	cmp	r4, #0
   2d242:	d1f7      	bne.n	2d234 <atomic_and+0x4>
   2d244:	bd10      	pop	{r4, pc}

0002d246 <bt_addr_le_copy>:
   2d246:	680b      	ldr	r3, [r1, #0]
   2d248:	6003      	str	r3, [r0, #0]
   2d24a:	888b      	ldrh	r3, [r1, #4]
   2d24c:	8083      	strh	r3, [r0, #4]
   2d24e:	798b      	ldrb	r3, [r1, #6]
   2d250:	7183      	strb	r3, [r0, #6]
}
   2d252:	4770      	bx	lr

0002d254 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2d254:	2300      	movs	r3, #0
   2d256:	6003      	str	r3, [r0, #0]
   2d258:	6043      	str	r3, [r0, #4]
   2d25a:	6083      	str	r3, [r0, #8]
}
   2d25c:	4770      	bx	lr

0002d25e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2d25e:	b538      	push	{r3, r4, r5, lr}
   2d260:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2d264:	4615      	mov	r5, r2
	if (offset > value_len) {
   2d266:	4294      	cmp	r4, r2
   2d268:	d30a      	bcc.n	2d280 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   2d26a:	1aa4      	subs	r4, r4, r2
   2d26c:	428c      	cmp	r4, r1
   2d26e:	bfa8      	it	ge
   2d270:	460c      	movge	r4, r1
   2d272:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d274:	4622      	mov	r2, r4
   2d276:	1959      	adds	r1, r3, r5
   2d278:	f003 f989 	bl	3058e <memcpy>
}
   2d27c:	4620      	mov	r0, r4
   2d27e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d280:	f06f 0406 	mvn.w	r4, #6
   2d284:	e7fa      	b.n	2d27c <bt_gatt_attr_read.constprop.0+0x1e>

0002d286 <bt_gatt_attr_read_ccc>:
{
   2d286:	b530      	push	{r4, r5, lr}
   2d288:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   2d28a:	68c9      	ldr	r1, [r1, #12]
{
   2d28c:	4614      	mov	r4, r2
   2d28e:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2d290:	f7e9 fe18 	bl	16ec4 <find_ccc_cfg>
	if (cfg) {
   2d294:	b100      	cbz	r0, 2d298 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2d296:	8900      	ldrh	r0, [r0, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2d298:	2302      	movs	r3, #2
   2d29a:	f8ad 000e 	strh.w	r0, [sp, #14]
   2d29e:	9300      	str	r3, [sp, #0]
   2d2a0:	4629      	mov	r1, r5
   2d2a2:	4620      	mov	r0, r4
   2d2a4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d2a8:	f10d 030e 	add.w	r3, sp, #14
   2d2ac:	f7ff ffd7 	bl	2d25e <bt_gatt_attr_read.constprop.0>
}
   2d2b0:	b005      	add	sp, #20
   2d2b2:	bd30      	pop	{r4, r5, pc}

0002d2b4 <bt_gatt_attr_read_service>:
{
   2d2b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d2b6:	460c      	mov	r4, r1
   2d2b8:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2d2ba:	68e3      	ldr	r3, [r4, #12]
{
   2d2bc:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2d2be:	781c      	ldrb	r4, [r3, #0]
{
   2d2c0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2d2c4:	b13c      	cbz	r4, 2d2d6 <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d2c6:	2410      	movs	r4, #16
   2d2c8:	3301      	adds	r3, #1
   2d2ca:	9406      	str	r4, [sp, #24]
}
   2d2cc:	b004      	add	sp, #16
   2d2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d2d2:	f7ff bfc4 	b.w	2d25e <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2d2d6:	885b      	ldrh	r3, [r3, #2]
   2d2d8:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d2dc:	2302      	movs	r3, #2
   2d2de:	9300      	str	r3, [sp, #0]
   2d2e0:	f10d 030e 	add.w	r3, sp, #14
   2d2e4:	f7ff ffbb 	bl	2d25e <bt_gatt_attr_read.constprop.0>
}
   2d2e8:	b004      	add	sp, #16
   2d2ea:	bd10      	pop	{r4, pc}

0002d2ec <cf_read>:
{
   2d2ec:	b530      	push	{r4, r5, lr}
   2d2ee:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2d2f0:	2300      	movs	r3, #0
{
   2d2f2:	b085      	sub	sp, #20
   2d2f4:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2d2f6:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2d2fa:	f7e9 fd93 	bl	16e24 <find_cf_cfg>
	if (cfg) {
   2d2fe:	b110      	cbz	r0, 2d306 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2d300:	7a03      	ldrb	r3, [r0, #8]
   2d302:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2d306:	2301      	movs	r3, #1
   2d308:	4629      	mov	r1, r5
   2d30a:	9300      	str	r3, [sp, #0]
   2d30c:	4620      	mov	r0, r4
   2d30e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d312:	ab03      	add	r3, sp, #12
   2d314:	f7ff ffa3 	bl	2d25e <bt_gatt_attr_read.constprop.0>
}
   2d318:	b005      	add	sp, #20
   2d31a:	bd30      	pop	{r4, r5, pc}

0002d31c <read_name>:
{
   2d31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d320:	4614      	mov	r4, r2
   2d322:	461d      	mov	r5, r3
   2d324:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2d328:	f7e6 f98a 	bl	13640 <bt_get_name>
   2d32c:	4606      	mov	r6, r0
				 strlen(name));
   2d32e:	f7dc f82a 	bl	9386 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d332:	b280      	uxth	r0, r0
   2d334:	9006      	str	r0, [sp, #24]
   2d336:	4633      	mov	r3, r6
   2d338:	463a      	mov	r2, r7
   2d33a:	4629      	mov	r1, r5
   2d33c:	4620      	mov	r0, r4
}
   2d33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d342:	f7ff bf8c 	b.w	2d25e <bt_gatt_attr_read.constprop.0>

0002d346 <read_appearance>:
{
   2d346:	b530      	push	{r4, r5, lr}
   2d348:	b085      	sub	sp, #20
   2d34a:	4614      	mov	r4, r2
   2d34c:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d34e:	f7fe ff09 	bl	2c164 <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d352:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d354:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d358:	9300      	str	r3, [sp, #0]
   2d35a:	4629      	mov	r1, r5
   2d35c:	4620      	mov	r0, r4
   2d35e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2d362:	f10d 030e 	add.w	r3, sp, #14
   2d366:	f7ff ff7a 	bl	2d25e <bt_gatt_attr_read.constprop.0>
}
   2d36a:	b005      	add	sp, #20
   2d36c:	bd30      	pop	{r4, r5, pc}

0002d36e <z_log_msg_static_create.constprop.0>:
   2d36e:	2300      	movs	r3, #0
   2d370:	f7e1 ba9e 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002d374 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d374:	2a02      	cmp	r2, #2
{
   2d376:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d378:	d108      	bne.n	2d38c <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d37a:	2300      	movs	r3, #0
   2d37c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2d380:	461a      	mov	r2, r3
   2d382:	7a00      	ldrb	r0, [r0, #8]
   2d384:	f7e9 ffa4 	bl	172d0 <sc_save>
}
   2d388:	2002      	movs	r0, #2
   2d38a:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d38c:	f7e9 ff40 	bl	17210 <sc_clear>
   2d390:	e7fa      	b.n	2d388 <sc_ccc_cfg_write+0x14>

0002d392 <sc_restore_rsp>:
{
   2d392:	b538      	push	{r3, r4, r5, lr}
   2d394:	4604      	mov	r4, r0
   2d396:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2d398:	f7ff fe84 	bl	2d0a4 <bt_att_fixed_chan_only>
   2d39c:	b150      	cbz	r0, 2d3b4 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2d39e:	4620      	mov	r0, r4
   2d3a0:	f7e9 fd40 	bl	16e24 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d3a4:	b130      	cbz	r0, 2d3b4 <sc_restore_rsp+0x22>
   2d3a6:	7a03      	ldrb	r3, [r0, #8]
   2d3a8:	07db      	lsls	r3, r3, #31
   2d3aa:	d503      	bpl.n	2d3b4 <sc_restore_rsp+0x22>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d3ac:	2101      	movs	r1, #1
   2d3ae:	300c      	adds	r0, #12
   2d3b0:	f7ff ff33 	bl	2d21a <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2d3b4:	b955      	cbnz	r5, 2d3cc <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d3b6:	7a20      	ldrb	r0, [r4, #8]
   2d3b8:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2d3bc:	f7e9 fd60 	bl	16e80 <find_sc_cfg>
		if (sc_cfg) {
   2d3c0:	b120      	cbz	r0, 2d3cc <sc_restore_rsp+0x3a>
__ssp_bos_icheck3(memset, void *, int)
   2d3c2:	6085      	str	r5, [r0, #8]
}
   2d3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2d3c8:	f7e9 bf4e 	b.w	17268 <sc_store>
}
   2d3cc:	bd38      	pop	{r3, r4, r5, pc}

0002d3ce <bt_gatt_attr_value_handle>:
{
   2d3ce:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d3d0:	4604      	mov	r4, r0
   2d3d2:	b910      	cbnz	r0, 2d3da <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2d3d4:	2000      	movs	r0, #0
}
   2d3d6:	b002      	add	sp, #8
   2d3d8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d3da:	2300      	movs	r3, #0
   2d3dc:	f88d 3004 	strb.w	r3, [sp, #4]
   2d3e0:	f642 0303 	movw	r3, #10243	; 0x2803
   2d3e4:	6800      	ldr	r0, [r0, #0]
   2d3e6:	a901      	add	r1, sp, #4
   2d3e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d3ec:	f7fe fd61 	bl	2beb2 <bt_uuid_cmp>
   2d3f0:	2800      	cmp	r0, #0
   2d3f2:	d1ef      	bne.n	2d3d4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2d3f4:	68e3      	ldr	r3, [r4, #12]
   2d3f6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2d3f8:	2800      	cmp	r0, #0
   2d3fa:	d1ec      	bne.n	2d3d6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2d3fc:	4620      	mov	r0, r4
   2d3fe:	f7ea fab3 	bl	17968 <bt_gatt_attr_get_handle>
   2d402:	3001      	adds	r0, #1
   2d404:	b280      	uxth	r0, r0
	return handle;
   2d406:	e7e6      	b.n	2d3d6 <bt_gatt_attr_value_handle+0x8>

0002d408 <bt_gatt_attr_read_chrc>:
{
   2d408:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d40a:	68cc      	ldr	r4, [r1, #12]
{
   2d40c:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2d40e:	79a3      	ldrb	r3, [r4, #6]
{
   2d410:	b088      	sub	sp, #32
   2d412:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   2d414:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2d418:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d41a:	f7ff ffd8 	bl	2d3ce <bt_gatt_attr_value_handle>
   2d41e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d422:	6824      	ldr	r4, [r4, #0]
   2d424:	7823      	ldrb	r3, [r4, #0]
   2d426:	b96b      	cbnz	r3, 2d444 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d428:	8863      	ldrh	r3, [r4, #2]
   2d42a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2d42e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d430:	9300      	str	r3, [sp, #0]
   2d432:	4631      	mov	r1, r6
   2d434:	4628      	mov	r0, r5
   2d436:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2d43a:	ab03      	add	r3, sp, #12
   2d43c:	f7ff ff0f 	bl	2d25e <bt_gatt_attr_read.constprop.0>
}
   2d440:	b008      	add	sp, #32
   2d442:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d444:	1c63      	adds	r3, r4, #1
   2d446:	f10d 020f 	add.w	r2, sp, #15
   2d44a:	3411      	adds	r4, #17
   2d44c:	f853 1b04 	ldr.w	r1, [r3], #4
   2d450:	42a3      	cmp	r3, r4
   2d452:	f842 1b04 	str.w	r1, [r2], #4
   2d456:	d1f9      	bne.n	2d44c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2d458:	2313      	movs	r3, #19
   2d45a:	e7e9      	b.n	2d430 <bt_gatt_attr_read_chrc+0x28>

0002d45c <bt_gatt_foreach_attr>:
{
   2d45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2d45e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2d462:	2300      	movs	r3, #0
   2d464:	461a      	mov	r2, r3
   2d466:	9300      	str	r3, [sp, #0]
   2d468:	f7ea fac6 	bl	179f8 <bt_gatt_foreach_attr_type>
}
   2d46c:	b005      	add	sp, #20
   2d46e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d472 <bt_gatt_check_perm>:
{
   2d472:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2d474:	07d4      	lsls	r4, r2, #31
{
   2d476:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d478:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2d47a:	d504      	bpl.n	2d486 <bt_gatt_check_perm+0x14>
   2d47c:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d480:	d027      	beq.n	2d4d2 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d482:	6848      	ldr	r0, [r1, #4]
   2d484:	b328      	cbz	r0, 2d4d2 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d486:	0790      	lsls	r0, r2, #30
   2d488:	d504      	bpl.n	2d494 <bt_gatt_check_perm+0x22>
   2d48a:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d48e:	d022      	beq.n	2d4d6 <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d490:	6889      	ldr	r1, [r1, #8]
   2d492:	b301      	cbz	r1, 2d4d6 <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2d494:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2d498:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2d49c:	d007      	beq.n	2d4ae <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d49e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2d4a2:	b90b      	cbnz	r3, 2d4a8 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2d4a4:	2005      	movs	r0, #5
}
   2d4a6:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d4a8:	7b5b      	ldrb	r3, [r3, #13]
   2d4aa:	06db      	lsls	r3, r3, #27
   2d4ac:	d5fa      	bpl.n	2d4a4 <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2d4ae:	f014 0f30 	tst.w	r4, #48	; 0x30
   2d4b2:	d108      	bne.n	2d4c6 <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2d4b4:	f014 000c 	ands.w	r0, r4, #12
   2d4b8:	d0f5      	beq.n	2d4a6 <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2d4ba:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2d4bc:	2b00      	cmp	r3, #0
   2d4be:	bf14      	ite	ne
   2d4c0:	2000      	movne	r0, #0
   2d4c2:	200f      	moveq	r0, #15
   2d4c4:	e7ef      	b.n	2d4a6 <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2d4c6:	4628      	mov	r0, r5
   2d4c8:	f7ff f8ed 	bl	2c6a6 <bt_conn_get_security>
   2d4cc:	2802      	cmp	r0, #2
   2d4ce:	d8f1      	bhi.n	2d4b4 <bt_gatt_check_perm+0x42>
   2d4d0:	e7e8      	b.n	2d4a4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d4d2:	2002      	movs	r0, #2
   2d4d4:	e7e7      	b.n	2d4a6 <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d4d6:	2003      	movs	r0, #3
   2d4d8:	e7e5      	b.n	2d4a6 <bt_gatt_check_perm+0x34>

0002d4da <bt_gatt_change_aware>:
{
   2d4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4dc:	4605      	mov	r5, r0
   2d4de:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2d4e0:	f7e9 fca0 	bl	16e24 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2d4e4:	b1d0      	cbz	r0, 2d51c <bt_gatt_change_aware+0x42>
   2d4e6:	7a03      	ldrb	r3, [r0, #8]
   2d4e8:	07db      	lsls	r3, r3, #31
   2d4ea:	d517      	bpl.n	2d51c <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d4ec:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d4f0:	4620      	mov	r0, r4
   2d4f2:	f7ff fe8f 	bl	2d214 <atomic_get>
   2d4f6:	f010 0601 	ands.w	r6, r0, #1
   2d4fa:	d10f      	bne.n	2d51c <bt_gatt_change_aware+0x42>
	if (!req) {
   2d4fc:	b17f      	cbz	r7, 2d51e <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d4fe:	f06f 0102 	mvn.w	r1, #2
   2d502:	4620      	mov	r0, r4
   2d504:	f7ff fe94 	bl	2d230 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d508:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2d50c:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d50e:	d008      	beq.n	2d522 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   2d510:	f7ff fdca 	bl	2d0a8 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d514:	2101      	movs	r1, #1
   2d516:	4620      	mov	r0, r4
   2d518:	f7ff fe7f 	bl	2d21a <atomic_or>
		return true;
   2d51c:	2601      	movs	r6, #1
}
   2d51e:	4630      	mov	r0, r6
   2d520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2d522:	f7ff fdbf 	bl	2d0a4 <bt_att_fixed_chan_only>
   2d526:	2800      	cmp	r0, #0
   2d528:	d0f9      	beq.n	2d51e <bt_gatt_change_aware+0x44>
   2d52a:	4628      	mov	r0, r5
   2d52c:	f7ff fdd1 	bl	2d0d2 <bt_att_out_of_sync_sent_on_fixed>
   2d530:	2800      	cmp	r0, #0
   2d532:	d0f4      	beq.n	2d51e <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d534:	f06f 0102 	mvn.w	r1, #2
   2d538:	4620      	mov	r0, r4
   2d53a:	f7ff fe79 	bl	2d230 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2d53e:	4628      	mov	r0, r5
   2d540:	e7e6      	b.n	2d510 <bt_gatt_change_aware+0x36>

0002d542 <ccc_delayed_store>:
{
   2d542:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2d544:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2d548:	4605      	mov	r5, r0
		if (!conn) {
   2d54a:	b184      	cbz	r4, 2d56e <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2d54c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2d550:	4631      	mov	r1, r6
   2d552:	7a20      	ldrb	r0, [r4, #8]
   2d554:	f7fe fe09 	bl	2c16a <bt_addr_le_is_bonded>
   2d558:	b148      	cbz	r0, 2d56e <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2d55a:	2300      	movs	r3, #0
   2d55c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2d560:	4631      	mov	r1, r6
   2d562:	7a20      	ldrb	r0, [r4, #8]
   2d564:	f7eb f914 	bl	18790 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2d568:	4620      	mov	r0, r4
   2d56a:	f7e7 fc7b 	bl	14e64 <bt_conn_unref>
}
   2d56e:	bd70      	pop	{r4, r5, r6, pc}

0002d570 <smp_pairing_rsp>:
}
   2d570:	2007      	movs	r0, #7
   2d572:	4770      	bx	lr

0002d574 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d574:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d578:	4108      	asrs	r0, r1
}
   2d57a:	f000 0001 	and.w	r0, r0, #1
   2d57e:	4770      	bx	lr

0002d580 <update_keys_check>:
{
   2d580:	4603      	mov	r3, r0
   2d582:	b510      	push	{r4, lr}
	if (!keys ||
   2d584:	b1d9      	cbz	r1, 2d5be <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2d586:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2d588:	f010 0f24 	tst.w	r0, #36	; 0x24
   2d58c:	d017      	beq.n	2d5be <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d58e:	7d1a      	ldrb	r2, [r3, #20]
   2d590:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2d592:	7b09      	ldrb	r1, [r1, #12]
   2d594:	42a2      	cmp	r2, r4
   2d596:	bf28      	it	cs
   2d598:	4622      	movcs	r2, r4
   2d59a:	4291      	cmp	r1, r2
   2d59c:	d901      	bls.n	2d5a2 <update_keys_check+0x22>
			return false;
   2d59e:	2000      	movs	r0, #0
}
   2d5a0:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d5a2:	0682      	lsls	r2, r0, #26
   2d5a4:	d404      	bmi.n	2d5b0 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2d5a6:	7a18      	ldrb	r0, [r3, #8]
   2d5a8:	3800      	subs	r0, #0
   2d5aa:	bf18      	it	ne
   2d5ac:	2001      	movne	r0, #1
   2d5ae:	e7f7      	b.n	2d5a0 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2d5b0:	2105      	movs	r1, #5
   2d5b2:	1d18      	adds	r0, r3, #4
   2d5b4:	f7ff ffde 	bl	2d574 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d5b8:	2800      	cmp	r0, #0
   2d5ba:	d1f4      	bne.n	2d5a6 <update_keys_check+0x26>
   2d5bc:	e7ef      	b.n	2d59e <update_keys_check+0x1e>
	return true;
   2d5be:	2001      	movs	r0, #1
   2d5c0:	e7ee      	b.n	2d5a0 <update_keys_check+0x20>

0002d5c2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d5c2:	2301      	movs	r3, #1
   2d5c4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d5c6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d5c8:	e8d0 2fef 	ldaex	r2, [r0]
   2d5cc:	401a      	ands	r2, r3
   2d5ce:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2d5d2:	2900      	cmp	r1, #0
   2d5d4:	d1f8      	bne.n	2d5c8 <atomic_clear_bit+0x6>
}
   2d5d6:	4770      	bx	lr

0002d5d8 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d5d8:	680b      	ldr	r3, [r1, #0]
   2d5da:	6003      	str	r3, [r0, #0]
   2d5dc:	888b      	ldrh	r3, [r1, #4]
   2d5de:	8083      	strh	r3, [r0, #4]
   2d5e0:	798b      	ldrb	r3, [r1, #6]
   2d5e2:	7183      	strb	r3, [r0, #6]
   2d5e4:	4770      	bx	lr

0002d5e6 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   2d5e6:	2007      	movs	r0, #7
   2d5e8:	4770      	bx	lr

0002d5ea <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d5ec:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d5ee:	2200      	movs	r2, #0
   2d5f0:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d5f2:	4604      	mov	r4, r0
   2d5f4:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d5f6:	460a      	mov	r2, r1
   2d5f8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2d5fc:	2106      	movs	r1, #6
   2d5fe:	f7ff f90b 	bl	2c818 <bt_l2cap_send_cb>
   2d602:	b128      	cbz	r0, 2d610 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2d604:	4628      	mov	r0, r5
}
   2d606:	b003      	add	sp, #12
   2d608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2d60c:	f7ed bfcc 	b.w	1b5a8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d610:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d614:	2300      	movs	r3, #0
   2d616:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2d61a:	b003      	add	sp, #12
   2d61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d620:	f7f8 bd82 	b.w	26128 <k_work_reschedule>

0002d624 <z_log_msg_static_create.constprop.0>:
   2d624:	2300      	movs	r3, #0
   2d626:	f7e1 b943 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002d62a <smp_chan_get>:
{
   2d62a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2d62c:	2106      	movs	r1, #6
   2d62e:	f7ff f915 	bl	2c85c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2d632:	b918      	cbnz	r0, 2d63c <smp_chan_get+0x12>
}
   2d634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2d638:	f7eb ba2c 	b.w	18a94 <smp_chan_get.part.0>
   2d63c:	38ec      	subs	r0, #236	; 0xec
   2d63e:	bd08      	pop	{r3, pc}

0002d640 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d640:	2301      	movs	r3, #1
   2d642:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d644:	e8d0 2fef 	ldaex	r2, [r0]
   2d648:	431a      	orrs	r2, r3
   2d64a:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2d64e:	2900      	cmp	r1, #0
   2d650:	d1f8      	bne.n	2d644 <atomic_set_bit+0x4>
}
   2d652:	4770      	bx	lr

0002d654 <smp_keypress_notif>:
{
   2d654:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2d656:	210e      	movs	r1, #14
   2d658:	f7ff fff2 	bl	2d640 <atomic_set_bit>
}
   2d65c:	2000      	movs	r0, #0
   2d65e:	bd08      	pop	{r3, pc}

0002d660 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d660:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d662:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d664:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d666:	4628      	mov	r0, r5
   2d668:	2104      	movs	r1, #4
   2d66a:	f7ff ff83 	bl	2d574 <atomic_test_bit>
   2d66e:	b168      	cbz	r0, 2d68c <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2d670:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d672:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2d674:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d676:	4608      	mov	r0, r1
   2d678:	f7ff f8cb 	bl	2c812 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2d67c:	4604      	mov	r4, r0
   2d67e:	b940      	cbnz	r0, 2d692 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2d680:	2104      	movs	r1, #4
   2d682:	4628      	mov	r0, r5
   2d684:	f7ff ffdc 	bl	2d640 <atomic_set_bit>
}
   2d688:	4620      	mov	r0, r4
   2d68a:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2d68c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d690:	e7ef      	b.n	2d672 <smp_create_pdu.constprop.0+0x12>
   2d692:	2101      	movs	r1, #1
   2d694:	300c      	adds	r0, #12
   2d696:	f7ee f8a9 	bl	1b7ec <net_buf_simple_add>
	hdr->code = op;
   2d69a:	7006      	strb	r6, [r0, #0]
	return buf;
   2d69c:	e7f4      	b.n	2d688 <smp_create_pdu.constprop.0+0x28>

0002d69e <send_pairing_rsp>:
{
   2d69e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d6a0:	2102      	movs	r1, #2
{
   2d6a2:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2d6a4:	f7ff ffdc 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d6a8:	4605      	mov	r5, r0
   2d6aa:	b180      	cbz	r0, 2d6ce <send_pairing_rsp+0x30>
   2d6ac:	2106      	movs	r1, #6
   2d6ae:	300c      	adds	r0, #12
   2d6b0:	f7ee f89c 	bl	1b7ec <net_buf_simple_add>
   2d6b4:	f8d4 3011 	ldr.w	r3, [r4, #17]
	smp_send(smp, rsp_buf, NULL, NULL);
   2d6b8:	2200      	movs	r2, #0
   2d6ba:	6003      	str	r3, [r0, #0]
   2d6bc:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2d6c0:	4629      	mov	r1, r5
   2d6c2:	8083      	strh	r3, [r0, #4]
   2d6c4:	4620      	mov	r0, r4
   2d6c6:	f7ff ff90 	bl	2d5ea <smp_send.constprop.0>
	return 0;
   2d6ca:	2000      	movs	r0, #0
}
   2d6cc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d6ce:	2008      	movs	r0, #8
   2d6d0:	e7fc      	b.n	2d6cc <send_pairing_rsp+0x2e>

0002d6d2 <smp_send_pairing_random>:
{
   2d6d2:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d6d4:	2104      	movs	r1, #4
{
   2d6d6:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d6d8:	f7ff ffc2 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d6dc:	4605      	mov	r5, r0
   2d6de:	b1a0      	cbz	r0, 2d70a <smp_send_pairing_random+0x38>
   2d6e0:	2110      	movs	r1, #16
   2d6e2:	300c      	adds	r0, #12
   2d6e4:	f7ee f882 	bl	1b7ec <net_buf_simple_add>
   2d6e8:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2d6ec:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2d6f0:	f853 1b04 	ldr.w	r1, [r3], #4
   2d6f4:	4293      	cmp	r3, r2
   2d6f6:	f840 1b04 	str.w	r1, [r0], #4
   2d6fa:	d1f9      	bne.n	2d6f0 <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2d6fc:	4620      	mov	r0, r4
   2d6fe:	2200      	movs	r2, #0
   2d700:	4629      	mov	r1, r5
   2d702:	f7ff ff72 	bl	2d5ea <smp_send.constprop.0>
	return 0;
   2d706:	2000      	movs	r0, #0
}
   2d708:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d70a:	2008      	movs	r0, #8
   2d70c:	e7fc      	b.n	2d708 <smp_send_pairing_random+0x36>

0002d70e <smp_dhkey_check>:
{
   2d70e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d710:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
{
   2d714:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2d716:	78db      	ldrb	r3, [r3, #3]
   2d718:	2b01      	cmp	r3, #1
   2d71a:	d119      	bne.n	2d750 <smp_dhkey_check+0x42>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2d71c:	68cd      	ldr	r5, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2d71e:	1d06      	adds	r6, r0, #4
   2d720:	2110      	movs	r1, #16
   2d722:	4630      	mov	r0, r6
   2d724:	f7ff ff4d 	bl	2d5c2 <atomic_clear_bit>
   2d728:	462b      	mov	r3, r5
   2d72a:	f104 02b7 	add.w	r2, r4, #183	; 0xb7
   2d72e:	f105 0110 	add.w	r1, r5, #16
   2d732:	f853 0b04 	ldr.w	r0, [r3], #4
   2d736:	428b      	cmp	r3, r1
   2d738:	f842 0b04 	str.w	r0, [r2], #4
   2d73c:	d1f9      	bne.n	2d732 <smp_dhkey_check+0x24>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   2d73e:	2107      	movs	r1, #7
   2d740:	4630      	mov	r0, r6
   2d742:	f7ff ff17 	bl	2d574 <atomic_test_bit>
   2d746:	b128      	cbz	r0, 2d754 <smp_dhkey_check+0x46>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2d748:	2109      	movs	r1, #9
   2d74a:	4630      	mov	r0, r6
   2d74c:	f7ff ff78 	bl	2d640 <atomic_set_bit>
}
   2d750:	2000      	movs	r0, #0
   2d752:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d754:	210a      	movs	r1, #10
   2d756:	4630      	mov	r0, r6
   2d758:	f7ff ff0c 	bl	2d574 <atomic_test_bit>
   2d75c:	2800      	cmp	r0, #0
   2d75e:	d1f3      	bne.n	2d748 <smp_dhkey_check+0x3a>
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d760:	4620      	mov	r0, r4
}
   2d762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   2d766:	f7eb bdab 	b.w	192c0 <compute_and_check_and_send_periph_dhcheck>

0002d76a <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2d76a:	2007      	movs	r0, #7
   2d76c:	4770      	bx	lr

0002d76e <atomic_test_and_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d76e:	2301      	movs	r3, #1
   2d770:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d774:	43ca      	mvns	r2, r1
{
   2d776:	b530      	push	{r4, r5, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d778:	e8d0 3fef 	ldaex	r3, [r0]
   2d77c:	ea03 0402 	and.w	r4, r3, r2
   2d780:	e8c0 4fe5 	stlex	r5, r4, [r0]
   2d784:	2d00      	cmp	r5, #0
   2d786:	d1f7      	bne.n	2d778 <atomic_test_and_clear_bit+0xa>
	return (old & mask) != 0;
   2d788:	4219      	tst	r1, r3
}
   2d78a:	bf14      	ite	ne
   2d78c:	2001      	movne	r0, #1
   2d78e:	2000      	moveq	r0, #0
   2d790:	bd30      	pop	{r4, r5, pc}

0002d792 <smp_reset>:
{
   2d792:	b538      	push	{r3, r4, r5, lr}
   2d794:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d796:	2500      	movs	r5, #0
   2d798:	1d03      	adds	r3, r0, #4
   2d79a:	e8d3 2fef 	ldaex	r2, [r3]
   2d79e:	e8c3 5fe1 	stlex	r1, r5, [r3]
   2d7a2:	2900      	cmp	r1, #0
   2d7a4:	d1f9      	bne.n	2d79a <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   2d7a6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2d7aa:	f7f8 fcc3 	bl	26134 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2d7ae:	7225      	strb	r5, [r4, #8]
   2d7b0:	e8d4 3fef 	ldaex	r3, [r4]
   2d7b4:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2d7b8:	2a00      	cmp	r2, #0
   2d7ba:	d1f9      	bne.n	2d7b0 <smp_reset+0x1e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2d7bc:	4620      	mov	r0, r4
}
   2d7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2d7c2:	2101      	movs	r1, #1
   2d7c4:	f7ff bf3c 	b.w	2d640 <atomic_set_bit>

0002d7c8 <smp_c1>:
{
   2d7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d7ca:	b089      	sub	sp, #36	; 0x24
   2d7cc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2d7d0:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2d7d2:	7830      	ldrb	r0, [r6, #0]
{
   2d7d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
	p1[0] = ia->type;
   2d7d6:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2d7da:	7838      	ldrb	r0, [r7, #0]
   2d7dc:	f101 0c10 	add.w	ip, r1, #16
   2d7e0:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2d7e4:	6810      	ldr	r0, [r2, #0]
   2d7e6:	f8cd 0002 	str.w	r0, [sp, #2]
   2d7ea:	8890      	ldrh	r0, [r2, #4]
   2d7ec:	7992      	ldrb	r2, [r2, #6]
   2d7ee:	f8ad 0006 	strh.w	r0, [sp, #6]
   2d7f2:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2d7f6:	681a      	ldr	r2, [r3, #0]
   2d7f8:	4668      	mov	r0, sp
   2d7fa:	f8cd 2009 	str.w	r2, [sp, #9]
   2d7fe:	889a      	ldrh	r2, [r3, #4]
   2d800:	799b      	ldrb	r3, [r3, #6]
   2d802:	f8ad 200d 	strh.w	r2, [sp, #13]
   2d806:	4622      	mov	r2, r4
   2d808:	f88d 300f 	strb.w	r3, [sp, #15]
		*r++ = *p++ ^ *q++;
   2d80c:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d810:	f810 eb01 	ldrb.w	lr, [r0], #1
	while (len--) {
   2d814:	4561      	cmp	r1, ip
		*r++ = *p++ ^ *q++;
   2d816:	ea83 030e 	eor.w	r3, r3, lr
   2d81a:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2d81e:	d1f5      	bne.n	2d80c <smp_c1+0x44>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2d820:	4622      	mov	r2, r4
   2d822:	4621      	mov	r1, r4
   2d824:	4628      	mov	r0, r5
   2d826:	f7fe fe66 	bl	2c4f6 <bt_encrypt_le>
	if (err) {
   2d82a:	4603      	mov	r3, r0
   2d82c:	bb28      	cbnz	r0, 2d87a <smp_c1+0xb2>
	(void)memset(p2 + 12, 0, 4);
   2d82e:	9307      	str	r3, [sp, #28]
   2d830:	4623      	mov	r3, r4
	memcpy(p2, ra->a.val, 6);
   2d832:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2d836:	f8d7 0001 	ldr.w	r0, [r7, #1]
   2d83a:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2d83e:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2d842:	9004      	str	r0, [sp, #16]
	memcpy(p2 + 6, ia->a.val, 6);
   2d844:	f8cd 2016 	str.w	r2, [sp, #22]
   2d848:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   2d84c:	f104 0010 	add.w	r0, r4, #16
   2d850:	f8ad 201a 	strh.w	r2, [sp, #26]
	(void)memset(p2 + 12, 0, 4);
   2d854:	a904      	add	r1, sp, #16
		*r++ = *p++ ^ *q++;
   2d856:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d85a:	f811 6b01 	ldrb.w	r6, [r1], #1
	while (len--) {
   2d85e:	4283      	cmp	r3, r0
		*r++ = *p++ ^ *q++;
   2d860:	ea82 0206 	eor.w	r2, r2, r6
   2d864:	f803 2c01 	strb.w	r2, [r3, #-1]
	while (len--) {
   2d868:	d1f5      	bne.n	2d856 <smp_c1+0x8e>
	return bt_encrypt_le(k, enc_data, enc_data);
   2d86a:	4622      	mov	r2, r4
   2d86c:	4621      	mov	r1, r4
   2d86e:	4628      	mov	r0, r5
}
   2d870:	b009      	add	sp, #36	; 0x24
   2d872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2d876:	f7fe be3e 	b.w	2c4f6 <bt_encrypt_le>
}
   2d87a:	b009      	add	sp, #36	; 0x24
   2d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d87e <legacy_pairing_confirm>:
{
   2d87e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d880:	1d07      	adds	r7, r0, #4
{
   2d882:	4604      	mov	r4, r0
   2d884:	b085      	sub	sp, #20
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d886:	210a      	movs	r1, #10
   2d888:	4638      	mov	r0, r7
   2d88a:	f7ff fe73 	bl	2d574 <atomic_test_bit>
   2d88e:	bb88      	cbnz	r0, 2d8f4 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   2d890:	2104      	movs	r1, #4
   2d892:	4620      	mov	r0, r4
   2d894:	f7ff fed4 	bl	2d640 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d898:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2d89a:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2d89e:	f7ff fedf 	bl	2d660 <smp_create_pdu.constprop.0>
	if (!buf) {
   2d8a2:	4605      	mov	r5, r0
   2d8a4:	b1c0      	cbz	r0, 2d8d8 <legacy_pairing_confirm+0x5a>
   2d8a6:	2110      	movs	r1, #16
   2d8a8:	300c      	adds	r0, #12
   2d8aa:	f7ed ff9f 	bl	1b7ec <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2d8ae:	f106 039e 	add.w	r3, r6, #158	; 0x9e
   2d8b2:	3697      	adds	r6, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2d8b4:	9002      	str	r0, [sp, #8]
   2d8b6:	9301      	str	r3, [sp, #4]
   2d8b8:	9600      	str	r6, [sp, #0]
   2d8ba:	f104 0310 	add.w	r3, r4, #16
   2d8be:	f104 0209 	add.w	r2, r4, #9
   2d8c2:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2d8c6:	f104 0047 	add.w	r0, r4, #71	; 0x47
   2d8ca:	f7ff ff7d 	bl	2d7c8 <smp_c1>
   2d8ce:	4606      	mov	r6, r0
   2d8d0:	b128      	cbz	r0, 2d8de <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2d8d2:	4628      	mov	r0, r5
   2d8d4:	f7ed fe68 	bl	1b5a8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2d8d8:	2008      	movs	r0, #8
}
   2d8da:	b005      	add	sp, #20
   2d8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   2d8de:	4602      	mov	r2, r0
   2d8e0:	4629      	mov	r1, r5
   2d8e2:	4620      	mov	r0, r4
   2d8e4:	f7ff fe81 	bl	2d5ea <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d8e8:	4631      	mov	r1, r6
   2d8ea:	4638      	mov	r0, r7
   2d8ec:	f7ff fe69 	bl	2d5c2 <atomic_clear_bit>
	return 0;
   2d8f0:	2000      	movs	r0, #0
   2d8f2:	e7f2      	b.n	2d8da <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2d8f4:	2100      	movs	r1, #0
   2d8f6:	4638      	mov	r0, r7
   2d8f8:	f7ff fea2 	bl	2d640 <atomic_set_bit>
	return 0;
   2d8fc:	e7f8      	b.n	2d8f0 <legacy_pairing_confirm+0x72>

0002d8fe <bt_smp_request_ltk>:
{
   2d8fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2d902:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2d904:	4604      	mov	r4, r0
   2d906:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   2d90a:	f7ff fe8e 	bl	2d62a <smp_chan_get>
	if (!smp) {
   2d90e:	4605      	mov	r5, r0
   2d910:	2800      	cmp	r0, #0
   2d912:	d07c      	beq.n	2da0e <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2d914:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d918:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2d91a:	f1b8 0f00 	cmp.w	r8, #0
   2d91e:	d128      	bne.n	2d972 <bt_smp_request_ltk+0x74>
   2d920:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d924:	4313      	orrs	r3, r2
   2d926:	d124      	bne.n	2d972 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d928:	2103      	movs	r1, #3
   2d92a:	4630      	mov	r0, r6
   2d92c:	f7ff fe22 	bl	2d574 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2d930:	b1f8      	cbz	r0, 2d972 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d932:	2101      	movs	r1, #1
   2d934:	4630      	mov	r0, r6
   2d936:	f7ff fe1d 	bl	2d574 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2d93a:	b1d0      	cbz	r0, 2d972 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d93c:	7d2c      	ldrb	r4, [r5, #20]
   2d93e:	7b6b      	ldrb	r3, [r5, #13]
   2d940:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2d944:	429c      	cmp	r4, r3
   2d946:	bf28      	it	cs
   2d948:	461c      	movcs	r4, r3
   2d94a:	4622      	mov	r2, r4
   2d94c:	4638      	mov	r0, r7
   2d94e:	f002 fe1e 	bl	3058e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2d952:	2c0f      	cmp	r4, #15
   2d954:	d805      	bhi.n	2d962 <bt_smp_request_ltk+0x64>
__ssp_bos_icheck3(memset, void *, int)
   2d956:	4641      	mov	r1, r8
   2d958:	f1c4 0210 	rsb	r2, r4, #16
   2d95c:	1938      	adds	r0, r7, r4
   2d95e:	f002 fe50 	bl	30602 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d962:	4630      	mov	r0, r6
   2d964:	2101      	movs	r1, #1
   2d966:	f7ff fe6b 	bl	2d640 <atomic_set_bit>
		return true;
   2d96a:	2001      	movs	r0, #1
}
   2d96c:	b002      	add	sp, #8
   2d96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2d972:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   2d976:	b983      	cbnz	r3, 2d99a <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2d978:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2d97c:	4642      	mov	r2, r8
   2d97e:	2020      	movs	r0, #32
   2d980:	7a21      	ldrb	r1, [r4, #8]
   2d982:	f7ec fd89 	bl	1a498 <bt_keys_find>
   2d986:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   2d98a:	b930      	cbnz	r0, 2d99a <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2d98c:	4642      	mov	r2, r8
   2d98e:	2001      	movs	r0, #1
   2d990:	7a21      	ldrb	r1, [r4, #8]
   2d992:	f7ec fd81 	bl	1a498 <bt_keys_find>
   2d996:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2d99a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d99e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   2d9a2:	f1b8 0f00 	cmp.w	r8, #0
   2d9a6:	d10c      	bne.n	2d9c2 <bt_smp_request_ltk+0xc4>
   2d9a8:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d9ac:	4313      	orrs	r3, r2
   2d9ae:	d108      	bne.n	2d9c2 <bt_smp_request_ltk+0xc4>
   2d9b0:	b300      	cbz	r0, 2d9f4 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d9b2:	89c3      	ldrh	r3, [r0, #14]
   2d9b4:	069a      	lsls	r2, r3, #26
   2d9b6:	d505      	bpl.n	2d9c4 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2d9b8:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d9ba:	f100 011a 	add.w	r1, r0, #26
   2d9be:	4622      	mov	r2, r4
   2d9c0:	e7c4      	b.n	2d94c <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d9c2:	b1b8      	cbz	r0, 2d9f4 <bt_smp_request_ltk+0xf6>
   2d9c4:	89c3      	ldrh	r3, [r0, #14]
   2d9c6:	07db      	lsls	r3, r3, #31
   2d9c8:	d514      	bpl.n	2d9f4 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d9ca:	2208      	movs	r2, #8
   2d9cc:	4669      	mov	r1, sp
   2d9ce:	3040      	adds	r0, #64	; 0x40
   2d9d0:	f002 fdcd 	bl	3056e <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d9d4:	b970      	cbnz	r0, 2d9f4 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2d9d6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   2d9da:	2202      	movs	r2, #2
   2d9dc:	a908      	add	r1, sp, #32
   2d9de:	3048      	adds	r0, #72	; 0x48
   2d9e0:	f002 fdc5 	bl	3056e <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d9e4:	4680      	mov	r8, r0
   2d9e6:	b928      	cbnz	r0, 2d9f4 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2d9e8:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   2d9ec:	7b0c      	ldrb	r4, [r1, #12]
   2d9ee:	314a      	adds	r1, #74	; 0x4a
   2d9f0:	4622      	mov	r2, r4
   2d9f2:	e7ab      	b.n	2d94c <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d9f4:	210f      	movs	r1, #15
   2d9f6:	4630      	mov	r0, r6
   2d9f8:	f7ff fdbc 	bl	2d574 <atomic_test_bit>
   2d9fc:	b120      	cbz	r0, 2da08 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2d9fe:	2202      	movs	r2, #2
   2da00:	2106      	movs	r1, #6
   2da02:	4620      	mov	r0, r4
   2da04:	f7e7 fcae 	bl	15364 <bt_conn_security_changed>
	smp_reset(smp);
   2da08:	4628      	mov	r0, r5
   2da0a:	f7ff fec2 	bl	2d792 <smp_reset>
		return false;
   2da0e:	2000      	movs	r0, #0
   2da10:	e7ac      	b.n	2d96c <bt_smp_request_ltk+0x6e>

0002da12 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2da12:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2da16:	4770      	bx	lr

0002da18 <bt_smp_dhkey_ready>:
{
   2da18:	b570      	push	{r4, r5, r6, lr}
   2da1a:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2da1c:	2008      	movs	r0, #8
   2da1e:	f7ea ff97 	bl	18950 <smp_find>
	if (smp) {
   2da22:	4605      	mov	r5, r0
   2da24:	b1e0      	cbz	r0, 2da60 <bt_smp_dhkey_ready+0x48>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2da26:	1d06      	adds	r6, r0, #4
   2da28:	2108      	movs	r1, #8
   2da2a:	4630      	mov	r0, r6
   2da2c:	f7ff fdc9 	bl	2d5c2 <atomic_clear_bit>
	if (!dhkey) {
   2da30:	b3bc      	cbz	r4, 2daa2 <bt_smp_dhkey_ready+0x8a>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2da32:	2107      	movs	r1, #7
   2da34:	f7ff fdc5 	bl	2d5c2 <atomic_clear_bit>
   2da38:	4623      	mov	r3, r4
   2da3a:	f105 0297 	add.w	r2, r5, #151	; 0x97
   2da3e:	f104 0120 	add.w	r1, r4, #32
   2da42:	f853 0b04 	ldr.w	r0, [r3], #4
   2da46:	428b      	cmp	r3, r1
   2da48:	f842 0b04 	str.w	r0, [r2], #4
   2da4c:	d1f9      	bne.n	2da42 <bt_smp_dhkey_ready+0x2a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2da4e:	210a      	movs	r1, #10
   2da50:	4630      	mov	r0, r6
   2da52:	f7ff fd8f 	bl	2d574 <atomic_test_bit>
   2da56:	b170      	cbz	r0, 2da76 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da58:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da5a:	4630      	mov	r0, r6
   2da5c:	f7ff fdf0 	bl	2d640 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2da60:	2007      	movs	r0, #7
   2da62:	f7ea ff75 	bl	18950 <smp_find>
		if (smp) {
   2da66:	4604      	mov	r4, r0
   2da68:	b1e8      	cbz	r0, 2daa6 <bt_smp_dhkey_ready+0x8e>
			err = smp_dhkey_generate(smp);
   2da6a:	f7eb f843 	bl	18af4 <smp_dhkey_generate>
			if (err) {
   2da6e:	4601      	mov	r1, r0
   2da70:	b1c8      	cbz	r0, 2daa6 <bt_smp_dhkey_ready+0x8e>
				smp_error(smp, err);
   2da72:	4620      	mov	r0, r4
   2da74:	e012      	b.n	2da9c <bt_smp_dhkey_ready+0x84>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2da76:	2110      	movs	r1, #16
   2da78:	4630      	mov	r0, r6
   2da7a:	f7ff fd7b 	bl	2d574 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2da7e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2da80:	2800      	cmp	r0, #0
   2da82:	d1ea      	bne.n	2da5a <bt_smp_dhkey_ready+0x42>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2da84:	4630      	mov	r0, r6
   2da86:	f7ff fd75 	bl	2d574 <atomic_test_bit>
   2da8a:	2800      	cmp	r0, #0
   2da8c:	d0e8      	beq.n	2da60 <bt_smp_dhkey_ready+0x48>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2da8e:	4628      	mov	r0, r5
   2da90:	f7eb fc16 	bl	192c0 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   2da94:	4601      	mov	r1, r0
   2da96:	2800      	cmp	r0, #0
   2da98:	d0e2      	beq.n	2da60 <bt_smp_dhkey_ready+0x48>
			smp_error(smp, err);
   2da9a:	4628      	mov	r0, r5
   2da9c:	f7eb ffac 	bl	199f8 <smp_error>
   2daa0:	e7de      	b.n	2da60 <bt_smp_dhkey_ready+0x48>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2daa2:	210b      	movs	r1, #11
   2daa4:	e7f9      	b.n	2da9a <bt_smp_dhkey_ready+0x82>
}
   2daa6:	bd70      	pop	{r4, r5, r6, pc}

0002daa8 <bt_smp_disconnected>:
{
   2daa8:	b570      	push	{r4, r5, r6, lr}
   2daaa:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2daac:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2dab0:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dab4:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2dab6:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   2daba:	f7f8 fb3b 	bl	26134 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dabe:	2103      	movs	r1, #3
   2dac0:	4620      	mov	r0, r4
   2dac2:	f7ff fd57 	bl	2d574 <atomic_test_bit>
   2dac6:	b1a0      	cbz	r0, 2daf2 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2dac8:	2108      	movs	r1, #8
   2daca:	4630      	mov	r0, r6
   2dacc:	f7eb ff10 	bl	198f0 <smp_pairing_complete>
	if (keys) {
   2dad0:	b13d      	cbz	r5, 2dae2 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2dad2:	89eb      	ldrh	r3, [r5, #14]
   2dad4:	b113      	cbz	r3, 2dadc <bt_smp_disconnected+0x34>
   2dad6:	7b6b      	ldrb	r3, [r5, #13]
   2dad8:	079b      	lsls	r3, r3, #30
   2dada:	d502      	bpl.n	2dae2 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2dadc:	4628      	mov	r0, r5
   2dade:	f7ec fdc1 	bl	1a664 <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2dae2:	4630      	mov	r0, r6
}
   2dae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2dae8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   2daec:	2100      	movs	r1, #0
   2daee:	f002 bd88 	b.w	30602 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2daf2:	2101      	movs	r1, #1
   2daf4:	4620      	mov	r0, r4
   2daf6:	f7ff fd3d 	bl	2d574 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dafa:	2800      	cmp	r0, #0
   2dafc:	d1e4      	bne.n	2dac8 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2dafe:	210f      	movs	r1, #15
   2db00:	4620      	mov	r0, r4
   2db02:	f7ff fd37 	bl	2d574 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2db06:	2800      	cmp	r0, #0
   2db08:	d1de      	bne.n	2dac8 <bt_smp_disconnected+0x20>
   2db0a:	e7e1      	b.n	2dad0 <bt_smp_disconnected+0x28>

0002db0c <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2db0c:	b510      	push	{r4, lr}
   2db0e:	1e43      	subs	r3, r0, #1
   2db10:	f100 0210 	add.w	r2, r0, #16
   2db14:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2db16:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2db1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
   2db1e:	4283      	cmp	r3, r0
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2db20:	701c      	strb	r4, [r3, #0]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2db22:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2db24:	d1f7      	bne.n	2db16 <sys_mem_swap.constprop.0+0xa>
	}
}
   2db26:	bd10      	pop	{r4, pc}

0002db28 <bt_crypto_aes_cmac>:
{
   2db28:	b570      	push	{r4, r5, r6, lr}
   2db2a:	b0c2      	sub	sp, #264	; 0x108
   2db2c:	460d      	mov	r5, r1
   2db2e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2db30:	4601      	mov	r1, r0
   2db32:	aa16      	add	r2, sp, #88	; 0x58
   2db34:	4668      	mov	r0, sp
{
   2db36:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2db38:	f7fd fe20 	bl	2b77c <tc_cmac_setup>
   2db3c:	b918      	cbnz	r0, 2db46 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2db3e:	f06f 0004 	mvn.w	r0, #4
}
   2db42:	b042      	add	sp, #264	; 0x108
   2db44:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2db46:	4632      	mov	r2, r6
   2db48:	4629      	mov	r1, r5
   2db4a:	4668      	mov	r0, sp
   2db4c:	f7fd fe41 	bl	2b7d2 <tc_cmac_update>
   2db50:	2800      	cmp	r0, #0
   2db52:	d0f4      	beq.n	2db3e <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2db54:	4669      	mov	r1, sp
   2db56:	4620      	mov	r0, r4
   2db58:	f7fd fea5 	bl	2b8a6 <tc_cmac_final>
   2db5c:	2800      	cmp	r0, #0
   2db5e:	d0ee      	beq.n	2db3e <bt_crypto_aes_cmac+0x16>
	return 0;
   2db60:	2000      	movs	r0, #0
   2db62:	e7ee      	b.n	2db42 <bt_crypto_aes_cmac+0x1a>

0002db64 <bt_crypto_f4>:
{
   2db64:	b5f0      	push	{r4, r5, r6, r7, lr}
   2db66:	460e      	mov	r6, r1
   2db68:	4614      	mov	r4, r2
   2db6a:	461d      	mov	r5, r3
   2db6c:	b097      	sub	sp, #92	; 0x5c
	sys_memcpy_swap(m, u, 32);
   2db6e:	4601      	mov	r1, r0
   2db70:	2220      	movs	r2, #32
   2db72:	a805      	add	r0, sp, #20
{
   2db74:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2db76:	f7ec fed3 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2db7a:	2220      	movs	r2, #32
   2db7c:	4631      	mov	r1, r6
   2db7e:	a80d      	add	r0, sp, #52	; 0x34
   2db80:	f7ec fece 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2db84:	4621      	mov	r1, r4
   2db86:	2210      	movs	r2, #16
   2db88:	a801      	add	r0, sp, #4
	m[64] = z;
   2db8a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2db8e:	f7ec fec7 	bl	1a920 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2db92:	463b      	mov	r3, r7
   2db94:	2241      	movs	r2, #65	; 0x41
   2db96:	a905      	add	r1, sp, #20
   2db98:	a801      	add	r0, sp, #4
   2db9a:	f7ff ffc5 	bl	2db28 <bt_crypto_aes_cmac>
	if (err) {
   2db9e:	4604      	mov	r4, r0
   2dba0:	b910      	cbnz	r0, 2dba8 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2dba2:	4638      	mov	r0, r7
   2dba4:	f7ff ffb2 	bl	2db0c <sys_mem_swap.constprop.0>
}
   2dba8:	4620      	mov	r0, r4
   2dbaa:	b017      	add	sp, #92	; 0x5c
   2dbac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002dbae <bt_crypto_f6>:
{
   2dbae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dbb2:	4616      	mov	r6, r2
   2dbb4:	461d      	mov	r5, r3
   2dbb6:	b097      	sub	sp, #92	; 0x5c
   2dbb8:	4604      	mov	r4, r0
   2dbba:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2dbbe:	2210      	movs	r2, #16
   2dbc0:	a805      	add	r0, sp, #20
{
   2dbc2:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2dbc4:	f7ec feac 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2dbc8:	2210      	movs	r2, #16
   2dbca:	4631      	mov	r1, r6
   2dbcc:	a809      	add	r0, sp, #36	; 0x24
   2dbce:	f7ec fea7 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2dbd2:	2210      	movs	r2, #16
   2dbd4:	4629      	mov	r1, r5
   2dbd6:	a80d      	add	r0, sp, #52	; 0x34
   2dbd8:	f7ec fea2 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2dbdc:	2203      	movs	r2, #3
   2dbde:	991e      	ldr	r1, [sp, #120]	; 0x78
   2dbe0:	a811      	add	r0, sp, #68	; 0x44
   2dbe2:	f7ec fe9d 	bl	1a920 <sys_memcpy_swap>
	m[51] = a1->type;
   2dbe6:	4649      	mov	r1, r9
   2dbe8:	f811 3b01 	ldrb.w	r3, [r1], #1
	memcpy(m + 52, a1->a.val, 6);
   2dbec:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2dbf0:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2dbf4:	888b      	ldrh	r3, [r1, #4]
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbf6:	2206      	movs	r2, #6
	memcpy(m + 52, a1->a.val, 6);
   2dbf8:	9012      	str	r0, [sp, #72]	; 0x48
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dbfa:	a812      	add	r0, sp, #72	; 0x48
	memcpy(m + 52, a1->a.val, 6);
   2dbfc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2dc00:	f7ec fe8e 	bl	1a920 <sys_memcpy_swap>
	m[58] = a2->type;
   2dc04:	4641      	mov	r1, r8
   2dc06:	f811 3b01 	ldrb.w	r3, [r1], #1
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dc0a:	2206      	movs	r2, #6
	m[58] = a2->type;
   2dc0c:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2dc10:	f8d8 3001 	ldr.w	r3, [r8, #1]
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dc14:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2dc18:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
   2dc1c:	888b      	ldrh	r3, [r1, #4]
   2dc1e:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dc22:	f7ec fe7d 	bl	1a920 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2dc26:	4621      	mov	r1, r4
   2dc28:	2210      	movs	r2, #16
   2dc2a:	a801      	add	r0, sp, #4
   2dc2c:	f7ec fe78 	bl	1a920 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2dc30:	463b      	mov	r3, r7
   2dc32:	2241      	movs	r2, #65	; 0x41
   2dc34:	a905      	add	r1, sp, #20
   2dc36:	a801      	add	r0, sp, #4
   2dc38:	f7ff ff76 	bl	2db28 <bt_crypto_aes_cmac>
	if (err) {
   2dc3c:	4604      	mov	r4, r0
   2dc3e:	b910      	cbnz	r0, 2dc46 <bt_crypto_f6+0x98>
	sys_mem_swap(check, 16);
   2dc40:	4638      	mov	r0, r7
   2dc42:	f7ff ff63 	bl	2db0c <sys_mem_swap.constprop.0>
}
   2dc46:	4620      	mov	r0, r4
   2dc48:	b017      	add	sp, #92	; 0x5c
   2dc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002dc4e <lfs_api_sync>:
}
   2dc4e:	2000      	movs	r0, #0
   2dc50:	4770      	bx	lr

0002dc52 <get_page_cb>:
{
   2dc52:	b530      	push	{r4, r5, lr}
	size_t area_start = ctx->area->fa_off;
   2dc54:	680d      	ldr	r5, [r1, #0]
	size_t info_end = info_start + info->size - 1U;
   2dc56:	e9d0 4200 	ldrd	r4, r2, [r0]
	size_t area_start = ctx->area->fa_off;
   2dc5a:	6868      	ldr	r0, [r5, #4]
	size_t info_end = info_start + info->size - 1U;
   2dc5c:	1e53      	subs	r3, r2, #1
   2dc5e:	4423      	add	r3, r4
	if (info_end < area_start) {
   2dc60:	4283      	cmp	r3, r0
   2dc62:	d308      	bcc.n	2dc76 <get_page_cb+0x24>
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   2dc64:	68ab      	ldr	r3, [r5, #8]
   2dc66:	3b01      	subs	r3, #1
   2dc68:	4403      	add	r3, r0
	if (info_start > area_end) {
   2dc6a:	429c      	cmp	r4, r3
   2dc6c:	d805      	bhi.n	2dc7a <get_page_cb+0x28>
	if (info->size > ctx->max_size) {
   2dc6e:	684b      	ldr	r3, [r1, #4]
   2dc70:	429a      	cmp	r2, r3
		ctx->max_size = info->size;
   2dc72:	bf88      	it	hi
   2dc74:	604a      	strhi	r2, [r1, #4]
		return true;
   2dc76:	2001      	movs	r0, #1
}
   2dc78:	bd30      	pop	{r4, r5, pc}
		return false;
   2dc7a:	2000      	movs	r0, #0
   2dc7c:	e7fc      	b.n	2dc78 <get_page_cb+0x26>

0002dc7e <lfs_api_erase>:
{
   2dc7e:	b508      	push	{r3, lr}
	int rc = flash_area_erase(fa, offset, c->block_size);
   2dc80:	69c2      	ldr	r2, [r0, #28]
   2dc82:	6800      	ldr	r0, [r0, #0]
   2dc84:	4351      	muls	r1, r2
   2dc86:	f7fd fae7 	bl	2b258 <flash_area_erase>
}
   2dc8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return errno_to_lfs(rc);
   2dc8e:	f7ec bf97 	b.w	1abc0 <errno_to_lfs>

0002dc92 <lfs_api_prog>:
{
   2dc92:	b538      	push	{r3, r4, r5, lr}
   2dc94:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   2dc96:	69c5      	ldr	r5, [r0, #28]
{
   2dc98:	461a      	mov	r2, r3
	int rc = flash_area_write(fa, offset, buffer, size);
   2dc9a:	fb05 4101 	mla	r1, r5, r1, r4
   2dc9e:	9b04      	ldr	r3, [sp, #16]
   2dca0:	6800      	ldr	r0, [r0, #0]
   2dca2:	f7fd fac4 	bl	2b22e <flash_area_write>
}
   2dca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   2dcaa:	f7ec bf89 	b.w	1abc0 <errno_to_lfs>

0002dcae <lfs_api_read>:
{
   2dcae:	b538      	push	{r3, r4, r5, lr}
   2dcb0:	4614      	mov	r4, r2
	size_t offset = block * c->block_size + off;
   2dcb2:	69c5      	ldr	r5, [r0, #28]
{
   2dcb4:	461a      	mov	r2, r3
	int rc = flash_area_read(fa, offset, buffer, size);
   2dcb6:	fb05 4101 	mla	r1, r5, r1, r4
   2dcba:	9b04      	ldr	r3, [sp, #16]
   2dcbc:	6800      	ldr	r0, [r0, #0]
   2dcbe:	f7fd faa1 	bl	2b204 <flash_area_read>
}
   2dcc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return errno_to_lfs(rc);
   2dcc6:	f7ec bf7b 	b.w	1abc0 <errno_to_lfs>

0002dcca <info_to_dirent>:
{
   2dcca:	b510      	push	{r4, lr}
   2dccc:	460c      	mov	r4, r1
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   2dcce:	7803      	ldrb	r3, [r0, #0]
   2dcd0:	1e9a      	subs	r2, r3, #2
   2dcd2:	4253      	negs	r3, r2
   2dcd4:	4153      	adcs	r3, r2
   2dcd6:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   2dcd8:	6843      	ldr	r3, [r0, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2dcda:	f240 1201 	movw	r2, #257	; 0x101
   2dcde:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
   2dce2:	f100 0108 	add.w	r1, r0, #8
   2dce6:	1c60      	adds	r0, r4, #1
   2dce8:	f002 fdeb 	bl	308c2 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   2dcec:	2300      	movs	r3, #0
   2dcee:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   2dcf2:	bd10      	pop	{r4, pc}

0002dcf4 <z_log_msg_static_create.constprop.0>:
   2dcf4:	2300      	movs	r3, #0
   2dcf6:	f7e0 bddb 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002dcfa <fs_lock>:
   2dcfa:	f04f 32ff 	mov.w	r2, #4294967295
   2dcfe:	f04f 33ff 	mov.w	r3, #4294967295
   2dd02:	30f0      	adds	r0, #240	; 0xf0
   2dd04:	f7f7 ba0e 	b.w	25124 <z_impl_k_mutex_lock>

0002dd08 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2dd08:	f7f7 badc 	b.w	252c4 <z_impl_k_mutex_unlock>

0002dd0c <littlefs_read>:
{
   2dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd0e:	460e      	mov	r6, r1
   2dd10:	4617      	mov	r7, r2
   2dd12:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd14:	6843      	ldr	r3, [r0, #4]
   2dd16:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd18:	4628      	mov	r0, r5
   2dd1a:	f7ff ffee 	bl	2dcfa <fs_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   2dd1e:	463b      	mov	r3, r7
   2dd20:	4632      	mov	r2, r6
   2dd22:	6821      	ldr	r1, [r4, #0]
   2dd24:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd28:	f7f5 fe08 	bl	2393c <lfs_file_read>
   2dd2c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd2e:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd32:	f7ff ffe9 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd36:	4620      	mov	r0, r4
}
   2dd38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd3c:	f7ec bf32 	b.w	1aba4 <lfs_to_errno>

0002dd40 <littlefs_write>:
{
   2dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd42:	460e      	mov	r6, r1
   2dd44:	4617      	mov	r7, r2
   2dd46:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd48:	6843      	ldr	r3, [r0, #4]
   2dd4a:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd4c:	4628      	mov	r0, r5
   2dd4e:	f7ff ffd4 	bl	2dcfa <fs_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   2dd52:	463b      	mov	r3, r7
   2dd54:	4632      	mov	r2, r6
   2dd56:	6821      	ldr	r1, [r4, #0]
   2dd58:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd5c:	f7f5 fe2a 	bl	239b4 <lfs_file_write>
   2dd60:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd62:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd66:	f7ff ffcf 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd6a:	4620      	mov	r0, r4
}
   2dd6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dd70:	f7ec bf18 	b.w	1aba4 <lfs_to_errno>

0002dd74 <littlefs_seek>:
{
   2dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dd76:	460e      	mov	r6, r1
   2dd78:	4617      	mov	r7, r2
   2dd7a:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2dd7c:	6843      	ldr	r3, [r0, #4]
   2dd7e:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2dd80:	4628      	mov	r0, r5
   2dd82:	f7ff ffba 	bl	2dcfa <fs_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   2dd86:	463b      	mov	r3, r7
   2dd88:	4632      	mov	r2, r6
   2dd8a:	6821      	ldr	r1, [r4, #0]
   2dd8c:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dd90:	f7f5 fe2e 	bl	239f0 <lfs_file_seek>
   2dd94:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dd96:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2dd9a:	f7ff ffb5 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2dd9e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
}
   2dda2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2dda6:	f7ec befd 	b.w	1aba4 <lfs_to_errno>

0002ddaa <littlefs_tell>:
{
   2ddaa:	b538      	push	{r3, r4, r5, lr}
   2ddac:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2ddae:	6843      	ldr	r3, [r0, #4]
   2ddb0:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2ddb2:	4628      	mov	r0, r5
   2ddb4:	f7ff ffa1 	bl	2dcfa <fs_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   2ddb8:	6821      	ldr	r1, [r4, #0]
   2ddba:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2ddbe:	f7f5 feaf 	bl	23b20 <lfs_file_tell>
   2ddc2:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2ddc4:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2ddc8:	f7ff ff9e 	bl	2dd08 <k_mutex_unlock.isra.0>
}
   2ddcc:	4620      	mov	r0, r4
   2ddce:	bd38      	pop	{r3, r4, r5, pc}

0002ddd0 <littlefs_truncate>:
{
   2ddd0:	b570      	push	{r4, r5, r6, lr}
   2ddd2:	460e      	mov	r6, r1
   2ddd4:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2ddd6:	6843      	ldr	r3, [r0, #4]
   2ddd8:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2ddda:	4628      	mov	r0, r5
   2dddc:	f7ff ff8d 	bl	2dcfa <fs_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   2dde0:	4632      	mov	r2, r6
   2dde2:	6821      	ldr	r1, [r4, #0]
   2dde4:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dde8:	f7f5 fe20 	bl	23a2c <lfs_file_truncate>
   2ddec:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2ddee:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2ddf2:	f7ff ff89 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2ddf6:	4620      	mov	r0, r4
}
   2ddf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2ddfc:	f7ec bed2 	b.w	1aba4 <lfs_to_errno>

0002de00 <littlefs_sync>:
{
   2de00:	b538      	push	{r3, r4, r5, lr}
   2de02:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2de04:	6843      	ldr	r3, [r0, #4]
   2de06:	691d      	ldr	r5, [r3, #16]
	fs_lock(fs);
   2de08:	4628      	mov	r0, r5
   2de0a:	f7ff ff76 	bl	2dcfa <fs_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   2de0e:	6821      	ldr	r1, [r4, #0]
   2de10:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2de14:	f7f5 fd74 	bl	23900 <lfs_file_sync>
   2de18:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2de1a:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2de1e:	f7ff ff73 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2de22:	4620      	mov	r0, r4
}
   2de24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2de28:	f7ec bebc 	b.w	1aba4 <lfs_to_errno>

0002de2c <littlefs_close>:
{
   2de2c:	b570      	push	{r4, r5, r6, lr}
   2de2e:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   2de30:	6843      	ldr	r3, [r0, #4]
   2de32:	691e      	ldr	r6, [r3, #16]
	fs_lock(fs);
   2de34:	4630      	mov	r0, r6
   2de36:	f7ff ff60 	bl	2dcfa <fs_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   2de3a:	6821      	ldr	r1, [r4, #0]
   2de3c:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2de40:	f7f5 fd40 	bl	238c4 <lfs_file_close>
   2de44:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2de46:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2de4a:	f7ff ff5d 	bl	2dd08 <k_mutex_unlock.isra.0>
	release_file_data(fp);
   2de4e:	4620      	mov	r0, r4
   2de50:	f7ec fe94 	bl	1ab7c <release_file_data>
	return lfs_to_errno(ret);
   2de54:	4628      	mov	r0, r5
}
   2de56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2de5a:	f7ec bea3 	b.w	1aba4 <lfs_to_errno>

0002de5e <littlefs_readdir>:
{
   2de5e:	b570      	push	{r4, r5, r6, lr}
   2de60:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
   2de62:	6843      	ldr	r3, [r0, #4]
{
   2de64:	b0c2      	sub	sp, #264	; 0x108
	struct fs_littlefs *fs = dp->mp->fs_data;
   2de66:	691e      	ldr	r6, [r3, #16]
{
   2de68:	460d      	mov	r5, r1
	fs_lock(fs);
   2de6a:	4630      	mov	r0, r6
   2de6c:	f7ff ff45 	bl	2dcfa <fs_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   2de70:	6821      	ldr	r1, [r4, #0]
   2de72:	466a      	mov	r2, sp
   2de74:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2de78:	f7f5 ff6c 	bl	23d54 <lfs_dir_read>
   2de7c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2de7e:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2de82:	f7ff ff41 	bl	2dd08 <k_mutex_unlock.isra.0>
	if (ret > 0) {
   2de86:	2c00      	cmp	r4, #0
   2de88:	dd0a      	ble.n	2dea0 <littlefs_readdir+0x42>
		info_to_dirent(&info, entry);
   2de8a:	4629      	mov	r1, r5
   2de8c:	4668      	mov	r0, sp
   2de8e:	f7ff ff1c 	bl	2dcca <info_to_dirent>
		ret = 0;
   2de92:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   2de94:	4620      	mov	r0, r4
}
   2de96:	b042      	add	sp, #264	; 0x108
   2de98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2de9c:	f7ec be82 	b.w	1aba4 <lfs_to_errno>
	} else if (ret == 0) {
   2dea0:	d1f8      	bne.n	2de94 <littlefs_readdir+0x36>
		entry->name[0] = 0;
   2dea2:	706c      	strb	r4, [r5, #1]
   2dea4:	e7f5      	b.n	2de92 <littlefs_readdir+0x34>

0002dea6 <littlefs_unlink>:
{
   2dea6:	b538      	push	{r3, r4, r5, lr}
   2dea8:	4603      	mov	r3, r0
   2deaa:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   2deac:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2deae:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   2deb0:	f7ec fe52 	bl	1ab58 <fs_impl_strip_prefix>
   2deb4:	4604      	mov	r4, r0
	fs_lock(fs);
   2deb6:	4628      	mov	r0, r5
   2deb8:	f7ff ff1f 	bl	2dcfa <fs_lock>
	int ret = lfs_remove(&fs->lfs, path);
   2debc:	4621      	mov	r1, r4
   2debe:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2dec2:	f7f5 fb49 	bl	23558 <lfs_remove>
   2dec6:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2dec8:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2decc:	f7ff ff1c 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2ded0:	4620      	mov	r0, r4
}
   2ded2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2ded6:	f7ec be65 	b.w	1aba4 <lfs_to_errno>

0002deda <littlefs_rename>:
{
   2deda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dedc:	4604      	mov	r4, r0
   2dede:	4608      	mov	r0, r1
	from = fs_impl_strip_prefix(from, mountp);
   2dee0:	4621      	mov	r1, r4
{
   2dee2:	4617      	mov	r7, r2
	struct fs_littlefs *fs = mountp->fs_data;
   2dee4:	6925      	ldr	r5, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   2dee6:	f7ec fe37 	bl	1ab58 <fs_impl_strip_prefix>
	to = fs_impl_strip_prefix(to, mountp);
   2deea:	4621      	mov	r1, r4
	from = fs_impl_strip_prefix(from, mountp);
   2deec:	4606      	mov	r6, r0
	to = fs_impl_strip_prefix(to, mountp);
   2deee:	4638      	mov	r0, r7
   2def0:	f7ec fe32 	bl	1ab58 <fs_impl_strip_prefix>
   2def4:	4604      	mov	r4, r0
	fs_lock(fs);
   2def6:	4628      	mov	r0, r5
   2def8:	f7ff feff 	bl	2dcfa <fs_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   2defc:	4622      	mov	r2, r4
   2defe:	4631      	mov	r1, r6
   2df00:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2df04:	f7f5 fb96 	bl	23634 <lfs_rename>
   2df08:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2df0a:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2df0e:	f7ff fefb 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2df12:	4620      	mov	r0, r4
}
   2df14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return lfs_to_errno(ret);
   2df18:	f7ec be44 	b.w	1aba4 <lfs_to_errno>

0002df1c <littlefs_mkdir>:
{
   2df1c:	b538      	push	{r3, r4, r5, lr}
   2df1e:	4603      	mov	r3, r0
   2df20:	4608      	mov	r0, r1
	path = fs_impl_strip_prefix(path, mountp);
   2df22:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2df24:	691d      	ldr	r5, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   2df26:	f7ec fe17 	bl	1ab58 <fs_impl_strip_prefix>
   2df2a:	4604      	mov	r4, r0
	fs_lock(fs);
   2df2c:	4628      	mov	r0, r5
   2df2e:	f7ff fee4 	bl	2dcfa <fs_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   2df32:	4621      	mov	r1, r4
   2df34:	f105 0074 	add.w	r0, r5, #116	; 0x74
   2df38:	f7f5 fe0c 	bl	23b54 <lfs_mkdir>
   2df3c:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2df3e:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
   2df42:	f7ff fee1 	bl	2dd08 <k_mutex_unlock.isra.0>
	return lfs_to_errno(ret);
   2df46:	4620      	mov	r0, r4
}
   2df48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return lfs_to_errno(ret);
   2df4c:	f7ec be2a 	b.w	1aba4 <lfs_to_errno>

0002df50 <littlefs_stat>:
{
   2df50:	4603      	mov	r3, r0
   2df52:	b570      	push	{r4, r5, r6, lr}
   2df54:	4608      	mov	r0, r1
   2df56:	b0c2      	sub	sp, #264	; 0x108
	path = fs_impl_strip_prefix(path, mountp);
   2df58:	4619      	mov	r1, r3
	struct fs_littlefs *fs = mountp->fs_data;
   2df5a:	691e      	ldr	r6, [r3, #16]
{
   2df5c:	4615      	mov	r5, r2
	path = fs_impl_strip_prefix(path, mountp);
   2df5e:	f7ec fdfb 	bl	1ab58 <fs_impl_strip_prefix>
   2df62:	4604      	mov	r4, r0
	fs_lock(fs);
   2df64:	4630      	mov	r0, r6
   2df66:	f7ff fec8 	bl	2dcfa <fs_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   2df6a:	4621      	mov	r1, r4
   2df6c:	466a      	mov	r2, sp
   2df6e:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2df72:	f001 fcbd 	bl	2f8f0 <lfs_stat>
   2df76:	4604      	mov	r4, r0
	k_mutex_unlock(&fs->mutex);
   2df78:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2df7c:	f7ff fec4 	bl	2dd08 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   2df80:	2c00      	cmp	r4, #0
   2df82:	db04      	blt.n	2df8e <littlefs_stat+0x3e>
		info_to_dirent(&info, entry);
   2df84:	4629      	mov	r1, r5
   2df86:	4668      	mov	r0, sp
   2df88:	f7ff fe9f 	bl	2dcca <info_to_dirent>
		ret = 0;
   2df8c:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   2df8e:	4620      	mov	r0, r4
}
   2df90:	b042      	add	sp, #264	; 0x108
   2df92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2df96:	f7ec be05 	b.w	1aba4 <lfs_to_errno>

0002df9a <littlefs_statvfs>:
{
   2df9a:	4603      	mov	r3, r0
   2df9c:	b570      	push	{r4, r5, r6, lr}
   2df9e:	4614      	mov	r4, r2
	struct fs_littlefs *fs = mountp->fs_data;
   2dfa0:	691e      	ldr	r6, [r3, #16]
{
   2dfa2:	4608      	mov	r0, r1
	stat->f_bsize = lfs->cfg->prog_size;
   2dfa4:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
	path = fs_impl_strip_prefix(path, mountp);
   2dfa8:	4619      	mov	r1, r3
	stat->f_bsize = lfs->cfg->prog_size;
   2dfaa:	6992      	ldr	r2, [r2, #24]
   2dfac:	6022      	str	r2, [r4, #0]
	stat->f_frsize = lfs->cfg->block_size;
   2dfae:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
   2dfb2:	69d2      	ldr	r2, [r2, #28]
   2dfb4:	6062      	str	r2, [r4, #4]
	stat->f_blocks = lfs->cfg->block_count;
   2dfb6:	f8d6 20dc 	ldr.w	r2, [r6, #220]	; 0xdc
   2dfba:	6a12      	ldr	r2, [r2, #32]
   2dfbc:	60a2      	str	r2, [r4, #8]
	path = fs_impl_strip_prefix(path, mountp);
   2dfbe:	f7ec fdcb 	bl	1ab58 <fs_impl_strip_prefix>
	fs_lock(fs);
   2dfc2:	4630      	mov	r0, r6
   2dfc4:	f7ff fe99 	bl	2dcfa <fs_lock>
	ssize_t ret = lfs_fs_size(lfs);
   2dfc8:	f106 0074 	add.w	r0, r6, #116	; 0x74
   2dfcc:	f001 fcb2 	bl	2f934 <lfs_fs_size>
   2dfd0:	4605      	mov	r5, r0
	k_mutex_unlock(&fs->mutex);
   2dfd2:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   2dfd6:	f7ff fe97 	bl	2dd08 <k_mutex_unlock.isra.0>
	if (ret >= 0) {
   2dfda:	2d00      	cmp	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   2dfdc:	bfa1      	itttt	ge
   2dfde:	68a3      	ldrge	r3, [r4, #8]
   2dfe0:	1b5b      	subge	r3, r3, r5
		ret = 0;
   2dfe2:	2500      	movge	r5, #0
		stat->f_bfree = stat->f_blocks - ret;
   2dfe4:	60e3      	strge	r3, [r4, #12]
	return lfs_to_errno(ret);
   2dfe6:	4628      	mov	r0, r5
}
   2dfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lfs_to_errno(ret);
   2dfec:	f7ec bdda 	b.w	1aba4 <lfs_to_errno>

0002dff0 <fixed_data_unref>:
}
   2dff0:	4770      	bx	lr

0002dff2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2dff2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2dff4:	6849      	ldr	r1, [r1, #4]
   2dff6:	6809      	ldr	r1, [r1, #0]
   2dff8:	f7ed b8ce 	b.w	1b198 <net_buf_alloc_len>

0002dffc <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2dffc:	f7f7 ba8a 	b.w	25514 <z_impl_k_queue_get>

0002e000 <net_buf_simple_push_u8>:
{
   2e000:	b510      	push	{r4, lr}
   2e002:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   2e004:	2101      	movs	r1, #1
   2e006:	f7ed fb95 	bl	1b734 <net_buf_simple_push>
	*data = val;
   2e00a:	7004      	strb	r4, [r0, #0]
}
   2e00c:	bd10      	pop	{r4, pc}

0002e00e <net_buf_simple_pull_le16>:
{
   2e00e:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2e010:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2e012:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2e014:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2e016:	f7ed fbad 	bl	1b774 <net_buf_simple_pull>
}
   2e01a:	4620      	mov	r0, r4
   2e01c:	bd10      	pop	{r4, pc}

0002e01e <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2e01e:	6802      	ldr	r2, [r0, #0]
   2e020:	6880      	ldr	r0, [r0, #8]
}
   2e022:	1a10      	subs	r0, r2, r0
   2e024:	4770      	bx	lr

0002e026 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e026:	8883      	ldrh	r3, [r0, #4]
   2e028:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2e02a:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2e02c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2e02e:	6803      	ldr	r3, [r0, #0]
   2e030:	1a5b      	subs	r3, r3, r1
}
   2e032:	1ad0      	subs	r0, r2, r3
   2e034:	4770      	bx	lr

0002e036 <net_buf_simple_add_mem>:
{
   2e036:	b538      	push	{r3, r4, r5, lr}
   2e038:	460d      	mov	r5, r1
   2e03a:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2e03c:	4611      	mov	r1, r2
   2e03e:	f7ed fbd5 	bl	1b7ec <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e042:	4622      	mov	r2, r4
   2e044:	4629      	mov	r1, r5
}
   2e046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2e04a:	f002 baa0 	b.w	3058e <memcpy>

0002e04e <net_buf_simple_add_u8>:
{
   2e04e:	b510      	push	{r4, lr}
   2e050:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2e052:	2101      	movs	r1, #1
   2e054:	f7ed fbca 	bl	1b7ec <net_buf_simple_add>
	*u8 = val;
   2e058:	7004      	strb	r4, [r0, #0]
}
   2e05a:	bd10      	pop	{r4, pc}

0002e05c <adc_context_on_timer_expired>:
{
   2e05c:	b410      	push	{r4}
   2e05e:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2e060:	3808      	subs	r0, #8
   2e062:	e8d0 2fef 	ldaex	r2, [r0]
   2e066:	1c51      	adds	r1, r2, #1
   2e068:	e8c0 1fe4 	stlex	r4, r1, [r0]
   2e06c:	2c00      	cmp	r4, #0
   2e06e:	d1f8      	bne.n	2e062 <adc_context_on_timer_expired+0x6>
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2e070:	b912      	cbnz	r2, 2e078 <adc_context_on_timer_expired+0x1c>
}
   2e072:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2e074:	f7ed bbfc 	b.w	1b870 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   2e078:	f06f 020f 	mvn.w	r2, #15
}
   2e07c:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   2e07e:	669a      	str	r2, [r3, #104]	; 0x68
}
   2e080:	4770      	bx	lr

0002e082 <set_on_state>:
	__asm__ volatile(
   2e082:	f04f 0320 	mov.w	r3, #32
   2e086:	f3ef 8211 	mrs	r2, BASEPRI
   2e08a:	f383 8812 	msr	BASEPRI_MAX, r3
   2e08e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2e092:	6803      	ldr	r3, [r0, #0]
   2e094:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e098:	f043 0302 	orr.w	r3, r3, #2
   2e09c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2e09e:	f382 8811 	msr	BASEPRI, r2
   2e0a2:	f3bf 8f6f 	isb	sy
}
   2e0a6:	4770      	bx	lr

0002e0a8 <async_start>:
{
   2e0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e0aa:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2e0ac:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2e0ae:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2e0b0:	f04f 0520 	mov.w	r5, #32
   2e0b4:	f3ef 8611 	mrs	r6, BASEPRI
   2e0b8:	f385 8812 	msr	BASEPRI_MAX, r5
   2e0bc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2e0c0:	250c      	movs	r5, #12
   2e0c2:	4369      	muls	r1, r5
   2e0c4:	440c      	add	r4, r1
   2e0c6:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2e0ca:	f005 0c07 	and.w	ip, r5, #7
   2e0ce:	f1bc 0f01 	cmp.w	ip, #1
   2e0d2:	d10c      	bne.n	2e0ee <async_start+0x46>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2e0d4:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
	__asm__ volatile(
   2e0d8:	f386 8811 	msr	BASEPRI, r6
   2e0dc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2e0e0:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   2e0e4:	6843      	ldr	r3, [r0, #4]
   2e0e6:	585b      	ldr	r3, [r3, r1]
   2e0e8:	4798      	blx	r3
	return 0;
   2e0ea:	2000      	movs	r0, #0
}
   2e0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2e0ee:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2e0f2:	42af      	cmp	r7, r5
   2e0f4:	f386 8811 	msr	BASEPRI, r6
   2e0f8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2e0fc:	bf0c      	ite	eq
   2e0fe:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2e102:	f04f 30ff 	movne.w	r0, #4294967295
   2e106:	e7f1      	b.n	2e0ec <async_start+0x44>

0002e108 <api_start>:
{
   2e108:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2e10a:	2480      	movs	r4, #128	; 0x80
   2e10c:	9400      	str	r4, [sp, #0]
   2e10e:	f7ff ffcb 	bl	2e0a8 <async_start>
}
   2e112:	b002      	add	sp, #8
   2e114:	bd10      	pop	{r4, pc}

0002e116 <onoff_started_callback>:
	return &data->mgr[type];
   2e116:	6900      	ldr	r0, [r0, #16]
   2e118:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2e11a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2e11e:	2100      	movs	r1, #0
   2e120:	4710      	bx	r2

0002e122 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e122:	2003      	movs	r0, #3
   2e124:	f7f0 becc 	b.w	1eec0 <nrfx_clock_start>

0002e128 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e128:	2002      	movs	r0, #2
   2e12a:	f7f0 bec9 	b.w	1eec0 <nrfx_clock_start>

0002e12e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2e12e:	2000      	movs	r0, #0
   2e130:	f7f0 bec6 	b.w	1eec0 <nrfx_clock_start>

0002e134 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   2e134:	2003      	movs	r0, #3
   2e136:	f7f0 bf41 	b.w	1efbc <nrfx_clock_stop>

0002e13a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   2e13a:	2002      	movs	r0, #2
   2e13c:	f7f0 bf3e 	b.w	1efbc <nrfx_clock_stop>

0002e140 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e140:	2000      	movs	r0, #0
   2e142:	f7f0 bf3b 	b.w	1efbc <nrfx_clock_stop>

0002e146 <blocking_start_callback>:
{
   2e146:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e148:	f7f7 ba4e 	b.w	255e8 <z_impl_k_sem_give>

0002e14c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e14c:	2280      	movs	r2, #128	; 0x80
   2e14e:	f7ed bdf7 	b.w	1bd40 <stop>

0002e152 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e152:	6843      	ldr	r3, [r0, #4]
}
   2e154:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e156:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e158:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2e15a:	600b      	str	r3, [r1, #0]
}
   2e15c:	4770      	bx	lr

0002e15e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e15e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   2e160:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e164:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   2e166:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e16a:	6098      	str	r0, [r3, #8]
}
   2e16c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e16e:	60d9      	str	r1, [r3, #12]
   2e170:	4770      	bx	lr

0002e172 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e172:	6843      	ldr	r3, [r0, #4]
}
   2e174:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e176:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2e178:	6099      	str	r1, [r3, #8]
}
   2e17a:	4770      	bx	lr

0002e17c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e17c:	6843      	ldr	r3, [r0, #4]
}
   2e17e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e180:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2e182:	60d9      	str	r1, [r3, #12]
}
   2e184:	4770      	bx	lr

0002e186 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e186:	6843      	ldr	r3, [r0, #4]
   2e188:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e18a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   2e18c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e190:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e192:	6090      	str	r0, [r2, #8]
}
   2e194:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e196:	60d3      	str	r3, [r2, #12]
   2e198:	4770      	bx	lr

0002e19a <irq_connect4>:
#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   2e19a:	2200      	movs	r2, #0
   2e19c:	2101      	movs	r1, #1
   2e19e:	200a      	movs	r0, #10
   2e1a0:	f7e2 bc7c 	b.w	10a9c <z_arm_irq_priority_set>

0002e1a4 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   2e1a4:	b510      	push	{r4, lr}
	while (*count) {
   2e1a6:	680b      	ldr	r3, [r1, #0]
   2e1a8:	b913      	cbnz	r3, 2e1b0 <spi_context_get_next_buf.constprop.0+0xc>
	return NULL;
   2e1aa:	4618      	mov	r0, r3
	*buf_len = 0;
   2e1ac:	6013      	str	r3, [r2, #0]
	return NULL;
   2e1ae:	e005      	b.n	2e1bc <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   2e1b0:	6803      	ldr	r3, [r0, #0]
   2e1b2:	685c      	ldr	r4, [r3, #4]
   2e1b4:	b11c      	cbz	r4, 2e1be <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   2e1b6:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   2e1b8:	6803      	ldr	r3, [r0, #0]
   2e1ba:	6818      	ldr	r0, [r3, #0]
}
   2e1bc:	bd10      	pop	{r4, pc}
		++(*current);
   2e1be:	3308      	adds	r3, #8
   2e1c0:	6003      	str	r3, [r0, #0]
		--(*count);
   2e1c2:	680b      	ldr	r3, [r1, #0]
   2e1c4:	3b01      	subs	r3, #1
   2e1c6:	600b      	str	r3, [r1, #0]
   2e1c8:	e7ed      	b.n	2e1a6 <spi_context_get_next_buf.constprop.0+0x2>

0002e1ca <z_log_msg_static_create.constprop.0>:
   2e1ca:	2300      	movs	r3, #0
   2e1cc:	f7e0 bb70 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002e1d0 <_spi_context_cs_control>:
{
   2e1d0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2e1d2:	6803      	ldr	r3, [r0, #0]
{
   2e1d4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   2e1d6:	b1e3      	cbz	r3, 2e212 <_spi_context_cs_control+0x42>
   2e1d8:	6898      	ldr	r0, [r3, #8]
   2e1da:	b1d0      	cbz	r0, 2e212 <_spi_context_cs_control+0x42>
   2e1dc:	6805      	ldr	r5, [r0, #0]
   2e1de:	b1c5      	cbz	r5, 2e212 <_spi_context_cs_control+0x42>
		if (on) {
   2e1e0:	b149      	cbz	r1, 2e1f6 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   2e1e2:	2101      	movs	r1, #1
   2e1e4:	f7ee f996 	bl	1c514 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2e1e8:	6823      	ldr	r3, [r4, #0]
   2e1ea:	689b      	ldr	r3, [r3, #8]
   2e1ec:	6898      	ldr	r0, [r3, #8]
}
   2e1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2e1f2:	f002 b8b5 	b.w	30360 <z_impl_k_busy_wait>
			if (!force_off &&
   2e1f6:	b912      	cbnz	r2, 2e1fe <_spi_context_cs_control+0x2e>
   2e1f8:	889b      	ldrh	r3, [r3, #4]
   2e1fa:	04db      	lsls	r3, r3, #19
   2e1fc:	d409      	bmi.n	2e212 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   2e1fe:	6880      	ldr	r0, [r0, #8]
   2e200:	f002 f8ae 	bl	30360 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2e204:	6823      	ldr	r3, [r4, #0]
   2e206:	2100      	movs	r1, #0
   2e208:	6898      	ldr	r0, [r3, #8]
}
   2e20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   2e20e:	f7ee b981 	b.w	1c514 <gpio_pin_set_dt.isra.0>
}
   2e212:	bd38      	pop	{r3, r4, r5, pc}

0002e214 <spi_context_unlock_unconditionally>:
{
   2e214:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2e216:	2201      	movs	r2, #1
   2e218:	2100      	movs	r1, #0
{
   2e21a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2e21c:	f7ff ffd8 	bl	2e1d0 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2e220:	69a3      	ldr	r3, [r4, #24]
   2e222:	b933      	cbnz	r3, 2e232 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2e224:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   2e226:	f104 0010 	add.w	r0, r4, #16
}
   2e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e22e:	f7f7 b9db 	b.w	255e8 <z_impl_k_sem_give>
   2e232:	bd10      	pop	{r4, pc}

0002e234 <spi_nrfx_release>:
{
   2e234:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   2e236:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2e238:	6803      	ldr	r3, [r0, #0]
   2e23a:	428b      	cmp	r3, r1
   2e23c:	d106      	bne.n	2e24c <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2e23e:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   2e242:	b934      	cbnz	r4, 2e252 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2e244:	f7ff ffe6 	bl	2e214 <spi_context_unlock_unconditionally>
	return 0;
   2e248:	4620      	mov	r0, r4
}
   2e24a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2e24c:	f06f 0015 	mvn.w	r0, #21
   2e250:	e7fb      	b.n	2e24a <spi_nrfx_release+0x16>
		return -EBUSY;
   2e252:	f06f 000f 	mvn.w	r0, #15
   2e256:	e7f8      	b.n	2e24a <spi_nrfx_release+0x16>

0002e258 <k_sem_give>:
   2e258:	f7f7 b9c6 	b.w	255e8 <z_impl_k_sem_give>

0002e25c <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2e25c:	b918      	cbnz	r0, 2e266 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2e25e:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2e262:	f7ff bff9 	b.w	2e258 <k_sem_give>
}
   2e266:	4770      	bx	lr

0002e268 <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2e268:	f04f 32ff 	mov.w	r2, #4294967295
   2e26c:	f04f 33ff 	mov.w	r3, #4294967295
   2e270:	3018      	adds	r0, #24
   2e272:	f7f7 b9fd 	b.w	25670 <z_impl_k_sem_take>

0002e276 <qspi_trans_lock.isra.0>:
   2e276:	f04f 32ff 	mov.w	r2, #4294967295
   2e27a:	f04f 33ff 	mov.w	r3, #4294967295
   2e27e:	f7f7 b9f7 	b.w	25670 <z_impl_k_sem_take>

0002e282 <qspi_nor_write_protection_set>:
{
   2e282:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2e284:	2200      	movs	r2, #0
   2e286:	4291      	cmp	r1, r2
   2e288:	bf0c      	ite	eq
   2e28a:	2306      	moveq	r3, #6
   2e28c:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e28e:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2e290:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2e294:	9203      	str	r2, [sp, #12]
   2e296:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e29a:	f7ee fceb 	bl	1cc74 <qspi_send_cmd>
		ret = -EIO;
   2e29e:	2800      	cmp	r0, #0
}
   2e2a0:	bf18      	it	ne
   2e2a2:	f06f 0004 	mvnne.w	r0, #4
   2e2a6:	b005      	add	sp, #20
   2e2a8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e2ac <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2e2ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2e2ae:	23ff      	movs	r3, #255	; 0xff
   2e2b0:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2e2b4:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2e2b8:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2e2ba:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2e2bc:	2301      	movs	r3, #1
   2e2be:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2e2c2:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e2c4:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2e2c6:	f88d 300c 	strb.w	r3, [sp, #12]
   2e2ca:	ab01      	add	r3, sp, #4
   2e2cc:	9204      	str	r2, [sp, #16]
   2e2ce:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e2d0:	f7ee fcd0 	bl	1cc74 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2e2d4:	2800      	cmp	r0, #0
   2e2d6:	bfa8      	it	ge
   2e2d8:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2e2dc:	b007      	add	sp, #28
   2e2de:	f85d fb04 	ldr.w	pc, [sp], #4

0002e2e2 <is_regular_addr_valid>:
{
   2e2e2:	b538      	push	{r3, r4, r5, lr}
   2e2e4:	4605      	mov	r5, r0
   2e2e6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e2e8:	f000 fc6a 	bl	2ebc0 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e2ec:	2d00      	cmp	r5, #0
   2e2ee:	db07      	blt.n	2e300 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e2f0:	42a8      	cmp	r0, r5
   2e2f2:	d905      	bls.n	2e300 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e2f4:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e2f6:	4284      	cmp	r4, r0
   2e2f8:	bf8c      	ite	hi
   2e2fa:	2000      	movhi	r0, #0
   2e2fc:	2001      	movls	r0, #1
}
   2e2fe:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e300:	2000      	movs	r0, #0
   2e302:	e7fc      	b.n	2e2fe <is_regular_addr_valid+0x1c>

0002e304 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e306:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e308:	2300      	movs	r3, #0
{
   2e30a:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
   2e30c:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2e30e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2e310:	60a3      	str	r3, [r4, #8]
{
   2e312:	460d      	mov	r5, r1

	api->page_layout(dev, &layout, &layout_size);
   2e314:	6913      	ldr	r3, [r2, #16]
   2e316:	4669      	mov	r1, sp
   2e318:	aa01      	add	r2, sp, #4
   2e31a:	4798      	blx	r3

	while (layout_size--) {
   2e31c:	9b01      	ldr	r3, [sp, #4]
   2e31e:	1e5a      	subs	r2, r3, #1
   2e320:	9201      	str	r2, [sp, #4]
   2e322:	b91b      	cbnz	r3, 2e32c <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2e324:	f06f 0015 	mvn.w	r0, #21
}
   2e328:	b003      	add	sp, #12
   2e32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2e32c:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2e32e:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2e330:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2e332:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2e334:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2e336:	b985      	cbnz	r5, 2e35a <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2e338:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2e33a:	f8d0 c000 	ldr.w	ip, [r0]
   2e33e:	4563      	cmp	r3, ip
   2e340:	bf28      	it	cs
   2e342:	4663      	movcs	r3, ip
		info->start_offset += (index_jmp * info->size);
   2e344:	fb03 1107 	mla	r1, r3, r7, r1
		info->index += index_jmp;
   2e348:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2e34a:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2e34c:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2e34e:	6802      	ldr	r2, [r0, #0]
   2e350:	429a      	cmp	r2, r3
   2e352:	d806      	bhi.n	2e362 <flash_get_page_info+0x5e>
		layout++;
   2e354:	3008      	adds	r0, #8
   2e356:	9000      	str	r0, [sp, #0]
   2e358:	e7e0      	b.n	2e31c <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2e35a:	1a6b      	subs	r3, r5, r1
   2e35c:	fbb3 f3f7 	udiv	r3, r3, r7
   2e360:	e7eb      	b.n	2e33a <flash_get_page_info+0x36>
			return 0;
   2e362:	2000      	movs	r0, #0
   2e364:	e7e0      	b.n	2e328 <flash_get_page_info+0x24>

0002e366 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2e366:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2e368:	2200      	movs	r2, #0
   2e36a:	f7ff bfcb 	b.w	2e304 <flash_get_page_info>

0002e36e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2e36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   2e372:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   2e374:	6883      	ldr	r3, [r0, #8]
{
   2e376:	b086      	sub	sp, #24
   2e378:	4688      	mov	r8, r1
   2e37a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2e37c:	691b      	ldr	r3, [r3, #16]
   2e37e:	aa02      	add	r2, sp, #8
   2e380:	a901      	add	r1, sp, #4
   2e382:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   2e384:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2e386:	4625      	mov	r5, r4
   2e388:	9b02      	ldr	r3, [sp, #8]
   2e38a:	42ab      	cmp	r3, r5
   2e38c:	d802      	bhi.n	2e394 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2e38e:	b006      	add	sp, #24
   2e390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   2e394:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   2e396:	9f01      	ldr	r7, [sp, #4]
   2e398:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   2e39c:	687b      	ldr	r3, [r7, #4]
   2e39e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e3a0:	683a      	ldr	r2, [r7, #0]
   2e3a2:	eb0a 0306 	add.w	r3, sl, r6
   2e3a6:	42b2      	cmp	r2, r6
   2e3a8:	d802      	bhi.n	2e3b0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2e3aa:	469a      	mov	sl, r3
   2e3ac:	3501      	adds	r5, #1
   2e3ae:	e7eb      	b.n	2e388 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2e3b0:	4649      	mov	r1, r9
			page_info.start_offset = off;
   2e3b2:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2e3b4:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2e3b6:	a803      	add	r0, sp, #12
   2e3b8:	47c0      	blx	r8
   2e3ba:	2800      	cmp	r0, #0
   2e3bc:	d0e7      	beq.n	2e38e <flash_page_foreach+0x20>
			off += page_info.size;
   2e3be:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e3c0:	3601      	adds	r6, #1
			off += page_info.size;
   2e3c2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2e3c4:	e7ec      	b.n	2e3a0 <flash_page_foreach+0x32>

0002e3c6 <uarte_nrfx_config_get>:
{
   2e3c6:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
   2e3c8:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
   2e3ca:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e3ce:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e3d2:	2000      	movs	r0, #0
   2e3d4:	4770      	bx	lr

0002e3d6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e3d6:	6843      	ldr	r3, [r0, #4]
   2e3d8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e3da:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e3de:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e3e2:	4770      	bx	lr

0002e3e4 <tx_start>:
{
   2e3e4:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2e3e6:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2e3e8:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e3ea:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e3ee:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e3f2:	2200      	movs	r2, #0
   2e3f4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e3f8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e3fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2e400:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e404:	6862      	ldr	r2, [r4, #4]
   2e406:	06d2      	lsls	r2, r2, #27
   2e408:	d511      	bpl.n	2e42e <tx_start+0x4a>
	if (data->async) {
   2e40a:	6902      	ldr	r2, [r0, #16]
   2e40c:	68d2      	ldr	r2, [r2, #12]
   2e40e:	b12a      	cbz	r2, 2e41c <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2e410:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2e414:	f041 0101 	orr.w	r1, r1, #1
   2e418:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e41c:	2108      	movs	r1, #8
	return config->uarte_regs;
   2e41e:	6842      	ldr	r2, [r0, #4]
   2e420:	6812      	ldr	r2, [r2, #0]
   2e422:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2e426:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2e42a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e42e:	2201      	movs	r2, #1
   2e430:	609a      	str	r2, [r3, #8]
}
   2e432:	bd10      	pop	{r4, pc}

0002e434 <user_callback>:
	if (data->async->user_callback) {
   2e434:	6903      	ldr	r3, [r0, #16]
   2e436:	68da      	ldr	r2, [r3, #12]
   2e438:	6813      	ldr	r3, [r2, #0]
   2e43a:	b10b      	cbz	r3, 2e440 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2e43c:	6852      	ldr	r2, [r2, #4]
   2e43e:	4718      	bx	r3
}
   2e440:	4770      	bx	lr

0002e442 <notify_uart_rx_rdy>:
{
   2e442:	b570      	push	{r4, r5, r6, lr}
   2e444:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2e446:	6906      	ldr	r6, [r0, #16]
{
   2e448:	4604      	mov	r4, r0
   2e44a:	460d      	mov	r5, r1
	struct uart_event evt = {
   2e44c:	2214      	movs	r2, #20
   2e44e:	2100      	movs	r1, #0
   2e450:	a801      	add	r0, sp, #4
   2e452:	f002 f8d6 	bl	30602 <memset>
   2e456:	2302      	movs	r3, #2
   2e458:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2e45c:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
   2e45e:	4620      	mov	r0, r4
	struct uart_event evt = {
   2e460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
   2e464:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e466:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2e46a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2e46c:	f7ff ffe2 	bl	2e434 <user_callback>
}
   2e470:	b006      	add	sp, #24
   2e472:	bd70      	pop	{r4, r5, r6, pc}

0002e474 <rx_buf_release>:
{
   2e474:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2e476:	680e      	ldr	r6, [r1, #0]
{
   2e478:	4605      	mov	r5, r0
   2e47a:	460c      	mov	r4, r1
   2e47c:	b086      	sub	sp, #24
	if (*buf) {
   2e47e:	b17e      	cbz	r6, 2e4a0 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2e480:	2214      	movs	r2, #20
   2e482:	2100      	movs	r1, #0
   2e484:	a801      	add	r0, sp, #4
   2e486:	f002 f8bc 	bl	30602 <memset>
   2e48a:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2e48c:	4628      	mov	r0, r5
   2e48e:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
   2e492:	f88d 3004 	strb.w	r3, [sp, #4]
   2e496:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2e498:	f7ff ffcc 	bl	2e434 <user_callback>
		*buf = NULL;
   2e49c:	2300      	movs	r3, #0
   2e49e:	6023      	str	r3, [r4, #0]
}
   2e4a0:	b006      	add	sp, #24
   2e4a2:	bd70      	pop	{r4, r5, r6, pc}

0002e4a4 <notify_rx_disable>:
{
   2e4a4:	b510      	push	{r4, lr}
   2e4a6:	b086      	sub	sp, #24
   2e4a8:	4604      	mov	r4, r0
	struct uart_event evt = {
   2e4aa:	2214      	movs	r2, #20
   2e4ac:	2100      	movs	r1, #0
   2e4ae:	a801      	add	r0, sp, #4
   2e4b0:	f002 f8a7 	bl	30602 <memset>
   2e4b4:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2e4b6:	4620      	mov	r0, r4
   2e4b8:	a901      	add	r1, sp, #4
	struct uart_event evt = {
   2e4ba:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2e4be:	f7ff ffb9 	bl	2e434 <user_callback>
}
   2e4c2:	b006      	add	sp, #24
   2e4c4:	bd10      	pop	{r4, pc}

0002e4c6 <uarte_nrfx_rx_buf_rsp>:
{
   2e4c6:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2e4c8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e4ca:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e4cc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2e4ce:	f04f 0020 	mov.w	r0, #32
   2e4d2:	f3ef 8611 	mrs	r6, BASEPRI
   2e4d6:	f380 8812 	msr	BASEPRI_MAX, r0
   2e4da:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2e4de:	68ec      	ldr	r4, [r5, #12]
   2e4e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e4e2:	b198      	cbz	r0, 2e50c <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2e4e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e4e6:	b9a0      	cbnz	r0, 2e512 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2e4e8:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2e4ea:	68ec      	ldr	r4, [r5, #12]
   2e4ec:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e4ee:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2e4f2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2e4f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2e4fa:	f042 0220 	orr.w	r2, r2, #32
   2e4fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2e502:	f386 8811 	msr	BASEPRI, r6
   2e506:	f3bf 8f6f 	isb	sy
}
   2e50a:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2e50c:	f06f 000c 	mvn.w	r0, #12
   2e510:	e7f7      	b.n	2e502 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2e512:	f06f 000f 	mvn.w	r0, #15
   2e516:	e7f4      	b.n	2e502 <uarte_nrfx_rx_buf_rsp+0x3c>

0002e518 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e518:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2e51a:	68d8      	ldr	r0, [r3, #12]
   2e51c:	b120      	cbz	r0, 2e528 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2e51e:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2e520:	68db      	ldr	r3, [r3, #12]
	return 0;
   2e522:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2e524:	605a      	str	r2, [r3, #4]
	return 0;
   2e526:	4770      	bx	lr
		return -ENOTSUP;
   2e528:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e52c:	4770      	bx	lr

0002e52e <uarte_nrfx_poll_in>:
{
   2e52e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2e530:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e532:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2e534:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2e536:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2e538:	b960      	cbnz	r0, 2e554 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e53a:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e53e:	b164      	cbz	r4, 2e55a <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2e540:	6992      	ldr	r2, [r2, #24]
   2e542:	7812      	ldrb	r2, [r2, #0]
   2e544:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e546:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e54a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e54e:	2201      	movs	r2, #1
   2e550:	601a      	str	r2, [r3, #0]
}
   2e552:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2e554:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e558:	e7fb      	b.n	2e552 <uarte_nrfx_poll_in+0x24>
		return -1;
   2e55a:	f04f 30ff 	mov.w	r0, #4294967295
   2e55e:	e7f8      	b.n	2e552 <uarte_nrfx_poll_in+0x24>

0002e560 <uarte_nrfx_rx_disable>:
{
   2e560:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e562:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e564:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e566:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2e568:	68eb      	ldr	r3, [r5, #12]
   2e56a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e56c:	b1ba      	cbz	r2, 2e59e <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2e56e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2e570:	b153      	cbz	r3, 2e588 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2e572:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2e576:	f023 0320 	bic.w	r3, r3, #32
   2e57a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e57e:	2300      	movs	r3, #0
   2e580:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2e584:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2e588:	68e8      	ldr	r0, [r5, #12]
   2e58a:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2e58c:	f001 ff1a 	bl	303c4 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2e590:	2000      	movs	r0, #0
   2e592:	68eb      	ldr	r3, [r5, #12]
   2e594:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e598:	2301      	movs	r3, #1
   2e59a:	6063      	str	r3, [r4, #4]
}
   2e59c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e59e:	f06f 000d 	mvn.w	r0, #13
   2e5a2:	e7fb      	b.n	2e59c <uarte_nrfx_rx_disable+0x3c>

0002e5a4 <setup_tx_cache>:
{
   2e5a4:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2e5a6:	68c3      	ldr	r3, [r0, #12]
   2e5a8:	68da      	ldr	r2, [r3, #12]
   2e5aa:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2e5ac:	1a52      	subs	r2, r2, r1
   2e5ae:	d00f      	beq.n	2e5d0 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2e5b0:	2a08      	cmp	r2, #8
   2e5b2:	bf28      	it	cs
   2e5b4:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2e5b6:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2e5b8:	68c3      	ldr	r3, [r0, #12]
   2e5ba:	6999      	ldr	r1, [r3, #24]
   2e5bc:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2e5be:	68c3      	ldr	r3, [r0, #12]
   2e5c0:	6898      	ldr	r0, [r3, #8]
   2e5c2:	69d9      	ldr	r1, [r3, #28]
   2e5c4:	4401      	add	r1, r0
   2e5c6:	6998      	ldr	r0, [r3, #24]
   2e5c8:	f001 ffe1 	bl	3058e <memcpy>
	return true;
   2e5cc:	2001      	movs	r0, #1
}
   2e5ce:	bd08      	pop	{r3, pc}
		return false;
   2e5d0:	4610      	mov	r0, r2
   2e5d2:	e7fc      	b.n	2e5ce <setup_tx_cache+0x2a>

0002e5d4 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e5d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
   2e5d6:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e5d8:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2e5da:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
   2e5dc:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
   2e5e0:	b1f1      	cbz	r1, 2e620 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
   2e5e2:	2100      	movs	r1, #0
   2e5e4:	4618      	mov	r0, r3
   2e5e6:	f002 f80c 	bl	30602 <memset>
   2e5ea:	4603      	mov	r3, r0
   2e5ec:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e5ee:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5f2:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5f4:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
   2e5f6:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e5fa:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e5fe:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e602:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e604:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e608:	2800      	cmp	r0, #0
   2e60a:	d0fb      	beq.n	2e604 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e60c:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
   2e610:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2e614:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
   2e618:	b92b      	cbnz	r3, 2e626 <rx_flush.isra.0+0x52>
			return rx_amount;
   2e61a:	b2c0      	uxtb	r0, r0
}
   2e61c:	b002      	add	sp, #8
   2e61e:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
   2e620:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
   2e622:	4669      	mov	r1, sp
   2e624:	e7e3      	b.n	2e5ee <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
   2e626:	4285      	cmp	r5, r0
   2e628:	d1f7      	bne.n	2e61a <rx_flush.isra.0+0x46>
   2e62a:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
   2e62c:	4293      	cmp	r3, r2
   2e62e:	d101      	bne.n	2e634 <rx_flush.isra.0+0x60>
	return 0;
   2e630:	2000      	movs	r0, #0
   2e632:	e7f3      	b.n	2e61c <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
   2e634:	f813 1b01 	ldrb.w	r1, [r3], #1
   2e638:	2900      	cmp	r1, #0
   2e63a:	d0f7      	beq.n	2e62c <rx_flush.isra.0+0x58>
   2e63c:	e7ed      	b.n	2e61a <rx_flush.isra.0+0x46>

0002e63e <async_uart_release>:
{
   2e63e:	b570      	push	{r4, r5, r6, lr}
   2e640:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2e642:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2e644:	f04f 0320 	mov.w	r3, #32
   2e648:	f3ef 8611 	mrs	r6, BASEPRI
   2e64c:	f383 8812 	msr	BASEPRI_MAX, r3
   2e650:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2e654:	68d0      	ldr	r0, [r2, #12]
   2e656:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2e65a:	ea23 0301 	bic.w	r3, r3, r1
   2e65e:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2e662:	68d5      	ldr	r5, [r2, #12]
   2e664:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2e668:	b973      	cbnz	r3, 2e688 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2e66a:	2902      	cmp	r1, #2
   2e66c:	d107      	bne.n	2e67e <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2e66e:	2205      	movs	r2, #5
   2e670:	6860      	ldr	r0, [r4, #4]
   2e672:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2e676:	f7ff ffad 	bl	2e5d4 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2e67a:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e67e:	2200      	movs	r2, #0
	return config->uarte_regs;
   2e680:	6863      	ldr	r3, [r4, #4]
   2e682:	681b      	ldr	r3, [r3, #0]
   2e684:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2e688:	f386 8811 	msr	BASEPRI, r6
   2e68c:	f3bf 8f6f 	isb	sy
}
   2e690:	bd70      	pop	{r4, r5, r6, pc}

0002e692 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e692:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e694:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e696:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e69a:	b940      	cbnz	r0, 2e6ae <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e69c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e69e:	079b      	lsls	r3, r3, #30
   2e6a0:	d406      	bmi.n	2e6b0 <is_tx_ready.isra.0+0x1e>
   2e6a2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e6a6:	3800      	subs	r0, #0
   2e6a8:	bf18      	it	ne
   2e6aa:	2001      	movne	r0, #1
   2e6ac:	4770      	bx	lr
   2e6ae:	2001      	movs	r0, #1
}
   2e6b0:	4770      	bx	lr

0002e6b2 <start_tx_locked>:
{
   2e6b2:	b510      	push	{r4, lr}
   2e6b4:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2e6b6:	6840      	ldr	r0, [r0, #4]
   2e6b8:	f7ff ffeb 	bl	2e692 <is_tx_ready.isra.0>
   2e6bc:	68cb      	ldr	r3, [r1, #12]
   2e6be:	b918      	cbnz	r0, 2e6c8 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2e6c0:	2201      	movs	r2, #1
   2e6c2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2e6c6:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2e6c8:	2200      	movs	r2, #0
   2e6ca:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2e6ce:	f04f 32ff 	mov.w	r2, #4294967295
   2e6d2:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e6d4:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
   2e6d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e6da:	68cb      	ldr	r3, [r1, #12]
}
   2e6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e6e0:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   2e6e4:	f7ff be7e 	b.w	2e3e4 <tx_start>

0002e6e8 <uarte_2_init>:
#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
#endif

#ifdef CONFIG_UART_2_NRF_UARTE
UART_NRF_UARTE_DEVICE(2);
   2e6e8:	b510      	push	{r4, lr}
   2e6ea:	4604      	mov	r4, r0
   2e6ec:	2200      	movs	r2, #0
   2e6ee:	2101      	movs	r1, #1
   2e6f0:	200b      	movs	r0, #11
   2e6f2:	f7e2 f9d3 	bl	10a9c <z_arm_irq_priority_set>
   2e6f6:	200b      	movs	r0, #11
   2e6f8:	f7e2 f9a0 	bl	10a3c <arch_irq_enable>
   2e6fc:	4620      	mov	r0, r4
   2e6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e702:	f7ef b83f 	b.w	1d784 <uarte_instance_init.constprop.0>

0002e706 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2e706:	b510      	push	{r4, lr}
   2e708:	4604      	mov	r4, r0
   2e70a:	2200      	movs	r2, #0
   2e70c:	2101      	movs	r1, #1
   2e70e:	2008      	movs	r0, #8
   2e710:	f7e2 f9c4 	bl	10a9c <z_arm_irq_priority_set>
   2e714:	2008      	movs	r0, #8
   2e716:	f7e2 f991 	bl	10a3c <arch_irq_enable>
   2e71a:	4620      	mov	r0, r4
   2e71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e720:	f7ef b830 	b.w	1d784 <uarte_instance_init.constprop.0>

0002e724 <rx_timeout>:
{
   2e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2e726:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2e728:	68e3      	ldr	r3, [r4, #12]
   2e72a:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2e72e:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2e732:	bb13      	cbnz	r3, 2e77a <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
   2e734:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
   2e736:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2e738:	6873      	ldr	r3, [r6, #4]
   2e73a:	681b      	ldr	r3, [r3, #0]
   2e73c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2e740:	68e3      	ldr	r3, [r4, #12]
   2e742:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2e746:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2e748:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2e74a:	bf1f      	itttt	ne
   2e74c:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2e74e:	68e3      	ldrne	r3, [r4, #12]
   2e750:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2e752:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2e754:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2e756:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2e75a:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e75c:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2e75e:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e760:	da0c      	bge.n	2e77c <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2e762:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e766:	68e3      	ldr	r3, [r4, #12]
   2e768:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e76c:	4281      	cmp	r1, r0
   2e76e:	d80b      	bhi.n	2e788 <rx_timeout+0x64>
    p_reg->INTENSET = mask;
   2e770:	2210      	movs	r2, #16
	return config->uarte_regs;
   2e772:	6873      	ldr	r3, [r6, #4]
   2e774:	681b      	ldr	r3, [r3, #0]
   2e776:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e77c:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e780:	eb02 0c01 	add.w	ip, r2, r1
   2e784:	4584      	cmp	ip, r0
   2e786:	d904      	bls.n	2e792 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2e788:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2e78a:	2d00      	cmp	r5, #0
   2e78c:	ddf0      	ble.n	2e770 <rx_timeout+0x4c>
		clipped = true;
   2e78e:	2701      	movs	r7, #1
   2e790:	e005      	b.n	2e79e <rx_timeout+0x7a>
	if (len > 0) {
   2e792:	2a00      	cmp	r2, #0
   2e794:	d0ec      	beq.n	2e770 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2e796:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2e79a:	428a      	cmp	r2, r1
   2e79c:	da12      	bge.n	2e7c4 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2e79e:	4629      	mov	r1, r5
   2e7a0:	4630      	mov	r0, r6
   2e7a2:	f7ff fe4e 	bl	2e442 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2e7a6:	68e2      	ldr	r2, [r4, #12]
   2e7a8:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2e7aa:	442b      	add	r3, r5
   2e7ac:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2e7ae:	68e2      	ldr	r2, [r4, #12]
   2e7b0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2e7b2:	442b      	add	r3, r5
   2e7b4:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2e7b6:	2f00      	cmp	r7, #0
   2e7b8:	d0da      	beq.n	2e770 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2e7ba:	68e0      	ldr	r0, [r4, #12]
   2e7bc:	3080      	adds	r0, #128	; 0x80
   2e7be:	f001 fe01 	bl	303c4 <z_impl_k_timer_stop>
}
   2e7c2:	e7d5      	b.n	2e770 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2e7c4:	1a52      	subs	r2, r2, r1
   2e7c6:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2e7c8:	e7d2      	b.n	2e770 <rx_timeout+0x4c>

0002e7ca <uarte_nrfx_tx_abort>:
{
   2e7ca:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e7cc:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e7ce:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2e7d0:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2e7d2:	68da      	ldr	r2, [r3, #12]
   2e7d4:	6891      	ldr	r1, [r2, #8]
   2e7d6:	b151      	cbz	r1, 2e7ee <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2e7d8:	2400      	movs	r4, #0
   2e7da:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2e7de:	68d8      	ldr	r0, [r3, #12]
   2e7e0:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2e7e2:	f001 fdef 	bl	303c4 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e7e6:	2301      	movs	r3, #1
	return 0;
   2e7e8:	4620      	mov	r0, r4
   2e7ea:	60eb      	str	r3, [r5, #12]
}
   2e7ec:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e7ee:	f06f 000d 	mvn.w	r0, #13
   2e7f2:	e7fb      	b.n	2e7ec <uarte_nrfx_tx_abort+0x22>

0002e7f4 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2e7f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2e7f6:	6818      	ldr	r0, [r3, #0]
   2e7f8:	f7ff bfe7 	b.w	2e7ca <uarte_nrfx_tx_abort>

0002e7fc <z_log_msg_static_create.constprop.0>:
   2e7fc:	2300      	movs	r3, #0
   2e7fe:	f7e0 b857 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002e802 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e802:	2000      	movs	r0, #0
   2e804:	4770      	bx	lr

0002e806 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e806:	b538      	push	{r3, r4, r5, lr}
   2e808:	460c      	mov	r4, r1
   2e80a:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e80c:	f7e4 ff10 	bl	13630 <bt_is_ready>
   2e810:	b128      	cbz	r0, 2e81e <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e812:	4629      	mov	r1, r5
   2e814:	4620      	mov	r0, r4
}
   2e816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e81a:	f7e4 b8cf 	b.w	129bc <bt_hci_le_rand>
}
   2e81e:	f06f 000a 	mvn.w	r0, #10
   2e822:	bd38      	pop	{r3, r4, r5, pc}

0002e824 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   2e824:	4608      	mov	r0, r1
   2e826:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   2e828:	4611      	mov	r1, r2
   2e82a:	f7f0 f987 	bl	1eb3c <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
   2e82e:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e830:	bf18      	it	ne
   2e832:	f06f 0004 	mvnne.w	r0, #4
   2e836:	bd08      	pop	{r3, pc}

0002e838 <entropy_psa_crypto_rng_init>:
{
   2e838:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   2e83a:	f000 f911 	bl	2ea60 <psa_crypto_init>
		return -EIO;
   2e83e:	2800      	cmp	r0, #0
}
   2e840:	bf18      	it	ne
   2e842:	f06f 0004 	mvnne.w	r0, #4
   2e846:	bd08      	pop	{r3, pc}

0002e848 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e848:	4770      	bx	lr

0002e84a <sys_clock_cycle_get_32>:
{
   2e84a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2e84c:	f7ef fdb6 	bl	1e3bc <z_nrf_rtc_timer_read>
}
   2e850:	bd08      	pop	{r3, pc}

0002e852 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e852:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e854:	6843      	ldr	r3, [r0, #4]
   2e856:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e858:	7a05      	ldrb	r5, [r0, #8]
   2e85a:	6844      	ldr	r4, [r0, #4]
   2e85c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e860:	42a3      	cmp	r3, r4
   2e862:	d302      	bcc.n	2e86a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e864:	f06f 0001 	mvn.w	r0, #1
}
   2e868:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e86a:	795c      	ldrb	r4, [r3, #5]
   2e86c:	428c      	cmp	r4, r1
   2e86e:	d001      	beq.n	2e874 <pinctrl_lookup_state+0x22>
		(*state)++;
   2e870:	3308      	adds	r3, #8
   2e872:	e7f0      	b.n	2e856 <pinctrl_lookup_state+0x4>
			return 0;
   2e874:	2000      	movs	r0, #0
   2e876:	e7f7      	b.n	2e868 <pinctrl_lookup_state+0x16>

0002e878 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2e878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e87c:	4615      	mov	r5, r2
   2e87e:	4682      	mov	sl, r0
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e880:	f04f 0901 	mov.w	r9, #1
   2e884:	b085      	sub	sp, #20
   2e886:	eb00 0881 	add.w	r8, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e88a:	45d0      	cmp	r8, sl
   2e88c:	d103      	bne.n	2e896 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2e88e:	2000      	movs	r0, #0
}
   2e890:	b005      	add	sp, #20
   2e892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e896:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2e89a:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e89e:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2e8a2:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2e8a4:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2e8a8:	bf08      	it	eq
   2e8aa:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2e8ae:	2b22      	cmp	r3, #34	; 0x22
   2e8b0:	f200 8091 	bhi.w	2e9d6 <pinctrl_configure_pins+0x15e>
   2e8b4:	e8df f003 	tbb	[pc, r3]
   2e8b8:	38231e12 	.word	0x38231e12
   2e8bc:	8f383426 	.word	0x8f383426
   2e8c0:	3b8f8f8f 	.word	0x3b8f8f8f
   2e8c4:	8f8f8f65 	.word	0x8f8f8f65
   2e8c8:	8f8f8f8f 	.word	0x8f8f8f8f
   2e8cc:	71688f8f 	.word	0x71688f8f
   2e8d0:	8f8f7774 	.word	0x8f8f7774
   2e8d4:	83807a8f 	.word	0x83807a8f
   2e8d8:	8986      	.short	0x8986
   2e8da:	8c          	.byte	0x8c
   2e8db:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2e8dc:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e8e0:	a803      	add	r0, sp, #12
   2e8e2:	9403      	str	r4, [sp, #12]
   2e8e4:	f7ef ffa2 	bl	1e82c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e8e8:	9b03      	ldr	r3, [sp, #12]
        nrf_gpio_pin_set(pin_number);
   2e8ea:	2601      	movs	r6, #1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e8ec:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2e8f0:	6083      	str	r3, [r0, #8]
   2e8f2:	e002      	b.n	2e8fa <pinctrl_configure_pins+0x82>
			NRF_PSEL_UART(reg, RXD) = pin;
   2e8f4:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e8f8:	2600      	movs	r6, #0
        nrf_gpio_pin_set(pin_number);
   2e8fa:	46b3      	mov	fp, r6
   2e8fc:	e01e      	b.n	2e93c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_UART(reg, RTS) = pin;
   2e8fe:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2e902:	e7ed      	b.n	2e8e0 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e904:	2600      	movs	r6, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2e906:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e90a:	a803      	add	r0, sp, #12
   2e90c:	9403      	str	r4, [sp, #12]
   2e90e:	f7ef ff8d 	bl	1e82c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e912:	9b03      	ldr	r3, [sp, #12]
   2e914:	f04f 0b01 	mov.w	fp, #1
   2e918:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2e91c:	60c3      	str	r3, [r0, #12]
   2e91e:	e00d      	b.n	2e93c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2e920:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2e924:	2601      	movs	r6, #1
   2e926:	e7f0      	b.n	2e90a <pinctrl_configure_pins+0x92>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2e928:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2e92c:	e7e4      	b.n	2e8f8 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2e92e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2e932:	2f00      	cmp	r7, #0
   2e934:	d1e0      	bne.n	2e8f8 <pinctrl_configure_pins+0x80>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e936:	2600      	movs	r6, #0
				drive = NRF_DRIVE_S0D1;
   2e938:	2706      	movs	r7, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e93a:	46b3      	mov	fp, r6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e93c:	f85a 3b04 	ldr.w	r3, [sl], #4
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e940:	a803      	add	r0, sp, #12
   2e942:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e946:	2a00      	cmp	r2, #0
   2e948:	bf1c      	itt	ne
   2e94a:	2601      	movne	r6, #1
   2e94c:	f04f 0b00 	movne.w	fp, #0
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e950:	9301      	str	r3, [sp, #4]
   2e952:	9403      	str	r4, [sp, #12]
   2e954:	f7ef ff6a 	bl	1e82c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e958:	9a03      	ldr	r2, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e95a:	9b01      	ldr	r3, [sp, #4]
   2e95c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e960:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e964:	f3c3 12c1 	ubfx	r2, r3, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e968:	023b      	lsls	r3, r7, #8
   2e96a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2e96e:	ea43 030b 	orr.w	r3, r3, fp
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2e972:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   2e976:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2e978:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2e97c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e980:	e783      	b.n	2e88a <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2e982:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2e986:	e7d4      	b.n	2e932 <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2e988:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2e98c:	f8da 3000 	ldr.w	r3, [sl]
   2e990:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2e994:	2b00      	cmp	r3, #0
   2e996:	d0c5      	beq.n	2e924 <pinctrl_configure_pins+0xac>
   2e998:	e7a2      	b.n	2e8e0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2e99a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2e99e:	e7f5      	b.n	2e98c <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2e9a0:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2e9a4:	e7f2      	b.n	2e98c <pinctrl_configure_pins+0x114>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2e9a6:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2e9aa:	e7ef      	b.n	2e98c <pinctrl_configure_pins+0x114>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2e9ac:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e9b0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e9b2:	f04f 0b00 	mov.w	fp, #0
   2e9b6:	e7c1      	b.n	2e93c <pinctrl_configure_pins+0xc4>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2e9b8:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2e9bc:	e790      	b.n	2e8e0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2e9be:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2e9c2:	e7f5      	b.n	2e9b0 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2e9c4:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2e9c8:	e7f2      	b.n	2e9b0 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2e9ca:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2e9ce:	e7ef      	b.n	2e9b0 <pinctrl_configure_pins+0x138>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2e9d0:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2e9d4:	e7ec      	b.n	2e9b0 <pinctrl_configure_pins+0x138>
		switch (NRF_GET_FUN(pins[i])) {
   2e9d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e9da:	e759      	b.n	2e890 <pinctrl_configure_pins+0x18>

0002e9dc <mbox_nrf_register_callback>:
{
   2e9dc:	b510      	push	{r4, lr}
	struct mbox_nrf_data *data = dev->data;
   2e9de:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   2e9e0:	290f      	cmp	r1, #15
	data->cb[channel] = cb;
   2e9e2:	bf9f      	itttt	ls
   2e9e4:	eb00 0481 	addls.w	r4, r0, r1, lsl #2
   2e9e8:	f840 2021 	strls.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   2e9ec:	6423      	strls	r3, [r4, #64]	; 0x40
	return 0;
   2e9ee:	2000      	movls	r0, #0
		return -EINVAL;
   2e9f0:	bf88      	it	hi
   2e9f2:	f06f 0015 	mvnhi.w	r0, #21
}
   2e9f6:	bd10      	pop	{r4, pc}

0002e9f8 <mbox_nrf_mtu_get>:
}
   2e9f8:	2000      	movs	r0, #0
   2e9fa:	4770      	bx	lr

0002e9fc <mbox_nrf_max_channels_get>:
}
   2e9fc:	2010      	movs	r0, #16
   2e9fe:	4770      	bx	lr

0002ea00 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   2ea00:	2000      	movs	r0, #0
   2ea02:	4770      	bx	lr

0002ea04 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   2ea04:	2300      	movs	r3, #0
{
   2ea06:	b570      	push	{r4, r5, r6, lr}
   2ea08:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   2ea0a:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   2ea0e:	ab03      	add	r3, sp, #12
   2ea10:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   2ea12:	2304      	movs	r3, #4
{
   2ea14:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   2ea16:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   2ea18:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   2ea1a:	b169      	cbz	r1, 2ea38 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   2ea1c:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   2ea1e:	680b      	ldr	r3, [r1, #0]
   2ea20:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   2ea22:	684b      	ldr	r3, [r1, #4]
   2ea24:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   2ea26:	2101      	movs	r1, #1
   2ea28:	2041      	movs	r0, #65	; 0x41
   2ea2a:	f7f0 f8c5 	bl	1ebb8 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   2ea2e:	1e05      	subs	r5, r0, #0
   2ea30:	dc04      	bgt.n	2ea3c <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   2ea32:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   2ea34:	b008      	add	sp, #32
   2ea36:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   2ea38:	2601      	movs	r6, #1
   2ea3a:	e7f4      	b.n	2ea26 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   2ea3c:	1e23      	subs	r3, r4, #0
   2ea3e:	bf18      	it	ne
   2ea40:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   2ea42:	2100      	movs	r1, #0
   2ea44:	e9cd 4300 	strd	r4, r3, [sp]
   2ea48:	aa04      	add	r2, sp, #16
   2ea4a:	4633      	mov	r3, r6
   2ea4c:	f7f0 f898 	bl	1eb80 <psa_call>
   2ea50:	4604      	mov	r4, r0
    psa_close(handle);
   2ea52:	4628      	mov	r0, r5
   2ea54:	f7f0 f8be 	bl	1ebd4 <psa_close>
    if (status < PSA_SUCCESS) {
   2ea58:	2c00      	cmp	r4, #0
   2ea5a:	dbea      	blt.n	2ea32 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   2ea5c:	4620      	mov	r0, r4
   2ea5e:	e7e9      	b.n	2ea34 <tfm_platform_ioctl+0x30>

0002ea60 <psa_crypto_init>:
}
   2ea60:	2000      	movs	r0, #0
   2ea62:	4770      	bx	lr

0002ea64 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   2ea64:	b510      	push	{r4, lr}
   2ea66:	b088      	sub	sp, #32
   2ea68:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   2ea6a:	ab05      	add	r3, sp, #20
   2ea6c:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2ea6e:	230c      	movs	r3, #12
   2ea70:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2ea72:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   2ea74:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   2ea78:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ea7c:	eb0d 0103 	add.w	r1, sp, r3
   2ea80:	aa03      	add	r2, sp, #12
   2ea82:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   2ea84:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   2ea88:	f7ff ffbc 	bl	2ea04 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2ea8c:	9b00      	ldr	r3, [sp, #0]
   2ea8e:	6023      	str	r3, [r4, #0]

	return ret;
}
   2ea90:	b008      	add	sp, #32
   2ea92:	bd10      	pop	{r4, pc}

0002ea94 <tfm_platform_gpio_pin_mcu_select>:
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   2ea94:	2300      	movs	r3, #0
{
   2ea96:	b510      	push	{r4, lr}
   2ea98:	b088      	sub	sp, #32
	args.mcu_select.pin_number = pin_number;
   2ea9a:	e9cd 3005 	strd	r3, r0, [sp, #20]
	args.mcu_select.mcu = mcu;

	in_vec.base = (const void *)&args;
   2ea9e:	ab05      	add	r3, sp, #20
   2eaa0:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   2eaa2:	230c      	movs	r3, #12
   2eaa4:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   2eaa6:	2304      	movs	r3, #4
{
   2eaa8:	4614      	mov	r4, r2
	args.mcu_select.mcu = mcu;
   2eaaa:	9107      	str	r1, [sp, #28]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2eaac:	aa03      	add	r2, sp, #12
   2eaae:	eb0d 0103 	add.w	r1, sp, r3
   2eab2:	2001      	movs	r0, #1
	out_vec.len = sizeof(out);
   2eab4:	9304      	str	r3, [sp, #16]
	out_vec.base = (void *)&out;
   2eab6:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   2eaba:	f7ff ffa3 	bl	2ea04 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   2eabe:	9b00      	ldr	r3, [sp, #0]
   2eac0:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   2eac2:	b008      	add	sp, #32
   2eac4:	bd10      	pop	{r4, pc}

0002eac6 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   2eac6:	f7f0 b893 	b.w	1ebf0 <SystemCoreClockUpdate>

0002eaca <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2eaca:	4700      	bx	r0

0002eacc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2eacc:	f001 bc48 	b.w	30360 <z_impl_k_busy_wait>

0002ead0 <nrf_gpio_pin_present_check>:
    switch (port)
   2ead0:	0943      	lsrs	r3, r0, #5
   2ead2:	d00b      	beq.n	2eaec <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2ead4:	2b01      	cmp	r3, #1
   2ead6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2eada:	bf18      	it	ne
   2eadc:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2eade:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2eae2:	fa23 f000 	lsr.w	r0, r3, r0
}
   2eae6:	f000 0001 	and.w	r0, r0, #1
   2eaea:	4770      	bx	lr
    switch (port)
   2eaec:	f04f 33ff 	mov.w	r3, #4294967295
   2eaf0:	e7f5      	b.n	2eade <nrf_gpio_pin_present_check+0xe>

0002eaf2 <pin_is_task_output>:
{
   2eaf2:	b508      	push	{r3, lr}
   2eaf4:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2eaf6:	f7f0 fafd 	bl	1f0f4 <pin_is_output>
   2eafa:	b110      	cbz	r0, 2eb02 <pin_is_task_output+0x10>
   2eafc:	4610      	mov	r0, r2
   2eafe:	f7f0 fae3 	bl	1f0c8 <pin_in_use_by_te>
}
   2eb02:	f000 0001 	and.w	r0, r0, #1
   2eb06:	bd08      	pop	{r3, pc}

0002eb08 <nrf_gpio_reconfigure>:
{
   2eb08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2eb0c:	4617      	mov	r7, r2
   2eb0e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2eb12:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2eb14:	a801      	add	r0, sp, #4
{
   2eb16:	460c      	mov	r4, r1
   2eb18:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2eb1a:	f7f0 fb6f 	bl	1f1fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2eb1e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2eb20:	1e39      	subs	r1, r7, #0
   2eb22:	bf18      	it	ne
   2eb24:	2101      	movne	r1, #1
   2eb26:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb2a:	1e23      	subs	r3, r4, #0
   2eb2c:	bf18      	it	ne
   2eb2e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb30:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb32:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb36:	bf14      	ite	ne
   2eb38:	210c      	movne	r1, #12
   2eb3a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2eb3c:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2eb3e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2eb42:	bf14      	ite	ne
   2eb44:	f44f 6170 	movne.w	r1, #3840	; 0xf00
   2eb48:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2eb4a:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2eb4e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2eb52:	bf14      	ite	ne
   2eb54:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2eb58:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2eb5a:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2eb5e:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2eb60:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2eb64:	b104      	cbz	r4, 2eb68 <nrf_gpio_reconfigure+0x60>
   2eb66:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2eb68:	b10f      	cbz	r7, 2eb6e <nrf_gpio_reconfigure+0x66>
   2eb6a:	783f      	ldrb	r7, [r7, #0]
   2eb6c:	007f      	lsls	r7, r7, #1
   2eb6e:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2eb70:	b10e      	cbz	r6, 2eb76 <nrf_gpio_reconfigure+0x6e>
   2eb72:	7836      	ldrb	r6, [r6, #0]
   2eb74:	00b6      	lsls	r6, r6, #2
   2eb76:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2eb78:	b18d      	cbz	r5, 2eb9e <nrf_gpio_reconfigure+0x96>
   2eb7a:	7829      	ldrb	r1, [r5, #0]
   2eb7c:	0209      	lsls	r1, r1, #8
   2eb7e:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2eb80:	f1b8 0f00 	cmp.w	r8, #0
   2eb84:	d003      	beq.n	2eb8e <nrf_gpio_reconfigure+0x86>
   2eb86:	f898 8000 	ldrb.w	r8, [r8]
   2eb8a:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2eb8e:	4321      	orrs	r1, r4
   2eb90:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2eb94:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   2eb98:	b002      	add	sp, #8
   2eb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2eb9e:	4629      	mov	r1, r5
   2eba0:	e7ed      	b.n	2eb7e <nrf_gpio_reconfigure+0x76>

0002eba2 <nrf_gpio_cfg_sense_set>:
{
   2eba2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2eba4:	f10d 030f 	add.w	r3, sp, #15
   2eba8:	9301      	str	r3, [sp, #4]
   2ebaa:	2300      	movs	r3, #0
{
   2ebac:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ebb0:	461a      	mov	r2, r3
   2ebb2:	4619      	mov	r1, r3
   2ebb4:	9300      	str	r3, [sp, #0]
   2ebb6:	f7ff ffa7 	bl	2eb08 <nrf_gpio_reconfigure>
}
   2ebba:	b005      	add	sp, #20
   2ebbc:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebc0 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2ebc0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2ebc4:	4770      	bx	lr

0002ebc6 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2ebc6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   2ebca:	4770      	bx	lr

0002ebcc <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2ebcc:	f44f 7080 	mov.w	r0, #256	; 0x100
   2ebd0:	4770      	bx	lr

0002ebd2 <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
   2ebd2:	2100      	movs	r1, #0
   2ebd4:	f7f1 b864 	b.w	1fca0 <nrf_gpio_cfg.constprop.0>

0002ebd8 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2ebd8:	2302      	movs	r3, #2
   2ebda:	f7f0 bf9d 	b.w	1fb18 <qspi_xfer>

0002ebde <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2ebde:	2303      	movs	r3, #3
   2ebe0:	f7f0 bf9a 	b.w	1fb18 <qspi_xfer>

0002ebe4 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2ebe4:	2100      	movs	r1, #0
   2ebe6:	2002      	movs	r0, #2
   2ebe8:	f7f1 babc 	b.w	20164 <nrfx_qspi_erase>

0002ebec <nrf_gpio_pin_clear>:
{
   2ebec:	b507      	push	{r0, r1, r2, lr}
   2ebee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ebf0:	a801      	add	r0, sp, #4
   2ebf2:	f7f1 fb31 	bl	20258 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ebf6:	2301      	movs	r3, #1
   2ebf8:	9a01      	ldr	r2, [sp, #4]
   2ebfa:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2ebfc:	60c3      	str	r3, [r0, #12]
}
   2ebfe:	b003      	add	sp, #12
   2ec00:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec04 <nrf_gpio_pin_set>:
{
   2ec04:	b507      	push	{r0, r1, r2, lr}
   2ec06:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec08:	a801      	add	r0, sp, #4
   2ec0a:	f7f1 fb25 	bl	20258 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ec0e:	2301      	movs	r3, #1
   2ec10:	9a01      	ldr	r2, [sp, #4]
   2ec12:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2ec14:	6083      	str	r3, [r0, #8]
}
   2ec16:	b003      	add	sp, #12
   2ec18:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec1c <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   2ec1c:	7f83      	ldrb	r3, [r0, #30]
   2ec1e:	075a      	lsls	r2, r3, #29
   2ec20:	d40b      	bmi.n	2ec3a <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2ec22:	7fc0      	ldrb	r0, [r0, #31]
   2ec24:	28ff      	cmp	r0, #255	; 0xff
   2ec26:	d008      	beq.n	2ec3a <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   2ec28:	079b      	lsls	r3, r3, #30
   2ec2a:	bf58      	it	pl
   2ec2c:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   2ec30:	b909      	cbnz	r1, 2ec36 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   2ec32:	f7ff bfdb 	b.w	2ebec <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   2ec36:	f7ff bfe5 	b.w	2ec04 <nrf_gpio_pin_set>
}
   2ec3a:	4770      	bx	lr

0002ec3c <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2ec3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ec40:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec42:	a801      	add	r0, sp, #4
NRF_STATIC_INLINE void nrf_gpio_cfg(
   2ec44:	4698      	mov	r8, r3
   2ec46:	460f      	mov	r7, r1
   2ec48:	4616      	mov	r6, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ec4a:	f7f1 fb05 	bl	20258 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec4e:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2ec50:	f89d 4020 	ldrb.w	r4, [sp, #32]
   2ec54:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2ec58:	0224      	lsls	r4, r4, #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec5a:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ec5e:	ea44 0388 	orr.w	r3, r4, r8, lsl #2
   2ec62:	ea43 0107 	orr.w	r1, r3, r7
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2ec66:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2ec6a:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2ec6e:	432a      	orrs	r2, r5
    reg->PIN_CNF[pin_number] = cnf;
   2ec70:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
}
   2ec74:	b002      	add	sp, #8
   2ec76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ec7a <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2ec7a:	1c43      	adds	r3, r0, #1
{
   2ec7c:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   2ec7e:	d005      	beq.n	2ec8c <spim_pin_uninit+0x12>
    nrf_gpio_cfg(
   2ec80:	2300      	movs	r3, #0
   2ec82:	2201      	movs	r2, #1
   2ec84:	4619      	mov	r1, r3
   2ec86:	9300      	str	r3, [sp, #0]
   2ec88:	f7ff ffd8 	bl	2ec3c <nrf_gpio_cfg.constprop.0>
}
   2ec8c:	b003      	add	sp, #12
   2ec8e:	f85d fb04 	ldr.w	pc, [sp], #4

0002ec92 <metal_device_open>:
{
   2ec92:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ec94:	460c      	mov	r4, r1
   2ec96:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   2ec98:	4606      	mov	r6, r0
   2ec9a:	b918      	cbnz	r0, 2eca4 <metal_device_open+0x12>
		return -EINVAL;
   2ec9c:	f06f 0015 	mvn.w	r0, #21
}
   2eca0:	b002      	add	sp, #8
   2eca2:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   2eca4:	f7da fb6f 	bl	9386 <strlen>
   2eca8:	2800      	cmp	r0, #0
   2ecaa:	d0f7      	beq.n	2ec9c <metal_device_open+0xa>
   2ecac:	2c00      	cmp	r4, #0
   2ecae:	d0f5      	beq.n	2ec9c <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   2ecb0:	4620      	mov	r0, r4
   2ecb2:	f7da fb68 	bl	9386 <strlen>
   2ecb6:	2800      	cmp	r0, #0
   2ecb8:	d0f0      	beq.n	2ec9c <metal_device_open+0xa>
   2ecba:	2d00      	cmp	r5, #0
   2ecbc:	d0ee      	beq.n	2ec9c <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   2ecbe:	4630      	mov	r0, r6
   2ecc0:	a901      	add	r1, sp, #4
   2ecc2:	f7f1 fddf 	bl	20884 <metal_bus_find>
	if (error)
   2ecc6:	2800      	cmp	r0, #0
   2ecc8:	d1ea      	bne.n	2eca0 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   2ecca:	9801      	ldr	r0, [sp, #4]
   2eccc:	6883      	ldr	r3, [r0, #8]
   2ecce:	b12b      	cbz	r3, 2ecdc <metal_device_open+0x4a>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ecd0:	462a      	mov	r2, r5
   2ecd2:	4621      	mov	r1, r4
}
   2ecd4:	b002      	add	sp, #8
   2ecd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   2ecda:	4718      	bx	r3
		return -ENODEV;
   2ecdc:	f06f 0012 	mvn.w	r0, #18
   2ece0:	e7de      	b.n	2eca0 <metal_device_open+0xe>

0002ece2 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   2ece2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ece6:	b089      	sub	sp, #36	; 0x24
   2ece8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   2ecea:	4604      	mov	r4, r0
   2ecec:	4689      	mov	r9, r1
   2ecee:	4690      	mov	r8, r2
	const struct metal_io_ops nops = {
   2ecf0:	2100      	movs	r1, #0
   2ecf2:	2220      	movs	r2, #32
   2ecf4:	4668      	mov	r0, sp
{
   2ecf6:	461f      	mov	r7, r3
   2ecf8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	const struct metal_io_ops nops = {
   2ecfa:	f001 fc82 	bl	30602 <memset>

	io->virt = virt;
	io->physmap = physmap;
	io->size = size;
	io->page_shift = page_shift;
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   2ecfe:	2e1f      	cmp	r6, #31
		/* avoid overflow */
		io->page_mask = -1UL;
	else
		io->page_mask = (1UL << page_shift) - 1UL;
   2ed00:	bf97      	itett	ls
   2ed02:	2301      	movls	r3, #1
		io->page_mask = -1UL;
   2ed04:	f04f 33ff 	movhi.w	r3, #4294967295
		io->page_mask = (1UL << page_shift) - 1UL;
   2ed08:	40b3      	lslls	r3, r6
   2ed0a:	f103 33ff 	addls.w	r3, r3, #4294967295
   2ed0e:	6123      	str	r3, [r4, #16]
	io->mem_flags = mem_flags;
   2ed10:	9b11      	ldr	r3, [sp, #68]	; 0x44
	io->physmap = physmap;
   2ed12:	e9c4 9800 	strd	r9, r8, [r4]
	io->page_shift = page_shift;
   2ed16:	e9c4 7602 	strd	r7, r6, [r4, #8]
	io->mem_flags = mem_flags;
   2ed1a:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   2ed1c:	3418      	adds	r4, #24
   2ed1e:	b145      	cbz	r5, 2ed32 <metal_io_init+0x50>
   2ed20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2ed22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2ed24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ed28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   2ed2c:	b009      	add	sp, #36	; 0x24
   2ed2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	io->ops = ops ? *ops : nops;
   2ed32:	466d      	mov	r5, sp
   2ed34:	e7f4      	b.n	2ed20 <metal_io_init+0x3e>

0002ed36 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   2ed36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ed38:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2ed3a:	1c66      	adds	r6, r4, #1
   2ed3c:	d031      	beq.n	2eda2 <metal_io_block_read+0x6c>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ed3e:	6885      	ldr	r5, [r0, #8]
   2ed40:	42a9      	cmp	r1, r5
   2ed42:	d22e      	bcs.n	2eda2 <metal_io_block_read+0x6c>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   2ed44:	1864      	adds	r4, r4, r1
   2ed46:	d02c      	beq.n	2eda2 <metal_io_block_read+0x6c>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ed48:	185e      	adds	r6, r3, r1
   2ed4a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2ed4c:	bf88      	it	hi
   2ed4e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   2ed50:	6a05      	ldr	r5, [r0, #32]
   2ed52:	b135      	cbz	r5, 2ed62 <metal_io_block_read+0x2c>
		retlen = (*io->ops.block_read)(
   2ed54:	9300      	str	r3, [sp, #0]
   2ed56:	2305      	movs	r3, #5
   2ed58:	47a8      	blx	r5
   2ed5a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   2ed5c:	4618      	mov	r0, r3
   2ed5e:	b002      	add	sp, #8
   2ed60:	bd70      	pop	{r4, r5, r6, pc}
		atomic_thread_fence(memory_order_seq_cst);
   2ed62:	f3bf 8f5b 	dmb	ish
		while ( len && (
   2ed66:	4619      	mov	r1, r3
   2ed68:	1aa4      	subs	r4, r4, r2
   2ed6a:	1910      	adds	r0, r2, r4
   2ed6c:	b119      	cbz	r1, 2ed76 <metal_io_block_read+0x40>
			((uintptr_t)dest % sizeof(int)) ||
   2ed6e:	ea40 0502 	orr.w	r5, r0, r2
   2ed72:	07ad      	lsls	r5, r5, #30
   2ed74:	d10a      	bne.n	2ed8c <metal_io_block_read+0x56>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   2ed76:	2903      	cmp	r1, #3
   2ed78:	dc0d      	bgt.n	2ed96 <metal_io_block_read+0x60>
   2ed7a:	3801      	subs	r0, #1
   2ed7c:	4411      	add	r1, r2
		for (; len != 0; dest++, ptr++, len--)
   2ed7e:	428a      	cmp	r2, r1
   2ed80:	d0ec      	beq.n	2ed5c <metal_io_block_read+0x26>
				*(const unsigned char *)ptr;
   2ed82:	f810 4f01 	ldrb.w	r4, [r0, #1]!
			*(unsigned char *)dest =
   2ed86:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   2ed8a:	e7f8      	b.n	2ed7e <metal_io_block_read+0x48>
				*(const unsigned char *)ptr;
   2ed8c:	7800      	ldrb	r0, [r0, #0]
			len--;
   2ed8e:	3901      	subs	r1, #1
			*(unsigned char *)dest =
   2ed90:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   2ed94:	e7e9      	b.n	2ed6a <metal_io_block_read+0x34>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   2ed96:	f850 4b04 	ldr.w	r4, [r0], #4
   2ed9a:	3904      	subs	r1, #4
   2ed9c:	f842 4b04 	str.w	r4, [r2], #4
					ptr += sizeof(int),
   2eda0:	e7e9      	b.n	2ed76 <metal_io_block_read+0x40>
		return -ERANGE;
   2eda2:	f06f 0321 	mvn.w	r3, #33	; 0x21
   2eda6:	e7d9      	b.n	2ed5c <metal_io_block_read+0x26>

0002eda8 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   2eda8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2edaa:	6804      	ldr	r4, [r0, #0]
		: NULL);
   2edac:	1c65      	adds	r5, r4, #1
   2edae:	d032      	beq.n	2ee16 <metal_io_block_write+0x6e>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2edb0:	6885      	ldr	r5, [r0, #8]
   2edb2:	42a9      	cmp	r1, r5
   2edb4:	d22f      	bcs.n	2ee16 <metal_io_block_write+0x6e>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   2edb6:	1864      	adds	r4, r4, r1
   2edb8:	d02d      	beq.n	2ee16 <metal_io_block_write+0x6e>
		return -ERANGE;
	if ((offset + len) > io->size)
   2edba:	185e      	adds	r6, r3, r1
   2edbc:	42ae      	cmp	r6, r5
		len = io->size - offset;
   2edbe:	bf88      	it	hi
   2edc0:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   2edc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2edc4:	b1cd      	cbz	r5, 2edfa <metal_io_block_write+0x52>
		retlen = (*io->ops.block_write)(
   2edc6:	9300      	str	r3, [sp, #0]
   2edc8:	2305      	movs	r3, #5
   2edca:	47a8      	blx	r5
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   2edcc:	b002      	add	sp, #8
   2edce:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   2edd0:	f812 5b01 	ldrb.w	r5, [r2], #1
			len--;
   2edd4:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   2edd6:	7005      	strb	r5, [r0, #0]
			len--;
   2edd8:	4615      	mov	r5, r2
   2edda:	18a0      	adds	r0, r4, r2
		while ( len && (
   2eddc:	b119      	cbz	r1, 2ede6 <metal_io_block_write+0x3e>
			((uintptr_t)ptr % sizeof(int)) ||
   2edde:	ea40 0602 	orr.w	r6, r0, r2
   2ede2:	07b6      	lsls	r6, r6, #30
   2ede4:	d1f4      	bne.n	2edd0 <metal_io_block_write+0x28>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ede6:	2903      	cmp	r1, #3
   2ede8:	dc0a      	bgt.n	2ee00 <metal_io_block_write+0x58>
   2edea:	3d01      	subs	r5, #1
   2edec:	4401      	add	r1, r0
		for (; len != 0; ptr++, source++, len--)
   2edee:	4288      	cmp	r0, r1
   2edf0:	d10c      	bne.n	2ee0c <metal_io_block_write+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   2edf2:	f3bf 8f5b 	dmb	ish
	retlen = len;
   2edf6:	4618      	mov	r0, r3
   2edf8:	e7e8      	b.n	2edcc <metal_io_block_write+0x24>
   2edfa:	4619      	mov	r1, r3
   2edfc:	1aa4      	subs	r4, r4, r2
   2edfe:	e7eb      	b.n	2edd8 <metal_io_block_write+0x30>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   2ee00:	f855 2b04 	ldr.w	r2, [r5], #4
   2ee04:	3904      	subs	r1, #4
   2ee06:	f840 2b04 	str.w	r2, [r0], #4
					source += sizeof(int),
   2ee0a:	e7ec      	b.n	2ede6 <metal_io_block_write+0x3e>
				*(const unsigned char *)source;
   2ee0c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
			*(unsigned char *)ptr =
   2ee10:	f800 2b01 	strb.w	r2, [r0], #1
		for (; len != 0; ptr++, source++, len--)
   2ee14:	e7eb      	b.n	2edee <metal_io_block_write+0x46>
		return -ERANGE;
   2ee16:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2ee1a:	e7d7      	b.n	2edcc <metal_io_block_write+0x24>

0002ee1c <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   2ee1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ee1e:	6804      	ldr	r4, [r0, #0]
   2ee20:	461d      	mov	r5, r3
		: NULL);
   2ee22:	1c66      	adds	r6, r4, #1
   2ee24:	d02b      	beq.n	2ee7e <metal_io_block_set+0x62>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2ee26:	6883      	ldr	r3, [r0, #8]
   2ee28:	4299      	cmp	r1, r3
   2ee2a:	d228      	bcs.n	2ee7e <metal_io_block_set+0x62>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   2ee2c:	1864      	adds	r4, r4, r1
   2ee2e:	d026      	beq.n	2ee7e <metal_io_block_set+0x62>
		return -ERANGE;
	if ((offset + len) > io->size)
   2ee30:	186e      	adds	r6, r5, r1
   2ee32:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   2ee34:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   2ee36:	bf88      	it	hi
   2ee38:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   2ee3a:	b12e      	cbz	r6, 2ee48 <metal_io_block_set+0x2c>
		(*io->ops.block_set)(
   2ee3c:	2305      	movs	r3, #5
   2ee3e:	9500      	str	r5, [sp, #0]
   2ee40:	47b0      	blx	r6
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   2ee42:	4628      	mov	r0, r5
}
   2ee44:	b002      	add	sp, #8
   2ee46:	bd70      	pop	{r4, r5, r6, pc}
		: NULL);
   2ee48:	4621      	mov	r1, r4
   2ee4a:	462b      	mov	r3, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2ee4c:	b94b      	cbnz	r3, 2ee62 <metal_io_block_set+0x46>
   2ee4e:	440b      	add	r3, r1
		for (; len != 0; ptr++, len--)
   2ee50:	4299      	cmp	r1, r3
   2ee52:	d111      	bne.n	2ee78 <metal_io_block_set+0x5c>
		atomic_thread_fence(memory_order_seq_cst);
   2ee54:	f3bf 8f5b 	dmb	ish
   2ee58:	e7f3      	b.n	2ee42 <metal_io_block_set+0x26>
			*(unsigned char *)ptr = (unsigned char) value;
   2ee5a:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   2ee5e:	3b01      	subs	r3, #1
   2ee60:	e7f4      	b.n	2ee4c <metal_io_block_set+0x30>
   2ee62:	0788      	lsls	r0, r1, #30
   2ee64:	d1f9      	bne.n	2ee5a <metal_io_block_set+0x3e>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   2ee66:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
   2ee6a:	4350      	muls	r0, r2
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ee6c:	2b03      	cmp	r3, #3
   2ee6e:	ddee      	ble.n	2ee4e <metal_io_block_set+0x32>
			*(unsigned int *)ptr = cint;
   2ee70:	f841 0b04 	str.w	r0, [r1], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   2ee74:	3b04      	subs	r3, #4
   2ee76:	e7f9      	b.n	2ee6c <metal_io_block_set+0x50>
			*(unsigned char *)ptr = (unsigned char) value;
   2ee78:	f801 2b01 	strb.w	r2, [r1], #1
		for (; len != 0; ptr++, len--)
   2ee7c:	e7e8      	b.n	2ee50 <metal_io_block_set+0x34>
		return -ERANGE;
   2ee7e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2ee82:	e7df      	b.n	2ee44 <metal_io_block_set+0x28>

0002ee84 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   2ee84:	2000      	movs	r0, #0
   2ee86:	4770      	bx	lr

0002ee88 <lfs_pair_isnull>:
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   2ee88:	6803      	ldr	r3, [r0, #0]
   2ee8a:	3301      	adds	r3, #1
   2ee8c:	d004      	beq.n	2ee98 <lfs_pair_isnull+0x10>
   2ee8e:	6840      	ldr	r0, [r0, #4]
   2ee90:	1c43      	adds	r3, r0, #1
   2ee92:	4258      	negs	r0, r3
   2ee94:	4158      	adcs	r0, r3
   2ee96:	4770      	bx	lr
   2ee98:	2001      	movs	r0, #1
}
   2ee9a:	4770      	bx	lr

0002ee9c <lfs_pair_cmp>:
        const lfs_block_t pairb[2]) {
   2ee9c:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   2ee9e:	6804      	ldr	r4, [r0, #0]
   2eea0:	680b      	ldr	r3, [r1, #0]
   2eea2:	429c      	cmp	r4, r3
   2eea4:	d009      	beq.n	2eeba <lfs_pair_cmp+0x1e>
   2eea6:	6840      	ldr	r0, [r0, #4]
   2eea8:	6849      	ldr	r1, [r1, #4]
   2eeaa:	4288      	cmp	r0, r1
   2eeac:	d005      	beq.n	2eeba <lfs_pair_cmp+0x1e>
   2eeae:	428c      	cmp	r4, r1
   2eeb0:	d003      	beq.n	2eeba <lfs_pair_cmp+0x1e>
   2eeb2:	1a18      	subs	r0, r3, r0
   2eeb4:	bf18      	it	ne
   2eeb6:	2001      	movne	r0, #1
}
   2eeb8:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   2eeba:	2000      	movs	r0, #0
   2eebc:	e7fc      	b.n	2eeb8 <lfs_pair_cmp+0x1c>

0002eebe <lfs_tag_dsize>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   2eebe:	f340 0309 	sbfx	r3, r0, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   2eec2:	f1b3 3fff 	cmp.w	r3, #4294967295
   2eec6:	bf08      	it	eq
   2eec8:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
   2eeca:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
   2eece:	3004      	adds	r0, #4
   2eed0:	4770      	bx	lr

0002eed2 <lfs_gstate_xor>:
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
   2eed2:	b510      	push	{r4, lr}
   2eed4:	1f03      	subs	r3, r0, #4
   2eed6:	3904      	subs	r1, #4
   2eed8:	3008      	adds	r0, #8
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   2eeda:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2eede:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
   2eee2:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
   2eee4:	ea82 0204 	eor.w	r2, r2, r4
   2eee8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
   2eeea:	d1f6      	bne.n	2eeda <lfs_gstate_xor+0x8>
}
   2eeec:	bd10      	pop	{r4, pc}

0002eeee <lfs_gstate_hasmovehere>:
        const lfs_block_t *pair) {
   2eeee:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
   2eef0:	6803      	ldr	r3, [r0, #0]
        const lfs_block_t *pair) {
   2eef2:	4602      	mov	r2, r0
    return (tag & 0x70000000) >> 20;
   2eef4:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
   2eef6:	f413 60e0 	ands.w	r0, r3, #1792	; 0x700
   2eefa:	d005      	beq.n	2ef08 <lfs_gstate_hasmovehere+0x1a>
   2eefc:	1d10      	adds	r0, r2, #4
   2eefe:	f7ff ffcd 	bl	2ee9c <lfs_pair_cmp>
   2ef02:	fab0 f080 	clz	r0, r0
   2ef06:	0940      	lsrs	r0, r0, #5
}
   2ef08:	bd08      	pop	{r3, pc}

0002ef0a <lfs_mlist_isopen>:
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
   2ef0a:	b900      	cbnz	r0, 2ef0e <lfs_mlist_isopen+0x4>
   2ef0c:	4770      	bx	lr
        if (*p == (struct lfs_mlist*)node) {
   2ef0e:	4288      	cmp	r0, r1
   2ef10:	d001      	beq.n	2ef16 <lfs_mlist_isopen+0xc>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
   2ef12:	6800      	ldr	r0, [r0, #0]
   2ef14:	e7f9      	b.n	2ef0a <lfs_mlist_isopen>
            return true;
   2ef16:	2001      	movs	r0, #1
}
   2ef18:	4770      	bx	lr

0002ef1a <lfs_alloc_lookahead>:
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
   2ef1a:	b510      	push	{r4, lr}
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   2ef1c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   2ef1e:	6a1a      	ldr	r2, [r3, #32]
   2ef20:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2ef22:	1ad3      	subs	r3, r2, r3
   2ef24:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->free.off)
   2ef26:	fbb1 f3f2 	udiv	r3, r1, r2
   2ef2a:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   2ef2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2ef30:	428b      	cmp	r3, r1
   2ef32:	d90a      	bls.n	2ef4a <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   2ef34:	2201      	movs	r2, #1
   2ef36:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2ef38:	094c      	lsrs	r4, r1, #5
   2ef3a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   2ef3e:	f001 011f 	and.w	r1, r1, #31
   2ef42:	408a      	lsls	r2, r1
   2ef44:	4313      	orrs	r3, r2
   2ef46:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
}
   2ef4a:	2000      	movs	r0, #0
   2ef4c:	bd10      	pop	{r4, pc}

0002ef4e <lfs_dir_commit_size>:
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
   2ef4e:	4602      	mov	r2, r0
   2ef50:	b508      	push	{r3, lr}
    *size += lfs_tag_dsize(tag);
   2ef52:	4608      	mov	r0, r1
   2ef54:	f7ff ffb3 	bl	2eebe <lfs_tag_dsize>
   2ef58:	6813      	ldr	r3, [r2, #0]
   2ef5a:	4403      	add	r3, r0
   2ef5c:	6013      	str	r3, [r2, #0]
}
   2ef5e:	2000      	movs	r0, #0
   2ef60:	bd08      	pop	{r3, pc}

0002ef62 <lfs_fs_size_count>:
    *size += 1;
   2ef62:	6803      	ldr	r3, [r0, #0]
   2ef64:	3301      	adds	r3, #1
   2ef66:	6003      	str	r3, [r0, #0]
}
   2ef68:	2000      	movs	r0, #0
   2ef6a:	4770      	bx	lr

0002ef6c <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   2ef6c:	b510      	push	{r4, lr}
    if (!lfs->cfg->read_buffer) {
   2ef6e:	6e83      	ldr	r3, [r0, #104]	; 0x68
static int lfs_deinit(lfs_t *lfs) {
   2ef70:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   2ef72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2ef74:	b913      	cbnz	r3, 2ef7c <lfs_deinit+0x10>

/* Deallocate memory, only used if buffers are not provided to littlefs */
static inline void lfs_free(void *p)
{
#ifndef LFS_NO_MALLOC
	free(p);
   2ef76:	68c0      	ldr	r0, [r0, #12]
   2ef78:	f7f9 fbb4 	bl	286e4 <free>
    if (!lfs->cfg->prog_buffer) {
   2ef7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ef7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2ef80:	b913      	cbnz	r3, 2ef88 <lfs_deinit+0x1c>
   2ef82:	69e0      	ldr	r0, [r4, #28]
   2ef84:	f7f9 fbae 	bl	286e4 <free>
    if (!lfs->cfg->lookahead_buffer) {
   2ef88:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   2ef8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ef8c:	b913      	cbnz	r3, 2ef94 <lfs_deinit+0x28>
   2ef8e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2ef90:	f7f9 fba8 	bl	286e4 <free>
}
   2ef94:	2000      	movs	r0, #0
   2ef96:	bd10      	pop	{r4, pc}

0002ef98 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   2ef98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
   2ef9a:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   2ef9e:	9402      	str	r4, [sp, #8]
   2efa0:	9c06      	ldr	r4, [sp, #24]
   2efa2:	9401      	str	r4, [sp, #4]
   2efa4:	2400      	movs	r4, #0
   2efa6:	9400      	str	r4, [sp, #0]
   2efa8:	f7f1 fe88 	bl	20cbc <lfs_dir_getslice>
}
   2efac:	b004      	add	sp, #16
   2efae:	bd10      	pop	{r4, pc}

0002efb0 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   2efb0:	b530      	push	{r4, r5, lr}
   2efb2:	4613      	mov	r3, r2
   2efb4:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   2efb6:	6802      	ldr	r2, [r0, #0]
    int err = lfs_bd_read(lfs,
   2efb8:	2008      	movs	r0, #8
        lfs_tag_t tag, const void *buffer) {
   2efba:	b087      	sub	sp, #28
    int err = lfs_bd_read(lfs,
   2efbc:	ad04      	add	r5, sp, #16
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   2efbe:	6e91      	ldr	r1, [r2, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   2efc0:	9003      	str	r0, [sp, #12]
   2efc2:	9502      	str	r5, [sp, #8]
   2efc4:	6858      	ldr	r0, [r3, #4]
   2efc6:	9001      	str	r0, [sp, #4]
   2efc8:	681b      	ldr	r3, [r3, #0]
   2efca:	4610      	mov	r0, r2
   2efcc:	9300      	str	r3, [sp, #0]
   2efce:	69cb      	ldr	r3, [r1, #28]
   2efd0:	f102 0110 	add.w	r1, r2, #16
   2efd4:	f7f1 fd9a 	bl	20b0c <lfs_bd_read>
    if (err) {
   2efd8:	b930      	cbnz	r0, 2efe8 <lfs_fs_parent_match+0x38>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   2efda:	4628      	mov	r0, r5
   2efdc:	1d21      	adds	r1, r4, #4
   2efde:	f7ff ff5d 	bl	2ee9c <lfs_pair_cmp>
   2efe2:	3800      	subs	r0, #0
   2efe4:	bf18      	it	ne
   2efe6:	2001      	movne	r0, #1
}
   2efe8:	b007      	add	sp, #28
   2efea:	bd30      	pop	{r4, r5, pc}

0002efec <lfs_bd_cmp.constprop.0>:
static int lfs_bd_cmp(lfs_t *lfs,
   2efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eff0:	4607      	mov	r7, r0
   2eff2:	4688      	mov	r8, r1
   2eff4:	4691      	mov	r9, r2
   2eff6:	469a      	mov	sl, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
   2eff8:	2400      	movs	r4, #0
static int lfs_bd_cmp(lfs_t *lfs,
   2effa:	b087      	sub	sp, #28
   2effc:	9e12      	ldr	r6, [sp, #72]	; 0x48
        int res = lfs_bd_read(lfs,
   2effe:	f10d 0b10 	add.w	fp, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
   2f002:	42a6      	cmp	r6, r4
   2f004:	d801      	bhi.n	2f00a <lfs_bd_cmp.constprop.0+0x1e>
    return LFS_CMP_EQ;
   2f006:	2000      	movs	r0, #0
   2f008:	e01b      	b.n	2f042 <lfs_bd_cmp.constprop.0+0x56>
        diff = lfs_min(size-i, sizeof(dat));
   2f00a:	1b35      	subs	r5, r6, r4
	return (a < b) ? a : b;
   2f00c:	2d08      	cmp	r5, #8
   2f00e:	bf28      	it	cs
   2f010:	2508      	movcs	r5, #8
        int res = lfs_bd_read(lfs,
   2f012:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f014:	4642      	mov	r2, r8
   2f016:	18e3      	adds	r3, r4, r3
   2f018:	e9cd a300 	strd	sl, r3, [sp]
   2f01c:	2100      	movs	r1, #0
   2f01e:	4638      	mov	r0, r7
   2f020:	e9cd b502 	strd	fp, r5, [sp, #8]
   2f024:	eba9 0304 	sub.w	r3, r9, r4
   2f028:	f7f1 fd70 	bl	20b0c <lfs_bd_read>
        if (res) {
   2f02c:	b948      	cbnz	r0, 2f042 <lfs_bd_cmp.constprop.0+0x56>
        res = memcmp(dat, data + i, diff);
   2f02e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2f030:	462a      	mov	r2, r5
   2f032:	4658      	mov	r0, fp
   2f034:	1919      	adds	r1, r3, r4
   2f036:	f001 fa9a 	bl	3056e <memcmp>
        if (res) {
   2f03a:	2800      	cmp	r0, #0
   2f03c:	d004      	beq.n	2f048 <lfs_bd_cmp.constprop.0+0x5c>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
   2f03e:	da05      	bge.n	2f04c <lfs_bd_cmp.constprop.0+0x60>
   2f040:	2001      	movs	r0, #1
}
   2f042:	b007      	add	sp, #28
   2f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (lfs_off_t i = 0; i < size; i += diff) {
   2f048:	442c      	add	r4, r5
   2f04a:	e7da      	b.n	2f002 <lfs_bd_cmp.constprop.0+0x16>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
   2f04c:	2002      	movs	r0, #2
   2f04e:	e7f8      	b.n	2f042 <lfs_bd_cmp.constprop.0+0x56>

0002f050 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   2f050:	b530      	push	{r4, r5, lr}
   2f052:	4613      	mov	r3, r2
   2f054:	6882      	ldr	r2, [r0, #8]
    return tag & 0x000003ff;
   2f056:	f3c1 0509 	ubfx	r5, r1, #0, #10
   2f05a:	42aa      	cmp	r2, r5
   2f05c:	bf28      	it	cs
   2f05e:	462a      	movcs	r2, r5
        lfs_tag_t tag, const void *buffer) {
   2f060:	b085      	sub	sp, #20
    int res = lfs_bd_cmp(lfs,
   2f062:	9202      	str	r2, [sp, #8]
   2f064:	6841      	ldr	r1, [r0, #4]
        lfs_tag_t tag, const void *buffer) {
   2f066:	4604      	mov	r4, r0
    int res = lfs_bd_cmp(lfs,
   2f068:	9101      	str	r1, [sp, #4]
   2f06a:	6859      	ldr	r1, [r3, #4]
   2f06c:	9100      	str	r1, [sp, #0]
   2f06e:	6801      	ldr	r1, [r0, #0]
   2f070:	681b      	ldr	r3, [r3, #0]
   2f072:	4608      	mov	r0, r1
   2f074:	f7ff ffba 	bl	2efec <lfs_bd_cmp.constprop.0>
    if (res != LFS_CMP_EQ) {
   2f078:	b928      	cbnz	r0, 2f086 <lfs_dir_find_match+0x36>
    if (name->size != lfs_tag_size(tag)) {
   2f07a:	68a3      	ldr	r3, [r4, #8]
   2f07c:	42ab      	cmp	r3, r5
   2f07e:	d002      	beq.n	2f086 <lfs_dir_find_match+0x36>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   2f080:	bf34      	ite	cc
   2f082:	2001      	movcc	r0, #1
   2f084:	2002      	movcs	r0, #2
}
   2f086:	b005      	add	sp, #20
   2f088:	bd30      	pop	{r4, r5, pc}

0002f08a <z_log_msg_static_create.constprop.0>:
   2f08a:	2300      	movs	r3, #0
   2f08c:	f7df bc10 	b.w	e8b0 <z_impl_z_log_msg_static_create>

0002f090 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   2f090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   2f092:	2300      	movs	r3, #0
   2f094:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2f098:	9301      	str	r3, [sp, #4]
   2f09a:	f04f 33ff 	mov.w	r3, #4294967295
   2f09e:	9300      	str	r3, [sp, #0]
   2f0a0:	f7f2 f8bc 	bl	2121c <lfs_dir_fetchmatch>
}
   2f0a4:	b005      	add	sp, #20
   2f0a6:	f85d fb04 	ldr.w	pc, [sp], #4

0002f0aa <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   2f0aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pdir->tail[1] = 1;
   2f0ae:	2301      	movs	r3, #1
   2f0b0:	2400      	movs	r4, #0
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   2f0b2:	4606      	mov	r6, r0
   2f0b4:	4688      	mov	r8, r1
   2f0b6:	4615      	mov	r5, r2
    pdir->tail[1] = 1;
   2f0b8:	e9c2 4306 	strd	r4, r3, [r2, #24]
    while (!lfs_pair_isnull(pdir->tail)) {
   2f0bc:	f102 0718 	add.w	r7, r2, #24
   2f0c0:	4638      	mov	r0, r7
   2f0c2:	f7ff fee1 	bl	2ee88 <lfs_pair_isnull>
   2f0c6:	b110      	cbz	r0, 2f0ce <lfs_fs_pred+0x24>
    return LFS_ERR_NOENT;
   2f0c8:	f06f 0001 	mvn.w	r0, #1
   2f0cc:	e011      	b.n	2f0f2 <lfs_fs_pred+0x48>
        if (cycle >= lfs->cfg->block_count/2) {
   2f0ce:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f0d0:	6a1b      	ldr	r3, [r3, #32]
   2f0d2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2f0d6:	d20e      	bcs.n	2f0f6 <lfs_fs_pred+0x4c>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   2f0d8:	4641      	mov	r1, r8
   2f0da:	4638      	mov	r0, r7
        cycle += 1;
   2f0dc:	3401      	adds	r4, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
   2f0de:	f7ff fedd 	bl	2ee9c <lfs_pair_cmp>
   2f0e2:	b130      	cbz	r0, 2f0f2 <lfs_fs_pred+0x48>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   2f0e4:	463a      	mov	r2, r7
   2f0e6:	4629      	mov	r1, r5
   2f0e8:	4630      	mov	r0, r6
   2f0ea:	f7ff ffd1 	bl	2f090 <lfs_dir_fetch>
        if (err) {
   2f0ee:	2800      	cmp	r0, #0
   2f0f0:	d0e6      	beq.n	2f0c0 <lfs_fs_pred+0x16>
}
   2f0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return LFS_ERR_CORRUPT;
   2f0f6:	f06f 0053 	mvn.w	r0, #83	; 0x53
   2f0fa:	e7fa      	b.n	2f0f2 <lfs_fs_pred+0x48>

0002f0fc <lfs_ctz_index.isra.0>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   2f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   2f0fe:	69c6      	ldr	r6, [r0, #28]
    lfs_off_t size = *off;
   2f100:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   2f102:	3e08      	subs	r6, #8
    if (i == 0) {
   2f104:	42b5      	cmp	r5, r6
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   2f106:	460f      	mov	r7, r1
    if (i == 0) {
   2f108:	d313      	bcc.n	2f132 <lfs_ctz_index.isra.0+0x36>
    lfs_off_t i = size / b;
   2f10a:	fbb5 f0f6 	udiv	r0, r5, r6
	return __builtin_popcount(a);
   2f10e:	3801      	subs	r0, #1
   2f110:	f7d9 ffce 	bl	90b0 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   2f114:	1c84      	adds	r4, r0, #2
   2f116:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
   2f11a:	fbb4 f4f6 	udiv	r4, r4, r6
   2f11e:	4620      	mov	r0, r4
   2f120:	f7d9 ffc6 	bl	90b0 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
   2f124:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
    return i;
   2f128:	4620      	mov	r0, r4
    *off = size - b*i - 4*lfs_popc(i);
   2f12a:	fb04 5516 	mls	r5, r4, r6, r5
   2f12e:	603d      	str	r5, [r7, #0]
}
   2f130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   2f132:	2000      	movs	r0, #0
   2f134:	e7fc      	b.n	2f130 <lfs_ctz_index.isra.0+0x34>

0002f136 <lfs_ctz_find.constprop.0>:
static int lfs_ctz_find(lfs_t *lfs,
   2f136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f13a:	b089      	sub	sp, #36	; 0x24
   2f13c:	4606      	mov	r6, r0
   2f13e:	460f      	mov	r7, r1
   2f140:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   2f144:	9205      	str	r2, [sp, #20]
    if (size == 0) {
   2f146:	b94b      	cbnz	r3, 2f15c <lfs_ctz_find.constprop.0+0x26>
        *block = LFS_BLOCK_NULL;
   2f148:	f04f 32ff 	mov.w	r2, #4294967295
   2f14c:	f8c8 2000 	str.w	r2, [r8]
        return 0;
   2f150:	2000      	movs	r0, #0
    *off = pos;
   2f152:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2f154:	6013      	str	r3, [r2, #0]
}
   2f156:	b009      	add	sp, #36	; 0x24
   2f158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f15c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   2f15e:	3b01      	subs	r3, #1
   2f160:	a907      	add	r1, sp, #28
   2f162:	4620      	mov	r0, r4
   2f164:	9307      	str	r3, [sp, #28]
   2f166:	f7ff ffc9 	bl	2f0fc <lfs_ctz_index.isra.0>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f16a:	a912      	add	r1, sp, #72	; 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f16c:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f16e:	4620      	mov	r0, r4
   2f170:	f7ff ffc4 	bl	2f0fc <lfs_ctz_index.isra.0>
        int err = lfs_bd_read(lfs,
   2f174:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   2f178:	4681      	mov	r9, r0
        int err = lfs_bd_read(lfs,
   2f17a:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
   2f17e:	45a9      	cmp	r9, r5
        int err = lfs_bd_read(lfs,
   2f180:	9a05      	ldr	r2, [sp, #20]
    while (current > target) {
   2f182:	d303      	bcc.n	2f18c <lfs_ctz_find.constprop.0+0x56>
    *off = pos;
   2f184:	9b12      	ldr	r3, [sp, #72]	; 0x48
    *block = head;
   2f186:	f8c8 2000 	str.w	r2, [r8]
    return 0;
   2f18a:	e7e1      	b.n	2f150 <lfs_ctz_find.constprop.0+0x1a>
	return __builtin_ctz(a);
   2f18c:	fa95 f3a5 	rbit	r3, r5
                lfs_npw2(current-target+1) - 1,
   2f190:	eba5 0409 	sub.w	r4, r5, r9
	return 32 - __builtin_clz(a-1);
   2f194:	fab4 f484 	clz	r4, r4
	return __builtin_ctz(a);
   2f198:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
   2f19c:	f1c4 041f 	rsb	r4, r4, #31
	return (a < b) ? a : b;
   2f1a0:	429c      	cmp	r4, r3
   2f1a2:	bf28      	it	cs
   2f1a4:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   2f1a6:	00a3      	lsls	r3, r4, #2
   2f1a8:	e9cd 2300 	strd	r2, r3, [sp]
   2f1ac:	2100      	movs	r1, #0
   2f1ae:	2304      	movs	r3, #4
   2f1b0:	463a      	mov	r2, r7
   2f1b2:	4630      	mov	r0, r6
   2f1b4:	e9cd ba02 	strd	fp, sl, [sp, #8]
   2f1b8:	f7f1 fca8 	bl	20b0c <lfs_bd_read>
        if (err) {
   2f1bc:	2800      	cmp	r0, #0
   2f1be:	d1ca      	bne.n	2f156 <lfs_ctz_find.constprop.0+0x20>
        current -= 1 << skip;
   2f1c0:	2301      	movs	r3, #1
   2f1c2:	40a3      	lsls	r3, r4
   2f1c4:	1aed      	subs	r5, r5, r3
   2f1c6:	e7da      	b.n	2f17e <lfs_ctz_find.constprop.0+0x48>

0002f1c8 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   2f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1cc:	b089      	sub	sp, #36	; 0x24
   2f1ce:	4607      	mov	r7, r0
   2f1d0:	e9dd 0a12 	ldrd	r0, sl, [sp, #72]	; 0x48
   2f1d4:	4688      	mov	r8, r1
   2f1d6:	4691      	mov	r9, r2
   2f1d8:	461e      	mov	r6, r3
    if (size == 0) {
   2f1da:	b1e0      	cbz	r0, 2f216 <lfs_ctz_traverse+0x4e>
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   2f1dc:	3801      	subs	r0, #1
   2f1de:	9005      	str	r0, [sp, #20]
   2f1e0:	a905      	add	r1, sp, #20
   2f1e2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2f1e4:	f7ff ff8a 	bl	2f0fc <lfs_ctz_index.isra.0>
   2f1e8:	4604      	mov	r4, r0
        err = lfs_bd_read(lfs,
   2f1ea:	f10d 0b18 	add.w	fp, sp, #24
        int err = cb(data, head);
   2f1ee:	4631      	mov	r1, r6
   2f1f0:	9814      	ldr	r0, [sp, #80]	; 0x50
   2f1f2:	47d0      	blx	sl
        if (err) {
   2f1f4:	b978      	cbnz	r0, 2f216 <lfs_ctz_traverse+0x4e>
        if (index == 0) {
   2f1f6:	b174      	cbz	r4, 2f216 <lfs_ctz_traverse+0x4e>
        int count = 2 - (index & 1);
   2f1f8:	f004 0501 	and.w	r5, r4, #1
   2f1fc:	f1c5 0302 	rsb	r3, r5, #2
        err = lfs_bd_read(lfs,
   2f200:	009b      	lsls	r3, r3, #2
   2f202:	e9cd 6000 	strd	r6, r0, [sp]
   2f206:	464a      	mov	r2, r9
   2f208:	4641      	mov	r1, r8
   2f20a:	4638      	mov	r0, r7
   2f20c:	e9cd b302 	strd	fp, r3, [sp, #8]
   2f210:	f7f1 fc7c 	bl	20b0c <lfs_bd_read>
        if (err) {
   2f214:	b110      	cbz	r0, 2f21c <lfs_ctz_traverse+0x54>
}
   2f216:	b009      	add	sp, #36	; 0x24
   2f218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = cb(data, heads[i]);
   2f21c:	9906      	ldr	r1, [sp, #24]
        for (int i = 0; i < count-1; i++) {
   2f21e:	b925      	cbnz	r5, 2f22a <lfs_ctz_traverse+0x62>
            err = cb(data, heads[i]);
   2f220:	9814      	ldr	r0, [sp, #80]	; 0x50
   2f222:	47d0      	blx	sl
            if (err) {
   2f224:	2800      	cmp	r0, #0
   2f226:	d1f6      	bne.n	2f216 <lfs_ctz_traverse+0x4e>
        for (int i = 0; i < count-1; i++) {
   2f228:	2001      	movs	r0, #1
        head = heads[count-1];
   2f22a:	ab08      	add	r3, sp, #32
   2f22c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        index -= count;
   2f230:	3d02      	subs	r5, #2
        head = heads[count-1];
   2f232:	f850 6c08 	ldr.w	r6, [r0, #-8]
        index -= count;
   2f236:	442c      	add	r4, r5
    while (true) {
   2f238:	e7d9      	b.n	2f1ee <lfs_ctz_traverse+0x26>

0002f23a <lfs_cache_zero.isra.0>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
   2f23a:	b510      	push	{r4, lr}
   2f23c:	460c      	mov	r4, r1
   2f23e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2f240:	21ff      	movs	r1, #255	; 0xff
   2f242:	68e0      	ldr	r0, [r4, #12]
   2f244:	f001 f9dd 	bl	30602 <memset>
    pcache->block = LFS_BLOCK_NULL;
   2f248:	f04f 33ff 	mov.w	r3, #4294967295
   2f24c:	6023      	str	r3, [r4, #0]
}
   2f24e:	bd10      	pop	{r4, pc}

0002f250 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   2f250:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f252:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
   2f254:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
   2f258:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
   2f25a:	684b      	ldr	r3, [r1, #4]
        const void *buffer, lfs_size_t size) {
   2f25c:	460c      	mov	r4, r1
    int err = lfs_bd_prog(lfs,
   2f25e:	9301      	str	r3, [sp, #4]
   2f260:	680b      	ldr	r3, [r1, #0]
        const void *buffer, lfs_size_t size) {
   2f262:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
   2f264:	9300      	str	r3, [sp, #0]
   2f266:	4602      	mov	r2, r0
   2f268:	2300      	movs	r3, #0
   2f26a:	f100 0110 	add.w	r1, r0, #16
   2f26e:	f7f2 fdcb 	bl	21e08 <lfs_bd_prog>
    if (err) {
   2f272:	4606      	mov	r6, r0
   2f274:	b940      	cbnz	r0, 2f288 <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
   2f276:	462a      	mov	r2, r5
   2f278:	4639      	mov	r1, r7
   2f27a:	68e0      	ldr	r0, [r4, #12]
   2f27c:	f7f4 fdba 	bl	23df4 <lfs_crc>
    commit->off += size;
   2f280:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
   2f282:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   2f284:	442b      	add	r3, r5
   2f286:	6063      	str	r3, [r4, #4]
}
   2f288:	4630      	mov	r0, r6
   2f28a:	b005      	add	sp, #20
   2f28c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f28e <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   2f28e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f292:	4606      	mov	r6, r0
   2f294:	b087      	sub	sp, #28
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f296:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
   2f298:	4699      	mov	r9, r3
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f29a:	f7ff fe10 	bl	2eebe <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
   2f29e:	684b      	ldr	r3, [r1, #4]
        lfs_tag_t tag, const void *buffer) {
   2f2a0:	4693      	mov	fp, r2
    if (commit->off + dsize > commit->end) {
   2f2a2:	694a      	ldr	r2, [r1, #20]
   2f2a4:	4403      	add	r3, r0
   2f2a6:	4293      	cmp	r3, r2
        lfs_tag_t tag, const void *buffer) {
   2f2a8:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
   2f2aa:	4680      	mov	r8, r0
    if (commit->off + dsize > commit->end) {
   2f2ac:	d841      	bhi.n	2f332 <lfs_dir_commitattr+0xa4>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   2f2ae:	688b      	ldr	r3, [r1, #8]
   2f2b0:	f02b 4a00 	bic.w	sl, fp, #2147483648	; 0x80000000
   2f2b4:	ea8a 0303 	eor.w	r3, sl, r3
	return __builtin_bswap32(a);
   2f2b8:	ba1b      	rev	r3, r3
   2f2ba:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   2f2bc:	4630      	mov	r0, r6
   2f2be:	2304      	movs	r3, #4
   2f2c0:	aa05      	add	r2, sp, #20
   2f2c2:	f7ff ffc5 	bl	2f250 <lfs_dir_commitprog>
    if (err) {
   2f2c6:	4605      	mov	r5, r0
   2f2c8:	bb78      	cbnz	r0, 2f32a <lfs_dir_commitattr+0x9c>
    if (!(tag & 0x80000000)) {
   2f2ca:	f1bb 0f00 	cmp.w	fp, #0
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   2f2ce:	f1a8 0704 	sub.w	r7, r8, #4
    if (!(tag & 0x80000000)) {
   2f2d2:	da20      	bge.n	2f316 <lfs_dir_commitattr+0x88>
            err = lfs_bd_read(lfs,
   2f2d4:	f10d 0b13 	add.w	fp, sp, #19
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   2f2d8:	b32f      	cbz	r7, 2f326 <lfs_dir_commitattr+0x98>
            err = lfs_bd_read(lfs,
   2f2da:	2301      	movs	r3, #1
   2f2dc:	e9cd b302 	strd	fp, r3, [sp, #8]
   2f2e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2f2e4:	4632      	mov	r2, r6
   2f2e6:	3b04      	subs	r3, #4
   2f2e8:	4443      	add	r3, r8
   2f2ea:	1bdb      	subs	r3, r3, r7
   2f2ec:	9301      	str	r3, [sp, #4]
   2f2ee:	f8d9 3000 	ldr.w	r3, [r9]
   2f2f2:	2100      	movs	r1, #0
   2f2f4:	9300      	str	r3, [sp, #0]
   2f2f6:	4630      	mov	r0, r6
   2f2f8:	463b      	mov	r3, r7
   2f2fa:	f7f1 fc07 	bl	20b0c <lfs_bd_read>
            if (err) {
   2f2fe:	b940      	cbnz	r0, 2f312 <lfs_dir_commitattr+0x84>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   2f300:	2301      	movs	r3, #1
   2f302:	465a      	mov	r2, fp
   2f304:	4621      	mov	r1, r4
   2f306:	4630      	mov	r0, r6
   2f308:	f7ff ffa2 	bl	2f250 <lfs_dir_commitprog>
            if (err) {
   2f30c:	3f01      	subs	r7, #1
   2f30e:	2800      	cmp	r0, #0
   2f310:	d0e2      	beq.n	2f2d8 <lfs_dir_commitattr+0x4a>
   2f312:	4605      	mov	r5, r0
   2f314:	e009      	b.n	2f32a <lfs_dir_commitattr+0x9c>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   2f316:	463b      	mov	r3, r7
   2f318:	464a      	mov	r2, r9
   2f31a:	4621      	mov	r1, r4
   2f31c:	4630      	mov	r0, r6
   2f31e:	f7ff ff97 	bl	2f250 <lfs_dir_commitprog>
        if (err) {
   2f322:	2800      	cmp	r0, #0
   2f324:	d1f5      	bne.n	2f312 <lfs_dir_commitattr+0x84>
    commit->ptag = tag & 0x7fffffff;
   2f326:	f8c4 a008 	str.w	sl, [r4, #8]
}
   2f32a:	4628      	mov	r0, r5
   2f32c:	b007      	add	sp, #28
   2f32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_NOSPC;
   2f332:	f06f 051b 	mvn.w	r5, #27
   2f336:	e7f8      	b.n	2f32a <lfs_dir_commitattr+0x9c>

0002f338 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   2f338:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   2f33a:	460a      	mov	r2, r1
   2f33c:	e9d0 0100 	ldrd	r0, r1, [r0]
   2f340:	f7ff bfa5 	b.w	2f28e <lfs_dir_commitattr>

0002f344 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   2f344:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2f346:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f348:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   2f34a:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f34c:	f7f2 feca 	bl	220e4 <lfs_alloc>
        if (err) {
   2f350:	4605      	mov	r5, r0
   2f352:	bb80      	cbnz	r0, 2f3b6 <lfs_dir_alloc+0x72>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   2f354:	4621      	mov	r1, r4
   2f356:	4630      	mov	r0, r6
   2f358:	f7f2 fec4 	bl	220e4 <lfs_alloc>
        if (err) {
   2f35c:	4605      	mov	r5, r0
   2f35e:	bb50      	cbnz	r0, 2f3b6 <lfs_dir_alloc+0x72>
    dir->rev = 0;
   2f360:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
   2f362:	2304      	movs	r3, #4
    dir->rev = 0;
   2f364:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
   2f368:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f36c:	9001      	str	r0, [sp, #4]
   2f36e:	6822      	ldr	r2, [r4, #0]
   2f370:	4601      	mov	r1, r0
   2f372:	9200      	str	r2, [sp, #0]
   2f374:	4630      	mov	r0, r6
   2f376:	4632      	mov	r2, r6
   2f378:	f7f1 fbc8 	bl	20b0c <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
   2f37c:	b110      	cbz	r0, 2f384 <lfs_dir_alloc+0x40>
   2f37e:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f382:	d11b      	bne.n	2f3bc <lfs_dir_alloc+0x78>
    if (lfs->cfg->block_cycles > 0) {
   2f384:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2f388:	2a00      	cmp	r2, #0
   2f38a:	dd0b      	ble.n	2f3a4 <lfs_dir_alloc+0x60>
	return lfs_aligndown(a + alignment-1, alignment);
   2f38c:	68a3      	ldr	r3, [r4, #8]
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
   2f38e:	3201      	adds	r2, #1
   2f390:	f042 0201 	orr.w	r2, r2, #1
   2f394:	3b01      	subs	r3, #1
   2f396:	4413      	add	r3, r2
	return a - (a % alignment);
   2f398:	fbb3 f1f2 	udiv	r1, r3, r2
   2f39c:	fb02 3211 	mls	r2, r2, r1, r3
   2f3a0:	1a9b      	subs	r3, r3, r2
   2f3a2:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
   2f3a4:	f04f 33ff 	mov.w	r3, #4294967295
   2f3a8:	2204      	movs	r2, #4
   2f3aa:	e9c4 2303 	strd	r2, r3, [r4, #12]
    dir->count = 0;
   2f3ae:	2200      	movs	r2, #0
    dir->tail[0] = LFS_BLOCK_NULL;
   2f3b0:	e9c4 2305 	strd	r2, r3, [r4, #20]
    dir->tail[1] = LFS_BLOCK_NULL;
   2f3b4:	61e3      	str	r3, [r4, #28]
}
   2f3b6:	4628      	mov	r0, r5
   2f3b8:	b004      	add	sp, #16
   2f3ba:	bd70      	pop	{r4, r5, r6, pc}
   2f3bc:	4605      	mov	r5, r0
   2f3be:	e7fa      	b.n	2f3b6 <lfs_dir_alloc+0x72>

0002f3c0 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
   2f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f3c4:	b091      	sub	sp, #68	; 0x44
   2f3c6:	e9cd 2307 	strd	r2, r3, [sp, #28]
    if ((file->flags & LFS_F_INLINE) &&
   2f3ca:	6b0b      	ldr	r3, [r1, #48]	; 0x30
        const void *buffer, lfs_size_t size) {
   2f3cc:	4606      	mov	r6, r0
    if ((file->flags & LFS_F_INLINE) &&
   2f3ce:	02d8      	lsls	r0, r3, #11
        const void *buffer, lfs_size_t size) {
   2f3d0:	460d      	mov	r5, r1
    if ((file->flags & LFS_F_INLINE) &&
   2f3d2:	d52c      	bpl.n	2f42e <lfs_file_flushedwrite+0x6e>
            lfs_max(file->pos+nsize, file->ctz.size) >
   2f3d4:	9b08      	ldr	r3, [sp, #32]
   2f3d6:	6b48      	ldr	r0, [r1, #52]	; 0x34
                lfs->cfg->cache_size,
   2f3d8:	6eb2      	ldr	r2, [r6, #104]	; 0x68
            lfs_max(file->pos+nsize, file->ctz.size) >
   2f3da:	18c1      	adds	r1, r0, r3
	return (a > b) ? a : b;
   2f3dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                lfs->cfg->cache_size,
   2f3de:	6a94      	ldr	r4, [r2, #40]	; 0x28
   2f3e0:	4299      	cmp	r1, r3
   2f3e2:	bf38      	it	cc
   2f3e4:	4619      	movcc	r1, r3
                (lfs->cfg->metadata_max ?
   2f3e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
   2f3e8:	b1e3      	cbz	r3, 2f424 <lfs_file_flushedwrite+0x64>
	return (a < b) ? a : b;
   2f3ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
   2f3ee:	42a2      	cmp	r2, r4
   2f3f0:	bf28      	it	cs
   2f3f2:	4622      	movcs	r2, r4
   2f3f4:	08db      	lsrs	r3, r3, #3
   2f3f6:	4293      	cmp	r3, r2
   2f3f8:	bf28      	it	cs
   2f3fa:	4613      	movcs	r3, r2
    if ((file->flags & LFS_F_INLINE) &&
   2f3fc:	428b      	cmp	r3, r1
   2f3fe:	d216      	bcs.n	2f42e <lfs_file_flushedwrite+0x6e>
    file->off = file->pos;
   2f400:	63e8      	str	r0, [r5, #60]	; 0x3c
    lfs->free.ack = lfs->cfg->block_count;
   2f402:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    int err = lfs_file_relocate(lfs, file);
   2f404:	4629      	mov	r1, r5
    lfs->free.ack = lfs->cfg->block_count;
   2f406:	6a1b      	ldr	r3, [r3, #32]
    int err = lfs_file_relocate(lfs, file);
   2f408:	4630      	mov	r0, r6
    lfs->free.ack = lfs->cfg->block_count;
   2f40a:	6633      	str	r3, [r6, #96]	; 0x60
    int err = lfs_file_relocate(lfs, file);
   2f40c:	f7f2 fef4 	bl	221f8 <lfs_file_relocate>
    if (err) {
   2f410:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f412:	4604      	mov	r4, r0
   2f414:	b140      	cbz	r0, 2f428 <lfs_file_flushedwrite+0x68>
                file->flags |= LFS_F_ERRED;
   2f416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f41a:	632b      	str	r3, [r5, #48]	; 0x30
}
   2f41c:	4620      	mov	r0, r4
   2f41e:	b011      	add	sp, #68	; 0x44
   2f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lfs_min(0x3fe, lfs_min(
   2f424:	69d3      	ldr	r3, [r2, #28]
   2f426:	e7e0      	b.n	2f3ea <lfs_file_flushedwrite+0x2a>
    file->flags &= ~LFS_F_INLINE;
   2f428:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   2f42c:	632b      	str	r3, [r5, #48]	; 0x30
            for (lfs_off_t i = 0; i < skips; i++) {
   2f42e:	9b08      	ldr	r3, [sp, #32]
   2f430:	9305      	str	r3, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2f432:	f105 0340 	add.w	r3, r5, #64	; 0x40
   2f436:	9304      	str	r3, [sp, #16]
    while (nsize > 0) {
   2f438:	9b05      	ldr	r3, [sp, #20]
   2f43a:	b90b      	cbnz	r3, 2f440 <lfs_file_flushedwrite+0x80>
    return size;
   2f43c:	9c08      	ldr	r4, [sp, #32]
   2f43e:	e7ed      	b.n	2f41c <lfs_file_flushedwrite+0x5c>
        if (!(file->flags & LFS_F_WRITING) ||
   2f440:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f442:	0399      	lsls	r1, r3, #14
   2f444:	d50c      	bpl.n	2f460 <lfs_file_flushedwrite+0xa0>
                file->off == lfs->cfg->block_size) {
   2f446:	6eb2      	ldr	r2, [r6, #104]	; 0x68
        if (!(file->flags & LFS_F_WRITING) ||
   2f448:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   2f44a:	69d2      	ldr	r2, [r2, #28]
   2f44c:	4291      	cmp	r1, r2
   2f44e:	f040 80a6 	bne.w	2f59e <lfs_file_flushedwrite+0x1de>
            if (!(file->flags & LFS_F_INLINE)) {
   2f452:	02da      	lsls	r2, r3, #11
   2f454:	d51e      	bpl.n	2f494 <lfs_file_flushedwrite+0xd4>
                file->block = LFS_BLOCK_INLINE;
   2f456:	f06f 0301 	mvn.w	r3, #1
   2f45a:	63ab      	str	r3, [r5, #56]	; 0x38
                file->off = file->pos;
   2f45c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f45e:	e03c      	b.n	2f4da <lfs_file_flushedwrite+0x11a>
            if (!(file->flags & LFS_F_INLINE)) {
   2f460:	02db      	lsls	r3, r3, #11
   2f462:	d4f8      	bmi.n	2f456 <lfs_file_flushedwrite+0x96>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   2f464:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f466:	b1ab      	cbz	r3, 2f494 <lfs_file_flushedwrite+0xd4>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   2f468:	f105 023c 	add.w	r2, r5, #60	; 0x3c
   2f46c:	9202      	str	r2, [sp, #8]
   2f46e:	3b01      	subs	r3, #1
   2f470:	f105 0238 	add.w	r2, r5, #56	; 0x38
   2f474:	9201      	str	r2, [sp, #4]
   2f476:	9300      	str	r3, [sp, #0]
   2f478:	4630      	mov	r0, r6
   2f47a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
   2f47e:	9904      	ldr	r1, [sp, #16]
   2f480:	f7ff fe59 	bl	2f136 <lfs_ctz_find.constprop.0>
                    if (err) {
   2f484:	4604      	mov	r4, r0
   2f486:	b108      	cbz	r0, 2f48c <lfs_file_flushedwrite+0xcc>
                file->flags |= LFS_F_ERRED;
   2f488:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f48a:	e7c4      	b.n	2f416 <lfs_file_flushedwrite+0x56>
                    lfs_cache_zero(lfs, &file->cache);
   2f48c:	9904      	ldr	r1, [sp, #16]
   2f48e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f490:	f7ff fed3 	bl	2f23a <lfs_cache_zero.isra.0>
    lfs->free.ack = lfs->cfg->block_count;
   2f494:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f496:	6a1b      	ldr	r3, [r3, #32]
   2f498:	6633      	str	r3, [r6, #96]	; 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   2f49a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2f49c:	9309      	str	r3, [sp, #36]	; 0x24
   2f49e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f4a0:	9306      	str	r3, [sp, #24]
            lfs_size_t noff = size - 1;
   2f4a2:	3b01      	subs	r3, #1
   2f4a4:	930b      	str	r3, [sp, #44]	; 0x2c
        int err = lfs_alloc(lfs, &nblock);
   2f4a6:	4630      	mov	r0, r6
   2f4a8:	a90d      	add	r1, sp, #52	; 0x34
   2f4aa:	f7f2 fe1b 	bl	220e4 <lfs_alloc>
        if (err) {
   2f4ae:	4604      	mov	r4, r0
   2f4b0:	2800      	cmp	r0, #0
   2f4b2:	d1e9      	bne.n	2f488 <lfs_file_flushedwrite+0xc8>
            err = lfs_bd_erase(lfs, nblock);
   2f4b4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
   2f4b8:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   2f4ba:	4649      	mov	r1, r9
   2f4bc:	f7f2 faec 	bl	21a98 <lfs_bd_erase.isra.0>
            if (err) {
   2f4c0:	4604      	mov	r4, r0
   2f4c2:	b130      	cbz	r0, 2f4d2 <lfs_file_flushedwrite+0x112>
                    if (err == LFS_ERR_CORRUPT) {
   2f4c4:	f114 0f54 	cmn.w	r4, #84	; 0x54
   2f4c8:	d1de      	bne.n	2f488 <lfs_file_flushedwrite+0xc8>
    rcache->block = LFS_BLOCK_NULL;
   2f4ca:	f04f 33ff 	mov.w	r3, #4294967295
   2f4ce:	642b      	str	r3, [r5, #64]	; 0x40
   2f4d0:	e7e9      	b.n	2f4a6 <lfs_file_flushedwrite+0xe6>
            if (size == 0) {
   2f4d2:	9b06      	ldr	r3, [sp, #24]
   2f4d4:	b91b      	cbnz	r3, 2f4de <lfs_file_flushedwrite+0x11e>
                *block = nblock;
   2f4d6:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
                file->off = file->pos;
   2f4da:	63eb      	str	r3, [r5, #60]	; 0x3c
   2f4dc:	e05b      	b.n	2f596 <lfs_file_flushedwrite+0x1d6>
            lfs_size_t noff = size - 1;
   2f4de:	6eb7      	ldr	r7, [r6, #104]	; 0x68
   2f4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2f4e2:	4638      	mov	r0, r7
   2f4e4:	a90e      	add	r1, sp, #56	; 0x38
            lfs_size_t noff = size - 1;
   2f4e6:	930e      	str	r3, [sp, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   2f4e8:	f7ff fe08 	bl	2f0fc <lfs_ctz_index.isra.0>
            noff = noff + 1;
   2f4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f4ee:	f103 0801 	add.w	r8, r3, #1
            if (noff != lfs->cfg->block_size) {
   2f4f2:	69fb      	ldr	r3, [r7, #28]
            noff = noff + 1;
   2f4f4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
            if (noff != lfs->cfg->block_size) {
   2f4f8:	4598      	cmp	r8, r3
   2f4fa:	d173      	bne.n	2f5e4 <lfs_file_flushedwrite+0x224>
            index += 1;
   2f4fc:	3001      	adds	r0, #1
	return __builtin_ctz(a);
   2f4fe:	fa90 fba0 	rbit	fp, r0
   2f502:	fabb fb8b 	clz	fp, fp
            for (lfs_off_t i = 0; i < skips; i++) {
   2f506:	46a0      	mov	r8, r4
            lfs_block_t nhead = head;
   2f508:	9b09      	ldr	r3, [sp, #36]	; 0x24
            lfs_size_t skips = lfs_ctz(index) + 1;
   2f50a:	f10b 0a01 	add.w	sl, fp, #1
            lfs_block_t nhead = head;
   2f50e:	930f      	str	r3, [sp, #60]	; 0x3c
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   2f510:	af0f      	add	r7, sp, #60	; 0x3c
   2f512:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2f516:	930a      	str	r3, [sp, #40]	; 0x28
   2f518:	2304      	movs	r3, #4
   2f51a:	e9cd 7302 	strd	r7, r3, [sp, #8]
   2f51e:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2f522:	e9cd 9300 	strd	r9, r3, [sp]
   2f526:	4632      	mov	r2, r6
   2f528:	2301      	movs	r3, #1
   2f52a:	4630      	mov	r0, r6
   2f52c:	9904      	ldr	r1, [sp, #16]
   2f52e:	f7f2 fc6b 	bl	21e08 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   2f532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
                if (err) {
   2f534:	4604      	mov	r4, r0
   2f536:	2800      	cmp	r0, #0
   2f538:	d1c4      	bne.n	2f4c4 <lfs_file_flushedwrite+0x104>
                if (i != skips-1) {
   2f53a:	45c3      	cmp	fp, r8
   2f53c:	d157      	bne.n	2f5ee <lfs_file_flushedwrite+0x22e>
            for (lfs_off_t i = 0; i < skips; i++) {
   2f53e:	f108 0801 	add.w	r8, r8, #1
   2f542:	45c2      	cmp	sl, r8
   2f544:	d8e5      	bhi.n	2f512 <lfs_file_flushedwrite+0x152>
            *block = nblock;
   2f546:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
            *off = 4*skips;
   2f54a:	ea4f 038a 	mov.w	r3, sl, lsl #2
   2f54e:	e7c4      	b.n	2f4da <lfs_file_flushedwrite+0x11a>
                    err = lfs_bd_read(lfs,
   2f550:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2f552:	4632      	mov	r2, r6
   2f554:	9300      	str	r3, [sp, #0]
   2f556:	2100      	movs	r1, #0
   2f558:	4630      	mov	r0, r6
   2f55a:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2f55e:	f8cd a004 	str.w	sl, [sp, #4]
   2f562:	eba8 030a 	sub.w	r3, r8, sl
   2f566:	f7f1 fad1 	bl	20b0c <lfs_bd_read>
                    if (err) {
   2f56a:	4604      	mov	r4, r0
   2f56c:	2800      	cmp	r0, #0
   2f56e:	d18b      	bne.n	2f488 <lfs_file_flushedwrite+0xc8>
                    err = lfs_bd_prog(lfs,
   2f570:	2301      	movs	r3, #1
   2f572:	4632      	mov	r2, r6
   2f574:	4630      	mov	r0, r6
   2f576:	e9cd 7b02 	strd	r7, fp, [sp, #8]
   2f57a:	e9cd 9a00 	strd	r9, sl, [sp]
   2f57e:	9904      	ldr	r1, [sp, #16]
   2f580:	f7f2 fc42 	bl	21e08 <lfs_bd_prog>
                    if (err) {
   2f584:	4604      	mov	r4, r0
   2f586:	2800      	cmp	r0, #0
   2f588:	d19c      	bne.n	2f4c4 <lfs_file_flushedwrite+0x104>
                for (lfs_off_t i = 0; i < noff; i++) {
   2f58a:	f10a 0a01 	add.w	sl, sl, #1
   2f58e:	45d0      	cmp	r8, sl
   2f590:	d8de      	bhi.n	2f550 <lfs_file_flushedwrite+0x190>
                *off = noff;
   2f592:	e9c5 980e 	strd	r9, r8, [r5, #56]	; 0x38
            file->flags |= LFS_F_WRITING;
   2f596:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2f598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2f59c:	632b      	str	r3, [r5, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   2f59e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f5a0:	69df      	ldr	r7, [r3, #28]
   2f5a2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f5a4:	1aff      	subs	r7, r7, r3
	return (a < b) ? a : b;
   2f5a6:	9b05      	ldr	r3, [sp, #20]
   2f5a8:	429f      	cmp	r7, r3
   2f5aa:	bf28      	it	cs
   2f5ac:	461f      	movcs	r7, r3
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   2f5ae:	9b07      	ldr	r3, [sp, #28]
   2f5b0:	9703      	str	r7, [sp, #12]
   2f5b2:	9302      	str	r3, [sp, #8]
   2f5b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f5b6:	4632      	mov	r2, r6
   2f5b8:	9301      	str	r3, [sp, #4]
   2f5ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2f5bc:	4630      	mov	r0, r6
   2f5be:	9300      	str	r3, [sp, #0]
   2f5c0:	9904      	ldr	r1, [sp, #16]
   2f5c2:	2301      	movs	r3, #1
   2f5c4:	f7f2 fc20 	bl	21e08 <lfs_bd_prog>
            if (err) {
   2f5c8:	4604      	mov	r4, r0
   2f5ca:	b300      	cbz	r0, 2f60e <lfs_file_flushedwrite+0x24e>
                if (err == LFS_ERR_CORRUPT) {
   2f5cc:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f5d0:	f47f af5a 	bne.w	2f488 <lfs_file_flushedwrite+0xc8>
            err = lfs_file_relocate(lfs, file);
   2f5d4:	4629      	mov	r1, r5
   2f5d6:	4630      	mov	r0, r6
   2f5d8:	f7f2 fe0e 	bl	221f8 <lfs_file_relocate>
            if (err) {
   2f5dc:	4604      	mov	r4, r0
   2f5de:	2800      	cmp	r0, #0
   2f5e0:	d0e5      	beq.n	2f5ae <lfs_file_flushedwrite+0x1ee>
   2f5e2:	e751      	b.n	2f488 <lfs_file_flushedwrite+0xc8>
                for (lfs_off_t i = 0; i < noff; i++) {
   2f5e4:	46a2      	mov	sl, r4
                    err = lfs_bd_read(lfs,
   2f5e6:	f04f 0b01 	mov.w	fp, #1
   2f5ea:	af0f      	add	r7, sp, #60	; 0x3c
   2f5ec:	e7cf      	b.n	2f58e <lfs_file_flushedwrite+0x1ce>
                    err = lfs_bd_read(lfs,
   2f5ee:	2204      	movs	r2, #4
   2f5f0:	e9cd 7202 	strd	r7, r2, [sp, #8]
   2f5f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2f5f6:	4601      	mov	r1, r0
   2f5f8:	e9cd 3200 	strd	r3, r2, [sp]
   2f5fc:	4630      	mov	r0, r6
   2f5fe:	2304      	movs	r3, #4
   2f600:	4632      	mov	r2, r6
   2f602:	f7f1 fa83 	bl	20b0c <lfs_bd_read>
                    if (err) {
   2f606:	4604      	mov	r4, r0
   2f608:	2800      	cmp	r0, #0
   2f60a:	d098      	beq.n	2f53e <lfs_file_flushedwrite+0x17e>
   2f60c:	e73c      	b.n	2f488 <lfs_file_flushedwrite+0xc8>
        file->pos += diff;
   2f60e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2f610:	443b      	add	r3, r7
   2f612:	636b      	str	r3, [r5, #52]	; 0x34
        file->off += diff;
   2f614:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   2f616:	443b      	add	r3, r7
   2f618:	63eb      	str	r3, [r5, #60]	; 0x3c
        data += diff;
   2f61a:	9b07      	ldr	r3, [sp, #28]
   2f61c:	443b      	add	r3, r7
   2f61e:	9307      	str	r3, [sp, #28]
        nsize -= diff;
   2f620:	9b05      	ldr	r3, [sp, #20]
   2f622:	1bdb      	subs	r3, r3, r7
   2f624:	9305      	str	r3, [sp, #20]
    lfs->free.ack = lfs->cfg->block_count;
   2f626:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   2f628:	6a1b      	ldr	r3, [r3, #32]
   2f62a:	6633      	str	r3, [r6, #96]	; 0x60
}
   2f62c:	e704      	b.n	2f438 <lfs_file_flushedwrite+0x78>

0002f62e <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f62e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (file->flags & LFS_F_READING) {
   2f630:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f632:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
   2f634:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
   2f636:	4605      	mov	r5, r0
   2f638:	b097      	sub	sp, #92	; 0x5c
    if (file->flags & LFS_F_READING) {
   2f63a:	d508      	bpl.n	2f64e <lfs_file_flush+0x20>
        if (!(file->flags & LFS_F_INLINE)) {
   2f63c:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
   2f63e:	bf58      	it	pl
   2f640:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
   2f644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    rcache->block = LFS_BLOCK_NULL;
   2f648:	bf58      	it	pl
   2f64a:	6422      	strpl	r2, [r4, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
   2f64c:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
   2f64e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2f650:	038b      	lsls	r3, r1, #14
   2f652:	d402      	bmi.n	2f65a <lfs_file_flush+0x2c>
    return 0;
   2f654:	2000      	movs	r0, #0
}
   2f656:	b017      	add	sp, #92	; 0x5c
   2f658:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!(file->flags & LFS_F_INLINE)) {
   2f65a:	f411 1180 	ands.w	r1, r1, #1048576	; 0x100000
        lfs_off_t pos = file->pos;
   2f65e:	6b66      	ldr	r6, [r4, #52]	; 0x34
                .ctz.size = file->ctz.size,
   2f660:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
   2f662:	d13f      	bne.n	2f6e4 <lfs_file_flush+0xb6>
            lfs_file_t orig = {
   2f664:	2254      	movs	r2, #84	; 0x54
   2f666:	a801      	add	r0, sp, #4
   2f668:	f000 ffcb 	bl	30602 <memset>
   2f66c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2f66e:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
   2f672:	2301      	movs	r3, #1
   2f674:	af11      	add	r7, sp, #68	; 0x44
   2f676:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
   2f67a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2f67e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
   2f682:	f04f 37ff 	mov.w	r7, #4294967295
   2f686:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
   2f688:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2f68a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f68c:	429a      	cmp	r2, r3
   2f68e:	d312      	bcc.n	2f6b6 <lfs_file_flush+0x88>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
   2f690:	f104 0740 	add.w	r7, r4, #64	; 0x40
   2f694:	2301      	movs	r3, #1
   2f696:	462a      	mov	r2, r5
   2f698:	4639      	mov	r1, r7
   2f69a:	4628      	mov	r0, r5
   2f69c:	f7f2 fb5a 	bl	21d54 <lfs_bd_flush>
                if (err) {
   2f6a0:	b320      	cbz	r0, 2f6ec <lfs_file_flush+0xbe>
                    if (err == LFS_ERR_CORRUPT) {
   2f6a2:	f110 0f54 	cmn.w	r0, #84	; 0x54
   2f6a6:	d1d6      	bne.n	2f656 <lfs_file_flush+0x28>
                err = lfs_file_relocate(lfs, file);
   2f6a8:	4621      	mov	r1, r4
   2f6aa:	4628      	mov	r0, r5
   2f6ac:	f7f2 fda4 	bl	221f8 <lfs_file_relocate>
                if (err) {
   2f6b0:	2800      	cmp	r0, #0
   2f6b2:	d0ef      	beq.n	2f694 <lfs_file_flush+0x66>
   2f6b4:	e7cf      	b.n	2f656 <lfs_file_flush+0x28>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
   2f6b6:	2301      	movs	r3, #1
   2f6b8:	4628      	mov	r0, r5
   2f6ba:	f10d 0203 	add.w	r2, sp, #3
   2f6be:	a901      	add	r1, sp, #4
   2f6c0:	f7f2 f8ca 	bl	21858 <lfs_file_flushedread>
                if (res < 0) {
   2f6c4:	2800      	cmp	r0, #0
   2f6c6:	dbc6      	blt.n	2f656 <lfs_file_flush+0x28>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
   2f6c8:	2301      	movs	r3, #1
   2f6ca:	4621      	mov	r1, r4
   2f6cc:	4628      	mov	r0, r5
   2f6ce:	f10d 0203 	add.w	r2, sp, #3
   2f6d2:	f7ff fe75 	bl	2f3c0 <lfs_file_flushedwrite>
                if (res < 0) {
   2f6d6:	2800      	cmp	r0, #0
   2f6d8:	dbbd      	blt.n	2f656 <lfs_file_flush+0x28>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
   2f6da:	682b      	ldr	r3, [r5, #0]
   2f6dc:	3301      	adds	r3, #1
   2f6de:	d0d3      	beq.n	2f688 <lfs_file_flush+0x5a>
    rcache->block = LFS_BLOCK_NULL;
   2f6e0:	9711      	str	r7, [sp, #68]	; 0x44
   2f6e2:	e7d0      	b.n	2f686 <lfs_file_flush+0x58>
            file->pos = lfs_max(file->pos, file->ctz.size);
   2f6e4:	42be      	cmp	r6, r7
   2f6e6:	bf2c      	ite	cs
   2f6e8:	6366      	strcs	r6, [r4, #52]	; 0x34
   2f6ea:	6367      	strcc	r7, [r4, #52]	; 0x34
        file->ctz.head = file->block;
   2f6ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2f6ee:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
   2f6f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2f6f2:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
   2f6f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f6f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
   2f6fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        file->pos = pos;
   2f6fe:	e9c4 360c 	strd	r3, r6, [r4, #48]	; 0x30
   2f702:	e7a7      	b.n	2f654 <lfs_file_flush+0x26>

0002f704 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   2f704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f708:	b08d      	sub	sp, #52	; 0x34
   2f70a:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
   2f70c:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   2f70e:	4605      	mov	r5, r0
   2f710:	4617      	mov	r7, r2
   2f712:	4698      	mov	r8, r3
   2f714:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
    int err = lfs_dir_alloc(lfs, &tail);
   2f718:	f7ff fe14 	bl	2f344 <lfs_dir_alloc>
    if (err) {
   2f71c:	4606      	mov	r6, r0
   2f71e:	bb28      	cbnz	r0, 2f76c <lfs_dir_split+0x68>
    tail.split = dir->split;
   2f720:	7de3      	ldrb	r3, [r4, #23]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f722:	463a      	mov	r2, r7
    tail.split = dir->split;
   2f724:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   2f728:	69a3      	ldr	r3, [r4, #24]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f72a:	4628      	mov	r0, r5
    tail.tail[0] = dir->tail[0];
   2f72c:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   2f72e:	69e3      	ldr	r3, [r4, #28]
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f730:	a904      	add	r1, sp, #16
    tail.tail[1] = dir->tail[1];
   2f732:	930b      	str	r3, [sp, #44]	; 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   2f734:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2f738:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2f73c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2f73e:	9300      	str	r3, [sp, #0]
   2f740:	4643      	mov	r3, r8
   2f742:	f7f2 fe27 	bl	22394 <lfs_dir_compact>
    if (res < 0) {
   2f746:	2800      	cmp	r0, #0
   2f748:	db14      	blt.n	2f774 <lfs_dir_split+0x70>
    dir->split = true;
   2f74a:	2301      	movs	r3, #1
    dir->tail[0] = tail.pair[0];
   2f74c:	9f04      	ldr	r7, [sp, #16]
    dir->tail[1] = tail.pair[1];
   2f74e:	9a05      	ldr	r2, [sp, #20]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   2f750:	4620      	mov	r0, r4
    dir->tail[0] = tail.pair[0];
   2f752:	61a7      	str	r7, [r4, #24]
    dir->tail[1] = tail.pair[1];
   2f754:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   2f756:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   2f758:	f105 0120 	add.w	r1, r5, #32
   2f75c:	f7ff fb9e 	bl	2ee9c <lfs_pair_cmp>
   2f760:	b920      	cbnz	r0, 2f76c <lfs_dir_split+0x68>
   2f762:	f1b9 0f00 	cmp.w	r9, #0
   2f766:	d101      	bne.n	2f76c <lfs_dir_split+0x68>
        lfs->root[1] = tail.pair[1];
   2f768:	e9c5 7208 	strd	r7, r2, [r5, #32]
}
   2f76c:	4630      	mov	r0, r6
   2f76e:	b00d      	add	sp, #52	; 0x34
   2f770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f774:	4606      	mov	r6, r0
   2f776:	e7f9      	b.n	2f76c <lfs_dir_split+0x68>

0002f778 <lfs_file_rawseek>:
        lfs_soff_t off, int whence) {
   2f778:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f77c:	4606      	mov	r6, r0
   2f77e:	460d      	mov	r5, r1
   2f780:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
   2f782:	6b48      	ldr	r0, [r1, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   2f784:	b11b      	cbz	r3, 2f78e <lfs_file_rawseek+0x16>
    } else if (whence == LFS_SEEK_CUR) {
   2f786:	2b01      	cmp	r3, #1
   2f788:	d126      	bne.n	2f7d8 <lfs_file_rawseek+0x60>
        if ((lfs_soff_t)file->pos + off < 0) {
   2f78a:	1884      	adds	r4, r0, r2
        if (res < 0) {
   2f78c:	d429      	bmi.n	2f7e2 <lfs_file_rawseek+0x6a>
    if (npos > lfs->file_max) {
   2f78e:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2f790:	42a3      	cmp	r3, r4
   2f792:	d326      	bcc.n	2f7e2 <lfs_file_rawseek+0x6a>
    if (file->pos == npos) {
   2f794:	4284      	cmp	r4, r0
   2f796:	d01c      	beq.n	2f7d2 <lfs_file_rawseek+0x5a>
        !(file->flags & LFS_F_WRITING)
   2f798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    if (
   2f79a:	039b      	lsls	r3, r3, #14
   2f79c:	d42d      	bmi.n	2f7fa <lfs_file_rawseek+0x82>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
   2f79e:	f8d6 8068 	ldr.w	r8, [r6, #104]	; 0x68
   2f7a2:	4669      	mov	r1, sp
   2f7a4:	9000      	str	r0, [sp, #0]
   2f7a6:	4640      	mov	r0, r8
   2f7a8:	f7ff fca8 	bl	2f0fc <lfs_ctz_index.isra.0>
        int nindex = lfs_ctz_index(lfs, &noff);
   2f7ac:	a901      	add	r1, sp, #4
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
   2f7ae:	4607      	mov	r7, r0
        int nindex = lfs_ctz_index(lfs, &noff);
   2f7b0:	4640      	mov	r0, r8
        lfs_off_t noff = npos;
   2f7b2:	9401      	str	r4, [sp, #4]
        int nindex = lfs_ctz_index(lfs, &noff);
   2f7b4:	f7ff fca2 	bl	2f0fc <lfs_ctz_index.isra.0>
        if (oindex == nindex
   2f7b8:	4287      	cmp	r7, r0
   2f7ba:	d11e      	bne.n	2f7fa <lfs_file_rawseek+0x82>
                && noff >= file->cache.off
   2f7bc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2f7be:	9a01      	ldr	r2, [sp, #4]
   2f7c0:	4293      	cmp	r3, r2
   2f7c2:	d81a      	bhi.n	2f7fa <lfs_file_rawseek+0x82>
                && noff < file->cache.off + file->cache.size) {
   2f7c4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   2f7c6:	440b      	add	r3, r1
   2f7c8:	429a      	cmp	r2, r3
   2f7ca:	d216      	bcs.n	2f7fa <lfs_file_rawseek+0x82>
            file->pos = npos;
   2f7cc:	636c      	str	r4, [r5, #52]	; 0x34
            file->off = noff;
   2f7ce:	63ea      	str	r2, [r5, #60]	; 0x3c
    return npos;
   2f7d0:	4620      	mov	r0, r4
}
   2f7d2:	b002      	add	sp, #8
   2f7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (whence == LFS_SEEK_END) {
   2f7d8:	2b02      	cmp	r3, #2
   2f7da:	d005      	beq.n	2f7e8 <lfs_file_rawseek+0x70>
    if (npos > lfs->file_max) {
   2f7dc:	6f33      	ldr	r3, [r6, #112]	; 0x70
   2f7de:	4298      	cmp	r0, r3
   2f7e0:	d9f7      	bls.n	2f7d2 <lfs_file_rawseek+0x5a>
            return LFS_ERR_INVAL;
   2f7e2:	f06f 0015 	mvn.w	r0, #21
   2f7e6:	e7f4      	b.n	2f7d2 <lfs_file_rawseek+0x5a>
    if (file->flags & LFS_F_WRITING) {
   2f7e8:	e9d1 320b 	ldrd	r3, r2, [r1, #44]	; 0x2c
   2f7ec:	0392      	lsls	r2, r2, #14
   2f7ee:	d502      	bpl.n	2f7f6 <lfs_file_rawseek+0x7e>
	return (a > b) ? a : b;
   2f7f0:	4283      	cmp	r3, r0
   2f7f2:	bf38      	it	cc
   2f7f4:	4603      	movcc	r3, r0
        if (res < 0) {
   2f7f6:	18e4      	adds	r4, r4, r3
   2f7f8:	e7c8      	b.n	2f78c <lfs_file_rawseek+0x14>
    int err = lfs_file_flush(lfs, file);
   2f7fa:	4629      	mov	r1, r5
   2f7fc:	4630      	mov	r0, r6
   2f7fe:	f7ff ff16 	bl	2f62e <lfs_file_flush>
    if (err) {
   2f802:	2800      	cmp	r0, #0
   2f804:	d1e5      	bne.n	2f7d2 <lfs_file_rawseek+0x5a>
    file->pos = npos;
   2f806:	636c      	str	r4, [r5, #52]	; 0x34
   2f808:	e7e2      	b.n	2f7d0 <lfs_file_rawseek+0x58>

0002f80a <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
   2f80a:	b510      	push	{r4, lr}
   2f80c:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
   2f80e:	f7f3 f96b 	bl	22ae8 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
   2f812:	2800      	cmp	r0, #0
   2f814:	db06      	blt.n	2f824 <lfs_dir_commit+0x1a>
    if (orphans) {
   2f816:	d005      	beq.n	2f824 <lfs_dir_commit+0x1a>
        int err = lfs_fs_deorphan(lfs, false);
   2f818:	4620      	mov	r0, r4
}
   2f81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        int err = lfs_fs_deorphan(lfs, false);
   2f81e:	2100      	movs	r1, #0
   2f820:	f7f3 bb00 	b.w	22e24 <lfs_fs_deorphan>
}
   2f824:	bd10      	pop	{r4, pc}

0002f826 <lfs_file_rawsync>:
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f826:	b570      	push	{r4, r5, r6, lr}
    if (file->flags & LFS_F_ERRED) {
   2f828:	6b0b      	ldr	r3, [r1, #48]	; 0x30
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f82a:	4605      	mov	r5, r0
    if (file->flags & LFS_F_ERRED) {
   2f82c:	031e      	lsls	r6, r3, #12
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
   2f82e:	460c      	mov	r4, r1
   2f830:	b086      	sub	sp, #24
    if (file->flags & LFS_F_ERRED) {
   2f832:	d440      	bmi.n	2f8b6 <lfs_file_rawsync+0x90>
    int err = lfs_file_flush(lfs, file);
   2f834:	f7ff fefb 	bl	2f62e <lfs_file_flush>
    if (err) {
   2f838:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2f83a:	b120      	cbz	r0, 2f846 <lfs_file_rawsync+0x20>
        file->flags |= LFS_F_ERRED;
   2f83c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   2f840:	6322      	str	r2, [r4, #48]	; 0x30
}
   2f842:	b006      	add	sp, #24
   2f844:	bd70      	pop	{r4, r5, r6, pc}
    if ((file->flags & LFS_F_DIRTY) &&
   2f846:	03d1      	lsls	r1, r2, #15
   2f848:	d535      	bpl.n	2f8b6 <lfs_file_rawsync+0x90>
            !lfs_pair_isnull(file->m.pair)) {
   2f84a:	f104 0608 	add.w	r6, r4, #8
   2f84e:	4630      	mov	r0, r6
   2f850:	f7ff fb1a 	bl	2ee88 <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
   2f854:	2800      	cmp	r0, #0
   2f856:	d12e      	bne.n	2f8b6 <lfs_file_rawsync+0x90>
        if (file->flags & LFS_F_INLINE) {
   2f858:	02d3      	lsls	r3, r2, #11
            ctz = file->ctz;
   2f85a:	bf5f      	itttt	pl
   2f85c:	466b      	movpl	r3, sp
   2f85e:	e9d4 010a 	ldrdpl	r0, r1, [r4, #40]	; 0x28
            size = sizeof(ctz);
   2f862:	2208      	movpl	r2, #8
            ctz = file->ctz;
   2f864:	e9c3 0100 	strdpl	r0, r1, [r3]
            type = LFS_TYPE_INLINESTRUCT;
   2f868:	bf4c      	ite	mi
   2f86a:	f240 2001 	movwmi	r0, #513	; 0x201
            type = LFS_TYPE_CTZSTRUCT;
   2f86e:	f240 2002 	movwpl	r0, #514	; 0x202
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f872:	88a1      	ldrh	r1, [r4, #4]
            size = file->ctz.size;
   2f874:	bf44      	itt	mi
   2f876:	6ae2      	ldrmi	r2, [r4, #44]	; 0x2c
            buffer = file->cache.buffer;
   2f878:	6ce3      	ldrmi	r3, [r4, #76]	; 0x4c
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   2f87a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
   2f87e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
   2f882:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f886:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2f888:	4628      	mov	r0, r5
   2f88a:	6893      	ldr	r3, [r2, #8]
   2f88c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
   2f890:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   2f894:	9304      	str	r3, [sp, #16]
   2f896:	6853      	ldr	r3, [r2, #4]
   2f898:	4631      	mov	r1, r6
   2f89a:	9305      	str	r3, [sp, #20]
   2f89c:	aa02      	add	r2, sp, #8
   2f89e:	2302      	movs	r3, #2
   2f8a0:	f7ff ffb3 	bl	2f80a <lfs_dir_commit>
        if (err) {
   2f8a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2f8a6:	b118      	cbz	r0, 2f8b0 <lfs_file_rawsync+0x8a>
            file->flags |= LFS_F_ERRED;
   2f8a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   2f8ac:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   2f8ae:	e7c8      	b.n	2f842 <lfs_file_rawsync+0x1c>
        file->flags &= ~LFS_F_DIRTY;
   2f8b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   2f8b4:	6323      	str	r3, [r4, #48]	; 0x30
        return 0;
   2f8b6:	2000      	movs	r0, #0
   2f8b8:	e7c3      	b.n	2f842 <lfs_file_rawsync+0x1c>

0002f8ba <lfs_file_rawclose>:
static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
   2f8ba:	b570      	push	{r4, r5, r6, lr}
   2f8bc:	4605      	mov	r5, r0
   2f8be:	460c      	mov	r4, r1
    int err = lfs_file_rawsync(lfs, file);
   2f8c0:	f7ff ffb1 	bl	2f826 <lfs_file_rawsync>
   2f8c4:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2f8c8:	f105 0228 	add.w	r2, r5, #40	; 0x28
   2f8cc:	b11b      	cbz	r3, 2f8d6 <lfs_file_rawclose+0x1c>
        if (*p == mlist) {
   2f8ce:	429c      	cmp	r4, r3
            *p = (*p)->next;
   2f8d0:	6819      	ldr	r1, [r3, #0]
        if (*p == mlist) {
   2f8d2:	d108      	bne.n	2f8e6 <lfs_file_rawclose+0x2c>
            *p = (*p)->next;
   2f8d4:	6011      	str	r1, [r2, #0]
    if (!file->cfg->buffer) {
   2f8d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2f8d8:	681b      	ldr	r3, [r3, #0]
   2f8da:	b913      	cbnz	r3, 2f8e2 <lfs_file_rawclose+0x28>
	free(p);
   2f8dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2f8de:	f7f8 ff01 	bl	286e4 <free>
}
   2f8e2:	4630      	mov	r0, r6
   2f8e4:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f8e6:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f8e8:	460b      	mov	r3, r1
   2f8ea:	e7ef      	b.n	2f8cc <lfs_file_rawclose+0x12>

0002f8ec <lfs_unmount>:
    return lfs_deinit(lfs);
   2f8ec:	f7ff bb3e 	b.w	2ef6c <lfs_deinit>

0002f8f0 <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   2f8f0:	b530      	push	{r4, r5, lr}
   2f8f2:	b08b      	sub	sp, #44	; 0x2c
   2f8f4:	9101      	str	r1, [sp, #4]
   2f8f6:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f8f8:	2300      	movs	r3, #0
   2f8fa:	aa01      	add	r2, sp, #4
   2f8fc:	a902      	add	r1, sp, #8
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   2f8fe:	4604      	mov	r4, r0
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   2f900:	f7f1 ff04 	bl	2170c <lfs_dir_find>
    if (tag < 0) {
   2f904:	2800      	cmp	r0, #0
   2f906:	db06      	blt.n	2f916 <lfs_stat+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   2f908:	f3c0 2289 	ubfx	r2, r0, #10, #10
   2f90c:	462b      	mov	r3, r5
   2f90e:	4620      	mov	r0, r4
   2f910:	a902      	add	r1, sp, #8
   2f912:	f7f1 fa7f 	bl	20e14 <lfs_dir_getinfo>
}
   2f916:	b00b      	add	sp, #44	; 0x2c
   2f918:	bd30      	pop	{r4, r5, pc}

0002f91a <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f91a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2f91c:	f100 0228 	add.w	r2, r0, #40	; 0x28
   2f920:	b11b      	cbz	r3, 2f92a <lfs_dir_close+0x10>
        if (*p == mlist) {
   2f922:	4299      	cmp	r1, r3
            *p = (*p)->next;
   2f924:	6818      	ldr	r0, [r3, #0]
        if (*p == mlist) {
   2f926:	d102      	bne.n	2f92e <lfs_dir_close+0x14>
            *p = (*p)->next;
   2f928:	6010      	str	r0, [r2, #0]
}
   2f92a:	2000      	movs	r0, #0
   2f92c:	4770      	bx	lr
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   2f92e:	461a      	mov	r2, r3
            *p = (*p)->next;
   2f930:	4603      	mov	r3, r0
   2f932:	e7f5      	b.n	2f920 <lfs_dir_close+0x6>

0002f934 <lfs_fs_size>:
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);

    lfs_ssize_t res = lfs_fs_rawsize(lfs);
   2f934:	f7f2 b8a2 	b.w	21a7c <lfs_fs_rawsize>

0002f938 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   2f938:	b410      	push	{r4}
	if (!io->ops.offset_to_phys) {
   2f93a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   2f93c:	4602      	mov	r2, r0
   2f93e:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   2f940:	b984      	cbnz	r4, 2f964 <metal_io_phys+0x2c>
		unsigned long page = (io->page_shift >=
   2f942:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
   2f944:	291f      	cmp	r1, #31
   2f946:	bf98      	it	ls
   2f948:	fa23 f401 	lsrls.w	r4, r3, r1
		return (io->physmap && offset < io->size
   2f94c:	6841      	ldr	r1, [r0, #4]
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   2f94e:	b161      	cbz	r1, 2f96a <metal_io_phys+0x32>
		return (io->physmap && offset < io->size
   2f950:	6880      	ldr	r0, [r0, #8]
   2f952:	4283      	cmp	r3, r0
   2f954:	d209      	bcs.n	2f96a <metal_io_phys+0x32>
			? io->physmap[page] + (offset & io->page_mask)
   2f956:	6910      	ldr	r0, [r2, #16]
   2f958:	4018      	ands	r0, r3
			: METAL_BAD_PHYS);
   2f95a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2f95e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   2f960:	bc10      	pop	{r4}
   2f962:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   2f964:	4623      	mov	r3, r4
}
   2f966:	bc10      	pop	{r4}
	return io->ops.offset_to_phys(io, offset);
   2f968:	4718      	bx	r3
			: METAL_BAD_PHYS);
   2f96a:	f04f 30ff 	mov.w	r0, #4294967295
   2f96e:	e7f7      	b.n	2f960 <metal_io_phys+0x28>

0002f970 <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   2f970:	b570      	push	{r4, r5, r6, lr}
	if (!io->ops.phys_to_offset) {
   2f972:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
   2f974:	4605      	mov	r5, r0
   2f976:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   2f978:	b9e3      	cbnz	r3, 2f9b4 <metal_io_phys_to_virt+0x44>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   2f97a:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   2f97c:	1c62      	adds	r2, r4, #1
   2f97e:	bf09      	itett	eq
   2f980:	6843      	ldreq	r3, [r0, #4]
   2f982:	400c      	andne	r4, r1
   2f984:	681c      	ldreq	r4, [r3, #0]
   2f986:	1b0c      	subeq	r4, r1, r4
			if (metal_io_phys(io, offset) == phys)
   2f988:	4621      	mov	r1, r4
   2f98a:	4628      	mov	r0, r5
   2f98c:	f7ff ffd4 	bl	2f938 <metal_io_phys>
   2f990:	4286      	cmp	r6, r0
   2f992:	d007      	beq.n	2f9a4 <metal_io_phys_to_virt+0x34>
			offset += io->page_mask + 1;
   2f994:	692b      	ldr	r3, [r5, #16]
   2f996:	3301      	adds	r3, #1
   2f998:	441c      	add	r4, r3
		} while (offset < io->size);
   2f99a:	68ab      	ldr	r3, [r5, #8]
   2f99c:	429c      	cmp	r4, r3
   2f99e:	d3f3      	bcc.n	2f988 <metal_io_phys_to_virt+0x18>
		return METAL_BAD_OFFSET;
   2f9a0:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   2f9a4:	6828      	ldr	r0, [r5, #0]
		: NULL);
   2f9a6:	1c43      	adds	r3, r0, #1
   2f9a8:	d007      	beq.n	2f9ba <metal_io_phys_to_virt+0x4a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   2f9aa:	68ab      	ldr	r3, [r5, #8]
   2f9ac:	42a3      	cmp	r3, r4
   2f9ae:	d904      	bls.n	2f9ba <metal_io_phys_to_virt+0x4a>
		? (void *)((uintptr_t)io->virt + offset)
   2f9b0:	4420      	add	r0, r4
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
}
   2f9b2:	bd70      	pop	{r4, r5, r6, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   2f9b4:	4798      	blx	r3
   2f9b6:	4604      	mov	r4, r0
   2f9b8:	e7f4      	b.n	2f9a4 <metal_io_phys_to_virt+0x34>
		: NULL);
   2f9ba:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   2f9bc:	e7f9      	b.n	2f9b2 <metal_io_phys_to_virt+0x42>

0002f9be <virtqueue_create>:
{
   2f9be:	b530      	push	{r4, r5, lr}
   2f9c0:	9c05      	ldr	r4, [sp, #20]
		vq->vq_name = name;
   2f9c2:	e9c4 0200 	strd	r0, r2, [r4]
		vq->callback = callback;
   2f9c6:	9a03      	ldr	r2, [sp, #12]
		vq->vq_queue_index = id;
   2f9c8:	8121      	strh	r1, [r4, #8]
		vq->vq_nentries = ring->num_descs;
   2f9ca:	8919      	ldrh	r1, [r3, #8]
		vq->callback = callback;
   2f9cc:	60e2      	str	r2, [r4, #12]
		vq->notify = notify;
   2f9ce:	9a04      	ldr	r2, [sp, #16]
		vq->vq_nentries = ring->num_descs;
   2f9d0:	8161      	strh	r1, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   2f9d2:	84a1      	strh	r1, [r4, #36]	; 0x24
		vq->notify = notify;
   2f9d4:	6122      	str	r2, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   2f9d6:	e9d3 2500 	ldrd	r2, r5, [r3]
static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2f9da:	eb02 1301 	add.w	r3, r2, r1, lsl #4
	vr->desc = (struct vring_desc *)p;
   2f9de:	e9c4 1205 	strd	r1, r2, [r4, #20]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2f9e2:	1c8a      	adds	r2, r1, #2
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   2f9e4:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   2f9e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	      align - 1) & ~(align - 1));
   2f9ea:	1c6a      	adds	r2, r5, #1
   2f9ec:	4413      	add	r3, r2
   2f9ee:	426d      	negs	r5, r5
   2f9f0:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   2f9f2:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2f9f4:	6983      	ldr	r3, [r0, #24]
   2f9f6:	b953      	cbnz	r3, 2fa0e <virtqueue_create+0x50>
		int i;

		for (i = 0; i < size - 1; i++)
   2f9f8:	3901      	subs	r1, #1
			vr->desc[i].next = i + 1;
   2f9fa:	69a2      	ldr	r2, [r4, #24]
		for (i = 0; i < size - 1; i++)
   2f9fc:	428b      	cmp	r3, r1
			vr->desc[i].next = i + 1;
   2f9fe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		for (i = 0; i < size - 1; i++)
   2fa02:	db06      	blt.n	2fa12 <virtqueue_create+0x54>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   2fa04:	2300      	movs	r3, #0
   2fa06:	7393      	strb	r3, [r2, #14]
   2fa08:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2fa0c:	73d3      	strb	r3, [r2, #15]
}
   2fa0e:	2000      	movs	r0, #0
   2fa10:	bd30      	pop	{r4, r5, pc}
			vr->desc[i].next = i + 1;
   2fa12:	3301      	adds	r3, #1
   2fa14:	81d3      	strh	r3, [r2, #14]
		for (i = 0; i < size - 1; i++)
   2fa16:	e7f0      	b.n	2f9fa <virtqueue_create+0x3c>

0002fa18 <virtqueue_add_buffer>:
{
   2fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		head_idx = vq->vq_desc_head_idx;
   2fa1c:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	; 0x2c
{
   2fa20:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa22:	4655      	mov	r5, sl
   2fa24:	2600      	movs	r6, #0
{
   2fa26:	b085      	sub	sp, #20
	needed = readable + writable;
   2fa28:	eb02 0803 	add.w	r8, r2, r3
{
   2fa2c:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   2fa2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2fa30:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
		dxp->ndescs = needed;
   2fa34:	fa1f fb88 	uxth.w	fp, r8
		dxp->cookie = cookie;
   2fa38:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   2fa3a:	f8a3 b038 	strh.w	fp, [r3, #56]	; 0x38
		if (i < needed - 1)
   2fa3e:	f108 32ff 	add.w	r2, r8, #4294967295
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   2fa42:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa44:	1d0f      	adds	r7, r1, #4
		if (i < needed - 1)
   2fa46:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2fa48:	45b0      	cmp	r8, r6
   2fa4a:	dc1a      	bgt.n	2fa82 <virtqueue_add_buffer+0x6a>
		vq->vq_free_cnt -= needed;
   2fa4c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		vq->vq_desc_head_idx = idx;
   2fa4e:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   2fa50:	eba3 030b 	sub.w	r3, r3, fp
   2fa54:	84a3      	strh	r3, [r4, #36]	; 0x24
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 *
	 * CACHE: avail is never written by remote, so it is safe to not invalidate here
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   2fa56:	69e3      	ldr	r3, [r4, #28]
   2fa58:	8961      	ldrh	r1, [r4, #10]
   2fa5a:	885a      	ldrh	r2, [r3, #2]
   2fa5c:	3901      	subs	r1, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   2fa5e:	400a      	ands	r2, r1
   2fa60:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2fa64:	f8a3 a004 	strh.w	sl, [r3, #4]

	/* We still need to flush the ring */
	VRING_FLUSH(vq->vq_ring.avail->ring[avail_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   2fa68:	f3bf 8f5b 	dmb	ish
}
   2fa6c:	2000      	movs	r0, #0

	vq->vq_ring.avail->idx++;
   2fa6e:	69e2      	ldr	r2, [r4, #28]
   2fa70:	8853      	ldrh	r3, [r2, #2]
   2fa72:	3301      	adds	r3, #1
   2fa74:	8053      	strh	r3, [r2, #2]

	/* And the index */
	VRING_FLUSH(vq->vq_ring.avail->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   2fa76:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   2fa78:	3301      	adds	r3, #1
   2fa7a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2fa7c:	b005      	add	sp, #20
   2fa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   2fa82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2fa84:	012a      	lsls	r2, r5, #4
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fa86:	f857 1c04 	ldr.w	r1, [r7, #-4]
   2fa8a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   2fa8e:	9302      	str	r3, [sp, #8]
   2fa90:	6803      	ldr	r3, [r0, #0]
   2fa92:	9203      	str	r2, [sp, #12]
   2fa94:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   2fa96:	6883      	ldr	r3, [r0, #8]
   2fa98:	3708      	adds	r7, #8
   2fa9a:	4299      	cmp	r1, r3
   2fa9c:	bf28      	it	cs
   2fa9e:	f04f 31ff 	movcs.w	r1, #4294967295
   2faa2:	f7ff ff49 	bl	2f938 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   2faa6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2faaa:	5098      	str	r0, [r3, r2]
   2faac:	2200      	movs	r2, #0
   2faae:	606a      	str	r2, [r5, #4]
		dp->len = buf_list[i].len;
   2fab0:	f857 2c08 	ldr.w	r2, [r7, #-8]
   2fab4:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   2fab6:	9a01      	ldr	r2, [sp, #4]
   2fab8:	4296      	cmp	r6, r2
   2faba:	bfac      	ite	ge
   2fabc:	2200      	movge	r2, #0
   2fabe:	2201      	movlt	r2, #1
		if (i >= readable)
   2fac0:	45b1      	cmp	r9, r6
			dp->flags |= VRING_DESC_F_WRITE;
   2fac2:	bfd8      	it	le
   2fac4:	f042 0202 	orrle.w	r2, r2, #2
   2fac8:	81aa      	strh	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   2faca:	3601      	adds	r6, #1
   2facc:	89ed      	ldrh	r5, [r5, #14]
   2face:	e7bb      	b.n	2fa48 <virtqueue_add_buffer+0x30>

0002fad0 <virtqueue_get_buffer>:
{
   2fad0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   2fad2:	b350      	cbz	r0, 2fb2a <virtqueue_get_buffer+0x5a>
   2fad4:	6a05      	ldr	r5, [r0, #32]
   2fad6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
   2fad8:	886b      	ldrh	r3, [r5, #2]
   2fada:	42a3      	cmp	r3, r4
   2fadc:	d030      	beq.n	2fb40 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2fade:	1c63      	adds	r3, r4, #1
   2fae0:	85c3      	strh	r3, [r0, #46]	; 0x2e
   2fae2:	8943      	ldrh	r3, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   2fae4:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   2fae8:	3b01      	subs	r3, #1
   2faea:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   2faec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2faf0:	686b      	ldr	r3, [r5, #4]
   2faf2:	b29e      	uxth	r6, r3
	if (len)
   2faf4:	b109      	cbz	r1, 2fafa <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   2faf6:	68ad      	ldr	r5, [r5, #8]
   2faf8:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   2fafa:	f8d0 c018 	ldr.w	ip, [r0, #24]
   2fafe:	b29b      	uxth	r3, r3
   2fb00:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   2fb04:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2fb08:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   2fb0a:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   2fb0c:	442f      	add	r7, r5
	dxp->ndescs--;
   2fb0e:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   2fb10:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   2fb12:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   2fb14:	898d      	ldrh	r5, [r1, #12]
   2fb16:	076f      	lsls	r7, r5, #29
   2fb18:	d50e      	bpl.n	2fb38 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   2fb1a:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   2fb1c:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   2fb1e:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   2fb20:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   2fb22:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   2fb24:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   2fb26:	b102      	cbz	r2, 2fb2a <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   2fb28:	8014      	strh	r4, [r2, #0]
}
   2fb2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   2fb2c:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   2fb2e:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   2fb30:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   2fb32:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   2fb36:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   2fb38:	898d      	ldrh	r5, [r1, #12]
   2fb3a:	07ed      	lsls	r5, r5, #31
   2fb3c:	d4f6      	bmi.n	2fb2c <virtqueue_get_buffer+0x5c>
   2fb3e:	e7ec      	b.n	2fb1a <virtqueue_get_buffer+0x4a>
		return NULL;
   2fb40:	2000      	movs	r0, #0
   2fb42:	e7f2      	b.n	2fb2a <virtqueue_get_buffer+0x5a>

0002fb44 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   2fb44:	6983      	ldr	r3, [r0, #24]
   2fb46:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   2fb4a:	6898      	ldr	r0, [r3, #8]
   2fb4c:	4770      	bx	lr

0002fb4e <virtqueue_get_available_buffer>:
{
   2fb4e:	b570      	push	{r4, r5, r6, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2fb50:	f3bf 8f5b 	dmb	ish
{
   2fb54:	460d      	mov	r5, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb56:	69c1      	ldr	r1, [r0, #28]
{
   2fb58:	4616      	mov	r6, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb5a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   2fb5c:	884a      	ldrh	r2, [r1, #2]
{
   2fb5e:	4604      	mov	r4, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fb60:	429a      	cmp	r2, r3
   2fb62:	d016      	beq.n	2fb92 <virtqueue_get_available_buffer+0x44>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   2fb64:	1c5a      	adds	r2, r3, #1
   2fb66:	8602      	strh	r2, [r0, #48]	; 0x30
   2fb68:	8942      	ldrh	r2, [r0, #10]
   2fb6a:	3a01      	subs	r2, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   2fb6c:	4013      	ands	r3, r2
   2fb6e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2fb72:	888a      	ldrh	r2, [r1, #4]
   2fb74:	802a      	strh	r2, [r5, #0]
   2fb76:	b293      	uxth	r3, r2
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   2fb78:	6982      	ldr	r2, [r0, #24]
   2fb7a:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   2fb7c:	58d1      	ldr	r1, [r2, r3]
   2fb7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2fb80:	f7ff fef6 	bl	2f970 <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   2fb84:	882a      	ldrh	r2, [r5, #0]
   2fb86:	69a3      	ldr	r3, [r4, #24]
   2fb88:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2fb8c:	689b      	ldr	r3, [r3, #8]
   2fb8e:	6033      	str	r3, [r6, #0]
}
   2fb90:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2fb92:	2000      	movs	r0, #0
   2fb94:	e7fc      	b.n	2fb90 <virtqueue_get_available_buffer+0x42>

0002fb96 <virtqueue_disable_cb>:
{
   2fb96:	b510      	push	{r4, lr}
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fb98:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fb9a:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fb9c:	6912      	ldr	r2, [r2, #16]
   2fb9e:	0092      	lsls	r2, r2, #2
   2fba0:	d517      	bpl.n	2fbd2 <virtqueue_disable_cb+0x3c>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fba2:	b943      	cbnz	r3, 2fbb6 <virtqueue_disable_cb+0x20>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2fba4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
			vring_used_event(&vq->vq_ring) =
   2fba6:	69c2      	ldr	r2, [r0, #28]
   2fba8:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   2fbaa:	8944      	ldrh	r4, [r0, #10]
   2fbac:	3b01      	subs	r3, #1
   2fbae:	1b1b      	subs	r3, r3, r4
			vring_used_event(&vq->vq_ring) =
   2fbb0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2fbb4:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fbb6:	6803      	ldr	r3, [r0, #0]
   2fbb8:	699b      	ldr	r3, [r3, #24]
   2fbba:	2b01      	cmp	r3, #1
   2fbbc:	d108      	bne.n	2fbd0 <virtqueue_disable_cb+0x3a>
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2fbbe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
			vring_avail_event(&vq->vq_ring) =
   2fbc0:	6a02      	ldr	r2, [r0, #32]
   2fbc2:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   2fbc4:	8940      	ldrh	r0, [r0, #10]
   2fbc6:	3b01      	subs	r3, #1
   2fbc8:	1a1b      	subs	r3, r3, r0
			vring_avail_event(&vq->vq_ring) =
   2fbca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   2fbce:	8093      	strh	r3, [r2, #4]
}
   2fbd0:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fbd2:	b923      	cbnz	r3, 2fbde <virtqueue_disable_cb+0x48>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   2fbd4:	69c2      	ldr	r2, [r0, #28]
   2fbd6:	8813      	ldrh	r3, [r2, #0]
   2fbd8:	f043 0301 	orr.w	r3, r3, #1
   2fbdc:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fbde:	6803      	ldr	r3, [r0, #0]
   2fbe0:	699b      	ldr	r3, [r3, #24]
   2fbe2:	2b01      	cmp	r3, #1
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   2fbe4:	bf01      	itttt	eq
   2fbe6:	6a02      	ldreq	r2, [r0, #32]
   2fbe8:	8813      	ldrheq	r3, [r2, #0]
   2fbea:	f043 0301 	orreq.w	r3, r3, #1
   2fbee:	8013      	strheq	r3, [r2, #0]
}
   2fbf0:	e7ee      	b.n	2fbd0 <virtqueue_disable_cb+0x3a>

0002fbf2 <virtqueue_kick>:
{
   2fbf2:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   2fbf4:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fbf8:	6803      	ldr	r3, [r0, #0]
{
   2fbfa:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   2fbfc:	691a      	ldr	r2, [r3, #16]
   2fbfe:	699b      	ldr	r3, [r3, #24]
   2fc00:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   2fc04:	d01a      	beq.n	2fc3c <virtqueue_kick+0x4a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fc06:	b97b      	cbnz	r3, 2fc28 <virtqueue_kick+0x36>
			/* CACHE: no need to invalidate avail */
			new_idx = vq->vq_ring.avail->idx;
   2fc08:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_avail_event(&vq->vq_ring));
			event_idx = vring_avail_event(&vq->vq_ring);
   2fc0a:	6a02      	ldr	r2, [r0, #32]
			new_idx = vq->vq_ring.avail->idx;
   2fc0c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   2fc0e:	6941      	ldr	r1, [r0, #20]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   2fc10:	3b01      	subs	r3, #1
   2fc12:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			/* CACHE: no need to invalidate used */
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			VRING_INVALIDATE(vring_used_event(&vq->vq_ring));
			event_idx = vring_used_event(&vq->vq_ring);
   2fc16:	8892      	ldrh	r2, [r2, #4]
   2fc18:	1a9b      	subs	r3, r3, r2
	if (vq_ring_must_notify(vq))
   2fc1a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2fc1c:	b29b      	uxth	r3, r3
   2fc1e:	429a      	cmp	r2, r3
   2fc20:	d814      	bhi.n	2fc4c <virtqueue_kick+0x5a>
	vq->vq_queued_cnt = 0;
   2fc22:	2300      	movs	r3, #0
   2fc24:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   2fc26:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fc28:	2b01      	cmp	r3, #1
   2fc2a:	d1fa      	bne.n	2fc22 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   2fc2c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   2fc2e:	69c2      	ldr	r2, [r0, #28]
			new_idx = vq->vq_ring.used->idx;
   2fc30:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   2fc32:	6941      	ldr	r1, [r0, #20]
   2fc34:	3b01      	subs	r3, #1
   2fc36:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   2fc3a:	e7ec      	b.n	2fc16 <virtqueue_kick+0x24>
						prev_idx) != 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	} else {
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   2fc3c:	b963      	cbnz	r3, 2fc58 <virtqueue_kick+0x66>
			VRING_INVALIDATE(vq->vq_ring.used->flags);
			return (vq->vq_ring.used->flags &
   2fc3e:	6a03      	ldr	r3, [r0, #32]
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
			VRING_INVALIDATE(vq->vq_ring.avail->flags);
			return (vq->vq_ring.avail->flags &
   2fc40:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   2fc42:	43db      	mvns	r3, r3
   2fc44:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   2fc48:	2b00      	cmp	r3, #0
   2fc4a:	d0ea      	beq.n	2fc22 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   2fc4c:	6923      	ldr	r3, [r4, #16]
   2fc4e:	2b00      	cmp	r3, #0
   2fc50:	d0e7      	beq.n	2fc22 <virtqueue_kick+0x30>
		vq->notify(vq);
   2fc52:	4620      	mov	r0, r4
   2fc54:	4798      	blx	r3
   2fc56:	e7e4      	b.n	2fc22 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   2fc58:	2b01      	cmp	r3, #1
   2fc5a:	d1e2      	bne.n	2fc22 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   2fc5c:	69c3      	ldr	r3, [r0, #28]
   2fc5e:	e7ef      	b.n	2fc40 <virtqueue_kick+0x4e>

0002fc60 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   2fc60:	69c3      	ldr	r3, [r0, #28]
   2fc62:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   2fc64:	8859      	ldrh	r1, [r3, #2]
   2fc66:	4291      	cmp	r1, r2
   2fc68:	d00a      	beq.n	2fc80 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   2fc6a:	8941      	ldrh	r1, [r0, #10]
   2fc6c:	3901      	subs	r1, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   2fc6e:	400a      	ands	r2, r1
   2fc70:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   2fc74:	889a      	ldrh	r2, [r3, #4]
   2fc76:	6983      	ldr	r3, [r0, #24]
   2fc78:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   2fc7c:	6898      	ldr	r0, [r3, #8]
	return len;
   2fc7e:	4770      	bx	lr
		return 0;
   2fc80:	2000      	movs	r0, #0
}
   2fc82:	4770      	bx	lr

0002fc84 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   2fc84:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   2fc88:	68c3      	ldr	r3, [r0, #12]
   2fc8a:	b103      	cbz	r3, 2fc8e <virtqueue_notification+0xa>
		vq->callback(vq);
   2fc8c:	4718      	bx	r3
}
   2fc8e:	4770      	bx	lr

0002fc90 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2fc90:	f04f 32ff 	mov.w	r2, #4294967295
   2fc94:	f04f 33ff 	mov.w	r3, #4294967295
   2fc98:	f7f5 bcea 	b.w	25670 <z_impl_k_sem_take>

0002fc9c <rpmsg_unregister_endpoint>:
{
   2fc9c:	b570      	push	{r4, r5, r6, lr}
   2fc9e:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   2fca0:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   2fca2:	f105 0658 	add.w	r6, r5, #88	; 0x58
   2fca6:	4630      	mov	r0, r6
   2fca8:	f7ff fff2 	bl	2fc90 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   2fcac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fcae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   2fcb2:	2b7f      	cmp	r3, #127	; 0x7f
   2fcb4:	d80b      	bhi.n	2fcce <rpmsg_unregister_endpoint+0x32>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2fcb6:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2fcb8:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   2fcba:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   2fcbc:	f003 031f 	and.w	r3, r3, #31
   2fcc0:	409a      	lsls	r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   2fcc2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
   2fcc6:	ea23 0302 	bic.w	r3, r3, r2
   2fcca:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	node->next->prev = node->prev;
   2fcce:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   2fcd2:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2fcd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
	metal_list_del(&ept->node);
   2fcd6:	f104 0334 	add.w	r3, r4, #52	; 0x34
   2fcda:	6011      	str	r1, [r2, #0]
	node->next = node;
   2fcdc:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   2fce0:	2300      	movs	r3, #0
   2fce2:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   2fce4:	4630      	mov	r0, r6
}
   2fce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fcea:	f7f5 bc7d 	b.w	255e8 <z_impl_k_sem_give>

0002fcee <rpmsg_send_ns_message>:
{
   2fcee:	b530      	push	{r4, r5, lr}
   2fcf0:	b08d      	sub	sp, #52	; 0x34
	ns_msg.addr = ept->addr;
   2fcf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
   2fcf4:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   2fcf6:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2fcf8:	2220      	movs	r2, #32
   2fcfa:	4601      	mov	r1, r0
   2fcfc:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   2fcfe:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   2fd00:	f000 fddf 	bl	308c2 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   2fd04:	2328      	movs	r3, #40	; 0x28
   2fd06:	2201      	movs	r2, #1
   2fd08:	4629      	mov	r1, r5
   2fd0a:	e9cd 3200 	strd	r3, r2, [sp]
   2fd0e:	4620      	mov	r0, r4
   2fd10:	2235      	movs	r2, #53	; 0x35
   2fd12:	ab02      	add	r3, sp, #8
   2fd14:	f7f4 f912 	bl	23f3c <rpmsg_send_offchannel_raw>
}
   2fd18:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2fd1c:	b00d      	add	sp, #52	; 0x34
   2fd1e:	bd30      	pop	{r4, r5, pc}

0002fd20 <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2fd20:	b128      	cbz	r0, 2fd2e <rpmsg_hold_rx_buffer+0xe>
   2fd22:	6a00      	ldr	r0, [r0, #32]
   2fd24:	b118      	cbz	r0, 2fd2e <rpmsg_hold_rx_buffer+0xe>
   2fd26:	b111      	cbz	r1, 2fd2e <rpmsg_hold_rx_buffer+0xe>
	if (rdev->ops.hold_rx_buffer)
   2fd28:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   2fd2a:	b103      	cbz	r3, 2fd2e <rpmsg_hold_rx_buffer+0xe>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   2fd2c:	4718      	bx	r3
}
   2fd2e:	4770      	bx	lr

0002fd30 <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   2fd30:	b130      	cbz	r0, 2fd40 <rpmsg_release_rx_buffer+0x10>
   2fd32:	6a00      	ldr	r0, [r0, #32]
   2fd34:	b120      	cbz	r0, 2fd40 <rpmsg_release_rx_buffer+0x10>
   2fd36:	b119      	cbz	r1, 2fd40 <rpmsg_release_rx_buffer+0x10>
	if (rdev->ops.release_rx_buffer)
   2fd38:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   2fd3c:	b103      	cbz	r3, 2fd40 <rpmsg_release_rx_buffer+0x10>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   2fd3e:	4718      	bx	r3
}
   2fd40:	4770      	bx	lr

0002fd42 <rpmsg_get_tx_payload_buffer>:
	if (!ept || !ept->rdev || !len)
   2fd42:	b130      	cbz	r0, 2fd52 <rpmsg_get_tx_payload_buffer+0x10>
   2fd44:	6a00      	ldr	r0, [r0, #32]
   2fd46:	b120      	cbz	r0, 2fd52 <rpmsg_get_tx_payload_buffer+0x10>
   2fd48:	b119      	cbz	r1, 2fd52 <rpmsg_get_tx_payload_buffer+0x10>
	if (rdev->ops.get_tx_payload_buffer)
   2fd4a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   2fd4e:	b103      	cbz	r3, 2fd52 <rpmsg_get_tx_payload_buffer+0x10>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   2fd50:	4718      	bx	r3
}
   2fd52:	2000      	movs	r0, #0
   2fd54:	4770      	bx	lr

0002fd56 <rpmsg_get_endpoint>:
{
   2fd56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fd5a:	4606      	mov	r6, r0
   2fd5c:	4688      	mov	r8, r1
   2fd5e:	4617      	mov	r7, r2
   2fd60:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   2fd62:	6804      	ldr	r4, [r0, #0]
   2fd64:	42a6      	cmp	r6, r4
   2fd66:	d101      	bne.n	2fd6c <rpmsg_get_endpoint+0x16>
	return NULL;
   2fd68:	2500      	movs	r5, #0
   2fd6a:	e023      	b.n	2fdb4 <rpmsg_get_endpoint+0x5e>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd6c:	1c7a      	adds	r2, r7, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fd6e:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fd72:	d002      	beq.n	2fd7a <rpmsg_get_endpoint+0x24>
   2fd74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2fd76:	42bb      	cmp	r3, r7
   2fd78:	d01c      	beq.n	2fdb4 <rpmsg_get_endpoint+0x5e>
		if (name)
   2fd7a:	f1b8 0f00 	cmp.w	r8, #0
   2fd7e:	d101      	bne.n	2fd84 <rpmsg_get_endpoint+0x2e>
	metal_list_for_each(&rdev->endpoints, node) {
   2fd80:	6824      	ldr	r4, [r4, #0]
   2fd82:	e7ef      	b.n	2fd64 <rpmsg_get_endpoint+0xe>
			name_match = !strncmp(ept->name, name,
   2fd84:	2220      	movs	r2, #32
   2fd86:	4641      	mov	r1, r8
   2fd88:	4628      	mov	r0, r5
   2fd8a:	f000 fd88 	bl	3089e <strncmp>
		if (!name || !name_match)
   2fd8e:	2800      	cmp	r0, #0
   2fd90:	d1f6      	bne.n	2fd80 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   2fd92:	f1b9 3fff 	cmp.w	r9, #4294967295
   2fd96:	d002      	beq.n	2fd9e <rpmsg_get_endpoint+0x48>
   2fd98:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2fd9a:	454b      	cmp	r3, r9
   2fd9c:	d00a      	beq.n	2fdb4 <rpmsg_get_endpoint+0x5e>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2fd9e:	1c7b      	adds	r3, r7, #1
   2fda0:	d00b      	beq.n	2fdba <rpmsg_get_endpoint+0x64>
	metal_list_for_each(&rdev->endpoints, node) {
   2fda2:	6824      	ldr	r4, [r4, #0]
   2fda4:	42b4      	cmp	r4, r6
   2fda6:	d0df      	beq.n	2fd68 <rpmsg_get_endpoint+0x12>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fda8:	f854 3c10 	ldr.w	r3, [r4, #-16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fdac:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fdb0:	429f      	cmp	r7, r3
   2fdb2:	d1e7      	bne.n	2fd84 <rpmsg_get_endpoint+0x2e>
}
   2fdb4:	4628      	mov	r0, r5
   2fdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   2fdba:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2fdbc:	3301      	adds	r3, #1
   2fdbe:	d0f9      	beq.n	2fdb4 <rpmsg_get_endpoint+0x5e>
	metal_list_for_each(&rdev->endpoints, node) {
   2fdc0:	6824      	ldr	r4, [r4, #0]
   2fdc2:	42b4      	cmp	r4, r6
   2fdc4:	d0d0      	beq.n	2fd68 <rpmsg_get_endpoint+0x12>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   2fdc6:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   2fdca:	e7d6      	b.n	2fd7a <rpmsg_get_endpoint+0x24>

0002fdcc <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   2fdcc:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   2fdce:	4604      	mov	r4, r0
   2fdd0:	b190      	cbz	r0, 2fdf8 <rpmsg_destroy_ept+0x2c>
   2fdd2:	6a03      	ldr	r3, [r0, #32]
   2fdd4:	b183      	cbz	r3, 2fdf8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   2fdd6:	7802      	ldrb	r2, [r0, #0]
   2fdd8:	b14a      	cbz	r2, 2fdee <rpmsg_destroy_ept+0x22>
   2fdda:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   2fdde:	b133      	cbz	r3, 2fdee <rpmsg_destroy_ept+0x22>
   2fde0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2fde2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2fde6:	d302      	bcc.n	2fdee <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   2fde8:	2101      	movs	r1, #1
   2fdea:	f7ff ff80 	bl	2fcee <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   2fdee:	4620      	mov	r0, r4
}
   2fdf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   2fdf4:	f7ff bf52 	b.w	2fc9c <rpmsg_unregister_endpoint>
}
   2fdf8:	bd10      	pop	{r4, pc}

0002fdfa <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   2fdfa:	f851 3c08 	ldr.w	r3, [r1, #-8]
   2fdfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2fe02:	f841 3c08 	str.w	r3, [r1, #-8]
}
   2fe06:	4770      	bx	lr

0002fe08 <rpmsg_virtio_tx_callback>:
}
   2fe08:	4770      	bx	lr

0002fe0a <k_sem_give>:
   2fe0a:	f7f5 bbed 	b.w	255e8 <z_impl_k_sem_give>

0002fe0e <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   2fe0e:	f04f 32ff 	mov.w	r2, #4294967295
   2fe12:	f04f 33ff 	mov.w	r3, #4294967295
   2fe16:	f7f5 bc2b 	b.w	25670 <z_impl_k_sem_take>

0002fe1a <rpmsg_virtio_release_tx_buffer>:
{
   2fe1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe1c:	460c      	mov	r4, r1
   2fe1e:	4605      	mov	r5, r0
	idx = rp_hdr->reserved;
   2fe20:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2fe24:	f100 0758 	add.w	r7, r0, #88	; 0x58
   2fe28:	4638      	mov	r0, r7
	idx = rp_hdr->reserved;
   2fe2a:	b2b6      	uxth	r6, r6
   2fe2c:	f7ff ffef 	bl	2fe0e <__metal_mutex_acquire>
	r_desc->idx = idx;
   2fe30:	f824 6c08 	strh.w	r6, [r4, #-8]
	new_node->prev = node->prev;
   2fe34:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   2fe38:	f1a4 0310 	sub.w	r3, r4, #16
   2fe3c:	f844 2c0c 	str.w	r2, [r4, #-12]
   2fe40:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
	new_node->next = node;
   2fe44:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   2fe48:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   2fe4c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   2fe50:	4638      	mov	r0, r7
   2fe52:	6013      	str	r3, [r2, #0]
   2fe54:	f7ff ffd9 	bl	2fe0a <k_sem_give>
}
   2fe58:	2000      	movs	r0, #0
   2fe5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fe5c <rpmsg_virtio_ns_callback>:
{
   2fe5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_device *rdev = ept->rdev;
   2fe60:	6a05      	ldr	r5, [r0, #32]
	if (len != sizeof(*ns_msg))
   2fe62:	2a28      	cmp	r2, #40	; 0x28
{
   2fe64:	460f      	mov	r7, r1
	struct metal_io_region *io = rvdev->shbuf_io;
   2fe66:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
{
   2fe6a:	b088      	sub	sp, #32
	if (len != sizeof(*ns_msg))
   2fe6c:	d126      	bne.n	2febc <rpmsg_virtio_ns_callback+0x60>
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fe6e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2fe70:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2fe72:	1a79      	subs	r1, r7, r1
	metal_io_block_read(io,
   2fe74:	42a1      	cmp	r1, r4
   2fe76:	bf28      	it	cs
   2fe78:	f04f 31ff 	movcs.w	r1, #4294967295
   2fe7c:	2320      	movs	r3, #32
   2fe7e:	466a      	mov	r2, sp
   2fe80:	f7fe ff59 	bl	2ed36 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   2fe84:	f105 0658 	add.w	r6, r5, #88	; 0x58
	dest = ns_msg->addr;
   2fe88:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2fe8c:	4630      	mov	r0, r6
   2fe8e:	f7ff ffbe 	bl	2fe0e <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2fe92:	4643      	mov	r3, r8
   2fe94:	f04f 32ff 	mov.w	r2, #4294967295
   2fe98:	4669      	mov	r1, sp
   2fe9a:	4628      	mov	r0, r5
   2fe9c:	f7ff ff5b 	bl	2fd56 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   2fea2:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   2fea4:	07db      	lsls	r3, r3, #31
   2fea6:	d519      	bpl.n	2fedc <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
   2fea8:	b960      	cbnz	r0, 2fec4 <rpmsg_virtio_ns_callback+0x68>
   2feaa:	4630      	mov	r0, r6
   2feac:	f7ff ffad 	bl	2fe0a <k_sem_give>
		if (rdev->ns_unbind_cb)
   2feb0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
			if (rdev->ns_bind_cb)
   2feb2:	b11b      	cbz	r3, 2febc <rpmsg_virtio_ns_callback+0x60>
				rdev->ns_bind_cb(rdev, name, dest);
   2feb4:	4642      	mov	r2, r8
   2feb6:	4669      	mov	r1, sp
   2feb8:	4628      	mov	r0, r5
   2feba:	4798      	blx	r3
}
   2febc:	2000      	movs	r0, #0
   2febe:	b008      	add	sp, #32
   2fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_ept->dest_addr = RPMSG_ADDR_ANY;
   2fec4:	f04f 33ff 	mov.w	r3, #4294967295
   2fec8:	6283      	str	r3, [r0, #40]	; 0x28
   2feca:	4630      	mov	r0, r6
   2fecc:	f7ff ff9d 	bl	2fe0a <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   2fed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fed2:	2b00      	cmp	r3, #0
   2fed4:	d0ec      	beq.n	2feb0 <rpmsg_virtio_ns_callback+0x54>
			_ept->ns_unbind_cb(_ept);
   2fed6:	4620      	mov	r0, r4
   2fed8:	4798      	blx	r3
   2feda:	e7e9      	b.n	2feb0 <rpmsg_virtio_ns_callback+0x54>
		if (!_ept) {
   2fedc:	b920      	cbnz	r0, 2fee8 <rpmsg_virtio_ns_callback+0x8c>
   2fede:	4630      	mov	r0, r6
   2fee0:	f7ff ff93 	bl	2fe0a <k_sem_give>
			if (rdev->ns_bind_cb)
   2fee4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   2fee6:	e7e4      	b.n	2feb2 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = dest;
   2fee8:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   2feec:	4630      	mov	r0, r6
   2feee:	f7ff ff8c 	bl	2fe0a <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   2fef2:	e7e3      	b.n	2febc <rpmsg_virtio_ns_callback+0x60>

0002fef4 <rpmsg_virtio_get_rx_buffer>:
{
   2fef4:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   2fef6:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
   2fefa:	4613      	mov	r3, r2
   2fefc:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_HOST) {
   2fefe:	b925      	cbnz	r5, 2ff0a <rpmsg_virtio_get_rx_buffer+0x16>
}
   2ff00:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   2ff02:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ff06:	f7ff bde3 	b.w	2fad0 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   2ff0a:	2d01      	cmp	r5, #1
   2ff0c:	d106      	bne.n	2ff1c <rpmsg_virtio_get_rx_buffer+0x28>
}
   2ff0e:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   2ff10:	460a      	mov	r2, r1
   2ff12:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ff16:	4619      	mov	r1, r3
   2ff18:	f7ff be19 	b.w	2fb4e <virtqueue_get_available_buffer>
}
   2ff1c:	2000      	movs	r0, #0
   2ff1e:	bc30      	pop	{r4, r5}
   2ff20:	4770      	bx	lr

0002ff22 <rpmsg_virtio_return_buffer>:
{
   2ff22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ff24:	460c      	mov	r4, r1
   2ff26:	4619      	mov	r1, r3
   2ff28:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   2ff2c:	699d      	ldr	r5, [r3, #24]
	if (role == RPMSG_HOST) {
   2ff2e:	b95d      	cbnz	r5, 2ff48 <rpmsg_virtio_return_buffer+0x26>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2ff30:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   2ff32:	e9cd 4202 	strd	r4, r2, [sp, #8]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   2ff36:	2301      	movs	r3, #1
   2ff38:	462a      	mov	r2, r5
   2ff3a:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   2ff3e:	a902      	add	r1, sp, #8
   2ff40:	f7ff fd6a 	bl	2fa18 <virtqueue_add_buffer>
}
   2ff44:	b004      	add	sp, #16
   2ff46:	bd70      	pop	{r4, r5, r6, pc}
	if (role == RPMSG_REMOTE) {
   2ff48:	2d01      	cmp	r5, #1
   2ff4a:	d1fb      	bne.n	2ff44 <rpmsg_virtio_return_buffer+0x22>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ff4c:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
}
   2ff50:	b004      	add	sp, #16
   2ff52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   2ff56:	f7f3 bfd5 	b.w	23f04 <virtqueue_add_consumed_buffer>

0002ff5a <rpmsg_virtio_release_rx_buffer>:
{
   2ff5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ff5c:	4604      	mov	r4, r0
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ff5e:	f851 6c08 	ldr.w	r6, [r1, #-8]
	metal_mutex_acquire(&rdev->lock);
   2ff62:	f100 0758 	add.w	r7, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   2ff66:	4638      	mov	r0, r7
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   2ff68:	b2b6      	uxth	r6, r6
{
   2ff6a:	460d      	mov	r5, r1
   2ff6c:	f7ff ff4f 	bl	2fe0e <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ff70:	4631      	mov	r1, r6
   2ff72:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ff76:	f7ff fde5 	bl	2fb44 <virtqueue_get_buffer_length>
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ff7a:	4633      	mov	r3, r6
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   2ff7c:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   2ff7e:	f1a5 0110 	sub.w	r1, r5, #16
   2ff82:	4620      	mov	r0, r4
   2ff84:	f7ff ffcd 	bl	2ff22 <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   2ff88:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   2ff8c:	f7ff fe31 	bl	2fbf2 <virtqueue_kick>
   2ff90:	4638      	mov	r0, r7
}
   2ff92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ff96:	f7ff bf38 	b.w	2fe0a <k_sem_give>

0002ff9a <rpmsg_virtio_shm_pool_get_buffer>:
{
   2ff9a:	b510      	push	{r4, lr}
	if (!shpool || size == 0 || shpool->avail < size)
   2ff9c:	b148      	cbz	r0, 2ffb2 <rpmsg_virtio_shm_pool_get_buffer+0x18>
   2ff9e:	b149      	cbz	r1, 2ffb4 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
   2ffa0:	6843      	ldr	r3, [r0, #4]
   2ffa2:	428b      	cmp	r3, r1
   2ffa4:	d306      	bcc.n	2ffb4 <rpmsg_virtio_shm_pool_get_buffer+0x1a>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   2ffa6:	6882      	ldr	r2, [r0, #8]
   2ffa8:	6804      	ldr	r4, [r0, #0]
   2ffaa:	1ad2      	subs	r2, r2, r3
	shpool->avail -= size;
   2ffac:	1a5b      	subs	r3, r3, r1
   2ffae:	6043      	str	r3, [r0, #4]
	return buffer;
   2ffb0:	18a0      	adds	r0, r4, r2
}
   2ffb2:	bd10      	pop	{r4, pc}
		return NULL;
   2ffb4:	2000      	movs	r0, #0
   2ffb6:	e7fc      	b.n	2ffb2 <rpmsg_virtio_shm_pool_get_buffer+0x18>

0002ffb8 <rpmsg_virtio_get_tx_payload_buffer>:
{
   2ffb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2ffbc:	4605      	mov	r5, r0
   2ffbe:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   2ffc2:	460e      	mov	r6, r1
	return rvdev->vdev->func->get_status(rvdev->vdev);
   2ffc4:	6a03      	ldr	r3, [r0, #32]
   2ffc6:	4617      	mov	r7, r2
   2ffc8:	681b      	ldr	r3, [r3, #0]
   2ffca:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   2ffcc:	0743      	lsls	r3, r0, #29
   2ffce:	d403      	bmi.n	2ffd8 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		return NULL;
   2ffd0:	2000      	movs	r0, #0
}
   2ffd2:	b002      	add	sp, #8
   2ffd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   2ffd8:	f643 2398 	movw	r3, #15000	; 0x3a98
   2ffdc:	2f00      	cmp	r7, #0
   2ffde:	bf18      	it	ne
   2ffe0:	461f      	movne	r7, r3
		metal_mutex_acquire(&rdev->lock);
   2ffe2:	f105 0858 	add.w	r8, r5, #88	; 0x58
	node = metal_list_first(&rvdev->reclaimer);
   2ffe6:	f105 0ab4 	add.w	sl, r5, #180	; 0xb4
   2ffea:	4640      	mov	r0, r8
   2ffec:	f7ff ff0f 	bl	2fe0e <__metal_mutex_acquire>
	return list->next == list;
   2fff0:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
	return rvdev->vdev->role;
   2fff4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   2fff8:	4554      	cmp	r4, sl
   2fffa:	f8d3 9018 	ldr.w	r9, [r3, #24]
   2fffe:	d025      	beq.n	3004c <CONFIG_FLASH_LOAD_SIZE+0x4c>
	if (node) {
   30000:	b324      	cbz	r4, 3004c <CONFIG_FLASH_LOAD_SIZE+0x4c>
	node->next->prev = node->prev;
   30002:	e9d4 2300 	ldrd	r2, r3, [r4]
   30006:	6053      	str	r3, [r2, #4]
	node->prev->next = node->next;
   30008:	6822      	ldr	r2, [r4, #0]
   3000a:	601a      	str	r2, [r3, #0]
	node->next = node;
   3000c:	e9c4 4400 	strd	r4, r4, [r4]
		if (role == RPMSG_HOST)
   30010:	f1b9 0f00 	cmp.w	r9, #0
   30014:	d10e      	bne.n	30034 <CONFIG_FLASH_LOAD_SIZE+0x34>
			*len = rvdev->config.h2r_buf_size;
   30016:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   3001a:	6033      	str	r3, [r6, #0]
   3001c:	4640      	mov	r0, r8
   3001e:	f7ff fef4 	bl	2fe0a <k_sem_give>
	rp_hdr->reserved = idx;
   30022:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30026:	f104 0010 	add.w	r0, r4, #16
	rp_hdr->reserved = idx;
   3002a:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   3002c:	6833      	ldr	r3, [r6, #0]
   3002e:	3b10      	subs	r3, #16
   30030:	6033      	str	r3, [r6, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
   30032:	e7ce      	b.n	2ffd2 <rpmsg_virtio_get_tx_payload_buffer+0x1a>
		if (role == RPMSG_REMOTE) {
   30034:	f1b9 0f01 	cmp.w	r9, #1
   30038:	d1f0      	bne.n	3001c <CONFIG_FLASH_LOAD_SIZE+0x1c>
			*idx = r_desc->idx;
   3003a:	8921      	ldrh	r1, [r4, #8]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   3003c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
			*idx = r_desc->idx;
   30040:	f8ad 1006 	strh.w	r1, [sp, #6]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   30044:	f7ff fd7e 	bl	2fb44 <virtqueue_get_buffer_length>
   30048:	6030      	str	r0, [r6, #0]
   3004a:	e7e7      	b.n	3001c <CONFIG_FLASH_LOAD_SIZE+0x1c>
	} else if (role == RPMSG_HOST) {
   3004c:	f1b9 0f00 	cmp.w	r9, #0
   30050:	d12a      	bne.n	300a8 <CONFIG_FLASH_LOAD_SIZE+0xa8>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   30052:	4631      	mov	r1, r6
   30054:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   30058:	f10d 0206 	add.w	r2, sp, #6
   3005c:	f7ff fd38 	bl	2fad0 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   30060:	4604      	mov	r4, r0
   30062:	2800      	cmp	r0, #0
   30064:	d1da      	bne.n	3001c <CONFIG_FLASH_LOAD_SIZE+0x1c>
   30066:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   3006a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   3006c:	b953      	cbnz	r3, 30084 <CONFIG_FLASH_LOAD_SIZE+0x84>
   3006e:	4640      	mov	r0, r8
   30070:	f7ff fecb 	bl	2fe0a <k_sem_give>
		if (rp_hdr || !tick_count)
   30074:	2f00      	cmp	r7, #0
   30076:	d0ab      	beq.n	2ffd0 <rpmsg_virtio_get_tx_payload_buffer+0x18>
	return z_impl_k_sleep(timeout);
   30078:	2021      	movs	r0, #33	; 0x21
   3007a:	2100      	movs	r1, #0
   3007c:	f7f7 f9a8 	bl	273d0 <z_impl_k_sleep>
		tick_count--;
   30080:	3f01      	subs	r7, #1
		metal_mutex_acquire(&rdev->lock);
   30082:	e7b2      	b.n	2ffea <rpmsg_virtio_get_tx_payload_buffer+0x32>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   30084:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   30088:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   3008c:	f7ff ff85 	bl	2ff9a <rpmsg_virtio_shm_pool_get_buffer>
   30090:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   30092:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
			*idx = 0;
   30096:	f8ad 9006 	strh.w	r9, [sp, #6]
			*len = rvdev->config.h2r_buf_size;
   3009a:	6033      	str	r3, [r6, #0]
   3009c:	4640      	mov	r0, r8
   3009e:	f7ff feb4 	bl	2fe0a <k_sem_give>
		if (rp_hdr || !tick_count)
   300a2:	2c00      	cmp	r4, #0
   300a4:	d0e6      	beq.n	30074 <CONFIG_FLASH_LOAD_SIZE+0x74>
   300a6:	e7bc      	b.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
	} else if (role == RPMSG_REMOTE) {
   300a8:	f1b9 0f01 	cmp.w	r9, #1
   300ac:	d1df      	bne.n	3006e <CONFIG_FLASH_LOAD_SIZE+0x6e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   300ae:	4632      	mov	r2, r6
   300b0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   300b4:	f10d 0106 	add.w	r1, sp, #6
   300b8:	f7ff fd49 	bl	2fb4e <virtqueue_get_available_buffer>
   300bc:	4604      	mov	r4, r0
   300be:	e7ed      	b.n	3009c <CONFIG_FLASH_LOAD_SIZE+0x9c>

000300c0 <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   300c0:	b120      	cbz	r0, 300cc <rpmsg_virtio_init_shm_pool+0xc>
   300c2:	b119      	cbz	r1, 300cc <rpmsg_virtio_init_shm_pool+0xc>
   300c4:	b112      	cbz	r2, 300cc <rpmsg_virtio_init_shm_pool+0xc>
	shpool->avail = size;
   300c6:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   300ca:	6001      	str	r1, [r0, #0]
}
   300cc:	4770      	bx	lr

000300ce <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   300ce:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   300d0:	4604      	mov	r4, r0
   300d2:	b918      	cbnz	r0, 300dc <rpmsg_deinit_vdev+0xe>
		rvdev->rvq = 0;
		rvdev->svq = 0;

		metal_mutex_deinit(&rdev->lock);
	}
}
   300d4:	bd10      	pop	{r4, pc}
			rpmsg_destroy_ept(ept);
   300d6:	3834      	subs	r0, #52	; 0x34
   300d8:	f7ff fe78 	bl	2fdcc <rpmsg_destroy_ept>
	return list->next == list;
   300dc:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   300de:	4284      	cmp	r4, r0
   300e0:	d1f9      	bne.n	300d6 <rpmsg_deinit_vdev+0x8>
		rvdev->rvq = 0;
   300e2:	2300      	movs	r3, #0
		rvdev->svq = 0;
   300e4:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
   300e8:	e7f4      	b.n	300d4 <rpmsg_deinit_vdev+0x6>

000300ea <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   300ea:	f7f4 ba7d 	b.w	245e8 <_DoInit>

000300ee <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   300ee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   300f0:	f7ff fffb 	bl	300ea <SEGGER_RTT_Init>

	return 0;
}
   300f4:	2000      	movs	r0, #0
   300f6:	bd08      	pop	{r3, pc}

000300f8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   300f8:	4770      	bx	lr

000300fa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   300fa:	b140      	cbz	r0, 3010e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   300fc:	68c3      	ldr	r3, [r0, #12]
   300fe:	7858      	ldrb	r0, [r3, #1]
   30100:	f010 0001 	ands.w	r0, r0, #1
   30104:	bf1e      	ittt	ne
   30106:	7818      	ldrbne	r0, [r3, #0]
   30108:	fab0 f080 	clzne	r0, r0
   3010c:	0940      	lsrne	r0, r0, #5
}
   3010e:	4770      	bx	lr

00030110 <z_early_memset>:
   30110:	f000 ba77 	b.w	30602 <memset>

00030114 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30114:	f000 ba3b 	b.w	3058e <memcpy>

00030118 <k_heap_init>:
{
   30118:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3011a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   3011e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30122:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30124:	f7dc bd0e 	b.w	cb44 <sys_heap_init>

00030128 <k_heap_alloc>:
{
   30128:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   3012a:	e9cd 2300 	strd	r2, r3, [sp]
   3012e:	460a      	mov	r2, r1
   30130:	2104      	movs	r1, #4
   30132:	f7f4 fc9d 	bl	24a70 <k_heap_aligned_alloc>
}
   30136:	b003      	add	sp, #12
   30138:	f85d fb04 	ldr.w	pc, [sp], #4

0003013c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3013c:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   30140:	4313      	orrs	r3, r2
   30142:	f013 0303 	ands.w	r3, r3, #3
   30146:	d10c      	bne.n	30162 <create_free_list+0x26>
	slab->free_list = NULL;
   30148:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3014a:	68c1      	ldr	r1, [r0, #12]
   3014c:	4299      	cmp	r1, r3
   3014e:	d801      	bhi.n	30154 <create_free_list+0x18>
	return 0;
   30150:	2000      	movs	r0, #0
   30152:	4770      	bx	lr
		*(char **)p = slab->free_list;
   30154:	6981      	ldr	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   30156:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   30158:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   3015a:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   3015c:	6182      	str	r2, [r0, #24]
		p += slab->block_size;
   3015e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   30160:	e7f3      	b.n	3014a <create_free_list+0xe>
		return -EINVAL;
   30162:	f06f 0015 	mvn.w	r0, #21
}
   30166:	4770      	bx	lr

00030168 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30168:	f3ef 8005 	mrs	r0, IPSR
}
   3016c:	3800      	subs	r0, #0
   3016e:	bf18      	it	ne
   30170:	2001      	movne	r0, #1
   30172:	4770      	bx	lr

00030174 <z_impl_k_thread_name_set>:
}
   30174:	f06f 0057 	mvn.w	r0, #87	; 0x57
   30178:	4770      	bx	lr

0003017a <k_thread_name_get>:
}
   3017a:	2000      	movs	r0, #0
   3017c:	4770      	bx	lr

0003017e <z_impl_k_thread_start>:
	z_sched_start(thread);
   3017e:	f7f6 ba87 	b.w	26690 <z_sched_start>

00030182 <z_pm_save_idle_exit>:
{
   30182:	b508      	push	{r3, lr}
	pm_system_resume();
   30184:	f7e0 f8dc 	bl	10340 <pm_system_resume>
}
   30188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   3018c:	f7fe bb5c 	b.w	2e848 <sys_clock_idle_exit>

00030190 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   30190:	f990 300e 	ldrsb.w	r3, [r0, #14]
   30194:	428b      	cmp	r3, r1
   30196:	d001      	beq.n	3019c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   30198:	f7f6 bd7c 	b.w	26c94 <z_set_prio>
}
   3019c:	2000      	movs	r0, #0
   3019e:	4770      	bx	lr

000301a0 <z_impl_k_mutex_init>:
{
   301a0:	4603      	mov	r3, r0
	mutex->owner = NULL;
   301a2:	2000      	movs	r0, #0
   301a4:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   301a8:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   301ac:	4770      	bx	lr

000301ae <z_queue_node_peek>:
{
   301ae:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   301b0:	4604      	mov	r4, r0
   301b2:	b130      	cbz	r0, 301c2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   301b4:	6802      	ldr	r2, [r0, #0]
   301b6:	0793      	lsls	r3, r2, #30
   301b8:	d003      	beq.n	301c2 <z_queue_node_peek+0x14>
		ret = anode->data;
   301ba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   301bc:	b109      	cbz	r1, 301c2 <z_queue_node_peek+0x14>
			k_free(anode);
   301be:	f000 f9bc 	bl	3053a <k_free>
}
   301c2:	4620      	mov	r0, r4
   301c4:	bd10      	pop	{r4, pc}

000301c6 <z_impl_k_queue_init>:
	list->head = NULL;
   301c6:	2300      	movs	r3, #0
	list->tail = NULL;
   301c8:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   301cc:	6083      	str	r3, [r0, #8]
   301ce:	f100 030c 	add.w	r3, r0, #12
   301d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   301d6:	f100 0314 	add.w	r3, r0, #20
   301da:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   301de:	4770      	bx	lr

000301e0 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   301e0:	2301      	movs	r3, #1
{
   301e2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   301e4:	9300      	str	r3, [sp, #0]
   301e6:	2300      	movs	r3, #0
{
   301e8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   301ea:	4619      	mov	r1, r3
   301ec:	f7f5 f8f8 	bl	253e0 <queue_insert>
}
   301f0:	b003      	add	sp, #12
   301f2:	f85d fb04 	ldr.w	pc, [sp], #4

000301f6 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   301f6:	2300      	movs	r3, #0
{
   301f8:	b507      	push	{r0, r1, r2, lr}
   301fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   301fc:	9300      	str	r3, [sp, #0]
   301fe:	4619      	mov	r1, r3
   30200:	f7f5 f8ee 	bl	253e0 <queue_insert>
}
   30204:	b003      	add	sp, #12
   30206:	f85d fb04 	ldr.w	pc, [sp], #4

0003020a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3020a:	b15a      	cbz	r2, 30224 <z_impl_k_sem_init+0x1a>
   3020c:	428a      	cmp	r2, r1
   3020e:	d309      	bcc.n	30224 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   30210:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   30214:	e9c0 1202 	strd	r1, r2, [r0, #8]
   30218:	e9c0 0000 	strd	r0, r0, [r0]
   3021c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   30220:	2000      	movs	r0, #0
   30222:	4770      	bx	lr
		return -EINVAL;
   30224:	f06f 0015 	mvn.w	r0, #21
}
   30228:	4770      	bx	lr

0003022a <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   3022a:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   3022c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   3022e:	408b      	lsls	r3, r1
   30230:	ea22 0303 	bic.w	r3, r2, r3
   30234:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   30236:	fa22 f001 	lsr.w	r0, r2, r1
}
   3023a:	f000 0001 	and.w	r0, r0, #1
   3023e:	4770      	bx	lr

00030240 <unschedule_locked>:
{
   30240:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30242:	2103      	movs	r1, #3
{
   30244:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30246:	300c      	adds	r0, #12
   30248:	f7ff ffef 	bl	3022a <flag_test_and_clear>
   3024c:	4604      	mov	r4, r0
   3024e:	b118      	cbz	r0, 30258 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   30250:	f105 0010 	add.w	r0, r5, #16
   30254:	f7f7 fb5c 	bl	27910 <z_abort_timeout>
}
   30258:	4620      	mov	r0, r4
   3025a:	bd38      	pop	{r3, r4, r5, pc}

0003025c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   3025c:	b120      	cbz	r0, 30268 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3025e:	2200      	movs	r2, #0
   30260:	3090      	adds	r0, #144	; 0x90
   30262:	4611      	mov	r1, r2
   30264:	f7f7 b9b6 	b.w	275d4 <z_sched_wake>
}
   30268:	4770      	bx	lr

0003026a <cancel_async_locked>:
{
   3026a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   3026c:	68c3      	ldr	r3, [r0, #12]
{
   3026e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30270:	f3c3 0640 	ubfx	r6, r3, #1, #1
   30274:	079b      	lsls	r3, r3, #30
   30276:	d416      	bmi.n	302a6 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   30278:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3027a:	2102      	movs	r1, #2
   3027c:	300c      	adds	r0, #12
   3027e:	f7ff ffd4 	bl	3022a <flag_test_and_clear>
   30282:	b180      	cbz	r0, 302a6 <cancel_async_locked+0x3c>
	return list->head;
   30284:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30288:	b16a      	cbz	r2, 302a6 <cancel_async_locked+0x3c>
   3028a:	4294      	cmp	r4, r2
   3028c:	d11d      	bne.n	302ca <cancel_async_locked+0x60>
	return node->next;
   3028e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   30290:	b99e      	cbnz	r6, 302ba <cancel_async_locked+0x50>
   30292:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	list->head = node;
   30296:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
Z_GENLIST_REMOVE(slist, snode)
   3029a:	429c      	cmp	r4, r3
   3029c:	d101      	bne.n	302a2 <cancel_async_locked+0x38>
	list->tail = node;
   3029e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	parent->next = child;
   302a2:	2300      	movs	r3, #0
   302a4:	6023      	str	r3, [r4, #0]
	return *flagp;
   302a6:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   302a8:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   302ac:	bf1e      	ittt	ne
   302ae:	f043 0302 	orrne.w	r3, r3, #2
   302b2:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   302b4:	f040 0002 	orrne.w	r0, r0, #2
}
   302b8:	bd70      	pop	{r4, r5, r6, pc}
   302ba:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   302bc:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
   302c0:	4294      	cmp	r4, r2
	list->tail = node;
   302c2:	bf08      	it	eq
   302c4:	f8c5 608c 	streq.w	r6, [r5, #140]	; 0x8c
}
   302c8:	e7eb      	b.n	302a2 <cancel_async_locked+0x38>
	return node->next;
   302ca:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   302cc:	6812      	ldr	r2, [r2, #0]
   302ce:	e7db      	b.n	30288 <cancel_async_locked+0x1e>

000302d0 <k_work_submit_to_queue>:
{
   302d0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   302d2:	f7f5 fc9d 	bl	25c10 <z_work_submit_to_queue>
	if (ret > 0) {
   302d6:	1e04      	subs	r4, r0, #0
   302d8:	dd09      	ble.n	302ee <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   302da:	f04f 0320 	mov.w	r3, #32
   302de:	f3ef 8011 	mrs	r0, BASEPRI
   302e2:	f383 8812 	msr	BASEPRI_MAX, r3
   302e6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   302ea:	f000 f80d 	bl	30308 <z_reschedule_irqlock>
}
   302ee:	4620      	mov	r0, r4
   302f0:	bd10      	pop	{r4, pc}

000302f2 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   302f2:	f7f5 bc47 	b.w	25b84 <k_work_busy_get>

000302f6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   302f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   302fa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   302fe:	4283      	cmp	r3, r0
		return b2 - b1;
   30300:	bf14      	ite	ne
   30302:	1ac0      	subne	r0, r0, r3
	return 0;
   30304:	2000      	moveq	r0, #0
}
   30306:	4770      	bx	lr

00030308 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   30308:	4603      	mov	r3, r0
   3030a:	b920      	cbnz	r0, 30316 <z_reschedule_irqlock+0xe>
   3030c:	f3ef 8205 	mrs	r2, IPSR
   30310:	b90a      	cbnz	r2, 30316 <z_reschedule_irqlock+0xe>
   30312:	f7e0 bc15 	b.w	10b40 <arch_swap>
	__asm__ volatile(
   30316:	f383 8811 	msr	BASEPRI, r3
   3031a:	f3bf 8f6f 	isb	sy
}
   3031e:	4770      	bx	lr

00030320 <z_reschedule_unlocked>:
	__asm__ volatile(
   30320:	f04f 0320 	mov.w	r3, #32
   30324:	f3ef 8011 	mrs	r0, BASEPRI
   30328:	f383 8812 	msr	BASEPRI_MAX, r3
   3032c:	f3bf 8f6f 	isb	sy
   30330:	f7ff bfea 	b.w	30308 <z_reschedule_irqlock>

00030334 <z_unpend_all>:
{
   30334:	b538      	push	{r3, r4, r5, lr}
   30336:	4605      	mov	r5, r0
	int need_sched = 0;
   30338:	2000      	movs	r0, #0
	return list->head == list;
   3033a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3033c:	42a5      	cmp	r5, r4
   3033e:	d000      	beq.n	30342 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30340:	b904      	cbnz	r4, 30344 <z_unpend_all+0x10>
}
   30342:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   30344:	4620      	mov	r0, r4
   30346:	f7f6 fdbf 	bl	26ec8 <z_unpend_thread>
		z_ready_thread(thread);
   3034a:	4620      	mov	r0, r4
   3034c:	f7f6 f8d2 	bl	264f4 <z_ready_thread>
		need_sched = 1;
   30350:	2001      	movs	r0, #1
   30352:	e7f2      	b.n	3033a <z_unpend_all+0x6>

00030354 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30354:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30356:	f7f7 fc5d 	bl	27c14 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3035a:	bd08      	pop	{r3, pc}

0003035c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3035c:	f7f7 bc5a 	b.w	27c14 <sys_clock_tick_get>

00030360 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30360:	b108      	cbz	r0, 30366 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30362:	f7dd bd95 	b.w	de90 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   30366:	4770      	bx	lr

00030368 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30368:	f1b1 3fff 	cmp.w	r1, #4294967295
   3036c:	bf08      	it	eq
   3036e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   30372:	b538      	push	{r3, r4, r5, lr}
   30374:	460c      	mov	r4, r1
   30376:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30378:	d014      	beq.n	303a4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3037a:	4308      	orrs	r0, r1
   3037c:	d103      	bne.n	30386 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3037e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   30382:	f7f7 bc47 	b.w	27c14 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30386:	f06f 0001 	mvn.w	r0, #1
   3038a:	f04f 33ff 	mov.w	r3, #4294967295
   3038e:	1b40      	subs	r0, r0, r5
   30390:	eb63 0101 	sbc.w	r1, r3, r1
   30394:	2900      	cmp	r1, #0
   30396:	da04      	bge.n	303a2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   30398:	f7f7 fc3c 	bl	27c14 <sys_clock_tick_get>
   3039c:	1940      	adds	r0, r0, r5
   3039e:	eb41 0104 	adc.w	r1, r1, r4
}
   303a2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   303a4:	f04f 30ff 	mov.w	r0, #4294967295
   303a8:	4601      	mov	r1, r0
   303aa:	e7fa      	b.n	303a2 <sys_clock_timeout_end_calc+0x3a>

000303ac <k_timer_init>:
	timer->status = 0U;
   303ac:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   303ae:	e9c0 1208 	strd	r1, r2, [r0, #32]
   303b2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   303b6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   303ba:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   303be:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   303c0:	6343      	str	r3, [r0, #52]	; 0x34
}
   303c2:	4770      	bx	lr

000303c4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   303c4:	b510      	push	{r4, lr}
   303c6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   303c8:	f7f7 faa2 	bl	27910 <z_abort_timeout>

	if (inactive) {
   303cc:	b9b0      	cbnz	r0, 303fc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   303ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   303d0:	b10b      	cbz	r3, 303d6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   303d2:	4620      	mov	r0, r4
   303d4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   303d6:	f104 0018 	add.w	r0, r4, #24
   303da:	f7f6 fe17 	bl	2700c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   303de:	b168      	cbz	r0, 303fc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   303e0:	f7f6 f888 	bl	264f4 <z_ready_thread>
   303e4:	f04f 0320 	mov.w	r3, #32
   303e8:	f3ef 8011 	mrs	r0, BASEPRI
   303ec:	f383 8812 	msr	BASEPRI_MAX, r3
   303f0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   303f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   303f8:	f7ff bf86 	b.w	30308 <z_reschedule_irqlock>
   303fc:	bd10      	pop	{r4, pc}

000303fe <add_event>:
{
   303fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30400:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   30402:	e9d0 1300 	ldrd	r1, r3, [r0]
   30406:	4288      	cmp	r0, r1
   30408:	4604      	mov	r4, r0
   3040a:	d105      	bne.n	30418 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   3040c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3040e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   30412:	601d      	str	r5, [r3, #0]
	list->tail = node;
   30414:	6065      	str	r5, [r4, #4]
   30416:	e01d      	b.n	30454 <add_event+0x56>
	if ((pending == NULL) ||
   30418:	2b00      	cmp	r3, #0
   3041a:	d0f7      	beq.n	3040c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3041c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3041e:	b100      	cbz	r0, 30422 <add_event+0x24>
   30420:	3860      	subs	r0, #96	; 0x60
   30422:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   30426:	4639      	mov	r1, r7
   30428:	f7ff ff65 	bl	302f6 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3042c:	2800      	cmp	r0, #0
   3042e:	dced      	bgt.n	3040c <add_event+0xe>
	return list->head == list;
   30430:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30432:	42b4      	cmp	r4, r6
   30434:	d0ea      	beq.n	3040c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   30436:	2e00      	cmp	r6, #0
   30438:	d0e8      	beq.n	3040c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   3043a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3043c:	b101      	cbz	r1, 30440 <add_event+0x42>
   3043e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   30440:	4638      	mov	r0, r7
   30442:	f7ff ff58 	bl	302f6 <z_sched_prio_cmp>
   30446:	2800      	cmp	r0, #0
   30448:	dd05      	ble.n	30456 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   3044a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3044c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   30450:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   30452:	6075      	str	r5, [r6, #4]
}
   30454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   30456:	6863      	ldr	r3, [r4, #4]
   30458:	429e      	cmp	r6, r3
   3045a:	d0d7      	beq.n	3040c <add_event+0xe>
   3045c:	6836      	ldr	r6, [r6, #0]
   3045e:	e7ea      	b.n	30436 <add_event+0x38>

00030460 <signal_poll_event>:
{
   30460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   30464:	6884      	ldr	r4, [r0, #8]
{
   30466:	4605      	mov	r5, r0
   30468:	460e      	mov	r6, r1
	if (poller != NULL) {
   3046a:	b144      	cbz	r4, 3047e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3046c:	7863      	ldrb	r3, [r4, #1]
   3046e:	2b01      	cmp	r3, #1
   30470:	d12e      	bne.n	304d0 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   30472:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   30476:	f013 0302 	ands.w	r3, r3, #2
   3047a:	d10a      	bne.n	30492 <signal_poll_event+0x32>
		poller->is_polling = false;
   3047c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3047e:	2000      	movs	r0, #0
	event->state |= state;
   30480:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   30482:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   30484:	f3c3 3286 	ubfx	r2, r3, #14, #7
   30488:	4316      	orrs	r6, r2
   3048a:	f366 3394 	bfi	r3, r6, #14, #7
   3048e:	60eb      	str	r3, [r5, #12]
	return retcode;
   30490:	e03e      	b.n	30510 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   30492:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   30496:	f1b3 3fff 	cmp.w	r3, #4294967295
   3049a:	bf08      	it	eq
   3049c:	f112 0f02 	cmneq.w	r2, #2
   304a0:	d032      	beq.n	30508 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   304a2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   304a6:	4640      	mov	r0, r8
   304a8:	f7f6 fd0e 	bl	26ec8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   304ac:	2e08      	cmp	r6, #8
   304ae:	bf0c      	ite	eq
   304b0:	f06f 0303 	mvneq.w	r3, #3
   304b4:	2300      	movne	r3, #0
   304b6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   304b8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   304bc:	06db      	lsls	r3, r3, #27
   304be:	d109      	bne.n	304d4 <signal_poll_event+0x74>
   304c0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   304c4:	b937      	cbnz	r7, 304d4 <signal_poll_event+0x74>
	z_ready_thread(thread);
   304c6:	4640      	mov	r0, r8
   304c8:	f7f6 f814 	bl	264f4 <z_ready_thread>
		poller->is_polling = false;
   304cc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   304ce:	e7d6      	b.n	3047e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   304d0:	2b02      	cmp	r3, #2
   304d2:	d001      	beq.n	304d8 <signal_poll_event+0x78>
		poller->is_polling = false;
   304d4:	2300      	movs	r3, #0
   304d6:	e7d1      	b.n	3047c <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   304d8:	7823      	ldrb	r3, [r4, #0]
   304da:	2b00      	cmp	r3, #0
   304dc:	d0cf      	beq.n	3047e <signal_poll_event+0x1e>
   304de:	f854 7c04 	ldr.w	r7, [r4, #-4]
   304e2:	2f00      	cmp	r7, #0
   304e4:	d0f2      	beq.n	304cc <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   304e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   304ea:	f1a4 0914 	sub.w	r9, r4, #20
   304ee:	f104 0014 	add.w	r0, r4, #20
   304f2:	f7f7 fa0d 	bl	27910 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   304f6:	4649      	mov	r1, r9
   304f8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   304fa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   304fe:	f7f5 fb87 	bl	25c10 <z_work_submit_to_queue>
		poller->is_polling = false;
   30502:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   30506:	e7ba      	b.n	3047e <signal_poll_event+0x1e>
		poller->is_polling = false;
   30508:	2300      	movs	r3, #0
		return -EAGAIN;
   3050a:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3050e:	7023      	strb	r3, [r4, #0]
}
   30510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00030514 <z_handle_obj_poll_events>:
{
   30514:	4603      	mov	r3, r0
	return list->head == list;
   30516:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   30518:	4283      	cmp	r3, r0
   3051a:	d008      	beq.n	3052e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3051c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   30520:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30522:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30524:	2300      	movs	r3, #0
	node->prev = NULL;
   30526:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3052a:	f7ff bf99 	b.w	30460 <signal_poll_event>
}
   3052e:	4770      	bx	lr

00030530 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   30530:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   30532:	e9c0 0000 	strd	r0, r0, [r0]
   30536:	6083      	str	r3, [r0, #8]
}
   30538:	4770      	bx	lr

0003053a <k_free>:
	if (ptr != NULL) {
   3053a:	b120      	cbz	r0, 30546 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   3053c:	1f01      	subs	r1, r0, #4
   3053e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   30542:	f7f4 bb35 	b.w	24bb0 <k_heap_free>
}
   30546:	4770      	bx	lr

00030548 <k_malloc>:
{
   30548:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   3054a:	2004      	movs	r0, #4
   3054c:	f7f8 b828 	b.w	285a0 <k_aligned_alloc>

00030550 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   30550:	4770      	bx	lr

00030552 <memchr>:
   30552:	b2c9      	uxtb	r1, r1
   30554:	4603      	mov	r3, r0
   30556:	4402      	add	r2, r0
   30558:	b510      	push	{r4, lr}
   3055a:	4293      	cmp	r3, r2
   3055c:	4618      	mov	r0, r3
   3055e:	d101      	bne.n	30564 <memchr+0x12>
   30560:	2000      	movs	r0, #0
   30562:	e003      	b.n	3056c <memchr+0x1a>
   30564:	7804      	ldrb	r4, [r0, #0]
   30566:	3301      	adds	r3, #1
   30568:	428c      	cmp	r4, r1
   3056a:	d1f6      	bne.n	3055a <memchr+0x8>
   3056c:	bd10      	pop	{r4, pc}

0003056e <memcmp>:
   3056e:	3901      	subs	r1, #1
   30570:	4402      	add	r2, r0
   30572:	b510      	push	{r4, lr}
   30574:	4290      	cmp	r0, r2
   30576:	d101      	bne.n	3057c <memcmp+0xe>
   30578:	2000      	movs	r0, #0
   3057a:	e005      	b.n	30588 <memcmp+0x1a>
   3057c:	7803      	ldrb	r3, [r0, #0]
   3057e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30582:	42a3      	cmp	r3, r4
   30584:	d001      	beq.n	3058a <memcmp+0x1c>
   30586:	1b18      	subs	r0, r3, r4
   30588:	bd10      	pop	{r4, pc}
   3058a:	3001      	adds	r0, #1
   3058c:	e7f2      	b.n	30574 <memcmp+0x6>

0003058e <memcpy>:
   3058e:	440a      	add	r2, r1
   30590:	1e43      	subs	r3, r0, #1
   30592:	4291      	cmp	r1, r2
   30594:	d100      	bne.n	30598 <memcpy+0xa>
   30596:	4770      	bx	lr
   30598:	b510      	push	{r4, lr}
   3059a:	f811 4b01 	ldrb.w	r4, [r1], #1
   3059e:	4291      	cmp	r1, r2
   305a0:	f803 4f01 	strb.w	r4, [r3, #1]!
   305a4:	d1f9      	bne.n	3059a <memcpy+0xc>
   305a6:	bd10      	pop	{r4, pc}

000305a8 <__memcpy_chk>:
   305a8:	429a      	cmp	r2, r3
   305aa:	b508      	push	{r3, lr}
   305ac:	d901      	bls.n	305b2 <__memcpy_chk+0xa>
   305ae:	f7e1 fa55 	bl	11a5c <__chk_fail>
   305b2:	4281      	cmp	r1, r0
   305b4:	d804      	bhi.n	305c0 <__memcpy_chk+0x18>
   305b6:	188b      	adds	r3, r1, r2
   305b8:	4298      	cmp	r0, r3
   305ba:	d3f8      	bcc.n	305ae <__memcpy_chk+0x6>
   305bc:	4281      	cmp	r1, r0
   305be:	d102      	bne.n	305c6 <__memcpy_chk+0x1e>
   305c0:	1883      	adds	r3, r0, r2
   305c2:	4299      	cmp	r1, r3
   305c4:	d3f3      	bcc.n	305ae <__memcpy_chk+0x6>
   305c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   305ca:	f7ff bfe0 	b.w	3058e <memcpy>

000305ce <memmove>:
   305ce:	4288      	cmp	r0, r1
   305d0:	b510      	push	{r4, lr}
   305d2:	eb01 0402 	add.w	r4, r1, r2
   305d6:	d902      	bls.n	305de <memmove+0x10>
   305d8:	4284      	cmp	r4, r0
   305da:	4623      	mov	r3, r4
   305dc:	d807      	bhi.n	305ee <memmove+0x20>
   305de:	1e43      	subs	r3, r0, #1
   305e0:	42a1      	cmp	r1, r4
   305e2:	d008      	beq.n	305f6 <memmove+0x28>
   305e4:	f811 2b01 	ldrb.w	r2, [r1], #1
   305e8:	f803 2f01 	strb.w	r2, [r3, #1]!
   305ec:	e7f8      	b.n	305e0 <memmove+0x12>
   305ee:	4402      	add	r2, r0
   305f0:	4601      	mov	r1, r0
   305f2:	428a      	cmp	r2, r1
   305f4:	d100      	bne.n	305f8 <memmove+0x2a>
   305f6:	bd10      	pop	{r4, pc}
   305f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   305fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   30600:	e7f7      	b.n	305f2 <memmove+0x24>

00030602 <memset>:
   30602:	4402      	add	r2, r0
   30604:	4603      	mov	r3, r0
   30606:	4293      	cmp	r3, r2
   30608:	d100      	bne.n	3060c <memset+0xa>
   3060a:	4770      	bx	lr
   3060c:	f803 1b01 	strb.w	r1, [r3], #1
   30610:	e7f9      	b.n	30606 <memset+0x4>

00030612 <_calloc_r>:
   30612:	b538      	push	{r3, r4, r5, lr}
   30614:	fb02 f501 	mul.w	r5, r2, r1
   30618:	4629      	mov	r1, r5
   3061a:	f7f8 f8b5 	bl	28788 <_malloc_r>
   3061e:	4604      	mov	r4, r0
   30620:	b118      	cbz	r0, 3062a <_calloc_r+0x18>
   30622:	462a      	mov	r2, r5
   30624:	2100      	movs	r1, #0
   30626:	f7ff ffec 	bl	30602 <memset>
   3062a:	4620      	mov	r0, r4
   3062c:	bd38      	pop	{r3, r4, r5, pc}

0003062e <__cvt>:
   3062e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30632:	b089      	sub	sp, #36	; 0x24
   30634:	2b00      	cmp	r3, #0
   30636:	461d      	mov	r5, r3
   30638:	4614      	mov	r4, r2
   3063a:	bfba      	itte	lt
   3063c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   30640:	4614      	movlt	r4, r2
   30642:	2300      	movge	r3, #0
   30644:	9a14      	ldr	r2, [sp, #80]	; 0x50
   30646:	bfbc      	itt	lt
   30648:	461d      	movlt	r5, r3
   3064a:	232d      	movlt	r3, #45	; 0x2d
   3064c:	e9dd 9815 	ldrd	r9, r8, [sp, #84]	; 0x54
   30650:	e9dd 6b12 	ldrd	r6, fp, [sp, #72]	; 0x48
   30654:	f028 0a20 	bic.w	sl, r8, #32
   30658:	7013      	strb	r3, [r2, #0]
   3065a:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   3065e:	d005      	beq.n	3066c <__cvt+0x3e>
   30660:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   30664:	d100      	bne.n	30668 <__cvt+0x3a>
   30666:	3601      	adds	r6, #1
   30668:	2302      	movs	r3, #2
   3066a:	e000      	b.n	3066e <__cvt+0x40>
   3066c:	2303      	movs	r3, #3
   3066e:	aa07      	add	r2, sp, #28
   30670:	9204      	str	r2, [sp, #16]
   30672:	aa06      	add	r2, sp, #24
   30674:	e9cd 3600 	strd	r3, r6, [sp]
   30678:	e9cd 9202 	strd	r9, r2, [sp, #8]
   3067c:	462b      	mov	r3, r5
   3067e:	4622      	mov	r2, r4
   30680:	f7d9 fb12 	bl	9ca8 <_dtoa_r>
   30684:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   30688:	4607      	mov	r7, r0
   3068a:	d119      	bne.n	306c0 <__cvt+0x92>
   3068c:	f01b 0f01 	tst.w	fp, #1
   30690:	d00e      	beq.n	306b0 <__cvt+0x82>
   30692:	eb07 0806 	add.w	r8, r7, r6
   30696:	2200      	movs	r2, #0
   30698:	2300      	movs	r3, #0
   3069a:	4620      	mov	r0, r4
   3069c:	4629      	mov	r1, r5
   3069e:	f7d8 fc97 	bl	8fd0 <__aeabi_dcmpeq>
   306a2:	b108      	cbz	r0, 306a8 <__cvt+0x7a>
   306a4:	f8cd 801c 	str.w	r8, [sp, #28]
   306a8:	2230      	movs	r2, #48	; 0x30
   306aa:	9b07      	ldr	r3, [sp, #28]
   306ac:	4543      	cmp	r3, r8
   306ae:	d321      	bcc.n	306f4 <__cvt+0xc6>
   306b0:	9b07      	ldr	r3, [sp, #28]
   306b2:	4638      	mov	r0, r7
   306b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   306b6:	1bdb      	subs	r3, r3, r7
   306b8:	6013      	str	r3, [r2, #0]
   306ba:	b009      	add	sp, #36	; 0x24
   306bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   306c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   306c4:	d0e2      	beq.n	3068c <__cvt+0x5e>
   306c6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   306ca:	eb00 0806 	add.w	r8, r0, r6
   306ce:	d1e2      	bne.n	30696 <__cvt+0x68>
   306d0:	7803      	ldrb	r3, [r0, #0]
   306d2:	2b30      	cmp	r3, #48	; 0x30
   306d4:	d10a      	bne.n	306ec <__cvt+0xbe>
   306d6:	2200      	movs	r2, #0
   306d8:	2300      	movs	r3, #0
   306da:	4620      	mov	r0, r4
   306dc:	4629      	mov	r1, r5
   306de:	f7d8 fc77 	bl	8fd0 <__aeabi_dcmpeq>
   306e2:	b918      	cbnz	r0, 306ec <__cvt+0xbe>
   306e4:	f1c6 0601 	rsb	r6, r6, #1
   306e8:	f8c9 6000 	str.w	r6, [r9]
   306ec:	f8d9 3000 	ldr.w	r3, [r9]
   306f0:	4498      	add	r8, r3
   306f2:	e7d0      	b.n	30696 <__cvt+0x68>
   306f4:	1c59      	adds	r1, r3, #1
   306f6:	9107      	str	r1, [sp, #28]
   306f8:	701a      	strb	r2, [r3, #0]
   306fa:	e7d6      	b.n	306aa <__cvt+0x7c>

000306fc <__exponent>:
   306fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   306fe:	2900      	cmp	r1, #0
   30700:	7002      	strb	r2, [r0, #0]
   30702:	bfba      	itte	lt
   30704:	4249      	neglt	r1, r1
   30706:	232d      	movlt	r3, #45	; 0x2d
   30708:	232b      	movge	r3, #43	; 0x2b
   3070a:	2909      	cmp	r1, #9
   3070c:	7043      	strb	r3, [r0, #1]
   3070e:	dd28      	ble.n	30762 <__exponent+0x66>
   30710:	f10d 0307 	add.w	r3, sp, #7
   30714:	270a      	movs	r7, #10
   30716:	461d      	mov	r5, r3
   30718:	461a      	mov	r2, r3
   3071a:	3b01      	subs	r3, #1
   3071c:	fbb1 f6f7 	udiv	r6, r1, r7
   30720:	fb07 1416 	mls	r4, r7, r6, r1
   30724:	3430      	adds	r4, #48	; 0x30
   30726:	f802 4c01 	strb.w	r4, [r2, #-1]
   3072a:	460c      	mov	r4, r1
   3072c:	4631      	mov	r1, r6
   3072e:	2c63      	cmp	r4, #99	; 0x63
   30730:	dcf2      	bgt.n	30718 <__exponent+0x1c>
   30732:	3130      	adds	r1, #48	; 0x30
   30734:	1e94      	subs	r4, r2, #2
   30736:	f803 1c01 	strb.w	r1, [r3, #-1]
   3073a:	1c41      	adds	r1, r0, #1
   3073c:	4623      	mov	r3, r4
   3073e:	42ab      	cmp	r3, r5
   30740:	d30a      	bcc.n	30758 <__exponent+0x5c>
   30742:	f10d 0309 	add.w	r3, sp, #9
   30746:	1a9b      	subs	r3, r3, r2
   30748:	42ac      	cmp	r4, r5
   3074a:	bf88      	it	hi
   3074c:	2300      	movhi	r3, #0
   3074e:	3302      	adds	r3, #2
   30750:	4403      	add	r3, r0
   30752:	1a18      	subs	r0, r3, r0
   30754:	b003      	add	sp, #12
   30756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30758:	f813 6b01 	ldrb.w	r6, [r3], #1
   3075c:	f801 6f01 	strb.w	r6, [r1, #1]!
   30760:	e7ed      	b.n	3073e <__exponent+0x42>
   30762:	2330      	movs	r3, #48	; 0x30
   30764:	3130      	adds	r1, #48	; 0x30
   30766:	7083      	strb	r3, [r0, #2]
   30768:	1d03      	adds	r3, r0, #4
   3076a:	70c1      	strb	r1, [r0, #3]
   3076c:	e7f1      	b.n	30752 <__exponent+0x56>

0003076e <_printf_common>:
   3076e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30772:	4616      	mov	r6, r2
   30774:	4698      	mov	r8, r3
   30776:	688a      	ldr	r2, [r1, #8]
   30778:	4607      	mov	r7, r0
   3077a:	690b      	ldr	r3, [r1, #16]
   3077c:	460c      	mov	r4, r1
   3077e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   30782:	4293      	cmp	r3, r2
   30784:	bfb8      	it	lt
   30786:	4613      	movlt	r3, r2
   30788:	6033      	str	r3, [r6, #0]
   3078a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   3078e:	b10a      	cbz	r2, 30794 <_printf_common+0x26>
   30790:	3301      	adds	r3, #1
   30792:	6033      	str	r3, [r6, #0]
   30794:	6823      	ldr	r3, [r4, #0]
   30796:	0699      	lsls	r1, r3, #26
   30798:	bf42      	ittt	mi
   3079a:	6833      	ldrmi	r3, [r6, #0]
   3079c:	3302      	addmi	r3, #2
   3079e:	6033      	strmi	r3, [r6, #0]
   307a0:	6825      	ldr	r5, [r4, #0]
   307a2:	f015 0506 	ands.w	r5, r5, #6
   307a6:	d106      	bne.n	307b6 <_printf_common+0x48>
   307a8:	f104 0a19 	add.w	sl, r4, #25
   307ac:	68e3      	ldr	r3, [r4, #12]
   307ae:	6832      	ldr	r2, [r6, #0]
   307b0:	1a9b      	subs	r3, r3, r2
   307b2:	42ab      	cmp	r3, r5
   307b4:	dc2b      	bgt.n	3080e <_printf_common+0xa0>
   307b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   307ba:	6822      	ldr	r2, [r4, #0]
   307bc:	3b00      	subs	r3, #0
   307be:	bf18      	it	ne
   307c0:	2301      	movne	r3, #1
   307c2:	0692      	lsls	r2, r2, #26
   307c4:	d430      	bmi.n	30828 <_printf_common+0xba>
   307c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   307ca:	4641      	mov	r1, r8
   307cc:	4638      	mov	r0, r7
   307ce:	47c8      	blx	r9
   307d0:	3001      	adds	r0, #1
   307d2:	d023      	beq.n	3081c <_printf_common+0xae>
   307d4:	6823      	ldr	r3, [r4, #0]
   307d6:	341a      	adds	r4, #26
   307d8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   307dc:	f003 0306 	and.w	r3, r3, #6
   307e0:	2b04      	cmp	r3, #4
   307e2:	bf0a      	itet	eq
   307e4:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
   307e8:	2500      	movne	r5, #0
   307ea:	6833      	ldreq	r3, [r6, #0]
   307ec:	f04f 0600 	mov.w	r6, #0
   307f0:	bf08      	it	eq
   307f2:	1aed      	subeq	r5, r5, r3
   307f4:	f854 3c12 	ldr.w	r3, [r4, #-18]
   307f8:	bf08      	it	eq
   307fa:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   307fe:	4293      	cmp	r3, r2
   30800:	bfc4      	itt	gt
   30802:	1a9b      	subgt	r3, r3, r2
   30804:	18ed      	addgt	r5, r5, r3
   30806:	42b5      	cmp	r5, r6
   30808:	d11a      	bne.n	30840 <_printf_common+0xd2>
   3080a:	2000      	movs	r0, #0
   3080c:	e008      	b.n	30820 <_printf_common+0xb2>
   3080e:	2301      	movs	r3, #1
   30810:	4652      	mov	r2, sl
   30812:	4641      	mov	r1, r8
   30814:	4638      	mov	r0, r7
   30816:	47c8      	blx	r9
   30818:	3001      	adds	r0, #1
   3081a:	d103      	bne.n	30824 <_printf_common+0xb6>
   3081c:	f04f 30ff 	mov.w	r0, #4294967295
   30820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30824:	3501      	adds	r5, #1
   30826:	e7c1      	b.n	307ac <_printf_common+0x3e>
   30828:	18e1      	adds	r1, r4, r3
   3082a:	1c5a      	adds	r2, r3, #1
   3082c:	2030      	movs	r0, #48	; 0x30
   3082e:	3302      	adds	r3, #2
   30830:	4422      	add	r2, r4
   30832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   30836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3083a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   3083e:	e7c2      	b.n	307c6 <_printf_common+0x58>
   30840:	2301      	movs	r3, #1
   30842:	4622      	mov	r2, r4
   30844:	4641      	mov	r1, r8
   30846:	4638      	mov	r0, r7
   30848:	47c8      	blx	r9
   3084a:	3001      	adds	r0, #1
   3084c:	d0e6      	beq.n	3081c <_printf_common+0xae>
   3084e:	3601      	adds	r6, #1
   30850:	e7d9      	b.n	30806 <_printf_common+0x98>

00030852 <strchr>:
   30852:	b2c9      	uxtb	r1, r1
   30854:	4603      	mov	r3, r0
   30856:	4618      	mov	r0, r3
   30858:	f813 2b01 	ldrb.w	r2, [r3], #1
   3085c:	b112      	cbz	r2, 30864 <strchr+0x12>
   3085e:	428a      	cmp	r2, r1
   30860:	d1f9      	bne.n	30856 <strchr+0x4>
   30862:	4770      	bx	lr
   30864:	2900      	cmp	r1, #0
   30866:	bf18      	it	ne
   30868:	2000      	movne	r0, #0
   3086a:	4770      	bx	lr

0003086c <strcpy>:
   3086c:	4603      	mov	r3, r0
   3086e:	f811 2b01 	ldrb.w	r2, [r1], #1
   30872:	f803 2b01 	strb.w	r2, [r3], #1
   30876:	2a00      	cmp	r2, #0
   30878:	d1f9      	bne.n	3086e <strcpy+0x2>
   3087a:	4770      	bx	lr

0003087c <strcspn>:
   3087c:	4603      	mov	r3, r0
   3087e:	b570      	push	{r4, r5, r6, lr}
   30880:	461e      	mov	r6, r3
   30882:	f813 4b01 	ldrb.w	r4, [r3], #1
   30886:	b144      	cbz	r4, 3089a <strcspn+0x1e>
   30888:	1e4a      	subs	r2, r1, #1
   3088a:	e001      	b.n	30890 <strcspn+0x14>
   3088c:	42a5      	cmp	r5, r4
   3088e:	d004      	beq.n	3089a <strcspn+0x1e>
   30890:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   30894:	2d00      	cmp	r5, #0
   30896:	d1f9      	bne.n	3088c <strcspn+0x10>
   30898:	e7f2      	b.n	30880 <strcspn+0x4>
   3089a:	1a30      	subs	r0, r6, r0
   3089c:	bd70      	pop	{r4, r5, r6, pc}

0003089e <strncmp>:
   3089e:	b510      	push	{r4, lr}
   308a0:	b16a      	cbz	r2, 308be <strncmp+0x20>
   308a2:	3901      	subs	r1, #1
   308a4:	1884      	adds	r4, r0, r2
   308a6:	f810 2b01 	ldrb.w	r2, [r0], #1
   308aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   308ae:	429a      	cmp	r2, r3
   308b0:	d103      	bne.n	308ba <strncmp+0x1c>
   308b2:	42a0      	cmp	r0, r4
   308b4:	d001      	beq.n	308ba <strncmp+0x1c>
   308b6:	2a00      	cmp	r2, #0
   308b8:	d1f5      	bne.n	308a6 <strncmp+0x8>
   308ba:	1ad0      	subs	r0, r2, r3
   308bc:	bd10      	pop	{r4, pc}
   308be:	4610      	mov	r0, r2
   308c0:	e7fc      	b.n	308bc <strncmp+0x1e>

000308c2 <strncpy>:
   308c2:	3901      	subs	r1, #1
   308c4:	4603      	mov	r3, r0
   308c6:	b510      	push	{r4, lr}
   308c8:	b132      	cbz	r2, 308d8 <strncpy+0x16>
   308ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   308ce:	3a01      	subs	r2, #1
   308d0:	f803 4b01 	strb.w	r4, [r3], #1
   308d4:	2c00      	cmp	r4, #0
   308d6:	d1f7      	bne.n	308c8 <strncpy+0x6>
   308d8:	441a      	add	r2, r3
   308da:	2100      	movs	r1, #0
   308dc:	4293      	cmp	r3, r2
   308de:	d100      	bne.n	308e2 <strncpy+0x20>
   308e0:	bd10      	pop	{r4, pc}
   308e2:	f803 1b01 	strb.w	r1, [r3], #1
   308e6:	e7f9      	b.n	308dc <strncpy+0x1a>

000308e8 <strnlen>:
   308e8:	4602      	mov	r2, r0
   308ea:	4401      	add	r1, r0
   308ec:	b510      	push	{r4, lr}
   308ee:	428a      	cmp	r2, r1
   308f0:	4613      	mov	r3, r2
   308f2:	d003      	beq.n	308fc <strnlen+0x14>
   308f4:	781c      	ldrb	r4, [r3, #0]
   308f6:	3201      	adds	r2, #1
   308f8:	2c00      	cmp	r4, #0
   308fa:	d1f8      	bne.n	308ee <strnlen+0x6>
   308fc:	1a18      	subs	r0, r3, r0
   308fe:	bd10      	pop	{r4, pc}

00030900 <strspn>:
   30900:	4603      	mov	r3, r0
   30902:	b570      	push	{r4, r5, r6, lr}
   30904:	461e      	mov	r6, r3
   30906:	f813 4b01 	ldrb.w	r4, [r3], #1
   3090a:	b13c      	cbz	r4, 3091c <strspn+0x1c>
   3090c:	1e4a      	subs	r2, r1, #1
   3090e:	e001      	b.n	30914 <strspn+0x14>
   30910:	42a5      	cmp	r5, r4
   30912:	d0f7      	beq.n	30904 <strspn+0x4>
   30914:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   30918:	2d00      	cmp	r5, #0
   3091a:	d1f9      	bne.n	30910 <strspn+0x10>
   3091c:	1a30      	subs	r0, r6, r0
   3091e:	bd70      	pop	{r4, r5, r6, pc}

00030920 <quorem>:
   30920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30924:	6903      	ldr	r3, [r0, #16]
   30926:	4607      	mov	r7, r0
   30928:	690c      	ldr	r4, [r1, #16]
   3092a:	42a3      	cmp	r3, r4
   3092c:	f2c0 8083 	blt.w	30a36 <quorem+0x116>
   30930:	3c01      	subs	r4, #1
   30932:	f100 0514 	add.w	r5, r0, #20
   30936:	f101 0814 	add.w	r8, r1, #20
   3093a:	00a3      	lsls	r3, r4, #2
   3093c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   30944:	9300      	str	r3, [sp, #0]
   30946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3094a:	9301      	str	r3, [sp, #4]
   3094c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   30950:	3301      	adds	r3, #1
   30952:	429a      	cmp	r2, r3
   30954:	fbb2 f6f3 	udiv	r6, r2, r3
   30958:	d331      	bcc.n	309be <quorem+0x9e>
   3095a:	f04f 0a00 	mov.w	sl, #0
   3095e:	46c4      	mov	ip, r8
   30960:	46ae      	mov	lr, r5
   30962:	46d3      	mov	fp, sl
   30964:	f85c 3b04 	ldr.w	r3, [ip], #4
   30968:	b298      	uxth	r0, r3
   3096a:	45e1      	cmp	r9, ip
   3096c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   30970:	fb06 a000 	mla	r0, r6, r0, sl
   30974:	ea4f 4210 	mov.w	r2, r0, lsr #16
   30978:	b280      	uxth	r0, r0
   3097a:	fb06 2303 	mla	r3, r6, r3, r2
   3097e:	f8de 2000 	ldr.w	r2, [lr]
   30982:	b292      	uxth	r2, r2
   30984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   30988:	eba2 0200 	sub.w	r2, r2, r0
   3098c:	b29b      	uxth	r3, r3
   3098e:	f8de 0000 	ldr.w	r0, [lr]
   30992:	445a      	add	r2, fp
   30994:	ebc3 4322 	rsb	r3, r3, r2, asr #16
   30998:	b292      	uxth	r2, r2
   3099a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
   3099e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   309a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
   309a6:	f84e 2b04 	str.w	r2, [lr], #4
   309aa:	d2db      	bcs.n	30964 <quorem+0x44>
   309ac:	9b00      	ldr	r3, [sp, #0]
   309ae:	58eb      	ldr	r3, [r5, r3]
   309b0:	b92b      	cbnz	r3, 309be <quorem+0x9e>
   309b2:	9b01      	ldr	r3, [sp, #4]
   309b4:	3b04      	subs	r3, #4
   309b6:	429d      	cmp	r5, r3
   309b8:	461a      	mov	r2, r3
   309ba:	d330      	bcc.n	30a1e <quorem+0xfe>
   309bc:	613c      	str	r4, [r7, #16]
   309be:	4638      	mov	r0, r7
   309c0:	f000 f8bf 	bl	30b42 <__mcmp>
   309c4:	2800      	cmp	r0, #0
   309c6:	db26      	blt.n	30a16 <quorem+0xf6>
   309c8:	4629      	mov	r1, r5
   309ca:	2000      	movs	r0, #0
   309cc:	f858 2b04 	ldr.w	r2, [r8], #4
   309d0:	f8d1 c000 	ldr.w	ip, [r1]
   309d4:	fa1f fe82 	uxth.w	lr, r2
   309d8:	45c1      	cmp	r9, r8
   309da:	fa1f f38c 	uxth.w	r3, ip
   309de:	ea4f 4212 	mov.w	r2, r2, lsr #16
   309e2:	eba3 030e 	sub.w	r3, r3, lr
   309e6:	4403      	add	r3, r0
   309e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   309ec:	b29b      	uxth	r3, r3
   309ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   309f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   309f6:	ea4f 4022 	mov.w	r0, r2, asr #16
   309fa:	f841 3b04 	str.w	r3, [r1], #4
   309fe:	d2e5      	bcs.n	309cc <quorem+0xac>
   30a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   30a04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   30a08:	b922      	cbnz	r2, 30a14 <quorem+0xf4>
   30a0a:	3b04      	subs	r3, #4
   30a0c:	429d      	cmp	r5, r3
   30a0e:	461a      	mov	r2, r3
   30a10:	d30b      	bcc.n	30a2a <quorem+0x10a>
   30a12:	613c      	str	r4, [r7, #16]
   30a14:	3601      	adds	r6, #1
   30a16:	4630      	mov	r0, r6
   30a18:	b003      	add	sp, #12
   30a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a1e:	6812      	ldr	r2, [r2, #0]
   30a20:	3b04      	subs	r3, #4
   30a22:	2a00      	cmp	r2, #0
   30a24:	d1ca      	bne.n	309bc <quorem+0x9c>
   30a26:	3c01      	subs	r4, #1
   30a28:	e7c5      	b.n	309b6 <quorem+0x96>
   30a2a:	6812      	ldr	r2, [r2, #0]
   30a2c:	3b04      	subs	r3, #4
   30a2e:	2a00      	cmp	r2, #0
   30a30:	d1ef      	bne.n	30a12 <quorem+0xf2>
   30a32:	3c01      	subs	r4, #1
   30a34:	e7ea      	b.n	30a0c <quorem+0xec>
   30a36:	2000      	movs	r0, #0
   30a38:	e7ee      	b.n	30a18 <quorem+0xf8>

00030a3a <__sfmoreglue>:
   30a3a:	b570      	push	{r4, r5, r6, lr}
   30a3c:	2368      	movs	r3, #104	; 0x68
   30a3e:	1e4d      	subs	r5, r1, #1
   30a40:	460e      	mov	r6, r1
   30a42:	435d      	muls	r5, r3
   30a44:	f105 0174 	add.w	r1, r5, #116	; 0x74
   30a48:	f7f7 fe9e 	bl	28788 <_malloc_r>
   30a4c:	4604      	mov	r4, r0
   30a4e:	b140      	cbz	r0, 30a62 <__sfmoreglue+0x28>
   30a50:	2100      	movs	r1, #0
   30a52:	f105 0268 	add.w	r2, r5, #104	; 0x68
   30a56:	e9c0 1600 	strd	r1, r6, [r0]
   30a5a:	300c      	adds	r0, #12
   30a5c:	60a0      	str	r0, [r4, #8]
   30a5e:	f7ff fdd0 	bl	30602 <memset>
   30a62:	4620      	mov	r0, r4
   30a64:	bd70      	pop	{r4, r5, r6, pc}

00030a66 <_fwalk_reent>:
   30a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30a6a:	4606      	mov	r6, r0
   30a6c:	4688      	mov	r8, r1
   30a6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   30a72:	2700      	movs	r7, #0
   30a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   30a78:	f1b9 0901 	subs.w	r9, r9, #1
   30a7c:	d505      	bpl.n	30a8a <_fwalk_reent+0x24>
   30a7e:	6824      	ldr	r4, [r4, #0]
   30a80:	2c00      	cmp	r4, #0
   30a82:	d1f7      	bne.n	30a74 <_fwalk_reent+0xe>
   30a84:	4638      	mov	r0, r7
   30a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30a8a:	89ab      	ldrh	r3, [r5, #12]
   30a8c:	2b01      	cmp	r3, #1
   30a8e:	d907      	bls.n	30aa0 <_fwalk_reent+0x3a>
   30a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   30a94:	3301      	adds	r3, #1
   30a96:	d003      	beq.n	30aa0 <_fwalk_reent+0x3a>
   30a98:	4629      	mov	r1, r5
   30a9a:	4630      	mov	r0, r6
   30a9c:	47c0      	blx	r8
   30a9e:	4307      	orrs	r7, r0
   30aa0:	3568      	adds	r5, #104	; 0x68
   30aa2:	e7e9      	b.n	30a78 <_fwalk_reent+0x12>

00030aa4 <__hi0bits>:
   30aa4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   30aa8:	4603      	mov	r3, r0
   30aaa:	bf36      	itet	cc
   30aac:	0403      	lslcc	r3, r0, #16
   30aae:	2000      	movcs	r0, #0
   30ab0:	2010      	movcc	r0, #16
   30ab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   30ab6:	bf3c      	itt	cc
   30ab8:	021b      	lslcc	r3, r3, #8
   30aba:	3008      	addcc	r0, #8
   30abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   30ac0:	bf3c      	itt	cc
   30ac2:	011b      	lslcc	r3, r3, #4
   30ac4:	3004      	addcc	r0, #4
   30ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   30aca:	d303      	bcc.n	30ad4 <__hi0bits+0x30>
   30acc:	2b00      	cmp	r3, #0
   30ace:	db0a      	blt.n	30ae6 <__hi0bits+0x42>
   30ad0:	3001      	adds	r0, #1
   30ad2:	4770      	bx	lr
   30ad4:	009b      	lsls	r3, r3, #2
   30ad6:	d501      	bpl.n	30adc <__hi0bits+0x38>
   30ad8:	3002      	adds	r0, #2
   30ada:	4770      	bx	lr
   30adc:	005b      	lsls	r3, r3, #1
   30ade:	d501      	bpl.n	30ae4 <__hi0bits+0x40>
   30ae0:	3003      	adds	r0, #3
   30ae2:	4770      	bx	lr
   30ae4:	2020      	movs	r0, #32
   30ae6:	4770      	bx	lr

00030ae8 <__lo0bits>:
   30ae8:	6803      	ldr	r3, [r0, #0]
   30aea:	4602      	mov	r2, r0
   30aec:	f013 0007 	ands.w	r0, r3, #7
   30af0:	d00b      	beq.n	30b0a <__lo0bits+0x22>
   30af2:	07d9      	lsls	r1, r3, #31
   30af4:	d421      	bmi.n	30b3a <__lo0bits+0x52>
   30af6:	0798      	lsls	r0, r3, #30
   30af8:	bf47      	ittee	mi
   30afa:	085b      	lsrmi	r3, r3, #1
   30afc:	2001      	movmi	r0, #1
   30afe:	089b      	lsrpl	r3, r3, #2
   30b00:	2002      	movpl	r0, #2
   30b02:	bf4c      	ite	mi
   30b04:	6013      	strmi	r3, [r2, #0]
   30b06:	6013      	strpl	r3, [r2, #0]
   30b08:	4770      	bx	lr
   30b0a:	b299      	uxth	r1, r3
   30b0c:	b909      	cbnz	r1, 30b12 <__lo0bits+0x2a>
   30b0e:	0c1b      	lsrs	r3, r3, #16
   30b10:	2010      	movs	r0, #16
   30b12:	b2d9      	uxtb	r1, r3
   30b14:	b909      	cbnz	r1, 30b1a <__lo0bits+0x32>
   30b16:	3008      	adds	r0, #8
   30b18:	0a1b      	lsrs	r3, r3, #8
   30b1a:	0719      	lsls	r1, r3, #28
   30b1c:	bf04      	itt	eq
   30b1e:	091b      	lsreq	r3, r3, #4
   30b20:	3004      	addeq	r0, #4
   30b22:	0799      	lsls	r1, r3, #30
   30b24:	bf04      	itt	eq
   30b26:	089b      	lsreq	r3, r3, #2
   30b28:	3002      	addeq	r0, #2
   30b2a:	07d9      	lsls	r1, r3, #31
   30b2c:	d403      	bmi.n	30b36 <__lo0bits+0x4e>
   30b2e:	085b      	lsrs	r3, r3, #1
   30b30:	f100 0001 	add.w	r0, r0, #1
   30b34:	d003      	beq.n	30b3e <__lo0bits+0x56>
   30b36:	6013      	str	r3, [r2, #0]
   30b38:	4770      	bx	lr
   30b3a:	2000      	movs	r0, #0
   30b3c:	4770      	bx	lr
   30b3e:	2020      	movs	r0, #32
   30b40:	4770      	bx	lr

00030b42 <__mcmp>:
   30b42:	4603      	mov	r3, r0
   30b44:	690a      	ldr	r2, [r1, #16]
   30b46:	6900      	ldr	r0, [r0, #16]
   30b48:	1a80      	subs	r0, r0, r2
   30b4a:	b530      	push	{r4, r5, lr}
   30b4c:	d10e      	bne.n	30b6c <__mcmp+0x2a>
   30b4e:	3314      	adds	r3, #20
   30b50:	3114      	adds	r1, #20
   30b52:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   30b56:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   30b5a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   30b5e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   30b62:	4295      	cmp	r5, r2
   30b64:	d003      	beq.n	30b6e <__mcmp+0x2c>
   30b66:	d205      	bcs.n	30b74 <__mcmp+0x32>
   30b68:	f04f 30ff 	mov.w	r0, #4294967295
   30b6c:	bd30      	pop	{r4, r5, pc}
   30b6e:	42a3      	cmp	r3, r4
   30b70:	d3f3      	bcc.n	30b5a <__mcmp+0x18>
   30b72:	e7fb      	b.n	30b6c <__mcmp+0x2a>
   30b74:	2001      	movs	r0, #1
   30b76:	e7f9      	b.n	30b6c <__mcmp+0x2a>

00030b78 <__sfputc_r>:
   30b78:	6893      	ldr	r3, [r2, #8]
   30b7a:	3b01      	subs	r3, #1
   30b7c:	2b00      	cmp	r3, #0
   30b7e:	6093      	str	r3, [r2, #8]
   30b80:	b410      	push	{r4}
   30b82:	da07      	bge.n	30b94 <__sfputc_r+0x1c>
   30b84:	6994      	ldr	r4, [r2, #24]
   30b86:	42a3      	cmp	r3, r4
   30b88:	db01      	blt.n	30b8e <__sfputc_r+0x16>
   30b8a:	290a      	cmp	r1, #10
   30b8c:	d102      	bne.n	30b94 <__sfputc_r+0x1c>
   30b8e:	bc10      	pop	{r4}
   30b90:	f7f8 bfa6 	b.w	29ae0 <__swbuf_r>
   30b94:	6813      	ldr	r3, [r2, #0]
   30b96:	1c58      	adds	r0, r3, #1
   30b98:	6010      	str	r0, [r2, #0]
   30b9a:	4608      	mov	r0, r1
   30b9c:	7019      	strb	r1, [r3, #0]
   30b9e:	bc10      	pop	{r4}
   30ba0:	4770      	bx	lr

00030ba2 <__sfputs_r>:
   30ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30ba4:	4606      	mov	r6, r0
   30ba6:	460f      	mov	r7, r1
   30ba8:	4614      	mov	r4, r2
   30baa:	18d5      	adds	r5, r2, r3
   30bac:	42ac      	cmp	r4, r5
   30bae:	d101      	bne.n	30bb4 <__sfputs_r+0x12>
   30bb0:	2000      	movs	r0, #0
   30bb2:	e007      	b.n	30bc4 <__sfputs_r+0x22>
   30bb4:	463a      	mov	r2, r7
   30bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   30bba:	4630      	mov	r0, r6
   30bbc:	f7ff ffdc 	bl	30b78 <__sfputc_r>
   30bc0:	1c43      	adds	r3, r0, #1
   30bc2:	d1f3      	bne.n	30bac <__sfputs_r+0xa>
   30bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030bc6 <__sread>:
   30bc6:	b510      	push	{r4, lr}
   30bc8:	460c      	mov	r4, r1
   30bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30bce:	f7f9 f8f5 	bl	29dbc <_read_r>
   30bd2:	2800      	cmp	r0, #0
   30bd4:	bfab      	itete	ge
   30bd6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   30bd8:	89a3      	ldrhlt	r3, [r4, #12]
   30bda:	181b      	addge	r3, r3, r0
   30bdc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   30be0:	bfac      	ite	ge
   30be2:	6563      	strge	r3, [r4, #84]	; 0x54
   30be4:	81a3      	strhlt	r3, [r4, #12]
   30be6:	bd10      	pop	{r4, pc}

00030be8 <__swrite>:
   30be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30bec:	461f      	mov	r7, r3
   30bee:	898b      	ldrh	r3, [r1, #12]
   30bf0:	4605      	mov	r5, r0
   30bf2:	460c      	mov	r4, r1
   30bf4:	05db      	lsls	r3, r3, #23
   30bf6:	4616      	mov	r6, r2
   30bf8:	d505      	bpl.n	30c06 <__swrite+0x1e>
   30bfa:	2302      	movs	r3, #2
   30bfc:	2200      	movs	r2, #0
   30bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30c02:	f7f9 f889 	bl	29d18 <_lseek_r>
   30c06:	89a3      	ldrh	r3, [r4, #12]
   30c08:	4632      	mov	r2, r6
   30c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   30c0e:	4628      	mov	r0, r5
   30c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   30c14:	81a3      	strh	r3, [r4, #12]
   30c16:	463b      	mov	r3, r7
   30c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   30c1c:	f7f8 bfb2 	b.w	29b84 <_write_r>

00030c20 <__sseek>:
   30c20:	b510      	push	{r4, lr}
   30c22:	460c      	mov	r4, r1
   30c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30c28:	f7f9 f876 	bl	29d18 <_lseek_r>
   30c2c:	1c43      	adds	r3, r0, #1
   30c2e:	89a3      	ldrh	r3, [r4, #12]
   30c30:	bf15      	itete	ne
   30c32:	6560      	strne	r0, [r4, #84]	; 0x54
   30c34:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   30c38:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   30c3c:	81a3      	strheq	r3, [r4, #12]
   30c3e:	bf18      	it	ne
   30c40:	81a3      	strhne	r3, [r4, #12]
   30c42:	bd10      	pop	{r4, pc}

00030c44 <__sclose>:
   30c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30c48:	f7f9 b81a 	b.w	29c80 <_close_r>

00030c4c <abort>:
   30c4c:	2006      	movs	r0, #6
   30c4e:	b508      	push	{r3, lr}
   30c50:	f7f9 f8c6 	bl	29de0 <raise>
   30c54:	2001      	movs	r0, #1
   30c56:	f7e0 fe81 	bl	1195c <_exit>

00030c5a <__sflush_r>:
   30c5a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   30c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30c60:	0717      	lsls	r7, r2, #28
   30c62:	4605      	mov	r5, r0
   30c64:	460c      	mov	r4, r1
   30c66:	d456      	bmi.n	30d16 <__sflush_r+0xbc>
   30c68:	684b      	ldr	r3, [r1, #4]
   30c6a:	2b00      	cmp	r3, #0
   30c6c:	dc02      	bgt.n	30c74 <__sflush_r+0x1a>
   30c6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   30c70:	2b00      	cmp	r3, #0
   30c72:	dd3d      	ble.n	30cf0 <__sflush_r+0x96>
   30c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30c76:	2e00      	cmp	r6, #0
   30c78:	d03a      	beq.n	30cf0 <__sflush_r+0x96>
   30c7a:	2300      	movs	r3, #0
   30c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   30c80:	682f      	ldr	r7, [r5, #0]
   30c82:	6a21      	ldr	r1, [r4, #32]
   30c84:	602b      	str	r3, [r5, #0]
   30c86:	d025      	beq.n	30cd4 <__sflush_r+0x7a>
   30c88:	6d62      	ldr	r2, [r4, #84]	; 0x54
   30c8a:	89a3      	ldrh	r3, [r4, #12]
   30c8c:	0758      	lsls	r0, r3, #29
   30c8e:	d505      	bpl.n	30c9c <__sflush_r+0x42>
   30c90:	6863      	ldr	r3, [r4, #4]
   30c92:	1ad2      	subs	r2, r2, r3
   30c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   30c96:	b10b      	cbz	r3, 30c9c <__sflush_r+0x42>
   30c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
   30c9a:	1ad2      	subs	r2, r2, r3
   30c9c:	6a21      	ldr	r1, [r4, #32]
   30c9e:	2300      	movs	r3, #0
   30ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   30ca2:	4628      	mov	r0, r5
   30ca4:	47b0      	blx	r6
   30ca6:	1c41      	adds	r1, r0, #1
   30ca8:	d024      	beq.n	30cf4 <__sflush_r+0x9a>
   30caa:	2300      	movs	r3, #0
   30cac:	6063      	str	r3, [r4, #4]
   30cae:	6923      	ldr	r3, [r4, #16]
   30cb0:	6023      	str	r3, [r4, #0]
   30cb2:	89a3      	ldrh	r3, [r4, #12]
   30cb4:	04da      	lsls	r2, r3, #19
   30cb6:	d500      	bpl.n	30cba <__sflush_r+0x60>
   30cb8:	6560      	str	r0, [r4, #84]	; 0x54
   30cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
   30cbc:	602f      	str	r7, [r5, #0]
   30cbe:	b1b9      	cbz	r1, 30cf0 <__sflush_r+0x96>
   30cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   30cc4:	4299      	cmp	r1, r3
   30cc6:	d002      	beq.n	30cce <__sflush_r+0x74>
   30cc8:	4628      	mov	r0, r5
   30cca:	f7f7 fd13 	bl	286f4 <_free_r>
   30cce:	2300      	movs	r3, #0
   30cd0:	6363      	str	r3, [r4, #52]	; 0x34
   30cd2:	e00d      	b.n	30cf0 <__sflush_r+0x96>
   30cd4:	2301      	movs	r3, #1
   30cd6:	4628      	mov	r0, r5
   30cd8:	47b0      	blx	r6
   30cda:	1c46      	adds	r6, r0, #1
   30cdc:	4602      	mov	r2, r0
   30cde:	d1d4      	bne.n	30c8a <__sflush_r+0x30>
   30ce0:	682b      	ldr	r3, [r5, #0]
   30ce2:	2b00      	cmp	r3, #0
   30ce4:	d0d1      	beq.n	30c8a <__sflush_r+0x30>
   30ce6:	2b1d      	cmp	r3, #29
   30ce8:	d001      	beq.n	30cee <__sflush_r+0x94>
   30cea:	2b16      	cmp	r3, #22
   30cec:	d129      	bne.n	30d42 <__sflush_r+0xe8>
   30cee:	602f      	str	r7, [r5, #0]
   30cf0:	2000      	movs	r0, #0
   30cf2:	e02d      	b.n	30d50 <__sflush_r+0xf6>
   30cf4:	682a      	ldr	r2, [r5, #0]
   30cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30cfa:	b142      	cbz	r2, 30d0e <__sflush_r+0xb4>
   30cfc:	2a1d      	cmp	r2, #29
   30cfe:	d001      	beq.n	30d04 <__sflush_r+0xaa>
   30d00:	2a16      	cmp	r2, #22
   30d02:	d120      	bne.n	30d46 <__sflush_r+0xec>
   30d04:	2300      	movs	r3, #0
   30d06:	6063      	str	r3, [r4, #4]
   30d08:	6923      	ldr	r3, [r4, #16]
   30d0a:	6023      	str	r3, [r4, #0]
   30d0c:	e7d5      	b.n	30cba <__sflush_r+0x60>
   30d0e:	6062      	str	r2, [r4, #4]
   30d10:	6922      	ldr	r2, [r4, #16]
   30d12:	6022      	str	r2, [r4, #0]
   30d14:	e7ce      	b.n	30cb4 <__sflush_r+0x5a>
   30d16:	690f      	ldr	r7, [r1, #16]
   30d18:	2f00      	cmp	r7, #0
   30d1a:	d0e9      	beq.n	30cf0 <__sflush_r+0x96>
   30d1c:	0793      	lsls	r3, r2, #30
   30d1e:	680e      	ldr	r6, [r1, #0]
   30d20:	600f      	str	r7, [r1, #0]
   30d22:	bf0c      	ite	eq
   30d24:	694b      	ldreq	r3, [r1, #20]
   30d26:	2300      	movne	r3, #0
   30d28:	1bf6      	subs	r6, r6, r7
   30d2a:	608b      	str	r3, [r1, #8]
   30d2c:	2e00      	cmp	r6, #0
   30d2e:	dddf      	ble.n	30cf0 <__sflush_r+0x96>
   30d30:	4633      	mov	r3, r6
   30d32:	463a      	mov	r2, r7
   30d34:	6a21      	ldr	r1, [r4, #32]
   30d36:	4628      	mov	r0, r5
   30d38:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   30d3c:	47e0      	blx	ip
   30d3e:	2800      	cmp	r0, #0
   30d40:	dc07      	bgt.n	30d52 <__sflush_r+0xf8>
   30d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   30d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30d4a:	f04f 30ff 	mov.w	r0, #4294967295
   30d4e:	81a3      	strh	r3, [r4, #12]
   30d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30d52:	4407      	add	r7, r0
   30d54:	1a36      	subs	r6, r6, r0
   30d56:	e7e9      	b.n	30d2c <__sflush_r+0xd2>

00030d58 <__swhatbuf_r>:
   30d58:	b570      	push	{r4, r5, r6, lr}
   30d5a:	460c      	mov	r4, r1
   30d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   30d60:	b096      	sub	sp, #88	; 0x58
   30d62:	4615      	mov	r5, r2
   30d64:	2900      	cmp	r1, #0
   30d66:	461e      	mov	r6, r3
   30d68:	da0c      	bge.n	30d84 <__swhatbuf_r+0x2c>
   30d6a:	89a3      	ldrh	r3, [r4, #12]
   30d6c:	2100      	movs	r1, #0
   30d6e:	f013 0f80 	tst.w	r3, #128	; 0x80
   30d72:	bf14      	ite	ne
   30d74:	2340      	movne	r3, #64	; 0x40
   30d76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
   30d7a:	2000      	movs	r0, #0
   30d7c:	6031      	str	r1, [r6, #0]
   30d7e:	602b      	str	r3, [r5, #0]
   30d80:	b016      	add	sp, #88	; 0x58
   30d82:	bd70      	pop	{r4, r5, r6, pc}
   30d84:	466a      	mov	r2, sp
   30d86:	f7f9 f845 	bl	29e14 <_fstat_r>
   30d8a:	2800      	cmp	r0, #0
   30d8c:	dbed      	blt.n	30d6a <__swhatbuf_r+0x12>
   30d8e:	9901      	ldr	r1, [sp, #4]
   30d90:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
   30d94:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
   30d98:	4259      	negs	r1, r3
   30d9a:	4159      	adcs	r1, r3
   30d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   30da0:	e7eb      	b.n	30d7a <__swhatbuf_r+0x22>

00030da2 <__ascii_mbtowc>:
   30da2:	b082      	sub	sp, #8
   30da4:	b901      	cbnz	r1, 30da8 <__ascii_mbtowc+0x6>
   30da6:	a901      	add	r1, sp, #4
   30da8:	b142      	cbz	r2, 30dbc <__ascii_mbtowc+0x1a>
   30daa:	b14b      	cbz	r3, 30dc0 <__ascii_mbtowc+0x1e>
   30dac:	7813      	ldrb	r3, [r2, #0]
   30dae:	600b      	str	r3, [r1, #0]
   30db0:	7812      	ldrb	r2, [r2, #0]
   30db2:	1e10      	subs	r0, r2, #0
   30db4:	bf18      	it	ne
   30db6:	2001      	movne	r0, #1
   30db8:	b002      	add	sp, #8
   30dba:	4770      	bx	lr
   30dbc:	4610      	mov	r0, r2
   30dbe:	e7fb      	b.n	30db8 <__ascii_mbtowc+0x16>
   30dc0:	f06f 0001 	mvn.w	r0, #1
   30dc4:	e7f8      	b.n	30db8 <__ascii_mbtowc+0x16>

00030dc6 <_raise_r>:
   30dc6:	291f      	cmp	r1, #31
   30dc8:	b538      	push	{r3, r4, r5, lr}
   30dca:	4605      	mov	r5, r0
   30dcc:	460c      	mov	r4, r1
   30dce:	d904      	bls.n	30dda <_raise_r+0x14>
   30dd0:	2316      	movs	r3, #22
   30dd2:	6003      	str	r3, [r0, #0]
   30dd4:	f04f 30ff 	mov.w	r0, #4294967295
   30dd8:	bd38      	pop	{r3, r4, r5, pc}
   30dda:	6c42      	ldr	r2, [r0, #68]	; 0x44
   30ddc:	b112      	cbz	r2, 30de4 <_raise_r+0x1e>
   30dde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   30de2:	b94b      	cbnz	r3, 30df8 <_raise_r+0x32>
   30de4:	4628      	mov	r0, r5
   30de6:	f000 f816 	bl	30e16 <_getpid_r>
   30dea:	4622      	mov	r2, r4
   30dec:	4601      	mov	r1, r0
   30dee:	4628      	mov	r0, r5
   30df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   30df4:	f7f8 bffc 	b.w	29df0 <_kill_r>
   30df8:	2b01      	cmp	r3, #1
   30dfa:	d00a      	beq.n	30e12 <_raise_r+0x4c>
   30dfc:	1c59      	adds	r1, r3, #1
   30dfe:	d103      	bne.n	30e08 <_raise_r+0x42>
   30e00:	2316      	movs	r3, #22
   30e02:	6003      	str	r3, [r0, #0]
   30e04:	2001      	movs	r0, #1
   30e06:	e7e7      	b.n	30dd8 <_raise_r+0x12>
   30e08:	2100      	movs	r1, #0
   30e0a:	4620      	mov	r0, r4
   30e0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   30e10:	4798      	blx	r3
   30e12:	2000      	movs	r0, #0
   30e14:	e7e0      	b.n	30dd8 <_raise_r+0x12>

00030e16 <_getpid_r>:
   30e16:	f7fa bff6 	b.w	2be06 <_getpid>

00030e1a <__ascii_wctomb>:
   30e1a:	4603      	mov	r3, r0
   30e1c:	4608      	mov	r0, r1
   30e1e:	b141      	cbz	r1, 30e32 <__ascii_wctomb+0x18>
   30e20:	2aff      	cmp	r2, #255	; 0xff
   30e22:	d904      	bls.n	30e2e <__ascii_wctomb+0x14>
   30e24:	228a      	movs	r2, #138	; 0x8a
   30e26:	f04f 30ff 	mov.w	r0, #4294967295
   30e2a:	601a      	str	r2, [r3, #0]
   30e2c:	4770      	bx	lr
   30e2e:	2001      	movs	r0, #1
   30e30:	700a      	strb	r2, [r1, #0]
   30e32:	4770      	bx	lr
